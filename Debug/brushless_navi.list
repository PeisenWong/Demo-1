
brushless_navi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fc10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001570  0801fda0  0801fda0  0002fda0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021310  08021310  000402a8  2**0
                  CONTENTS
  4 .ARM          00000008  08021310  08021310  00031310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021318  08021318  000402a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021318  08021318  00031318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802131c  0802131c  0003131c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a8  20000000  08021320  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a274  200002a8  080215c8  000402a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a51c  080215c8  0004a51c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000402a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0008d8fb  00000000  00000000  000402d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009e5a  00000000  00000000  000cdbd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002740  00000000  00000000  000d7a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002490  00000000  00000000  000da170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030de3  00000000  00000000  000dc600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00042164  00000000  00000000  0010d3e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebaa8  00000000  00000000  0014f547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0023afef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bc88  00000000  00000000  0023b044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002a8 	.word	0x200002a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801fd88 	.word	0x0801fd88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002ac 	.word	0x200002ac
 80001cc:	0801fd88 	.word	0x0801fd88

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <ABTInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void ABTInit(float samp_time, float a, float b, float g, float *ip, float *pos, float *vel, float *acc, ABT_t *filt)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	ed87 0a07 	vstr	s0, [r7, #28]
 8000ff6:	edc7 0a06 	vstr	s1, [r7, #24]
 8000ffa:	ed87 1a05 	vstr	s2, [r7, #20]
 8000ffe:	edc7 1a04 	vstr	s3, [r7, #16]
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	603b      	str	r3, [r7, #0]
	filt->sample_time = samp_time;
 800100a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800100c:	69fa      	ldr	r2, [r7, #28]
 800100e:	601a      	str	r2, [r3, #0]
	filt->alpha = a;
 8001010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	605a      	str	r2, [r3, #4]
	filt->beta = b;
 8001016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	609a      	str	r2, [r3, #8]
	filt->gamma = g;
 800101c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	60da      	str	r2, [r3, #12]
	filt->input = ip;
 8001022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	611a      	str	r2, [r3, #16]
	filt->pos_output = pos;
 8001028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	615a      	str	r2, [r3, #20]
	filt->vel_output = vel;
 800102e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	619a      	str	r2, [r3, #24]
	filt->acc_output = acc;
 8001034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	61da      	str	r2, [r3, #28]
}
 800103a:	bf00      	nop
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <ABTEstimateInit>:

void ABTEstimateInit(ABT_t *filt)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
	*(filt->pos_output) = 0;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
	*(filt->vel_output) = 0;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
	*(filt->acc_output) = 0;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <ABT>:

void ABT(ABT_t *filt)
{
 8001078:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800107c:	b086      	sub	sp, #24
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
	float pos_residual;
	float pos_predict;
	float vel_predict;

	/* Predict position and velocity using previous sample values */
	pos_predict = *(filt->pos_output) + filt->sample_time *
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	ed93 7a00 	vldr	s14, [r3]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	edd3 6a00 	vldr	s13, [r3]
								(*(filt->vel_output)) + filt->sample_time *
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	edd3 7a00 	vldr	s15, [r3]
	pos_predict = *(filt->pos_output) + filt->sample_time *
 8001098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800109c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a0:	ee17 0a90 	vmov	r0, s15
 80010a4:	f7ff fa50 	bl	8000548 <__aeabi_f2d>
 80010a8:	4604      	mov	r4, r0
 80010aa:	460d      	mov	r5, r1
								(*(filt->vel_output)) + filt->sample_time *
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	ed93 7a00 	vldr	s14, [r3]
								filt->sample_time * 0.5 * (*(filt->acc_output));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	edd3 7a00 	vldr	s15, [r3]
								(*(filt->vel_output)) + filt->sample_time *
 80010b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010bc:	ee17 0a90 	vmov	r0, s15
 80010c0:	f7ff fa42 	bl	8000548 <__aeabi_f2d>
								filt->sample_time * 0.5 * (*(filt->acc_output));
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	4b54      	ldr	r3, [pc, #336]	; (800121c <ABT+0x1a4>)
 80010ca:	f7ff fa95 	bl	80005f8 <__aeabi_dmul>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4690      	mov	r8, r2
 80010d4:	4699      	mov	r9, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fa33 	bl	8000548 <__aeabi_f2d>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4640      	mov	r0, r8
 80010e8:	4649      	mov	r1, r9
 80010ea:	f7ff fa85 	bl	80005f8 <__aeabi_dmul>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
								(*(filt->vel_output)) + filt->sample_time *
 80010f2:	4620      	mov	r0, r4
 80010f4:	4629      	mov	r1, r5
 80010f6:	f7ff f8c9 	bl	800028c <__adddf3>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
	pos_predict = *(filt->pos_output) + filt->sample_time *
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	f7ff fd71 	bl	8000be8 <__aeabi_d2f>
 8001106:	4603      	mov	r3, r0
 8001108:	617b      	str	r3, [r7, #20]
	vel_predict = *(filt->vel_output) + filt->sample_time * (*(filt->acc_output));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	ed93 7a00 	vldr	s14, [r3]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	edd3 6a00 	vldr	s13, [r3]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	edd3 7a00 	vldr	s15, [r3]
 8001120:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001128:	edc7 7a04 	vstr	s15, [r7, #16]

	/* Calculate residue */
	pos_residual = *filt->input - pos_predict;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	ed93 7a00 	vldr	s14, [r3]
 8001134:	edd7 7a05 	vldr	s15, [r7, #20]
 8001138:	ee77 7a67 	vsub.f32	s15, s14, s15
 800113c:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Update estimate with weighted input (a - b - g) */
	*(filt->pos_output) = pos_predict + filt->alpha * pos_residual;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	ed93 7a01 	vldr	s14, [r3, #4]
 8001146:	edd7 7a03 	vldr	s15, [r7, #12]
 800114a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	edd7 7a05 	vldr	s15, [r7, #20]
 8001156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800115a:	edc3 7a00 	vstr	s15, [r3]
	*(filt->vel_output) = vel_predict + (filt->beta / filt->sample_time)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	edd3 6a02 	vldr	s13, [r3, #8]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	edd3 7a00 	vldr	s15, [r3]
 800116a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
																* pos_residual;
 800116e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001172:	ee27 7a27 	vmul.f32	s14, s14, s15
	*(filt->vel_output) = vel_predict + (filt->beta / filt->sample_time)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	edd7 7a04 	vldr	s15, [r7, #16]
 800117e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001182:	edc3 7a00 	vstr	s15, [r3]
	*(filt->acc_output) = *(filt->acc_output) + (filt->gamma * 0.5 /
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f9db 	bl	8000548 <__aeabi_f2d>
 8001192:	4604      	mov	r4, r0
 8001194:	460d      	mov	r5, r1
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f9d4 	bl	8000548 <__aeabi_f2d>
 80011a0:	f04f 0200 	mov.w	r2, #0
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <ABT+0x1a4>)
 80011a6:	f7ff fa27 	bl	80005f8 <__aeabi_dmul>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4690      	mov	r8, r2
 80011b0:	4699      	mov	r9, r3
						(filt->sample_time * filt->sample_time)) * pos_residual;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	ed93 7a00 	vldr	s14, [r3]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	edd3 7a00 	vldr	s15, [r3]
 80011be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c2:	ee17 0a90 	vmov	r0, s15
 80011c6:	f7ff f9bf 	bl	8000548 <__aeabi_f2d>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
	*(filt->acc_output) = *(filt->acc_output) + (filt->gamma * 0.5 /
 80011ce:	4640      	mov	r0, r8
 80011d0:	4649      	mov	r1, r9
 80011d2:	f7ff fb3b 	bl	800084c <__aeabi_ddiv>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4690      	mov	r8, r2
 80011dc:	4699      	mov	r9, r3
						(filt->sample_time * filt->sample_time)) * pos_residual;
 80011de:	68f8      	ldr	r0, [r7, #12]
 80011e0:	f7ff f9b2 	bl	8000548 <__aeabi_f2d>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4640      	mov	r0, r8
 80011ea:	4649      	mov	r1, r9
 80011ec:	f7ff fa04 	bl	80005f8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
	*(filt->acc_output) = *(filt->acc_output) + (filt->gamma * 0.5 /
 80011f4:	4620      	mov	r0, r4
 80011f6:	4629      	mov	r1, r5
 80011f8:	f7ff f848 	bl	800028c <__adddf3>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69dc      	ldr	r4, [r3, #28]
 8001208:	f7ff fcee 	bl	8000be8 <__aeabi_d2f>
 800120c:	4603      	mov	r3, r0
 800120e:	6023      	str	r3, [r4, #0]
}
 8001210:	bf00      	nop
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800121a:	bf00      	nop
 800121c:	3fe00000 	.word	0x3fe00000

08001220 <BDCInit>:
 * Function Return		: None
 * Function Example		: BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 * 						  BDCInit(&BDC2, &htim3, TIM_CHANNEL_1, GPIO, GPIOA, GPIO_Pin_9, GPIOA, GPIO_Pin_10);
 */

void BDCInit(BDC_t* bdc,TIM_HandleTypeDef* htimx,uint32_t Channel, BCDDIRPINType Dirpintype, ...){
 8001220:	b408      	push	{r3}
 8001222:	b580      	push	{r7, lr}
 8001224:	b089      	sub	sp, #36	; 0x24
 8001226:	af02      	add	r7, sp, #8
 8001228:	60f8      	str	r0, [r7, #12]
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	607a      	str	r2, [r7, #4]

	bdc->htim = htimx;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	61da      	str	r2, [r3, #28]
	bdc->Channel = Channel;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	621a      	str	r2, [r3, #32]
	bdc->Dirpintype =  Dirpintype;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001240:	701a      	strb	r2, [r3, #0]

	va_list pinconfig;
	va_start(pinconfig, Dirpintype);
 8001242:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001246:	617b      	str	r3, [r7, #20]

	if( bdc->Dirpintype == GPIO){
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d12e      	bne.n	80012ae <BDCInit+0x8e>

		bdc->GPIOx_DIR1 = va_arg(pinconfig, GPIO_TypeDef*);
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	1d1a      	adds	r2, r3, #4
 8001254:	617a      	str	r2, [r7, #20]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	605a      	str	r2, [r3, #4]
		bdc->GPIO_Pin_DIR1	= va_arg(pinconfig, int);
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	1d1a      	adds	r2, r3, #4
 8001260:	617a      	str	r2, [r7, #20]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	b29a      	uxth	r2, r3
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	811a      	strh	r2, [r3, #8]
		bdc->GPIOx_DIR2 = va_arg(pinconfig, GPIO_TypeDef*);
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	1d1a      	adds	r2, r3, #4
 800126e:	617a      	str	r2, [r7, #20]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	60da      	str	r2, [r3, #12]
		bdc->GPIO_Pin_DIR2	= va_arg(pinconfig, int);
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	1d1a      	adds	r2, r3, #4
 800127a:	617a      	str	r2, [r7, #20]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	b29a      	uxth	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	821a      	strh	r2, [r3, #16]



		GPIOPinsInit(bdc->GPIOx_DIR1, bdc->GPIO_Pin_DIR1,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6858      	ldr	r0, [r3, #4]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	8919      	ldrh	r1, [r3, #8]
 800128c:	2301      	movs	r3, #1
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2302      	movs	r3, #2
 8001292:	2201      	movs	r2, #1
 8001294:	f000 f84e 	bl	8001334 <GPIOPinsInit>
		GPIOPinsInit(bdc->GPIOx_DIR2, bdc->GPIO_Pin_DIR2,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	68d8      	ldr	r0, [r3, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	8a19      	ldrh	r1, [r3, #16]
 80012a0:	2301      	movs	r3, #1
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	2302      	movs	r3, #2
 80012a6:	2201      	movs	r2, #1
 80012a8:	f000 f844 	bl	8001334 <GPIOPinsInit>
 80012ac:	e017      	b.n	80012de <BDCInit+0xbe>

	}else if(bdc->Dirpintype == SHIFTREG){
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d113      	bne.n	80012de <BDCInit+0xbe>

		bdc->shiftreg = va_arg(pinconfig, byte_t *);
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	1d1a      	adds	r2, r3, #4
 80012ba:	617a      	str	r2, [r7, #20]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	615a      	str	r2, [r3, #20]
		bdc->dir1 = va_arg(pinconfig, int);
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	1d1a      	adds	r2, r3, #4
 80012c6:	617a      	str	r2, [r7, #20]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	761a      	strb	r2, [r3, #24]
		bdc->dir2 = va_arg(pinconfig, int);
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	1d1a      	adds	r2, r3, #4
 80012d4:	617a      	str	r2, [r7, #20]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	765a      	strb	r2, [r3, #25]
	}

	va_end(pinconfig);
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6a1b      	ldr	r3, [r3, #32]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d105      	bne.n	80012f2 <BDCInit+0xd2>
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2200      	movs	r2, #0
 80012ee:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012f0:	e018      	b.n	8001324 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	d105      	bne.n	8001306 <BDCInit+0xe6>
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	2300      	movs	r3, #0
 8001302:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001304:	e00e      	b.n	8001324 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6a1b      	ldr	r3, [r3, #32]
 800130a:	2b08      	cmp	r3, #8
 800130c:	d105      	bne.n	800131a <BDCInit+0xfa>
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	2300      	movs	r3, #0
 8001316:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001318:	e004      	b.n	8001324 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	2300      	movs	r3, #0
 8001322:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001324:	bf00      	nop
 8001326:	371c      	adds	r7, #28
 8001328:	46bd      	mov	sp, r7
 800132a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800132e:	b001      	add	sp, #4
 8001330:	4770      	bx	lr
	...

08001334 <GPIOPinsInit>:
 * Function Return		: None
 * Function Example		: GPIOPinsInit(GPIOA, GPIO_Pin_2, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 */

void GPIOPinsInit (GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin,uint32_t Mode, uint32_t GPIO_Speed,  uint32_t GPIO_PuPd)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b092      	sub	sp, #72	; 0x48
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	460b      	mov	r3, r1
 8001342:	817b      	strh	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]

	switch((uint32_t)GPIOx){
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4a6a      	ldr	r2, [pc, #424]	; (8001500 <GPIOPinsInit+0x1cc>)
 8001358:	4293      	cmp	r3, r2
 800135a:	f000 80af 	beq.w	80014bc <GPIOPinsInit+0x188>
 800135e:	4a68      	ldr	r2, [pc, #416]	; (8001500 <GPIOPinsInit+0x1cc>)
 8001360:	4293      	cmp	r3, r2
 8001362:	f200 80ba 	bhi.w	80014da <GPIOPinsInit+0x1a6>
 8001366:	4a67      	ldr	r2, [pc, #412]	; (8001504 <GPIOPinsInit+0x1d0>)
 8001368:	4293      	cmp	r3, r2
 800136a:	f000 8098 	beq.w	800149e <GPIOPinsInit+0x16a>
 800136e:	4a65      	ldr	r2, [pc, #404]	; (8001504 <GPIOPinsInit+0x1d0>)
 8001370:	4293      	cmp	r3, r2
 8001372:	f200 80b2 	bhi.w	80014da <GPIOPinsInit+0x1a6>
 8001376:	4a64      	ldr	r2, [pc, #400]	; (8001508 <GPIOPinsInit+0x1d4>)
 8001378:	4293      	cmp	r3, r2
 800137a:	f000 8081 	beq.w	8001480 <GPIOPinsInit+0x14c>
 800137e:	4a62      	ldr	r2, [pc, #392]	; (8001508 <GPIOPinsInit+0x1d4>)
 8001380:	4293      	cmp	r3, r2
 8001382:	f200 80aa 	bhi.w	80014da <GPIOPinsInit+0x1a6>
 8001386:	4a61      	ldr	r2, [pc, #388]	; (800150c <GPIOPinsInit+0x1d8>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d06a      	beq.n	8001462 <GPIOPinsInit+0x12e>
 800138c:	4a5f      	ldr	r2, [pc, #380]	; (800150c <GPIOPinsInit+0x1d8>)
 800138e:	4293      	cmp	r3, r2
 8001390:	f200 80a3 	bhi.w	80014da <GPIOPinsInit+0x1a6>
 8001394:	4a5e      	ldr	r2, [pc, #376]	; (8001510 <GPIOPinsInit+0x1dc>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d054      	beq.n	8001444 <GPIOPinsInit+0x110>
 800139a:	4a5d      	ldr	r2, [pc, #372]	; (8001510 <GPIOPinsInit+0x1dc>)
 800139c:	4293      	cmp	r3, r2
 800139e:	f200 809c 	bhi.w	80014da <GPIOPinsInit+0x1a6>
 80013a2:	4a5c      	ldr	r2, [pc, #368]	; (8001514 <GPIOPinsInit+0x1e0>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d03e      	beq.n	8001426 <GPIOPinsInit+0xf2>
 80013a8:	4a5a      	ldr	r2, [pc, #360]	; (8001514 <GPIOPinsInit+0x1e0>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	f200 8095 	bhi.w	80014da <GPIOPinsInit+0x1a6>
 80013b0:	4a59      	ldr	r2, [pc, #356]	; (8001518 <GPIOPinsInit+0x1e4>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d028      	beq.n	8001408 <GPIOPinsInit+0xd4>
 80013b6:	4a58      	ldr	r2, [pc, #352]	; (8001518 <GPIOPinsInit+0x1e4>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	f200 808e 	bhi.w	80014da <GPIOPinsInit+0x1a6>
 80013be:	4a57      	ldr	r2, [pc, #348]	; (800151c <GPIOPinsInit+0x1e8>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d003      	beq.n	80013cc <GPIOPinsInit+0x98>
 80013c4:	4a56      	ldr	r2, [pc, #344]	; (8001520 <GPIOPinsInit+0x1ec>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d00f      	beq.n	80013ea <GPIOPinsInit+0xb6>
	break;

	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
	break;

	default: break;
 80013ca:	e086      	b.n	80014da <GPIOPinsInit+0x1a6>
	case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013cc:	2300      	movs	r3, #0
 80013ce:	633b      	str	r3, [r7, #48]	; 0x30
 80013d0:	4b54      	ldr	r3, [pc, #336]	; (8001524 <GPIOPinsInit+0x1f0>)
 80013d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d4:	4a53      	ldr	r2, [pc, #332]	; (8001524 <GPIOPinsInit+0x1f0>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	6313      	str	r3, [r2, #48]	; 0x30
 80013dc:	4b51      	ldr	r3, [pc, #324]	; (8001524 <GPIOPinsInit+0x1f0>)
 80013de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	633b      	str	r3, [r7, #48]	; 0x30
 80013e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	break;
 80013e8:	e078      	b.n	80014dc <GPIOPinsInit+0x1a8>
	case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ee:	4b4d      	ldr	r3, [pc, #308]	; (8001524 <GPIOPinsInit+0x1f0>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a4c      	ldr	r2, [pc, #304]	; (8001524 <GPIOPinsInit+0x1f0>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b4a      	ldr	r3, [pc, #296]	; (8001524 <GPIOPinsInit+0x1f0>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	break;
 8001406:	e069      	b.n	80014dc <GPIOPinsInit+0x1a8>
	case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001408:	2300      	movs	r3, #0
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
 800140c:	4b45      	ldr	r3, [pc, #276]	; (8001524 <GPIOPinsInit+0x1f0>)
 800140e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001410:	4a44      	ldr	r2, [pc, #272]	; (8001524 <GPIOPinsInit+0x1f0>)
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	6313      	str	r3, [r2, #48]	; 0x30
 8001418:	4b42      	ldr	r3, [pc, #264]	; (8001524 <GPIOPinsInit+0x1f0>)
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	62bb      	str	r3, [r7, #40]	; 0x28
 8001422:	6abb      	ldr	r3, [r7, #40]	; 0x28
	break;
 8001424:	e05a      	b.n	80014dc <GPIOPinsInit+0x1a8>
	case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
 800142a:	4b3e      	ldr	r3, [pc, #248]	; (8001524 <GPIOPinsInit+0x1f0>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a3d      	ldr	r2, [pc, #244]	; (8001524 <GPIOPinsInit+0x1f0>)
 8001430:	f043 0308 	orr.w	r3, r3, #8
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b3b      	ldr	r3, [pc, #236]	; (8001524 <GPIOPinsInit+0x1f0>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	break;
 8001442:	e04b      	b.n	80014dc <GPIOPinsInit+0x1a8>
	case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
 8001448:	4b36      	ldr	r3, [pc, #216]	; (8001524 <GPIOPinsInit+0x1f0>)
 800144a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144c:	4a35      	ldr	r2, [pc, #212]	; (8001524 <GPIOPinsInit+0x1f0>)
 800144e:	f043 0310 	orr.w	r3, r3, #16
 8001452:	6313      	str	r3, [r2, #48]	; 0x30
 8001454:	4b33      	ldr	r3, [pc, #204]	; (8001524 <GPIOPinsInit+0x1f0>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	f003 0310 	and.w	r3, r3, #16
 800145c:	623b      	str	r3, [r7, #32]
 800145e:	6a3b      	ldr	r3, [r7, #32]
	break;
 8001460:	e03c      	b.n	80014dc <GPIOPinsInit+0x1a8>
	case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
 8001466:	4b2f      	ldr	r3, [pc, #188]	; (8001524 <GPIOPinsInit+0x1f0>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a2e      	ldr	r2, [pc, #184]	; (8001524 <GPIOPinsInit+0x1f0>)
 800146c:	f043 0320 	orr.w	r3, r3, #32
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b2c      	ldr	r3, [pc, #176]	; (8001524 <GPIOPinsInit+0x1f0>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0320 	and.w	r3, r3, #32
 800147a:	61fb      	str	r3, [r7, #28]
 800147c:	69fb      	ldr	r3, [r7, #28]
	break;
 800147e:	e02d      	b.n	80014dc <GPIOPinsInit+0x1a8>
	case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001480:	2300      	movs	r3, #0
 8001482:	61bb      	str	r3, [r7, #24]
 8001484:	4b27      	ldr	r3, [pc, #156]	; (8001524 <GPIOPinsInit+0x1f0>)
 8001486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001488:	4a26      	ldr	r2, [pc, #152]	; (8001524 <GPIOPinsInit+0x1f0>)
 800148a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800148e:	6313      	str	r3, [r2, #48]	; 0x30
 8001490:	4b24      	ldr	r3, [pc, #144]	; (8001524 <GPIOPinsInit+0x1f0>)
 8001492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001498:	61bb      	str	r3, [r7, #24]
 800149a:	69bb      	ldr	r3, [r7, #24]
	break;
 800149c:	e01e      	b.n	80014dc <GPIOPinsInit+0x1a8>
	case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	4b20      	ldr	r3, [pc, #128]	; (8001524 <GPIOPinsInit+0x1f0>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a1f      	ldr	r2, [pc, #124]	; (8001524 <GPIOPinsInit+0x1f0>)
 80014a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <GPIOPinsInit+0x1f0>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697b      	ldr	r3, [r7, #20]
	break;
 80014ba:	e00f      	b.n	80014dc <GPIOPinsInit+0x1a8>
	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 80014bc:	2300      	movs	r3, #0
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	4b18      	ldr	r3, [pc, #96]	; (8001524 <GPIOPinsInit+0x1f0>)
 80014c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c4:	4a17      	ldr	r2, [pc, #92]	; (8001524 <GPIOPinsInit+0x1f0>)
 80014c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ca:	6313      	str	r3, [r2, #48]	; 0x30
 80014cc:	4b15      	ldr	r3, [pc, #84]	; (8001524 <GPIOPinsInit+0x1f0>)
 80014ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	693b      	ldr	r3, [r7, #16]
	break;
 80014d8:	e000      	b.n	80014dc <GPIOPinsInit+0x1a8>
	default: break;
 80014da:	bf00      	nop
	}


	GPIO_InitStruct.Pin = GPIO_Pin;
 80014dc:	897b      	ldrh	r3, [r7, #10]
 80014de:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Mode = Mode;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PuPd;
 80014e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_Speed;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80014ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014f0:	4619      	mov	r1, r3
 80014f2:	68f8      	ldr	r0, [r7, #12]
 80014f4:	f00e fcaa 	bl	800fe4c <HAL_GPIO_Init>

}
 80014f8:	bf00      	nop
 80014fa:	3748      	adds	r7, #72	; 0x48
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40022000 	.word	0x40022000
 8001504:	40021c00 	.word	0x40021c00
 8001508:	40021800 	.word	0x40021800
 800150c:	40021400 	.word	0x40021400
 8001510:	40021000 	.word	0x40021000
 8001514:	40020c00 	.word	0x40020c00
 8001518:	40020800 	.word	0x40020800
 800151c:	40020000 	.word	0x40020000
 8001520:	40020400 	.word	0x40020400
 8001524:	40023800 	.word	0x40023800

08001528 <PWMTimeBaseInit>:
 * 						  Prescaler 	Prescaler value to divide TIM clock (1 to 65535)
 * Function Return		: None
 * Function Example		: PWMTimeBaseInit(&htim3, 20000, 84);
 */
void PWMTimeBaseInit(TIM_HandleTypeDef* htimx, uint32_t Period, uint32_t Prescaler)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001534:	f107 0318 	add.w	r3, r7, #24
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001542:	f107 0310 	add.w	r3, r7, #16
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]


	if(htimx == &htim1){
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4a52      	ldr	r2, [pc, #328]	; (8001698 <PWMTimeBaseInit+0x170>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d103      	bne.n	800155c <PWMTimeBaseInit+0x34>
		htimx->Instance = TIM1;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4a51      	ldr	r2, [pc, #324]	; (800169c <PWMTimeBaseInit+0x174>)
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	e057      	b.n	800160c <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim2)	{
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4a50      	ldr	r2, [pc, #320]	; (80016a0 <PWMTimeBaseInit+0x178>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d104      	bne.n	800156e <PWMTimeBaseInit+0x46>
		htimx->Instance = TIM2;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	e04e      	b.n	800160c <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim3)	{
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4a4c      	ldr	r2, [pc, #304]	; (80016a4 <PWMTimeBaseInit+0x17c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d103      	bne.n	800157e <PWMTimeBaseInit+0x56>
		htimx->Instance = TIM3;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4a4b      	ldr	r2, [pc, #300]	; (80016a8 <PWMTimeBaseInit+0x180>)
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	e046      	b.n	800160c <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim4)	{
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4a4a      	ldr	r2, [pc, #296]	; (80016ac <PWMTimeBaseInit+0x184>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d103      	bne.n	800158e <PWMTimeBaseInit+0x66>
		htimx->Instance = TIM4;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	4a49      	ldr	r2, [pc, #292]	; (80016b0 <PWMTimeBaseInit+0x188>)
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	e03e      	b.n	800160c <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim5)	{
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4a48      	ldr	r2, [pc, #288]	; (80016b4 <PWMTimeBaseInit+0x18c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d103      	bne.n	800159e <PWMTimeBaseInit+0x76>
		htimx->Instance = TIM5;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4a47      	ldr	r2, [pc, #284]	; (80016b8 <PWMTimeBaseInit+0x190>)
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	e036      	b.n	800160c <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim8)	{
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4a46      	ldr	r2, [pc, #280]	; (80016bc <PWMTimeBaseInit+0x194>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d103      	bne.n	80015ae <PWMTimeBaseInit+0x86>
		htimx->Instance = TIM8;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4a45      	ldr	r2, [pc, #276]	; (80016c0 <PWMTimeBaseInit+0x198>)
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	e02e      	b.n	800160c <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim9)	{
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4a44      	ldr	r2, [pc, #272]	; (80016c4 <PWMTimeBaseInit+0x19c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d103      	bne.n	80015be <PWMTimeBaseInit+0x96>
		htimx->Instance = TIM9;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4a43      	ldr	r2, [pc, #268]	; (80016c8 <PWMTimeBaseInit+0x1a0>)
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	e026      	b.n	800160c <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim10)	{
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4a42      	ldr	r2, [pc, #264]	; (80016cc <PWMTimeBaseInit+0x1a4>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d103      	bne.n	80015ce <PWMTimeBaseInit+0xa6>
		htimx->Instance = TIM10;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4a41      	ldr	r2, [pc, #260]	; (80016d0 <PWMTimeBaseInit+0x1a8>)
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	e01e      	b.n	800160c <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim11)	{
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	4a40      	ldr	r2, [pc, #256]	; (80016d4 <PWMTimeBaseInit+0x1ac>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d103      	bne.n	80015de <PWMTimeBaseInit+0xb6>
		htimx->Instance = TIM11;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4a3f      	ldr	r2, [pc, #252]	; (80016d8 <PWMTimeBaseInit+0x1b0>)
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	e016      	b.n	800160c <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim12)	{
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4a3e      	ldr	r2, [pc, #248]	; (80016dc <PWMTimeBaseInit+0x1b4>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d103      	bne.n	80015ee <PWMTimeBaseInit+0xc6>
		htimx->Instance = TIM12;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4a3d      	ldr	r2, [pc, #244]	; (80016e0 <PWMTimeBaseInit+0x1b8>)
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	e00e      	b.n	800160c <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim13)	{
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	4a3c      	ldr	r2, [pc, #240]	; (80016e4 <PWMTimeBaseInit+0x1bc>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d103      	bne.n	80015fe <PWMTimeBaseInit+0xd6>
		htimx->Instance = TIM13;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	4a3b      	ldr	r2, [pc, #236]	; (80016e8 <PWMTimeBaseInit+0x1c0>)
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	e006      	b.n	800160c <PWMTimeBaseInit+0xe4>
		}
	else if(htimx == &htim14)	{
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4a3a      	ldr	r2, [pc, #232]	; (80016ec <PWMTimeBaseInit+0x1c4>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d102      	bne.n	800160c <PWMTimeBaseInit+0xe4>
		htimx->Instance = TIM14;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4a39      	ldr	r2, [pc, #228]	; (80016f0 <PWMTimeBaseInit+0x1c8>)
 800160a:	601a      	str	r2, [r3, #0]
		}

	htimx->Init.Prescaler = Prescaler - 1;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	1e5a      	subs	r2, r3, #1
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = Period - 1;
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	1e5a      	subs	r2, r3, #1
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2280      	movs	r2, #128	; 0x80
 800162c:	619a      	str	r2, [r3, #24]
	 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f011 ff12 	bl	8013458 <HAL_TIM_Base_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <PWMTimeBaseInit+0x116>
	  {
	    Error_Handler();
 800163a:	f003 fb37 	bl	8004cac <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800163e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001642:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 8001644:	f107 0318 	add.w	r3, r7, #24
 8001648:	4619      	mov	r1, r3
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f012 fa78 	bl	8013b40 <HAL_TIM_ConfigClockSource>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <PWMTimeBaseInit+0x132>
	  {
	    Error_Handler();
 8001656:	f003 fb29 	bl	8004cac <Error_Handler>
	  }
	if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f011 ff6f 	bl	801353e <HAL_TIM_PWM_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <PWMTimeBaseInit+0x142>
		{
			Error_Handler();
 8001666:	f003 fb21 	bl	8004cac <Error_Handler>
		}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8001672:	f107 0310 	add.w	r3, r7, #16
 8001676:	4619      	mov	r1, r3
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f012 fe5d 	bl	8014338 <HAL_TIMEx_MasterConfigSynchronization>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <PWMTimeBaseInit+0x160>
	{
		Error_Handler();
 8001684:	f003 fb12 	bl	8004cac <Error_Handler>
	}


    HAL_TIM_Base_Start(htimx);
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f011 ff10 	bl	80134ae <HAL_TIM_Base_Start>

}
 800168e:	bf00      	nop
 8001690:	3728      	adds	r7, #40	; 0x28
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20005f60 	.word	0x20005f60
 800169c:	40010000 	.word	0x40010000
 80016a0:	20006064 	.word	0x20006064
 80016a4:	20005d14 	.word	0x20005d14
 80016a8:	40000400 	.word	0x40000400
 80016ac:	20005b50 	.word	0x20005b50
 80016b0:	40000800 	.word	0x40000800
 80016b4:	20005cd4 	.word	0x20005cd4
 80016b8:	40000c00 	.word	0x40000c00
 80016bc:	20005b10 	.word	0x20005b10
 80016c0:	40010400 	.word	0x40010400
 80016c4:	20005fa0 	.word	0x20005fa0
 80016c8:	40014000 	.word	0x40014000
 80016cc:	20005c30 	.word	0x20005c30
 80016d0:	40014400 	.word	0x40014400
 80016d4:	20005e78 	.word	0x20005e78
 80016d8:	40014800 	.word	0x40014800
 80016dc:	20006184 	.word	0x20006184
 80016e0:	40001800 	.word	0x40001800
 80016e4:	20005df8 	.word	0x20005df8
 80016e8:	40001c00 	.word	0x40001c00
 80016ec:	20006144 	.word	0x20006144
 80016f0:	40002000 	.word	0x40002000

080016f4 <PWMChannelConfig>:
 * 						  GPIO_Pin_x	GPIO_Pin_x of PWM pin(x = 0,1,2,...or 15)
 * Function Return		: None
 * Function Example		: PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 */

void PWMChannelConfig(TIM_HandleTypeDef* htimx, uint32_t Channel , GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_x){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b09a      	sub	sp, #104	; 0x68
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
 8001700:	807b      	strh	r3, [r7, #2]

	TIM_OC_InitTypeDef sConfigOC = {0};
 8001702:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]
 8001712:	615a      	str	r2, [r3, #20]
 8001714:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001716:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	611a      	str	r2, [r3, #16]

	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001726:	2370      	movs	r3, #112	; 0x70
 8001728:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.Pulse = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800172e:	2302      	movs	r3, #2
 8001730:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001732:	2308      	movs	r3, #8
 8001734:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	65fb      	str	r3, [r7, #92]	; 0x5c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800173a:	2300      	movs	r3, #0
 800173c:	663b      	str	r3, [r7, #96]	; 0x60
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800173e:	2300      	movs	r3, #0
 8001740:	667b      	str	r3, [r7, #100]	; 0x64

	if (HAL_TIM_PWM_ConfigChannel(htimx, &sConfigOC, Channel) != HAL_OK)
 8001742:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	4619      	mov	r1, r3
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f012 f932 	bl	80139b4 <HAL_TIM_PWM_ConfigChannel>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <PWMChannelConfig+0x66>
	{
		Error_Handler();
 8001756:	f003 faa9 	bl	8004cac <Error_Handler>
	}

	switch((uint32_t)GPIOx){
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a95      	ldr	r2, [pc, #596]	; (80019b4 <PWMChannelConfig+0x2c0>)
 800175e:	4293      	cmp	r3, r2
 8001760:	f000 80af 	beq.w	80018c2 <PWMChannelConfig+0x1ce>
 8001764:	4a93      	ldr	r2, [pc, #588]	; (80019b4 <PWMChannelConfig+0x2c0>)
 8001766:	4293      	cmp	r3, r2
 8001768:	f200 80ba 	bhi.w	80018e0 <PWMChannelConfig+0x1ec>
 800176c:	4a92      	ldr	r2, [pc, #584]	; (80019b8 <PWMChannelConfig+0x2c4>)
 800176e:	4293      	cmp	r3, r2
 8001770:	f000 8098 	beq.w	80018a4 <PWMChannelConfig+0x1b0>
 8001774:	4a90      	ldr	r2, [pc, #576]	; (80019b8 <PWMChannelConfig+0x2c4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	f200 80b2 	bhi.w	80018e0 <PWMChannelConfig+0x1ec>
 800177c:	4a8f      	ldr	r2, [pc, #572]	; (80019bc <PWMChannelConfig+0x2c8>)
 800177e:	4293      	cmp	r3, r2
 8001780:	f000 8081 	beq.w	8001886 <PWMChannelConfig+0x192>
 8001784:	4a8d      	ldr	r2, [pc, #564]	; (80019bc <PWMChannelConfig+0x2c8>)
 8001786:	4293      	cmp	r3, r2
 8001788:	f200 80aa 	bhi.w	80018e0 <PWMChannelConfig+0x1ec>
 800178c:	4a8c      	ldr	r2, [pc, #560]	; (80019c0 <PWMChannelConfig+0x2cc>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d06a      	beq.n	8001868 <PWMChannelConfig+0x174>
 8001792:	4a8b      	ldr	r2, [pc, #556]	; (80019c0 <PWMChannelConfig+0x2cc>)
 8001794:	4293      	cmp	r3, r2
 8001796:	f200 80a3 	bhi.w	80018e0 <PWMChannelConfig+0x1ec>
 800179a:	4a8a      	ldr	r2, [pc, #552]	; (80019c4 <PWMChannelConfig+0x2d0>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d054      	beq.n	800184a <PWMChannelConfig+0x156>
 80017a0:	4a88      	ldr	r2, [pc, #544]	; (80019c4 <PWMChannelConfig+0x2d0>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	f200 809c 	bhi.w	80018e0 <PWMChannelConfig+0x1ec>
 80017a8:	4a87      	ldr	r2, [pc, #540]	; (80019c8 <PWMChannelConfig+0x2d4>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d03e      	beq.n	800182c <PWMChannelConfig+0x138>
 80017ae:	4a86      	ldr	r2, [pc, #536]	; (80019c8 <PWMChannelConfig+0x2d4>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	f200 8095 	bhi.w	80018e0 <PWMChannelConfig+0x1ec>
 80017b6:	4a85      	ldr	r2, [pc, #532]	; (80019cc <PWMChannelConfig+0x2d8>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d028      	beq.n	800180e <PWMChannelConfig+0x11a>
 80017bc:	4a83      	ldr	r2, [pc, #524]	; (80019cc <PWMChannelConfig+0x2d8>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	f200 808e 	bhi.w	80018e0 <PWMChannelConfig+0x1ec>
 80017c4:	4a82      	ldr	r2, [pc, #520]	; (80019d0 <PWMChannelConfig+0x2dc>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d003      	beq.n	80017d2 <PWMChannelConfig+0xde>
 80017ca:	4a82      	ldr	r2, [pc, #520]	; (80019d4 <PWMChannelConfig+0x2e0>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d00f      	beq.n	80017f0 <PWMChannelConfig+0xfc>
		break;

		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
		break;

		default: break;
 80017d0:	e086      	b.n	80018e0 <PWMChannelConfig+0x1ec>
		case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	637b      	str	r3, [r7, #52]	; 0x34
 80017d6:	4b80      	ldr	r3, [pc, #512]	; (80019d8 <PWMChannelConfig+0x2e4>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a7f      	ldr	r2, [pc, #508]	; (80019d8 <PWMChannelConfig+0x2e4>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b7d      	ldr	r3, [pc, #500]	; (80019d8 <PWMChannelConfig+0x2e4>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	637b      	str	r3, [r7, #52]	; 0x34
 80017ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
		break;
 80017ee:	e078      	b.n	80018e2 <PWMChannelConfig+0x1ee>
		case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017f0:	2300      	movs	r3, #0
 80017f2:	633b      	str	r3, [r7, #48]	; 0x30
 80017f4:	4b78      	ldr	r3, [pc, #480]	; (80019d8 <PWMChannelConfig+0x2e4>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	4a77      	ldr	r2, [pc, #476]	; (80019d8 <PWMChannelConfig+0x2e4>)
 80017fa:	f043 0302 	orr.w	r3, r3, #2
 80017fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001800:	4b75      	ldr	r3, [pc, #468]	; (80019d8 <PWMChannelConfig+0x2e4>)
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	633b      	str	r3, [r7, #48]	; 0x30
 800180a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		break;
 800180c:	e069      	b.n	80018e2 <PWMChannelConfig+0x1ee>
		case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001812:	4b71      	ldr	r3, [pc, #452]	; (80019d8 <PWMChannelConfig+0x2e4>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a70      	ldr	r2, [pc, #448]	; (80019d8 <PWMChannelConfig+0x2e4>)
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b6e      	ldr	r3, [pc, #440]	; (80019d8 <PWMChannelConfig+0x2e4>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		break;
 800182a:	e05a      	b.n	80018e2 <PWMChannelConfig+0x1ee>
		case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 800182c:	2300      	movs	r3, #0
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001830:	4b69      	ldr	r3, [pc, #420]	; (80019d8 <PWMChannelConfig+0x2e4>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	4a68      	ldr	r2, [pc, #416]	; (80019d8 <PWMChannelConfig+0x2e4>)
 8001836:	f043 0308 	orr.w	r3, r3, #8
 800183a:	6313      	str	r3, [r2, #48]	; 0x30
 800183c:	4b66      	ldr	r3, [pc, #408]	; (80019d8 <PWMChannelConfig+0x2e4>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
 8001846:	6abb      	ldr	r3, [r7, #40]	; 0x28
		break;
 8001848:	e04b      	b.n	80018e2 <PWMChannelConfig+0x1ee>
		case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
 800184e:	4b62      	ldr	r3, [pc, #392]	; (80019d8 <PWMChannelConfig+0x2e4>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a61      	ldr	r2, [pc, #388]	; (80019d8 <PWMChannelConfig+0x2e4>)
 8001854:	f043 0310 	orr.w	r3, r3, #16
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b5f      	ldr	r3, [pc, #380]	; (80019d8 <PWMChannelConfig+0x2e4>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0310 	and.w	r3, r3, #16
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		break;
 8001866:	e03c      	b.n	80018e2 <PWMChannelConfig+0x1ee>
		case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
 800186c:	4b5a      	ldr	r3, [pc, #360]	; (80019d8 <PWMChannelConfig+0x2e4>)
 800186e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001870:	4a59      	ldr	r2, [pc, #356]	; (80019d8 <PWMChannelConfig+0x2e4>)
 8001872:	f043 0320 	orr.w	r3, r3, #32
 8001876:	6313      	str	r3, [r2, #48]	; 0x30
 8001878:	4b57      	ldr	r3, [pc, #348]	; (80019d8 <PWMChannelConfig+0x2e4>)
 800187a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187c:	f003 0320 	and.w	r3, r3, #32
 8001880:	623b      	str	r3, [r7, #32]
 8001882:	6a3b      	ldr	r3, [r7, #32]
		break;
 8001884:	e02d      	b.n	80018e2 <PWMChannelConfig+0x1ee>
		case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	4b53      	ldr	r3, [pc, #332]	; (80019d8 <PWMChannelConfig+0x2e4>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a52      	ldr	r2, [pc, #328]	; (80019d8 <PWMChannelConfig+0x2e4>)
 8001890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b50      	ldr	r3, [pc, #320]	; (80019d8 <PWMChannelConfig+0x2e4>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800189e:	61fb      	str	r3, [r7, #28]
 80018a0:	69fb      	ldr	r3, [r7, #28]
		break;
 80018a2:	e01e      	b.n	80018e2 <PWMChannelConfig+0x1ee>
		case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 80018a4:	2300      	movs	r3, #0
 80018a6:	61bb      	str	r3, [r7, #24]
 80018a8:	4b4b      	ldr	r3, [pc, #300]	; (80019d8 <PWMChannelConfig+0x2e4>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	4a4a      	ldr	r2, [pc, #296]	; (80019d8 <PWMChannelConfig+0x2e4>)
 80018ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b2:	6313      	str	r3, [r2, #48]	; 0x30
 80018b4:	4b48      	ldr	r3, [pc, #288]	; (80019d8 <PWMChannelConfig+0x2e4>)
 80018b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018bc:	61bb      	str	r3, [r7, #24]
 80018be:	69bb      	ldr	r3, [r7, #24]
		break;
 80018c0:	e00f      	b.n	80018e2 <PWMChannelConfig+0x1ee>
		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	4b44      	ldr	r3, [pc, #272]	; (80019d8 <PWMChannelConfig+0x2e4>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a43      	ldr	r2, [pc, #268]	; (80019d8 <PWMChannelConfig+0x2e4>)
 80018cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b41      	ldr	r3, [pc, #260]	; (80019d8 <PWMChannelConfig+0x2e4>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	697b      	ldr	r3, [r7, #20]
		break;
 80018de:	e000      	b.n	80018e2 <PWMChannelConfig+0x1ee>
		default: break;
 80018e0:	bf00      	nop
		}

	    GPIO_InitStruct.Pin = GPIO_Pin_x;
 80018e2:	887b      	ldrh	r3, [r7, #2]
 80018e4:	63bb      	str	r3, [r7, #56]	; 0x38
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ea:	2301      	movs	r3, #1
 80018ec:	643b      	str	r3, [r7, #64]	; 0x40
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ee:	2303      	movs	r3, #3
 80018f0:	647b      	str	r3, [r7, #68]	; 0x44
		if(htimx == &htim1){
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4a39      	ldr	r2, [pc, #228]	; (80019dc <PWMChannelConfig+0x2e8>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d102      	bne.n	8001900 <PWMChannelConfig+0x20c>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018fa:	2301      	movs	r3, #1
 80018fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80018fe:	e04b      	b.n	8001998 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim2)	{
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4a37      	ldr	r2, [pc, #220]	; (80019e0 <PWMChannelConfig+0x2ec>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d102      	bne.n	800190e <PWMChannelConfig+0x21a>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM2 ;
 8001908:	2301      	movs	r3, #1
 800190a:	64bb      	str	r3, [r7, #72]	; 0x48
 800190c:	e044      	b.n	8001998 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim3)	{
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	4a34      	ldr	r2, [pc, #208]	; (80019e4 <PWMChannelConfig+0x2f0>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d102      	bne.n	800191c <PWMChannelConfig+0x228>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001916:	2302      	movs	r3, #2
 8001918:	64bb      	str	r3, [r7, #72]	; 0x48
 800191a:	e03d      	b.n	8001998 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim4)	{
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4a32      	ldr	r2, [pc, #200]	; (80019e8 <PWMChannelConfig+0x2f4>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d102      	bne.n	800192a <PWMChannelConfig+0x236>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001924:	2302      	movs	r3, #2
 8001926:	64bb      	str	r3, [r7, #72]	; 0x48
 8001928:	e036      	b.n	8001998 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim5)	{
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4a2f      	ldr	r2, [pc, #188]	; (80019ec <PWMChannelConfig+0x2f8>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d102      	bne.n	8001938 <PWMChannelConfig+0x244>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001932:	2302      	movs	r3, #2
 8001934:	64bb      	str	r3, [r7, #72]	; 0x48
 8001936:	e02f      	b.n	8001998 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim8)	{
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4a2d      	ldr	r2, [pc, #180]	; (80019f0 <PWMChannelConfig+0x2fc>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d102      	bne.n	8001946 <PWMChannelConfig+0x252>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001940:	2303      	movs	r3, #3
 8001942:	64bb      	str	r3, [r7, #72]	; 0x48
 8001944:	e028      	b.n	8001998 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim9)	{
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4a2a      	ldr	r2, [pc, #168]	; (80019f4 <PWMChannelConfig+0x300>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d102      	bne.n	8001954 <PWMChannelConfig+0x260>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800194e:	2303      	movs	r3, #3
 8001950:	64bb      	str	r3, [r7, #72]	; 0x48
 8001952:	e021      	b.n	8001998 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim10)	{
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4a28      	ldr	r2, [pc, #160]	; (80019f8 <PWMChannelConfig+0x304>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d102      	bne.n	8001962 <PWMChannelConfig+0x26e>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800195c:	2303      	movs	r3, #3
 800195e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001960:	e01a      	b.n	8001998 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim11)	{
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4a25      	ldr	r2, [pc, #148]	; (80019fc <PWMChannelConfig+0x308>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d102      	bne.n	8001970 <PWMChannelConfig+0x27c>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800196a:	2303      	movs	r3, #3
 800196c:	64bb      	str	r3, [r7, #72]	; 0x48
 800196e:	e013      	b.n	8001998 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim12)	{
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4a23      	ldr	r2, [pc, #140]	; (8001a00 <PWMChannelConfig+0x30c>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d102      	bne.n	800197e <PWMChannelConfig+0x28a>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001978:	2309      	movs	r3, #9
 800197a:	64bb      	str	r3, [r7, #72]	; 0x48
 800197c:	e00c      	b.n	8001998 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim13)	{
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4a20      	ldr	r2, [pc, #128]	; (8001a04 <PWMChannelConfig+0x310>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d102      	bne.n	800198c <PWMChannelConfig+0x298>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001986:	2309      	movs	r3, #9
 8001988:	64bb      	str	r3, [r7, #72]	; 0x48
 800198a:	e005      	b.n	8001998 <PWMChannelConfig+0x2a4>
			}
		else if(htimx == &htim14)	{
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4a1e      	ldr	r2, [pc, #120]	; (8001a08 <PWMChannelConfig+0x314>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d101      	bne.n	8001998 <PWMChannelConfig+0x2a4>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001994:	2309      	movs	r3, #9
 8001996:	64bb      	str	r3, [r7, #72]	; 0x48
			}

	    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001998:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800199c:	4619      	mov	r1, r3
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f00e fa54 	bl	800fe4c <HAL_GPIO_Init>


	    HAL_TIM_PWM_Start(htimx,Channel);
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f011 fdf4 	bl	8013594 <HAL_TIM_PWM_Start>

}
 80019ac:	bf00      	nop
 80019ae:	3768      	adds	r7, #104	; 0x68
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40022000 	.word	0x40022000
 80019b8:	40021c00 	.word	0x40021c00
 80019bc:	40021800 	.word	0x40021800
 80019c0:	40021400 	.word	0x40021400
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40020c00 	.word	0x40020c00
 80019cc:	40020800 	.word	0x40020800
 80019d0:	40020000 	.word	0x40020000
 80019d4:	40020400 	.word	0x40020400
 80019d8:	40023800 	.word	0x40023800
 80019dc:	20005f60 	.word	0x20005f60
 80019e0:	20006064 	.word	0x20006064
 80019e4:	20005d14 	.word	0x20005d14
 80019e8:	20005b50 	.word	0x20005b50
 80019ec:	20005cd4 	.word	0x20005cd4
 80019f0:	20005b10 	.word	0x20005b10
 80019f4:	20005fa0 	.word	0x20005fa0
 80019f8:	20005c30 	.word	0x20005c30
 80019fc:	20005e78 	.word	0x20005e78
 8001a00:	20006184 	.word	0x20006184
 8001a04:	20005df8 	.word	0x20005df8
 8001a08:	20006144 	.word	0x20006144

08001a0c <QEIInit>:
 * Function Arguments	: htimx					Pointer to timer handle
 * Function Return		: None
 * Function Example		: QEIInit(&htim1,5,5);  	//Initialize QEI1
 */
void QEIInit(TIM_HandleTypeDef* htimx)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08e      	sub	sp, #56	; 0x38
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	TIM_Encoder_InitTypeDef sConfig = {0};
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	2224      	movs	r2, #36	; 0x24
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f017 f92d 	bl	8018c7c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a22:	f107 0308 	add.w	r3, r7, #8
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]

	IRQn_Type nvic;

	if(htimx == &htim1){
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a6b      	ldr	r2, [pc, #428]	; (8001bdc <QEIInit+0x1d0>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d106      	bne.n	8001a42 <QEIInit+0x36>
		htimx->Instance = TIM1;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a6a      	ldr	r2, [pc, #424]	; (8001be0 <QEIInit+0x1d4>)
 8001a38:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8001a3a:	2319      	movs	r3, #25
 8001a3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a40:	e036      	b.n	8001ab0 <QEIInit+0xa4>
	}
	else if(htimx == &htim2)	{
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a67      	ldr	r2, [pc, #412]	; (8001be4 <QEIInit+0x1d8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d107      	bne.n	8001a5a <QEIInit+0x4e>
		htimx->Instance = TIM2;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a50:	601a      	str	r2, [r3, #0]
		nvic=TIM2_IRQn;
 8001a52:	231c      	movs	r3, #28
 8001a54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a58:	e02a      	b.n	8001ab0 <QEIInit+0xa4>
	}
	else if(htimx == &htim3)	{
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a62      	ldr	r2, [pc, #392]	; (8001be8 <QEIInit+0x1dc>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d106      	bne.n	8001a70 <QEIInit+0x64>
		htimx->Instance = TIM3;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a61      	ldr	r2, [pc, #388]	; (8001bec <QEIInit+0x1e0>)
 8001a66:	601a      	str	r2, [r3, #0]
		nvic=TIM3_IRQn;
 8001a68:	231d      	movs	r3, #29
 8001a6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a6e:	e01f      	b.n	8001ab0 <QEIInit+0xa4>
	}
	else if(htimx == &htim4)	{
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a5f      	ldr	r2, [pc, #380]	; (8001bf0 <QEIInit+0x1e4>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d106      	bne.n	8001a86 <QEIInit+0x7a>
		htimx->Instance = TIM4;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a5e      	ldr	r2, [pc, #376]	; (8001bf4 <QEIInit+0x1e8>)
 8001a7c:	601a      	str	r2, [r3, #0]
		nvic=TIM4_IRQn;
 8001a7e:	231e      	movs	r3, #30
 8001a80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a84:	e014      	b.n	8001ab0 <QEIInit+0xa4>
	}
	else if(htimx == &htim5)	{
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a5b      	ldr	r2, [pc, #364]	; (8001bf8 <QEIInit+0x1ec>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d106      	bne.n	8001a9c <QEIInit+0x90>
		htimx->Instance = TIM5;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a5a      	ldr	r2, [pc, #360]	; (8001bfc <QEIInit+0x1f0>)
 8001a92:	601a      	str	r2, [r3, #0]
		nvic=TIM5_IRQn;
 8001a94:	2332      	movs	r3, #50	; 0x32
 8001a96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a9a:	e009      	b.n	8001ab0 <QEIInit+0xa4>
	}
	else if(htimx == &htim8)	{
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a58      	ldr	r2, [pc, #352]	; (8001c00 <QEIInit+0x1f4>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d105      	bne.n	8001ab0 <QEIInit+0xa4>
		htimx->Instance = TIM8;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a57      	ldr	r2, [pc, #348]	; (8001c04 <QEIInit+0x1f8>)
 8001aa8:	601a      	str	r2, [r3, #0]
		nvic=TIM8_UP_TIM13_IRQn;
 8001aaa:	232c      	movs	r3, #44	; 0x2c
 8001aac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	htimx->Init.Prescaler = 0;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = 0xFFFF;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ac2:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]
	htimx->Init.RepetitionCounter = 0;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	615a      	str	r2, [r3, #20]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2280      	movs	r2, #128	; 0x80
 8001ad4:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	613b      	str	r3, [r7, #16]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
	sConfig.IC1Filter = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	623b      	str	r3, [r7, #32]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001aea:	2300      	movs	r3, #0
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001aee:	2301      	movs	r3, #1
 8001af0:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001af2:	2300      	movs	r3, #0
 8001af4:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfig.IC2Filter = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_Encoder_Init(htimx, &sConfig) != HAL_OK)
 8001afa:	f107 0310 	add.w	r3, r7, #16
 8001afe:	4619      	mov	r1, r3
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f011 fd85 	bl	8013610 <HAL_TIM_Encoder_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <QEIInit+0x104>
	{
		Error_Handler();
 8001b0c:	f003 f8ce 	bl	8004cac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8001b18:	f107 0308 	add.w	r3, r7, #8
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f012 fc0a 	bl	8014338 <HAL_TIMEx_MasterConfigSynchronization>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <QEIInit+0x122>
	{
		Error_Handler();
 8001b2a:	f003 f8bf 	bl	8004cac <Error_Handler>
	}

	__HAL_TIM_CLEAR_IT(htimx, TIM_IT_UPDATE);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f06f 0201 	mvn.w	r2, #1
 8001b36:	611a      	str	r2, [r3, #16]
	__HAL_TIM_ENABLE_IT(htimx, TIM_IT_UPDATE);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68da      	ldr	r2, [r3, #12]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f042 0201 	orr.w	r2, r2, #1
 8001b46:	60da      	str	r2, [r3, #12]

	if(htimx == &htim1){
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a24      	ldr	r2, [pc, #144]	; (8001bdc <QEIInit+0x1d0>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d111      	bne.n	8001b74 <QEIInit+0x168>
		HAL_NVIC_SetPriority(nvic, QEI1_IRQ_PRIO, 0);
 8001b50:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b54:	2200      	movs	r2, #0
 8001b56:	210e      	movs	r1, #14
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f00d fa43 	bl	800efe4 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001b5e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b62:	4618      	mov	r0, r3
 8001b64:	f00d fa76 	bl	800f054 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001b68:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f00d fa55 	bl	800f01c <HAL_NVIC_EnableIRQ>
 8001b72:	e02a      	b.n	8001bca <QEIInit+0x1be>
	}else if(htimx == &htim4){
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a1e      	ldr	r2, [pc, #120]	; (8001bf0 <QEIInit+0x1e4>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d111      	bne.n	8001ba0 <QEIInit+0x194>
		HAL_NVIC_SetPriority(nvic, QEI4_IRQ_PRIO, 1);
 8001b7c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b80:	2201      	movs	r2, #1
 8001b82:	210e      	movs	r1, #14
 8001b84:	4618      	mov	r0, r3
 8001b86:	f00d fa2d 	bl	800efe4 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001b8a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f00d fa60 	bl	800f054 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001b94:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f00d fa3f 	bl	800f01c <HAL_NVIC_EnableIRQ>
 8001b9e:	e014      	b.n	8001bca <QEIInit+0x1be>
	}else if(htimx == &htim8){
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a17      	ldr	r2, [pc, #92]	; (8001c00 <QEIInit+0x1f4>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d110      	bne.n	8001bca <QEIInit+0x1be>
		HAL_NVIC_SetPriority(nvic, QEI6_IRQ_PRIO, 0);
 8001ba8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001bac:	2200      	movs	r2, #0
 8001bae:	210e      	movs	r1, #14
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f00d fa17 	bl	800efe4 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001bb6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f00d fa4a 	bl	800f054 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001bc0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f00d fa29 	bl	800f01c <HAL_NVIC_EnableIRQ>
	}

	HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8001bca:	213c      	movs	r1, #60	; 0x3c
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f011 fdb1 	bl	8013734 <HAL_TIM_Encoder_Start>
}
 8001bd2:	bf00      	nop
 8001bd4:	3738      	adds	r7, #56	; 0x38
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20005f60 	.word	0x20005f60
 8001be0:	40010000 	.word	0x40010000
 8001be4:	20006064 	.word	0x20006064
 8001be8:	20005d14 	.word	0x20005d14
 8001bec:	40000400 	.word	0x40000400
 8001bf0:	20005b50 	.word	0x20005b50
 8001bf4:	40000800 	.word	0x40000800
 8001bf8:	20005cd4 	.word	0x20005cd4
 8001bfc:	40000c00 	.word	0x40000c00
 8001c00:	20005b10 	.word	0x20005b10
 8001c04:	40010400 	.word	0x40010400

08001c08 <QEIWrite>:
 * Function Return		: None
 * Function Example		: QEIWrite(QEI1, 10000);
 */

void QEIWrite(QEI_TypeDef QEIx, int32_t value)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	6039      	str	r1, [r7, #0]
 8001c12:	71fb      	strb	r3, [r7, #7]

	switch (QEIx){
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	2b05      	cmp	r3, #5
 8001c1a:	d840      	bhi.n	8001c9e <QEIWrite+0x96>
 8001c1c:	a201      	add	r2, pc, #4	; (adr r2, 8001c24 <QEIWrite+0x1c>)
 8001c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c22:	bf00      	nop
 8001c24:	08001c3d 	.word	0x08001c3d
 8001c28:	08001c4d 	.word	0x08001c4d
 8001c2c:	08001c5f 	.word	0x08001c5f
 8001c30:	08001c6f 	.word	0x08001c6f
 8001c34:	08001c7f 	.word	0x08001c7f
 8001c38:	08001c8f 	.word	0x08001c8f

	case QEI1:	BIOS_QEI1.count = value;
 8001c3c:	4a1b      	ldr	r2, [pc, #108]	; (8001cac <QEIWrite+0xa4>)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	6013      	str	r3, [r2, #0]
	TIM1->CNT = BIOS_QEI1.poscnt;
 8001c42:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <QEIWrite+0xa4>)
 8001c44:	881a      	ldrh	r2, [r3, #0]
 8001c46:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <QEIWrite+0xa8>)
 8001c48:	625a      	str	r2, [r3, #36]	; 0x24
	break;
 8001c4a:	e028      	b.n	8001c9e <QEIWrite+0x96>

	case QEI2:	BIOS_QEI2.count = value;
 8001c4c:	4a19      	ldr	r2, [pc, #100]	; (8001cb4 <QEIWrite+0xac>)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	6013      	str	r3, [r2, #0]
	TIM2->CNT = BIOS_QEI2.poscnt;
 8001c52:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <QEIWrite+0xac>)
 8001c54:	881a      	ldrh	r2, [r3, #0]
 8001c56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c5a:	625a      	str	r2, [r3, #36]	; 0x24
	break;
 8001c5c:	e01f      	b.n	8001c9e <QEIWrite+0x96>

	case QEI3:  BIOS_QEI3.count = value;
 8001c5e:	4a16      	ldr	r2, [pc, #88]	; (8001cb8 <QEIWrite+0xb0>)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	6013      	str	r3, [r2, #0]
	TIM3->CNT = BIOS_QEI3.poscnt;
 8001c64:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <QEIWrite+0xb0>)
 8001c66:	881a      	ldrh	r2, [r3, #0]
 8001c68:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <QEIWrite+0xb4>)
 8001c6a:	625a      	str	r2, [r3, #36]	; 0x24
	break;
 8001c6c:	e017      	b.n	8001c9e <QEIWrite+0x96>

	case QEI4:  BIOS_QEI4.count = value;
 8001c6e:	4a14      	ldr	r2, [pc, #80]	; (8001cc0 <QEIWrite+0xb8>)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	6013      	str	r3, [r2, #0]
	TIM4->CNT = BIOS_QEI4.poscnt;
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <QEIWrite+0xb8>)
 8001c76:	881a      	ldrh	r2, [r3, #0]
 8001c78:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <QEIWrite+0xbc>)
 8001c7a:	625a      	str	r2, [r3, #36]	; 0x24
	break;
 8001c7c:	e00f      	b.n	8001c9e <QEIWrite+0x96>

	case QEI5:	BIOS_QEI5.count = value;
 8001c7e:	4a12      	ldr	r2, [pc, #72]	; (8001cc8 <QEIWrite+0xc0>)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	6013      	str	r3, [r2, #0]
	TIM5->CNT = BIOS_QEI5.poscnt;
 8001c84:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <QEIWrite+0xc0>)
 8001c86:	881a      	ldrh	r2, [r3, #0]
 8001c88:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <QEIWrite+0xc4>)
 8001c8a:	625a      	str	r2, [r3, #36]	; 0x24
	break;
 8001c8c:	e007      	b.n	8001c9e <QEIWrite+0x96>

	case QEI6:	BIOS_QEI6.count = value;
 8001c8e:	4a10      	ldr	r2, [pc, #64]	; (8001cd0 <QEIWrite+0xc8>)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	6013      	str	r3, [r2, #0]
	TIM8->CNT = BIOS_QEI6.poscnt;
 8001c94:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <QEIWrite+0xc8>)
 8001c96:	881a      	ldrh	r2, [r3, #0]
 8001c98:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <QEIWrite+0xcc>)
 8001c9a:	625a      	str	r2, [r3, #36]	; 0x24
	break;
 8001c9c:	bf00      	nop

	}

}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	200064c0 	.word	0x200064c0
 8001cb0:	40010000 	.word	0x40010000
 8001cb4:	200064c4 	.word	0x200064c4
 8001cb8:	200064bc 	.word	0x200064bc
 8001cbc:	40000400 	.word	0x40000400
 8001cc0:	200064e4 	.word	0x200064e4
 8001cc4:	40000800 	.word	0x40000800
 8001cc8:	200064e0 	.word	0x200064e0
 8001ccc:	40000c00 	.word	0x40000c00
 8001cd0:	200064e8 	.word	0x200064e8
 8001cd4:	40010400 	.word	0x40010400

08001cd8 <QEISwap>:
 * Function Return		: None
 * Function Example		: QEISwap(QEI1, QEI_Swap);
 */

void QEISwap(QEI_TypeDef QEIx, QEI_Direction_TypeDef swap)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	460a      	mov	r2, r1
 8001ce2:	71fb      	strb	r3, [r7, #7]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	71bb      	strb	r3, [r7, #6]

	switch(QEIx){
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	2b05      	cmp	r3, #5
 8001cee:	f200 80f6 	bhi.w	8001ede <QEISwap+0x206>
 8001cf2:	a201      	add	r2, pc, #4	; (adr r2, 8001cf8 <QEISwap+0x20>)
 8001cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf8:	08001d11 	.word	0x08001d11
 8001cfc:	08001d5f 	.word	0x08001d5f
 8001d00:	08001dad 	.word	0x08001dad
 8001d04:	08001dfb 	.word	0x08001dfb
 8001d08:	08001e47 	.word	0x08001e47
 8001d0c:	08001e93 	.word	0x08001e93

	case QEI1:	if(swap == QEI_No_Swap){
 8001d10:	79bb      	ldrb	r3, [r7, #6]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10e      	bne.n	8001d34 <QEISwap+0x5c>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 8001d16:	4b7a      	ldr	r3, [pc, #488]	; (8001f00 <QEISwap+0x228>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6a1a      	ldr	r2, [r3, #32]
 8001d1c:	4b78      	ldr	r3, [pc, #480]	; (8001f00 <QEISwap+0x228>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 020a 	bic.w	r2, r2, #10
 8001d24:	621a      	str	r2, [r3, #32]
 8001d26:	4b76      	ldr	r3, [pc, #472]	; (8001f00 <QEISwap+0x228>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	4b75      	ldr	r3, [pc, #468]	; (8001f00 <QEISwap+0x228>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6a12      	ldr	r2, [r2, #32]
 8001d30:	621a      	str	r2, [r3, #32]
	default: break;

	}

	}
}
 8001d32:	e0df      	b.n	8001ef4 <QEISwap+0x21c>
	else if(swap == QEI_Swap){
 8001d34:	79bb      	ldrb	r3, [r7, #6]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	f040 80dc 	bne.w	8001ef4 <QEISwap+0x21c>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8001d3c:	4b70      	ldr	r3, [pc, #448]	; (8001f00 <QEISwap+0x228>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6a1a      	ldr	r2, [r3, #32]
 8001d42:	4b6f      	ldr	r3, [pc, #444]	; (8001f00 <QEISwap+0x228>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 020a 	bic.w	r2, r2, #10
 8001d4a:	621a      	str	r2, [r3, #32]
 8001d4c:	4b6c      	ldr	r3, [pc, #432]	; (8001f00 <QEISwap+0x228>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6a1a      	ldr	r2, [r3, #32]
 8001d52:	4b6b      	ldr	r3, [pc, #428]	; (8001f00 <QEISwap+0x228>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0202 	orr.w	r2, r2, #2
 8001d5a:	621a      	str	r2, [r3, #32]
		break;
 8001d5c:	e0ca      	b.n	8001ef4 <QEISwap+0x21c>
	case QEI2:	if(swap == QEI_No_Swap){
 8001d5e:	79bb      	ldrb	r3, [r7, #6]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10e      	bne.n	8001d82 <QEISwap+0xaa>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 8001d64:	4b67      	ldr	r3, [pc, #412]	; (8001f04 <QEISwap+0x22c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6a1a      	ldr	r2, [r3, #32]
 8001d6a:	4b66      	ldr	r3, [pc, #408]	; (8001f04 <QEISwap+0x22c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 020a 	bic.w	r2, r2, #10
 8001d72:	621a      	str	r2, [r3, #32]
 8001d74:	4b63      	ldr	r3, [pc, #396]	; (8001f04 <QEISwap+0x22c>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b62      	ldr	r3, [pc, #392]	; (8001f04 <QEISwap+0x22c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6a12      	ldr	r2, [r2, #32]
 8001d7e:	621a      	str	r2, [r3, #32]
	break;
 8001d80:	e0af      	b.n	8001ee2 <QEISwap+0x20a>
	else if(swap == QEI_Swap){
 8001d82:	79bb      	ldrb	r3, [r7, #6]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	f040 80ac 	bne.w	8001ee2 <QEISwap+0x20a>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8001d8a:	4b5e      	ldr	r3, [pc, #376]	; (8001f04 <QEISwap+0x22c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6a1a      	ldr	r2, [r3, #32]
 8001d90:	4b5c      	ldr	r3, [pc, #368]	; (8001f04 <QEISwap+0x22c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 020a 	bic.w	r2, r2, #10
 8001d98:	621a      	str	r2, [r3, #32]
 8001d9a:	4b5a      	ldr	r3, [pc, #360]	; (8001f04 <QEISwap+0x22c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6a1a      	ldr	r2, [r3, #32]
 8001da0:	4b58      	ldr	r3, [pc, #352]	; (8001f04 <QEISwap+0x22c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f042 0202 	orr.w	r2, r2, #2
 8001da8:	621a      	str	r2, [r3, #32]
	break;
 8001daa:	e09a      	b.n	8001ee2 <QEISwap+0x20a>
	case QEI3:	if(swap == QEI_No_Swap){
 8001dac:	79bb      	ldrb	r3, [r7, #6]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10e      	bne.n	8001dd0 <QEISwap+0xf8>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 8001db2:	4b55      	ldr	r3, [pc, #340]	; (8001f08 <QEISwap+0x230>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6a1a      	ldr	r2, [r3, #32]
 8001db8:	4b53      	ldr	r3, [pc, #332]	; (8001f08 <QEISwap+0x230>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 020a 	bic.w	r2, r2, #10
 8001dc0:	621a      	str	r2, [r3, #32]
 8001dc2:	4b51      	ldr	r3, [pc, #324]	; (8001f08 <QEISwap+0x230>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	4b50      	ldr	r3, [pc, #320]	; (8001f08 <QEISwap+0x230>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6a12      	ldr	r2, [r2, #32]
 8001dcc:	621a      	str	r2, [r3, #32]
	break;
 8001dce:	e08a      	b.n	8001ee6 <QEISwap+0x20e>
	else if(swap == QEI_Swap){
 8001dd0:	79bb      	ldrb	r3, [r7, #6]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	f040 8087 	bne.w	8001ee6 <QEISwap+0x20e>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8001dd8:	4b4b      	ldr	r3, [pc, #300]	; (8001f08 <QEISwap+0x230>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6a1a      	ldr	r2, [r3, #32]
 8001dde:	4b4a      	ldr	r3, [pc, #296]	; (8001f08 <QEISwap+0x230>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 020a 	bic.w	r2, r2, #10
 8001de6:	621a      	str	r2, [r3, #32]
 8001de8:	4b47      	ldr	r3, [pc, #284]	; (8001f08 <QEISwap+0x230>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6a1a      	ldr	r2, [r3, #32]
 8001dee:	4b46      	ldr	r3, [pc, #280]	; (8001f08 <QEISwap+0x230>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0202 	orr.w	r2, r2, #2
 8001df6:	621a      	str	r2, [r3, #32]
	break;
 8001df8:	e075      	b.n	8001ee6 <QEISwap+0x20e>
	case QEI4:	if(swap == QEI_No_Swap){
 8001dfa:	79bb      	ldrb	r3, [r7, #6]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10e      	bne.n	8001e1e <QEISwap+0x146>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 8001e00:	4b42      	ldr	r3, [pc, #264]	; (8001f0c <QEISwap+0x234>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6a1a      	ldr	r2, [r3, #32]
 8001e06:	4b41      	ldr	r3, [pc, #260]	; (8001f0c <QEISwap+0x234>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 020a 	bic.w	r2, r2, #10
 8001e0e:	621a      	str	r2, [r3, #32]
 8001e10:	4b3e      	ldr	r3, [pc, #248]	; (8001f0c <QEISwap+0x234>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b3d      	ldr	r3, [pc, #244]	; (8001f0c <QEISwap+0x234>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6a12      	ldr	r2, [r2, #32]
 8001e1a:	621a      	str	r2, [r3, #32]
	break;
 8001e1c:	e065      	b.n	8001eea <QEISwap+0x212>
	else if(swap == QEI_Swap){
 8001e1e:	79bb      	ldrb	r3, [r7, #6]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d162      	bne.n	8001eea <QEISwap+0x212>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8001e24:	4b39      	ldr	r3, [pc, #228]	; (8001f0c <QEISwap+0x234>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6a1a      	ldr	r2, [r3, #32]
 8001e2a:	4b38      	ldr	r3, [pc, #224]	; (8001f0c <QEISwap+0x234>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 020a 	bic.w	r2, r2, #10
 8001e32:	621a      	str	r2, [r3, #32]
 8001e34:	4b35      	ldr	r3, [pc, #212]	; (8001f0c <QEISwap+0x234>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6a1a      	ldr	r2, [r3, #32]
 8001e3a:	4b34      	ldr	r3, [pc, #208]	; (8001f0c <QEISwap+0x234>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0202 	orr.w	r2, r2, #2
 8001e42:	621a      	str	r2, [r3, #32]
	break;
 8001e44:	e051      	b.n	8001eea <QEISwap+0x212>
	case QEI5:	if(swap == QEI_No_Swap){
 8001e46:	79bb      	ldrb	r3, [r7, #6]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d10e      	bne.n	8001e6a <QEISwap+0x192>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 8001e4c:	4b30      	ldr	r3, [pc, #192]	; (8001f10 <QEISwap+0x238>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6a1a      	ldr	r2, [r3, #32]
 8001e52:	4b2f      	ldr	r3, [pc, #188]	; (8001f10 <QEISwap+0x238>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 020a 	bic.w	r2, r2, #10
 8001e5a:	621a      	str	r2, [r3, #32]
 8001e5c:	4b2c      	ldr	r3, [pc, #176]	; (8001f10 <QEISwap+0x238>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4b2b      	ldr	r3, [pc, #172]	; (8001f10 <QEISwap+0x238>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6a12      	ldr	r2, [r2, #32]
 8001e66:	621a      	str	r2, [r3, #32]
	break;
 8001e68:	e041      	b.n	8001eee <QEISwap+0x216>
	else if(swap == QEI_Swap){
 8001e6a:	79bb      	ldrb	r3, [r7, #6]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d13e      	bne.n	8001eee <QEISwap+0x216>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8001e70:	4b27      	ldr	r3, [pc, #156]	; (8001f10 <QEISwap+0x238>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6a1a      	ldr	r2, [r3, #32]
 8001e76:	4b26      	ldr	r3, [pc, #152]	; (8001f10 <QEISwap+0x238>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 020a 	bic.w	r2, r2, #10
 8001e7e:	621a      	str	r2, [r3, #32]
 8001e80:	4b23      	ldr	r3, [pc, #140]	; (8001f10 <QEISwap+0x238>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6a1a      	ldr	r2, [r3, #32]
 8001e86:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <QEISwap+0x238>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0202 	orr.w	r2, r2, #2
 8001e8e:	621a      	str	r2, [r3, #32]
	break;
 8001e90:	e02d      	b.n	8001eee <QEISwap+0x216>
	case QEI6:	if(swap == QEI_No_Swap){
 8001e92:	79bb      	ldrb	r3, [r7, #6]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10e      	bne.n	8001eb6 <QEISwap+0x1de>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim8, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 8001e98:	4b1e      	ldr	r3, [pc, #120]	; (8001f14 <QEISwap+0x23c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6a1a      	ldr	r2, [r3, #32]
 8001e9e:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <QEISwap+0x23c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 020a 	bic.w	r2, r2, #10
 8001ea6:	621a      	str	r2, [r3, #32]
 8001ea8:	4b1a      	ldr	r3, [pc, #104]	; (8001f14 <QEISwap+0x23c>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <QEISwap+0x23c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6a12      	ldr	r2, [r2, #32]
 8001eb2:	621a      	str	r2, [r3, #32]
	break;
 8001eb4:	e01d      	b.n	8001ef2 <QEISwap+0x21a>
	else if(swap == QEI_Swap){
 8001eb6:	79bb      	ldrb	r3, [r7, #6]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d11a      	bne.n	8001ef2 <QEISwap+0x21a>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim8, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8001ebc:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <QEISwap+0x23c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6a1a      	ldr	r2, [r3, #32]
 8001ec2:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <QEISwap+0x23c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 020a 	bic.w	r2, r2, #10
 8001eca:	621a      	str	r2, [r3, #32]
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <QEISwap+0x23c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6a1a      	ldr	r2, [r3, #32]
 8001ed2:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <QEISwap+0x23c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0202 	orr.w	r2, r2, #2
 8001eda:	621a      	str	r2, [r3, #32]
	break;
 8001edc:	e009      	b.n	8001ef2 <QEISwap+0x21a>
	default: break;
 8001ede:	bf00      	nop
 8001ee0:	e008      	b.n	8001ef4 <QEISwap+0x21c>
	break;
 8001ee2:	bf00      	nop
 8001ee4:	e006      	b.n	8001ef4 <QEISwap+0x21c>
	break;
 8001ee6:	bf00      	nop
 8001ee8:	e004      	b.n	8001ef4 <QEISwap+0x21c>
	break;
 8001eea:	bf00      	nop
 8001eec:	e002      	b.n	8001ef4 <QEISwap+0x21c>
	break;
 8001eee:	bf00      	nop
 8001ef0:	e000      	b.n	8001ef4 <QEISwap+0x21c>
	break;
 8001ef2:	bf00      	nop
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	20005f60 	.word	0x20005f60
 8001f04:	20006064 	.word	0x20006064
 8001f08:	20005d14 	.word	0x20005d14
 8001f0c:	20005b50 	.word	0x20005b50
 8001f10:	20005cd4 	.word	0x20005cd4
 8001f14:	20005b10 	.word	0x20005b10

08001f18 <QEIDelay>:
 * Function Return		: None
 * Function Example		: QEIDelay(100);
 */

void QEIDelay(uint8_t value)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
	uint8_t currentvalues;
	value = value * 8400;
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	461a      	mov	r2, r3
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	011b      	lsls	r3, r3, #4
 8001f2c:	71fb      	strb	r3, [r7, #7]
	while(currentvalues < value)
 8001f2e:	e002      	b.n	8001f36 <QEIDelay+0x1e>
	{
		currentvalues++;
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	3301      	adds	r3, #1
 8001f34:	73fb      	strb	r3, [r7, #15]
	while(currentvalues < value)
 8001f36:	7bfa      	ldrb	r2, [r7, #15]
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d3f8      	bcc.n	8001f30 <QEIDelay+0x18>
	}
	currentvalues = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	73fb      	strb	r3, [r7, #15]
}
 8001f42:	bf00      	nop
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
	...

08001f50 <QEIRead>:
 * Function Arguments	: QEIx		where x can be 1 to 5.
 * Function Return		: QEI's count with 32 bits with sign.
 * Function Example		: QEIRead(QEI1);
 */

int32_t QEIRead(QEI_TypeDef QEIx){
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]

	int32_t value;
	switch(QEIx){
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	2b05      	cmp	r3, #5
 8001f60:	d845      	bhi.n	8001fee <QEIRead+0x9e>
 8001f62:	a201      	add	r2, pc, #4	; (adr r2, 8001f68 <QEIRead+0x18>)
 8001f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f68:	08001f81 	.word	0x08001f81
 8001f6c:	08001f93 	.word	0x08001f93
 8001f70:	08001fa7 	.word	0x08001fa7
 8001f74:	08001fb9 	.word	0x08001fb9
 8001f78:	08001fcb 	.word	0x08001fcb
 8001f7c:	08001fdd 	.word	0x08001fdd

	case QEI1:	BIOS_QEI1.poscnt = TIM1-> CNT;
 8001f80:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <QEIRead+0xb0>)
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <QEIRead+0xb4>)
 8001f88:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI1.count;
 8001f8a:	4b1e      	ldr	r3, [pc, #120]	; (8002004 <QEIRead+0xb4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	60fb      	str	r3, [r7, #12]
	break;
 8001f90:	e02e      	b.n	8001ff0 <QEIRead+0xa0>

	case QEI2:	BIOS_QEI2.poscnt = TIM2-> CNT;
 8001f92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <QEIRead+0xb8>)
 8001f9c:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI2.count;
 8001f9e:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <QEIRead+0xb8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	60fb      	str	r3, [r7, #12]
	break;
 8001fa4:	e024      	b.n	8001ff0 <QEIRead+0xa0>

	case QEI3:	BIOS_QEI3.poscnt = TIM3-> CNT;
 8001fa6:	4b19      	ldr	r3, [pc, #100]	; (800200c <QEIRead+0xbc>)
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	4b18      	ldr	r3, [pc, #96]	; (8002010 <QEIRead+0xc0>)
 8001fae:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI3.count;
 8001fb0:	4b17      	ldr	r3, [pc, #92]	; (8002010 <QEIRead+0xc0>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	60fb      	str	r3, [r7, #12]
	break;
 8001fb6:	e01b      	b.n	8001ff0 <QEIRead+0xa0>

	case QEI4:	BIOS_QEI4.poscnt = TIM4-> CNT;
 8001fb8:	4b16      	ldr	r3, [pc, #88]	; (8002014 <QEIRead+0xc4>)
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	4b16      	ldr	r3, [pc, #88]	; (8002018 <QEIRead+0xc8>)
 8001fc0:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI4.count;
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <QEIRead+0xc8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	60fb      	str	r3, [r7, #12]
	break;
 8001fc8:	e012      	b.n	8001ff0 <QEIRead+0xa0>

	case QEI5:	BIOS_QEI5.poscnt = TIM5-> CNT;
 8001fca:	4b14      	ldr	r3, [pc, #80]	; (800201c <QEIRead+0xcc>)
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	4b13      	ldr	r3, [pc, #76]	; (8002020 <QEIRead+0xd0>)
 8001fd2:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI5.count;
 8001fd4:	4b12      	ldr	r3, [pc, #72]	; (8002020 <QEIRead+0xd0>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	60fb      	str	r3, [r7, #12]
	break;
 8001fda:	e009      	b.n	8001ff0 <QEIRead+0xa0>

	case QEI6:	BIOS_QEI6.poscnt = TIM8-> CNT;
 8001fdc:	4b11      	ldr	r3, [pc, #68]	; (8002024 <QEIRead+0xd4>)
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <QEIRead+0xd8>)
 8001fe4:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI6.count;
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <QEIRead+0xd8>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	60fb      	str	r3, [r7, #12]
	break;
 8001fec:	e000      	b.n	8001ff0 <QEIRead+0xa0>

	default: break;
 8001fee:	bf00      	nop
	}

	return value;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40010000 	.word	0x40010000
 8002004:	200064c0 	.word	0x200064c0
 8002008:	200064c4 	.word	0x200064c4
 800200c:	40000400 	.word	0x40000400
 8002010:	200064bc 	.word	0x200064bc
 8002014:	40000800 	.word	0x40000800
 8002018:	200064e4 	.word	0x200064e4
 800201c:	40000c00 	.word	0x40000c00
 8002020:	200064e0 	.word	0x200064e0
 8002024:	40010400 	.word	0x40010400
 8002028:	200064e8 	.word	0x200064e8

0800202c <SHIFTREGInit>:
 * Function Return		: None
 * Function Example		: SHIFTREGInit(&shiftreg, CASCADE_1, GPIOD, GPIO_Pin_0, GPIOD, GPIO_Pin_1, GPIOD, GPIO_Pin_2);
 */

void SHIFTREGInit (shiftreg_t* shiftreg, fSR cascade, GPIO_TypeDef *GPIOx_sck, uint16_t GPIO_Pin_sck,
		           GPIO_TypeDef *GPIOx_rck , uint16_t GPIO_Pin_rck,GPIO_TypeDef *GPIOx_si, uint16_t GPIO_Pin_si){
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af02      	add	r7, sp, #8
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	461a      	mov	r2, r3
 8002038:	460b      	mov	r3, r1
 800203a:	72fb      	strb	r3, [r7, #11]
 800203c:	4613      	mov	r3, r2
 800203e:	813b      	strh	r3, [r7, #8]

	shiftreg->flag = cascade;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	7afa      	ldrb	r2, [r7, #11]
 8002044:	759a      	strb	r2, [r3, #22]

	shiftreg->GPIOx_sck = GPIOx_sck;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	601a      	str	r2, [r3, #0]
	shiftreg->GPIO_Pin_sck = GPIO_Pin_sck;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	893a      	ldrh	r2, [r7, #8]
 8002050:	809a      	strh	r2, [r3, #4]

	shiftreg->GPIOx_rck = GPIOx_rck;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	609a      	str	r2, [r3, #8]
	shiftreg->GPIO_Pin_rck = GPIO_Pin_rck;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8bba      	ldrh	r2, [r7, #28]
 800205c:	819a      	strh	r2, [r3, #12]

	shiftreg->GPIOx_si = GPIOx_si;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6a3a      	ldr	r2, [r7, #32]
 8002062:	611a      	str	r2, [r3, #16]
	shiftreg->GPIO_Pin_si = GPIO_Pin_si;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002068:	829a      	strh	r2, [r3, #20]

	GPIOPinsInit(shiftreg->GPIOx_sck, shiftreg->GPIO_Pin_sck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6818      	ldr	r0, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8899      	ldrh	r1, [r3, #4]
 8002072:	2301      	movs	r3, #1
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	2302      	movs	r3, #2
 8002078:	2201      	movs	r2, #1
 800207a:	f7ff f95b 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_rck, shiftreg->GPIO_Pin_rck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6898      	ldr	r0, [r3, #8]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8999      	ldrh	r1, [r3, #12]
 8002086:	2301      	movs	r3, #1
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	2302      	movs	r3, #2
 800208c:	2201      	movs	r2, #1
 800208e:	f7ff f951 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_si, shiftreg->GPIO_Pin_si , GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6918      	ldr	r0, [r3, #16]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8a99      	ldrh	r1, [r3, #20]
 800209a:	2301      	movs	r3, #1
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	2302      	movs	r3, #2
 80020a0:	2201      	movs	r2, #1
 80020a2:	f7ff f947 	bl	8001334 <GPIOPinsInit>

}
 80020a6:	bf00      	nop
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <SHIFTREGShift>:
 * Function Arguments	: shiftreg			pointer to structure
 * Function Return		: None
 * Function Example		: SHIFTREGShift (&shiftreg);
 */

void SHIFTREGShift(shiftreg_t* shiftreg){
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b084      	sub	sp, #16
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]

	uint8_t out, i, j;

	i = shiftreg->flag;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	7d9b      	ldrb	r3, [r3, #22]
 80020ba:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6818      	ldr	r0, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	889b      	ldrh	r3, [r3, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	4619      	mov	r1, r3
 80020c8:	f00e f958 	bl	801037c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6898      	ldr	r0, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	899b      	ldrh	r3, [r3, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	4619      	mov	r1, r3
 80020d8:	f00e f950 	bl	801037c <HAL_GPIO_WritePin>

	do{
		out = shiftreg->cast[i].Byte;
 80020dc:	7bba      	ldrb	r2, [r7, #14]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3206      	adds	r2, #6
 80020e2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80020e6:	73fb      	strb	r3, [r7, #15]
		for (j = 8; j; j--){
 80020e8:	2308      	movs	r3, #8
 80020ea:	737b      	strb	r3, [r7, #13]
 80020ec:	e02a      	b.n	8002144 <SHIFTREGShift+0x96>
			(out & 0x80) ? HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_SET) : HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_RESET);
 80020ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	da08      	bge.n	8002108 <SHIFTREGShift+0x5a>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6918      	ldr	r0, [r3, #16]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	8a9b      	ldrh	r3, [r3, #20]
 80020fe:	2201      	movs	r2, #1
 8002100:	4619      	mov	r1, r3
 8002102:	f00e f93b 	bl	801037c <HAL_GPIO_WritePin>
 8002106:	e007      	b.n	8002118 <SHIFTREGShift+0x6a>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6918      	ldr	r0, [r3, #16]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	8a9b      	ldrh	r3, [r3, #20]
 8002110:	2200      	movs	r2, #0
 8002112:	4619      	mov	r1, r3
 8002114:	f00e f932 	bl	801037c <HAL_GPIO_WritePin>
			out <<= 1;
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_SET);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6818      	ldr	r0, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	889b      	ldrh	r3, [r3, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	4619      	mov	r1, r3
 800212a:	f00e f927 	bl	801037c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6818      	ldr	r0, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	889b      	ldrh	r3, [r3, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	4619      	mov	r1, r3
 800213a:	f00e f91f 	bl	801037c <HAL_GPIO_WritePin>
		for (j = 8; j; j--){
 800213e:	7b7b      	ldrb	r3, [r7, #13]
 8002140:	3b01      	subs	r3, #1
 8002142:	737b      	strb	r3, [r7, #13]
 8002144:	7b7b      	ldrb	r3, [r7, #13]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1d1      	bne.n	80020ee <SHIFTREGShift+0x40>
		}
	}while(i--);
 800214a:	7bbb      	ldrb	r3, [r7, #14]
 800214c:	1e5a      	subs	r2, r3, #1
 800214e:	73ba      	strb	r2, [r7, #14]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1c3      	bne.n	80020dc <SHIFTREGShift+0x2e>

	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_SET);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6898      	ldr	r0, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	899b      	ldrh	r3, [r3, #12]
 800215c:	2201      	movs	r2, #1
 800215e:	4619      	mov	r1, r3
 8002160:	f00e f90c 	bl	801037c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6898      	ldr	r0, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	899b      	ldrh	r3, [r3, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	4619      	mov	r1, r3
 8002170:	f00e f904 	bl	801037c <HAL_GPIO_WritePin>

}
 8002174:	bf00      	nop
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <HAL_MspInit+0x54>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	4a11      	ldr	r2, [pc, #68]	; (80021d0 <HAL_MspInit+0x54>)
 800218c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002190:	6453      	str	r3, [r2, #68]	; 0x44
 8002192:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <HAL_MspInit+0x54>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	603b      	str	r3, [r7, #0]
 80021a2:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_MspInit+0x54>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <HAL_MspInit+0x54>)
 80021a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ac:	6413      	str	r3, [r2, #64]	; 0x40
 80021ae:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <HAL_MspInit+0x54>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b6:	603b      	str	r3, [r7, #0]
 80021b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	210f      	movs	r1, #15
 80021be:	f06f 0001 	mvn.w	r0, #1
 80021c2:	f00c ff0f 	bl	800efe4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40023800 	.word	0x40023800

080021d4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08c      	sub	sp, #48	; 0x30
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021dc:	f107 031c 	add.w	r3, r7, #28
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a42      	ldr	r2, [pc, #264]	; (80022fc <HAL_CAN_MspInit+0x128>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d135      	bne.n	8002262 <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80021f6:	4b42      	ldr	r3, [pc, #264]	; (8002300 <HAL_CAN_MspInit+0x12c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	3301      	adds	r3, #1
 80021fc:	4a40      	ldr	r2, [pc, #256]	; (8002300 <HAL_CAN_MspInit+0x12c>)
 80021fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002200:	4b3f      	ldr	r3, [pc, #252]	; (8002300 <HAL_CAN_MspInit+0x12c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d10d      	bne.n	8002224 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002208:	2300      	movs	r3, #0
 800220a:	61bb      	str	r3, [r7, #24]
 800220c:	4b3d      	ldr	r3, [pc, #244]	; (8002304 <HAL_CAN_MspInit+0x130>)
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	4a3c      	ldr	r2, [pc, #240]	; (8002304 <HAL_CAN_MspInit+0x130>)
 8002212:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002216:	6413      	str	r3, [r2, #64]	; 0x40
 8002218:	4b3a      	ldr	r3, [pc, #232]	; (8002304 <HAL_CAN_MspInit+0x130>)
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002220:	61bb      	str	r3, [r7, #24]
 8002222:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	4b36      	ldr	r3, [pc, #216]	; (8002304 <HAL_CAN_MspInit+0x130>)
 800222a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222c:	4a35      	ldr	r2, [pc, #212]	; (8002304 <HAL_CAN_MspInit+0x130>)
 800222e:	f043 0308 	orr.w	r3, r3, #8
 8002232:	6313      	str	r3, [r2, #48]	; 0x30
 8002234:	4b33      	ldr	r3, [pc, #204]	; (8002304 <HAL_CAN_MspInit+0x130>)
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	f003 0308 	and.w	r3, r3, #8
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	697b      	ldr	r3, [r7, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002240:	2303      	movs	r3, #3
 8002242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002244:	2302      	movs	r3, #2
 8002246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224c:	2303      	movs	r3, #3
 800224e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002250:	2309      	movs	r3, #9
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002254:	f107 031c 	add.w	r3, r7, #28
 8002258:	4619      	mov	r1, r3
 800225a:	482b      	ldr	r0, [pc, #172]	; (8002308 <HAL_CAN_MspInit+0x134>)
 800225c:	f00d fdf6 	bl	800fe4c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002260:	e048      	b.n	80022f4 <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a29      	ldr	r2, [pc, #164]	; (800230c <HAL_CAN_MspInit+0x138>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d143      	bne.n	80022f4 <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800226c:	2300      	movs	r3, #0
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	4b24      	ldr	r3, [pc, #144]	; (8002304 <HAL_CAN_MspInit+0x130>)
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	4a23      	ldr	r2, [pc, #140]	; (8002304 <HAL_CAN_MspInit+0x130>)
 8002276:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800227a:	6413      	str	r3, [r2, #64]	; 0x40
 800227c:	4b21      	ldr	r3, [pc, #132]	; (8002304 <HAL_CAN_MspInit+0x130>)
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002284:	613b      	str	r3, [r7, #16]
 8002286:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002288:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <HAL_CAN_MspInit+0x12c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	3301      	adds	r3, #1
 800228e:	4a1c      	ldr	r2, [pc, #112]	; (8002300 <HAL_CAN_MspInit+0x12c>)
 8002290:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002292:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <HAL_CAN_MspInit+0x12c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d10d      	bne.n	80022b6 <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	4b19      	ldr	r3, [pc, #100]	; (8002304 <HAL_CAN_MspInit+0x130>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	4a18      	ldr	r2, [pc, #96]	; (8002304 <HAL_CAN_MspInit+0x130>)
 80022a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022a8:	6413      	str	r3, [r2, #64]	; 0x40
 80022aa:	4b16      	ldr	r3, [pc, #88]	; (8002304 <HAL_CAN_MspInit+0x130>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_CAN_MspInit+0x130>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4a11      	ldr	r2, [pc, #68]	; (8002304 <HAL_CAN_MspInit+0x130>)
 80022c0:	f043 0302 	orr.w	r3, r3, #2
 80022c4:	6313      	str	r3, [r2, #48]	; 0x30
 80022c6:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <HAL_CAN_MspInit+0x130>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80022d2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80022d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d8:	2302      	movs	r3, #2
 80022da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e0:	2303      	movs	r3, #3
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80022e4:	2309      	movs	r3, #9
 80022e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e8:	f107 031c 	add.w	r3, r7, #28
 80022ec:	4619      	mov	r1, r3
 80022ee:	4808      	ldr	r0, [pc, #32]	; (8002310 <HAL_CAN_MspInit+0x13c>)
 80022f0:	f00d fdac 	bl	800fe4c <HAL_GPIO_Init>
}
 80022f4:	bf00      	nop
 80022f6:	3730      	adds	r7, #48	; 0x30
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40006400 	.word	0x40006400
 8002300:	200002c4 	.word	0x200002c4
 8002304:	40023800 	.word	0x40023800
 8002308:	40020c00 	.word	0x40020c00
 800230c:	40006800 	.word	0x40006800
 8002310:	40020400 	.word	0x40020400

08002314 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08e      	sub	sp, #56	; 0x38
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a5c      	ldr	r2, [pc, #368]	; (80024a4 <HAL_I2C_MspInit+0x190>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d12d      	bne.n	8002392 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	623b      	str	r3, [r7, #32]
 800233a:	4b5b      	ldr	r3, [pc, #364]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4a5a      	ldr	r2, [pc, #360]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4b58      	ldr	r3, [pc, #352]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	623b      	str	r3, [r7, #32]
 8002350:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002352:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002358:	2312      	movs	r3, #18
 800235a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800235c:	2301      	movs	r3, #1
 800235e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002360:	2303      	movs	r3, #3
 8002362:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002364:	2304      	movs	r3, #4
 8002366:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800236c:	4619      	mov	r1, r3
 800236e:	484f      	ldr	r0, [pc, #316]	; (80024ac <HAL_I2C_MspInit+0x198>)
 8002370:	f00d fd6c 	bl	800fe4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002374:	2300      	movs	r3, #0
 8002376:	61fb      	str	r3, [r7, #28]
 8002378:	4b4b      	ldr	r3, [pc, #300]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	4a4a      	ldr	r2, [pc, #296]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 800237e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002382:	6413      	str	r3, [r2, #64]	; 0x40
 8002384:	4b48      	ldr	r3, [pc, #288]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800238c:	61fb      	str	r3, [r7, #28]
 800238e:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002390:	e083      	b.n	800249a <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a46      	ldr	r2, [pc, #280]	; (80024b0 <HAL_I2C_MspInit+0x19c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d12d      	bne.n	80023f8 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800239c:	2300      	movs	r3, #0
 800239e:	61bb      	str	r3, [r7, #24]
 80023a0:	4b41      	ldr	r3, [pc, #260]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 80023a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a4:	4a40      	ldr	r2, [pc, #256]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 80023a6:	f043 0302 	orr.w	r3, r3, #2
 80023aa:	6313      	str	r3, [r2, #48]	; 0x30
 80023ac:	4b3e      	ldr	r3, [pc, #248]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 80023ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	61bb      	str	r3, [r7, #24]
 80023b6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80023b8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023be:	2312      	movs	r3, #18
 80023c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023c2:	2301      	movs	r3, #1
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c6:	2303      	movs	r3, #3
 80023c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80023ca:	2304      	movs	r3, #4
 80023cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d2:	4619      	mov	r1, r3
 80023d4:	4835      	ldr	r0, [pc, #212]	; (80024ac <HAL_I2C_MspInit+0x198>)
 80023d6:	f00d fd39 	bl	800fe4c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	4b32      	ldr	r3, [pc, #200]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	4a31      	ldr	r2, [pc, #196]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 80023e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023e8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ea:	4b2f      	ldr	r3, [pc, #188]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	697b      	ldr	r3, [r7, #20]
}
 80023f6:	e050      	b.n	800249a <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a2d      	ldr	r2, [pc, #180]	; (80024b4 <HAL_I2C_MspInit+0x1a0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d14b      	bne.n	800249a <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	4b28      	ldr	r3, [pc, #160]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	4a27      	ldr	r2, [pc, #156]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 800240c:	f043 0304 	orr.w	r3, r3, #4
 8002410:	6313      	str	r3, [r2, #48]	; 0x30
 8002412:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	4b21      	ldr	r3, [pc, #132]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	4a20      	ldr	r2, [pc, #128]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6313      	str	r3, [r2, #48]	; 0x30
 800242e:	4b1e      	ldr	r3, [pc, #120]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800243a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002440:	2312      	movs	r3, #18
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002444:	2301      	movs	r3, #1
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002448:	2303      	movs	r3, #3
 800244a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800244c:	2304      	movs	r3, #4
 800244e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002454:	4619      	mov	r1, r3
 8002456:	4818      	ldr	r0, [pc, #96]	; (80024b8 <HAL_I2C_MspInit+0x1a4>)
 8002458:	f00d fcf8 	bl	800fe4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800245c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002462:	2312      	movs	r3, #18
 8002464:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002466:	2301      	movs	r3, #1
 8002468:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246a:	2303      	movs	r3, #3
 800246c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800246e:	2304      	movs	r3, #4
 8002470:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002476:	4619      	mov	r1, r3
 8002478:	4810      	ldr	r0, [pc, #64]	; (80024bc <HAL_I2C_MspInit+0x1a8>)
 800247a:	f00d fce7 	bl	800fe4c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	4a08      	ldr	r2, [pc, #32]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 8002488:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800248c:	6413      	str	r3, [r2, #64]	; 0x40
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]
}
 800249a:	bf00      	nop
 800249c:	3738      	adds	r7, #56	; 0x38
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40005400 	.word	0x40005400
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40020400 	.word	0x40020400
 80024b0:	40005800 	.word	0x40005800
 80024b4:	40005c00 	.word	0x40005c00
 80024b8:	40020800 	.word	0x40020800
 80024bc:	40020000 	.word	0x40020000

080024c0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a2a      	ldr	r2, [pc, #168]	; (8002578 <HAL_I2C_MspDeInit+0xb8>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d116      	bne.n	8002500 <HAL_I2C_MspDeInit+0x40>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80024d2:	4b2a      	ldr	r3, [pc, #168]	; (800257c <HAL_I2C_MspDeInit+0xbc>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	4a29      	ldr	r2, [pc, #164]	; (800257c <HAL_I2C_MspDeInit+0xbc>)
 80024d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024dc:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80024de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024e2:	4827      	ldr	r0, [pc, #156]	; (8002580 <HAL_I2C_MspDeInit+0xc0>)
 80024e4:	f00d fe4e 	bl	8010184 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80024e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024ec:	4824      	ldr	r0, [pc, #144]	; (8002580 <HAL_I2C_MspDeInit+0xc0>)
 80024ee:	f00d fe49 	bl	8010184 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 80024f2:	201f      	movs	r0, #31
 80024f4:	f00c fda0 	bl	800f038 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 80024f8:	2020      	movs	r0, #32
 80024fa:	f00c fd9d 	bl	800f038 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80024fe:	e036      	b.n	800256e <HAL_I2C_MspDeInit+0xae>
  else if(hi2c->Instance==I2C2)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a1f      	ldr	r2, [pc, #124]	; (8002584 <HAL_I2C_MspDeInit+0xc4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d116      	bne.n	8002538 <HAL_I2C_MspDeInit+0x78>
    __HAL_RCC_I2C2_CLK_DISABLE();
 800250a:	4b1c      	ldr	r3, [pc, #112]	; (800257c <HAL_I2C_MspDeInit+0xbc>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	4a1b      	ldr	r2, [pc, #108]	; (800257c <HAL_I2C_MspDeInit+0xbc>)
 8002510:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002514:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002516:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800251a:	4819      	ldr	r0, [pc, #100]	; (8002580 <HAL_I2C_MspDeInit+0xc0>)
 800251c:	f00d fe32 	bl	8010184 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8002520:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002524:	4816      	ldr	r0, [pc, #88]	; (8002580 <HAL_I2C_MspDeInit+0xc0>)
 8002526:	f00d fe2d 	bl	8010184 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 800252a:	2021      	movs	r0, #33	; 0x21
 800252c:	f00c fd84 	bl	800f038 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8002530:	2022      	movs	r0, #34	; 0x22
 8002532:	f00c fd81 	bl	800f038 <HAL_NVIC_DisableIRQ>
}
 8002536:	e01a      	b.n	800256e <HAL_I2C_MspDeInit+0xae>
  else if(hi2c->Instance==I2C3)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a12      	ldr	r2, [pc, #72]	; (8002588 <HAL_I2C_MspDeInit+0xc8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d115      	bne.n	800256e <HAL_I2C_MspDeInit+0xae>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <HAL_I2C_MspDeInit+0xbc>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	4a0d      	ldr	r2, [pc, #52]	; (800257c <HAL_I2C_MspDeInit+0xbc>)
 8002548:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800254c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 800254e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002552:	480e      	ldr	r0, [pc, #56]	; (800258c <HAL_I2C_MspDeInit+0xcc>)
 8002554:	f00d fe16 	bl	8010184 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8002558:	f44f 7180 	mov.w	r1, #256	; 0x100
 800255c:	480c      	ldr	r0, [pc, #48]	; (8002590 <HAL_I2C_MspDeInit+0xd0>)
 800255e:	f00d fe11 	bl	8010184 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8002562:	2048      	movs	r0, #72	; 0x48
 8002564:	f00c fd68 	bl	800f038 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8002568:	2049      	movs	r0, #73	; 0x49
 800256a:	f00c fd65 	bl	800f038 <HAL_NVIC_DisableIRQ>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40005400 	.word	0x40005400
 800257c:	40023800 	.word	0x40023800
 8002580:	40020400 	.word	0x40020400
 8002584:	40005800 	.word	0x40005800
 8002588:	40005c00 	.word	0x40005c00
 800258c:	40020800 	.word	0x40020800
 8002590:	40020000 	.word	0x40020000

08002594 <HAL_TIM_PWM_MspInit>:


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002594:	b480      	push	{r7}
 8002596:	b091      	sub	sp, #68	; 0x44
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
	if(htim_pwm->Instance==TIM1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a8d      	ldr	r2, [pc, #564]	; (80027d8 <HAL_TIM_PWM_MspInit+0x244>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d10e      	bne.n	80025c4 <HAL_TIM_PWM_MspInit+0x30>
		{
			/* Peripheral clock enable */
			__HAL_RCC_TIM1_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025aa:	4b8c      	ldr	r3, [pc, #560]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	4a8b      	ldr	r2, [pc, #556]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	6453      	str	r3, [r2, #68]	; 0x44
 80025b6:	4b89      	ldr	r3, [pc, #548]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	  {
	    /* Peripheral clock enable */
	    __HAL_RCC_TIM14_CLK_ENABLE();
	  }

}
 80025c2:	e102      	b.n	80027ca <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM2)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025cc:	d10e      	bne.n	80025ec <HAL_TIM_PWM_MspInit+0x58>
			__HAL_RCC_TIM2_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80025d2:	4b82      	ldr	r3, [pc, #520]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	4a81      	ldr	r2, [pc, #516]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	6413      	str	r3, [r2, #64]	; 0x40
 80025de:	4b7f      	ldr	r3, [pc, #508]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80025e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80025ea:	e0ee      	b.n	80027ca <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM3)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a7b      	ldr	r2, [pc, #492]	; (80027e0 <HAL_TIM_PWM_MspInit+0x24c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d10e      	bne.n	8002614 <HAL_TIM_PWM_MspInit+0x80>
			__HAL_RCC_TIM3_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	637b      	str	r3, [r7, #52]	; 0x34
 80025fa:	4b78      	ldr	r3, [pc, #480]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	4a77      	ldr	r2, [pc, #476]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002600:	f043 0302 	orr.w	r3, r3, #2
 8002604:	6413      	str	r3, [r2, #64]	; 0x40
 8002606:	4b75      	ldr	r3, [pc, #468]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	637b      	str	r3, [r7, #52]	; 0x34
 8002610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002612:	e0da      	b.n	80027ca <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM4)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a72      	ldr	r2, [pc, #456]	; (80027e4 <HAL_TIM_PWM_MspInit+0x250>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d10e      	bne.n	800263c <HAL_TIM_PWM_MspInit+0xa8>
			__HAL_RCC_TIM4_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	633b      	str	r3, [r7, #48]	; 0x30
 8002622:	4b6e      	ldr	r3, [pc, #440]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	4a6d      	ldr	r2, [pc, #436]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002628:	f043 0304 	orr.w	r3, r3, #4
 800262c:	6413      	str	r3, [r2, #64]	; 0x40
 800262e:	4b6b      	ldr	r3, [pc, #428]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f003 0304 	and.w	r3, r3, #4
 8002636:	633b      	str	r3, [r7, #48]	; 0x30
 8002638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800263a:	e0c6      	b.n	80027ca <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM5)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a69      	ldr	r2, [pc, #420]	; (80027e8 <HAL_TIM_PWM_MspInit+0x254>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d10e      	bne.n	8002664 <HAL_TIM_PWM_MspInit+0xd0>
	    __HAL_RCC_TIM5_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	62fb      	str	r3, [r7, #44]	; 0x2c
 800264a:	4b64      	ldr	r3, [pc, #400]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	4a63      	ldr	r2, [pc, #396]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002650:	f043 0308 	orr.w	r3, r3, #8
 8002654:	6413      	str	r3, [r2, #64]	; 0x40
 8002656:	4b61      	ldr	r3, [pc, #388]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002662:	e0b2      	b.n	80027ca <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM6)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a60      	ldr	r2, [pc, #384]	; (80027ec <HAL_TIM_PWM_MspInit+0x258>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d10e      	bne.n	800268c <HAL_TIM_PWM_MspInit+0xf8>
	    __HAL_RCC_TIM6_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	62bb      	str	r3, [r7, #40]	; 0x28
 8002672:	4b5a      	ldr	r3, [pc, #360]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	4a59      	ldr	r2, [pc, #356]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002678:	f043 0310 	orr.w	r3, r3, #16
 800267c:	6413      	str	r3, [r2, #64]	; 0x40
 800267e:	4b57      	ldr	r3, [pc, #348]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f003 0310 	and.w	r3, r3, #16
 8002686:	62bb      	str	r3, [r7, #40]	; 0x28
 8002688:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800268a:	e09e      	b.n	80027ca <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM7)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a57      	ldr	r2, [pc, #348]	; (80027f0 <HAL_TIM_PWM_MspInit+0x25c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d10e      	bne.n	80026b4 <HAL_TIM_PWM_MspInit+0x120>
	     __HAL_RCC_TIM7_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
 800269a:	4b50      	ldr	r3, [pc, #320]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	4a4f      	ldr	r2, [pc, #316]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80026a0:	f043 0320 	orr.w	r3, r3, #32
 80026a4:	6413      	str	r3, [r2, #64]	; 0x40
 80026a6:	4b4d      	ldr	r3, [pc, #308]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f003 0320 	and.w	r3, r3, #32
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80026b2:	e08a      	b.n	80027ca <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM8)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a4e      	ldr	r2, [pc, #312]	; (80027f4 <HAL_TIM_PWM_MspInit+0x260>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d10e      	bne.n	80026dc <HAL_TIM_PWM_MspInit+0x148>
	     __HAL_RCC_TIM8_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	623b      	str	r3, [r7, #32]
 80026c2:	4b46      	ldr	r3, [pc, #280]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	4a45      	ldr	r2, [pc, #276]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80026c8:	f043 0302 	orr.w	r3, r3, #2
 80026cc:	6453      	str	r3, [r2, #68]	; 0x44
 80026ce:	4b43      	ldr	r3, [pc, #268]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	623b      	str	r3, [r7, #32]
 80026d8:	6a3b      	ldr	r3, [r7, #32]
}
 80026da:	e076      	b.n	80027ca <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM9)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a45      	ldr	r2, [pc, #276]	; (80027f8 <HAL_TIM_PWM_MspInit+0x264>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d10e      	bne.n	8002704 <HAL_TIM_PWM_MspInit+0x170>
	    __HAL_RCC_TIM9_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	4b3c      	ldr	r3, [pc, #240]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	4a3b      	ldr	r2, [pc, #236]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80026f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f4:	6453      	str	r3, [r2, #68]	; 0x44
 80026f6:	4b39      	ldr	r3, [pc, #228]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026fe:	61fb      	str	r3, [r7, #28]
 8002700:	69fb      	ldr	r3, [r7, #28]
}
 8002702:	e062      	b.n	80027ca <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM10)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a3c      	ldr	r2, [pc, #240]	; (80027fc <HAL_TIM_PWM_MspInit+0x268>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d10e      	bne.n	800272c <HAL_TIM_PWM_MspInit+0x198>
	    __HAL_RCC_TIM10_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	61bb      	str	r3, [r7, #24]
 8002712:	4b32      	ldr	r3, [pc, #200]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	4a31      	ldr	r2, [pc, #196]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800271c:	6453      	str	r3, [r2, #68]	; 0x44
 800271e:	4b2f      	ldr	r3, [pc, #188]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	61bb      	str	r3, [r7, #24]
 8002728:	69bb      	ldr	r3, [r7, #24]
}
 800272a:	e04e      	b.n	80027ca <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM11)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a33      	ldr	r2, [pc, #204]	; (8002800 <HAL_TIM_PWM_MspInit+0x26c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d10e      	bne.n	8002754 <HAL_TIM_PWM_MspInit+0x1c0>
	    __HAL_RCC_TIM11_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	4b28      	ldr	r3, [pc, #160]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	4a27      	ldr	r2, [pc, #156]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002740:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002744:	6453      	str	r3, [r2, #68]	; 0x44
 8002746:	4b25      	ldr	r3, [pc, #148]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	697b      	ldr	r3, [r7, #20]
}
 8002752:	e03a      	b.n	80027ca <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM12)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a2a      	ldr	r2, [pc, #168]	; (8002804 <HAL_TIM_PWM_MspInit+0x270>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d10e      	bne.n	800277c <HAL_TIM_PWM_MspInit+0x1e8>
	    __HAL_RCC_TIM12_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	4b1e      	ldr	r3, [pc, #120]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	4a1d      	ldr	r2, [pc, #116]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800276c:	6413      	str	r3, [r2, #64]	; 0x40
 800276e:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	693b      	ldr	r3, [r7, #16]
}
 800277a:	e026      	b.n	80027ca <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM13)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a21      	ldr	r2, [pc, #132]	; (8002808 <HAL_TIM_PWM_MspInit+0x274>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d10e      	bne.n	80027a4 <HAL_TIM_PWM_MspInit+0x210>
	    __HAL_RCC_TIM13_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	4b14      	ldr	r3, [pc, #80]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	4a13      	ldr	r2, [pc, #76]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002794:	6413      	str	r3, [r2, #64]	; 0x40
 8002796:	4b11      	ldr	r3, [pc, #68]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
}
 80027a2:	e012      	b.n	80027ca <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM14)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a18      	ldr	r2, [pc, #96]	; (800280c <HAL_TIM_PWM_MspInit+0x278>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d10d      	bne.n	80027ca <HAL_TIM_PWM_MspInit+0x236>
	    __HAL_RCC_TIM14_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	4a09      	ldr	r2, [pc, #36]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80027b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027bc:	6413      	str	r3, [r2, #64]	; 0x40
 80027be:	4b07      	ldr	r3, [pc, #28]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	68bb      	ldr	r3, [r7, #8]
}
 80027ca:	bf00      	nop
 80027cc:	3744      	adds	r7, #68	; 0x44
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40010000 	.word	0x40010000
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40000400 	.word	0x40000400
 80027e4:	40000800 	.word	0x40000800
 80027e8:	40000c00 	.word	0x40000c00
 80027ec:	40001000 	.word	0x40001000
 80027f0:	40001400 	.word	0x40001400
 80027f4:	40010400 	.word	0x40010400
 80027f8:	40014000 	.word	0x40014000
 80027fc:	40014400 	.word	0x40014400
 8002800:	40014800 	.word	0x40014800
 8002804:	40001800 	.word	0x40001800
 8002808:	40001c00 	.word	0x40001c00
 800280c:	40002000 	.word	0x40002000

08002810 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002810:	b480      	push	{r7}
 8002812:	b091      	sub	sp, #68	; 0x44
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]

	if(htim_base->Instance==TIM1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a8d      	ldr	r2, [pc, #564]	; (8002a54 <HAL_TIM_Base_MspInit+0x244>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d10e      	bne.n	8002840 <HAL_TIM_Base_MspInit+0x30>
	{
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002826:	4b8c      	ldr	r3, [pc, #560]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	4a8b      	ldr	r2, [pc, #556]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	6453      	str	r3, [r2, #68]	; 0x44
 8002832:	4b89      	ldr	r3, [pc, #548]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800283c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  else if(htim_base->Instance==TIM14)
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
  }
}
 800283e:	e102      	b.n	8002a46 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM2)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002848:	d10e      	bne.n	8002868 <HAL_TIM_Base_MspInit+0x58>
		__HAL_RCC_TIM2_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	63bb      	str	r3, [r7, #56]	; 0x38
 800284e:	4b82      	ldr	r3, [pc, #520]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	4a81      	ldr	r2, [pc, #516]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	6413      	str	r3, [r2, #64]	; 0x40
 800285a:	4b7f      	ldr	r3, [pc, #508]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	63bb      	str	r3, [r7, #56]	; 0x38
 8002864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002866:	e0ee      	b.n	8002a46 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM3)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a7b      	ldr	r2, [pc, #492]	; (8002a5c <HAL_TIM_Base_MspInit+0x24c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d10e      	bne.n	8002890 <HAL_TIM_Base_MspInit+0x80>
		__HAL_RCC_TIM3_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	637b      	str	r3, [r7, #52]	; 0x34
 8002876:	4b78      	ldr	r3, [pc, #480]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	4a77      	ldr	r2, [pc, #476]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 800287c:	f043 0302 	orr.w	r3, r3, #2
 8002880:	6413      	str	r3, [r2, #64]	; 0x40
 8002882:	4b75      	ldr	r3, [pc, #468]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	637b      	str	r3, [r7, #52]	; 0x34
 800288c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800288e:	e0da      	b.n	8002a46 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM4)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a72      	ldr	r2, [pc, #456]	; (8002a60 <HAL_TIM_Base_MspInit+0x250>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d10e      	bne.n	80028b8 <HAL_TIM_Base_MspInit+0xa8>
		__HAL_RCC_TIM4_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	633b      	str	r3, [r7, #48]	; 0x30
 800289e:	4b6e      	ldr	r3, [pc, #440]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	4a6d      	ldr	r2, [pc, #436]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 80028a4:	f043 0304 	orr.w	r3, r3, #4
 80028a8:	6413      	str	r3, [r2, #64]	; 0x40
 80028aa:	4b6b      	ldr	r3, [pc, #428]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	633b      	str	r3, [r7, #48]	; 0x30
 80028b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80028b6:	e0c6      	b.n	8002a46 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM5)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a69      	ldr	r2, [pc, #420]	; (8002a64 <HAL_TIM_Base_MspInit+0x254>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d10e      	bne.n	80028e0 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028c6:	4b64      	ldr	r3, [pc, #400]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	4a63      	ldr	r2, [pc, #396]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 80028cc:	f043 0308 	orr.w	r3, r3, #8
 80028d0:	6413      	str	r3, [r2, #64]	; 0x40
 80028d2:	4b61      	ldr	r3, [pc, #388]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80028de:	e0b2      	b.n	8002a46 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM6)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a60      	ldr	r2, [pc, #384]	; (8002a68 <HAL_TIM_Base_MspInit+0x258>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d10e      	bne.n	8002908 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ee:	4b5a      	ldr	r3, [pc, #360]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	4a59      	ldr	r2, [pc, #356]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 80028f4:	f043 0310 	orr.w	r3, r3, #16
 80028f8:	6413      	str	r3, [r2, #64]	; 0x40
 80028fa:	4b57      	ldr	r3, [pc, #348]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f003 0310 	and.w	r3, r3, #16
 8002902:	62bb      	str	r3, [r7, #40]	; 0x28
 8002904:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002906:	e09e      	b.n	8002a46 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM7)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a57      	ldr	r2, [pc, #348]	; (8002a6c <HAL_TIM_Base_MspInit+0x25c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d10e      	bne.n	8002930 <HAL_TIM_Base_MspInit+0x120>
     __HAL_RCC_TIM7_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
 8002916:	4b50      	ldr	r3, [pc, #320]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	4a4f      	ldr	r2, [pc, #316]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 800291c:	f043 0320 	orr.w	r3, r3, #32
 8002920:	6413      	str	r3, [r2, #64]	; 0x40
 8002922:	4b4d      	ldr	r3, [pc, #308]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f003 0320 	and.w	r3, r3, #32
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800292e:	e08a      	b.n	8002a46 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM8)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a4e      	ldr	r2, [pc, #312]	; (8002a70 <HAL_TIM_Base_MspInit+0x260>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d10e      	bne.n	8002958 <HAL_TIM_Base_MspInit+0x148>
     __HAL_RCC_TIM8_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	623b      	str	r3, [r7, #32]
 800293e:	4b46      	ldr	r3, [pc, #280]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	4a45      	ldr	r2, [pc, #276]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002944:	f043 0302 	orr.w	r3, r3, #2
 8002948:	6453      	str	r3, [r2, #68]	; 0x44
 800294a:	4b43      	ldr	r3, [pc, #268]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	623b      	str	r3, [r7, #32]
 8002954:	6a3b      	ldr	r3, [r7, #32]
}
 8002956:	e076      	b.n	8002a46 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM9)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a45      	ldr	r2, [pc, #276]	; (8002a74 <HAL_TIM_Base_MspInit+0x264>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d10e      	bne.n	8002980 <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
 8002966:	4b3c      	ldr	r3, [pc, #240]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	4a3b      	ldr	r2, [pc, #236]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 800296c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002970:	6453      	str	r3, [r2, #68]	; 0x44
 8002972:	4b39      	ldr	r3, [pc, #228]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800297a:	61fb      	str	r3, [r7, #28]
 800297c:	69fb      	ldr	r3, [r7, #28]
}
 800297e:	e062      	b.n	8002a46 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM10)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a3c      	ldr	r2, [pc, #240]	; (8002a78 <HAL_TIM_Base_MspInit+0x268>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d10e      	bne.n	80029a8 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	61bb      	str	r3, [r7, #24]
 800298e:	4b32      	ldr	r3, [pc, #200]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002992:	4a31      	ldr	r2, [pc, #196]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002998:	6453      	str	r3, [r2, #68]	; 0x44
 800299a:	4b2f      	ldr	r3, [pc, #188]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a2:	61bb      	str	r3, [r7, #24]
 80029a4:	69bb      	ldr	r3, [r7, #24]
}
 80029a6:	e04e      	b.n	8002a46 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM11)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a33      	ldr	r2, [pc, #204]	; (8002a7c <HAL_TIM_Base_MspInit+0x26c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d10e      	bne.n	80029d0 <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	4b28      	ldr	r3, [pc, #160]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	4a27      	ldr	r2, [pc, #156]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 80029bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029c0:	6453      	str	r3, [r2, #68]	; 0x44
 80029c2:	4b25      	ldr	r3, [pc, #148]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	697b      	ldr	r3, [r7, #20]
}
 80029ce:	e03a      	b.n	8002a46 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM12)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a2a      	ldr	r2, [pc, #168]	; (8002a80 <HAL_TIM_Base_MspInit+0x270>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d10e      	bne.n	80029f8 <HAL_TIM_Base_MspInit+0x1e8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	4b1e      	ldr	r3, [pc, #120]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	4a1d      	ldr	r2, [pc, #116]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 80029e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029e8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ea:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f2:	613b      	str	r3, [r7, #16]
 80029f4:	693b      	ldr	r3, [r7, #16]
}
 80029f6:	e026      	b.n	8002a46 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM13)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a21      	ldr	r2, [pc, #132]	; (8002a84 <HAL_TIM_Base_MspInit+0x274>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d10e      	bne.n	8002a20 <HAL_TIM_Base_MspInit+0x210>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	4b14      	ldr	r3, [pc, #80]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	4a13      	ldr	r2, [pc, #76]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a10:	6413      	str	r3, [r2, #64]	; 0x40
 8002a12:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
}
 8002a1e:	e012      	b.n	8002a46 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM14)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a18      	ldr	r2, [pc, #96]	; (8002a88 <HAL_TIM_Base_MspInit+0x278>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d10d      	bne.n	8002a46 <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	4a09      	ldr	r2, [pc, #36]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a38:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3a:	4b07      	ldr	r3, [pc, #28]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
}
 8002a46:	bf00      	nop
 8002a48:	3744      	adds	r7, #68	; 0x44
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	40010000 	.word	0x40010000
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40000400 	.word	0x40000400
 8002a60:	40000800 	.word	0x40000800
 8002a64:	40000c00 	.word	0x40000c00
 8002a68:	40001000 	.word	0x40001000
 8002a6c:	40001400 	.word	0x40001400
 8002a70:	40010400 	.word	0x40010400
 8002a74:	40014000 	.word	0x40014000
 8002a78:	40014400 	.word	0x40014400
 8002a7c:	40014800 	.word	0x40014800
 8002a80:	40001800 	.word	0x40001800
 8002a84:	40001c00 	.word	0x40001c00
 8002a88:	40002000 	.word	0x40002000

08002a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b094      	sub	sp, #80	; 0x50
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	611a      	str	r2, [r3, #16]

  if(huart->Instance==USART1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a8c      	ldr	r2, [pc, #560]	; (8002cdc <HAL_UART_MspInit+0x250>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d12d      	bne.n	8002b0a <HAL_UART_MspInit+0x7e>
    {
	  __HAL_RCC_USART1_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ab2:	4b8b      	ldr	r3, [pc, #556]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	4a8a      	ldr	r2, [pc, #552]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002ab8:	f043 0310 	orr.w	r3, r3, #16
 8002abc:	6453      	str	r3, [r2, #68]	; 0x44
 8002abe:	4b88      	ldr	r3, [pc, #544]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38

	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	637b      	str	r3, [r7, #52]	; 0x34
 8002ace:	4b84      	ldr	r3, [pc, #528]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	4a83      	ldr	r2, [pc, #524]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ada:	4b81      	ldr	r3, [pc, #516]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	  /**USART1 GPIO Configuration
	      PA9     ------> USART1_TX
	      PA10     ------> USART1_RX
	   */
	  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ae6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002aea:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aec:	2302      	movs	r3, #2
 8002aee:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af4:	2303      	movs	r3, #3
 8002af6:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002af8:	2307      	movs	r3, #7
 8002afa:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b00:	4619      	mov	r1, r3
 8002b02:	4878      	ldr	r0, [pc, #480]	; (8002ce4 <HAL_UART_MspInit+0x258>)
 8002b04:	f00d f9a2 	bl	800fe4c <HAL_GPIO_Init>
   /* USER CODE BEGIN USART6_MspInit 1 */

   /* USER CODE END USART6_MspInit 1 */
   }

}
 8002b08:	e12b      	b.n	8002d62 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART2)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a76      	ldr	r2, [pc, #472]	; (8002ce8 <HAL_UART_MspInit+0x25c>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d12c      	bne.n	8002b6e <HAL_UART_MspInit+0xe2>
      __HAL_RCC_USART2_CLK_ENABLE();
 8002b14:	2300      	movs	r3, #0
 8002b16:	633b      	str	r3, [r7, #48]	; 0x30
 8002b18:	4b71      	ldr	r3, [pc, #452]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	4a70      	ldr	r2, [pc, #448]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002b1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b22:	6413      	str	r3, [r2, #64]	; 0x40
 8002b24:	4b6e      	ldr	r3, [pc, #440]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b30:	2300      	movs	r3, #0
 8002b32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b34:	4b6a      	ldr	r3, [pc, #424]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	4a69      	ldr	r2, [pc, #420]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002b3a:	f043 0308 	orr.w	r3, r3, #8
 8002b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b40:	4b67      	ldr	r3, [pc, #412]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002b4c:	2360      	movs	r3, #96	; 0x60
 8002b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b50:	2302      	movs	r3, #2
 8002b52:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b5c:	2307      	movs	r3, #7
 8002b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b60:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b64:	4619      	mov	r1, r3
 8002b66:	4861      	ldr	r0, [pc, #388]	; (8002cec <HAL_UART_MspInit+0x260>)
 8002b68:	f00d f970 	bl	800fe4c <HAL_GPIO_Init>
}
 8002b6c:	e0f9      	b.n	8002d62 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART3)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a5f      	ldr	r2, [pc, #380]	; (8002cf0 <HAL_UART_MspInit+0x264>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d12d      	bne.n	8002bd4 <HAL_UART_MspInit+0x148>
      __HAL_RCC_USART3_CLK_ENABLE();
 8002b78:	2300      	movs	r3, #0
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b7c:	4b58      	ldr	r3, [pc, #352]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	4a57      	ldr	r2, [pc, #348]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002b82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b86:	6413      	str	r3, [r2, #64]	; 0x40
 8002b88:	4b55      	ldr	r3, [pc, #340]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b94:	2300      	movs	r3, #0
 8002b96:	627b      	str	r3, [r7, #36]	; 0x24
 8002b98:	4b51      	ldr	r3, [pc, #324]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9c:	4a50      	ldr	r2, [pc, #320]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002b9e:	f043 0308 	orr.w	r3, r3, #8
 8002ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba4:	4b4e      	ldr	r3, [pc, #312]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bb0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002bc2:	2307      	movs	r3, #7
 8002bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bc6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4847      	ldr	r0, [pc, #284]	; (8002cec <HAL_UART_MspInit+0x260>)
 8002bce:	f00d f93d 	bl	800fe4c <HAL_GPIO_Init>
}
 8002bd2:	e0c6      	b.n	8002d62 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART4)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a46      	ldr	r2, [pc, #280]	; (8002cf4 <HAL_UART_MspInit+0x268>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d12d      	bne.n	8002c3a <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_UART4_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	623b      	str	r3, [r7, #32]
 8002be2:	4b3f      	ldr	r3, [pc, #252]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	4a3e      	ldr	r2, [pc, #248]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002be8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002bec:	6413      	str	r3, [r2, #64]	; 0x40
 8002bee:	4b3c      	ldr	r3, [pc, #240]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bf6:	623b      	str	r3, [r7, #32]
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
 8002bfe:	4b38      	ldr	r3, [pc, #224]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	4a37      	ldr	r2, [pc, #220]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002c04:	f043 0304 	orr.w	r3, r3, #4
 8002c08:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0a:	4b35      	ldr	r3, [pc, #212]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	61fb      	str	r3, [r7, #28]
 8002c14:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002c16:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c20:	2301      	movs	r3, #1
 8002c22:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c24:	2303      	movs	r3, #3
 8002c26:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002c28:	2308      	movs	r3, #8
 8002c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c2c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c30:	4619      	mov	r1, r3
 8002c32:	4831      	ldr	r0, [pc, #196]	; (8002cf8 <HAL_UART_MspInit+0x26c>)
 8002c34:	f00d f90a 	bl	800fe4c <HAL_GPIO_Init>
}
 8002c38:	e093      	b.n	8002d62 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART5)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a2f      	ldr	r2, [pc, #188]	; (8002cfc <HAL_UART_MspInit+0x270>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d15d      	bne.n	8002d00 <HAL_UART_MspInit+0x274>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002c44:	2300      	movs	r3, #0
 8002c46:	61bb      	str	r3, [r7, #24]
 8002c48:	4b25      	ldr	r3, [pc, #148]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	4a24      	ldr	r2, [pc, #144]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002c4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c52:	6413      	str	r3, [r2, #64]	; 0x40
 8002c54:	4b22      	ldr	r3, [pc, #136]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	4b1e      	ldr	r3, [pc, #120]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	4a1d      	ldr	r2, [pc, #116]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002c6a:	f043 0304 	orr.w	r3, r3, #4
 8002c6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c70:	4b1b      	ldr	r3, [pc, #108]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	4b17      	ldr	r3, [pc, #92]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	4a16      	ldr	r2, [pc, #88]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002c86:	f043 0308 	orr.w	r3, r3, #8
 8002c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8c:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002caa:	2308      	movs	r3, #8
 8002cac:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4810      	ldr	r0, [pc, #64]	; (8002cf8 <HAL_UART_MspInit+0x26c>)
 8002cb6:	f00d f8c9 	bl	800fe4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002cba:	2304      	movs	r3, #4
 8002cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002cca:	2308      	movs	r3, #8
 8002ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4805      	ldr	r0, [pc, #20]	; (8002cec <HAL_UART_MspInit+0x260>)
 8002cd6:	f00d f8b9 	bl	800fe4c <HAL_GPIO_Init>
}
 8002cda:	e042      	b.n	8002d62 <HAL_UART_MspInit+0x2d6>
 8002cdc:	40011000 	.word	0x40011000
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	40020000 	.word	0x40020000
 8002ce8:	40004400 	.word	0x40004400
 8002cec:	40020c00 	.word	0x40020c00
 8002cf0:	40004800 	.word	0x40004800
 8002cf4:	40004c00 	.word	0x40004c00
 8002cf8:	40020800 	.word	0x40020800
 8002cfc:	40005000 	.word	0x40005000
  else if(huart->Instance==USART6)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a19      	ldr	r2, [pc, #100]	; (8002d6c <HAL_UART_MspInit+0x2e0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d12b      	bne.n	8002d62 <HAL_UART_MspInit+0x2d6>
     __HAL_RCC_USART6_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	4b18      	ldr	r3, [pc, #96]	; (8002d70 <HAL_UART_MspInit+0x2e4>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	4a17      	ldr	r2, [pc, #92]	; (8002d70 <HAL_UART_MspInit+0x2e4>)
 8002d14:	f043 0320 	orr.w	r3, r3, #32
 8002d18:	6453      	str	r3, [r2, #68]	; 0x44
 8002d1a:	4b15      	ldr	r3, [pc, #84]	; (8002d70 <HAL_UART_MspInit+0x2e4>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	f003 0320 	and.w	r3, r3, #32
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]
     __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <HAL_UART_MspInit+0x2e4>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	4a10      	ldr	r2, [pc, #64]	; (8002d70 <HAL_UART_MspInit+0x2e4>)
 8002d30:	f043 0304 	orr.w	r3, r3, #4
 8002d34:	6313      	str	r3, [r2, #48]	; 0x30
 8002d36:	4b0e      	ldr	r3, [pc, #56]	; (8002d70 <HAL_UART_MspInit+0x2e4>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	f003 0304 	and.w	r3, r3, #4
 8002d3e:	60bb      	str	r3, [r7, #8]
 8002d40:	68bb      	ldr	r3, [r7, #8]
     GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d42:	23c0      	movs	r3, #192	; 0xc0
 8002d44:	63fb      	str	r3, [r7, #60]	; 0x3c
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d46:	2302      	movs	r3, #2
 8002d48:	643b      	str	r3, [r7, #64]	; 0x40
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	647b      	str	r3, [r7, #68]	; 0x44
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	64bb      	str	r3, [r7, #72]	; 0x48
     GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002d52:	2308      	movs	r3, #8
 8002d54:	64fb      	str	r3, [r7, #76]	; 0x4c
     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d56:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4805      	ldr	r0, [pc, #20]	; (8002d74 <HAL_UART_MspInit+0x2e8>)
 8002d5e:	f00d f875 	bl	800fe4c <HAL_GPIO_Init>
}
 8002d62:	bf00      	nop
 8002d64:	3750      	adds	r7, #80	; 0x50
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40011400 	.word	0x40011400
 8002d70:	40023800 	.word	0x40023800
 8002d74:	40020800 	.word	0x40020800

08002d78 <HAL_TIM_Encoder_MspInit>:
  }

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b094      	sub	sp, #80	; 0x50
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	60da      	str	r2, [r3, #12]
 8002d8e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a8c      	ldr	r2, [pc, #560]	; (8002fc8 <HAL_TIM_Encoder_MspInit+0x250>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d12d      	bne.n	8002df6 <HAL_TIM_Encoder_MspInit+0x7e>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d9e:	4b8b      	ldr	r3, [pc, #556]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da2:	4a8a      	ldr	r2, [pc, #552]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	6453      	str	r3, [r2, #68]	; 0x44
 8002daa:	4b88      	ldr	r3, [pc, #544]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	637b      	str	r3, [r7, #52]	; 0x34
 8002dba:	4b84      	ldr	r3, [pc, #528]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	4a83      	ldr	r2, [pc, #524]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002dc0:	f043 0310 	orr.w	r3, r3, #16
 8002dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc6:	4b81      	ldr	r3, [pc, #516]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	f003 0310 	and.w	r3, r3, #16
 8002dce:	637b      	str	r3, [r7, #52]	; 0x34
 8002dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34


    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002dd2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de0:	2300      	movs	r3, #0
 8002de2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002de4:	2301      	movs	r3, #1
 8002de6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002de8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002dec:	4619      	mov	r1, r3
 8002dee:	4878      	ldr	r0, [pc, #480]	; (8002fd0 <HAL_TIM_Encoder_MspInit+0x258>)
 8002df0:	f00d f82c 	bl	800fe4c <HAL_GPIO_Init>
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  }

}
 8002df4:	e12b      	b.n	800304e <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM2){
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dfe:	d14b      	bne.n	8002e98 <HAL_TIM_Encoder_MspInit+0x120>
	  __HAL_RCC_TIM2_CLK_ENABLE();
 8002e00:	2300      	movs	r3, #0
 8002e02:	633b      	str	r3, [r7, #48]	; 0x30
 8002e04:	4b71      	ldr	r3, [pc, #452]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	4a70      	ldr	r2, [pc, #448]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	6413      	str	r3, [r2, #64]	; 0x40
 8002e10:	4b6e      	ldr	r3, [pc, #440]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	633b      	str	r3, [r7, #48]	; 0x30
 8002e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e20:	4b6a      	ldr	r3, [pc, #424]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e24:	4a69      	ldr	r2, [pc, #420]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2c:	4b67      	ldr	r3, [pc, #412]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e38:	2300      	movs	r3, #0
 8002e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e3c:	4b63      	ldr	r3, [pc, #396]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e40:	4a62      	ldr	r2, [pc, #392]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002e42:	f043 0302 	orr.w	r3, r3, #2
 8002e46:	6313      	str	r3, [r2, #48]	; 0x30
 8002e48:	4b60      	ldr	r3, [pc, #384]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002e54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e58:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e62:	2300      	movs	r3, #0
 8002e64:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e66:	2301      	movs	r3, #1
 8002e68:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4858      	ldr	r0, [pc, #352]	; (8002fd4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002e72:	f00c ffeb 	bl	800fe4c <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e76:	2308      	movs	r3, #8
 8002e78:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e82:	2300      	movs	r3, #0
 8002e84:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e86:	2301      	movs	r3, #1
 8002e88:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e8a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4851      	ldr	r0, [pc, #324]	; (8002fd8 <HAL_TIM_Encoder_MspInit+0x260>)
 8002e92:	f00c ffdb 	bl	800fe4c <HAL_GPIO_Init>
}
 8002e96:	e0da      	b.n	800304e <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM3){
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a4f      	ldr	r2, [pc, #316]	; (8002fdc <HAL_TIM_Encoder_MspInit+0x264>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d12c      	bne.n	8002efc <HAL_TIM_Encoder_MspInit+0x184>
	  __HAL_RCC_TIM3_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea6:	4b49      	ldr	r3, [pc, #292]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	4a48      	ldr	r2, [pc, #288]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002eac:	f043 0302 	orr.w	r3, r3, #2
 8002eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb2:	4b46      	ldr	r3, [pc, #280]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	627b      	str	r3, [r7, #36]	; 0x24
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	623b      	str	r3, [r7, #32]
 8002ec2:	4b42      	ldr	r3, [pc, #264]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	4a41      	ldr	r2, [pc, #260]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ece:	4b3f      	ldr	r3, [pc, #252]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	623b      	str	r3, [r7, #32]
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
	  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002eda:	23c0      	movs	r3, #192	; 0xc0
 8002edc:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002eea:	2302      	movs	r3, #2
 8002eec:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4837      	ldr	r0, [pc, #220]	; (8002fd4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002ef6:	f00c ffa9 	bl	800fe4c <HAL_GPIO_Init>
}
 8002efa:	e0a8      	b.n	800304e <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM4){
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a37      	ldr	r2, [pc, #220]	; (8002fe0 <HAL_TIM_Encoder_MspInit+0x268>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d12d      	bne.n	8002f62 <HAL_TIM_Encoder_MspInit+0x1ea>
	  __HAL_RCC_TIM4_CLK_ENABLE();
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	4b30      	ldr	r3, [pc, #192]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	4a2f      	ldr	r2, [pc, #188]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002f10:	f043 0304 	orr.w	r3, r3, #4
 8002f14:	6413      	str	r3, [r2, #64]	; 0x40
 8002f16:	4b2d      	ldr	r3, [pc, #180]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	61fb      	str	r3, [r7, #28]
 8002f20:	69fb      	ldr	r3, [r7, #28]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f22:	2300      	movs	r3, #0
 8002f24:	61bb      	str	r3, [r7, #24]
 8002f26:	4b29      	ldr	r3, [pc, #164]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	4a28      	ldr	r2, [pc, #160]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002f2c:	f043 0308 	orr.w	r3, r3, #8
 8002f30:	6313      	str	r3, [r2, #48]	; 0x30
 8002f32:	4b26      	ldr	r3, [pc, #152]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	61bb      	str	r3, [r7, #24]
 8002f3c:	69bb      	ldr	r3, [r7, #24]
	  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002f3e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002f42:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f44:	2302      	movs	r3, #2
 8002f46:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f50:	2302      	movs	r3, #2
 8002f52:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4822      	ldr	r0, [pc, #136]	; (8002fe4 <HAL_TIM_Encoder_MspInit+0x26c>)
 8002f5c:	f00c ff76 	bl	800fe4c <HAL_GPIO_Init>
}
 8002f60:	e075      	b.n	800304e <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM5){
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a20      	ldr	r2, [pc, #128]	; (8002fe8 <HAL_TIM_Encoder_MspInit+0x270>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d13f      	bne.n	8002fec <HAL_TIM_Encoder_MspInit+0x274>
	  __HAL_RCC_TIM5_CLK_ENABLE();
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	4b16      	ldr	r3, [pc, #88]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	4a15      	ldr	r2, [pc, #84]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002f76:	f043 0308 	orr.w	r3, r3, #8
 8002f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f7c:	4b13      	ldr	r3, [pc, #76]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f88:	2300      	movs	r3, #0
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	4b0f      	ldr	r3, [pc, #60]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f90:	4a0e      	ldr	r2, [pc, #56]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002f92:	f043 0301 	orr.w	r3, r3, #1
 8002f96:	6313      	str	r3, [r2, #48]	; 0x30
 8002f98:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	693b      	ldr	r3, [r7, #16]
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4805      	ldr	r0, [pc, #20]	; (8002fd4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002fc0:	f00c ff44 	bl	800fe4c <HAL_GPIO_Init>
}
 8002fc4:	e043      	b.n	800304e <HAL_TIM_Encoder_MspInit+0x2d6>
 8002fc6:	bf00      	nop
 8002fc8:	40010000 	.word	0x40010000
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	40020000 	.word	0x40020000
 8002fd8:	40020400 	.word	0x40020400
 8002fdc:	40000400 	.word	0x40000400
 8002fe0:	40000800 	.word	0x40000800
 8002fe4:	40020c00 	.word	0x40020c00
 8002fe8:	40000c00 	.word	0x40000c00
  }else if(htim_encoder->Instance==TIM8){
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a19      	ldr	r2, [pc, #100]	; (8003058 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d12b      	bne.n	800304e <HAL_TIM_Encoder_MspInit+0x2d6>
	  __HAL_RCC_TIM8_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	4b18      	ldr	r3, [pc, #96]	; (800305c <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffe:	4a17      	ldr	r2, [pc, #92]	; (800305c <HAL_TIM_Encoder_MspInit+0x2e4>)
 8003000:	f043 0302 	orr.w	r3, r3, #2
 8003004:	6453      	str	r3, [r2, #68]	; 0x44
 8003006:	4b15      	ldr	r3, [pc, #84]	; (800305c <HAL_TIM_Encoder_MspInit+0x2e4>)
 8003008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	4b11      	ldr	r3, [pc, #68]	; (800305c <HAL_TIM_Encoder_MspInit+0x2e4>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	4a10      	ldr	r2, [pc, #64]	; (800305c <HAL_TIM_Encoder_MspInit+0x2e4>)
 800301c:	f043 0304 	orr.w	r3, r3, #4
 8003020:	6313      	str	r3, [r2, #48]	; 0x30
 8003022:	4b0e      	ldr	r3, [pc, #56]	; (800305c <HAL_TIM_Encoder_MspInit+0x2e4>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	60bb      	str	r3, [r7, #8]
 800302c:	68bb      	ldr	r3, [r7, #8]
	  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800302e:	23c0      	movs	r3, #192	; 0xc0
 8003030:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003032:	2302      	movs	r3, #2
 8003034:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003036:	2300      	movs	r3, #0
 8003038:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303a:	2300      	movs	r3, #0
 800303c:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800303e:	2303      	movs	r3, #3
 8003040:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003042:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003046:	4619      	mov	r1, r3
 8003048:	4805      	ldr	r0, [pc, #20]	; (8003060 <HAL_TIM_Encoder_MspInit+0x2e8>)
 800304a:	f00c feff 	bl	800fe4c <HAL_GPIO_Init>
}
 800304e:	bf00      	nop
 8003050:	3750      	adds	r7, #80	; 0x50
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40010400 	.word	0x40010400
 800305c:	40023800 	.word	0x40023800
 8003060:	40020800 	.word	0x40020800

08003064 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08e      	sub	sp, #56	; 0x38
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800306c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	60da      	str	r2, [r3, #12]
 800307a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a6a      	ldr	r2, [pc, #424]	; (800322c <HAL_SPI_MspInit+0x1c8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d13c      	bne.n	8003100 <HAL_SPI_MspInit+0x9c>
  {

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	623b      	str	r3, [r7, #32]
 800308a:	4b69      	ldr	r3, [pc, #420]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 800308c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308e:	4a68      	ldr	r2, [pc, #416]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 8003090:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003094:	6453      	str	r3, [r2, #68]	; 0x44
 8003096:	4b66      	ldr	r3, [pc, #408]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800309e:	623b      	str	r3, [r7, #32]
 80030a0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	61fb      	str	r3, [r7, #28]
 80030a6:	4b62      	ldr	r3, [pc, #392]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	4a61      	ldr	r2, [pc, #388]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	6313      	str	r3, [r2, #48]	; 0x30
 80030b2:	4b5f      	ldr	r3, [pc, #380]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	61fb      	str	r3, [r7, #28]
 80030bc:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80030be:	2320      	movs	r3, #32
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c2:	2302      	movs	r3, #2
 80030c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030c6:	2301      	movs	r3, #1
 80030c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ca:	2303      	movs	r3, #3
 80030cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80030ce:	2305      	movs	r3, #5
 80030d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030d6:	4619      	mov	r1, r3
 80030d8:	4856      	ldr	r0, [pc, #344]	; (8003234 <HAL_SPI_MspInit+0x1d0>)
 80030da:	f00c feb7 	bl	800fe4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030de:	23c0      	movs	r3, #192	; 0xc0
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e2:	2302      	movs	r3, #2
 80030e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80030e6:	2302      	movs	r3, #2
 80030e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ea:	2303      	movs	r3, #3
 80030ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80030ee:	2305      	movs	r3, #5
 80030f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030f6:	4619      	mov	r1, r3
 80030f8:	484e      	ldr	r0, [pc, #312]	; (8003234 <HAL_SPI_MspInit+0x1d0>)
 80030fa:	f00c fea7 	bl	800fe4c <HAL_GPIO_Init>
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);


  }

}
 80030fe:	e090      	b.n	8003222 <HAL_SPI_MspInit+0x1be>
  }else if (hspi->Instance==SPI2){
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a4c      	ldr	r2, [pc, #304]	; (8003238 <HAL_SPI_MspInit+0x1d4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d13e      	bne.n	8003188 <HAL_SPI_MspInit+0x124>
	  __HAL_RCC_SPI2_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	61bb      	str	r3, [r7, #24]
 800310e:	4b48      	ldr	r3, [pc, #288]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	4a47      	ldr	r2, [pc, #284]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 8003114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003118:	6413      	str	r3, [r2, #64]	; 0x40
 800311a:	4b45      	ldr	r3, [pc, #276]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003122:	61bb      	str	r3, [r7, #24]
 8003124:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]
 800312a:	4b41      	ldr	r3, [pc, #260]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	4a40      	ldr	r2, [pc, #256]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 8003130:	f043 0302 	orr.w	r3, r3, #2
 8003134:	6313      	str	r3, [r2, #48]	; 0x30
 8003136:	4b3e      	ldr	r3, [pc, #248]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	697b      	ldr	r3, [r7, #20]
	  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003142:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003148:	2302      	movs	r3, #2
 800314a:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800314c:	2301      	movs	r3, #1
 800314e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003150:	2303      	movs	r3, #3
 8003152:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003154:	2305      	movs	r3, #5
 8003156:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800315c:	4619      	mov	r1, r3
 800315e:	4837      	ldr	r0, [pc, #220]	; (800323c <HAL_SPI_MspInit+0x1d8>)
 8003160:	f00c fe74 	bl	800fe4c <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003164:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316a:	2302      	movs	r3, #2
 800316c:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800316e:	2302      	movs	r3, #2
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003172:	2303      	movs	r3, #3
 8003174:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003176:	2305      	movs	r3, #5
 8003178:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800317a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800317e:	4619      	mov	r1, r3
 8003180:	482e      	ldr	r0, [pc, #184]	; (800323c <HAL_SPI_MspInit+0x1d8>)
 8003182:	f00c fe63 	bl	800fe4c <HAL_GPIO_Init>
}
 8003186:	e04c      	b.n	8003222 <HAL_SPI_MspInit+0x1be>
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003188:	2300      	movs	r3, #0
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	4b28      	ldr	r3, [pc, #160]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	4a27      	ldr	r2, [pc, #156]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 8003192:	f043 0302 	orr.w	r3, r3, #2
 8003196:	6313      	str	r3, [r2, #48]	; 0x30
 8003198:	4b25      	ldr	r3, [pc, #148]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	613b      	str	r3, [r7, #16]
 80031a2:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031a4:	2300      	movs	r3, #0
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	4b21      	ldr	r3, [pc, #132]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ac:	4a20      	ldr	r2, [pc, #128]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 80031ae:	f043 0304 	orr.w	r3, r3, #4
 80031b2:	6313      	str	r3, [r2, #48]	; 0x30
 80031b4:	4b1e      	ldr	r3, [pc, #120]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 80031b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	68fb      	ldr	r3, [r7, #12]
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80031c0:	2308      	movs	r3, #8
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c4:	2302      	movs	r3, #2
 80031c6:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031c8:	2301      	movs	r3, #1
 80031ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031cc:	2303      	movs	r3, #3
 80031ce:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80031d0:	2306      	movs	r3, #6
 80031d2:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031d8:	4619      	mov	r1, r3
 80031da:	4818      	ldr	r0, [pc, #96]	; (800323c <HAL_SPI_MspInit+0x1d8>)
 80031dc:	f00c fe36 	bl	800fe4c <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80031e0:	2310      	movs	r3, #16
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e4:	2302      	movs	r3, #2
 80031e6:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80031e8:	2302      	movs	r3, #2
 80031ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ec:	2303      	movs	r3, #3
 80031ee:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80031f0:	2306      	movs	r3, #6
 80031f2:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031f8:	4619      	mov	r1, r3
 80031fa:	4810      	ldr	r0, [pc, #64]	; (800323c <HAL_SPI_MspInit+0x1d8>)
 80031fc:	f00c fe26 	bl	800fe4c <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003206:	2302      	movs	r3, #2
 8003208:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800320a:	2302      	movs	r3, #2
 800320c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800320e:	2303      	movs	r3, #3
 8003210:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003212:	2306      	movs	r3, #6
 8003214:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800321a:	4619      	mov	r1, r3
 800321c:	4808      	ldr	r0, [pc, #32]	; (8003240 <HAL_SPI_MspInit+0x1dc>)
 800321e:	f00c fe15 	bl	800fe4c <HAL_GPIO_Init>
}
 8003222:	bf00      	nop
 8003224:	3738      	adds	r7, #56	; 0x38
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40013000 	.word	0x40013000
 8003230:	40023800 	.word	0x40023800
 8003234:	40020000 	.word	0x40020000
 8003238:	40003800 	.word	0x40003800
 800323c:	40020400 	.word	0x40020400
 8003240:	40020800 	.word	0x40020800

08003244 <SystemClock_Config>:

	}
}

void SystemClock_Config(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b094      	sub	sp, #80	; 0x50
 8003248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800324a:	f107 0320 	add.w	r3, r7, #32
 800324e:	2230      	movs	r2, #48	; 0x30
 8003250:	2100      	movs	r1, #0
 8003252:	4618      	mov	r0, r3
 8003254:	f015 fd12 	bl	8018c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003258:	f107 030c 	add.w	r3, r7, #12
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	605a      	str	r2, [r3, #4]
 8003262:	609a      	str	r2, [r3, #8]
 8003264:	60da      	str	r2, [r3, #12]
 8003266:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003268:	2300      	movs	r3, #0
 800326a:	60bb      	str	r3, [r7, #8]
 800326c:	4b29      	ldr	r3, [pc, #164]	; (8003314 <SystemClock_Config+0xd0>)
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	4a28      	ldr	r2, [pc, #160]	; (8003314 <SystemClock_Config+0xd0>)
 8003272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003276:	6413      	str	r3, [r2, #64]	; 0x40
 8003278:	4b26      	ldr	r3, [pc, #152]	; (8003314 <SystemClock_Config+0xd0>)
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003284:	2300      	movs	r3, #0
 8003286:	607b      	str	r3, [r7, #4]
 8003288:	4b23      	ldr	r3, [pc, #140]	; (8003318 <SystemClock_Config+0xd4>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a22      	ldr	r2, [pc, #136]	; (8003318 <SystemClock_Config+0xd4>)
 800328e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	4b20      	ldr	r3, [pc, #128]	; (8003318 <SystemClock_Config+0xd4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800329c:	607b      	str	r3, [r7, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80032a0:	2301      	movs	r3, #1
 80032a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80032a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032aa:	2302      	movs	r3, #2
 80032ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80032ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80032b4:	2308      	movs	r3, #8
 80032b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80032b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80032bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80032be:	2302      	movs	r3, #2
 80032c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80032c2:	2304      	movs	r3, #4
 80032c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032c6:	f107 0320 	add.w	r3, r7, #32
 80032ca:	4618      	mov	r0, r3
 80032cc:	f00f f8b8 	bl	8012440 <HAL_RCC_OscConfig>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80032d6:	f001 fce9 	bl	8004cac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032da:	230f      	movs	r3, #15
 80032dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032de:	2302      	movs	r3, #2
 80032e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80032e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80032ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80032ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80032f2:	f107 030c 	add.w	r3, r7, #12
 80032f6:	2105      	movs	r1, #5
 80032f8:	4618      	mov	r0, r3
 80032fa:	f00f fb11 	bl	8012920 <HAL_RCC_ClockConfig>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003304:	f001 fcd2 	bl	8004cac <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003308:	f00f fbf0 	bl	8012aec <HAL_RCC_EnableCSS>
}
 800330c:	bf00      	nop
 800330e:	3750      	adds	r7, #80	; 0x50
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40023800 	.word	0x40023800
 8003318:	40007000 	.word	0x40007000

0800331c <TIMxInit>:
 * 						  BIOSTIMx_Init (&htim2, 1000, 84);  //1ms  interrupt
 * 						  BIOSTIMx_Init (&htim3, 20000, 84); //20ms interrupt
 */

void TIMxInit(TIM_HandleTypeDef* htimx, uint16_t period, uint16_t prescaler)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	807b      	strh	r3, [r7, #2]
 8003328:	4613      	mov	r3, r2
 800332a:	803b      	strh	r3, [r7, #0]

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800332c:	f107 030c 	add.w	r3, r7, #12
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	605a      	str	r2, [r3, #4]
	int nvic = 0;
 8003336:	2300      	movs	r3, #0
 8003338:	617b      	str	r3, [r7, #20]

	if(htimx == &htim1){
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a9b      	ldr	r2, [pc, #620]	; (80035ac <TIMxInit+0x290>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d105      	bne.n	800334e <TIMxInit+0x32>
		htimx->Instance = TIM1;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a9a      	ldr	r2, [pc, #616]	; (80035b0 <TIMxInit+0x294>)
 8003346:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8003348:	2319      	movs	r3, #25
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	e081      	b.n	8003452 <TIMxInit+0x136>
	}
	else if(htimx == &htim2)	{
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a98      	ldr	r2, [pc, #608]	; (80035b4 <TIMxInit+0x298>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d106      	bne.n	8003364 <TIMxInit+0x48>
		htimx->Instance = TIM2;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800335c:	601a      	str	r2, [r3, #0]
		nvic = TIM2_IRQn;
 800335e:	231c      	movs	r3, #28
 8003360:	617b      	str	r3, [r7, #20]
 8003362:	e076      	b.n	8003452 <TIMxInit+0x136>
	}
	else if(htimx == &htim3)	{
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a94      	ldr	r2, [pc, #592]	; (80035b8 <TIMxInit+0x29c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d105      	bne.n	8003378 <TIMxInit+0x5c>
		htimx->Instance = TIM3;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a93      	ldr	r2, [pc, #588]	; (80035bc <TIMxInit+0x2a0>)
 8003370:	601a      	str	r2, [r3, #0]
		nvic = TIM3_IRQn;
 8003372:	231d      	movs	r3, #29
 8003374:	617b      	str	r3, [r7, #20]
 8003376:	e06c      	b.n	8003452 <TIMxInit+0x136>
	}
	else if(htimx == &htim4)	{
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a91      	ldr	r2, [pc, #580]	; (80035c0 <TIMxInit+0x2a4>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d105      	bne.n	800338c <TIMxInit+0x70>
		htimx->Instance = TIM4;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a90      	ldr	r2, [pc, #576]	; (80035c4 <TIMxInit+0x2a8>)
 8003384:	601a      	str	r2, [r3, #0]
		nvic = TIM4_IRQn;
 8003386:	231e      	movs	r3, #30
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	e062      	b.n	8003452 <TIMxInit+0x136>
	}
	else if(htimx == &htim5)	{
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a8e      	ldr	r2, [pc, #568]	; (80035c8 <TIMxInit+0x2ac>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d105      	bne.n	80033a0 <TIMxInit+0x84>
		htimx->Instance = TIM5;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a8d      	ldr	r2, [pc, #564]	; (80035cc <TIMxInit+0x2b0>)
 8003398:	601a      	str	r2, [r3, #0]
		nvic = TIM5_IRQn;
 800339a:	2332      	movs	r3, #50	; 0x32
 800339c:	617b      	str	r3, [r7, #20]
 800339e:	e058      	b.n	8003452 <TIMxInit+0x136>
	}
	else if(htimx == &htim6)	{
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a8b      	ldr	r2, [pc, #556]	; (80035d0 <TIMxInit+0x2b4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d105      	bne.n	80033b4 <TIMxInit+0x98>
		htimx->Instance = TIM6;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a8a      	ldr	r2, [pc, #552]	; (80035d4 <TIMxInit+0x2b8>)
 80033ac:	601a      	str	r2, [r3, #0]
		nvic = TIM6_DAC_IRQn;
 80033ae:	2336      	movs	r3, #54	; 0x36
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	e04e      	b.n	8003452 <TIMxInit+0x136>
	}
	else if(htimx == &htim7)	{
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a88      	ldr	r2, [pc, #544]	; (80035d8 <TIMxInit+0x2bc>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d105      	bne.n	80033c8 <TIMxInit+0xac>
		htimx->Instance = TIM7;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a87      	ldr	r2, [pc, #540]	; (80035dc <TIMxInit+0x2c0>)
 80033c0:	601a      	str	r2, [r3, #0]
		nvic = TIM7_IRQn;
 80033c2:	2337      	movs	r3, #55	; 0x37
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	e044      	b.n	8003452 <TIMxInit+0x136>
	}
	else if(htimx == &htim8)	{
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a85      	ldr	r2, [pc, #532]	; (80035e0 <TIMxInit+0x2c4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d105      	bne.n	80033dc <TIMxInit+0xc0>
		htimx->Instance = TIM8;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a84      	ldr	r2, [pc, #528]	; (80035e4 <TIMxInit+0x2c8>)
 80033d4:	601a      	str	r2, [r3, #0]
		nvic = TIM8_CC_IRQn;
 80033d6:	232e      	movs	r3, #46	; 0x2e
 80033d8:	617b      	str	r3, [r7, #20]
 80033da:	e03a      	b.n	8003452 <TIMxInit+0x136>
	}
	else if(htimx == &htim9)	{
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a82      	ldr	r2, [pc, #520]	; (80035e8 <TIMxInit+0x2cc>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d105      	bne.n	80033f0 <TIMxInit+0xd4>
		htimx->Instance = TIM9;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a81      	ldr	r2, [pc, #516]	; (80035ec <TIMxInit+0x2d0>)
 80033e8:	601a      	str	r2, [r3, #0]
		nvic = TIM1_BRK_TIM9_IRQn;
 80033ea:	2318      	movs	r3, #24
 80033ec:	617b      	str	r3, [r7, #20]
 80033ee:	e030      	b.n	8003452 <TIMxInit+0x136>
	}
	else if(htimx == &htim10)	{
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a7f      	ldr	r2, [pc, #508]	; (80035f0 <TIMxInit+0x2d4>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d105      	bne.n	8003404 <TIMxInit+0xe8>
		htimx->Instance = TIM10;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a7e      	ldr	r2, [pc, #504]	; (80035f4 <TIMxInit+0x2d8>)
 80033fc:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 80033fe:	2319      	movs	r3, #25
 8003400:	617b      	str	r3, [r7, #20]
 8003402:	e026      	b.n	8003452 <TIMxInit+0x136>
	}
	else if(htimx == &htim11)	{
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a7c      	ldr	r2, [pc, #496]	; (80035f8 <TIMxInit+0x2dc>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d105      	bne.n	8003418 <TIMxInit+0xfc>
		htimx->Instance = TIM11;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a7b      	ldr	r2, [pc, #492]	; (80035fc <TIMxInit+0x2e0>)
 8003410:	601a      	str	r2, [r3, #0]
		nvic = TIM1_TRG_COM_TIM11_IRQn;
 8003412:	231a      	movs	r3, #26
 8003414:	617b      	str	r3, [r7, #20]
 8003416:	e01c      	b.n	8003452 <TIMxInit+0x136>
	}
	else if(htimx == &htim12)	{
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a79      	ldr	r2, [pc, #484]	; (8003600 <TIMxInit+0x2e4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d105      	bne.n	800342c <TIMxInit+0x110>
		htimx->Instance = TIM12;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a78      	ldr	r2, [pc, #480]	; (8003604 <TIMxInit+0x2e8>)
 8003424:	601a      	str	r2, [r3, #0]
		nvic = TIM8_BRK_TIM12_IRQn;
 8003426:	232b      	movs	r3, #43	; 0x2b
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	e012      	b.n	8003452 <TIMxInit+0x136>
	}
	else if(htimx == &htim13)	{
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a76      	ldr	r2, [pc, #472]	; (8003608 <TIMxInit+0x2ec>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d105      	bne.n	8003440 <TIMxInit+0x124>
		htimx->Instance = TIM13;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a75      	ldr	r2, [pc, #468]	; (800360c <TIMxInit+0x2f0>)
 8003438:	601a      	str	r2, [r3, #0]
		nvic = TIM8_UP_TIM13_IRQn;
 800343a:	232c      	movs	r3, #44	; 0x2c
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	e008      	b.n	8003452 <TIMxInit+0x136>
	}
	else if(htimx == &htim14)	{
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a73      	ldr	r2, [pc, #460]	; (8003610 <TIMxInit+0x2f4>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d104      	bne.n	8003452 <TIMxInit+0x136>
		htimx->Instance = TIM14;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a72      	ldr	r2, [pc, #456]	; (8003614 <TIMxInit+0x2f8>)
 800344c:	601a      	str	r2, [r3, #0]
		nvic = TIM8_TRG_COM_TIM14_IRQn;
 800344e:	232d      	movs	r3, #45	; 0x2d
 8003450:	617b      	str	r3, [r7, #20]
	}


	htimx->Init.Prescaler = prescaler;
 8003452:	883a      	ldrh	r2, [r7, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = period;
 800345e:	887a      	ldrh	r2, [r7, #2]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	60da      	str	r2, [r3, #12]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f00f fff4 	bl	8013458 <HAL_TIM_Base_Init>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <TIMxInit+0x15e>
	{
		Error_Handler();
 8003476:	f001 fc19 	bl	8004cac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800347a:	2300      	movs	r3, #0
 800347c:	60fb      	str	r3, [r7, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800347e:	2300      	movs	r3, #0
 8003480:	613b      	str	r3, [r7, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8003482:	f107 030c 	add.w	r3, r7, #12
 8003486:	4619      	mov	r1, r3
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f010 ff55 	bl	8014338 <HAL_TIMEx_MasterConfigSynchronization>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <TIMxInit+0x17c>
	{
		Error_Handler();
 8003494:	f001 fc0a 	bl	8004cac <Error_Handler>
	}

	if(htimx == &htim1){
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a44      	ldr	r2, [pc, #272]	; (80035ac <TIMxInit+0x290>)
 800349c:	4293      	cmp	r3, r2
 800349e:	f000 80cb 	beq.w	8003638 <TIMxInit+0x31c>
#ifndef QEI1_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM1_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim2)	{
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a43      	ldr	r2, [pc, #268]	; (80035b4 <TIMxInit+0x298>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	f000 80c6 	beq.w	8003638 <TIMxInit+0x31c>
#ifndef FREERTOS_USED
		HAL_NVIC_SetPriority(nvic, TIM2_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim3)	{
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a42      	ldr	r2, [pc, #264]	; (80035b8 <TIMxInit+0x29c>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	f000 80c1 	beq.w	8003638 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM3_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim4)	{
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a41      	ldr	r2, [pc, #260]	; (80035c0 <TIMxInit+0x2a4>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	f000 80bc 	beq.w	8003638 <TIMxInit+0x31c>
#ifndef QEI4_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM4_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim5)	{
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a41      	ldr	r2, [pc, #260]	; (80035c8 <TIMxInit+0x2ac>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	f000 80b7 	beq.w	8003638 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM5_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim6)	{
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a40      	ldr	r2, [pc, #256]	; (80035d0 <TIMxInit+0x2b4>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d10c      	bne.n	80034ec <TIMxInit+0x1d0>
		HAL_NVIC_SetPriority(nvic, TIM6_IRQ_PRIO, 0);
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	b25b      	sxtb	r3, r3
 80034d6:	2200      	movs	r2, #0
 80034d8:	2108      	movs	r1, #8
 80034da:	4618      	mov	r0, r3
 80034dc:	f00b fd82 	bl	800efe4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	b25b      	sxtb	r3, r3
 80034e4:	4618      	mov	r0, r3
 80034e6:	f00b fd99 	bl	800f01c <HAL_NVIC_EnableIRQ>
 80034ea:	e0a5      	b.n	8003638 <TIMxInit+0x31c>
	}
	else if(htimx == &htim7)	{
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a3a      	ldr	r2, [pc, #232]	; (80035d8 <TIMxInit+0x2bc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d10c      	bne.n	800350e <TIMxInit+0x1f2>
		HAL_NVIC_SetPriority(nvic, TIM7_IRQ_PRIO, 0);
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	b25b      	sxtb	r3, r3
 80034f8:	2200      	movs	r2, #0
 80034fa:	210e      	movs	r1, #14
 80034fc:	4618      	mov	r0, r3
 80034fe:	f00b fd71 	bl	800efe4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	b25b      	sxtb	r3, r3
 8003506:	4618      	mov	r0, r3
 8003508:	f00b fd88 	bl	800f01c <HAL_NVIC_EnableIRQ>
 800350c:	e094      	b.n	8003638 <TIMxInit+0x31c>
	}
	else if(htimx == &htim8)	{
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a33      	ldr	r2, [pc, #204]	; (80035e0 <TIMxInit+0x2c4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	f000 8090 	beq.w	8003638 <TIMxInit+0x31c>
#ifndef QEI6_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM8_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim9)	{
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a33      	ldr	r2, [pc, #204]	; (80035e8 <TIMxInit+0x2cc>)
 800351c:	4293      	cmp	r3, r2
 800351e:	f000 808b 	beq.w	8003638 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM9_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim10)	{
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a32      	ldr	r2, [pc, #200]	; (80035f0 <TIMxInit+0x2d4>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d10c      	bne.n	8003544 <TIMxInit+0x228>
		HAL_NVIC_SetPriority(nvic, TIM10_IRQ_PRIO, 0);
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	b25b      	sxtb	r3, r3
 800352e:	2200      	movs	r2, #0
 8003530:	210e      	movs	r1, #14
 8003532:	4618      	mov	r0, r3
 8003534:	f00b fd56 	bl	800efe4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	b25b      	sxtb	r3, r3
 800353c:	4618      	mov	r0, r3
 800353e:	f00b fd6d 	bl	800f01c <HAL_NVIC_EnableIRQ>
 8003542:	e079      	b.n	8003638 <TIMxInit+0x31c>
	}
	else if(htimx == &htim11)	{
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a2c      	ldr	r2, [pc, #176]	; (80035f8 <TIMxInit+0x2dc>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d10c      	bne.n	8003566 <TIMxInit+0x24a>
		HAL_NVIC_SetPriority(nvic, TIM11_IRQ_PRIO, 0);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	b25b      	sxtb	r3, r3
 8003550:	2200      	movs	r2, #0
 8003552:	210e      	movs	r1, #14
 8003554:	4618      	mov	r0, r3
 8003556:	f00b fd45 	bl	800efe4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	b25b      	sxtb	r3, r3
 800355e:	4618      	mov	r0, r3
 8003560:	f00b fd5c 	bl	800f01c <HAL_NVIC_EnableIRQ>
 8003564:	e068      	b.n	8003638 <TIMxInit+0x31c>
	}
	else if(htimx == &htim12)	{
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a25      	ldr	r2, [pc, #148]	; (8003600 <TIMxInit+0x2e4>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d10c      	bne.n	8003588 <TIMxInit+0x26c>
		HAL_NVIC_SetPriority(nvic, TIM12_IRQ_PRIO, 0);
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	b25b      	sxtb	r3, r3
 8003572:	2200      	movs	r2, #0
 8003574:	210e      	movs	r1, #14
 8003576:	4618      	mov	r0, r3
 8003578:	f00b fd34 	bl	800efe4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	b25b      	sxtb	r3, r3
 8003580:	4618      	mov	r0, r3
 8003582:	f00b fd4b 	bl	800f01c <HAL_NVIC_EnableIRQ>
 8003586:	e057      	b.n	8003638 <TIMxInit+0x31c>
	}
	else if(htimx == &htim13)	{
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a1f      	ldr	r2, [pc, #124]	; (8003608 <TIMxInit+0x2ec>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d143      	bne.n	8003618 <TIMxInit+0x2fc>
		HAL_NVIC_SetPriority(nvic, TIM13_IRQ_PRIO, 0);
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	b25b      	sxtb	r3, r3
 8003594:	2200      	movs	r2, #0
 8003596:	210e      	movs	r1, #14
 8003598:	4618      	mov	r0, r3
 800359a:	f00b fd23 	bl	800efe4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	b25b      	sxtb	r3, r3
 80035a2:	4618      	mov	r0, r3
 80035a4:	f00b fd3a 	bl	800f01c <HAL_NVIC_EnableIRQ>
 80035a8:	e046      	b.n	8003638 <TIMxInit+0x31c>
 80035aa:	bf00      	nop
 80035ac:	20005f60 	.word	0x20005f60
 80035b0:	40010000 	.word	0x40010000
 80035b4:	20006064 	.word	0x20006064
 80035b8:	20005d14 	.word	0x20005d14
 80035bc:	40000400 	.word	0x40000400
 80035c0:	20005b50 	.word	0x20005b50
 80035c4:	40000800 	.word	0x40000800
 80035c8:	20005cd4 	.word	0x20005cd4
 80035cc:	40000c00 	.word	0x40000c00
 80035d0:	20005f20 	.word	0x20005f20
 80035d4:	40001000 	.word	0x40001000
 80035d8:	200061c4 	.word	0x200061c4
 80035dc:	40001400 	.word	0x40001400
 80035e0:	20005b10 	.word	0x20005b10
 80035e4:	40010400 	.word	0x40010400
 80035e8:	20005fa0 	.word	0x20005fa0
 80035ec:	40014000 	.word	0x40014000
 80035f0:	20005c30 	.word	0x20005c30
 80035f4:	40014400 	.word	0x40014400
 80035f8:	20005e78 	.word	0x20005e78
 80035fc:	40014800 	.word	0x40014800
 8003600:	20006184 	.word	0x20006184
 8003604:	40001800 	.word	0x40001800
 8003608:	20005df8 	.word	0x20005df8
 800360c:	40001c00 	.word	0x40001c00
 8003610:	20006144 	.word	0x20006144
 8003614:	40002000 	.word	0x40002000
	}
	else if(htimx == &htim14)	{
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a0c      	ldr	r2, [pc, #48]	; (800364c <TIMxInit+0x330>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d10b      	bne.n	8003638 <TIMxInit+0x31c>
		HAL_NVIC_SetPriority(nvic, TIM14_IRQ_PRIO, 0);
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	b25b      	sxtb	r3, r3
 8003624:	2200      	movs	r2, #0
 8003626:	210e      	movs	r1, #14
 8003628:	4618      	mov	r0, r3
 800362a:	f00b fcdb 	bl	800efe4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	b25b      	sxtb	r3, r3
 8003632:	4618      	mov	r0, r3
 8003634:	f00b fcf2 	bl	800f01c <HAL_NVIC_EnableIRQ>
	}

	HAL_TIM_Base_Start(htimx);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f00f ff38 	bl	80134ae <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(htimx);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f00f ff59 	bl	80134f6 <HAL_TIM_Base_Start_IT>

}
 8003644:	bf00      	nop
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20006144 	.word	0x20006144

08003650 <UARTInit>:
 * 						  rxstate				,can be ENABLE (enable USART1 receive interrupt) or DISBALE
 * Function Return		: None
 * Function Example		: UARTxInit(&huart1, 115200, ENABLE, 0, 0);
 */
void UARTInit(UART_HandleTypeDef* huartx, uint32_t baudrate, FunctionalState rxstate)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	4613      	mov	r3, r2
 800365c:	71fb      	strb	r3, [r7, #7]
	IRQn_Type nvic;
	uint8_t *rcv_data;

	if (huartx == &huart1){
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4a6e      	ldr	r2, [pc, #440]	; (800381c <UARTInit+0x1cc>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d107      	bne.n	8003676 <UARTInit+0x26>
		huartx->Instance = USART1;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4a6d      	ldr	r2, [pc, #436]	; (8003820 <UARTInit+0x1d0>)
 800366a:	601a      	str	r2, [r3, #0]
		nvic = USART1_IRQn;
 800366c:	2325      	movs	r3, #37	; 0x25
 800366e:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart1_data;
 8003670:	4b6c      	ldr	r3, [pc, #432]	; (8003824 <UARTInit+0x1d4>)
 8003672:	613b      	str	r3, [r7, #16]
 8003674:	e036      	b.n	80036e4 <UARTInit+0x94>
	}else if(huartx == &huart2){
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	4a6b      	ldr	r2, [pc, #428]	; (8003828 <UARTInit+0x1d8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d107      	bne.n	800368e <UARTInit+0x3e>
		huartx->Instance = USART2;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4a6a      	ldr	r2, [pc, #424]	; (800382c <UARTInit+0x1dc>)
 8003682:	601a      	str	r2, [r3, #0]
		nvic = USART2_IRQn;
 8003684:	2326      	movs	r3, #38	; 0x26
 8003686:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart2_data;
 8003688:	4b69      	ldr	r3, [pc, #420]	; (8003830 <UARTInit+0x1e0>)
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	e02a      	b.n	80036e4 <UARTInit+0x94>
	}else if(huartx == &huart3){
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4a68      	ldr	r2, [pc, #416]	; (8003834 <UARTInit+0x1e4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d107      	bne.n	80036a6 <UARTInit+0x56>
		huartx->Instance = USART3;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	4a67      	ldr	r2, [pc, #412]	; (8003838 <UARTInit+0x1e8>)
 800369a:	601a      	str	r2, [r3, #0]
		nvic = USART3_IRQn;
 800369c:	2327      	movs	r3, #39	; 0x27
 800369e:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart3_data;
 80036a0:	4b66      	ldr	r3, [pc, #408]	; (800383c <UARTInit+0x1ec>)
 80036a2:	613b      	str	r3, [r7, #16]
 80036a4:	e01e      	b.n	80036e4 <UARTInit+0x94>
	}else if(huartx == &huart4){
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4a65      	ldr	r2, [pc, #404]	; (8003840 <UARTInit+0x1f0>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d107      	bne.n	80036be <UARTInit+0x6e>
		huartx->Instance = UART4;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4a64      	ldr	r2, [pc, #400]	; (8003844 <UARTInit+0x1f4>)
 80036b2:	601a      	str	r2, [r3, #0]
		nvic = UART4_IRQn;
 80036b4:	2334      	movs	r3, #52	; 0x34
 80036b6:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart4_data;
 80036b8:	4b63      	ldr	r3, [pc, #396]	; (8003848 <UARTInit+0x1f8>)
 80036ba:	613b      	str	r3, [r7, #16]
 80036bc:	e012      	b.n	80036e4 <UARTInit+0x94>
	}else if(huartx == &huart5){
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	4a62      	ldr	r2, [pc, #392]	; (800384c <UARTInit+0x1fc>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d107      	bne.n	80036d6 <UARTInit+0x86>
		huartx->Instance = UART5;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4a61      	ldr	r2, [pc, #388]	; (8003850 <UARTInit+0x200>)
 80036ca:	601a      	str	r2, [r3, #0]
		nvic = UART5_IRQn;
 80036cc:	2335      	movs	r3, #53	; 0x35
 80036ce:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart5_data;
 80036d0:	4b60      	ldr	r3, [pc, #384]	; (8003854 <UARTInit+0x204>)
 80036d2:	613b      	str	r3, [r7, #16]
 80036d4:	e006      	b.n	80036e4 <UARTInit+0x94>
	}else{
		huartx->Instance = USART6;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4a5f      	ldr	r2, [pc, #380]	; (8003858 <UARTInit+0x208>)
 80036da:	601a      	str	r2, [r3, #0]
		nvic = USART6_IRQn;
 80036dc:	2347      	movs	r3, #71	; 0x47
 80036de:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart6_data;
 80036e0:	4b5e      	ldr	r3, [pc, #376]	; (800385c <UARTInit+0x20c>)
 80036e2:	613b      	str	r3, [r7, #16]
	}


	huartx->Init.BaudRate = baudrate;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	605a      	str	r2, [r3, #4]
	huartx->Init.WordLength = UART_WORDLENGTH_8B;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	609a      	str	r2, [r3, #8]
	huartx->Init.StopBits = UART_STOPBITS_1;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	60da      	str	r2, [r3, #12]
	huartx->Init.Parity = UART_PARITY_NONE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	611a      	str	r2, [r3, #16]
	huartx->Init.Mode = UART_MODE_TX_RX;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	220c      	movs	r2, #12
 8003700:	615a      	str	r2, [r3, #20]
	huartx->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	619a      	str	r2, [r3, #24]
	huartx->Init.OverSampling = UART_OVERSAMPLING_16;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	61da      	str	r2, [r3, #28]


	if (HAL_UART_Init(huartx) != HAL_OK)
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f010 fea2 	bl	8014458 <HAL_UART_Init>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <UARTInit+0xce>
	{
		Error_Handler();
 800371a:	f001 fac7 	bl	8004cac <Error_Handler>
	}

	if(rxstate == ENABLE){
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d176      	bne.n	8003812 <UARTInit+0x1c2>
		if(huartx == &huart2){
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4a40      	ldr	r2, [pc, #256]	; (8003828 <UARTInit+0x1d8>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d119      	bne.n	8003760 <UARTInit+0x110>

			HAL_NVIC_SetPriority(nvic, UART2_RX_IRQ_PRIO, 0);
 800372c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003730:	2200      	movs	r2, #0
 8003732:	210e      	movs	r1, #14
 8003734:	4618      	mov	r0, r3
 8003736:	f00b fc55 	bl	800efe4 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 800373a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800373e:	4618      	mov	r0, r3
 8003740:	f00b fc88 	bl	800f054 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8003744:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003748:	4618      	mov	r0, r3
 800374a:	f00b fc67 	bl	800f01c <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f042 0220 	orr.w	r2, r2, #32
 800375c:	60da      	str	r2, [r3, #12]
			HAL_NVIC_EnableIRQ(nvic);
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);

		}
	}
}
 800375e:	e058      	b.n	8003812 <UARTInit+0x1c2>
		}else if(huartx == &huart3){
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4a34      	ldr	r2, [pc, #208]	; (8003834 <UARTInit+0x1e4>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d119      	bne.n	800379c <UARTInit+0x14c>
			HAL_NVIC_SetPriority(nvic, UART3_RX_IRQ_PRIO, 0);
 8003768:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800376c:	2200      	movs	r2, #0
 800376e:	210e      	movs	r1, #14
 8003770:	4618      	mov	r0, r3
 8003772:	f00b fc37 	bl	800efe4 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 8003776:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800377a:	4618      	mov	r0, r3
 800377c:	f00b fc6a 	bl	800f054 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8003780:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003784:	4618      	mov	r0, r3
 8003786:	f00b fc49 	bl	800f01c <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f042 0220 	orr.w	r2, r2, #32
 8003798:	60da      	str	r2, [r3, #12]
}
 800379a:	e03a      	b.n	8003812 <UARTInit+0x1c2>
		}else if(huartx == &huart4){
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4a28      	ldr	r2, [pc, #160]	; (8003840 <UARTInit+0x1f0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d119      	bne.n	80037d8 <UARTInit+0x188>
			HAL_NVIC_SetPriority(nvic, UART4_RX_IRQ_PRIO, 0);
 80037a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037a8:	2200      	movs	r2, #0
 80037aa:	2103      	movs	r1, #3
 80037ac:	4618      	mov	r0, r3
 80037ae:	f00b fc19 	bl	800efe4 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 80037b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f00b fc4c 	bl	800f054 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 80037bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f00b fc2b 	bl	800f01c <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0220 	orr.w	r2, r2, #32
 80037d4:	60da      	str	r2, [r3, #12]
}
 80037d6:	e01c      	b.n	8003812 <UARTInit+0x1c2>
		}else if(huartx == &huart5){
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4a1c      	ldr	r2, [pc, #112]	; (800384c <UARTInit+0x1fc>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d118      	bne.n	8003812 <UARTInit+0x1c2>
			HAL_NVIC_SetPriority(nvic, UART5_RX_IRQ_PRIO, 0);
 80037e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037e4:	2200      	movs	r2, #0
 80037e6:	2107      	movs	r1, #7
 80037e8:	4618      	mov	r0, r3
 80037ea:	f00b fbfb 	bl	800efe4 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 80037ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f00b fc2e 	bl	800f054 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 80037f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f00b fc0d 	bl	800f01c <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0220 	orr.w	r2, r2, #32
 8003810:	60da      	str	r2, [r3, #12]
}
 8003812:	bf00      	nop
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	20005e38 	.word	0x20005e38
 8003820:	40011000 	.word	0x40011000
 8003824:	20005b0c 	.word	0x20005b0c
 8003828:	200060a4 	.word	0x200060a4
 800382c:	40004400 	.word	0x40004400
 8003830:	20005eb8 	.word	0x20005eb8
 8003834:	20005bf0 	.word	0x20005bf0
 8003838:	40004800 	.word	0x40004800
 800383c:	20005d55 	.word	0x20005d55
 8003840:	20006024 	.word	0x20006024
 8003844:	40004c00 	.word	0x40004c00
 8003848:	20006020 	.word	0x20006020
 800384c:	20005d58 	.word	0x20005d58
 8003850:	40005000 	.word	0x40005000
 8003854:	20005cd0 	.word	0x20005cd0
 8003858:	40011400 	.word	0x40011400
 800385c:	20005d54 	.word	0x20005d54

08003860 <USART1_IRQHandler>:
void UARTPrintString_IT(UART_HandleTypeDef* huartx, char s[]){
	if(HAL_UART_GetState(huartx) == HAL_UART_STATE_READY)
		HAL_UART_Transmit_IT(huartx, (uint8_t *)s, strlen(s));
}

void  USART1_IRQHandler(void){
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0


	HAL_UART_IRQHandler(&huart1);
 8003864:	4802      	ldr	r0, [pc, #8]	; (8003870 <USART1_IRQHandler+0x10>)
 8003866:	f010 ff33 	bl	80146d0 <HAL_UART_IRQHandler>
}
 800386a:	bf00      	nop
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	20005e38 	.word	0x20005e38

08003874 <USART2_IRQHandler>:

void  USART2_IRQHandler(void){
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart2);
 8003878:	4802      	ldr	r0, [pc, #8]	; (8003884 <USART2_IRQHandler+0x10>)
 800387a:	f010 ff29 	bl	80146d0 <HAL_UART_IRQHandler>
}
 800387e:	bf00      	nop
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	200060a4 	.word	0x200060a4

08003888 <USART3_IRQHandler>:

void  USART3_IRQHandler(void){
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart3);
 800388c:	4802      	ldr	r0, [pc, #8]	; (8003898 <USART3_IRQHandler+0x10>)
 800388e:	f010 ff1f 	bl	80146d0 <HAL_UART_IRQHandler>
}
 8003892:	bf00      	nop
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	20005bf0 	.word	0x20005bf0

0800389c <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart4);
 80038a0:	4802      	ldr	r0, [pc, #8]	; (80038ac <UART4_IRQHandler+0x10>)
 80038a2:	f010 ff15 	bl	80146d0 <HAL_UART_IRQHandler>
}
 80038a6:	bf00      	nop
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20006024 	.word	0x20006024

080038b0 <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart5);
 80038b4:	4802      	ldr	r0, [pc, #8]	; (80038c0 <UART5_IRQHandler+0x10>)
 80038b6:	f010 ff0b 	bl	80146d0 <HAL_UART_IRQHandler>
}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20005d58 	.word	0x20005d58

080038c4 <USART6_IRQHandler>:

void  USART6_IRQHandler(void){
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart6);
 80038c8:	4802      	ldr	r0, [pc, #8]	; (80038d4 <USART6_IRQHandler+0x10>)
 80038ca:	f010 ff01 	bl	80146d0 <HAL_UART_IRQHandler>
}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20005fe0 	.word	0x20005fe0

080038d8 <CANxInit>:
 * Function Return		: CAN_InitStatus				Constant indicates initialization succeed which will be
  *        											    CAN_InitStatus_Failed or CAN_InitStatus_Success.
 * Function Example		: CAN1_Init(&hcan1,4,CAN_Filter_FIFO0,0,0,13,1,1);
 */
void CANxInit(CAN_HandleTypeDef* hcanx,uint16_t prescaler,uint32_t FilterFIFOAssignment,uint16_t CAN_FilterId_11bits,
		uint16_t CAN_FilterMaskId_11bits,uint8_t CAN_FilterNumber, uint8_t rate){
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08e      	sub	sp, #56	; 0x38
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	607a      	str	r2, [r7, #4]
 80038e2:	461a      	mov	r2, r3
 80038e4:	460b      	mov	r3, r1
 80038e6:	817b      	strh	r3, [r7, #10]
 80038e8:	4613      	mov	r3, r2
 80038ea:	813b      	strh	r3, [r7, #8]

	CAN_FilterTypeDef sFilterConfig = {0};
 80038ec:	f107 0310 	add.w	r3, r7, #16
 80038f0:	2228      	movs	r2, #40	; 0x28
 80038f2:	2100      	movs	r1, #0
 80038f4:	4618      	mov	r0, r3
 80038f6:	f015 f9c1 	bl	8018c7c <memset>

	if(hcanx == &hcan1){
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4a53      	ldr	r2, [pc, #332]	; (8003a4c <CANxInit+0x174>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d103      	bne.n	800390a <CANxInit+0x32>
		hcanx->Instance = CAN1;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	4a52      	ldr	r2, [pc, #328]	; (8003a50 <CANxInit+0x178>)
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	e002      	b.n	8003910 <CANxInit+0x38>
	}else{
		hcanx->Instance = CAN2;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4a51      	ldr	r2, [pc, #324]	; (8003a54 <CANxInit+0x17c>)
 800390e:	601a      	str	r2, [r3, #0]
	}


	hcanx->Init.Prescaler = prescaler;
 8003910:	897a      	ldrh	r2, [r7, #10]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	605a      	str	r2, [r3, #4]
	hcanx->Init.Mode = CAN_MODE_NORMAL;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	609a      	str	r2, [r3, #8]

	hcanx->Init.SyncJumpWidth = CAN_SJW_1TQ;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	60da      	str	r2, [r3, #12]
	if(rate == CAN_1MHz){
 8003922:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003926:	2b01      	cmp	r3, #1
 8003928:	d108      	bne.n	800393c <CANxInit+0x64>
		//sampling point 85.71%
		hcanx->Init.TimeSeg1 = CAN_BS1_11TQ;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8003930:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_2TQ;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003938:	615a      	str	r2, [r3, #20]
 800393a:	e00b      	b.n	8003954 <CANxInit+0x7c>
	}else if(rate == CAN_500KHz){
 800393c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003940:	2b00      	cmp	r3, #0
 8003942:	d107      	bne.n	8003954 <CANxInit+0x7c>
		//sampling point 71.42%
		hcanx->Init.TimeSeg1 = CAN_BS1_14TQ;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 800394a:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_6TQ;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 8003952:	615a      	str	r2, [r3, #20]
	}
	hcanx->Init.TimeTriggeredMode = DISABLE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	761a      	strb	r2, [r3, #24]
	hcanx->Init.AutoBusOff = ENABLE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2201      	movs	r2, #1
 800395e:	765a      	strb	r2, [r3, #25]
	hcanx->Init.AutoWakeUp = DISABLE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	769a      	strb	r2, [r3, #26]
	hcanx->Init.AutoRetransmission = DISABLE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	76da      	strb	r2, [r3, #27]
	hcanx->Init.ReceiveFifoLocked = DISABLE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	771a      	strb	r2, [r3, #28]
	hcanx->Init.TransmitFifoPriority = DISABLE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(hcanx) != HAL_OK)
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f00a fbab 	bl	800e0d4 <HAL_CAN_Init>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <CANxInit+0xb0>
	{
		Error_Handler();
 8003984:	f001 f992 	bl	8004cac <Error_Handler>
	}

	sFilterConfig.SlaveStartFilterBank = 14;
 8003988:	230e      	movs	r3, #14
 800398a:	637b      	str	r3, [r7, #52]	; 0x34
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 800398c:	2301      	movs	r3, #1
 800398e:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003990:	2300      	movs	r3, #0
 8003992:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment=FilterFIFOAssignment; //set fifo assignment
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh= CAN_FilterId_11bits <<5; //the ID that the filter looks for (switch this for the other microcontroller)
 8003998:	893b      	ldrh	r3, [r7, #8]
 800399a:	015b      	lsls	r3, r3, #5
 800399c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow=0;
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh=CAN_FilterMaskId_11bits <<5;
 80039a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80039a6:	015b      	lsls	r3, r3, #5
 80039a8:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow=0;
 80039aa:	2300      	movs	r3, #0
 80039ac:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_16BIT; //set filter scale
 80039ae:	2300      	movs	r3, #0
 80039b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterBank = CAN_FilterNumber;
 80039b2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(hcanx, &sFilterConfig);
 80039b8:	f107 0310 	add.w	r3, r7, #16
 80039bc:	4619      	mov	r1, r3
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f00a fc84 	bl	800e2cc <HAL_CAN_ConfigFilter>



	if(hcanx == &hcan1){
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4a21      	ldr	r2, [pc, #132]	; (8003a4c <CANxInit+0x174>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d11c      	bne.n	8003a06 <CANxInit+0x12e>

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10c      	bne.n	80039ec <CANxInit+0x114>
			/* CAN1_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX0_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 80039d2:	2200      	movs	r2, #0
 80039d4:	210e      	movs	r1, #14
 80039d6:	2014      	movs	r0, #20
 80039d8:	f00b fb04 	bl	800efe4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80039dc:	2014      	movs	r0, #20
 80039de:	f00b fb1d 	bl	800f01c <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 80039e2:	2102      	movs	r1, #2
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f00a ffb7 	bl	800e958 <HAL_CAN_ActivateNotification>
 80039ea:	e028      	b.n	8003a3e <CANxInit+0x166>

		}else{
			/* CAN1_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX1_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 80039ec:	2200      	movs	r2, #0
 80039ee:	210e      	movs	r1, #14
 80039f0:	2015      	movs	r0, #21
 80039f2:	f00b faf7 	bl	800efe4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80039f6:	2015      	movs	r0, #21
 80039f8:	f00b fb10 	bl	800f01c <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 80039fc:	2110      	movs	r1, #16
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f00a ffaa 	bl	800e958 <HAL_CAN_ActivateNotification>
 8003a04:	e01b      	b.n	8003a3e <CANxInit+0x166>
		}
	}else{

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10c      	bne.n	8003a26 <CANxInit+0x14e>
			/* CAN2_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX0_IRQn, CAN2_FIFO0_IRQ_PRIO, 0);
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	210e      	movs	r1, #14
 8003a10:	2040      	movs	r0, #64	; 0x40
 8003a12:	f00b fae7 	bl	800efe4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003a16:	2040      	movs	r0, #64	; 0x40
 8003a18:	f00b fb00 	bl	800f01c <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003a1c:	2102      	movs	r1, #2
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f00a ff9a 	bl	800e958 <HAL_CAN_ActivateNotification>
 8003a24:	e00b      	b.n	8003a3e <CANxInit+0x166>
		}else{
			/* CAN2_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX1_IRQn, CAN2_FIFO1_IRQ_PRIO, 0);
 8003a26:	2200      	movs	r2, #0
 8003a28:	210e      	movs	r1, #14
 8003a2a:	2041      	movs	r0, #65	; 0x41
 8003a2c:	f00b fada 	bl	800efe4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8003a30:	2041      	movs	r0, #65	; 0x41
 8003a32:	f00b faf3 	bl	800f01c <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 8003a36:	2110      	movs	r1, #16
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f00a ff8d 	bl	800e958 <HAL_CAN_ActivateNotification>
		}
	}

	HAL_CAN_Start(hcanx);
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f00a fd24 	bl	800e48c <HAL_CAN_Start>

}
 8003a44:	bf00      	nop
 8003a46:	3738      	adds	r7, #56	; 0x38
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	20009d28 	.word	0x20009d28
 8003a50:	40006400 	.word	0x40006400
 8003a54:	40006800 	.word	0x40006800

08003a58 <CAN_TxMsgEID>:
 * Function Return		: canmailbox		The number of the mailbox that is used for transmission or
  *         								CAN_TxStatus_NoMailBox if there is no empty mailbox.
 * Function Example		: CAN_TxMsg(&hcan1,1,&data,1);
 */
uint32_t CAN_TxMsgEID(CAN_HandleTypeDef* hcanx,uint32_t EID,uint8_t *Msg,uint8_t len)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b090      	sub	sp, #64	; 0x40
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
 8003a64:	70fb      	strb	r3, [r7, #3]


	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0);
 8003a66:	bf00      	nop
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f00a fe2e 	bl	800e6ca <HAL_CAN_GetTxMailboxesFreeLevel>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0f9      	beq.n	8003a68 <CAN_TxMsgEID+0x10>
	CAN_TxHeaderTypeDef TxMessage;
	uint32_t canMailbox;
	uint8_t* buf = Msg;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t i=0,datalen=len;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003a7c:	78fb      	ldrb	r3, [r7, #3]
 8003a7e:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t Txmsg[8];

	TxMessage.StdId=0;					 // standard identifier=0
 8003a80:	2300      	movs	r3, #0
 8003a82:	623b      	str	r3, [r7, #32]
	TxMessage.ExtId=EID;					 // extended identifier=StdId
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
	TxMessage.IDE=CAN_Id_Extended;			 // type of identifier for the message is Standard
 8003a88:	2304      	movs	r3, #4
 8003a8a:	62bb      	str	r3, [r7, #40]	; 0x28
	TxMessage.RTR=CAN_RTR_Data;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxMessage.TransmitGlobalTime = DISABLE;  // the type of frame for the message that will be transmitted
 8003a90:	2300      	movs	r3, #0
 8003a92:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	while(datalen--)
 8003a96:	e01f      	b.n	8003ad8 <CAN_TxMsgEID+0x80>
	{
		Txmsg[i++]= *(uint8_t*)buf++;
 8003a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a9e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003aa0:	1c51      	adds	r1, r2, #1
 8003aa2:	8779      	strh	r1, [r7, #58]	; 0x3a
 8003aa4:	4611      	mov	r1, r2
 8003aa6:	781a      	ldrb	r2, [r3, #0]
 8003aa8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003aac:	440b      	add	r3, r1
 8003aae:	f803 2c2c 	strb.w	r2, [r3, #-44]
		if(i == 8){
 8003ab2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d10f      	bne.n	8003ad8 <CAN_TxMsgEID+0x80>
			TxMessage.DLC=8;
 8003ab8:	2308      	movs	r3, #8
 8003aba:	633b      	str	r3, [r7, #48]	; 0x30
			if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 8003abc:	f107 031c 	add.w	r3, r7, #28
 8003ac0:	f107 0214 	add.w	r2, r7, #20
 8003ac4:	f107 0120 	add.w	r1, r7, #32
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f00a fd23 	bl	800e514 <HAL_CAN_AddTxMessage>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <CAN_TxMsgEID+0x80>
				Error_Handler();
 8003ad4:	f001 f8ea 	bl	8004cac <Error_Handler>
	while(datalen--)
 8003ad8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003ada:	1e5a      	subs	r2, r3, #1
 8003adc:	873a      	strh	r2, [r7, #56]	; 0x38
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1da      	bne.n	8003a98 <CAN_TxMsgEID+0x40>
			}
		}
	}
	if(i>0){
 8003ae2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00f      	beq.n	8003b08 <CAN_TxMsgEID+0xb0>
		TxMessage.DLC = i;
 8003ae8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003aea:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 8003aec:	f107 031c 	add.w	r3, r7, #28
 8003af0:	f107 0214 	add.w	r2, r7, #20
 8003af4:	f107 0120 	add.w	r1, r7, #32
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f00a fd0b 	bl	800e514 <HAL_CAN_AddTxMessage>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <CAN_TxMsgEID+0xb0>
			Error_Handler();
 8003b04:	f001 f8d2 	bl	8004cac <Error_Handler>
		}

	}

	return(canMailbox);
 8003b08:	69fb      	ldr	r3, [r7, #28]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3740      	adds	r7, #64	; 0x40
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <I2CX_DMA_RX_Init>:
 * 						  ClockSpeed					Speed of transmission can be CLOCK_SPEED_100KHz or CLOCK_SPEED_400KHz
 * Function Return		: NONE
 * Function Example		: I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 *
 */
void I2CX_DMA_RX_Init(I2C_HandleTypeDef *hi2cx,DMA_HandleTypeDef* hdma_i2cx,uint8_t OwnAddress,uint32_t ClockSpeed){
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b088      	sub	sp, #32
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	603b      	str	r3, [r7, #0]
 8003b20:	4613      	mov	r3, r2
 8003b22:	71fb      	strb	r3, [r7, #7]

	IRQn_Type nvic,nvicER,nvicEV;
	uint32_t DMA_CHANNEL;
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003b24:	2300      	movs	r3, #0
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	4b9e      	ldr	r3, [pc, #632]	; (8003da4 <I2CX_DMA_RX_Init+0x290>)
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2c:	4a9d      	ldr	r2, [pc, #628]	; (8003da4 <I2CX_DMA_RX_Init+0x290>)
 8003b2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b32:	6313      	str	r3, [r2, #48]	; 0x30
 8003b34:	4b9b      	ldr	r3, [pc, #620]	; (8003da4 <I2CX_DMA_RX_Init+0x290>)
 8003b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b3c:	617b      	str	r3, [r7, #20]
 8003b3e:	697b      	ldr	r3, [r7, #20]
	if(hi2cx == &hi2c1){
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4a99      	ldr	r2, [pc, #612]	; (8003da8 <I2CX_DMA_RX_Init+0x294>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d11d      	bne.n	8003b84 <I2CX_DMA_RX_Init+0x70>

		hi2cx->Instance = I2C1;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4a98      	ldr	r2, [pc, #608]	; (8003dac <I2CX_DMA_RX_Init+0x298>)
 8003b4c:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream0;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	4a97      	ldr	r2, [pc, #604]	; (8003db0 <I2CX_DMA_RX_Init+0x29c>)
 8003b52:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_1;
 8003b54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b58:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream0_IRQn;
 8003b5a:	230b      	movs	r3, #11
 8003b5c:	77fb      	strb	r3, [r7, #31]

		nvicER = I2C1_ER_IRQn;
 8003b5e:	2320      	movs	r3, #32
 8003b60:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C1_EV_IRQn;
 8003b62:	231f      	movs	r3, #31
 8003b64:	777b      	strb	r3, [r7, #29]
		__HAL_RCC_DMA1_CLK_ENABLE();
 8003b66:	2300      	movs	r3, #0
 8003b68:	613b      	str	r3, [r7, #16]
 8003b6a:	4b8e      	ldr	r3, [pc, #568]	; (8003da4 <I2CX_DMA_RX_Init+0x290>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	4a8d      	ldr	r2, [pc, #564]	; (8003da4 <I2CX_DMA_RX_Init+0x290>)
 8003b70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b74:	6313      	str	r3, [r2, #48]	; 0x30
 8003b76:	4b8b      	ldr	r3, [pc, #556]	; (8003da4 <I2CX_DMA_RX_Init+0x290>)
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b7e:	613b      	str	r3, [r7, #16]
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	e022      	b.n	8003bca <I2CX_DMA_RX_Init+0xb6>
	}else if(hi2cx == &hi2c2){
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4a8b      	ldr	r2, [pc, #556]	; (8003db4 <I2CX_DMA_RX_Init+0x2a0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d10f      	bne.n	8003bac <I2CX_DMA_RX_Init+0x98>

		hi2cx->Instance = I2C2;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4a8a      	ldr	r2, [pc, #552]	; (8003db8 <I2CX_DMA_RX_Init+0x2a4>)
 8003b90:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream3;
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	4a89      	ldr	r2, [pc, #548]	; (8003dbc <I2CX_DMA_RX_Init+0x2a8>)
 8003b96:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_7;
 8003b98:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 8003b9c:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream3_IRQn;
 8003b9e:	230e      	movs	r3, #14
 8003ba0:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C2_ER_IRQn;
 8003ba2:	2322      	movs	r3, #34	; 0x22
 8003ba4:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C2_EV_IRQn;
 8003ba6:	2321      	movs	r3, #33	; 0x21
 8003ba8:	777b      	strb	r3, [r7, #29]
 8003baa:	e00e      	b.n	8003bca <I2CX_DMA_RX_Init+0xb6>

	}else{
		hi2cx->Instance = I2C3;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4a84      	ldr	r2, [pc, #528]	; (8003dc0 <I2CX_DMA_RX_Init+0x2ac>)
 8003bb0:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream2;
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	4a83      	ldr	r2, [pc, #524]	; (8003dc4 <I2CX_DMA_RX_Init+0x2b0>)
 8003bb6:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_3;
 8003bb8:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8003bbc:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream2_IRQn;
 8003bbe:	230d      	movs	r3, #13
 8003bc0:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C3_ER_IRQn;
 8003bc2:	2349      	movs	r3, #73	; 0x49
 8003bc4:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C3_EV_IRQn;
 8003bc6:	2348      	movs	r3, #72	; 0x48
 8003bc8:	777b      	strb	r3, [r7, #29]
	}

	hdma_i2cx->Init.Channel = DMA_CHANNEL;
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	605a      	str	r2, [r3, #4]
	hdma_i2cx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	609a      	str	r2, [r3, #8]
	hdma_i2cx->Init.PeriphInc = DMA_PINC_DISABLE;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	60da      	str	r2, [r3, #12]
	hdma_i2cx->Init.MemInc = DMA_MINC_ENABLE;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003be2:	611a      	str	r2, [r3, #16]
	hdma_i2cx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2200      	movs	r2, #0
 8003be8:	615a      	str	r2, [r3, #20]
	hdma_i2cx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2200      	movs	r2, #0
 8003bee:	619a      	str	r2, [r3, #24]
	hdma_i2cx->Init.Mode = DMA_NORMAL;
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	61da      	str	r2, [r3, #28]
	hdma_i2cx->Init.Priority = DMA_PRIORITY_HIGH;
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bfc:	621a      	str	r2, [r3, #32]
	hdma_i2cx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2200      	movs	r2, #0
 8003c02:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_i2cx->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2203      	movs	r2, #3
 8003c08:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_i2cx->Init.MemBurst = DMA_MBURST_INC4;
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003c10:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_i2cx->Init.PeriphBurst = DMA_PBURST_INC4;
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003c18:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(hdma_i2cx) != HAL_OK)
 8003c1a:	68b8      	ldr	r0, [r7, #8]
 8003c1c:	f00b fa28 	bl	800f070 <HAL_DMA_Init>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <I2CX_DMA_RX_Init+0x116>
	{

		Error_Handler();
 8003c26:	f001 f841 	bl	8004cac <Error_Handler>

	}
	__HAL_LINKDMA(hi2cx,hdmarx,*hdma_i2cx);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	639a      	str	r2, [r3, #56]	; 0x38
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	639a      	str	r2, [r3, #56]	; 0x38

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */

	//	__HAL_DMA_ENABLE_IT(hdma_i2cx,DMA_IT_TC);
	if(hi2cx == &hi2c1){
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4a5b      	ldr	r2, [pc, #364]	; (8003da8 <I2CX_DMA_RX_Init+0x294>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d111      	bne.n	8003c62 <I2CX_DMA_RX_Init+0x14e>
		HAL_NVIC_SetPriority(nvic, DMA1_Str0__IRQ_PRIO, 0);
 8003c3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c42:	2200      	movs	r2, #0
 8003c44:	210a      	movs	r1, #10
 8003c46:	4618      	mov	r0, r3
 8003c48:	f00b f9cc 	bl	800efe4 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003c4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f00b f9ff 	bl	800f054 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003c56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f00b f9de 	bl	800f01c <HAL_NVIC_EnableIRQ>
 8003c60:	e026      	b.n	8003cb0 <I2CX_DMA_RX_Init+0x19c>
	}else if(hi2cx == &hi2c2){
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4a53      	ldr	r2, [pc, #332]	; (8003db4 <I2CX_DMA_RX_Init+0x2a0>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d111      	bne.n	8003c8e <I2CX_DMA_RX_Init+0x17a>
		HAL_NVIC_SetPriority(nvic, DMA1_Str3__IRQ_PRIO, 0);
 8003c6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	210e      	movs	r1, #14
 8003c72:	4618      	mov	r0, r3
 8003c74:	f00b f9b6 	bl	800efe4 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003c78:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f00b f9e9 	bl	800f054 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003c82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f00b f9c8 	bl	800f01c <HAL_NVIC_EnableIRQ>
 8003c8c:	e010      	b.n	8003cb0 <I2CX_DMA_RX_Init+0x19c>
	}else{
		HAL_NVIC_SetPriority(nvic, DMA1_Str2__IRQ_PRIO, 0);
 8003c8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c92:	2200      	movs	r2, #0
 8003c94:	210e      	movs	r1, #14
 8003c96:	4618      	mov	r0, r3
 8003c98:	f00b f9a4 	bl	800efe4 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003c9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f00b f9d7 	bl	800f054 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003ca6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f00b f9b6 	bl	800f01c <HAL_NVIC_EnableIRQ>
	}

	hi2cx->Init.ClockSpeed = ClockSpeed;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	605a      	str	r2, [r3, #4]
	hi2cx->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	609a      	str	r2, [r3, #8]
	hi2cx->Init.OwnAddress1 = OwnAddress<<1;
 8003cbc:	79fb      	ldrb	r3, [r7, #7]
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	60da      	str	r2, [r3, #12]
	hi2cx->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ccc:	611a      	str	r2, [r3, #16]
	hi2cx->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	615a      	str	r2, [r3, #20]
	hi2cx->Init.OwnAddress2 = 0;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	619a      	str	r2, [r3, #24]
	hi2cx->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	61da      	str	r2, [r3, #28]
	hi2cx->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	621a      	str	r2, [r3, #32]

	if(hi2cx == &hi2c1){
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4a2f      	ldr	r2, [pc, #188]	; (8003da8 <I2CX_DMA_RX_Init+0x294>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d118      	bne.n	8003d20 <I2CX_DMA_RX_Init+0x20c>
		HAL_NVIC_SetPriority(nvicER, I2C1_ER_IRQ_PRIO, 0);
 8003cee:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f00b f974 	bl	800efe4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003cfc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f00b f98b 	bl	800f01c <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C1_EV_IRQ_PRIO, 0);
 8003d06:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	2109      	movs	r1, #9
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f00b f968 	bl	800efe4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003d14:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f00b f97f 	bl	800f01c <HAL_NVIC_EnableIRQ>
 8003d1e:	e034      	b.n	8003d8a <I2CX_DMA_RX_Init+0x276>
	}else if(hi2cx == &hi2c2){
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4a24      	ldr	r2, [pc, #144]	; (8003db4 <I2CX_DMA_RX_Init+0x2a0>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d118      	bne.n	8003d5a <I2CX_DMA_RX_Init+0x246>
		HAL_NVIC_SetPriority(nvicER, I2C2_ER_IRQ_PRIO, 0);
 8003d28:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	210e      	movs	r1, #14
 8003d30:	4618      	mov	r0, r3
 8003d32:	f00b f957 	bl	800efe4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003d36:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f00b f96e 	bl	800f01c <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C2_EV_IRQ_PRIO, 0);
 8003d40:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003d44:	2200      	movs	r2, #0
 8003d46:	210e      	movs	r1, #14
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f00b f94b 	bl	800efe4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003d4e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f00b f962 	bl	800f01c <HAL_NVIC_EnableIRQ>
 8003d58:	e017      	b.n	8003d8a <I2CX_DMA_RX_Init+0x276>
	}else{
		HAL_NVIC_SetPriority(nvicER, I2C3_ER_IRQ_PRIO, 0);
 8003d5a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	210e      	movs	r1, #14
 8003d62:	4618      	mov	r0, r3
 8003d64:	f00b f93e 	bl	800efe4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003d68:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f00b f955 	bl	800f01c <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C3_EV_IRQ_PRIO, 0);
 8003d72:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003d76:	2200      	movs	r2, #0
 8003d78:	210e      	movs	r1, #14
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f00b f932 	bl	800efe4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003d80:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f00b f949 	bl	800f01c <HAL_NVIC_EnableIRQ>
	}

	if (HAL_I2C_Init(hi2cx) != HAL_OK)
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f00c fb10 	bl	80103b0 <HAL_I2C_Init>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <I2CX_DMA_RX_Init+0x286>
	{

		Error_Handler();
 8003d96:	f000 ff89 	bl	8004cac <Error_Handler>
	}
}
 8003d9a:	bf00      	nop
 8003d9c:	3720      	adds	r7, #32
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40023800 	.word	0x40023800
 8003da8:	20006b48 	.word	0x20006b48
 8003dac:	40005400 	.word	0x40005400
 8003db0:	40026010 	.word	0x40026010
 8003db4:	20006ba4 	.word	0x20006ba4
 8003db8:	40005800 	.word	0x40005800
 8003dbc:	40026058 	.word	0x40026058
 8003dc0:	40005c00 	.word	0x40005c00
 8003dc4:	40026040 	.word	0x40026040

08003dc8 <I2C2_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_EV_IRQHandler(void){
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0


	HAL_I2C_EV_IRQHandler(&hi2c2);
 8003dcc:	4802      	ldr	r0, [pc, #8]	; (8003dd8 <I2C2_EV_IRQHandler+0x10>)
 8003dce:	f00c fd79 	bl	80108c4 <HAL_I2C_EV_IRQHandler>


}
 8003dd2:	bf00      	nop
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	20006ba4 	.word	0x20006ba4

08003ddc <I2C2_ER_IRQHandler>:
 * Function Remarks		: This interrupt handle the error event of I2C2.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_ER_IRQHandler(void){
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0

	HAL_I2C_ER_IRQHandler(&hi2c2);
 8003de0:	4802      	ldr	r0, [pc, #8]	; (8003dec <I2C2_ER_IRQHandler+0x10>)
 8003de2:	f00c fedc 	bl	8010b9e <HAL_I2C_ER_IRQHandler>


}
 8003de6:	bf00      	nop
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20006ba4 	.word	0x20006ba4

08003df0 <I2C3_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C3_EV_IRQHandler(void){
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0

	//	taskENTER_CRITICAL();
	HAL_I2C_EV_IRQHandler(&hi2c3);
 8003df4:	4802      	ldr	r0, [pc, #8]	; (8003e00 <I2C3_EV_IRQHandler+0x10>)
 8003df6:	f00c fd65 	bl	80108c4 <HAL_I2C_EV_IRQHandler>
	//	taskEXIT_CRITICAL();

}
 8003dfa:	bf00      	nop
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20006764 	.word	0x20006764

08003e04 <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
static SPI_HandleTypeDef led_spi;

void ILI9341_Init() {
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
//	ILI9341_SPI_Init();

	/* Reset The Screen */
	ILI9341_Reset();
 8003e08:	f000 f910 	bl	800402c <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 8003e0c:	2001      	movs	r0, #1
 8003e0e:	f000 fa13 	bl	8004238 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 8003e12:	20cb      	movs	r0, #203	; 0xcb
 8003e14:	f000 fa10 	bl	8004238 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 8003e18:	2039      	movs	r0, #57	; 0x39
 8003e1a:	f000 fa1c 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 8003e1e:	202c      	movs	r0, #44	; 0x2c
 8003e20:	f000 fa19 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8003e24:	2000      	movs	r0, #0
 8003e26:	f000 fa16 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 8003e2a:	2034      	movs	r0, #52	; 0x34
 8003e2c:	f000 fa13 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8003e30:	2002      	movs	r0, #2
 8003e32:	f000 fa10 	bl	8004256 <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 8003e36:	20cf      	movs	r0, #207	; 0xcf
 8003e38:	f000 f9fe 	bl	8004238 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8003e3c:	2000      	movs	r0, #0
 8003e3e:	f000 fa0a 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8003e42:	20c1      	movs	r0, #193	; 0xc1
 8003e44:	f000 fa07 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8003e48:	2030      	movs	r0, #48	; 0x30
 8003e4a:	f000 fa04 	bl	8004256 <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8003e4e:	20e8      	movs	r0, #232	; 0xe8
 8003e50:	f000 f9f2 	bl	8004238 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 8003e54:	2085      	movs	r0, #133	; 0x85
 8003e56:	f000 f9fe 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	f000 f9fb 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8003e60:	2078      	movs	r0, #120	; 0x78
 8003e62:	f000 f9f8 	bl	8004256 <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 8003e66:	20ea      	movs	r0, #234	; 0xea
 8003e68:	f000 f9e6 	bl	8004238 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8003e6c:	2000      	movs	r0, #0
 8003e6e:	f000 f9f2 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8003e72:	2000      	movs	r0, #0
 8003e74:	f000 f9ef 	bl	8004256 <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 8003e78:	20ed      	movs	r0, #237	; 0xed
 8003e7a:	f000 f9dd 	bl	8004238 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8003e7e:	2064      	movs	r0, #100	; 0x64
 8003e80:	f000 f9e9 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8003e84:	2003      	movs	r0, #3
 8003e86:	f000 f9e6 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 8003e8a:	2012      	movs	r0, #18
 8003e8c:	f000 f9e3 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 8003e90:	2081      	movs	r0, #129	; 0x81
 8003e92:	f000 f9e0 	bl	8004256 <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 8003e96:	20f7      	movs	r0, #247	; 0xf7
 8003e98:	f000 f9ce 	bl	8004238 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8003e9c:	2020      	movs	r0, #32
 8003e9e:	f000 f9da 	bl	8004256 <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 8003ea2:	20c0      	movs	r0, #192	; 0xc0
 8003ea4:	f000 f9c8 	bl	8004238 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8003ea8:	2010      	movs	r0, #16
 8003eaa:	f000 f9d4 	bl	8004256 <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 8003eae:	20c1      	movs	r0, #193	; 0xc1
 8003eb0:	f000 f9c2 	bl	8004238 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8003eb4:	2010      	movs	r0, #16
 8003eb6:	f000 f9ce 	bl	8004256 <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 8003eba:	20c5      	movs	r0, #197	; 0xc5
 8003ebc:	f000 f9bc 	bl	8004238 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8003ec0:	203e      	movs	r0, #62	; 0x3e
 8003ec2:	f000 f9c8 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 8003ec6:	2028      	movs	r0, #40	; 0x28
 8003ec8:	f000 f9c5 	bl	8004256 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 8003ecc:	20c7      	movs	r0, #199	; 0xc7
 8003ece:	f000 f9b3 	bl	8004238 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 8003ed2:	2086      	movs	r0, #134	; 0x86
 8003ed4:	f000 f9bf 	bl	8004256 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 8003ed8:	2036      	movs	r0, #54	; 0x36
 8003eda:	f000 f9ad 	bl	8004238 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 8003ede:	2048      	movs	r0, #72	; 0x48
 8003ee0:	f000 f9b9 	bl	8004256 <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 8003ee4:	203a      	movs	r0, #58	; 0x3a
 8003ee6:	f000 f9a7 	bl	8004238 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 8003eea:	2055      	movs	r0, #85	; 0x55
 8003eec:	f000 f9b3 	bl	8004256 <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 8003ef0:	20b1      	movs	r0, #177	; 0xb1
 8003ef2:	f000 f9a1 	bl	8004238 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8003ef6:	2000      	movs	r0, #0
 8003ef8:	f000 f9ad 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 8003efc:	2018      	movs	r0, #24
 8003efe:	f000 f9aa 	bl	8004256 <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 8003f02:	20b6      	movs	r0, #182	; 0xb6
 8003f04:	f000 f998 	bl	8004238 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 8003f08:	2008      	movs	r0, #8
 8003f0a:	f000 f9a4 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 8003f0e:	2082      	movs	r0, #130	; 0x82
 8003f10:	f000 f9a1 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 8003f14:	2027      	movs	r0, #39	; 0x27
 8003f16:	f000 f99e 	bl	8004256 <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 8003f1a:	20f2      	movs	r0, #242	; 0xf2
 8003f1c:	f000 f98c 	bl	8004238 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8003f20:	2000      	movs	r0, #0
 8003f22:	f000 f998 	bl	8004256 <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 8003f26:	2026      	movs	r0, #38	; 0x26
 8003f28:	f000 f986 	bl	8004238 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8003f2c:	2001      	movs	r0, #1
 8003f2e:	f000 f992 	bl	8004256 <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 8003f32:	20e0      	movs	r0, #224	; 0xe0
 8003f34:	f000 f980 	bl	8004238 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8003f38:	200f      	movs	r0, #15
 8003f3a:	f000 f98c 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8003f3e:	2031      	movs	r0, #49	; 0x31
 8003f40:	f000 f989 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 8003f44:	202b      	movs	r0, #43	; 0x2b
 8003f46:	f000 f986 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8003f4a:	200c      	movs	r0, #12
 8003f4c:	f000 f983 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8003f50:	200e      	movs	r0, #14
 8003f52:	f000 f980 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 8003f56:	2008      	movs	r0, #8
 8003f58:	f000 f97d 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8003f5c:	204e      	movs	r0, #78	; 0x4e
 8003f5e:	f000 f97a 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 8003f62:	20f1      	movs	r0, #241	; 0xf1
 8003f64:	f000 f977 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8003f68:	2037      	movs	r0, #55	; 0x37
 8003f6a:	f000 f974 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8003f6e:	2007      	movs	r0, #7
 8003f70:	f000 f971 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 8003f74:	2010      	movs	r0, #16
 8003f76:	f000 f96e 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8003f7a:	2003      	movs	r0, #3
 8003f7c:	f000 f96b 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8003f80:	200e      	movs	r0, #14
 8003f82:	f000 f968 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 8003f86:	2009      	movs	r0, #9
 8003f88:	f000 f965 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8003f8c:	2000      	movs	r0, #0
 8003f8e:	f000 f962 	bl	8004256 <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 8003f92:	20e1      	movs	r0, #225	; 0xe1
 8003f94:	f000 f950 	bl	8004238 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8003f98:	2000      	movs	r0, #0
 8003f9a:	f000 f95c 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8003f9e:	200e      	movs	r0, #14
 8003fa0:	f000 f959 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 8003fa4:	2014      	movs	r0, #20
 8003fa6:	f000 f956 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8003faa:	2003      	movs	r0, #3
 8003fac:	f000 f953 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8003fb0:	2011      	movs	r0, #17
 8003fb2:	f000 f950 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8003fb6:	2007      	movs	r0, #7
 8003fb8:	f000 f94d 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8003fbc:	2031      	movs	r0, #49	; 0x31
 8003fbe:	f000 f94a 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8003fc2:	20c1      	movs	r0, #193	; 0xc1
 8003fc4:	f000 f947 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 8003fc8:	2048      	movs	r0, #72	; 0x48
 8003fca:	f000 f944 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 8003fce:	2008      	movs	r0, #8
 8003fd0:	f000 f941 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8003fd4:	200f      	movs	r0, #15
 8003fd6:	f000 f93e 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8003fda:	200c      	movs	r0, #12
 8003fdc:	f000 f93b 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8003fe0:	2031      	movs	r0, #49	; 0x31
 8003fe2:	f000 f938 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 8003fe6:	2036      	movs	r0, #54	; 0x36
 8003fe8:	f000 f935 	bl	8004256 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8003fec:	200f      	movs	r0, #15
 8003fee:	f000 f932 	bl	8004256 <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 8003ff2:	2011      	movs	r0, #17
 8003ff4:	f000 f920 	bl	8004238 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 8003ff8:	2029      	movs	r0, #41	; 0x29
 8003ffa:	f000 f91d 	bl	8004238 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 8003ffe:	202c      	movs	r0, #44	; 0x2c
 8004000:	f000 f929 	bl	8004256 <ILI9341_Send_Data>
}
 8004004:	bf00      	nop
 8004006:	bd80      	pop	{r7, pc}

08004008 <ILI9341_SPI_Send>:
		Error_Handler();
	}
}

void ILI9341_SPI_Send(unsigned char data)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	4603      	mov	r3, r0
 8004010:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &data, 1, 1);
 8004012:	1df9      	adds	r1, r7, #7
 8004014:	2301      	movs	r3, #1
 8004016:	2201      	movs	r2, #1
 8004018:	4803      	ldr	r0, [pc, #12]	; (8004028 <ILI9341_SPI_Send+0x20>)
 800401a:	f00e ff1f 	bl	8012e5c <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_DMA(&hspi1, &data, 1);
}
 800401e:	bf00      	nop
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	200099d4 	.word	0x200099d4

0800402c <ILI9341_Reset>:
{
	HAL_SPI_Transmit(&hspi1, &data, size, 10);
//	HAL_SPI_Transmit_DMA(&hspi1, &data, size);
}

void ILI9341_Reset() {
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
	RESET_ON;
 8004030:	2200      	movs	r2, #0
 8004032:	2110      	movs	r1, #16
 8004034:	4809      	ldr	r0, [pc, #36]	; (800405c <ILI9341_Reset+0x30>)
 8004036:	f00c f9a1 	bl	801037c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800403a:	2032      	movs	r0, #50	; 0x32
 800403c:	f00a f826 	bl	800e08c <HAL_Delay>
	RESET_OFF;
 8004040:	2201      	movs	r2, #1
 8004042:	2110      	movs	r1, #16
 8004044:	4805      	ldr	r0, [pc, #20]	; (800405c <ILI9341_Reset+0x30>)
 8004046:	f00c f999 	bl	801037c <HAL_GPIO_WritePin>
	//CS_ON;
	HAL_Delay(50);
 800404a:	2032      	movs	r0, #50	; 0x32
 800404c:	f00a f81e 	bl	800e08c <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8004050:	2001      	movs	r0, #1
 8004052:	f000 f8f1 	bl	8004238 <ILI9341_Send_Command>
	//CS_OFF;
}
 8004056:	bf00      	nop
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	40020000 	.word	0x40020000

08004060 <ILI9341_SPI_Send_32>:
		Y_SIZE = 240;
		break;
	}
}

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	4603      	mov	r3, r0
 8004068:	6039      	str	r1, [r7, #0]
 800406a:	71fb      	strb	r3, [r7, #7]
	//CS_ON;
	DC_COMMAND;
 800406c:	2200      	movs	r2, #0
 800406e:	2140      	movs	r1, #64	; 0x40
 8004070:	4813      	ldr	r0, [pc, #76]	; (80040c0 <ILI9341_SPI_Send_32+0x60>)
 8004072:	f00c f983 	bl	801037c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8004076:	79fb      	ldrb	r3, [r7, #7]
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff ffc5 	bl	8004008 <ILI9341_SPI_Send>

	DC_DATA;
 800407e:	2201      	movs	r2, #1
 8004080:	2140      	movs	r1, #64	; 0x40
 8004082:	480f      	ldr	r0, [pc, #60]	; (80040c0 <ILI9341_SPI_Send_32+0x60>)
 8004084:	f00c f97a 	bl	801037c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	0e1b      	lsrs	r3, r3, #24
 800408c:	b2db      	uxtb	r3, r3
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff ffba 	bl	8004008 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	0c1b      	lsrs	r3, r3, #16
 8004098:	b2db      	uxtb	r3, r3
 800409a:	4618      	mov	r0, r3
 800409c:	f7ff ffb4 	bl	8004008 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	0a1b      	lsrs	r3, r3, #8
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7ff ffae 	bl	8004008 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7ff ffa9 	bl	8004008 <ILI9341_SPI_Send>

}
 80040b6:	bf00      	nop
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	40020000 	.word	0x40020000

080040c4 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
 80040d0:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	617b      	str	r3, [r7, #20]
	t <<= 16;
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	041b      	lsls	r3, r3, #16
 80040da:	617b      	str	r3, [r7, #20]
	t |= x2;
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 80040e4:	6979      	ldr	r1, [r7, #20]
 80040e6:	202a      	movs	r0, #42	; 0x2a
 80040e8:	f7ff ffba 	bl	8004060 <ILI9341_SPI_Send_32>
	t = y1;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	617b      	str	r3, [r7, #20]
	t <<= 16;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	041b      	lsls	r3, r3, #16
 80040f4:	617b      	str	r3, [r7, #20]
	t |= y2;
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 80040fe:	6979      	ldr	r1, [r7, #20]
 8004100:	202b      	movs	r0, #43	; 0x2b
 8004102:	f7ff ffad 	bl	8004060 <ILI9341_SPI_Send_32>
}
 8004106:	bf00      	nop
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
	...

08004110 <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 8004118:	4b0d      	ldr	r3, [pc, #52]	; (8004150 <ILI9341_Fill_Screen+0x40>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	1e5a      	subs	r2, r3, #1
 800411e:	4b0d      	ldr	r3, [pc, #52]	; (8004154 <ILI9341_Fill_Screen+0x44>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	3b01      	subs	r3, #1
 8004124:	2100      	movs	r1, #0
 8004126:	2000      	movs	r0, #0
 8004128:	f7ff ffcc 	bl	80040c4 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	b29b      	uxth	r3, r3
 8004130:	4a07      	ldr	r2, [pc, #28]	; (8004150 <ILI9341_Fill_Screen+0x40>)
 8004132:	6812      	ldr	r2, [r2, #0]
 8004134:	4611      	mov	r1, r2
 8004136:	4a07      	ldr	r2, [pc, #28]	; (8004154 <ILI9341_Fill_Screen+0x44>)
 8004138:	6812      	ldr	r2, [r2, #0]
 800413a:	fb02 f201 	mul.w	r2, r2, r1
 800413e:	4611      	mov	r1, r2
 8004140:	4618      	mov	r0, r3
 8004142:	f000 f897 	bl	8004274 <ILI9341_Send_Burst>
}
 8004146:	bf00      	nop
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000000 	.word	0x20000000
 8004154:	20000004 	.word	0x20000004

08004158 <ILI9341_Draw_String>:
		}
	}
}

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af02      	add	r7, sp, #8
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
 8004164:	603b      	str	r3, [r7, #0]
	switch (size)
 8004166:	7f3b      	ldrb	r3, [r7, #28]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d028      	beq.n	80041be <ILI9341_Draw_String+0x66>
 800416c:	2b02      	cmp	r3, #2
 800416e:	d02b      	beq.n	80041c8 <ILI9341_Draw_String+0x70>
			x += hh*8;
			str++;
		}
	break;
	}
}
 8004170:	e059      	b.n	8004226 <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 8004172:	7f3b      	ldrb	r3, [r7, #28]
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	461a      	mov	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	441a      	add	r2, r3
 800417c:	4b2c      	ldr	r3, [pc, #176]	; (8004230 <ILI9341_Draw_String+0xd8>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	429a      	cmp	r2, r3
 8004182:	d907      	bls.n	8004194 <ILI9341_Draw_String+0x3c>
				x = 1;
 8004184:	2301      	movs	r3, #1
 8004186:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8004188:	7f3b      	ldrb	r3, [r7, #28]
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	461a      	mov	r2, r3
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	4413      	add	r3, r2
 8004192:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	68b9      	ldr	r1, [r7, #8]
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	7f3a      	ldrb	r2, [r7, #28]
 800419e:	9201      	str	r2, [sp, #4]
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	f000 f919 	bl	80043dc <ILI9341_Draw_Char>
			x += size*8-2;
 80041aa:	7f3b      	ldrb	r3, [r7, #28]
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	461a      	mov	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4413      	add	r3, r2
 80041b4:	3b02      	subs	r3, #2
 80041b6:	60fb      	str	r3, [r7, #12]
			str++;
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	3301      	adds	r3, #1
 80041bc:	61bb      	str	r3, [r7, #24]
		while (*str)
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1d5      	bne.n	8004172 <ILI9341_Draw_String+0x1a>
	break;
 80041c6:	e02e      	b.n	8004226 <ILI9341_Draw_String+0xce>
		hh=1;
 80041c8:	4b1a      	ldr	r3, [pc, #104]	; (8004234 <ILI9341_Draw_String+0xdc>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	701a      	strb	r2, [r3, #0]
		while (*str)
 80041ce:	e025      	b.n	800421c <ILI9341_Draw_String+0xc4>
			if ((x+(size*8))>X_SIZE)
 80041d0:	7f3b      	ldrb	r3, [r7, #28]
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	461a      	mov	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	441a      	add	r2, r3
 80041da:	4b15      	ldr	r3, [pc, #84]	; (8004230 <ILI9341_Draw_String+0xd8>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d907      	bls.n	80041f2 <ILI9341_Draw_String+0x9a>
				x = 1;
 80041e2:	2301      	movs	r3, #1
 80041e4:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 80041e6:	7f3b      	ldrb	r3, [r7, #28]
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	461a      	mov	r2, r3
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	4413      	add	r3, r2
 80041f0:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	68b9      	ldr	r1, [r7, #8]
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	7f3a      	ldrb	r2, [r7, #28]
 80041fc:	9201      	str	r2, [sp, #4]
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	f000 f8ea 	bl	80043dc <ILI9341_Draw_Char>
			x += hh*8;
 8004208:	4b0a      	ldr	r3, [pc, #40]	; (8004234 <ILI9341_Draw_String+0xdc>)
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	461a      	mov	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4413      	add	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]
			str++;
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	3301      	adds	r3, #1
 800421a:	61bb      	str	r3, [r7, #24]
		while (*str)
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1d5      	bne.n	80041d0 <ILI9341_Draw_String+0x78>
	break;
 8004224:	bf00      	nop
}
 8004226:	bf00      	nop
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	20000000 	.word	0x20000000
 8004234:	2000a49c 	.word	0x2000a49c

08004238 <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	4603      	mov	r3, r0
 8004240:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8004242:	f000 f995 	bl	8004570 <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8004246:	79fb      	ldrb	r3, [r7, #7]
 8004248:	4618      	mov	r0, r3
 800424a:	f7ff fedd 	bl	8004008 <ILI9341_SPI_Send>
}
 800424e:	bf00      	nop
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8004256:	b580      	push	{r7, lr}
 8004258:	b082      	sub	sp, #8
 800425a:	af00      	add	r7, sp, #0
 800425c:	4603      	mov	r3, r0
 800425e:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8004260:	f000 f97a 	bl	8004558 <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8004264:	79fb      	ldrb	r3, [r7, #7]
 8004266:	4618      	mov	r0, r3
 8004268:	f7ff fece 	bl	8004008 <ILI9341_SPI_Send>
}
 800426c:	bf00      	nop
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	4603      	mov	r3, r0
 800427c:	6039      	str	r1, [r7, #0]
 800427e:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8004280:	88fb      	ldrh	r3, [r7, #6]
 8004282:	0a1b      	lsrs	r3, r3, #8
 8004284:	b29b      	uxth	r3, r3
 8004286:	733b      	strb	r3, [r7, #12]
 8004288:	88fb      	ldrh	r3, [r7, #6]
 800428a:	72fb      	strb	r3, [r7, #11]
	//CS_ON;
	DC_COMMAND;
 800428c:	2200      	movs	r2, #0
 800428e:	2140      	movs	r1, #64	; 0x40
 8004290:	4851      	ldr	r0, [pc, #324]	; (80043d8 <ILI9341_Send_Burst+0x164>)
 8004292:	f00c f873 	bl	801037c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8004296:	202c      	movs	r0, #44	; 0x2c
 8004298:	f7ff feb6 	bl	8004008 <ILI9341_SPI_Send>
	DC_DATA;
 800429c:	2201      	movs	r2, #1
 800429e:	2140      	movs	r1, #64	; 0x40
 80042a0:	484d      	ldr	r0, [pc, #308]	; (80043d8 <ILI9341_Send_Burst+0x164>)
 80042a2:	f00c f86b 	bl	801037c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 80042a6:	7b3b      	ldrb	r3, [r7, #12]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff fead 	bl	8004008 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 80042ae:	7afb      	ldrb	r3, [r7, #11]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff fea9 	bl	8004008 <ILI9341_SPI_Send>
	len--;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	3b01      	subs	r3, #1
 80042ba:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	099b      	lsrs	r3, r3, #6
 80042c0:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 80042c2:	7b3a      	ldrb	r2, [r7, #12]
 80042c4:	7afb      	ldrb	r3, [r7, #11]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d169      	bne.n	800439e <ILI9341_Send_Burst+0x12a>
	{
		while (blocks--) {
 80042ca:	e027      	b.n	800431c <ILI9341_Send_Burst+0xa8>
			i = 16;
 80042cc:	2310      	movs	r3, #16
 80042ce:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 80042d0:	7afb      	ldrb	r3, [r7, #11]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff fe98 	bl	8004008 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80042d8:	7afb      	ldrb	r3, [r7, #11]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff fe94 	bl	8004008 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80042e0:	7afb      	ldrb	r3, [r7, #11]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff fe90 	bl	8004008 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80042e8:	7afb      	ldrb	r3, [r7, #11]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff fe8c 	bl	8004008 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80042f0:	7afb      	ldrb	r3, [r7, #11]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff fe88 	bl	8004008 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80042f8:	7afb      	ldrb	r3, [r7, #11]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff fe84 	bl	8004008 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8004300:	7afb      	ldrb	r3, [r7, #11]
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff fe80 	bl	8004008 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8004308:	7afb      	ldrb	r3, [r7, #11]
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff fe7c 	bl	8004008 <ILI9341_SPI_Send>
			} while (--i);
 8004310:	7b7b      	ldrb	r3, [r7, #13]
 8004312:	3b01      	subs	r3, #1
 8004314:	737b      	strb	r3, [r7, #13]
 8004316:	7b7b      	ldrb	r3, [r7, #13]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1d9      	bne.n	80042d0 <ILI9341_Send_Burst+0x5c>
		while (blocks--) {
 800431c:	89fb      	ldrh	r3, [r7, #14]
 800431e:	1e5a      	subs	r2, r3, #1
 8004320:	81fa      	strh	r2, [r7, #14]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1d2      	bne.n	80042cc <ILI9341_Send_Burst+0x58>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	b2db      	uxtb	r3, r3
 800432a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800432e:	737b      	strb	r3, [r7, #13]
 8004330:	e007      	b.n	8004342 <ILI9341_Send_Burst+0xce>
			ILI9341_SPI_Send(low_bit);
 8004332:	7afb      	ldrb	r3, [r7, #11]
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff fe67 	bl	8004008 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 800433a:	7afb      	ldrb	r3, [r7, #11]
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff fe63 	bl	8004008 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8004342:	7b7b      	ldrb	r3, [r7, #13]
 8004344:	1e5a      	subs	r2, r3, #1
 8004346:	737a      	strb	r2, [r7, #13]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1f2      	bne.n	8004332 <ILI9341_Send_Burst+0xbe>
			ILI9341_SPI_Send(high_bit);
			ILI9341_SPI_Send(low_bit);
		}
	}
	//CS_OFF;
}
 800434c:	e03f      	b.n	80043ce <ILI9341_Send_Burst+0x15a>
			i = 16;
 800434e:	2310      	movs	r3, #16
 8004350:	737b      	strb	r3, [r7, #13]
				ILI9341_SPI_Send(high_bit);
 8004352:	7b3b      	ldrb	r3, [r7, #12]
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff fe57 	bl	8004008 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 800435a:	7afb      	ldrb	r3, [r7, #11]
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff fe53 	bl	8004008 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8004362:	7b3b      	ldrb	r3, [r7, #12]
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff fe4f 	bl	8004008 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 800436a:	7afb      	ldrb	r3, [r7, #11]
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff fe4b 	bl	8004008 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8004372:	7b3b      	ldrb	r3, [r7, #12]
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff fe47 	bl	8004008 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 800437a:	7afb      	ldrb	r3, [r7, #11]
 800437c:	4618      	mov	r0, r3
 800437e:	f7ff fe43 	bl	8004008 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8004382:	7b3b      	ldrb	r3, [r7, #12]
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff fe3f 	bl	8004008 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 800438a:	7afb      	ldrb	r3, [r7, #11]
 800438c:	4618      	mov	r0, r3
 800438e:	f7ff fe3b 	bl	8004008 <ILI9341_SPI_Send>
			} while (--i);
 8004392:	7b7b      	ldrb	r3, [r7, #13]
 8004394:	3b01      	subs	r3, #1
 8004396:	737b      	strb	r3, [r7, #13]
 8004398:	7b7b      	ldrb	r3, [r7, #13]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1d9      	bne.n	8004352 <ILI9341_Send_Burst+0xde>
		while (blocks--) {
 800439e:	89fb      	ldrh	r3, [r7, #14]
 80043a0:	1e5a      	subs	r2, r3, #1
 80043a2:	81fa      	strh	r2, [r7, #14]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1d2      	bne.n	800434e <ILI9341_Send_Burst+0xda>
		for (i = (unsigned char) len & 63; i--;) {
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043b0:	737b      	strb	r3, [r7, #13]
 80043b2:	e007      	b.n	80043c4 <ILI9341_Send_Burst+0x150>
			ILI9341_SPI_Send(high_bit);
 80043b4:	7b3b      	ldrb	r3, [r7, #12]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff fe26 	bl	8004008 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 80043bc:	7afb      	ldrb	r3, [r7, #11]
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff fe22 	bl	8004008 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 80043c4:	7b7b      	ldrb	r3, [r7, #13]
 80043c6:	1e5a      	subs	r2, r3, #1
 80043c8:	737a      	strb	r2, [r7, #13]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f2      	bne.n	80043b4 <ILI9341_Send_Burst+0x140>
}
 80043ce:	bf00      	nop
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	40020000 	.word	0x40020000

080043dc <ILI9341_Draw_Char>:
	ILI9341_SPI_Send(color1);
	ILI9341_SPI_Send(color2);
}

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 80043ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d002      	beq.n	80043f8 <ILI9341_Draw_Char+0x1c>
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d053      	beq.n	800449e <ILI9341_Draw_Char+0xc2>
					}
				}
			}
		break;
	}
}
 80043f6:	e0a5      	b.n	8004544 <ILI9341_Draw_Char+0x168>
			ILI9341_Set_Address(x, y, x+5, y+8);
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	68b9      	ldr	r1, [r7, #8]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	3305      	adds	r3, #5
 8004400:	461a      	mov	r2, r3
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	3308      	adds	r3, #8
 8004406:	f7ff fe5d 	bl	80040c4 <ILI9341_Set_Address>
			DC_COMMAND;
 800440a:	2200      	movs	r2, #0
 800440c:	2140      	movs	r1, #64	; 0x40
 800440e:	484f      	ldr	r0, [pc, #316]	; (800454c <ILI9341_Draw_Char+0x170>)
 8004410:	f00b ffb4 	bl	801037c <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8004414:	202c      	movs	r0, #44	; 0x2c
 8004416:	f7ff fdf7 	bl	8004008 <ILI9341_SPI_Send>
			DC_DATA;
 800441a:	2201      	movs	r2, #1
 800441c:	2140      	movs	r1, #64	; 0x40
 800441e:	484b      	ldr	r0, [pc, #300]	; (800454c <ILI9341_Draw_Char+0x170>)
 8004420:	f00b ffac 	bl	801037c <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 8004424:	2300      	movs	r3, #0
 8004426:	613b      	str	r3, [r7, #16]
 8004428:	e035      	b.n	8004496 <ILI9341_Draw_Char+0xba>
				for(i=2;i<8;i++)
 800442a:	2302      	movs	r3, #2
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	e02c      	b.n	800448a <ILI9341_Draw_Char+0xae>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8004430:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004434:	3b20      	subs	r3, #32
 8004436:	4a46      	ldr	r2, [pc, #280]	; (8004550 <ILI9341_Draw_Char+0x174>)
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	441a      	add	r2, r3
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	4413      	add	r3, r2
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f1c3 0307 	rsb	r3, r3, #7
 800444a:	fa42 f303 	asr.w	r3, r2, r3
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00b      	beq.n	800446e <ILI9341_Draw_Char+0x92>
						ILI9341_SPI_Send(color>>8);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	0a1b      	lsrs	r3, r3, #8
 800445a:	b2db      	uxtb	r3, r3
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff fdd3 	bl	8004008 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	b2db      	uxtb	r3, r3
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff fdce 	bl	8004008 <ILI9341_SPI_Send>
 800446c:	e00a      	b.n	8004484 <ILI9341_Draw_Char+0xa8>
						ILI9341_SPI_Send(phone>>8);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	0a1b      	lsrs	r3, r3, #8
 8004472:	b2db      	uxtb	r3, r3
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff fdc7 	bl	8004008 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff fdc2 	bl	8004008 <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	3301      	adds	r3, #1
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2b07      	cmp	r3, #7
 800448e:	ddcf      	ble.n	8004430 <ILI9341_Draw_Char+0x54>
			for(h=0;h<8;h++)
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	3301      	adds	r3, #1
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	2b07      	cmp	r3, #7
 800449a:	ddc6      	ble.n	800442a <ILI9341_Draw_Char+0x4e>
			break;
 800449c:	e052      	b.n	8004544 <ILI9341_Draw_Char+0x168>
			ILI9341_Set_Address(x, y, x+7, y+16);
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	68b9      	ldr	r1, [r7, #8]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	3307      	adds	r3, #7
 80044a6:	461a      	mov	r2, r3
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	3310      	adds	r3, #16
 80044ac:	f7ff fe0a 	bl	80040c4 <ILI9341_Set_Address>
			DC_COMMAND;
 80044b0:	2200      	movs	r2, #0
 80044b2:	2140      	movs	r1, #64	; 0x40
 80044b4:	4825      	ldr	r0, [pc, #148]	; (800454c <ILI9341_Draw_Char+0x170>)
 80044b6:	f00b ff61 	bl	801037c <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 80044ba:	202c      	movs	r0, #44	; 0x2c
 80044bc:	f7ff fda4 	bl	8004008 <ILI9341_SPI_Send>
			DC_DATA;
 80044c0:	2201      	movs	r2, #1
 80044c2:	2140      	movs	r1, #64	; 0x40
 80044c4:	4821      	ldr	r0, [pc, #132]	; (800454c <ILI9341_Draw_Char+0x170>)
 80044c6:	f00b ff59 	bl	801037c <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 80044ca:	2300      	movs	r3, #0
 80044cc:	613b      	str	r3, [r7, #16]
 80044ce:	e035      	b.n	800453c <ILI9341_Draw_Char+0x160>
				for(i=0;i<8;i++)
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	e02c      	b.n	8004530 <ILI9341_Draw_Char+0x154>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 80044d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80044da:	3b20      	subs	r3, #32
 80044dc:	4a1d      	ldr	r2, [pc, #116]	; (8004554 <ILI9341_Draw_Char+0x178>)
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	441a      	add	r2, r3
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	4413      	add	r3, r2
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	461a      	mov	r2, r3
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f1c3 0307 	rsb	r3, r3, #7
 80044f0:	fa42 f303 	asr.w	r3, r2, r3
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00b      	beq.n	8004514 <ILI9341_Draw_Char+0x138>
						ILI9341_SPI_Send(color>>8);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	0a1b      	lsrs	r3, r3, #8
 8004500:	b2db      	uxtb	r3, r3
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff fd80 	bl	8004008 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	b2db      	uxtb	r3, r3
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff fd7b 	bl	8004008 <ILI9341_SPI_Send>
 8004512:	e00a      	b.n	800452a <ILI9341_Draw_Char+0x14e>
						ILI9341_SPI_Send(phone>>8);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	0a1b      	lsrs	r3, r3, #8
 8004518:	b2db      	uxtb	r3, r3
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff fd74 	bl	8004008 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	b2db      	uxtb	r3, r3
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff fd6f 	bl	8004008 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	3301      	adds	r3, #1
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	2b07      	cmp	r3, #7
 8004534:	ddcf      	ble.n	80044d6 <ILI9341_Draw_Char+0xfa>
			for(h=0;h<16;h++)
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	3301      	adds	r3, #1
 800453a:	613b      	str	r3, [r7, #16]
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	2b0f      	cmp	r3, #15
 8004540:	ddc6      	ble.n	80044d0 <ILI9341_Draw_Char+0xf4>
		break;
 8004542:	bf00      	nop
}
 8004544:	bf00      	nop
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40020000 	.word	0x40020000
 8004550:	0801fec4 	.word	0x0801fec4
 8004554:	0802019c 	.word	0x0802019c

08004558 <Before_Sending_Data>:

static void Before_Sending_Data() {
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_GPIO_PIN, GPIO_PIN_SET);
 800455c:	2201      	movs	r2, #1
 800455e:	2140      	movs	r1, #64	; 0x40
 8004560:	4802      	ldr	r0, [pc, #8]	; (800456c <Before_Sending_Data+0x14>)
 8004562:	f00b ff0b 	bl	801037c <HAL_GPIO_WritePin>
//	CS_ON
}
 8004566:	bf00      	nop
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	40020000 	.word	0x40020000

08004570 <Before_Sending_Command>:

static void Before_Sending_Command() {
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_GPIO_PIN, GPIO_PIN_RESET);
 8004574:	2200      	movs	r2, #0
 8004576:	2140      	movs	r1, #64	; 0x40
 8004578:	4802      	ldr	r0, [pc, #8]	; (8004584 <Before_Sending_Command+0x14>)
 800457a:	f00b feff 	bl	801037c <HAL_GPIO_WritePin>
//	CS_ON
}
 800457e:	bf00      	nop
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	40020000 	.word	0x40020000

08004588 <main>:


// shooting pitch 1200, initial 1550
// pitch 500(right), 950(left)
int main(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b0a0      	sub	sp, #128	; 0x80
 800458c:	af00      	add	r7, sp, #0
	set();
 800458e:	f007 f851 	bl	800b634 <set>

	const osThreadAttr_t MainTask_attributes = {
 8004592:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004596:	2224      	movs	r2, #36	; 0x24
 8004598:	2100      	movs	r1, #0
 800459a:	4618      	mov	r0, r3
 800459c:	f014 fb6e 	bl	8018c7c <memset>
 80045a0:	4b33      	ldr	r3, [pc, #204]	; (8004670 <main+0xe8>)
 80045a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045a8:	673b      	str	r3, [r7, #112]	; 0x70
 80045aa:	2318      	movs	r3, #24
 80045ac:	677b      	str	r3, [r7, #116]	; 0x74
			.name = "MainTask",
			.stack_size = 1024 * 4,
			.priority = (osPriority_t) osPriorityNormal,
	};

	const osThreadAttr_t EmergencyTask_attributes = {
 80045ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80045b2:	2224      	movs	r2, #36	; 0x24
 80045b4:	2100      	movs	r1, #0
 80045b6:	4618      	mov	r0, r3
 80045b8:	f014 fb60 	bl	8018c7c <memset>
 80045bc:	4b2d      	ldr	r3, [pc, #180]	; (8004674 <main+0xec>)
 80045be:	63bb      	str	r3, [r7, #56]	; 0x38
 80045c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045c6:	2318      	movs	r3, #24
 80045c8:	653b      	str	r3, [r7, #80]	; 0x50
//			.name = "TuneTask",
//			.stack_size = 256 * 4,
//			.priority = (osPriority_t) osPriorityAboveNormal,
//	};

	const osThreadAttr_t Calculation_Task_attributes = {
 80045ca:	f107 0314 	add.w	r3, r7, #20
 80045ce:	2224      	movs	r2, #36	; 0x24
 80045d0:	2100      	movs	r1, #0
 80045d2:	4618      	mov	r0, r3
 80045d4:	f014 fb52 	bl	8018c7c <memset>
 80045d8:	4b27      	ldr	r3, [pc, #156]	; (8004678 <main+0xf0>)
 80045da:	617b      	str	r3, [r7, #20]
 80045dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80045e2:	2320      	movs	r3, #32
 80045e4:	62fb      	str	r3, [r7, #44]	; 0x2c
			.name = "Calculation_Task",
			.stack_size = 512 *  4,
			.priority = (osPriority_t) osPriorityAboveNormal,
	};

	const osSemaphoreAttr_t CalcSemaphore_attributes = {
 80045e6:	1d3b      	adds	r3, r7, #4
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	605a      	str	r2, [r3, #4]
 80045ee:	609a      	str	r2, [r3, #8]
 80045f0:	60da      	str	r2, [r3, #12]
 80045f2:	4b22      	ldr	r3, [pc, #136]	; (800467c <main+0xf4>)
 80045f4:	607b      	str	r3, [r7, #4]

//	const osSemaphoreAttr_t TuneSemaphore_attributes = {
//			.name = "TuneSemaphore"
//	};

	ILI9341_Init();
 80045f6:	f7ff fc05 	bl	8003e04 <ILI9341_Init>
//	ILI9341_Set_Rotation(1);
	ILI9341_Fill_Screen(BLACK);
 80045fa:	2000      	movs	r0, #0
 80045fc:	f7ff fd88 	bl	8004110 <ILI9341_Fill_Screen>
	ILI9341_Init_List();
 8004600:	f008 fa7a 	bl	800caf8 <ILI9341_Init_List>

	osKernelInitialize();
 8004604:	f010 fec4 	bl	8015390 <osKernelInitialize>

	MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
 8004608:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800460c:	461a      	mov	r2, r3
 800460e:	2100      	movs	r1, #0
 8004610:	481b      	ldr	r0, [pc, #108]	; (8004680 <main+0xf8>)
 8004612:	f010 ff07 	bl	8015424 <osThreadNew>
 8004616:	4603      	mov	r3, r0
 8004618:	4a1a      	ldr	r2, [pc, #104]	; (8004684 <main+0xfc>)
 800461a:	6013      	str	r3, [r2, #0]
	EmergencyTaskHandle = osThreadNew(EmergencyTask, NULL, &EmergencyTask_attributes);
 800461c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004620:	461a      	mov	r2, r3
 8004622:	2100      	movs	r1, #0
 8004624:	4818      	ldr	r0, [pc, #96]	; (8004688 <main+0x100>)
 8004626:	f010 fefd 	bl	8015424 <osThreadNew>
 800462a:	4603      	mov	r3, r0
 800462c:	4a17      	ldr	r2, [pc, #92]	; (800468c <main+0x104>)
 800462e:	6013      	str	r3, [r2, #0]
	Calculation_Task_Handle = osThreadNew(Calculation, NULL, &Calculation_Task_attributes);
 8004630:	f107 0314 	add.w	r3, r7, #20
 8004634:	461a      	mov	r2, r3
 8004636:	2100      	movs	r1, #0
 8004638:	4815      	ldr	r0, [pc, #84]	; (8004690 <main+0x108>)
 800463a:	f010 fef3 	bl	8015424 <osThreadNew>
 800463e:	4603      	mov	r3, r0
 8004640:	4a14      	ldr	r2, [pc, #80]	; (8004694 <main+0x10c>)
 8004642:	6013      	str	r3, [r2, #0]
//	TuneTaskHandle = osThreadNew(TuneTask, NULL, &TuneTask_attributes);
//	TuneSemaphore = osSemaphoreNew(1, 0, &TuneSemaphore_attributes);
	CalcSemaphore = osSemaphoreNew(1, 0, &CalcSemaphore_attributes);
 8004644:	1d3b      	adds	r3, r7, #4
 8004646:	461a      	mov	r2, r3
 8004648:	2100      	movs	r1, #0
 800464a:	2001      	movs	r0, #1
 800464c:	f010 ffe5 	bl	801561a <osSemaphoreNew>
 8004650:	4603      	mov	r3, r0
 8004652:	4a11      	ldr	r2, [pc, #68]	; (8004698 <main+0x110>)
 8004654:	6013      	str	r3, [r2, #0]
	led2 = 1;
 8004656:	4a11      	ldr	r2, [pc, #68]	; (800469c <main+0x114>)
 8004658:	7853      	ldrb	r3, [r2, #1]
 800465a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800465e:	7053      	strb	r3, [r2, #1]
	led3 = 0;
 8004660:	4a0e      	ldr	r2, [pc, #56]	; (800469c <main+0x114>)
 8004662:	7853      	ldrb	r3, [r2, #1]
 8004664:	f36f 13c7 	bfc	r3, #7, #1
 8004668:	7053      	strb	r3, [r2, #1]
	osKernelStart();
 800466a:	f010 feb5 	bl	80153d8 <osKernelStart>

	while(1){
 800466e:	e7fe      	b.n	800466e <main+0xe6>
 8004670:	0801fda0 	.word	0x0801fda0
 8004674:	0801fdac 	.word	0x0801fdac
 8004678:	0801fdbc 	.word	0x0801fdbc
 800467c:	0801fdd0 	.word	0x0801fdd0
 8004680:	08004a79 	.word	0x08004a79
 8004684:	20007900 	.word	0x20007900
 8004688:	08004bd5 	.word	0x08004bd5
 800468c:	20009b94 	.word	0x20009b94
 8004690:	08004b5d 	.word	0x08004b5d
 8004694:	2000a4a0 	.word	0x2000a4a0
 8004698:	2000a4a4 	.word	0x2000a4a4
 800469c:	40020814 	.word	0x40020814

080046a0 <TIM6_DAC_IRQHandler>:

	}
}

void TIM6_DAC_IRQHandler(void)
{
 80046a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046a4:	b097      	sub	sp, #92	; 0x5c
 80046a6:	af0e      	add	r7, sp, #56	; 0x38
	static int counter = 0;
	osSemaphoreRelease(CalcSemaphore);
 80046a8:	4b8a      	ldr	r3, [pc, #552]	; (80048d4 <TIM6_DAC_IRQHandler+0x234>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f011 f88f 	bl	80157d0 <osSemaphoreRelease>

	if(counter % 4 == 0)
 80046b2:	4b89      	ldr	r3, [pc, #548]	; (80048d8 <TIM6_DAC_IRQHandler+0x238>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f040 81b2 	bne.w	8004a24 <TIM6_DAC_IRQHandler+0x384>
	{
		led1 = !led1;
 80046c0:	4b86      	ldr	r3, [pc, #536]	; (80048dc <TIM6_DAC_IRQHandler+0x23c>)
 80046c2:	785b      	ldrb	r3, [r3, #1]
 80046c4:	f003 0320 	and.w	r3, r3, #32
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	4a84      	ldr	r2, [pc, #528]	; (80048dc <TIM6_DAC_IRQHandler+0x23c>)
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	bf0c      	ite	eq
 80046d0:	2301      	moveq	r3, #1
 80046d2:	2300      	movne	r3, #0
 80046d4:	b2d9      	uxtb	r1, r3
 80046d6:	7853      	ldrb	r3, [r2, #1]
 80046d8:	f361 1345 	bfi	r3, r1, #5, #1
 80046dc:	7053      	strb	r3, [r2, #1]
		switch(mode)
 80046de:	4b80      	ldr	r3, [pc, #512]	; (80048e0 <TIM6_DAC_IRQHandler+0x240>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d079      	beq.n	80047da <TIM6_DAC_IRQHandler+0x13a>
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	f300 8191 	bgt.w	8004a0e <TIM6_DAC_IRQHandler+0x36e>
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d002      	beq.n	80046f6 <TIM6_DAC_IRQHandler+0x56>
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d057      	beq.n	80047a4 <TIM6_DAC_IRQHandler+0x104>
 80046f4:	e18b      	b.n	8004a0e <TIM6_DAC_IRQHandler+0x36e>
		{
			case NORMAL:
				sprintf((char*)debug, "S: %.2f, 1: %.5f 2: %.5f 3: %.2f 4: %.2f X: %.2f Y: %.2f Z: %.2f\n", vesc_move_speed, VESCNav.a_vel, VESCNav.b_vel,
 80046f6:	4b7b      	ldr	r3, [pc, #492]	; (80048e4 <TIM6_DAC_IRQHandler+0x244>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fb ff24 	bl	8000548 <__aeabi_f2d>
 8004700:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8004704:	4b78      	ldr	r3, [pc, #480]	; (80048e8 <TIM6_DAC_IRQHandler+0x248>)
 8004706:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800470a:	4618      	mov	r0, r3
 800470c:	f7fb ff1c 	bl	8000548 <__aeabi_f2d>
 8004710:	4682      	mov	sl, r0
 8004712:	468b      	mov	fp, r1
 8004714:	4b74      	ldr	r3, [pc, #464]	; (80048e8 <TIM6_DAC_IRQHandler+0x248>)
 8004716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800471a:	4618      	mov	r0, r3
 800471c:	f7fb ff14 	bl	8000548 <__aeabi_f2d>
 8004720:	e9c7 0104 	strd	r0, r1, [r7, #16]
					VESCNav.c_vel, VESCNav.d_vel, pp.real_x, pp.real_y, pp.real_z);
 8004724:	4b70      	ldr	r3, [pc, #448]	; (80048e8 <TIM6_DAC_IRQHandler+0x248>)
 8004726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
				sprintf((char*)debug, "S: %.2f, 1: %.5f 2: %.5f 3: %.2f 4: %.2f X: %.2f Y: %.2f Z: %.2f\n", vesc_move_speed, VESCNav.a_vel, VESCNav.b_vel,
 800472a:	4618      	mov	r0, r3
 800472c:	f7fb ff0c 	bl	8000548 <__aeabi_f2d>
 8004730:	e9c7 0102 	strd	r0, r1, [r7, #8]
					VESCNav.c_vel, VESCNav.d_vel, pp.real_x, pp.real_y, pp.real_z);
 8004734:	4b6c      	ldr	r3, [pc, #432]	; (80048e8 <TIM6_DAC_IRQHandler+0x248>)
 8004736:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
				sprintf((char*)debug, "S: %.2f, 1: %.5f 2: %.5f 3: %.2f 4: %.2f X: %.2f Y: %.2f Z: %.2f\n", vesc_move_speed, VESCNav.a_vel, VESCNav.b_vel,
 800473a:	4618      	mov	r0, r3
 800473c:	f7fb ff04 	bl	8000548 <__aeabi_f2d>
 8004740:	e9c7 0100 	strd	r0, r1, [r7]
					VESCNav.c_vel, VESCNav.d_vel, pp.real_x, pp.real_y, pp.real_z);
 8004744:	4b69      	ldr	r3, [pc, #420]	; (80048ec <TIM6_DAC_IRQHandler+0x24c>)
 8004746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
				sprintf((char*)debug, "S: %.2f, 1: %.5f 2: %.5f 3: %.2f 4: %.2f X: %.2f Y: %.2f Z: %.2f\n", vesc_move_speed, VESCNav.a_vel, VESCNav.b_vel,
 8004748:	4618      	mov	r0, r3
 800474a:	f7fb fefd 	bl	8000548 <__aeabi_f2d>
 800474e:	4680      	mov	r8, r0
 8004750:	4689      	mov	r9, r1
					VESCNav.c_vel, VESCNav.d_vel, pp.real_x, pp.real_y, pp.real_z);
 8004752:	4b66      	ldr	r3, [pc, #408]	; (80048ec <TIM6_DAC_IRQHandler+0x24c>)
 8004754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
				sprintf((char*)debug, "S: %.2f, 1: %.5f 2: %.5f 3: %.2f 4: %.2f X: %.2f Y: %.2f Z: %.2f\n", vesc_move_speed, VESCNav.a_vel, VESCNav.b_vel,
 8004756:	4618      	mov	r0, r3
 8004758:	f7fb fef6 	bl	8000548 <__aeabi_f2d>
 800475c:	4604      	mov	r4, r0
 800475e:	460d      	mov	r5, r1
					VESCNav.c_vel, VESCNav.d_vel, pp.real_x, pp.real_y, pp.real_z);
 8004760:	4b62      	ldr	r3, [pc, #392]	; (80048ec <TIM6_DAC_IRQHandler+0x24c>)
 8004762:	691b      	ldr	r3, [r3, #16]
				sprintf((char*)debug, "S: %.2f, 1: %.5f 2: %.5f 3: %.2f 4: %.2f X: %.2f Y: %.2f Z: %.2f\n", vesc_move_speed, VESCNav.a_vel, VESCNav.b_vel,
 8004764:	4618      	mov	r0, r3
 8004766:	f7fb feef 	bl	8000548 <__aeabi_f2d>
 800476a:	4602      	mov	r2, r0
 800476c:	460b      	mov	r3, r1
 800476e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004772:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8004776:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800477a:	ed97 7b00 	vldr	d7, [r7]
 800477e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004782:	ed97 7b02 	vldr	d7, [r7, #8]
 8004786:	ed8d 7b04 	vstr	d7, [sp, #16]
 800478a:	ed97 7b04 	vldr	d7, [r7, #16]
 800478e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004792:	e9cd ab00 	strd	sl, fp, [sp]
 8004796:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800479a:	4955      	ldr	r1, [pc, #340]	; (80048f0 <TIM6_DAC_IRQHandler+0x250>)
 800479c:	4855      	ldr	r0, [pc, #340]	; (80048f4 <TIM6_DAC_IRQHandler+0x254>)
 800479e:	f015 fa29 	bl	8019bf4 <siprintf>
//				sprintf((char*)debug, "1: %.2f 2: %.2f 3: %.2f 4: %.2f\n", fFLeftVelErr, fFRightVelErr,
//									fBLeftVelErr, fBRightVelErr);
//				sprintf((char*)debug, "1: %.2f 2: %.2f 3: %.2f 4: %.2f\n", fFLeftVelU, fFRightVelU,
//													fBLeftVelU, fBRightVelU);
			break;
 80047a2:	e134      	b.n	8004a0e <TIM6_DAC_IRQHandler+0x36e>

			case INITIALIZE:
				sprintf((char*)debug, "Pitch: %ld Yaw: %ld L: %ld P: %ld Vesc: %.2f\n", pitch.currentPulse, yaw_servo.currentPulse,
 80047a4:	4b54      	ldr	r3, [pc, #336]	; (80048f8 <TIM6_DAC_IRQHandler+0x258>)
 80047a6:	6a1e      	ldr	r6, [r3, #32]
 80047a8:	4b54      	ldr	r3, [pc, #336]	; (80048fc <TIM6_DAC_IRQHandler+0x25c>)
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	61bb      	str	r3, [r7, #24]
 80047ae:	4b54      	ldr	r3, [pc, #336]	; (8004900 <TIM6_DAC_IRQHandler+0x260>)
 80047b0:	6a1c      	ldr	r4, [r3, #32]
 80047b2:	4b54      	ldr	r3, [pc, #336]	; (8004904 <TIM6_DAC_IRQHandler+0x264>)
 80047b4:	6a1d      	ldr	r5, [r3, #32]
 80047b6:	4b54      	ldr	r3, [pc, #336]	; (8004908 <TIM6_DAC_IRQHandler+0x268>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fb fec4 	bl	8000548 <__aeabi_f2d>
 80047c0:	4602      	mov	r2, r0
 80047c2:	460b      	mov	r3, r1
 80047c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80047c8:	9501      	str	r5, [sp, #4]
 80047ca:	9400      	str	r4, [sp, #0]
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	4632      	mov	r2, r6
 80047d0:	494e      	ldr	r1, [pc, #312]	; (800490c <TIM6_DAC_IRQHandler+0x26c>)
 80047d2:	4848      	ldr	r0, [pc, #288]	; (80048f4 <TIM6_DAC_IRQHandler+0x254>)
 80047d4:	f015 fa0e 	bl	8019bf4 <siprintf>
								load.currentPulse, pick.currentPulse, vesc_pdc);
				break;
 80047d8:	e119      	b.n	8004a0e <TIM6_DAC_IRQHandler+0x36e>

			case TUNE_PID:
				switch(wheel)
 80047da:	4b4d      	ldr	r3, [pc, #308]	; (8004910 <TIM6_DAC_IRQHandler+0x270>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3b01      	subs	r3, #1
 80047e0:	2b03      	cmp	r3, #3
 80047e2:	f200 8113 	bhi.w	8004a0c <TIM6_DAC_IRQHandler+0x36c>
 80047e6:	a201      	add	r2, pc, #4	; (adr r2, 80047ec <TIM6_DAC_IRQHandler+0x14c>)
 80047e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ec:	080047fd 	.word	0x080047fd
 80047f0:	08004869 	.word	0x08004869
 80047f4:	08004935 	.word	0x08004935
 80047f8:	080049a1 	.word	0x080049a1
				{
					case 1:
						sprintf((char*)debug, "P: %.2f I: %.2f D: %.4f Vel: %.2f VelR: %.2f W: %d\n", AP, AI, AD, VESCNav.a_vel, vesc_pulse, wheel);
 80047fc:	4b45      	ldr	r3, [pc, #276]	; (8004914 <TIM6_DAC_IRQHandler+0x274>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4618      	mov	r0, r3
 8004802:	f7fb fea1 	bl	8000548 <__aeabi_f2d>
 8004806:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800480a:	4b43      	ldr	r3, [pc, #268]	; (8004918 <TIM6_DAC_IRQHandler+0x278>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4618      	mov	r0, r3
 8004810:	f7fb fe9a 	bl	8000548 <__aeabi_f2d>
 8004814:	4604      	mov	r4, r0
 8004816:	460d      	mov	r5, r1
 8004818:	4b40      	ldr	r3, [pc, #256]	; (800491c <TIM6_DAC_IRQHandler+0x27c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4618      	mov	r0, r3
 800481e:	f7fb fe93 	bl	8000548 <__aeabi_f2d>
 8004822:	4680      	mov	r8, r0
 8004824:	4689      	mov	r9, r1
 8004826:	4b30      	ldr	r3, [pc, #192]	; (80048e8 <TIM6_DAC_IRQHandler+0x248>)
 8004828:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800482c:	4618      	mov	r0, r3
 800482e:	f7fb fe8b 	bl	8000548 <__aeabi_f2d>
 8004832:	4682      	mov	sl, r0
 8004834:	468b      	mov	fp, r1
 8004836:	4b3a      	ldr	r3, [pc, #232]	; (8004920 <TIM6_DAC_IRQHandler+0x280>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4618      	mov	r0, r3
 800483c:	f7fb fe84 	bl	8000548 <__aeabi_f2d>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4932      	ldr	r1, [pc, #200]	; (8004910 <TIM6_DAC_IRQHandler+0x270>)
 8004846:	6809      	ldr	r1, [r1, #0]
 8004848:	9108      	str	r1, [sp, #32]
 800484a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800484e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8004852:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004856:	e9cd 4500 	strd	r4, r5, [sp]
 800485a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800485e:	4931      	ldr	r1, [pc, #196]	; (8004924 <TIM6_DAC_IRQHandler+0x284>)
 8004860:	4824      	ldr	r0, [pc, #144]	; (80048f4 <TIM6_DAC_IRQHandler+0x254>)
 8004862:	f015 f9c7 	bl	8019bf4 <siprintf>
						break;
 8004866:	e0d1      	b.n	8004a0c <TIM6_DAC_IRQHandler+0x36c>
					case 2:
						sprintf((char*)debug, "P: %.2f I: %.2f D: %.4f Vel: %.2f VelR: %.2f W: %d\n", BP, BI, BD, VESCNav.b_vel, vesc_pulse, wheel);
 8004868:	4b2f      	ldr	r3, [pc, #188]	; (8004928 <TIM6_DAC_IRQHandler+0x288>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4618      	mov	r0, r3
 800486e:	f7fb fe6b 	bl	8000548 <__aeabi_f2d>
 8004872:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8004876:	4b2d      	ldr	r3, [pc, #180]	; (800492c <TIM6_DAC_IRQHandler+0x28c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4618      	mov	r0, r3
 800487c:	f7fb fe64 	bl	8000548 <__aeabi_f2d>
 8004880:	4604      	mov	r4, r0
 8004882:	460d      	mov	r5, r1
 8004884:	4b2a      	ldr	r3, [pc, #168]	; (8004930 <TIM6_DAC_IRQHandler+0x290>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4618      	mov	r0, r3
 800488a:	f7fb fe5d 	bl	8000548 <__aeabi_f2d>
 800488e:	4680      	mov	r8, r0
 8004890:	4689      	mov	r9, r1
 8004892:	4b15      	ldr	r3, [pc, #84]	; (80048e8 <TIM6_DAC_IRQHandler+0x248>)
 8004894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004898:	4618      	mov	r0, r3
 800489a:	f7fb fe55 	bl	8000548 <__aeabi_f2d>
 800489e:	4682      	mov	sl, r0
 80048a0:	468b      	mov	fp, r1
 80048a2:	4b1f      	ldr	r3, [pc, #124]	; (8004920 <TIM6_DAC_IRQHandler+0x280>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fb fe4e 	bl	8000548 <__aeabi_f2d>
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	4917      	ldr	r1, [pc, #92]	; (8004910 <TIM6_DAC_IRQHandler+0x270>)
 80048b2:	6809      	ldr	r1, [r1, #0]
 80048b4:	9108      	str	r1, [sp, #32]
 80048b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80048ba:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80048be:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80048c2:	e9cd 4500 	strd	r4, r5, [sp]
 80048c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048ca:	4916      	ldr	r1, [pc, #88]	; (8004924 <TIM6_DAC_IRQHandler+0x284>)
 80048cc:	4809      	ldr	r0, [pc, #36]	; (80048f4 <TIM6_DAC_IRQHandler+0x254>)
 80048ce:	f015 f991 	bl	8019bf4 <siprintf>
						break;
 80048d2:	e09b      	b.n	8004a0c <TIM6_DAC_IRQHandler+0x36c>
 80048d4:	2000a4a4 	.word	0x2000a4a4
 80048d8:	200002c8 	.word	0x200002c8
 80048dc:	40020814 	.word	0x40020814
 80048e0:	2000903c 	.word	0x2000903c
 80048e4:	200092e0 	.word	0x200092e0
 80048e8:	20009248 	.word	0x20009248
 80048ec:	20006c28 	.word	0x20006c28
 80048f0:	0801fde0 	.word	0x0801fde0
 80048f4:	20007498 	.word	0x20007498
 80048f8:	20009ca0 	.word	0x20009ca0
 80048fc:	20007714 	.word	0x20007714
 8004900:	2000a11c 	.word	0x2000a11c
 8004904:	200099a0 	.word	0x200099a0
 8004908:	20007754 	.word	0x20007754
 800490c:	0801fe24 	.word	0x0801fe24
 8004910:	200064f4 	.word	0x200064f4
 8004914:	2000a0b0 	.word	0x2000a0b0
 8004918:	2000716c 	.word	0x2000716c
 800491c:	2000a08c 	.word	0x2000a08c
 8004920:	2000a054 	.word	0x2000a054
 8004924:	0801fe54 	.word	0x0801fe54
 8004928:	20007560 	.word	0x20007560
 800492c:	20009198 	.word	0x20009198
 8004930:	20007168 	.word	0x20007168
					case 3:
						sprintf((char*)debug, "P: %.2f I: %.2f D: %.4f Vel: %.2f VelR: %.2f W: %d\n", CP, CI, CD, VESCNav.c_vel, vesc_pulse, wheel);
 8004934:	4b42      	ldr	r3, [pc, #264]	; (8004a40 <TIM6_DAC_IRQHandler+0x3a0>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	f7fb fe05 	bl	8000548 <__aeabi_f2d>
 800493e:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8004942:	4b40      	ldr	r3, [pc, #256]	; (8004a44 <TIM6_DAC_IRQHandler+0x3a4>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4618      	mov	r0, r3
 8004948:	f7fb fdfe 	bl	8000548 <__aeabi_f2d>
 800494c:	4604      	mov	r4, r0
 800494e:	460d      	mov	r5, r1
 8004950:	4b3d      	ldr	r3, [pc, #244]	; (8004a48 <TIM6_DAC_IRQHandler+0x3a8>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4618      	mov	r0, r3
 8004956:	f7fb fdf7 	bl	8000548 <__aeabi_f2d>
 800495a:	4680      	mov	r8, r0
 800495c:	4689      	mov	r9, r1
 800495e:	4b3b      	ldr	r3, [pc, #236]	; (8004a4c <TIM6_DAC_IRQHandler+0x3ac>)
 8004960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004964:	4618      	mov	r0, r3
 8004966:	f7fb fdef 	bl	8000548 <__aeabi_f2d>
 800496a:	4682      	mov	sl, r0
 800496c:	468b      	mov	fp, r1
 800496e:	4b38      	ldr	r3, [pc, #224]	; (8004a50 <TIM6_DAC_IRQHandler+0x3b0>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4618      	mov	r0, r3
 8004974:	f7fb fde8 	bl	8000548 <__aeabi_f2d>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	4935      	ldr	r1, [pc, #212]	; (8004a54 <TIM6_DAC_IRQHandler+0x3b4>)
 800497e:	6809      	ldr	r1, [r1, #0]
 8004980:	9108      	str	r1, [sp, #32]
 8004982:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004986:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800498a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800498e:	e9cd 4500 	strd	r4, r5, [sp]
 8004992:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004996:	4930      	ldr	r1, [pc, #192]	; (8004a58 <TIM6_DAC_IRQHandler+0x3b8>)
 8004998:	4830      	ldr	r0, [pc, #192]	; (8004a5c <TIM6_DAC_IRQHandler+0x3bc>)
 800499a:	f015 f92b 	bl	8019bf4 <siprintf>
						break;
 800499e:	e035      	b.n	8004a0c <TIM6_DAC_IRQHandler+0x36c>
					case 4:
						sprintf((char*)debug, "P: %.2f I: %.2f D: %.4f Vel: %.2f VelR: %.2f W: %d\n", DP, DI, DD, VESCNav.d_vel, vesc_pulse, wheel);
 80049a0:	4b2f      	ldr	r3, [pc, #188]	; (8004a60 <TIM6_DAC_IRQHandler+0x3c0>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fb fdcf 	bl	8000548 <__aeabi_f2d>
 80049aa:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80049ae:	4b2d      	ldr	r3, [pc, #180]	; (8004a64 <TIM6_DAC_IRQHandler+0x3c4>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fb fdc8 	bl	8000548 <__aeabi_f2d>
 80049b8:	4604      	mov	r4, r0
 80049ba:	460d      	mov	r5, r1
 80049bc:	4b2a      	ldr	r3, [pc, #168]	; (8004a68 <TIM6_DAC_IRQHandler+0x3c8>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7fb fdc1 	bl	8000548 <__aeabi_f2d>
 80049c6:	4680      	mov	r8, r0
 80049c8:	4689      	mov	r9, r1
 80049ca:	4b20      	ldr	r3, [pc, #128]	; (8004a4c <TIM6_DAC_IRQHandler+0x3ac>)
 80049cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7fb fdb9 	bl	8000548 <__aeabi_f2d>
 80049d6:	4682      	mov	sl, r0
 80049d8:	468b      	mov	fp, r1
 80049da:	4b1d      	ldr	r3, [pc, #116]	; (8004a50 <TIM6_DAC_IRQHandler+0x3b0>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fb fdb2 	bl	8000548 <__aeabi_f2d>
 80049e4:	4602      	mov	r2, r0
 80049e6:	460b      	mov	r3, r1
 80049e8:	491a      	ldr	r1, [pc, #104]	; (8004a54 <TIM6_DAC_IRQHandler+0x3b4>)
 80049ea:	6809      	ldr	r1, [r1, #0]
 80049ec:	9108      	str	r1, [sp, #32]
 80049ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80049f2:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80049f6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80049fa:	e9cd 4500 	strd	r4, r5, [sp]
 80049fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a02:	4915      	ldr	r1, [pc, #84]	; (8004a58 <TIM6_DAC_IRQHandler+0x3b8>)
 8004a04:	4815      	ldr	r0, [pc, #84]	; (8004a5c <TIM6_DAC_IRQHandler+0x3bc>)
 8004a06:	f015 f8f5 	bl	8019bf4 <siprintf>
						break;
 8004a0a:	bf00      	nop
				}
			break;
 8004a0c:	bf00      	nop
		}
		//
		//	sprintf((char*)debug, "Err: %.2f Output: %.2f\n", fFLeftVelErr, fFLeftVelU);
		//	sprintf((char*)debug, "Yaw: %.2f\n", fyaw);
		HAL_UART_Transmit(&huart3, debug, strlen((char*)debug), HAL_MAX_DELAY);
 8004a0e:	4813      	ldr	r0, [pc, #76]	; (8004a5c <TIM6_DAC_IRQHandler+0x3bc>)
 8004a10:	f7fb fbde 	bl	80001d0 <strlen>
 8004a14:	4603      	mov	r3, r0
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a1c:	490f      	ldr	r1, [pc, #60]	; (8004a5c <TIM6_DAC_IRQHandler+0x3bc>)
 8004a1e:	4813      	ldr	r0, [pc, #76]	; (8004a6c <TIM6_DAC_IRQHandler+0x3cc>)
 8004a20:	f00f fd67 	bl	80144f2 <HAL_UART_Transmit>
	}
	counter++;
 8004a24:	4b12      	ldr	r3, [pc, #72]	; (8004a70 <TIM6_DAC_IRQHandler+0x3d0>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	4a11      	ldr	r2, [pc, #68]	; (8004a70 <TIM6_DAC_IRQHandler+0x3d0>)
 8004a2c:	6013      	str	r3, [r2, #0]
	HAL_TIM_IRQHandler(&htim6);
 8004a2e:	4811      	ldr	r0, [pc, #68]	; (8004a74 <TIM6_DAC_IRQHandler+0x3d4>)
 8004a30:	f00e feb8 	bl	80137a4 <HAL_TIM_IRQHandler>
}
 8004a34:	bf00      	nop
 8004a36:	3724      	adds	r7, #36	; 0x24
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a3e:	bf00      	nop
 8004a40:	200094f0 	.word	0x200094f0
 8004a44:	20009684 	.word	0x20009684
 8004a48:	200064f8 	.word	0x200064f8
 8004a4c:	20009248 	.word	0x20009248
 8004a50:	2000a054 	.word	0x2000a054
 8004a54:	200064f4 	.word	0x200064f4
 8004a58:	0801fe54 	.word	0x0801fe54
 8004a5c:	20007498 	.word	0x20007498
 8004a60:	20009b90 	.word	0x20009b90
 8004a64:	20006a24 	.word	0x20006a24
 8004a68:	2000986c 	.word	0x2000986c
 8004a6c:	20005bf0 	.word	0x20005bf0
 8004a70:	200002c8 	.word	0x200002c8
 8004a74:	20005f20 	.word	0x20005f20

08004a78 <MainTask>:

void MainTask(void *argument)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
	RobotStart();
 8004a80:	f007 f876 	bl	800bb70 <RobotStart>
	while(1)
	{
		switch(mode)
 8004a84:	4b31      	ldr	r3, [pc, #196]	; (8004b4c <MainTask+0xd4>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d02b      	beq.n	8004ae4 <MainTask+0x6c>
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	dc2c      	bgt.n	8004aea <MainTask+0x72>
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d002      	beq.n	8004a9a <MainTask+0x22>
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d022      	beq.n	8004ade <MainTask+0x66>
 8004a98:	e027      	b.n	8004aea <MainTask+0x72>
		{
			case NORMAL:
				if(!pp.pp_start)
 8004a9a:	4b2d      	ldr	r3, [pc, #180]	; (8004b50 <MainTask+0xd8>)
 8004a9c:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d102      	bne.n	8004ab0 <MainTask+0x38>
				{
					NormalControl();
 8004aaa:	f007 f92d 	bl	800bd08 <NormalControl>
//					ROSTune();
				}
				else
					VESCPIDProcess(pp.v1, pp.v2, pp.v3, pp.v4);
			break;
 8004aae:	e01c      	b.n	8004aea <MainTask+0x72>
					VESCPIDProcess(pp.v1, pp.v2, pp.v3, pp.v4);
 8004ab0:	4b27      	ldr	r3, [pc, #156]	; (8004b50 <MainTask+0xd8>)
 8004ab2:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8004ab6:	4b26      	ldr	r3, [pc, #152]	; (8004b50 <MainTask+0xd8>)
 8004ab8:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8004abc:	4b24      	ldr	r3, [pc, #144]	; (8004b50 <MainTask+0xd8>)
 8004abe:	edd3 6abc 	vldr	s13, [r3, #752]	; 0x2f0
 8004ac2:	4b23      	ldr	r3, [pc, #140]	; (8004b50 <MainTask+0xd8>)
 8004ac4:	ed93 6abd 	vldr	s12, [r3, #756]	; 0x2f4
 8004ac8:	eef0 1a46 	vmov.f32	s3, s12
 8004acc:	eeb0 1a66 	vmov.f32	s2, s13
 8004ad0:	eef0 0a47 	vmov.f32	s1, s14
 8004ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ad8:	f009 f8aa 	bl	800dc30 <VESCPIDProcess>
			break;
 8004adc:	e005      	b.n	8004aea <MainTask+0x72>

			case INITIALIZE:
				Init();
 8004ade:	f007 faf9 	bl	800c0d4 <Init>
			break;
 8004ae2:	e002      	b.n	8004aea <MainTask+0x72>

			case TUNE_PID:
				PS4Tune();
 8004ae4:	f007 fc08 	bl	800c2f8 <PS4Tune>
			break;
 8004ae8:	bf00      	nop
		}

		if(ps4.button == SELECT)
 8004aea:	4b1a      	ldr	r3, [pc, #104]	; (8004b54 <MainTask+0xdc>)
 8004aec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d110      	bne.n	8004b14 <MainTask+0x9c>
		{
			while(ps4.button == SELECT);
 8004af2:	bf00      	nop
 8004af4:	4b17      	ldr	r3, [pc, #92]	; (8004b54 <MainTask+0xdc>)
 8004af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d0fb      	beq.n	8004af4 <MainTask+0x7c>
			mode++;
 8004afc:	4b13      	ldr	r3, [pc, #76]	; (8004b4c <MainTask+0xd4>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	3301      	adds	r3, #1
 8004b02:	4a12      	ldr	r2, [pc, #72]	; (8004b4c <MainTask+0xd4>)
 8004b04:	6013      	str	r3, [r2, #0]
			if(mode > TUNE_PID) mode = NORMAL;
 8004b06:	4b11      	ldr	r3, [pc, #68]	; (8004b4c <MainTask+0xd4>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	dd02      	ble.n	8004b14 <MainTask+0x9c>
 8004b0e:	4b0f      	ldr	r3, [pc, #60]	; (8004b4c <MainTask+0xd4>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	601a      	str	r2, [r3, #0]
		}

		if(!PB1)
 8004b14:	4b10      	ldr	r3, [pc, #64]	; (8004b58 <MainTask+0xe0>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1b0      	bne.n	8004a84 <MainTask+0xc>
		{
			while(!PB1);
 8004b22:	bf00      	nop
 8004b24:	4b0c      	ldr	r3, [pc, #48]	; (8004b58 <MainTask+0xe0>)
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d0f8      	beq.n	8004b24 <MainTask+0xac>
			mode++;
 8004b32:	4b06      	ldr	r3, [pc, #24]	; (8004b4c <MainTask+0xd4>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3301      	adds	r3, #1
 8004b38:	4a04      	ldr	r2, [pc, #16]	; (8004b4c <MainTask+0xd4>)
 8004b3a:	6013      	str	r3, [r2, #0]
			if(mode > TUNE_PID)
 8004b3c:	4b03      	ldr	r3, [pc, #12]	; (8004b4c <MainTask+0xd4>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	dd9f      	ble.n	8004a84 <MainTask+0xc>
				mode = NORMAL;
 8004b44:	4b01      	ldr	r3, [pc, #4]	; (8004b4c <MainTask+0xd4>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
		switch(mode)
 8004b4a:	e79b      	b.n	8004a84 <MainTask+0xc>
 8004b4c:	2000903c 	.word	0x2000903c
 8004b50:	20006c28 	.word	0x20006c28
 8004b54:	20009dc0 	.word	0x20009dc0
 8004b58:	40020410 	.word	0x40020410

08004b5c <Calculation>:
		}
	}
}

void Calculation(void *argument)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
	while(1)
	{
		osSemaphoreAcquire(CalcSemaphore,osWaitForever);
 8004b64:	4b14      	ldr	r3, [pc, #80]	; (8004bb8 <Calculation+0x5c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f010 fddd 	bl	801572c <osSemaphoreAcquire>
		realMODN(&ps4, &rns);
 8004b72:	4912      	ldr	r1, [pc, #72]	; (8004bbc <Calculation+0x60>)
 8004b74:	4812      	ldr	r0, [pc, #72]	; (8004bc0 <Calculation+0x64>)
 8004b76:	f000 f8ff 	bl	8004d78 <realMODN>
		VESCNav5ms();
 8004b7a:	f009 f901 	bl	800dd80 <VESCNav5ms>

		if(flywheel)
 8004b7e:	4b11      	ldr	r3, [pc, #68]	; (8004bc4 <Calculation+0x68>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d010      	beq.n	8004ba8 <Calculation+0x4c>
		{
			VESCPDC(vesc_pdc, &flywheel1);
 8004b86:	4b10      	ldr	r3, [pc, #64]	; (8004bc8 <Calculation+0x6c>)
 8004b88:	edd3 7a00 	vldr	s15, [r3]
 8004b8c:	480f      	ldr	r0, [pc, #60]	; (8004bcc <Calculation+0x70>)
 8004b8e:	eeb0 0a67 	vmov.f32	s0, s15
 8004b92:	f009 f999 	bl	800dec8 <VESCPDC>
			VESCPDC(vesc_pdc, &flywheel2);
 8004b96:	4b0c      	ldr	r3, [pc, #48]	; (8004bc8 <Calculation+0x6c>)
 8004b98:	edd3 7a00 	vldr	s15, [r3]
 8004b9c:	480c      	ldr	r0, [pc, #48]	; (8004bd0 <Calculation+0x74>)
 8004b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8004ba2:	f009 f991 	bl	800dec8 <VESCPDC>
 8004ba6:	e7dd      	b.n	8004b64 <Calculation+0x8>
		}
		else
		{
			VESCStop(&flywheel1);
 8004ba8:	4808      	ldr	r0, [pc, #32]	; (8004bcc <Calculation+0x70>)
 8004baa:	f009 f9b7 	bl	800df1c <VESCStop>
			VESCStop(&flywheel2);
 8004bae:	4808      	ldr	r0, [pc, #32]	; (8004bd0 <Calculation+0x74>)
 8004bb0:	f009 f9b4 	bl	800df1c <VESCStop>
		osSemaphoreAcquire(CalcSemaphore,osWaitForever);
 8004bb4:	e7d6      	b.n	8004b64 <Calculation+0x8>
 8004bb6:	bf00      	nop
 8004bb8:	2000a4a4 	.word	0x2000a4a4
 8004bbc:	20008f04 	.word	0x20008f04
 8004bc0:	20009dc0 	.word	0x20009dc0
 8004bc4:	2000970c 	.word	0x2000970c
 8004bc8:	20007754 	.word	0x20007754
 8004bcc:	20006aa0 	.word	0x20006aa0
 8004bd0:	20007478 	.word	0x20007478

08004bd4 <EmergencyTask>:
		}
	}
}

void EmergencyTask(void *argument){
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08c      	sub	sp, #48	; 0x30
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]

	while(1){

		if(ps4.button == TOUCH){
 8004bdc:	4b18      	ldr	r3, [pc, #96]	; (8004c40 <EmergencyTask+0x6c>)
 8004bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004be0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004be4:	d1fa      	bne.n	8004bdc <EmergencyTask+0x8>
//			RNSStop(&rns);
			VESCNavStop();
 8004be6:	f008 fe93 	bl	800d910 <VESCNavStop>
			osThreadSuspend(FlywheelPitchPIDTaskHandle);
 8004bea:	4b16      	ldr	r3, [pc, #88]	; (8004c44 <EmergencyTask+0x70>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f010 fcaa 	bl	8015548 <osThreadSuspend>
			osThreadSuspend(FlywheelYawPIDTaskHandle);
 8004bf4:	4b14      	ldr	r3, [pc, #80]	; (8004c48 <EmergencyTask+0x74>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f010 fca5 	bl	8015548 <osThreadSuspend>
			osThreadTerminate(MainTaskHandle);
 8004bfe:	4b13      	ldr	r3, [pc, #76]	; (8004c4c <EmergencyTask+0x78>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f010 fcc1 	bl	801558a <osThreadTerminate>
			osDelay(5);
 8004c08:	2005      	movs	r0, #5
 8004c0a:	f010 fceb 	bl	80155e4 <osDelay>

			const osThreadAttr_t MainTask_attributes = {
 8004c0e:	f107 030c 	add.w	r3, r7, #12
 8004c12:	2224      	movs	r2, #36	; 0x24
 8004c14:	2100      	movs	r1, #0
 8004c16:	4618      	mov	r0, r3
 8004c18:	f014 f830 	bl	8018c7c <memset>
 8004c1c:	4b0c      	ldr	r3, [pc, #48]	; (8004c50 <EmergencyTask+0x7c>)
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c24:	623b      	str	r3, [r7, #32]
 8004c26:	2318      	movs	r3, #24
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
					.name = "MainTask",
					.stack_size = 256 * 4,
					.priority = (osPriority_t) osPriorityNormal,
			};

			MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
 8004c2a:	f107 030c 	add.w	r3, r7, #12
 8004c2e:	461a      	mov	r2, r3
 8004c30:	2100      	movs	r1, #0
 8004c32:	4808      	ldr	r0, [pc, #32]	; (8004c54 <EmergencyTask+0x80>)
 8004c34:	f010 fbf6 	bl	8015424 <osThreadNew>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	4a04      	ldr	r2, [pc, #16]	; (8004c4c <EmergencyTask+0x78>)
 8004c3c:	6013      	str	r3, [r2, #0]
		if(ps4.button == TOUCH){
 8004c3e:	e7cd      	b.n	8004bdc <EmergencyTask+0x8>
 8004c40:	20009dc0 	.word	0x20009dc0
 8004c44:	200094e4 	.word	0x200094e4
 8004c48:	2000724c 	.word	0x2000724c
 8004c4c:	20007900 	.word	0x20007900
 8004c50:	0801fda0 	.word	0x0801fda0
 8004c54:	08004a79 	.word	0x08004a79

08004c58 <HAL_UART_RxCpltCallback>:
			tune_flag.editTerminated = 0;
		}
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
	if(huart == tuneUart)
 8004c60:	4b0e      	ldr	r3, [pc, #56]	; (8004c9c <HAL_UART_RxCpltCallback+0x44>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d104      	bne.n	8004c74 <HAL_UART_RxCpltCallback+0x1c>
		osSemaphoreRelease(TuneSemaphore);
 8004c6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ca0 <HAL_UART_RxCpltCallback+0x48>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f010 fdae 	bl	80157d0 <osSemaphoreRelease>

	if(huart == ROS_UART){
 8004c74:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <HAL_UART_RxCpltCallback+0x4c>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d101      	bne.n	8004c82 <HAL_UART_RxCpltCallback+0x2a>
		ROS_Handler();
 8004c7e:	f004 fc6d 	bl	800955c <ROS_Handler>
//	if(huart == lidar_UART)
//	{
//		ObstacleHandler();
//	}

	if(huart == imu.huartx)
 8004c82:	4b09      	ldr	r3, [pc, #36]	; (8004ca8 <HAL_UART_RxCpltCallback+0x50>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d102      	bne.n	8004c92 <HAL_UART_RxCpltCallback+0x3a>
	{
		R6091U_Handler(&imu);
 8004c8c:	4806      	ldr	r0, [pc, #24]	; (8004ca8 <HAL_UART_RxCpltCallback+0x50>)
 8004c8e:	f004 fae5 	bl	800925c <R6091U_Handler>
	}

//		else if(huart == ps4.huartps4){
//		PSx_HandlerUART(&ps4);
//	}
}
 8004c92:	bf00      	nop
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	2000a190 	.word	0x2000a190
 8004ca0:	20009e38 	.word	0x20009e38
 8004ca4:	2000987c 	.word	0x2000987c
 8004ca8:	20006a10 	.word	0x20006a10

08004cac <Error_Handler>:

/**
 * @brief  This function is executed in case of errorYaw occurrence.
 */
void Error_Handler(void)
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0


}
 8004cb0:	bf00      	nop
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	0000      	movs	r0, r0
 8004cbc:	0000      	movs	r0, r0
	...

08004cc0 <MODNInit>:
 * 						  								gain added to four wheels based on the speed
 * Function Return		: NONE
 * Function Example		: void MODNInit(MODN_FWD_OMNI, 3.0, 0.5, 2.0, 0.1);
 */
void MODNInit(RobotBaseType_t base, MotorType_t motor, float speed, float turnSpeed, float angleTol, float imuGain)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	460a      	mov	r2, r1
 8004cca:	ed87 0a04 	vstr	s0, [r7, #16]
 8004cce:	edc7 0a03 	vstr	s1, [r7, #12]
 8004cd2:	ed87 1a02 	vstr	s2, [r7, #8]
 8004cd6:	edc7 1a01 	vstr	s3, [r7, #4]
 8004cda:	75fb      	strb	r3, [r7, #23]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	75bb      	strb	r3, [r7, #22]
	MODN.base = base;
 8004ce0:	4a23      	ldr	r2, [pc, #140]	; (8004d70 <MODNInit+0xb0>)
 8004ce2:	7dfb      	ldrb	r3, [r7, #23]
 8004ce4:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	MODN.motor = motor;
 8004ce8:	4a21      	ldr	r2, [pc, #132]	; (8004d70 <MODNInit+0xb0>)
 8004cea:	7dbb      	ldrb	r3, [r7, #22]
 8004cec:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
	MODN.speed = speed;
 8004cf0:	4a1f      	ldr	r2, [pc, #124]	; (8004d70 <MODNInit+0xb0>)
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	61d3      	str	r3, [r2, #28]
	MODN.d	= turnSpeed;
 8004cf6:	4a1e      	ldr	r2, [pc, #120]	; (8004d70 <MODNInit+0xb0>)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6213      	str	r3, [r2, #32]
	MODN.radTol = angleTol/180.0*3.14159265359;
 8004cfc:	68b8      	ldr	r0, [r7, #8]
 8004cfe:	f7fb fc23 	bl	8000548 <__aeabi_f2d>
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	4b1b      	ldr	r3, [pc, #108]	; (8004d74 <MODNInit+0xb4>)
 8004d08:	f7fb fda0 	bl	800084c <__aeabi_ddiv>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4610      	mov	r0, r2
 8004d12:	4619      	mov	r1, r3
 8004d14:	a314      	add	r3, pc, #80	; (adr r3, 8004d68 <MODNInit+0xa8>)
 8004d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1a:	f7fb fc6d 	bl	80005f8 <__aeabi_dmul>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	4610      	mov	r0, r2
 8004d24:	4619      	mov	r1, r3
 8004d26:	f7fb ff5f 	bl	8000be8 <__aeabi_d2f>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	4a10      	ldr	r2, [pc, #64]	; (8004d70 <MODNInit+0xb0>)
 8004d2e:	62d3      	str	r3, [r2, #44]	; 0x2c
	MODN.imuGain = speed*imuGain/MODN.radTol;
 8004d30:	ed97 7a04 	vldr	s14, [r7, #16]
 8004d34:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d38:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004d3c:	4b0c      	ldr	r3, [pc, #48]	; (8004d70 <MODNInit+0xb0>)
 8004d3e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004d42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d46:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <MODNInit+0xb0>)
 8004d48:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	MODN.radTarget = 0.0;
 8004d4c:	4b08      	ldr	r3, [pc, #32]	; (8004d70 <MODNInit+0xb0>)
 8004d4e:	f04f 0200 	mov.w	r2, #0
 8004d52:	639a      	str	r2, [r3, #56]	; 0x38
	MODN.orientation = 0;
 8004d54:	4b06      	ldr	r3, [pc, #24]	; (8004d70 <MODNInit+0xb0>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	641a      	str	r2, [r3, #64]	; 0x40
//	MODN.real_x_vel = &(MODN.x_vel);
//	MODN.real_y_vel = &(MODN.y_vel);
}
 8004d5a:	bf00      	nop
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	f3af 8000 	nop.w
 8004d68:	54442eea 	.word	0x54442eea
 8004d6c:	400921fb 	.word	0x400921fb
 8004d70:	20006a34 	.word	0x20006a34
 8004d74:	40668000 	.word	0x40668000

08004d78 <realMODN>:
 * Function Return		: NONE
 * Function Example		: realMODN(ps4, &rns);
 */

void realMODN(PSxBT_t *psx, RNS_interface_t* rns)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	ed2d 8b02 	vpush	{d8}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
	switch(MODN.orientation){
 8004d86:	4b52      	ldr	r3, [pc, #328]	; (8004ed0 <realMODN+0x158>)
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	d86e      	bhi.n	8004e6c <realMODN+0xf4>
 8004d8e:	a201      	add	r2, pc, #4	; (adr r2, 8004d94 <realMODN+0x1c>)
 8004d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d94:	08004da5 	.word	0x08004da5
 8004d98:	08004dd7 	.word	0x08004dd7
 8004d9c:	08004e05 	.word	0x08004e05
 8004da0:	08004e37 	.word	0x08004e37
	case OPERATOR_TURNED_0_DEGREE:
		MODN.x_vel = -(psx->joyL_x) * MODN.speed;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004daa:	eeb1 7a67 	vneg.f32	s14, s15
 8004dae:	4b48      	ldr	r3, [pc, #288]	; (8004ed0 <realMODN+0x158>)
 8004db0:	edd3 7a07 	vldr	s15, [r3, #28]
 8004db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db8:	4b45      	ldr	r3, [pc, #276]	; (8004ed0 <realMODN+0x158>)
 8004dba:	edc3 7a00 	vstr	s15, [r3]
		MODN.y_vel =  (psx->joyL_y) * MODN.speed;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8004dc4:	4b42      	ldr	r3, [pc, #264]	; (8004ed0 <realMODN+0x158>)
 8004dc6:	edd3 7a07 	vldr	s15, [r3, #28]
 8004dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dce:	4b40      	ldr	r3, [pc, #256]	; (8004ed0 <realMODN+0x158>)
 8004dd0:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 8004dd4:	e04a      	b.n	8004e6c <realMODN+0xf4>
	case OPERATOR_TURNED_90_DEGREES_CLOCKWISE:
		MODN.x_vel =  psx->joyL_y * MODN.speed;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8004ddc:	4b3c      	ldr	r3, [pc, #240]	; (8004ed0 <realMODN+0x158>)
 8004dde:	edd3 7a07 	vldr	s15, [r3, #28]
 8004de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004de6:	4b3a      	ldr	r3, [pc, #232]	; (8004ed0 <realMODN+0x158>)
 8004de8:	edc3 7a00 	vstr	s15, [r3]
		MODN.y_vel =  psx->joyL_x * MODN.speed;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8004df2:	4b37      	ldr	r3, [pc, #220]	; (8004ed0 <realMODN+0x158>)
 8004df4:	edd3 7a07 	vldr	s15, [r3, #28]
 8004df8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dfc:	4b34      	ldr	r3, [pc, #208]	; (8004ed0 <realMODN+0x158>)
 8004dfe:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 8004e02:	e033      	b.n	8004e6c <realMODN+0xf4>
	case OPERATOR_TURNED_180_DEGREES:
		MODN.x_vel =  psx->joyL_x * MODN.speed;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8004e0a:	4b31      	ldr	r3, [pc, #196]	; (8004ed0 <realMODN+0x158>)
 8004e0c:	edd3 7a07 	vldr	s15, [r3, #28]
 8004e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e14:	4b2e      	ldr	r3, [pc, #184]	; (8004ed0 <realMODN+0x158>)
 8004e16:	edc3 7a00 	vstr	s15, [r3]
		MODN.y_vel = -psx->joyL_y * MODN.speed;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004e20:	eeb1 7a67 	vneg.f32	s14, s15
 8004e24:	4b2a      	ldr	r3, [pc, #168]	; (8004ed0 <realMODN+0x158>)
 8004e26:	edd3 7a07 	vldr	s15, [r3, #28]
 8004e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e2e:	4b28      	ldr	r3, [pc, #160]	; (8004ed0 <realMODN+0x158>)
 8004e30:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 8004e34:	e01a      	b.n	8004e6c <realMODN+0xf4>
	case OPERATOR_TURNED_90_DEGREES_ANTICLOCKWISE:
		MODN.x_vel = -psx->joyL_y * MODN.speed;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004e3c:	eeb1 7a67 	vneg.f32	s14, s15
 8004e40:	4b23      	ldr	r3, [pc, #140]	; (8004ed0 <realMODN+0x158>)
 8004e42:	edd3 7a07 	vldr	s15, [r3, #28]
 8004e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e4a:	4b21      	ldr	r3, [pc, #132]	; (8004ed0 <realMODN+0x158>)
 8004e4c:	edc3 7a00 	vstr	s15, [r3]
		MODN.y_vel = -psx->joyL_x * MODN.speed;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004e56:	eeb1 7a67 	vneg.f32	s14, s15
 8004e5a:	4b1d      	ldr	r3, [pc, #116]	; (8004ed0 <realMODN+0x158>)
 8004e5c:	edd3 7a07 	vldr	s15, [r3, #28]
 8004e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e64:	4b1a      	ldr	r3, [pc, #104]	; (8004ed0 <realMODN+0x158>)
 8004e66:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 8004e6a:	bf00      	nop
	}
	MODN.w_vel = ((psx->joyR_2) - (psx->joyL_2))* MODN.speed;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004e78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004e7c:	4b14      	ldr	r3, [pc, #80]	; (8004ed0 <realMODN+0x158>)
 8004e7e:	edd3 7a07 	vldr	s15, [r3, #28]
 8004e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e86:	4b12      	ldr	r3, [pc, #72]	; (8004ed0 <realMODN+0x158>)
 8004e88:	edc3 7a02 	vstr	s15, [r3, #8]
//				MODN.vel2 = MODN.y_vel*sinf(1.0472-realZrad) + MODN.x_vel*cosf(1.0472-realZrad) - MODN.w_vel*MODN.d;
//				RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
//			}
//		}
//	}
	if(MODN.motor == BRUSHLESS)// Brushless motor
 8004e8c:	4b10      	ldr	r3, [pc, #64]	; (8004ed0 <realMODN+0x158>)
 8004e8e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f040 824f 	bne.w	8005336 <realMODN+0x5be>
	{
		if(MODN.x_vel==0.0 && MODN.y_vel==0.0 && MODN.w_vel==0.0)
 8004e98:	4b0d      	ldr	r3, [pc, #52]	; (8004ed0 <realMODN+0x158>)
 8004e9a:	edd3 7a00 	vldr	s15, [r3]
 8004e9e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ea6:	d115      	bne.n	8004ed4 <realMODN+0x15c>
 8004ea8:	4b09      	ldr	r3, [pc, #36]	; (8004ed0 <realMODN+0x158>)
 8004eaa:	edd3 7a01 	vldr	s15, [r3, #4]
 8004eae:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eb6:	d10d      	bne.n	8004ed4 <realMODN+0x15c>
 8004eb8:	4b05      	ldr	r3, [pc, #20]	; (8004ed0 <realMODN+0x158>)
 8004eba:	edd3 7a02 	vldr	s15, [r3, #8]
 8004ebe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec6:	d105      	bne.n	8004ed4 <realMODN+0x15c>
		{
			/*
			 * If using omni wheel, impossible to stop immediately
			 * maybe can let it turn opposite direction to stop it faster
			 */
			VESCNavStop();
 8004ec8:	f008 fd22 	bl	800d910 <VESCNavStop>
				VESCPIDProcess(MODN.vel1, MODN.vel2, MODN.vel3, MODN.vel4);
			}
		}
	}

}
 8004ecc:	e233      	b.n	8005336 <realMODN+0x5be>
 8004ece:	bf00      	nop
 8004ed0:	20006a34 	.word	0x20006a34
			float realZrad = pp.real_z_rad;
 8004ed4:	4ba8      	ldr	r3, [pc, #672]	; (8005178 <realMODN+0x400>)
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	60fb      	str	r3, [r7, #12]
			sys.navi_vel = 1;
 8004eda:	4aa8      	ldr	r2, [pc, #672]	; (800517c <realMODN+0x404>)
 8004edc:	7853      	ldrb	r3, [r2, #1]
 8004ede:	f043 0304 	orr.w	r3, r3, #4
 8004ee2:	7053      	strb	r3, [r2, #1]
			if(MODN.base == MODN_FWD_OMNI) {
 8004ee4:	4ba6      	ldr	r3, [pc, #664]	; (8005180 <realMODN+0x408>)
 8004ee6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f040 814c 	bne.w	8005188 <realMODN+0x410>
				MODN.vel1 = MODN.x_vel*cosf(0.7854-realZrad) + MODN.y_vel*sinf(0.7854-realZrad) + MODN.w_vel*MODN.d;
 8004ef0:	4ba3      	ldr	r3, [pc, #652]	; (8005180 <realMODN+0x408>)
 8004ef2:	ed93 8a00 	vldr	s16, [r3]
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f7fb fb26 	bl	8000548 <__aeabi_f2d>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	a199      	add	r1, pc, #612	; (adr r1, 8005168 <realMODN+0x3f0>)
 8004f02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f06:	f7fb f9bf 	bl	8000288 <__aeabi_dsub>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	4610      	mov	r0, r2
 8004f10:	4619      	mov	r1, r3
 8004f12:	f7fb fe69 	bl	8000be8 <__aeabi_d2f>
 8004f16:	4603      	mov	r3, r0
 8004f18:	ee00 3a10 	vmov	s0, r3
 8004f1c:	f018 fdca 	bl	801dab4 <cosf>
 8004f20:	eef0 7a40 	vmov.f32	s15, s0
 8004f24:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004f28:	4b95      	ldr	r3, [pc, #596]	; (8005180 <realMODN+0x408>)
 8004f2a:	edd3 8a01 	vldr	s17, [r3, #4]
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f7fb fb0a 	bl	8000548 <__aeabi_f2d>
 8004f34:	4602      	mov	r2, r0
 8004f36:	460b      	mov	r3, r1
 8004f38:	a18b      	add	r1, pc, #556	; (adr r1, 8005168 <realMODN+0x3f0>)
 8004f3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f3e:	f7fb f9a3 	bl	8000288 <__aeabi_dsub>
 8004f42:	4602      	mov	r2, r0
 8004f44:	460b      	mov	r3, r1
 8004f46:	4610      	mov	r0, r2
 8004f48:	4619      	mov	r1, r3
 8004f4a:	f7fb fe4d 	bl	8000be8 <__aeabi_d2f>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	ee00 3a10 	vmov	s0, r3
 8004f54:	f018 fdf6 	bl	801db44 <sinf>
 8004f58:	eef0 7a40 	vmov.f32	s15, s0
 8004f5c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004f60:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004f64:	4b86      	ldr	r3, [pc, #536]	; (8005180 <realMODN+0x408>)
 8004f66:	edd3 6a02 	vldr	s13, [r3, #8]
 8004f6a:	4b85      	ldr	r3, [pc, #532]	; (8005180 <realMODN+0x408>)
 8004f6c:	edd3 7a08 	vldr	s15, [r3, #32]
 8004f70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f78:	4b81      	ldr	r3, [pc, #516]	; (8005180 <realMODN+0x408>)
 8004f7a:	edc3 7a03 	vstr	s15, [r3, #12]
				MODN.vel2 = MODN.x_vel*cosf(2.3562-realZrad) + MODN.y_vel*sinf(2.3562-realZrad) - MODN.w_vel*MODN.d;
 8004f7e:	4b80      	ldr	r3, [pc, #512]	; (8005180 <realMODN+0x408>)
 8004f80:	ed93 8a00 	vldr	s16, [r3]
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f7fb fadf 	bl	8000548 <__aeabi_f2d>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	a178      	add	r1, pc, #480	; (adr r1, 8005170 <realMODN+0x3f8>)
 8004f90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f94:	f7fb f978 	bl	8000288 <__aeabi_dsub>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4610      	mov	r0, r2
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	f7fb fe22 	bl	8000be8 <__aeabi_d2f>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	ee00 3a10 	vmov	s0, r3
 8004faa:	f018 fd83 	bl	801dab4 <cosf>
 8004fae:	eef0 7a40 	vmov.f32	s15, s0
 8004fb2:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004fb6:	4b72      	ldr	r3, [pc, #456]	; (8005180 <realMODN+0x408>)
 8004fb8:	edd3 8a01 	vldr	s17, [r3, #4]
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f7fb fac3 	bl	8000548 <__aeabi_f2d>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	a16a      	add	r1, pc, #424	; (adr r1, 8005170 <realMODN+0x3f8>)
 8004fc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fcc:	f7fb f95c 	bl	8000288 <__aeabi_dsub>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	f7fb fe06 	bl	8000be8 <__aeabi_d2f>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	ee00 3a10 	vmov	s0, r3
 8004fe2:	f018 fdaf 	bl	801db44 <sinf>
 8004fe6:	eef0 7a40 	vmov.f32	s15, s0
 8004fea:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004fee:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004ff2:	4b63      	ldr	r3, [pc, #396]	; (8005180 <realMODN+0x408>)
 8004ff4:	edd3 6a02 	vldr	s13, [r3, #8]
 8004ff8:	4b61      	ldr	r3, [pc, #388]	; (8005180 <realMODN+0x408>)
 8004ffa:	edd3 7a08 	vldr	s15, [r3, #32]
 8004ffe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005002:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005006:	4b5e      	ldr	r3, [pc, #376]	; (8005180 <realMODN+0x408>)
 8005008:	edc3 7a04 	vstr	s15, [r3, #16]
				MODN.vel3 = MODN.x_vel*cosf(2.3562-realZrad) + MODN.y_vel*sinf(2.3562-realZrad) + MODN.w_vel*MODN.d;
 800500c:	4b5c      	ldr	r3, [pc, #368]	; (8005180 <realMODN+0x408>)
 800500e:	ed93 8a00 	vldr	s16, [r3]
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f7fb fa98 	bl	8000548 <__aeabi_f2d>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	a154      	add	r1, pc, #336	; (adr r1, 8005170 <realMODN+0x3f8>)
 800501e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005022:	f7fb f931 	bl	8000288 <__aeabi_dsub>
 8005026:	4602      	mov	r2, r0
 8005028:	460b      	mov	r3, r1
 800502a:	4610      	mov	r0, r2
 800502c:	4619      	mov	r1, r3
 800502e:	f7fb fddb 	bl	8000be8 <__aeabi_d2f>
 8005032:	4603      	mov	r3, r0
 8005034:	ee00 3a10 	vmov	s0, r3
 8005038:	f018 fd3c 	bl	801dab4 <cosf>
 800503c:	eef0 7a40 	vmov.f32	s15, s0
 8005040:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005044:	4b4e      	ldr	r3, [pc, #312]	; (8005180 <realMODN+0x408>)
 8005046:	edd3 8a01 	vldr	s17, [r3, #4]
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f7fb fa7c 	bl	8000548 <__aeabi_f2d>
 8005050:	4602      	mov	r2, r0
 8005052:	460b      	mov	r3, r1
 8005054:	a146      	add	r1, pc, #280	; (adr r1, 8005170 <realMODN+0x3f8>)
 8005056:	e9d1 0100 	ldrd	r0, r1, [r1]
 800505a:	f7fb f915 	bl	8000288 <__aeabi_dsub>
 800505e:	4602      	mov	r2, r0
 8005060:	460b      	mov	r3, r1
 8005062:	4610      	mov	r0, r2
 8005064:	4619      	mov	r1, r3
 8005066:	f7fb fdbf 	bl	8000be8 <__aeabi_d2f>
 800506a:	4603      	mov	r3, r0
 800506c:	ee00 3a10 	vmov	s0, r3
 8005070:	f018 fd68 	bl	801db44 <sinf>
 8005074:	eef0 7a40 	vmov.f32	s15, s0
 8005078:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800507c:	ee38 7a27 	vadd.f32	s14, s16, s15
 8005080:	4b3f      	ldr	r3, [pc, #252]	; (8005180 <realMODN+0x408>)
 8005082:	edd3 6a02 	vldr	s13, [r3, #8]
 8005086:	4b3e      	ldr	r3, [pc, #248]	; (8005180 <realMODN+0x408>)
 8005088:	edd3 7a08 	vldr	s15, [r3, #32]
 800508c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005094:	4b3a      	ldr	r3, [pc, #232]	; (8005180 <realMODN+0x408>)
 8005096:	edc3 7a05 	vstr	s15, [r3, #20]
				MODN.vel4 = MODN.x_vel*cosf(0.7854-realZrad) + MODN.y_vel*sinf(0.7854-realZrad) - MODN.w_vel*MODN.d;
 800509a:	4b39      	ldr	r3, [pc, #228]	; (8005180 <realMODN+0x408>)
 800509c:	ed93 8a00 	vldr	s16, [r3]
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f7fb fa51 	bl	8000548 <__aeabi_f2d>
 80050a6:	4602      	mov	r2, r0
 80050a8:	460b      	mov	r3, r1
 80050aa:	a12f      	add	r1, pc, #188	; (adr r1, 8005168 <realMODN+0x3f0>)
 80050ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050b0:	f7fb f8ea 	bl	8000288 <__aeabi_dsub>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	4610      	mov	r0, r2
 80050ba:	4619      	mov	r1, r3
 80050bc:	f7fb fd94 	bl	8000be8 <__aeabi_d2f>
 80050c0:	4603      	mov	r3, r0
 80050c2:	ee00 3a10 	vmov	s0, r3
 80050c6:	f018 fcf5 	bl	801dab4 <cosf>
 80050ca:	eef0 7a40 	vmov.f32	s15, s0
 80050ce:	ee28 8a27 	vmul.f32	s16, s16, s15
 80050d2:	4b2b      	ldr	r3, [pc, #172]	; (8005180 <realMODN+0x408>)
 80050d4:	edd3 8a01 	vldr	s17, [r3, #4]
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f7fb fa35 	bl	8000548 <__aeabi_f2d>
 80050de:	4602      	mov	r2, r0
 80050e0:	460b      	mov	r3, r1
 80050e2:	a121      	add	r1, pc, #132	; (adr r1, 8005168 <realMODN+0x3f0>)
 80050e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050e8:	f7fb f8ce 	bl	8000288 <__aeabi_dsub>
 80050ec:	4602      	mov	r2, r0
 80050ee:	460b      	mov	r3, r1
 80050f0:	4610      	mov	r0, r2
 80050f2:	4619      	mov	r1, r3
 80050f4:	f7fb fd78 	bl	8000be8 <__aeabi_d2f>
 80050f8:	4603      	mov	r3, r0
 80050fa:	ee00 3a10 	vmov	s0, r3
 80050fe:	f018 fd21 	bl	801db44 <sinf>
 8005102:	eef0 7a40 	vmov.f32	s15, s0
 8005106:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800510a:	ee38 7a27 	vadd.f32	s14, s16, s15
 800510e:	4b1c      	ldr	r3, [pc, #112]	; (8005180 <realMODN+0x408>)
 8005110:	edd3 6a02 	vldr	s13, [r3, #8]
 8005114:	4b1a      	ldr	r3, [pc, #104]	; (8005180 <realMODN+0x408>)
 8005116:	edd3 7a08 	vldr	s15, [r3, #32]
 800511a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800511e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005122:	4b17      	ldr	r3, [pc, #92]	; (8005180 <realMODN+0x408>)
 8005124:	edc3 7a06 	vstr	s15, [r3, #24]
				VESCPIDProcess(MODN.vel1, MODN.vel2, MODN.vel3, MODN.vel4);
 8005128:	4b15      	ldr	r3, [pc, #84]	; (8005180 <realMODN+0x408>)
 800512a:	edd3 7a03 	vldr	s15, [r3, #12]
 800512e:	4b14      	ldr	r3, [pc, #80]	; (8005180 <realMODN+0x408>)
 8005130:	ed93 7a04 	vldr	s14, [r3, #16]
 8005134:	4b12      	ldr	r3, [pc, #72]	; (8005180 <realMODN+0x408>)
 8005136:	edd3 6a05 	vldr	s13, [r3, #20]
 800513a:	4b11      	ldr	r3, [pc, #68]	; (8005180 <realMODN+0x408>)
 800513c:	ed93 6a06 	vldr	s12, [r3, #24]
 8005140:	eef0 1a46 	vmov.f32	s3, s12
 8005144:	eeb0 1a66 	vmov.f32	s2, s13
 8005148:	eef0 0a47 	vmov.f32	s1, s14
 800514c:	eeb0 0a67 	vmov.f32	s0, s15
 8005150:	f008 fd6e 	bl	800dc30 <VESCPIDProcess>
				hb_count = HAL_GetTick();
 8005154:	f008 ff8e 	bl	800e074 <HAL_GetTick>
 8005158:	4603      	mov	r3, r0
 800515a:	461a      	mov	r2, r3
 800515c:	4b09      	ldr	r3, [pc, #36]	; (8005184 <realMODN+0x40c>)
 800515e:	601a      	str	r2, [r3, #0]
}
 8005160:	e0e9      	b.n	8005336 <realMODN+0x5be>
 8005162:	bf00      	nop
 8005164:	f3af 8000 	nop.w
 8005168:	2e48e8a7 	.word	0x2e48e8a7
 800516c:	3fe921ff 	.word	0x3fe921ff
 8005170:	62b6ae7d 	.word	0x62b6ae7d
 8005174:	4002d97f 	.word	0x4002d97f
 8005178:	20006c28 	.word	0x20006c28
 800517c:	20007268 	.word	0x20007268
 8005180:	20006a34 	.word	0x20006a34
 8005184:	2000974c 	.word	0x2000974c
			else if (MODN.base == MODN_TRI_OMNI){
 8005188:	4b73      	ldr	r3, [pc, #460]	; (8005358 <realMODN+0x5e0>)
 800518a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800518e:	2b01      	cmp	r3, #1
 8005190:	f040 80d1 	bne.w	8005336 <realMODN+0x5be>
				MODN.vel3 = MODN.y_vel*sinf(-realZrad) 		 + MODN.x_vel*cosf(-realZrad)  	    + MODN.w_vel*MODN.d;
 8005194:	4b70      	ldr	r3, [pc, #448]	; (8005358 <realMODN+0x5e0>)
 8005196:	ed93 8a01 	vldr	s16, [r3, #4]
 800519a:	edd7 7a03 	vldr	s15, [r7, #12]
 800519e:	eef1 7a67 	vneg.f32	s15, s15
 80051a2:	eeb0 0a67 	vmov.f32	s0, s15
 80051a6:	f018 fccd 	bl	801db44 <sinf>
 80051aa:	eef0 7a40 	vmov.f32	s15, s0
 80051ae:	ee28 8a27 	vmul.f32	s16, s16, s15
 80051b2:	4b69      	ldr	r3, [pc, #420]	; (8005358 <realMODN+0x5e0>)
 80051b4:	edd3 8a00 	vldr	s17, [r3]
 80051b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80051bc:	eef1 7a67 	vneg.f32	s15, s15
 80051c0:	eeb0 0a67 	vmov.f32	s0, s15
 80051c4:	f018 fc76 	bl	801dab4 <cosf>
 80051c8:	eef0 7a40 	vmov.f32	s15, s0
 80051cc:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80051d0:	ee38 7a27 	vadd.f32	s14, s16, s15
 80051d4:	4b60      	ldr	r3, [pc, #384]	; (8005358 <realMODN+0x5e0>)
 80051d6:	edd3 6a02 	vldr	s13, [r3, #8]
 80051da:	4b5f      	ldr	r3, [pc, #380]	; (8005358 <realMODN+0x5e0>)
 80051dc:	edd3 7a08 	vldr	s15, [r3, #32]
 80051e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051e8:	4b5b      	ldr	r3, [pc, #364]	; (8005358 <realMODN+0x5e0>)
 80051ea:	edc3 7a05 	vstr	s15, [r3, #20]
				MODN.vel1 = MODN.y_vel*sinf(2.0944-realZrad) + MODN.x_vel*cosf(2.0944-realZrad) + MODN.w_vel*MODN.d;
 80051ee:	4b5a      	ldr	r3, [pc, #360]	; (8005358 <realMODN+0x5e0>)
 80051f0:	ed93 8a01 	vldr	s16, [r3, #4]
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f7fb f9a7 	bl	8000548 <__aeabi_f2d>
 80051fa:	4602      	mov	r2, r0
 80051fc:	460b      	mov	r3, r1
 80051fe:	a152      	add	r1, pc, #328	; (adr r1, 8005348 <realMODN+0x5d0>)
 8005200:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005204:	f7fb f840 	bl	8000288 <__aeabi_dsub>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4610      	mov	r0, r2
 800520e:	4619      	mov	r1, r3
 8005210:	f7fb fcea 	bl	8000be8 <__aeabi_d2f>
 8005214:	4603      	mov	r3, r0
 8005216:	ee00 3a10 	vmov	s0, r3
 800521a:	f018 fc93 	bl	801db44 <sinf>
 800521e:	eef0 7a40 	vmov.f32	s15, s0
 8005222:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005226:	4b4c      	ldr	r3, [pc, #304]	; (8005358 <realMODN+0x5e0>)
 8005228:	edd3 8a00 	vldr	s17, [r3]
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f7fb f98b 	bl	8000548 <__aeabi_f2d>
 8005232:	4602      	mov	r2, r0
 8005234:	460b      	mov	r3, r1
 8005236:	a144      	add	r1, pc, #272	; (adr r1, 8005348 <realMODN+0x5d0>)
 8005238:	e9d1 0100 	ldrd	r0, r1, [r1]
 800523c:	f7fb f824 	bl	8000288 <__aeabi_dsub>
 8005240:	4602      	mov	r2, r0
 8005242:	460b      	mov	r3, r1
 8005244:	4610      	mov	r0, r2
 8005246:	4619      	mov	r1, r3
 8005248:	f7fb fcce 	bl	8000be8 <__aeabi_d2f>
 800524c:	4603      	mov	r3, r0
 800524e:	ee00 3a10 	vmov	s0, r3
 8005252:	f018 fc2f 	bl	801dab4 <cosf>
 8005256:	eef0 7a40 	vmov.f32	s15, s0
 800525a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800525e:	ee38 7a27 	vadd.f32	s14, s16, s15
 8005262:	4b3d      	ldr	r3, [pc, #244]	; (8005358 <realMODN+0x5e0>)
 8005264:	edd3 6a02 	vldr	s13, [r3, #8]
 8005268:	4b3b      	ldr	r3, [pc, #236]	; (8005358 <realMODN+0x5e0>)
 800526a:	edd3 7a08 	vldr	s15, [r3, #32]
 800526e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005272:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005276:	4b38      	ldr	r3, [pc, #224]	; (8005358 <realMODN+0x5e0>)
 8005278:	edc3 7a03 	vstr	s15, [r3, #12]
				MODN.vel2 = MODN.y_vel*sinf(1.0472-realZrad) + MODN.x_vel*cosf(1.0472-realZrad) - MODN.w_vel*MODN.d;
 800527c:	4b36      	ldr	r3, [pc, #216]	; (8005358 <realMODN+0x5e0>)
 800527e:	ed93 8a01 	vldr	s16, [r3, #4]
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f7fb f960 	bl	8000548 <__aeabi_f2d>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	a130      	add	r1, pc, #192	; (adr r1, 8005350 <realMODN+0x5d8>)
 800528e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005292:	f7fa fff9 	bl	8000288 <__aeabi_dsub>
 8005296:	4602      	mov	r2, r0
 8005298:	460b      	mov	r3, r1
 800529a:	4610      	mov	r0, r2
 800529c:	4619      	mov	r1, r3
 800529e:	f7fb fca3 	bl	8000be8 <__aeabi_d2f>
 80052a2:	4603      	mov	r3, r0
 80052a4:	ee00 3a10 	vmov	s0, r3
 80052a8:	f018 fc4c 	bl	801db44 <sinf>
 80052ac:	eef0 7a40 	vmov.f32	s15, s0
 80052b0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80052b4:	4b28      	ldr	r3, [pc, #160]	; (8005358 <realMODN+0x5e0>)
 80052b6:	edd3 8a00 	vldr	s17, [r3]
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f7fb f944 	bl	8000548 <__aeabi_f2d>
 80052c0:	4602      	mov	r2, r0
 80052c2:	460b      	mov	r3, r1
 80052c4:	a122      	add	r1, pc, #136	; (adr r1, 8005350 <realMODN+0x5d8>)
 80052c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052ca:	f7fa ffdd 	bl	8000288 <__aeabi_dsub>
 80052ce:	4602      	mov	r2, r0
 80052d0:	460b      	mov	r3, r1
 80052d2:	4610      	mov	r0, r2
 80052d4:	4619      	mov	r1, r3
 80052d6:	f7fb fc87 	bl	8000be8 <__aeabi_d2f>
 80052da:	4603      	mov	r3, r0
 80052dc:	ee00 3a10 	vmov	s0, r3
 80052e0:	f018 fbe8 	bl	801dab4 <cosf>
 80052e4:	eef0 7a40 	vmov.f32	s15, s0
 80052e8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80052ec:	ee38 7a27 	vadd.f32	s14, s16, s15
 80052f0:	4b19      	ldr	r3, [pc, #100]	; (8005358 <realMODN+0x5e0>)
 80052f2:	edd3 6a02 	vldr	s13, [r3, #8]
 80052f6:	4b18      	ldr	r3, [pc, #96]	; (8005358 <realMODN+0x5e0>)
 80052f8:	edd3 7a08 	vldr	s15, [r3, #32]
 80052fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005300:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005304:	4b14      	ldr	r3, [pc, #80]	; (8005358 <realMODN+0x5e0>)
 8005306:	edc3 7a04 	vstr	s15, [r3, #16]
				VESCPIDProcess(MODN.vel1, MODN.vel2, MODN.vel3, MODN.vel4);
 800530a:	4b13      	ldr	r3, [pc, #76]	; (8005358 <realMODN+0x5e0>)
 800530c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005310:	4b11      	ldr	r3, [pc, #68]	; (8005358 <realMODN+0x5e0>)
 8005312:	ed93 7a04 	vldr	s14, [r3, #16]
 8005316:	4b10      	ldr	r3, [pc, #64]	; (8005358 <realMODN+0x5e0>)
 8005318:	edd3 6a05 	vldr	s13, [r3, #20]
 800531c:	4b0e      	ldr	r3, [pc, #56]	; (8005358 <realMODN+0x5e0>)
 800531e:	ed93 6a06 	vldr	s12, [r3, #24]
 8005322:	eef0 1a46 	vmov.f32	s3, s12
 8005326:	eeb0 1a66 	vmov.f32	s2, s13
 800532a:	eef0 0a47 	vmov.f32	s1, s14
 800532e:	eeb0 0a67 	vmov.f32	s0, s15
 8005332:	f008 fc7d 	bl	800dc30 <VESCPIDProcess>
}
 8005336:	bf00      	nop
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	ecbd 8b02 	vpop	{d8}
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	f3af 8000 	nop.w
 8005348:	c985f06f 	.word	0xc985f06f
 800534c:	4000c154 	.word	0x4000c154
 8005350:	c985f06f 	.word	0xc985f06f
 8005354:	3ff0c154 	.word	0x3ff0c154
 8005358:	20006a34 	.word	0x20006a34

0800535c <setOrientationMODN>:
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
		}
	}
}
void setOrientationMODN(OrientationMODN_t orientation)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	4603      	mov	r3, r0
 8005364:	71fb      	strb	r3, [r7, #7]
	MODN.orientation = orientation;
 8005366:	79fb      	ldrb	r3, [r7, #7]
 8005368:	4a03      	ldr	r2, [pc, #12]	; (8005378 <setOrientationMODN+0x1c>)
 800536a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr
 8005378:	20006a34 	.word	0x20006a34

0800537c <setSpeedMODN>:

void setSpeedMODN(float speed){
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	ed87 0a01 	vstr	s0, [r7, #4]
	MODN.speed = speed;
 8005386:	4a0c      	ldr	r2, [pc, #48]	; (80053b8 <setSpeedMODN+0x3c>)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	61d3      	str	r3, [r2, #28]
	MODN.imuGain = speed*MODN.imuGain/MODN.radTol;
 800538c:	4b0a      	ldr	r3, [pc, #40]	; (80053b8 <setSpeedMODN+0x3c>)
 800538e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8005392:	edd7 7a01 	vldr	s15, [r7, #4]
 8005396:	ee67 6a27 	vmul.f32	s13, s14, s15
 800539a:	4b07      	ldr	r3, [pc, #28]	; (80053b8 <setSpeedMODN+0x3c>)
 800539c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80053a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053a4:	4b04      	ldr	r3, [pc, #16]	; (80053b8 <setSpeedMODN+0x3c>)
 80053a6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	20006a34 	.word	0x20006a34

080053bc <PIDSourceInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void PIDSourceInit (float *in, float *out, PID_t *pid)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
	pid->error = in;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	605a      	str	r2, [r3, #4]
	pid->out_put = out;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	609a      	str	r2, [r3, #8]
}
 80053d4:	bf00      	nop
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <PIDGainInit>:

void PIDGainInit(float ts, float sat, float ke, float ku, float kp, float ki,
									float kd, float kn, PID_t *pid)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b08a      	sub	sp, #40	; 0x28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80053ea:	edc7 0a08 	vstr	s1, [r7, #32]
 80053ee:	ed87 1a07 	vstr	s2, [r7, #28]
 80053f2:	edc7 1a06 	vstr	s3, [r7, #24]
 80053f6:	ed87 2a05 	vstr	s4, [r7, #20]
 80053fa:	edc7 2a04 	vstr	s5, [r7, #16]
 80053fe:	ed87 3a03 	vstr	s6, [r7, #12]
 8005402:	edc7 3a02 	vstr	s7, [r7, #8]
 8005406:	6078      	str	r0, [r7, #4]
	pid->K[TS] = ts;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800540c:	60da      	str	r2, [r3, #12]
	pid->K[SAT] = sat;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a3a      	ldr	r2, [r7, #32]
 8005412:	611a      	str	r2, [r3, #16]
	pid->K[KE] = ke;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	69fa      	ldr	r2, [r7, #28]
 8005418:	615a      	str	r2, [r3, #20]
	pid->K[KU] = ku;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	619a      	str	r2, [r3, #24]
	pid->K[KP] = kp;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	61da      	str	r2, [r3, #28]
	pid->K[KI] = ki;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	621a      	str	r2, [r3, #32]
	pid->K[KD] = kd;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	625a      	str	r2, [r3, #36]	; 0x24
	pid->K[KN] = kn;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	629a      	str	r2, [r3, #40]	; 0x28
	PIDCoeffCalc(pid);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f81b 	bl	8005474 <PIDCoeffCalc>
//	pid->K[D_1] = (((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) / (pid->K[KN] * pid->K[TS] + 2);
//	} else {
//		pid->pd_flag = 0;
//		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0;
//	}
}
 800543e:	bf00      	nop
 8005440:	3728      	adds	r7, #40	; 0x28
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <PIDGainSet>:

void PIDGainSet (unsigned char a, float value, PID_t *pid)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b084      	sub	sp, #16
 800544a:	af00      	add	r7, sp, #0
 800544c:	4603      	mov	r3, r0
 800544e:	ed87 0a02 	vstr	s0, [r7, #8]
 8005452:	6079      	str	r1, [r7, #4]
 8005454:	73fb      	strb	r3, [r7, #15]
	pid->K[a] = value;
 8005456:	7bfb      	ldrb	r3, [r7, #15]
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	3302      	adds	r3, #2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	3304      	adds	r3, #4
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	601a      	str	r2, [r3, #0]
	PIDCoeffCalc(pid);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f804 	bl	8005474 <PIDCoeffCalc>
}
 800546c:	bf00      	nop
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <PIDCoeffCalc>:

void PIDCoeffCalc (PID_t *pid)
{
 8005474:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005478:	b082      	sub	sp, #8
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
	if (pid->K[KI] != 0){
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	edd3 7a08 	vldr	s15, [r3, #32]
 8005484:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800548c:	d013      	beq.n	80054b6 <PIDCoeffCalc+0x42>
		pid->K[B_0] = (pid->K[TS] * pid->K[KI]) * 0.5;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	ed93 7a03 	vldr	s14, [r3, #12]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	edd3 7a08 	vldr	s15, [r3, #32]
 800549a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800549e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80054a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		pid->K[B_1] = pid->K[B_0];
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	631a      	str	r2, [r3, #48]	; 0x30
 80054b4:	e007      	b.n	80054c6 <PIDCoeffCalc+0x52>
	} else {
		pid->K[B_0] = pid->K[B_1] = 0;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f04f 0200 	mov.w	r2, #0
 80054bc:	631a      	str	r2, [r3, #48]	; 0x30
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	edd3 7a07 	vldr	s15, [r3, #28]
 80054cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80054d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054d4:	d108      	bne.n	80054e8 <PIDCoeffCalc+0x74>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80054dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80054e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054e4:	f000 80ef 	beq.w	80056c6 <PIDCoeffCalc+0x252>
	pid->K[C_1] = -((pid->K[TS] * pid->K[KN] - 2.0) / (pid->K[TS] * pid->K[KN] + 2.0));
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	ed93 7a03 	vldr	s14, [r3, #12]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80054f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054f8:	ee17 0a90 	vmov	r0, s15
 80054fc:	f7fb f824 	bl	8000548 <__aeabi_f2d>
 8005500:	f04f 0200 	mov.w	r2, #0
 8005504:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005508:	f7fa febe 	bl	8000288 <__aeabi_dsub>
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	4614      	mov	r4, r2
 8005512:	461d      	mov	r5, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	ed93 7a03 	vldr	s14, [r3, #12]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005524:	ee17 0a90 	vmov	r0, s15
 8005528:	f7fb f80e 	bl	8000548 <__aeabi_f2d>
 800552c:	f04f 0200 	mov.w	r2, #0
 8005530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005534:	f7fa feaa 	bl	800028c <__adddf3>
 8005538:	4602      	mov	r2, r0
 800553a:	460b      	mov	r3, r1
 800553c:	4620      	mov	r0, r4
 800553e:	4629      	mov	r1, r5
 8005540:	f7fb f984 	bl	800084c <__aeabi_ddiv>
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	4610      	mov	r0, r2
 800554a:	4619      	mov	r1, r3
 800554c:	f7fb fb4c 	bl	8000be8 <__aeabi_d2f>
 8005550:	4603      	mov	r3, r0
 8005552:	ee07 3a90 	vmov	s15, r3
 8005556:	eef1 7a67 	vneg.f32	s15, s15
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid->K[D_0] = (pid->K[KP] + ((2.0 * pid->K[KD] * pid->K[KN]) / (pid->K[KN] * pid->K[TS] + 2.0)));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	69db      	ldr	r3, [r3, #28]
 8005564:	4618      	mov	r0, r3
 8005566:	f7fa ffef 	bl	8000548 <__aeabi_f2d>
 800556a:	4604      	mov	r4, r0
 800556c:	460d      	mov	r5, r1
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	4618      	mov	r0, r3
 8005574:	f7fa ffe8 	bl	8000548 <__aeabi_f2d>
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	f7fa fe86 	bl	800028c <__adddf3>
 8005580:	4602      	mov	r2, r0
 8005582:	460b      	mov	r3, r1
 8005584:	4690      	mov	r8, r2
 8005586:	4699      	mov	r9, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558c:	4618      	mov	r0, r3
 800558e:	f7fa ffdb 	bl	8000548 <__aeabi_f2d>
 8005592:	4602      	mov	r2, r0
 8005594:	460b      	mov	r3, r1
 8005596:	4640      	mov	r0, r8
 8005598:	4649      	mov	r1, r9
 800559a:	f7fb f82d 	bl	80005f8 <__aeabi_dmul>
 800559e:	4602      	mov	r2, r0
 80055a0:	460b      	mov	r3, r1
 80055a2:	4690      	mov	r8, r2
 80055a4:	4699      	mov	r9, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80055b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055b6:	ee17 0a90 	vmov	r0, s15
 80055ba:	f7fa ffc5 	bl	8000548 <__aeabi_f2d>
 80055be:	f04f 0200 	mov.w	r2, #0
 80055c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055c6:	f7fa fe61 	bl	800028c <__adddf3>
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	4640      	mov	r0, r8
 80055d0:	4649      	mov	r1, r9
 80055d2:	f7fb f93b 	bl	800084c <__aeabi_ddiv>
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	4620      	mov	r0, r4
 80055dc:	4629      	mov	r1, r5
 80055de:	f7fa fe55 	bl	800028c <__adddf3>
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	4610      	mov	r0, r2
 80055e8:	4619      	mov	r1, r3
 80055ea:	f7fb fafd 	bl	8000be8 <__aeabi_d2f>
 80055ee:	4602      	mov	r2, r0
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	639a      	str	r2, [r3, #56]	; 0x38
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8005600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005604:	ee17 0a90 	vmov	r0, s15
 8005608:	f7fa ff9e 	bl	8000548 <__aeabi_f2d>
 800560c:	f04f 0200 	mov.w	r2, #0
 8005610:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005614:	f7fa fe38 	bl	8000288 <__aeabi_dsub>
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	4614      	mov	r4, r2
 800561e:	461d      	mov	r5, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	69db      	ldr	r3, [r3, #28]
 8005624:	4618      	mov	r0, r3
 8005626:	f7fa ff8f 	bl	8000548 <__aeabi_f2d>
 800562a:	4602      	mov	r2, r0
 800562c:	460b      	mov	r3, r1
 800562e:	4620      	mov	r0, r4
 8005630:	4629      	mov	r1, r5
 8005632:	f7fa ffe1 	bl	80005f8 <__aeabi_dmul>
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	4614      	mov	r4, r2
 800563c:	461d      	mov	r5, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	4618      	mov	r0, r3
 8005644:	f7fa ff80 	bl	8000548 <__aeabi_f2d>
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	f7fa fe1e 	bl	800028c <__adddf3>
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	4690      	mov	r8, r2
 8005656:	4699      	mov	r9, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565c:	4618      	mov	r0, r3
 800565e:	f7fa ff73 	bl	8000548 <__aeabi_f2d>
 8005662:	4602      	mov	r2, r0
 8005664:	460b      	mov	r3, r1
 8005666:	4640      	mov	r0, r8
 8005668:	4649      	mov	r1, r9
 800566a:	f7fa ffc5 	bl	80005f8 <__aeabi_dmul>
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
 8005672:	4620      	mov	r0, r4
 8005674:	4629      	mov	r1, r5
 8005676:	f7fa fe07 	bl	8000288 <__aeabi_dsub>
 800567a:	4602      	mov	r2, r0
 800567c:	460b      	mov	r3, r1
 800567e:	4614      	mov	r4, r2
 8005680:	461d      	mov	r5, r3
					(pid->K[KN] * pid->K[TS] + 2.0));
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	edd3 7a03 	vldr	s15, [r3, #12]
 800568e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005692:	ee17 0a90 	vmov	r0, s15
 8005696:	f7fa ff57 	bl	8000548 <__aeabi_f2d>
 800569a:	f04f 0200 	mov.w	r2, #0
 800569e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056a2:	f7fa fdf3 	bl	800028c <__adddf3>
 80056a6:	4602      	mov	r2, r0
 80056a8:	460b      	mov	r3, r1
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 80056aa:	4620      	mov	r0, r4
 80056ac:	4629      	mov	r1, r5
 80056ae:	f7fb f8cd 	bl	800084c <__aeabi_ddiv>
 80056b2:	4602      	mov	r2, r0
 80056b4:	460b      	mov	r3, r1
 80056b6:	4610      	mov	r0, r2
 80056b8:	4619      	mov	r1, r3
 80056ba:	f7fb fa95 	bl	8000be8 <__aeabi_d2f>
 80056be:	4602      	mov	r2, r0
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80056c4:	e00c      	b.n	80056e0 <PIDCoeffCalc+0x26c>
	} else {
		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0.0;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f04f 0200 	mov.w	r2, #0
 80056cc:	63da      	str	r2, [r3, #60]	; 0x3c
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	639a      	str	r2, [r3, #56]	; 0x38
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80056de:	bf00      	nop
 80056e0:	bf00      	nop
 80056e2:	3708      	adds	r7, #8
 80056e4:	46bd      	mov	sp, r7
 80056e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080056ea <PIDDelayInit>:

void PIDDelayInit (PID_t *pid)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b083      	sub	sp, #12
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
//	unsigned char i;
//	for(i = 0; i < 2; i++){
//		pid->i_delay[i] = 0;
//		pid->d_delay[i] = 0;
//	}
	pid->i_delay[0] = 0.0;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f04f 0200 	mov.w	r2, #0
 80056f8:	641a      	str	r2, [r3, #64]	; 0x40
	pid->i_delay[1] = 0.0;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f04f 0200 	mov.w	r2, #0
 8005700:	645a      	str	r2, [r3, #68]	; 0x44
	pid->d_delay[0] = 0.0;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f04f 0200 	mov.w	r2, #0
 8005708:	649a      	str	r2, [r3, #72]	; 0x48
	pid->d_delay[1] = 0.0;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f04f 0200 	mov.w	r2, #0
 8005710:	64da      	str	r2, [r3, #76]	; 0x4c
	pid->s_delay = 0.0;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f04f 0200 	mov.w	r2, #0
 8005718:	651a      	str	r2, [r3, #80]	; 0x50
}
 800571a:	bf00      	nop
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <PID>:
{
	return !pid->s_flag;	/* 1 is not saturated, 0 is saturated */
}

void PID (PID_t *pid)
{
 8005726:	b480      	push	{r7}
 8005728:	b087      	sub	sp, #28
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
	/* Error ******************************************************************/
	float input_buffer, error;

	input_buffer = *pid->error;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	613b      	str	r3, [r7, #16]
	error = input_buffer * pid->K[KE];
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	edd3 7a05 	vldr	s15, [r3, #20]
 800573c:	ed97 7a04 	vldr	s14, [r7, #16]
 8005740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005744:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Reset previous sum *****************************************************/
	pid->s_delay = 0;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f04f 0200 	mov.w	r2, #0
 800574e:	651a      	str	r2, [r3, #80]	; 0x50

	/* I algorithm ************************************************************/

	if (pid->K[KI] != 0){
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	edd3 7a08 	vldr	s15, [r3, #32]
 8005756:	eef5 7a40 	vcmp.f32	s15, #0.0
 800575a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800575e:	d033      	beq.n	80057c8 <PID+0xa2>
		if (pid->s_flag){     //flag only, so 0 or 1...
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <PID+0x5e>
			pid->i_delay[1] = error + pid->i_delay[0];      //it is not saturated, so it will continue add error
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8005774:	edd7 7a03 	vldr	s15, [r7, #12]
 8005778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 8005782:	e003      	b.n	800578c <PID+0x66>
		} else {
			pid->i_delay[1] = pid->i_delay[0];				//it is saturated already, so all pid->i_delay will be constant
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800579e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057a2:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ (pid->K[B_1] * pid->i_delay[0]);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80057b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057b6:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		pid->i_delay[0] = pid->i_delay[1];
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	641a      	str	r2, [r3, #64]	; 0x40

// since final output is addition of 2 outputs, so pid->s_delay will combine with the equation in document..

	/* PD algorithm ***********************************************************/

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){       				// i has change behind KP to KD..
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	edd3 7a07 	vldr	s15, [r3, #28]
 80057ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80057d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057d6:	d107      	bne.n	80057e8 <PID+0xc2>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80057de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80057e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057e6:	d02c      	beq.n	8005842 <PID+0x11c>
		pid->d_delay[1] = error + pid->K[C_1] * pid->d_delay[0];  		//pid->d_delay[0] is old value,pid->d_delay[1]is new value,so both are different values
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80057f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80057f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80057fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8005818:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800581c:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ pid->K[D_1] * pid->d_delay[0];
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800582c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005830:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		pid->d_delay[0] = pid->d_delay[1];
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	649a      	str	r2, [r3, #72]	; 0x48
	}

	/* Saturation element *****************************************************/
	float output_buffer, output;

	output_buffer = pid->s_delay;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005846:	60bb      	str	r3, [r7, #8]
	if (output_buffer > pid->K[SAT]){
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	edd3 7a04 	vldr	s15, [r3, #16]
 800584e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005852:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800585a:	dd0f      	ble.n	800587c <PID+0x156>
		output = (pid->K[SAT] * pid->K[KU]);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	ed93 7a04 	vldr	s14, [r3, #16]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	edd3 7a06 	vldr	s15, [r3, #24]
 8005868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800586c:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	7813      	ldrb	r3, [r2, #0]
 8005874:	f36f 0300 	bfc	r3, #0, #1
 8005878:	7013      	strb	r3, [r2, #0]
 800587a:	e02b      	b.n	80058d4 <PID+0x1ae>
	}else if (output_buffer < -(pid->K[SAT])){
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	edd3 7a04 	vldr	s15, [r3, #16]
 8005882:	eef1 7a67 	vneg.f32	s15, s15
 8005886:	ed97 7a02 	vldr	s14, [r7, #8]
 800588a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800588e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005892:	d511      	bpl.n	80058b8 <PID+0x192>
		output = -(pid->K[SAT] * pid->K[KU]);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	ed93 7a04 	vldr	s14, [r3, #16]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	edd3 7a06 	vldr	s15, [r3, #24]
 80058a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a4:	eef1 7a67 	vneg.f32	s15, s15
 80058a8:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	7813      	ldrb	r3, [r2, #0]
 80058b0:	f36f 0300 	bfc	r3, #0, #1
 80058b4:	7013      	strb	r3, [r2, #0]
 80058b6:	e00d      	b.n	80058d4 <PID+0x1ae>
	}else {
		output = (output_buffer * pid->K[KU]);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80058be:	ed97 7a02 	vldr	s14, [r7, #8]
 80058c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058c6:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 1;							/* Not saturated */
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	7813      	ldrb	r3, [r2, #0]
 80058ce:	f043 0301 	orr.w	r3, r3, #1
 80058d2:	7013      	strb	r3, [r2, #0]
	}

	/* Output *****************************************************************/
	*pid->out_put = output;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	601a      	str	r2, [r3, #0]
}
 80058dc:	bf00      	nop
 80058de:	371c      	adds	r7, #28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <PPInit>:
#include "../adapter.h"

void PPInit(uint8_t base,float *qeix, float *qeiy, float*imu,PathPlan_t *pp)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60b9      	str	r1, [r7, #8]
 80058f0:	607a      	str	r2, [r7, #4]
 80058f2:	603b      	str	r3, [r7, #0]
 80058f4:	4603      	mov	r3, r0
 80058f6:	73fb      	strb	r3, [r7, #15]
	pp->base_shape=base;
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	7bfa      	ldrb	r2, [r7, #15]
 80058fc:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
	pp->qeix = qeix;
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	601a      	str	r2, [r3, #0]
	pp->qeiy = qeiy;
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	605a      	str	r2, [r3, #4]
	pp->yaw = imu;
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	609a      	str	r2, [r3, #8]
	pp->point_start=1;
 8005912:	69ba      	ldr	r2, [r7, #24]
 8005914:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8005918:	f043 0302 	orr.w	r3, r3, #2
 800591c:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538

	PIDSourceInit(&(pp->error_x), &(pp->outx), &(pp->x));
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	f503 702c 	add.w	r0, r3, #688	; 0x2b0
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	f503 712f 	add.w	r1, r3, #700	; 0x2bc
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005932:	461a      	mov	r2, r3
 8005934:	f7ff fd42 	bl	80053bc <PIDSourceInit>
	PIDGainInit(0.005, 1.0, 1.0, 1.0, 1.0, 0.0, 0.4, 30.0, &(pp->x));
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800593e:	4618      	mov	r0, r3
 8005940:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8005944:	ed9f 3a46 	vldr	s6, [pc, #280]	; 8005a60 <PPInit+0x178>
 8005948:	eddf 2a46 	vldr	s5, [pc, #280]	; 8005a64 <PPInit+0x17c>
 800594c:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8005950:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8005954:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005958:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800595c:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8005a68 <PPInit+0x180>
 8005960:	f7ff fd3e 	bl	80053e0 <PIDGainInit>
	PIDDelayInit(&(pp->x));
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800596a:	4618      	mov	r0, r3
 800596c:	f7ff febd 	bl	80056ea <PIDDelayInit>

	PIDSourceInit(&(pp->error_y), &(pp->outy), &(pp->y));
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005982:	461a      	mov	r2, r3
 8005984:	f7ff fd1a 	bl	80053bc <PIDSourceInit>
	PIDGainInit(0.005, 1.0, 1.0, 1.0, 1.0, 0.0, 0.4, 30.0, &(pp->y));
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800598e:	4618      	mov	r0, r3
 8005990:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8005994:	ed9f 3a32 	vldr	s6, [pc, #200]	; 8005a60 <PPInit+0x178>
 8005998:	eddf 2a32 	vldr	s5, [pc, #200]	; 8005a64 <PPInit+0x17c>
 800599c:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 80059a0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80059a4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80059a8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80059ac:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8005a68 <PPInit+0x180>
 80059b0:	f7ff fd16 	bl	80053e0 <PIDGainInit>
	PIDDelayInit(&(pp->y));
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7ff fe95 	bl	80056ea <PIDDelayInit>

	PIDSourceInit(&(pp->error_z), &(pp->outz), &(pp->z));
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	f503 702e 	add.w	r0, r3, #696	; 0x2b8
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	f503 7131 	add.w	r1, r3, #708	; 0x2c4
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80059d2:	461a      	mov	r2, r3
 80059d4:	f7ff fcf2 	bl	80053bc <PIDSourceInit>
	PIDGainInit(0.005, 1.0, (1.0 / 30.0), 0.5, 5.0, 0.2, 0.2, 30.0, &(pp->z));
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80059de:	4618      	mov	r0, r3
 80059e0:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80059e4:	ed9f 3a21 	vldr	s6, [pc, #132]	; 8005a6c <PPInit+0x184>
 80059e8:	eddf 2a20 	vldr	s5, [pc, #128]	; 8005a6c <PPInit+0x184>
 80059ec:	eeb1 2a04 	vmov.f32	s4, #20	; 0x40a00000  5.0
 80059f0:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 80059f4:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8005a70 <PPInit+0x188>
 80059f8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80059fc:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8005a68 <PPInit+0x180>
 8005a00:	f7ff fcee 	bl	80053e0 <PIDGainInit>
	PIDDelayInit(&(pp->z));
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7ff fe6d 	bl	80056ea <PIDDelayInit>

	pp->tol_xy=0.20;
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	4a18      	ldr	r2, [pc, #96]	; (8005a74 <PPInit+0x18c>)
 8005a14:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	pp->tol_z=2.0;
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005a1e:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc

	pp->tol_xy_crv= 0.6;
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	4a14      	ldr	r2, [pc, #80]	; (8005a78 <PPInit+0x190>)
 8005a26:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

	pp->f_tol_xy=0.06;
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	4a13      	ldr	r2, [pc, #76]	; (8005a7c <PPInit+0x194>)
 8005a2e:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
	pp->f_tol_z=1.0;
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005a38:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	pp->yaw_offset=*(pp->yaw);
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	625a      	str	r2, [r3, #36]	; 0x24
	pp->prev_real_z = 0;
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	f04f 0200 	mov.w	r2, #0
 8005a4c:	615a      	str	r2, [r3, #20]
	pp->real_z = 0;
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	f04f 0200 	mov.w	r2, #0
 8005a54:	611a      	str	r2, [r3, #16]
}
 8005a56:	bf00      	nop
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	3ecccccd 	.word	0x3ecccccd
 8005a64:	00000000 	.word	0x00000000
 8005a68:	3ba3d70a 	.word	0x3ba3d70a
 8005a6c:	3e4ccccd 	.word	0x3e4ccccd
 8005a70:	3d088889 	.word	0x3d088889
 8005a74:	3e4ccccd 	.word	0x3e4ccccd
 8005a78:	3f19999a 	.word	0x3f19999a
 8005a7c:	3d75c28f 	.word	0x3d75c28f

08005a80 <PP_PIDPathSet>:

void PP_PIDPathSet(float kp, float ki, float kd, PathPlan_t *pp)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	ed87 0a03 	vstr	s0, [r7, #12]
 8005a8a:	edc7 0a02 	vstr	s1, [r7, #8]
 8005a8e:	ed87 1a01 	vstr	s2, [r7, #4]
 8005a92:	6038      	str	r0, [r7, #0]
	pp->kp[0]=kp;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	pp->ki[0]=ki;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	pp->kd[0]=kd;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c

	PIDGainSet(KP,kp,&(pp->x));
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	ed97 0a03 	vldr	s0, [r7, #12]
 8005ab8:	2004      	movs	r0, #4
 8005aba:	f7ff fcc4 	bl	8005446 <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->x));
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	ed97 0a02 	vldr	s0, [r7, #8]
 8005aca:	2005      	movs	r0, #5
 8005acc:	f7ff fcbb 	bl	8005446 <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->x));
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	ed97 0a01 	vldr	s0, [r7, #4]
 8005adc:	2006      	movs	r0, #6
 8005ade:	f7ff fcb2 	bl	8005446 <PIDGainSet>

	PIDGainSet(KP,kp,&(pp->y));
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005ae8:	4619      	mov	r1, r3
 8005aea:	ed97 0a03 	vldr	s0, [r7, #12]
 8005aee:	2004      	movs	r0, #4
 8005af0:	f7ff fca9 	bl	8005446 <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->y));
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005afa:	4619      	mov	r1, r3
 8005afc:	ed97 0a02 	vldr	s0, [r7, #8]
 8005b00:	2005      	movs	r0, #5
 8005b02:	f7ff fca0 	bl	8005446 <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->y));
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	ed97 0a01 	vldr	s0, [r7, #4]
 8005b12:	2006      	movs	r0, #6
 8005b14:	f7ff fc97 	bl	8005446 <PIDGainSet>
}
 8005b18:	bf00      	nop
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <PP_PIDZSet>:

void PP_PIDZSet(float kp, float ki, float kd, float ku, PathPlan_t *pp){
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	ed87 0a05 	vstr	s0, [r7, #20]
 8005b2a:	edc7 0a04 	vstr	s1, [r7, #16]
 8005b2e:	ed87 1a03 	vstr	s2, [r7, #12]
 8005b32:	edc7 1a02 	vstr	s3, [r7, #8]
 8005b36:	6078      	str	r0, [r7, #4]

	PIDGainSet(KP,kp,&(pp->z));
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005b3e:	4619      	mov	r1, r3
 8005b40:	ed97 0a05 	vldr	s0, [r7, #20]
 8005b44:	2004      	movs	r0, #4
 8005b46:	f7ff fc7e 	bl	8005446 <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->z));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005b50:	4619      	mov	r1, r3
 8005b52:	ed97 0a04 	vldr	s0, [r7, #16]
 8005b56:	2005      	movs	r0, #5
 8005b58:	f7ff fc75 	bl	8005446 <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->z));
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005b62:	4619      	mov	r1, r3
 8005b64:	ed97 0a03 	vldr	s0, [r7, #12]
 8005b68:	2006      	movs	r0, #6
 8005b6a:	f7ff fc6c 	bl	8005446 <PIDGainSet>
	PIDGainSet(KU,ku,&(pp->z));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005b74:	4619      	mov	r1, r3
 8005b76:	ed97 0a02 	vldr	s0, [r7, #8]
 8005b7a:	2003      	movs	r0, #3
 8005b7c:	f7ff fc63 	bl	8005446 <PIDGainSet>
	pp->pp_orgz_kp = kp;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	601a      	str	r2, [r3, #0]
}
 8005b8a:	bf00      	nop
 8005b8c:	3718      	adds	r7, #24
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <PP_PIDEndSet>:

void PP_PIDEndSet(float kp, float ki, float kd, PathPlan_t *pp)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b085      	sub	sp, #20
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	ed87 0a03 	vstr	s0, [r7, #12]
 8005b9c:	edc7 0a02 	vstr	s1, [r7, #8]
 8005ba0:	ed87 1a01 	vstr	s2, [r7, #4]
 8005ba4:	6038      	str	r0, [r7, #0]
	pp->kp[1]=kp;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	pp->ki[1]=ki;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
	pp->kd[1]=kd;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
}
 8005bbe:	bf00      	nop
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <PP_SetCrv_Points>:
	//	pp->yaw_offset=*(pp->yaw);
	pp->prev_yaw=*(pp->yaw);
}

void PP_SetCrv_Points (int z,PathPlan_t *pp)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b083      	sub	sp, #12
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
 8005bd2:	6039      	str	r1, [r7, #0]
	pp->pp_no_crv_pts = z;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <PathPlan>:



void PathPlan (PathPlan_t *pp)
{
 8005be8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005bec:	ed2d 8b02 	vpush	{d8}
 8005bf0:	b084      	sub	sp, #16
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
	// Called every 5ms
	if(pp->point_start) // The start of program
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8005bfc:	f003 0302 	and.w	r3, r3, #2
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f000 815c 	beq.w	8005ec0 <PathPlan+0x2d8>
	{
		pp->pos_x=*(pp->qeix);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	62da      	str	r2, [r3, #44]	; 0x2c
		pp->pos_y=*(pp->qeiy);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	63da      	str	r2, [r3, #60]	; 0x3c

		if(*(pp->yaw) < 50.0){
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	edd3 7a00 	vldr	s15, [r3]
 8005c24:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005c60 <PathPlan+0x78>
 8005c28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c30:	d518      	bpl.n	8005c64 <PathPlan+0x7c>
			if(pp->prev_yaw > 330.0){
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	edd3 7a03 	vldr	s15, [r3, #12]
 8005c38:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005c5c <PathPlan+0x74>
 8005c3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c44:	dd2d      	ble.n	8005ca2 <PathPlan+0xba>
				pp->yaw_constant++;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005c4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 8005c5a:	e022      	b.n	8005ca2 <PathPlan+0xba>
 8005c5c:	43a50000 	.word	0x43a50000
 8005c60:	42480000 	.word	0x42480000
			}
		}else if(*(pp->yaw) > 330.0){
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	edd3 7a00 	vldr	s15, [r3]
 8005c6c:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8005c5c <PathPlan+0x74>
 8005c70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c78:	dd13      	ble.n	8005ca2 <PathPlan+0xba>
			if(pp->prev_yaw < 50.0){
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005c80:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8005c60 <PathPlan+0x78>
 8005c84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c8c:	d509      	bpl.n	8005ca2 <PathPlan+0xba>
				pp->yaw_constant--;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005c94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			}
		}

		pp->prev_yaw = *(pp->yaw);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	60da      	str	r2, [r3, #12]
		pp->real_z = *(pp->yaw) + (pp->yaw_constant)*360.0 - pp->yaw_offset+pp->setz;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fa fc48 	bl	8000548 <__aeabi_f2d>
 8005cb8:	4604      	mov	r4, r0
 8005cba:	460d      	mov	r5, r1
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7fa fc41 	bl	8000548 <__aeabi_f2d>
 8005cc6:	f04f 0200 	mov.w	r2, #0
 8005cca:	4b7b      	ldr	r3, [pc, #492]	; (8005eb8 <PathPlan+0x2d0>)
 8005ccc:	f7fa fc94 	bl	80005f8 <__aeabi_dmul>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	4629      	mov	r1, r5
 8005cd8:	f7fa fad8 	bl	800028c <__adddf3>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4614      	mov	r4, r2
 8005ce2:	461d      	mov	r5, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fa fc2d 	bl	8000548 <__aeabi_f2d>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	4629      	mov	r1, r5
 8005cf6:	f7fa fac7 	bl	8000288 <__aeabi_dsub>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	4614      	mov	r4, r2
 8005d00:	461d      	mov	r5, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fa fc1e 	bl	8000548 <__aeabi_f2d>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	460b      	mov	r3, r1
 8005d10:	4620      	mov	r0, r4
 8005d12:	4629      	mov	r1, r5
 8005d14:	f7fa faba 	bl	800028c <__adddf3>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	4619      	mov	r1, r3
 8005d20:	f7fa ff62 	bl	8000be8 <__aeabi_d2f>
 8005d24:	4602      	mov	r2, r0
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	611a      	str	r2, [r3, #16]
		pp->real_z_rad = (pp->real_z / 180.0) * M_PI;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fa fc0a 	bl	8000548 <__aeabi_f2d>
 8005d34:	f04f 0200 	mov.w	r2, #0
 8005d38:	4b60      	ldr	r3, [pc, #384]	; (8005ebc <PathPlan+0x2d4>)
 8005d3a:	f7fa fd87 	bl	800084c <__aeabi_ddiv>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	460b      	mov	r3, r1
 8005d42:	4610      	mov	r0, r2
 8005d44:	4619      	mov	r1, r3
 8005d46:	a358      	add	r3, pc, #352	; (adr r3, 8005ea8 <PathPlan+0x2c0>)
 8005d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4c:	f7fa fc54 	bl	80005f8 <__aeabi_dmul>
 8005d50:	4602      	mov	r2, r0
 8005d52:	460b      	mov	r3, r1
 8005d54:	4610      	mov	r0, r2
 8005d56:	4619      	mov	r1, r3
 8005d58:	f7fa ff46 	bl	8000be8 <__aeabi_d2f>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	619a      	str	r2, [r3, #24]

		pp->del_pos_x =  (pp->pos_x - pp->prev_x) * cosf(pp->real_z_rad) +
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005d6e:	ee37 8a67 	vsub.f32	s16, s14, s15
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	edd3 7a06 	vldr	s15, [r3, #24]
 8005d78:	eeb0 0a67 	vmov.f32	s0, s15
 8005d7c:	f017 fe9a 	bl	801dab4 <cosf>
 8005d80:	eef0 7a40 	vmov.f32	s15, s0
 8005d84:	ee28 8a27 	vmul.f32	s16, s16, s15
				(pp->pos_y - pp->prev_y) * sinf(pp->real_z_rad);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005d94:	ee77 8a67 	vsub.f32	s17, s14, s15
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	edd3 7a06 	vldr	s15, [r3, #24]
 8005d9e:	eeb0 0a67 	vmov.f32	s0, s15
 8005da2:	f017 fecf 	bl	801db44 <sinf>
 8005da6:	eef0 7a40 	vmov.f32	s15, s0
 8005daa:	ee68 7aa7 	vmul.f32	s15, s17, s15
		pp->del_pos_x =  (pp->pos_x - pp->prev_x) * cosf(pp->real_z_rad) +
 8005dae:	ee78 7a27 	vadd.f32	s15, s16, s15
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		pp->del_pos_y = -(pp->pos_x - pp->prev_x) * sinf(pp->real_z_rad) +
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005dc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dc8:	eeb1 8a67 	vneg.f32	s16, s15
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	edd3 7a06 	vldr	s15, [r3, #24]
 8005dd2:	eeb0 0a67 	vmov.f32	s0, s15
 8005dd6:	f017 feb5 	bl	801db44 <sinf>
 8005dda:	eef0 7a40 	vmov.f32	s15, s0
 8005dde:	ee28 8a27 	vmul.f32	s16, s16, s15
				(pp->pos_y - pp->prev_y) * cosf(pp->real_z_rad);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005dee:	ee77 8a67 	vsub.f32	s17, s14, s15
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	edd3 7a06 	vldr	s15, [r3, #24]
 8005df8:	eeb0 0a67 	vmov.f32	s0, s15
 8005dfc:	f017 fe5a 	bl	801dab4 <cosf>
 8005e00:	eef0 7a40 	vmov.f32	s15, s0
 8005e04:	ee68 7aa7 	vmul.f32	s15, s17, s15
		pp->del_pos_y = -(pp->pos_x - pp->prev_x) * sinf(pp->real_z_rad) +
 8005e08:	ee78 7a27 	vadd.f32	s15, s16, s15
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

		pp->real_x = pp->real_x + pp->del_pos_x;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8005e1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		pp->real_y = pp->real_y + pp->del_pos_y;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8005e34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

		pp->prev_x = pp->pos_x;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	631a      	str	r2, [r3, #48]	; 0x30
		pp->prev_y = pp->pos_y;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	641a      	str	r2, [r3, #64]	; 0x40

		pp->fWVel = (pp->real_z_rad - pp->prev_real_z_rad) / 0.005;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	ed93 7a06 	vldr	s14, [r3, #24]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	edd3 7a07 	vldr	s15, [r3, #28]
 8005e5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e5e:	ee17 0a90 	vmov	r0, s15
 8005e62:	f7fa fb71 	bl	8000548 <__aeabi_f2d>
 8005e66:	a312      	add	r3, pc, #72	; (adr r3, 8005eb0 <PathPlan+0x2c8>)
 8005e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6c:	f7fa fcee 	bl	800084c <__aeabi_ddiv>
 8005e70:	4602      	mov	r2, r0
 8005e72:	460b      	mov	r3, r1
 8005e74:	4610      	mov	r0, r2
 8005e76:	4619      	mov	r1, r3
 8005e78:	f7fa feb6 	bl	8000be8 <__aeabi_d2f>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8005e84:	601a      	str	r2, [r3, #0]

		pp->prev_real_x = pp->real_x;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	639a      	str	r2, [r3, #56]	; 0x38
		pp->prev_real_y = pp->real_y;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	649a      	str	r2, [r3, #72]	; 0x48
		pp->prev_real_z= pp->real_z;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	691a      	ldr	r2, [r3, #16]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	615a      	str	r2, [r3, #20]
		pp->prev_real_z_rad = pp->real_z_rad;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	699a      	ldr	r2, [r3, #24]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	61da      	str	r2, [r3, #28]
 8005ea6:	e00b      	b.n	8005ec0 <PathPlan+0x2d8>
 8005ea8:	54442d18 	.word	0x54442d18
 8005eac:	400921fb 	.word	0x400921fb
 8005eb0:	47ae147b 	.word	0x47ae147b
 8005eb4:	3f747ae1 	.word	0x3f747ae1
 8005eb8:	40768000 	.word	0x40768000
 8005ebc:	40668000 	.word	0x40668000
	}


	if(pp->point_start && pp->pp_start){ // If path plan started
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f002 866e 	beq.w	8008bae <PathPlan+0x2fc6>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f002 8665 	beq.w	8008bae <PathPlan+0x2fc6>

		if(pp->pp_crv_radius[pp->point_count]){
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	edd3 7a00 	vldr	s15, [r3]
 8005efa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f02:	f001 838d 	beq.w	8007620 <PathPlan+0x1a38>


			if(!pp->pp_crv_calc){
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8d3 3528 	ldr.w	r3, [r3, #1320]	; 0x528
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f040 8208 	bne.w	8006322 <PathPlan+0x73a>
				pp->pp_rad_ptx = ((pp->target_x[pp->point_count] - pp->real_x)/(float)2.0) + (pp->pp_crv_radius[pp->point_count] * sinf(atan2f(pp->target_y[pp->point_count] - pp->real_y, pp->target_x[pp->point_count] - pp->real_x)));
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	331a      	adds	r3, #26
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	ed93 7a00 	vldr	s14, [r3]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005f2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f2e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005f32:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4413      	add	r3, r2
 8005f46:	3304      	adds	r3, #4
 8005f48:	edd3 8a00 	vldr	s17, [r3]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	3328      	adds	r3, #40	; 0x28
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	ed93 7a00 	vldr	s14, [r3]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005f66:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	331a      	adds	r3, #26
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4413      	add	r3, r2
 8005f78:	ed93 7a00 	vldr	s14, [r3]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f86:	eef0 0a67 	vmov.f32	s1, s15
 8005f8a:	eeb0 0a66 	vmov.f32	s0, s13
 8005f8e:	f017 fefd 	bl	801dd8c <atan2f>
 8005f92:	eef0 7a40 	vmov.f32	s15, s0
 8005f96:	eeb0 0a67 	vmov.f32	s0, s15
 8005f9a:	f017 fdd3 	bl	801db44 <sinf>
 8005f9e:	eef0 7a40 	vmov.f32	s15, s0
 8005fa2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8005fa6:	ee78 7a27 	vadd.f32	s15, s16, s15
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 8005fb0:	edc3 7a00 	vstr	s15, [r3]
				pp->pp_rad_pty = ((pp->target_y[pp->point_count] - pp->real_y)/(float)2.0) - (pp->pp_crv_radius[pp->point_count] * cosf(atan2f(pp->target_y[pp->point_count] - pp->real_y, pp->target_x[pp->point_count] - pp->real_x)));
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	3328      	adds	r3, #40	; 0x28
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	ed93 7a00 	vldr	s14, [r3]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005fce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fd2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005fd6:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	3304      	adds	r3, #4
 8005fec:	edd3 8a00 	vldr	s17, [r3]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	3328      	adds	r3, #40	; 0x28
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	3304      	adds	r3, #4
 8006000:	ed93 7a00 	vldr	s14, [r3]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800600a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	331a      	adds	r3, #26
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	ed93 7a00 	vldr	s14, [r3]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006026:	ee77 7a67 	vsub.f32	s15, s14, s15
 800602a:	eef0 0a67 	vmov.f32	s1, s15
 800602e:	eeb0 0a66 	vmov.f32	s0, s13
 8006032:	f017 feab 	bl	801dd8c <atan2f>
 8006036:	eef0 7a40 	vmov.f32	s15, s0
 800603a:	eeb0 0a67 	vmov.f32	s0, s15
 800603e:	f017 fd39 	bl	801dab4 <cosf>
 8006042:	eef0 7a40 	vmov.f32	s15, s0
 8006046:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800604a:	ee78 7a67 	vsub.f32	s15, s16, s15
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8006054:	edc3 7a00 	vstr	s15, [r3]
				pp->pp_crv_const[pp->point_count] = pp->target_z[pp->point_count]/pp->pp_no_crv_pts;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	3338      	adds	r3, #56	; 0x38
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	edd3 6a00 	vldr	s13, [r3]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006070:	ee07 3a90 	vmov	s15, r3
 8006074:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800607e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4413      	add	r3, r2
 800608c:	edc3 7a00 	vstr	s15, [r3]

				float crvpath = (float)1.0/pp->pp_no_crv_pts;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006096:	ee07 3a90 	vmov	s15, r3
 800609a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800609e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060a6:	edc7 7a03 	vstr	s15, [r7, #12]
				for(int i = 0;i<pp->pp_no_crv_pts;i++){
 80060aa:	2300      	movs	r3, #0
 80060ac:	60bb      	str	r3, [r7, #8]
 80060ae:	e12d      	b.n	800630c <PathPlan+0x724>
					pp->pp_crv_x[i]= powf((1-crvpath),2) * pp->real_x + 2.0*(1-crvpath)*crvpath*pp->pp_rad_ptx + powf(crvpath,2) * pp->target_x[pp->point_count];
 80060b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80060b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060bc:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80060c0:	eeb0 0a67 	vmov.f32	s0, s15
 80060c4:	f017 fe64 	bl	801dd90 <powf>
 80060c8:	eeb0 7a40 	vmov.f32	s14, s0
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80060d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060d6:	ee17 0a90 	vmov	r0, s15
 80060da:	f7fa fa35 	bl	8000548 <__aeabi_f2d>
 80060de:	4604      	mov	r4, r0
 80060e0:	460d      	mov	r5, r1
 80060e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80060ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060ee:	ee17 0a90 	vmov	r0, s15
 80060f2:	f7fa fa29 	bl	8000548 <__aeabi_f2d>
 80060f6:	4602      	mov	r2, r0
 80060f8:	460b      	mov	r3, r1
 80060fa:	f7fa f8c7 	bl	800028c <__adddf3>
 80060fe:	4602      	mov	r2, r0
 8006100:	460b      	mov	r3, r1
 8006102:	4690      	mov	r8, r2
 8006104:	4699      	mov	r9, r3
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f7fa fa1e 	bl	8000548 <__aeabi_f2d>
 800610c:	4602      	mov	r2, r0
 800610e:	460b      	mov	r3, r1
 8006110:	4640      	mov	r0, r8
 8006112:	4649      	mov	r1, r9
 8006114:	f7fa fa70 	bl	80005f8 <__aeabi_dmul>
 8006118:	4602      	mov	r2, r0
 800611a:	460b      	mov	r3, r1
 800611c:	4690      	mov	r8, r2
 800611e:	4699      	mov	r9, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4618      	mov	r0, r3
 800612a:	f7fa fa0d 	bl	8000548 <__aeabi_f2d>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	4640      	mov	r0, r8
 8006134:	4649      	mov	r1, r9
 8006136:	f7fa fa5f 	bl	80005f8 <__aeabi_dmul>
 800613a:	4602      	mov	r2, r0
 800613c:	460b      	mov	r3, r1
 800613e:	4620      	mov	r0, r4
 8006140:	4629      	mov	r1, r5
 8006142:	f7fa f8a3 	bl	800028c <__adddf3>
 8006146:	4602      	mov	r2, r0
 8006148:	460b      	mov	r3, r1
 800614a:	4614      	mov	r4, r2
 800614c:	461d      	mov	r5, r3
 800614e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8006152:	ed97 0a03 	vldr	s0, [r7, #12]
 8006156:	f017 fe1b 	bl	801dd90 <powf>
 800615a:	eeb0 7a40 	vmov.f32	s14, s0
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	331a      	adds	r3, #26
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4413      	add	r3, r2
 800616c:	edd3 7a00 	vldr	s15, [r3]
 8006170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006174:	ee17 0a90 	vmov	r0, s15
 8006178:	f7fa f9e6 	bl	8000548 <__aeabi_f2d>
 800617c:	4602      	mov	r2, r0
 800617e:	460b      	mov	r3, r1
 8006180:	4620      	mov	r0, r4
 8006182:	4629      	mov	r1, r5
 8006184:	f7fa f882 	bl	800028c <__adddf3>
 8006188:	4602      	mov	r2, r0
 800618a:	460b      	mov	r3, r1
 800618c:	4610      	mov	r0, r2
 800618e:	4619      	mov	r1, r3
 8006190:	f7fa fd2a 	bl	8000be8 <__aeabi_d2f>
 8006194:	4601      	mov	r1, r0
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	6019      	str	r1, [r3, #0]
					pp->pp_crv_y[i]= powf((1-crvpath),2) * pp->real_y + 2.0*(1-crvpath)*crvpath*pp->pp_rad_pty + powf(crvpath,2) * pp->target_y[pp->point_count];
 80061a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80061ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061b0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80061b4:	eeb0 0a67 	vmov.f32	s0, s15
 80061b8:	f017 fdea 	bl	801dd90 <powf>
 80061bc:	eeb0 7a40 	vmov.f32	s14, s0
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80061c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ca:	ee17 0a90 	vmov	r0, s15
 80061ce:	f7fa f9bb 	bl	8000548 <__aeabi_f2d>
 80061d2:	4604      	mov	r4, r0
 80061d4:	460d      	mov	r5, r1
 80061d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061da:	edd7 7a03 	vldr	s15, [r7, #12]
 80061de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061e2:	ee17 0a90 	vmov	r0, s15
 80061e6:	f7fa f9af 	bl	8000548 <__aeabi_f2d>
 80061ea:	4602      	mov	r2, r0
 80061ec:	460b      	mov	r3, r1
 80061ee:	f7fa f84d 	bl	800028c <__adddf3>
 80061f2:	4602      	mov	r2, r0
 80061f4:	460b      	mov	r3, r1
 80061f6:	4690      	mov	r8, r2
 80061f8:	4699      	mov	r9, r3
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f7fa f9a4 	bl	8000548 <__aeabi_f2d>
 8006200:	4602      	mov	r2, r0
 8006202:	460b      	mov	r3, r1
 8006204:	4640      	mov	r0, r8
 8006206:	4649      	mov	r1, r9
 8006208:	f7fa f9f6 	bl	80005f8 <__aeabi_dmul>
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	4690      	mov	r8, r2
 8006212:	4699      	mov	r9, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4618      	mov	r0, r3
 800621e:	f7fa f993 	bl	8000548 <__aeabi_f2d>
 8006222:	4602      	mov	r2, r0
 8006224:	460b      	mov	r3, r1
 8006226:	4640      	mov	r0, r8
 8006228:	4649      	mov	r1, r9
 800622a:	f7fa f9e5 	bl	80005f8 <__aeabi_dmul>
 800622e:	4602      	mov	r2, r0
 8006230:	460b      	mov	r3, r1
 8006232:	4620      	mov	r0, r4
 8006234:	4629      	mov	r1, r5
 8006236:	f7fa f829 	bl	800028c <__adddf3>
 800623a:	4602      	mov	r2, r0
 800623c:	460b      	mov	r3, r1
 800623e:	4614      	mov	r4, r2
 8006240:	461d      	mov	r5, r3
 8006242:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8006246:	ed97 0a03 	vldr	s0, [r7, #12]
 800624a:	f017 fda1 	bl	801dd90 <powf>
 800624e:	eeb0 7a40 	vmov.f32	s14, s0
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	3328      	adds	r3, #40	; 0x28
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	3304      	adds	r3, #4
 8006262:	edd3 7a00 	vldr	s15, [r3]
 8006266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800626a:	ee17 0a90 	vmov	r0, s15
 800626e:	f7fa f96b 	bl	8000548 <__aeabi_f2d>
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
 8006276:	4620      	mov	r0, r4
 8006278:	4629      	mov	r1, r5
 800627a:	f7fa f807 	bl	800028c <__adddf3>
 800627e:	4602      	mov	r2, r0
 8006280:	460b      	mov	r3, r1
 8006282:	4610      	mov	r0, r2
 8006284:	4619      	mov	r1, r3
 8006286:	f7fa fcaf 	bl	8000be8 <__aeabi_d2f>
 800628a:	4601      	mov	r1, r0
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4413      	add	r3, r2
 8006298:	6019      	str	r1, [r3, #0]
					pp->pp_crv_z[i] = pp->pp_crv_const[pp->point_count] + pp->pp_crv_const[pp->point_count]*i;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	ed93 7a00 	vldr	s14, [r3]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	edd3 6a00 	vldr	s13, [r3]
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	ee07 3a90 	vmov	s15, r3
 80062c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4413      	add	r3, r2
 80062e0:	edc3 7a00 	vstr	s15, [r3]
					crvpath+=(float)1.0/pp->pp_no_crv_pts;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 80062ea:	ee07 3a90 	vmov	s15, r3
 80062ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80062fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006302:	edc7 7a03 	vstr	s15, [r7, #12]
				for(int i = 0;i<pp->pp_no_crv_pts;i++){
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	3301      	adds	r3, #1
 800630a:	60bb      	str	r3, [r7, #8]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	429a      	cmp	r2, r3
 8006316:	f6ff aecb 	blt.w	80060b0 <PathPlan+0x4c8>
				}
				//				PIDGainSet(KP,(pp->target_vel[pp->point_count]/(float)4.0),&(pp->z));
				pp->pp_crv_calc = 1;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
			}

			pp->error_x = pp->pp_crv_x[pp->crnt_crv_pt] - pp->real_x;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4413      	add	r3, r2
 8006332:	ed93 7a00 	vldr	s14, [r3]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800633c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
			pp->error_y = pp->pp_crv_y[pp->crnt_crv_pt] - pp->real_y;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	ed93 7a00 	vldr	s14, [r3]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006360:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
			pp->error_z = pp->pp_crv_z[pp->crnt_crv_pt] - pp->real_z;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	ed93 7a00 	vldr	s14, [r3]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	edd3 7a04 	vldr	s15, [r3, #16]
 8006384:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8


			if( pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && ((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 800639a:	3b01      	subs	r3, #1
 800639c:	429a      	cmp	r2, r3
 800639e:	d14a      	bne.n	8006436 <PathPlan+0x84e>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 80063a6:	eef0 7ae7 	vabs.f32	s15, s15
 80063aa:	ee17 0a90 	vmov	r0, s15
 80063ae:	f7fa f8cb 	bl	8000548 <__aeabi_f2d>
 80063b2:	4604      	mov	r4, r0
 80063b4:	460d      	mov	r5, r1
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 80063bc:	eef0 7ae7 	vabs.f32	s15, s15
 80063c0:	ee17 0a90 	vmov	r0, s15
 80063c4:	f7fa f8c0 	bl	8000548 <__aeabi_f2d>
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	4620      	mov	r0, r4
 80063ce:	4629      	mov	r1, r5
 80063d0:	f7f9 ff5c 	bl	800028c <__adddf3>
 80063d4:	4602      	mov	r2, r0
 80063d6:	460b      	mov	r3, r1
 80063d8:	4610      	mov	r0, r2
 80063da:	4619      	mov	r1, r3
 80063dc:	f04f 0200 	mov.w	r2, #0
 80063e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80063e4:	f7fa fa32 	bl	800084c <__aeabi_ddiv>
 80063e8:	4602      	mov	r2, r0
 80063ea:	460b      	mov	r3, r1
 80063ec:	4614      	mov	r4, r2
 80063ee:	461d      	mov	r5, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fa f8a6 	bl	8000548 <__aeabi_f2d>
 80063fc:	4602      	mov	r2, r0
 80063fe:	460b      	mov	r3, r1
 8006400:	4620      	mov	r0, r4
 8006402:	4629      	mov	r1, r5
 8006404:	f7fa fb6a 	bl	8000adc <__aeabi_dcmplt>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d013      	beq.n	8006436 <PathPlan+0x84e>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8006414:	eeb0 7ae7 	vabs.f32	s14, s15
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 800641e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006426:	d506      	bpl.n	8006436 <PathPlan+0x84e>
				pp->pp_lck = 1.0;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800642e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	e005      	b.n	8006442 <PathPlan+0x85a>
			else
				pp->pp_lck = 0.0;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800643c:	f04f 0200 	mov.w	r2, #0
 8006440:	601a      	str	r2, [r3, #0]

			pp->pp_lck_count = pp->pp_lck_count + 1.0;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8006448:	edd3 7a00 	vldr	s15, [r3]
 800644c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006450:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800645a:	edc3 7a00 	vstr	s15, [r3]

			if(pp->pp_lck_count <= 60.0)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8006464:	edd3 7a00 	vldr	s15, [r3]
 8006468:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8006700 <PathPlan+0xb18>
 800646c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006474:	d811      	bhi.n	800649a <PathPlan+0x8b2>
				pp->pp_lck_cal = pp->pp_lck_cal + pp->pp_lck;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800647c:	ed93 7a00 	vldr	s14, [r3]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006486:	edd3 7a00 	vldr	s15, [r3]
 800648a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8006494:	edc3 7a00 	vstr	s15, [r3]
 8006498:	e034      	b.n	8006504 <PathPlan+0x91c>
			else{
				pp->pp_lck_final = (pp->pp_lck_cal) / (pp->pp_lck_count) ;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80064a0:	edd3 6a00 	vldr	s13, [r3]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80064aa:	ed93 7a00 	vldr	s14, [r3]
 80064ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80064b8:	edc3 7a00 	vstr	s15, [r3]
				if(pp->pp_lck_final >= 0.95)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7fa f83f 	bl	8000548 <__aeabi_f2d>
 80064ca:	a38b      	add	r3, pc, #556	; (adr r3, 80066f8 <PathPlan+0xb10>)
 80064cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d0:	f7fa fb18 	bl	8000b04 <__aeabi_dcmpge>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d004      	beq.n	80064e4 <PathPlan+0x8fc>
					pp->pp_lck_enb = 1;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 80064e2:	e003      	b.n	80064ec <PathPlan+0x904>
				else
					pp->pp_lck_enb = 0;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
				pp->pp_lck_count = 0.0;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80064f2:	f04f 0200 	mov.w	r2, #0
 80064f6:	601a      	str	r2, [r3, #0]
				pp->pp_lck_cal   = 0.0;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80064fe:	f04f 0200 	mov.w	r2, #0
 8006502:	601a      	str	r2, [r3, #0]
			}


			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy_crv){
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 800650a:	eef0 7ae7 	vabs.f32	s15, s15
 800650e:	ee17 0a90 	vmov	r0, s15
 8006512:	f7fa f819 	bl	8000548 <__aeabi_f2d>
 8006516:	4604      	mov	r4, r0
 8006518:	460d      	mov	r5, r1
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8006520:	eef0 7ae7 	vabs.f32	s15, s15
 8006524:	ee17 0a90 	vmov	r0, s15
 8006528:	f7fa f80e 	bl	8000548 <__aeabi_f2d>
 800652c:	4602      	mov	r2, r0
 800652e:	460b      	mov	r3, r1
 8006530:	4620      	mov	r0, r4
 8006532:	4629      	mov	r1, r5
 8006534:	f7f9 feaa 	bl	800028c <__adddf3>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	4610      	mov	r0, r2
 800653e:	4619      	mov	r1, r3
 8006540:	f04f 0200 	mov.w	r2, #0
 8006544:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006548:	f7fa f980 	bl	800084c <__aeabi_ddiv>
 800654c:	4602      	mov	r2, r0
 800654e:	460b      	mov	r3, r1
 8006550:	4614      	mov	r4, r2
 8006552:	461d      	mov	r5, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800655a:	4618      	mov	r0, r3
 800655c:	f7f9 fff4 	bl	8000548 <__aeabi_f2d>
 8006560:	4602      	mov	r2, r0
 8006562:	460b      	mov	r3, r1
 8006564:	4620      	mov	r0, r4
 8006566:	4629      	mov	r1, r5
 8006568:	f7fa fab8 	bl	8000adc <__aeabi_dcmplt>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 8466 	beq.w	8006e40 <PathPlan+0x1258>
				if(pp->crnt_crv_pt < pp->pp_no_crv_pts - 1){
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006580:	3b01      	subs	r3, #1
 8006582:	429a      	cmp	r2, r3
 8006584:	f280 8135 	bge.w	80067f2 <PathPlan+0xc0a>
					PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 800658e:	edd3 7a00 	vldr	s15, [r3]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8006598:	4619      	mov	r1, r3
 800659a:	eeb0 0a67 	vmov.f32	s0, s15
 800659e:	2004      	movs	r0, #4
 80065a0:	f7fe ff51 	bl	8005446 <PIDGainSet>
					pp->crnt_crv_pt++;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 80065aa:	1c5a      	adds	r2, r3, #1
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
					pp->error_x = pp->pp_crv_x[pp->crnt_crv_pt] - pp->real_x;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4413      	add	r3, r2
 80065c2:	ed93 7a00 	vldr	s14, [r3]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80065cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
					pp->error_y = pp->pp_crv_y[pp->crnt_crv_pt] - pp->real_y;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	ed93 7a00 	vldr	s14, [r3]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80065f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
					pp->error_z = pp->pp_crv_z[pp->crnt_crv_pt] - pp->real_z;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4413      	add	r3, r2
 800660a:	ed93 7a00 	vldr	s14, [r3]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	edd3 7a04 	vldr	s15, [r3, #16]
 8006614:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8

					if(pp->target_x[pp->point_count]-pp->real_x){
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	331a      	adds	r3, #26
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	ed93 7a00 	vldr	s14, [r3]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006636:	ee77 7a67 	vsub.f32	s15, s14, s15
 800663a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800663e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006642:	d01d      	beq.n	8006680 <PathPlan+0xa98>
						PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	331a      	adds	r3, #26
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4413      	add	r3, r2
 8006652:	ed93 7a00 	vldr	s14, [r3]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800665c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006660:	eef0 7ae7 	vabs.f32	s15, s15
 8006664:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006668:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006672:	4619      	mov	r1, r3
 8006674:	eeb0 0a47 	vmov.f32	s0, s14
 8006678:	2002      	movs	r0, #2
 800667a:	f7fe fee4 	bl	8005446 <PIDGainSet>
 800667e:	e008      	b.n	8006692 <PathPlan+0xaaa>
					} else {
						PIDGainSet(KE,1.0,&(pp->x));
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006686:	4619      	mov	r1, r3
 8006688:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800668c:	2002      	movs	r0, #2
 800668e:	f7fe feda 	bl	8005446 <PIDGainSet>
					}
					if(pp->target_y[pp->point_count]-pp->real_y){
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	3328      	adds	r3, #40	; 0x28
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4413      	add	r3, r2
 80066a0:	3304      	adds	r3, #4
 80066a2:	ed93 7a00 	vldr	s14, [r3]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80066ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80066b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066b8:	d024      	beq.n	8006704 <PathPlan+0xb1c>
						PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	3328      	adds	r3, #40	; 0x28
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4413      	add	r3, r2
 80066c8:	3304      	adds	r3, #4
 80066ca:	ed93 7a00 	vldr	s14, [r3]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80066d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066d8:	eef0 7ae7 	vabs.f32	s15, s15
 80066dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80066ea:	4619      	mov	r1, r3
 80066ec:	eeb0 0a47 	vmov.f32	s0, s14
 80066f0:	2002      	movs	r0, #2
 80066f2:	f7fe fea8 	bl	8005446 <PIDGainSet>
 80066f6:	e00e      	b.n	8006716 <PathPlan+0xb2e>
 80066f8:	66666666 	.word	0x66666666
 80066fc:	3fee6666 	.word	0x3fee6666
 8006700:	42700000 	.word	0x42700000
					} else {
						PIDGainSet(KE,1.0,&(pp->y));
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800670a:	4619      	mov	r1, r3
 800670c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006710:	2002      	movs	r0, #2
 8006712:	f7fe fe98 	bl	8005446 <PIDGainSet>
					}
					PIDGainSet(KP,pp->kp[0],&(pp->x));
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006722:	4619      	mov	r1, r3
 8006724:	eeb0 0a67 	vmov.f32	s0, s15
 8006728:	2004      	movs	r0, #4
 800672a:	f7fe fe8c 	bl	8005446 <PIDGainSet>
					PIDGainSet(KP,pp->kp[0],&(pp->y));
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800673a:	4619      	mov	r1, r3
 800673c:	eeb0 0a67 	vmov.f32	s0, s15
 8006740:	2004      	movs	r0, #4
 8006742:	f7fe fe80 	bl	8005446 <PIDGainSet>
					PIDGainSet(KI,pp->ki[0],&(pp->x));
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006752:	4619      	mov	r1, r3
 8006754:	eeb0 0a67 	vmov.f32	s0, s15
 8006758:	2005      	movs	r0, #5
 800675a:	f7fe fe74 	bl	8005446 <PIDGainSet>
					PIDGainSet(KI,pp->ki[0],&(pp->y));
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800676a:	4619      	mov	r1, r3
 800676c:	eeb0 0a67 	vmov.f32	s0, s15
 8006770:	2005      	movs	r0, #5
 8006772:	f7fe fe68 	bl	8005446 <PIDGainSet>
					PIDGainSet(KD,pp->kd[0],&(pp->x));
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006782:	4619      	mov	r1, r3
 8006784:	eeb0 0a67 	vmov.f32	s0, s15
 8006788:	2006      	movs	r0, #6
 800678a:	f7fe fe5c 	bl	8005446 <PIDGainSet>
					PIDGainSet(KD,pp->kd[0],&(pp->y));
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800679a:	4619      	mov	r1, r3
 800679c:	eeb0 0a67 	vmov.f32	s0, s15
 80067a0:	2006      	movs	r0, #6
 80067a2:	f7fe fe50 	bl	8005446 <PIDGainSet>
					PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	3384      	adds	r3, #132	; 0x84
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	3304      	adds	r3, #4
 80067b6:	edd3 7a00 	vldr	s15, [r3]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80067c0:	4619      	mov	r1, r3
 80067c2:	eeb0 0a67 	vmov.f32	s0, s15
 80067c6:	2003      	movs	r0, #3
 80067c8:	f7fe fe3d 	bl	8005446 <PIDGainSet>
					PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	3394      	adds	r3, #148	; 0x94
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	4413      	add	r3, r2
 80067da:	edd3 7a00 	vldr	s15, [r3]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80067e4:	4619      	mov	r1, r3
 80067e6:	eeb0 0a67 	vmov.f32	s0, s15
 80067ea:	2003      	movs	r0, #3
 80067ec:	f7fe fe2b 	bl	8005446 <PIDGainSet>
 80067f0:	e326      	b.n	8006e40 <PathPlan+0x1258>


				}else if(pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && (pp->point_count < (pp->target_point - 1)) ){
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 80067fe:	3b01      	subs	r3, #1
 8006800:	429a      	cmp	r2, r3
 8006802:	f040 8252 	bne.w	8006caa <PathPlan+0x10c2>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006812:	3b01      	subs	r3, #1
 8006814:	429a      	cmp	r2, r3
 8006816:	f280 8248 	bge.w	8006caa <PathPlan+0x10c2>
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8006820:	eef0 7ae7 	vabs.f32	s15, s15
 8006824:	ee17 0a90 	vmov	r0, s15
 8006828:	f7f9 fe8e 	bl	8000548 <__aeabi_f2d>
 800682c:	4604      	mov	r4, r0
 800682e:	460d      	mov	r5, r1
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8006836:	eef0 7ae7 	vabs.f32	s15, s15
 800683a:	ee17 0a90 	vmov	r0, s15
 800683e:	f7f9 fe83 	bl	8000548 <__aeabi_f2d>
 8006842:	4602      	mov	r2, r0
 8006844:	460b      	mov	r3, r1
 8006846:	4620      	mov	r0, r4
 8006848:	4629      	mov	r1, r5
 800684a:	f7f9 fd1f 	bl	800028c <__adddf3>
 800684e:	4602      	mov	r2, r0
 8006850:	460b      	mov	r3, r1
 8006852:	4610      	mov	r0, r2
 8006854:	4619      	mov	r1, r3
 8006856:	f04f 0200 	mov.w	r2, #0
 800685a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800685e:	f7f9 fff5 	bl	800084c <__aeabi_ddiv>
 8006862:	4602      	mov	r2, r0
 8006864:	460b      	mov	r3, r1
 8006866:	4614      	mov	r4, r2
 8006868:	461d      	mov	r5, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006870:	4618      	mov	r0, r3
 8006872:	f7f9 fe69 	bl	8000548 <__aeabi_f2d>
 8006876:	4602      	mov	r2, r0
 8006878:	460b      	mov	r3, r1
 800687a:	4620      	mov	r0, r4
 800687c:	4629      	mov	r1, r5
 800687e:	f7fa f92d 	bl	8000adc <__aeabi_dcmplt>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 82da 	beq.w	8006e3e <PathPlan+0x1256>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8006890:	eeb0 7ae7 	vabs.f32	s14, s15
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 800689a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800689e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068a2:	d400      	bmi.n	80068a6 <PathPlan+0xcbe>
 80068a4:	e2cb      	b.n	8006e3e <PathPlan+0x1256>
						if(pp->target_accurate[pp->point_count] == 1.0){
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	3346      	adds	r3, #70	; 0x46
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4413      	add	r3, r2
 80068b4:	3304      	adds	r3, #4
 80068b6:	edd3 7a00 	vldr	s15, [r3]
 80068ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068be:	eef4 7a47 	vcmp.f32	s15, s14
 80068c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068c6:	f040 80fd 	bne.w	8006ac4 <PathPlan+0xedc>
							if(pp->pp_lck_enb == 1){
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	f040 82b4 	bne.w	8006e3e <PathPlan+0x1256>

								pp->point_count++;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80068dc:	1c5a      	adds	r2, r3, #1
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
								if(pp->target_x[pp->point_count]-pp->real_x){
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	331a      	adds	r3, #26
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4413      	add	r3, r2
 80068f2:	ed93 7a00 	vldr	s14, [r3]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80068fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006900:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006908:	d01d      	beq.n	8006946 <PathPlan+0xd5e>
									PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	331a      	adds	r3, #26
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4413      	add	r3, r2
 8006918:	ed93 7a00 	vldr	s14, [r3]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006922:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006926:	eef0 7ae7 	vabs.f32	s15, s15
 800692a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800692e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006938:	4619      	mov	r1, r3
 800693a:	eeb0 0a47 	vmov.f32	s0, s14
 800693e:	2002      	movs	r0, #2
 8006940:	f7fe fd81 	bl	8005446 <PIDGainSet>
 8006944:	e008      	b.n	8006958 <PathPlan+0xd70>
								} else {
									PIDGainSet(KE,1.0,&(pp->x));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800694c:	4619      	mov	r1, r3
 800694e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006952:	2002      	movs	r0, #2
 8006954:	f7fe fd77 	bl	8005446 <PIDGainSet>
								}
								if(pp->target_y[pp->point_count]-pp->real_y){
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	3328      	adds	r3, #40	; 0x28
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	3304      	adds	r3, #4
 8006968:	ed93 7a00 	vldr	s14, [r3]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006972:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006976:	eef5 7a40 	vcmp.f32	s15, #0.0
 800697a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800697e:	d01e      	beq.n	80069be <PathPlan+0xdd6>
									PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	3328      	adds	r3, #40	; 0x28
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4413      	add	r3, r2
 800698e:	3304      	adds	r3, #4
 8006990:	ed93 7a00 	vldr	s14, [r3]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800699a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800699e:	eef0 7ae7 	vabs.f32	s15, s15
 80069a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80069b0:	4619      	mov	r1, r3
 80069b2:	eeb0 0a47 	vmov.f32	s0, s14
 80069b6:	2002      	movs	r0, #2
 80069b8:	f7fe fd45 	bl	8005446 <PIDGainSet>
 80069bc:	e008      	b.n	80069d0 <PathPlan+0xde8>
								} else {
									PIDGainSet(KE,1.0,&(pp->y));
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80069c4:	4619      	mov	r1, r3
 80069c6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80069ca:	2002      	movs	r0, #2
 80069cc:	f7fe fd3b 	bl	8005446 <PIDGainSet>
								}
								PIDGainSet(KP,pp->kp[0],&(pp->x));
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80069dc:	4619      	mov	r1, r3
 80069de:	eeb0 0a67 	vmov.f32	s0, s15
 80069e2:	2004      	movs	r0, #4
 80069e4:	f7fe fd2f 	bl	8005446 <PIDGainSet>
								PIDGainSet(KP,pp->kp[0],&(pp->y));
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80069f4:	4619      	mov	r1, r3
 80069f6:	eeb0 0a67 	vmov.f32	s0, s15
 80069fa:	2004      	movs	r0, #4
 80069fc:	f7fe fd23 	bl	8005446 <PIDGainSet>
								PIDGainSet(KI,pp->ki[0],&(pp->x));
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	eeb0 0a67 	vmov.f32	s0, s15
 8006a12:	2005      	movs	r0, #5
 8006a14:	f7fe fd17 	bl	8005446 <PIDGainSet>
								PIDGainSet(KI,pp->ki[0],&(pp->y));
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006a24:	4619      	mov	r1, r3
 8006a26:	eeb0 0a67 	vmov.f32	s0, s15
 8006a2a:	2005      	movs	r0, #5
 8006a2c:	f7fe fd0b 	bl	8005446 <PIDGainSet>
								PIDGainSet(KD,pp->kd[0],&(pp->x));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8006a42:	2006      	movs	r0, #6
 8006a44:	f7fe fcff 	bl	8005446 <PIDGainSet>
								PIDGainSet(KD,pp->kd[0],&(pp->y));
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006a54:	4619      	mov	r1, r3
 8006a56:	eeb0 0a67 	vmov.f32	s0, s15
 8006a5a:	2006      	movs	r0, #6
 8006a5c:	f7fe fcf3 	bl	8005446 <PIDGainSet>
								PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	3384      	adds	r3, #132	; 0x84
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	3304      	adds	r3, #4
 8006a70:	edd3 7a00 	vldr	s15, [r3]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	eeb0 0a67 	vmov.f32	s0, s15
 8006a80:	2003      	movs	r0, #3
 8006a82:	f7fe fce0 	bl	8005446 <PIDGainSet>
								PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	3394      	adds	r3, #148	; 0x94
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	edd3 7a00 	vldr	s15, [r3]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	eeb0 0a67 	vmov.f32	s0, s15
 8006aa4:	2003      	movs	r0, #3
 8006aa6:	f7fe fcce 	bl	8005446 <PIDGainSet>
								pp->crnt_crv_pt=0;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
								pp->pp_crv_calc = 0;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528

								pp->pp_lck_enb = 0;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8006ac2:	e1bc      	b.n	8006e3e <PathPlan+0x1256>

							}
						}else{
							pp->point_count++;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006aca:	1c5a      	adds	r2, r3, #1
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
							if(pp->target_x[pp->point_count]-pp->real_x){
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	331a      	adds	r3, #26
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4413      	add	r3, r2
 8006ae0:	ed93 7a00 	vldr	s14, [r3]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006aea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006aee:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006af6:	d01d      	beq.n	8006b34 <PathPlan+0xf4c>
								PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	331a      	adds	r3, #26
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	ed93 7a00 	vldr	s14, [r3]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006b10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b14:	eef0 7ae7 	vabs.f32	s15, s15
 8006b18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006b26:	4619      	mov	r1, r3
 8006b28:	eeb0 0a47 	vmov.f32	s0, s14
 8006b2c:	2002      	movs	r0, #2
 8006b2e:	f7fe fc8a 	bl	8005446 <PIDGainSet>
 8006b32:	e008      	b.n	8006b46 <PathPlan+0xf5e>
							} else {
								PIDGainSet(KE,1.0,&(pp->x));
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006b40:	2002      	movs	r0, #2
 8006b42:	f7fe fc80 	bl	8005446 <PIDGainSet>
							}
							if(pp->target_y[pp->point_count]-pp->real_y){
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	3328      	adds	r3, #40	; 0x28
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	3304      	adds	r3, #4
 8006b56:	ed93 7a00 	vldr	s14, [r3]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006b60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b64:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b6c:	d01e      	beq.n	8006bac <PathPlan+0xfc4>
								PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	3328      	adds	r3, #40	; 0x28
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	ed93 7a00 	vldr	s14, [r3]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b8c:	eef0 7ae7 	vabs.f32	s15, s15
 8006b90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	eeb0 0a47 	vmov.f32	s0, s14
 8006ba4:	2002      	movs	r0, #2
 8006ba6:	f7fe fc4e 	bl	8005446 <PIDGainSet>
 8006baa:	e008      	b.n	8006bbe <PathPlan+0xfd6>
							} else {
								PIDGainSet(KE,1.0,&(pp->y));
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006bb8:	2002      	movs	r0, #2
 8006bba:	f7fe fc44 	bl	8005446 <PIDGainSet>
							}
							PIDGainSet(KP,pp->kp[0],&(pp->x));
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006bca:	4619      	mov	r1, r3
 8006bcc:	eeb0 0a67 	vmov.f32	s0, s15
 8006bd0:	2004      	movs	r0, #4
 8006bd2:	f7fe fc38 	bl	8005446 <PIDGainSet>
							PIDGainSet(KP,pp->kp[0],&(pp->y));
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006be2:	4619      	mov	r1, r3
 8006be4:	eeb0 0a67 	vmov.f32	s0, s15
 8006be8:	2004      	movs	r0, #4
 8006bea:	f7fe fc2c 	bl	8005446 <PIDGainSet>
							PIDGainSet(KI,pp->ki[0],&(pp->x));
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8006c00:	2005      	movs	r0, #5
 8006c02:	f7fe fc20 	bl	8005446 <PIDGainSet>
							PIDGainSet(KI,pp->ki[0],&(pp->y));
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006c12:	4619      	mov	r1, r3
 8006c14:	eeb0 0a67 	vmov.f32	s0, s15
 8006c18:	2005      	movs	r0, #5
 8006c1a:	f7fe fc14 	bl	8005446 <PIDGainSet>
							PIDGainSet(KD,pp->kd[0],&(pp->x));
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	eeb0 0a67 	vmov.f32	s0, s15
 8006c30:	2006      	movs	r0, #6
 8006c32:	f7fe fc08 	bl	8005446 <PIDGainSet>
							PIDGainSet(KD,pp->kd[0],&(pp->y));
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006c42:	4619      	mov	r1, r3
 8006c44:	eeb0 0a67 	vmov.f32	s0, s15
 8006c48:	2006      	movs	r0, #6
 8006c4a:	f7fe fbfc 	bl	8005446 <PIDGainSet>
							PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	3384      	adds	r3, #132	; 0x84
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	3304      	adds	r3, #4
 8006c5e:	edd3 7a00 	vldr	s15, [r3]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006c68:	4619      	mov	r1, r3
 8006c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8006c6e:	2003      	movs	r0, #3
 8006c70:	f7fe fbe9 	bl	8005446 <PIDGainSet>
							PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	3394      	adds	r3, #148	; 0x94
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4413      	add	r3, r2
 8006c82:	edd3 7a00 	vldr	s15, [r3]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	eeb0 0a67 	vmov.f32	s0, s15
 8006c92:	2003      	movs	r0, #3
 8006c94:	f7fe fbd7 	bl	8005446 <PIDGainSet>
							pp->crnt_crv_pt=0;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
							pp->pp_crv_calc = 0;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8006ca8:	e0c9      	b.n	8006e3e <PathPlan+0x1256>
						}
					}

				}else if(pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && pp->point_count == (pp->target_point - 1) ){
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	f040 80c1 	bne.w	8006e40 <PathPlan+0x1258>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	f040 80b7 	bne.w	8006e40 <PathPlan+0x1258>

					if(fabs(pp->error_x)<pp->f_tol_xy && fabs(pp->error_y)<pp->f_tol_xy && (int)pp->error_z<=pp->f_tol_z){
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8006cd8:	eeb0 7ae7 	vabs.f32	s14, s15
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 8006ce2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cea:	f140 80a9 	bpl.w	8006e40 <PathPlan+0x1258>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8006cf4:	eeb0 7ae7 	vabs.f32	s14, s15
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 8006cfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d06:	f140 809b 	bpl.w	8006e40 <PathPlan+0x1258>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8006d10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	edd3 7ac1 	vldr	s15, [r3, #772]	; 0x304
 8006d1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d26:	f200 808b 	bhi.w	8006e40 <PathPlan+0x1258>

						if(pp->target_accurate[pp->point_count] == 1.0){
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	3346      	adds	r3, #70	; 0x46
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	3304      	adds	r3, #4
 8006d3a:	edd3 7a00 	vldr	s15, [r3]
 8006d3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d42:	eef4 7a47 	vcmp.f32	s15, s14
 8006d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d4a:	d140      	bne.n	8006dce <PathPlan+0x11e6>
							if(pp->pp_lck_enb == 1){
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d174      	bne.n	8006e40 <PathPlan+0x1258>
								PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8006d5c:	edd3 7a00 	vldr	s15, [r3]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8006d66:	4619      	mov	r1, r3
 8006d68:	eeb0 0a67 	vmov.f32	s0, s15
 8006d6c:	2004      	movs	r0, #4
 8006d6e:	f7fe fb6a 	bl	8005446 <PIDGainSet>
								//								APPStop();
								VESCNavStop();
 8006d72:	f006 fdcd 	bl	800d910 <VESCNavStop>
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 8006d76:	2201      	movs	r2, #1
 8006d78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d7c:	487f      	ldr	r0, [pc, #508]	; (8006f7c <PathPlan+0x1394>)
 8006d7e:	f009 fafd 	bl	801037c <HAL_GPIO_WritePin>
								//								LED4 = 1;
								PIDDelayInit(&(pp->x));
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7fe fcae 	bl	80056ea <PIDDelayInit>
								PIDDelayInit(&(pp->y));
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7fe fca8 	bl	80056ea <PIDDelayInit>
								PIDDelayInit(&(pp->z));
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7fe fca2 	bl	80056ea <PIDDelayInit>
								pp->crnt_crv_pt=0;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
								pp->pp_crv_calc = 0;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
								pp->pp_start=0;
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8006dbc:	f36f 0300 	bfc	r3, #0, #1
 8006dc0:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
								pp->pp_lck_enb = 0;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8006dcc:	e038      	b.n	8006e40 <PathPlan+0x1258>
							}
						}else{
							PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8006dd4:	edd3 7a00 	vldr	s15, [r3]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8006dde:	4619      	mov	r1, r3
 8006de0:	eeb0 0a67 	vmov.f32	s0, s15
 8006de4:	2004      	movs	r0, #4
 8006de6:	f7fe fb2e 	bl	8005446 <PIDGainSet>
							VESCNavStop();
 8006dea:	f006 fd91 	bl	800d910 <VESCNavStop>
							//							APPStop();
							//							LED4 = 1;
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 8006dee:	2201      	movs	r2, #1
 8006df0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006df4:	4861      	ldr	r0, [pc, #388]	; (8006f7c <PathPlan+0x1394>)
 8006df6:	f009 fac1 	bl	801037c <HAL_GPIO_WritePin>
							PIDDelayInit(&(pp->x));
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fe fc72 	bl	80056ea <PIDDelayInit>
							PIDDelayInit(&(pp->y));
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7fe fc6c 	bl	80056ea <PIDDelayInit>
							PIDDelayInit(&(pp->z));
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7fe fc66 	bl	80056ea <PIDDelayInit>
							pp->crnt_crv_pt=0;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
							pp->pp_crv_calc = 0;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
							pp->pp_start=0;
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8006e34:	f36f 0300 	bfc	r3, #0, #1
 8006e38:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
 8006e3c:	e000      	b.n	8006e40 <PathPlan+0x1258>
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8006e3e:	bf00      	nop

				}
			}


			if(pp->pp_start){
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f001 86ae 	beq.w	8008bae <PathPlan+0x2fc6>

				pp->dx = pp->pp_crv_x[pp->crnt_crv_pt] - pp->prev_real_x;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4413      	add	r3, r2
 8006e62:	ed93 7a00 	vldr	s14, [r3]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006e6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
				pp->dy = pp->pp_crv_y[pp->crnt_crv_pt] - pp->prev_real_y;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	4413      	add	r3, r2
 8006e86:	ed93 7a00 	vldr	s14, [r3]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8006e90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

				pp->rotate=0;
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8006ea0:	f36f 03c3 	bfc	r3, #3, #1
 8006ea4:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538

				if ((pp->dx != 0.0 || pp->dx != -0.0)&&(pp->dy != -0.0 || pp->dy != 0.0)){
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8006eae:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eb6:	d107      	bne.n	8006ec8 <PathPlan+0x12e0>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8006ebe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ec6:	d021      	beq.n	8006f0c <PathPlan+0x1324>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8006ece:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed6:	d107      	bne.n	8006ee8 <PathPlan+0x1300>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8006ede:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ee6:	d011      	beq.n	8006f0c <PathPlan+0x1324>
					pp->heading = atan2f(pp->dy, pp->dx);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8006ef4:	eef0 0a47 	vmov.f32	s1, s14
 8006ef8:	eeb0 0a67 	vmov.f32	s0, s15
 8006efc:	f016 ff46 	bl	801dd8c <atan2f>
 8006f00:	eef0 7a40 	vmov.f32	s15, s0
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
 8006f0a:	e048      	b.n	8006f9e <PathPlan+0x13b6>
				} else {
					if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy < 0.0) {
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8006f12:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f1a:	d007      	beq.n	8006f2c <PathPlan+0x1344>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8006f22:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f2a:	d10b      	bne.n	8006f44 <PathPlan+0x135c>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8006f32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f3a:	d503      	bpl.n	8006f44 <PathPlan+0x135c>
						pp->heading = 1.5708;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a10      	ldr	r2, [pc, #64]	; (8006f80 <PathPlan+0x1398>)
 8006f40:	65da      	str	r2, [r3, #92]	; 0x5c
 8006f42:	e02c      	b.n	8006f9e <PathPlan+0x13b6>
					} else if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy > 0.0) {
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8006f4a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f52:	d007      	beq.n	8006f64 <PathPlan+0x137c>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8006f5a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f62:	d111      	bne.n	8006f88 <PathPlan+0x13a0>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8006f6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f72:	dd09      	ble.n	8006f88 <PathPlan+0x13a0>
						pp->heading = -1.5708;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a03      	ldr	r2, [pc, #12]	; (8006f84 <PathPlan+0x139c>)
 8006f78:	65da      	str	r2, [r3, #92]	; 0x5c
 8006f7a:	e010      	b.n	8006f9e <PathPlan+0x13b6>
 8006f7c:	40020800 	.word	0x40020800
 8006f80:	3fc90ff9 	.word	0x3fc90ff9
 8006f84:	bfc90ff9 	.word	0xbfc90ff9
					} else {
						pp->heading = 0.0;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f04f 0200 	mov.w	r2, #0
 8006f8e:	65da      	str	r2, [r3, #92]	; 0x5c
						pp->rotate = 1;
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8006f96:	f043 0308 	orr.w	r3, r3, #8
 8006f9a:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
					}
				}

				pp->vx  = pp->target_vel[pp->point_count] * cosf(pp->heading);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	3374      	adds	r3, #116	; 0x74
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4413      	add	r3, r2
 8006fac:	ed93 8a00 	vldr	s16, [r3]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8006fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8006fba:	f016 fd7b 	bl	801dab4 <cosf>
 8006fbe:	eef0 7a40 	vmov.f32	s15, s0
 8006fc2:	ee68 7a27 	vmul.f32	s15, s16, s15
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
				pp->vy  = pp->target_vel[pp->point_count] * sinf(pp->heading);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	3374      	adds	r3, #116	; 0x74
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4413      	add	r3, r2
 8006fda:	ed93 8a00 	vldr	s16, [r3]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8006fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8006fe8:	f016 fdac 	bl	801db44 <sinf>
 8006fec:	eef0 7a40 	vmov.f32	s15, s0
 8006ff0:	ee68 7a27 	vmul.f32	s15, s16, s15
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

				if(pp->rotate){
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8007000:	f003 0308 	and.w	r3, r3, #8
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b00      	cmp	r3, #0
 8007008:	d007      	beq.n	800701a <PathPlan+0x1432>
					pp->vx = pp->vy = 0.0;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f04f 0200 	mov.w	r2, #0
 8007010:	665a      	str	r2, [r3, #100]	; 0x64
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	661a      	str	r2, [r3, #96]	; 0x60
				}

				PID(&(pp->x));
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007020:	4618      	mov	r0, r3
 8007022:	f7fe fb80 	bl	8005726 <PID>
				PID(&(pp->y));
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800702c:	4618      	mov	r0, r3
 800702e:	f7fe fb7a 	bl	8005726 <PID>
				PID(&(pp->z));
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8007038:	4618      	mov	r0, r3
 800703a:	f7fe fb74 	bl	8005726 <PID>

				pp->rux =   pp->outx*cosf(pp->real_z_rad) - pp->outy*sinf(pp->real_z_rad);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	edd3 7a06 	vldr	s15, [r3, #24]
 800704a:	eeb0 0a67 	vmov.f32	s0, s15
 800704e:	f016 fd31 	bl	801dab4 <cosf>
 8007052:	eef0 7a40 	vmov.f32	s15, s0
 8007056:	ee28 8a27 	vmul.f32	s16, s16, s15
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	edd3 7a06 	vldr	s15, [r3, #24]
 8007066:	eeb0 0a67 	vmov.f32	s0, s15
 800706a:	f016 fd6b 	bl	801db44 <sinf>
 800706e:	eef0 7a40 	vmov.f32	s15, s0
 8007072:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8007076:	ee78 7a67 	vsub.f32	s15, s16, s15
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
				pp->ruy =   pp->outx*sinf(pp->real_z_rad) + pp->outy*cosf(pp->real_z_rad);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	edd3 7a06 	vldr	s15, [r3, #24]
 800708c:	eeb0 0a67 	vmov.f32	s0, s15
 8007090:	f016 fd58 	bl	801db44 <sinf>
 8007094:	eef0 7a40 	vmov.f32	s15, s0
 8007098:	ee28 8a27 	vmul.f32	s16, s16, s15
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	edd3 7a06 	vldr	s15, [r3, #24]
 80070a8:	eeb0 0a67 	vmov.f32	s0, s15
 80070ac:	f016 fd02 	bl	801dab4 <cosf>
 80070b0:	eef0 7a40 	vmov.f32	s15, s0
 80070b4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80070b8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	edc3 7ab3 	vstr	s15, [r3, #716]	; 0x2cc
				pp->rvx =   pp->vx*cosf(pp->real_z_rad) - pp->vy*sinf(pp->real_z_rad);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80070ce:	eeb0 0a67 	vmov.f32	s0, s15
 80070d2:	f016 fcef 	bl	801dab4 <cosf>
 80070d6:	eef0 7a40 	vmov.f32	s15, s0
 80070da:	ee28 8a27 	vmul.f32	s16, s16, s15
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	edd3 7a06 	vldr	s15, [r3, #24]
 80070ea:	eeb0 0a67 	vmov.f32	s0, s15
 80070ee:	f016 fd29 	bl	801db44 <sinf>
 80070f2:	eef0 7a40 	vmov.f32	s15, s0
 80070f6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80070fa:	ee78 7a67 	vsub.f32	s15, s16, s15
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	edc3 7ab4 	vstr	s15, [r3, #720]	; 0x2d0
				pp->rvy =   pp->vx*sinf(pp->real_z_rad) + pp->vy*cosf(pp->real_z_rad);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	edd3 7a06 	vldr	s15, [r3, #24]
 8007110:	eeb0 0a67 	vmov.f32	s0, s15
 8007114:	f016 fd16 	bl	801db44 <sinf>
 8007118:	eef0 7a40 	vmov.f32	s15, s0
 800711c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	edd3 7a06 	vldr	s15, [r3, #24]
 800712c:	eeb0 0a67 	vmov.f32	s0, s15
 8007130:	f016 fcc0 	bl	801dab4 <cosf>
 8007134:	eef0 7a40 	vmov.f32	s15, s0
 8007138:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800713c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	edc3 7ab5 	vstr	s15, [r3, #724]	; 0x2d4

				if(pp->base_shape== 0){
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 800714c:	2b00      	cmp	r3, #0
 800714e:	f040 8161 	bne.w	8007414 <PathPlan+0x182c>
					pp->u1 = 0.707107 * ( pp->ruy - pp->rux) - (pp->outz * 1.0);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 800715e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007162:	ee17 0a90 	vmov	r0, s15
 8007166:	f7f9 f9ef 	bl	8000548 <__aeabi_f2d>
 800716a:	f20f 6338 	addw	r3, pc, #1592	; 0x638
 800716e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007172:	f7f9 fa41 	bl	80005f8 <__aeabi_dmul>
 8007176:	4602      	mov	r2, r0
 8007178:	460b      	mov	r3, r1
 800717a:	4614      	mov	r4, r2
 800717c:	461d      	mov	r5, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007184:	4618      	mov	r0, r3
 8007186:	f7f9 f9df 	bl	8000548 <__aeabi_f2d>
 800718a:	4602      	mov	r2, r0
 800718c:	460b      	mov	r3, r1
 800718e:	4620      	mov	r0, r4
 8007190:	4629      	mov	r1, r5
 8007192:	f7f9 f879 	bl	8000288 <__aeabi_dsub>
 8007196:	4602      	mov	r2, r0
 8007198:	460b      	mov	r3, r1
 800719a:	4610      	mov	r0, r2
 800719c:	4619      	mov	r1, r3
 800719e:	f7f9 fd23 	bl	8000be8 <__aeabi_d2f>
 80071a2:	4602      	mov	r2, r0
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = 0.707107 * ( pp->ruy + pp->rux) + (pp->outz * 1.0);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 80071b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071ba:	ee17 0a90 	vmov	r0, s15
 80071be:	f7f9 f9c3 	bl	8000548 <__aeabi_f2d>
 80071c2:	f20f 53e0 	addw	r3, pc, #1504	; 0x5e0
 80071c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ca:	f7f9 fa15 	bl	80005f8 <__aeabi_dmul>
 80071ce:	4602      	mov	r2, r0
 80071d0:	460b      	mov	r3, r1
 80071d2:	4614      	mov	r4, r2
 80071d4:	461d      	mov	r5, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80071dc:	4618      	mov	r0, r3
 80071de:	f7f9 f9b3 	bl	8000548 <__aeabi_f2d>
 80071e2:	4602      	mov	r2, r0
 80071e4:	460b      	mov	r3, r1
 80071e6:	4620      	mov	r0, r4
 80071e8:	4629      	mov	r1, r5
 80071ea:	f7f9 f84f 	bl	800028c <__adddf3>
 80071ee:	4602      	mov	r2, r0
 80071f0:	460b      	mov	r3, r1
 80071f2:	4610      	mov	r0, r2
 80071f4:	4619      	mov	r1, r3
 80071f6:	f7f9 fcf7 	bl	8000be8 <__aeabi_d2f>
 80071fa:	4602      	mov	r2, r0
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u3 = 0.707107 * ( pp->ruy - pp->rux) + (pp->outz * 1.0);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 800720e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007212:	ee17 0a90 	vmov	r0, s15
 8007216:	f7f9 f997 	bl	8000548 <__aeabi_f2d>
 800721a:	f20f 5388 	addw	r3, pc, #1416	; 0x588
 800721e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007222:	f7f9 f9e9 	bl	80005f8 <__aeabi_dmul>
 8007226:	4602      	mov	r2, r0
 8007228:	460b      	mov	r3, r1
 800722a:	4614      	mov	r4, r2
 800722c:	461d      	mov	r5, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007234:	4618      	mov	r0, r3
 8007236:	f7f9 f987 	bl	8000548 <__aeabi_f2d>
 800723a:	4602      	mov	r2, r0
 800723c:	460b      	mov	r3, r1
 800723e:	4620      	mov	r0, r4
 8007240:	4629      	mov	r1, r5
 8007242:	f7f9 f823 	bl	800028c <__adddf3>
 8007246:	4602      	mov	r2, r0
 8007248:	460b      	mov	r3, r1
 800724a:	4610      	mov	r0, r2
 800724c:	4619      	mov	r1, r3
 800724e:	f7f9 fccb 	bl	8000be8 <__aeabi_d2f>
 8007252:	4602      	mov	r2, r0
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
					pp->u4 = 0.707107 * ( pp->ruy + pp->rux) - (pp->outz * 1.0);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8007266:	ee77 7a27 	vadd.f32	s15, s14, s15
 800726a:	ee17 0a90 	vmov	r0, s15
 800726e:	f7f9 f96b 	bl	8000548 <__aeabi_f2d>
 8007272:	f20f 5330 	addw	r3, pc, #1328	; 0x530
 8007276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727a:	f7f9 f9bd 	bl	80005f8 <__aeabi_dmul>
 800727e:	4602      	mov	r2, r0
 8007280:	460b      	mov	r3, r1
 8007282:	4614      	mov	r4, r2
 8007284:	461d      	mov	r5, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800728c:	4618      	mov	r0, r3
 800728e:	f7f9 f95b 	bl	8000548 <__aeabi_f2d>
 8007292:	4602      	mov	r2, r0
 8007294:	460b      	mov	r3, r1
 8007296:	4620      	mov	r0, r4
 8007298:	4629      	mov	r1, r5
 800729a:	f7f8 fff5 	bl	8000288 <__aeabi_dsub>
 800729e:	4602      	mov	r2, r0
 80072a0:	460b      	mov	r3, r1
 80072a2:	4610      	mov	r0, r2
 80072a4:	4619      	mov	r1, r3
 80072a6:	f7f9 fc9f 	bl	8000be8 <__aeabi_d2f>
 80072aa:	4602      	mov	r2, r0
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4

					pp->v1 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u1;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80072be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80072c2:	ee17 0a90 	vmov	r0, s15
 80072c6:	f7f9 f93f 	bl	8000548 <__aeabi_f2d>
 80072ca:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 80072ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d2:	f7f9 f991 	bl	80005f8 <__aeabi_dmul>
 80072d6:	4602      	mov	r2, r0
 80072d8:	460b      	mov	r3, r1
 80072da:	4614      	mov	r4, r2
 80072dc:	461d      	mov	r5, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7f9 f92f 	bl	8000548 <__aeabi_f2d>
 80072ea:	4602      	mov	r2, r0
 80072ec:	460b      	mov	r3, r1
 80072ee:	4620      	mov	r0, r4
 80072f0:	4629      	mov	r1, r5
 80072f2:	f7f8 ffcb 	bl	800028c <__adddf3>
 80072f6:	4602      	mov	r2, r0
 80072f8:	460b      	mov	r3, r1
 80072fa:	4610      	mov	r0, r2
 80072fc:	4619      	mov	r1, r3
 80072fe:	f7f9 fc73 	bl	8000be8 <__aeabi_d2f>
 8007302:	4602      	mov	r2, r0
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u2;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8007316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800731a:	ee17 0a90 	vmov	r0, s15
 800731e:	f7f9 f913 	bl	8000548 <__aeabi_f2d>
 8007322:	f20f 4380 	addw	r3, pc, #1152	; 0x480
 8007326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732a:	f7f9 f965 	bl	80005f8 <__aeabi_dmul>
 800732e:	4602      	mov	r2, r0
 8007330:	460b      	mov	r3, r1
 8007332:	4614      	mov	r4, r2
 8007334:	461d      	mov	r5, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 800733c:	4618      	mov	r0, r3
 800733e:	f7f9 f903 	bl	8000548 <__aeabi_f2d>
 8007342:	4602      	mov	r2, r0
 8007344:	460b      	mov	r3, r1
 8007346:	4620      	mov	r0, r4
 8007348:	4629      	mov	r1, r5
 800734a:	f7f8 ff9f 	bl	800028c <__adddf3>
 800734e:	4602      	mov	r2, r0
 8007350:	460b      	mov	r3, r1
 8007352:	4610      	mov	r0, r2
 8007354:	4619      	mov	r1, r3
 8007356:	f7f9 fc47 	bl	8000be8 <__aeabi_d2f>
 800735a:	4602      	mov	r2, r0
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u3;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800736e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007372:	ee17 0a90 	vmov	r0, s15
 8007376:	f7f9 f8e7 	bl	8000548 <__aeabi_f2d>
 800737a:	f20f 4328 	addw	r3, pc, #1064	; 0x428
 800737e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007382:	f7f9 f939 	bl	80005f8 <__aeabi_dmul>
 8007386:	4602      	mov	r2, r0
 8007388:	460b      	mov	r3, r1
 800738a:	4614      	mov	r4, r2
 800738c:	461d      	mov	r5, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8007394:	4618      	mov	r0, r3
 8007396:	f7f9 f8d7 	bl	8000548 <__aeabi_f2d>
 800739a:	4602      	mov	r2, r0
 800739c:	460b      	mov	r3, r1
 800739e:	4620      	mov	r0, r4
 80073a0:	4629      	mov	r1, r5
 80073a2:	f7f8 ff73 	bl	800028c <__adddf3>
 80073a6:	4602      	mov	r2, r0
 80073a8:	460b      	mov	r3, r1
 80073aa:	4610      	mov	r0, r2
 80073ac:	4619      	mov	r1, r3
 80073ae:	f7f9 fc1b 	bl	8000be8 <__aeabi_d2f>
 80073b2:	4602      	mov	r2, r0
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
					pp->v4 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u4;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80073c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073ca:	ee17 0a90 	vmov	r0, s15
 80073ce:	f7f9 f8bb 	bl	8000548 <__aeabi_f2d>
 80073d2:	a3f4      	add	r3, pc, #976	; (adr r3, 80077a4 <PathPlan+0x1bbc>)
 80073d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d8:	f7f9 f90e 	bl	80005f8 <__aeabi_dmul>
 80073dc:	4602      	mov	r2, r0
 80073de:	460b      	mov	r3, r1
 80073e0:	4614      	mov	r4, r2
 80073e2:	461d      	mov	r5, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7f9 f8ac 	bl	8000548 <__aeabi_f2d>
 80073f0:	4602      	mov	r2, r0
 80073f2:	460b      	mov	r3, r1
 80073f4:	4620      	mov	r0, r4
 80073f6:	4629      	mov	r1, r5
 80073f8:	f7f8 ff48 	bl	800028c <__adddf3>
 80073fc:	4602      	mov	r2, r0
 80073fe:	460b      	mov	r3, r1
 8007400:	4610      	mov	r0, r2
 8007402:	4619      	mov	r1, r3
 8007404:	f7f9 fbf0 	bl	8000be8 <__aeabi_d2f>
 8007408:	4602      	mov	r2, r0
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
				}

			}
		}
	}
}
 8007410:	f001 bbcd 	b.w	8008bae <PathPlan+0x2fc6>
				} else if(pp->base_shape==1){
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 800741a:	2b01      	cmp	r3, #1
 800741c:	f041 83c7 	bne.w	8008bae <PathPlan+0x2fc6>
					pp->u1 = (0.866 * pp->ruy) - (0.5 * pp->rux) + (pp->outz * 1.0);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007426:	4618      	mov	r0, r3
 8007428:	f7f9 f88e 	bl	8000548 <__aeabi_f2d>
 800742c:	a3d8      	add	r3, pc, #864	; (adr r3, 8007790 <PathPlan+0x1ba8>)
 800742e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007432:	f7f9 f8e1 	bl	80005f8 <__aeabi_dmul>
 8007436:	4602      	mov	r2, r0
 8007438:	460b      	mov	r3, r1
 800743a:	4614      	mov	r4, r2
 800743c:	461d      	mov	r5, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007444:	4618      	mov	r0, r3
 8007446:	f7f9 f87f 	bl	8000548 <__aeabi_f2d>
 800744a:	f04f 0200 	mov.w	r2, #0
 800744e:	4bd2      	ldr	r3, [pc, #840]	; (8007798 <PathPlan+0x1bb0>)
 8007450:	f7f9 f8d2 	bl	80005f8 <__aeabi_dmul>
 8007454:	4602      	mov	r2, r0
 8007456:	460b      	mov	r3, r1
 8007458:	4620      	mov	r0, r4
 800745a:	4629      	mov	r1, r5
 800745c:	f7f8 ff14 	bl	8000288 <__aeabi_dsub>
 8007460:	4602      	mov	r2, r0
 8007462:	460b      	mov	r3, r1
 8007464:	4614      	mov	r4, r2
 8007466:	461d      	mov	r5, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800746e:	4618      	mov	r0, r3
 8007470:	f7f9 f86a 	bl	8000548 <__aeabi_f2d>
 8007474:	4602      	mov	r2, r0
 8007476:	460b      	mov	r3, r1
 8007478:	4620      	mov	r0, r4
 800747a:	4629      	mov	r1, r5
 800747c:	f7f8 ff06 	bl	800028c <__adddf3>
 8007480:	4602      	mov	r2, r0
 8007482:	460b      	mov	r3, r1
 8007484:	4610      	mov	r0, r2
 8007486:	4619      	mov	r1, r3
 8007488:	f7f9 fbae 	bl	8000be8 <__aeabi_d2f>
 800748c:	4602      	mov	r2, r0
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = (0.866 * pp->ruy) + (0.5 * pp->rux) - (pp->outz * 1.0);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800749a:	4618      	mov	r0, r3
 800749c:	f7f9 f854 	bl	8000548 <__aeabi_f2d>
 80074a0:	a3bb      	add	r3, pc, #748	; (adr r3, 8007790 <PathPlan+0x1ba8>)
 80074a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a6:	f7f9 f8a7 	bl	80005f8 <__aeabi_dmul>
 80074aa:	4602      	mov	r2, r0
 80074ac:	460b      	mov	r3, r1
 80074ae:	4614      	mov	r4, r2
 80074b0:	461d      	mov	r5, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7f9 f845 	bl	8000548 <__aeabi_f2d>
 80074be:	f04f 0200 	mov.w	r2, #0
 80074c2:	4bb5      	ldr	r3, [pc, #724]	; (8007798 <PathPlan+0x1bb0>)
 80074c4:	f7f9 f898 	bl	80005f8 <__aeabi_dmul>
 80074c8:	4602      	mov	r2, r0
 80074ca:	460b      	mov	r3, r1
 80074cc:	4620      	mov	r0, r4
 80074ce:	4629      	mov	r1, r5
 80074d0:	f7f8 fedc 	bl	800028c <__adddf3>
 80074d4:	4602      	mov	r2, r0
 80074d6:	460b      	mov	r3, r1
 80074d8:	4614      	mov	r4, r2
 80074da:	461d      	mov	r5, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7f9 f830 	bl	8000548 <__aeabi_f2d>
 80074e8:	4602      	mov	r2, r0
 80074ea:	460b      	mov	r3, r1
 80074ec:	4620      	mov	r0, r4
 80074ee:	4629      	mov	r1, r5
 80074f0:	f7f8 feca 	bl	8000288 <__aeabi_dsub>
 80074f4:	4602      	mov	r2, r0
 80074f6:	460b      	mov	r3, r1
 80074f8:	4610      	mov	r0, r2
 80074fa:	4619      	mov	r1, r3
 80074fc:	f7f9 fb74 	bl	8000be8 <__aeabi_d2f>
 8007500:	4602      	mov	r2, r0
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u3 = 1.0 * pp->rux + (pp->outz * 1.0);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	ed93 7ab2 	vldr	s14, [r3, #712]	; 0x2c8
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8007514:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	edc3 7ab8 	vstr	s15, [r3, #736]	; 0x2e0
					pp->v1 = (0.866 * pp->rvy) - (0.5 * pp->rvx) + pp->u1;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007524:	4618      	mov	r0, r3
 8007526:	f7f9 f80f 	bl	8000548 <__aeabi_f2d>
 800752a:	a399      	add	r3, pc, #612	; (adr r3, 8007790 <PathPlan+0x1ba8>)
 800752c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007530:	f7f9 f862 	bl	80005f8 <__aeabi_dmul>
 8007534:	4602      	mov	r2, r0
 8007536:	460b      	mov	r3, r1
 8007538:	4614      	mov	r4, r2
 800753a:	461d      	mov	r5, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8007542:	4618      	mov	r0, r3
 8007544:	f7f9 f800 	bl	8000548 <__aeabi_f2d>
 8007548:	f04f 0200 	mov.w	r2, #0
 800754c:	4b92      	ldr	r3, [pc, #584]	; (8007798 <PathPlan+0x1bb0>)
 800754e:	f7f9 f853 	bl	80005f8 <__aeabi_dmul>
 8007552:	4602      	mov	r2, r0
 8007554:	460b      	mov	r3, r1
 8007556:	4620      	mov	r0, r4
 8007558:	4629      	mov	r1, r5
 800755a:	f7f8 fe95 	bl	8000288 <__aeabi_dsub>
 800755e:	4602      	mov	r2, r0
 8007560:	460b      	mov	r3, r1
 8007562:	4614      	mov	r4, r2
 8007564:	461d      	mov	r5, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800756c:	4618      	mov	r0, r3
 800756e:	f7f8 ffeb 	bl	8000548 <__aeabi_f2d>
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	4620      	mov	r0, r4
 8007578:	4629      	mov	r1, r5
 800757a:	f7f8 fe87 	bl	800028c <__adddf3>
 800757e:	4602      	mov	r2, r0
 8007580:	460b      	mov	r3, r1
 8007582:	4610      	mov	r0, r2
 8007584:	4619      	mov	r1, r3
 8007586:	f7f9 fb2f 	bl	8000be8 <__aeabi_d2f>
 800758a:	4602      	mov	r2, r0
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = (0.866 * pp->rvy) + (0.5 * pp->rvx) + pp->u2;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007598:	4618      	mov	r0, r3
 800759a:	f7f8 ffd5 	bl	8000548 <__aeabi_f2d>
 800759e:	a37c      	add	r3, pc, #496	; (adr r3, 8007790 <PathPlan+0x1ba8>)
 80075a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a4:	f7f9 f828 	bl	80005f8 <__aeabi_dmul>
 80075a8:	4602      	mov	r2, r0
 80075aa:	460b      	mov	r3, r1
 80075ac:	4614      	mov	r4, r2
 80075ae:	461d      	mov	r5, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7f8 ffc6 	bl	8000548 <__aeabi_f2d>
 80075bc:	f04f 0200 	mov.w	r2, #0
 80075c0:	4b75      	ldr	r3, [pc, #468]	; (8007798 <PathPlan+0x1bb0>)
 80075c2:	f7f9 f819 	bl	80005f8 <__aeabi_dmul>
 80075c6:	4602      	mov	r2, r0
 80075c8:	460b      	mov	r3, r1
 80075ca:	4620      	mov	r0, r4
 80075cc:	4629      	mov	r1, r5
 80075ce:	f7f8 fe5d 	bl	800028c <__adddf3>
 80075d2:	4602      	mov	r2, r0
 80075d4:	460b      	mov	r3, r1
 80075d6:	4614      	mov	r4, r2
 80075d8:	461d      	mov	r5, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7f8 ffb1 	bl	8000548 <__aeabi_f2d>
 80075e6:	4602      	mov	r2, r0
 80075e8:	460b      	mov	r3, r1
 80075ea:	4620      	mov	r0, r4
 80075ec:	4629      	mov	r1, r5
 80075ee:	f7f8 fe4d 	bl	800028c <__adddf3>
 80075f2:	4602      	mov	r2, r0
 80075f4:	460b      	mov	r3, r1
 80075f6:	4610      	mov	r0, r2
 80075f8:	4619      	mov	r1, r3
 80075fa:	f7f9 faf5 	bl	8000be8 <__aeabi_d2f>
 80075fe:	4602      	mov	r2, r0
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 1.0 * pp->rvx + pp->u3;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	ed93 7ab4 	vldr	s14, [r3, #720]	; 0x2d0
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8007612:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	edc3 7abc 	vstr	s15, [r3, #752]	; 0x2f0
}
 800761c:	f001 bac7 	b.w	8008bae <PathPlan+0x2fc6>
			led3 = 1;
 8007620:	4a5e      	ldr	r2, [pc, #376]	; (800779c <PathPlan+0x1bb4>)
 8007622:	7853      	ldrb	r3, [r2, #1]
 8007624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007628:	7053      	strb	r3, [r2, #1]
			pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	331a      	adds	r3, #26
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4413      	add	r3, r2
 8007638:	ed93 7a00 	vldr	s14, [r3]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007642:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
			pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	3328      	adds	r3, #40	; 0x28
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	4413      	add	r3, r2
 800765a:	3304      	adds	r3, #4
 800765c:	ed93 7a00 	vldr	s14, [r3]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007666:	ee77 7a67 	vsub.f32	s15, s14, s15
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
			pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	3338      	adds	r3, #56	; 0x38
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4413      	add	r3, r2
 800767e:	ed93 7a00 	vldr	s14, [r3]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	edd3 7a04 	vldr	s15, [r3, #16]
 8007688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8007698:	eef0 7ae7 	vabs.f32	s15, s15
 800769c:	ee17 0a90 	vmov	r0, s15
 80076a0:	f7f8 ff52 	bl	8000548 <__aeabi_f2d>
 80076a4:	4604      	mov	r4, r0
 80076a6:	460d      	mov	r5, r1
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 80076ae:	eef0 7ae7 	vabs.f32	s15, s15
 80076b2:	ee17 0a90 	vmov	r0, s15
 80076b6:	f7f8 ff47 	bl	8000548 <__aeabi_f2d>
 80076ba:	4602      	mov	r2, r0
 80076bc:	460b      	mov	r3, r1
 80076be:	4620      	mov	r0, r4
 80076c0:	4629      	mov	r1, r5
 80076c2:	f7f8 fde3 	bl	800028c <__adddf3>
 80076c6:	4602      	mov	r2, r0
 80076c8:	460b      	mov	r3, r1
 80076ca:	4610      	mov	r0, r2
 80076cc:	4619      	mov	r1, r3
 80076ce:	f04f 0200 	mov.w	r2, #0
 80076d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80076d6:	f7f9 f8b9 	bl	800084c <__aeabi_ddiv>
 80076da:	4602      	mov	r2, r0
 80076dc:	460b      	mov	r3, r1
 80076de:	4614      	mov	r4, r2
 80076e0:	461d      	mov	r5, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80076e8:	4618      	mov	r0, r3
 80076ea:	f7f8 ff2d 	bl	8000548 <__aeabi_f2d>
 80076ee:	4602      	mov	r2, r0
 80076f0:	460b      	mov	r3, r1
 80076f2:	4620      	mov	r0, r4
 80076f4:	4629      	mov	r1, r5
 80076f6:	f7f9 f9f1 	bl	8000adc <__aeabi_dcmplt>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d013      	beq.n	8007728 <PathPlan+0x1b40>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8007706:	eeb0 7ae7 	vabs.f32	s14, s15
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 8007710:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007718:	d506      	bpl.n	8007728 <PathPlan+0x1b40>
				pp->pp_lck = 1.0;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007720:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007724:	601a      	str	r2, [r3, #0]
 8007726:	e005      	b.n	8007734 <PathPlan+0x1b4c>
				pp->pp_lck = 0.0;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800772e:	f04f 0200 	mov.w	r2, #0
 8007732:	601a      	str	r2, [r3, #0]
			pp->pp_lck_count = pp->pp_lck_count + 1.0;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800773a:	edd3 7a00 	vldr	s15, [r3]
 800773e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007742:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800774c:	edc3 7a00 	vstr	s15, [r3]
			if(pp->pp_lck_count <= 60.0)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007756:	edd3 7a00 	vldr	s15, [r3]
 800775a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80077a0 <PathPlan+0x1bb8>
 800775e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007766:	d821      	bhi.n	80077ac <PathPlan+0x1bc4>
				pp->pp_lck_cal = pp->pp_lck_cal + pp->pp_lck;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800776e:	ed93 7a00 	vldr	s14, [r3]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007778:	edd3 7a00 	vldr	s15, [r3]
 800777c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8007786:	edc3 7a00 	vstr	s15, [r3]
 800778a:	e045      	b.n	8007818 <PathPlan+0x1c30>
 800778c:	f3af 8000 	nop.w
 8007790:	a1cac083 	.word	0xa1cac083
 8007794:	3febb645 	.word	0x3febb645
 8007798:	3fe00000 	.word	0x3fe00000
 800779c:	40020814 	.word	0x40020814
 80077a0:	42700000 	.word	0x42700000
 80077a4:	dbf8b9bb 	.word	0xdbf8b9bb
 80077a8:	3fe6a09e 	.word	0x3fe6a09e
				pp->pp_lck_final = (pp->pp_lck_cal) / (pp->pp_lck_count) ;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80077b2:	edd3 6a00 	vldr	s13, [r3]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80077bc:	ed93 7a00 	vldr	s14, [r3]
 80077c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80077ca:	edc3 7a00 	vstr	s15, [r3]
				if(pp->pp_lck_final >= 0.95)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7f8 feb6 	bl	8000548 <__aeabi_f2d>
 80077dc:	f20f 4390 	addw	r3, pc, #1168	; 0x490
 80077e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e4:	f7f9 f98e 	bl	8000b04 <__aeabi_dcmpge>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d004      	beq.n	80077f8 <PathPlan+0x1c10>
					pp->pp_lck_enb = 1;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 80077f6:	e003      	b.n	8007800 <PathPlan+0x1c18>
					pp->pp_lck_enb = 0;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
				pp->pp_lck_count = 0.0;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007806:	f04f 0200 	mov.w	r2, #0
 800780a:	601a      	str	r2, [r3, #0]
				pp->pp_lck_cal   = 0.0;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8007812:	f04f 0200 	mov.w	r2, #0
 8007816:	601a      	str	r2, [r3, #0]
			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){ // Already almost at destination
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 800781e:	eef0 7ae7 	vabs.f32	s15, s15
 8007822:	ee17 0a90 	vmov	r0, s15
 8007826:	f7f8 fe8f 	bl	8000548 <__aeabi_f2d>
 800782a:	4604      	mov	r4, r0
 800782c:	460d      	mov	r5, r1
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8007834:	eef0 7ae7 	vabs.f32	s15, s15
 8007838:	ee17 0a90 	vmov	r0, s15
 800783c:	f7f8 fe84 	bl	8000548 <__aeabi_f2d>
 8007840:	4602      	mov	r2, r0
 8007842:	460b      	mov	r3, r1
 8007844:	4620      	mov	r0, r4
 8007846:	4629      	mov	r1, r5
 8007848:	f7f8 fd20 	bl	800028c <__adddf3>
 800784c:	4602      	mov	r2, r0
 800784e:	460b      	mov	r3, r1
 8007850:	4610      	mov	r0, r2
 8007852:	4619      	mov	r1, r3
 8007854:	f04f 0200 	mov.w	r2, #0
 8007858:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800785c:	f7f8 fff6 	bl	800084c <__aeabi_ddiv>
 8007860:	4602      	mov	r2, r0
 8007862:	460b      	mov	r3, r1
 8007864:	4614      	mov	r4, r2
 8007866:	461d      	mov	r5, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800786e:	4618      	mov	r0, r3
 8007870:	f7f8 fe6a 	bl	8000548 <__aeabi_f2d>
 8007874:	4602      	mov	r2, r0
 8007876:	460b      	mov	r3, r1
 8007878:	4620      	mov	r0, r4
 800787a:	4629      	mov	r1, r5
 800787c:	f7f9 f92e 	bl	8000adc <__aeabi_dcmplt>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	f000 85aa 	beq.w	80083dc <PathPlan+0x27f4>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 800788e:	eeb0 7ae7 	vabs.f32	s14, s15
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 8007898:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800789c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078a0:	f140 859c 	bpl.w	80083dc <PathPlan+0x27f4>
				if(pp->point_count < (pp->target_point - 2)){ // Checking is second last point or not
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80078b0:	3b02      	subs	r3, #2
 80078b2:	429a      	cmp	r2, r3
 80078b4:	f280 8286 	bge.w	8007dc4 <PathPlan+0x21dc>
					if(pp->target_accurate[pp->point_count] == 1.0){ // point_lock enable
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	3346      	adds	r3, #70	; 0x46
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	4413      	add	r3, r2
 80078c6:	3304      	adds	r3, #4
 80078c8:	edd3 7a00 	vldr	s15, [r3]
 80078cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078d0:	eef4 7a47 	vcmp.f32	s15, s14
 80078d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078d8:	f040 813b 	bne.w	8007b52 <PathPlan+0x1f6a>
						if(pp->pp_lck_enb == 1){ // After < tol some time, lck_enb = 1
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	f040 857a 	bne.w	80083dc <PathPlan+0x27f4>
							pp->point_count++; // Showing reached previous destination
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80078ee:	1c5a      	adds	r2, r3, #1
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
							pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	331a      	adds	r3, #26
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4413      	add	r3, r2
 8007904:	ed93 7a00 	vldr	s14, [r3]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800790e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
							pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	3328      	adds	r3, #40	; 0x28
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4413      	add	r3, r2
 8007926:	3304      	adds	r3, #4
 8007928:	ed93 7a00 	vldr	s14, [r3]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007932:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
							pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	3338      	adds	r3, #56	; 0x38
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4413      	add	r3, r2
 800794a:	ed93 7a00 	vldr	s14, [r3]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	edd3 7a04 	vldr	s15, [r3, #16]
 8007954:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
							if(pp->target_x[pp->point_count]-pp->real_x){
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	331a      	adds	r3, #26
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	ed93 7a00 	vldr	s14, [r3]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007976:	ee77 7a67 	vsub.f32	s15, s14, s15
 800797a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800797e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007982:	d03d      	beq.n	8007a00 <PathPlan+0x1e18>
										1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	331a      	adds	r3, #26
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	4413      	add	r3, r2
 8007992:	ed93 7a00 	vldr	s14, [r3]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800799c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079a0:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 80079a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_x[pp->point_count],
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	3384      	adds	r3, #132	; 0x84
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	3304      	adds	r3, #4
 80079bc:	edd3 7a00 	vldr	s15, [r3]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	edd3 6aa3 	vldr	s13, [r3, #652]	; 0x28c
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	ed93 6aa5 	vldr	s12, [r3, #660]	; 0x294
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	edd3 5aa7 	vldr	s11, [r3, #668]	; 0x29c
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80079d8:	4618      	mov	r0, r3
 80079da:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80079de:	eeb0 3a65 	vmov.f32	s6, s11
 80079e2:	eef0 2a46 	vmov.f32	s5, s12
 80079e6:	eeb0 2a66 	vmov.f32	s4, s13
 80079ea:	eef0 1a67 	vmov.f32	s3, s15
 80079ee:	eeb0 1a47 	vmov.f32	s2, s14
 80079f2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80079f6:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8007c78 <PathPlan+0x2090>
 80079fa:	f7fd fcf1 	bl	80053e0 <PIDGainInit>
 80079fe:	e028      	b.n	8007a52 <PathPlan+0x1e6a>
										pp->ku_x[pp->point_count],
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	3384      	adds	r3, #132	; 0x84
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4413      	add	r3, r2
 8007a0e:	3304      	adds	r3, #4
 8007a10:	edd3 7a00 	vldr	s15, [r3]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	ed93 7aa3 	vldr	s14, [r3, #652]	; 0x28c
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	edd3 6aa5 	vldr	s13, [r3, #660]	; 0x294
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	ed93 6aa7 	vldr	s12, [r3, #668]	; 0x29c
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007a32:	eeb0 3a46 	vmov.f32	s6, s12
 8007a36:	eef0 2a66 	vmov.f32	s5, s13
 8007a3a:	eeb0 2a47 	vmov.f32	s4, s14
 8007a3e:	eef0 1a67 	vmov.f32	s3, s15
 8007a42:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8007a46:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007a4a:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 8007c78 <PathPlan+0x2090>
 8007a4e:	f7fd fcc7 	bl	80053e0 <PIDGainInit>
							if(pp->target_y[pp->point_count]-pp->real_y){
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	3328      	adds	r3, #40	; 0x28
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	3304      	adds	r3, #4
 8007a62:	ed93 7a00 	vldr	s14, [r3]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007a6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a70:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a78:	d03d      	beq.n	8007af6 <PathPlan+0x1f0e>
										1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	3328      	adds	r3, #40	; 0x28
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	4413      	add	r3, r2
 8007a88:	3304      	adds	r3, #4
 8007a8a:	ed93 7a00 	vldr	s14, [r3]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007a94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a98:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 8007a9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007aa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_y[pp->point_count],
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	3394      	adds	r3, #148	; 0x94
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	4413      	add	r3, r2
 8007ab2:	edd3 7a00 	vldr	s15, [r3]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	edd3 6aa3 	vldr	s13, [r3, #652]	; 0x28c
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	ed93 6aa5 	vldr	s12, [r3, #660]	; 0x294
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	edd3 5aa7 	vldr	s11, [r3, #668]	; 0x29c
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007ace:	4618      	mov	r0, r3
 8007ad0:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007ad4:	eeb0 3a65 	vmov.f32	s6, s11
 8007ad8:	eef0 2a46 	vmov.f32	s5, s12
 8007adc:	eeb0 2a66 	vmov.f32	s4, s13
 8007ae0:	eef0 1a67 	vmov.f32	s3, s15
 8007ae4:	eeb0 1a47 	vmov.f32	s2, s14
 8007ae8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007aec:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8007c78 <PathPlan+0x2090>
 8007af0:	f7fd fc76 	bl	80053e0 <PIDGainInit>
 8007af4:	e027      	b.n	8007b46 <PathPlan+0x1f5e>
										pp->ku_y[pp->point_count],
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	3394      	adds	r3, #148	; 0x94
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4413      	add	r3, r2
 8007b04:	edd3 7a00 	vldr	s15, [r3]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	ed93 7aa3 	vldr	s14, [r3, #652]	; 0x28c
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	edd3 6aa5 	vldr	s13, [r3, #660]	; 0x294
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	ed93 6aa7 	vldr	s12, [r3, #668]	; 0x29c
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007b20:	4618      	mov	r0, r3
 8007b22:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007b26:	eeb0 3a46 	vmov.f32	s6, s12
 8007b2a:	eef0 2a66 	vmov.f32	s5, s13
 8007b2e:	eeb0 2a47 	vmov.f32	s4, s14
 8007b32:	eef0 1a67 	vmov.f32	s3, s15
 8007b36:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8007b3a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007b3e:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8007c78 <PathPlan+0x2090>
 8007b42:	f7fd fc4d 	bl	80053e0 <PIDGainInit>
							pp->pp_lck_enb = 0;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8007b4e:	f000 bc45 	b.w	80083dc <PathPlan+0x27f4>
						pp->point_count++; // Assuming reached previous point
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007b58:	1c5a      	adds	r2, r3, #1
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
						pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	331a      	adds	r3, #26
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	ed93 7a00 	vldr	s14, [r3]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007b78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
						pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	3328      	adds	r3, #40	; 0x28
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	4413      	add	r3, r2
 8007b90:	3304      	adds	r3, #4
 8007b92:	ed93 7a00 	vldr	s14, [r3]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007b9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
						pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	3338      	adds	r3, #56	; 0x38
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4413      	add	r3, r2
 8007bb4:	ed93 7a00 	vldr	s14, [r3]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	edd3 7a04 	vldr	s15, [r3, #16]
 8007bbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
						if(pp->target_x[pp->point_count]-pp->real_x){
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	331a      	adds	r3, #26
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	ed93 7a00 	vldr	s14, [r3]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007be4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bec:	d046      	beq.n	8007c7c <PathPlan+0x2094>
									1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	331a      	adds	r3, #26
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4413      	add	r3, r2
 8007bfc:	ed93 7a00 	vldr	s14, [r3]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007c06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c0a:	eef0 7ae7 	vabs.f32	s15, s15
							PIDGainInit(0.005,
 8007c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
									pp->ku_x[pp->point_count],
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
							PIDGainInit(0.005,
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	3384      	adds	r3, #132	; 0x84
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4413      	add	r3, r2
 8007c24:	3304      	adds	r3, #4
 8007c26:	edd3 7a00 	vldr	s15, [r3]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	edd3 6aa3 	vldr	s13, [r3, #652]	; 0x28c
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	ed93 6aa5 	vldr	s12, [r3, #660]	; 0x294
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	edd3 5aa7 	vldr	s11, [r3, #668]	; 0x29c
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007c42:	4618      	mov	r0, r3
 8007c44:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007c48:	eeb0 3a65 	vmov.f32	s6, s11
 8007c4c:	eef0 2a46 	vmov.f32	s5, s12
 8007c50:	eeb0 2a66 	vmov.f32	s4, s13
 8007c54:	eef0 1a67 	vmov.f32	s3, s15
 8007c58:	eeb0 1a47 	vmov.f32	s2, s14
 8007c5c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007c60:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8007c78 <PathPlan+0x2090>
 8007c64:	f7fd fbbc 	bl	80053e0 <PIDGainInit>
 8007c68:	e031      	b.n	8007cce <PathPlan+0x20e6>
 8007c6a:	bf00      	nop
 8007c6c:	f3af 8000 	nop.w
 8007c70:	66666666 	.word	0x66666666
 8007c74:	3fee6666 	.word	0x3fee6666
 8007c78:	3ba3d70a 	.word	0x3ba3d70a
									pp->ku_x[pp->point_count],
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
							PIDGainInit(0.005,
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	3384      	adds	r3, #132	; 0x84
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	4413      	add	r3, r2
 8007c8a:	3304      	adds	r3, #4
 8007c8c:	edd3 7a00 	vldr	s15, [r3]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	ed93 7aa3 	vldr	s14, [r3, #652]	; 0x28c
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	edd3 6aa5 	vldr	s13, [r3, #660]	; 0x294
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	ed93 6aa7 	vldr	s12, [r3, #668]	; 0x29c
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007ca8:	4618      	mov	r0, r3
 8007caa:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007cae:	eeb0 3a46 	vmov.f32	s6, s12
 8007cb2:	eef0 2a66 	vmov.f32	s5, s13
 8007cb6:	eeb0 2a47 	vmov.f32	s4, s14
 8007cba:	eef0 1a67 	vmov.f32	s3, s15
 8007cbe:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8007cc2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007cc6:	ed1f 0a14 	vldr	s0, [pc, #-80]	; 8007c78 <PathPlan+0x2090>
 8007cca:	f7fd fb89 	bl	80053e0 <PIDGainInit>
						if(pp->target_y[pp->point_count]-pp->real_y){
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	3328      	adds	r3, #40	; 0x28
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4413      	add	r3, r2
 8007cdc:	3304      	adds	r3, #4
 8007cde:	ed93 7a00 	vldr	s14, [r3]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007ce8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007cec:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cf4:	d03d      	beq.n	8007d72 <PathPlan+0x218a>
									1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	3328      	adds	r3, #40	; 0x28
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4413      	add	r3, r2
 8007d04:	3304      	adds	r3, #4
 8007d06:	ed93 7a00 	vldr	s14, [r3]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d14:	eef0 7ae7 	vabs.f32	s15, s15
							PIDGainInit(0.005,
 8007d18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
									pp->ku_y[pp->point_count],
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
							PIDGainInit(0.005,
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	3394      	adds	r3, #148	; 0x94
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	4413      	add	r3, r2
 8007d2e:	edd3 7a00 	vldr	s15, [r3]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	edd3 6aa3 	vldr	s13, [r3, #652]	; 0x28c
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	ed93 6aa5 	vldr	s12, [r3, #660]	; 0x294
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	edd3 5aa7 	vldr	s11, [r3, #668]	; 0x29c
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007d50:	eeb0 3a65 	vmov.f32	s6, s11
 8007d54:	eef0 2a46 	vmov.f32	s5, s12
 8007d58:	eeb0 2a66 	vmov.f32	s4, s13
 8007d5c:	eef0 1a67 	vmov.f32	s3, s15
 8007d60:	eeb0 1a47 	vmov.f32	s2, s14
 8007d64:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007d68:	ed1f 0a3d 	vldr	s0, [pc, #-244]	; 8007c78 <PathPlan+0x2090>
 8007d6c:	f7fd fb38 	bl	80053e0 <PIDGainInit>
 8007d70:	e334      	b.n	80083dc <PathPlan+0x27f4>
									pp->ku_y[pp->point_count],
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
							PIDGainInit(0.005,
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	3394      	adds	r3, #148	; 0x94
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4413      	add	r3, r2
 8007d80:	edd3 7a00 	vldr	s15, [r3]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	ed93 7aa3 	vldr	s14, [r3, #652]	; 0x28c
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	edd3 6aa5 	vldr	s13, [r3, #660]	; 0x294
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	ed93 6aa7 	vldr	s12, [r3, #668]	; 0x29c
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007da2:	eeb0 3a46 	vmov.f32	s6, s12
 8007da6:	eef0 2a66 	vmov.f32	s5, s13
 8007daa:	eeb0 2a47 	vmov.f32	s4, s14
 8007dae:	eef0 1a67 	vmov.f32	s3, s15
 8007db2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8007db6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007dba:	ed1f 0a51 	vldr	s0, [pc, #-324]	; 8007c78 <PathPlan+0x2090>
 8007dbe:	f7fd fb0f 	bl	80053e0 <PIDGainInit>
 8007dc2:	e30b      	b.n	80083dc <PathPlan+0x27f4>
				} else if(pp->point_count == (pp->target_point - 2)){ // Reached second last going last point
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007dd0:	3b02      	subs	r3, #2
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	f040 827e 	bne.w	80082d4 <PathPlan+0x26ec>
					if(pp->target_accurate[pp->point_count] == 1.0){ // point_lock enable
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	3346      	adds	r3, #70	; 0x46
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	4413      	add	r3, r2
 8007de6:	3304      	adds	r3, #4
 8007de8:	edd3 7a00 	vldr	s15, [r3]
 8007dec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007df0:	eef4 7a47 	vcmp.f32	s15, s14
 8007df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007df8:	f040 813a 	bne.w	8008070 <PathPlan+0x2488>
						if(pp->pp_lck_enb == 1){
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	f040 82ea 	bne.w	80083dc <PathPlan+0x27f4>
							pp->point_count++;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007e0e:	1c5a      	adds	r2, r3, #1
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
							pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	331a      	adds	r3, #26
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4413      	add	r3, r2
 8007e24:	ed93 7a00 	vldr	s14, [r3]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
							pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	3328      	adds	r3, #40	; 0x28
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	4413      	add	r3, r2
 8007e46:	3304      	adds	r3, #4
 8007e48:	ed93 7a00 	vldr	s14, [r3]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007e52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
							pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	3338      	adds	r3, #56	; 0x38
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4413      	add	r3, r2
 8007e6a:	ed93 7a00 	vldr	s14, [r3]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	edd3 7a04 	vldr	s15, [r3, #16]
 8007e74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
							if(pp->target_x[pp->point_count]-pp->real_x){
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	331a      	adds	r3, #26
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4413      	add	r3, r2
 8007e8c:	ed93 7a00 	vldr	s14, [r3]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007e96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e9a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ea2:	d03d      	beq.n	8007f20 <PathPlan+0x2338>
										1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	331a      	adds	r3, #26
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	4413      	add	r3, r2
 8007eb2:	ed93 7a00 	vldr	s14, [r3]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007ebc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ec0:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 8007ec4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ec8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_x[pp->point_count],
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	3384      	adds	r3, #132	; 0x84
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4413      	add	r3, r2
 8007eda:	3304      	adds	r3, #4
 8007edc:	edd3 7a00 	vldr	s15, [r3]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	edd3 6aa4 	vldr	s13, [r3, #656]	; 0x290
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	ed93 6aa6 	vldr	s12, [r3, #664]	; 0x298
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	edd3 5aa8 	vldr	s11, [r3, #672]	; 0x2a0
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007ef8:	4618      	mov	r0, r3
 8007efa:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007efe:	eeb0 3a65 	vmov.f32	s6, s11
 8007f02:	eef0 2a46 	vmov.f32	s5, s12
 8007f06:	eeb0 2a66 	vmov.f32	s4, s13
 8007f0a:	eef0 1a67 	vmov.f32	s3, s15
 8007f0e:	eeb0 1a47 	vmov.f32	s2, s14
 8007f12:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007f16:	ed1f 0aa8 	vldr	s0, [pc, #-672]	; 8007c78 <PathPlan+0x2090>
 8007f1a:	f7fd fa61 	bl	80053e0 <PIDGainInit>
 8007f1e:	e028      	b.n	8007f72 <PathPlan+0x238a>
										pp->ku_x[pp->point_count],
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	3384      	adds	r3, #132	; 0x84
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	4413      	add	r3, r2
 8007f2e:	3304      	adds	r3, #4
 8007f30:	edd3 7a00 	vldr	s15, [r3]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	ed93 7aa4 	vldr	s14, [r3, #656]	; 0x290
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	edd3 6aa6 	vldr	s13, [r3, #664]	; 0x298
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	ed93 6aa8 	vldr	s12, [r3, #672]	; 0x2a0
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007f52:	eeb0 3a46 	vmov.f32	s6, s12
 8007f56:	eef0 2a66 	vmov.f32	s5, s13
 8007f5a:	eeb0 2a47 	vmov.f32	s4, s14
 8007f5e:	eef0 1a67 	vmov.f32	s3, s15
 8007f62:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8007f66:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007f6a:	ed1f 0abd 	vldr	s0, [pc, #-756]	; 8007c78 <PathPlan+0x2090>
 8007f6e:	f7fd fa37 	bl	80053e0 <PIDGainInit>
							if(pp->target_y[pp->point_count]-pp->real_y){
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	3328      	adds	r3, #40	; 0x28
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4413      	add	r3, r2
 8007f80:	3304      	adds	r3, #4
 8007f82:	ed93 7a00 	vldr	s14, [r3]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007f8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f90:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f98:	d03d      	beq.n	8008016 <PathPlan+0x242e>
										1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	3328      	adds	r3, #40	; 0x28
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	4413      	add	r3, r2
 8007fa8:	3304      	adds	r3, #4
 8007faa:	ed93 7a00 	vldr	s14, [r3]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007fb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007fb8:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 8007fbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_y[pp->point_count],
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	3394      	adds	r3, #148	; 0x94
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	4413      	add	r3, r2
 8007fd2:	edd3 7a00 	vldr	s15, [r3]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	edd3 6aa4 	vldr	s13, [r3, #656]	; 0x290
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	ed93 6aa6 	vldr	s12, [r3, #664]	; 0x298
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	edd3 5aa8 	vldr	s11, [r3, #672]	; 0x2a0
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007fee:	4618      	mov	r0, r3
 8007ff0:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007ff4:	eeb0 3a65 	vmov.f32	s6, s11
 8007ff8:	eef0 2a46 	vmov.f32	s5, s12
 8007ffc:	eeb0 2a66 	vmov.f32	s4, s13
 8008000:	eef0 1a67 	vmov.f32	s3, s15
 8008004:	eeb0 1a47 	vmov.f32	s2, s14
 8008008:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800800c:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 80082d0 <PathPlan+0x26e8>
 8008010:	f7fd f9e6 	bl	80053e0 <PIDGainInit>
 8008014:	e027      	b.n	8008066 <PathPlan+0x247e>
										pp->ku_y[pp->point_count],
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	3394      	adds	r3, #148	; 0x94
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	4413      	add	r3, r2
 8008024:	edd3 7a00 	vldr	s15, [r3]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	ed93 7aa4 	vldr	s14, [r3, #656]	; 0x290
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	edd3 6aa6 	vldr	s13, [r3, #664]	; 0x298
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	ed93 6aa8 	vldr	s12, [r3, #672]	; 0x2a0
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8008040:	4618      	mov	r0, r3
 8008042:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8008046:	eeb0 3a46 	vmov.f32	s6, s12
 800804a:	eef0 2a66 	vmov.f32	s5, s13
 800804e:	eeb0 2a47 	vmov.f32	s4, s14
 8008052:	eef0 1a67 	vmov.f32	s3, s15
 8008056:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800805a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800805e:	ed9f 0a9c 	vldr	s0, [pc, #624]	; 80082d0 <PathPlan+0x26e8>
 8008062:	f7fd f9bd 	bl	80053e0 <PIDGainInit>
							pp->pp_lck_enb = 0;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 800806e:	e1b5      	b.n	80083dc <PathPlan+0x27f4>
						pp->point_count++;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008076:	1c5a      	adds	r2, r3, #1
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
						pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	331a      	adds	r3, #26
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	4413      	add	r3, r2
 800808c:	ed93 7a00 	vldr	s14, [r3]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008096:	ee77 7a67 	vsub.f32	s15, s14, s15
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
						pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	3328      	adds	r3, #40	; 0x28
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	4413      	add	r3, r2
 80080ae:	3304      	adds	r3, #4
 80080b0:	ed93 7a00 	vldr	s14, [r3]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80080ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
						pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	3338      	adds	r3, #56	; 0x38
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	4413      	add	r3, r2
 80080d2:	ed93 7a00 	vldr	s14, [r3]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80080dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
						if(pp->target_x[pp->point_count]-pp->real_x){
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	331a      	adds	r3, #26
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	4413      	add	r3, r2
 80080f4:	ed93 7a00 	vldr	s14, [r3]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80080fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008102:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800810a:	d03d      	beq.n	8008188 <PathPlan+0x25a0>
									1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	331a      	adds	r3, #26
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	4413      	add	r3, r2
 800811a:	ed93 7a00 	vldr	s14, [r3]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008124:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008128:	eef0 7ae7 	vabs.f32	s15, s15
							PIDGainInit(0.005,
 800812c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008130:	ee86 7aa7 	vdiv.f32	s14, s13, s15
									pp->ku_x[pp->point_count],
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
							PIDGainInit(0.005,
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	3384      	adds	r3, #132	; 0x84
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4413      	add	r3, r2
 8008142:	3304      	adds	r3, #4
 8008144:	edd3 7a00 	vldr	s15, [r3]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	edd3 6aa4 	vldr	s13, [r3, #656]	; 0x290
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	ed93 6aa6 	vldr	s12, [r3, #664]	; 0x298
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	edd3 5aa8 	vldr	s11, [r3, #672]	; 0x2a0
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8008160:	4618      	mov	r0, r3
 8008162:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8008166:	eeb0 3a65 	vmov.f32	s6, s11
 800816a:	eef0 2a46 	vmov.f32	s5, s12
 800816e:	eeb0 2a66 	vmov.f32	s4, s13
 8008172:	eef0 1a67 	vmov.f32	s3, s15
 8008176:	eeb0 1a47 	vmov.f32	s2, s14
 800817a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800817e:	ed9f 0a54 	vldr	s0, [pc, #336]	; 80082d0 <PathPlan+0x26e8>
 8008182:	f7fd f92d 	bl	80053e0 <PIDGainInit>
 8008186:	e028      	b.n	80081da <PathPlan+0x25f2>
									pp->ku_x[pp->point_count],
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
							PIDGainInit(0.005,
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	3384      	adds	r3, #132	; 0x84
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	4413      	add	r3, r2
 8008196:	3304      	adds	r3, #4
 8008198:	edd3 7a00 	vldr	s15, [r3]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	ed93 7aa4 	vldr	s14, [r3, #656]	; 0x290
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	edd3 6aa6 	vldr	s13, [r3, #664]	; 0x298
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	ed93 6aa8 	vldr	s12, [r3, #672]	; 0x2a0
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80081b4:	4618      	mov	r0, r3
 80081b6:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80081ba:	eeb0 3a46 	vmov.f32	s6, s12
 80081be:	eef0 2a66 	vmov.f32	s5, s13
 80081c2:	eeb0 2a47 	vmov.f32	s4, s14
 80081c6:	eef0 1a67 	vmov.f32	s3, s15
 80081ca:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80081ce:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80081d2:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 80082d0 <PathPlan+0x26e8>
 80081d6:	f7fd f903 	bl	80053e0 <PIDGainInit>
						if(pp->target_y[pp->point_count]-pp->real_y){
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	3328      	adds	r3, #40	; 0x28
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4413      	add	r3, r2
 80081e8:	3304      	adds	r3, #4
 80081ea:	ed93 7a00 	vldr	s14, [r3]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80081f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80081f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80081fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008200:	d03d      	beq.n	800827e <PathPlan+0x2696>
									1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	3328      	adds	r3, #40	; 0x28
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	4413      	add	r3, r2
 8008210:	3304      	adds	r3, #4
 8008212:	ed93 7a00 	vldr	s14, [r3]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800821c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008220:	eef0 7ae7 	vabs.f32	s15, s15
							PIDGainInit(0.005,
 8008224:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008228:	ee86 7aa7 	vdiv.f32	s14, s13, s15
									pp->ku_y[pp->point_count],
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
							PIDGainInit(0.005,
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	3394      	adds	r3, #148	; 0x94
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	4413      	add	r3, r2
 800823a:	edd3 7a00 	vldr	s15, [r3]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	edd3 6aa4 	vldr	s13, [r3, #656]	; 0x290
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	ed93 6aa6 	vldr	s12, [r3, #664]	; 0x298
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	edd3 5aa8 	vldr	s11, [r3, #672]	; 0x2a0
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8008256:	4618      	mov	r0, r3
 8008258:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 800825c:	eeb0 3a65 	vmov.f32	s6, s11
 8008260:	eef0 2a46 	vmov.f32	s5, s12
 8008264:	eeb0 2a66 	vmov.f32	s4, s13
 8008268:	eef0 1a67 	vmov.f32	s3, s15
 800826c:	eeb0 1a47 	vmov.f32	s2, s14
 8008270:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8008274:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80082d0 <PathPlan+0x26e8>
 8008278:	f7fd f8b2 	bl	80053e0 <PIDGainInit>
 800827c:	e0ae      	b.n	80083dc <PathPlan+0x27f4>
									pp->ku_y[pp->point_count],
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
							PIDGainInit(0.005,
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	3394      	adds	r3, #148	; 0x94
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	4413      	add	r3, r2
 800828c:	edd3 7a00 	vldr	s15, [r3]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	ed93 7aa4 	vldr	s14, [r3, #656]	; 0x290
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	edd3 6aa6 	vldr	s13, [r3, #664]	; 0x298
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	ed93 6aa8 	vldr	s12, [r3, #672]	; 0x2a0
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80082a8:	4618      	mov	r0, r3
 80082aa:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80082ae:	eeb0 3a46 	vmov.f32	s6, s12
 80082b2:	eef0 2a66 	vmov.f32	s5, s13
 80082b6:	eeb0 2a47 	vmov.f32	s4, s14
 80082ba:	eef0 1a67 	vmov.f32	s3, s15
 80082be:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80082c2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80082c6:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80082d0 <PathPlan+0x26e8>
 80082ca:	f7fd f889 	bl	80053e0 <PIDGainInit>
 80082ce:	e085      	b.n	80083dc <PathPlan+0x27f4>
 80082d0:	3ba3d70a 	.word	0x3ba3d70a
				}else if(fabs(pp->error_x)<pp->f_tol_xy && fabs(pp->error_y)<pp->f_tol_xy && (int)pp->error_z<=pp->f_tol_z){ // Reached last point
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 80082da:	eeb0 7ae7 	vabs.f32	s14, s15
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 80082e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80082e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ec:	d576      	bpl.n	80083dc <PathPlan+0x27f4>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 80082f4:	eeb0 7ae7 	vabs.f32	s14, s15
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 80082fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008306:	d569      	bpl.n	80083dc <PathPlan+0x27f4>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 800830e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008312:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	edd3 7ac1 	vldr	s15, [r3, #772]	; 0x304
 800831c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008324:	d85a      	bhi.n	80083dc <PathPlan+0x27f4>
					if(pp->target_accurate[pp->point_count] == 1.0){
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	3346      	adds	r3, #70	; 0x46
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4413      	add	r3, r2
 8008334:	3304      	adds	r3, #4
 8008336:	edd3 7a00 	vldr	s15, [r3]
 800833a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800833e:	eef4 7a47 	vcmp.f32	s15, s14
 8008342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008346:	d129      	bne.n	800839c <PathPlan+0x27b4>
						if(pp->pp_lck_enb == 1){
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 800834e:	2b01      	cmp	r3, #1
 8008350:	d144      	bne.n	80083dc <PathPlan+0x27f4>
							VESCNavStop();
 8008352:	f005 fadd 	bl	800d910 <VESCNavStop>
							led3 = 0;
 8008356:	4a70      	ldr	r2, [pc, #448]	; (8008518 <PathPlan+0x2930>)
 8008358:	7853      	ldrb	r3, [r2, #1]
 800835a:	f36f 13c7 	bfc	r3, #7, #1
 800835e:	7053      	strb	r3, [r2, #1]
							PIDDelayInit(&(pp->x));
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8008366:	4618      	mov	r0, r3
 8008368:	f7fd f9bf 	bl	80056ea <PIDDelayInit>
							PIDDelayInit(&(pp->y));
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8008372:	4618      	mov	r0, r3
 8008374:	f7fd f9b9 	bl	80056ea <PIDDelayInit>
							PIDDelayInit(&(pp->z));
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800837e:	4618      	mov	r0, r3
 8008380:	f7fd f9b3 	bl	80056ea <PIDDelayInit>
							pp->pp_start=0;
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 800838a:	f36f 0300 	bfc	r3, #0, #1
 800838e:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
							pp->pp_lck_enb = 0;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 800839a:	e01f      	b.n	80083dc <PathPlan+0x27f4>
						led3 = 0;
 800839c:	4a5e      	ldr	r2, [pc, #376]	; (8008518 <PathPlan+0x2930>)
 800839e:	7853      	ldrb	r3, [r2, #1]
 80083a0:	f36f 13c7 	bfc	r3, #7, #1
 80083a4:	7053      	strb	r3, [r2, #1]
						VESCNavStop();
 80083a6:	f005 fab3 	bl	800d910 <VESCNavStop>
						PIDDelayInit(&(pp->x));
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7fd f99a 	bl	80056ea <PIDDelayInit>
						PIDDelayInit(&(pp->y));
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80083bc:	4618      	mov	r0, r3
 80083be:	f7fd f994 	bl	80056ea <PIDDelayInit>
						PIDDelayInit(&(pp->z));
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7fd f98e 	bl	80056ea <PIDDelayInit>
						pp->pp_start=0;
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 80083d4:	f36f 0300 	bfc	r3, #0, #1
 80083d8:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
			if(pp->pp_start){
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 80083e2:	f003 0301 	and.w	r3, r3, #1
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f000 83e0 	beq.w	8008bae <PathPlan+0x2fc6>
				pp->dx = pp->target_x[pp->point_count] - pp->prev_real_x;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	331a      	adds	r3, #26
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4413      	add	r3, r2
 80083fc:	ed93 7a00 	vldr	s14, [r3]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8008406:	ee77 7a67 	vsub.f32	s15, s14, s15
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
				pp->dy = pp->target_y[pp->point_count] - pp->prev_real_y;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	3328      	adds	r3, #40	; 0x28
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4413      	add	r3, r2
 800841e:	3304      	adds	r3, #4
 8008420:	ed93 7a00 	vldr	s14, [r3]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800842a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
				pp->rotate=0;
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 800843a:	f36f 03c3 	bfc	r3, #3, #1
 800843e:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
				if ((pp->dx != 0.0 || pp->dx != -0.0)&&(pp->dy != -0.0 || pp->dy != 0.0)){
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008448:	eef5 7a40 	vcmp.f32	s15, #0.0
 800844c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008450:	d107      	bne.n	8008462 <PathPlan+0x287a>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008458:	eef5 7a40 	vcmp.f32	s15, #0.0
 800845c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008460:	d021      	beq.n	80084a6 <PathPlan+0x28be>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008468:	eef5 7a40 	vcmp.f32	s15, #0.0
 800846c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008470:	d107      	bne.n	8008482 <PathPlan+0x289a>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008478:	eef5 7a40 	vcmp.f32	s15, #0.0
 800847c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008480:	d011      	beq.n	80084a6 <PathPlan+0x28be>
					pp->heading = atan2f(pp->dy, pp->dx);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800848e:	eef0 0a47 	vmov.f32	s1, s14
 8008492:	eeb0 0a67 	vmov.f32	s0, s15
 8008496:	f015 fc79 	bl	801dd8c <atan2f>
 800849a:	eef0 7a40 	vmov.f32	s15, s0
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
 80084a4:	e049      	b.n	800853a <PathPlan+0x2952>
					if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy < 0.0) {
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80084ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80084b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084b4:	d007      	beq.n	80084c6 <PathPlan+0x28de>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80084bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80084c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084c4:	d10b      	bne.n	80084de <PathPlan+0x28f6>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80084cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80084d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084d4:	d503      	bpl.n	80084de <PathPlan+0x28f6>
						pp->heading = 1.5708;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a10      	ldr	r2, [pc, #64]	; (800851c <PathPlan+0x2934>)
 80084da:	65da      	str	r2, [r3, #92]	; 0x5c
 80084dc:	e02d      	b.n	800853a <PathPlan+0x2952>
					} else if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy > 0.0) {
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80084e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80084e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ec:	d007      	beq.n	80084fe <PathPlan+0x2916>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80084f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80084f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084fc:	d112      	bne.n	8008524 <PathPlan+0x293c>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008504:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800850c:	dd0a      	ble.n	8008524 <PathPlan+0x293c>
						pp->heading = -1.5708;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a03      	ldr	r2, [pc, #12]	; (8008520 <PathPlan+0x2938>)
 8008512:	65da      	str	r2, [r3, #92]	; 0x5c
 8008514:	e011      	b.n	800853a <PathPlan+0x2952>
 8008516:	bf00      	nop
 8008518:	40020814 	.word	0x40020814
 800851c:	3fc90ff9 	.word	0x3fc90ff9
 8008520:	bfc90ff9 	.word	0xbfc90ff9
						pp->heading = 0.0;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f04f 0200 	mov.w	r2, #0
 800852a:	65da      	str	r2, [r3, #92]	; 0x5c
						pp->rotate = 1;
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8008532:	f043 0308 	orr.w	r3, r3, #8
 8008536:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
				pp->vx  = pp->target_vel[pp->point_count] * cosf(pp->heading);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	3374      	adds	r3, #116	; 0x74
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	4413      	add	r3, r2
 8008548:	ed93 8a00 	vldr	s16, [r3]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8008552:	eeb0 0a67 	vmov.f32	s0, s15
 8008556:	f015 faad 	bl	801dab4 <cosf>
 800855a:	eef0 7a40 	vmov.f32	s15, s0
 800855e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
				pp->vy  = pp->target_vel[pp->point_count] * sinf(pp->heading);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	3374      	adds	r3, #116	; 0x74
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4413      	add	r3, r2
 8008576:	ed93 8a00 	vldr	s16, [r3]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8008580:	eeb0 0a67 	vmov.f32	s0, s15
 8008584:	f015 fade 	bl	801db44 <sinf>
 8008588:	eef0 7a40 	vmov.f32	s15, s0
 800858c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
				if(pp->rotate){
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800859c:	f003 0308 	and.w	r3, r3, #8
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d007      	beq.n	80085b6 <PathPlan+0x29ce>
					pp->vx = pp->vy = 0.0;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f04f 0200 	mov.w	r2, #0
 80085ac:	665a      	str	r2, [r3, #100]	; 0x64
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	661a      	str	r2, [r3, #96]	; 0x60
				PID(&(pp->x));
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80085bc:	4618      	mov	r0, r3
 80085be:	f7fd f8b2 	bl	8005726 <PID>
				PID(&(pp->y));
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7fd f8ac 	bl	8005726 <PID>
				PID(&(pp->z));
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7fd f8a6 	bl	8005726 <PID>
				pp->rux =   pp->outx*cosf(pp->real_z_rad) - pp->outy*sinf(pp->real_z_rad);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	edd3 7a06 	vldr	s15, [r3, #24]
 80085e6:	eeb0 0a67 	vmov.f32	s0, s15
 80085ea:	f015 fa63 	bl	801dab4 <cosf>
 80085ee:	eef0 7a40 	vmov.f32	s15, s0
 80085f2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	edd3 7a06 	vldr	s15, [r3, #24]
 8008602:	eeb0 0a67 	vmov.f32	s0, s15
 8008606:	f015 fa9d 	bl	801db44 <sinf>
 800860a:	eef0 7a40 	vmov.f32	s15, s0
 800860e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8008612:	ee78 7a67 	vsub.f32	s15, s16, s15
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
				pp->ruy =   pp->outx*sinf(pp->real_z_rad) + pp->outy*cosf(pp->real_z_rad);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	edd3 7a06 	vldr	s15, [r3, #24]
 8008628:	eeb0 0a67 	vmov.f32	s0, s15
 800862c:	f015 fa8a 	bl	801db44 <sinf>
 8008630:	eef0 7a40 	vmov.f32	s15, s0
 8008634:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	edd3 7a06 	vldr	s15, [r3, #24]
 8008644:	eeb0 0a67 	vmov.f32	s0, s15
 8008648:	f015 fa34 	bl	801dab4 <cosf>
 800864c:	eef0 7a40 	vmov.f32	s15, s0
 8008650:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8008654:	ee78 7a27 	vadd.f32	s15, s16, s15
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	edc3 7ab3 	vstr	s15, [r3, #716]	; 0x2cc
				pp->rvx =   pp->vx*cosf(pp->real_z_rad) - pp->vy*sinf(pp->real_z_rad);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	edd3 7a06 	vldr	s15, [r3, #24]
 800866a:	eeb0 0a67 	vmov.f32	s0, s15
 800866e:	f015 fa21 	bl	801dab4 <cosf>
 8008672:	eef0 7a40 	vmov.f32	s15, s0
 8008676:	ee28 8a27 	vmul.f32	s16, s16, s15
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	edd3 7a06 	vldr	s15, [r3, #24]
 8008686:	eeb0 0a67 	vmov.f32	s0, s15
 800868a:	f015 fa5b 	bl	801db44 <sinf>
 800868e:	eef0 7a40 	vmov.f32	s15, s0
 8008692:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8008696:	ee78 7a67 	vsub.f32	s15, s16, s15
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	edc3 7ab4 	vstr	s15, [r3, #720]	; 0x2d0
				pp->rvy =   pp->vx*sinf(pp->real_z_rad) + pp->vy*cosf(pp->real_z_rad);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	edd3 7a06 	vldr	s15, [r3, #24]
 80086ac:	eeb0 0a67 	vmov.f32	s0, s15
 80086b0:	f015 fa48 	bl	801db44 <sinf>
 80086b4:	eef0 7a40 	vmov.f32	s15, s0
 80086b8:	ee28 8a27 	vmul.f32	s16, s16, s15
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	edd3 7a06 	vldr	s15, [r3, #24]
 80086c8:	eeb0 0a67 	vmov.f32	s0, s15
 80086cc:	f015 f9f2 	bl	801dab4 <cosf>
 80086d0:	eef0 7a40 	vmov.f32	s15, s0
 80086d4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80086d8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	edc3 7ab5 	vstr	s15, [r3, #724]	; 0x2d4
				if(pp->base_shape== 0){
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f040 815c 	bne.w	80089a6 <PathPlan+0x2dbe>
					pp->u1 = 0.707107 * ( pp->ruy - pp->rux) - (pp->outz * 1.0);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 80086fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80086fe:	ee17 0a90 	vmov	r0, s15
 8008702:	f7f7 ff21 	bl	8000548 <__aeabi_f2d>
 8008706:	f20f 43c4 	addw	r3, pc, #1220	; 0x4c4
 800870a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870e:	f7f7 ff73 	bl	80005f8 <__aeabi_dmul>
 8008712:	4602      	mov	r2, r0
 8008714:	460b      	mov	r3, r1
 8008716:	4614      	mov	r4, r2
 8008718:	461d      	mov	r5, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008720:	4618      	mov	r0, r3
 8008722:	f7f7 ff11 	bl	8000548 <__aeabi_f2d>
 8008726:	4602      	mov	r2, r0
 8008728:	460b      	mov	r3, r1
 800872a:	4620      	mov	r0, r4
 800872c:	4629      	mov	r1, r5
 800872e:	f7f7 fdab 	bl	8000288 <__aeabi_dsub>
 8008732:	4602      	mov	r2, r0
 8008734:	460b      	mov	r3, r1
 8008736:	4610      	mov	r0, r2
 8008738:	4619      	mov	r1, r3
 800873a:	f7f8 fa55 	bl	8000be8 <__aeabi_d2f>
 800873e:	4602      	mov	r2, r0
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = 0.707107 * ( pp->ruy + pp->rux) + (pp->outz * 1.0);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8008752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008756:	ee17 0a90 	vmov	r0, s15
 800875a:	f7f7 fef5 	bl	8000548 <__aeabi_f2d>
 800875e:	f20f 436c 	addw	r3, pc, #1132	; 0x46c
 8008762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008766:	f7f7 ff47 	bl	80005f8 <__aeabi_dmul>
 800876a:	4602      	mov	r2, r0
 800876c:	460b      	mov	r3, r1
 800876e:	4614      	mov	r4, r2
 8008770:	461d      	mov	r5, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008778:	4618      	mov	r0, r3
 800877a:	f7f7 fee5 	bl	8000548 <__aeabi_f2d>
 800877e:	4602      	mov	r2, r0
 8008780:	460b      	mov	r3, r1
 8008782:	4620      	mov	r0, r4
 8008784:	4629      	mov	r1, r5
 8008786:	f7f7 fd81 	bl	800028c <__adddf3>
 800878a:	4602      	mov	r2, r0
 800878c:	460b      	mov	r3, r1
 800878e:	4610      	mov	r0, r2
 8008790:	4619      	mov	r1, r3
 8008792:	f7f8 fa29 	bl	8000be8 <__aeabi_d2f>
 8008796:	4602      	mov	r2, r0
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u3 = 0.707107 * ( pp->ruy - pp->rux) + (pp->outz * 1.0);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 80087aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80087ae:	ee17 0a90 	vmov	r0, s15
 80087b2:	f7f7 fec9 	bl	8000548 <__aeabi_f2d>
 80087b6:	f20f 4314 	addw	r3, pc, #1044	; 0x414
 80087ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087be:	f7f7 ff1b 	bl	80005f8 <__aeabi_dmul>
 80087c2:	4602      	mov	r2, r0
 80087c4:	460b      	mov	r3, r1
 80087c6:	4614      	mov	r4, r2
 80087c8:	461d      	mov	r5, r3
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7f7 feb9 	bl	8000548 <__aeabi_f2d>
 80087d6:	4602      	mov	r2, r0
 80087d8:	460b      	mov	r3, r1
 80087da:	4620      	mov	r0, r4
 80087dc:	4629      	mov	r1, r5
 80087de:	f7f7 fd55 	bl	800028c <__adddf3>
 80087e2:	4602      	mov	r2, r0
 80087e4:	460b      	mov	r3, r1
 80087e6:	4610      	mov	r0, r2
 80087e8:	4619      	mov	r1, r3
 80087ea:	f7f8 f9fd 	bl	8000be8 <__aeabi_d2f>
 80087ee:	4602      	mov	r2, r0
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
					pp->u4 = 0.707107 * ( pp->ruy + pp->rux) - (pp->outz * 1.0);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8008802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008806:	ee17 0a90 	vmov	r0, s15
 800880a:	f7f7 fe9d 	bl	8000548 <__aeabi_f2d>
 800880e:	a3ef      	add	r3, pc, #956	; (adr r3, 8008bcc <PathPlan+0x2fe4>)
 8008810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008814:	f7f7 fef0 	bl	80005f8 <__aeabi_dmul>
 8008818:	4602      	mov	r2, r0
 800881a:	460b      	mov	r3, r1
 800881c:	4614      	mov	r4, r2
 800881e:	461d      	mov	r5, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008826:	4618      	mov	r0, r3
 8008828:	f7f7 fe8e 	bl	8000548 <__aeabi_f2d>
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	4620      	mov	r0, r4
 8008832:	4629      	mov	r1, r5
 8008834:	f7f7 fd28 	bl	8000288 <__aeabi_dsub>
 8008838:	4602      	mov	r2, r0
 800883a:	460b      	mov	r3, r1
 800883c:	4610      	mov	r0, r2
 800883e:	4619      	mov	r1, r3
 8008840:	f7f8 f9d2 	bl	8000be8 <__aeabi_d2f>
 8008844:	4602      	mov	r2, r0
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
					pp->v1 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u1;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8008858:	ee77 7a67 	vsub.f32	s15, s14, s15
 800885c:	ee17 0a90 	vmov	r0, s15
 8008860:	f7f7 fe72 	bl	8000548 <__aeabi_f2d>
 8008864:	a3d9      	add	r3, pc, #868	; (adr r3, 8008bcc <PathPlan+0x2fe4>)
 8008866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886a:	f7f7 fec5 	bl	80005f8 <__aeabi_dmul>
 800886e:	4602      	mov	r2, r0
 8008870:	460b      	mov	r3, r1
 8008872:	4614      	mov	r4, r2
 8008874:	461d      	mov	r5, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800887c:	4618      	mov	r0, r3
 800887e:	f7f7 fe63 	bl	8000548 <__aeabi_f2d>
 8008882:	4602      	mov	r2, r0
 8008884:	460b      	mov	r3, r1
 8008886:	4620      	mov	r0, r4
 8008888:	4629      	mov	r1, r5
 800888a:	f7f7 fcff 	bl	800028c <__adddf3>
 800888e:	4602      	mov	r2, r0
 8008890:	460b      	mov	r3, r1
 8008892:	4610      	mov	r0, r2
 8008894:	4619      	mov	r1, r3
 8008896:	f7f8 f9a7 	bl	8000be8 <__aeabi_d2f>
 800889a:	4602      	mov	r2, r0
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u2;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80088ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088b2:	ee17 0a90 	vmov	r0, s15
 80088b6:	f7f7 fe47 	bl	8000548 <__aeabi_f2d>
 80088ba:	a3c4      	add	r3, pc, #784	; (adr r3, 8008bcc <PathPlan+0x2fe4>)
 80088bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c0:	f7f7 fe9a 	bl	80005f8 <__aeabi_dmul>
 80088c4:	4602      	mov	r2, r0
 80088c6:	460b      	mov	r3, r1
 80088c8:	4614      	mov	r4, r2
 80088ca:	461d      	mov	r5, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7f7 fe38 	bl	8000548 <__aeabi_f2d>
 80088d8:	4602      	mov	r2, r0
 80088da:	460b      	mov	r3, r1
 80088dc:	4620      	mov	r0, r4
 80088de:	4629      	mov	r1, r5
 80088e0:	f7f7 fcd4 	bl	800028c <__adddf3>
 80088e4:	4602      	mov	r2, r0
 80088e6:	460b      	mov	r3, r1
 80088e8:	4610      	mov	r0, r2
 80088ea:	4619      	mov	r1, r3
 80088ec:	f7f8 f97c 	bl	8000be8 <__aeabi_d2f>
 80088f0:	4602      	mov	r2, r0
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u3;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8008904:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008908:	ee17 0a90 	vmov	r0, s15
 800890c:	f7f7 fe1c 	bl	8000548 <__aeabi_f2d>
 8008910:	a3ae      	add	r3, pc, #696	; (adr r3, 8008bcc <PathPlan+0x2fe4>)
 8008912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008916:	f7f7 fe6f 	bl	80005f8 <__aeabi_dmul>
 800891a:	4602      	mov	r2, r0
 800891c:	460b      	mov	r3, r1
 800891e:	4614      	mov	r4, r2
 8008920:	461d      	mov	r5, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8008928:	4618      	mov	r0, r3
 800892a:	f7f7 fe0d 	bl	8000548 <__aeabi_f2d>
 800892e:	4602      	mov	r2, r0
 8008930:	460b      	mov	r3, r1
 8008932:	4620      	mov	r0, r4
 8008934:	4629      	mov	r1, r5
 8008936:	f7f7 fca9 	bl	800028c <__adddf3>
 800893a:	4602      	mov	r2, r0
 800893c:	460b      	mov	r3, r1
 800893e:	4610      	mov	r0, r2
 8008940:	4619      	mov	r1, r3
 8008942:	f7f8 f951 	bl	8000be8 <__aeabi_d2f>
 8008946:	4602      	mov	r2, r0
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
					pp->v4 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u4;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800895a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800895e:	ee17 0a90 	vmov	r0, s15
 8008962:	f7f7 fdf1 	bl	8000548 <__aeabi_f2d>
 8008966:	a399      	add	r3, pc, #612	; (adr r3, 8008bcc <PathPlan+0x2fe4>)
 8008968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896c:	f7f7 fe44 	bl	80005f8 <__aeabi_dmul>
 8008970:	4602      	mov	r2, r0
 8008972:	460b      	mov	r3, r1
 8008974:	4614      	mov	r4, r2
 8008976:	461d      	mov	r5, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 800897e:	4618      	mov	r0, r3
 8008980:	f7f7 fde2 	bl	8000548 <__aeabi_f2d>
 8008984:	4602      	mov	r2, r0
 8008986:	460b      	mov	r3, r1
 8008988:	4620      	mov	r0, r4
 800898a:	4629      	mov	r1, r5
 800898c:	f7f7 fc7e 	bl	800028c <__adddf3>
 8008990:	4602      	mov	r2, r0
 8008992:	460b      	mov	r3, r1
 8008994:	4610      	mov	r0, r2
 8008996:	4619      	mov	r1, r3
 8008998:	f7f8 f926 	bl	8000be8 <__aeabi_d2f>
 800899c:	4602      	mov	r2, r0
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
}
 80089a4:	e103      	b.n	8008bae <PathPlan+0x2fc6>
				} else if(pp->base_shape==1){
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	f040 80fe 	bne.w	8008bae <PathPlan+0x2fc6>
					pp->u1 = (0.866 * pp->ruy) - (0.5 * pp->rux) + (pp->outz * 1.0);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7f7 fdc5 	bl	8000548 <__aeabi_f2d>
 80089be:	a380      	add	r3, pc, #512	; (adr r3, 8008bc0 <PathPlan+0x2fd8>)
 80089c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c4:	f7f7 fe18 	bl	80005f8 <__aeabi_dmul>
 80089c8:	4602      	mov	r2, r0
 80089ca:	460b      	mov	r3, r1
 80089cc:	4614      	mov	r4, r2
 80089ce:	461d      	mov	r5, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7f7 fdb6 	bl	8000548 <__aeabi_f2d>
 80089dc:	f04f 0200 	mov.w	r2, #0
 80089e0:	4b79      	ldr	r3, [pc, #484]	; (8008bc8 <PathPlan+0x2fe0>)
 80089e2:	f7f7 fe09 	bl	80005f8 <__aeabi_dmul>
 80089e6:	4602      	mov	r2, r0
 80089e8:	460b      	mov	r3, r1
 80089ea:	4620      	mov	r0, r4
 80089ec:	4629      	mov	r1, r5
 80089ee:	f7f7 fc4b 	bl	8000288 <__aeabi_dsub>
 80089f2:	4602      	mov	r2, r0
 80089f4:	460b      	mov	r3, r1
 80089f6:	4614      	mov	r4, r2
 80089f8:	461d      	mov	r5, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7f7 fda1 	bl	8000548 <__aeabi_f2d>
 8008a06:	4602      	mov	r2, r0
 8008a08:	460b      	mov	r3, r1
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	4629      	mov	r1, r5
 8008a0e:	f7f7 fc3d 	bl	800028c <__adddf3>
 8008a12:	4602      	mov	r2, r0
 8008a14:	460b      	mov	r3, r1
 8008a16:	4610      	mov	r0, r2
 8008a18:	4619      	mov	r1, r3
 8008a1a:	f7f8 f8e5 	bl	8000be8 <__aeabi_d2f>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = (0.866 * pp->ruy) + (0.5 * pp->rux) - (pp->outz * 1.0);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7f7 fd8b 	bl	8000548 <__aeabi_f2d>
 8008a32:	a363      	add	r3, pc, #396	; (adr r3, 8008bc0 <PathPlan+0x2fd8>)
 8008a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a38:	f7f7 fdde 	bl	80005f8 <__aeabi_dmul>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	460b      	mov	r3, r1
 8008a40:	4614      	mov	r4, r2
 8008a42:	461d      	mov	r5, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7f7 fd7c 	bl	8000548 <__aeabi_f2d>
 8008a50:	f04f 0200 	mov.w	r2, #0
 8008a54:	4b5c      	ldr	r3, [pc, #368]	; (8008bc8 <PathPlan+0x2fe0>)
 8008a56:	f7f7 fdcf 	bl	80005f8 <__aeabi_dmul>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	4620      	mov	r0, r4
 8008a60:	4629      	mov	r1, r5
 8008a62:	f7f7 fc13 	bl	800028c <__adddf3>
 8008a66:	4602      	mov	r2, r0
 8008a68:	460b      	mov	r3, r1
 8008a6a:	4614      	mov	r4, r2
 8008a6c:	461d      	mov	r5, r3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a74:	4618      	mov	r0, r3
 8008a76:	f7f7 fd67 	bl	8000548 <__aeabi_f2d>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	4620      	mov	r0, r4
 8008a80:	4629      	mov	r1, r5
 8008a82:	f7f7 fc01 	bl	8000288 <__aeabi_dsub>
 8008a86:	4602      	mov	r2, r0
 8008a88:	460b      	mov	r3, r1
 8008a8a:	4610      	mov	r0, r2
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	f7f8 f8ab 	bl	8000be8 <__aeabi_d2f>
 8008a92:	4602      	mov	r2, r0
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u3 = 1.0 * pp->rux + (pp->outz * 1.0);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	ed93 7ab2 	vldr	s14, [r3, #712]	; 0x2c8
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8008aa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	edc3 7ab8 	vstr	s15, [r3, #736]	; 0x2e0
					pp->v1 = (0.866 * pp->rvy) - (0.5 * pp->rvx) + pp->u1;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7f7 fd46 	bl	8000548 <__aeabi_f2d>
 8008abc:	a340      	add	r3, pc, #256	; (adr r3, 8008bc0 <PathPlan+0x2fd8>)
 8008abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac2:	f7f7 fd99 	bl	80005f8 <__aeabi_dmul>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	460b      	mov	r3, r1
 8008aca:	4614      	mov	r4, r2
 8008acc:	461d      	mov	r5, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7f7 fd37 	bl	8000548 <__aeabi_f2d>
 8008ada:	f04f 0200 	mov.w	r2, #0
 8008ade:	4b3a      	ldr	r3, [pc, #232]	; (8008bc8 <PathPlan+0x2fe0>)
 8008ae0:	f7f7 fd8a 	bl	80005f8 <__aeabi_dmul>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	4620      	mov	r0, r4
 8008aea:	4629      	mov	r1, r5
 8008aec:	f7f7 fbcc 	bl	8000288 <__aeabi_dsub>
 8008af0:	4602      	mov	r2, r0
 8008af2:	460b      	mov	r3, r1
 8008af4:	4614      	mov	r4, r2
 8008af6:	461d      	mov	r5, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7f7 fd22 	bl	8000548 <__aeabi_f2d>
 8008b04:	4602      	mov	r2, r0
 8008b06:	460b      	mov	r3, r1
 8008b08:	4620      	mov	r0, r4
 8008b0a:	4629      	mov	r1, r5
 8008b0c:	f7f7 fbbe 	bl	800028c <__adddf3>
 8008b10:	4602      	mov	r2, r0
 8008b12:	460b      	mov	r3, r1
 8008b14:	4610      	mov	r0, r2
 8008b16:	4619      	mov	r1, r3
 8008b18:	f7f8 f866 	bl	8000be8 <__aeabi_d2f>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = (0.866 * pp->rvy) + (0.5 * pp->rvx) + pp->u2;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7f7 fd0c 	bl	8000548 <__aeabi_f2d>
 8008b30:	a323      	add	r3, pc, #140	; (adr r3, 8008bc0 <PathPlan+0x2fd8>)
 8008b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b36:	f7f7 fd5f 	bl	80005f8 <__aeabi_dmul>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	4614      	mov	r4, r2
 8008b40:	461d      	mov	r5, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7f7 fcfd 	bl	8000548 <__aeabi_f2d>
 8008b4e:	f04f 0200 	mov.w	r2, #0
 8008b52:	4b1d      	ldr	r3, [pc, #116]	; (8008bc8 <PathPlan+0x2fe0>)
 8008b54:	f7f7 fd50 	bl	80005f8 <__aeabi_dmul>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	4629      	mov	r1, r5
 8008b60:	f7f7 fb94 	bl	800028c <__adddf3>
 8008b64:	4602      	mov	r2, r0
 8008b66:	460b      	mov	r3, r1
 8008b68:	4614      	mov	r4, r2
 8008b6a:	461d      	mov	r5, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7f7 fce8 	bl	8000548 <__aeabi_f2d>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	4629      	mov	r1, r5
 8008b80:	f7f7 fb84 	bl	800028c <__adddf3>
 8008b84:	4602      	mov	r2, r0
 8008b86:	460b      	mov	r3, r1
 8008b88:	4610      	mov	r0, r2
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	f7f8 f82c 	bl	8000be8 <__aeabi_d2f>
 8008b90:	4602      	mov	r2, r0
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 1.0 * pp->rvx + pp->u3;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	ed93 7ab4 	vldr	s14, [r3, #720]	; 0x2d0
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8008ba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	edc3 7abc 	vstr	s15, [r3, #752]	; 0x2f0
}
 8008bae:	bf00      	nop
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	ecbd 8b02 	vpop	{d8}
 8008bb8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008bbc:	f3af 8000 	nop.w
 8008bc0:	a1cac083 	.word	0xa1cac083
 8008bc4:	3febb645 	.word	0x3febb645
 8008bc8:	3fe00000 	.word	0x3fe00000
 8008bcc:	dbf8b9bb 	.word	0xdbf8b9bb
 8008bd0:	3fe6a09e 	.word	0x3fe6a09e

08008bd4 <PSxConnectDMA>:
 * Function Remarks		: Called in respective I2c interrupt
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSxConnectDMA(&ps4);
 */
void PSxConnectDMA(PSxBT_t* psxbt){
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 11);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	1c5a      	adds	r2, r3, #1
 8008be4:	230b      	movs	r3, #11
 8008be6:	2188      	movs	r1, #136	; 0x88
 8008be8:	f007 fd56 	bl	8010698 <HAL_I2C_Master_Receive_DMA>
	PSx_HandlerI2C(psxbt);
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 f81e 	bl	8008c2e <PSx_HandlerI2C>
}
 8008bf2:	bf00      	nop
 8008bf4:	3708      	adds	r7, #8
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <PSxInitDMA>:
 * Function Arguments	: *psxbt	, Pointer to structure PSxBT_t
 * 						   hi2cx    , Pointer to I2C handle
 * Function Return		: None
 * Function Example		: PSxInitDMA(&ps4,&hi2c1);
 */
void PSxInitDMA(PSxBT_t *psxbt,I2C_HandleTypeDef* hi2cx){
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b082      	sub	sp, #8
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
 8008c02:	6039      	str	r1, [r7, #0]
	psxbt->hi2cps4 = hi2cx;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	683a      	ldr	r2, [r7, #0]
 8008c08:	665a      	str	r2, [r3, #100]	; 0x64
//	HAL_I2C_Slave_Receive_DMA(hi2cx, psxbt->ReceiveBuffer, 11);//GG
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 11);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	1c5a      	adds	r2, r3, #1
 8008c12:	230b      	movs	r3, #11
 8008c14:	2188      	movs	r1, #136	; 0x88
 8008c16:	f007 fd3f 	bl	8010698 <HAL_I2C_Master_Receive_DMA>
	psxbt->initialized = 1;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	701a      	strb	r2, [r3, #0]
	psxbt->disconnected = 0;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008c26:	bf00      	nop
 8008c28:	3708      	adds	r7, #8
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <PSx_HandlerI2C>:
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSx_HandlerI2C(&ps4x);
 */

void PSx_HandlerI2C(PSxBT_t *psxbt){
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b082      	sub	sp, #8
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
	psxbt->buf1 = psxbt->ReceiveBuffer[1];
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	789a      	ldrb	r2, [r3, #2]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	psxbt->buf2 = psxbt->ReceiveBuffer[2];
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	78da      	ldrb	r2, [r3, #3]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	psxbt->leftjoy_x = psxbt->ReceiveBuffer[3];
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	791b      	ldrb	r3, [r3, #4]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	635a      	str	r2, [r3, #52]	; 0x34
	psxbt->leftjoy_y = psxbt->ReceiveBuffer[4];
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	795b      	ldrb	r3, [r3, #5]
 8008c58:	461a      	mov	r2, r3
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	639a      	str	r2, [r3, #56]	; 0x38
	psxbt->rightjoy_x = psxbt->ReceiveBuffer[5];
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	799b      	ldrb	r3, [r3, #6]
 8008c62:	461a      	mov	r2, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	63da      	str	r2, [r3, #60]	; 0x3c
	psxbt->rightjoy_y = psxbt->ReceiveBuffer[6];
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	79db      	ldrb	r3, [r3, #7]
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	641a      	str	r2, [r3, #64]	; 0x40
	psxbt->an_L2 = psxbt->ReceiveBuffer[7];
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	7a1b      	ldrb	r3, [r3, #8]
 8008c76:	461a      	mov	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	645a      	str	r2, [r3, #68]	; 0x44
	psxbt->an_R2 = psxbt->ReceiveBuffer[8];
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	7a5b      	ldrb	r3, [r3, #9]
 8008c80:	461a      	mov	r2, r3
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	649a      	str	r2, [r3, #72]	; 0x48
	psxbt->buf3 = psxbt->ReceiveBuffer[9];
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	7a9a      	ldrb	r2, [r3, #10]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	psxbt->state = psxbt->ReceiveBuffer[10];
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	7ada      	ldrb	r2, [r3, #11]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	PSxBTGetXY(psxbt);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 f804 	bl	8008ca8 <PSxBTGetXY>
}
 8008ca0:	bf00      	nop
 8008ca2:	3708      	adds	r7, #8
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <PSxBTGetXY>:
 * Function Return		: None
 * Function Example		: PSxBTGetXY(&ps3x);
 */

void PSxBTGetXY(PSxBT_t *psxbt)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
	if(joyR_up){
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb4:	ee07 3a90 	vmov	s15, r3
 8008cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cbc:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 8008fc0 <PSxBTGetXY+0x318>
 8008cc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cc8:	d53e      	bpl.n	8008d48 <PSxBTGetXY+0xa0>
		psxbt->joyR_y  = ((psx_low_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cce:	ee07 3a90 	vmov	s15, r3
 8008cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cd6:	ee17 0a90 	vmov	r0, s15
 8008cda:	f7f7 fc35 	bl	8000548 <__aeabi_f2d>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	a1b5      	add	r1, pc, #724	; (adr r1, 8008fb8 <PSxBTGetXY+0x310>)
 8008ce4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ce8:	f7f7 face 	bl	8000288 <__aeabi_dsub>
 8008cec:	4602      	mov	r2, r0
 8008cee:	460b      	mov	r3, r1
 8008cf0:	4610      	mov	r0, r2
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	f04f 0200 	mov.w	r2, #0
 8008cf8:	4bb2      	ldr	r3, [pc, #712]	; (8008fc4 <PSxBTGetXY+0x31c>)
 8008cfa:	f7f7 fda7 	bl	800084c <__aeabi_ddiv>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	460b      	mov	r3, r1
 8008d02:	4610      	mov	r0, r2
 8008d04:	4619      	mov	r1, r3
 8008d06:	f7f7 ff6f 	bl	8000be8 <__aeabi_d2f>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	64da      	str	r2, [r3, #76]	; 0x4c
		if(psxbt->joyR_y < 0.0){
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8008d16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d1e:	d504      	bpl.n	8008d2a <PSxBTGetXY+0x82>
			psxbt->joyR_y = 0.0;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f04f 0200 	mov.w	r2, #0
 8008d26:	64da      	str	r2, [r3, #76]	; 0x4c
 8008d28:	e05d      	b.n	8008de6 <PSxBTGetXY+0x13e>
		}else if(psxbt->joyR_y > 1.0){
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8008d30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d3c:	dd53      	ble.n	8008de6 <PSxBTGetXY+0x13e>
			psxbt->joyR_y = 1.0;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008d44:	64da      	str	r2, [r3, #76]	; 0x4c
 8008d46:	e04e      	b.n	8008de6 <PSxBTGetXY+0x13e>
		}
	}else if(joyR_down){
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d4c:	ee07 3a90 	vmov	s15, r3
 8008d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d54:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8008fd0 <PSxBTGetXY+0x328>
 8008d58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d60:	dd3d      	ble.n	8008dde <PSxBTGetXY+0x136>
		psxbt->joyR_y = ((psx_high_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d66:	ee07 3a90 	vmov	s15, r3
 8008d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d6e:	ee17 0a90 	vmov	r0, s15
 8008d72:	f7f7 fbe9 	bl	8000548 <__aeabi_f2d>
 8008d76:	4602      	mov	r2, r0
 8008d78:	460b      	mov	r3, r1
 8008d7a:	f04f 0000 	mov.w	r0, #0
 8008d7e:	4992      	ldr	r1, [pc, #584]	; (8008fc8 <PSxBTGetXY+0x320>)
 8008d80:	f7f7 fa82 	bl	8000288 <__aeabi_dsub>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	4610      	mov	r0, r2
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	f04f 0200 	mov.w	r2, #0
 8008d90:	4b8c      	ldr	r3, [pc, #560]	; (8008fc4 <PSxBTGetXY+0x31c>)
 8008d92:	f7f7 fd5b 	bl	800084c <__aeabi_ddiv>
 8008d96:	4602      	mov	r2, r0
 8008d98:	460b      	mov	r3, r1
 8008d9a:	4610      	mov	r0, r2
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	f7f7 ff23 	bl	8000be8 <__aeabi_d2f>
 8008da2:	4602      	mov	r2, r0
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	64da      	str	r2, [r3, #76]	; 0x4c
		if(psxbt->joyR_y > 0.0){
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8008dae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008db6:	dd04      	ble.n	8008dc2 <PSxBTGetXY+0x11a>
			psxbt->joyR_y = 0.0;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f04f 0200 	mov.w	r2, #0
 8008dbe:	64da      	str	r2, [r3, #76]	; 0x4c
 8008dc0:	e011      	b.n	8008de6 <PSxBTGetXY+0x13e>
		}else if(psxbt->joyR_y < -1.0){
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8008dc8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008dcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dd4:	d507      	bpl.n	8008de6 <PSxBTGetXY+0x13e>
			psxbt->joyR_y = -1.0;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a7c      	ldr	r2, [pc, #496]	; (8008fcc <PSxBTGetXY+0x324>)
 8008dda:	64da      	str	r2, [r3, #76]	; 0x4c
 8008ddc:	e003      	b.n	8008de6 <PSxBTGetXY+0x13e>
		}
	}else{
		psxbt->joyR_y = 0.0;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f04f 0200 	mov.w	r2, #0
 8008de4:	64da      	str	r2, [r3, #76]	; 0x4c
	}

	if(joyR_left){
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dea:	ee07 3a90 	vmov	s15, r3
 8008dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df2:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8008fc0 <PSxBTGetXY+0x318>
 8008df6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dfe:	d53e      	bpl.n	8008e7e <PSxBTGetXY+0x1d6>
		psxbt->joyR_x = ((psx_low_Rx - ((float)psxbt->rightjoy_x))/100.0)/1.00;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e04:	ee07 3a90 	vmov	s15, r3
 8008e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e0c:	ee17 0a90 	vmov	r0, s15
 8008e10:	f7f7 fb9a 	bl	8000548 <__aeabi_f2d>
 8008e14:	4602      	mov	r2, r0
 8008e16:	460b      	mov	r3, r1
 8008e18:	a167      	add	r1, pc, #412	; (adr r1, 8008fb8 <PSxBTGetXY+0x310>)
 8008e1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e1e:	f7f7 fa33 	bl	8000288 <__aeabi_dsub>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	4610      	mov	r0, r2
 8008e28:	4619      	mov	r1, r3
 8008e2a:	f04f 0200 	mov.w	r2, #0
 8008e2e:	4b65      	ldr	r3, [pc, #404]	; (8008fc4 <PSxBTGetXY+0x31c>)
 8008e30:	f7f7 fd0c 	bl	800084c <__aeabi_ddiv>
 8008e34:	4602      	mov	r2, r0
 8008e36:	460b      	mov	r3, r1
 8008e38:	4610      	mov	r0, r2
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	f7f7 fed4 	bl	8000be8 <__aeabi_d2f>
 8008e40:	4602      	mov	r2, r0
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	651a      	str	r2, [r3, #80]	; 0x50
		if(psxbt->joyR_x < 0.0){
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008e4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e54:	d504      	bpl.n	8008e60 <PSxBTGetXY+0x1b8>
			psxbt->joyR_x = 0.0;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f04f 0200 	mov.w	r2, #0
 8008e5c:	651a      	str	r2, [r3, #80]	; 0x50
 8008e5e:	e05d      	b.n	8008f1c <PSxBTGetXY+0x274>
		}else if(psxbt->joyR_x > 1.0){
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008e66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e72:	dd53      	ble.n	8008f1c <PSxBTGetXY+0x274>
			psxbt->joyR_x = 1.0;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008e7a:	651a      	str	r2, [r3, #80]	; 0x50
 8008e7c:	e04e      	b.n	8008f1c <PSxBTGetXY+0x274>
		}
	}else if(joyR_right){
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e82:	ee07 3a90 	vmov	s15, r3
 8008e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e8a:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8008fd0 <PSxBTGetXY+0x328>
 8008e8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e96:	dd3d      	ble.n	8008f14 <PSxBTGetXY+0x26c>
		psxbt->joyR_x = ((psx_high_Rx - ((float)psxbt->rightjoy_x))/100.0)/1.00;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e9c:	ee07 3a90 	vmov	s15, r3
 8008ea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ea4:	ee17 0a90 	vmov	r0, s15
 8008ea8:	f7f7 fb4e 	bl	8000548 <__aeabi_f2d>
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	f04f 0000 	mov.w	r0, #0
 8008eb4:	4944      	ldr	r1, [pc, #272]	; (8008fc8 <PSxBTGetXY+0x320>)
 8008eb6:	f7f7 f9e7 	bl	8000288 <__aeabi_dsub>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	460b      	mov	r3, r1
 8008ebe:	4610      	mov	r0, r2
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	f04f 0200 	mov.w	r2, #0
 8008ec6:	4b3f      	ldr	r3, [pc, #252]	; (8008fc4 <PSxBTGetXY+0x31c>)
 8008ec8:	f7f7 fcc0 	bl	800084c <__aeabi_ddiv>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	460b      	mov	r3, r1
 8008ed0:	4610      	mov	r0, r2
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	f7f7 fe88 	bl	8000be8 <__aeabi_d2f>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	651a      	str	r2, [r3, #80]	; 0x50
		if(psxbt->joyR_x > 0.0){
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008ee4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eec:	dd04      	ble.n	8008ef8 <PSxBTGetXY+0x250>
			psxbt->joyR_x = 0.0;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f04f 0200 	mov.w	r2, #0
 8008ef4:	651a      	str	r2, [r3, #80]	; 0x50
 8008ef6:	e011      	b.n	8008f1c <PSxBTGetXY+0x274>
		}else if(psxbt->joyR_x < -1.0){
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008efe:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008f02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f0a:	d507      	bpl.n	8008f1c <PSxBTGetXY+0x274>
			psxbt->joyR_x = -1.0;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a2f      	ldr	r2, [pc, #188]	; (8008fcc <PSxBTGetXY+0x324>)
 8008f10:	651a      	str	r2, [r3, #80]	; 0x50
 8008f12:	e003      	b.n	8008f1c <PSxBTGetXY+0x274>
		}
	}else{
		psxbt->joyR_x = 0.0;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f04f 0200 	mov.w	r2, #0
 8008f1a:	651a      	str	r2, [r3, #80]	; 0x50
	}

	if(joyL_up){
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f20:	ee07 3a90 	vmov	s15, r3
 8008f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f28:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8008fc0 <PSxBTGetXY+0x318>
 8008f2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f34:	d54e      	bpl.n	8008fd4 <PSxBTGetXY+0x32c>
		psxbt->joyL_y = ((psx_low_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3a:	ee07 3a90 	vmov	s15, r3
 8008f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f42:	ee17 0a90 	vmov	r0, s15
 8008f46:	f7f7 faff 	bl	8000548 <__aeabi_f2d>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	a11a      	add	r1, pc, #104	; (adr r1, 8008fb8 <PSxBTGetXY+0x310>)
 8008f50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f54:	f7f7 f998 	bl	8000288 <__aeabi_dsub>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	4610      	mov	r0, r2
 8008f5e:	4619      	mov	r1, r3
 8008f60:	f04f 0200 	mov.w	r2, #0
 8008f64:	4b17      	ldr	r3, [pc, #92]	; (8008fc4 <PSxBTGetXY+0x31c>)
 8008f66:	f7f7 fc71 	bl	800084c <__aeabi_ddiv>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	4610      	mov	r0, r2
 8008f70:	4619      	mov	r1, r3
 8008f72:	f7f7 fe39 	bl	8000be8 <__aeabi_d2f>
 8008f76:	4602      	mov	r2, r0
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	655a      	str	r2, [r3, #84]	; 0x54
		if(psxbt->joyL_y < 0.0){
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008f82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f8a:	d504      	bpl.n	8008f96 <PSxBTGetXY+0x2ee>
			psxbt->joyL_y = 0.0;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f04f 0200 	mov.w	r2, #0
 8008f92:	655a      	str	r2, [r3, #84]	; 0x54
 8008f94:	e06d      	b.n	8009072 <PSxBTGetXY+0x3ca>
		}else if(psxbt->joyL_y > 1.0){
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008f9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fa8:	dd63      	ble.n	8009072 <PSxBTGetXY+0x3ca>
			psxbt->joyL_y = 1.0;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008fb0:	655a      	str	r2, [r3, #84]	; 0x54
 8008fb2:	e05e      	b.n	8009072 <PSxBTGetXY+0x3ca>
 8008fb4:	f3af 8000 	nop.w
 8008fb8:	00000000 	.word	0x00000000
 8008fbc:	405cc000 	.word	0x405cc000
 8008fc0:	42e60000 	.word	0x42e60000
 8008fc4:	40590000 	.word	0x40590000
 8008fc8:	40618000 	.word	0x40618000
 8008fcc:	bf800000 	.word	0xbf800000
 8008fd0:	430c0000 	.word	0x430c0000
		}
	}else if(joyL_down){
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd8:	ee07 3a90 	vmov	s15, r3
 8008fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fe0:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8008fd0 <PSxBTGetXY+0x328>
 8008fe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fec:	dd3d      	ble.n	800906a <PSxBTGetXY+0x3c2>
		psxbt->joyL_y = ((psx_high_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff2:	ee07 3a90 	vmov	s15, r3
 8008ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ffa:	ee17 0a90 	vmov	r0, s15
 8008ffe:	f7f7 faa3 	bl	8000548 <__aeabi_f2d>
 8009002:	4602      	mov	r2, r0
 8009004:	460b      	mov	r3, r1
 8009006:	f04f 0000 	mov.w	r0, #0
 800900a:	4981      	ldr	r1, [pc, #516]	; (8009210 <PSxBTGetXY+0x568>)
 800900c:	f7f7 f93c 	bl	8000288 <__aeabi_dsub>
 8009010:	4602      	mov	r2, r0
 8009012:	460b      	mov	r3, r1
 8009014:	4610      	mov	r0, r2
 8009016:	4619      	mov	r1, r3
 8009018:	f04f 0200 	mov.w	r2, #0
 800901c:	4b7d      	ldr	r3, [pc, #500]	; (8009214 <PSxBTGetXY+0x56c>)
 800901e:	f7f7 fc15 	bl	800084c <__aeabi_ddiv>
 8009022:	4602      	mov	r2, r0
 8009024:	460b      	mov	r3, r1
 8009026:	4610      	mov	r0, r2
 8009028:	4619      	mov	r1, r3
 800902a:	f7f7 fddd 	bl	8000be8 <__aeabi_d2f>
 800902e:	4602      	mov	r2, r0
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	655a      	str	r2, [r3, #84]	; 0x54
		if(psxbt->joyL_y > 0.0){
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800903a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800903e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009042:	dd04      	ble.n	800904e <PSxBTGetXY+0x3a6>
			psxbt->joyL_y = 0.0;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f04f 0200 	mov.w	r2, #0
 800904a:	655a      	str	r2, [r3, #84]	; 0x54
 800904c:	e011      	b.n	8009072 <PSxBTGetXY+0x3ca>
		}else if(psxbt->joyL_y < -1.0){
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009054:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009058:	eef4 7ac7 	vcmpe.f32	s15, s14
 800905c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009060:	d507      	bpl.n	8009072 <PSxBTGetXY+0x3ca>
			psxbt->joyL_y = -1.0;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4a6c      	ldr	r2, [pc, #432]	; (8009218 <PSxBTGetXY+0x570>)
 8009066:	655a      	str	r2, [r3, #84]	; 0x54
 8009068:	e003      	b.n	8009072 <PSxBTGetXY+0x3ca>
		}
	}else{
		psxbt->joyL_y = 0.0;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f04f 0200 	mov.w	r2, #0
 8009070:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if(joyL_left){
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009076:	ee07 3a90 	vmov	s15, r3
 800907a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800907e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800921c <PSxBTGetXY+0x574>
 8009082:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800908a:	d53e      	bpl.n	800910a <PSxBTGetXY+0x462>
		psxbt->joyL_x = ((psx_low_Lx - ((float)psxbt->leftjoy_x))/100.0)/1.00;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009090:	ee07 3a90 	vmov	s15, r3
 8009094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009098:	ee17 0a90 	vmov	r0, s15
 800909c:	f7f7 fa54 	bl	8000548 <__aeabi_f2d>
 80090a0:	4602      	mov	r2, r0
 80090a2:	460b      	mov	r3, r1
 80090a4:	a156      	add	r1, pc, #344	; (adr r1, 8009200 <PSxBTGetXY+0x558>)
 80090a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090aa:	f7f7 f8ed 	bl	8000288 <__aeabi_dsub>
 80090ae:	4602      	mov	r2, r0
 80090b0:	460b      	mov	r3, r1
 80090b2:	4610      	mov	r0, r2
 80090b4:	4619      	mov	r1, r3
 80090b6:	f04f 0200 	mov.w	r2, #0
 80090ba:	4b56      	ldr	r3, [pc, #344]	; (8009214 <PSxBTGetXY+0x56c>)
 80090bc:	f7f7 fbc6 	bl	800084c <__aeabi_ddiv>
 80090c0:	4602      	mov	r2, r0
 80090c2:	460b      	mov	r3, r1
 80090c4:	4610      	mov	r0, r2
 80090c6:	4619      	mov	r1, r3
 80090c8:	f7f7 fd8e 	bl	8000be8 <__aeabi_d2f>
 80090cc:	4602      	mov	r2, r0
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	659a      	str	r2, [r3, #88]	; 0x58
		if(psxbt->joyL_x < 0.0){
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80090d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80090dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090e0:	d504      	bpl.n	80090ec <PSxBTGetXY+0x444>
			psxbt->joyL_x = 0.0;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f04f 0200 	mov.w	r2, #0
 80090e8:	659a      	str	r2, [r3, #88]	; 0x58
 80090ea:	e05d      	b.n	80091a8 <PSxBTGetXY+0x500>
		}else if(psxbt->joyL_x > 1.0){
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80090f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090fe:	dd53      	ble.n	80091a8 <PSxBTGetXY+0x500>
			psxbt->joyL_x = 1.0;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009106:	659a      	str	r2, [r3, #88]	; 0x58
 8009108:	e04e      	b.n	80091a8 <PSxBTGetXY+0x500>
		}
	}else if(joyL_right){
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800910e:	ee07 3a90 	vmov	s15, r3
 8009112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009116:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8009220 <PSxBTGetXY+0x578>
 800911a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800911e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009122:	dd3d      	ble.n	80091a0 <PSxBTGetXY+0x4f8>
		psxbt->joyL_x = ((psx_high_Lx - ((float)psxbt->leftjoy_x))/100.0)/1.00;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009128:	ee07 3a90 	vmov	s15, r3
 800912c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009130:	ee17 0a90 	vmov	r0, s15
 8009134:	f7f7 fa08 	bl	8000548 <__aeabi_f2d>
 8009138:	4602      	mov	r2, r0
 800913a:	460b      	mov	r3, r1
 800913c:	f04f 0000 	mov.w	r0, #0
 8009140:	4933      	ldr	r1, [pc, #204]	; (8009210 <PSxBTGetXY+0x568>)
 8009142:	f7f7 f8a1 	bl	8000288 <__aeabi_dsub>
 8009146:	4602      	mov	r2, r0
 8009148:	460b      	mov	r3, r1
 800914a:	4610      	mov	r0, r2
 800914c:	4619      	mov	r1, r3
 800914e:	f04f 0200 	mov.w	r2, #0
 8009152:	4b30      	ldr	r3, [pc, #192]	; (8009214 <PSxBTGetXY+0x56c>)
 8009154:	f7f7 fb7a 	bl	800084c <__aeabi_ddiv>
 8009158:	4602      	mov	r2, r0
 800915a:	460b      	mov	r3, r1
 800915c:	4610      	mov	r0, r2
 800915e:	4619      	mov	r1, r3
 8009160:	f7f7 fd42 	bl	8000be8 <__aeabi_d2f>
 8009164:	4602      	mov	r2, r0
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	659a      	str	r2, [r3, #88]	; 0x58
		if(psxbt->joyL_x > 0.0){
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8009170:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009178:	dd04      	ble.n	8009184 <PSxBTGetXY+0x4dc>
			psxbt->joyL_x = 0.0;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f04f 0200 	mov.w	r2, #0
 8009180:	659a      	str	r2, [r3, #88]	; 0x58
 8009182:	e011      	b.n	80091a8 <PSxBTGetXY+0x500>
		}else if(psxbt->joyL_x < -1.0){
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800918a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800918e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009196:	d507      	bpl.n	80091a8 <PSxBTGetXY+0x500>
			psxbt->joyL_x = -1.0;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4a1f      	ldr	r2, [pc, #124]	; (8009218 <PSxBTGetXY+0x570>)
 800919c:	659a      	str	r2, [r3, #88]	; 0x58
 800919e:	e003      	b.n	80091a8 <PSxBTGetXY+0x500>
		}
	}else{
		psxbt->joyL_x = 0.0;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f04f 0200 	mov.w	r2, #0
 80091a6:	659a      	str	r2, [r3, #88]	; 0x58
	}

	psxbt->joyR_2 = (psxbt->an_R2/255.0);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7f7 f9a9 	bl	8000504 <__aeabi_ui2d>
 80091b2:	a315      	add	r3, pc, #84	; (adr r3, 8009208 <PSxBTGetXY+0x560>)
 80091b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b8:	f7f7 fb48 	bl	800084c <__aeabi_ddiv>
 80091bc:	4602      	mov	r2, r0
 80091be:	460b      	mov	r3, r1
 80091c0:	4610      	mov	r0, r2
 80091c2:	4619      	mov	r1, r3
 80091c4:	f7f7 fd10 	bl	8000be8 <__aeabi_d2f>
 80091c8:	4602      	mov	r2, r0
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	65da      	str	r2, [r3, #92]	; 0x5c
	psxbt->joyL_2 = (psxbt->an_L2/255.0);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7f7 f996 	bl	8000504 <__aeabi_ui2d>
 80091d8:	a30b      	add	r3, pc, #44	; (adr r3, 8009208 <PSxBTGetXY+0x560>)
 80091da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091de:	f7f7 fb35 	bl	800084c <__aeabi_ddiv>
 80091e2:	4602      	mov	r2, r0
 80091e4:	460b      	mov	r3, r1
 80091e6:	4610      	mov	r0, r2
 80091e8:	4619      	mov	r1, r3
 80091ea:	f7f7 fcfd 	bl	8000be8 <__aeabi_d2f>
 80091ee:	4602      	mov	r2, r0
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	661a      	str	r2, [r3, #96]	; 0x60
}
 80091f4:	bf00      	nop
 80091f6:	3708      	adds	r7, #8
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	f3af 8000 	nop.w
 8009200:	00000000 	.word	0x00000000
 8009204:	405cc000 	.word	0x405cc000
 8009208:	00000000 	.word	0x00000000
 800920c:	406fe000 	.word	0x406fe000
 8009210:	40618000 	.word	0x40618000
 8009214:	40590000 	.word	0x40590000
 8009218:	bf800000 	.word	0xbf800000
 800921c:	42e60000 	.word	0x42e60000
 8009220:	430c0000 	.word	0x430c0000

08009224 <R6091U_Init>:

#include "r6091u.h"
#include "../adapter.h"


void R6091U_Init(R6091U_t* IMU,UART_HandleTypeDef* huartx){
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
	testCounter2 = 0;
 800922e:	4b0a      	ldr	r3, [pc, #40]	; (8009258 <R6091U_Init+0x34>)
 8009230:	2200      	movs	r2, #0
 8009232:	601a      	str	r2, [r3, #0]
	IMU->huartx = huartx;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	683a      	ldr	r2, [r7, #0]
 8009238:	601a      	str	r2, [r3, #0]
	IMU->State = PENDING_SYNC;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	711a      	strb	r2, [r3, #4]
	HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6818      	ldr	r0, [r3, #0]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	3306      	adds	r3, #6
 8009248:	2201      	movs	r2, #1
 800924a:	4619      	mov	r1, r3
 800924c:	f00b f9ea 	bl	8014624 <HAL_UART_Receive_IT>

}
 8009250:	bf00      	nop
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	20006754 	.word	0x20006754

0800925c <R6091U_Handler>:


void R6091U_Handler(R6091U_t* IMU){
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]

//	uint8_t checksum;

	switch(IMU->State){
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	791b      	ldrb	r3, [r3, #4]
 8009268:	2b02      	cmp	r3, #2
 800926a:	d033      	beq.n	80092d4 <R6091U_Handler+0x78>
 800926c:	2b02      	cmp	r3, #2
 800926e:	f300 80aa 	bgt.w	80093c6 <R6091U_Handler+0x16a>
 8009272:	2b00      	cmp	r3, #0
 8009274:	d002      	beq.n	800927c <R6091U_Handler+0x20>
 8009276:	2b01      	cmp	r3, #1
 8009278:	d010      	beq.n	800929c <R6091U_Handler+0x40>
		IMU->State = PENDING_SYNC;
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);

		break;
	}
}
 800927a:	e0a4      	b.n	80093c6 <R6091U_Handler+0x16a>
		if(IMU->Buffer[0] == 0xAA){
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	799b      	ldrb	r3, [r3, #6]
 8009280:	2baa      	cmp	r3, #170	; 0xaa
 8009282:	d102      	bne.n	800928a <R6091U_Handler+0x2e>
			IMU->State = CONFIRMING_SYNC;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2201      	movs	r2, #1
 8009288:	711a      	strb	r2, [r3, #4]
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6818      	ldr	r0, [r3, #0]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	3306      	adds	r3, #6
 8009292:	2201      	movs	r2, #1
 8009294:	4619      	mov	r1, r3
 8009296:	f00b f9c5 	bl	8014624 <HAL_UART_Receive_IT>
		break;
 800929a:	e094      	b.n	80093c6 <R6091U_Handler+0x16a>
		if(IMU->Buffer[0] == 0x00){
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	799b      	ldrb	r3, [r3, #6]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d10b      	bne.n	80092bc <R6091U_Handler+0x60>
			IMU->State = IN_SYNC;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2202      	movs	r2, #2
 80092a8:	711a      	strb	r2, [r3, #4]
			HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 13);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6818      	ldr	r0, [r3, #0]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	3306      	adds	r3, #6
 80092b2:	220d      	movs	r2, #13
 80092b4:	4619      	mov	r1, r3
 80092b6:	f00b f9b5 	bl	8014624 <HAL_UART_Receive_IT>
		break;
 80092ba:	e084      	b.n	80093c6 <R6091U_Handler+0x16a>
			IMU->State = PENDING_SYNC;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	711a      	strb	r2, [r3, #4]
			HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6818      	ldr	r0, [r3, #0]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	3306      	adds	r3, #6
 80092ca:	2201      	movs	r2, #1
 80092cc:	4619      	mov	r1, r3
 80092ce:	f00b f9a9 	bl	8014624 <HAL_UART_Receive_IT>
		break;
 80092d2:	e078      	b.n	80093c6 <R6091U_Handler+0x16a>
		IMU->checksum = 0;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	715a      	strb	r2, [r3, #5]
		IMU->checksum = IMU->Buffer[0] + IMU->Buffer[1] + IMU->Buffer[2] + IMU->Buffer[3] + IMU->Buffer[4] + IMU->Buffer[5]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	799a      	ldrb	r2, [r3, #6]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	79db      	ldrb	r3, [r3, #7]
 80092e2:	4413      	add	r3, r2
 80092e4:	b2da      	uxtb	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	7a1b      	ldrb	r3, [r3, #8]
 80092ea:	4413      	add	r3, r2
 80092ec:	b2da      	uxtb	r2, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	7a5b      	ldrb	r3, [r3, #9]
 80092f2:	4413      	add	r3, r2
 80092f4:	b2da      	uxtb	r2, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	7a9b      	ldrb	r3, [r3, #10]
 80092fa:	4413      	add	r3, r2
 80092fc:	b2da      	uxtb	r2, r3
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	7adb      	ldrb	r3, [r3, #11]
 8009302:	4413      	add	r3, r2
 8009304:	b2da      	uxtb	r2, r3
						+ IMU->Buffer[6] + IMU->Buffer[7] + IMU->Buffer[8] + IMU->Buffer[9] + IMU->Buffer[10] + IMU->Buffer[11];
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	7b1b      	ldrb	r3, [r3, #12]
 800930a:	4413      	add	r3, r2
 800930c:	b2da      	uxtb	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	7b5b      	ldrb	r3, [r3, #13]
 8009312:	4413      	add	r3, r2
 8009314:	b2da      	uxtb	r2, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	7b9b      	ldrb	r3, [r3, #14]
 800931a:	4413      	add	r3, r2
 800931c:	b2da      	uxtb	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	7bdb      	ldrb	r3, [r3, #15]
 8009322:	4413      	add	r3, r2
 8009324:	b2da      	uxtb	r2, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	7c1b      	ldrb	r3, [r3, #16]
 800932a:	4413      	add	r3, r2
 800932c:	b2da      	uxtb	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	7c5b      	ldrb	r3, [r3, #17]
 8009332:	4413      	add	r3, r2
 8009334:	b2da      	uxtb	r2, r3
		IMU->checksum = IMU->Buffer[0] + IMU->Buffer[1] + IMU->Buffer[2] + IMU->Buffer[3] + IMU->Buffer[4] + IMU->Buffer[5]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	715a      	strb	r2, [r3, #5]
		if( IMU->checksum == IMU->Buffer[12]){
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	795a      	ldrb	r2, [r3, #5]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	7c9b      	ldrb	r3, [r3, #18]
 8009342:	429a      	cmp	r2, r3
 8009344:	d12c      	bne.n	80093a0 <R6091U_Handler+0x144>
			int16_t yaw = *((uint16_t*)&IMU->Buffer[1]);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	3307      	adds	r3, #7
 800934a:	881b      	ldrh	r3, [r3, #0]
 800934c:	81fb      	strh	r3, [r7, #14]
			fyaw = ((float)(yaw) / (float)100.0);
 800934e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009352:	ee07 3a90 	vmov	s15, r3
 8009356:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800935a:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80093d0 <R6091U_Handler+0x174>
 800935e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009362:	4b1c      	ldr	r3, [pc, #112]	; (80093d4 <R6091U_Handler+0x178>)
 8009364:	edc3 7a00 	vstr	s15, [r3]
			if(testCounter2 >= 20){
 8009368:	4b1b      	ldr	r3, [pc, #108]	; (80093d8 <R6091U_Handler+0x17c>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2b13      	cmp	r3, #19
 800936e:	dd12      	ble.n	8009396 <R6091U_Handler+0x13a>
				led2 = !led2;
 8009370:	4b1a      	ldr	r3, [pc, #104]	; (80093dc <R6091U_Handler+0x180>)
 8009372:	785b      	ldrb	r3, [r3, #1]
 8009374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009378:	b2db      	uxtb	r3, r3
 800937a:	4a18      	ldr	r2, [pc, #96]	; (80093dc <R6091U_Handler+0x180>)
 800937c:	2b00      	cmp	r3, #0
 800937e:	bf0c      	ite	eq
 8009380:	2301      	moveq	r3, #1
 8009382:	2300      	movne	r3, #0
 8009384:	b2d9      	uxtb	r1, r3
 8009386:	7853      	ldrb	r3, [r2, #1]
 8009388:	f361 1386 	bfi	r3, r1, #6, #1
 800938c:	7053      	strb	r3, [r2, #1]
				testCounter2 = 0;
 800938e:	4b12      	ldr	r3, [pc, #72]	; (80093d8 <R6091U_Handler+0x17c>)
 8009390:	2200      	movs	r2, #0
 8009392:	601a      	str	r2, [r3, #0]
 8009394:	e004      	b.n	80093a0 <R6091U_Handler+0x144>
				testCounter2 ++;
 8009396:	4b10      	ldr	r3, [pc, #64]	; (80093d8 <R6091U_Handler+0x17c>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	3301      	adds	r3, #1
 800939c:	4a0e      	ldr	r2, [pc, #56]	; (80093d8 <R6091U_Handler+0x17c>)
 800939e:	6013      	str	r3, [r2, #0]
		memset(IMU->Buffer, 0, 13);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	3306      	adds	r3, #6
 80093a4:	220d      	movs	r2, #13
 80093a6:	2100      	movs	r1, #0
 80093a8:	4618      	mov	r0, r3
 80093aa:	f00f fc67 	bl	8018c7c <memset>
		IMU->State = PENDING_SYNC;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	711a      	strb	r2, [r3, #4]
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6818      	ldr	r0, [r3, #0]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	3306      	adds	r3, #6
 80093bc:	2201      	movs	r2, #1
 80093be:	4619      	mov	r1, r3
 80093c0:	f00b f930 	bl	8014624 <HAL_UART_Receive_IT>
		break;
 80093c4:	bf00      	nop
}
 80093c6:	bf00      	nop
 80093c8:	3710      	adds	r7, #16
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	42c80000 	.word	0x42c80000
 80093d4:	20009710 	.word	0x20009710
 80093d8:	20006754 	.word	0x20006754
 80093dc:	40020814 	.word	0x40020814

080093e0 <ROS_Init>:

/*
 * Call this function in set() as initialization
 */
void ROS_Init(UART_HandleTypeDef* huartx)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
	ROS_UART = huartx;
 80093e8:	4a08      	ldr	r2, [pc, #32]	; (800940c <ROS_Init+0x2c>)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6013      	str	r3, [r2, #0]
	path_num = 0;
 80093ee:	4b08      	ldr	r3, [pc, #32]	; (8009410 <ROS_Init+0x30>)
 80093f0:	2200      	movs	r2, #0
 80093f2:	601a      	str	r2, [r3, #0]
	ros_counter = 0;
 80093f4:	4b07      	ldr	r3, [pc, #28]	; (8009414 <ROS_Init+0x34>)
 80093f6:	2200      	movs	r2, #0
 80093f8:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(huartx, ROS_buff, 7);
 80093fa:	2207      	movs	r2, #7
 80093fc:	4906      	ldr	r1, [pc, #24]	; (8009418 <ROS_Init+0x38>)
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f00b f910 	bl	8014624 <HAL_UART_Receive_IT>
}
 8009404:	bf00      	nop
 8009406:	3708      	adds	r7, #8
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}
 800940c:	2000987c 	.word	0x2000987c
 8009410:	2000973c 	.word	0x2000973c
 8009414:	20009420 	.word	0x20009420
 8009418:	20007974 	.word	0x20007974

0800941c <ROS_Write_Flash>:
/*
 *  Write All the PP_Points into Flash
 *  Including different path
 */
uint32_t ROS_Write_Flash(void)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b088      	sub	sp, #32
 8009420:	af00      	add	r7, sp, #0
	uint32_t success = 0;
 8009422:	2300      	movs	r3, #0
 8009424:	61fb      	str	r3, [r7, #28]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	HAL_FLASH_Unlock();
 8009426:	f006 fa81 	bl	800f92c <HAL_FLASH_Unlock>

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800942a:	4b47      	ldr	r3, [pc, #284]	; (8009548 <ROS_Write_Flash+0x12c>)
 800942c:	2200      	movs	r2, #0
 800942e:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8009430:	4b45      	ldr	r3, [pc, #276]	; (8009548 <ROS_Write_Flash+0x12c>)
 8009432:	2202      	movs	r2, #2
 8009434:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = FLASH_SECTOR_8;
 8009436:	4b44      	ldr	r3, [pc, #272]	; (8009548 <ROS_Write_Flash+0x12c>)
 8009438:	2208      	movs	r2, #8
 800943a:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors     = 1;
 800943c:	4b42      	ldr	r3, [pc, #264]	; (8009548 <ROS_Write_Flash+0x12c>)
 800943e:	2201      	movs	r2, #1
 8009440:	60da      	str	r2, [r3, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8009442:	1d3b      	adds	r3, r7, #4
 8009444:	4619      	mov	r1, r3
 8009446:	4840      	ldr	r0, [pc, #256]	; (8009548 <ROS_Write_Flash+0x12c>)
 8009448:	f006 fbde 	bl	800fc08 <HAL_FLASHEx_Erase>
 800944c:	4603      	mov	r3, r0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d003      	beq.n	800945a <ROS_Write_Flash+0x3e>
	{
		return HAL_FLASH_GetError ();
 8009452:	f006 fa9d 	bl	800f990 <HAL_FLASH_GetError>
 8009456:	4603      	mov	r3, r0
 8009458:	e072      	b.n	8009540 <ROS_Write_Flash+0x124>
	}

	uint32_t address = SECTOR8;
 800945a:	4b3c      	ldr	r3, [pc, #240]	; (800954c <ROS_Write_Flash+0x130>)
 800945c:	61bb      	str	r3, [r7, #24]
 800945e:	4b3c      	ldr	r3, [pc, #240]	; (8009550 <ROS_Write_Flash+0x134>)
 8009460:	681b      	ldr	r3, [r3, #0]
	uint32_t temp;

	memcpy(&temp, &path_num, 4);
 8009462:	603b      	str	r3, [r7, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, temp);
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	461a      	mov	r2, r3
 8009468:	f04f 0300 	mov.w	r3, #0
 800946c:	69b9      	ldr	r1, [r7, #24]
 800946e:	2002      	movs	r0, #2
 8009470:	f006 fa08 	bl	800f884 <HAL_FLASH_Program>
	address += 4;
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	3304      	adds	r3, #4
 8009478:	61bb      	str	r3, [r7, #24]

	for(int i = 0; i < path_num; i++)
 800947a:	2300      	movs	r3, #0
 800947c:	617b      	str	r3, [r7, #20]
 800947e:	e014      	b.n	80094aa <ROS_Write_Flash+0x8e>
	{
		memcpy(&temp, &point_num[i], 4);
 8009480:	4b34      	ldr	r3, [pc, #208]	; (8009554 <ROS_Write_Flash+0x138>)
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	4413      	add	r3, r2
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	603b      	str	r3, [r7, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, temp);
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	461a      	mov	r2, r3
 8009492:	f04f 0300 	mov.w	r3, #0
 8009496:	69b9      	ldr	r1, [r7, #24]
 8009498:	2002      	movs	r0, #2
 800949a:	f006 f9f3 	bl	800f884 <HAL_FLASH_Program>
		address += 4;
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	3304      	adds	r3, #4
 80094a2:	61bb      	str	r3, [r7, #24]
	for(int i = 0; i < path_num; i++)
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	3301      	adds	r3, #1
 80094a8:	617b      	str	r3, [r7, #20]
 80094aa:	4b29      	ldr	r3, [pc, #164]	; (8009550 <ROS_Write_Flash+0x134>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	697a      	ldr	r2, [r7, #20]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	dbe5      	blt.n	8009480 <ROS_Write_Flash+0x64>
	}

	for(int i = 0; i < path_num; i++) // Number of path
 80094b4:	2300      	movs	r3, #0
 80094b6:	613b      	str	r3, [r7, #16]
 80094b8:	e03a      	b.n	8009530 <ROS_Write_Flash+0x114>
	{
		for(int j = 0; j < point_num[i]; j++) // Number of point at specific path
 80094ba:	2300      	movs	r3, #0
 80094bc:	60fb      	str	r3, [r7, #12]
 80094be:	e02b      	b.n	8009518 <ROS_Write_Flash+0xfc>
		{
			for(int k = 0; k < 7; k++)
 80094c0:	2300      	movs	r3, #0
 80094c2:	60bb      	str	r3, [r7, #8]
 80094c4:	e022      	b.n	800950c <ROS_Write_Flash+0xf0>
			{
				memcpy(&temp, &PP_Points[i][j][k], 4);
 80094c6:	4b24      	ldr	r3, [pc, #144]	; (8009558 <ROS_Write_Flash+0x13c>)
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	4413      	add	r3, r2
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4413      	add	r3, r2
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	4413      	add	r3, r2
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	603b      	str	r3, [r7, #0]
				if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, temp) == HAL_OK)
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	461a      	mov	r2, r3
 80094e8:	f04f 0300 	mov.w	r3, #0
 80094ec:	69b9      	ldr	r1, [r7, #24]
 80094ee:	2002      	movs	r0, #2
 80094f0:	f006 f9c8 	bl	800f884 <HAL_FLASH_Program>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d102      	bne.n	8009500 <ROS_Write_Flash+0xe4>
				{
					success++;
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	3301      	adds	r3, #1
 80094fe:	61fb      	str	r3, [r7, #28]
				}
				address += 4;
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	3304      	adds	r3, #4
 8009504:	61bb      	str	r3, [r7, #24]
			for(int k = 0; k < 7; k++)
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	3301      	adds	r3, #1
 800950a:	60bb      	str	r3, [r7, #8]
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	2b06      	cmp	r3, #6
 8009510:	ddd9      	ble.n	80094c6 <ROS_Write_Flash+0xaa>
		for(int j = 0; j < point_num[i]; j++) // Number of point at specific path
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	3301      	adds	r3, #1
 8009516:	60fb      	str	r3, [r7, #12]
 8009518:	4b0e      	ldr	r3, [pc, #56]	; (8009554 <ROS_Write_Flash+0x138>)
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	4413      	add	r3, r2
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	68fa      	ldr	r2, [r7, #12]
 8009526:	429a      	cmp	r2, r3
 8009528:	dbca      	blt.n	80094c0 <ROS_Write_Flash+0xa4>
	for(int i = 0; i < path_num; i++) // Number of path
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	3301      	adds	r3, #1
 800952e:	613b      	str	r3, [r7, #16]
 8009530:	4b07      	ldr	r3, [pc, #28]	; (8009550 <ROS_Write_Flash+0x134>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	693a      	ldr	r2, [r7, #16]
 8009536:	429a      	cmp	r2, r3
 8009538:	dbbf      	blt.n	80094ba <ROS_Write_Flash+0x9e>
			}
		}
	}
	HAL_FLASH_Lock();
 800953a:	f006 fa19 	bl	800f970 <HAL_FLASH_Lock>
	return success;
 800953e:	69fb      	ldr	r3, [r7, #28]
}
 8009540:	4618      	mov	r0, r3
 8009542:	3720      	adds	r7, #32
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}
 8009548:	200002cc 	.word	0x200002cc
 800954c:	08080004 	.word	0x08080004
 8009550:	2000973c 	.word	0x2000973c
 8009554:	200092e4 	.word	0x200092e4
 8009558:	20009194 	.word	0x20009194

0800955c <ROS_Handler>:

/*
 * Call this function in the USART Receive CallBack
 */
void ROS_Handler(void)
{
 800955c:	b590      	push	{r4, r7, lr}
 800955e:	b08f      	sub	sp, #60	; 0x3c
 8009560:	af00      	add	r7, sp, #0
	static uint8_t state = 0;
	switch(state)
 8009562:	4ba1      	ldr	r3, [pc, #644]	; (80097e8 <ROS_Handler+0x28c>)
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	2b03      	cmp	r3, #3
 8009568:	f200 8343 	bhi.w	8009bf2 <ROS_Handler+0x696>
 800956c:	a201      	add	r2, pc, #4	; (adr r2, 8009574 <ROS_Handler+0x18>)
 800956e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009572:	bf00      	nop
 8009574:	08009585 	.word	0x08009585
 8009578:	08009949 	.word	0x08009949
 800957c:	080099f7 	.word	0x080099f7
 8009580:	08009aef 	.word	0x08009aef
	{
	case 0:
		if(ROS_buff[0] == 0x01 && ROS_buff[1] == 0x02)
 8009584:	4b99      	ldr	r3, [pc, #612]	; (80097ec <ROS_Handler+0x290>)
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	2b01      	cmp	r3, #1
 800958a:	f040 81d3 	bne.w	8009934 <ROS_Handler+0x3d8>
 800958e:	4b97      	ldr	r3, [pc, #604]	; (80097ec <ROS_Handler+0x290>)
 8009590:	785b      	ldrb	r3, [r3, #1]
 8009592:	2b02      	cmp	r3, #2
 8009594:	f040 81ce 	bne.w	8009934 <ROS_Handler+0x3d8>
 8009598:	4b94      	ldr	r3, [pc, #592]	; (80097ec <ROS_Handler+0x290>)
 800959a:	789a      	ldrb	r2, [r3, #2]
		{
//			led2 = !led2;
			memcpy(&instruction, &ROS_buff[2], 1);
 800959c:	4b94      	ldr	r3, [pc, #592]	; (80097f0 <ROS_Handler+0x294>)
 800959e:	701a      	strb	r2, [r3, #0]
			if(instruction == TEST)
 80095a0:	4b93      	ldr	r3, [pc, #588]	; (80097f0 <ROS_Handler+0x294>)
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d13e      	bne.n	8009626 <ROS_Handler+0xca>
			{
				state = 1;
 80095a8:	4b8f      	ldr	r3, [pc, #572]	; (80097e8 <ROS_Handler+0x28c>)
 80095aa:	2201      	movs	r2, #1
 80095ac:	701a      	strb	r2, [r3, #0]
 80095ae:	4b8f      	ldr	r3, [pc, #572]	; (80097ec <ROS_Handler+0x290>)
 80095b0:	f8d3 3003 	ldr.w	r3, [r3, #3]
 80095b4:	461a      	mov	r2, r3
				memcpy(&test_point_num, &ROS_buff[3], 4);
 80095b6:	4b8f      	ldr	r3, [pc, #572]	; (80097f4 <ROS_Handler+0x298>)
 80095b8:	601a      	str	r2, [r3, #0]

				test_points = (float**)malloc(test_point_num * sizeof(float*));
 80095ba:	4b8e      	ldr	r3, [pc, #568]	; (80097f4 <ROS_Handler+0x298>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	4618      	mov	r0, r3
 80095c2:	f00f fb3d 	bl	8018c40 <malloc>
 80095c6:	4603      	mov	r3, r0
 80095c8:	461a      	mov	r2, r3
 80095ca:	4b8b      	ldr	r3, [pc, #556]	; (80097f8 <ROS_Handler+0x29c>)
 80095cc:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < test_point_num; i++)
 80095ce:	2300      	movs	r3, #0
 80095d0:	637b      	str	r3, [r7, #52]	; 0x34
 80095d2:	e00c      	b.n	80095ee <ROS_Handler+0x92>
					test_points[i] = (float*)malloc(7 * sizeof(float));
 80095d4:	4b88      	ldr	r3, [pc, #544]	; (80097f8 <ROS_Handler+0x29c>)
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	18d4      	adds	r4, r2, r3
 80095de:	201c      	movs	r0, #28
 80095e0:	f00f fb2e 	bl	8018c40 <malloc>
 80095e4:	4603      	mov	r3, r0
 80095e6:	6023      	str	r3, [r4, #0]
				for(int i = 0; i < test_point_num; i++)
 80095e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ea:	3301      	adds	r3, #1
 80095ec:	637b      	str	r3, [r7, #52]	; 0x34
 80095ee:	4b81      	ldr	r3, [pc, #516]	; (80097f4 <ROS_Handler+0x298>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095f4:	429a      	cmp	r2, r3
 80095f6:	dbed      	blt.n	80095d4 <ROS_Handler+0x78>

				HAL_UART_Transmit(ROS_UART, (uint8_t* )&test_point_num, 4, HAL_MAX_DELAY);
 80095f8:	4b80      	ldr	r3, [pc, #512]	; (80097fc <ROS_Handler+0x2a0>)
 80095fa:	6818      	ldr	r0, [r3, #0]
 80095fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009600:	2204      	movs	r2, #4
 8009602:	497c      	ldr	r1, [pc, #496]	; (80097f4 <ROS_Handler+0x298>)
 8009604:	f00a ff75 	bl	80144f2 <HAL_UART_Transmit>
				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 28 * test_point_num);
 8009608:	4b7c      	ldr	r3, [pc, #496]	; (80097fc <ROS_Handler+0x2a0>)
 800960a:	6818      	ldr	r0, [r3, #0]
 800960c:	4b79      	ldr	r3, [pc, #484]	; (80097f4 <ROS_Handler+0x298>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	b29b      	uxth	r3, r3
 8009612:	461a      	mov	r2, r3
 8009614:	00d2      	lsls	r2, r2, #3
 8009616:	1ad3      	subs	r3, r2, r3
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	b29b      	uxth	r3, r3
 800961c:	461a      	mov	r2, r3
 800961e:	4973      	ldr	r1, [pc, #460]	; (80097ec <ROS_Handler+0x290>)
 8009620:	f00b f800 	bl	8014624 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 8009624:	e18e      	b.n	8009944 <ROS_Handler+0x3e8>
			}

			else if(instruction == REGISTER)
 8009626:	4b72      	ldr	r3, [pc, #456]	; (80097f0 <ROS_Handler+0x294>)
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	2b01      	cmp	r3, #1
 800962c:	d105      	bne.n	800963a <ROS_Handler+0xde>
			{
				state = 0;
 800962e:	4b6e      	ldr	r3, [pc, #440]	; (80097e8 <ROS_Handler+0x28c>)
 8009630:	2200      	movs	r2, #0
 8009632:	701a      	strb	r2, [r3, #0]
				ROS_Register();
 8009634:	f000 fbc0 	bl	8009db8 <ROS_Register>
			if(instruction == TEST)
 8009638:	e184      	b.n	8009944 <ROS_Handler+0x3e8>
			}

			else if(instruction == WRITE)
 800963a:	4b6d      	ldr	r3, [pc, #436]	; (80097f0 <ROS_Handler+0x294>)
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	2b02      	cmp	r3, #2
 8009640:	d14a      	bne.n	80096d8 <ROS_Handler+0x17c>
			{
				total_point_num = 0;
 8009642:	4b6f      	ldr	r3, [pc, #444]	; (8009800 <ROS_Handler+0x2a4>)
 8009644:	2200      	movs	r2, #0
 8009646:	601a      	str	r2, [r3, #0]
				uint32_t write_success = 0;
 8009648:	2300      	movs	r3, #0
 800964a:	607b      	str	r3, [r7, #4]
				write_success += ROS_Write_Flash();
 800964c:	f7ff fee6 	bl	800941c <ROS_Write_Flash>
 8009650:	4602      	mov	r2, r0
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4413      	add	r3, r2
 8009656:	607b      	str	r3, [r7, #4]

				for(int i = 0; i < path_num; i++)
 8009658:	2300      	movs	r3, #0
 800965a:	633b      	str	r3, [r7, #48]	; 0x30
 800965c:	e00d      	b.n	800967a <ROS_Handler+0x11e>
				{
					total_point_num += point_num[i];
 800965e:	4b69      	ldr	r3, [pc, #420]	; (8009804 <ROS_Handler+0x2a8>)
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	4413      	add	r3, r2
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	4b65      	ldr	r3, [pc, #404]	; (8009800 <ROS_Handler+0x2a4>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4413      	add	r3, r2
 8009670:	4a63      	ldr	r2, [pc, #396]	; (8009800 <ROS_Handler+0x2a4>)
 8009672:	6013      	str	r3, [r2, #0]
				for(int i = 0; i < path_num; i++)
 8009674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009676:	3301      	adds	r3, #1
 8009678:	633b      	str	r3, [r7, #48]	; 0x30
 800967a:	4b63      	ldr	r3, [pc, #396]	; (8009808 <ROS_Handler+0x2ac>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009680:	429a      	cmp	r2, r3
 8009682:	dbec      	blt.n	800965e <ROS_Handler+0x102>
				}

				if(write_success == total_point_num * 7)
 8009684:	4b5e      	ldr	r3, [pc, #376]	; (8009800 <ROS_Handler+0x2a4>)
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	4613      	mov	r3, r2
 800968a:	00db      	lsls	r3, r3, #3
 800968c:	1a9a      	subs	r2, r3, r2
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	429a      	cmp	r2, r3
 8009692:	d10b      	bne.n	80096ac <ROS_Handler+0x150>
				{
					ack = 0x21;
 8009694:	4b5d      	ldr	r3, [pc, #372]	; (800980c <ROS_Handler+0x2b0>)
 8009696:	2221      	movs	r2, #33	; 0x21
 8009698:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(ROS_UART, &ack, 1, HAL_MAX_DELAY);
 800969a:	4b58      	ldr	r3, [pc, #352]	; (80097fc <ROS_Handler+0x2a0>)
 800969c:	6818      	ldr	r0, [r3, #0]
 800969e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096a2:	2201      	movs	r2, #1
 80096a4:	4959      	ldr	r1, [pc, #356]	; (800980c <ROS_Handler+0x2b0>)
 80096a6:	f00a ff24 	bl	80144f2 <HAL_UART_Transmit>
 80096aa:	e00a      	b.n	80096c2 <ROS_Handler+0x166>
				}
				else
				{
					ack = 0x22;
 80096ac:	4b57      	ldr	r3, [pc, #348]	; (800980c <ROS_Handler+0x2b0>)
 80096ae:	2222      	movs	r2, #34	; 0x22
 80096b0:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(ROS_UART, &ack, 1, HAL_MAX_DELAY);
 80096b2:	4b52      	ldr	r3, [pc, #328]	; (80097fc <ROS_Handler+0x2a0>)
 80096b4:	6818      	ldr	r0, [r3, #0]
 80096b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096ba:	2201      	movs	r2, #1
 80096bc:	4953      	ldr	r1, [pc, #332]	; (800980c <ROS_Handler+0x2b0>)
 80096be:	f00a ff18 	bl	80144f2 <HAL_UART_Transmit>
				}

				state = 0;
 80096c2:	4b49      	ldr	r3, [pc, #292]	; (80097e8 <ROS_Handler+0x28c>)
 80096c4:	2200      	movs	r2, #0
 80096c6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 80096c8:	4b4c      	ldr	r3, [pc, #304]	; (80097fc <ROS_Handler+0x2a0>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2207      	movs	r2, #7
 80096ce:	4947      	ldr	r1, [pc, #284]	; (80097ec <ROS_Handler+0x290>)
 80096d0:	4618      	mov	r0, r3
 80096d2:	f00a ffa7 	bl	8014624 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 80096d6:	e135      	b.n	8009944 <ROS_Handler+0x3e8>
			}

			else if(instruction == DELETE)
 80096d8:	4b45      	ldr	r3, [pc, #276]	; (80097f0 <ROS_Handler+0x294>)
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	2b05      	cmp	r3, #5
 80096de:	d10e      	bne.n	80096fe <ROS_Handler+0x1a2>
			{
				state = 0;
 80096e0:	4b41      	ldr	r3, [pc, #260]	; (80097e8 <ROS_Handler+0x28c>)
 80096e2:	2200      	movs	r2, #0
 80096e4:	701a      	strb	r2, [r3, #0]
 80096e6:	4b41      	ldr	r3, [pc, #260]	; (80097ec <ROS_Handler+0x290>)
 80096e8:	f8d3 3003 	ldr.w	r3, [r3, #3]
 80096ec:	461a      	mov	r2, r3
				memcpy(&path_index, &ROS_buff[3], 4);
 80096ee:	4b48      	ldr	r3, [pc, #288]	; (8009810 <ROS_Handler+0x2b4>)
 80096f0:	601a      	str	r2, [r3, #0]

				ROS_Delete(path_index);
 80096f2:	4b47      	ldr	r3, [pc, #284]	; (8009810 <ROS_Handler+0x2b4>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4618      	mov	r0, r3
 80096f8:	f000 fc78 	bl	8009fec <ROS_Delete>
			if(instruction == TEST)
 80096fc:	e122      	b.n	8009944 <ROS_Handler+0x3e8>
			}

			else if(instruction == READ)
 80096fe:	4b3c      	ldr	r3, [pc, #240]	; (80097f0 <ROS_Handler+0x294>)
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	2b08      	cmp	r3, #8
 8009704:	d144      	bne.n	8009790 <ROS_Handler+0x234>
 8009706:	4b39      	ldr	r3, [pc, #228]	; (80097ec <ROS_Handler+0x290>)
 8009708:	f8d3 3003 	ldr.w	r3, [r3, #3]
 800970c:	461a      	mov	r2, r3
			{
				memcpy(&path_index, &ROS_buff[3], 4);
 800970e:	4b40      	ldr	r3, [pc, #256]	; (8009810 <ROS_Handler+0x2b4>)
 8009710:	601a      	str	r2, [r3, #0]

				for(int i = 0; i < point_num[path_index - 1]; i++)
 8009712:	2300      	movs	r3, #0
 8009714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009716:	e023      	b.n	8009760 <ROS_Handler+0x204>
				{
					for(int j = 0; j < 7; j++)
 8009718:	2300      	movs	r3, #0
 800971a:	62bb      	str	r3, [r7, #40]	; 0x28
 800971c:	e01a      	b.n	8009754 <ROS_Handler+0x1f8>
					{
						HAL_UART_Transmit(ROS_UART, (uint8_t*)&PP_Points[path_index - 1][i][j], 4, HAL_MAX_DELAY);
 800971e:	4b37      	ldr	r3, [pc, #220]	; (80097fc <ROS_Handler+0x2a0>)
 8009720:	6818      	ldr	r0, [r3, #0]
 8009722:	4b3c      	ldr	r3, [pc, #240]	; (8009814 <ROS_Handler+0x2b8>)
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	4b3a      	ldr	r3, [pc, #232]	; (8009810 <ROS_Handler+0x2b4>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800972e:	3b01      	subs	r3, #1
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	4413      	add	r3, r2
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	4413      	add	r3, r2
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	18d1      	adds	r1, r2, r3
 8009744:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009748:	2204      	movs	r2, #4
 800974a:	f00a fed2 	bl	80144f2 <HAL_UART_Transmit>
					for(int j = 0; j < 7; j++)
 800974e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009750:	3301      	adds	r3, #1
 8009752:	62bb      	str	r3, [r7, #40]	; 0x28
 8009754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009756:	2b06      	cmp	r3, #6
 8009758:	dde1      	ble.n	800971e <ROS_Handler+0x1c2>
				for(int i = 0; i < point_num[path_index - 1]; i++)
 800975a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800975c:	3301      	adds	r3, #1
 800975e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009760:	4b28      	ldr	r3, [pc, #160]	; (8009804 <ROS_Handler+0x2a8>)
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	4b2a      	ldr	r3, [pc, #168]	; (8009810 <ROS_Handler+0x2b4>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800976c:	3b01      	subs	r3, #1
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	4413      	add	r3, r2
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009776:	429a      	cmp	r2, r3
 8009778:	dbce      	blt.n	8009718 <ROS_Handler+0x1bc>
					}
				}
				state = 0;
 800977a:	4b1b      	ldr	r3, [pc, #108]	; (80097e8 <ROS_Handler+0x28c>)
 800977c:	2200      	movs	r2, #0
 800977e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 8009780:	4b1e      	ldr	r3, [pc, #120]	; (80097fc <ROS_Handler+0x2a0>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2207      	movs	r2, #7
 8009786:	4919      	ldr	r1, [pc, #100]	; (80097ec <ROS_Handler+0x290>)
 8009788:	4618      	mov	r0, r3
 800978a:	f00a ff4b 	bl	8014624 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 800978e:	e0d9      	b.n	8009944 <ROS_Handler+0x3e8>
			}

			else if(instruction == DELETE_ALL)
 8009790:	4b17      	ldr	r3, [pc, #92]	; (80097f0 <ROS_Handler+0x294>)
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	2b07      	cmp	r3, #7
 8009796:	d105      	bne.n	80097a4 <ROS_Handler+0x248>
			{
				state = 0;
 8009798:	4b13      	ldr	r3, [pc, #76]	; (80097e8 <ROS_Handler+0x28c>)
 800979a:	2200      	movs	r2, #0
 800979c:	701a      	strb	r2, [r3, #0]
				ROS_DeleteAll();
 800979e:	f000 fce3 	bl	800a168 <ROS_DeleteAll>
			if(instruction == TEST)
 80097a2:	e0cf      	b.n	8009944 <ROS_Handler+0x3e8>
			}

			else if(instruction == EDIT_PATH)
 80097a4:	4b12      	ldr	r3, [pc, #72]	; (80097f0 <ROS_Handler+0x294>)
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	2b03      	cmp	r3, #3
 80097aa:	d105      	bne.n	80097b8 <ROS_Handler+0x25c>
			{
				state = 0;
 80097ac:	4b0e      	ldr	r3, [pc, #56]	; (80097e8 <ROS_Handler+0x28c>)
 80097ae:	2200      	movs	r2, #0
 80097b0:	701a      	strb	r2, [r3, #0]
				ROS_EditPath();
 80097b2:	f000 fd33 	bl	800a21c <ROS_EditPath>
			if(instruction == TEST)
 80097b6:	e0c5      	b.n	8009944 <ROS_Handler+0x3e8>
			}

			else if(instruction == GET_COUNTER)
 80097b8:	4b0d      	ldr	r3, [pc, #52]	; (80097f0 <ROS_Handler+0x294>)
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	2b09      	cmp	r3, #9
 80097be:	d12d      	bne.n	800981c <ROS_Handler+0x2c0>
			{
				HAL_UART_Transmit(ROS_UART, (uint8_t*)&ros_counter, 4, HAL_MAX_DELAY);
 80097c0:	4b0e      	ldr	r3, [pc, #56]	; (80097fc <ROS_Handler+0x2a0>)
 80097c2:	6818      	ldr	r0, [r3, #0]
 80097c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097c8:	2204      	movs	r2, #4
 80097ca:	4913      	ldr	r1, [pc, #76]	; (8009818 <ROS_Handler+0x2bc>)
 80097cc:	f00a fe91 	bl	80144f2 <HAL_UART_Transmit>

				state = 0;
 80097d0:	4b05      	ldr	r3, [pc, #20]	; (80097e8 <ROS_Handler+0x28c>)
 80097d2:	2200      	movs	r2, #0
 80097d4:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 80097d6:	4b09      	ldr	r3, [pc, #36]	; (80097fc <ROS_Handler+0x2a0>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2207      	movs	r2, #7
 80097dc:	4903      	ldr	r1, [pc, #12]	; (80097ec <ROS_Handler+0x290>)
 80097de:	4618      	mov	r0, r3
 80097e0:	f00a ff20 	bl	8014624 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 80097e4:	e0ae      	b.n	8009944 <ROS_Handler+0x3e8>
 80097e6:	bf00      	nop
 80097e8:	200002e0 	.word	0x200002e0
 80097ec:	20007974 	.word	0x20007974
 80097f0:	2000919c 	.word	0x2000919c
 80097f4:	20009244 	.word	0x20009244
 80097f8:	20009b84 	.word	0x20009b84
 80097fc:	2000987c 	.word	0x2000987c
 8009800:	2000941c 	.word	0x2000941c
 8009804:	200092e4 	.word	0x200092e4
 8009808:	2000973c 	.word	0x2000973c
 800980c:	20006990 	.word	0x20006990
 8009810:	20006a28 	.word	0x20006a28
 8009814:	20009194 	.word	0x20009194
 8009818:	20009420 	.word	0x20009420
			}

			else if(instruction == EDIT_POINT)
 800981c:	4b92      	ldr	r3, [pc, #584]	; (8009a68 <ROS_Handler+0x50c>)
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	2b04      	cmp	r3, #4
 8009822:	d118      	bne.n	8009856 <ROS_Handler+0x2fa>
			{
				state = 2;
 8009824:	4b91      	ldr	r3, [pc, #580]	; (8009a6c <ROS_Handler+0x510>)
 8009826:	2202      	movs	r2, #2
 8009828:	701a      	strb	r2, [r3, #0]
 800982a:	4b91      	ldr	r3, [pc, #580]	; (8009a70 <ROS_Handler+0x514>)
 800982c:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8009830:	461a      	mov	r2, r3
				memcpy(&path_index, &ROS_buff[3], 4);
 8009832:	4b90      	ldr	r3, [pc, #576]	; (8009a74 <ROS_Handler+0x518>)
 8009834:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(ROS_UART, (uint8_t*)&path_index, 4, HAL_MAX_DELAY);
 8009836:	4b90      	ldr	r3, [pc, #576]	; (8009a78 <ROS_Handler+0x51c>)
 8009838:	6818      	ldr	r0, [r3, #0]
 800983a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800983e:	2204      	movs	r2, #4
 8009840:	498c      	ldr	r1, [pc, #560]	; (8009a74 <ROS_Handler+0x518>)
 8009842:	f00a fe56 	bl	80144f2 <HAL_UART_Transmit>

				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 32); // 7 Data + 1 Point Index
 8009846:	4b8c      	ldr	r3, [pc, #560]	; (8009a78 <ROS_Handler+0x51c>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2220      	movs	r2, #32
 800984c:	4988      	ldr	r1, [pc, #544]	; (8009a70 <ROS_Handler+0x514>)
 800984e:	4618      	mov	r0, r3
 8009850:	f00a fee8 	bl	8014624 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 8009854:	e076      	b.n	8009944 <ROS_Handler+0x3e8>
			}

			else if(instruction == DELETE_POINT)
 8009856:	4b84      	ldr	r3, [pc, #528]	; (8009a68 <ROS_Handler+0x50c>)
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	2b06      	cmp	r3, #6
 800985c:	d118      	bne.n	8009890 <ROS_Handler+0x334>
			{
				state = 3;
 800985e:	4b83      	ldr	r3, [pc, #524]	; (8009a6c <ROS_Handler+0x510>)
 8009860:	2203      	movs	r2, #3
 8009862:	701a      	strb	r2, [r3, #0]
 8009864:	4b82      	ldr	r3, [pc, #520]	; (8009a70 <ROS_Handler+0x514>)
 8009866:	f8d3 3003 	ldr.w	r3, [r3, #3]
 800986a:	461a      	mov	r2, r3
				memcpy(&path_index, &ROS_buff[3], 4);
 800986c:	4b81      	ldr	r3, [pc, #516]	; (8009a74 <ROS_Handler+0x518>)
 800986e:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(ROS_UART, (uint8_t*)&path_index, 4, HAL_MAX_DELAY);
 8009870:	4b81      	ldr	r3, [pc, #516]	; (8009a78 <ROS_Handler+0x51c>)
 8009872:	6818      	ldr	r0, [r3, #0]
 8009874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009878:	2204      	movs	r2, #4
 800987a:	497e      	ldr	r1, [pc, #504]	; (8009a74 <ROS_Handler+0x518>)
 800987c:	f00a fe39 	bl	80144f2 <HAL_UART_Transmit>

				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 4);
 8009880:	4b7d      	ldr	r3, [pc, #500]	; (8009a78 <ROS_Handler+0x51c>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	2204      	movs	r2, #4
 8009886:	497a      	ldr	r1, [pc, #488]	; (8009a70 <ROS_Handler+0x514>)
 8009888:	4618      	mov	r0, r3
 800988a:	f00a fecb 	bl	8014624 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 800988e:	e059      	b.n	8009944 <ROS_Handler+0x3e8>
			}

			else if(instruction == TEST_RUN)
 8009890:	4b75      	ldr	r3, [pc, #468]	; (8009a68 <ROS_Handler+0x50c>)
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	2b0a      	cmp	r3, #10
 8009896:	d113      	bne.n	80098c0 <ROS_Handler+0x364>
			{
				if(test_point_num)
 8009898:	4b78      	ldr	r3, [pc, #480]	; (8009a7c <ROS_Handler+0x520>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d004      	beq.n	80098aa <ROS_Handler+0x34e>
				{
					sys.ros_test_start = 1;
 80098a0:	4a77      	ldr	r2, [pc, #476]	; (8009a80 <ROS_Handler+0x524>)
 80098a2:	7813      	ldrb	r3, [r2, #0]
 80098a4:	f043 0320 	orr.w	r3, r3, #32
 80098a8:	7013      	strb	r3, [r2, #0]
				}

				state = 0;
 80098aa:	4b70      	ldr	r3, [pc, #448]	; (8009a6c <ROS_Handler+0x510>)
 80098ac:	2200      	movs	r2, #0
 80098ae:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 80098b0:	4b71      	ldr	r3, [pc, #452]	; (8009a78 <ROS_Handler+0x51c>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2207      	movs	r2, #7
 80098b6:	496e      	ldr	r1, [pc, #440]	; (8009a70 <ROS_Handler+0x514>)
 80098b8:	4618      	mov	r0, r3
 80098ba:	f00a feb3 	bl	8014624 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 80098be:	e041      	b.n	8009944 <ROS_Handler+0x3e8>
			}

			else if(instruction == RUN_PATH)
 80098c0:	4b69      	ldr	r3, [pc, #420]	; (8009a68 <ROS_Handler+0x50c>)
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	2b0b      	cmp	r3, #11
 80098c6:	d121      	bne.n	800990c <ROS_Handler+0x3b0>
 80098c8:	4b69      	ldr	r3, [pc, #420]	; (8009a70 <ROS_Handler+0x514>)
 80098ca:	f8d3 3003 	ldr.w	r3, [r3, #3]
 80098ce:	461a      	mov	r2, r3
			{
				memcpy(&path_index, &ROS_buff[3], 4);
 80098d0:	4b68      	ldr	r3, [pc, #416]	; (8009a74 <ROS_Handler+0x518>)
 80098d2:	601a      	str	r2, [r3, #0]
				if(point_num[path_index - 1])
 80098d4:	4b6b      	ldr	r3, [pc, #428]	; (8009a84 <ROS_Handler+0x528>)
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	4b66      	ldr	r3, [pc, #408]	; (8009a74 <ROS_Handler+0x518>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80098e0:	3b01      	subs	r3, #1
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	4413      	add	r3, r2
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d004      	beq.n	80098f6 <ROS_Handler+0x39a>
				{
					sys.ros_path_start = 1;
 80098ec:	4a64      	ldr	r2, [pc, #400]	; (8009a80 <ROS_Handler+0x524>)
 80098ee:	7813      	ldrb	r3, [r2, #0]
 80098f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098f4:	7013      	strb	r3, [r2, #0]
				}

				state = 0;
 80098f6:	4b5d      	ldr	r3, [pc, #372]	; (8009a6c <ROS_Handler+0x510>)
 80098f8:	2200      	movs	r2, #0
 80098fa:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 80098fc:	4b5e      	ldr	r3, [pc, #376]	; (8009a78 <ROS_Handler+0x51c>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2207      	movs	r2, #7
 8009902:	495b      	ldr	r1, [pc, #364]	; (8009a70 <ROS_Handler+0x514>)
 8009904:	4618      	mov	r0, r3
 8009906:	f00a fe8d 	bl	8014624 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 800990a:	e01b      	b.n	8009944 <ROS_Handler+0x3e8>
			}

			else if(instruction == STOP_RUN)
 800990c:	4b56      	ldr	r3, [pc, #344]	; (8009a68 <ROS_Handler+0x50c>)
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	2b0c      	cmp	r3, #12
 8009912:	d117      	bne.n	8009944 <ROS_Handler+0x3e8>
			{
				sys.ros_stop = 1;
 8009914:	4a5a      	ldr	r2, [pc, #360]	; (8009a80 <ROS_Handler+0x524>)
 8009916:	7813      	ldrb	r3, [r2, #0]
 8009918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800991c:	7013      	strb	r3, [r2, #0]
				state = 0;
 800991e:	4b53      	ldr	r3, [pc, #332]	; (8009a6c <ROS_Handler+0x510>)
 8009920:	2200      	movs	r2, #0
 8009922:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 8009924:	4b54      	ldr	r3, [pc, #336]	; (8009a78 <ROS_Handler+0x51c>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2207      	movs	r2, #7
 800992a:	4951      	ldr	r1, [pc, #324]	; (8009a70 <ROS_Handler+0x514>)
 800992c:	4618      	mov	r0, r3
 800992e:	f00a fe79 	bl	8014624 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 8009932:	e007      	b.n	8009944 <ROS_Handler+0x3e8>
			}
		}

		else
		{
			HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 8009934:	4b50      	ldr	r3, [pc, #320]	; (8009a78 <ROS_Handler+0x51c>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2207      	movs	r2, #7
 800993a:	494d      	ldr	r1, [pc, #308]	; (8009a70 <ROS_Handler+0x514>)
 800993c:	4618      	mov	r0, r3
 800993e:	f00a fe71 	bl	8014624 <HAL_UART_Receive_IT>
		}

		break;
 8009942:	e156      	b.n	8009bf2 <ROS_Handler+0x696>
			if(instruction == TEST)
 8009944:	bf00      	nop
		break;
 8009946:	e154      	b.n	8009bf2 <ROS_Handler+0x696>

	case 1:
		for(int i = 0; i < test_point_num; i++)
 8009948:	2300      	movs	r3, #0
 800994a:	627b      	str	r3, [r7, #36]	; 0x24
 800994c:	e01f      	b.n	800998e <ROS_Handler+0x432>
		{
			for(int j = 0; j < 7; j++)
 800994e:	2300      	movs	r3, #0
 8009950:	623b      	str	r3, [r7, #32]
 8009952:	e016      	b.n	8009982 <ROS_Handler+0x426>
			{
				memcpy(&test_points[i][j], &ROS_buff[j * 4 + i * 28], 4);
 8009954:	4b4c      	ldr	r3, [pc, #304]	; (8009a88 <ROS_Handler+0x52c>)
 8009956:	681a      	ldr	r2, [r3, #0]
 8009958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	4413      	add	r3, r2
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	6a3b      	ldr	r3, [r7, #32]
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	18d1      	adds	r1, r2, r3
 8009966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009968:	4613      	mov	r3, r2
 800996a:	00db      	lsls	r3, r3, #3
 800996c:	1a9a      	subs	r2, r3, r2
 800996e:	6a3b      	ldr	r3, [r7, #32]
 8009970:	4413      	add	r3, r2
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	4a3e      	ldr	r2, [pc, #248]	; (8009a70 <ROS_Handler+0x514>)
 8009976:	4413      	add	r3, r2
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	600b      	str	r3, [r1, #0]
			for(int j = 0; j < 7; j++)
 800997c:	6a3b      	ldr	r3, [r7, #32]
 800997e:	3301      	adds	r3, #1
 8009980:	623b      	str	r3, [r7, #32]
 8009982:	6a3b      	ldr	r3, [r7, #32]
 8009984:	2b06      	cmp	r3, #6
 8009986:	dde5      	ble.n	8009954 <ROS_Handler+0x3f8>
		for(int i = 0; i < test_point_num; i++)
 8009988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998a:	3301      	adds	r3, #1
 800998c:	627b      	str	r3, [r7, #36]	; 0x24
 800998e:	4b3b      	ldr	r3, [pc, #236]	; (8009a7c <ROS_Handler+0x520>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009994:	429a      	cmp	r2, r3
 8009996:	dbda      	blt.n	800994e <ROS_Handler+0x3f2>
			}
		}

		for(int i = 0; i < test_point_num; i++)
 8009998:	2300      	movs	r3, #0
 800999a:	61fb      	str	r3, [r7, #28]
 800999c:	e01b      	b.n	80099d6 <ROS_Handler+0x47a>
		{
			for(int j = 0; j < 7; j++)
 800999e:	2300      	movs	r3, #0
 80099a0:	61bb      	str	r3, [r7, #24]
 80099a2:	e012      	b.n	80099ca <ROS_Handler+0x46e>
			{
				HAL_UART_Transmit(ROS_UART, (uint8_t*)&test_points[i][j], 4, HAL_MAX_DELAY);
 80099a4:	4b34      	ldr	r3, [pc, #208]	; (8009a78 <ROS_Handler+0x51c>)
 80099a6:	6818      	ldr	r0, [r3, #0]
 80099a8:	4b37      	ldr	r3, [pc, #220]	; (8009a88 <ROS_Handler+0x52c>)
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	4413      	add	r3, r2
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	18d1      	adds	r1, r2, r3
 80099ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099be:	2204      	movs	r2, #4
 80099c0:	f00a fd97 	bl	80144f2 <HAL_UART_Transmit>
			for(int j = 0; j < 7; j++)
 80099c4:	69bb      	ldr	r3, [r7, #24]
 80099c6:	3301      	adds	r3, #1
 80099c8:	61bb      	str	r3, [r7, #24]
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	2b06      	cmp	r3, #6
 80099ce:	dde9      	ble.n	80099a4 <ROS_Handler+0x448>
		for(int i = 0; i < test_point_num; i++)
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	3301      	adds	r3, #1
 80099d4:	61fb      	str	r3, [r7, #28]
 80099d6:	4b29      	ldr	r3, [pc, #164]	; (8009a7c <ROS_Handler+0x520>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	69fa      	ldr	r2, [r7, #28]
 80099dc:	429a      	cmp	r2, r3
 80099de:	dbde      	blt.n	800999e <ROS_Handler+0x442>
			}
		}
		HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 80099e0:	4b25      	ldr	r3, [pc, #148]	; (8009a78 <ROS_Handler+0x51c>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2207      	movs	r2, #7
 80099e6:	4922      	ldr	r1, [pc, #136]	; (8009a70 <ROS_Handler+0x514>)
 80099e8:	4618      	mov	r0, r3
 80099ea:	f00a fe1b 	bl	8014624 <HAL_UART_Receive_IT>
		state = 0;
 80099ee:	4b1f      	ldr	r3, [pc, #124]	; (8009a6c <ROS_Handler+0x510>)
 80099f0:	2200      	movs	r2, #0
 80099f2:	701a      	strb	r2, [r3, #0]
		break;
 80099f4:	e0fd      	b.n	8009bf2 <ROS_Handler+0x696>

	case 2:
		point_buf = (float*)malloc(7 * sizeof(float));
 80099f6:	201c      	movs	r0, #28
 80099f8:	f00f f922 	bl	8018c40 <malloc>
 80099fc:	4603      	mov	r3, r0
 80099fe:	461a      	mov	r2, r3
 8009a00:	4b22      	ldr	r3, [pc, #136]	; (8009a8c <ROS_Handler+0x530>)
 8009a02:	601a      	str	r2, [r3, #0]
 8009a04:	4b1a      	ldr	r3, [pc, #104]	; (8009a70 <ROS_Handler+0x514>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	461a      	mov	r2, r3
		memcpy(&point_index, &ROS_buff[0], 4);
 8009a0a:	4b21      	ldr	r3, [pc, #132]	; (8009a90 <ROS_Handler+0x534>)
 8009a0c:	601a      	str	r2, [r3, #0]

		for(int i = 0; i < 7; i++)
 8009a0e:	2300      	movs	r3, #0
 8009a10:	617b      	str	r3, [r7, #20]
 8009a12:	e00e      	b.n	8009a32 <ROS_Handler+0x4d6>
		{
			memcpy(&point_buf[i], &ROS_buff[4 + i * 4], 4);
 8009a14:	4b1d      	ldr	r3, [pc, #116]	; (8009a8c <ROS_Handler+0x530>)
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	4413      	add	r3, r2
 8009a1e:	697a      	ldr	r2, [r7, #20]
 8009a20:	3201      	adds	r2, #1
 8009a22:	0092      	lsls	r2, r2, #2
 8009a24:	4912      	ldr	r1, [pc, #72]	; (8009a70 <ROS_Handler+0x514>)
 8009a26:	440a      	add	r2, r1
 8009a28:	6812      	ldr	r2, [r2, #0]
 8009a2a:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < 7; i++)
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	617b      	str	r3, [r7, #20]
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	2b06      	cmp	r3, #6
 8009a36:	dded      	ble.n	8009a14 <ROS_Handler+0x4b8>
		}

		for(int i = 0; i < 7; i++)
 8009a38:	2300      	movs	r3, #0
 8009a3a:	613b      	str	r3, [r7, #16]
 8009a3c:	e00e      	b.n	8009a5c <ROS_Handler+0x500>
		{
			HAL_UART_Transmit(ROS_UART, (uint8_t*)&point_buf[i], 4, HAL_MAX_DELAY);
 8009a3e:	4b0e      	ldr	r3, [pc, #56]	; (8009a78 <ROS_Handler+0x51c>)
 8009a40:	6818      	ldr	r0, [r3, #0]
 8009a42:	4b12      	ldr	r3, [pc, #72]	; (8009a8c <ROS_Handler+0x530>)
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	18d1      	adds	r1, r2, r3
 8009a4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a50:	2204      	movs	r2, #4
 8009a52:	f00a fd4e 	bl	80144f2 <HAL_UART_Transmit>
		for(int i = 0; i < 7; i++)
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	613b      	str	r3, [r7, #16]
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	2b06      	cmp	r3, #6
 8009a60:	dded      	ble.n	8009a3e <ROS_Handler+0x4e2>
		}

		for(int i = 0; i < 7; i++)
 8009a62:	2300      	movs	r3, #0
 8009a64:	60fb      	str	r3, [r7, #12]
 8009a66:	e034      	b.n	8009ad2 <ROS_Handler+0x576>
 8009a68:	2000919c 	.word	0x2000919c
 8009a6c:	200002e0 	.word	0x200002e0
 8009a70:	20007974 	.word	0x20007974
 8009a74:	20006a28 	.word	0x20006a28
 8009a78:	2000987c 	.word	0x2000987c
 8009a7c:	20009244 	.word	0x20009244
 8009a80:	20007268 	.word	0x20007268
 8009a84:	200092e4 	.word	0x200092e4
 8009a88:	20009b84 	.word	0x20009b84
 8009a8c:	200091d4 	.word	0x200091d4
 8009a90:	20009700 	.word	0x20009700
		{
			PP_Points[path_index - 1][point_index - 1][i] = point_buf[i];
 8009a94:	4b59      	ldr	r3, [pc, #356]	; (8009bfc <ROS_Handler+0x6a0>)
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	441a      	add	r2, r3
 8009a9e:	4b58      	ldr	r3, [pc, #352]	; (8009c00 <ROS_Handler+0x6a4>)
 8009aa0:	6819      	ldr	r1, [r3, #0]
 8009aa2:	4b58      	ldr	r3, [pc, #352]	; (8009c04 <ROS_Handler+0x6a8>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009aaa:	3b01      	subs	r3, #1
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	440b      	add	r3, r1
 8009ab0:	6819      	ldr	r1, [r3, #0]
 8009ab2:	4b55      	ldr	r3, [pc, #340]	; (8009c08 <ROS_Handler+0x6ac>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009aba:	3b01      	subs	r3, #1
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	440b      	add	r3, r1
 8009ac0:	6819      	ldr	r1, [r3, #0]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	440b      	add	r3, r1
 8009ac8:	6812      	ldr	r2, [r2, #0]
 8009aca:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < 7; i++)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	3301      	adds	r3, #1
 8009ad0:	60fb      	str	r3, [r7, #12]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2b06      	cmp	r3, #6
 8009ad6:	dddd      	ble.n	8009a94 <ROS_Handler+0x538>
		}

		state = 0;
 8009ad8:	4b4c      	ldr	r3, [pc, #304]	; (8009c0c <ROS_Handler+0x6b0>)
 8009ada:	2200      	movs	r2, #0
 8009adc:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 8009ade:	4b4c      	ldr	r3, [pc, #304]	; (8009c10 <ROS_Handler+0x6b4>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2207      	movs	r2, #7
 8009ae4:	494b      	ldr	r1, [pc, #300]	; (8009c14 <ROS_Handler+0x6b8>)
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f00a fd9c 	bl	8014624 <HAL_UART_Receive_IT>
		break;
 8009aec:	e081      	b.n	8009bf2 <ROS_Handler+0x696>
 8009aee:	4b49      	ldr	r3, [pc, #292]	; (8009c14 <ROS_Handler+0x6b8>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	461a      	mov	r2, r3

	case 3:
		memcpy(&point_index, &ROS_buff, 4);
 8009af4:	4b44      	ldr	r3, [pc, #272]	; (8009c08 <ROS_Handler+0x6ac>)
 8009af6:	601a      	str	r2, [r3, #0]

		if(point_num[path_index - 1] == 1)
 8009af8:	4b47      	ldr	r3, [pc, #284]	; (8009c18 <ROS_Handler+0x6bc>)
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	4b41      	ldr	r3, [pc, #260]	; (8009c04 <ROS_Handler+0x6a8>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009b04:	3b01      	subs	r3, #1
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	4413      	add	r3, r2
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d105      	bne.n	8009b1c <ROS_Handler+0x5c0>
		{
			ROS_Delete(path_index);
 8009b10:	4b3c      	ldr	r3, [pc, #240]	; (8009c04 <ROS_Handler+0x6a8>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4618      	mov	r0, r3
 8009b16:	f000 fa69 	bl	8009fec <ROS_Delete>
 8009b1a:	e05f      	b.n	8009bdc <ROS_Handler+0x680>
		}
		else
		{
			point_num[path_index - 1]--;
 8009b1c:	4b3e      	ldr	r3, [pc, #248]	; (8009c18 <ROS_Handler+0x6bc>)
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	4b38      	ldr	r3, [pc, #224]	; (8009c04 <ROS_Handler+0x6a8>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4413      	add	r3, r2
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	3a01      	subs	r2, #1
 8009b32:	601a      	str	r2, [r3, #0]

			for(int i = point_index - 1; i < point_num[path_index - 1]; i++)
 8009b34:	4b34      	ldr	r3, [pc, #208]	; (8009c08 <ROS_Handler+0x6ac>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	60bb      	str	r3, [r7, #8]
 8009b3c:	e01f      	b.n	8009b7e <ROS_Handler+0x622>
			{
				PP_Points[path_index - 1][i] = PP_Points[path_index - 1][i + 1];
 8009b3e:	4b30      	ldr	r3, [pc, #192]	; (8009c00 <ROS_Handler+0x6a4>)
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	4b30      	ldr	r3, [pc, #192]	; (8009c04 <ROS_Handler+0x6a8>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	4413      	add	r3, r2
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	3301      	adds	r3, #1
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	441a      	add	r2, r3
 8009b5a:	4b29      	ldr	r3, [pc, #164]	; (8009c00 <ROS_Handler+0x6a4>)
 8009b5c:	6819      	ldr	r1, [r3, #0]
 8009b5e:	4b29      	ldr	r3, [pc, #164]	; (8009c04 <ROS_Handler+0x6a8>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009b66:	3b01      	subs	r3, #1
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	440b      	add	r3, r1
 8009b6c:	6819      	ldr	r1, [r3, #0]
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	440b      	add	r3, r1
 8009b74:	6812      	ldr	r2, [r2, #0]
 8009b76:	601a      	str	r2, [r3, #0]
			for(int i = point_index - 1; i < point_num[path_index - 1]; i++)
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	60bb      	str	r3, [r7, #8]
 8009b7e:	4b26      	ldr	r3, [pc, #152]	; (8009c18 <ROS_Handler+0x6bc>)
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	4b20      	ldr	r3, [pc, #128]	; (8009c04 <ROS_Handler+0x6a8>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	4413      	add	r3, r2
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	68ba      	ldr	r2, [r7, #8]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	dbd2      	blt.n	8009b3e <ROS_Handler+0x5e2>
			}

			PP_Points[path_index - 1] = (float**)realloc(PP_Points[path_index - 1], point_num[path_index - 1] * sizeof(float*));
 8009b98:	4b19      	ldr	r3, [pc, #100]	; (8009c00 <ROS_Handler+0x6a4>)
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	4b19      	ldr	r3, [pc, #100]	; (8009c04 <ROS_Handler+0x6a8>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	4413      	add	r3, r2
 8009baa:	6818      	ldr	r0, [r3, #0]
 8009bac:	4b1a      	ldr	r3, [pc, #104]	; (8009c18 <ROS_Handler+0x6bc>)
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	4b14      	ldr	r3, [pc, #80]	; (8009c04 <ROS_Handler+0x6a8>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009bb8:	3b01      	subs	r3, #1
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	4413      	add	r3, r2
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	0099      	lsls	r1, r3, #2
 8009bc2:	4b0f      	ldr	r3, [pc, #60]	; (8009c00 <ROS_Handler+0x6a4>)
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	4b0f      	ldr	r3, [pc, #60]	; (8009c04 <ROS_Handler+0x6a8>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009bce:	3b01      	subs	r3, #1
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	18d4      	adds	r4, r2, r3
 8009bd4:	f00f ff7e 	bl	8019ad4 <realloc>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	6023      	str	r3, [r4, #0]
		}

		state = 0;
 8009bdc:	4b0b      	ldr	r3, [pc, #44]	; (8009c0c <ROS_Handler+0x6b0>)
 8009bde:	2200      	movs	r2, #0
 8009be0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 8009be2:	4b0b      	ldr	r3, [pc, #44]	; (8009c10 <ROS_Handler+0x6b4>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2207      	movs	r2, #7
 8009be8:	490a      	ldr	r1, [pc, #40]	; (8009c14 <ROS_Handler+0x6b8>)
 8009bea:	4618      	mov	r0, r3
 8009bec:	f00a fd1a 	bl	8014624 <HAL_UART_Receive_IT>
		break;
 8009bf0:	bf00      	nop
	}

}
 8009bf2:	bf00      	nop
 8009bf4:	373c      	adds	r7, #60	; 0x3c
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd90      	pop	{r4, r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	200091d4 	.word	0x200091d4
 8009c00:	20009194 	.word	0x20009194
 8009c04:	20006a28 	.word	0x20006a28
 8009c08:	20009700 	.word	0x20009700
 8009c0c:	200002e0 	.word	0x200002e0
 8009c10:	2000987c 	.word	0x2000987c
 8009c14:	20007974 	.word	0x20007974
 8009c18:	200092e4 	.word	0x200092e4

08009c1c <ROS_Read_Flash>:

/*
 * Call this function in set() to rewrite PP_Points with value stored in Flash
 */
void ROS_Read_Flash(void)
{
 8009c1c:	b590      	push	{r4, r7, lr}
 8009c1e:	b08b      	sub	sp, #44	; 0x2c
 8009c20:	af00      	add	r7, sp, #0
	// Enabling checking of FLASH value using usart5 by pressing reset button
	uint32_t address = SECTOR8;
 8009c22:	4b61      	ldr	r3, [pc, #388]	; (8009da8 <ROS_Read_Flash+0x18c>)
 8009c24:	627b      	str	r3, [r7, #36]	; 0x24
	memcpy(&path_num, (__IO uint32_t *)address, 4);
 8009c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	4b5f      	ldr	r3, [pc, #380]	; (8009dac <ROS_Read_Flash+0x190>)
 8009c2e:	601a      	str	r2, [r3, #0]
	address += 4;
 8009c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c32:	3304      	adds	r3, #4
 8009c34:	627b      	str	r3, [r7, #36]	; 0x24

	if(path_num)
 8009c36:	4b5d      	ldr	r3, [pc, #372]	; (8009dac <ROS_Read_Flash+0x190>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f000 80af 	beq.w	8009d9e <ROS_Read_Flash+0x182>
	{
//		sprintf((char*)ROS_buff, "path_num is %d\n\n", path_num);
//		HAL_UART_Transmit(&huart5, ROS_buff, strlen((char*)ROS_buff), HAL_MAX_DELAY);

		PP_Points = (float***)malloc(path_num * sizeof(float**));
 8009c40:	4b5a      	ldr	r3, [pc, #360]	; (8009dac <ROS_Read_Flash+0x190>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	4618      	mov	r0, r3
 8009c48:	f00e fffa 	bl	8018c40 <malloc>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	461a      	mov	r2, r3
 8009c50:	4b57      	ldr	r3, [pc, #348]	; (8009db0 <ROS_Read_Flash+0x194>)
 8009c52:	601a      	str	r2, [r3, #0]
		point_num = (int*)malloc(path_num * sizeof(int));
 8009c54:	4b55      	ldr	r3, [pc, #340]	; (8009dac <ROS_Read_Flash+0x190>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f00e fff0 	bl	8018c40 <malloc>
 8009c60:	4603      	mov	r3, r0
 8009c62:	461a      	mov	r2, r3
 8009c64:	4b53      	ldr	r3, [pc, #332]	; (8009db4 <ROS_Read_Flash+0x198>)
 8009c66:	601a      	str	r2, [r3, #0]

		for(int i = 0; i < path_num; i++)
 8009c68:	2300      	movs	r3, #0
 8009c6a:	623b      	str	r3, [r7, #32]
 8009c6c:	e00d      	b.n	8009c8a <ROS_Read_Flash+0x6e>
		{
			memcpy(&point_num[i], (__IO uint32_t *)address, 4);
 8009c6e:	4b51      	ldr	r3, [pc, #324]	; (8009db4 <ROS_Read_Flash+0x198>)
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	6a3b      	ldr	r3, [r7, #32]
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	4413      	add	r3, r2
 8009c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c7a:	6812      	ldr	r2, [r2, #0]
 8009c7c:	601a      	str	r2, [r3, #0]
			address += 4;
 8009c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c80:	3304      	adds	r3, #4
 8009c82:	627b      	str	r3, [r7, #36]	; 0x24
		for(int i = 0; i < path_num; i++)
 8009c84:	6a3b      	ldr	r3, [r7, #32]
 8009c86:	3301      	adds	r3, #1
 8009c88:	623b      	str	r3, [r7, #32]
 8009c8a:	4b48      	ldr	r3, [pc, #288]	; (8009dac <ROS_Read_Flash+0x190>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	6a3a      	ldr	r2, [r7, #32]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	dbec      	blt.n	8009c6e <ROS_Read_Flash+0x52>
		}

		for(int i = 0; i < path_num; i++)
 8009c94:	2300      	movs	r3, #0
 8009c96:	61fb      	str	r3, [r7, #28]
 8009c98:	e002      	b.n	8009ca0 <ROS_Read_Flash+0x84>
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	61fb      	str	r3, [r7, #28]
 8009ca0:	4b42      	ldr	r3, [pc, #264]	; (8009dac <ROS_Read_Flash+0x190>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	69fa      	ldr	r2, [r7, #28]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	dbf7      	blt.n	8009c9a <ROS_Read_Flash+0x7e>
//			sprintf((char*)ROS_buff, "Point num for path %d is %d\n", i + 1, point_num[i]);
//			HAL_UART_Transmit(&huart5, ROS_buff, strlen((char*)ROS_buff), HAL_MAX_DELAY);
		}
//		HAL_UART_Transmit(&huart5, (uint8_t*)"\n", 1, HAL_MAX_DELAY);

		for(int i = 0; i < path_num; i++)
 8009caa:	2300      	movs	r3, #0
 8009cac:	61bb      	str	r3, [r7, #24]
 8009cae:	e013      	b.n	8009cd8 <ROS_Read_Flash+0xbc>
		{
			PP_Points[i] = (float**)malloc(point_num[i] * sizeof(float*));
 8009cb0:	4b40      	ldr	r3, [pc, #256]	; (8009db4 <ROS_Read_Flash+0x198>)
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	4413      	add	r3, r2
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	0099      	lsls	r1, r3, #2
 8009cbe:	4b3c      	ldr	r3, [pc, #240]	; (8009db0 <ROS_Read_Flash+0x194>)
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	18d4      	adds	r4, r2, r3
 8009cc8:	4608      	mov	r0, r1
 8009cca:	f00e ffb9 	bl	8018c40 <malloc>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < path_num; i++)
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	61bb      	str	r3, [r7, #24]
 8009cd8:	4b34      	ldr	r3, [pc, #208]	; (8009dac <ROS_Read_Flash+0x190>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	69ba      	ldr	r2, [r7, #24]
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	dbe6      	blt.n	8009cb0 <ROS_Read_Flash+0x94>
		}

		for(int i = 0; i < path_num; i++)
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	617b      	str	r3, [r7, #20]
 8009ce6:	e01f      	b.n	8009d28 <ROS_Read_Flash+0x10c>
		{
			for(int j = 0; j < point_num[i]; j++)
 8009ce8:	2300      	movs	r3, #0
 8009cea:	613b      	str	r3, [r7, #16]
 8009cec:	e010      	b.n	8009d10 <ROS_Read_Flash+0xf4>
			{
				PP_Points[i][j] = (float*)malloc(7 * sizeof(float));
 8009cee:	4b30      	ldr	r3, [pc, #192]	; (8009db0 <ROS_Read_Flash+0x194>)
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	4413      	add	r3, r2
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	18d4      	adds	r4, r2, r3
 8009d00:	201c      	movs	r0, #28
 8009d02:	f00e ff9d 	bl	8018c40 <malloc>
 8009d06:	4603      	mov	r3, r0
 8009d08:	6023      	str	r3, [r4, #0]
			for(int j = 0; j < point_num[i]; j++)
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	613b      	str	r3, [r7, #16]
 8009d10:	4b28      	ldr	r3, [pc, #160]	; (8009db4 <ROS_Read_Flash+0x198>)
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	4413      	add	r3, r2
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	693a      	ldr	r2, [r7, #16]
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	dbe5      	blt.n	8009cee <ROS_Read_Flash+0xd2>
		for(int i = 0; i < path_num; i++)
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	3301      	adds	r3, #1
 8009d26:	617b      	str	r3, [r7, #20]
 8009d28:	4b20      	ldr	r3, [pc, #128]	; (8009dac <ROS_Read_Flash+0x190>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	697a      	ldr	r2, [r7, #20]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	dbda      	blt.n	8009ce8 <ROS_Read_Flash+0xcc>
			}
		}

		for(int i = 0; i < path_num; i++)
 8009d32:	2300      	movs	r3, #0
 8009d34:	60fb      	str	r3, [r7, #12]
 8009d36:	e02d      	b.n	8009d94 <ROS_Read_Flash+0x178>
		{
			for(int j = 0; j < point_num[i]; j++)
 8009d38:	2300      	movs	r3, #0
 8009d3a:	60bb      	str	r3, [r7, #8]
 8009d3c:	e01e      	b.n	8009d7c <ROS_Read_Flash+0x160>
			{
				for(int k = 0; k < 7; k++)
 8009d3e:	2300      	movs	r3, #0
 8009d40:	607b      	str	r3, [r7, #4]
 8009d42:	e015      	b.n	8009d70 <ROS_Read_Flash+0x154>
				{
					memcpy(&PP_Points[i][j][k], (__IO uint32_t *)address, 4);
 8009d44:	4b1a      	ldr	r3, [pc, #104]	; (8009db0 <ROS_Read_Flash+0x194>)
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	4413      	add	r3, r2
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	4413      	add	r3, r2
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	4413      	add	r3, r2
 8009d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d60:	6812      	ldr	r2, [r2, #0]
 8009d62:	601a      	str	r2, [r3, #0]
					address += 4;
 8009d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d66:	3304      	adds	r3, #4
 8009d68:	627b      	str	r3, [r7, #36]	; 0x24
				for(int k = 0; k < 7; k++)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	607b      	str	r3, [r7, #4]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2b06      	cmp	r3, #6
 8009d74:	dde6      	ble.n	8009d44 <ROS_Read_Flash+0x128>
			for(int j = 0; j < point_num[i]; j++)
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	60bb      	str	r3, [r7, #8]
 8009d7c:	4b0d      	ldr	r3, [pc, #52]	; (8009db4 <ROS_Read_Flash+0x198>)
 8009d7e:	681a      	ldr	r2, [r3, #0]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	4413      	add	r3, r2
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	68ba      	ldr	r2, [r7, #8]
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	dbd7      	blt.n	8009d3e <ROS_Read_Flash+0x122>
		for(int i = 0; i < path_num; i++)
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	3301      	adds	r3, #1
 8009d92:	60fb      	str	r3, [r7, #12]
 8009d94:	4b05      	ldr	r3, [pc, #20]	; (8009dac <ROS_Read_Flash+0x190>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	dbcc      	blt.n	8009d38 <ROS_Read_Flash+0x11c>
//	else
//	{
//		sprintf((char*)ROS_buff, "No memory in flash");
//		HAL_UART_Transmit(&huart5, ROS_buff, strlen((char*)ROS_buff), HAL_MAX_DELAY);
//	}
}
 8009d9e:	bf00      	nop
 8009da0:	372c      	adds	r7, #44	; 0x2c
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd90      	pop	{r4, r7, pc}
 8009da6:	bf00      	nop
 8009da8:	08080004 	.word	0x08080004
 8009dac:	2000973c 	.word	0x2000973c
 8009db0:	20009194 	.word	0x20009194
 8009db4:	200092e4 	.word	0x200092e4

08009db8 <ROS_Register>:
/*
 * Once the testing path is satisfied, calling this function will register the path in PP_Points
 * Only registered path can be run through RNSPPstart(PP_Points[counter])
 */
void ROS_Register(void)
{
 8009db8:	b590      	push	{r4, r7, lr}
 8009dba:	b087      	sub	sp, #28
 8009dbc:	af00      	add	r7, sp, #0
	path_num++;
 8009dbe:	4b84      	ldr	r3, [pc, #528]	; (8009fd0 <ROS_Register+0x218>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	4a82      	ldr	r2, [pc, #520]	; (8009fd0 <ROS_Register+0x218>)
 8009dc6:	6013      	str	r3, [r2, #0]
	if(path_num > 1)
 8009dc8:	4b81      	ldr	r3, [pc, #516]	; (8009fd0 <ROS_Register+0x218>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	dd46      	ble.n	8009e5e <ROS_Register+0xa6>
	{
		PP_Points = (float***)realloc(PP_Points, path_num * sizeof(float**));
 8009dd0:	4b80      	ldr	r3, [pc, #512]	; (8009fd4 <ROS_Register+0x21c>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a7e      	ldr	r2, [pc, #504]	; (8009fd0 <ROS_Register+0x218>)
 8009dd6:	6812      	ldr	r2, [r2, #0]
 8009dd8:	0092      	lsls	r2, r2, #2
 8009dda:	4611      	mov	r1, r2
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f00f fe79 	bl	8019ad4 <realloc>
 8009de2:	4603      	mov	r3, r0
 8009de4:	4a7b      	ldr	r2, [pc, #492]	; (8009fd4 <ROS_Register+0x21c>)
 8009de6:	6013      	str	r3, [r2, #0]
		point_num = (int*)realloc(point_num, path_num * sizeof(int));
 8009de8:	4b7b      	ldr	r3, [pc, #492]	; (8009fd8 <ROS_Register+0x220>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a78      	ldr	r2, [pc, #480]	; (8009fd0 <ROS_Register+0x218>)
 8009dee:	6812      	ldr	r2, [r2, #0]
 8009df0:	0092      	lsls	r2, r2, #2
 8009df2:	4611      	mov	r1, r2
 8009df4:	4618      	mov	r0, r3
 8009df6:	f00f fe6d 	bl	8019ad4 <realloc>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	4a76      	ldr	r2, [pc, #472]	; (8009fd8 <ROS_Register+0x220>)
 8009dfe:	6013      	str	r3, [r2, #0]

		PP_Points[path_num - 1] = (float**)malloc(test_point_num * sizeof(float*));
 8009e00:	4b76      	ldr	r3, [pc, #472]	; (8009fdc <ROS_Register+0x224>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	0099      	lsls	r1, r3, #2
 8009e06:	4b73      	ldr	r3, [pc, #460]	; (8009fd4 <ROS_Register+0x21c>)
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	4b71      	ldr	r3, [pc, #452]	; (8009fd0 <ROS_Register+0x218>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009e12:	3b01      	subs	r3, #1
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	18d4      	adds	r4, r2, r3
 8009e18:	4608      	mov	r0, r1
 8009e1a:	f00e ff11 	bl	8018c40 <malloc>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < test_point_num; i++)
 8009e22:	2300      	movs	r3, #0
 8009e24:	617b      	str	r3, [r7, #20]
 8009e26:	e014      	b.n	8009e52 <ROS_Register+0x9a>
		{
			PP_Points[path_num - 1][i] = (float*)malloc(7 * sizeof(float));
 8009e28:	4b6a      	ldr	r3, [pc, #424]	; (8009fd4 <ROS_Register+0x21c>)
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	4b68      	ldr	r3, [pc, #416]	; (8009fd0 <ROS_Register+0x218>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009e34:	3b01      	subs	r3, #1
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	4413      	add	r3, r2
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	18d4      	adds	r4, r2, r3
 8009e42:	201c      	movs	r0, #28
 8009e44:	f00e fefc 	bl	8018c40 <malloc>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < test_point_num; i++)
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	3301      	adds	r3, #1
 8009e50:	617b      	str	r3, [r7, #20]
 8009e52:	4b62      	ldr	r3, [pc, #392]	; (8009fdc <ROS_Register+0x224>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	697a      	ldr	r2, [r7, #20]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	dbe5      	blt.n	8009e28 <ROS_Register+0x70>
 8009e5c:	e045      	b.n	8009eea <ROS_Register+0x132>
		}
	}
	else if(path_num == 1)
 8009e5e:	4b5c      	ldr	r3, [pc, #368]	; (8009fd0 <ROS_Register+0x218>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d141      	bne.n	8009eea <ROS_Register+0x132>
	{
		PP_Points = (float***)malloc(path_num * sizeof(float**));
 8009e66:	4b5a      	ldr	r3, [pc, #360]	; (8009fd0 <ROS_Register+0x218>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f00e fee7 	bl	8018c40 <malloc>
 8009e72:	4603      	mov	r3, r0
 8009e74:	461a      	mov	r2, r3
 8009e76:	4b57      	ldr	r3, [pc, #348]	; (8009fd4 <ROS_Register+0x21c>)
 8009e78:	601a      	str	r2, [r3, #0]
		point_num = (int*)malloc(path_num * sizeof(int));
 8009e7a:	4b55      	ldr	r3, [pc, #340]	; (8009fd0 <ROS_Register+0x218>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	4618      	mov	r0, r3
 8009e82:	f00e fedd 	bl	8018c40 <malloc>
 8009e86:	4603      	mov	r3, r0
 8009e88:	461a      	mov	r2, r3
 8009e8a:	4b53      	ldr	r3, [pc, #332]	; (8009fd8 <ROS_Register+0x220>)
 8009e8c:	601a      	str	r2, [r3, #0]

		PP_Points[path_num - 1] = (float**)malloc(test_point_num * sizeof(float*));
 8009e8e:	4b53      	ldr	r3, [pc, #332]	; (8009fdc <ROS_Register+0x224>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	0099      	lsls	r1, r3, #2
 8009e94:	4b4f      	ldr	r3, [pc, #316]	; (8009fd4 <ROS_Register+0x21c>)
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	4b4d      	ldr	r3, [pc, #308]	; (8009fd0 <ROS_Register+0x218>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	18d4      	adds	r4, r2, r3
 8009ea6:	4608      	mov	r0, r1
 8009ea8:	f00e feca 	bl	8018c40 <malloc>
 8009eac:	4603      	mov	r3, r0
 8009eae:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < test_point_num; i++)
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	613b      	str	r3, [r7, #16]
 8009eb4:	e014      	b.n	8009ee0 <ROS_Register+0x128>
		{
			PP_Points[path_num - 1][i] = (float*)malloc(7 * sizeof(float));
 8009eb6:	4b47      	ldr	r3, [pc, #284]	; (8009fd4 <ROS_Register+0x21c>)
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	4b45      	ldr	r3, [pc, #276]	; (8009fd0 <ROS_Register+0x218>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	4413      	add	r3, r2
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	18d4      	adds	r4, r2, r3
 8009ed0:	201c      	movs	r0, #28
 8009ed2:	f00e feb5 	bl	8018c40 <malloc>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < test_point_num; i++)
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	3301      	adds	r3, #1
 8009ede:	613b      	str	r3, [r7, #16]
 8009ee0:	4b3e      	ldr	r3, [pc, #248]	; (8009fdc <ROS_Register+0x224>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	693a      	ldr	r2, [r7, #16]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	dbe5      	blt.n	8009eb6 <ROS_Register+0xfe>
		}
	}

	point_num[path_num - 1] = test_point_num;
 8009eea:	4b3b      	ldr	r3, [pc, #236]	; (8009fd8 <ROS_Register+0x220>)
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	4b38      	ldr	r3, [pc, #224]	; (8009fd0 <ROS_Register+0x218>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009ef6:	3b01      	subs	r3, #1
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	4413      	add	r3, r2
 8009efc:	4a37      	ldr	r2, [pc, #220]	; (8009fdc <ROS_Register+0x224>)
 8009efe:	6812      	ldr	r2, [r2, #0]
 8009f00:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < test_point_num; i++)
 8009f02:	2300      	movs	r3, #0
 8009f04:	60fb      	str	r3, [r7, #12]
 8009f06:	e027      	b.n	8009f58 <ROS_Register+0x1a0>
	{
		for(int j = 0; j < 7; j++)
 8009f08:	2300      	movs	r3, #0
 8009f0a:	60bb      	str	r3, [r7, #8]
 8009f0c:	e01e      	b.n	8009f4c <ROS_Register+0x194>
		{
			PP_Points[path_num - 1][i][j] = test_points[i][j];
 8009f0e:	4b34      	ldr	r3, [pc, #208]	; (8009fe0 <ROS_Register+0x228>)
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	4413      	add	r3, r2
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	441a      	add	r2, r3
 8009f20:	4b2c      	ldr	r3, [pc, #176]	; (8009fd4 <ROS_Register+0x21c>)
 8009f22:	6819      	ldr	r1, [r3, #0]
 8009f24:	4b2a      	ldr	r3, [pc, #168]	; (8009fd0 <ROS_Register+0x218>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	440b      	add	r3, r1
 8009f32:	6819      	ldr	r1, [r3, #0]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	440b      	add	r3, r1
 8009f3a:	6819      	ldr	r1, [r3, #0]
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	440b      	add	r3, r1
 8009f42:	6812      	ldr	r2, [r2, #0]
 8009f44:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < 7; j++)
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	60bb      	str	r3, [r7, #8]
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	2b06      	cmp	r3, #6
 8009f50:	dddd      	ble.n	8009f0e <ROS_Register+0x156>
	for(int i = 0; i < test_point_num; i++)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	3301      	adds	r3, #1
 8009f56:	60fb      	str	r3, [r7, #12]
 8009f58:	4b20      	ldr	r3, [pc, #128]	; (8009fdc <ROS_Register+0x224>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	dbd2      	blt.n	8009f08 <ROS_Register+0x150>
		}
	}

	for(int i = 0; i < test_point_num; i++)
 8009f62:	2300      	movs	r3, #0
 8009f64:	607b      	str	r3, [r7, #4]
 8009f66:	e023      	b.n	8009fb0 <ROS_Register+0x1f8>
	{
		for(int j = 0; j < 7; j++)
 8009f68:	2300      	movs	r3, #0
 8009f6a:	603b      	str	r3, [r7, #0]
 8009f6c:	e01a      	b.n	8009fa4 <ROS_Register+0x1ec>
		{
			HAL_UART_Transmit(ROS_UART, (uint8_t*)&PP_Points[path_num - 1][i][j], 4, HAL_MAX_DELAY);
 8009f6e:	4b1d      	ldr	r3, [pc, #116]	; (8009fe4 <ROS_Register+0x22c>)
 8009f70:	6818      	ldr	r0, [r3, #0]
 8009f72:	4b18      	ldr	r3, [pc, #96]	; (8009fd4 <ROS_Register+0x21c>)
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	4b16      	ldr	r3, [pc, #88]	; (8009fd0 <ROS_Register+0x218>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009f7e:	3b01      	subs	r3, #1
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	4413      	add	r3, r2
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	4413      	add	r3, r2
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	18d1      	adds	r1, r2, r3
 8009f94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f98:	2204      	movs	r2, #4
 8009f9a:	f00a faaa 	bl	80144f2 <HAL_UART_Transmit>
		for(int j = 0; j < 7; j++)
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	603b      	str	r3, [r7, #0]
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	2b06      	cmp	r3, #6
 8009fa8:	dde1      	ble.n	8009f6e <ROS_Register+0x1b6>
	for(int i = 0; i < test_point_num; i++)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	3301      	adds	r3, #1
 8009fae:	607b      	str	r3, [r7, #4]
 8009fb0:	4b0a      	ldr	r3, [pc, #40]	; (8009fdc <ROS_Register+0x224>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	dbd6      	blt.n	8009f68 <ROS_Register+0x1b0>
		}
	}

	HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 8009fba:	4b0a      	ldr	r3, [pc, #40]	; (8009fe4 <ROS_Register+0x22c>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2207      	movs	r2, #7
 8009fc0:	4909      	ldr	r1, [pc, #36]	; (8009fe8 <ROS_Register+0x230>)
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f00a fb2e 	bl	8014624 <HAL_UART_Receive_IT>
}
 8009fc8:	bf00      	nop
 8009fca:	371c      	adds	r7, #28
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd90      	pop	{r4, r7, pc}
 8009fd0:	2000973c 	.word	0x2000973c
 8009fd4:	20009194 	.word	0x20009194
 8009fd8:	200092e4 	.word	0x200092e4
 8009fdc:	20009244 	.word	0x20009244
 8009fe0:	20009b84 	.word	0x20009b84
 8009fe4:	2000987c 	.word	0x2000987c
 8009fe8:	20007974 	.word	0x20007974

08009fec <ROS_Delete>:
 * Delete specific path in PP_Points
 * User not able to run the path again
 * Can only delete registered path
 */
void ROS_Delete(int path_index)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b086      	sub	sp, #24
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
	path_num--;
 8009ff4:	4b56      	ldr	r3, [pc, #344]	; (800a150 <ROS_Delete+0x164>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	3b01      	subs	r3, #1
 8009ffa:	4a55      	ldr	r2, [pc, #340]	; (800a150 <ROS_Delete+0x164>)
 8009ffc:	6013      	str	r3, [r2, #0]
	if(path_index - 1 == path_num)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	1e5a      	subs	r2, r3, #1
 800a002:	4b53      	ldr	r3, [pc, #332]	; (800a150 <ROS_Delete+0x164>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	429a      	cmp	r2, r3
 800a008:	d132      	bne.n	800a070 <ROS_Delete+0x84>
	{
		point_num = (int*)realloc(point_num, path_num * sizeof(int));
 800a00a:	4b52      	ldr	r3, [pc, #328]	; (800a154 <ROS_Delete+0x168>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a50      	ldr	r2, [pc, #320]	; (800a150 <ROS_Delete+0x164>)
 800a010:	6812      	ldr	r2, [r2, #0]
 800a012:	0092      	lsls	r2, r2, #2
 800a014:	4611      	mov	r1, r2
 800a016:	4618      	mov	r0, r3
 800a018:	f00f fd5c 	bl	8019ad4 <realloc>
 800a01c:	4603      	mov	r3, r0
 800a01e:	4a4d      	ldr	r2, [pc, #308]	; (800a154 <ROS_Delete+0x168>)
 800a020:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < path_num; i++)
 800a022:	2300      	movs	r3, #0
 800a024:	617b      	str	r3, [r7, #20]
 800a026:	e00d      	b.n	800a044 <ROS_Delete+0x58>
		{
			total_point_num += point_num[i];
 800a028:	4b4a      	ldr	r3, [pc, #296]	; (800a154 <ROS_Delete+0x168>)
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	4413      	add	r3, r2
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	4b48      	ldr	r3, [pc, #288]	; (800a158 <ROS_Delete+0x16c>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4413      	add	r3, r2
 800a03a:	4a47      	ldr	r2, [pc, #284]	; (800a158 <ROS_Delete+0x16c>)
 800a03c:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < path_num; i++)
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	3301      	adds	r3, #1
 800a042:	617b      	str	r3, [r7, #20]
 800a044:	4b42      	ldr	r3, [pc, #264]	; (800a150 <ROS_Delete+0x164>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	697a      	ldr	r2, [r7, #20]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	dbec      	blt.n	800a028 <ROS_Delete+0x3c>
		}
		PP_Points = (float***)realloc(PP_Points, total_point_num * 7 * sizeof(float));
 800a04e:	4b43      	ldr	r3, [pc, #268]	; (800a15c <ROS_Delete+0x170>)
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	4b41      	ldr	r3, [pc, #260]	; (800a158 <ROS_Delete+0x16c>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4619      	mov	r1, r3
 800a058:	460b      	mov	r3, r1
 800a05a:	00db      	lsls	r3, r3, #3
 800a05c:	1a5b      	subs	r3, r3, r1
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	4619      	mov	r1, r3
 800a062:	4610      	mov	r0, r2
 800a064:	f00f fd36 	bl	8019ad4 <realloc>
 800a068:	4603      	mov	r3, r0
 800a06a:	4a3c      	ldr	r2, [pc, #240]	; (800a15c <ROS_Delete+0x170>)
 800a06c:	6013      	str	r3, [r2, #0]
 800a06e:	e063      	b.n	800a138 <ROS_Delete+0x14c>
//		HAL_UART_Transmit(&huart5, ROS_buff, 16, HAL_MAX_DELAY);
	}

	else
	{
		for(int i = path_index - 1; i < path_num; i++)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	3b01      	subs	r3, #1
 800a074:	613b      	str	r3, [r7, #16]
 800a076:	e00f      	b.n	800a098 <ROS_Delete+0xac>
		{
			point_num[i] = point_num[i + 1];
 800a078:	4b36      	ldr	r3, [pc, #216]	; (800a154 <ROS_Delete+0x168>)
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	3301      	adds	r3, #1
 800a080:	009b      	lsls	r3, r3, #2
 800a082:	441a      	add	r2, r3
 800a084:	4b33      	ldr	r3, [pc, #204]	; (800a154 <ROS_Delete+0x168>)
 800a086:	6819      	ldr	r1, [r3, #0]
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	440b      	add	r3, r1
 800a08e:	6812      	ldr	r2, [r2, #0]
 800a090:	601a      	str	r2, [r3, #0]
		for(int i = path_index - 1; i < path_num; i++)
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	3301      	adds	r3, #1
 800a096:	613b      	str	r3, [r7, #16]
 800a098:	4b2d      	ldr	r3, [pc, #180]	; (800a150 <ROS_Delete+0x164>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	693a      	ldr	r2, [r7, #16]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	dbea      	blt.n	800a078 <ROS_Delete+0x8c>
		}
		point_num = (int*)realloc(point_num, path_num * sizeof(int));
 800a0a2:	4b2c      	ldr	r3, [pc, #176]	; (800a154 <ROS_Delete+0x168>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a2a      	ldr	r2, [pc, #168]	; (800a150 <ROS_Delete+0x164>)
 800a0a8:	6812      	ldr	r2, [r2, #0]
 800a0aa:	0092      	lsls	r2, r2, #2
 800a0ac:	4611      	mov	r1, r2
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f00f fd10 	bl	8019ad4 <realloc>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	4a27      	ldr	r2, [pc, #156]	; (800a154 <ROS_Delete+0x168>)
 800a0b8:	6013      	str	r3, [r2, #0]

		for(int i = path_index - 1; i < path_num; i++)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	3b01      	subs	r3, #1
 800a0be:	60fb      	str	r3, [r7, #12]
 800a0c0:	e00f      	b.n	800a0e2 <ROS_Delete+0xf6>
		{
			PP_Points[i] = PP_Points[i + 1];
 800a0c2:	4b26      	ldr	r3, [pc, #152]	; (800a15c <ROS_Delete+0x170>)
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	441a      	add	r2, r3
 800a0ce:	4b23      	ldr	r3, [pc, #140]	; (800a15c <ROS_Delete+0x170>)
 800a0d0:	6819      	ldr	r1, [r3, #0]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	440b      	add	r3, r1
 800a0d8:	6812      	ldr	r2, [r2, #0]
 800a0da:	601a      	str	r2, [r3, #0]
		for(int i = path_index - 1; i < path_num; i++)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	60fb      	str	r3, [r7, #12]
 800a0e2:	4b1b      	ldr	r3, [pc, #108]	; (800a150 <ROS_Delete+0x164>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	68fa      	ldr	r2, [r7, #12]
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	dbea      	blt.n	800a0c2 <ROS_Delete+0xd6>
		}

		for(int i = 0; i < path_num; i++)
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	60bb      	str	r3, [r7, #8]
 800a0f0:	e00d      	b.n	800a10e <ROS_Delete+0x122>
		{
			total_point_num += point_num[i];
 800a0f2:	4b18      	ldr	r3, [pc, #96]	; (800a154 <ROS_Delete+0x168>)
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	009b      	lsls	r3, r3, #2
 800a0fa:	4413      	add	r3, r2
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	4b16      	ldr	r3, [pc, #88]	; (800a158 <ROS_Delete+0x16c>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4413      	add	r3, r2
 800a104:	4a14      	ldr	r2, [pc, #80]	; (800a158 <ROS_Delete+0x16c>)
 800a106:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < path_num; i++)
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	3301      	adds	r3, #1
 800a10c:	60bb      	str	r3, [r7, #8]
 800a10e:	4b10      	ldr	r3, [pc, #64]	; (800a150 <ROS_Delete+0x164>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	68ba      	ldr	r2, [r7, #8]
 800a114:	429a      	cmp	r2, r3
 800a116:	dbec      	blt.n	800a0f2 <ROS_Delete+0x106>
		}

		PP_Points = (float***)realloc(PP_Points, total_point_num * 7 * sizeof(float));
 800a118:	4b10      	ldr	r3, [pc, #64]	; (800a15c <ROS_Delete+0x170>)
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	4b0e      	ldr	r3, [pc, #56]	; (800a158 <ROS_Delete+0x16c>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4619      	mov	r1, r3
 800a122:	460b      	mov	r3, r1
 800a124:	00db      	lsls	r3, r3, #3
 800a126:	1a5b      	subs	r3, r3, r1
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	4619      	mov	r1, r3
 800a12c:	4610      	mov	r0, r2
 800a12e:	f00f fcd1 	bl	8019ad4 <realloc>
 800a132:	4603      	mov	r3, r0
 800a134:	4a09      	ldr	r2, [pc, #36]	; (800a15c <ROS_Delete+0x170>)
 800a136:	6013      	str	r3, [r2, #0]
//		sprintf((char*)ROS_buff, "Path index is %d\n", path_index);
//		HAL_UART_Transmit(&huart5, ROS_buff, 16, HAL_MAX_DELAY);
	}

	HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 800a138:	4b09      	ldr	r3, [pc, #36]	; (800a160 <ROS_Delete+0x174>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	2207      	movs	r2, #7
 800a13e:	4909      	ldr	r1, [pc, #36]	; (800a164 <ROS_Delete+0x178>)
 800a140:	4618      	mov	r0, r3
 800a142:	f00a fa6f 	bl	8014624 <HAL_UART_Receive_IT>

}
 800a146:	bf00      	nop
 800a148:	3718      	adds	r7, #24
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	2000973c 	.word	0x2000973c
 800a154:	200092e4 	.word	0x200092e4
 800a158:	2000941c 	.word	0x2000941c
 800a15c:	20009194 	.word	0x20009194
 800a160:	2000987c 	.word	0x2000987c
 800a164:	20007974 	.word	0x20007974

0800a168 <ROS_DeleteAll>:
/*
 * Delete all existing registered path
 * Usually used to reset all path registered
 */
void ROS_DeleteAll(void)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
	for(int i = 0; i < path_num; i++)
 800a16e:	2300      	movs	r3, #0
 800a170:	60fb      	str	r3, [r7, #12]
 800a172:	e01e      	b.n	800a1b2 <ROS_DeleteAll+0x4a>
	{
		for(int j = 0; j < point_num[i]; j++)
 800a174:	2300      	movs	r3, #0
 800a176:	60bb      	str	r3, [r7, #8]
 800a178:	e00f      	b.n	800a19a <ROS_DeleteAll+0x32>
		{
			free(PP_Points[i][j]);
 800a17a:	4b24      	ldr	r3, [pc, #144]	; (800a20c <ROS_DeleteAll+0xa4>)
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	009b      	lsls	r3, r3, #2
 800a182:	4413      	add	r3, r2
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	4413      	add	r3, r2
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4618      	mov	r0, r3
 800a190:	f00e fd5e 	bl	8018c50 <free>
		for(int j = 0; j < point_num[i]; j++)
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	3301      	adds	r3, #1
 800a198:	60bb      	str	r3, [r7, #8]
 800a19a:	4b1d      	ldr	r3, [pc, #116]	; (800a210 <ROS_DeleteAll+0xa8>)
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	4413      	add	r3, r2
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	68ba      	ldr	r2, [r7, #8]
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	dbe6      	blt.n	800a17a <ROS_DeleteAll+0x12>
	for(int i = 0; i < path_num; i++)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	60fb      	str	r3, [r7, #12]
 800a1b2:	4b18      	ldr	r3, [pc, #96]	; (800a214 <ROS_DeleteAll+0xac>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	68fa      	ldr	r2, [r7, #12]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	dbdb      	blt.n	800a174 <ROS_DeleteAll+0xc>
		}
	}

	for(int i = 0; i < path_num; i++)
 800a1bc:	2300      	movs	r3, #0
 800a1be:	607b      	str	r3, [r7, #4]
 800a1c0:	e00b      	b.n	800a1da <ROS_DeleteAll+0x72>
	{
		free(PP_Points[i]);
 800a1c2:	4b12      	ldr	r3, [pc, #72]	; (800a20c <ROS_DeleteAll+0xa4>)
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	4413      	add	r3, r2
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f00e fd3e 	bl	8018c50 <free>
	for(int i = 0; i < path_num; i++)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	607b      	str	r3, [r7, #4]
 800a1da:	4b0e      	ldr	r3, [pc, #56]	; (800a214 <ROS_DeleteAll+0xac>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	dbee      	blt.n	800a1c2 <ROS_DeleteAll+0x5a>
	}

	free(PP_Points);
 800a1e4:	4b09      	ldr	r3, [pc, #36]	; (800a20c <ROS_DeleteAll+0xa4>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f00e fd31 	bl	8018c50 <free>
	free(point_num);
 800a1ee:	4b08      	ldr	r3, [pc, #32]	; (800a210 <ROS_DeleteAll+0xa8>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f00e fd2c 	bl	8018c50 <free>

	ROS_Init(ROS_UART);
 800a1f8:	4b07      	ldr	r3, [pc, #28]	; (800a218 <ROS_DeleteAll+0xb0>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7ff f8ef 	bl	80093e0 <ROS_Init>
}
 800a202:	bf00      	nop
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	20009194 	.word	0x20009194
 800a210:	200092e4 	.word	0x200092e4
 800a214:	2000973c 	.word	0x2000973c
 800a218:	2000987c 	.word	0x2000987c

0800a21c <ROS_EditPath>:
 * Allow user to edit registered path with different number of points than original ones
 * After satisfied the testing path, it will overwrite the desired path in PP_Points
 * Call RNSPPStart(PP_Points[${editing_index}] to see changes
 */
void ROS_EditPath(void)
{
 800a21c:	b590      	push	{r4, r7, lr}
 800a21e:	b095      	sub	sp, #84	; 0x54
 800a220:	af00      	add	r7, sp, #0
	total_point_num = 0;
 800a222:	4b99      	ldr	r3, [pc, #612]	; (800a488 <ROS_EditPath+0x26c>)
 800a224:	2200      	movs	r2, #0
 800a226:	601a      	str	r2, [r3, #0]
 800a228:	4b98      	ldr	r3, [pc, #608]	; (800a48c <ROS_EditPath+0x270>)
 800a22a:	f8d3 3003 	ldr.w	r3, [r3, #3]
 800a22e:	461a      	mov	r2, r3
	memcpy(&edit_index, &ROS_buff[3], 4);
 800a230:	4b97      	ldr	r3, [pc, #604]	; (800a490 <ROS_EditPath+0x274>)
 800a232:	601a      	str	r2, [r3, #0]

	if(edit_index == path_num)
 800a234:	4b96      	ldr	r3, [pc, #600]	; (800a490 <ROS_EditPath+0x274>)
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	4b96      	ldr	r3, [pc, #600]	; (800a494 <ROS_EditPath+0x278>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d137      	bne.n	800a2b0 <ROS_EditPath+0x94>
	{
		/*
		 Just delete the last path and require user to register again
		 */
		path_num--;
 800a240:	4b94      	ldr	r3, [pc, #592]	; (800a494 <ROS_EditPath+0x278>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	3b01      	subs	r3, #1
 800a246:	4a93      	ldr	r2, [pc, #588]	; (800a494 <ROS_EditPath+0x278>)
 800a248:	6013      	str	r3, [r2, #0]
		point_num = (int*)realloc(point_num, path_num * sizeof(int));
 800a24a:	4b93      	ldr	r3, [pc, #588]	; (800a498 <ROS_EditPath+0x27c>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a91      	ldr	r2, [pc, #580]	; (800a494 <ROS_EditPath+0x278>)
 800a250:	6812      	ldr	r2, [r2, #0]
 800a252:	0092      	lsls	r2, r2, #2
 800a254:	4611      	mov	r1, r2
 800a256:	4618      	mov	r0, r3
 800a258:	f00f fc3c 	bl	8019ad4 <realloc>
 800a25c:	4603      	mov	r3, r0
 800a25e:	4a8e      	ldr	r2, [pc, #568]	; (800a498 <ROS_EditPath+0x27c>)
 800a260:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < path_num; i++)
 800a262:	2300      	movs	r3, #0
 800a264:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a266:	e00d      	b.n	800a284 <ROS_EditPath+0x68>
		{
			total_point_num += point_num[i];
 800a268:	4b8b      	ldr	r3, [pc, #556]	; (800a498 <ROS_EditPath+0x27c>)
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	4413      	add	r3, r2
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	4b84      	ldr	r3, [pc, #528]	; (800a488 <ROS_EditPath+0x26c>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4413      	add	r3, r2
 800a27a:	4a83      	ldr	r2, [pc, #524]	; (800a488 <ROS_EditPath+0x26c>)
 800a27c:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < path_num; i++)
 800a27e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a280:	3301      	adds	r3, #1
 800a282:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a284:	4b83      	ldr	r3, [pc, #524]	; (800a494 <ROS_EditPath+0x278>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a28a:	429a      	cmp	r2, r3
 800a28c:	dbec      	blt.n	800a268 <ROS_EditPath+0x4c>
		}
		PP_Points = (float***)realloc(PP_Points, total_point_num * 7 * sizeof(float));
 800a28e:	4b83      	ldr	r3, [pc, #524]	; (800a49c <ROS_EditPath+0x280>)
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	4b7d      	ldr	r3, [pc, #500]	; (800a488 <ROS_EditPath+0x26c>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4619      	mov	r1, r3
 800a298:	460b      	mov	r3, r1
 800a29a:	00db      	lsls	r3, r3, #3
 800a29c:	1a5b      	subs	r3, r3, r1
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	4610      	mov	r0, r2
 800a2a4:	f00f fc16 	bl	8019ad4 <realloc>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	4a7c      	ldr	r2, [pc, #496]	; (800a49c <ROS_EditPath+0x280>)
 800a2ac:	6013      	str	r3, [r2, #0]
//		}
//
//		free(Edit_Buff);
		HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
	}
}
 800a2ae:	e21a      	b.n	800a6e6 <ROS_EditPath+0x4ca>
		edit_offset = path_num - edit_index;
 800a2b0:	4b78      	ldr	r3, [pc, #480]	; (800a494 <ROS_EditPath+0x278>)
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	4b76      	ldr	r3, [pc, #472]	; (800a490 <ROS_EditPath+0x274>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	1ad3      	subs	r3, r2, r3
 800a2ba:	4a79      	ldr	r2, [pc, #484]	; (800a4a0 <ROS_EditPath+0x284>)
 800a2bc:	6013      	str	r3, [r2, #0]
		Edit_Buff = (float***)malloc(edit_offset * sizeof(float**));
 800a2be:	4b78      	ldr	r3, [pc, #480]	; (800a4a0 <ROS_EditPath+0x284>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f00e fcbb 	bl	8018c40 <malloc>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	4b75      	ldr	r3, [pc, #468]	; (800a4a4 <ROS_EditPath+0x288>)
 800a2d0:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < edit_offset ; i++)
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2d6:	e016      	b.n	800a306 <ROS_EditPath+0xea>
			Edit_Buff[i] = (float**)malloc(point_num[edit_index + i] * sizeof(float*));
 800a2d8:	4b6f      	ldr	r3, [pc, #444]	; (800a498 <ROS_EditPath+0x27c>)
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	4b6c      	ldr	r3, [pc, #432]	; (800a490 <ROS_EditPath+0x274>)
 800a2de:	6819      	ldr	r1, [r3, #0]
 800a2e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2e2:	440b      	add	r3, r1
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	4413      	add	r3, r2
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	0099      	lsls	r1, r3, #2
 800a2ec:	4b6d      	ldr	r3, [pc, #436]	; (800a4a4 <ROS_EditPath+0x288>)
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	18d4      	adds	r4, r2, r3
 800a2f6:	4608      	mov	r0, r1
 800a2f8:	f00e fca2 	bl	8018c40 <malloc>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < edit_offset ; i++)
 800a300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a302:	3301      	adds	r3, #1
 800a304:	64bb      	str	r3, [r7, #72]	; 0x48
 800a306:	4b66      	ldr	r3, [pc, #408]	; (800a4a0 <ROS_EditPath+0x284>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a30c:	429a      	cmp	r2, r3
 800a30e:	dbe3      	blt.n	800a2d8 <ROS_EditPath+0xbc>
		for(int i = 0; i < edit_offset; i++)
 800a310:	2300      	movs	r3, #0
 800a312:	647b      	str	r3, [r7, #68]	; 0x44
 800a314:	e022      	b.n	800a35c <ROS_EditPath+0x140>
			for(int j = 0; j < point_num[edit_index + i]; j++)
 800a316:	2300      	movs	r3, #0
 800a318:	643b      	str	r3, [r7, #64]	; 0x40
 800a31a:	e010      	b.n	800a33e <ROS_EditPath+0x122>
				Edit_Buff[i][j] = (float*)malloc(7 * sizeof(float));
 800a31c:	4b61      	ldr	r3, [pc, #388]	; (800a4a4 <ROS_EditPath+0x288>)
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	4413      	add	r3, r2
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	18d4      	adds	r4, r2, r3
 800a32e:	201c      	movs	r0, #28
 800a330:	f00e fc86 	bl	8018c40 <malloc>
 800a334:	4603      	mov	r3, r0
 800a336:	6023      	str	r3, [r4, #0]
			for(int j = 0; j < point_num[edit_index + i]; j++)
 800a338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a33a:	3301      	adds	r3, #1
 800a33c:	643b      	str	r3, [r7, #64]	; 0x40
 800a33e:	4b56      	ldr	r3, [pc, #344]	; (800a498 <ROS_EditPath+0x27c>)
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	4b53      	ldr	r3, [pc, #332]	; (800a490 <ROS_EditPath+0x274>)
 800a344:	6819      	ldr	r1, [r3, #0]
 800a346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a348:	440b      	add	r3, r1
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	4413      	add	r3, r2
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a352:	429a      	cmp	r2, r3
 800a354:	dbe2      	blt.n	800a31c <ROS_EditPath+0x100>
		for(int i = 0; i < edit_offset; i++)
 800a356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a358:	3301      	adds	r3, #1
 800a35a:	647b      	str	r3, [r7, #68]	; 0x44
 800a35c:	4b50      	ldr	r3, [pc, #320]	; (800a4a0 <ROS_EditPath+0x284>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a362:	429a      	cmp	r2, r3
 800a364:	dbd7      	blt.n	800a316 <ROS_EditPath+0xfa>
		for(int i = 0; i < edit_offset; i++)
 800a366:	2300      	movs	r3, #0
 800a368:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a36a:	e03c      	b.n	800a3e6 <ROS_EditPath+0x1ca>
			for(int j = 0; j < point_num[edit_index + i]; j++)
 800a36c:	2300      	movs	r3, #0
 800a36e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a370:	e02a      	b.n	800a3c8 <ROS_EditPath+0x1ac>
				for(int k = 0; k < 7; k++)
 800a372:	2300      	movs	r3, #0
 800a374:	637b      	str	r3, [r7, #52]	; 0x34
 800a376:	e021      	b.n	800a3bc <ROS_EditPath+0x1a0>
					Edit_Buff[i][j][k] = PP_Points[edit_index + i][j][k];
 800a378:	4b48      	ldr	r3, [pc, #288]	; (800a49c <ROS_EditPath+0x280>)
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	4b44      	ldr	r3, [pc, #272]	; (800a490 <ROS_EditPath+0x274>)
 800a37e:	6819      	ldr	r1, [r3, #0]
 800a380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a382:	440b      	add	r3, r1
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	4413      	add	r3, r2
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	4413      	add	r3, r2
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a394:	009b      	lsls	r3, r3, #2
 800a396:	441a      	add	r2, r3
 800a398:	4b42      	ldr	r3, [pc, #264]	; (800a4a4 <ROS_EditPath+0x288>)
 800a39a:	6819      	ldr	r1, [r3, #0]
 800a39c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	440b      	add	r3, r1
 800a3a2:	6819      	ldr	r1, [r3, #0]
 800a3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	440b      	add	r3, r1
 800a3aa:	6819      	ldr	r1, [r3, #0]
 800a3ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	440b      	add	r3, r1
 800a3b2:	6812      	ldr	r2, [r2, #0]
 800a3b4:	601a      	str	r2, [r3, #0]
				for(int k = 0; k < 7; k++)
 800a3b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	637b      	str	r3, [r7, #52]	; 0x34
 800a3bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3be:	2b06      	cmp	r3, #6
 800a3c0:	ddda      	ble.n	800a378 <ROS_EditPath+0x15c>
			for(int j = 0; j < point_num[edit_index + i]; j++)
 800a3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a3c8:	4b33      	ldr	r3, [pc, #204]	; (800a498 <ROS_EditPath+0x27c>)
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	4b30      	ldr	r3, [pc, #192]	; (800a490 <ROS_EditPath+0x274>)
 800a3ce:	6819      	ldr	r1, [r3, #0]
 800a3d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3d2:	440b      	add	r3, r1
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	4413      	add	r3, r2
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	dbc8      	blt.n	800a372 <ROS_EditPath+0x156>
		for(int i = 0; i < edit_offset; i++)
 800a3e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3e6:	4b2e      	ldr	r3, [pc, #184]	; (800a4a0 <ROS_EditPath+0x284>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	dbbd      	blt.n	800a36c <ROS_EditPath+0x150>
		for(int i = 0; i < path_num; i++)
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	633b      	str	r3, [r7, #48]	; 0x30
 800a3f4:	e01f      	b.n	800a436 <ROS_EditPath+0x21a>
			if(i % edit_index == 0)
 800a3f6:	4b26      	ldr	r3, [pc, #152]	; (800a490 <ROS_EditPath+0x274>)
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3fc:	fb93 f1f2 	sdiv	r1, r3, r2
 800a400:	fb02 f201 	mul.w	r2, r2, r1
 800a404:	1a9b      	subs	r3, r3, r2
 800a406:	2b00      	cmp	r3, #0
 800a408:	d107      	bne.n	800a41a <ROS_EditPath+0x1fe>
				total_point_num += test_point_num;
 800a40a:	4b1f      	ldr	r3, [pc, #124]	; (800a488 <ROS_EditPath+0x26c>)
 800a40c:	681a      	ldr	r2, [r3, #0]
 800a40e:	4b26      	ldr	r3, [pc, #152]	; (800a4a8 <ROS_EditPath+0x28c>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4413      	add	r3, r2
 800a414:	4a1c      	ldr	r2, [pc, #112]	; (800a488 <ROS_EditPath+0x26c>)
 800a416:	6013      	str	r3, [r2, #0]
 800a418:	e00a      	b.n	800a430 <ROS_EditPath+0x214>
				total_point_num += point_num[i];
 800a41a:	4b1f      	ldr	r3, [pc, #124]	; (800a498 <ROS_EditPath+0x27c>)
 800a41c:	681a      	ldr	r2, [r3, #0]
 800a41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	4413      	add	r3, r2
 800a424:	681a      	ldr	r2, [r3, #0]
 800a426:	4b18      	ldr	r3, [pc, #96]	; (800a488 <ROS_EditPath+0x26c>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4413      	add	r3, r2
 800a42c:	4a16      	ldr	r2, [pc, #88]	; (800a488 <ROS_EditPath+0x26c>)
 800a42e:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < path_num; i++)
 800a430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a432:	3301      	adds	r3, #1
 800a434:	633b      	str	r3, [r7, #48]	; 0x30
 800a436:	4b17      	ldr	r3, [pc, #92]	; (800a494 <ROS_EditPath+0x278>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a43c:	429a      	cmp	r2, r3
 800a43e:	dbda      	blt.n	800a3f6 <ROS_EditPath+0x1da>
		PP_Points = (float***)realloc(PP_Points, total_point_num * 7 * sizeof(float));
 800a440:	4b16      	ldr	r3, [pc, #88]	; (800a49c <ROS_EditPath+0x280>)
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	4b10      	ldr	r3, [pc, #64]	; (800a488 <ROS_EditPath+0x26c>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4619      	mov	r1, r3
 800a44a:	460b      	mov	r3, r1
 800a44c:	00db      	lsls	r3, r3, #3
 800a44e:	1a5b      	subs	r3, r3, r1
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	4619      	mov	r1, r3
 800a454:	4610      	mov	r0, r2
 800a456:	f00f fb3d 	bl	8019ad4 <realloc>
 800a45a:	4603      	mov	r3, r0
 800a45c:	4a0f      	ldr	r2, [pc, #60]	; (800a49c <ROS_EditPath+0x280>)
 800a45e:	6013      	str	r3, [r2, #0]
		PP_Points[edit_index - 1] = (float**)malloc(test_point_num * sizeof(float*));
 800a460:	4b11      	ldr	r3, [pc, #68]	; (800a4a8 <ROS_EditPath+0x28c>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	0099      	lsls	r1, r3, #2
 800a466:	4b0d      	ldr	r3, [pc, #52]	; (800a49c <ROS_EditPath+0x280>)
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	4b09      	ldr	r3, [pc, #36]	; (800a490 <ROS_EditPath+0x274>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a472:	3b01      	subs	r3, #1
 800a474:	009b      	lsls	r3, r3, #2
 800a476:	18d4      	adds	r4, r2, r3
 800a478:	4608      	mov	r0, r1
 800a47a:	f00e fbe1 	bl	8018c40 <malloc>
 800a47e:	4603      	mov	r3, r0
 800a480:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < test_point_num; i++)
 800a482:	2300      	movs	r3, #0
 800a484:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a486:	e026      	b.n	800a4d6 <ROS_EditPath+0x2ba>
 800a488:	2000941c 	.word	0x2000941c
 800a48c:	20007974 	.word	0x20007974
 800a490:	20009690 	.word	0x20009690
 800a494:	2000973c 	.word	0x2000973c
 800a498:	200092e4 	.word	0x200092e4
 800a49c:	20009194 	.word	0x20009194
 800a4a0:	2000a498 	.word	0x2000a498
 800a4a4:	200064ec 	.word	0x200064ec
 800a4a8:	20009244 	.word	0x20009244
			PP_Points[edit_index - 1][i] = (float*)malloc(7 * sizeof(float));
 800a4ac:	4b90      	ldr	r3, [pc, #576]	; (800a6f0 <ROS_EditPath+0x4d4>)
 800a4ae:	681a      	ldr	r2, [r3, #0]
 800a4b0:	4b90      	ldr	r3, [pc, #576]	; (800a6f4 <ROS_EditPath+0x4d8>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	4413      	add	r3, r2
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	18d4      	adds	r4, r2, r3
 800a4c6:	201c      	movs	r0, #28
 800a4c8:	f00e fbba 	bl	8018c40 <malloc>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < test_point_num; i++)
 800a4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4d6:	4b88      	ldr	r3, [pc, #544]	; (800a6f8 <ROS_EditPath+0x4dc>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	dbe5      	blt.n	800a4ac <ROS_EditPath+0x290>
		for(int i = 0; i < test_point_num; i++)
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4e4:	e027      	b.n	800a536 <ROS_EditPath+0x31a>
			for(int j = 0; j < 7; j++)
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	627b      	str	r3, [r7, #36]	; 0x24
 800a4ea:	e01e      	b.n	800a52a <ROS_EditPath+0x30e>
				PP_Points[edit_index - 1][i][j] = test_points[i][j];
 800a4ec:	4b83      	ldr	r3, [pc, #524]	; (800a6fc <ROS_EditPath+0x4e0>)
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	4413      	add	r3, r2
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	441a      	add	r2, r3
 800a4fe:	4b7c      	ldr	r3, [pc, #496]	; (800a6f0 <ROS_EditPath+0x4d4>)
 800a500:	6819      	ldr	r1, [r3, #0]
 800a502:	4b7c      	ldr	r3, [pc, #496]	; (800a6f4 <ROS_EditPath+0x4d8>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a50a:	3b01      	subs	r3, #1
 800a50c:	009b      	lsls	r3, r3, #2
 800a50e:	440b      	add	r3, r1
 800a510:	6819      	ldr	r1, [r3, #0]
 800a512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	440b      	add	r3, r1
 800a518:	6819      	ldr	r1, [r3, #0]
 800a51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	440b      	add	r3, r1
 800a520:	6812      	ldr	r2, [r2, #0]
 800a522:	601a      	str	r2, [r3, #0]
			for(int j = 0; j < 7; j++)
 800a524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a526:	3301      	adds	r3, #1
 800a528:	627b      	str	r3, [r7, #36]	; 0x24
 800a52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52c:	2b06      	cmp	r3, #6
 800a52e:	dddd      	ble.n	800a4ec <ROS_EditPath+0x2d0>
		for(int i = 0; i < test_point_num; i++)
 800a530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a532:	3301      	adds	r3, #1
 800a534:	62bb      	str	r3, [r7, #40]	; 0x28
 800a536:	4b70      	ldr	r3, [pc, #448]	; (800a6f8 <ROS_EditPath+0x4dc>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a53c:	429a      	cmp	r2, r3
 800a53e:	dbd2      	blt.n	800a4e6 <ROS_EditPath+0x2ca>
		for(int i = 0; i < edit_offset; i++)
 800a540:	2300      	movs	r3, #0
 800a542:	623b      	str	r3, [r7, #32]
 800a544:	e018      	b.n	800a578 <ROS_EditPath+0x35c>
			PP_Points[edit_index + i] = (float**)malloc(point_num[edit_index + i] * sizeof(float*));
 800a546:	4b6e      	ldr	r3, [pc, #440]	; (800a700 <ROS_EditPath+0x4e4>)
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	4b6a      	ldr	r3, [pc, #424]	; (800a6f4 <ROS_EditPath+0x4d8>)
 800a54c:	6819      	ldr	r1, [r3, #0]
 800a54e:	6a3b      	ldr	r3, [r7, #32]
 800a550:	440b      	add	r3, r1
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	4413      	add	r3, r2
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	0098      	lsls	r0, r3, #2
 800a55a:	4b65      	ldr	r3, [pc, #404]	; (800a6f0 <ROS_EditPath+0x4d4>)
 800a55c:	681a      	ldr	r2, [r3, #0]
 800a55e:	4b65      	ldr	r3, [pc, #404]	; (800a6f4 <ROS_EditPath+0x4d8>)
 800a560:	6819      	ldr	r1, [r3, #0]
 800a562:	6a3b      	ldr	r3, [r7, #32]
 800a564:	440b      	add	r3, r1
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	18d4      	adds	r4, r2, r3
 800a56a:	f00e fb69 	bl	8018c40 <malloc>
 800a56e:	4603      	mov	r3, r0
 800a570:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < edit_offset; i++)
 800a572:	6a3b      	ldr	r3, [r7, #32]
 800a574:	3301      	adds	r3, #1
 800a576:	623b      	str	r3, [r7, #32]
 800a578:	4b62      	ldr	r3, [pc, #392]	; (800a704 <ROS_EditPath+0x4e8>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	6a3a      	ldr	r2, [r7, #32]
 800a57e:	429a      	cmp	r2, r3
 800a580:	dbe1      	blt.n	800a546 <ROS_EditPath+0x32a>
		for(int i = 0; i < edit_offset; i++)
 800a582:	2300      	movs	r3, #0
 800a584:	61fb      	str	r3, [r7, #28]
 800a586:	e025      	b.n	800a5d4 <ROS_EditPath+0x3b8>
			for(int j = 0; j < point_num[edit_index + i]; j++)
 800a588:	2300      	movs	r3, #0
 800a58a:	61bb      	str	r3, [r7, #24]
 800a58c:	e013      	b.n	800a5b6 <ROS_EditPath+0x39a>
				PP_Points[edit_index + i][j] = (float*)malloc(7 * sizeof(float));
 800a58e:	4b58      	ldr	r3, [pc, #352]	; (800a6f0 <ROS_EditPath+0x4d4>)
 800a590:	681a      	ldr	r2, [r3, #0]
 800a592:	4b58      	ldr	r3, [pc, #352]	; (800a6f4 <ROS_EditPath+0x4d8>)
 800a594:	6819      	ldr	r1, [r3, #0]
 800a596:	69fb      	ldr	r3, [r7, #28]
 800a598:	440b      	add	r3, r1
 800a59a:	009b      	lsls	r3, r3, #2
 800a59c:	4413      	add	r3, r2
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	69bb      	ldr	r3, [r7, #24]
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	18d4      	adds	r4, r2, r3
 800a5a6:	201c      	movs	r0, #28
 800a5a8:	f00e fb4a 	bl	8018c40 <malloc>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	6023      	str	r3, [r4, #0]
			for(int j = 0; j < point_num[edit_index + i]; j++)
 800a5b0:	69bb      	ldr	r3, [r7, #24]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	61bb      	str	r3, [r7, #24]
 800a5b6:	4b52      	ldr	r3, [pc, #328]	; (800a700 <ROS_EditPath+0x4e4>)
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	4b4e      	ldr	r3, [pc, #312]	; (800a6f4 <ROS_EditPath+0x4d8>)
 800a5bc:	6819      	ldr	r1, [r3, #0]
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	440b      	add	r3, r1
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	4413      	add	r3, r2
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	69ba      	ldr	r2, [r7, #24]
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	dbdf      	blt.n	800a58e <ROS_EditPath+0x372>
		for(int i = 0; i < edit_offset; i++)
 800a5ce:	69fb      	ldr	r3, [r7, #28]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	61fb      	str	r3, [r7, #28]
 800a5d4:	4b4b      	ldr	r3, [pc, #300]	; (800a704 <ROS_EditPath+0x4e8>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	69fa      	ldr	r2, [r7, #28]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	dbd4      	blt.n	800a588 <ROS_EditPath+0x36c>
		for(int i = 0; i < edit_offset; i++)
 800a5de:	2300      	movs	r3, #0
 800a5e0:	617b      	str	r3, [r7, #20]
 800a5e2:	e03c      	b.n	800a65e <ROS_EditPath+0x442>
			for(int j = 0; j < point_num[edit_index + i]; j++)
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	613b      	str	r3, [r7, #16]
 800a5e8:	e02a      	b.n	800a640 <ROS_EditPath+0x424>
				for(int k = 0; k < 7; k++)
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	60fb      	str	r3, [r7, #12]
 800a5ee:	e021      	b.n	800a634 <ROS_EditPath+0x418>
					PP_Points[edit_index + i][j][k] = Edit_Buff[i][j][k];
 800a5f0:	4b45      	ldr	r3, [pc, #276]	; (800a708 <ROS_EditPath+0x4ec>)
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	4413      	add	r3, r2
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	4413      	add	r3, r2
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	441a      	add	r2, r3
 800a60a:	4b39      	ldr	r3, [pc, #228]	; (800a6f0 <ROS_EditPath+0x4d4>)
 800a60c:	6819      	ldr	r1, [r3, #0]
 800a60e:	4b39      	ldr	r3, [pc, #228]	; (800a6f4 <ROS_EditPath+0x4d8>)
 800a610:	6818      	ldr	r0, [r3, #0]
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	4403      	add	r3, r0
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	440b      	add	r3, r1
 800a61a:	6819      	ldr	r1, [r3, #0]
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	440b      	add	r3, r1
 800a622:	6819      	ldr	r1, [r3, #0]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	009b      	lsls	r3, r3, #2
 800a628:	440b      	add	r3, r1
 800a62a:	6812      	ldr	r2, [r2, #0]
 800a62c:	601a      	str	r2, [r3, #0]
				for(int k = 0; k < 7; k++)
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	3301      	adds	r3, #1
 800a632:	60fb      	str	r3, [r7, #12]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2b06      	cmp	r3, #6
 800a638:	ddda      	ble.n	800a5f0 <ROS_EditPath+0x3d4>
			for(int j = 0; j < point_num[edit_index + i]; j++)
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	3301      	adds	r3, #1
 800a63e:	613b      	str	r3, [r7, #16]
 800a640:	4b2f      	ldr	r3, [pc, #188]	; (800a700 <ROS_EditPath+0x4e4>)
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	4b2b      	ldr	r3, [pc, #172]	; (800a6f4 <ROS_EditPath+0x4d8>)
 800a646:	6819      	ldr	r1, [r3, #0]
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	440b      	add	r3, r1
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	4413      	add	r3, r2
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	693a      	ldr	r2, [r7, #16]
 800a654:	429a      	cmp	r2, r3
 800a656:	dbc8      	blt.n	800a5ea <ROS_EditPath+0x3ce>
		for(int i = 0; i < edit_offset; i++)
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	3301      	adds	r3, #1
 800a65c:	617b      	str	r3, [r7, #20]
 800a65e:	4b29      	ldr	r3, [pc, #164]	; (800a704 <ROS_EditPath+0x4e8>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	697a      	ldr	r2, [r7, #20]
 800a664:	429a      	cmp	r2, r3
 800a666:	dbbd      	blt.n	800a5e4 <ROS_EditPath+0x3c8>
		point_num[edit_index - 1] = test_point_num;
 800a668:	4b25      	ldr	r3, [pc, #148]	; (800a700 <ROS_EditPath+0x4e4>)
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	4b21      	ldr	r3, [pc, #132]	; (800a6f4 <ROS_EditPath+0x4d8>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a674:	3b01      	subs	r3, #1
 800a676:	009b      	lsls	r3, r3, #2
 800a678:	4413      	add	r3, r2
 800a67a:	4a1f      	ldr	r2, [pc, #124]	; (800a6f8 <ROS_EditPath+0x4dc>)
 800a67c:	6812      	ldr	r2, [r2, #0]
 800a67e:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < test_point_num; i++)
 800a680:	2300      	movs	r3, #0
 800a682:	60bb      	str	r3, [r7, #8]
 800a684:	e023      	b.n	800a6ce <ROS_EditPath+0x4b2>
			for(int j = 0; j < 7; j++)
 800a686:	2300      	movs	r3, #0
 800a688:	607b      	str	r3, [r7, #4]
 800a68a:	e01a      	b.n	800a6c2 <ROS_EditPath+0x4a6>
				HAL_UART_Transmit(ROS_UART, (uint8_t*)&PP_Points[edit_index - 1][i][j], 4, HAL_MAX_DELAY);
 800a68c:	4b1f      	ldr	r3, [pc, #124]	; (800a70c <ROS_EditPath+0x4f0>)
 800a68e:	6818      	ldr	r0, [r3, #0]
 800a690:	4b17      	ldr	r3, [pc, #92]	; (800a6f0 <ROS_EditPath+0x4d4>)
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	4b17      	ldr	r3, [pc, #92]	; (800a6f4 <ROS_EditPath+0x4d8>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a69c:	3b01      	subs	r3, #1
 800a69e:	009b      	lsls	r3, r3, #2
 800a6a0:	4413      	add	r3, r2
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	009b      	lsls	r3, r3, #2
 800a6a8:	4413      	add	r3, r2
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	18d1      	adds	r1, r2, r3
 800a6b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6b6:	2204      	movs	r2, #4
 800a6b8:	f009 ff1b 	bl	80144f2 <HAL_UART_Transmit>
			for(int j = 0; j < 7; j++)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	3301      	adds	r3, #1
 800a6c0:	607b      	str	r3, [r7, #4]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2b06      	cmp	r3, #6
 800a6c6:	dde1      	ble.n	800a68c <ROS_EditPath+0x470>
		for(int i = 0; i < test_point_num; i++)
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	60bb      	str	r3, [r7, #8]
 800a6ce:	4b0a      	ldr	r3, [pc, #40]	; (800a6f8 <ROS_EditPath+0x4dc>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	68ba      	ldr	r2, [r7, #8]
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	dbd6      	blt.n	800a686 <ROS_EditPath+0x46a>
		HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 800a6d8:	4b0c      	ldr	r3, [pc, #48]	; (800a70c <ROS_EditPath+0x4f0>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	2207      	movs	r2, #7
 800a6de:	490c      	ldr	r1, [pc, #48]	; (800a710 <ROS_EditPath+0x4f4>)
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f009 ff9f 	bl	8014624 <HAL_UART_Receive_IT>
}
 800a6e6:	bf00      	nop
 800a6e8:	3754      	adds	r7, #84	; 0x54
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd90      	pop	{r4, r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	20009194 	.word	0x20009194
 800a6f4:	20009690 	.word	0x20009690
 800a6f8:	20009244 	.word	0x20009244
 800a6fc:	20009b84 	.word	0x20009b84
 800a700:	200092e4 	.word	0x200092e4
 800a704:	2000a498 	.word	0x2000a498
 800a708:	200064ec 	.word	0x200064ec
 800a70c:	2000987c 	.word	0x2000987c
 800a710:	20007974 	.word	0x20007974

0800a714 <ServoxInit>:
 * 						  					TIM_CHANNEL_3
 * 						  					TIM_CHANNEL_4
 * Function Return		: None
 * Function Example		: ServoInit(&SERVO1, &htim3, GPIOA,GPIO_Pin_6, TIM_CHANNEL_1);
 */
void ServoxInit(SERVO_t* servo, TIM_HandleTypeDef* htimx, GPIO_TypeDef * SERVO_GPIOx,uint16_t SERVO_GPIO_Pin, uint32_t channel){
 800a714:	b580      	push	{r7, lr}
 800a716:	b08a      	sub	sp, #40	; 0x28
 800a718:	af00      	add	r7, sp, #0
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	607a      	str	r2, [r7, #4]
 800a720:	807b      	strh	r3, [r7, #2]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a722:	f107 0318 	add.w	r3, r7, #24
 800a726:	2200      	movs	r2, #0
 800a728:	601a      	str	r2, [r3, #0]
 800a72a:	605a      	str	r2, [r3, #4]
 800a72c:	609a      	str	r2, [r3, #8]
 800a72e:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a730:	f107 0310 	add.w	r3, r7, #16
 800a734:	2200      	movs	r2, #0
 800a736:	601a      	str	r2, [r3, #0]
 800a738:	605a      	str	r2, [r3, #4]


		if(htimx == &htim1){
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	4a69      	ldr	r2, [pc, #420]	; (800a8e4 <ServoxInit+0x1d0>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d106      	bne.n	800a750 <ServoxInit+0x3c>
			htimx->Instance = TIM1;
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	4a68      	ldr	r2, [pc, #416]	; (800a8e8 <ServoxInit+0x1d4>)
 800a746:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	22a7      	movs	r2, #167	; 0xa7
 800a74c:	605a      	str	r2, [r3, #4]
 800a74e:	e078      	b.n	800a842 <ServoxInit+0x12e>
		}
		else if(htimx == &htim2)	{
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	4a66      	ldr	r2, [pc, #408]	; (800a8ec <ServoxInit+0x1d8>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d107      	bne.n	800a768 <ServoxInit+0x54>
			htimx->Instance = TIM2;
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a75e:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	2253      	movs	r2, #83	; 0x53
 800a764:	605a      	str	r2, [r3, #4]
 800a766:	e06c      	b.n	800a842 <ServoxInit+0x12e>
		}
		else if(htimx == &htim3)	{
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	4a61      	ldr	r2, [pc, #388]	; (800a8f0 <ServoxInit+0x1dc>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d106      	bne.n	800a77e <ServoxInit+0x6a>
			htimx->Instance = TIM3;
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	4a60      	ldr	r2, [pc, #384]	; (800a8f4 <ServoxInit+0x1e0>)
 800a774:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	2253      	movs	r2, #83	; 0x53
 800a77a:	605a      	str	r2, [r3, #4]
 800a77c:	e061      	b.n	800a842 <ServoxInit+0x12e>
		}
		else if(htimx == &htim4)	{
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	4a5d      	ldr	r2, [pc, #372]	; (800a8f8 <ServoxInit+0x1e4>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d106      	bne.n	800a794 <ServoxInit+0x80>
			htimx->Instance = TIM4;
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	4a5c      	ldr	r2, [pc, #368]	; (800a8fc <ServoxInit+0x1e8>)
 800a78a:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	2253      	movs	r2, #83	; 0x53
 800a790:	605a      	str	r2, [r3, #4]
 800a792:	e056      	b.n	800a842 <ServoxInit+0x12e>
		}
		else if(htimx == &htim5)	{
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	4a5a      	ldr	r2, [pc, #360]	; (800a900 <ServoxInit+0x1ec>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d106      	bne.n	800a7aa <ServoxInit+0x96>
			htimx->Instance = TIM5;
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	4a59      	ldr	r2, [pc, #356]	; (800a904 <ServoxInit+0x1f0>)
 800a7a0:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	2253      	movs	r2, #83	; 0x53
 800a7a6:	605a      	str	r2, [r3, #4]
 800a7a8:	e04b      	b.n	800a842 <ServoxInit+0x12e>
		}
		else if(htimx == &htim8)	{
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	4a56      	ldr	r2, [pc, #344]	; (800a908 <ServoxInit+0x1f4>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d106      	bne.n	800a7c0 <ServoxInit+0xac>
			htimx->Instance = TIM8;
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	4a55      	ldr	r2, [pc, #340]	; (800a90c <ServoxInit+0x1f8>)
 800a7b6:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	22a7      	movs	r2, #167	; 0xa7
 800a7bc:	605a      	str	r2, [r3, #4]
 800a7be:	e040      	b.n	800a842 <ServoxInit+0x12e>
		}
		else if(htimx == &htim9)	{
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	4a53      	ldr	r2, [pc, #332]	; (800a910 <ServoxInit+0x1fc>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d106      	bne.n	800a7d6 <ServoxInit+0xc2>
			htimx->Instance = TIM9;
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	4a52      	ldr	r2, [pc, #328]	; (800a914 <ServoxInit+0x200>)
 800a7cc:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	22a7      	movs	r2, #167	; 0xa7
 800a7d2:	605a      	str	r2, [r3, #4]
 800a7d4:	e035      	b.n	800a842 <ServoxInit+0x12e>
		}
		else if(htimx == &htim10)	{
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	4a4f      	ldr	r2, [pc, #316]	; (800a918 <ServoxInit+0x204>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d106      	bne.n	800a7ec <ServoxInit+0xd8>
			htimx->Instance = TIM10;
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	4a4e      	ldr	r2, [pc, #312]	; (800a91c <ServoxInit+0x208>)
 800a7e2:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	22a7      	movs	r2, #167	; 0xa7
 800a7e8:	605a      	str	r2, [r3, #4]
 800a7ea:	e02a      	b.n	800a842 <ServoxInit+0x12e>
		}
		else if(htimx == &htim11)	{
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	4a4c      	ldr	r2, [pc, #304]	; (800a920 <ServoxInit+0x20c>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d106      	bne.n	800a802 <ServoxInit+0xee>
			htimx->Instance = TIM11;
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	4a4b      	ldr	r2, [pc, #300]	; (800a924 <ServoxInit+0x210>)
 800a7f8:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	22a7      	movs	r2, #167	; 0xa7
 800a7fe:	605a      	str	r2, [r3, #4]
 800a800:	e01f      	b.n	800a842 <ServoxInit+0x12e>
		}
		else if(htimx == &htim12)	{
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	4a48      	ldr	r2, [pc, #288]	; (800a928 <ServoxInit+0x214>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d106      	bne.n	800a818 <ServoxInit+0x104>
			htimx->Instance = TIM12;
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	4a47      	ldr	r2, [pc, #284]	; (800a92c <ServoxInit+0x218>)
 800a80e:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	2253      	movs	r2, #83	; 0x53
 800a814:	605a      	str	r2, [r3, #4]
 800a816:	e014      	b.n	800a842 <ServoxInit+0x12e>
		}
		else if(htimx == &htim13)	{
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	4a45      	ldr	r2, [pc, #276]	; (800a930 <ServoxInit+0x21c>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d106      	bne.n	800a82e <ServoxInit+0x11a>
			htimx->Instance = TIM13;
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	4a44      	ldr	r2, [pc, #272]	; (800a934 <ServoxInit+0x220>)
 800a824:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	2253      	movs	r2, #83	; 0x53
 800a82a:	605a      	str	r2, [r3, #4]
 800a82c:	e009      	b.n	800a842 <ServoxInit+0x12e>
			}
		else if(htimx == &htim14)	{
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	4a41      	ldr	r2, [pc, #260]	; (800a938 <ServoxInit+0x224>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d105      	bne.n	800a842 <ServoxInit+0x12e>
			htimx->Instance = TIM14;
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	4a40      	ldr	r2, [pc, #256]	; (800a93c <ServoxInit+0x228>)
 800a83a:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	2253      	movs	r2, #83	; 0x53
 800a840:	605a      	str	r2, [r3, #4]
			}


		htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	2200      	movs	r2, #0
 800a846:	609a      	str	r2, [r3, #8]
		htimx->Init.Period = 19999;
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800a84e:	60da      	str	r2, [r3, #12]
		htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	2200      	movs	r2, #0
 800a854:	611a      	str	r2, [r3, #16]
		htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	2280      	movs	r2, #128	; 0x80
 800a85a:	619a      	str	r2, [r3, #24]
		 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 800a85c:	68b8      	ldr	r0, [r7, #8]
 800a85e:	f008 fdfb 	bl	8013458 <HAL_TIM_Base_Init>
 800a862:	4603      	mov	r3, r0
 800a864:	2b00      	cmp	r3, #0
 800a866:	d001      	beq.n	800a86c <ServoxInit+0x158>
		  {
		    Error_Handler();
 800a868:	f7fa fa20 	bl	8004cac <Error_Handler>
		  }
		  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a86c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a870:	61bb      	str	r3, [r7, #24]
		  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 800a872:	f107 0318 	add.w	r3, r7, #24
 800a876:	4619      	mov	r1, r3
 800a878:	68b8      	ldr	r0, [r7, #8]
 800a87a:	f009 f961 	bl	8013b40 <HAL_TIM_ConfigClockSource>
 800a87e:	4603      	mov	r3, r0
 800a880:	2b00      	cmp	r3, #0
 800a882:	d001      	beq.n	800a888 <ServoxInit+0x174>
		  {
		    Error_Handler();
 800a884:	f7fa fa12 	bl	8004cac <Error_Handler>
		  }
		if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 800a888:	68b8      	ldr	r0, [r7, #8]
 800a88a:	f008 fe58 	bl	801353e <HAL_TIM_PWM_Init>
 800a88e:	4603      	mov	r3, r0
 800a890:	2b00      	cmp	r3, #0
 800a892:	d001      	beq.n	800a898 <ServoxInit+0x184>
			{
				Error_Handler();
 800a894:	f7fa fa0a 	bl	8004cac <Error_Handler>
			}

		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a898:	2300      	movs	r3, #0
 800a89a:	613b      	str	r3, [r7, #16]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a89c:	2300      	movs	r3, #0
 800a89e:	617b      	str	r3, [r7, #20]
		if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 800a8a0:	f107 0310 	add.w	r3, r7, #16
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	68b8      	ldr	r0, [r7, #8]
 800a8a8:	f009 fd46 	bl	8014338 <HAL_TIMEx_MasterConfigSynchronization>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d001      	beq.n	800a8b6 <ServoxInit+0x1a2>
		{
			Error_Handler();
 800a8b2:	f7fa f9fb 	bl	8004cac <Error_Handler>
		}


	    HAL_TIM_Base_Start(htimx);
 800a8b6:	68b8      	ldr	r0, [r7, #8]
 800a8b8:	f008 fdf9 	bl	80134ae <HAL_TIM_Base_Start>

//	GPIOPinsInit(SERVO_GPIOx, SERVO_GPIO_Pin, GPIO_MODE_AF_PP, GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);

	servo->htimx = htimx;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	68ba      	ldr	r2, [r7, #8]
 800a8c0:	601a      	str	r2, [r3, #0]
	servo->htimx_Channel = channel;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8c6:	605a      	str	r2, [r3, #4]

	PWMChannelConfig(htimx, channel , SERVO_GPIOx,SERVO_GPIO_Pin);
 800a8c8:	887b      	ldrh	r3, [r7, #2]
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a8ce:	68b8      	ldr	r0, [r7, #8]
 800a8d0:	f7f6 ff10 	bl	80016f4 <PWMChannelConfig>

	servo->currentPulse = 0;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	621a      	str	r2, [r3, #32]
}
 800a8da:	bf00      	nop
 800a8dc:	3728      	adds	r7, #40	; 0x28
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	20005f60 	.word	0x20005f60
 800a8e8:	40010000 	.word	0x40010000
 800a8ec:	20006064 	.word	0x20006064
 800a8f0:	20005d14 	.word	0x20005d14
 800a8f4:	40000400 	.word	0x40000400
 800a8f8:	20005b50 	.word	0x20005b50
 800a8fc:	40000800 	.word	0x40000800
 800a900:	20005cd4 	.word	0x20005cd4
 800a904:	40000c00 	.word	0x40000c00
 800a908:	20005b10 	.word	0x20005b10
 800a90c:	40010400 	.word	0x40010400
 800a910:	20005fa0 	.word	0x20005fa0
 800a914:	40014000 	.word	0x40014000
 800a918:	20005c30 	.word	0x20005c30
 800a91c:	40014400 	.word	0x40014400
 800a920:	20005e78 	.word	0x20005e78
 800a924:	40014800 	.word	0x40014800
 800a928:	20006184 	.word	0x20006184
 800a92c:	40001800 	.word	0x40001800
 800a930:	20005df8 	.word	0x20005df8
 800a934:	40001c00 	.word	0x40001c00
 800a938:	20006144 	.word	0x20006144
 800a93c:	40002000 	.word	0x40002000

0800a940 <ServoSetPulse>:
 * 						  pulse		output compare pulse to be set
 * Function Return		: None
 * Function Example		: ServoSetPulse(&SERVO1, 1000);
 */

void ServoSetPulse(SERVO_t* servo, uint32_t pulse){
 800a940:	b480      	push	{r7}
 800a942:	b083      	sub	sp, #12
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
	if(pulse < servo->SERVO_pulseMinLimit){
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	695b      	ldr	r3, [r3, #20]
 800a94e:	683a      	ldr	r2, [r7, #0]
 800a950:	429a      	cmp	r2, r3
 800a952:	d204      	bcs.n	800a95e <ServoSetPulse+0x1e>
		servo->currentPulse = servo->SERVO_pulseMinLimit;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	695a      	ldr	r2, [r3, #20]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	621a      	str	r2, [r3, #32]
 800a95c:	e00c      	b.n	800a978 <ServoSetPulse+0x38>
	}else if(pulse > servo->SERVO_pulseMaxLimit){
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	699b      	ldr	r3, [r3, #24]
 800a962:	683a      	ldr	r2, [r7, #0]
 800a964:	429a      	cmp	r2, r3
 800a966:	d904      	bls.n	800a972 <ServoSetPulse+0x32>
		servo->currentPulse = servo->SERVO_pulseMaxLimit;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	699a      	ldr	r2, [r3, #24]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	621a      	str	r2, [r3, #32]
 800a970:	e002      	b.n	800a978 <ServoSetPulse+0x38>
	}else{
		servo->currentPulse = pulse;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	683a      	ldr	r2, [r7, #0]
 800a976:	621a      	str	r2, [r3, #32]
	}
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d106      	bne.n	800a98e <ServoSetPulse+0x4e>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	6a12      	ldr	r2, [r2, #32]
 800a98a:	635a      	str	r2, [r3, #52]	; 0x34

}
 800a98c:	e01b      	b.n	800a9c6 <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	2b04      	cmp	r3, #4
 800a994:	d106      	bne.n	800a9a4 <ServoSetPulse+0x64>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6a1b      	ldr	r3, [r3, #32]
 800a9a0:	6393      	str	r3, [r2, #56]	; 0x38
}
 800a9a2:	e010      	b.n	800a9c6 <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	2b08      	cmp	r3, #8
 800a9aa:	d106      	bne.n	800a9ba <ServoSetPulse+0x7a>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	681a      	ldr	r2, [r3, #0]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6a1b      	ldr	r3, [r3, #32]
 800a9b6:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800a9b8:	e005      	b.n	800a9c6 <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6a1b      	ldr	r3, [r3, #32]
 800a9c4:	6413      	str	r3, [r2, #64]	; 0x40
}
 800a9c6:	bf00      	nop
 800a9c8:	370c      	adds	r7, #12
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr

0800a9d2 <ServoInitPulseLimit>:
	servo->TIMx_Compare = servo->SERVO_pulse0degree + (servo->SERVO_pulse1degree)*angle;
	servo->currentPulse = servo->TIMx_Compare;
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->TIMx_Compare);
}

void ServoInitPulseLimit(SERVO_t* servo, uint32_t MinPulse, uint32_t MaxPulse){
 800a9d2:	b480      	push	{r7}
 800a9d4:	b085      	sub	sp, #20
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	60f8      	str	r0, [r7, #12]
 800a9da:	60b9      	str	r1, [r7, #8]
 800a9dc:	607a      	str	r2, [r7, #4]
	servo->SERVO_pulseMinLimit = MinPulse;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	68ba      	ldr	r2, [r7, #8]
 800a9e2:	615a      	str	r2, [r3, #20]
	servo->SERVO_pulseMaxLimit = MaxPulse;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	619a      	str	r2, [r3, #24]
}
 800a9ea:	bf00      	nop
 800a9ec:	3714      	adds	r7, #20
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr

0800a9f6 <ServoMovePulse>:
void ServoMovePulse(SERVO_t* servo, int pulse){
 800a9f6:	b480      	push	{r7}
 800a9f8:	b083      	sub	sp, #12
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
 800a9fe:	6039      	str	r1, [r7, #0]
	servo->currentPulse = servo->currentPulse + pulse;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6a1a      	ldr	r2, [r3, #32]
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	441a      	add	r2, r3
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	621a      	str	r2, [r3, #32]

	if(servo->currentPulse < servo->SERVO_pulseMinLimit){
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6a1a      	ldr	r2, [r3, #32]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	695b      	ldr	r3, [r3, #20]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d203      	bcs.n	800aa20 <ServoMovePulse+0x2a>
		servo->currentPulse = servo->SERVO_pulseMinLimit;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	695a      	ldr	r2, [r3, #20]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	621a      	str	r2, [r3, #32]
	}
	if(servo->currentPulse > servo->SERVO_pulseMaxLimit){
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6a1a      	ldr	r2, [r3, #32]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	699b      	ldr	r3, [r3, #24]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d903      	bls.n	800aa34 <ServoMovePulse+0x3e>
		servo->currentPulse = servo->SERVO_pulseMaxLimit;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	699a      	ldr	r2, [r3, #24]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	621a      	str	r2, [r3, #32]
	}
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d106      	bne.n	800aa4a <ServoMovePulse+0x54>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	6a12      	ldr	r2, [r2, #32]
 800aa46:	635a      	str	r2, [r3, #52]	; 0x34
}
 800aa48:	e01b      	b.n	800aa82 <ServoMovePulse+0x8c>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	2b04      	cmp	r3, #4
 800aa50:	d106      	bne.n	800aa60 <ServoMovePulse+0x6a>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6a1b      	ldr	r3, [r3, #32]
 800aa5c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800aa5e:	e010      	b.n	800aa82 <ServoMovePulse+0x8c>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	2b08      	cmp	r3, #8
 800aa66:	d106      	bne.n	800aa76 <ServoMovePulse+0x80>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6a1b      	ldr	r3, [r3, #32]
 800aa72:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800aa74:	e005      	b.n	800aa82 <ServoMovePulse+0x8c>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6a1b      	ldr	r3, [r3, #32]
 800aa80:	6413      	str	r3, [r2, #64]	; 0x40
}
 800aa82:	bf00      	nop
 800aa84:	370c      	adds	r7, #12
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr
	...

0800aa90 <SPIxInit>:
 *
 * Function Return		: None
 * Function Example		: IMU_SPI_Init(&hspix, GPIOB , GPIO_Pin_12, SPI_MODE_MASTER);
 *
 */
void SPIxInit(SPI_HandleTypeDef* hspix, GPIO_TypeDef* GPIOx_NSS, uint16_t GPIO_Pin_NSS,uint32_t Mode, int InterruptEnable){
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b088      	sub	sp, #32
 800aa94:	af02      	add	r7, sp, #8
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	603b      	str	r3, [r7, #0]
 800aa9c:	4613      	mov	r3, r2
 800aa9e:	80fb      	strh	r3, [r7, #6]

	IRQn_Type nvic;
	GPIOPinsInit(GPIOx_NSS, GPIO_Pin_NSS, GPIO_MODE_OUTPUT_PP, GPIO_PULLUP, GPIO_SPEED_FREQ_HIGH);
 800aaa0:	88f9      	ldrh	r1, [r7, #6]
 800aaa2:	2302      	movs	r3, #2
 800aaa4:	9300      	str	r3, [sp, #0]
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	68b8      	ldr	r0, [r7, #8]
 800aaac:	f7f6 fc42 	bl	8001334 <GPIOPinsInit>

	if(hspix == &hspi1){
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	4a2a      	ldr	r2, [pc, #168]	; (800ab5c <SPIxInit+0xcc>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d105      	bne.n	800aac4 <SPIxInit+0x34>
		hspix->Instance = SPI1;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	4a29      	ldr	r2, [pc, #164]	; (800ab60 <SPIxInit+0xd0>)
 800aabc:	601a      	str	r2, [r3, #0]
		nvic = SPI1_IRQn;
 800aabe:	2323      	movs	r3, #35	; 0x23
 800aac0:	75fb      	strb	r3, [r7, #23]
 800aac2:	e00e      	b.n	800aae2 <SPIxInit+0x52>
	}else if(hspix == &hspi2){
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	4a27      	ldr	r2, [pc, #156]	; (800ab64 <SPIxInit+0xd4>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d105      	bne.n	800aad8 <SPIxInit+0x48>
		hspix->Instance = SPI2;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	4a26      	ldr	r2, [pc, #152]	; (800ab68 <SPIxInit+0xd8>)
 800aad0:	601a      	str	r2, [r3, #0]
		nvic = SPI2_IRQn;
 800aad2:	2324      	movs	r3, #36	; 0x24
 800aad4:	75fb      	strb	r3, [r7, #23]
 800aad6:	e004      	b.n	800aae2 <SPIxInit+0x52>
	}
	else{
		hspix->Instance = SPI3;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	4a24      	ldr	r2, [pc, #144]	; (800ab6c <SPIxInit+0xdc>)
 800aadc:	601a      	str	r2, [r3, #0]
		nvic = SPI3_IRQn;
 800aade:	2333      	movs	r3, #51	; 0x33
 800aae0:	75fb      	strb	r3, [r7, #23]
	}

	hspix->Init.Mode = Mode;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	683a      	ldr	r2, [r7, #0]
 800aae6:	605a      	str	r2, [r3, #4]
	hspix->Init.Direction = SPI_DIRECTION_2LINES;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2200      	movs	r2, #0
 800aaec:	609a      	str	r2, [r3, #8]
	hspix->Init.DataSize = SPI_DATASIZE_8BIT;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	60da      	str	r2, [r3, #12]
	hspix->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	611a      	str	r2, [r3, #16]
	hspix->Init.CLKPhase = SPI_PHASE_1EDGE;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2200      	movs	r2, #0
 800aafe:	615a      	str	r2, [r3, #20]
//	hspix->Init.CLKPhase = SPI_PHASE_2EDGE;
	hspix->Init.NSS = SPI_NSS_SOFT ;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab06:	619a      	str	r2, [r3, #24]
	hspix->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	61da      	str	r2, [r3, #28]
//	hspix->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
	hspix->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2200      	movs	r2, #0
 800ab12:	621a      	str	r2, [r3, #32]
	hspix->Init.TIMode = SPI_TIMODE_DISABLE;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2200      	movs	r2, #0
 800ab18:	625a      	str	r2, [r3, #36]	; 0x24
	hspix->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	629a      	str	r2, [r3, #40]	; 0x28
	hspix->Init.CRCPolynomial = 10;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	220a      	movs	r2, #10
 800ab24:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800ab26:	480d      	ldr	r0, [pc, #52]	; (800ab5c <SPIxInit+0xcc>)
 800ab28:	f008 f934 	bl	8012d94 <HAL_SPI_Init>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d001      	beq.n	800ab36 <SPIxInit+0xa6>
	{
		Error_Handler();
 800ab32:	f7fa f8bb 	bl	8004cac <Error_Handler>
	}

	if(InterruptEnable){
 800ab36:	6a3b      	ldr	r3, [r7, #32]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d00b      	beq.n	800ab54 <SPIxInit+0xc4>
		HAL_NVIC_SetPriority(nvic, SPI1_RX_IRQ_PRIO, 0);
 800ab3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab40:	2200      	movs	r2, #0
 800ab42:	210e      	movs	r1, #14
 800ab44:	4618      	mov	r0, r3
 800ab46:	f004 fa4d 	bl	800efe4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800ab4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f004 fa64 	bl	800f01c <HAL_NVIC_EnableIRQ>
	}

}
 800ab54:	bf00      	nop
 800ab56:	3718      	adds	r7, #24
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}
 800ab5c:	200099d4 	.word	0x200099d4
 800ab60:	40013000 	.word	0x40013000
 800ab64:	2000682c 	.word	0x2000682c
 800ab68:	40003800 	.word	0x40003800
 800ab6c:	40003c00 	.word	0x40003c00

0800ab70 <SPIx_DMA_TX_Init>:


void SPIx_DMA_TX_Init(SPI_HandleTypeDef* hspix, DMA_HandleTypeDef* hdma_spix,
		GPIO_TypeDef* GPIOx_NSS, uint16_t GPIO_Pin_NSS,uint32_t Mode){
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b088      	sub	sp, #32
 800ab74:	af02      	add	r7, sp, #8
 800ab76:	60f8      	str	r0, [r7, #12]
 800ab78:	60b9      	str	r1, [r7, #8]
 800ab7a:	607a      	str	r2, [r7, #4]
 800ab7c:	807b      	strh	r3, [r7, #2]

	__HAL_RCC_DMA2_CLK_ENABLE();
 800ab7e:	2300      	movs	r3, #0
 800ab80:	617b      	str	r3, [r7, #20]
 800ab82:	4b28      	ldr	r3, [pc, #160]	; (800ac24 <SPIx_DMA_TX_Init+0xb4>)
 800ab84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab86:	4a27      	ldr	r2, [pc, #156]	; (800ac24 <SPIx_DMA_TX_Init+0xb4>)
 800ab88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ab8c:	6313      	str	r3, [r2, #48]	; 0x30
 800ab8e:	4b25      	ldr	r3, [pc, #148]	; (800ac24 <SPIx_DMA_TX_Init+0xb4>)
 800ab90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab96:	617b      	str	r3, [r7, #20]
 800ab98:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, SPI1_TX_IRQ_PRIO, 0);
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	210d      	movs	r1, #13
 800ab9e:	2044      	movs	r0, #68	; 0x44
 800aba0:	f004 fa20 	bl	800efe4 <HAL_NVIC_SetPriority>
    HAL_NVIC_ClearPendingIRQ(DMA2_Stream5_IRQn);
 800aba4:	2044      	movs	r0, #68	; 0x44
 800aba6:	f004 fa55 	bl	800f054 <HAL_NVIC_ClearPendingIRQ>
    HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800abaa:	2044      	movs	r0, #68	; 0x44
 800abac:	f004 fa36 	bl	800f01c <HAL_NVIC_EnableIRQ>

	SPIxInit(hspix, GPIOx_NSS, GPIO_Pin_NSS, Mode, DISABLE);
 800abb0:	887a      	ldrh	r2, [r7, #2]
 800abb2:	2300      	movs	r3, #0
 800abb4:	9300      	str	r3, [sp, #0]
 800abb6:	6a3b      	ldr	r3, [r7, #32]
 800abb8:	6879      	ldr	r1, [r7, #4]
 800abba:	68f8      	ldr	r0, [r7, #12]
 800abbc:	f7ff ff68 	bl	800aa90 <SPIxInit>

    hdma_spix->Instance = DMA2_Stream5;
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	4a19      	ldr	r2, [pc, #100]	; (800ac28 <SPIx_DMA_TX_Init+0xb8>)
 800abc4:	601a      	str	r2, [r3, #0]
    hdma_spix->Init.Channel = DMA_CHANNEL_3;
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800abcc:	605a      	str	r2, [r3, #4]
    hdma_spix->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	2240      	movs	r2, #64	; 0x40
 800abd2:	609a      	str	r2, [r3, #8]
    hdma_spix->Init.PeriphInc = DMA_PINC_DISABLE;
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	2200      	movs	r2, #0
 800abd8:	60da      	str	r2, [r3, #12]
    hdma_spix->Init.MemInc = DMA_MINC_ENABLE;
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800abe0:	611a      	str	r2, [r3, #16]
    hdma_spix->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	2200      	movs	r2, #0
 800abe6:	615a      	str	r2, [r3, #20]
    hdma_spix->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	2200      	movs	r2, #0
 800abec:	619a      	str	r2, [r3, #24]
    hdma_spix->Init.Mode = DMA_NORMAL;
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	2200      	movs	r2, #0
 800abf2:	61da      	str	r2, [r3, #28]
    hdma_spix->Init.Priority = DMA_PRIORITY_LOW;
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	2200      	movs	r2, #0
 800abf8:	621a      	str	r2, [r3, #32]
    hdma_spix->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	2200      	movs	r2, #0
 800abfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(hdma_spix) != HAL_OK)
 800ac00:	68b8      	ldr	r0, [r7, #8]
 800ac02:	f004 fa35 	bl	800f070 <HAL_DMA_Init>
 800ac06:	4603      	mov	r3, r0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d001      	beq.n	800ac10 <SPIx_DMA_TX_Init+0xa0>
    {
      Error_Handler();
 800ac0c:	f7fa f84e 	bl	8004cac <Error_Handler>
    }

    __HAL_LINKDMA(hspix,hdmatx,*hdma_spix);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	68ba      	ldr	r2, [r7, #8]
 800ac14:	649a      	str	r2, [r3, #72]	; 0x48
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	68fa      	ldr	r2, [r7, #12]
 800ac1a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800ac1c:	bf00      	nop
 800ac1e:	3718      	adds	r7, #24
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	40023800 	.word	0x40023800
 800ac28:	40026488 	.word	0x40026488

0800ac2c <SPI1_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI1_IRQHandler(void)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi1);
 800ac30:	4802      	ldr	r0, [pc, #8]	; (800ac3c <SPI1_IRQHandler+0x10>)
 800ac32:	f008 fa47 	bl	80130c4 <HAL_SPI_IRQHandler>
}
 800ac36:	bf00      	nop
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	200099d4 	.word	0x200099d4

0800ac40 <SPI2_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI2_IRQHandler(void)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi2);
 800ac44:	4802      	ldr	r0, [pc, #8]	; (800ac50 <SPI2_IRQHandler+0x10>)
 800ac46:	f008 fa3d 	bl	80130c4 <HAL_SPI_IRQHandler>
}
 800ac4a:	bf00      	nop
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	2000682c 	.word	0x2000682c

0800ac54 <SPI3_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI3_IRQHandler(void)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi3);
 800ac58:	4802      	ldr	r0, [pc, #8]	; (800ac64 <SPI3_IRQHandler+0x10>)
 800ac5a:	f008 fa33 	bl	80130c4 <HAL_SPI_IRQHandler>
}
 800ac5e:	bf00      	nop
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	bf00      	nop
 800ac64:	20007758 	.word	0x20007758

0800ac68 <Initialize>:
uint8_t mailbox = 0, buf2_flag = 0, buf2_flagC2 = 0;

/************************************************/
/*		 	 	Functions		       		  	*/
/************************************************/
void Initialize(){
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b084      	sub	sp, #16
 800ac6c:	af04      	add	r7, sp, #16
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800ac6e:	f003 f9cb 	bl	800e008 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800ac72:	f7f8 fae7 	bl	8003244 <SystemClock_Config>

	/* Initialize all configured peripherals */
	GPIOPinsInit (LED1_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800ac76:	2301      	movs	r3, #1
 800ac78:	9300      	str	r3, [sp, #0]
 800ac7a:	2302      	movs	r3, #2
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ac82:	48c7      	ldr	r0, [pc, #796]	; (800afa0 <Initialize+0x338>)
 800ac84:	f7f6 fb56 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (LED2_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800ac88:	2301      	movs	r3, #1
 800ac8a:	9300      	str	r3, [sp, #0]
 800ac8c:	2302      	movs	r3, #2
 800ac8e:	2201      	movs	r2, #1
 800ac90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ac94:	48c2      	ldr	r0, [pc, #776]	; (800afa0 <Initialize+0x338>)
 800ac96:	f7f6 fb4d 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (LED3_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	9300      	str	r3, [sp, #0]
 800ac9e:	2302      	movs	r3, #2
 800aca0:	2201      	movs	r2, #1
 800aca2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aca6:	48be      	ldr	r0, [pc, #760]	; (800afa0 <Initialize+0x338>)
 800aca8:	f7f6 fb44 	bl	8001334 <GPIOPinsInit>

	GPIOPinsInit (PB1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800acac:	2301      	movs	r3, #1
 800acae:	9300      	str	r3, [sp, #0]
 800acb0:	2302      	movs	r3, #2
 800acb2:	2200      	movs	r2, #0
 800acb4:	2180      	movs	r1, #128	; 0x80
 800acb6:	48bb      	ldr	r0, [pc, #748]	; (800afa4 <Initialize+0x33c>)
 800acb8:	f7f6 fb3c 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (PB2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800acbc:	2301      	movs	r3, #1
 800acbe:	9300      	str	r3, [sp, #0]
 800acc0:	2302      	movs	r3, #2
 800acc2:	2200      	movs	r2, #0
 800acc4:	2101      	movs	r1, #1
 800acc6:	48b8      	ldr	r0, [pc, #736]	; (800afa8 <Initialize+0x340>)
 800acc8:	f7f6 fb34 	bl	8001334 <GPIOPinsInit>

	/*Normal IOs*/
	GPIOPinsInit (IP1_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLDOWN);
 800accc:	2302      	movs	r3, #2
 800acce:	9300      	str	r3, [sp, #0]
 800acd0:	2301      	movs	r3, #1
 800acd2:	2201      	movs	r2, #1
 800acd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800acd8:	48b3      	ldr	r0, [pc, #716]	; (800afa8 <Initialize+0x340>)
 800acda:	f7f6 fb2b 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP2_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLDOWN);
 800acde:	2302      	movs	r3, #2
 800ace0:	9300      	str	r3, [sp, #0]
 800ace2:	2301      	movs	r3, #1
 800ace4:	2201      	movs	r2, #1
 800ace6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800acea:	48af      	ldr	r0, [pc, #700]	; (800afa8 <Initialize+0x340>)
 800acec:	f7f6 fb22 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP3_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLDOWN);
 800acf0:	2302      	movs	r3, #2
 800acf2:	9300      	str	r3, [sp, #0]
 800acf4:	2301      	movs	r3, #1
 800acf6:	2201      	movs	r2, #1
 800acf8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800acfc:	48aa      	ldr	r0, [pc, #680]	; (800afa8 <Initialize+0x340>)
 800acfe:	f7f6 fb19 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ad02:	2301      	movs	r3, #1
 800ad04:	9300      	str	r3, [sp, #0]
 800ad06:	2301      	movs	r3, #1
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ad0e:	48a6      	ldr	r0, [pc, #664]	; (800afa8 <Initialize+0x340>)
 800ad10:	f7f6 fb10 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ad14:	2301      	movs	r3, #1
 800ad16:	9300      	str	r3, [sp, #0]
 800ad18:	2301      	movs	r3, #1
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ad20:	48a0      	ldr	r0, [pc, #640]	; (800afa4 <Initialize+0x33c>)
 800ad22:	f7f6 fb07 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP6_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLDOWN);
 800ad26:	2302      	movs	r3, #2
 800ad28:	9300      	str	r3, [sp, #0]
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ad32:	489c      	ldr	r0, [pc, #624]	; (800afa4 <Initialize+0x33c>)
 800ad34:	f7f6 fafe 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP7_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLDOWN);
 800ad38:	2302      	movs	r3, #2
 800ad3a:	9300      	str	r3, [sp, #0]
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	2201      	movs	r2, #1
 800ad40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ad44:	4899      	ldr	r0, [pc, #612]	; (800afac <Initialize+0x344>)
 800ad46:	f7f6 faf5 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP8_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLDOWN);
 800ad4a:	2302      	movs	r3, #2
 800ad4c:	9300      	str	r3, [sp, #0]
 800ad4e:	2301      	movs	r3, #1
 800ad50:	2201      	movs	r2, #1
 800ad52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ad56:	4895      	ldr	r0, [pc, #596]	; (800afac <Initialize+0x344>)
 800ad58:	f7f6 faec 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP9_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	9300      	str	r3, [sp, #0]
 800ad60:	2301      	movs	r3, #1
 800ad62:	2200      	movs	r2, #0
 800ad64:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ad68:	488d      	ldr	r0, [pc, #564]	; (800afa0 <Initialize+0x338>)
 800ad6a:	f7f6 fae3 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP10_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ad6e:	2301      	movs	r3, #1
 800ad70:	9300      	str	r3, [sp, #0]
 800ad72:	2301      	movs	r3, #1
 800ad74:	2200      	movs	r2, #0
 800ad76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ad7a:	488d      	ldr	r0, [pc, #564]	; (800afb0 <Initialize+0x348>)
 800ad7c:	f7f6 fada 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP11_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ad80:	2301      	movs	r3, #1
 800ad82:	9300      	str	r3, [sp, #0]
 800ad84:	2301      	movs	r3, #1
 800ad86:	2200      	movs	r2, #0
 800ad88:	2108      	movs	r1, #8
 800ad8a:	4888      	ldr	r0, [pc, #544]	; (800afac <Initialize+0x344>)
 800ad8c:	f7f6 fad2 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP12_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ad90:	2301      	movs	r3, #1
 800ad92:	9300      	str	r3, [sp, #0]
 800ad94:	2301      	movs	r3, #1
 800ad96:	2200      	movs	r2, #0
 800ad98:	2110      	movs	r1, #16
 800ad9a:	4884      	ldr	r0, [pc, #528]	; (800afac <Initialize+0x344>)
 800ad9c:	f7f6 faca 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP13_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ada0:	2301      	movs	r3, #1
 800ada2:	9300      	str	r3, [sp, #0]
 800ada4:	2301      	movs	r3, #1
 800ada6:	2200      	movs	r2, #0
 800ada8:	2180      	movs	r1, #128	; 0x80
 800adaa:	4880      	ldr	r0, [pc, #512]	; (800afac <Initialize+0x344>)
 800adac:	f7f6 fac2 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP14_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800adb0:	2301      	movs	r3, #1
 800adb2:	9300      	str	r3, [sp, #0]
 800adb4:	2301      	movs	r3, #1
 800adb6:	2200      	movs	r2, #0
 800adb8:	2120      	movs	r1, #32
 800adba:	487a      	ldr	r0, [pc, #488]	; (800afa4 <Initialize+0x33c>)
 800adbc:	f7f6 faba 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP15_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800adc0:	2301      	movs	r3, #1
 800adc2:	9300      	str	r3, [sp, #0]
 800adc4:	2301      	movs	r3, #1
 800adc6:	2200      	movs	r2, #0
 800adc8:	2140      	movs	r1, #64	; 0x40
 800adca:	4876      	ldr	r0, [pc, #472]	; (800afa4 <Initialize+0x33c>)
 800adcc:	f7f6 fab2 	bl	8001334 <GPIOPinsInit>

	GPIOPinsInit (IP16_Analog1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800add0:	2301      	movs	r3, #1
 800add2:	9300      	str	r3, [sp, #0]
 800add4:	2301      	movs	r3, #1
 800add6:	2200      	movs	r2, #0
 800add8:	2101      	movs	r1, #1
 800adda:	4871      	ldr	r0, [pc, #452]	; (800afa0 <Initialize+0x338>)
 800addc:	f7f6 faaa 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP17_Analog2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ade0:	2301      	movs	r3, #1
 800ade2:	9300      	str	r3, [sp, #0]
 800ade4:	2301      	movs	r3, #1
 800ade6:	2200      	movs	r2, #0
 800ade8:	2102      	movs	r1, #2
 800adea:	486d      	ldr	r0, [pc, #436]	; (800afa0 <Initialize+0x338>)
 800adec:	f7f6 faa2 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP18_Analog3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800adf0:	2301      	movs	r3, #1
 800adf2:	9300      	str	r3, [sp, #0]
 800adf4:	2301      	movs	r3, #1
 800adf6:	2200      	movs	r2, #0
 800adf8:	2104      	movs	r1, #4
 800adfa:	4869      	ldr	r0, [pc, #420]	; (800afa0 <Initialize+0x338>)
 800adfc:	f7f6 fa9a 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP19_Analog4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ae00:	2301      	movs	r3, #1
 800ae02:	9300      	str	r3, [sp, #0]
 800ae04:	2301      	movs	r3, #1
 800ae06:	2200      	movs	r2, #0
 800ae08:	2108      	movs	r1, #8
 800ae0a:	4865      	ldr	r0, [pc, #404]	; (800afa0 <Initialize+0x338>)
 800ae0c:	f7f6 fa92 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP20_Analog5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ae10:	2301      	movs	r3, #1
 800ae12:	9300      	str	r3, [sp, #0]
 800ae14:	2301      	movs	r3, #1
 800ae16:	2200      	movs	r2, #0
 800ae18:	2110      	movs	r1, #16
 800ae1a:	4861      	ldr	r0, [pc, #388]	; (800afa0 <Initialize+0x338>)
 800ae1c:	f7f6 fa8a 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP21_Analog6_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ae20:	2301      	movs	r3, #1
 800ae22:	9300      	str	r3, [sp, #0]
 800ae24:	2301      	movs	r3, #1
 800ae26:	2200      	movs	r2, #0
 800ae28:	2120      	movs	r1, #32
 800ae2a:	485d      	ldr	r0, [pc, #372]	; (800afa0 <Initialize+0x338>)
 800ae2c:	f7f6 fa82 	bl	8001334 <GPIOPinsInit>

	GPIOPinsInit(GPIOB, GPIO_PIN_10, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ae30:	2301      	movs	r3, #1
 800ae32:	9300      	str	r3, [sp, #0]
 800ae34:	2301      	movs	r3, #1
 800ae36:	2200      	movs	r2, #0
 800ae38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ae3c:	4859      	ldr	r0, [pc, #356]	; (800afa4 <Initialize+0x33c>)
 800ae3e:	f7f6 fa79 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit(GPIOB, GPIO_PIN_11, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ae42:	2301      	movs	r3, #1
 800ae44:	9300      	str	r3, [sp, #0]
 800ae46:	2301      	movs	r3, #1
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ae4e:	4855      	ldr	r0, [pc, #340]	; (800afa4 <Initialize+0x33c>)
 800ae50:	f7f6 fa70 	bl	8001334 <GPIOPinsInit>

	//Unused peripheral pins can be used as GPIO Input or Output
//	GPIOPinsInit (UART3_Rx, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);

//	MUXInit(&MUX, MUX1_INPUT_PIN, MUX1_S0_PIN, MUX1_S1_PIN, MUX1_S2_PIN);
	SHIFTREGInit (&SR, CASCADE_1, SR_SCK_PIN, SR_RCK_PIN, SR_SI_PIN);
 800ae54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae58:	9303      	str	r3, [sp, #12]
 800ae5a:	4b53      	ldr	r3, [pc, #332]	; (800afa8 <Initialize+0x340>)
 800ae5c:	9302      	str	r3, [sp, #8]
 800ae5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae62:	9301      	str	r3, [sp, #4]
 800ae64:	4b50      	ldr	r3, [pc, #320]	; (800afa8 <Initialize+0x340>)
 800ae66:	9300      	str	r3, [sp, #0]
 800ae68:	2380      	movs	r3, #128	; 0x80
 800ae6a:	4a4f      	ldr	r2, [pc, #316]	; (800afa8 <Initialize+0x340>)
 800ae6c:	2101      	movs	r1, #1
 800ae6e:	4851      	ldr	r0, [pc, #324]	; (800afb4 <Initialize+0x34c>)
 800ae70:	f7f7 f8dc 	bl	800202c <SHIFTREGInit>

	//https://stackoverflow.com/questions/50243996/what-are-valid-values-of-hal-nvic-setpriority-when-using-stm32-and-freertos
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ae74:	2003      	movs	r0, #3
 800ae76:	f004 f8aa 	bl	800efce <HAL_NVIC_SetPriorityGrouping>


	/*************** Set Interrupt Priorities in BIOS/priorities.h ***************/

//	I2CxInit (&hi2c1,main_board_1, CLOCK_SPEED_400KHz,ENABLE);
	I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 800ae7a:	4b4f      	ldr	r3, [pc, #316]	; (800afb8 <Initialize+0x350>)
 800ae7c:	2208      	movs	r2, #8
 800ae7e:	494f      	ldr	r1, [pc, #316]	; (800afbc <Initialize+0x354>)
 800ae80:	484f      	ldr	r0, [pc, #316]	; (800afc0 <Initialize+0x358>)
 800ae82:	f7f8 fe47 	bl	8003b14 <I2CX_DMA_RX_Init>
//	I2CxInit (&hi2c3,main_board_1, CLOCK_SPEED_100KHz,DISABLE);
//	ServoDriverInit(&srv_drv,&hi2c3,0x40);

//	UARTx_DMA_Rx_Init(&huart2, &hdma_usart2_rx, 115200);//Bluebee Tuning
//	UARTx_DMA_Rx_Init(&huart4, &hdma_uart4_rx, 115200); //Jetson
	UARTInit(&huart3, 115200, ENABLE); // Debug
 800ae86:	2201      	movs	r2, #1
 800ae88:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800ae8c:	484d      	ldr	r0, [pc, #308]	; (800afc4 <Initialize+0x35c>)
 800ae8e:	f7f8 fbdf 	bl	8003650 <UARTInit>
	UARTInit(&huart4, 115200, ENABLE); // ROS UART
 800ae92:	2201      	movs	r2, #1
 800ae94:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800ae98:	484b      	ldr	r0, [pc, #300]	; (800afc8 <Initialize+0x360>)
 800ae9a:	f7f8 fbd9 	bl	8003650 <UARTInit>
	UARTInit(&huart5, 115200, ENABLE); //
 800ae9e:	2201      	movs	r2, #1
 800aea0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800aea4:	4849      	ldr	r0, [pc, #292]	; (800afcc <Initialize+0x364>)
 800aea6:	f7f8 fbd3 	bl	8003650 <UARTInit>
	UARTInit(&huart2, 115200, ENABLE); //
 800aeaa:	2201      	movs	r2, #1
 800aeac:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800aeb0:	4847      	ldr	r0, [pc, #284]	; (800afd0 <Initialize+0x368>)
 800aeb2:	f7f8 fbcd 	bl	8003650 <UARTInit>

	//	QEIInit(&htim8);

	CANxInit(&hcan1,4,CAN_FILTER_FIFO0,0,0,0,CAN_500KHz);
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	9302      	str	r3, [sp, #8]
 800aeba:	2300      	movs	r3, #0
 800aebc:	9301      	str	r3, [sp, #4]
 800aebe:	2300      	movs	r3, #0
 800aec0:	9300      	str	r3, [sp, #0]
 800aec2:	2300      	movs	r3, #0
 800aec4:	2200      	movs	r2, #0
 800aec6:	2104      	movs	r1, #4
 800aec8:	4842      	ldr	r0, [pc, #264]	; (800afd4 <Initialize+0x36c>)
 800aeca:	f7f8 fd05 	bl	80038d8 <CANxInit>
	CANxInit(&hcan2,4,CAN_FILTER_FIFO0,0,0,0,CAN_500KHz);
 800aece:	2300      	movs	r3, #0
 800aed0:	9302      	str	r3, [sp, #8]
 800aed2:	2300      	movs	r3, #0
 800aed4:	9301      	str	r3, [sp, #4]
 800aed6:	2300      	movs	r3, #0
 800aed8:	9300      	str	r3, [sp, #0]
 800aeda:	2300      	movs	r3, #0
 800aedc:	2200      	movs	r2, #0
 800aede:	2104      	movs	r1, #4
 800aee0:	483d      	ldr	r0, [pc, #244]	; (800afd8 <Initialize+0x370>)
 800aee2:	f7f8 fcf9 	bl	80038d8 <CANxInit>

	PWMTimeBaseInit(&htim3, 19999, 83);
 800aee6:	2253      	movs	r2, #83	; 0x53
 800aee8:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800aeec:	483b      	ldr	r0, [pc, #236]	; (800afdc <Initialize+0x374>)
 800aeee:	f7f6 fb1b 	bl	8001528 <PWMTimeBaseInit>
	PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 800aef2:	2301      	movs	r3, #1
 800aef4:	4a2b      	ldr	r2, [pc, #172]	; (800afa4 <Initialize+0x33c>)
 800aef6:	2108      	movs	r1, #8
 800aef8:	4838      	ldr	r0, [pc, #224]	; (800afdc <Initialize+0x374>)
 800aefa:	f7f6 fbfb 	bl	80016f4 <PWMChannelConfig>
	PWMChannelConfig(&htim3, TIM_CHANNEL_4 , TIM3_CHANNEL4_PIN);
 800aefe:	2302      	movs	r3, #2
 800af00:	4a28      	ldr	r2, [pc, #160]	; (800afa4 <Initialize+0x33c>)
 800af02:	210c      	movs	r1, #12
 800af04:	4835      	ldr	r0, [pc, #212]	; (800afdc <Initialize+0x374>)
 800af06:	f7f6 fbf5 	bl	80016f4 <PWMChannelConfig>

	PWMTimeBaseInit(&htim5, 19999, 83);
 800af0a:	2253      	movs	r2, #83	; 0x53
 800af0c:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800af10:	4833      	ldr	r0, [pc, #204]	; (800afe0 <Initialize+0x378>)
 800af12:	f7f6 fb09 	bl	8001528 <PWMTimeBaseInit>
	PWMChannelConfig(&htim5, TIM_CHANNEL_1, TIM5_CHANNEL1_PIN);
 800af16:	2301      	movs	r3, #1
 800af18:	4a25      	ldr	r2, [pc, #148]	; (800afb0 <Initialize+0x348>)
 800af1a:	2100      	movs	r1, #0
 800af1c:	4830      	ldr	r0, [pc, #192]	; (800afe0 <Initialize+0x378>)
 800af1e:	f7f6 fbe9 	bl	80016f4 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_2, TIM5_CHANNEL2_PIN);
 800af22:	2302      	movs	r3, #2
 800af24:	4a22      	ldr	r2, [pc, #136]	; (800afb0 <Initialize+0x348>)
 800af26:	2104      	movs	r1, #4
 800af28:	482d      	ldr	r0, [pc, #180]	; (800afe0 <Initialize+0x378>)
 800af2a:	f7f6 fbe3 	bl	80016f4 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_3, TIM5_CHANNEL3_PIN);
 800af2e:	2304      	movs	r3, #4
 800af30:	4a1f      	ldr	r2, [pc, #124]	; (800afb0 <Initialize+0x348>)
 800af32:	2108      	movs	r1, #8
 800af34:	482a      	ldr	r0, [pc, #168]	; (800afe0 <Initialize+0x378>)
 800af36:	f7f6 fbdd 	bl	80016f4 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_4, TIM5_CHANNEL4_PIN);
 800af3a:	2308      	movs	r3, #8
 800af3c:	4a1c      	ldr	r2, [pc, #112]	; (800afb0 <Initialize+0x348>)
 800af3e:	210c      	movs	r1, #12
 800af40:	4827      	ldr	r0, [pc, #156]	; (800afe0 <Initialize+0x378>)
 800af42:	f7f6 fbd7 	bl	80016f4 <PWMChannelConfig>

	PWMTimeBaseInit(&htim9, 19999, 167);
 800af46:	22a7      	movs	r2, #167	; 0xa7
 800af48:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800af4c:	4825      	ldr	r0, [pc, #148]	; (800afe4 <Initialize+0x37c>)
 800af4e:	f7f6 faeb 	bl	8001528 <PWMTimeBaseInit>
	PWMChannelConfig(&htim9, TIM_CHANNEL_1, TIM9_CHANNEL1_PIN);
 800af52:	2320      	movs	r3, #32
 800af54:	4a14      	ldr	r2, [pc, #80]	; (800afa8 <Initialize+0x340>)
 800af56:	2100      	movs	r1, #0
 800af58:	4822      	ldr	r0, [pc, #136]	; (800afe4 <Initialize+0x37c>)
 800af5a:	f7f6 fbcb 	bl	80016f4 <PWMChannelConfig>
	PWMChannelConfig(&htim9, TIM_CHANNEL_2, TIM9_CHANNEL2_PIN);
 800af5e:	2340      	movs	r3, #64	; 0x40
 800af60:	4a11      	ldr	r2, [pc, #68]	; (800afa8 <Initialize+0x340>)
 800af62:	2104      	movs	r1, #4
 800af64:	481f      	ldr	r0, [pc, #124]	; (800afe4 <Initialize+0x37c>)
 800af66:	f7f6 fbc5 	bl	80016f4 <PWMChannelConfig>


	BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7); // yaw_servo
 800af6a:	2380      	movs	r3, #128	; 0x80
 800af6c:	9302      	str	r3, [sp, #8]
 800af6e:	2340      	movs	r3, #64	; 0x40
 800af70:	9301      	str	r3, [sp, #4]
 800af72:	4b1d      	ldr	r3, [pc, #116]	; (800afe8 <Initialize+0x380>)
 800af74:	9300      	str	r3, [sp, #0]
 800af76:	2300      	movs	r3, #0
 800af78:	220c      	movs	r2, #12
 800af7a:	4918      	ldr	r1, [pc, #96]	; (800afdc <Initialize+0x374>)
 800af7c:	481b      	ldr	r0, [pc, #108]	; (800afec <Initialize+0x384>)
 800af7e:	f7f6 f94f 	bl	8001220 <BDCInit>
	BDCInit(&BDC2, &htim3, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[1]), Bit4, Bit5); // pitch servo
 800af82:	2320      	movs	r3, #32
 800af84:	9302      	str	r3, [sp, #8]
 800af86:	2310      	movs	r3, #16
 800af88:	9301      	str	r3, [sp, #4]
 800af8a:	4b17      	ldr	r3, [pc, #92]	; (800afe8 <Initialize+0x380>)
 800af8c:	9300      	str	r3, [sp, #0]
 800af8e:	2300      	movs	r3, #0
 800af90:	2208      	movs	r2, #8
 800af92:	4912      	ldr	r1, [pc, #72]	; (800afdc <Initialize+0x374>)
 800af94:	4816      	ldr	r0, [pc, #88]	; (800aff0 <Initialize+0x388>)
 800af96:	f7f6 f943 	bl	8001220 <BDCInit>
	BDCInit(&BDC3, &htim9, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[1]), Bit2, Bit3); // pick servo
 800af9a:	2308      	movs	r3, #8
 800af9c:	9302      	str	r3, [sp, #8]
 800af9e:	e029      	b.n	800aff4 <Initialize+0x38c>
 800afa0:	40020800 	.word	0x40020800
 800afa4:	40020400 	.word	0x40020400
 800afa8:	40021000 	.word	0x40021000
 800afac:	40020c00 	.word	0x40020c00
 800afb0:	40020000 	.word	0x40020000
 800afb4:	20009424 	.word	0x20009424
 800afb8:	00061a80 	.word	0x00061a80
 800afbc:	20009d54 	.word	0x20009d54
 800afc0:	20006b48 	.word	0x20006b48
 800afc4:	20005bf0 	.word	0x20005bf0
 800afc8:	20006024 	.word	0x20006024
 800afcc:	20005d58 	.word	0x20005d58
 800afd0:	200060a4 	.word	0x200060a4
 800afd4:	20009d28 	.word	0x20009d28
 800afd8:	20009008 	.word	0x20009008
 800afdc:	20005d14 	.word	0x20005d14
 800afe0:	20005cd4 	.word	0x20005cd4
 800afe4:	20005fa0 	.word	0x20005fa0
 800afe8:	20009440 	.word	0x20009440
 800afec:	2000a34c 	.word	0x2000a34c
 800aff0:	200076b8 	.word	0x200076b8
 800aff4:	2304      	movs	r3, #4
 800aff6:	9301      	str	r3, [sp, #4]
 800aff8:	4b47      	ldr	r3, [pc, #284]	; (800b118 <Initialize+0x4b0>)
 800affa:	9300      	str	r3, [sp, #0]
 800affc:	2300      	movs	r3, #0
 800affe:	2200      	movs	r2, #0
 800b000:	4946      	ldr	r1, [pc, #280]	; (800b11c <Initialize+0x4b4>)
 800b002:	4847      	ldr	r0, [pc, #284]	; (800b120 <Initialize+0x4b8>)
 800b004:	f7f6 f90c 	bl	8001220 <BDCInit>
	BDCInit(&BDC4, &htim9, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[1]), Bit0, Bit1); // load servo
 800b008:	2302      	movs	r3, #2
 800b00a:	9302      	str	r3, [sp, #8]
 800b00c:	2301      	movs	r3, #1
 800b00e:	9301      	str	r3, [sp, #4]
 800b010:	4b41      	ldr	r3, [pc, #260]	; (800b118 <Initialize+0x4b0>)
 800b012:	9300      	str	r3, [sp, #0]
 800b014:	2300      	movs	r3, #0
 800b016:	2204      	movs	r2, #4
 800b018:	4940      	ldr	r1, [pc, #256]	; (800b11c <Initialize+0x4b4>)
 800b01a:	4842      	ldr	r0, [pc, #264]	; (800b124 <Initialize+0x4bc>)
 800b01c:	f7f6 f900 	bl	8001220 <BDCInit>
	BDCInit(&BDC5, &htim5, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[0]), Bit6, Bit7); // shot valve
 800b020:	2380      	movs	r3, #128	; 0x80
 800b022:	9302      	str	r3, [sp, #8]
 800b024:	2340      	movs	r3, #64	; 0x40
 800b026:	9301      	str	r3, [sp, #4]
 800b028:	4b3f      	ldr	r3, [pc, #252]	; (800b128 <Initialize+0x4c0>)
 800b02a:	9300      	str	r3, [sp, #0]
 800b02c:	2300      	movs	r3, #0
 800b02e:	220c      	movs	r2, #12
 800b030:	493e      	ldr	r1, [pc, #248]	; (800b12c <Initialize+0x4c4>)
 800b032:	483f      	ldr	r0, [pc, #252]	; (800b130 <Initialize+0x4c8>)
 800b034:	f7f6 f8f4 	bl	8001220 <BDCInit>
	BDCInit(&BDC6, &htim5, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[0]), Bit4, Bit5); // enabling valve
 800b038:	2320      	movs	r3, #32
 800b03a:	9302      	str	r3, [sp, #8]
 800b03c:	2310      	movs	r3, #16
 800b03e:	9301      	str	r3, [sp, #4]
 800b040:	4b39      	ldr	r3, [pc, #228]	; (800b128 <Initialize+0x4c0>)
 800b042:	9300      	str	r3, [sp, #0]
 800b044:	2300      	movs	r3, #0
 800b046:	2208      	movs	r2, #8
 800b048:	4938      	ldr	r1, [pc, #224]	; (800b12c <Initialize+0x4c4>)
 800b04a:	483a      	ldr	r0, [pc, #232]	; (800b134 <Initialize+0x4cc>)
 800b04c:	f7f6 f8e8 	bl	8001220 <BDCInit>
	BDCInit(&BDC7, &htim5, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[0]), Bit2, Bit3); // pick valve
 800b050:	2308      	movs	r3, #8
 800b052:	9302      	str	r3, [sp, #8]
 800b054:	2304      	movs	r3, #4
 800b056:	9301      	str	r3, [sp, #4]
 800b058:	4b33      	ldr	r3, [pc, #204]	; (800b128 <Initialize+0x4c0>)
 800b05a:	9300      	str	r3, [sp, #0]
 800b05c:	2300      	movs	r3, #0
 800b05e:	2204      	movs	r2, #4
 800b060:	4932      	ldr	r1, [pc, #200]	; (800b12c <Initialize+0x4c4>)
 800b062:	4835      	ldr	r0, [pc, #212]	; (800b138 <Initialize+0x4d0>)
 800b064:	f7f6 f8dc 	bl	8001220 <BDCInit>
	BDCInit(&BDC8, &htim5, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[0]), Bit0, Bit1);
 800b068:	2302      	movs	r3, #2
 800b06a:	9302      	str	r3, [sp, #8]
 800b06c:	2301      	movs	r3, #1
 800b06e:	9301      	str	r3, [sp, #4]
 800b070:	4b2d      	ldr	r3, [pc, #180]	; (800b128 <Initialize+0x4c0>)
 800b072:	9300      	str	r3, [sp, #0]
 800b074:	2300      	movs	r3, #0
 800b076:	2200      	movs	r2, #0
 800b078:	492c      	ldr	r1, [pc, #176]	; (800b12c <Initialize+0x4c4>)
 800b07a:	4830      	ldr	r0, [pc, #192]	; (800b13c <Initialize+0x4d4>)
 800b07c:	f7f6 f8d0 	bl	8001220 <BDCInit>

	// Servo
	ServoxInit(&yaw_servo, &htim9, IP5_PIN, TIM_CHANNEL_1); // BDC3
 800b080:	2300      	movs	r3, #0
 800b082:	9300      	str	r3, [sp, #0]
 800b084:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b088:	4a2d      	ldr	r2, [pc, #180]	; (800b140 <Initialize+0x4d8>)
 800b08a:	4924      	ldr	r1, [pc, #144]	; (800b11c <Initialize+0x4b4>)
 800b08c:	482d      	ldr	r0, [pc, #180]	; (800b144 <Initialize+0x4dc>)
 800b08e:	f7ff fb41 	bl	800a714 <ServoxInit>
	ServoInitPulseLimit(&yaw_servo, 500, 2500);
 800b092:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b096:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b09a:	482a      	ldr	r0, [pc, #168]	; (800b144 <Initialize+0x4dc>)
 800b09c:	f7ff fc99 	bl	800a9d2 <ServoInitPulseLimit>
//	ServoSetPulse(&yaw_servo, 1500);

	ServoxInit(&pitch, &htim3, IP6_PIN, TIM_CHANNEL_4); // BDC1
 800b0a0:	230c      	movs	r3, #12
 800b0a2:	9300      	str	r3, [sp, #0]
 800b0a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0a8:	4a25      	ldr	r2, [pc, #148]	; (800b140 <Initialize+0x4d8>)
 800b0aa:	4927      	ldr	r1, [pc, #156]	; (800b148 <Initialize+0x4e0>)
 800b0ac:	4827      	ldr	r0, [pc, #156]	; (800b14c <Initialize+0x4e4>)
 800b0ae:	f7ff fb31 	bl	800a714 <ServoxInit>
	ServoInitPulseLimit(&pitch, 500, 2500);
 800b0b2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b0b6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b0ba:	4824      	ldr	r0, [pc, #144]	; (800b14c <Initialize+0x4e4>)
 800b0bc:	f7ff fc89 	bl	800a9d2 <ServoInitPulseLimit>
//	ServoSetPulse(&pitch, 1500);

	ServoxInit(&pick, &htim9, IP2_PIN, TIM_CHANNEL_2); // BDC4
 800b0c0:	2304      	movs	r3, #4
 800b0c2:	9300      	str	r3, [sp, #0]
 800b0c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b0c8:	4a21      	ldr	r2, [pc, #132]	; (800b150 <Initialize+0x4e8>)
 800b0ca:	4914      	ldr	r1, [pc, #80]	; (800b11c <Initialize+0x4b4>)
 800b0cc:	4821      	ldr	r0, [pc, #132]	; (800b154 <Initialize+0x4ec>)
 800b0ce:	f7ff fb21 	bl	800a714 <ServoxInit>
	ServoInitPulseLimit(&pick, 500, 2500);
 800b0d2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b0d6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b0da:	481e      	ldr	r0, [pc, #120]	; (800b154 <Initialize+0x4ec>)
 800b0dc:	f7ff fc79 	bl	800a9d2 <ServoInitPulseLimit>
//	ServoSetPulse(&pick, 500);

	ServoxInit(&load, &htim3, IP3_PIN, TIM_CHANNEL_3); // BDC2
 800b0e0:	2308      	movs	r3, #8
 800b0e2:	9300      	str	r3, [sp, #0]
 800b0e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b0e8:	4a19      	ldr	r2, [pc, #100]	; (800b150 <Initialize+0x4e8>)
 800b0ea:	4917      	ldr	r1, [pc, #92]	; (800b148 <Initialize+0x4e0>)
 800b0ec:	481a      	ldr	r0, [pc, #104]	; (800b158 <Initialize+0x4f0>)
 800b0ee:	f7ff fb11 	bl	800a714 <ServoxInit>
	ServoInitPulseLimit(&load, 500, 2500);
 800b0f2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b0f6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b0fa:	4817      	ldr	r0, [pc, #92]	; (800b158 <Initialize+0x4f0>)
 800b0fc:	f7ff fc69 	bl	800a9d2 <ServoInitPulseLimit>
	//Laser
//	ADC_DMAxInit(&adc,&hadc2,&hdma_adc1,2);
//	ADC_Channel_Config(&adc,ADC_CHANNEL_10,IP16_Analog1_PIN);
//	ADC_Channel_Config(&adc,ADC_CHANNEL_11,IP17_Analog2_PIN);

	SPIx_DMA_TX_Init(&hspi1, &hdma_spi1_tx, SPI1_NSS_PIN, SPI_MODE_MASTER);
 800b100:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b104:	9300      	str	r3, [sp, #0]
 800b106:	2310      	movs	r3, #16
 800b108:	4a14      	ldr	r2, [pc, #80]	; (800b15c <Initialize+0x4f4>)
 800b10a:	4915      	ldr	r1, [pc, #84]	; (800b160 <Initialize+0x4f8>)
 800b10c:	4815      	ldr	r0, [pc, #84]	; (800b164 <Initialize+0x4fc>)
 800b10e:	f7ff fd2f 	bl	800ab70 <SPIx_DMA_TX_Init>
}
 800b112:	bf00      	nop
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}
 800b118:	20009440 	.word	0x20009440
 800b11c:	20005fa0 	.word	0x20005fa0
 800b120:	20006c04 	.word	0x20006c04
 800b124:	200094f8 	.word	0x200094f8
 800b128:	2000943c 	.word	0x2000943c
 800b12c:	20005cd4 	.word	0x20005cd4
 800b130:	2000a1bc 	.word	0x2000a1bc
 800b134:	20009578 	.word	0x20009578
 800b138:	2000959c 	.word	0x2000959c
 800b13c:	200072d0 	.word	0x200072d0
 800b140:	40020400 	.word	0x40020400
 800b144:	20007714 	.word	0x20007714
 800b148:	20005d14 	.word	0x20005d14
 800b14c:	20009ca0 	.word	0x20009ca0
 800b150:	40021000 	.word	0x40021000
 800b154:	200099a0 	.word	0x200099a0
 800b158:	2000a11c 	.word	0x2000a11c
 800b15c:	40020000 	.word	0x40020000
 800b160:	2000a0bc 	.word	0x2000a0bc
 800b164:	200099d4 	.word	0x200099d4

0800b168 <CAN1_RX0_IRQHandler>:



void CAN1_RX0_IRQHandler()
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 800b16c:	4802      	ldr	r0, [pc, #8]	; (800b178 <CAN1_RX0_IRQHandler+0x10>)
 800b16e:	f003 fc19 	bl	800e9a4 <HAL_CAN_IRQHandler>

}
 800b172:	bf00      	nop
 800b174:	bd80      	pop	{r7, pc}
 800b176:	bf00      	nop
 800b178:	20009d28 	.word	0x20009d28

0800b17c <CAN2_RX1_IRQHandler>:

void CAN2_RX1_IRQHandler()
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan2);
 800b180:	4802      	ldr	r0, [pc, #8]	; (800b18c <CAN2_RX1_IRQHandler+0x10>)
 800b182:	f003 fc0f 	bl	800e9a4 <HAL_CAN_IRQHandler>

}
 800b186:	bf00      	nop
 800b188:	bd80      	pop	{r7, pc}
 800b18a:	bf00      	nop
 800b18c:	20009008 	.word	0x20009008

0800b190 <CAN_PROCESS>:


void CAN_PROCESS(PACKET_t packet_src){
 800b190:	b580      	push	{r7, lr}
 800b192:	b082      	sub	sp, #8
 800b194:	af00      	add	r7, sp, #0
 800b196:	4603      	mov	r3, r0
 800b198:	71fb      	strb	r3, [r7, #7]


	switch(packet_src){
 800b19a:	79fb      	ldrb	r3, [r7, #7]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d004      	beq.n	800b1aa <CAN_PROCESS+0x1a>
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d12f      	bne.n	800b204 <CAN_PROCESS+0x74>

	case VESC_PACKET:
		decode_VESC();
 800b1a4:	f002 fa58 	bl	800d658 <decode_VESC>
		break;
 800b1a8:	e02c      	b.n	800b204 <CAN_PROCESS+0x74>

	case RNS_PACKET:

		if(insData_receive[0] == 1){
 800b1aa:	4b18      	ldr	r3, [pc, #96]	; (800b20c <CAN_PROCESS+0x7c>)
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	2b01      	cmp	r3, #1
 800b1b0:	d107      	bne.n	800b1c2 <CAN_PROCESS+0x32>
			rns.RNS_data.common_instruction = insData_receive[1];
 800b1b2:	4b16      	ldr	r3, [pc, #88]	; (800b20c <CAN_PROCESS+0x7c>)
 800b1b4:	785a      	ldrb	r2, [r3, #1]
 800b1b6:	4b16      	ldr	r3, [pc, #88]	; (800b210 <CAN_PROCESS+0x80>)
 800b1b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			insData_receive[0]=2;
 800b1bc:	4b13      	ldr	r3, [pc, #76]	; (800b20c <CAN_PROCESS+0x7c>)
 800b1be:	2202      	movs	r2, #2
 800b1c0:	701a      	strb	r2, [r3, #0]
		}
		if(insData_receive[0] == 17){
 800b1c2:	4b12      	ldr	r3, [pc, #72]	; (800b20c <CAN_PROCESS+0x7c>)
 800b1c4:	781b      	ldrb	r3, [r3, #0]
 800b1c6:	2b11      	cmp	r3, #17
 800b1c8:	d11b      	bne.n	800b202 <CAN_PROCESS+0x72>
			if(buf2_flag == 1){
 800b1ca:	4b12      	ldr	r3, [pc, #72]	; (800b214 <CAN_PROCESS+0x84>)
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	d117      	bne.n	800b202 <CAN_PROCESS+0x72>
				rns.RNS_data.common_instruction = insData_receive[1];
 800b1d2:	4b0e      	ldr	r3, [pc, #56]	; (800b20c <CAN_PROCESS+0x7c>)
 800b1d4:	785a      	ldrb	r2, [r3, #1]
 800b1d6:	4b0e      	ldr	r3, [pc, #56]	; (800b210 <CAN_PROCESS+0x80>)
 800b1d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				rns.RNS_data.common_buffer[0].data = buf1_receive[0].data;
 800b1dc:	4b0e      	ldr	r3, [pc, #56]	; (800b218 <CAN_PROCESS+0x88>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4a0b      	ldr	r2, [pc, #44]	; (800b210 <CAN_PROCESS+0x80>)
 800b1e2:	6553      	str	r3, [r2, #84]	; 0x54
				rns.RNS_data.common_buffer[1].data = buf1_receive[1].data;
 800b1e4:	4b0c      	ldr	r3, [pc, #48]	; (800b218 <CAN_PROCESS+0x88>)
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	4a09      	ldr	r2, [pc, #36]	; (800b210 <CAN_PROCESS+0x80>)
 800b1ea:	6593      	str	r3, [r2, #88]	; 0x58
				rns.RNS_data.common_buffer[2].data = buf2_receive[0].data;
 800b1ec:	4b0b      	ldr	r3, [pc, #44]	; (800b21c <CAN_PROCESS+0x8c>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a07      	ldr	r2, [pc, #28]	; (800b210 <CAN_PROCESS+0x80>)
 800b1f2:	65d3      	str	r3, [r2, #92]	; 0x5c
				rns.RNS_data.common_buffer[3].data = buf2_receive[1].data;
 800b1f4:	4b09      	ldr	r3, [pc, #36]	; (800b21c <CAN_PROCESS+0x8c>)
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	4a05      	ldr	r2, [pc, #20]	; (800b210 <CAN_PROCESS+0x80>)
 800b1fa:	6613      	str	r3, [r2, #96]	; 0x60
				insData_receive[0]=3;
 800b1fc:	4b03      	ldr	r3, [pc, #12]	; (800b20c <CAN_PROCESS+0x7c>)
 800b1fe:	2203      	movs	r2, #3
 800b200:	701a      	strb	r2, [r3, #0]
			}
		}

		break;
 800b202:	bf00      	nop

	}

}
 800b204:	bf00      	nop
 800b206:	3708      	adds	r7, #8
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	200069ec 	.word	0x200069ec
 800b210:	20008f04 	.word	0x20008f04
 800b214:	200002e1 	.word	0x200002e1
 800b218:	200099c4 	.word	0x200099c4
 800b21c:	20009b1c 	.word	0x20009b1c

0800b220 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)

{
 800b220:	b5b0      	push	{r4, r5, r7, lr}
 800b222:	b086      	sub	sp, #24
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
	uint8_t aData[8];
	PACKET_t source;

	if(hcan == &hcan1){
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	4a80      	ldr	r2, [pc, #512]	; (800b42c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	f040 808f 	bne.w	800b350 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>
//		led2 = !led2;
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN1RxMessage, aData);
 800b232:	f107 030c 	add.w	r3, r7, #12
 800b236:	4a7e      	ldr	r2, [pc, #504]	; (800b430 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800b238:	2100      	movs	r1, #0
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f003 fa7a 	bl	800e734 <HAL_CAN_GetRxMessage>
		//	sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);

		if(CAN1RxMessage.IDE == CAN_ID_EXT)
 800b240:	4b7b      	ldr	r3, [pc, #492]	; (800b430 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800b242:	689b      	ldr	r3, [r3, #8]
 800b244:	2b04      	cmp	r3, #4
 800b246:	d117      	bne.n	800b278 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
		{
			vescmsg.Rxmsg = CAN1RxMessage;
 800b248:	4a7a      	ldr	r2, [pc, #488]	; (800b434 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800b24a:	4b79      	ldr	r3, [pc, #484]	; (800b430 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800b24c:	4614      	mov	r4, r2
 800b24e:	461d      	mov	r5, r3
 800b250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b254:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b258:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800b25c:	4b75      	ldr	r3, [pc, #468]	; (800b434 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800b25e:	331c      	adds	r3, #28
 800b260:	f107 020c 	add.w	r2, r7, #12
 800b264:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b268:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800b26c:	4871      	ldr	r0, [pc, #452]	; (800b434 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800b26e:	f002 fabf 	bl	800d7f0 <set_rx_frames>
			source = VESC_PACKET;
 800b272:	2301      	movs	r3, #1
 800b274:	75fb      	strb	r3, [r7, #23]
 800b276:	e062      	b.n	800b33e <HAL_CAN_RxFifo0MsgPendingCallback+0x11e>
		}else{
			source = RNS_PACKET;
 800b278:	2300      	movs	r3, #0
 800b27a:	75fb      	strb	r3, [r7, #23]
			switch(CAN1RxMessage.StdId){
 800b27c:	4b6c      	ldr	r3, [pc, #432]	; (800b430 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	2b1c      	cmp	r3, #28
 800b282:	d819      	bhi.n	800b2b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
 800b284:	2b14      	cmp	r3, #20
 800b286:	d359      	bcc.n	800b33c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
 800b288:	3b14      	subs	r3, #20
 800b28a:	2b08      	cmp	r3, #8
 800b28c:	d856      	bhi.n	800b33c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
 800b28e:	a201      	add	r2, pc, #4	; (adr r2, 800b294 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800b290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b294:	0800b2c1 	.word	0x0800b2c1
 800b298:	0800b2d9 	.word	0x0800b2d9
 800b29c:	0800b2eb 	.word	0x0800b2eb
 800b2a0:	0800b33d 	.word	0x0800b33d
 800b2a4:	0800b33d 	.word	0x0800b33d
 800b2a8:	0800b33d 	.word	0x0800b33d
 800b2ac:	0800b33d 	.word	0x0800b33d
 800b2b0:	0800b33d 	.word	0x0800b33d
 800b2b4:	0800b33d 	.word	0x0800b33d
 800b2b8:	f5b3 6fea 	cmp.w	r3, #1872	; 0x750
 800b2bc:	d021      	beq.n	800b302 <HAL_CAN_RxFifo0MsgPendingCallback+0xe2>
					faul_counter = 0;
				}else{
					faul_counter ++;
				}
			default:
				break;
 800b2be:	e03d      	b.n	800b33c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
				memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 800b2c0:	4b5b      	ldr	r3, [pc, #364]	; (800b430 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800b2c2:	691a      	ldr	r2, [r3, #16]
 800b2c4:	f107 030c 	add.w	r3, r7, #12
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	485b      	ldr	r0, [pc, #364]	; (800b438 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 800b2cc:	f00d fcc8 	bl	8018c60 <memcpy>
				buf2_flag = 0;
 800b2d0:	4b5a      	ldr	r3, [pc, #360]	; (800b43c <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	701a      	strb	r2, [r3, #0]
				break;
 800b2d6:	e032      	b.n	800b33e <HAL_CAN_RxFifo0MsgPendingCallback+0x11e>
				memcpy(&buf1_receive, &aData, CAN1RxMessage.DLC);
 800b2d8:	4b55      	ldr	r3, [pc, #340]	; (800b430 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800b2da:	691a      	ldr	r2, [r3, #16]
 800b2dc:	f107 030c 	add.w	r3, r7, #12
 800b2e0:	4619      	mov	r1, r3
 800b2e2:	4857      	ldr	r0, [pc, #348]	; (800b440 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800b2e4:	f00d fcbc 	bl	8018c60 <memcpy>
				break;
 800b2e8:	e029      	b.n	800b33e <HAL_CAN_RxFifo0MsgPendingCallback+0x11e>
				memcpy(&buf2_receive, &aData, CAN1RxMessage.DLC);
 800b2ea:	4b51      	ldr	r3, [pc, #324]	; (800b430 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800b2ec:	691a      	ldr	r2, [r3, #16]
 800b2ee:	f107 030c 	add.w	r3, r7, #12
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	4853      	ldr	r0, [pc, #332]	; (800b444 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 800b2f6:	f00d fcb3 	bl	8018c60 <memcpy>
				buf2_flag = 1;
 800b2fa:	4b50      	ldr	r3, [pc, #320]	; (800b43c <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	701a      	strb	r2, [r3, #0]
				break;
 800b300:	e01d      	b.n	800b33e <HAL_CAN_RxFifo0MsgPendingCallback+0x11e>
				if(faul_counter >= 2000){
 800b302:	4b51      	ldr	r3, [pc, #324]	; (800b448 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b30a:	d312      	bcc.n	800b332 <HAL_CAN_RxFifo0MsgPendingCallback+0x112>
					led2 = !led2;
 800b30c:	4b4f      	ldr	r3, [pc, #316]	; (800b44c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 800b30e:	785b      	ldrb	r3, [r3, #1]
 800b310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b314:	b2db      	uxtb	r3, r3
 800b316:	4a4d      	ldr	r2, [pc, #308]	; (800b44c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 800b318:	2b00      	cmp	r3, #0
 800b31a:	bf0c      	ite	eq
 800b31c:	2301      	moveq	r3, #1
 800b31e:	2300      	movne	r3, #0
 800b320:	b2d9      	uxtb	r1, r3
 800b322:	7853      	ldrb	r3, [r2, #1]
 800b324:	f361 1386 	bfi	r3, r1, #6, #1
 800b328:	7053      	strb	r3, [r2, #1]
					faul_counter = 0;
 800b32a:	4b47      	ldr	r3, [pc, #284]	; (800b448 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 800b32c:	2200      	movs	r2, #0
 800b32e:	601a      	str	r2, [r3, #0]
				break;
 800b330:	e004      	b.n	800b33c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
					faul_counter ++;
 800b332:	4b45      	ldr	r3, [pc, #276]	; (800b448 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	3301      	adds	r3, #1
 800b338:	4a43      	ldr	r2, [pc, #268]	; (800b448 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 800b33a:	6013      	str	r3, [r2, #0]
				break;
 800b33c:	bf00      	nop
			}
		}
		CAN_PROCESS(source);
 800b33e:	7dfb      	ldrb	r3, [r7, #23]
 800b340:	4618      	mov	r0, r3
 800b342:	f7ff ff25 	bl	800b190 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800b346:	2102      	movs	r1, #2
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f003 fb05 	bl	800e958 <HAL_CAN_ActivateNotification>
			}
		}
		CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
	}
}
 800b34e:	e069      	b.n	800b424 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN2RxMessage, aData);
 800b350:	f107 030c 	add.w	r3, r7, #12
 800b354:	4a3e      	ldr	r2, [pc, #248]	; (800b450 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800b356:	2100      	movs	r1, #0
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f003 f9eb 	bl	800e734 <HAL_CAN_GetRxMessage>
		if(CAN2RxMessage.IDE == CAN_ID_EXT)
 800b35e:	4b3c      	ldr	r3, [pc, #240]	; (800b450 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800b360:	689b      	ldr	r3, [r3, #8]
 800b362:	2b04      	cmp	r3, #4
 800b364:	d117      	bne.n	800b396 <HAL_CAN_RxFifo0MsgPendingCallback+0x176>
			vescmsg.Rxmsg = CAN2RxMessage;
 800b366:	4a33      	ldr	r2, [pc, #204]	; (800b434 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800b368:	4b39      	ldr	r3, [pc, #228]	; (800b450 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800b36a:	4614      	mov	r4, r2
 800b36c:	461d      	mov	r5, r3
 800b36e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b370:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b372:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b376:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800b37a:	4b2e      	ldr	r3, [pc, #184]	; (800b434 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800b37c:	331c      	adds	r3, #28
 800b37e:	f107 020c 	add.w	r2, r7, #12
 800b382:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b386:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800b38a:	482a      	ldr	r0, [pc, #168]	; (800b434 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800b38c:	f002 fa30 	bl	800d7f0 <set_rx_frames>
			source = VESC_PACKET;
 800b390:	2301      	movs	r3, #1
 800b392:	75fb      	strb	r3, [r7, #23]
 800b394:	e03e      	b.n	800b414 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>
			source = RNS_PACKET;
 800b396:	2300      	movs	r3, #0
 800b398:	75fb      	strb	r3, [r7, #23]
			switch(CAN1RxMessage.StdId){
 800b39a:	4b25      	ldr	r3, [pc, #148]	; (800b430 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	3b14      	subs	r3, #20
 800b3a0:	2b08      	cmp	r3, #8
 800b3a2:	d836      	bhi.n	800b412 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f2>
 800b3a4:	a201      	add	r2, pc, #4	; (adr r2, 800b3ac <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 800b3a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3aa:	bf00      	nop
 800b3ac:	0800b3d1 	.word	0x0800b3d1
 800b3b0:	0800b3e9 	.word	0x0800b3e9
 800b3b4:	0800b3fb 	.word	0x0800b3fb
 800b3b8:	0800b413 	.word	0x0800b413
 800b3bc:	0800b413 	.word	0x0800b413
 800b3c0:	0800b413 	.word	0x0800b413
 800b3c4:	0800b413 	.word	0x0800b413
 800b3c8:	0800b413 	.word	0x0800b413
 800b3cc:	0800b413 	.word	0x0800b413
				memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 800b3d0:	4b1f      	ldr	r3, [pc, #124]	; (800b450 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800b3d2:	691a      	ldr	r2, [r3, #16]
 800b3d4:	f107 030c 	add.w	r3, r7, #12
 800b3d8:	4619      	mov	r1, r3
 800b3da:	4817      	ldr	r0, [pc, #92]	; (800b438 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 800b3dc:	f00d fc40 	bl	8018c60 <memcpy>
				buf2_flag = 0;
 800b3e0:	4b16      	ldr	r3, [pc, #88]	; (800b43c <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	701a      	strb	r2, [r3, #0]
				break;
 800b3e6:	e015      	b.n	800b414 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>
				memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 800b3e8:	4b19      	ldr	r3, [pc, #100]	; (800b450 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800b3ea:	691a      	ldr	r2, [r3, #16]
 800b3ec:	f107 030c 	add.w	r3, r7, #12
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	4813      	ldr	r0, [pc, #76]	; (800b440 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800b3f4:	f00d fc34 	bl	8018c60 <memcpy>
				break;
 800b3f8:	e00c      	b.n	800b414 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>
				memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 800b3fa:	4b15      	ldr	r3, [pc, #84]	; (800b450 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800b3fc:	691a      	ldr	r2, [r3, #16]
 800b3fe:	f107 030c 	add.w	r3, r7, #12
 800b402:	4619      	mov	r1, r3
 800b404:	480f      	ldr	r0, [pc, #60]	; (800b444 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 800b406:	f00d fc2b 	bl	8018c60 <memcpy>
				buf2_flag = 1;
 800b40a:	4b0c      	ldr	r3, [pc, #48]	; (800b43c <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 800b40c:	2201      	movs	r2, #1
 800b40e:	701a      	strb	r2, [r3, #0]
				break;
 800b410:	e000      	b.n	800b414 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>
				break;
 800b412:	bf00      	nop
		CAN_PROCESS(source);
 800b414:	7dfb      	ldrb	r3, [r7, #23]
 800b416:	4618      	mov	r0, r3
 800b418:	f7ff feba 	bl	800b190 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800b41c:	2110      	movs	r1, #16
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f003 fa9a 	bl	800e958 <HAL_CAN_ActivateNotification>
}
 800b424:	bf00      	nop
 800b426:	3718      	adds	r7, #24
 800b428:	46bd      	mov	sp, r7
 800b42a:	bdb0      	pop	{r4, r5, r7, pc}
 800b42c:	20009d28 	.word	0x20009d28
 800b430:	2000a2fc 	.word	0x2000a2fc
 800b434:	20009548 	.word	0x20009548
 800b438:	200069ec 	.word	0x200069ec
 800b43c:	200002e1 	.word	0x200002e1
 800b440:	200099c4 	.word	0x200099c4
 800b444:	20009b1c 	.word	0x20009b1c
 800b448:	20009614 	.word	0x20009614
 800b44c:	40020814 	.word	0x40020814
 800b450:	20006a84 	.word	0x20006a84

0800b454 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)

{
 800b454:	b5b0      	push	{r4, r5, r7, lr}
 800b456:	b086      	sub	sp, #24
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
	uint8_t aData[8];
	PACKET_t source;

	if(hcan == &hcan1){
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	4a6d      	ldr	r2, [pc, #436]	; (800b614 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c0>)
 800b460:	4293      	cmp	r3, r2
 800b462:	d16a      	bne.n	800b53a <HAL_CAN_RxFifo1MsgPendingCallback+0xe6>

		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN1RxMessage, aData);
 800b464:	f107 030c 	add.w	r3, r7, #12
 800b468:	4a6b      	ldr	r2, [pc, #428]	; (800b618 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800b46a:	2101      	movs	r1, #1
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f003 f961 	bl	800e734 <HAL_CAN_GetRxMessage>
		//sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);
		if(CAN1RxMessage.IDE == CAN_ID_EXT)
 800b472:	4b69      	ldr	r3, [pc, #420]	; (800b618 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800b474:	689b      	ldr	r3, [r3, #8]
 800b476:	2b04      	cmp	r3, #4
 800b478:	d117      	bne.n	800b4aa <HAL_CAN_RxFifo1MsgPendingCallback+0x56>
		{
			vescmsg.Rxmsg = CAN1RxMessage;
 800b47a:	4a68      	ldr	r2, [pc, #416]	; (800b61c <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800b47c:	4b66      	ldr	r3, [pc, #408]	; (800b618 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800b47e:	4614      	mov	r4, r2
 800b480:	461d      	mov	r5, r3
 800b482:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b484:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b486:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b48a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800b48e:	4b63      	ldr	r3, [pc, #396]	; (800b61c <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800b490:	331c      	adds	r3, #28
 800b492:	f107 020c 	add.w	r2, r7, #12
 800b496:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b49a:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800b49e:	485f      	ldr	r0, [pc, #380]	; (800b61c <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800b4a0:	f002 f9a6 	bl	800d7f0 <set_rx_frames>
			source = VESC_PACKET;
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	75fb      	strb	r3, [r7, #23]
 800b4a8:	e03e      	b.n	800b528 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>

		}else{
			source = RNS_PACKET;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	75fb      	strb	r3, [r7, #23]
			switch(CAN2RxMessage.StdId){
 800b4ae:	4b5c      	ldr	r3, [pc, #368]	; (800b620 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	3b14      	subs	r3, #20
 800b4b4:	2b08      	cmp	r3, #8
 800b4b6:	d836      	bhi.n	800b526 <HAL_CAN_RxFifo1MsgPendingCallback+0xd2>
 800b4b8:	a201      	add	r2, pc, #4	; (adr r2, 800b4c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>)
 800b4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4be:	bf00      	nop
 800b4c0:	0800b4e5 	.word	0x0800b4e5
 800b4c4:	0800b4fd 	.word	0x0800b4fd
 800b4c8:	0800b50f 	.word	0x0800b50f
 800b4cc:	0800b527 	.word	0x0800b527
 800b4d0:	0800b527 	.word	0x0800b527
 800b4d4:	0800b527 	.word	0x0800b527
 800b4d8:	0800b527 	.word	0x0800b527
 800b4dc:	0800b527 	.word	0x0800b527
 800b4e0:	0800b527 	.word	0x0800b527
			case RNS_TO_mainboard:
				memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 800b4e4:	4b4c      	ldr	r3, [pc, #304]	; (800b618 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800b4e6:	691a      	ldr	r2, [r3, #16]
 800b4e8:	f107 030c 	add.w	r3, r7, #12
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	484d      	ldr	r0, [pc, #308]	; (800b624 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800b4f0:	f00d fbb6 	bl	8018c60 <memcpy>
				buf2_flag = 0;
 800b4f4:	4b4c      	ldr	r3, [pc, #304]	; (800b628 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	701a      	strb	r2, [r3, #0]

				break;
 800b4fa:	e015      	b.n	800b528 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>
			case RNS_TO_mainboard_buf1:
				memcpy(&buf1_receive, &aData, CAN1RxMessage.DLC);
 800b4fc:	4b46      	ldr	r3, [pc, #280]	; (800b618 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800b4fe:	691a      	ldr	r2, [r3, #16]
 800b500:	f107 030c 	add.w	r3, r7, #12
 800b504:	4619      	mov	r1, r3
 800b506:	4849      	ldr	r0, [pc, #292]	; (800b62c <HAL_CAN_RxFifo1MsgPendingCallback+0x1d8>)
 800b508:	f00d fbaa 	bl	8018c60 <memcpy>

				break;
 800b50c:	e00c      	b.n	800b528 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>
			case RNS_TO_mainboard_buf2:
				memcpy(&buf2_receive, &aData, CAN1RxMessage.DLC);
 800b50e:	4b42      	ldr	r3, [pc, #264]	; (800b618 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800b510:	691a      	ldr	r2, [r3, #16]
 800b512:	f107 030c 	add.w	r3, r7, #12
 800b516:	4619      	mov	r1, r3
 800b518:	4845      	ldr	r0, [pc, #276]	; (800b630 <HAL_CAN_RxFifo1MsgPendingCallback+0x1dc>)
 800b51a:	f00d fba1 	bl	8018c60 <memcpy>
				buf2_flag = 1;
 800b51e:	4b42      	ldr	r3, [pc, #264]	; (800b628 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 800b520:	2201      	movs	r2, #1
 800b522:	701a      	strb	r2, [r3, #0]
				break;
 800b524:	e000      	b.n	800b528 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>
			case XY_feedback_state :
				break;
			default:
				break;
 800b526:	bf00      	nop
			}
		}
		CAN_PROCESS(source);
 800b528:	7dfb      	ldrb	r3, [r7, #23]
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7ff fe30 	bl	800b190 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800b530:	2102      	movs	r1, #2
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f003 fa10 	bl	800e958 <HAL_CAN_ActivateNotification>
		}
		CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
	}

}
 800b538:	e068      	b.n	800b60c <HAL_CAN_RxFifo1MsgPendingCallback+0x1b8>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN2RxMessage, aData);
 800b53a:	f107 030c 	add.w	r3, r7, #12
 800b53e:	4a38      	ldr	r2, [pc, #224]	; (800b620 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800b540:	2101      	movs	r1, #1
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f003 f8f6 	bl	800e734 <HAL_CAN_GetRxMessage>
		if(CAN2RxMessage.IDE == CAN_ID_EXT)
 800b548:	4b35      	ldr	r3, [pc, #212]	; (800b620 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	2b04      	cmp	r3, #4
 800b54e:	d117      	bne.n	800b580 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>
			vescmsg.Rxmsg = CAN2RxMessage;
 800b550:	4a32      	ldr	r2, [pc, #200]	; (800b61c <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800b552:	4b33      	ldr	r3, [pc, #204]	; (800b620 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800b554:	4614      	mov	r4, r2
 800b556:	461d      	mov	r5, r3
 800b558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b55a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b55c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b560:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800b564:	4b2d      	ldr	r3, [pc, #180]	; (800b61c <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800b566:	331c      	adds	r3, #28
 800b568:	f107 020c 	add.w	r2, r7, #12
 800b56c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b570:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800b574:	4829      	ldr	r0, [pc, #164]	; (800b61c <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800b576:	f002 f93b 	bl	800d7f0 <set_rx_frames>
			source = VESC_PACKET;
 800b57a:	2301      	movs	r3, #1
 800b57c:	75fb      	strb	r3, [r7, #23]
 800b57e:	e03d      	b.n	800b5fc <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>
			source = RNS_PACKET;
 800b580:	2300      	movs	r3, #0
 800b582:	75fb      	strb	r3, [r7, #23]
			switch(CAN2RxMessage.StdId){
 800b584:	4b26      	ldr	r3, [pc, #152]	; (800b620 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	3b14      	subs	r3, #20
 800b58a:	2b08      	cmp	r3, #8
 800b58c:	d835      	bhi.n	800b5fa <HAL_CAN_RxFifo1MsgPendingCallback+0x1a6>
 800b58e:	a201      	add	r2, pc, #4	; (adr r2, 800b594 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 800b590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b594:	0800b5b9 	.word	0x0800b5b9
 800b598:	0800b5d1 	.word	0x0800b5d1
 800b59c:	0800b5e3 	.word	0x0800b5e3
 800b5a0:	0800b5fb 	.word	0x0800b5fb
 800b5a4:	0800b5fb 	.word	0x0800b5fb
 800b5a8:	0800b5fb 	.word	0x0800b5fb
 800b5ac:	0800b5fb 	.word	0x0800b5fb
 800b5b0:	0800b5fb 	.word	0x0800b5fb
 800b5b4:	0800b5fb 	.word	0x0800b5fb
				memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 800b5b8:	4b19      	ldr	r3, [pc, #100]	; (800b620 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800b5ba:	691a      	ldr	r2, [r3, #16]
 800b5bc:	f107 030c 	add.w	r3, r7, #12
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	4818      	ldr	r0, [pc, #96]	; (800b624 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800b5c4:	f00d fb4c 	bl	8018c60 <memcpy>
				buf2_flag = 0;
 800b5c8:	4b17      	ldr	r3, [pc, #92]	; (800b628 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	701a      	strb	r2, [r3, #0]
				break;
 800b5ce:	e015      	b.n	800b5fc <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>
				memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 800b5d0:	4b13      	ldr	r3, [pc, #76]	; (800b620 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800b5d2:	691a      	ldr	r2, [r3, #16]
 800b5d4:	f107 030c 	add.w	r3, r7, #12
 800b5d8:	4619      	mov	r1, r3
 800b5da:	4814      	ldr	r0, [pc, #80]	; (800b62c <HAL_CAN_RxFifo1MsgPendingCallback+0x1d8>)
 800b5dc:	f00d fb40 	bl	8018c60 <memcpy>
				break;
 800b5e0:	e00c      	b.n	800b5fc <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>
				memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 800b5e2:	4b0f      	ldr	r3, [pc, #60]	; (800b620 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800b5e4:	691a      	ldr	r2, [r3, #16]
 800b5e6:	f107 030c 	add.w	r3, r7, #12
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	4810      	ldr	r0, [pc, #64]	; (800b630 <HAL_CAN_RxFifo1MsgPendingCallback+0x1dc>)
 800b5ee:	f00d fb37 	bl	8018c60 <memcpy>
				buf2_flag = 1;
 800b5f2:	4b0d      	ldr	r3, [pc, #52]	; (800b628 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	701a      	strb	r2, [r3, #0]
				break;
 800b5f8:	e000      	b.n	800b5fc <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>
				break;
 800b5fa:	bf00      	nop
		CAN_PROCESS(source);
 800b5fc:	7dfb      	ldrb	r3, [r7, #23]
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7ff fdc6 	bl	800b190 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800b604:	2110      	movs	r1, #16
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f003 f9a6 	bl	800e958 <HAL_CAN_ActivateNotification>
}
 800b60c:	bf00      	nop
 800b60e:	3718      	adds	r7, #24
 800b610:	46bd      	mov	sp, r7
 800b612:	bdb0      	pop	{r4, r5, r7, pc}
 800b614:	20009d28 	.word	0x20009d28
 800b618:	2000a2fc 	.word	0x2000a2fc
 800b61c:	20009548 	.word	0x20009548
 800b620:	20006a84 	.word	0x20006a84
 800b624:	200069ec 	.word	0x200069ec
 800b628:	200002e1 	.word	0x200002e1
 800b62c:	200099c4 	.word	0x200099c4
 800b630:	20009b1c 	.word	0x20009b1c

0800b634 <set>:
 * 4 servo used, 2 for ring picking, 2 to control shooting angle
 * 6 VESC used, 4 for navigation, 2 for flywheel
 * 3 cylinder used to push ring out
 */

void set(void) {
 800b634:	b580      	push	{r7, lr}
 800b636:	b082      	sub	sp, #8
 800b638:	af02      	add	r7, sp, #8

	Initialize();
 800b63a:	f7ff fb15 	bl	800ac68 <Initialize>
//	ROS_Navi_Init(&huart4, &huart5);
	ROS_Init(&huart4);
 800b63e:	48bf      	ldr	r0, [pc, #764]	; (800b93c <set+0x308>)
 800b640:	f7fd fece 	bl	80093e0 <ROS_Init>
	ROS_Read_Flash();
 800b644:	f7fe faea 	bl	8009c1c <ROS_Read_Flash>
	PSxInitDMA(&ps4,&hi2c1);
 800b648:	49bd      	ldr	r1, [pc, #756]	; (800b940 <set+0x30c>)
 800b64a:	48be      	ldr	r0, [pc, #760]	; (800b944 <set+0x310>)
 800b64c:	f7fd fad5 	bl	8008bfa <PSxInitDMA>
//	PSxInitUART(&ps4, &huart4);
//	LidarInit(&huart5);
	TIMxInit(&htim6, 5000, 84); // 5ms
 800b650:	2254      	movs	r2, #84	; 0x54
 800b652:	f241 3188 	movw	r1, #5000	; 0x1388
 800b656:	48bc      	ldr	r0, [pc, #752]	; (800b948 <set+0x314>)
 800b658:	f7f7 fe60 	bl	800331c <TIMxInit>
//	tuneRegister(2, &huart2);
//	tuneRead();
//	RNS_config(&hcan1);
	MODNInit(MODN_FWD_OMNI, BRUSHLESS, 2.0 , 0.5, 2.0, 0.1);
 800b65c:	eddf 1abb 	vldr	s3, [pc, #748]	; 800b94c <set+0x318>
 800b660:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 800b664:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800b668:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800b66c:	2100      	movs	r1, #0
 800b66e:	2000      	movs	r0, #0
 800b670:	f7f9 fb26 	bl	8004cc0 <MODNInit>
	setOrientationMODN(OPERATOR_TURNED_90_DEGREES_ANTICLOCKWISE);
 800b674:	2003      	movs	r0, #3
 800b676:	f7f9 fe71 	bl	800535c <setOrientationMODN>
	VESCNavInit(35000, MCCONF_SI_MOTOR_POLES / 2, 0.05 / 4000.0 * 3.142, 0.05 / 4000.0 * 3.142, 0.1, 111, 112, 113, 114);
 800b67a:	2372      	movs	r3, #114	; 0x72
 800b67c:	2271      	movs	r2, #113	; 0x71
 800b67e:	2170      	movs	r1, #112	; 0x70
 800b680:	206f      	movs	r0, #111	; 0x6f
 800b682:	ed9f 2ab2 	vldr	s4, [pc, #712]	; 800b94c <set+0x318>
 800b686:	eddf 1ab2 	vldr	s3, [pc, #712]	; 800b950 <set+0x31c>
 800b68a:	ed9f 1ab1 	vldr	s2, [pc, #708]	; 800b950 <set+0x31c>
 800b68e:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 800b692:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 800b954 <set+0x320>
 800b696:	f002 f8e1 	bl	800d85c <VESCNavInit>
	VESCInit(35000, MCCONF_SI_MOTOR_POLES / 2, 0.127, 115, &flywheel1);
 800b69a:	49af      	ldr	r1, [pc, #700]	; (800b958 <set+0x324>)
 800b69c:	2073      	movs	r0, #115	; 0x73
 800b69e:	ed9f 1aaf 	vldr	s2, [pc, #700]	; 800b95c <set+0x328>
 800b6a2:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 800b6a6:	ed9f 0aab 	vldr	s0, [pc, #684]	; 800b954 <set+0x320>
 800b6aa:	f002 fbeb 	bl	800de84 <VESCInit>
	VESCInit(35000, MCCONF_SI_MOTOR_POLES / 2, 0.127, 116, &flywheel2);
 800b6ae:	49ac      	ldr	r1, [pc, #688]	; (800b960 <set+0x32c>)
 800b6b0:	2074      	movs	r0, #116	; 0x74
 800b6b2:	ed9f 1aaa 	vldr	s2, [pc, #680]	; 800b95c <set+0x328>
 800b6b6:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 800b6ba:	ed9f 0aa6 	vldr	s0, [pc, #664]	; 800b954 <set+0x320>
 800b6be:	f002 fbe1 	bl	800de84 <VESCInit>

	//ROBOCONPID
	/* Left velocity PID*/
	PIDSourceInit(&fFLeftVelErr, &fFLeftVelU, &fleft_vel);
 800b6c2:	4aa8      	ldr	r2, [pc, #672]	; (800b964 <set+0x330>)
 800b6c4:	49a8      	ldr	r1, [pc, #672]	; (800b968 <set+0x334>)
 800b6c6:	48a9      	ldr	r0, [pc, #676]	; (800b96c <set+0x338>)
 800b6c8:	f7f9 fe78 	bl	80053bc <PIDSourceInit>
	PIDDelayInit(&fleft_vel);
 800b6cc:	48a5      	ldr	r0, [pc, #660]	; (800b964 <set+0x330>)
 800b6ce:	f7fa f80c 	bl	80056ea <PIDDelayInit>
	PIDGainInit(SAMPLE_TIME, fFLeftVG[0], fFLeftVG[1], fFLeftVG[2], fFLeftVG[3], fFLeftVG[4], fFLeftVG[5], fFLeftVG[6], &fleft_vel);
 800b6d2:	4ba7      	ldr	r3, [pc, #668]	; (800b970 <set+0x33c>)
 800b6d4:	edd3 7a00 	vldr	s15, [r3]
 800b6d8:	4ba5      	ldr	r3, [pc, #660]	; (800b970 <set+0x33c>)
 800b6da:	ed93 7a01 	vldr	s14, [r3, #4]
 800b6de:	4ba4      	ldr	r3, [pc, #656]	; (800b970 <set+0x33c>)
 800b6e0:	edd3 6a02 	vldr	s13, [r3, #8]
 800b6e4:	4ba2      	ldr	r3, [pc, #648]	; (800b970 <set+0x33c>)
 800b6e6:	ed93 6a03 	vldr	s12, [r3, #12]
 800b6ea:	4ba1      	ldr	r3, [pc, #644]	; (800b970 <set+0x33c>)
 800b6ec:	edd3 5a04 	vldr	s11, [r3, #16]
 800b6f0:	4b9f      	ldr	r3, [pc, #636]	; (800b970 <set+0x33c>)
 800b6f2:	ed93 5a05 	vldr	s10, [r3, #20]
 800b6f6:	4b9e      	ldr	r3, [pc, #632]	; (800b970 <set+0x33c>)
 800b6f8:	edd3 4a06 	vldr	s9, [r3, #24]
 800b6fc:	4899      	ldr	r0, [pc, #612]	; (800b964 <set+0x330>)
 800b6fe:	eef0 3a64 	vmov.f32	s7, s9
 800b702:	eeb0 3a45 	vmov.f32	s6, s10
 800b706:	eef0 2a65 	vmov.f32	s5, s11
 800b70a:	eeb0 2a46 	vmov.f32	s4, s12
 800b70e:	eef0 1a66 	vmov.f32	s3, s13
 800b712:	eeb0 1a47 	vmov.f32	s2, s14
 800b716:	eef0 0a67 	vmov.f32	s1, s15
 800b71a:	ed9f 0a96 	vldr	s0, [pc, #600]	; 800b974 <set+0x340>
 800b71e:	f7f9 fe5f 	bl	80053e0 <PIDGainInit>

	PIDSourceInit(&fBLeftVelErr, &fBLeftVelU, &bleft_vel);
 800b722:	4a95      	ldr	r2, [pc, #596]	; (800b978 <set+0x344>)
 800b724:	4995      	ldr	r1, [pc, #596]	; (800b97c <set+0x348>)
 800b726:	4896      	ldr	r0, [pc, #600]	; (800b980 <set+0x34c>)
 800b728:	f7f9 fe48 	bl	80053bc <PIDSourceInit>
	PIDDelayInit(&bleft_vel);
 800b72c:	4892      	ldr	r0, [pc, #584]	; (800b978 <set+0x344>)
 800b72e:	f7f9 ffdc 	bl	80056ea <PIDDelayInit>
	PIDGainInit(SAMPLE_TIME, fBLeftVG[0], fBLeftVG[1], fBLeftVG[2], fBLeftVG[3], fBLeftVG[4], fBLeftVG[5], fBLeftVG[6], &bleft_vel);
 800b732:	4b94      	ldr	r3, [pc, #592]	; (800b984 <set+0x350>)
 800b734:	edd3 7a00 	vldr	s15, [r3]
 800b738:	4b92      	ldr	r3, [pc, #584]	; (800b984 <set+0x350>)
 800b73a:	ed93 7a01 	vldr	s14, [r3, #4]
 800b73e:	4b91      	ldr	r3, [pc, #580]	; (800b984 <set+0x350>)
 800b740:	edd3 6a02 	vldr	s13, [r3, #8]
 800b744:	4b8f      	ldr	r3, [pc, #572]	; (800b984 <set+0x350>)
 800b746:	ed93 6a03 	vldr	s12, [r3, #12]
 800b74a:	4b8e      	ldr	r3, [pc, #568]	; (800b984 <set+0x350>)
 800b74c:	edd3 5a04 	vldr	s11, [r3, #16]
 800b750:	4b8c      	ldr	r3, [pc, #560]	; (800b984 <set+0x350>)
 800b752:	ed93 5a05 	vldr	s10, [r3, #20]
 800b756:	4b8b      	ldr	r3, [pc, #556]	; (800b984 <set+0x350>)
 800b758:	edd3 4a06 	vldr	s9, [r3, #24]
 800b75c:	4886      	ldr	r0, [pc, #536]	; (800b978 <set+0x344>)
 800b75e:	eef0 3a64 	vmov.f32	s7, s9
 800b762:	eeb0 3a45 	vmov.f32	s6, s10
 800b766:	eef0 2a65 	vmov.f32	s5, s11
 800b76a:	eeb0 2a46 	vmov.f32	s4, s12
 800b76e:	eef0 1a66 	vmov.f32	s3, s13
 800b772:	eeb0 1a47 	vmov.f32	s2, s14
 800b776:	eef0 0a67 	vmov.f32	s1, s15
 800b77a:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 800b974 <set+0x340>
 800b77e:	f7f9 fe2f 	bl	80053e0 <PIDGainInit>

	/* Right velocity PID*/
	PIDSourceInit(&fFRightVelErr, &fFRightVelU, &fright_vel);
 800b782:	4a81      	ldr	r2, [pc, #516]	; (800b988 <set+0x354>)
 800b784:	4981      	ldr	r1, [pc, #516]	; (800b98c <set+0x358>)
 800b786:	4882      	ldr	r0, [pc, #520]	; (800b990 <set+0x35c>)
 800b788:	f7f9 fe18 	bl	80053bc <PIDSourceInit>
	PIDDelayInit(&fright_vel);
 800b78c:	487e      	ldr	r0, [pc, #504]	; (800b988 <set+0x354>)
 800b78e:	f7f9 ffac 	bl	80056ea <PIDDelayInit>
	PIDGainInit(SAMPLE_TIME, fFRightVG[0], fFRightVG[1], fFRightVG[2], fFRightVG[3], fFRightVG[4], fFRightVG[5], fFRightVG[6], &fright_vel);
 800b792:	4b80      	ldr	r3, [pc, #512]	; (800b994 <set+0x360>)
 800b794:	edd3 7a00 	vldr	s15, [r3]
 800b798:	4b7e      	ldr	r3, [pc, #504]	; (800b994 <set+0x360>)
 800b79a:	ed93 7a01 	vldr	s14, [r3, #4]
 800b79e:	4b7d      	ldr	r3, [pc, #500]	; (800b994 <set+0x360>)
 800b7a0:	edd3 6a02 	vldr	s13, [r3, #8]
 800b7a4:	4b7b      	ldr	r3, [pc, #492]	; (800b994 <set+0x360>)
 800b7a6:	ed93 6a03 	vldr	s12, [r3, #12]
 800b7aa:	4b7a      	ldr	r3, [pc, #488]	; (800b994 <set+0x360>)
 800b7ac:	edd3 5a04 	vldr	s11, [r3, #16]
 800b7b0:	4b78      	ldr	r3, [pc, #480]	; (800b994 <set+0x360>)
 800b7b2:	ed93 5a05 	vldr	s10, [r3, #20]
 800b7b6:	4b77      	ldr	r3, [pc, #476]	; (800b994 <set+0x360>)
 800b7b8:	edd3 4a06 	vldr	s9, [r3, #24]
 800b7bc:	4872      	ldr	r0, [pc, #456]	; (800b988 <set+0x354>)
 800b7be:	eef0 3a64 	vmov.f32	s7, s9
 800b7c2:	eeb0 3a45 	vmov.f32	s6, s10
 800b7c6:	eef0 2a65 	vmov.f32	s5, s11
 800b7ca:	eeb0 2a46 	vmov.f32	s4, s12
 800b7ce:	eef0 1a66 	vmov.f32	s3, s13
 800b7d2:	eeb0 1a47 	vmov.f32	s2, s14
 800b7d6:	eef0 0a67 	vmov.f32	s1, s15
 800b7da:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800b974 <set+0x340>
 800b7de:	f7f9 fdff 	bl	80053e0 <PIDGainInit>

	PIDSourceInit(&fBRightVelErr, &fBRightVelU, &bright_vel);
 800b7e2:	4a6d      	ldr	r2, [pc, #436]	; (800b998 <set+0x364>)
 800b7e4:	496d      	ldr	r1, [pc, #436]	; (800b99c <set+0x368>)
 800b7e6:	486e      	ldr	r0, [pc, #440]	; (800b9a0 <set+0x36c>)
 800b7e8:	f7f9 fde8 	bl	80053bc <PIDSourceInit>
	PIDDelayInit(&bright_vel);
 800b7ec:	486a      	ldr	r0, [pc, #424]	; (800b998 <set+0x364>)
 800b7ee:	f7f9 ff7c 	bl	80056ea <PIDDelayInit>
	PIDGainInit(SAMPLE_TIME, fBRightVG[0], fBRightVG[1], fBRightVG[2], fBRightVG[3], fBRightVG[4], fBRightVG[5], fBRightVG[6], &bright_vel);
 800b7f2:	4b6c      	ldr	r3, [pc, #432]	; (800b9a4 <set+0x370>)
 800b7f4:	edd3 7a00 	vldr	s15, [r3]
 800b7f8:	4b6a      	ldr	r3, [pc, #424]	; (800b9a4 <set+0x370>)
 800b7fa:	ed93 7a01 	vldr	s14, [r3, #4]
 800b7fe:	4b69      	ldr	r3, [pc, #420]	; (800b9a4 <set+0x370>)
 800b800:	edd3 6a02 	vldr	s13, [r3, #8]
 800b804:	4b67      	ldr	r3, [pc, #412]	; (800b9a4 <set+0x370>)
 800b806:	ed93 6a03 	vldr	s12, [r3, #12]
 800b80a:	4b66      	ldr	r3, [pc, #408]	; (800b9a4 <set+0x370>)
 800b80c:	edd3 5a04 	vldr	s11, [r3, #16]
 800b810:	4b64      	ldr	r3, [pc, #400]	; (800b9a4 <set+0x370>)
 800b812:	ed93 5a05 	vldr	s10, [r3, #20]
 800b816:	4b63      	ldr	r3, [pc, #396]	; (800b9a4 <set+0x370>)
 800b818:	edd3 4a06 	vldr	s9, [r3, #24]
 800b81c:	485e      	ldr	r0, [pc, #376]	; (800b998 <set+0x364>)
 800b81e:	eef0 3a64 	vmov.f32	s7, s9
 800b822:	eeb0 3a45 	vmov.f32	s6, s10
 800b826:	eef0 2a65 	vmov.f32	s5, s11
 800b82a:	eeb0 2a46 	vmov.f32	s4, s12
 800b82e:	eef0 1a66 	vmov.f32	s3, s13
 800b832:	eeb0 1a47 	vmov.f32	s2, s14
 800b836:	eef0 0a67 	vmov.f32	s1, s15
 800b83a:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800b974 <set+0x340>
 800b83e:	f7f9 fdcf 	bl	80053e0 <PIDGainInit>

	/* X & Y position ABT */
	ABTInit(SAMPLE_TIME, fXPosGain[0], fXPosGain[1], fXPosGain[2], &fXEncData ,&fXPos, &fXVel, &fXAcc, &x_data);
 800b842:	4b59      	ldr	r3, [pc, #356]	; (800b9a8 <set+0x374>)
 800b844:	edd3 7a00 	vldr	s15, [r3]
 800b848:	4b57      	ldr	r3, [pc, #348]	; (800b9a8 <set+0x374>)
 800b84a:	ed93 7a01 	vldr	s14, [r3, #4]
 800b84e:	4b56      	ldr	r3, [pc, #344]	; (800b9a8 <set+0x374>)
 800b850:	edd3 6a02 	vldr	s13, [r3, #8]
 800b854:	4b55      	ldr	r3, [pc, #340]	; (800b9ac <set+0x378>)
 800b856:	9300      	str	r3, [sp, #0]
 800b858:	4b55      	ldr	r3, [pc, #340]	; (800b9b0 <set+0x37c>)
 800b85a:	4a56      	ldr	r2, [pc, #344]	; (800b9b4 <set+0x380>)
 800b85c:	4956      	ldr	r1, [pc, #344]	; (800b9b8 <set+0x384>)
 800b85e:	4857      	ldr	r0, [pc, #348]	; (800b9bc <set+0x388>)
 800b860:	eef0 1a66 	vmov.f32	s3, s13
 800b864:	eeb0 1a47 	vmov.f32	s2, s14
 800b868:	eef0 0a67 	vmov.f32	s1, s15
 800b86c:	ed9f 0a41 	vldr	s0, [pc, #260]	; 800b974 <set+0x340>
 800b870:	f7f5 fbbc 	bl	8000fec <ABTInit>
	ABTEstimateInit(&x_data);
 800b874:	484d      	ldr	r0, [pc, #308]	; (800b9ac <set+0x378>)
 800b876:	f7f5 fbe6 	bl	8001046 <ABTEstimateInit>

	ABTInit(SAMPLE_TIME, fYPosGain[0], fYPosGain[1], fYPosGain[2], &fYEncData, &fYPos, &fYVel, &fYAcc, &y_data);
 800b87a:	4b51      	ldr	r3, [pc, #324]	; (800b9c0 <set+0x38c>)
 800b87c:	edd3 7a00 	vldr	s15, [r3]
 800b880:	4b4f      	ldr	r3, [pc, #316]	; (800b9c0 <set+0x38c>)
 800b882:	ed93 7a01 	vldr	s14, [r3, #4]
 800b886:	4b4e      	ldr	r3, [pc, #312]	; (800b9c0 <set+0x38c>)
 800b888:	edd3 6a02 	vldr	s13, [r3, #8]
 800b88c:	4b4d      	ldr	r3, [pc, #308]	; (800b9c4 <set+0x390>)
 800b88e:	9300      	str	r3, [sp, #0]
 800b890:	4b4d      	ldr	r3, [pc, #308]	; (800b9c8 <set+0x394>)
 800b892:	4a4e      	ldr	r2, [pc, #312]	; (800b9cc <set+0x398>)
 800b894:	494e      	ldr	r1, [pc, #312]	; (800b9d0 <set+0x39c>)
 800b896:	484f      	ldr	r0, [pc, #316]	; (800b9d4 <set+0x3a0>)
 800b898:	eef0 1a66 	vmov.f32	s3, s13
 800b89c:	eeb0 1a47 	vmov.f32	s2, s14
 800b8a0:	eef0 0a67 	vmov.f32	s1, s15
 800b8a4:	ed9f 0a33 	vldr	s0, [pc, #204]	; 800b974 <set+0x340>
 800b8a8:	f7f5 fba0 	bl	8000fec <ABTInit>
	ABTEstimateInit(&y_data);
 800b8ac:	4845      	ldr	r0, [pc, #276]	; (800b9c4 <set+0x390>)
 800b8ae:	f7f5 fbca 	bl	8001046 <ABTEstimateInit>

	// X, Y Encoder
	QEIInit(&htim1);
 800b8b2:	4849      	ldr	r0, [pc, #292]	; (800b9d8 <set+0x3a4>)
 800b8b4:	f7f6 f8aa 	bl	8001a0c <QEIInit>
	QEIInit(&htim4);
 800b8b8:	4848      	ldr	r0, [pc, #288]	; (800b9dc <set+0x3a8>)
 800b8ba:	f7f6 f8a7 	bl	8001a0c <QEIInit>
	QEISwap(QEI4, QEI_Swap);
 800b8be:	2101      	movs	r1, #1
 800b8c0:	2004      	movs	r0, #4
 800b8c2:	f7f6 fa09 	bl	8001cd8 <QEISwap>

	QEIWrite(QEI1, 500);
 800b8c6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b8ca:	2001      	movs	r0, #1
 800b8cc:	f7f6 f99c 	bl	8001c08 <QEIWrite>
	QEIWrite(QEI4, 500);
 800b8d0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b8d4:	2004      	movs	r0, #4
 800b8d6:	f7f6 f997 	bl	8001c08 <QEIWrite>

	PPInit(0, &fXPos, &fYPos, &fyaw, &pp);
 800b8da:	4b41      	ldr	r3, [pc, #260]	; (800b9e0 <set+0x3ac>)
 800b8dc:	9300      	str	r3, [sp, #0]
 800b8de:	4b41      	ldr	r3, [pc, #260]	; (800b9e4 <set+0x3b0>)
 800b8e0:	4a3b      	ldr	r2, [pc, #236]	; (800b9d0 <set+0x39c>)
 800b8e2:	4935      	ldr	r1, [pc, #212]	; (800b9b8 <set+0x384>)
 800b8e4:	2000      	movs	r0, #0
 800b8e6:	f7f9 ffff 	bl	80058e8 <PPInit>
	PP_PIDPathSet(1.0, 0.5, 0.5, &pp);
 800b8ea:	483d      	ldr	r0, [pc, #244]	; (800b9e0 <set+0x3ac>)
 800b8ec:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800b8f0:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800b8f4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b8f8:	f7fa f8c2 	bl	8005a80 <PP_PIDPathSet>
	PP_PIDEndSet(0.5, 0.1, 0.7, &pp);
 800b8fc:	4838      	ldr	r0, [pc, #224]	; (800b9e0 <set+0x3ac>)
 800b8fe:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 800b9e8 <set+0x3b4>
 800b902:	eddf 0a12 	vldr	s1, [pc, #72]	; 800b94c <set+0x318>
 800b906:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800b90a:	f7fa f942 	bl	8005b92 <PP_PIDEndSet>
	PP_PIDZSet(0.5, 0.05, 0.2, 5.5, &pp);
 800b90e:	4834      	ldr	r0, [pc, #208]	; (800b9e0 <set+0x3ac>)
 800b910:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 800b914:	ed9f 1a35 	vldr	s2, [pc, #212]	; 800b9ec <set+0x3b8>
 800b918:	eddf 0a35 	vldr	s1, [pc, #212]	; 800b9f0 <set+0x3bc>
 800b91c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800b920:	f7fa f8fe 	bl	8005b20 <PP_PIDZSet>
	PP_SetCrv_Points(10, &pp);
 800b924:	492e      	ldr	r1, [pc, #184]	; (800b9e0 <set+0x3ac>)
 800b926:	200a      	movs	r0, #10
 800b928:	f7fa f94f 	bl	8005bca <PP_SetCrv_Points>

	R6091U_Init(&imu, &huart5);
 800b92c:	4931      	ldr	r1, [pc, #196]	; (800b9f4 <set+0x3c0>)
 800b92e:	4832      	ldr	r0, [pc, #200]	; (800b9f8 <set+0x3c4>)
 800b930:	f7fd fc78 	bl	8009224 <R6091U_Init>
}
 800b934:	bf00      	nop
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	bf00      	nop
 800b93c:	20006024 	.word	0x20006024
 800b940:	20006b48 	.word	0x20006b48
 800b944:	20009dc0 	.word	0x20009dc0
 800b948:	20005f20 	.word	0x20005f20
 800b94c:	3dcccccd 	.word	0x3dcccccd
 800b950:	3824bb36 	.word	0x3824bb36
 800b954:	4708b800 	.word	0x4708b800
 800b958:	20006aa0 	.word	0x20006aa0
 800b95c:	3e020c4a 	.word	0x3e020c4a
 800b960:	20007478 	.word	0x20007478
 800b964:	200078a8 	.word	0x200078a8
 800b968:	200078a4 	.word	0x200078a4
 800b96c:	200077b0 	.word	0x200077b0
 800b970:	20000008 	.word	0x20000008
 800b974:	3ca3d70a 	.word	0x3ca3d70a
 800b978:	20006998 	.word	0x20006998
 800b97c:	20006a80 	.word	0x20006a80
 800b980:	20009b24 	.word	0x20009b24
 800b984:	20000040 	.word	0x20000040
 800b988:	20007324 	.word	0x20007324
 800b98c:	2000681c 	.word	0x2000681c
 800b990:	20009034 	.word	0x20009034
 800b994:	20000024 	.word	0x20000024
 800b998:	20009b2c 	.word	0x20009b2c
 800b99c:	200064fc 	.word	0x200064fc
 800b9a0:	20006818 	.word	0x20006818
 800b9a4:	2000005c 	.word	0x2000005c
 800b9a8:	20000078 	.word	0x20000078
 800b9ac:	2000a090 	.word	0x2000a090
 800b9b0:	200065c4 	.word	0x200065c4
 800b9b4:	20009694 	.word	0x20009694
 800b9b8:	20009748 	.word	0x20009748
 800b9bc:	2000688c 	.word	0x2000688c
 800b9c0:	20000084 	.word	0x20000084
 800b9c4:	200077b8 	.word	0x200077b8
 800b9c8:	20007170 	.word	0x20007170
 800b9cc:	20006ba0 	.word	0x20006ba0
 800b9d0:	20009688 	.word	0x20009688
 800b9d4:	2000a0b8 	.word	0x2000a0b8
 800b9d8:	20005f60 	.word	0x20005f60
 800b9dc:	20005b50 	.word	0x20005b50
 800b9e0:	20006c28 	.word	0x20006c28
 800b9e4:	20009710 	.word	0x20009710
 800b9e8:	3f333333 	.word	0x3f333333
 800b9ec:	3e4ccccd 	.word	0x3e4ccccd
 800b9f0:	3d4ccccd 	.word	0x3d4ccccd
 800b9f4:	20005d58 	.word	0x20005d58
 800b9f8:	20006a10 	.word	0x20006a10
 800b9fc:	00000000 	.word	0x00000000

0800ba00 <CalcPoleDist>:

void CalcPoleDist(ENCPole_t* pole)
{
 800ba00:	b5b0      	push	{r4, r5, r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 6; i++)
 800ba08:	2300      	movs	r3, #0
 800ba0a:	60fb      	str	r3, [r7, #12]
 800ba0c:	e097      	b.n	800bb3e <CalcPoleDist+0x13e>
	{
		pole_dist_x[i] -= pp.real_x;
 800ba0e:	4a54      	ldr	r2, [pc, #336]	; (800bb60 <CalcPoleDist+0x160>)
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	009b      	lsls	r3, r3, #2
 800ba14:	4413      	add	r3, r2
 800ba16:	ed93 7a00 	vldr	s14, [r3]
 800ba1a:	4b52      	ldr	r3, [pc, #328]	; (800bb64 <CalcPoleDist+0x164>)
 800ba1c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800ba20:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba24:	4a4e      	ldr	r2, [pc, #312]	; (800bb60 <CalcPoleDist+0x160>)
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	4413      	add	r3, r2
 800ba2c:	edc3 7a00 	vstr	s15, [r3]
		pole_dist_y[i] -= pp.real_y;
 800ba30:	4a4d      	ldr	r2, [pc, #308]	; (800bb68 <CalcPoleDist+0x168>)
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	009b      	lsls	r3, r3, #2
 800ba36:	4413      	add	r3, r2
 800ba38:	ed93 7a00 	vldr	s14, [r3]
 800ba3c:	4b49      	ldr	r3, [pc, #292]	; (800bb64 <CalcPoleDist+0x164>)
 800ba3e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800ba42:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba46:	4a48      	ldr	r2, [pc, #288]	; (800bb68 <CalcPoleDist+0x168>)
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	4413      	add	r3, r2
 800ba4e:	edc3 7a00 	vstr	s15, [r3]

		pole->distance[i] = sqrt((pow(pole_dist_x[i], 2)) + (pow(pole_dist_y[i], 2)));
 800ba52:	4a43      	ldr	r2, [pc, #268]	; (800bb60 <CalcPoleDist+0x160>)
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	4413      	add	r3, r2
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7f4 fd73 	bl	8000548 <__aeabi_f2d>
 800ba62:	4602      	mov	r2, r0
 800ba64:	460b      	mov	r3, r1
 800ba66:	ed9f 1b3a 	vldr	d1, [pc, #232]	; 800bb50 <CalcPoleDist+0x150>
 800ba6a:	ec43 2b10 	vmov	d0, r2, r3
 800ba6e:	f012 f8ab 	bl	801dbc8 <pow>
 800ba72:	ec55 4b10 	vmov	r4, r5, d0
 800ba76:	4a3c      	ldr	r2, [pc, #240]	; (800bb68 <CalcPoleDist+0x168>)
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	009b      	lsls	r3, r3, #2
 800ba7c:	4413      	add	r3, r2
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7f4 fd61 	bl	8000548 <__aeabi_f2d>
 800ba86:	4602      	mov	r2, r0
 800ba88:	460b      	mov	r3, r1
 800ba8a:	ed9f 1b31 	vldr	d1, [pc, #196]	; 800bb50 <CalcPoleDist+0x150>
 800ba8e:	ec43 2b10 	vmov	d0, r2, r3
 800ba92:	f012 f899 	bl	801dbc8 <pow>
 800ba96:	ec53 2b10 	vmov	r2, r3, d0
 800ba9a:	4620      	mov	r0, r4
 800ba9c:	4629      	mov	r1, r5
 800ba9e:	f7f4 fbf5 	bl	800028c <__adddf3>
 800baa2:	4602      	mov	r2, r0
 800baa4:	460b      	mov	r3, r1
 800baa6:	ec43 2b17 	vmov	d7, r2, r3
 800baaa:	eeb0 0a47 	vmov.f32	s0, s14
 800baae:	eef0 0a67 	vmov.f32	s1, s15
 800bab2:	f012 f937 	bl	801dd24 <sqrt>
 800bab6:	ec53 2b10 	vmov	r2, r3, d0
 800baba:	4610      	mov	r0, r2
 800babc:	4619      	mov	r1, r3
 800babe:	f7f5 f893 	bl	8000be8 <__aeabi_d2f>
 800bac2:	4601      	mov	r1, r0
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	009b      	lsls	r3, r3, #2
 800baca:	4413      	add	r3, r2
 800bacc:	6019      	str	r1, [r3, #0]
		pole->angle[i] = atan(pole_dist_y[i] / pole_dist_x[i]) * 180 / M_PI;
 800bace:	4a26      	ldr	r2, [pc, #152]	; (800bb68 <CalcPoleDist+0x168>)
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	009b      	lsls	r3, r3, #2
 800bad4:	4413      	add	r3, r2
 800bad6:	ed93 7a00 	vldr	s14, [r3]
 800bada:	4a21      	ldr	r2, [pc, #132]	; (800bb60 <CalcPoleDist+0x160>)
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	009b      	lsls	r3, r3, #2
 800bae0:	4413      	add	r3, r2
 800bae2:	edd3 7a00 	vldr	s15, [r3]
 800bae6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800baea:	ee16 0a90 	vmov	r0, s13
 800baee:	f7f4 fd2b 	bl	8000548 <__aeabi_f2d>
 800baf2:	4602      	mov	r2, r0
 800baf4:	460b      	mov	r3, r1
 800baf6:	ec43 2b10 	vmov	d0, r2, r3
 800bafa:	f011 fd5d 	bl	801d5b8 <atan>
 800bafe:	ec51 0b10 	vmov	r0, r1, d0
 800bb02:	f04f 0200 	mov.w	r2, #0
 800bb06:	4b19      	ldr	r3, [pc, #100]	; (800bb6c <CalcPoleDist+0x16c>)
 800bb08:	f7f4 fd76 	bl	80005f8 <__aeabi_dmul>
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	460b      	mov	r3, r1
 800bb10:	4610      	mov	r0, r2
 800bb12:	4619      	mov	r1, r3
 800bb14:	a310      	add	r3, pc, #64	; (adr r3, 800bb58 <CalcPoleDist+0x158>)
 800bb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1a:	f7f4 fe97 	bl	800084c <__aeabi_ddiv>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	460b      	mov	r3, r1
 800bb22:	4610      	mov	r0, r2
 800bb24:	4619      	mov	r1, r3
 800bb26:	f7f5 f85f 	bl	8000be8 <__aeabi_d2f>
 800bb2a:	4601      	mov	r1, r0
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	3306      	adds	r3, #6
 800bb32:	009b      	lsls	r3, r3, #2
 800bb34:	4413      	add	r3, r2
 800bb36:	6019      	str	r1, [r3, #0]
	for(int i = 0; i < 6; i++)
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	60fb      	str	r3, [r7, #12]
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2b05      	cmp	r3, #5
 800bb42:	f77f af64 	ble.w	800ba0e <CalcPoleDist+0xe>
	}
}
 800bb46:	bf00      	nop
 800bb48:	bf00      	nop
 800bb4a:	3710      	adds	r7, #16
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bdb0      	pop	{r4, r5, r7, pc}
 800bb50:	00000000 	.word	0x00000000
 800bb54:	40000000 	.word	0x40000000
 800bb58:	54442d18 	.word	0x54442d18
 800bb5c:	400921fb 	.word	0x400921fb
 800bb60:	20000090 	.word	0x20000090
 800bb64:	20006c28 	.word	0x20006c28
 800bb68:	200000a8 	.word	0x200000a8
 800bb6c:	40668000 	.word	0x40668000

0800bb70 <RobotStart>:

void RobotStart()
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	af00      	add	r7, sp, #0
	// Tune PID
	tune_p = 0;
 800bb74:	4b3f      	ldr	r3, [pc, #252]	; (800bc74 <RobotStart+0x104>)
 800bb76:	2200      	movs	r2, #0
 800bb78:	601a      	str	r2, [r3, #0]
	tune_i = 0;
 800bb7a:	4b3f      	ldr	r3, [pc, #252]	; (800bc78 <RobotStart+0x108>)
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	601a      	str	r2, [r3, #0]
	tune_d = 0;
 800bb80:	4b3e      	ldr	r3, [pc, #248]	; (800bc7c <RobotStart+0x10c>)
 800bb82:	2200      	movs	r2, #0
 800bb84:	601a      	str	r2, [r3, #0]

	AP = 1.5;
 800bb86:	4b3e      	ldr	r3, [pc, #248]	; (800bc80 <RobotStart+0x110>)
 800bb88:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800bb8c:	601a      	str	r2, [r3, #0]
	AI = 1.5;
 800bb8e:	4b3d      	ldr	r3, [pc, #244]	; (800bc84 <RobotStart+0x114>)
 800bb90:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800bb94:	601a      	str	r2, [r3, #0]
	AD = 0.0;
 800bb96:	4b3c      	ldr	r3, [pc, #240]	; (800bc88 <RobotStart+0x118>)
 800bb98:	f04f 0200 	mov.w	r2, #0
 800bb9c:	601a      	str	r2, [r3, #0]

	BP = 1.0;
 800bb9e:	4b3b      	ldr	r3, [pc, #236]	; (800bc8c <RobotStart+0x11c>)
 800bba0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800bba4:	601a      	str	r2, [r3, #0]
	BI = 1.5;
 800bba6:	4b3a      	ldr	r3, [pc, #232]	; (800bc90 <RobotStart+0x120>)
 800bba8:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800bbac:	601a      	str	r2, [r3, #0]
	BD = 0.0;
 800bbae:	4b39      	ldr	r3, [pc, #228]	; (800bc94 <RobotStart+0x124>)
 800bbb0:	f04f 0200 	mov.w	r2, #0
 800bbb4:	601a      	str	r2, [r3, #0]

	CP = 1.0;
 800bbb6:	4b38      	ldr	r3, [pc, #224]	; (800bc98 <RobotStart+0x128>)
 800bbb8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800bbbc:	601a      	str	r2, [r3, #0]
	CI = 1.5;
 800bbbe:	4b37      	ldr	r3, [pc, #220]	; (800bc9c <RobotStart+0x12c>)
 800bbc0:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800bbc4:	601a      	str	r2, [r3, #0]
	CD = 0.0;
 800bbc6:	4b36      	ldr	r3, [pc, #216]	; (800bca0 <RobotStart+0x130>)
 800bbc8:	f04f 0200 	mov.w	r2, #0
 800bbcc:	601a      	str	r2, [r3, #0]

	DP = 1.0;
 800bbce:	4b35      	ldr	r3, [pc, #212]	; (800bca4 <RobotStart+0x134>)
 800bbd0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800bbd4:	601a      	str	r2, [r3, #0]
	DI = 1.5;
 800bbd6:	4b34      	ldr	r3, [pc, #208]	; (800bca8 <RobotStart+0x138>)
 800bbd8:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800bbdc:	601a      	str	r2, [r3, #0]
	DD = 0.0;
 800bbde:	4b33      	ldr	r3, [pc, #204]	; (800bcac <RobotStart+0x13c>)
 800bbe0:	f04f 0200 	mov.w	r2, #0
 800bbe4:	601a      	str	r2, [r3, #0]

	wheel = 1;
 800bbe6:	4b32      	ldr	r3, [pc, #200]	; (800bcb0 <RobotStart+0x140>)
 800bbe8:	2201      	movs	r2, #1
 800bbea:	601a      	str	r2, [r3, #0]
	vesc_pulse = 1.4;
 800bbec:	4b31      	ldr	r3, [pc, #196]	; (800bcb4 <RobotStart+0x144>)
 800bbee:	4a32      	ldr	r2, [pc, #200]	; (800bcb8 <RobotStart+0x148>)
 800bbf0:	601a      	str	r2, [r3, #0]
	vesc_move_speed = 2;
 800bbf2:	4b32      	ldr	r3, [pc, #200]	; (800bcbc <RobotStart+0x14c>)
 800bbf4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800bbf8:	601a      	str	r2, [r3, #0]
	vesc_pdc = 0.5;
 800bbfa:	4b31      	ldr	r3, [pc, #196]	; (800bcc0 <RobotStart+0x150>)
 800bbfc:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800bc00:	601a      	str	r2, [r3, #0]

	mode = NORMAL;
 800bc02:	4b30      	ldr	r3, [pc, #192]	; (800bcc4 <RobotStart+0x154>)
 800bc04:	2200      	movs	r2, #0
 800bc06:	601a      	str	r2, [r3, #0]

	// Servo Init
	pick_ori;
 800bc08:	f240 21ee 	movw	r1, #750	; 0x2ee
 800bc0c:	482e      	ldr	r0, [pc, #184]	; (800bcc8 <RobotStart+0x158>)
 800bc0e:	f7fe fe97 	bl	800a940 <ServoSetPulse>
	load_ori;
 800bc12:	f44f 7116 	mov.w	r1, #600	; 0x258
 800bc16:	482d      	ldr	r0, [pc, #180]	; (800bccc <RobotStart+0x15c>)
 800bc18:	f7fe fe92 	bl	800a940 <ServoSetPulse>
	yaw_ori;
 800bc1c:	f44f 7161 	mov.w	r1, #900	; 0x384
 800bc20:	482b      	ldr	r0, [pc, #172]	; (800bcd0 <RobotStart+0x160>)
 800bc22:	f7fe fe8d 	bl	800a940 <ServoSetPulse>
	pitch_ori;
 800bc26:	f240 610e 	movw	r1, #1550	; 0x60e
 800bc2a:	482a      	ldr	r0, [pc, #168]	; (800bcd4 <RobotStart+0x164>)
 800bc2c:	f7fe fe88 	bl	800a940 <ServoSetPulse>

	// Cylinder Init
	retract;
 800bc30:	4a29      	ldr	r2, [pc, #164]	; (800bcd8 <RobotStart+0x168>)
 800bc32:	7e13      	ldrb	r3, [r2, #24]
 800bc34:	f36f 0300 	bfc	r3, #0, #1
 800bc38:	7613      	strb	r3, [r2, #24]
	enable_shot;
 800bc3a:	4a27      	ldr	r2, [pc, #156]	; (800bcd8 <RobotStart+0x168>)
 800bc3c:	7e13      	ldrb	r3, [r2, #24]
 800bc3e:	f36f 0341 	bfc	r3, #1, #1
 800bc42:	7613      	strb	r3, [r2, #24]
	stop_pick;
 800bc44:	4b25      	ldr	r3, [pc, #148]	; (800bcdc <RobotStart+0x16c>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	635a      	str	r2, [r3, #52]	; 0x34

	pick_delay = 500;
 800bc4c:	4b24      	ldr	r3, [pc, #144]	; (800bce0 <RobotStart+0x170>)
 800bc4e:	4a25      	ldr	r2, [pc, #148]	; (800bce4 <RobotStart+0x174>)
 800bc50:	601a      	str	r2, [r3, #0]
	load_delay = 1000;
 800bc52:	4b25      	ldr	r3, [pc, #148]	; (800bce8 <RobotStart+0x178>)
 800bc54:	4a25      	ldr	r2, [pc, #148]	; (800bcec <RobotStart+0x17c>)
 800bc56:	601a      	str	r2, [r3, #0]
	retract_delay = 500;
 800bc58:	4b25      	ldr	r3, [pc, #148]	; (800bcf0 <RobotStart+0x180>)
 800bc5a:	4a22      	ldr	r2, [pc, #136]	; (800bce4 <RobotStart+0x174>)
 800bc5c:	601a      	str	r2, [r3, #0]
	enable_delay = 500;
 800bc5e:	4b25      	ldr	r3, [pc, #148]	; (800bcf4 <RobotStart+0x184>)
 800bc60:	4a20      	ldr	r2, [pc, #128]	; (800bce4 <RobotStart+0x174>)
 800bc62:	601a      	str	r2, [r3, #0]

	ps4_yaw = 750;
 800bc64:	4b24      	ldr	r3, [pc, #144]	; (800bcf8 <RobotStart+0x188>)
 800bc66:	4a25      	ldr	r2, [pc, #148]	; (800bcfc <RobotStart+0x18c>)
 800bc68:	601a      	str	r2, [r3, #0]
	ps4_pitch = 1550;
 800bc6a:	4b25      	ldr	r3, [pc, #148]	; (800bd00 <RobotStart+0x190>)
 800bc6c:	4a25      	ldr	r2, [pc, #148]	; (800bd04 <RobotStart+0x194>)
 800bc6e:	601a      	str	r2, [r3, #0]

}
 800bc70:	bf00      	nop
 800bc72:	bd80      	pop	{r7, pc}
 800bc74:	20007320 	.word	0x20007320
 800bc78:	20007174 	.word	0x20007174
 800bc7c:	2000968c 	.word	0x2000968c
 800bc80:	2000a0b0 	.word	0x2000a0b0
 800bc84:	2000716c 	.word	0x2000716c
 800bc88:	2000a08c 	.word	0x2000a08c
 800bc8c:	20007560 	.word	0x20007560
 800bc90:	20009198 	.word	0x20009198
 800bc94:	20007168 	.word	0x20007168
 800bc98:	200094f0 	.word	0x200094f0
 800bc9c:	20009684 	.word	0x20009684
 800bca0:	200064f8 	.word	0x200064f8
 800bca4:	20009b90 	.word	0x20009b90
 800bca8:	20006a24 	.word	0x20006a24
 800bcac:	2000986c 	.word	0x2000986c
 800bcb0:	200064f4 	.word	0x200064f4
 800bcb4:	2000a054 	.word	0x2000a054
 800bcb8:	3fb33333 	.word	0x3fb33333
 800bcbc:	200092e0 	.word	0x200092e0
 800bcc0:	20007754 	.word	0x20007754
 800bcc4:	2000903c 	.word	0x2000903c
 800bcc8:	200099a0 	.word	0x200099a0
 800bccc:	2000a11c 	.word	0x2000a11c
 800bcd0:	20007714 	.word	0x20007714
 800bcd4:	20009ca0 	.word	0x20009ca0
 800bcd8:	20009424 	.word	0x20009424
 800bcdc:	20005cd4 	.word	0x20005cd4
 800bce0:	200072f4 	.word	0x200072f4
 800bce4:	43fa0000 	.word	0x43fa0000
 800bce8:	20009734 	.word	0x20009734
 800bcec:	447a0000 	.word	0x447a0000
 800bcf0:	2000770c 	.word	0x2000770c
 800bcf4:	20009d50 	.word	0x20009d50
 800bcf8:	20009b88 	.word	0x20009b88
 800bcfc:	443b8000 	.word	0x443b8000
 800bd00:	20008f7c 	.word	0x20008f7c
 800bd04:	44c1c000 	.word	0x44c1c000

0800bd08 <NormalControl>:

void NormalControl()
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	af00      	add	r7, sp, #0
	led3 = 0;
 800bd0c:	4ac3      	ldr	r2, [pc, #780]	; (800c01c <NormalControl+0x314>)
 800bd0e:	7853      	ldrb	r3, [r2, #1]
 800bd10:	f36f 13c7 	bfc	r3, #7, #1
 800bd14:	7053      	strb	r3, [r2, #1]

	if(ps4.button == L1)
 800bd16:	4bc2      	ldr	r3, [pc, #776]	; (800c020 <NormalControl+0x318>)
 800bd18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd1e:	d123      	bne.n	800bd68 <NormalControl+0x60>
	{
		while(ps4.button == L1);
 800bd20:	bf00      	nop
 800bd22:	4bbf      	ldr	r3, [pc, #764]	; (800c020 <NormalControl+0x318>)
 800bd24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd2a:	d0fa      	beq.n	800bd22 <NormalControl+0x1a>
		vesc_move_speed++;
 800bd2c:	4bbd      	ldr	r3, [pc, #756]	; (800c024 <NormalControl+0x31c>)
 800bd2e:	edd3 7a00 	vldr	s15, [r3]
 800bd32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd36:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bd3a:	4bba      	ldr	r3, [pc, #744]	; (800c024 <NormalControl+0x31c>)
 800bd3c:	edc3 7a00 	vstr	s15, [r3]
		if(vesc_move_speed >= 5) vesc_move_speed = 5;
 800bd40:	4bb8      	ldr	r3, [pc, #736]	; (800c024 <NormalControl+0x31c>)
 800bd42:	edd3 7a00 	vldr	s15, [r3]
 800bd46:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800bd4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bd4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd52:	db02      	blt.n	800bd5a <NormalControl+0x52>
 800bd54:	4bb3      	ldr	r3, [pc, #716]	; (800c024 <NormalControl+0x31c>)
 800bd56:	4ab4      	ldr	r2, [pc, #720]	; (800c028 <NormalControl+0x320>)
 800bd58:	601a      	str	r2, [r3, #0]
		setSpeedMODN(vesc_move_speed);
 800bd5a:	4bb2      	ldr	r3, [pc, #712]	; (800c024 <NormalControl+0x31c>)
 800bd5c:	edd3 7a00 	vldr	s15, [r3]
 800bd60:	eeb0 0a67 	vmov.f32	s0, s15
 800bd64:	f7f9 fb0a 	bl	800537c <setSpeedMODN>
	}

	if(ps4.button == R1)
 800bd68:	4bad      	ldr	r3, [pc, #692]	; (800c020 <NormalControl+0x318>)
 800bd6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd70:	d122      	bne.n	800bdb8 <NormalControl+0xb0>
	{
		while(ps4.button == R1);
 800bd72:	bf00      	nop
 800bd74:	4baa      	ldr	r3, [pc, #680]	; (800c020 <NormalControl+0x318>)
 800bd76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd7c:	d0fa      	beq.n	800bd74 <NormalControl+0x6c>
		vesc_move_speed--;
 800bd7e:	4ba9      	ldr	r3, [pc, #676]	; (800c024 <NormalControl+0x31c>)
 800bd80:	edd3 7a00 	vldr	s15, [r3]
 800bd84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd8c:	4ba5      	ldr	r3, [pc, #660]	; (800c024 <NormalControl+0x31c>)
 800bd8e:	edc3 7a00 	vstr	s15, [r3]
		if(vesc_move_speed <= 0) vesc_move_speed = 0;
 800bd92:	4ba4      	ldr	r3, [pc, #656]	; (800c024 <NormalControl+0x31c>)
 800bd94:	edd3 7a00 	vldr	s15, [r3]
 800bd98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bd9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bda0:	d803      	bhi.n	800bdaa <NormalControl+0xa2>
 800bda2:	4ba0      	ldr	r3, [pc, #640]	; (800c024 <NormalControl+0x31c>)
 800bda4:	f04f 0200 	mov.w	r2, #0
 800bda8:	601a      	str	r2, [r3, #0]
		setSpeedMODN(vesc_move_speed);
 800bdaa:	4b9e      	ldr	r3, [pc, #632]	; (800c024 <NormalControl+0x31c>)
 800bdac:	edd3 7a00 	vldr	s15, [r3]
 800bdb0:	eeb0 0a67 	vmov.f32	s0, s15
 800bdb4:	f7f9 fae2 	bl	800537c <setSpeedMODN>
	}

	// Pick
	if(ps4.button == CIRCLE)
 800bdb8:	4b99      	ldr	r3, [pc, #612]	; (800c020 <NormalControl+0x318>)
 800bdba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdc0:	d119      	bne.n	800bdf6 <NormalControl+0xee>
	{
		while(ps4.button == CIRCLE);
 800bdc2:	bf00      	nop
 800bdc4:	4b96      	ldr	r3, [pc, #600]	; (800c020 <NormalControl+0x318>)
 800bdc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdcc:	d0fa      	beq.n	800bdc4 <NormalControl+0xbc>

		servo_pitch_reload;
 800bdce:	f240 610e 	movw	r1, #1550	; 0x60e
 800bdd2:	4896      	ldr	r0, [pc, #600]	; (800c02c <NormalControl+0x324>)
 800bdd4:	f7fe fdb4 	bl	800a940 <ServoSetPulse>
		servo_load_down;
 800bdd8:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800bddc:	4894      	ldr	r0, [pc, #592]	; (800c030 <NormalControl+0x328>)
 800bdde:	f7fe fdaf 	bl	800a940 <ServoSetPulse>

		servo_pick_open;
 800bde2:	f240 21ee 	movw	r1, #750	; 0x2ee
 800bde6:	4893      	ldr	r0, [pc, #588]	; (800c034 <NormalControl+0x32c>)
 800bde8:	f7fe fdaa 	bl	800a940 <ServoSetPulse>

		start_pick;
 800bdec:	4b92      	ldr	r3, [pc, #584]	; (800c038 <NormalControl+0x330>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800bdf4:	635a      	str	r2, [r3, #52]	; 0x34
	}

	// Load
	if(ps4.button == SQUARE)
 800bdf6:	4b8a      	ldr	r3, [pc, #552]	; (800c020 <NormalControl+0x318>)
 800bdf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bdfe:	f040 8089 	bne.w	800bf14 <NormalControl+0x20c>
	{
		while(ps4.button == SQUARE)
 800be02:	e004      	b.n	800be0e <NormalControl+0x106>
		{
			servo_pick_close;
 800be04:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800be08:	488a      	ldr	r0, [pc, #552]	; (800c034 <NormalControl+0x32c>)
 800be0a:	f7fe fd99 	bl	800a940 <ServoSetPulse>
		while(ps4.button == SQUARE)
 800be0e:	4b84      	ldr	r3, [pc, #528]	; (800c020 <NormalControl+0x318>)
 800be10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be16:	d0f5      	beq.n	800be04 <NormalControl+0xfc>
		}

		stop_pick;
 800be18:	4b87      	ldr	r3, [pc, #540]	; (800c038 <NormalControl+0x330>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	2200      	movs	r2, #0
 800be1e:	635a      	str	r2, [r3, #52]	; 0x34
		osDelay(50);
 800be20:	2032      	movs	r0, #50	; 0x32
 800be22:	f009 fbdf 	bl	80155e4 <osDelay>

		pitch_ori;
 800be26:	f240 610e 	movw	r1, #1550	; 0x60e
 800be2a:	4880      	ldr	r0, [pc, #512]	; (800c02c <NormalControl+0x324>)
 800be2c:	f7fe fd88 	bl	800a940 <ServoSetPulse>

		servo_load_up1;
 800be30:	f640 0148 	movw	r1, #2120	; 0x848
 800be34:	487e      	ldr	r0, [pc, #504]	; (800c030 <NormalControl+0x328>)
 800be36:	f7fe fd83 	bl	800a940 <ServoSetPulse>
		osDelay(240);
 800be3a:	20f0      	movs	r0, #240	; 0xf0
 800be3c:	f009 fbd2 	bl	80155e4 <osDelay>

		servo_load_up2;
 800be40:	f240 71bc 	movw	r1, #1980	; 0x7bc
 800be44:	487a      	ldr	r0, [pc, #488]	; (800c030 <NormalControl+0x328>)
 800be46:	f7fe fd7b 	bl	800a940 <ServoSetPulse>
		osDelay(240);
 800be4a:	20f0      	movs	r0, #240	; 0xf0
 800be4c:	f009 fbca 	bl	80155e4 <osDelay>

		servo_load_up3;
 800be50:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 800be54:	4876      	ldr	r0, [pc, #472]	; (800c030 <NormalControl+0x328>)
 800be56:	f7fe fd73 	bl	800a940 <ServoSetPulse>
		osDelay(240);
 800be5a:	20f0      	movs	r0, #240	; 0xf0
 800be5c:	f009 fbc2 	bl	80155e4 <osDelay>

		servo_load_up4;
 800be60:	f240 6154 	movw	r1, #1620	; 0x654
 800be64:	4872      	ldr	r0, [pc, #456]	; (800c030 <NormalControl+0x328>)
 800be66:	f7fe fd6b 	bl	800a940 <ServoSetPulse>
		osDelay(240);
 800be6a:	20f0      	movs	r0, #240	; 0xf0
 800be6c:	f009 fbba 	bl	80155e4 <osDelay>

		servo_load_up5;
 800be70:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800be74:	486e      	ldr	r0, [pc, #440]	; (800c030 <NormalControl+0x328>)
 800be76:	f7fe fd63 	bl	800a940 <ServoSetPulse>
		osDelay(240);
 800be7a:	20f0      	movs	r0, #240	; 0xf0
 800be7c:	f009 fbb2 	bl	80155e4 <osDelay>

		servo_load_up6;
 800be80:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800be84:	486a      	ldr	r0, [pc, #424]	; (800c030 <NormalControl+0x328>)
 800be86:	f7fe fd5b 	bl	800a940 <ServoSetPulse>
		osDelay(240);
 800be8a:	20f0      	movs	r0, #240	; 0xf0
 800be8c:	f009 fbaa 	bl	80155e4 <osDelay>

		servo_load_up7;
 800be90:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800be94:	4866      	ldr	r0, [pc, #408]	; (800c030 <NormalControl+0x328>)
 800be96:	f7fe fd53 	bl	800a940 <ServoSetPulse>
		osDelay(240);
 800be9a:	20f0      	movs	r0, #240	; 0xf0
 800be9c:	f009 fba2 	bl	80155e4 <osDelay>

		servo_load_up8;
 800bea0:	f44f 7157 	mov.w	r1, #860	; 0x35c
 800bea4:	4862      	ldr	r0, [pc, #392]	; (800c030 <NormalControl+0x328>)
 800bea6:	f7fe fd4b 	bl	800a940 <ServoSetPulse>
		osDelay(240);
 800beaa:	20f0      	movs	r0, #240	; 0xf0
 800beac:	f009 fb9a 	bl	80155e4 <osDelay>

		servo_load_up9;
 800beb0:	f44f 712a 	mov.w	r1, #680	; 0x2a8
 800beb4:	485e      	ldr	r0, [pc, #376]	; (800c030 <NormalControl+0x328>)
 800beb6:	f7fe fd43 	bl	800a940 <ServoSetPulse>
		osDelay(240);
 800beba:	20f0      	movs	r0, #240	; 0xf0
 800bebc:	f009 fb92 	bl	80155e4 <osDelay>

		servo_load_up10;
 800bec0:	f44f 7116 	mov.w	r1, #600	; 0x258
 800bec4:	485a      	ldr	r0, [pc, #360]	; (800c030 <NormalControl+0x328>)
 800bec6:	f7fe fd3b 	bl	800a940 <ServoSetPulse>

		osDelay(200);
 800beca:	20c8      	movs	r0, #200	; 0xc8
 800becc:	f009 fb8a 	bl	80155e4 <osDelay>
		servo_pitch_shot;
 800bed0:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800bed4:	4855      	ldr	r0, [pc, #340]	; (800c02c <NormalControl+0x324>)
 800bed6:	f7fe fd33 	bl	800a940 <ServoSetPulse>

		osDelay(500);
 800beda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bede:	f009 fb81 	bl	80155e4 <osDelay>
		servo_pick_hold;
 800bee2:	f44f 7116 	mov.w	r1, #600	; 0x258
 800bee6:	4853      	ldr	r0, [pc, #332]	; (800c034 <NormalControl+0x32c>)
 800bee8:	f7fe fd2a 	bl	800a940 <ServoSetPulse>

		osDelay(200);
 800beec:	20c8      	movs	r0, #200	; 0xc8
 800beee:	f009 fb79 	bl	80155e4 <osDelay>

		enable_shot;
 800bef2:	4a52      	ldr	r2, [pc, #328]	; (800c03c <NormalControl+0x334>)
 800bef4:	7e13      	ldrb	r3, [r2, #24]
 800bef6:	f36f 0341 	bfc	r3, #1, #1
 800befa:	7613      	strb	r3, [r2, #24]
		osDelay(500);
 800befc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bf00:	f009 fb70 	bl	80155e4 <osDelay>

		disable_shot;
 800bf04:	4a4d      	ldr	r2, [pc, #308]	; (800c03c <NormalControl+0x334>)
 800bf06:	7e13      	ldrb	r3, [r2, #24]
 800bf08:	f043 0302 	orr.w	r3, r3, #2
 800bf0c:	7613      	strb	r3, [r2, #24]
		flywheel = 1;
 800bf0e:	4b4c      	ldr	r3, [pc, #304]	; (800c040 <NormalControl+0x338>)
 800bf10:	2201      	movs	r2, #1
 800bf12:	601a      	str	r2, [r3, #0]

	}

	// Shot
	if(ps4.button == TRIANGLE)
 800bf14:	4b42      	ldr	r3, [pc, #264]	; (800c020 <NormalControl+0x318>)
 800bf16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf1c:	d136      	bne.n	800bf8c <NormalControl+0x284>
	{
		while(ps4.button == TRIANGLE);
 800bf1e:	bf00      	nop
 800bf20:	4b3f      	ldr	r3, [pc, #252]	; (800c020 <NormalControl+0x318>)
 800bf22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf28:	d0fa      	beq.n	800bf20 <NormalControl+0x218>
		shot;
 800bf2a:	4a44      	ldr	r2, [pc, #272]	; (800c03c <NormalControl+0x334>)
 800bf2c:	7e13      	ldrb	r3, [r2, #24]
 800bf2e:	f043 0301 	orr.w	r3, r3, #1
 800bf32:	7613      	strb	r3, [r2, #24]
		osDelay(500);
 800bf34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bf38:	f009 fb54 	bl	80155e4 <osDelay>

		servo_load_retract;
 800bf3c:	f240 21ee 	movw	r1, #750	; 0x2ee
 800bf40:	483b      	ldr	r0, [pc, #236]	; (800c030 <NormalControl+0x328>)
 800bf42:	f7fe fcfd 	bl	800a940 <ServoSetPulse>
		osDelay(500);
 800bf46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bf4a:	f009 fb4b 	bl	80155e4 <osDelay>

		retract;
 800bf4e:	4a3b      	ldr	r2, [pc, #236]	; (800c03c <NormalControl+0x334>)
 800bf50:	7e13      	ldrb	r3, [r2, #24]
 800bf52:	f36f 0300 	bfc	r3, #0, #1
 800bf56:	7613      	strb	r3, [r2, #24]
		osDelay(500);
 800bf58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bf5c:	f009 fb42 	bl	80155e4 <osDelay>

		servo_load_up10;
 800bf60:	f44f 7116 	mov.w	r1, #600	; 0x258
 800bf64:	4832      	ldr	r0, [pc, #200]	; (800c030 <NormalControl+0x328>)
 800bf66:	f7fe fceb 	bl	800a940 <ServoSetPulse>
		osDelay(150);
 800bf6a:	2096      	movs	r0, #150	; 0x96
 800bf6c:	f009 fb3a 	bl	80155e4 <osDelay>

		enable_shot;
 800bf70:	4a32      	ldr	r2, [pc, #200]	; (800c03c <NormalControl+0x334>)
 800bf72:	7e13      	ldrb	r3, [r2, #24]
 800bf74:	f36f 0341 	bfc	r3, #1, #1
 800bf78:	7613      	strb	r3, [r2, #24]
		osDelay(500);
 800bf7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bf7e:	f009 fb31 	bl	80155e4 <osDelay>

		disable_shot;
 800bf82:	4a2e      	ldr	r2, [pc, #184]	; (800c03c <NormalControl+0x334>)
 800bf84:	7e13      	ldrb	r3, [r2, #24]
 800bf86:	f043 0302 	orr.w	r3, r3, #2
 800bf8a:	7613      	strb	r3, [r2, #24]
	}

	// Try fix ring position
	if(ps4.button == OPTION)
 800bf8c:	4b24      	ldr	r3, [pc, #144]	; (800c020 <NormalControl+0x318>)
 800bf8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf94:	d12e      	bne.n	800bff4 <NormalControl+0x2ec>
	{
		while(ps4.button == OPTION);
 800bf96:	bf00      	nop
 800bf98:	4b21      	ldr	r3, [pc, #132]	; (800c020 <NormalControl+0x318>)
 800bf9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfa0:	d0fa      	beq.n	800bf98 <NormalControl+0x290>
		servo_load_retract;
 800bfa2:	f240 21ee 	movw	r1, #750	; 0x2ee
 800bfa6:	4822      	ldr	r0, [pc, #136]	; (800c030 <NormalControl+0x328>)
 800bfa8:	f7fe fcca 	bl	800a940 <ServoSetPulse>
		enable_shot;
 800bfac:	4a23      	ldr	r2, [pc, #140]	; (800c03c <NormalControl+0x334>)
 800bfae:	7e13      	ldrb	r3, [r2, #24]
 800bfb0:	f36f 0341 	bfc	r3, #1, #1
 800bfb4:	7613      	strb	r3, [r2, #24]

		osDelay(500);
 800bfb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bfba:	f009 fb13 	bl	80155e4 <osDelay>

		servo_load_up10;
 800bfbe:	f44f 7116 	mov.w	r1, #600	; 0x258
 800bfc2:	481b      	ldr	r0, [pc, #108]	; (800c030 <NormalControl+0x328>)
 800bfc4:	f7fe fcbc 	bl	800a940 <ServoSetPulse>
		osDelay(150);
 800bfc8:	2096      	movs	r0, #150	; 0x96
 800bfca:	f009 fb0b 	bl	80155e4 <osDelay>
		servo_pick_close;
 800bfce:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800bfd2:	4818      	ldr	r0, [pc, #96]	; (800c034 <NormalControl+0x32c>)
 800bfd4:	f7fe fcb4 	bl	800a940 <ServoSetPulse>

		osDelay(500);
 800bfd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bfdc:	f009 fb02 	bl	80155e4 <osDelay>
		servo_pick_hold;
 800bfe0:	f44f 7116 	mov.w	r1, #600	; 0x258
 800bfe4:	4813      	ldr	r0, [pc, #76]	; (800c034 <NormalControl+0x32c>)
 800bfe6:	f7fe fcab 	bl	800a940 <ServoSetPulse>

		disable_shot;
 800bfea:	4a14      	ldr	r2, [pc, #80]	; (800c03c <NormalControl+0x334>)
 800bfec:	7e13      	ldrb	r3, [r2, #24]
 800bfee:	f043 0302 	orr.w	r3, r3, #2
 800bff2:	7613      	strb	r3, [r2, #24]
	}

	// Enable / Disable fly wheel
	if(ps4.button == CROSS)
 800bff4:	4b0a      	ldr	r3, [pc, #40]	; (800c020 <NormalControl+0x318>)
 800bff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bff8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bffc:	d125      	bne.n	800c04a <NormalControl+0x342>
	{
		while(ps4.button == CROSS);
 800bffe:	bf00      	nop
 800c000:	4b07      	ldr	r3, [pc, #28]	; (800c020 <NormalControl+0x318>)
 800c002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c004:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c008:	d0fa      	beq.n	800c000 <NormalControl+0x2f8>

		if(!flywheel)
 800c00a:	4b0d      	ldr	r3, [pc, #52]	; (800c040 <NormalControl+0x338>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d118      	bne.n	800c044 <NormalControl+0x33c>
			flywheel = 1;
 800c012:	4b0b      	ldr	r3, [pc, #44]	; (800c040 <NormalControl+0x338>)
 800c014:	2201      	movs	r2, #1
 800c016:	601a      	str	r2, [r3, #0]
 800c018:	e017      	b.n	800c04a <NormalControl+0x342>
 800c01a:	bf00      	nop
 800c01c:	40020814 	.word	0x40020814
 800c020:	20009dc0 	.word	0x20009dc0
 800c024:	200092e0 	.word	0x200092e0
 800c028:	40a00000 	.word	0x40a00000
 800c02c:	20009ca0 	.word	0x20009ca0
 800c030:	2000a11c 	.word	0x2000a11c
 800c034:	200099a0 	.word	0x200099a0
 800c038:	20005cd4 	.word	0x20005cd4
 800c03c:	20009424 	.word	0x20009424
 800c040:	2000970c 	.word	0x2000970c
		else
			flywheel = 0;
 800c044:	4b20      	ldr	r3, [pc, #128]	; (800c0c8 <NormalControl+0x3c0>)
 800c046:	2200      	movs	r2, #0
 800c048:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == LEFT)
 800c04a:	4b20      	ldr	r3, [pc, #128]	; (800c0cc <NormalControl+0x3c4>)
 800c04c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c04e:	2b80      	cmp	r3, #128	; 0x80
 800c050:	d117      	bne.n	800c082 <NormalControl+0x37a>
	{
		while(ps4.button == LEFT);
 800c052:	bf00      	nop
 800c054:	4b1d      	ldr	r3, [pc, #116]	; (800c0cc <NormalControl+0x3c4>)
 800c056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c058:	2b80      	cmp	r3, #128	; 0x80
 800c05a:	d0fb      	beq.n	800c054 <NormalControl+0x34c>
		vesc_pdc += 0.1;
 800c05c:	4b1c      	ldr	r3, [pc, #112]	; (800c0d0 <NormalControl+0x3c8>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4618      	mov	r0, r3
 800c062:	f7f4 fa71 	bl	8000548 <__aeabi_f2d>
 800c066:	a316      	add	r3, pc, #88	; (adr r3, 800c0c0 <NormalControl+0x3b8>)
 800c068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c06c:	f7f4 f90e 	bl	800028c <__adddf3>
 800c070:	4602      	mov	r2, r0
 800c072:	460b      	mov	r3, r1
 800c074:	4610      	mov	r0, r2
 800c076:	4619      	mov	r1, r3
 800c078:	f7f4 fdb6 	bl	8000be8 <__aeabi_d2f>
 800c07c:	4603      	mov	r3, r0
 800c07e:	4a14      	ldr	r2, [pc, #80]	; (800c0d0 <NormalControl+0x3c8>)
 800c080:	6013      	str	r3, [r2, #0]
	}

	if(ps4.button == RIGHT)
 800c082:	4b12      	ldr	r3, [pc, #72]	; (800c0cc <NormalControl+0x3c4>)
 800c084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c086:	2b20      	cmp	r3, #32
 800c088:	d117      	bne.n	800c0ba <NormalControl+0x3b2>
	{
		while(ps4.button == RIGHT);
 800c08a:	bf00      	nop
 800c08c:	4b0f      	ldr	r3, [pc, #60]	; (800c0cc <NormalControl+0x3c4>)
 800c08e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c090:	2b20      	cmp	r3, #32
 800c092:	d0fb      	beq.n	800c08c <NormalControl+0x384>
		vesc_pdc -= 0.1;
 800c094:	4b0e      	ldr	r3, [pc, #56]	; (800c0d0 <NormalControl+0x3c8>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4618      	mov	r0, r3
 800c09a:	f7f4 fa55 	bl	8000548 <__aeabi_f2d>
 800c09e:	a308      	add	r3, pc, #32	; (adr r3, 800c0c0 <NormalControl+0x3b8>)
 800c0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a4:	f7f4 f8f0 	bl	8000288 <__aeabi_dsub>
 800c0a8:	4602      	mov	r2, r0
 800c0aa:	460b      	mov	r3, r1
 800c0ac:	4610      	mov	r0, r2
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	f7f4 fd9a 	bl	8000be8 <__aeabi_d2f>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	4a06      	ldr	r2, [pc, #24]	; (800c0d0 <NormalControl+0x3c8>)
 800c0b8:	6013      	str	r3, [r2, #0]
	}
}
 800c0ba:	bf00      	nop
 800c0bc:	bd80      	pop	{r7, pc}
 800c0be:	bf00      	nop
 800c0c0:	9999999a 	.word	0x9999999a
 800c0c4:	3fb99999 	.word	0x3fb99999
 800c0c8:	2000970c 	.word	0x2000970c
 800c0cc:	20009dc0 	.word	0x20009dc0
 800c0d0:	20007754 	.word	0x20007754

0800c0d4 <Init>:

void Init()
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	af00      	add	r7, sp, #0
//	realMODN(&ps4, &rns);

	// Picking Cylinder
	if(ps4.button == CIRCLE)
 800c0d8:	4b7a      	ldr	r3, [pc, #488]	; (800c2c4 <Init+0x1f0>)
 800c0da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0e0:	d11b      	bne.n	800c11a <Init+0x46>
	{
		while(ps4.button == CIRCLE);
 800c0e2:	bf00      	nop
 800c0e4:	4b77      	ldr	r3, [pc, #476]	; (800c2c4 <Init+0x1f0>)
 800c0e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0ec:	d0fa      	beq.n	800c0e4 <Init+0x10>
		static int count = 0;
		if(count == 0)
 800c0ee:	4b76      	ldr	r3, [pc, #472]	; (800c2c8 <Init+0x1f4>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d10a      	bne.n	800c10c <Init+0x38>
		{
			start_pick;
 800c0f6:	4b75      	ldr	r3, [pc, #468]	; (800c2cc <Init+0x1f8>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800c0fe:	635a      	str	r2, [r3, #52]	; 0x34
			count++;
 800c100:	4b71      	ldr	r3, [pc, #452]	; (800c2c8 <Init+0x1f4>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	3301      	adds	r3, #1
 800c106:	4a70      	ldr	r2, [pc, #448]	; (800c2c8 <Init+0x1f4>)
 800c108:	6013      	str	r3, [r2, #0]
 800c10a:	e006      	b.n	800c11a <Init+0x46>
		}
		else
		{
			stop_pick;
 800c10c:	4b6f      	ldr	r3, [pc, #444]	; (800c2cc <Init+0x1f8>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2200      	movs	r2, #0
 800c112:	635a      	str	r2, [r3, #52]	; 0x34
			count = 0;
 800c114:	4b6c      	ldr	r3, [pc, #432]	; (800c2c8 <Init+0x1f4>)
 800c116:	2200      	movs	r2, #0
 800c118:	601a      	str	r2, [r3, #0]
		}
	}

	// Shot Cylinder
	if(ps4.button == CROSS)
 800c11a:	4b6a      	ldr	r3, [pc, #424]	; (800c2c4 <Init+0x1f0>)
 800c11c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c11e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c122:	d11c      	bne.n	800c15e <Init+0x8a>
	{
		while(ps4.button == CROSS);
 800c124:	bf00      	nop
 800c126:	4b67      	ldr	r3, [pc, #412]	; (800c2c4 <Init+0x1f0>)
 800c128:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c12a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c12e:	d0fa      	beq.n	800c126 <Init+0x52>
		static int count = 0;
		if(count == 0)
 800c130:	4b67      	ldr	r3, [pc, #412]	; (800c2d0 <Init+0x1fc>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d10a      	bne.n	800c14e <Init+0x7a>
		{
			shot;
 800c138:	4a66      	ldr	r2, [pc, #408]	; (800c2d4 <Init+0x200>)
 800c13a:	7e13      	ldrb	r3, [r2, #24]
 800c13c:	f043 0301 	orr.w	r3, r3, #1
 800c140:	7613      	strb	r3, [r2, #24]
			count++;
 800c142:	4b63      	ldr	r3, [pc, #396]	; (800c2d0 <Init+0x1fc>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	3301      	adds	r3, #1
 800c148:	4a61      	ldr	r2, [pc, #388]	; (800c2d0 <Init+0x1fc>)
 800c14a:	6013      	str	r3, [r2, #0]
 800c14c:	e007      	b.n	800c15e <Init+0x8a>
		}
		else
		{
			retract;
 800c14e:	4a61      	ldr	r2, [pc, #388]	; (800c2d4 <Init+0x200>)
 800c150:	7e13      	ldrb	r3, [r2, #24]
 800c152:	f36f 0300 	bfc	r3, #0, #1
 800c156:	7613      	strb	r3, [r2, #24]
			count = 0;
 800c158:	4b5d      	ldr	r3, [pc, #372]	; (800c2d0 <Init+0x1fc>)
 800c15a:	2200      	movs	r2, #0
 800c15c:	601a      	str	r2, [r3, #0]
		}
	}

	// Enable Shot Cylinder
	if(ps4.button == TRIANGLE)
 800c15e:	4b59      	ldr	r3, [pc, #356]	; (800c2c4 <Init+0x1f0>)
 800c160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c166:	d11c      	bne.n	800c1a2 <Init+0xce>
	{
		while(ps4.button == TRIANGLE);
 800c168:	bf00      	nop
 800c16a:	4b56      	ldr	r3, [pc, #344]	; (800c2c4 <Init+0x1f0>)
 800c16c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c16e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c172:	d0fa      	beq.n	800c16a <Init+0x96>
		static int count = 0;
		if(count == 0)
 800c174:	4b58      	ldr	r3, [pc, #352]	; (800c2d8 <Init+0x204>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d10a      	bne.n	800c192 <Init+0xbe>
		{
			disable_shot;
 800c17c:	4a55      	ldr	r2, [pc, #340]	; (800c2d4 <Init+0x200>)
 800c17e:	7e13      	ldrb	r3, [r2, #24]
 800c180:	f043 0302 	orr.w	r3, r3, #2
 800c184:	7613      	strb	r3, [r2, #24]
			count++;
 800c186:	4b54      	ldr	r3, [pc, #336]	; (800c2d8 <Init+0x204>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	3301      	adds	r3, #1
 800c18c:	4a52      	ldr	r2, [pc, #328]	; (800c2d8 <Init+0x204>)
 800c18e:	6013      	str	r3, [r2, #0]
 800c190:	e007      	b.n	800c1a2 <Init+0xce>
		}
		else
		{
			enable_shot;
 800c192:	4a50      	ldr	r2, [pc, #320]	; (800c2d4 <Init+0x200>)
 800c194:	7e13      	ldrb	r3, [r2, #24]
 800c196:	f36f 0341 	bfc	r3, #1, #1
 800c19a:	7613      	strb	r3, [r2, #24]
			count = 0;
 800c19c:	4b4e      	ldr	r3, [pc, #312]	; (800c2d8 <Init+0x204>)
 800c19e:	2200      	movs	r2, #0
 800c1a0:	601a      	str	r2, [r3, #0]
		}
	}

	// Set Servo Range
	if(ps4.button == L1)
 800c1a2:	4b48      	ldr	r3, [pc, #288]	; (800c2c4 <Init+0x1f0>)
 800c1a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1aa:	d109      	bne.n	800c1c0 <Init+0xec>
	{
		while(ps4.button == L1);
 800c1ac:	bf00      	nop
 800c1ae:	4b45      	ldr	r3, [pc, #276]	; (800c2c4 <Init+0x1f0>)
 800c1b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1b6:	d0fa      	beq.n	800c1ae <Init+0xda>
		ServoMovePulse(&pitch, 50);
 800c1b8:	2132      	movs	r1, #50	; 0x32
 800c1ba:	4848      	ldr	r0, [pc, #288]	; (800c2dc <Init+0x208>)
 800c1bc:	f7fe fc1b 	bl	800a9f6 <ServoMovePulse>
	}

	if(ps4.button == R1)
 800c1c0:	4b40      	ldr	r3, [pc, #256]	; (800c2c4 <Init+0x1f0>)
 800c1c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c1c8:	d10a      	bne.n	800c1e0 <Init+0x10c>
	{
		while(ps4.button == R1);
 800c1ca:	bf00      	nop
 800c1cc:	4b3d      	ldr	r3, [pc, #244]	; (800c2c4 <Init+0x1f0>)
 800c1ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c1d4:	d0fa      	beq.n	800c1cc <Init+0xf8>
		ServoMovePulse(&pitch, -50);
 800c1d6:	f06f 0131 	mvn.w	r1, #49	; 0x31
 800c1da:	4840      	ldr	r0, [pc, #256]	; (800c2dc <Init+0x208>)
 800c1dc:	f7fe fc0b 	bl	800a9f6 <ServoMovePulse>
	}

	if(ps4.button == UP)
 800c1e0:	4b38      	ldr	r3, [pc, #224]	; (800c2c4 <Init+0x1f0>)
 800c1e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1e4:	2b10      	cmp	r3, #16
 800c1e6:	d108      	bne.n	800c1fa <Init+0x126>
	{
		while(ps4.button == UP);
 800c1e8:	bf00      	nop
 800c1ea:	4b36      	ldr	r3, [pc, #216]	; (800c2c4 <Init+0x1f0>)
 800c1ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1ee:	2b10      	cmp	r3, #16
 800c1f0:	d0fb      	beq.n	800c1ea <Init+0x116>
		ServoMovePulse(&pick, 50);
 800c1f2:	2132      	movs	r1, #50	; 0x32
 800c1f4:	483a      	ldr	r0, [pc, #232]	; (800c2e0 <Init+0x20c>)
 800c1f6:	f7fe fbfe 	bl	800a9f6 <ServoMovePulse>
	}

	if(ps4.button == DOWN)
 800c1fa:	4b32      	ldr	r3, [pc, #200]	; (800c2c4 <Init+0x1f0>)
 800c1fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1fe:	2b40      	cmp	r3, #64	; 0x40
 800c200:	d109      	bne.n	800c216 <Init+0x142>
	{
		while(ps4.button == DOWN);
 800c202:	bf00      	nop
 800c204:	4b2f      	ldr	r3, [pc, #188]	; (800c2c4 <Init+0x1f0>)
 800c206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c208:	2b40      	cmp	r3, #64	; 0x40
 800c20a:	d0fb      	beq.n	800c204 <Init+0x130>
		ServoMovePulse(&pick, -50);
 800c20c:	f06f 0131 	mvn.w	r1, #49	; 0x31
 800c210:	4833      	ldr	r0, [pc, #204]	; (800c2e0 <Init+0x20c>)
 800c212:	f7fe fbf0 	bl	800a9f6 <ServoMovePulse>
	}

	if(ps4.button == LEFT)
 800c216:	4b2b      	ldr	r3, [pc, #172]	; (800c2c4 <Init+0x1f0>)
 800c218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c21a:	2b80      	cmp	r3, #128	; 0x80
 800c21c:	d108      	bne.n	800c230 <Init+0x15c>
	{
		while(ps4.button == LEFT);
 800c21e:	bf00      	nop
 800c220:	4b28      	ldr	r3, [pc, #160]	; (800c2c4 <Init+0x1f0>)
 800c222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c224:	2b80      	cmp	r3, #128	; 0x80
 800c226:	d0fb      	beq.n	800c220 <Init+0x14c>
		ServoMovePulse(&load, 50);
 800c228:	2132      	movs	r1, #50	; 0x32
 800c22a:	482e      	ldr	r0, [pc, #184]	; (800c2e4 <Init+0x210>)
 800c22c:	f7fe fbe3 	bl	800a9f6 <ServoMovePulse>
	}

	if(ps4.button == RIGHT)
 800c230:	4b24      	ldr	r3, [pc, #144]	; (800c2c4 <Init+0x1f0>)
 800c232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c234:	2b20      	cmp	r3, #32
 800c236:	d109      	bne.n	800c24c <Init+0x178>
	{
		while(ps4.button == RIGHT);
 800c238:	bf00      	nop
 800c23a:	4b22      	ldr	r3, [pc, #136]	; (800c2c4 <Init+0x1f0>)
 800c23c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c23e:	2b20      	cmp	r3, #32
 800c240:	d0fb      	beq.n	800c23a <Init+0x166>
		ServoMovePulse(&load, -50);
 800c242:	f06f 0131 	mvn.w	r1, #49	; 0x31
 800c246:	4827      	ldr	r0, [pc, #156]	; (800c2e4 <Init+0x210>)
 800c248:	f7fe fbd5 	bl	800a9f6 <ServoMovePulse>
	}

	if(ps4.button == SQUARE)
 800c24c:	4b1d      	ldr	r3, [pc, #116]	; (800c2c4 <Init+0x1f0>)
 800c24e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c254:	d109      	bne.n	800c26a <Init+0x196>
	{
		while(ps4.button == SQUARE);
 800c256:	bf00      	nop
 800c258:	4b1a      	ldr	r3, [pc, #104]	; (800c2c4 <Init+0x1f0>)
 800c25a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c25c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c260:	d0fa      	beq.n	800c258 <Init+0x184>
		ServoMovePulse(&yaw_servo, 50);
 800c262:	2132      	movs	r1, #50	; 0x32
 800c264:	4820      	ldr	r0, [pc, #128]	; (800c2e8 <Init+0x214>)
 800c266:	f7fe fbc6 	bl	800a9f6 <ServoMovePulse>
	}

	if(ps4.button == OPTION)
 800c26a:	4b16      	ldr	r3, [pc, #88]	; (800c2c4 <Init+0x1f0>)
 800c26c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c26e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c272:	d10a      	bne.n	800c28a <Init+0x1b6>
	{
		while(ps4.button == OPTION);
 800c274:	bf00      	nop
 800c276:	4b13      	ldr	r3, [pc, #76]	; (800c2c4 <Init+0x1f0>)
 800c278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c27a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c27e:	d0fa      	beq.n	800c276 <Init+0x1a2>
		ServoMovePulse(&yaw_servo, -50);
 800c280:	f06f 0131 	mvn.w	r1, #49	; 0x31
 800c284:	4818      	ldr	r0, [pc, #96]	; (800c2e8 <Init+0x214>)
 800c286:	f7fe fbb6 	bl	800a9f6 <ServoMovePulse>
	}

	if(HAL_GetTick() - before >= InitMode)
 800c28a:	f001 fef3 	bl	800e074 <HAL_GetTick>
 800c28e:	4603      	mov	r3, r0
 800c290:	4a16      	ldr	r2, [pc, #88]	; (800c2ec <Init+0x218>)
 800c292:	6812      	ldr	r2, [r2, #0]
 800c294:	1a9b      	subs	r3, r3, r2
 800c296:	f5b3 7f67 	cmp.w	r3, #924	; 0x39c
 800c29a:	d911      	bls.n	800c2c0 <Init+0x1ec>
	{
		led3 = !led3;
 800c29c:	4b14      	ldr	r3, [pc, #80]	; (800c2f0 <Init+0x21c>)
 800c29e:	785b      	ldrb	r3, [r3, #1]
 800c2a0:	b25b      	sxtb	r3, r3
 800c2a2:	4a13      	ldr	r2, [pc, #76]	; (800c2f0 <Init+0x21c>)
 800c2a4:	43db      	mvns	r3, r3
 800c2a6:	b2db      	uxtb	r3, r3
 800c2a8:	09db      	lsrs	r3, r3, #7
 800c2aa:	b2d9      	uxtb	r1, r3
 800c2ac:	7853      	ldrb	r3, [r2, #1]
 800c2ae:	f361 13c7 	bfi	r3, r1, #7, #1
 800c2b2:	7053      	strb	r3, [r2, #1]
		before = HAL_GetTick();
 800c2b4:	f001 fede 	bl	800e074 <HAL_GetTick>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	4b0b      	ldr	r3, [pc, #44]	; (800c2ec <Init+0x218>)
 800c2be:	601a      	str	r2, [r3, #0]
	}
}
 800c2c0:	bf00      	nop
 800c2c2:	bd80      	pop	{r7, pc}
 800c2c4:	20009dc0 	.word	0x20009dc0
 800c2c8:	20000304 	.word	0x20000304
 800c2cc:	20005cd4 	.word	0x20005cd4
 800c2d0:	20000308 	.word	0x20000308
 800c2d4:	20009424 	.word	0x20009424
 800c2d8:	2000030c 	.word	0x2000030c
 800c2dc:	20009ca0 	.word	0x20009ca0
 800c2e0:	200099a0 	.word	0x200099a0
 800c2e4:	2000a11c 	.word	0x2000a11c
 800c2e8:	20007714 	.word	0x20007714
 800c2ec:	20007250 	.word	0x20007250
 800c2f0:	40020814 	.word	0x40020814
 800c2f4:	00000000 	.word	0x00000000

0800c2f8 <PS4Tune>:

void PS4Tune()
{
 800c2f8:	b5b0      	push	{r4, r5, r7, lr}
 800c2fa:	af00      	add	r7, sp, #0

	static int run = 0;
	if(ps4.button == CIRCLE)
 800c2fc:	4ba8      	ldr	r3, [pc, #672]	; (800c5a0 <PS4Tune+0x2a8>)
 800c2fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c304:	d118      	bne.n	800c338 <PS4Tune+0x40>
	{
		while(ps4.button == CIRCLE);
 800c306:	bf00      	nop
 800c308:	4ba5      	ldr	r3, [pc, #660]	; (800c5a0 <PS4Tune+0x2a8>)
 800c30a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c30c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c310:	d0fa      	beq.n	800c308 <PS4Tune+0x10>
		static int count = 0;
		if(count == 0)
 800c312:	4ba4      	ldr	r3, [pc, #656]	; (800c5a4 <PS4Tune+0x2ac>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d108      	bne.n	800c32c <PS4Tune+0x34>
		{
			run = 1;
 800c31a:	4ba3      	ldr	r3, [pc, #652]	; (800c5a8 <PS4Tune+0x2b0>)
 800c31c:	2201      	movs	r2, #1
 800c31e:	601a      	str	r2, [r3, #0]
			count++;
 800c320:	4ba0      	ldr	r3, [pc, #640]	; (800c5a4 <PS4Tune+0x2ac>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	3301      	adds	r3, #1
 800c326:	4a9f      	ldr	r2, [pc, #636]	; (800c5a4 <PS4Tune+0x2ac>)
 800c328:	6013      	str	r3, [r2, #0]
 800c32a:	e005      	b.n	800c338 <PS4Tune+0x40>
		}
		else
		{
			run = 0;
 800c32c:	4b9e      	ldr	r3, [pc, #632]	; (800c5a8 <PS4Tune+0x2b0>)
 800c32e:	2200      	movs	r2, #0
 800c330:	601a      	str	r2, [r3, #0]
			count = 0;
 800c332:	4b9c      	ldr	r3, [pc, #624]	; (800c5a4 <PS4Tune+0x2ac>)
 800c334:	2200      	movs	r2, #0
 800c336:	601a      	str	r2, [r3, #0]
		}
	}

	if(run)
 800c338:	4b9b      	ldr	r3, [pc, #620]	; (800c5a8 <PS4Tune+0x2b0>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d01a      	beq.n	800c376 <PS4Tune+0x7e>
	{
		sys.navi_vel = 1;
 800c340:	4a9a      	ldr	r2, [pc, #616]	; (800c5ac <PS4Tune+0x2b4>)
 800c342:	7853      	ldrb	r3, [r2, #1]
 800c344:	f043 0304 	orr.w	r3, r3, #4
 800c348:	7053      	strb	r3, [r2, #1]
		VESCPIDProcess(vesc_pulse, vesc_pulse, vesc_pulse, vesc_pulse);
 800c34a:	4b99      	ldr	r3, [pc, #612]	; (800c5b0 <PS4Tune+0x2b8>)
 800c34c:	edd3 7a00 	vldr	s15, [r3]
 800c350:	4b97      	ldr	r3, [pc, #604]	; (800c5b0 <PS4Tune+0x2b8>)
 800c352:	ed93 7a00 	vldr	s14, [r3]
 800c356:	4b96      	ldr	r3, [pc, #600]	; (800c5b0 <PS4Tune+0x2b8>)
 800c358:	edd3 6a00 	vldr	s13, [r3]
 800c35c:	4b94      	ldr	r3, [pc, #592]	; (800c5b0 <PS4Tune+0x2b8>)
 800c35e:	ed93 6a00 	vldr	s12, [r3]
 800c362:	eef0 1a46 	vmov.f32	s3, s12
 800c366:	eeb0 1a66 	vmov.f32	s2, s13
 800c36a:	eef0 0a47 	vmov.f32	s1, s14
 800c36e:	eeb0 0a67 	vmov.f32	s0, s15
 800c372:	f001 fc5d 	bl	800dc30 <VESCPIDProcess>
	}
//	else
//		realMODN(&ps4, &rns);

	if(ps4.button == L1)
 800c376:	4b8a      	ldr	r3, [pc, #552]	; (800c5a0 <PS4Tune+0x2a8>)
 800c378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c37a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c37e:	d11c      	bne.n	800c3ba <PS4Tune+0xc2>
	{
		while(ps4.button == L1);
 800c380:	bf00      	nop
 800c382:	4b87      	ldr	r3, [pc, #540]	; (800c5a0 <PS4Tune+0x2a8>)
 800c384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c38a:	d0fa      	beq.n	800c382 <PS4Tune+0x8a>
		vesc_pulse++;
 800c38c:	4b88      	ldr	r3, [pc, #544]	; (800c5b0 <PS4Tune+0x2b8>)
 800c38e:	edd3 7a00 	vldr	s15, [r3]
 800c392:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c396:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c39a:	4b85      	ldr	r3, [pc, #532]	; (800c5b0 <PS4Tune+0x2b8>)
 800c39c:	edc3 7a00 	vstr	s15, [r3]
		if(vesc_pulse >= 5) vesc_pulse = 5;
 800c3a0:	4b83      	ldr	r3, [pc, #524]	; (800c5b0 <PS4Tune+0x2b8>)
 800c3a2:	edd3 7a00 	vldr	s15, [r3]
 800c3a6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800c3aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c3ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3b2:	db02      	blt.n	800c3ba <PS4Tune+0xc2>
 800c3b4:	4b7e      	ldr	r3, [pc, #504]	; (800c5b0 <PS4Tune+0x2b8>)
 800c3b6:	4a7f      	ldr	r2, [pc, #508]	; (800c5b4 <PS4Tune+0x2bc>)
 800c3b8:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == R1)
 800c3ba:	4b79      	ldr	r3, [pc, #484]	; (800c5a0 <PS4Tune+0x2a8>)
 800c3bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3c2:	d11b      	bne.n	800c3fc <PS4Tune+0x104>
	{
		while(ps4.button == R1);
 800c3c4:	bf00      	nop
 800c3c6:	4b76      	ldr	r3, [pc, #472]	; (800c5a0 <PS4Tune+0x2a8>)
 800c3c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3ce:	d0fa      	beq.n	800c3c6 <PS4Tune+0xce>
		vesc_pulse--;
 800c3d0:	4b77      	ldr	r3, [pc, #476]	; (800c5b0 <PS4Tune+0x2b8>)
 800c3d2:	edd3 7a00 	vldr	s15, [r3]
 800c3d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c3da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c3de:	4b74      	ldr	r3, [pc, #464]	; (800c5b0 <PS4Tune+0x2b8>)
 800c3e0:	edc3 7a00 	vstr	s15, [r3]
		if(vesc_pulse <= 0) vesc_pulse = 0;
 800c3e4:	4b72      	ldr	r3, [pc, #456]	; (800c5b0 <PS4Tune+0x2b8>)
 800c3e6:	edd3 7a00 	vldr	s15, [r3]
 800c3ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c3ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3f2:	d803      	bhi.n	800c3fc <PS4Tune+0x104>
 800c3f4:	4b6e      	ldr	r3, [pc, #440]	; (800c5b0 <PS4Tune+0x2b8>)
 800c3f6:	f04f 0200 	mov.w	r2, #0
 800c3fa:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == UP)
 800c3fc:	4b68      	ldr	r3, [pc, #416]	; (800c5a0 <PS4Tune+0x2a8>)
 800c3fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c400:	2b10      	cmp	r3, #16
 800c402:	d10d      	bne.n	800c420 <PS4Tune+0x128>
	{
		while(ps4.button == UP);
 800c404:	bf00      	nop
 800c406:	4b66      	ldr	r3, [pc, #408]	; (800c5a0 <PS4Tune+0x2a8>)
 800c408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c40a:	2b10      	cmp	r3, #16
 800c40c:	d0fb      	beq.n	800c406 <PS4Tune+0x10e>
		tune_p = 1;
 800c40e:	4b6a      	ldr	r3, [pc, #424]	; (800c5b8 <PS4Tune+0x2c0>)
 800c410:	2201      	movs	r2, #1
 800c412:	601a      	str	r2, [r3, #0]
		tune_i = 0;
 800c414:	4b69      	ldr	r3, [pc, #420]	; (800c5bc <PS4Tune+0x2c4>)
 800c416:	2200      	movs	r2, #0
 800c418:	601a      	str	r2, [r3, #0]
		tune_d = 0;
 800c41a:	4b69      	ldr	r3, [pc, #420]	; (800c5c0 <PS4Tune+0x2c8>)
 800c41c:	2200      	movs	r2, #0
 800c41e:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == DOWN)
 800c420:	4b5f      	ldr	r3, [pc, #380]	; (800c5a0 <PS4Tune+0x2a8>)
 800c422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c424:	2b40      	cmp	r3, #64	; 0x40
 800c426:	d10d      	bne.n	800c444 <PS4Tune+0x14c>
	{
		while(ps4.button == DOWN);
 800c428:	bf00      	nop
 800c42a:	4b5d      	ldr	r3, [pc, #372]	; (800c5a0 <PS4Tune+0x2a8>)
 800c42c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c42e:	2b40      	cmp	r3, #64	; 0x40
 800c430:	d0fb      	beq.n	800c42a <PS4Tune+0x132>
		tune_p = 0;
 800c432:	4b61      	ldr	r3, [pc, #388]	; (800c5b8 <PS4Tune+0x2c0>)
 800c434:	2200      	movs	r2, #0
 800c436:	601a      	str	r2, [r3, #0]
		tune_i = 1;
 800c438:	4b60      	ldr	r3, [pc, #384]	; (800c5bc <PS4Tune+0x2c4>)
 800c43a:	2201      	movs	r2, #1
 800c43c:	601a      	str	r2, [r3, #0]
		tune_d = 0;
 800c43e:	4b60      	ldr	r3, [pc, #384]	; (800c5c0 <PS4Tune+0x2c8>)
 800c440:	2200      	movs	r2, #0
 800c442:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == LEFT)
 800c444:	4b56      	ldr	r3, [pc, #344]	; (800c5a0 <PS4Tune+0x2a8>)
 800c446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c448:	2b80      	cmp	r3, #128	; 0x80
 800c44a:	d10d      	bne.n	800c468 <PS4Tune+0x170>
	{
		while(ps4.button == LEFT);
 800c44c:	bf00      	nop
 800c44e:	4b54      	ldr	r3, [pc, #336]	; (800c5a0 <PS4Tune+0x2a8>)
 800c450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c452:	2b80      	cmp	r3, #128	; 0x80
 800c454:	d0fb      	beq.n	800c44e <PS4Tune+0x156>
		tune_p = 0;
 800c456:	4b58      	ldr	r3, [pc, #352]	; (800c5b8 <PS4Tune+0x2c0>)
 800c458:	2200      	movs	r2, #0
 800c45a:	601a      	str	r2, [r3, #0]
		tune_i = 0;
 800c45c:	4b57      	ldr	r3, [pc, #348]	; (800c5bc <PS4Tune+0x2c4>)
 800c45e:	2200      	movs	r2, #0
 800c460:	601a      	str	r2, [r3, #0]
		tune_d = 1;
 800c462:	4b57      	ldr	r3, [pc, #348]	; (800c5c0 <PS4Tune+0x2c8>)
 800c464:	2201      	movs	r2, #1
 800c466:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == RIGHT)
 800c468:	4b4d      	ldr	r3, [pc, #308]	; (800c5a0 <PS4Tune+0x2a8>)
 800c46a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c46c:	2b20      	cmp	r3, #32
 800c46e:	d110      	bne.n	800c492 <PS4Tune+0x19a>
	{
		while(ps4.button == RIGHT);
 800c470:	bf00      	nop
 800c472:	4b4b      	ldr	r3, [pc, #300]	; (800c5a0 <PS4Tune+0x2a8>)
 800c474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c476:	2b20      	cmp	r3, #32
 800c478:	d0fb      	beq.n	800c472 <PS4Tune+0x17a>
		wheel++;
 800c47a:	4b52      	ldr	r3, [pc, #328]	; (800c5c4 <PS4Tune+0x2cc>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	3301      	adds	r3, #1
 800c480:	4a50      	ldr	r2, [pc, #320]	; (800c5c4 <PS4Tune+0x2cc>)
 800c482:	6013      	str	r3, [r2, #0]
		if(wheel > 5)
 800c484:	4b4f      	ldr	r3, [pc, #316]	; (800c5c4 <PS4Tune+0x2cc>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	2b05      	cmp	r3, #5
 800c48a:	dd02      	ble.n	800c492 <PS4Tune+0x19a>
			wheel = 1;
 800c48c:	4b4d      	ldr	r3, [pc, #308]	; (800c5c4 <PS4Tune+0x2cc>)
 800c48e:	2201      	movs	r2, #1
 800c490:	601a      	str	r2, [r3, #0]
	}

	if(tune_p)
 800c492:	4b49      	ldr	r3, [pc, #292]	; (800c5b8 <PS4Tune+0x2c0>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	2b00      	cmp	r3, #0
 800c498:	f000 80bf 	beq.w	800c61a <PS4Tune+0x322>
	{
		switch(wheel)
 800c49c:	4b49      	ldr	r3, [pc, #292]	; (800c5c4 <PS4Tune+0x2cc>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	3b01      	subs	r3, #1
 800c4a2:	2b03      	cmp	r3, #3
 800c4a4:	f200 8219 	bhi.w	800c8da <PS4Tune+0x5e2>
 800c4a8:	a201      	add	r2, pc, #4	; (adr r2, 800c4b0 <PS4Tune+0x1b8>)
 800c4aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ae:	bf00      	nop
 800c4b0:	0800c4c1 	.word	0x0800c4c1
 800c4b4:	0800c507 	.word	0x0800c507
 800c4b8:	0800c54d 	.word	0x0800c54d
 800c4bc:	0800c5d5 	.word	0x0800c5d5
		{
		case 1:
			AP += ps4.joyR_y * 0.0001;
 800c4c0:	4b37      	ldr	r3, [pc, #220]	; (800c5a0 <PS4Tune+0x2a8>)
 800c4c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f7f4 f83f 	bl	8000548 <__aeabi_f2d>
 800c4ca:	a333      	add	r3, pc, #204	; (adr r3, 800c598 <PS4Tune+0x2a0>)
 800c4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d0:	f7f4 f892 	bl	80005f8 <__aeabi_dmul>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	460b      	mov	r3, r1
 800c4d8:	4614      	mov	r4, r2
 800c4da:	461d      	mov	r5, r3
 800c4dc:	4b3a      	ldr	r3, [pc, #232]	; (800c5c8 <PS4Tune+0x2d0>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f7f4 f831 	bl	8000548 <__aeabi_f2d>
 800c4e6:	4602      	mov	r2, r0
 800c4e8:	460b      	mov	r3, r1
 800c4ea:	4620      	mov	r0, r4
 800c4ec:	4629      	mov	r1, r5
 800c4ee:	f7f3 fecd 	bl	800028c <__adddf3>
 800c4f2:	4602      	mov	r2, r0
 800c4f4:	460b      	mov	r3, r1
 800c4f6:	4610      	mov	r0, r2
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	f7f4 fb75 	bl	8000be8 <__aeabi_d2f>
 800c4fe:	4603      	mov	r3, r0
 800c500:	4a31      	ldr	r2, [pc, #196]	; (800c5c8 <PS4Tune+0x2d0>)
 800c502:	6013      	str	r3, [r2, #0]
			break;
 800c504:	e1e9      	b.n	800c8da <PS4Tune+0x5e2>
		case 2:
			BP += ps4.joyR_y * 0.0001;
 800c506:	4b26      	ldr	r3, [pc, #152]	; (800c5a0 <PS4Tune+0x2a8>)
 800c508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c50a:	4618      	mov	r0, r3
 800c50c:	f7f4 f81c 	bl	8000548 <__aeabi_f2d>
 800c510:	a321      	add	r3, pc, #132	; (adr r3, 800c598 <PS4Tune+0x2a0>)
 800c512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c516:	f7f4 f86f 	bl	80005f8 <__aeabi_dmul>
 800c51a:	4602      	mov	r2, r0
 800c51c:	460b      	mov	r3, r1
 800c51e:	4614      	mov	r4, r2
 800c520:	461d      	mov	r5, r3
 800c522:	4b2a      	ldr	r3, [pc, #168]	; (800c5cc <PS4Tune+0x2d4>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4618      	mov	r0, r3
 800c528:	f7f4 f80e 	bl	8000548 <__aeabi_f2d>
 800c52c:	4602      	mov	r2, r0
 800c52e:	460b      	mov	r3, r1
 800c530:	4620      	mov	r0, r4
 800c532:	4629      	mov	r1, r5
 800c534:	f7f3 feaa 	bl	800028c <__adddf3>
 800c538:	4602      	mov	r2, r0
 800c53a:	460b      	mov	r3, r1
 800c53c:	4610      	mov	r0, r2
 800c53e:	4619      	mov	r1, r3
 800c540:	f7f4 fb52 	bl	8000be8 <__aeabi_d2f>
 800c544:	4603      	mov	r3, r0
 800c546:	4a21      	ldr	r2, [pc, #132]	; (800c5cc <PS4Tune+0x2d4>)
 800c548:	6013      	str	r3, [r2, #0]
			break;
 800c54a:	e1c6      	b.n	800c8da <PS4Tune+0x5e2>
		case 3:
			CP += ps4.joyR_y * 0.0001;
 800c54c:	4b14      	ldr	r3, [pc, #80]	; (800c5a0 <PS4Tune+0x2a8>)
 800c54e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c550:	4618      	mov	r0, r3
 800c552:	f7f3 fff9 	bl	8000548 <__aeabi_f2d>
 800c556:	a310      	add	r3, pc, #64	; (adr r3, 800c598 <PS4Tune+0x2a0>)
 800c558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c55c:	f7f4 f84c 	bl	80005f8 <__aeabi_dmul>
 800c560:	4602      	mov	r2, r0
 800c562:	460b      	mov	r3, r1
 800c564:	4614      	mov	r4, r2
 800c566:	461d      	mov	r5, r3
 800c568:	4b19      	ldr	r3, [pc, #100]	; (800c5d0 <PS4Tune+0x2d8>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	4618      	mov	r0, r3
 800c56e:	f7f3 ffeb 	bl	8000548 <__aeabi_f2d>
 800c572:	4602      	mov	r2, r0
 800c574:	460b      	mov	r3, r1
 800c576:	4620      	mov	r0, r4
 800c578:	4629      	mov	r1, r5
 800c57a:	f7f3 fe87 	bl	800028c <__adddf3>
 800c57e:	4602      	mov	r2, r0
 800c580:	460b      	mov	r3, r1
 800c582:	4610      	mov	r0, r2
 800c584:	4619      	mov	r1, r3
 800c586:	f7f4 fb2f 	bl	8000be8 <__aeabi_d2f>
 800c58a:	4603      	mov	r3, r0
 800c58c:	4a10      	ldr	r2, [pc, #64]	; (800c5d0 <PS4Tune+0x2d8>)
 800c58e:	6013      	str	r3, [r2, #0]
			break;
 800c590:	e1a3      	b.n	800c8da <PS4Tune+0x5e2>
 800c592:	bf00      	nop
 800c594:	f3af 8000 	nop.w
 800c598:	eb1c432d 	.word	0xeb1c432d
 800c59c:	3f1a36e2 	.word	0x3f1a36e2
 800c5a0:	20009dc0 	.word	0x20009dc0
 800c5a4:	20000310 	.word	0x20000310
 800c5a8:	20000314 	.word	0x20000314
 800c5ac:	20007268 	.word	0x20007268
 800c5b0:	2000a054 	.word	0x2000a054
 800c5b4:	40a00000 	.word	0x40a00000
 800c5b8:	20007320 	.word	0x20007320
 800c5bc:	20007174 	.word	0x20007174
 800c5c0:	2000968c 	.word	0x2000968c
 800c5c4:	200064f4 	.word	0x200064f4
 800c5c8:	2000a0b0 	.word	0x2000a0b0
 800c5cc:	20007560 	.word	0x20007560
 800c5d0:	200094f0 	.word	0x200094f0
		case 4:
			DP += ps4.joyR_y * 0.0001;
 800c5d4:	4ba4      	ldr	r3, [pc, #656]	; (800c868 <PS4Tune+0x570>)
 800c5d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7f3 ffb5 	bl	8000548 <__aeabi_f2d>
 800c5de:	a39e      	add	r3, pc, #632	; (adr r3, 800c858 <PS4Tune+0x560>)
 800c5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e4:	f7f4 f808 	bl	80005f8 <__aeabi_dmul>
 800c5e8:	4602      	mov	r2, r0
 800c5ea:	460b      	mov	r3, r1
 800c5ec:	4614      	mov	r4, r2
 800c5ee:	461d      	mov	r5, r3
 800c5f0:	4b9e      	ldr	r3, [pc, #632]	; (800c86c <PS4Tune+0x574>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f7f3 ffa7 	bl	8000548 <__aeabi_f2d>
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	4620      	mov	r0, r4
 800c600:	4629      	mov	r1, r5
 800c602:	f7f3 fe43 	bl	800028c <__adddf3>
 800c606:	4602      	mov	r2, r0
 800c608:	460b      	mov	r3, r1
 800c60a:	4610      	mov	r0, r2
 800c60c:	4619      	mov	r1, r3
 800c60e:	f7f4 faeb 	bl	8000be8 <__aeabi_d2f>
 800c612:	4603      	mov	r3, r0
 800c614:	4a95      	ldr	r2, [pc, #596]	; (800c86c <PS4Tune+0x574>)
 800c616:	6013      	str	r3, [r2, #0]
			break;
 800c618:	e15f      	b.n	800c8da <PS4Tune+0x5e2>
		}
	}
	else if(tune_i)
 800c61a:	4b95      	ldr	r3, [pc, #596]	; (800c870 <PS4Tune+0x578>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	f000 809e 	beq.w	800c760 <PS4Tune+0x468>
	{
		switch(wheel)
 800c624:	4b93      	ldr	r3, [pc, #588]	; (800c874 <PS4Tune+0x57c>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	3b01      	subs	r3, #1
 800c62a:	2b03      	cmp	r3, #3
 800c62c:	f200 8155 	bhi.w	800c8da <PS4Tune+0x5e2>
 800c630:	a201      	add	r2, pc, #4	; (adr r2, 800c638 <PS4Tune+0x340>)
 800c632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c636:	bf00      	nop
 800c638:	0800c649 	.word	0x0800c649
 800c63c:	0800c68f 	.word	0x0800c68f
 800c640:	0800c6d5 	.word	0x0800c6d5
 800c644:	0800c71b 	.word	0x0800c71b
		{
		case 1:
			AI += ps4.joyR_y * 0.0001;
 800c648:	4b87      	ldr	r3, [pc, #540]	; (800c868 <PS4Tune+0x570>)
 800c64a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c64c:	4618      	mov	r0, r3
 800c64e:	f7f3 ff7b 	bl	8000548 <__aeabi_f2d>
 800c652:	a381      	add	r3, pc, #516	; (adr r3, 800c858 <PS4Tune+0x560>)
 800c654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c658:	f7f3 ffce 	bl	80005f8 <__aeabi_dmul>
 800c65c:	4602      	mov	r2, r0
 800c65e:	460b      	mov	r3, r1
 800c660:	4614      	mov	r4, r2
 800c662:	461d      	mov	r5, r3
 800c664:	4b84      	ldr	r3, [pc, #528]	; (800c878 <PS4Tune+0x580>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	4618      	mov	r0, r3
 800c66a:	f7f3 ff6d 	bl	8000548 <__aeabi_f2d>
 800c66e:	4602      	mov	r2, r0
 800c670:	460b      	mov	r3, r1
 800c672:	4620      	mov	r0, r4
 800c674:	4629      	mov	r1, r5
 800c676:	f7f3 fe09 	bl	800028c <__adddf3>
 800c67a:	4602      	mov	r2, r0
 800c67c:	460b      	mov	r3, r1
 800c67e:	4610      	mov	r0, r2
 800c680:	4619      	mov	r1, r3
 800c682:	f7f4 fab1 	bl	8000be8 <__aeabi_d2f>
 800c686:	4603      	mov	r3, r0
 800c688:	4a7b      	ldr	r2, [pc, #492]	; (800c878 <PS4Tune+0x580>)
 800c68a:	6013      	str	r3, [r2, #0]
			break;
 800c68c:	e125      	b.n	800c8da <PS4Tune+0x5e2>
		case 2:
			BI += ps4.joyR_y * 0.0001;
 800c68e:	4b76      	ldr	r3, [pc, #472]	; (800c868 <PS4Tune+0x570>)
 800c690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c692:	4618      	mov	r0, r3
 800c694:	f7f3 ff58 	bl	8000548 <__aeabi_f2d>
 800c698:	a36f      	add	r3, pc, #444	; (adr r3, 800c858 <PS4Tune+0x560>)
 800c69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c69e:	f7f3 ffab 	bl	80005f8 <__aeabi_dmul>
 800c6a2:	4602      	mov	r2, r0
 800c6a4:	460b      	mov	r3, r1
 800c6a6:	4614      	mov	r4, r2
 800c6a8:	461d      	mov	r5, r3
 800c6aa:	4b74      	ldr	r3, [pc, #464]	; (800c87c <PS4Tune+0x584>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7f3 ff4a 	bl	8000548 <__aeabi_f2d>
 800c6b4:	4602      	mov	r2, r0
 800c6b6:	460b      	mov	r3, r1
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	4629      	mov	r1, r5
 800c6bc:	f7f3 fde6 	bl	800028c <__adddf3>
 800c6c0:	4602      	mov	r2, r0
 800c6c2:	460b      	mov	r3, r1
 800c6c4:	4610      	mov	r0, r2
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	f7f4 fa8e 	bl	8000be8 <__aeabi_d2f>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	4a6b      	ldr	r2, [pc, #428]	; (800c87c <PS4Tune+0x584>)
 800c6d0:	6013      	str	r3, [r2, #0]
			break;
 800c6d2:	e102      	b.n	800c8da <PS4Tune+0x5e2>
		case 3:
			CI += ps4.joyR_y * 0.0001;
 800c6d4:	4b64      	ldr	r3, [pc, #400]	; (800c868 <PS4Tune+0x570>)
 800c6d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f7f3 ff35 	bl	8000548 <__aeabi_f2d>
 800c6de:	a35e      	add	r3, pc, #376	; (adr r3, 800c858 <PS4Tune+0x560>)
 800c6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e4:	f7f3 ff88 	bl	80005f8 <__aeabi_dmul>
 800c6e8:	4602      	mov	r2, r0
 800c6ea:	460b      	mov	r3, r1
 800c6ec:	4614      	mov	r4, r2
 800c6ee:	461d      	mov	r5, r3
 800c6f0:	4b63      	ldr	r3, [pc, #396]	; (800c880 <PS4Tune+0x588>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f7f3 ff27 	bl	8000548 <__aeabi_f2d>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	4620      	mov	r0, r4
 800c700:	4629      	mov	r1, r5
 800c702:	f7f3 fdc3 	bl	800028c <__adddf3>
 800c706:	4602      	mov	r2, r0
 800c708:	460b      	mov	r3, r1
 800c70a:	4610      	mov	r0, r2
 800c70c:	4619      	mov	r1, r3
 800c70e:	f7f4 fa6b 	bl	8000be8 <__aeabi_d2f>
 800c712:	4603      	mov	r3, r0
 800c714:	4a5a      	ldr	r2, [pc, #360]	; (800c880 <PS4Tune+0x588>)
 800c716:	6013      	str	r3, [r2, #0]
			break;
 800c718:	e0df      	b.n	800c8da <PS4Tune+0x5e2>
		case 4:
			DI += ps4.joyR_y * 0.0001;
 800c71a:	4b53      	ldr	r3, [pc, #332]	; (800c868 <PS4Tune+0x570>)
 800c71c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c71e:	4618      	mov	r0, r3
 800c720:	f7f3 ff12 	bl	8000548 <__aeabi_f2d>
 800c724:	a34c      	add	r3, pc, #304	; (adr r3, 800c858 <PS4Tune+0x560>)
 800c726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72a:	f7f3 ff65 	bl	80005f8 <__aeabi_dmul>
 800c72e:	4602      	mov	r2, r0
 800c730:	460b      	mov	r3, r1
 800c732:	4614      	mov	r4, r2
 800c734:	461d      	mov	r5, r3
 800c736:	4b53      	ldr	r3, [pc, #332]	; (800c884 <PS4Tune+0x58c>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7f3 ff04 	bl	8000548 <__aeabi_f2d>
 800c740:	4602      	mov	r2, r0
 800c742:	460b      	mov	r3, r1
 800c744:	4620      	mov	r0, r4
 800c746:	4629      	mov	r1, r5
 800c748:	f7f3 fda0 	bl	800028c <__adddf3>
 800c74c:	4602      	mov	r2, r0
 800c74e:	460b      	mov	r3, r1
 800c750:	4610      	mov	r0, r2
 800c752:	4619      	mov	r1, r3
 800c754:	f7f4 fa48 	bl	8000be8 <__aeabi_d2f>
 800c758:	4603      	mov	r3, r0
 800c75a:	4a4a      	ldr	r2, [pc, #296]	; (800c884 <PS4Tune+0x58c>)
 800c75c:	6013      	str	r3, [r2, #0]
			break;
 800c75e:	e0bc      	b.n	800c8da <PS4Tune+0x5e2>
		}
	}
	else
	{
		switch(wheel)
 800c760:	4b44      	ldr	r3, [pc, #272]	; (800c874 <PS4Tune+0x57c>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	3b01      	subs	r3, #1
 800c766:	2b03      	cmp	r3, #3
 800c768:	f200 80b7 	bhi.w	800c8da <PS4Tune+0x5e2>
 800c76c:	a201      	add	r2, pc, #4	; (adr r2, 800c774 <PS4Tune+0x47c>)
 800c76e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c772:	bf00      	nop
 800c774:	0800c785 	.word	0x0800c785
 800c778:	0800c7cb 	.word	0x0800c7cb
 800c77c:	0800c811 	.word	0x0800c811
 800c780:	0800c895 	.word	0x0800c895
		{
		case 1:
			AD += ps4.joyR_y * 0.00001;
 800c784:	4b38      	ldr	r3, [pc, #224]	; (800c868 <PS4Tune+0x570>)
 800c786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c788:	4618      	mov	r0, r3
 800c78a:	f7f3 fedd 	bl	8000548 <__aeabi_f2d>
 800c78e:	a334      	add	r3, pc, #208	; (adr r3, 800c860 <PS4Tune+0x568>)
 800c790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c794:	f7f3 ff30 	bl	80005f8 <__aeabi_dmul>
 800c798:	4602      	mov	r2, r0
 800c79a:	460b      	mov	r3, r1
 800c79c:	4614      	mov	r4, r2
 800c79e:	461d      	mov	r5, r3
 800c7a0:	4b39      	ldr	r3, [pc, #228]	; (800c888 <PS4Tune+0x590>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f7f3 fecf 	bl	8000548 <__aeabi_f2d>
 800c7aa:	4602      	mov	r2, r0
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	4629      	mov	r1, r5
 800c7b2:	f7f3 fd6b 	bl	800028c <__adddf3>
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	460b      	mov	r3, r1
 800c7ba:	4610      	mov	r0, r2
 800c7bc:	4619      	mov	r1, r3
 800c7be:	f7f4 fa13 	bl	8000be8 <__aeabi_d2f>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	4a30      	ldr	r2, [pc, #192]	; (800c888 <PS4Tune+0x590>)
 800c7c6:	6013      	str	r3, [r2, #0]
			break;
 800c7c8:	e087      	b.n	800c8da <PS4Tune+0x5e2>
		case 2:
			BD += ps4.joyR_y * 0.00001;
 800c7ca:	4b27      	ldr	r3, [pc, #156]	; (800c868 <PS4Tune+0x570>)
 800c7cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7f3 feba 	bl	8000548 <__aeabi_f2d>
 800c7d4:	a322      	add	r3, pc, #136	; (adr r3, 800c860 <PS4Tune+0x568>)
 800c7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7da:	f7f3 ff0d 	bl	80005f8 <__aeabi_dmul>
 800c7de:	4602      	mov	r2, r0
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	4614      	mov	r4, r2
 800c7e4:	461d      	mov	r5, r3
 800c7e6:	4b29      	ldr	r3, [pc, #164]	; (800c88c <PS4Tune+0x594>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f7f3 feac 	bl	8000548 <__aeabi_f2d>
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	4629      	mov	r1, r5
 800c7f8:	f7f3 fd48 	bl	800028c <__adddf3>
 800c7fc:	4602      	mov	r2, r0
 800c7fe:	460b      	mov	r3, r1
 800c800:	4610      	mov	r0, r2
 800c802:	4619      	mov	r1, r3
 800c804:	f7f4 f9f0 	bl	8000be8 <__aeabi_d2f>
 800c808:	4603      	mov	r3, r0
 800c80a:	4a20      	ldr	r2, [pc, #128]	; (800c88c <PS4Tune+0x594>)
 800c80c:	6013      	str	r3, [r2, #0]
			break;
 800c80e:	e064      	b.n	800c8da <PS4Tune+0x5e2>
		case 3:
			CD += ps4.joyR_y * 0.00001;
 800c810:	4b15      	ldr	r3, [pc, #84]	; (800c868 <PS4Tune+0x570>)
 800c812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c814:	4618      	mov	r0, r3
 800c816:	f7f3 fe97 	bl	8000548 <__aeabi_f2d>
 800c81a:	a311      	add	r3, pc, #68	; (adr r3, 800c860 <PS4Tune+0x568>)
 800c81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c820:	f7f3 feea 	bl	80005f8 <__aeabi_dmul>
 800c824:	4602      	mov	r2, r0
 800c826:	460b      	mov	r3, r1
 800c828:	4614      	mov	r4, r2
 800c82a:	461d      	mov	r5, r3
 800c82c:	4b18      	ldr	r3, [pc, #96]	; (800c890 <PS4Tune+0x598>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4618      	mov	r0, r3
 800c832:	f7f3 fe89 	bl	8000548 <__aeabi_f2d>
 800c836:	4602      	mov	r2, r0
 800c838:	460b      	mov	r3, r1
 800c83a:	4620      	mov	r0, r4
 800c83c:	4629      	mov	r1, r5
 800c83e:	f7f3 fd25 	bl	800028c <__adddf3>
 800c842:	4602      	mov	r2, r0
 800c844:	460b      	mov	r3, r1
 800c846:	4610      	mov	r0, r2
 800c848:	4619      	mov	r1, r3
 800c84a:	f7f4 f9cd 	bl	8000be8 <__aeabi_d2f>
 800c84e:	4603      	mov	r3, r0
 800c850:	4a0f      	ldr	r2, [pc, #60]	; (800c890 <PS4Tune+0x598>)
 800c852:	6013      	str	r3, [r2, #0]
			break;
 800c854:	e041      	b.n	800c8da <PS4Tune+0x5e2>
 800c856:	bf00      	nop
 800c858:	eb1c432d 	.word	0xeb1c432d
 800c85c:	3f1a36e2 	.word	0x3f1a36e2
 800c860:	88e368f1 	.word	0x88e368f1
 800c864:	3ee4f8b5 	.word	0x3ee4f8b5
 800c868:	20009dc0 	.word	0x20009dc0
 800c86c:	20009b90 	.word	0x20009b90
 800c870:	20007174 	.word	0x20007174
 800c874:	200064f4 	.word	0x200064f4
 800c878:	2000716c 	.word	0x2000716c
 800c87c:	20009198 	.word	0x20009198
 800c880:	20009684 	.word	0x20009684
 800c884:	20006a24 	.word	0x20006a24
 800c888:	2000a08c 	.word	0x2000a08c
 800c88c:	20007168 	.word	0x20007168
 800c890:	200064f8 	.word	0x200064f8
		case 4:
			DD += ps4.joyR_y * 0.00001;
 800c894:	4b80      	ldr	r3, [pc, #512]	; (800ca98 <PS4Tune+0x7a0>)
 800c896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c898:	4618      	mov	r0, r3
 800c89a:	f7f3 fe55 	bl	8000548 <__aeabi_f2d>
 800c89e:	a37c      	add	r3, pc, #496	; (adr r3, 800ca90 <PS4Tune+0x798>)
 800c8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a4:	f7f3 fea8 	bl	80005f8 <__aeabi_dmul>
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	460b      	mov	r3, r1
 800c8ac:	4614      	mov	r4, r2
 800c8ae:	461d      	mov	r5, r3
 800c8b0:	4b7a      	ldr	r3, [pc, #488]	; (800ca9c <PS4Tune+0x7a4>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f7f3 fe47 	bl	8000548 <__aeabi_f2d>
 800c8ba:	4602      	mov	r2, r0
 800c8bc:	460b      	mov	r3, r1
 800c8be:	4620      	mov	r0, r4
 800c8c0:	4629      	mov	r1, r5
 800c8c2:	f7f3 fce3 	bl	800028c <__adddf3>
 800c8c6:	4602      	mov	r2, r0
 800c8c8:	460b      	mov	r3, r1
 800c8ca:	4610      	mov	r0, r2
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	f7f4 f98b 	bl	8000be8 <__aeabi_d2f>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	4a71      	ldr	r2, [pc, #452]	; (800ca9c <PS4Tune+0x7a4>)
 800c8d6:	6013      	str	r3, [r2, #0]
			break;
 800c8d8:	bf00      	nop
		}
	}

	if(ps4.button == OPTION)
 800c8da:	4b6f      	ldr	r3, [pc, #444]	; (800ca98 <PS4Tune+0x7a0>)
 800c8dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8e2:	f040 80b7 	bne.w	800ca54 <PS4Tune+0x75c>
	{
		while(ps4.button == OPTION);
 800c8e6:	bf00      	nop
 800c8e8:	4b6b      	ldr	r3, [pc, #428]	; (800ca98 <PS4Tune+0x7a0>)
 800c8ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8f0:	d0fa      	beq.n	800c8e8 <PS4Tune+0x5f0>
		switch(wheel)
 800c8f2:	4b6b      	ldr	r3, [pc, #428]	; (800caa0 <PS4Tune+0x7a8>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	3b01      	subs	r3, #1
 800c8f8:	2b03      	cmp	r3, #3
 800c8fa:	f200 80ac 	bhi.w	800ca56 <PS4Tune+0x75e>
 800c8fe:	a201      	add	r2, pc, #4	; (adr r2, 800c904 <PS4Tune+0x60c>)
 800c900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c904:	0800c965 	.word	0x0800c965
 800c908:	0800c915 	.word	0x0800c915
 800c90c:	0800c9b5 	.word	0x0800c9b5
 800c910:	0800ca05 	.word	0x0800ca05
		{
		case 2:
			fFRightVG[3] = AP;
 800c914:	4b63      	ldr	r3, [pc, #396]	; (800caa4 <PS4Tune+0x7ac>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	4a63      	ldr	r2, [pc, #396]	; (800caa8 <PS4Tune+0x7b0>)
 800c91a:	60d3      	str	r3, [r2, #12]
			fFRightVG[4] = AI;
 800c91c:	4b63      	ldr	r3, [pc, #396]	; (800caac <PS4Tune+0x7b4>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4a61      	ldr	r2, [pc, #388]	; (800caa8 <PS4Tune+0x7b0>)
 800c922:	6113      	str	r3, [r2, #16]
			fFRightVG[5] = AD;
 800c924:	4b62      	ldr	r3, [pc, #392]	; (800cab0 <PS4Tune+0x7b8>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	4a5f      	ldr	r2, [pc, #380]	; (800caa8 <PS4Tune+0x7b0>)
 800c92a:	6153      	str	r3, [r2, #20]
			PIDGainSet(KP, AP, &fright_vel);
 800c92c:	4b5d      	ldr	r3, [pc, #372]	; (800caa4 <PS4Tune+0x7ac>)
 800c92e:	edd3 7a00 	vldr	s15, [r3]
 800c932:	4960      	ldr	r1, [pc, #384]	; (800cab4 <PS4Tune+0x7bc>)
 800c934:	eeb0 0a67 	vmov.f32	s0, s15
 800c938:	2004      	movs	r0, #4
 800c93a:	f7f8 fd84 	bl	8005446 <PIDGainSet>
			PIDGainSet(KI, AI, &fright_vel);
 800c93e:	4b5b      	ldr	r3, [pc, #364]	; (800caac <PS4Tune+0x7b4>)
 800c940:	edd3 7a00 	vldr	s15, [r3]
 800c944:	495b      	ldr	r1, [pc, #364]	; (800cab4 <PS4Tune+0x7bc>)
 800c946:	eeb0 0a67 	vmov.f32	s0, s15
 800c94a:	2005      	movs	r0, #5
 800c94c:	f7f8 fd7b 	bl	8005446 <PIDGainSet>
			PIDGainSet(KD, AD, &fright_vel);
 800c950:	4b57      	ldr	r3, [pc, #348]	; (800cab0 <PS4Tune+0x7b8>)
 800c952:	edd3 7a00 	vldr	s15, [r3]
 800c956:	4957      	ldr	r1, [pc, #348]	; (800cab4 <PS4Tune+0x7bc>)
 800c958:	eeb0 0a67 	vmov.f32	s0, s15
 800c95c:	2006      	movs	r0, #6
 800c95e:	f7f8 fd72 	bl	8005446 <PIDGainSet>
			break;
 800c962:	e078      	b.n	800ca56 <PS4Tune+0x75e>

		case 1:
			fFLeftVG[3] = BP;
 800c964:	4b54      	ldr	r3, [pc, #336]	; (800cab8 <PS4Tune+0x7c0>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	4a54      	ldr	r2, [pc, #336]	; (800cabc <PS4Tune+0x7c4>)
 800c96a:	60d3      	str	r3, [r2, #12]
			fFLeftVG[4] = BI;
 800c96c:	4b54      	ldr	r3, [pc, #336]	; (800cac0 <PS4Tune+0x7c8>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	4a52      	ldr	r2, [pc, #328]	; (800cabc <PS4Tune+0x7c4>)
 800c972:	6113      	str	r3, [r2, #16]
			fFLeftVG[5] = BD;
 800c974:	4b53      	ldr	r3, [pc, #332]	; (800cac4 <PS4Tune+0x7cc>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	4a50      	ldr	r2, [pc, #320]	; (800cabc <PS4Tune+0x7c4>)
 800c97a:	6153      	str	r3, [r2, #20]
			PIDGainSet(KP, BP, &fleft_vel);
 800c97c:	4b4e      	ldr	r3, [pc, #312]	; (800cab8 <PS4Tune+0x7c0>)
 800c97e:	edd3 7a00 	vldr	s15, [r3]
 800c982:	4951      	ldr	r1, [pc, #324]	; (800cac8 <PS4Tune+0x7d0>)
 800c984:	eeb0 0a67 	vmov.f32	s0, s15
 800c988:	2004      	movs	r0, #4
 800c98a:	f7f8 fd5c 	bl	8005446 <PIDGainSet>
			PIDGainSet(KI, BI, &fleft_vel);
 800c98e:	4b4c      	ldr	r3, [pc, #304]	; (800cac0 <PS4Tune+0x7c8>)
 800c990:	edd3 7a00 	vldr	s15, [r3]
 800c994:	494c      	ldr	r1, [pc, #304]	; (800cac8 <PS4Tune+0x7d0>)
 800c996:	eeb0 0a67 	vmov.f32	s0, s15
 800c99a:	2005      	movs	r0, #5
 800c99c:	f7f8 fd53 	bl	8005446 <PIDGainSet>
			PIDGainSet(KD, BD, &fleft_vel);
 800c9a0:	4b48      	ldr	r3, [pc, #288]	; (800cac4 <PS4Tune+0x7cc>)
 800c9a2:	edd3 7a00 	vldr	s15, [r3]
 800c9a6:	4948      	ldr	r1, [pc, #288]	; (800cac8 <PS4Tune+0x7d0>)
 800c9a8:	eeb0 0a67 	vmov.f32	s0, s15
 800c9ac:	2006      	movs	r0, #6
 800c9ae:	f7f8 fd4a 	bl	8005446 <PIDGainSet>
			break;
 800c9b2:	e050      	b.n	800ca56 <PS4Tune+0x75e>

		case 3:
			fBLeftVG[3] = CP;
 800c9b4:	4b45      	ldr	r3, [pc, #276]	; (800cacc <PS4Tune+0x7d4>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	4a45      	ldr	r2, [pc, #276]	; (800cad0 <PS4Tune+0x7d8>)
 800c9ba:	60d3      	str	r3, [r2, #12]
			fBLeftVG[4] = CI;
 800c9bc:	4b45      	ldr	r3, [pc, #276]	; (800cad4 <PS4Tune+0x7dc>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a43      	ldr	r2, [pc, #268]	; (800cad0 <PS4Tune+0x7d8>)
 800c9c2:	6113      	str	r3, [r2, #16]
			fBLeftVG[5] = CD;
 800c9c4:	4b44      	ldr	r3, [pc, #272]	; (800cad8 <PS4Tune+0x7e0>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4a41      	ldr	r2, [pc, #260]	; (800cad0 <PS4Tune+0x7d8>)
 800c9ca:	6153      	str	r3, [r2, #20]
			PIDGainSet(KP, CP, &bleft_vel);
 800c9cc:	4b3f      	ldr	r3, [pc, #252]	; (800cacc <PS4Tune+0x7d4>)
 800c9ce:	edd3 7a00 	vldr	s15, [r3]
 800c9d2:	4942      	ldr	r1, [pc, #264]	; (800cadc <PS4Tune+0x7e4>)
 800c9d4:	eeb0 0a67 	vmov.f32	s0, s15
 800c9d8:	2004      	movs	r0, #4
 800c9da:	f7f8 fd34 	bl	8005446 <PIDGainSet>
			PIDGainSet(KI, CI, &bleft_vel);
 800c9de:	4b3d      	ldr	r3, [pc, #244]	; (800cad4 <PS4Tune+0x7dc>)
 800c9e0:	edd3 7a00 	vldr	s15, [r3]
 800c9e4:	493d      	ldr	r1, [pc, #244]	; (800cadc <PS4Tune+0x7e4>)
 800c9e6:	eeb0 0a67 	vmov.f32	s0, s15
 800c9ea:	2005      	movs	r0, #5
 800c9ec:	f7f8 fd2b 	bl	8005446 <PIDGainSet>
			PIDGainSet(KD, CD, &bleft_vel);
 800c9f0:	4b39      	ldr	r3, [pc, #228]	; (800cad8 <PS4Tune+0x7e0>)
 800c9f2:	edd3 7a00 	vldr	s15, [r3]
 800c9f6:	4939      	ldr	r1, [pc, #228]	; (800cadc <PS4Tune+0x7e4>)
 800c9f8:	eeb0 0a67 	vmov.f32	s0, s15
 800c9fc:	2006      	movs	r0, #6
 800c9fe:	f7f8 fd22 	bl	8005446 <PIDGainSet>
			break;
 800ca02:	e028      	b.n	800ca56 <PS4Tune+0x75e>

		case 4:
			fBRightVG[3] = DP;
 800ca04:	4b36      	ldr	r3, [pc, #216]	; (800cae0 <PS4Tune+0x7e8>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	4a36      	ldr	r2, [pc, #216]	; (800cae4 <PS4Tune+0x7ec>)
 800ca0a:	60d3      	str	r3, [r2, #12]
			fBRightVG[4] = DI;
 800ca0c:	4b36      	ldr	r3, [pc, #216]	; (800cae8 <PS4Tune+0x7f0>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4a34      	ldr	r2, [pc, #208]	; (800cae4 <PS4Tune+0x7ec>)
 800ca12:	6113      	str	r3, [r2, #16]
			fBRightVG[5] = DD;
 800ca14:	4b21      	ldr	r3, [pc, #132]	; (800ca9c <PS4Tune+0x7a4>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4a32      	ldr	r2, [pc, #200]	; (800cae4 <PS4Tune+0x7ec>)
 800ca1a:	6153      	str	r3, [r2, #20]
			PIDGainSet(KP, DP, &bright_vel);
 800ca1c:	4b30      	ldr	r3, [pc, #192]	; (800cae0 <PS4Tune+0x7e8>)
 800ca1e:	edd3 7a00 	vldr	s15, [r3]
 800ca22:	4932      	ldr	r1, [pc, #200]	; (800caec <PS4Tune+0x7f4>)
 800ca24:	eeb0 0a67 	vmov.f32	s0, s15
 800ca28:	2004      	movs	r0, #4
 800ca2a:	f7f8 fd0c 	bl	8005446 <PIDGainSet>
			PIDGainSet(KI, DI, &bright_vel);
 800ca2e:	4b2e      	ldr	r3, [pc, #184]	; (800cae8 <PS4Tune+0x7f0>)
 800ca30:	edd3 7a00 	vldr	s15, [r3]
 800ca34:	492d      	ldr	r1, [pc, #180]	; (800caec <PS4Tune+0x7f4>)
 800ca36:	eeb0 0a67 	vmov.f32	s0, s15
 800ca3a:	2005      	movs	r0, #5
 800ca3c:	f7f8 fd03 	bl	8005446 <PIDGainSet>
			PIDGainSet(KD, DD, &bright_vel);
 800ca40:	4b16      	ldr	r3, [pc, #88]	; (800ca9c <PS4Tune+0x7a4>)
 800ca42:	edd3 7a00 	vldr	s15, [r3]
 800ca46:	4929      	ldr	r1, [pc, #164]	; (800caec <PS4Tune+0x7f4>)
 800ca48:	eeb0 0a67 	vmov.f32	s0, s15
 800ca4c:	2006      	movs	r0, #6
 800ca4e:	f7f8 fcfa 	bl	8005446 <PIDGainSet>
			break;
 800ca52:	e000      	b.n	800ca56 <PS4Tune+0x75e>
		}
	}
 800ca54:	bf00      	nop

	if(HAL_GetTick() - before >= TunePIDMode)
 800ca56:	f001 fb0d 	bl	800e074 <HAL_GetTick>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	4a24      	ldr	r2, [pc, #144]	; (800caf0 <PS4Tune+0x7f8>)
 800ca5e:	6812      	ldr	r2, [r2, #0]
 800ca60:	1a9b      	subs	r3, r3, r2
 800ca62:	2b7c      	cmp	r3, #124	; 0x7c
 800ca64:	d911      	bls.n	800ca8a <PS4Tune+0x792>
	{
		led3 = !led3;
 800ca66:	4b23      	ldr	r3, [pc, #140]	; (800caf4 <PS4Tune+0x7fc>)
 800ca68:	785b      	ldrb	r3, [r3, #1]
 800ca6a:	b25b      	sxtb	r3, r3
 800ca6c:	4a21      	ldr	r2, [pc, #132]	; (800caf4 <PS4Tune+0x7fc>)
 800ca6e:	43db      	mvns	r3, r3
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	09db      	lsrs	r3, r3, #7
 800ca74:	b2d9      	uxtb	r1, r3
 800ca76:	7853      	ldrb	r3, [r2, #1]
 800ca78:	f361 13c7 	bfi	r3, r1, #7, #1
 800ca7c:	7053      	strb	r3, [r2, #1]
		before = HAL_GetTick();
 800ca7e:	f001 faf9 	bl	800e074 <HAL_GetTick>
 800ca82:	4603      	mov	r3, r0
 800ca84:	461a      	mov	r2, r3
 800ca86:	4b1a      	ldr	r3, [pc, #104]	; (800caf0 <PS4Tune+0x7f8>)
 800ca88:	601a      	str	r2, [r3, #0]
	}
}
 800ca8a:	bf00      	nop
 800ca8c:	bdb0      	pop	{r4, r5, r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	88e368f1 	.word	0x88e368f1
 800ca94:	3ee4f8b5 	.word	0x3ee4f8b5
 800ca98:	20009dc0 	.word	0x20009dc0
 800ca9c:	2000986c 	.word	0x2000986c
 800caa0:	200064f4 	.word	0x200064f4
 800caa4:	2000a0b0 	.word	0x2000a0b0
 800caa8:	20000024 	.word	0x20000024
 800caac:	2000716c 	.word	0x2000716c
 800cab0:	2000a08c 	.word	0x2000a08c
 800cab4:	20007324 	.word	0x20007324
 800cab8:	20007560 	.word	0x20007560
 800cabc:	20000008 	.word	0x20000008
 800cac0:	20009198 	.word	0x20009198
 800cac4:	20007168 	.word	0x20007168
 800cac8:	200078a8 	.word	0x200078a8
 800cacc:	200094f0 	.word	0x200094f0
 800cad0:	20000040 	.word	0x20000040
 800cad4:	20009684 	.word	0x20009684
 800cad8:	200064f8 	.word	0x200064f8
 800cadc:	20006998 	.word	0x20006998
 800cae0:	20009b90 	.word	0x20009b90
 800cae4:	2000005c 	.word	0x2000005c
 800cae8:	20006a24 	.word	0x20006a24
 800caec:	20009b2c 	.word	0x20009b2c
 800caf0:	20007250 	.word	0x20007250
 800caf4:	40020814 	.word	0x40020814

0800caf8 <ILI9341_Init_List>:
Tune_Float_t lcdFloatList[NUM_FLOAT_UPDATE]={
//		varF(ps4.joyR_x, 0, 0),
};


void ILI9341_Init_List(void){
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b084      	sub	sp, #16
 800cafc:	af02      	add	r7, sp, #8
	ILI9341row = 5;
 800cafe:	4b23      	ldr	r3, [pc, #140]	; (800cb8c <ILI9341_Init_List+0x94>)
 800cb00:	2205      	movs	r2, #5
 800cb02:	601a      	str	r2, [r3, #0]

	for(int i=0; i<NUM_INT_UPDATE; i++){
 800cb04:	2300      	movs	r3, #0
 800cb06:	607b      	str	r3, [r7, #4]
 800cb08:	e018      	b.n	800cb3c <ILI9341_Init_List+0x44>
		ILI9341_Draw_String(5, ILI9341row, WHITE, BLACK, lcdIntList[i].varName, 2);
 800cb0a:	4b20      	ldr	r3, [pc, #128]	; (800cb8c <ILI9341_Init_List+0x94>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	4619      	mov	r1, r3
 800cb10:	4a1f      	ldr	r2, [pc, #124]	; (800cb90 <ILI9341_Init_List+0x98>)
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	011b      	lsls	r3, r3, #4
 800cb16:	4413      	add	r3, r2
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	2202      	movs	r2, #2
 800cb1c:	9201      	str	r2, [sp, #4]
 800cb1e:	9300      	str	r3, [sp, #0]
 800cb20:	2300      	movs	r3, #0
 800cb22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb26:	2005      	movs	r0, #5
 800cb28:	f7f7 fb16 	bl	8004158 <ILI9341_Draw_String>
		ILI9341row += 15;
 800cb2c:	4b17      	ldr	r3, [pc, #92]	; (800cb8c <ILI9341_Init_List+0x94>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	330f      	adds	r3, #15
 800cb32:	4a16      	ldr	r2, [pc, #88]	; (800cb8c <ILI9341_Init_List+0x94>)
 800cb34:	6013      	str	r3, [r2, #0]
	for(int i=0; i<NUM_INT_UPDATE; i++){
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	3301      	adds	r3, #1
 800cb3a:	607b      	str	r3, [r7, #4]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	dde3      	ble.n	800cb0a <ILI9341_Init_List+0x12>
	}

	for(int i=0; i<NUM_FLOAT_UPDATE; i++){
 800cb42:	2300      	movs	r3, #0
 800cb44:	603b      	str	r3, [r7, #0]
 800cb46:	e018      	b.n	800cb7a <ILI9341_Init_List+0x82>
		ILI9341_Draw_String(5, ILI9341row, WHITE, BLACK, lcdFloatList[i].varName, 2);
 800cb48:	4b10      	ldr	r3, [pc, #64]	; (800cb8c <ILI9341_Init_List+0x94>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	4a11      	ldr	r2, [pc, #68]	; (800cb94 <ILI9341_Init_List+0x9c>)
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	011b      	lsls	r3, r3, #4
 800cb54:	4413      	add	r3, r2
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	2202      	movs	r2, #2
 800cb5a:	9201      	str	r2, [sp, #4]
 800cb5c:	9300      	str	r3, [sp, #0]
 800cb5e:	2300      	movs	r3, #0
 800cb60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb64:	2005      	movs	r0, #5
 800cb66:	f7f7 faf7 	bl	8004158 <ILI9341_Draw_String>
		ILI9341row += 15;
 800cb6a:	4b08      	ldr	r3, [pc, #32]	; (800cb8c <ILI9341_Init_List+0x94>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	330f      	adds	r3, #15
 800cb70:	4a06      	ldr	r2, [pc, #24]	; (800cb8c <ILI9341_Init_List+0x94>)
 800cb72:	6013      	str	r3, [r2, #0]
	for(int i=0; i<NUM_FLOAT_UPDATE; i++){
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	3301      	adds	r3, #1
 800cb78:	603b      	str	r3, [r7, #0]
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	dde3      	ble.n	800cb48 <ILI9341_Init_List+0x50>
	}
}
 800cb80:	bf00      	nop
 800cb82:	bf00      	nop
 800cb84:	3708      	adds	r7, #8
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
 800cb8a:	bf00      	nop
 800cb8c:	20006758 	.word	0x20006758
 800cb90:	200002e4 	.word	0x200002e4
 800cb94:	200002f4 	.word	0x200002f4

0800cb98 <DMA1_Stream0_IRQHandler>:
#include "dma.h"

/*I2C*/

void DMA1_Stream0_IRQHandler(void)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
 800cb9c:	4802      	ldr	r0, [pc, #8]	; (800cba8 <DMA1_Stream0_IRQHandler+0x10>)
 800cb9e:	f002 fbed 	bl	800f37c <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_uart5_rx);

}
 800cba2:	bf00      	nop
 800cba4:	bd80      	pop	{r7, pc}
 800cba6:	bf00      	nop
 800cba8:	20009d54 	.word	0x20009d54

0800cbac <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hdma_usart3_rx);
	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
 800cbb0:	4802      	ldr	r0, [pc, #8]	; (800cbbc <DMA1_Stream3_IRQHandler+0x10>)
 800cbb2:	f002 fbe3 	bl	800f37c <HAL_DMA_IRQHandler>
}
 800cbb6:	bf00      	nop
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	2000655c 	.word	0x2000655c

0800cbc0 <DMA1_Stream2_IRQHandler>:

void DMA1_Stream2_IRQHandler(void)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800cbc4:	4802      	ldr	r0, [pc, #8]	; (800cbd0 <DMA1_Stream2_IRQHandler+0x10>)
 800cbc6:	f002 fbd9 	bl	800f37c <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
//	HAL_DMA_IRQHandler(&hi2c3_rx_dma);
}
 800cbca:	bf00      	nop
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	20005a4c 	.word	0x20005a4c

0800cbd4 <DMA1_Stream1_IRQHandler>:

/*UART*/
void DMA1_Stream1_IRQHandler(void)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800cbd8:	4802      	ldr	r0, [pc, #8]	; (800cbe4 <DMA1_Stream1_IRQHandler+0x10>)
 800cbda:	f002 fbcf 	bl	800f37c <HAL_DMA_IRQHandler>
}
 800cbde:	bf00      	nop
 800cbe0:	bd80      	pop	{r7, pc}
 800cbe2:	bf00      	nop
 800cbe4:	20005b90 	.word	0x20005b90

0800cbe8 <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800cbec:	4802      	ldr	r0, [pc, #8]	; (800cbf8 <DMA1_Stream4_IRQHandler+0x10>)
 800cbee:	f002 fbc5 	bl	800f37c <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_usart3_tx);
//	HAL_DMA_IRQHandler(&hi2c3_tx_dma);
}
 800cbf2:	bf00      	nop
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	20006204 	.word	0x20006204

0800cbfc <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800cc00:	4802      	ldr	r0, [pc, #8]	; (800cc0c <DMA1_Stream5_IRQHandler+0x10>)
 800cc02:	f002 fbbb 	bl	800f37c <HAL_DMA_IRQHandler>
}
 800cc06:	bf00      	nop
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	20005aac 	.word	0x20005aac

0800cc10 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	af00      	add	r7, sp, #0

//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800cc14:	4802      	ldr	r0, [pc, #8]	; (800cc20 <DMA1_Stream6_IRQHandler+0x10>)
 800cc16:	f002 fbb1 	bl	800f37c <HAL_DMA_IRQHandler>
}
 800cc1a:	bf00      	nop
 800cc1c:	bd80      	pop	{r7, pc}
 800cc1e:	bf00      	nop
 800cc20:	20005d98 	.word	0x20005d98

0800cc24 <DMA1_Stream7_IRQHandler>:

void DMA1_Stream7_IRQHandler(void){
 800cc24:	b580      	push	{r7, lr}
 800cc26:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
//	HAL_DMA_IRQHandler(&hi2c2_tx_dma);
	HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800cc28:	4802      	ldr	r0, [pc, #8]	; (800cc34 <DMA1_Stream7_IRQHandler+0x10>)
 800cc2a:	f002 fba7 	bl	800f37c <HAL_DMA_IRQHandler>
}
 800cc2e:	bf00      	nop
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop
 800cc34:	20006264 	.word	0x20006264

0800cc38 <DMA2_Stream0_IRQHandler>:


void DMA2_Stream0_IRQHandler(void)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc1);
 800cc3c:	4802      	ldr	r0, [pc, #8]	; (800cc48 <DMA2_Stream0_IRQHandler+0x10>)
 800cc3e:	f002 fb9d 	bl	800f37c <HAL_DMA_IRQHandler>
}
 800cc42:	bf00      	nop
 800cc44:	bd80      	pop	{r7, pc}
 800cc46:	bf00      	nop
 800cc48:	200063fc 	.word	0x200063fc

0800cc4c <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc3);
 800cc50:	4802      	ldr	r0, [pc, #8]	; (800cc5c <DMA2_Stream1_IRQHandler+0x10>)
 800cc52:	f002 fb93 	bl	800f37c <HAL_DMA_IRQHandler>
}
 800cc56:	bf00      	nop
 800cc58:	bd80      	pop	{r7, pc}
 800cc5a:	bf00      	nop
 800cc5c:	2000630c 	.word	0x2000630c

0800cc60 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800cc64:	4802      	ldr	r0, [pc, #8]	; (800cc70 <DMA2_Stream2_IRQHandler+0x10>)
 800cc66:	f002 fb89 	bl	800f37c <HAL_DMA_IRQHandler>
}
 800cc6a:	bf00      	nop
 800cc6c:	bd80      	pop	{r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	20009cc8 	.word	0x20009cc8

0800cc74 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc2);
 800cc78:	4802      	ldr	r0, [pc, #8]	; (800cc84 <DMA2_Stream3_IRQHandler+0x10>)
 800cc7a:	f002 fb7f 	bl	800f37c <HAL_DMA_IRQHandler>
}
 800cc7e:	bf00      	nop
 800cc80:	bd80      	pop	{r7, pc}
 800cc82:	bf00      	nop
 800cc84:	2000645c 	.word	0x2000645c

0800cc88 <DMA2_Stream5_IRQHandler>:

void DMA2_Stream5_IRQHandler(void)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800cc8c:	4802      	ldr	r0, [pc, #8]	; (800cc98 <DMA2_Stream5_IRQHandler+0x10>)
 800cc8e:	f002 fb75 	bl	800f37c <HAL_DMA_IRQHandler>
}
 800cc92:	bf00      	nop
 800cc94:	bd80      	pop	{r7, pc}
 800cc96:	bf00      	nop
 800cc98:	2000a0bc 	.word	0x2000a0bc

0800cc9c <NMI_Handler>:
int _counter = 0;
/**
 * * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	af00      	add	r7, sp, #0

}
 800cca0:	bf00      	nop
 800cca2:	46bd      	mov	sp, r7
 800cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca8:	4770      	bx	lr

0800ccaa <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800ccaa:	b480      	push	{r7}
 800ccac:	af00      	add	r7, sp, #0

}
 800ccae:	bf00      	nop
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr

0800ccb8 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	af00      	add	r7, sp, #0

	while(1){
 800ccbc:	e7fe      	b.n	800ccbc <MemManage_Handler+0x4>

0800ccbe <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800ccbe:	b480      	push	{r7}
 800ccc0:	af00      	add	r7, sp, #0

}
 800ccc2:	bf00      	nop
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccca:	4770      	bx	lr

0800cccc <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800cccc:	b480      	push	{r7}
 800ccce:	af00      	add	r7, sp, #0

}
 800ccd0:	bf00      	nop
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr

0800ccda <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800ccda:	b480      	push	{r7}
 800ccdc:	af00      	add	r7, sp, #0

}
 800ccde:	bf00      	nop
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr

0800cce8 <TIM1_UP_TIM10_IRQHandler>:
//
//}


void TIM1_UP_TIM10_IRQHandler(void)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	af00      	add	r7, sp, #0
#ifdef USED_QEI1
	if (htim1.Instance -> CR1 == 129)
 800ccec:	4b12      	ldr	r3, [pc, #72]	; (800cd38 <TIM1_UP_TIM10_IRQHandler+0x50>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	2b81      	cmp	r3, #129	; 0x81
 800ccf4:	d109      	bne.n	800cd0a <TIM1_UP_TIM10_IRQHandler+0x22>
	{
		BIOS_QEI1.signbit += 1;
 800ccf6:	4b11      	ldr	r3, [pc, #68]	; (800cd3c <TIM1_UP_TIM10_IRQHandler+0x54>)
 800ccf8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ccfc:	b29b      	uxth	r3, r3
 800ccfe:	3301      	adds	r3, #1
 800cd00:	b29b      	uxth	r3, r3
 800cd02:	b21a      	sxth	r2, r3
 800cd04:	4b0d      	ldr	r3, [pc, #52]	; (800cd3c <TIM1_UP_TIM10_IRQHandler+0x54>)
 800cd06:	805a      	strh	r2, [r3, #2]
 800cd08:	e00d      	b.n	800cd26 <TIM1_UP_TIM10_IRQHandler+0x3e>
	}
	else if (htim1.Instance ->CR1 == 145)
 800cd0a:	4b0b      	ldr	r3, [pc, #44]	; (800cd38 <TIM1_UP_TIM10_IRQHandler+0x50>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	2b91      	cmp	r3, #145	; 0x91
 800cd12:	d108      	bne.n	800cd26 <TIM1_UP_TIM10_IRQHandler+0x3e>
	{
		BIOS_QEI1.signbit -= 1;
 800cd14:	4b09      	ldr	r3, [pc, #36]	; (800cd3c <TIM1_UP_TIM10_IRQHandler+0x54>)
 800cd16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	3b01      	subs	r3, #1
 800cd1e:	b29b      	uxth	r3, r3
 800cd20:	b21a      	sxth	r2, r3
 800cd22:	4b06      	ldr	r3, [pc, #24]	; (800cd3c <TIM1_UP_TIM10_IRQHandler+0x54>)
 800cd24:	805a      	strh	r2, [r3, #2]
	}
	htim1.Instance -> SR = 0;
 800cd26:	4b04      	ldr	r3, [pc, #16]	; (800cd38 <TIM1_UP_TIM10_IRQHandler+0x50>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	611a      	str	r2, [r3, #16]
	QEIDelay(100);
 800cd2e:	2064      	movs	r0, #100	; 0x64
 800cd30:	f7f5 f8f2 	bl	8001f18 <QEIDelay>
#else
	HAL_TIM_IRQHandler(&htim1);
#endif
}
 800cd34:	bf00      	nop
 800cd36:	bd80      	pop	{r7, pc}
 800cd38:	20005f60 	.word	0x20005f60
 800cd3c:	200064c0 	.word	0x200064c0

0800cd40 <TIM4_IRQHandler>:



void TIM4_IRQHandler(void)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	af00      	add	r7, sp, #0

#ifdef USED_QEI4
	if (htim4.Instance -> CR1 == 129)
 800cd44:	4b12      	ldr	r3, [pc, #72]	; (800cd90 <TIM4_IRQHandler+0x50>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	2b81      	cmp	r3, #129	; 0x81
 800cd4c:	d109      	bne.n	800cd62 <TIM4_IRQHandler+0x22>
	{
		BIOS_QEI4.signbit += 1;
 800cd4e:	4b11      	ldr	r3, [pc, #68]	; (800cd94 <TIM4_IRQHandler+0x54>)
 800cd50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cd54:	b29b      	uxth	r3, r3
 800cd56:	3301      	adds	r3, #1
 800cd58:	b29b      	uxth	r3, r3
 800cd5a:	b21a      	sxth	r2, r3
 800cd5c:	4b0d      	ldr	r3, [pc, #52]	; (800cd94 <TIM4_IRQHandler+0x54>)
 800cd5e:	805a      	strh	r2, [r3, #2]
 800cd60:	e00d      	b.n	800cd7e <TIM4_IRQHandler+0x3e>
	}
	else if (htim4.Instance ->CR1 == 145)
 800cd62:	4b0b      	ldr	r3, [pc, #44]	; (800cd90 <TIM4_IRQHandler+0x50>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	2b91      	cmp	r3, #145	; 0x91
 800cd6a:	d108      	bne.n	800cd7e <TIM4_IRQHandler+0x3e>
	{
		BIOS_QEI4.signbit -= 1;
 800cd6c:	4b09      	ldr	r3, [pc, #36]	; (800cd94 <TIM4_IRQHandler+0x54>)
 800cd6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cd72:	b29b      	uxth	r3, r3
 800cd74:	3b01      	subs	r3, #1
 800cd76:	b29b      	uxth	r3, r3
 800cd78:	b21a      	sxth	r2, r3
 800cd7a:	4b06      	ldr	r3, [pc, #24]	; (800cd94 <TIM4_IRQHandler+0x54>)
 800cd7c:	805a      	strh	r2, [r3, #2]
	}
	htim4.Instance -> SR = 0;
 800cd7e:	4b04      	ldr	r3, [pc, #16]	; (800cd90 <TIM4_IRQHandler+0x50>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	2200      	movs	r2, #0
 800cd84:	611a      	str	r2, [r3, #16]
	QEIDelay(100);
 800cd86:	2064      	movs	r0, #100	; 0x64
 800cd88:	f7f5 f8c6 	bl	8001f18 <QEIDelay>
	HAL_TIM_IRQHandler(&htim4);

	return;
#endif

}
 800cd8c:	bf00      	nop
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	20005b50 	.word	0x20005b50
 800cd94:	200064e4 	.word	0x200064e4

0800cd98 <TIM8_UP_TIM13_IRQHandler>:



void TIM8_UP_TIM13_IRQHandler(void)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	af00      	add	r7, sp, #0
		BIOS_QEI6.signbit -= 1;
	}
	htim8.Instance -> SR = 0;
	QEIDelay(200);
#else
	HAL_TIM_IRQHandler(&htim8);
 800cd9c:	4803      	ldr	r0, [pc, #12]	; (800cdac <TIM8_UP_TIM13_IRQHandler+0x14>)
 800cd9e:	f006 fd01 	bl	80137a4 <HAL_TIM_IRQHandler>
#endif
	HAL_TIM_IRQHandler(&htim13);
 800cda2:	4803      	ldr	r0, [pc, #12]	; (800cdb0 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800cda4:	f006 fcfe 	bl	80137a4 <HAL_TIM_IRQHandler>
	return;
 800cda8:	bf00      	nop
}
 800cdaa:	bd80      	pop	{r7, pc}
 800cdac:	20005b10 	.word	0x20005b10
 800cdb0:	20005df8 	.word	0x20005df8

0800cdb4 <TIM2_IRQHandler>:



void TIM2_IRQHandler(void)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 800cdb8:	4802      	ldr	r0, [pc, #8]	; (800cdc4 <TIM2_IRQHandler+0x10>)
 800cdba:	f006 fcf3 	bl	80137a4 <HAL_TIM_IRQHandler>
}
 800cdbe:	bf00      	nop
 800cdc0:	bd80      	pop	{r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	20006064 	.word	0x20006064

0800cdc8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b082      	sub	sp, #8
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cdd8:	d109      	bne.n	800cdee <HAL_TIM_PeriodElapsedCallback+0x26>
		HAL_IncTick();
 800cdda:	f001 f937 	bl	800e04c <HAL_IncTick>
		//		MUXUpdate(&MUX);
		SHIFTREGShift(&SR);
 800cdde:	4806      	ldr	r0, [pc, #24]	; (800cdf8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800cde0:	f7f5 f965 	bl	80020ae <SHIFTREGShift>
		counter++;
 800cde4:	4b05      	ldr	r3, [pc, #20]	; (800cdfc <HAL_TIM_PeriodElapsedCallback+0x34>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	3301      	adds	r3, #1
 800cdea:	4a04      	ldr	r2, [pc, #16]	; (800cdfc <HAL_TIM_PeriodElapsedCallback+0x34>)
 800cdec:	6013      	str	r3, [r2, #0]
	}
}
 800cdee:	bf00      	nop
 800cdf0:	3708      	adds	r7, #8
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	20009424 	.word	0x20009424
 800cdfc:	20009574 	.word	0x20009574

0800ce00 <HAL_I2C_MasterRxCpltCallback>:


//Callback for I2C RXBuffer
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b082      	sub	sp, #8
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
	if(hi2c == ps4.hi2cps4){
 800ce08:	4b05      	ldr	r3, [pc, #20]	; (800ce20 <HAL_I2C_MasterRxCpltCallback+0x20>)
 800ce0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce0c:	687a      	ldr	r2, [r7, #4]
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d102      	bne.n	800ce18 <HAL_I2C_MasterRxCpltCallback+0x18>
		PSxConnectDMA(&ps4);
 800ce12:	4803      	ldr	r0, [pc, #12]	; (800ce20 <HAL_I2C_MasterRxCpltCallback+0x20>)
 800ce14:	f7fb fede 	bl	8008bd4 <PSxConnectDMA>
	}
}
 800ce18:	bf00      	nop
 800ce1a:	3708      	adds	r7, #8
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}
 800ce20:	20009dc0 	.word	0x20009dc0

0800ce24 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void){
 800ce24:	b580      	push	{r7, lr}
 800ce26:	af00      	add	r7, sp, #0
	HAL_I2C_EV_IRQHandler(&hi2c1);
 800ce28:	4802      	ldr	r0, [pc, #8]	; (800ce34 <I2C1_EV_IRQHandler+0x10>)
 800ce2a:	f003 fd4b 	bl	80108c4 <HAL_I2C_EV_IRQHandler>

}
 800ce2e:	bf00      	nop
 800ce30:	bd80      	pop	{r7, pc}
 800ce32:	bf00      	nop
 800ce34:	20006b48 	.word	0x20006b48

0800ce38 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void){
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	af00      	add	r7, sp, #0
	HAL_I2C_ER_IRQHandler(&hi2c1);
 800ce3c:	480a      	ldr	r0, [pc, #40]	; (800ce68 <I2C1_ER_IRQHandler+0x30>)
 800ce3e:	f003 feae 	bl	8010b9e <HAL_I2C_ER_IRQHandler>
	HAL_DMA_DeInit(&hi2c1_rx_dma);
 800ce42:	480a      	ldr	r0, [pc, #40]	; (800ce6c <I2C1_ER_IRQHandler+0x34>)
 800ce44:	f002 f9c2 	bl	800f1cc <HAL_DMA_DeInit>
	HAL_I2C_DeInit(&hi2c1);
 800ce48:	4807      	ldr	r0, [pc, #28]	; (800ce68 <I2C1_ER_IRQHandler+0x30>)
 800ce4a:	f003 fbf5 	bl	8010638 <HAL_I2C_DeInit>

	I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 800ce4e:	4b08      	ldr	r3, [pc, #32]	; (800ce70 <I2C1_ER_IRQHandler+0x38>)
 800ce50:	2208      	movs	r2, #8
 800ce52:	4906      	ldr	r1, [pc, #24]	; (800ce6c <I2C1_ER_IRQHandler+0x34>)
 800ce54:	4804      	ldr	r0, [pc, #16]	; (800ce68 <I2C1_ER_IRQHandler+0x30>)
 800ce56:	f7f6 fe5d 	bl	8003b14 <I2CX_DMA_RX_Init>
//
//
//
	PSxInitDMA(&ps4, &hi2c1);
 800ce5a:	4903      	ldr	r1, [pc, #12]	; (800ce68 <I2C1_ER_IRQHandler+0x30>)
 800ce5c:	4805      	ldr	r0, [pc, #20]	; (800ce74 <I2C1_ER_IRQHandler+0x3c>)
 800ce5e:	f7fb fecc 	bl	8008bfa <PSxInitDMA>

}
 800ce62:	bf00      	nop
 800ce64:	bd80      	pop	{r7, pc}
 800ce66:	bf00      	nop
 800ce68:	20006b48 	.word	0x20006b48
 800ce6c:	20009d54 	.word	0x20009d54
 800ce70:	00061a80 	.word	0x00061a80
 800ce74:	20009dc0 	.word	0x20009dc0

0800ce78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b08c      	sub	sp, #48	; 0x30
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800ce80:	2300      	movs	r3, #0
 800ce82:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800ce84:	2300      	movs	r3, #0
 800ce86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800ce88:	2200      	movs	r2, #0
 800ce8a:	6879      	ldr	r1, [r7, #4]
 800ce8c:	201c      	movs	r0, #28
 800ce8e:	f002 f8a9 	bl	800efe4 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800ce92:	201c      	movs	r0, #28
 800ce94:	f002 f8c2 	bl	800f01c <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800ce98:	2300      	movs	r3, #0
 800ce9a:	60fb      	str	r3, [r7, #12]
 800ce9c:	4b20      	ldr	r3, [pc, #128]	; (800cf20 <HAL_InitTick+0xa8>)
 800ce9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cea0:	4a1f      	ldr	r2, [pc, #124]	; (800cf20 <HAL_InitTick+0xa8>)
 800cea2:	f043 0301 	orr.w	r3, r3, #1
 800cea6:	6413      	str	r3, [r2, #64]	; 0x40
 800cea8:	4b1d      	ldr	r3, [pc, #116]	; (800cf20 <HAL_InitTick+0xa8>)
 800ceaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceac:	f003 0301 	and.w	r3, r3, #1
 800ceb0:	60fb      	str	r3, [r7, #12]
 800ceb2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800ceb4:	f107 0210 	add.w	r2, r7, #16
 800ceb8:	f107 0314 	add.w	r3, r7, #20
 800cebc:	4611      	mov	r1, r2
 800cebe:	4618      	mov	r0, r3
 800cec0:	f005 ff36 	bl	8012d30 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800cec4:	f005 ff0c 	bl	8012ce0 <HAL_RCC_GetPCLK1Freq>
 800cec8:	4603      	mov	r3, r0
 800ceca:	005b      	lsls	r3, r3, #1
 800cecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800cece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced0:	4a14      	ldr	r2, [pc, #80]	; (800cf24 <HAL_InitTick+0xac>)
 800ced2:	fba2 2303 	umull	r2, r3, r2, r3
 800ced6:	0c9b      	lsrs	r3, r3, #18
 800ced8:	3b01      	subs	r3, #1
 800ceda:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800cedc:	4b12      	ldr	r3, [pc, #72]	; (800cf28 <HAL_InitTick+0xb0>)
 800cede:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cee2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800cee4:	4b10      	ldr	r3, [pc, #64]	; (800cf28 <HAL_InitTick+0xb0>)
 800cee6:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ceea:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800ceec:	4a0e      	ldr	r2, [pc, #56]	; (800cf28 <HAL_InitTick+0xb0>)
 800ceee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cef0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800cef2:	4b0d      	ldr	r3, [pc, #52]	; (800cf28 <HAL_InitTick+0xb0>)
 800cef4:	2200      	movs	r2, #0
 800cef6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cef8:	4b0b      	ldr	r3, [pc, #44]	; (800cf28 <HAL_InitTick+0xb0>)
 800cefa:	2200      	movs	r2, #0
 800cefc:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800cefe:	480a      	ldr	r0, [pc, #40]	; (800cf28 <HAL_InitTick+0xb0>)
 800cf00:	f006 faaa 	bl	8013458 <HAL_TIM_Base_Init>
 800cf04:	4603      	mov	r3, r0
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d104      	bne.n	800cf14 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800cf0a:	4807      	ldr	r0, [pc, #28]	; (800cf28 <HAL_InitTick+0xb0>)
 800cf0c:	f006 faf3 	bl	80134f6 <HAL_TIM_Base_Start_IT>
 800cf10:	4603      	mov	r3, r0
 800cf12:	e000      	b.n	800cf16 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800cf14:	2301      	movs	r3, #1
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3730      	adds	r7, #48	; 0x30
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	bf00      	nop
 800cf20:	40023800 	.word	0x40023800
 800cf24:	431bde83 	.word	0x431bde83
 800cf28:	20006064 	.word	0x20006064

0800cf2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800cf2c:	b480      	push	{r7}
 800cf2e:	af00      	add	r7, sp, #0
	return 1;
 800cf30:	2301      	movs	r3, #1
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr

0800cf3c <_kill>:

int _kill(int pid, int sig)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b082      	sub	sp, #8
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
 800cf44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800cf46:	f00b fe51 	bl	8018bec <__errno>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	2216      	movs	r2, #22
 800cf4e:	601a      	str	r2, [r3, #0]
	return -1;
 800cf50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3708      	adds	r7, #8
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <_exit>:

void _exit (int status)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b082      	sub	sp, #8
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800cf64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f7ff ffe7 	bl	800cf3c <_kill>
	while (1) {}		/* Make sure we hang here */
 800cf6e:	e7fe      	b.n	800cf6e <_exit+0x12>

0800cf70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b086      	sub	sp, #24
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	60f8      	str	r0, [r7, #12]
 800cf78:	60b9      	str	r1, [r7, #8]
 800cf7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	617b      	str	r3, [r7, #20]
 800cf80:	e00a      	b.n	800cf98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800cf82:	f3af 8000 	nop.w
 800cf86:	4601      	mov	r1, r0
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	1c5a      	adds	r2, r3, #1
 800cf8c:	60ba      	str	r2, [r7, #8]
 800cf8e:	b2ca      	uxtb	r2, r1
 800cf90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	3301      	adds	r3, #1
 800cf96:	617b      	str	r3, [r7, #20]
 800cf98:	697a      	ldr	r2, [r7, #20]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	dbf0      	blt.n	800cf82 <_read+0x12>
	}

return len;
 800cfa0:	687b      	ldr	r3, [r7, #4]
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3718      	adds	r7, #24
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}

0800cfaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800cfaa:	b580      	push	{r7, lr}
 800cfac:	b086      	sub	sp, #24
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	60f8      	str	r0, [r7, #12]
 800cfb2:	60b9      	str	r1, [r7, #8]
 800cfb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	617b      	str	r3, [r7, #20]
 800cfba:	e009      	b.n	800cfd0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	1c5a      	adds	r2, r3, #1
 800cfc0:	60ba      	str	r2, [r7, #8]
 800cfc2:	781b      	ldrb	r3, [r3, #0]
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	3301      	adds	r3, #1
 800cfce:	617b      	str	r3, [r7, #20]
 800cfd0:	697a      	ldr	r2, [r7, #20]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	dbf1      	blt.n	800cfbc <_write+0x12>
	}
	return len;
 800cfd8:	687b      	ldr	r3, [r7, #4]
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3718      	adds	r7, #24
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}

0800cfe2 <_close>:

int _close(int file)
{
 800cfe2:	b480      	push	{r7}
 800cfe4:	b083      	sub	sp, #12
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	6078      	str	r0, [r7, #4]
	return -1;
 800cfea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	370c      	adds	r7, #12
 800cff2:	46bd      	mov	sp, r7
 800cff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff8:	4770      	bx	lr

0800cffa <_fstat>:


int _fstat(int file, struct stat *st)
{
 800cffa:	b480      	push	{r7}
 800cffc:	b083      	sub	sp, #12
 800cffe:	af00      	add	r7, sp, #0
 800d000:	6078      	str	r0, [r7, #4]
 800d002:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d00a:	605a      	str	r2, [r3, #4]
	return 0;
 800d00c:	2300      	movs	r3, #0
}
 800d00e:	4618      	mov	r0, r3
 800d010:	370c      	adds	r7, #12
 800d012:	46bd      	mov	sp, r7
 800d014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d018:	4770      	bx	lr

0800d01a <_isatty>:

int _isatty(int file)
{
 800d01a:	b480      	push	{r7}
 800d01c:	b083      	sub	sp, #12
 800d01e:	af00      	add	r7, sp, #0
 800d020:	6078      	str	r0, [r7, #4]
	return 1;
 800d022:	2301      	movs	r3, #1
}
 800d024:	4618      	mov	r0, r3
 800d026:	370c      	adds	r7, #12
 800d028:	46bd      	mov	sp, r7
 800d02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02e:	4770      	bx	lr

0800d030 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800d030:	b480      	push	{r7}
 800d032:	b085      	sub	sp, #20
 800d034:	af00      	add	r7, sp, #0
 800d036:	60f8      	str	r0, [r7, #12]
 800d038:	60b9      	str	r1, [r7, #8]
 800d03a:	607a      	str	r2, [r7, #4]
	return 0;
 800d03c:	2300      	movs	r3, #0
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3714      	adds	r7, #20
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr
	...

0800d04c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b086      	sub	sp, #24
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d054:	4a14      	ldr	r2, [pc, #80]	; (800d0a8 <_sbrk+0x5c>)
 800d056:	4b15      	ldr	r3, [pc, #84]	; (800d0ac <_sbrk+0x60>)
 800d058:	1ad3      	subs	r3, r2, r3
 800d05a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d060:	4b13      	ldr	r3, [pc, #76]	; (800d0b0 <_sbrk+0x64>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d102      	bne.n	800d06e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d068:	4b11      	ldr	r3, [pc, #68]	; (800d0b0 <_sbrk+0x64>)
 800d06a:	4a12      	ldr	r2, [pc, #72]	; (800d0b4 <_sbrk+0x68>)
 800d06c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d06e:	4b10      	ldr	r3, [pc, #64]	; (800d0b0 <_sbrk+0x64>)
 800d070:	681a      	ldr	r2, [r3, #0]
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	4413      	add	r3, r2
 800d076:	693a      	ldr	r2, [r7, #16]
 800d078:	429a      	cmp	r2, r3
 800d07a:	d207      	bcs.n	800d08c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d07c:	f00b fdb6 	bl	8018bec <__errno>
 800d080:	4603      	mov	r3, r0
 800d082:	220c      	movs	r2, #12
 800d084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d08a:	e009      	b.n	800d0a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d08c:	4b08      	ldr	r3, [pc, #32]	; (800d0b0 <_sbrk+0x64>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d092:	4b07      	ldr	r3, [pc, #28]	; (800d0b0 <_sbrk+0x64>)
 800d094:	681a      	ldr	r2, [r3, #0]
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	4413      	add	r3, r2
 800d09a:	4a05      	ldr	r2, [pc, #20]	; (800d0b0 <_sbrk+0x64>)
 800d09c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800d09e:	68fb      	ldr	r3, [r7, #12]
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3718      	adds	r7, #24
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}
 800d0a8:	20020000 	.word	0x20020000
 800d0ac:	00000400 	.word	0x00000400
 800d0b0:	20000318 	.word	0x20000318
 800d0b4:	2000a520 	.word	0x2000a520

0800d0b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d0bc:	4b08      	ldr	r3, [pc, #32]	; (800d0e0 <SystemInit+0x28>)
 800d0be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0c2:	4a07      	ldr	r2, [pc, #28]	; (800d0e0 <SystemInit+0x28>)
 800d0c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d0c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d0cc:	4b04      	ldr	r3, [pc, #16]	; (800d0e0 <SystemInit+0x28>)
 800d0ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d0d2:	609a      	str	r2, [r3, #8]
#endif
}
 800d0d4:	bf00      	nop
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0dc:	4770      	bx	lr
 800d0de:	bf00      	nop
 800d0e0:	e000ed00 	.word	0xe000ed00

0800d0e4 <bldc_interface_init>:
static void(*rx_mcconf_received_func)(void) = 0;
static void(*rx_appconf_received_func)(void) = 0;
static void(*motor_control_set_func)(uint32_t controller_id, motor_control_mode mode, float value) = 0;
static void(*values_requested_func)(uint32_t controller_id) = 0;

void bldc_interface_init(void(*func)(uint32_t controller_id, unsigned char *data, unsigned int len)) {
 800d0e4:	b480      	push	{r7}
 800d0e6:	b083      	sub	sp, #12
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
	send_func = func;
 800d0ec:	4a04      	ldr	r2, [pc, #16]	; (800d100 <bldc_interface_init+0x1c>)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6013      	str	r3, [r2, #0]
}
 800d0f2:	bf00      	nop
 800d0f4:	370c      	adds	r7, #12
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fc:	4770      	bx	lr
 800d0fe:	bf00      	nop
 800d100:	2000031c 	.word	0x2000031c

0800d104 <buffer_append_int32>:
void buffer_append_uint16(uint8_t* buffer, uint16_t number, int32_t *index) {
	buffer[(*index)++] = number >> 8;
	buffer[(*index)++] = number;
}

void buffer_append_int32(uint8_t* buffer, int32_t number, int32_t *index) {
 800d104:	b480      	push	{r7}
 800d106:	b085      	sub	sp, #20
 800d108:	af00      	add	r7, sp, #0
 800d10a:	60f8      	str	r0, [r7, #12]
 800d10c:	60b9      	str	r1, [r7, #8]
 800d10e:	607a      	str	r2, [r7, #4]
	buffer[(*index)++] = number >> 24;
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	1618      	asrs	r0, r3, #24
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	1c59      	adds	r1, r3, #1
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	6011      	str	r1, [r2, #0]
 800d11e:	461a      	mov	r2, r3
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	4413      	add	r3, r2
 800d124:	b2c2      	uxtb	r2, r0
 800d126:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 16;
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	1418      	asrs	r0, r3, #16
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	1c59      	adds	r1, r3, #1
 800d132:	687a      	ldr	r2, [r7, #4]
 800d134:	6011      	str	r1, [r2, #0]
 800d136:	461a      	mov	r2, r3
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	4413      	add	r3, r2
 800d13c:	b2c2      	uxtb	r2, r0
 800d13e:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 8;
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	1218      	asrs	r0, r3, #8
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	1c59      	adds	r1, r3, #1
 800d14a:	687a      	ldr	r2, [r7, #4]
 800d14c:	6011      	str	r1, [r2, #0]
 800d14e:	461a      	mov	r2, r3
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	4413      	add	r3, r2
 800d154:	b2c2      	uxtb	r2, r0
 800d156:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	1c59      	adds	r1, r3, #1
 800d15e:	687a      	ldr	r2, [r7, #4]
 800d160:	6011      	str	r1, [r2, #0]
 800d162:	461a      	mov	r2, r3
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	4413      	add	r3, r2
 800d168:	68ba      	ldr	r2, [r7, #8]
 800d16a:	b2d2      	uxtb	r2, r2
 800d16c:	701a      	strb	r2, [r3, #0]
}
 800d16e:	bf00      	nop
 800d170:	3714      	adds	r7, #20
 800d172:	46bd      	mov	sp, r7
 800d174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d178:	4770      	bx	lr

0800d17a <buffer_get_int16>:
	}

	buffer_append_uint32(buffer, res, index);
}

int16_t buffer_get_int16(const uint8_t *buffer, int32_t *index) {
 800d17a:	b480      	push	{r7}
 800d17c:	b085      	sub	sp, #20
 800d17e:	af00      	add	r7, sp, #0
 800d180:	6078      	str	r0, [r7, #4]
 800d182:	6039      	str	r1, [r7, #0]
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	461a      	mov	r2, r3
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	4413      	add	r3, r2
 800d18e:	781b      	ldrb	r3, [r3, #0]
 800d190:	021b      	lsls	r3, r3, #8
 800d192:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	3301      	adds	r3, #1
 800d19a:	6879      	ldr	r1, [r7, #4]
 800d19c:	440b      	add	r3, r1
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	b21b      	sxth	r3, r3
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 800d1a2:	4313      	orrs	r3, r2
 800d1a4:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	1c9a      	adds	r2, r3, #2
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	601a      	str	r2, [r3, #0]
	return res;
 800d1b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3714      	adds	r7, #20
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1be:	4770      	bx	lr

0800d1c0 <buffer_get_int32>:
					((uint16_t) buffer[*index + 1]);
	*index += 2;
	return res;
}

int32_t buffer_get_int32(const uint8_t *buffer, int32_t *index) {
 800d1c0:	b480      	push	{r7}
 800d1c2:	b085      	sub	sp, #20
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	461a      	mov	r2, r3
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	4413      	add	r3, r2
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	3301      	adds	r3, #1
 800d1de:	6879      	ldr	r1, [r7, #4]
 800d1e0:	440b      	add	r3, r1
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	041b      	lsls	r3, r3, #16
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800d1e6:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	3302      	adds	r3, #2
 800d1ee:	6879      	ldr	r1, [r7, #4]
 800d1f0:	440b      	add	r3, r1
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 800d1f6:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 800d1f8:	683a      	ldr	r2, [r7, #0]
 800d1fa:	6812      	ldr	r2, [r2, #0]
 800d1fc:	3203      	adds	r2, #3
 800d1fe:	6879      	ldr	r1, [r7, #4]
 800d200:	440a      	add	r2, r1
 800d202:	7812      	ldrb	r2, [r2, #0]
					((uint32_t) buffer[*index + 2]) << 8 |
 800d204:	4313      	orrs	r3, r2
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800d206:	60fb      	str	r3, [r7, #12]
	*index += 4;
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	1d1a      	adds	r2, r3, #4
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	601a      	str	r2, [r3, #0]
	return res;
 800d212:	68fb      	ldr	r3, [r7, #12]
}
 800d214:	4618      	mov	r0, r3
 800d216:	3714      	adds	r7, #20
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr

0800d220 <buffer_get_float16>:
					((uint64_t) buffer[*index + 7]);
	*index += 8;
	return res;
}

float buffer_get_float16(const uint8_t *buffer, float scale, int32_t *index) {
 800d220:	b580      	push	{r7, lr}
 800d222:	b084      	sub	sp, #16
 800d224:	af00      	add	r7, sp, #0
 800d226:	60f8      	str	r0, [r7, #12]
 800d228:	ed87 0a02 	vstr	s0, [r7, #8]
 800d22c:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int16(buffer, index) / scale;
 800d22e:	6879      	ldr	r1, [r7, #4]
 800d230:	68f8      	ldr	r0, [r7, #12]
 800d232:	f7ff ffa2 	bl	800d17a <buffer_get_int16>
 800d236:	4603      	mov	r3, r0
 800d238:	ee07 3a90 	vmov	s15, r3
 800d23c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d240:	edd7 7a02 	vldr	s15, [r7, #8]
 800d244:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d248:	eef0 7a66 	vmov.f32	s15, s13
}
 800d24c:	eeb0 0a67 	vmov.f32	s0, s15
 800d250:	3710      	adds	r7, #16
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}

0800d256 <buffer_get_float32>:

float buffer_get_float32(const uint8_t *buffer, float scale, int32_t *index) {
 800d256:	b580      	push	{r7, lr}
 800d258:	b084      	sub	sp, #16
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	60f8      	str	r0, [r7, #12]
 800d25e:	ed87 0a02 	vstr	s0, [r7, #8]
 800d262:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int32(buffer, index) / scale;
 800d264:	6879      	ldr	r1, [r7, #4]
 800d266:	68f8      	ldr	r0, [r7, #12]
 800d268:	f7ff ffaa 	bl	800d1c0 <buffer_get_int32>
 800d26c:	ee07 0a90 	vmov	s15, r0
 800d270:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d274:	edd7 7a02 	vldr	s15, [r7, #8]
 800d278:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d27c:	eef0 7a66 	vmov.f32	s15, s13
}
 800d280:	eeb0 0a67 	vmov.f32	s0, s15
 800d284:	3710      	adds	r7, #16
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
	...

0800d28c <crc16>:
		0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
		0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
 800d28c:	b480      	push	{r7}
 800d28e:	b085      	sub	sp, #20
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
	unsigned int i;
	unsigned short cksum = 0;
 800d296:	2300      	movs	r3, #0
 800d298:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 800d29a:	2300      	movs	r3, #0
 800d29c:	60fb      	str	r3, [r7, #12]
 800d29e:	e016      	b.n	800d2ce <crc16+0x42>
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 800d2a0:	897b      	ldrh	r3, [r7, #10]
 800d2a2:	0a1b      	lsrs	r3, r3, #8
 800d2a4:	b29b      	uxth	r3, r3
 800d2a6:	4619      	mov	r1, r3
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	1c5a      	adds	r2, r3, #1
 800d2ac:	607a      	str	r2, [r7, #4]
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	404b      	eors	r3, r1
 800d2b2:	b2db      	uxtb	r3, r3
 800d2b4:	4a0b      	ldr	r2, [pc, #44]	; (800d2e4 <crc16+0x58>)
 800d2b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2ba:	b21a      	sxth	r2, r3
 800d2bc:	897b      	ldrh	r3, [r7, #10]
 800d2be:	021b      	lsls	r3, r3, #8
 800d2c0:	b21b      	sxth	r3, r3
 800d2c2:	4053      	eors	r3, r2
 800d2c4:	b21b      	sxth	r3, r3
 800d2c6:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	3301      	adds	r3, #1
 800d2cc:	60fb      	str	r3, [r7, #12]
 800d2ce:	68fa      	ldr	r2, [r7, #12]
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d3e4      	bcc.n	800d2a0 <crc16+0x14>
	}
	return cksum;
 800d2d6:	897b      	ldrh	r3, [r7, #10]
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3714      	adds	r7, #20
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e2:	4770      	bx	lr
 800d2e4:	080207a4 	.word	0x080207a4

0800d2e8 <comm_can_send_buffer>:
 * 0: Packet goes to commands_process_packet of receiver
 * 1: Packet goes to commands_send_packet of receiver --> can use to send to other board?
 * 2: Packet goes to commands_process and send function is set to null
 *    so that no reply is sent back.
 */
void comm_can_send_buffer(uint8_t controller_id, uint8_t *data, unsigned int len, uint8_t send) {
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b08e      	sub	sp, #56	; 0x38
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	60b9      	str	r1, [r7, #8]
 800d2f0:	607a      	str	r2, [r7, #4]
 800d2f2:	461a      	mov	r2, r3
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	73fb      	strb	r3, [r7, #15]
 800d2f8:	4613      	mov	r3, r2
 800d2fa:	73bb      	strb	r3, [r7, #14]
	uint8_t send_buffer[8];

	if (len <= 6) {
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2b06      	cmp	r3, #6
 800d300:	d82b      	bhi.n	800d35a <comm_can_send_buffer+0x72>
		uint32_t ind = 0;
 800d302:	2300      	movs	r3, #0
 800d304:	61bb      	str	r3, [r7, #24]
		send_buffer[ind++] = (uint8_t)mainboard_TO_VESC;
 800d306:	69bb      	ldr	r3, [r7, #24]
 800d308:	1c5a      	adds	r2, r3, #1
 800d30a:	61ba      	str	r2, [r7, #24]
 800d30c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d310:	4413      	add	r3, r2
 800d312:	221d      	movs	r2, #29
 800d314:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = send;
 800d318:	69bb      	ldr	r3, [r7, #24]
 800d31a:	1c5a      	adds	r2, r3, #1
 800d31c:	61ba      	str	r2, [r7, #24]
 800d31e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d322:	4413      	add	r3, r2
 800d324:	7bba      	ldrb	r2, [r7, #14]
 800d326:	f803 2c28 	strb.w	r2, [r3, #-40]
		memcpy(send_buffer + ind, data, len);
 800d32a:	f107 0210 	add.w	r2, r7, #16
 800d32e:	69bb      	ldr	r3, [r7, #24]
 800d330:	4413      	add	r3, r2
 800d332:	687a      	ldr	r2, [r7, #4]
 800d334:	68b9      	ldr	r1, [r7, #8]
 800d336:	4618      	mov	r0, r3
 800d338:	f00b fc92 	bl	8018c60 <memcpy>
		ind += len;
 800d33c:	69ba      	ldr	r2, [r7, #24]
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	4413      	add	r3, r2
 800d342:	61bb      	str	r3, [r7, #24]
#if defined USED_CAN1
			CAN_TxMsgEID(&hcan1, controller_id |
 800d344:	7bfb      	ldrb	r3, [r7, #15]
 800d346:	f443 6100 	orr.w	r1, r3, #2048	; 0x800
 800d34a:	69bb      	ldr	r3, [r7, #24]
 800d34c:	b2db      	uxtb	r3, r3
 800d34e:	f107 0210 	add.w	r2, r7, #16
 800d352:	4872      	ldr	r0, [pc, #456]	; (800d51c <comm_can_send_buffer+0x234>)
 800d354:	f7f6 fb80 	bl	8003a58 <CAN_TxMsgEID>
#elif defined USED_CAN2
			CAN_TxMsgEID(&hcan2, controller_id |
								((uint32_t)CAN_PACKET_PROCESS_RX_BUFFER << 8), send_buffer, ind++);
#endif
	}
}
 800d358:	e0dc      	b.n	800d514 <comm_can_send_buffer+0x22c>
		unsigned int end_a = 0;
 800d35a:	2300      	movs	r3, #0
 800d35c:	637b      	str	r3, [r7, #52]	; 0x34
		for (unsigned int i = 0;i < len;i += 7) {
 800d35e:	2300      	movs	r3, #0
 800d360:	633b      	str	r3, [r7, #48]	; 0x30
 800d362:	e03d      	b.n	800d3e0 <comm_can_send_buffer+0xf8>
			if (i > 255) {
 800d364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d366:	2bff      	cmp	r3, #255	; 0xff
 800d368:	d83f      	bhi.n	800d3ea <comm_can_send_buffer+0x102>
			end_a = i + 7;
 800d36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36c:	3307      	adds	r3, #7
 800d36e:	637b      	str	r3, [r7, #52]	; 0x34
			uint8_t send_len = 7;
 800d370:	2307      	movs	r3, #7
 800d372:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			send_buffer[0] = i;
 800d376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d378:	b2db      	uxtb	r3, r3
 800d37a:	743b      	strb	r3, [r7, #16]
			if ((i + 7) <= len) {
 800d37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d37e:	3307      	adds	r3, #7
 800d380:	687a      	ldr	r2, [r7, #4]
 800d382:	429a      	cmp	r2, r3
 800d384:	d30b      	bcc.n	800d39e <comm_can_send_buffer+0xb6>
				memcpy(send_buffer + 1, data + i, send_len);
 800d386:	f107 0310 	add.w	r3, r7, #16
 800d38a:	3301      	adds	r3, #1
 800d38c:	68b9      	ldr	r1, [r7, #8]
 800d38e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d390:	4411      	add	r1, r2
 800d392:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d396:	4618      	mov	r0, r3
 800d398:	f00b fc62 	bl	8018c60 <memcpy>
 800d39c:	e011      	b.n	800d3c2 <comm_can_send_buffer+0xda>
				send_len = len - i;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	b2da      	uxtb	r2, r3
 800d3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a4:	b2db      	uxtb	r3, r3
 800d3a6:	1ad3      	subs	r3, r2, r3
 800d3a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				memcpy(send_buffer + 1, data + i, send_len);
 800d3ac:	f107 0310 	add.w	r3, r7, #16
 800d3b0:	3301      	adds	r3, #1
 800d3b2:	68b9      	ldr	r1, [r7, #8]
 800d3b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3b6:	4411      	add	r1, r2
 800d3b8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f00b fc4f 	bl	8018c60 <memcpy>
			CAN_TxMsgEID(&hcan1, controller_id |
 800d3c2:	7bfb      	ldrb	r3, [r7, #15]
 800d3c4:	f443 61a0 	orr.w	r1, r3, #1280	; 0x500
 800d3c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	f107 0210 	add.w	r2, r7, #16
 800d3d4:	4851      	ldr	r0, [pc, #324]	; (800d51c <comm_can_send_buffer+0x234>)
 800d3d6:	f7f6 fb3f 	bl	8003a58 <CAN_TxMsgEID>
		for (unsigned int i = 0;i < len;i += 7) {
 800d3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3dc:	3307      	adds	r3, #7
 800d3de:	633b      	str	r3, [r7, #48]	; 0x30
 800d3e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	d3bd      	bcc.n	800d364 <comm_can_send_buffer+0x7c>
 800d3e8:	e000      	b.n	800d3ec <comm_can_send_buffer+0x104>
				break;
 800d3ea:	bf00      	nop
		for (unsigned int i = end_a;i < len;i += 6) {
 800d3ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800d3f0:	e03b      	b.n	800d46a <comm_can_send_buffer+0x182>
			uint8_t send_len = 6;
 800d3f2:	2306      	movs	r3, #6
 800d3f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			send_buffer[0] = i >> 8;
 800d3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3fa:	0a1b      	lsrs	r3, r3, #8
 800d3fc:	b2db      	uxtb	r3, r3
 800d3fe:	743b      	strb	r3, [r7, #16]
			send_buffer[1] = i & 0xFF;
 800d400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d402:	b2db      	uxtb	r3, r3
 800d404:	747b      	strb	r3, [r7, #17]
			if ((i + 6) <= len) {
 800d406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d408:	3306      	adds	r3, #6
 800d40a:	687a      	ldr	r2, [r7, #4]
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d30b      	bcc.n	800d428 <comm_can_send_buffer+0x140>
				memcpy(send_buffer + 2, data + i, send_len);
 800d410:	f107 0310 	add.w	r3, r7, #16
 800d414:	3302      	adds	r3, #2
 800d416:	68b9      	ldr	r1, [r7, #8]
 800d418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d41a:	4411      	add	r1, r2
 800d41c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d420:	4618      	mov	r0, r3
 800d422:	f00b fc1d 	bl	8018c60 <memcpy>
 800d426:	e011      	b.n	800d44c <comm_can_send_buffer+0x164>
				send_len = len - i;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	b2da      	uxtb	r2, r3
 800d42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42e:	b2db      	uxtb	r3, r3
 800d430:	1ad3      	subs	r3, r2, r3
 800d432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				memcpy(send_buffer + 2, data + i, send_len);
 800d436:	f107 0310 	add.w	r3, r7, #16
 800d43a:	3302      	adds	r3, #2
 800d43c:	68b9      	ldr	r1, [r7, #8]
 800d43e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d440:	4411      	add	r1, r2
 800d442:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d446:	4618      	mov	r0, r3
 800d448:	f00b fc0a 	bl	8018c60 <memcpy>
			CAN_TxMsgEID(&hcan1, controller_id |
 800d44c:	7bfb      	ldrb	r3, [r7, #15]
 800d44e:	f443 61c0 	orr.w	r1, r3, #1536	; 0x600
 800d452:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d456:	3302      	adds	r3, #2
 800d458:	b2db      	uxtb	r3, r3
 800d45a:	f107 0210 	add.w	r2, r7, #16
 800d45e:	482f      	ldr	r0, [pc, #188]	; (800d51c <comm_can_send_buffer+0x234>)
 800d460:	f7f6 fafa 	bl	8003a58 <CAN_TxMsgEID>
		for (unsigned int i = end_a;i < len;i += 6) {
 800d464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d466:	3306      	adds	r3, #6
 800d468:	62bb      	str	r3, [r7, #40]	; 0x28
 800d46a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	429a      	cmp	r2, r3
 800d470:	d3bf      	bcc.n	800d3f2 <comm_can_send_buffer+0x10a>
		uint32_t ind = 0;
 800d472:	2300      	movs	r3, #0
 800d474:	623b      	str	r3, [r7, #32]
		send_buffer[ind++] = (uint8_t)RNS_TO_VESC;
 800d476:	6a3b      	ldr	r3, [r7, #32]
 800d478:	1c5a      	adds	r2, r3, #1
 800d47a:	623a      	str	r2, [r7, #32]
 800d47c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d480:	4413      	add	r3, r2
 800d482:	221e      	movs	r2, #30
 800d484:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = send;
 800d488:	6a3b      	ldr	r3, [r7, #32]
 800d48a:	1c5a      	adds	r2, r3, #1
 800d48c:	623a      	str	r2, [r7, #32]
 800d48e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d492:	4413      	add	r3, r2
 800d494:	7bba      	ldrb	r2, [r7, #14]
 800d496:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = len >> 8;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	0a19      	lsrs	r1, r3, #8
 800d49e:	6a3b      	ldr	r3, [r7, #32]
 800d4a0:	1c5a      	adds	r2, r3, #1
 800d4a2:	623a      	str	r2, [r7, #32]
 800d4a4:	b2ca      	uxtb	r2, r1
 800d4a6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d4aa:	440b      	add	r3, r1
 800d4ac:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = len & 0xFF;
 800d4b0:	6a3b      	ldr	r3, [r7, #32]
 800d4b2:	1c5a      	adds	r2, r3, #1
 800d4b4:	623a      	str	r2, [r7, #32]
 800d4b6:	687a      	ldr	r2, [r7, #4]
 800d4b8:	b2d2      	uxtb	r2, r2
 800d4ba:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d4be:	440b      	add	r3, r1
 800d4c0:	f803 2c28 	strb.w	r2, [r3, #-40]
		unsigned short crc = crc16(data, len);
 800d4c4:	6879      	ldr	r1, [r7, #4]
 800d4c6:	68b8      	ldr	r0, [r7, #8]
 800d4c8:	f7ff fee0 	bl	800d28c <crc16>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	83fb      	strh	r3, [r7, #30]
		send_buffer[ind++] = (uint8_t)(crc >> 8);
 800d4d0:	8bfb      	ldrh	r3, [r7, #30]
 800d4d2:	0a1b      	lsrs	r3, r3, #8
 800d4d4:	b299      	uxth	r1, r3
 800d4d6:	6a3b      	ldr	r3, [r7, #32]
 800d4d8:	1c5a      	adds	r2, r3, #1
 800d4da:	623a      	str	r2, [r7, #32]
 800d4dc:	b2ca      	uxtb	r2, r1
 800d4de:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d4e2:	440b      	add	r3, r1
 800d4e4:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = (uint8_t)(crc & 0xFF);
 800d4e8:	6a3b      	ldr	r3, [r7, #32]
 800d4ea:	1c5a      	adds	r2, r3, #1
 800d4ec:	623a      	str	r2, [r7, #32]
 800d4ee:	8bfa      	ldrh	r2, [r7, #30]
 800d4f0:	b2d2      	uxtb	r2, r2
 800d4f2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d4f6:	440b      	add	r3, r1
 800d4f8:	f803 2c28 	strb.w	r2, [r3, #-40]
			CAN_TxMsgEID(&hcan1, controller_id |
 800d4fc:	7bfb      	ldrb	r3, [r7, #15]
 800d4fe:	f443 61e0 	orr.w	r1, r3, #1792	; 0x700
					((uint32_t)CAN_PACKET_PROCESS_RX_BUFFER << 8), send_buffer, ind++);
 800d502:	6a3b      	ldr	r3, [r7, #32]
 800d504:	1c5a      	adds	r2, r3, #1
 800d506:	623a      	str	r2, [r7, #32]
			CAN_TxMsgEID(&hcan1, controller_id |
 800d508:	b2db      	uxtb	r3, r3
 800d50a:	f107 0210 	add.w	r2, r7, #16
 800d50e:	4803      	ldr	r0, [pc, #12]	; (800d51c <comm_can_send_buffer+0x234>)
 800d510:	f7f6 faa2 	bl	8003a58 <CAN_TxMsgEID>
}
 800d514:	bf00      	nop
 800d516:	3738      	adds	r7, #56	; 0x38
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}
 800d51c:	20009d28 	.word	0x20009d28

0800d520 <comm_can_set_duty>:

void comm_can_set_duty(uint8_t controller_id, float duty) {
 800d520:	b580      	push	{r7, lr}
 800d522:	b084      	sub	sp, #16
 800d524:	af00      	add	r7, sp, #0
 800d526:	4603      	mov	r3, r0
 800d528:	ed87 0a00 	vstr	s0, [r7]
 800d52c:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800d52e:	2300      	movs	r3, #0
 800d530:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)(duty * 100000.0), &send_index);
 800d532:	6838      	ldr	r0, [r7, #0]
 800d534:	f7f3 f808 	bl	8000548 <__aeabi_f2d>
 800d538:	a319      	add	r3, pc, #100	; (adr r3, 800d5a0 <comm_can_set_duty+0x80>)
 800d53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53e:	f7f3 f85b 	bl	80005f8 <__aeabi_dmul>
 800d542:	4602      	mov	r2, r0
 800d544:	460b      	mov	r3, r1
 800d546:	4610      	mov	r0, r2
 800d548:	4619      	mov	r1, r3
 800d54a:	f7f3 fb05 	bl	8000b58 <__aeabi_d2iz>
 800d54e:	4601      	mov	r1, r0
 800d550:	f107 020c 	add.w	r2, r7, #12
 800d554:	f107 0308 	add.w	r3, r7, #8
 800d558:	4618      	mov	r0, r3
 800d55a:	f7ff fdd3 	bl	800d104 <buffer_append_int32>
#if defined USED_CAN1
	if(controller_id == 115 || controller_id == 116)
 800d55e:	79fb      	ldrb	r3, [r7, #7]
 800d560:	2b73      	cmp	r3, #115	; 0x73
 800d562:	d002      	beq.n	800d56a <comm_can_set_duty+0x4a>
 800d564:	79fb      	ldrb	r3, [r7, #7]
 800d566:	2b74      	cmp	r3, #116	; 0x74
 800d568:	d108      	bne.n	800d57c <comm_can_set_duty+0x5c>
	{
		CAN_TxMsgEID(&hcan2, controller_id |
 800d56a:	79f9      	ldrb	r1, [r7, #7]
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	b2db      	uxtb	r3, r3
 800d570:	f107 0208 	add.w	r2, r7, #8
 800d574:	4808      	ldr	r0, [pc, #32]	; (800d598 <comm_can_set_duty+0x78>)
 800d576:	f7f6 fa6f 	bl	8003a58 <CAN_TxMsgEID>
 800d57a:	e008      	b.n	800d58e <comm_can_set_duty+0x6e>
				((uint32_t)CAN_PACKET_SET_DUTY << 8), buffer, send_index);
	}
	else
	{
		CAN_TxMsgEID(&hcan1, controller_id |
 800d57c:	79f9      	ldrb	r1, [r7, #7]
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	b2db      	uxtb	r3, r3
 800d582:	f107 0208 	add.w	r2, r7, #8
 800d586:	4805      	ldr	r0, [pc, #20]	; (800d59c <comm_can_set_duty+0x7c>)
 800d588:	f7f6 fa66 	bl	8003a58 <CAN_TxMsgEID>

#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
				((uint32_t)CAN_PACKET_SET_DUTY << 8), buffer, send_index);
#endif
}
 800d58c:	bf00      	nop
 800d58e:	bf00      	nop
 800d590:	3710      	adds	r7, #16
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}
 800d596:	bf00      	nop
 800d598:	20009008 	.word	0x20009008
 800d59c:	20009d28 	.word	0x20009d28
 800d5a0:	00000000 	.word	0x00000000
 800d5a4:	40f86a00 	.word	0x40f86a00

0800d5a8 <comm_can_set_current>:
	buffer_append_int32(buffer, (int32_t)(duty * 100000.0), &send_index);
	CAN_TxMsgEID(&hcan2, controller_id |
			((uint32_t)CAN_PACKET_SET_DUTY << 8), buffer, send_index);
}

void comm_can_set_current(uint8_t controller_id, float current) {
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b084      	sub	sp, #16
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	ed87 0a00 	vstr	s0, [r7]
 800d5b4:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)(current * 1000.0), &send_index);
 800d5ba:	6838      	ldr	r0, [r7, #0]
 800d5bc:	f7f2 ffc4 	bl	8000548 <__aeabi_f2d>
 800d5c0:	f04f 0200 	mov.w	r2, #0
 800d5c4:	4b0f      	ldr	r3, [pc, #60]	; (800d604 <comm_can_set_current+0x5c>)
 800d5c6:	f7f3 f817 	bl	80005f8 <__aeabi_dmul>
 800d5ca:	4602      	mov	r2, r0
 800d5cc:	460b      	mov	r3, r1
 800d5ce:	4610      	mov	r0, r2
 800d5d0:	4619      	mov	r1, r3
 800d5d2:	f7f3 fac1 	bl	8000b58 <__aeabi_d2iz>
 800d5d6:	4601      	mov	r1, r0
 800d5d8:	f107 020c 	add.w	r2, r7, #12
 800d5dc:	f107 0308 	add.w	r3, r7, #8
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7ff fd8f 	bl	800d104 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
 800d5e6:	79fb      	ldrb	r3, [r7, #7]
 800d5e8:	f443 7180 	orr.w	r1, r3, #256	; 0x100
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	b2db      	uxtb	r3, r3
 800d5f0:	f107 0208 	add.w	r2, r7, #8
 800d5f4:	4804      	ldr	r0, [pc, #16]	; (800d608 <comm_can_set_current+0x60>)
 800d5f6:	f7f6 fa2f 	bl	8003a58 <CAN_TxMsgEID>
			((uint32_t)CAN_PACKET_SET_CURRENT << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
				((uint32_t)CAN_PACKET_SET_CURRENT << 8), buffer, send_index);
#endif
}
 800d5fa:	bf00      	nop
 800d5fc:	3710      	adds	r7, #16
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
 800d602:	bf00      	nop
 800d604:	408f4000 	.word	0x408f4000
 800d608:	20009d28 	.word	0x20009d28

0800d60c <comm_can_set_rpm>:
				((uint32_t)CAN_PACKET_SET_CURRENT_BRAKE << 8), buffer, send_index);
#endif

}

void comm_can_set_rpm(uint8_t controller_id, float rpm) {
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b084      	sub	sp, #16
 800d610:	af00      	add	r7, sp, #0
 800d612:	4603      	mov	r3, r0
 800d614:	ed87 0a00 	vstr	s0, [r7]
 800d618:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800d61a:	2300      	movs	r3, #0
 800d61c:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)rpm, &send_index);
 800d61e:	edd7 7a00 	vldr	s15, [r7]
 800d622:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d626:	f107 020c 	add.w	r2, r7, #12
 800d62a:	f107 0308 	add.w	r3, r7, #8
 800d62e:	ee17 1a90 	vmov	r1, s15
 800d632:	4618      	mov	r0, r3
 800d634:	f7ff fd66 	bl	800d104 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
 800d638:	79fb      	ldrb	r3, [r7, #7]
 800d63a:	f443 7140 	orr.w	r1, r3, #768	; 0x300
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	b2db      	uxtb	r3, r3
 800d642:	f107 0208 	add.w	r2, r7, #8
 800d646:	4803      	ldr	r0, [pc, #12]	; (800d654 <comm_can_set_rpm+0x48>)
 800d648:	f7f6 fa06 	bl	8003a58 <CAN_TxMsgEID>
			((uint32_t)CAN_PACKET_SET_RPM << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
				((uint32_t)CAN_PACKET_SET_RPM << 8), buffer, send_index);
#endif
}
 800d64c:	bf00      	nop
 800d64e:	3710      	adds	r7, #16
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}
 800d654:	20009d28 	.word	0x20009d28

0800d658 <decode_VESC>:
	CAN_TxMsgEID(&hcan2, controller_id |
				((uint32_t)CAN_PACKET_UPDATE_PID_POS_OFFSET << 8), buffer, send_index);
#endif
}

void decode_VESC(void){
 800d658:	b580      	push	{r7, lr}
 800d65a:	b084      	sub	sp, #16
 800d65c:	af00      	add	r7, sp, #0
	int32_t ind = 0;
 800d65e:	2300      	movs	r3, #0
 800d660:	607b      	str	r3, [r7, #4]
//
//	Vescmsg *rxmsg_tmp;
//	while ((rxmsg_tmp = get_rx_frame()) != 0) {
//		Vescmsg rxmsg = *rxmsg_tmp;

		if (vescmsg.Rxmsg.IDE == CAN_ID_EXT) {
 800d662:	4b60      	ldr	r3, [pc, #384]	; (800d7e4 <decode_VESC+0x18c>)
 800d664:	689b      	ldr	r3, [r3, #8]
 800d666:	2b04      	cmp	r3, #4
 800d668:	f040 80b8 	bne.w	800d7dc <decode_VESC+0x184>
			uint8_t id = vescmsg.Rxmsg.ExtId & 0xFF;
 800d66c:	4b5d      	ldr	r3, [pc, #372]	; (800d7e4 <decode_VESC+0x18c>)
 800d66e:	685b      	ldr	r3, [r3, #4]
 800d670:	73fb      	strb	r3, [r7, #15]
			CAN_PACKET_ID cmd = vescmsg.Rxmsg.ExtId >> 8;
 800d672:	4b5c      	ldr	r3, [pc, #368]	; (800d7e4 <decode_VESC+0x18c>)
 800d674:	685b      	ldr	r3, [r3, #4]
 800d676:	0a1b      	lsrs	r3, r3, #8
 800d678:	60bb      	str	r3, [r7, #8]
//
//				default:
//					break;
//				}
//			}
			if(cmd == CAN_PACKET_STATUS)
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	2b09      	cmp	r3, #9
 800d67e:	f040 80ad 	bne.w	800d7dc <decode_VESC+0x184>
			{
				if(id == VESCNav.a.Instance)
 800d682:	7bfb      	ldrb	r3, [r7, #15]
 800d684:	b29a      	uxth	r2, r3
 800d686:	4b58      	ldr	r3, [pc, #352]	; (800d7e8 <decode_VESC+0x190>)
 800d688:	899b      	ldrh	r3, [r3, #12]
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d124      	bne.n	800d6d8 <decode_VESC+0x80>
				{
					VESCNav.a.info.rpm = buffer_get_float32((uint8_t*)&vescmsg.Data, 1.0, &ind);
 800d68e:	1d3b      	adds	r3, r7, #4
 800d690:	4619      	mov	r1, r3
 800d692:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d696:	4855      	ldr	r0, [pc, #340]	; (800d7ec <decode_VESC+0x194>)
 800d698:	f7ff fddd 	bl	800d256 <buffer_get_float32>
 800d69c:	eef0 7a40 	vmov.f32	s15, s0
 800d6a0:	4b51      	ldr	r3, [pc, #324]	; (800d7e8 <decode_VESC+0x190>)
 800d6a2:	edc3 7a04 	vstr	s15, [r3, #16]
					VESCNav.a.info.current = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d6a6:	1d3b      	adds	r3, r7, #4
 800d6a8:	4619      	mov	r1, r3
 800d6aa:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d6ae:	484f      	ldr	r0, [pc, #316]	; (800d7ec <decode_VESC+0x194>)
 800d6b0:	f7ff fdb6 	bl	800d220 <buffer_get_float16>
 800d6b4:	eef0 7a40 	vmov.f32	s15, s0
 800d6b8:	4b4b      	ldr	r3, [pc, #300]	; (800d7e8 <decode_VESC+0x190>)
 800d6ba:	edc3 7a06 	vstr	s15, [r3, #24]
					VESCNav.a.info.duty = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d6be:	1d3b      	adds	r3, r7, #4
 800d6c0:	4619      	mov	r1, r3
 800d6c2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d6c6:	4849      	ldr	r0, [pc, #292]	; (800d7ec <decode_VESC+0x194>)
 800d6c8:	f7ff fdaa 	bl	800d220 <buffer_get_float16>
 800d6cc:	eef0 7a40 	vmov.f32	s15, s0
 800d6d0:	4b45      	ldr	r3, [pc, #276]	; (800d7e8 <decode_VESC+0x190>)
 800d6d2:	edc3 7a05 	vstr	s15, [r3, #20]
					VESCNav.d.info.current = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
					VESCNav.d.info.duty = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
				}
			}
		}
	}
 800d6d6:	e081      	b.n	800d7dc <decode_VESC+0x184>
				else if(id == VESCNav.b.Instance)
 800d6d8:	7bfb      	ldrb	r3, [r7, #15]
 800d6da:	b29a      	uxth	r2, r3
 800d6dc:	4b42      	ldr	r3, [pc, #264]	; (800d7e8 <decode_VESC+0x190>)
 800d6de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	d124      	bne.n	800d72e <decode_VESC+0xd6>
					VESCNav.b.info.rpm = buffer_get_float32((uint8_t*)&vescmsg.Data, 1.0, &ind);
 800d6e4:	1d3b      	adds	r3, r7, #4
 800d6e6:	4619      	mov	r1, r3
 800d6e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d6ec:	483f      	ldr	r0, [pc, #252]	; (800d7ec <decode_VESC+0x194>)
 800d6ee:	f7ff fdb2 	bl	800d256 <buffer_get_float32>
 800d6f2:	eef0 7a40 	vmov.f32	s15, s0
 800d6f6:	4b3c      	ldr	r3, [pc, #240]	; (800d7e8 <decode_VESC+0x190>)
 800d6f8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
					VESCNav.b.info.current = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d6fc:	1d3b      	adds	r3, r7, #4
 800d6fe:	4619      	mov	r1, r3
 800d700:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d704:	4839      	ldr	r0, [pc, #228]	; (800d7ec <decode_VESC+0x194>)
 800d706:	f7ff fd8b 	bl	800d220 <buffer_get_float16>
 800d70a:	eef0 7a40 	vmov.f32	s15, s0
 800d70e:	4b36      	ldr	r3, [pc, #216]	; (800d7e8 <decode_VESC+0x190>)
 800d710:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
					VESCNav.b.info.duty = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d714:	1d3b      	adds	r3, r7, #4
 800d716:	4619      	mov	r1, r3
 800d718:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d71c:	4833      	ldr	r0, [pc, #204]	; (800d7ec <decode_VESC+0x194>)
 800d71e:	f7ff fd7f 	bl	800d220 <buffer_get_float16>
 800d722:	eef0 7a40 	vmov.f32	s15, s0
 800d726:	4b30      	ldr	r3, [pc, #192]	; (800d7e8 <decode_VESC+0x190>)
 800d728:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	}
 800d72c:	e056      	b.n	800d7dc <decode_VESC+0x184>
				else if(id == VESCNav.c.Instance)
 800d72e:	7bfb      	ldrb	r3, [r7, #15]
 800d730:	b29a      	uxth	r2, r3
 800d732:	4b2d      	ldr	r3, [pc, #180]	; (800d7e8 <decode_VESC+0x190>)
 800d734:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800d738:	429a      	cmp	r2, r3
 800d73a:	d124      	bne.n	800d786 <decode_VESC+0x12e>
					VESCNav.c.info.rpm = buffer_get_float32((uint8_t*)&vescmsg.Data, 1.0, &ind);
 800d73c:	1d3b      	adds	r3, r7, #4
 800d73e:	4619      	mov	r1, r3
 800d740:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d744:	4829      	ldr	r0, [pc, #164]	; (800d7ec <decode_VESC+0x194>)
 800d746:	f7ff fd86 	bl	800d256 <buffer_get_float32>
 800d74a:	eef0 7a40 	vmov.f32	s15, s0
 800d74e:	4b26      	ldr	r3, [pc, #152]	; (800d7e8 <decode_VESC+0x190>)
 800d750:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
					VESCNav.c.info.current = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d754:	1d3b      	adds	r3, r7, #4
 800d756:	4619      	mov	r1, r3
 800d758:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d75c:	4823      	ldr	r0, [pc, #140]	; (800d7ec <decode_VESC+0x194>)
 800d75e:	f7ff fd5f 	bl	800d220 <buffer_get_float16>
 800d762:	eef0 7a40 	vmov.f32	s15, s0
 800d766:	4b20      	ldr	r3, [pc, #128]	; (800d7e8 <decode_VESC+0x190>)
 800d768:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
					VESCNav.c.info.duty = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d76c:	1d3b      	adds	r3, r7, #4
 800d76e:	4619      	mov	r1, r3
 800d770:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d774:	481d      	ldr	r0, [pc, #116]	; (800d7ec <decode_VESC+0x194>)
 800d776:	f7ff fd53 	bl	800d220 <buffer_get_float16>
 800d77a:	eef0 7a40 	vmov.f32	s15, s0
 800d77e:	4b1a      	ldr	r3, [pc, #104]	; (800d7e8 <decode_VESC+0x190>)
 800d780:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	}
 800d784:	e02a      	b.n	800d7dc <decode_VESC+0x184>
				else if(id == VESCNav.d.Instance)
 800d786:	7bfb      	ldrb	r3, [r7, #15]
 800d788:	b29a      	uxth	r2, r3
 800d78a:	4b17      	ldr	r3, [pc, #92]	; (800d7e8 <decode_VESC+0x190>)
 800d78c:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800d790:	429a      	cmp	r2, r3
 800d792:	d123      	bne.n	800d7dc <decode_VESC+0x184>
					VESCNav.d.info.rpm = buffer_get_float32((uint8_t*)&vescmsg.Data, 1.0, &ind);
 800d794:	1d3b      	adds	r3, r7, #4
 800d796:	4619      	mov	r1, r3
 800d798:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d79c:	4813      	ldr	r0, [pc, #76]	; (800d7ec <decode_VESC+0x194>)
 800d79e:	f7ff fd5a 	bl	800d256 <buffer_get_float32>
 800d7a2:	eef0 7a40 	vmov.f32	s15, s0
 800d7a6:	4b10      	ldr	r3, [pc, #64]	; (800d7e8 <decode_VESC+0x190>)
 800d7a8:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
					VESCNav.d.info.current = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d7ac:	1d3b      	adds	r3, r7, #4
 800d7ae:	4619      	mov	r1, r3
 800d7b0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d7b4:	480d      	ldr	r0, [pc, #52]	; (800d7ec <decode_VESC+0x194>)
 800d7b6:	f7ff fd33 	bl	800d220 <buffer_get_float16>
 800d7ba:	eef0 7a40 	vmov.f32	s15, s0
 800d7be:	4b0a      	ldr	r3, [pc, #40]	; (800d7e8 <decode_VESC+0x190>)
 800d7c0:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
					VESCNav.d.info.duty = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d7c4:	1d3b      	adds	r3, r7, #4
 800d7c6:	4619      	mov	r1, r3
 800d7c8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d7cc:	4807      	ldr	r0, [pc, #28]	; (800d7ec <decode_VESC+0x194>)
 800d7ce:	f7ff fd27 	bl	800d220 <buffer_get_float16>
 800d7d2:	eef0 7a40 	vmov.f32	s15, s0
 800d7d6:	4b04      	ldr	r3, [pc, #16]	; (800d7e8 <decode_VESC+0x190>)
 800d7d8:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	}
 800d7dc:	bf00      	nop
 800d7de:	3710      	adds	r7, #16
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}
 800d7e4:	20009548 	.word	0x20009548
 800d7e8:	20009248 	.word	0x20009248
 800d7ec:	20009564 	.word	0x20009564

0800d7f0 <set_rx_frames>:
		return res;
	} else
		return 0;
}

uint8_t set_rx_frames(Vescmsg* CANRxFrame) {
 800d7f0:	b4b0      	push	{r4, r5, r7}
 800d7f2:	b085      	sub	sp, #20
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
	uint32_t cmd;

	rx_frames[rx_frame_write++] = *CANRxFrame;
 800d7f8:	4b16      	ldr	r3, [pc, #88]	; (800d854 <set_rx_frames+0x64>)
 800d7fa:	681a      	ldr	r2, [r3, #0]
 800d7fc:	1c53      	adds	r3, r2, #1
 800d7fe:	4915      	ldr	r1, [pc, #84]	; (800d854 <set_rx_frames+0x64>)
 800d800:	600b      	str	r3, [r1, #0]
 800d802:	4915      	ldr	r1, [pc, #84]	; (800d858 <set_rx_frames+0x68>)
 800d804:	4613      	mov	r3, r2
 800d806:	00db      	lsls	r3, r3, #3
 800d808:	4413      	add	r3, r2
 800d80a:	009b      	lsls	r3, r3, #2
 800d80c:	18ca      	adds	r2, r1, r3
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	4614      	mov	r4, r2
 800d812:	461d      	mov	r5, r3
 800d814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d816:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d81a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d81c:	682b      	ldr	r3, [r5, #0]
 800d81e:	6023      	str	r3, [r4, #0]
	if (rx_frame_write == RX_FRAMES_SIZE) {
 800d820:	4b0c      	ldr	r3, [pc, #48]	; (800d854 <set_rx_frames+0x64>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	2b64      	cmp	r3, #100	; 0x64
 800d826:	d102      	bne.n	800d82e <set_rx_frames+0x3e>
		rx_frame_write = 0;
 800d828:	4b0a      	ldr	r3, [pc, #40]	; (800d854 <set_rx_frames+0x64>)
 800d82a:	2200      	movs	r2, #0
 800d82c:	601a      	str	r2, [r3, #0]
	}

	cmd = CANRxFrame->Rxmsg.ExtId >> 8;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	685b      	ldr	r3, [r3, #4]
 800d832:	0a1b      	lsrs	r3, r3, #8
 800d834:	60fb      	str	r3, [r7, #12]
	if(cmd == (uint32_t)CAN_PACKET_PROCESS_RX_BUFFER || cmd == (uint32_t)CAN_PACKET_PROCESS_SHORT_BUFFER)
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	2b07      	cmp	r3, #7
 800d83a:	d002      	beq.n	800d842 <set_rx_frames+0x52>
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	2b08      	cmp	r3, #8
 800d840:	d101      	bne.n	800d846 <set_rx_frames+0x56>
		return 112;
 800d842:	2370      	movs	r3, #112	; 0x70
 800d844:	e000      	b.n	800d848 <set_rx_frames+0x58>
	else
		return 0;
 800d846:	2300      	movs	r3, #0
}
 800d848:	4618      	mov	r0, r3
 800d84a:	3714      	adds	r7, #20
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bcb0      	pop	{r4, r5, r7}
 800d850:	4770      	bx	lr
 800d852:	bf00      	nop
 800d854:	20001130 	.word	0x20001130
 800d858:	20000320 	.word	0x20000320

0800d85c <VESCNavInit>:
/*\
 * Assume same type of motor used in navigation
 * Init all motor at once with different CAN_ID
 */
void VESCNavInit(float max_rpm, float pole_pairs, float xPtd, float yPtd, float wheel_diameter, uint16_t Instance1, uint16_t Instance2, uint16_t Instance3, uint16_t Instance4)
{
 800d85c:	b590      	push	{r4, r7, lr}
 800d85e:	b089      	sub	sp, #36	; 0x24
 800d860:	af00      	add	r7, sp, #0
 800d862:	ed87 0a07 	vstr	s0, [r7, #28]
 800d866:	edc7 0a06 	vstr	s1, [r7, #24]
 800d86a:	ed87 1a05 	vstr	s2, [r7, #20]
 800d86e:	edc7 1a04 	vstr	s3, [r7, #16]
 800d872:	ed87 2a03 	vstr	s4, [r7, #12]
 800d876:	4604      	mov	r4, r0
 800d878:	4608      	mov	r0, r1
 800d87a:	4611      	mov	r1, r2
 800d87c:	461a      	mov	r2, r3
 800d87e:	4623      	mov	r3, r4
 800d880:	817b      	strh	r3, [r7, #10]
 800d882:	4603      	mov	r3, r0
 800d884:	813b      	strh	r3, [r7, #8]
 800d886:	460b      	mov	r3, r1
 800d888:	80fb      	strh	r3, [r7, #6]
 800d88a:	4613      	mov	r3, r2
 800d88c:	80bb      	strh	r3, [r7, #4]
	VESCInit(max_rpm, pole_pairs, wheel_diameter, Instance1, &VESCNav.a);
 800d88e:	897b      	ldrh	r3, [r7, #10]
 800d890:	491b      	ldr	r1, [pc, #108]	; (800d900 <VESCNavInit+0xa4>)
 800d892:	4618      	mov	r0, r3
 800d894:	ed97 1a03 	vldr	s2, [r7, #12]
 800d898:	edd7 0a06 	vldr	s1, [r7, #24]
 800d89c:	ed97 0a07 	vldr	s0, [r7, #28]
 800d8a0:	f000 faf0 	bl	800de84 <VESCInit>
	VESCInit(max_rpm, pole_pairs, wheel_diameter, Instance2, &VESCNav.b);
 800d8a4:	893b      	ldrh	r3, [r7, #8]
 800d8a6:	4917      	ldr	r1, [pc, #92]	; (800d904 <VESCNavInit+0xa8>)
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	ed97 1a03 	vldr	s2, [r7, #12]
 800d8ae:	edd7 0a06 	vldr	s1, [r7, #24]
 800d8b2:	ed97 0a07 	vldr	s0, [r7, #28]
 800d8b6:	f000 fae5 	bl	800de84 <VESCInit>
	VESCInit(max_rpm, pole_pairs, wheel_diameter, Instance3, &VESCNav.c);
 800d8ba:	88fb      	ldrh	r3, [r7, #6]
 800d8bc:	4912      	ldr	r1, [pc, #72]	; (800d908 <VESCNavInit+0xac>)
 800d8be:	4618      	mov	r0, r3
 800d8c0:	ed97 1a03 	vldr	s2, [r7, #12]
 800d8c4:	edd7 0a06 	vldr	s1, [r7, #24]
 800d8c8:	ed97 0a07 	vldr	s0, [r7, #28]
 800d8cc:	f000 fada 	bl	800de84 <VESCInit>
	VESCInit(max_rpm, pole_pairs, wheel_diameter, Instance4, &VESCNav.d);
 800d8d0:	88bb      	ldrh	r3, [r7, #4]
 800d8d2:	490e      	ldr	r1, [pc, #56]	; (800d90c <VESCNavInit+0xb0>)
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	ed97 1a03 	vldr	s2, [r7, #12]
 800d8da:	edd7 0a06 	vldr	s1, [r7, #24]
 800d8de:	ed97 0a07 	vldr	s0, [r7, #28]
 800d8e2:	f000 facf 	bl	800de84 <VESCInit>
	VESCNav.xPtd = xPtd;
 800d8e6:	4a06      	ldr	r2, [pc, #24]	; (800d900 <VESCNavInit+0xa4>)
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	VESCNav.yPtd = yPtd;
 800d8ee:	4a04      	ldr	r2, [pc, #16]	; (800d900 <VESCNavInit+0xa4>)
 800d8f0:	693b      	ldr	r3, [r7, #16]
 800d8f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800d8f6:	bf00      	nop
 800d8f8:	3724      	adds	r7, #36	; 0x24
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd90      	pop	{r4, r7, pc}
 800d8fe:	bf00      	nop
 800d900:	20009248 	.word	0x20009248
 800d904:	20009268 	.word	0x20009268
 800d908:	20009288 	.word	0x20009288
 800d90c:	200092a8 	.word	0x200092a8

0800d910 <VESCNavStop>:

/*
 * Stop all motor at once
 */
void VESCNavStop()
{
 800d910:	b580      	push	{r7, lr}
 800d912:	ed2d 8b04 	vpush	{d8-d9}
 800d916:	af00      	add	r7, sp, #0
	if((VESCNav.a_vel || VESCNav.b_vel || VESCNav.c_vel || VESCNav.d_vel) && HAL_GetTick() - hb_count > HandBrake)
 800d918:	4b67      	ldr	r3, [pc, #412]	; (800dab8 <VESCNavStop+0x1a8>)
 800d91a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800d91e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d926:	d117      	bne.n	800d958 <VESCNavStop+0x48>
 800d928:	4b63      	ldr	r3, [pc, #396]	; (800dab8 <VESCNavStop+0x1a8>)
 800d92a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800d92e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d936:	d10f      	bne.n	800d958 <VESCNavStop+0x48>
 800d938:	4b5f      	ldr	r3, [pc, #380]	; (800dab8 <VESCNavStop+0x1a8>)
 800d93a:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800d93e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d946:	d107      	bne.n	800d958 <VESCNavStop+0x48>
 800d948:	4b5b      	ldr	r3, [pc, #364]	; (800dab8 <VESCNavStop+0x1a8>)
 800d94a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800d94e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d956:	d076      	beq.n	800da46 <VESCNavStop+0x136>
 800d958:	f000 fb8c 	bl	800e074 <HAL_GetTick>
 800d95c:	4603      	mov	r3, r0
 800d95e:	4a57      	ldr	r2, [pc, #348]	; (800dabc <VESCNavStop+0x1ac>)
 800d960:	6812      	ldr	r2, [r2, #0]
 800d962:	1a9b      	subs	r3, r3, r2
 800d964:	2b64      	cmp	r3, #100	; 0x64
 800d966:	d96e      	bls.n	800da46 <VESCNavStop+0x136>
	{
		VESCPIDProcess(-pow(VESCNav.a_vel, 2), -pow(VESCNav.b_vel, 2), -pow(VESCNav.c_vel, 2), -pow(VESCNav.d_vel, 2));
 800d968:	4b53      	ldr	r3, [pc, #332]	; (800dab8 <VESCNavStop+0x1a8>)
 800d96a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d96e:	4618      	mov	r0, r3
 800d970:	f7f2 fdea 	bl	8000548 <__aeabi_f2d>
 800d974:	4602      	mov	r2, r0
 800d976:	460b      	mov	r3, r1
 800d978:	ed9f 1b4d 	vldr	d1, [pc, #308]	; 800dab0 <VESCNavStop+0x1a0>
 800d97c:	ec43 2b10 	vmov	d0, r2, r3
 800d980:	f010 f922 	bl	801dbc8 <pow>
 800d984:	ec53 2b10 	vmov	r2, r3, d0
 800d988:	4610      	mov	r0, r2
 800d98a:	4619      	mov	r1, r3
 800d98c:	f7f3 f92c 	bl	8000be8 <__aeabi_d2f>
 800d990:	4603      	mov	r3, r0
 800d992:	ee07 3a90 	vmov	s15, r3
 800d996:	eeb1 8a67 	vneg.f32	s16, s15
 800d99a:	4b47      	ldr	r3, [pc, #284]	; (800dab8 <VESCNavStop+0x1a8>)
 800d99c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f7f2 fdd1 	bl	8000548 <__aeabi_f2d>
 800d9a6:	4602      	mov	r2, r0
 800d9a8:	460b      	mov	r3, r1
 800d9aa:	ed9f 1b41 	vldr	d1, [pc, #260]	; 800dab0 <VESCNavStop+0x1a0>
 800d9ae:	ec43 2b10 	vmov	d0, r2, r3
 800d9b2:	f010 f909 	bl	801dbc8 <pow>
 800d9b6:	ec53 2b10 	vmov	r2, r3, d0
 800d9ba:	4610      	mov	r0, r2
 800d9bc:	4619      	mov	r1, r3
 800d9be:	f7f3 f913 	bl	8000be8 <__aeabi_d2f>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	ee07 3a90 	vmov	s15, r3
 800d9c8:	eef1 8a67 	vneg.f32	s17, s15
 800d9cc:	4b3a      	ldr	r3, [pc, #232]	; (800dab8 <VESCNavStop+0x1a8>)
 800d9ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7f2 fdb8 	bl	8000548 <__aeabi_f2d>
 800d9d8:	4602      	mov	r2, r0
 800d9da:	460b      	mov	r3, r1
 800d9dc:	ed9f 1b34 	vldr	d1, [pc, #208]	; 800dab0 <VESCNavStop+0x1a0>
 800d9e0:	ec43 2b10 	vmov	d0, r2, r3
 800d9e4:	f010 f8f0 	bl	801dbc8 <pow>
 800d9e8:	ec53 2b10 	vmov	r2, r3, d0
 800d9ec:	4610      	mov	r0, r2
 800d9ee:	4619      	mov	r1, r3
 800d9f0:	f7f3 f8fa 	bl	8000be8 <__aeabi_d2f>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	ee07 3a90 	vmov	s15, r3
 800d9fa:	eeb1 9a67 	vneg.f32	s18, s15
 800d9fe:	4b2e      	ldr	r3, [pc, #184]	; (800dab8 <VESCNavStop+0x1a8>)
 800da00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da04:	4618      	mov	r0, r3
 800da06:	f7f2 fd9f 	bl	8000548 <__aeabi_f2d>
 800da0a:	4602      	mov	r2, r0
 800da0c:	460b      	mov	r3, r1
 800da0e:	ed9f 1b28 	vldr	d1, [pc, #160]	; 800dab0 <VESCNavStop+0x1a0>
 800da12:	ec43 2b10 	vmov	d0, r2, r3
 800da16:	f010 f8d7 	bl	801dbc8 <pow>
 800da1a:	ec53 2b10 	vmov	r2, r3, d0
 800da1e:	4610      	mov	r0, r2
 800da20:	4619      	mov	r1, r3
 800da22:	f7f3 f8e1 	bl	8000be8 <__aeabi_d2f>
 800da26:	4603      	mov	r3, r0
 800da28:	ee07 3a90 	vmov	s15, r3
 800da2c:	eef1 7a67 	vneg.f32	s15, s15
 800da30:	eef0 1a67 	vmov.f32	s3, s15
 800da34:	eeb0 1a49 	vmov.f32	s2, s18
 800da38:	eef0 0a68 	vmov.f32	s1, s17
 800da3c:	eeb0 0a48 	vmov.f32	s0, s16
 800da40:	f000 f8f6 	bl	800dc30 <VESCPIDProcess>
 800da44:	e02d      	b.n	800daa2 <VESCNavStop+0x192>
	}
	else
	{
		sys.navi_vel = 0;
 800da46:	4a1e      	ldr	r2, [pc, #120]	; (800dac0 <VESCNavStop+0x1b0>)
 800da48:	7853      	ldrb	r3, [r2, #1]
 800da4a:	f36f 0382 	bfc	r3, #2, #1
 800da4e:	7053      	strb	r3, [r2, #1]

		PIDDelayInit(&fright_vel);
 800da50:	481c      	ldr	r0, [pc, #112]	; (800dac4 <VESCNavStop+0x1b4>)
 800da52:	f7f7 fe4a 	bl	80056ea <PIDDelayInit>
		PIDDelayInit(&fleft_vel);
 800da56:	481c      	ldr	r0, [pc, #112]	; (800dac8 <VESCNavStop+0x1b8>)
 800da58:	f7f7 fe47 	bl	80056ea <PIDDelayInit>
		PIDDelayInit(&bleft_vel);
 800da5c:	481b      	ldr	r0, [pc, #108]	; (800dacc <VESCNavStop+0x1bc>)
 800da5e:	f7f7 fe44 	bl	80056ea <PIDDelayInit>
		PIDDelayInit(&bright_vel);
 800da62:	481b      	ldr	r0, [pc, #108]	; (800dad0 <VESCNavStop+0x1c0>)
 800da64:	f7f7 fe41 	bl	80056ea <PIDDelayInit>

		fFLeftVelU = 0.0;
 800da68:	4b1a      	ldr	r3, [pc, #104]	; (800dad4 <VESCNavStop+0x1c4>)
 800da6a:	f04f 0200 	mov.w	r2, #0
 800da6e:	601a      	str	r2, [r3, #0]
		fFRightVelU = 0.0;
 800da70:	4b19      	ldr	r3, [pc, #100]	; (800dad8 <VESCNavStop+0x1c8>)
 800da72:	f04f 0200 	mov.w	r2, #0
 800da76:	601a      	str	r2, [r3, #0]
		fBLeftVelU = 0.0;
 800da78:	4b18      	ldr	r3, [pc, #96]	; (800dadc <VESCNavStop+0x1cc>)
 800da7a:	f04f 0200 	mov.w	r2, #0
 800da7e:	601a      	str	r2, [r3, #0]
		fBRightVelU = 0.0;
 800da80:	4b17      	ldr	r3, [pc, #92]	; (800dae0 <VESCNavStop+0x1d0>)
 800da82:	f04f 0200 	mov.w	r2, #0
 800da86:	601a      	str	r2, [r3, #0]

		VESCStop(&VESCNav.a);
 800da88:	480b      	ldr	r0, [pc, #44]	; (800dab8 <VESCNavStop+0x1a8>)
 800da8a:	f000 fa47 	bl	800df1c <VESCStop>
		VESCStop(&VESCNav.b);
 800da8e:	4815      	ldr	r0, [pc, #84]	; (800dae4 <VESCNavStop+0x1d4>)
 800da90:	f000 fa44 	bl	800df1c <VESCStop>
		VESCStop(&VESCNav.c);
 800da94:	4814      	ldr	r0, [pc, #80]	; (800dae8 <VESCNavStop+0x1d8>)
 800da96:	f000 fa41 	bl	800df1c <VESCStop>
		VESCStop(&VESCNav.d);
 800da9a:	4814      	ldr	r0, [pc, #80]	; (800daec <VESCNavStop+0x1dc>)
 800da9c:	f000 fa3e 	bl	800df1c <VESCStop>
	}
}
 800daa0:	bf00      	nop
 800daa2:	bf00      	nop
 800daa4:	46bd      	mov	sp, r7
 800daa6:	ecbd 8b04 	vpop	{d8-d9}
 800daaa:	bd80      	pop	{r7, pc}
 800daac:	f3af 8000 	nop.w
 800dab0:	00000000 	.word	0x00000000
 800dab4:	40000000 	.word	0x40000000
 800dab8:	20009248 	.word	0x20009248
 800dabc:	2000974c 	.word	0x2000974c
 800dac0:	20007268 	.word	0x20007268
 800dac4:	20007324 	.word	0x20007324
 800dac8:	200078a8 	.word	0x200078a8
 800dacc:	20006998 	.word	0x20006998
 800dad0:	20009b2c 	.word	0x20009b2c
 800dad4:	200078a4 	.word	0x200078a4
 800dad8:	2000681c 	.word	0x2000681c
 800dadc:	20006a80 	.word	0x20006a80
 800dae0:	200064fc 	.word	0x200064fc
 800dae4:	20009268 	.word	0x20009268
 800dae8:	20009288 	.word	0x20009288
 800daec:	200092a8 	.word	0x200092a8

0800daf0 <VESCNavCalVel>:
	VESCHandBrake(&VESCNav.c, c);
	VESCHandBrake(&VESCNav.d, d);
}

void VESCNavCalVel(float rpmA, float rpmB, float rpmC, float rpmD)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b084      	sub	sp, #16
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	ed87 0a03 	vstr	s0, [r7, #12]
 800dafa:	edc7 0a02 	vstr	s1, [r7, #8]
 800dafe:	ed87 1a01 	vstr	s2, [r7, #4]
 800db02:	edc7 1a00 	vstr	s3, [r7]
//	rpmA *= (MCCONF_SI_MOTOR_POLES / 2);
//	rpmB *= (MCCONF_SI_MOTOR_POLES / 2);
//	rpmC *= (MCCONF_SI_MOTOR_POLES / 2);
//	rpmD *= (MCCONF_SI_MOTOR_POLES / 2);

	VESCNav.a_vel = (((rpmA / (MCCONF_SI_MOTOR_POLES / 2)) / MCCONF_SI_GEAR_RATIO) * (M_PI * MCCONF_SI_WHEEL_DIAMETER)) / 60;
 800db06:	edd7 7a03 	vldr	s15, [r7, #12]
 800db0a:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800db0e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800db12:	ee16 0a90 	vmov	r0, s13
 800db16:	f7f2 fd17 	bl	8000548 <__aeabi_f2d>
 800db1a:	a341      	add	r3, pc, #260	; (adr r3, 800dc20 <VESCNavCalVel+0x130>)
 800db1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db20:	f7f2 fd6a 	bl	80005f8 <__aeabi_dmul>
 800db24:	4602      	mov	r2, r0
 800db26:	460b      	mov	r3, r1
 800db28:	4610      	mov	r0, r2
 800db2a:	4619      	mov	r1, r3
 800db2c:	f04f 0200 	mov.w	r2, #0
 800db30:	4b3d      	ldr	r3, [pc, #244]	; (800dc28 <VESCNavCalVel+0x138>)
 800db32:	f7f2 fe8b 	bl	800084c <__aeabi_ddiv>
 800db36:	4602      	mov	r2, r0
 800db38:	460b      	mov	r3, r1
 800db3a:	4610      	mov	r0, r2
 800db3c:	4619      	mov	r1, r3
 800db3e:	f7f3 f853 	bl	8000be8 <__aeabi_d2f>
 800db42:	4603      	mov	r3, r0
 800db44:	4a39      	ldr	r2, [pc, #228]	; (800dc2c <VESCNavCalVel+0x13c>)
 800db46:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	VESCNav.b_vel = (((rpmB / (MCCONF_SI_MOTOR_POLES / 2)) / MCCONF_SI_GEAR_RATIO) * (M_PI * MCCONF_SI_WHEEL_DIAMETER)) / 60;
 800db4a:	edd7 7a02 	vldr	s15, [r7, #8]
 800db4e:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800db52:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800db56:	ee16 0a90 	vmov	r0, s13
 800db5a:	f7f2 fcf5 	bl	8000548 <__aeabi_f2d>
 800db5e:	a330      	add	r3, pc, #192	; (adr r3, 800dc20 <VESCNavCalVel+0x130>)
 800db60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db64:	f7f2 fd48 	bl	80005f8 <__aeabi_dmul>
 800db68:	4602      	mov	r2, r0
 800db6a:	460b      	mov	r3, r1
 800db6c:	4610      	mov	r0, r2
 800db6e:	4619      	mov	r1, r3
 800db70:	f04f 0200 	mov.w	r2, #0
 800db74:	4b2c      	ldr	r3, [pc, #176]	; (800dc28 <VESCNavCalVel+0x138>)
 800db76:	f7f2 fe69 	bl	800084c <__aeabi_ddiv>
 800db7a:	4602      	mov	r2, r0
 800db7c:	460b      	mov	r3, r1
 800db7e:	4610      	mov	r0, r2
 800db80:	4619      	mov	r1, r3
 800db82:	f7f3 f831 	bl	8000be8 <__aeabi_d2f>
 800db86:	4603      	mov	r3, r0
 800db88:	4a28      	ldr	r2, [pc, #160]	; (800dc2c <VESCNavCalVel+0x13c>)
 800db8a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	VESCNav.c_vel = (((rpmC / (MCCONF_SI_MOTOR_POLES / 2)) / MCCONF_SI_GEAR_RATIO) * (M_PI * MCCONF_SI_WHEEL_DIAMETER)) / 60;
 800db8e:	edd7 7a01 	vldr	s15, [r7, #4]
 800db92:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800db96:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800db9a:	ee16 0a90 	vmov	r0, s13
 800db9e:	f7f2 fcd3 	bl	8000548 <__aeabi_f2d>
 800dba2:	a31f      	add	r3, pc, #124	; (adr r3, 800dc20 <VESCNavCalVel+0x130>)
 800dba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba8:	f7f2 fd26 	bl	80005f8 <__aeabi_dmul>
 800dbac:	4602      	mov	r2, r0
 800dbae:	460b      	mov	r3, r1
 800dbb0:	4610      	mov	r0, r2
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	f04f 0200 	mov.w	r2, #0
 800dbb8:	4b1b      	ldr	r3, [pc, #108]	; (800dc28 <VESCNavCalVel+0x138>)
 800dbba:	f7f2 fe47 	bl	800084c <__aeabi_ddiv>
 800dbbe:	4602      	mov	r2, r0
 800dbc0:	460b      	mov	r3, r1
 800dbc2:	4610      	mov	r0, r2
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	f7f3 f80f 	bl	8000be8 <__aeabi_d2f>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	4a17      	ldr	r2, [pc, #92]	; (800dc2c <VESCNavCalVel+0x13c>)
 800dbce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	VESCNav.d_vel = (((rpmD / (MCCONF_SI_MOTOR_POLES / 2)) / MCCONF_SI_GEAR_RATIO) * (M_PI * MCCONF_SI_WHEEL_DIAMETER)) / 60;
 800dbd2:	edd7 7a00 	vldr	s15, [r7]
 800dbd6:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800dbda:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dbde:	ee16 0a90 	vmov	r0, s13
 800dbe2:	f7f2 fcb1 	bl	8000548 <__aeabi_f2d>
 800dbe6:	a30e      	add	r3, pc, #56	; (adr r3, 800dc20 <VESCNavCalVel+0x130>)
 800dbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbec:	f7f2 fd04 	bl	80005f8 <__aeabi_dmul>
 800dbf0:	4602      	mov	r2, r0
 800dbf2:	460b      	mov	r3, r1
 800dbf4:	4610      	mov	r0, r2
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	f04f 0200 	mov.w	r2, #0
 800dbfc:	4b0a      	ldr	r3, [pc, #40]	; (800dc28 <VESCNavCalVel+0x138>)
 800dbfe:	f7f2 fe25 	bl	800084c <__aeabi_ddiv>
 800dc02:	4602      	mov	r2, r0
 800dc04:	460b      	mov	r3, r1
 800dc06:	4610      	mov	r0, r2
 800dc08:	4619      	mov	r1, r3
 800dc0a:	f7f2 ffed 	bl	8000be8 <__aeabi_d2f>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	4a06      	ldr	r2, [pc, #24]	; (800dc2c <VESCNavCalVel+0x13c>)
 800dc12:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 800dc16:	bf00      	nop
 800dc18:	3710      	adds	r7, #16
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}
 800dc1e:	bf00      	nop
 800dc20:	769cf0e0 	.word	0x769cf0e0
 800dc24:	3fd41b2f 	.word	0x3fd41b2f
 800dc28:	404e0000 	.word	0x404e0000
 800dc2c:	20009248 	.word	0x20009248

0800dc30 <VESCPIDProcess>:
 * Keep calculating error from feedback of motor
 * Should be called in Calculation task
 * Recommend to use this function for robot navigation rather than VESCVelocity
 */
void VESCPIDProcess(float a, float b, float c, float d)
{
 800dc30:	b480      	push	{r7}
 800dc32:	b085      	sub	sp, #20
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	ed87 0a03 	vstr	s0, [r7, #12]
 800dc3a:	edc7 0a02 	vstr	s1, [r7, #8]
 800dc3e:	ed87 1a01 	vstr	s2, [r7, #4]
 800dc42:	edc7 1a00 	vstr	s3, [r7]
	fFLeftVelErr = a - VESCNav.a_vel;
 800dc46:	4b17      	ldr	r3, [pc, #92]	; (800dca4 <VESCPIDProcess+0x74>)
 800dc48:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800dc4c:	ed97 7a03 	vldr	s14, [r7, #12]
 800dc50:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc54:	4b14      	ldr	r3, [pc, #80]	; (800dca8 <VESCPIDProcess+0x78>)
 800dc56:	edc3 7a00 	vstr	s15, [r3]
	fFRightVelErr = b - VESCNav.b_vel;
 800dc5a:	4b12      	ldr	r3, [pc, #72]	; (800dca4 <VESCPIDProcess+0x74>)
 800dc5c:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800dc60:	ed97 7a02 	vldr	s14, [r7, #8]
 800dc64:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc68:	4b10      	ldr	r3, [pc, #64]	; (800dcac <VESCPIDProcess+0x7c>)
 800dc6a:	edc3 7a00 	vstr	s15, [r3]
	fBLeftVelErr = c - VESCNav.c_vel;
 800dc6e:	4b0d      	ldr	r3, [pc, #52]	; (800dca4 <VESCPIDProcess+0x74>)
 800dc70:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800dc74:	ed97 7a01 	vldr	s14, [r7, #4]
 800dc78:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc7c:	4b0c      	ldr	r3, [pc, #48]	; (800dcb0 <VESCPIDProcess+0x80>)
 800dc7e:	edc3 7a00 	vstr	s15, [r3]
	fBRightVelErr = d - VESCNav.d_vel;
 800dc82:	4b08      	ldr	r3, [pc, #32]	; (800dca4 <VESCPIDProcess+0x74>)
 800dc84:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800dc88:	ed97 7a00 	vldr	s14, [r7]
 800dc8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc90:	4b08      	ldr	r3, [pc, #32]	; (800dcb4 <VESCPIDProcess+0x84>)
 800dc92:	edc3 7a00 	vstr	s15, [r3]
}
 800dc96:	bf00      	nop
 800dc98:	3714      	adds	r7, #20
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca0:	4770      	bx	lr
 800dca2:	bf00      	nop
 800dca4:	20009248 	.word	0x20009248
 800dca8:	200077b0 	.word	0x200077b0
 800dcac:	20009034 	.word	0x20009034
 800dcb0:	20009b24 	.word	0x20009b24
 800dcb4:	20006818 	.word	0x20006818

0800dcb8 <VESCPIDAct>:

/*
 * Implement the PID output for robot navigation
 */
void VESCPIDAct(void)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	af00      	add	r7, sp, #0
	if(sys.navi_vel)
 800dcbc:	4b22      	ldr	r3, [pc, #136]	; (800dd48 <VESCPIDAct+0x90>)
 800dcbe:	785b      	ldrb	r3, [r3, #1]
 800dcc0:	f003 0304 	and.w	r3, r3, #4
 800dcc4:	b2db      	uxtb	r3, r3
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d00b      	beq.n	800dce2 <VESCPIDAct+0x2a>
	{
		PID(&fleft_vel);
 800dcca:	4820      	ldr	r0, [pc, #128]	; (800dd4c <VESCPIDAct+0x94>)
 800dccc:	f7f7 fd2b 	bl	8005726 <PID>
		PID(&fright_vel);
 800dcd0:	481f      	ldr	r0, [pc, #124]	; (800dd50 <VESCPIDAct+0x98>)
 800dcd2:	f7f7 fd28 	bl	8005726 <PID>
		PID(&bleft_vel);
 800dcd6:	481f      	ldr	r0, [pc, #124]	; (800dd54 <VESCPIDAct+0x9c>)
 800dcd8:	f7f7 fd25 	bl	8005726 <PID>
		PID(&bright_vel);
 800dcdc:	481e      	ldr	r0, [pc, #120]	; (800dd58 <VESCPIDAct+0xa0>)
 800dcde:	f7f7 fd22 	bl	8005726 <PID>
	}
	VESCPDC(fFLeftVelU / 19999.00, &VESCNav.a);
 800dce2:	4b1e      	ldr	r3, [pc, #120]	; (800dd5c <VESCPIDAct+0xa4>)
 800dce4:	edd3 7a00 	vldr	s15, [r3]
 800dce8:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800dd60 <VESCPIDAct+0xa8>
 800dcec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800dcf0:	481c      	ldr	r0, [pc, #112]	; (800dd64 <VESCPIDAct+0xac>)
 800dcf2:	eeb0 0a47 	vmov.f32	s0, s14
 800dcf6:	f000 f8e7 	bl	800dec8 <VESCPDC>
	VESCPDC(fFRightVelU / 19999.00, &VESCNav.b);
 800dcfa:	4b1b      	ldr	r3, [pc, #108]	; (800dd68 <VESCPIDAct+0xb0>)
 800dcfc:	edd3 7a00 	vldr	s15, [r3]
 800dd00:	eddf 6a17 	vldr	s13, [pc, #92]	; 800dd60 <VESCPIDAct+0xa8>
 800dd04:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800dd08:	4818      	ldr	r0, [pc, #96]	; (800dd6c <VESCPIDAct+0xb4>)
 800dd0a:	eeb0 0a47 	vmov.f32	s0, s14
 800dd0e:	f000 f8db 	bl	800dec8 <VESCPDC>
	VESCPDC(fBLeftVelU / 19999.00, &VESCNav.c);
 800dd12:	4b17      	ldr	r3, [pc, #92]	; (800dd70 <VESCPIDAct+0xb8>)
 800dd14:	edd3 7a00 	vldr	s15, [r3]
 800dd18:	eddf 6a11 	vldr	s13, [pc, #68]	; 800dd60 <VESCPIDAct+0xa8>
 800dd1c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800dd20:	4814      	ldr	r0, [pc, #80]	; (800dd74 <VESCPIDAct+0xbc>)
 800dd22:	eeb0 0a47 	vmov.f32	s0, s14
 800dd26:	f000 f8cf 	bl	800dec8 <VESCPDC>
	VESCPDC(fBRightVelU / 19999.00, &VESCNav.d);
 800dd2a:	4b13      	ldr	r3, [pc, #76]	; (800dd78 <VESCPIDAct+0xc0>)
 800dd2c:	edd3 7a00 	vldr	s15, [r3]
 800dd30:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800dd60 <VESCPIDAct+0xa8>
 800dd34:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800dd38:	4810      	ldr	r0, [pc, #64]	; (800dd7c <VESCPIDAct+0xc4>)
 800dd3a:	eeb0 0a47 	vmov.f32	s0, s14
 800dd3e:	f000 f8c3 	bl	800dec8 <VESCPDC>
}
 800dd42:	bf00      	nop
 800dd44:	bd80      	pop	{r7, pc}
 800dd46:	bf00      	nop
 800dd48:	20007268 	.word	0x20007268
 800dd4c:	200078a8 	.word	0x200078a8
 800dd50:	20007324 	.word	0x20007324
 800dd54:	20006998 	.word	0x20006998
 800dd58:	20009b2c 	.word	0x20009b2c
 800dd5c:	200078a4 	.word	0x200078a4
 800dd60:	469c3e00 	.word	0x469c3e00
 800dd64:	20009248 	.word	0x20009248
 800dd68:	2000681c 	.word	0x2000681c
 800dd6c:	20009268 	.word	0x20009268
 800dd70:	20006a80 	.word	0x20006a80
 800dd74:	20009288 	.word	0x20009288
 800dd78:	200064fc 	.word	0x200064fc
 800dd7c:	200092a8 	.word	0x200092a8

0800dd80 <VESCNav5ms>:

/*
 * System 5ms
 */
void VESCNav5ms()
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	ed2d 8b02 	vpush	{d8}
 800dd86:	af00      	add	r7, sp, #0
	fXEncData = VESCNav.xPtd * (QEIRead(QEI1) - 500);
 800dd88:	4b35      	ldr	r3, [pc, #212]	; (800de60 <VESCNav5ms+0xe0>)
 800dd8a:	ed93 8a24 	vldr	s16, [r3, #144]	; 0x90
 800dd8e:	2001      	movs	r0, #1
 800dd90:	f7f4 f8de 	bl	8001f50 <QEIRead>
 800dd94:	4603      	mov	r3, r0
 800dd96:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800dd9a:	ee07 3a90 	vmov	s15, r3
 800dd9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dda2:	ee68 7a27 	vmul.f32	s15, s16, s15
 800dda6:	4b2f      	ldr	r3, [pc, #188]	; (800de64 <VESCNav5ms+0xe4>)
 800dda8:	edc3 7a00 	vstr	s15, [r3]
	fYEncData = VESCNav.yPtd * (QEIRead(QEI4) - 500);
 800ddac:	4b2c      	ldr	r3, [pc, #176]	; (800de60 <VESCNav5ms+0xe0>)
 800ddae:	ed93 8a25 	vldr	s16, [r3, #148]	; 0x94
 800ddb2:	2004      	movs	r0, #4
 800ddb4:	f7f4 f8cc 	bl	8001f50 <QEIRead>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800ddbe:	ee07 3a90 	vmov	s15, r3
 800ddc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ddc6:	ee68 7a27 	vmul.f32	s15, s16, s15
 800ddca:	4b27      	ldr	r3, [pc, #156]	; (800de68 <VESCNav5ms+0xe8>)
 800ddcc:	edc3 7a00 	vstr	s15, [r3]

	ABT(&x_data);
 800ddd0:	4826      	ldr	r0, [pc, #152]	; (800de6c <VESCNav5ms+0xec>)
 800ddd2:	f7f3 f951 	bl	8001078 <ABT>
	ABT(&y_data);
 800ddd6:	4826      	ldr	r0, [pc, #152]	; (800de70 <VESCNav5ms+0xf0>)
 800ddd8:	f7f3 f94e 	bl	8001078 <ABT>
	fyaw = (fyaw >= 0.0) ? fyaw : 360.0 + fyaw;
 800dddc:	4b25      	ldr	r3, [pc, #148]	; (800de74 <VESCNav5ms+0xf4>)
 800ddde:	edd3 7a00 	vldr	s15, [r3]
 800dde2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dde6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddea:	db02      	blt.n	800ddf2 <VESCNav5ms+0x72>
 800ddec:	4b21      	ldr	r3, [pc, #132]	; (800de74 <VESCNav5ms+0xf4>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	e010      	b.n	800de14 <VESCNav5ms+0x94>
 800ddf2:	4b20      	ldr	r3, [pc, #128]	; (800de74 <VESCNav5ms+0xf4>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f7f2 fba6 	bl	8000548 <__aeabi_f2d>
 800ddfc:	f04f 0200 	mov.w	r2, #0
 800de00:	4b1d      	ldr	r3, [pc, #116]	; (800de78 <VESCNav5ms+0xf8>)
 800de02:	f7f2 fa43 	bl	800028c <__adddf3>
 800de06:	4602      	mov	r2, r0
 800de08:	460b      	mov	r3, r1
 800de0a:	4610      	mov	r0, r2
 800de0c:	4619      	mov	r1, r3
 800de0e:	f7f2 feeb 	bl	8000be8 <__aeabi_d2f>
 800de12:	4603      	mov	r3, r0
 800de14:	4a17      	ldr	r2, [pc, #92]	; (800de74 <VESCNav5ms+0xf4>)
 800de16:	6013      	str	r3, [r2, #0]

	PathPlan(&pp);
 800de18:	4818      	ldr	r0, [pc, #96]	; (800de7c <VESCNav5ms+0xfc>)
 800de1a:	f7f7 fee5 	bl	8005be8 <PathPlan>
	VESCNavCalVel(VESCNav.a.info.rpm, VESCNav.b.info.rpm, VESCNav.c.info.rpm, VESCNav.d.info.rpm);
 800de1e:	4b10      	ldr	r3, [pc, #64]	; (800de60 <VESCNav5ms+0xe0>)
 800de20:	edd3 7a04 	vldr	s15, [r3, #16]
 800de24:	4b0e      	ldr	r3, [pc, #56]	; (800de60 <VESCNav5ms+0xe0>)
 800de26:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800de2a:	4b0d      	ldr	r3, [pc, #52]	; (800de60 <VESCNav5ms+0xe0>)
 800de2c:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 800de30:	4b0b      	ldr	r3, [pc, #44]	; (800de60 <VESCNav5ms+0xe0>)
 800de32:	ed93 6a1c 	vldr	s12, [r3, #112]	; 0x70
 800de36:	eef0 1a46 	vmov.f32	s3, s12
 800de3a:	eeb0 1a66 	vmov.f32	s2, s13
 800de3e:	eef0 0a47 	vmov.f32	s1, s14
 800de42:	eeb0 0a67 	vmov.f32	s0, s15
 800de46:	f7ff fe53 	bl	800daf0 <VESCNavCalVel>
	CalcPoleDist(&EncPole);
 800de4a:	480d      	ldr	r0, [pc, #52]	; (800de80 <VESCNav5ms+0x100>)
 800de4c:	f7fd fdd8 	bl	800ba00 <CalcPoleDist>
	VESCPIDAct();
 800de50:	f7ff ff32 	bl	800dcb8 <VESCPIDAct>
}
 800de54:	bf00      	nop
 800de56:	46bd      	mov	sp, r7
 800de58:	ecbd 8b02 	vpop	{d8}
 800de5c:	bd80      	pop	{r7, pc}
 800de5e:	bf00      	nop
 800de60:	20009248 	.word	0x20009248
 800de64:	2000688c 	.word	0x2000688c
 800de68:	2000a0b8 	.word	0x2000a0b8
 800de6c:	2000a090 	.word	0x2000a090
 800de70:	200077b8 	.word	0x200077b8
 800de74:	20009710 	.word	0x20009710
 800de78:	40768000 	.word	0x40768000
 800de7c:	20006c28 	.word	0x20006c28
 800de80:	200093ec 	.word	0x200093ec

0800de84 <VESCInit>:
 * 						  wheel_diameter 	wheel diameter
 * 						  vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCInit(40000,1,0.0037,&csev);
 */
void VESCInit(float max_rpm, float pole_pairs, float wheel_diameter,uint16_t Instance, VESC_t* vesc){
 800de84:	b580      	push	{r7, lr}
 800de86:	b086      	sub	sp, #24
 800de88:	af00      	add	r7, sp, #0
 800de8a:	ed87 0a05 	vstr	s0, [r7, #20]
 800de8e:	edc7 0a04 	vstr	s1, [r7, #16]
 800de92:	ed87 1a03 	vstr	s2, [r7, #12]
 800de96:	4603      	mov	r3, r0
 800de98:	6079      	str	r1, [r7, #4]
 800de9a:	817b      	strh	r3, [r7, #10]
	bldc_interface_init(bldc_send_packet);
 800de9c:	4809      	ldr	r0, [pc, #36]	; (800dec4 <VESCInit+0x40>)
 800de9e:	f7ff f921 	bl	800d0e4 <bldc_interface_init>
//	bldc_interface_set_rx_value_selective_func(bldc_val_selective_received_cb);

	vesc->max_rpm = max_rpm;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	697a      	ldr	r2, [r7, #20]
 800dea6:	601a      	str	r2, [r3, #0]
	vesc->pole_pairs = pole_pairs;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	693a      	ldr	r2, [r7, #16]
 800deac:	605a      	str	r2, [r3, #4]
	vesc->wheel_diameter = wheel_diameter;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	68fa      	ldr	r2, [r7, #12]
 800deb2:	609a      	str	r2, [r3, #8]
	vesc->Instance = Instance;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	897a      	ldrh	r2, [r7, #10]
 800deb8:	819a      	strh	r2, [r3, #12]
}
 800deba:	bf00      	nop
 800debc:	3718      	adds	r7, #24
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
 800dec2:	bf00      	nop
 800dec4:	0800df91 	.word	0x0800df91

0800dec8 <VESCPDC>:
 * 						  BRightPDC		duty cycle of back right motor
 * 						  vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCPDC(0.5, 0.5, 0.5, 0.5);
 */
void VESCPDC(float Duty, VESC_t* vesc) {
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
 800dece:	ed87 0a01 	vstr	s0, [r7, #4]
 800ded2:	6038      	str	r0, [r7, #0]

	if(Duty > 0.9){
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f7f2 fb37 	bl	8000548 <__aeabi_f2d>
 800deda:	a30e      	add	r3, pc, #56	; (adr r3, 800df14 <VESCPDC+0x4c>)
 800dedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee0:	f7f2 fe1a 	bl	8000b18 <__aeabi_dcmpgt>
 800dee4:	4603      	mov	r3, r0
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d001      	beq.n	800deee <VESCPDC+0x26>
		Duty = 0.9;
 800deea:	4b09      	ldr	r3, [pc, #36]	; (800df10 <VESCPDC+0x48>)
 800deec:	607b      	str	r3, [r7, #4]
	}

	comm_can_set_duty(vesc->Instance, Duty);
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	899b      	ldrh	r3, [r3, #12]
 800def2:	b2db      	uxtb	r3, r3
 800def4:	ed97 0a01 	vldr	s0, [r7, #4]
 800def8:	4618      	mov	r0, r3
 800defa:	f7ff fb11 	bl	800d520 <comm_can_set_duty>

	vesc->pdc_flag = 1;
 800defe:	683a      	ldr	r2, [r7, #0]
 800df00:	7f13      	ldrb	r3, [r2, #28]
 800df02:	f043 0304 	orr.w	r3, r3, #4
 800df06:	7713      	strb	r3, [r2, #28]
}
 800df08:	bf00      	nop
 800df0a:	3708      	adds	r7, #8
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}
 800df10:	3f666666 	.word	0x3f666666
 800df14:	cccccccd 	.word	0xcccccccd
 800df18:	3feccccc 	.word	0x3feccccc

0800df1c <VESCStop>:
 * Function Remarks		: NONE
 * Function Arguments	: vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCStop(&csev);
 */
void VESCStop(VESC_t* vesc) {
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b082      	sub	sp, #8
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]

	if(vesc->pdc_flag) {
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	7f1b      	ldrb	r3, [r3, #28]
 800df28:	f003 0304 	and.w	r3, r3, #4
 800df2c:	b2db      	uxtb	r3, r3
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d007      	beq.n	800df42 <VESCStop+0x26>
		comm_can_set_duty(vesc->Instance, 0.0);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	899b      	ldrh	r3, [r3, #12]
 800df36:	b2db      	uxtb	r3, r3
 800df38:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800df8c <VESCStop+0x70>
 800df3c:	4618      	mov	r0, r3
 800df3e:	f7ff faef 	bl	800d520 <comm_can_set_duty>
	}

	if(vesc->rpm_flag) {
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	7f1b      	ldrb	r3, [r3, #28]
 800df46:	f003 0302 	and.w	r3, r3, #2
 800df4a:	b2db      	uxtb	r3, r3
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d007      	beq.n	800df60 <VESCStop+0x44>
		comm_can_set_rpm(vesc->Instance, 0.0);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	899b      	ldrh	r3, [r3, #12]
 800df54:	b2db      	uxtb	r3, r3
 800df56:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800df8c <VESCStop+0x70>
 800df5a:	4618      	mov	r0, r3
 800df5c:	f7ff fb56 	bl	800d60c <comm_can_set_rpm>
	}

	if(vesc->current_flag){
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	7f1b      	ldrb	r3, [r3, #28]
 800df64:	f003 0301 	and.w	r3, r3, #1
 800df68:	b2db      	uxtb	r3, r3
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d007      	beq.n	800df7e <VESCStop+0x62>
		comm_can_set_current(vesc->Instance, 0.0);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	899b      	ldrh	r3, [r3, #12]
 800df72:	b2db      	uxtb	r3, r3
 800df74:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800df8c <VESCStop+0x70>
 800df78:	4618      	mov	r0, r3
 800df7a:	f7ff fb15 	bl	800d5a8 <comm_can_set_current>
	}

	vesc->flags = 0;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2200      	movs	r2, #0
 800df82:	771a      	strb	r2, [r3, #28]
}
 800df84:	bf00      	nop
 800df86:	3708      	adds	r7, #8
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}
 800df8c:	00000000 	.word	0x00000000

0800df90 <bldc_send_packet>:
//	rx_value_complete = false;
	return rx_value_buf;
}

/*	Private Function	*/
void bldc_send_packet(uint8_t controller_id, uint8_t *data, unsigned int len) {
 800df90:	b580      	push	{r7, lr}
 800df92:	b084      	sub	sp, #16
 800df94:	af00      	add	r7, sp, #0
 800df96:	4603      	mov	r3, r0
 800df98:	60b9      	str	r1, [r7, #8]
 800df9a:	607a      	str	r2, [r7, #4]
 800df9c:	73fb      	strb	r3, [r7, #15]
	comm_can_send_buffer(controller_id, data, len, 0);
 800df9e:	7bf8      	ldrb	r0, [r7, #15]
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	687a      	ldr	r2, [r7, #4]
 800dfa4:	68b9      	ldr	r1, [r7, #8]
 800dfa6:	f7ff f99f 	bl	800d2e8 <comm_can_send_buffer>
}
 800dfaa:	bf00      	nop
 800dfac:	3710      	adds	r7, #16
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd80      	pop	{r7, pc}
	...

0800dfb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800dfb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800dfec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800dfb8:	480d      	ldr	r0, [pc, #52]	; (800dff0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800dfba:	490e      	ldr	r1, [pc, #56]	; (800dff4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800dfbc:	4a0e      	ldr	r2, [pc, #56]	; (800dff8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800dfbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800dfc0:	e002      	b.n	800dfc8 <LoopCopyDataInit>

0800dfc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800dfc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800dfc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800dfc6:	3304      	adds	r3, #4

0800dfc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800dfc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800dfca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800dfcc:	d3f9      	bcc.n	800dfc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800dfce:	4a0b      	ldr	r2, [pc, #44]	; (800dffc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800dfd0:	4c0b      	ldr	r4, [pc, #44]	; (800e000 <LoopFillZerobss+0x26>)
  movs r3, #0
 800dfd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800dfd4:	e001      	b.n	800dfda <LoopFillZerobss>

0800dfd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800dfd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800dfd8:	3204      	adds	r2, #4

0800dfda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800dfda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800dfdc:	d3fb      	bcc.n	800dfd6 <FillZerobss>


/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800dfde:	f7ff f86b 	bl	800d0b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800dfe2:	f00a fe09 	bl	8018bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800dfe6:	f7f6 facf 	bl	8004588 <main>
  bx  lr    
 800dfea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800dfec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800dff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800dff4:	200002a8 	.word	0x200002a8
  ldr r2, =_sidata
 800dff8:	08021320 	.word	0x08021320
  ldr r2, =_sbss
 800dffc:	200002a8 	.word	0x200002a8
  ldr r4, =_ebss
 800e000:	2000a51c 	.word	0x2000a51c

0800e004 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e004:	e7fe      	b.n	800e004 <ADC_IRQHandler>
	...

0800e008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e00c:	4b0e      	ldr	r3, [pc, #56]	; (800e048 <HAL_Init+0x40>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	4a0d      	ldr	r2, [pc, #52]	; (800e048 <HAL_Init+0x40>)
 800e012:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e016:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800e018:	4b0b      	ldr	r3, [pc, #44]	; (800e048 <HAL_Init+0x40>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	4a0a      	ldr	r2, [pc, #40]	; (800e048 <HAL_Init+0x40>)
 800e01e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e022:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e024:	4b08      	ldr	r3, [pc, #32]	; (800e048 <HAL_Init+0x40>)
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	4a07      	ldr	r2, [pc, #28]	; (800e048 <HAL_Init+0x40>)
 800e02a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e02e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e030:	2003      	movs	r0, #3
 800e032:	f000 ffcc 	bl	800efce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800e036:	2000      	movs	r0, #0
 800e038:	f7fe ff1e 	bl	800ce78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800e03c:	f7f4 f89e 	bl	800217c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800e040:	2300      	movs	r3, #0
}
 800e042:	4618      	mov	r0, r3
 800e044:	bd80      	pop	{r7, pc}
 800e046:	bf00      	nop
 800e048:	40023c00 	.word	0x40023c00

0800e04c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e04c:	b480      	push	{r7}
 800e04e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e050:	4b06      	ldr	r3, [pc, #24]	; (800e06c <HAL_IncTick+0x20>)
 800e052:	781b      	ldrb	r3, [r3, #0]
 800e054:	461a      	mov	r2, r3
 800e056:	4b06      	ldr	r3, [pc, #24]	; (800e070 <HAL_IncTick+0x24>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	4413      	add	r3, r2
 800e05c:	4a04      	ldr	r2, [pc, #16]	; (800e070 <HAL_IncTick+0x24>)
 800e05e:	6013      	str	r3, [r2, #0]
}
 800e060:	bf00      	nop
 800e062:	46bd      	mov	sp, r7
 800e064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e068:	4770      	bx	lr
 800e06a:	bf00      	nop
 800e06c:	200000c8 	.word	0x200000c8
 800e070:	2000a4a8 	.word	0x2000a4a8

0800e074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e074:	b480      	push	{r7}
 800e076:	af00      	add	r7, sp, #0
  return uwTick;
 800e078:	4b03      	ldr	r3, [pc, #12]	; (800e088 <HAL_GetTick+0x14>)
 800e07a:	681b      	ldr	r3, [r3, #0]
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	46bd      	mov	sp, r7
 800e080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e084:	4770      	bx	lr
 800e086:	bf00      	nop
 800e088:	2000a4a8 	.word	0x2000a4a8

0800e08c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b084      	sub	sp, #16
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e094:	f7ff ffee 	bl	800e074 <HAL_GetTick>
 800e098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e0a4:	d005      	beq.n	800e0b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e0a6:	4b0a      	ldr	r3, [pc, #40]	; (800e0d0 <HAL_Delay+0x44>)
 800e0a8:	781b      	ldrb	r3, [r3, #0]
 800e0aa:	461a      	mov	r2, r3
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	4413      	add	r3, r2
 800e0b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800e0b2:	bf00      	nop
 800e0b4:	f7ff ffde 	bl	800e074 <HAL_GetTick>
 800e0b8:	4602      	mov	r2, r0
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	1ad3      	subs	r3, r2, r3
 800e0be:	68fa      	ldr	r2, [r7, #12]
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d8f7      	bhi.n	800e0b4 <HAL_Delay+0x28>
  {
  }
}
 800e0c4:	bf00      	nop
 800e0c6:	bf00      	nop
 800e0c8:	3710      	adds	r7, #16
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
 800e0ce:	bf00      	nop
 800e0d0:	200000c8 	.word	0x200000c8

0800e0d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b084      	sub	sp, #16
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d101      	bne.n	800e0e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800e0e2:	2301      	movs	r3, #1
 800e0e4:	e0ed      	b.n	800e2c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e0ec:	b2db      	uxtb	r3, r3
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d102      	bne.n	800e0f8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f7f4 f86e 	bl	80021d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	681a      	ldr	r2, [r3, #0]
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	f022 0202 	bic.w	r2, r2, #2
 800e106:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e108:	f7ff ffb4 	bl	800e074 <HAL_GetTick>
 800e10c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800e10e:	e012      	b.n	800e136 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800e110:	f7ff ffb0 	bl	800e074 <HAL_GetTick>
 800e114:	4602      	mov	r2, r0
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	1ad3      	subs	r3, r2, r3
 800e11a:	2b0a      	cmp	r3, #10
 800e11c:	d90b      	bls.n	800e136 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e122:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2205      	movs	r2, #5
 800e12e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800e132:	2301      	movs	r3, #1
 800e134:	e0c5      	b.n	800e2c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	685b      	ldr	r3, [r3, #4]
 800e13c:	f003 0302 	and.w	r3, r3, #2
 800e140:	2b00      	cmp	r3, #0
 800e142:	d1e5      	bne.n	800e110 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	681a      	ldr	r2, [r3, #0]
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	f042 0201 	orr.w	r2, r2, #1
 800e152:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e154:	f7ff ff8e 	bl	800e074 <HAL_GetTick>
 800e158:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800e15a:	e012      	b.n	800e182 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800e15c:	f7ff ff8a 	bl	800e074 <HAL_GetTick>
 800e160:	4602      	mov	r2, r0
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	1ad3      	subs	r3, r2, r3
 800e166:	2b0a      	cmp	r3, #10
 800e168:	d90b      	bls.n	800e182 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e16e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2205      	movs	r2, #5
 800e17a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800e17e:	2301      	movs	r3, #1
 800e180:	e09f      	b.n	800e2c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	685b      	ldr	r3, [r3, #4]
 800e188:	f003 0301 	and.w	r3, r3, #1
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d0e5      	beq.n	800e15c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	7e1b      	ldrb	r3, [r3, #24]
 800e194:	2b01      	cmp	r3, #1
 800e196:	d108      	bne.n	800e1aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	681a      	ldr	r2, [r3, #0]
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e1a6:	601a      	str	r2, [r3, #0]
 800e1a8:	e007      	b.n	800e1ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	681a      	ldr	r2, [r3, #0]
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e1b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	7e5b      	ldrb	r3, [r3, #25]
 800e1be:	2b01      	cmp	r3, #1
 800e1c0:	d108      	bne.n	800e1d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	681a      	ldr	r2, [r3, #0]
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e1d0:	601a      	str	r2, [r3, #0]
 800e1d2:	e007      	b.n	800e1e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	681a      	ldr	r2, [r3, #0]
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e1e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	7e9b      	ldrb	r3, [r3, #26]
 800e1e8:	2b01      	cmp	r3, #1
 800e1ea:	d108      	bne.n	800e1fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	681a      	ldr	r2, [r3, #0]
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	f042 0220 	orr.w	r2, r2, #32
 800e1fa:	601a      	str	r2, [r3, #0]
 800e1fc:	e007      	b.n	800e20e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	681a      	ldr	r2, [r3, #0]
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	f022 0220 	bic.w	r2, r2, #32
 800e20c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	7edb      	ldrb	r3, [r3, #27]
 800e212:	2b01      	cmp	r3, #1
 800e214:	d108      	bne.n	800e228 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	f022 0210 	bic.w	r2, r2, #16
 800e224:	601a      	str	r2, [r3, #0]
 800e226:	e007      	b.n	800e238 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	681a      	ldr	r2, [r3, #0]
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	f042 0210 	orr.w	r2, r2, #16
 800e236:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	7f1b      	ldrb	r3, [r3, #28]
 800e23c:	2b01      	cmp	r3, #1
 800e23e:	d108      	bne.n	800e252 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	681a      	ldr	r2, [r3, #0]
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	f042 0208 	orr.w	r2, r2, #8
 800e24e:	601a      	str	r2, [r3, #0]
 800e250:	e007      	b.n	800e262 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	681a      	ldr	r2, [r3, #0]
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	f022 0208 	bic.w	r2, r2, #8
 800e260:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	7f5b      	ldrb	r3, [r3, #29]
 800e266:	2b01      	cmp	r3, #1
 800e268:	d108      	bne.n	800e27c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	681a      	ldr	r2, [r3, #0]
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	f042 0204 	orr.w	r2, r2, #4
 800e278:	601a      	str	r2, [r3, #0]
 800e27a:	e007      	b.n	800e28c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	681a      	ldr	r2, [r3, #0]
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	f022 0204 	bic.w	r2, r2, #4
 800e28a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	689a      	ldr	r2, [r3, #8]
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	68db      	ldr	r3, [r3, #12]
 800e294:	431a      	orrs	r2, r3
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	691b      	ldr	r3, [r3, #16]
 800e29a:	431a      	orrs	r2, r3
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	695b      	ldr	r3, [r3, #20]
 800e2a0:	ea42 0103 	orr.w	r1, r2, r3
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	685b      	ldr	r3, [r3, #4]
 800e2a8:	1e5a      	subs	r2, r3, #1
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	430a      	orrs	r2, r1
 800e2b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2201      	movs	r2, #1
 800e2bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800e2c0:	2300      	movs	r3, #0
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3710      	adds	r7, #16
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}
	...

0800e2cc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b087      	sub	sp, #28
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e2e2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800e2e4:	7cfb      	ldrb	r3, [r7, #19]
 800e2e6:	2b01      	cmp	r3, #1
 800e2e8:	d003      	beq.n	800e2f2 <HAL_CAN_ConfigFilter+0x26>
 800e2ea:	7cfb      	ldrb	r3, [r7, #19]
 800e2ec:	2b02      	cmp	r3, #2
 800e2ee:	f040 80be 	bne.w	800e46e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800e2f2:	4b65      	ldr	r3, [pc, #404]	; (800e488 <HAL_CAN_ConfigFilter+0x1bc>)
 800e2f4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800e2f6:	697b      	ldr	r3, [r7, #20]
 800e2f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e2fc:	f043 0201 	orr.w	r2, r3, #1
 800e300:	697b      	ldr	r3, [r7, #20]
 800e302:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800e306:	697b      	ldr	r3, [r7, #20]
 800e308:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e30c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800e310:	697b      	ldr	r3, [r7, #20]
 800e312:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800e316:	697b      	ldr	r3, [r7, #20]
 800e318:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e320:	021b      	lsls	r3, r3, #8
 800e322:	431a      	orrs	r2, r3
 800e324:	697b      	ldr	r3, [r7, #20]
 800e326:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	695b      	ldr	r3, [r3, #20]
 800e32e:	f003 031f 	and.w	r3, r3, #31
 800e332:	2201      	movs	r2, #1
 800e334:	fa02 f303 	lsl.w	r3, r2, r3
 800e338:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	43db      	mvns	r3, r3
 800e344:	401a      	ands	r2, r3
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	69db      	ldr	r3, [r3, #28]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d123      	bne.n	800e39c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	43db      	mvns	r3, r3
 800e35e:	401a      	ands	r2, r3
 800e360:	697b      	ldr	r3, [r7, #20]
 800e362:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	68db      	ldr	r3, [r3, #12]
 800e36a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	685b      	ldr	r3, [r3, #4]
 800e370:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800e372:	683a      	ldr	r2, [r7, #0]
 800e374:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800e376:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	3248      	adds	r2, #72	; 0x48
 800e37c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	689b      	ldr	r3, [r3, #8]
 800e384:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800e390:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800e392:	6979      	ldr	r1, [r7, #20]
 800e394:	3348      	adds	r3, #72	; 0x48
 800e396:	00db      	lsls	r3, r3, #3
 800e398:	440b      	add	r3, r1
 800e39a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	69db      	ldr	r3, [r3, #28]
 800e3a0:	2b01      	cmp	r3, #1
 800e3a2:	d122      	bne.n	800e3ea <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800e3a4:	697b      	ldr	r3, [r7, #20]
 800e3a6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	431a      	orrs	r2, r3
 800e3ae:	697b      	ldr	r3, [r7, #20]
 800e3b0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	685b      	ldr	r3, [r3, #4]
 800e3be:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800e3c0:	683a      	ldr	r2, [r7, #0]
 800e3c2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800e3c4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	3248      	adds	r2, #72	; 0x48
 800e3ca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	689b      	ldr	r3, [r3, #8]
 800e3d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	68db      	ldr	r3, [r3, #12]
 800e3d8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800e3de:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800e3e0:	6979      	ldr	r1, [r7, #20]
 800e3e2:	3348      	adds	r3, #72	; 0x48
 800e3e4:	00db      	lsls	r3, r3, #3
 800e3e6:	440b      	add	r3, r1
 800e3e8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	699b      	ldr	r3, [r3, #24]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d109      	bne.n	800e406 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800e3f2:	697b      	ldr	r3, [r7, #20]
 800e3f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	43db      	mvns	r3, r3
 800e3fc:	401a      	ands	r2, r3
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800e404:	e007      	b.n	800e416 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800e406:	697b      	ldr	r3, [r7, #20]
 800e408:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	431a      	orrs	r2, r3
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800e416:	683b      	ldr	r3, [r7, #0]
 800e418:	691b      	ldr	r3, [r3, #16]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d109      	bne.n	800e432 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800e41e:	697b      	ldr	r3, [r7, #20]
 800e420:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	43db      	mvns	r3, r3
 800e428:	401a      	ands	r2, r3
 800e42a:	697b      	ldr	r3, [r7, #20]
 800e42c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800e430:	e007      	b.n	800e442 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800e432:	697b      	ldr	r3, [r7, #20]
 800e434:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	431a      	orrs	r2, r3
 800e43c:	697b      	ldr	r3, [r7, #20]
 800e43e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	6a1b      	ldr	r3, [r3, #32]
 800e446:	2b01      	cmp	r3, #1
 800e448:	d107      	bne.n	800e45a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800e44a:	697b      	ldr	r3, [r7, #20]
 800e44c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	431a      	orrs	r2, r3
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e460:	f023 0201 	bic.w	r2, r3, #1
 800e464:	697b      	ldr	r3, [r7, #20]
 800e466:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800e46a:	2300      	movs	r3, #0
 800e46c:	e006      	b.n	800e47c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e472:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800e47a:	2301      	movs	r3, #1
  }
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	371c      	adds	r7, #28
 800e480:	46bd      	mov	sp, r7
 800e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e486:	4770      	bx	lr
 800e488:	40006400 	.word	0x40006400

0800e48c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b084      	sub	sp, #16
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e49a:	b2db      	uxtb	r3, r3
 800e49c:	2b01      	cmp	r3, #1
 800e49e:	d12e      	bne.n	800e4fe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2202      	movs	r2, #2
 800e4a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	681a      	ldr	r2, [r3, #0]
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	f022 0201 	bic.w	r2, r2, #1
 800e4b6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e4b8:	f7ff fddc 	bl	800e074 <HAL_GetTick>
 800e4bc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800e4be:	e012      	b.n	800e4e6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800e4c0:	f7ff fdd8 	bl	800e074 <HAL_GetTick>
 800e4c4:	4602      	mov	r2, r0
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	1ad3      	subs	r3, r2, r3
 800e4ca:	2b0a      	cmp	r3, #10
 800e4cc:	d90b      	bls.n	800e4e6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2205      	movs	r2, #5
 800e4de:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	e012      	b.n	800e50c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	685b      	ldr	r3, [r3, #4]
 800e4ec:	f003 0301 	and.w	r3, r3, #1
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d1e5      	bne.n	800e4c0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	e006      	b.n	800e50c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e502:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800e50a:	2301      	movs	r3, #1
  }
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3710      	adds	r7, #16
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}

0800e514 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800e514:	b480      	push	{r7}
 800e516:	b089      	sub	sp, #36	; 0x24
 800e518:	af00      	add	r7, sp, #0
 800e51a:	60f8      	str	r0, [r7, #12]
 800e51c:	60b9      	str	r1, [r7, #8]
 800e51e:	607a      	str	r2, [r7, #4]
 800e520:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e528:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	689b      	ldr	r3, [r3, #8]
 800e530:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800e532:	7ffb      	ldrb	r3, [r7, #31]
 800e534:	2b01      	cmp	r3, #1
 800e536:	d003      	beq.n	800e540 <HAL_CAN_AddTxMessage+0x2c>
 800e538:	7ffb      	ldrb	r3, [r7, #31]
 800e53a:	2b02      	cmp	r3, #2
 800e53c:	f040 80b8 	bne.w	800e6b0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800e540:	69bb      	ldr	r3, [r7, #24]
 800e542:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e546:	2b00      	cmp	r3, #0
 800e548:	d10a      	bne.n	800e560 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800e54a:	69bb      	ldr	r3, [r7, #24]
 800e54c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800e550:	2b00      	cmp	r3, #0
 800e552:	d105      	bne.n	800e560 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800e554:	69bb      	ldr	r3, [r7, #24]
 800e556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	f000 80a0 	beq.w	800e6a0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800e560:	69bb      	ldr	r3, [r7, #24]
 800e562:	0e1b      	lsrs	r3, r3, #24
 800e564:	f003 0303 	and.w	r3, r3, #3
 800e568:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	2b02      	cmp	r3, #2
 800e56e:	d907      	bls.n	800e580 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e574:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800e57c:	2301      	movs	r3, #1
 800e57e:	e09e      	b.n	800e6be <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800e580:	2201      	movs	r2, #1
 800e582:	697b      	ldr	r3, [r7, #20]
 800e584:	409a      	lsls	r2, r3
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	689b      	ldr	r3, [r3, #8]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d10d      	bne.n	800e5ae <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800e59c:	68f9      	ldr	r1, [r7, #12]
 800e59e:	6809      	ldr	r1, [r1, #0]
 800e5a0:	431a      	orrs	r2, r3
 800e5a2:	697b      	ldr	r3, [r7, #20]
 800e5a4:	3318      	adds	r3, #24
 800e5a6:	011b      	lsls	r3, r3, #4
 800e5a8:	440b      	add	r3, r1
 800e5aa:	601a      	str	r2, [r3, #0]
 800e5ac:	e00f      	b.n	800e5ce <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800e5b8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800e5be:	68f9      	ldr	r1, [r7, #12]
 800e5c0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800e5c2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800e5c4:	697b      	ldr	r3, [r7, #20]
 800e5c6:	3318      	adds	r3, #24
 800e5c8:	011b      	lsls	r3, r3, #4
 800e5ca:	440b      	add	r3, r1
 800e5cc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	6819      	ldr	r1, [r3, #0]
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	691a      	ldr	r2, [r3, #16]
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	3318      	adds	r3, #24
 800e5da:	011b      	lsls	r3, r3, #4
 800e5dc:	440b      	add	r3, r1
 800e5de:	3304      	adds	r3, #4
 800e5e0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	7d1b      	ldrb	r3, [r3, #20]
 800e5e6:	2b01      	cmp	r3, #1
 800e5e8:	d111      	bne.n	800e60e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	681a      	ldr	r2, [r3, #0]
 800e5ee:	697b      	ldr	r3, [r7, #20]
 800e5f0:	3318      	adds	r3, #24
 800e5f2:	011b      	lsls	r3, r3, #4
 800e5f4:	4413      	add	r3, r2
 800e5f6:	3304      	adds	r3, #4
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	68fa      	ldr	r2, [r7, #12]
 800e5fc:	6811      	ldr	r1, [r2, #0]
 800e5fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	3318      	adds	r3, #24
 800e606:	011b      	lsls	r3, r3, #4
 800e608:	440b      	add	r3, r1
 800e60a:	3304      	adds	r3, #4
 800e60c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	3307      	adds	r3, #7
 800e612:	781b      	ldrb	r3, [r3, #0]
 800e614:	061a      	lsls	r2, r3, #24
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	3306      	adds	r3, #6
 800e61a:	781b      	ldrb	r3, [r3, #0]
 800e61c:	041b      	lsls	r3, r3, #16
 800e61e:	431a      	orrs	r2, r3
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	3305      	adds	r3, #5
 800e624:	781b      	ldrb	r3, [r3, #0]
 800e626:	021b      	lsls	r3, r3, #8
 800e628:	4313      	orrs	r3, r2
 800e62a:	687a      	ldr	r2, [r7, #4]
 800e62c:	3204      	adds	r2, #4
 800e62e:	7812      	ldrb	r2, [r2, #0]
 800e630:	4610      	mov	r0, r2
 800e632:	68fa      	ldr	r2, [r7, #12]
 800e634:	6811      	ldr	r1, [r2, #0]
 800e636:	ea43 0200 	orr.w	r2, r3, r0
 800e63a:	697b      	ldr	r3, [r7, #20]
 800e63c:	011b      	lsls	r3, r3, #4
 800e63e:	440b      	add	r3, r1
 800e640:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800e644:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	3303      	adds	r3, #3
 800e64a:	781b      	ldrb	r3, [r3, #0]
 800e64c:	061a      	lsls	r2, r3, #24
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	3302      	adds	r3, #2
 800e652:	781b      	ldrb	r3, [r3, #0]
 800e654:	041b      	lsls	r3, r3, #16
 800e656:	431a      	orrs	r2, r3
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	3301      	adds	r3, #1
 800e65c:	781b      	ldrb	r3, [r3, #0]
 800e65e:	021b      	lsls	r3, r3, #8
 800e660:	4313      	orrs	r3, r2
 800e662:	687a      	ldr	r2, [r7, #4]
 800e664:	7812      	ldrb	r2, [r2, #0]
 800e666:	4610      	mov	r0, r2
 800e668:	68fa      	ldr	r2, [r7, #12]
 800e66a:	6811      	ldr	r1, [r2, #0]
 800e66c:	ea43 0200 	orr.w	r2, r3, r0
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	011b      	lsls	r3, r3, #4
 800e674:	440b      	add	r3, r1
 800e676:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800e67a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	681a      	ldr	r2, [r3, #0]
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	3318      	adds	r3, #24
 800e684:	011b      	lsls	r3, r3, #4
 800e686:	4413      	add	r3, r2
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	68fa      	ldr	r2, [r7, #12]
 800e68c:	6811      	ldr	r1, [r2, #0]
 800e68e:	f043 0201 	orr.w	r2, r3, #1
 800e692:	697b      	ldr	r3, [r7, #20]
 800e694:	3318      	adds	r3, #24
 800e696:	011b      	lsls	r3, r3, #4
 800e698:	440b      	add	r3, r1
 800e69a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800e69c:	2300      	movs	r3, #0
 800e69e:	e00e      	b.n	800e6be <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	e006      	b.n	800e6be <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800e6bc:	2301      	movs	r3, #1
  }
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3724      	adds	r7, #36	; 0x24
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c8:	4770      	bx	lr

0800e6ca <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800e6ca:	b480      	push	{r7}
 800e6cc:	b085      	sub	sp, #20
 800e6ce:	af00      	add	r7, sp, #0
 800e6d0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e6dc:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800e6de:	7afb      	ldrb	r3, [r7, #11]
 800e6e0:	2b01      	cmp	r3, #1
 800e6e2:	d002      	beq.n	800e6ea <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800e6e4:	7afb      	ldrb	r3, [r7, #11]
 800e6e6:	2b02      	cmp	r3, #2
 800e6e8:	d11d      	bne.n	800e726 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	689b      	ldr	r3, [r3, #8]
 800e6f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d002      	beq.n	800e6fe <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	3301      	adds	r3, #1
 800e6fc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	689b      	ldr	r3, [r3, #8]
 800e704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d002      	beq.n	800e712 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	3301      	adds	r3, #1
 800e710:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	689b      	ldr	r3, [r3, #8]
 800e718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d002      	beq.n	800e726 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	3301      	adds	r3, #1
 800e724:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800e726:	68fb      	ldr	r3, [r7, #12]
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3714      	adds	r7, #20
 800e72c:	46bd      	mov	sp, r7
 800e72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e732:	4770      	bx	lr

0800e734 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800e734:	b480      	push	{r7}
 800e736:	b087      	sub	sp, #28
 800e738:	af00      	add	r7, sp, #0
 800e73a:	60f8      	str	r0, [r7, #12]
 800e73c:	60b9      	str	r1, [r7, #8]
 800e73e:	607a      	str	r2, [r7, #4]
 800e740:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e748:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800e74a:	7dfb      	ldrb	r3, [r7, #23]
 800e74c:	2b01      	cmp	r3, #1
 800e74e:	d003      	beq.n	800e758 <HAL_CAN_GetRxMessage+0x24>
 800e750:	7dfb      	ldrb	r3, [r7, #23]
 800e752:	2b02      	cmp	r3, #2
 800e754:	f040 80f3 	bne.w	800e93e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800e758:	68bb      	ldr	r3, [r7, #8]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d10e      	bne.n	800e77c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	68db      	ldr	r3, [r3, #12]
 800e764:	f003 0303 	and.w	r3, r3, #3
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d116      	bne.n	800e79a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e770:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800e778:	2301      	movs	r3, #1
 800e77a:	e0e7      	b.n	800e94c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	691b      	ldr	r3, [r3, #16]
 800e782:	f003 0303 	and.w	r3, r3, #3
 800e786:	2b00      	cmp	r3, #0
 800e788:	d107      	bne.n	800e79a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e78e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800e796:	2301      	movs	r3, #1
 800e798:	e0d8      	b.n	800e94c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	681a      	ldr	r2, [r3, #0]
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	331b      	adds	r3, #27
 800e7a2:	011b      	lsls	r3, r3, #4
 800e7a4:	4413      	add	r3, r2
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	f003 0204 	and.w	r2, r3, #4
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	689b      	ldr	r3, [r3, #8]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d10c      	bne.n	800e7d2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	681a      	ldr	r2, [r3, #0]
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	331b      	adds	r3, #27
 800e7c0:	011b      	lsls	r3, r3, #4
 800e7c2:	4413      	add	r3, r2
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	0d5b      	lsrs	r3, r3, #21
 800e7c8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	601a      	str	r2, [r3, #0]
 800e7d0:	e00b      	b.n	800e7ea <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	681a      	ldr	r2, [r3, #0]
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	331b      	adds	r3, #27
 800e7da:	011b      	lsls	r3, r3, #4
 800e7dc:	4413      	add	r3, r2
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	08db      	lsrs	r3, r3, #3
 800e7e2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	681a      	ldr	r2, [r3, #0]
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	331b      	adds	r3, #27
 800e7f2:	011b      	lsls	r3, r3, #4
 800e7f4:	4413      	add	r3, r2
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	f003 0202 	and.w	r2, r3, #2
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	681a      	ldr	r2, [r3, #0]
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	331b      	adds	r3, #27
 800e808:	011b      	lsls	r3, r3, #4
 800e80a:	4413      	add	r3, r2
 800e80c:	3304      	adds	r3, #4
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	f003 020f 	and.w	r2, r3, #15
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	681a      	ldr	r2, [r3, #0]
 800e81c:	68bb      	ldr	r3, [r7, #8]
 800e81e:	331b      	adds	r3, #27
 800e820:	011b      	lsls	r3, r3, #4
 800e822:	4413      	add	r3, r2
 800e824:	3304      	adds	r3, #4
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	0a1b      	lsrs	r3, r3, #8
 800e82a:	b2da      	uxtb	r2, r3
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	681a      	ldr	r2, [r3, #0]
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	331b      	adds	r3, #27
 800e838:	011b      	lsls	r3, r3, #4
 800e83a:	4413      	add	r3, r2
 800e83c:	3304      	adds	r3, #4
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	0c1b      	lsrs	r3, r3, #16
 800e842:	b29a      	uxth	r2, r3
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	681a      	ldr	r2, [r3, #0]
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	011b      	lsls	r3, r3, #4
 800e850:	4413      	add	r3, r2
 800e852:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	b2da      	uxtb	r2, r3
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	681a      	ldr	r2, [r3, #0]
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	011b      	lsls	r3, r3, #4
 800e866:	4413      	add	r3, r2
 800e868:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	0a1a      	lsrs	r2, r3, #8
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	3301      	adds	r3, #1
 800e874:	b2d2      	uxtb	r2, r2
 800e876:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	681a      	ldr	r2, [r3, #0]
 800e87c:	68bb      	ldr	r3, [r7, #8]
 800e87e:	011b      	lsls	r3, r3, #4
 800e880:	4413      	add	r3, r2
 800e882:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	0c1a      	lsrs	r2, r3, #16
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	3302      	adds	r3, #2
 800e88e:	b2d2      	uxtb	r2, r2
 800e890:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	681a      	ldr	r2, [r3, #0]
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	011b      	lsls	r3, r3, #4
 800e89a:	4413      	add	r3, r2
 800e89c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	0e1a      	lsrs	r2, r3, #24
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	3303      	adds	r3, #3
 800e8a8:	b2d2      	uxtb	r2, r2
 800e8aa:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	681a      	ldr	r2, [r3, #0]
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	011b      	lsls	r3, r3, #4
 800e8b4:	4413      	add	r3, r2
 800e8b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800e8ba:	681a      	ldr	r2, [r3, #0]
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	3304      	adds	r3, #4
 800e8c0:	b2d2      	uxtb	r2, r2
 800e8c2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	681a      	ldr	r2, [r3, #0]
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	011b      	lsls	r3, r3, #4
 800e8cc:	4413      	add	r3, r2
 800e8ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	0a1a      	lsrs	r2, r3, #8
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	3305      	adds	r3, #5
 800e8da:	b2d2      	uxtb	r2, r2
 800e8dc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	681a      	ldr	r2, [r3, #0]
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	011b      	lsls	r3, r3, #4
 800e8e6:	4413      	add	r3, r2
 800e8e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	0c1a      	lsrs	r2, r3, #16
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	3306      	adds	r3, #6
 800e8f4:	b2d2      	uxtb	r2, r2
 800e8f6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	681a      	ldr	r2, [r3, #0]
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	011b      	lsls	r3, r3, #4
 800e900:	4413      	add	r3, r2
 800e902:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	0e1a      	lsrs	r2, r3, #24
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	3307      	adds	r3, #7
 800e90e:	b2d2      	uxtb	r2, r2
 800e910:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d108      	bne.n	800e92a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	68da      	ldr	r2, [r3, #12]
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	f042 0220 	orr.w	r2, r2, #32
 800e926:	60da      	str	r2, [r3, #12]
 800e928:	e007      	b.n	800e93a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	691a      	ldr	r2, [r3, #16]
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	f042 0220 	orr.w	r2, r2, #32
 800e938:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800e93a:	2300      	movs	r3, #0
 800e93c:	e006      	b.n	800e94c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e942:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800e94a:	2301      	movs	r3, #1
  }
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	371c      	adds	r7, #28
 800e950:	46bd      	mov	sp, r7
 800e952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e956:	4770      	bx	lr

0800e958 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800e958:	b480      	push	{r7}
 800e95a:	b085      	sub	sp, #20
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
 800e960:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e968:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800e96a:	7bfb      	ldrb	r3, [r7, #15]
 800e96c:	2b01      	cmp	r3, #1
 800e96e:	d002      	beq.n	800e976 <HAL_CAN_ActivateNotification+0x1e>
 800e970:	7bfb      	ldrb	r3, [r7, #15]
 800e972:	2b02      	cmp	r3, #2
 800e974:	d109      	bne.n	800e98a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	6959      	ldr	r1, [r3, #20]
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	683a      	ldr	r2, [r7, #0]
 800e982:	430a      	orrs	r2, r1
 800e984:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800e986:	2300      	movs	r3, #0
 800e988:	e006      	b.n	800e998 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e98e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800e996:	2301      	movs	r3, #1
  }
}
 800e998:	4618      	mov	r0, r3
 800e99a:	3714      	adds	r7, #20
 800e99c:	46bd      	mov	sp, r7
 800e99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a2:	4770      	bx	lr

0800e9a4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b08a      	sub	sp, #40	; 0x28
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	695b      	ldr	r3, [r3, #20]
 800e9b6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	685b      	ldr	r3, [r3, #4]
 800e9be:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	689b      	ldr	r3, [r3, #8]
 800e9c6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	68db      	ldr	r3, [r3, #12]
 800e9ce:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	691b      	ldr	r3, [r3, #16]
 800e9d6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	699b      	ldr	r3, [r3, #24]
 800e9de:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800e9e0:	6a3b      	ldr	r3, [r7, #32]
 800e9e2:	f003 0301 	and.w	r3, r3, #1
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d07c      	beq.n	800eae4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800e9ea:	69bb      	ldr	r3, [r7, #24]
 800e9ec:	f003 0301 	and.w	r3, r3, #1
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d023      	beq.n	800ea3c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	2201      	movs	r2, #1
 800e9fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800e9fc:	69bb      	ldr	r3, [r7, #24]
 800e9fe:	f003 0302 	and.w	r3, r3, #2
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d003      	beq.n	800ea0e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f000 f983 	bl	800ed12 <HAL_CAN_TxMailbox0CompleteCallback>
 800ea0c:	e016      	b.n	800ea3c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800ea0e:	69bb      	ldr	r3, [r7, #24]
 800ea10:	f003 0304 	and.w	r3, r3, #4
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d004      	beq.n	800ea22 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800ea18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ea1e:	627b      	str	r3, [r7, #36]	; 0x24
 800ea20:	e00c      	b.n	800ea3c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800ea22:	69bb      	ldr	r3, [r7, #24]
 800ea24:	f003 0308 	and.w	r3, r3, #8
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d004      	beq.n	800ea36 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800ea2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ea32:	627b      	str	r3, [r7, #36]	; 0x24
 800ea34:	e002      	b.n	800ea3c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800ea36:	6878      	ldr	r0, [r7, #4]
 800ea38:	f000 f989 	bl	800ed4e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800ea3c:	69bb      	ldr	r3, [r7, #24]
 800ea3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d024      	beq.n	800ea90 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ea4e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800ea50:	69bb      	ldr	r3, [r7, #24]
 800ea52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d003      	beq.n	800ea62 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f000 f963 	bl	800ed26 <HAL_CAN_TxMailbox1CompleteCallback>
 800ea60:	e016      	b.n	800ea90 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800ea62:	69bb      	ldr	r3, [r7, #24]
 800ea64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d004      	beq.n	800ea76 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800ea6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea6e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ea72:	627b      	str	r3, [r7, #36]	; 0x24
 800ea74:	e00c      	b.n	800ea90 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800ea76:	69bb      	ldr	r3, [r7, #24]
 800ea78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d004      	beq.n	800ea8a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800ea80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ea86:	627b      	str	r3, [r7, #36]	; 0x24
 800ea88:	e002      	b.n	800ea90 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f000 f969 	bl	800ed62 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800ea90:	69bb      	ldr	r3, [r7, #24]
 800ea92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d024      	beq.n	800eae4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800eaa2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800eaa4:	69bb      	ldr	r3, [r7, #24]
 800eaa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d003      	beq.n	800eab6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800eaae:	6878      	ldr	r0, [r7, #4]
 800eab0:	f000 f943 	bl	800ed3a <HAL_CAN_TxMailbox2CompleteCallback>
 800eab4:	e016      	b.n	800eae4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800eab6:	69bb      	ldr	r3, [r7, #24]
 800eab8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d004      	beq.n	800eaca <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800eac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eac6:	627b      	str	r3, [r7, #36]	; 0x24
 800eac8:	e00c      	b.n	800eae4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800eaca:	69bb      	ldr	r3, [r7, #24]
 800eacc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d004      	beq.n	800eade <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800ead4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eada:	627b      	str	r3, [r7, #36]	; 0x24
 800eadc:	e002      	b.n	800eae4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	f000 f949 	bl	800ed76 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800eae4:	6a3b      	ldr	r3, [r7, #32]
 800eae6:	f003 0308 	and.w	r3, r3, #8
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d00c      	beq.n	800eb08 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800eaee:	697b      	ldr	r3, [r7, #20]
 800eaf0:	f003 0310 	and.w	r3, r3, #16
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d007      	beq.n	800eb08 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800eaf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eafa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800eafe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	2210      	movs	r2, #16
 800eb06:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800eb08:	6a3b      	ldr	r3, [r7, #32]
 800eb0a:	f003 0304 	and.w	r3, r3, #4
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d00b      	beq.n	800eb2a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	f003 0308 	and.w	r3, r3, #8
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d006      	beq.n	800eb2a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	2208      	movs	r2, #8
 800eb22:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f000 f930 	bl	800ed8a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800eb2a:	6a3b      	ldr	r3, [r7, #32]
 800eb2c:	f003 0302 	and.w	r3, r3, #2
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d009      	beq.n	800eb48 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	68db      	ldr	r3, [r3, #12]
 800eb3a:	f003 0303 	and.w	r3, r3, #3
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d002      	beq.n	800eb48 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f7fc fb6c 	bl	800b220 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800eb48:	6a3b      	ldr	r3, [r7, #32]
 800eb4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d00c      	beq.n	800eb6c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800eb52:	693b      	ldr	r3, [r7, #16]
 800eb54:	f003 0310 	and.w	r3, r3, #16
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d007      	beq.n	800eb6c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800eb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800eb62:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	2210      	movs	r2, #16
 800eb6a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800eb6c:	6a3b      	ldr	r3, [r7, #32]
 800eb6e:	f003 0320 	and.w	r3, r3, #32
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d00b      	beq.n	800eb8e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800eb76:	693b      	ldr	r3, [r7, #16]
 800eb78:	f003 0308 	and.w	r3, r3, #8
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d006      	beq.n	800eb8e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	2208      	movs	r2, #8
 800eb86:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800eb88:	6878      	ldr	r0, [r7, #4]
 800eb8a:	f000 f908 	bl	800ed9e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800eb8e:	6a3b      	ldr	r3, [r7, #32]
 800eb90:	f003 0310 	and.w	r3, r3, #16
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d009      	beq.n	800ebac <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	691b      	ldr	r3, [r3, #16]
 800eb9e:	f003 0303 	and.w	r3, r3, #3
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d002      	beq.n	800ebac <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f7fc fc54 	bl	800b454 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800ebac:	6a3b      	ldr	r3, [r7, #32]
 800ebae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d00b      	beq.n	800ebce <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800ebb6:	69fb      	ldr	r3, [r7, #28]
 800ebb8:	f003 0310 	and.w	r3, r3, #16
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d006      	beq.n	800ebce <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	2210      	movs	r2, #16
 800ebc6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f000 f8f2 	bl	800edb2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800ebce:	6a3b      	ldr	r3, [r7, #32]
 800ebd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d00b      	beq.n	800ebf0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800ebd8:	69fb      	ldr	r3, [r7, #28]
 800ebda:	f003 0308 	and.w	r3, r3, #8
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d006      	beq.n	800ebf0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	2208      	movs	r2, #8
 800ebe8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f000 f8eb 	bl	800edc6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800ebf0:	6a3b      	ldr	r3, [r7, #32]
 800ebf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d07b      	beq.n	800ecf2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800ebfa:	69fb      	ldr	r3, [r7, #28]
 800ebfc:	f003 0304 	and.w	r3, r3, #4
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d072      	beq.n	800ecea <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800ec04:	6a3b      	ldr	r3, [r7, #32]
 800ec06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d008      	beq.n	800ec20 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d003      	beq.n	800ec20 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800ec18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec1a:	f043 0301 	orr.w	r3, r3, #1
 800ec1e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800ec20:	6a3b      	ldr	r3, [r7, #32]
 800ec22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d008      	beq.n	800ec3c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d003      	beq.n	800ec3c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800ec34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec36:	f043 0302 	orr.w	r3, r3, #2
 800ec3a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800ec3c:	6a3b      	ldr	r3, [r7, #32]
 800ec3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d008      	beq.n	800ec58 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d003      	beq.n	800ec58 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800ec50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec52:	f043 0304 	orr.w	r3, r3, #4
 800ec56:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800ec58:	6a3b      	ldr	r3, [r7, #32]
 800ec5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d043      	beq.n	800ecea <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d03e      	beq.n	800ecea <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ec72:	2b60      	cmp	r3, #96	; 0x60
 800ec74:	d02b      	beq.n	800ecce <HAL_CAN_IRQHandler+0x32a>
 800ec76:	2b60      	cmp	r3, #96	; 0x60
 800ec78:	d82e      	bhi.n	800ecd8 <HAL_CAN_IRQHandler+0x334>
 800ec7a:	2b50      	cmp	r3, #80	; 0x50
 800ec7c:	d022      	beq.n	800ecc4 <HAL_CAN_IRQHandler+0x320>
 800ec7e:	2b50      	cmp	r3, #80	; 0x50
 800ec80:	d82a      	bhi.n	800ecd8 <HAL_CAN_IRQHandler+0x334>
 800ec82:	2b40      	cmp	r3, #64	; 0x40
 800ec84:	d019      	beq.n	800ecba <HAL_CAN_IRQHandler+0x316>
 800ec86:	2b40      	cmp	r3, #64	; 0x40
 800ec88:	d826      	bhi.n	800ecd8 <HAL_CAN_IRQHandler+0x334>
 800ec8a:	2b30      	cmp	r3, #48	; 0x30
 800ec8c:	d010      	beq.n	800ecb0 <HAL_CAN_IRQHandler+0x30c>
 800ec8e:	2b30      	cmp	r3, #48	; 0x30
 800ec90:	d822      	bhi.n	800ecd8 <HAL_CAN_IRQHandler+0x334>
 800ec92:	2b10      	cmp	r3, #16
 800ec94:	d002      	beq.n	800ec9c <HAL_CAN_IRQHandler+0x2f8>
 800ec96:	2b20      	cmp	r3, #32
 800ec98:	d005      	beq.n	800eca6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800ec9a:	e01d      	b.n	800ecd8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800ec9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec9e:	f043 0308 	orr.w	r3, r3, #8
 800eca2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800eca4:	e019      	b.n	800ecda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800eca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca8:	f043 0310 	orr.w	r3, r3, #16
 800ecac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800ecae:	e014      	b.n	800ecda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800ecb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecb2:	f043 0320 	orr.w	r3, r3, #32
 800ecb6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800ecb8:	e00f      	b.n	800ecda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800ecba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecc0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800ecc2:	e00a      	b.n	800ecda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800ecc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800eccc:	e005      	b.n	800ecda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800ecce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ecd4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800ecd6:	e000      	b.n	800ecda <HAL_CAN_IRQHandler+0x336>
            break;
 800ecd8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	699a      	ldr	r2, [r3, #24]
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ece8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	2204      	movs	r2, #4
 800ecf0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800ecf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d008      	beq.n	800ed0a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ecfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecfe:	431a      	orrs	r2, r3
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f000 f868 	bl	800edda <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800ed0a:	bf00      	nop
 800ed0c:	3728      	adds	r7, #40	; 0x28
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}

0800ed12 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800ed12:	b480      	push	{r7}
 800ed14:	b083      	sub	sp, #12
 800ed16:	af00      	add	r7, sp, #0
 800ed18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800ed1a:	bf00      	nop
 800ed1c:	370c      	adds	r7, #12
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed24:	4770      	bx	lr

0800ed26 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800ed26:	b480      	push	{r7}
 800ed28:	b083      	sub	sp, #12
 800ed2a:	af00      	add	r7, sp, #0
 800ed2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800ed2e:	bf00      	nop
 800ed30:	370c      	adds	r7, #12
 800ed32:	46bd      	mov	sp, r7
 800ed34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed38:	4770      	bx	lr

0800ed3a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800ed3a:	b480      	push	{r7}
 800ed3c:	b083      	sub	sp, #12
 800ed3e:	af00      	add	r7, sp, #0
 800ed40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800ed42:	bf00      	nop
 800ed44:	370c      	adds	r7, #12
 800ed46:	46bd      	mov	sp, r7
 800ed48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4c:	4770      	bx	lr

0800ed4e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800ed4e:	b480      	push	{r7}
 800ed50:	b083      	sub	sp, #12
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800ed56:	bf00      	nop
 800ed58:	370c      	adds	r7, #12
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed60:	4770      	bx	lr

0800ed62 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800ed62:	b480      	push	{r7}
 800ed64:	b083      	sub	sp, #12
 800ed66:	af00      	add	r7, sp, #0
 800ed68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800ed6a:	bf00      	nop
 800ed6c:	370c      	adds	r7, #12
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed74:	4770      	bx	lr

0800ed76 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800ed76:	b480      	push	{r7}
 800ed78:	b083      	sub	sp, #12
 800ed7a:	af00      	add	r7, sp, #0
 800ed7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800ed7e:	bf00      	nop
 800ed80:	370c      	adds	r7, #12
 800ed82:	46bd      	mov	sp, r7
 800ed84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed88:	4770      	bx	lr

0800ed8a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800ed8a:	b480      	push	{r7}
 800ed8c:	b083      	sub	sp, #12
 800ed8e:	af00      	add	r7, sp, #0
 800ed90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800ed92:	bf00      	nop
 800ed94:	370c      	adds	r7, #12
 800ed96:	46bd      	mov	sp, r7
 800ed98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9c:	4770      	bx	lr

0800ed9e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800ed9e:	b480      	push	{r7}
 800eda0:	b083      	sub	sp, #12
 800eda2:	af00      	add	r7, sp, #0
 800eda4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800eda6:	bf00      	nop
 800eda8:	370c      	adds	r7, #12
 800edaa:	46bd      	mov	sp, r7
 800edac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb0:	4770      	bx	lr

0800edb2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800edb2:	b480      	push	{r7}
 800edb4:	b083      	sub	sp, #12
 800edb6:	af00      	add	r7, sp, #0
 800edb8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800edba:	bf00      	nop
 800edbc:	370c      	adds	r7, #12
 800edbe:	46bd      	mov	sp, r7
 800edc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc4:	4770      	bx	lr

0800edc6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800edc6:	b480      	push	{r7}
 800edc8:	b083      	sub	sp, #12
 800edca:	af00      	add	r7, sp, #0
 800edcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800edce:	bf00      	nop
 800edd0:	370c      	adds	r7, #12
 800edd2:	46bd      	mov	sp, r7
 800edd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd8:	4770      	bx	lr

0800edda <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800edda:	b480      	push	{r7}
 800eddc:	b083      	sub	sp, #12
 800edde:	af00      	add	r7, sp, #0
 800ede0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800ede2:	bf00      	nop
 800ede4:	370c      	adds	r7, #12
 800ede6:	46bd      	mov	sp, r7
 800ede8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edec:	4770      	bx	lr
	...

0800edf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800edf0:	b480      	push	{r7}
 800edf2:	b085      	sub	sp, #20
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f003 0307 	and.w	r3, r3, #7
 800edfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ee00:	4b0c      	ldr	r3, [pc, #48]	; (800ee34 <__NVIC_SetPriorityGrouping+0x44>)
 800ee02:	68db      	ldr	r3, [r3, #12]
 800ee04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ee06:	68ba      	ldr	r2, [r7, #8]
 800ee08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ee0c:	4013      	ands	r3, r2
 800ee0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ee18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ee1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ee20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ee22:	4a04      	ldr	r2, [pc, #16]	; (800ee34 <__NVIC_SetPriorityGrouping+0x44>)
 800ee24:	68bb      	ldr	r3, [r7, #8]
 800ee26:	60d3      	str	r3, [r2, #12]
}
 800ee28:	bf00      	nop
 800ee2a:	3714      	adds	r7, #20
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee32:	4770      	bx	lr
 800ee34:	e000ed00 	.word	0xe000ed00

0800ee38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ee38:	b480      	push	{r7}
 800ee3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ee3c:	4b04      	ldr	r3, [pc, #16]	; (800ee50 <__NVIC_GetPriorityGrouping+0x18>)
 800ee3e:	68db      	ldr	r3, [r3, #12]
 800ee40:	0a1b      	lsrs	r3, r3, #8
 800ee42:	f003 0307 	and.w	r3, r3, #7
}
 800ee46:	4618      	mov	r0, r3
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4e:	4770      	bx	lr
 800ee50:	e000ed00 	.word	0xe000ed00

0800ee54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ee54:	b480      	push	{r7}
 800ee56:	b083      	sub	sp, #12
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ee5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	db0b      	blt.n	800ee7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ee66:	79fb      	ldrb	r3, [r7, #7]
 800ee68:	f003 021f 	and.w	r2, r3, #31
 800ee6c:	4907      	ldr	r1, [pc, #28]	; (800ee8c <__NVIC_EnableIRQ+0x38>)
 800ee6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee72:	095b      	lsrs	r3, r3, #5
 800ee74:	2001      	movs	r0, #1
 800ee76:	fa00 f202 	lsl.w	r2, r0, r2
 800ee7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800ee7e:	bf00      	nop
 800ee80:	370c      	adds	r7, #12
 800ee82:	46bd      	mov	sp, r7
 800ee84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee88:	4770      	bx	lr
 800ee8a:	bf00      	nop
 800ee8c:	e000e100 	.word	0xe000e100

0800ee90 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800ee90:	b480      	push	{r7}
 800ee92:	b083      	sub	sp, #12
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	4603      	mov	r3, r0
 800ee98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ee9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	db12      	blt.n	800eec8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800eea2:	79fb      	ldrb	r3, [r7, #7]
 800eea4:	f003 021f 	and.w	r2, r3, #31
 800eea8:	490a      	ldr	r1, [pc, #40]	; (800eed4 <__NVIC_DisableIRQ+0x44>)
 800eeaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eeae:	095b      	lsrs	r3, r3, #5
 800eeb0:	2001      	movs	r0, #1
 800eeb2:	fa00 f202 	lsl.w	r2, r0, r2
 800eeb6:	3320      	adds	r3, #32
 800eeb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800eebc:	f3bf 8f4f 	dsb	sy
}
 800eec0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800eec2:	f3bf 8f6f 	isb	sy
}
 800eec6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800eec8:	bf00      	nop
 800eeca:	370c      	adds	r7, #12
 800eecc:	46bd      	mov	sp, r7
 800eece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed2:	4770      	bx	lr
 800eed4:	e000e100 	.word	0xe000e100

0800eed8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800eed8:	b480      	push	{r7}
 800eeda:	b083      	sub	sp, #12
 800eedc:	af00      	add	r7, sp, #0
 800eede:	4603      	mov	r3, r0
 800eee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800eee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	db0c      	blt.n	800ef04 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800eeea:	79fb      	ldrb	r3, [r7, #7]
 800eeec:	f003 021f 	and.w	r2, r3, #31
 800eef0:	4907      	ldr	r1, [pc, #28]	; (800ef10 <__NVIC_ClearPendingIRQ+0x38>)
 800eef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eef6:	095b      	lsrs	r3, r3, #5
 800eef8:	2001      	movs	r0, #1
 800eefa:	fa00 f202 	lsl.w	r2, r0, r2
 800eefe:	3360      	adds	r3, #96	; 0x60
 800ef00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800ef04:	bf00      	nop
 800ef06:	370c      	adds	r7, #12
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0e:	4770      	bx	lr
 800ef10:	e000e100 	.word	0xe000e100

0800ef14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ef14:	b480      	push	{r7}
 800ef16:	b083      	sub	sp, #12
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	6039      	str	r1, [r7, #0]
 800ef1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ef20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	db0a      	blt.n	800ef3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	b2da      	uxtb	r2, r3
 800ef2c:	490c      	ldr	r1, [pc, #48]	; (800ef60 <__NVIC_SetPriority+0x4c>)
 800ef2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ef32:	0112      	lsls	r2, r2, #4
 800ef34:	b2d2      	uxtb	r2, r2
 800ef36:	440b      	add	r3, r1
 800ef38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ef3c:	e00a      	b.n	800ef54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	b2da      	uxtb	r2, r3
 800ef42:	4908      	ldr	r1, [pc, #32]	; (800ef64 <__NVIC_SetPriority+0x50>)
 800ef44:	79fb      	ldrb	r3, [r7, #7]
 800ef46:	f003 030f 	and.w	r3, r3, #15
 800ef4a:	3b04      	subs	r3, #4
 800ef4c:	0112      	lsls	r2, r2, #4
 800ef4e:	b2d2      	uxtb	r2, r2
 800ef50:	440b      	add	r3, r1
 800ef52:	761a      	strb	r2, [r3, #24]
}
 800ef54:	bf00      	nop
 800ef56:	370c      	adds	r7, #12
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5e:	4770      	bx	lr
 800ef60:	e000e100 	.word	0xe000e100
 800ef64:	e000ed00 	.word	0xe000ed00

0800ef68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ef68:	b480      	push	{r7}
 800ef6a:	b089      	sub	sp, #36	; 0x24
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	60f8      	str	r0, [r7, #12]
 800ef70:	60b9      	str	r1, [r7, #8]
 800ef72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	f003 0307 	and.w	r3, r3, #7
 800ef7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ef7c:	69fb      	ldr	r3, [r7, #28]
 800ef7e:	f1c3 0307 	rsb	r3, r3, #7
 800ef82:	2b04      	cmp	r3, #4
 800ef84:	bf28      	it	cs
 800ef86:	2304      	movcs	r3, #4
 800ef88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ef8a:	69fb      	ldr	r3, [r7, #28]
 800ef8c:	3304      	adds	r3, #4
 800ef8e:	2b06      	cmp	r3, #6
 800ef90:	d902      	bls.n	800ef98 <NVIC_EncodePriority+0x30>
 800ef92:	69fb      	ldr	r3, [r7, #28]
 800ef94:	3b03      	subs	r3, #3
 800ef96:	e000      	b.n	800ef9a <NVIC_EncodePriority+0x32>
 800ef98:	2300      	movs	r3, #0
 800ef9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ef9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800efa0:	69bb      	ldr	r3, [r7, #24]
 800efa2:	fa02 f303 	lsl.w	r3, r2, r3
 800efa6:	43da      	mvns	r2, r3
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	401a      	ands	r2, r3
 800efac:	697b      	ldr	r3, [r7, #20]
 800efae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800efb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800efb4:	697b      	ldr	r3, [r7, #20]
 800efb6:	fa01 f303 	lsl.w	r3, r1, r3
 800efba:	43d9      	mvns	r1, r3
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800efc0:	4313      	orrs	r3, r2
         );
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	3724      	adds	r7, #36	; 0x24
 800efc6:	46bd      	mov	sp, r7
 800efc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efcc:	4770      	bx	lr

0800efce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800efce:	b580      	push	{r7, lr}
 800efd0:	b082      	sub	sp, #8
 800efd2:	af00      	add	r7, sp, #0
 800efd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800efd6:	6878      	ldr	r0, [r7, #4]
 800efd8:	f7ff ff0a 	bl	800edf0 <__NVIC_SetPriorityGrouping>
}
 800efdc:	bf00      	nop
 800efde:	3708      	adds	r7, #8
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}

0800efe4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b086      	sub	sp, #24
 800efe8:	af00      	add	r7, sp, #0
 800efea:	4603      	mov	r3, r0
 800efec:	60b9      	str	r1, [r7, #8]
 800efee:	607a      	str	r2, [r7, #4]
 800eff0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800eff2:	2300      	movs	r3, #0
 800eff4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800eff6:	f7ff ff1f 	bl	800ee38 <__NVIC_GetPriorityGrouping>
 800effa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800effc:	687a      	ldr	r2, [r7, #4]
 800effe:	68b9      	ldr	r1, [r7, #8]
 800f000:	6978      	ldr	r0, [r7, #20]
 800f002:	f7ff ffb1 	bl	800ef68 <NVIC_EncodePriority>
 800f006:	4602      	mov	r2, r0
 800f008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f00c:	4611      	mov	r1, r2
 800f00e:	4618      	mov	r0, r3
 800f010:	f7ff ff80 	bl	800ef14 <__NVIC_SetPriority>
}
 800f014:	bf00      	nop
 800f016:	3718      	adds	r7, #24
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}

0800f01c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b082      	sub	sp, #8
 800f020:	af00      	add	r7, sp, #0
 800f022:	4603      	mov	r3, r0
 800f024:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f02a:	4618      	mov	r0, r3
 800f02c:	f7ff ff12 	bl	800ee54 <__NVIC_EnableIRQ>
}
 800f030:	bf00      	nop
 800f032:	3708      	adds	r7, #8
 800f034:	46bd      	mov	sp, r7
 800f036:	bd80      	pop	{r7, pc}

0800f038 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b082      	sub	sp, #8
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	4603      	mov	r3, r0
 800f040:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800f042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f046:	4618      	mov	r0, r3
 800f048:	f7ff ff22 	bl	800ee90 <__NVIC_DisableIRQ>
}
 800f04c:	bf00      	nop
 800f04e:	3708      	adds	r7, #8
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}

0800f054 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b082      	sub	sp, #8
 800f058:	af00      	add	r7, sp, #0
 800f05a:	4603      	mov	r3, r0
 800f05c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800f05e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f062:	4618      	mov	r0, r3
 800f064:	f7ff ff38 	bl	800eed8 <__NVIC_ClearPendingIRQ>
}
 800f068:	bf00      	nop
 800f06a:	3708      	adds	r7, #8
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}

0800f070 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b086      	sub	sp, #24
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800f078:	2300      	movs	r3, #0
 800f07a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800f07c:	f7fe fffa 	bl	800e074 <HAL_GetTick>
 800f080:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d101      	bne.n	800f08c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800f088:	2301      	movs	r3, #1
 800f08a:	e099      	b.n	800f1c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2200      	movs	r2, #0
 800f090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2202      	movs	r2, #2
 800f098:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	681a      	ldr	r2, [r3, #0]
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	f022 0201 	bic.w	r2, r2, #1
 800f0aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f0ac:	e00f      	b.n	800f0ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f0ae:	f7fe ffe1 	bl	800e074 <HAL_GetTick>
 800f0b2:	4602      	mov	r2, r0
 800f0b4:	693b      	ldr	r3, [r7, #16]
 800f0b6:	1ad3      	subs	r3, r2, r3
 800f0b8:	2b05      	cmp	r3, #5
 800f0ba:	d908      	bls.n	800f0ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2220      	movs	r2, #32
 800f0c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2203      	movs	r2, #3
 800f0c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800f0ca:	2303      	movs	r3, #3
 800f0cc:	e078      	b.n	800f1c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	f003 0301 	and.w	r3, r3, #1
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d1e8      	bne.n	800f0ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800f0e4:	697a      	ldr	r2, [r7, #20]
 800f0e6:	4b38      	ldr	r3, [pc, #224]	; (800f1c8 <HAL_DMA_Init+0x158>)
 800f0e8:	4013      	ands	r3, r2
 800f0ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	685a      	ldr	r2, [r3, #4]
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	689b      	ldr	r3, [r3, #8]
 800f0f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f0fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	691b      	ldr	r3, [r3, #16]
 800f100:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f106:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	699b      	ldr	r3, [r3, #24]
 800f10c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f112:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	6a1b      	ldr	r3, [r3, #32]
 800f118:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f11a:	697a      	ldr	r2, [r7, #20]
 800f11c:	4313      	orrs	r3, r2
 800f11e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f124:	2b04      	cmp	r3, #4
 800f126:	d107      	bne.n	800f138 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f130:	4313      	orrs	r3, r2
 800f132:	697a      	ldr	r2, [r7, #20]
 800f134:	4313      	orrs	r3, r2
 800f136:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	697a      	ldr	r2, [r7, #20]
 800f13e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	695b      	ldr	r3, [r3, #20]
 800f146:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	f023 0307 	bic.w	r3, r3, #7
 800f14e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f154:	697a      	ldr	r2, [r7, #20]
 800f156:	4313      	orrs	r3, r2
 800f158:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f15e:	2b04      	cmp	r3, #4
 800f160:	d117      	bne.n	800f192 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f166:	697a      	ldr	r2, [r7, #20]
 800f168:	4313      	orrs	r3, r2
 800f16a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f170:	2b00      	cmp	r3, #0
 800f172:	d00e      	beq.n	800f192 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f000 fb09 	bl	800f78c <DMA_CheckFifoParam>
 800f17a:	4603      	mov	r3, r0
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d008      	beq.n	800f192 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2240      	movs	r2, #64	; 0x40
 800f184:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2201      	movs	r2, #1
 800f18a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800f18e:	2301      	movs	r3, #1
 800f190:	e016      	b.n	800f1c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	697a      	ldr	r2, [r7, #20]
 800f198:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f000 fac0 	bl	800f720 <DMA_CalcBaseAndBitshift>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f1a8:	223f      	movs	r2, #63	; 0x3f
 800f1aa:	409a      	lsls	r2, r3
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	2201      	movs	r2, #1
 800f1ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800f1be:	2300      	movs	r3, #0
}
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	3718      	adds	r7, #24
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}
 800f1c8:	f010803f 	.word	0xf010803f

0800f1cc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b084      	sub	sp, #16
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d101      	bne.n	800f1de <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800f1da:	2301      	movs	r3, #1
 800f1dc:	e050      	b.n	800f280 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f1e4:	b2db      	uxtb	r3, r3
 800f1e6:	2b02      	cmp	r3, #2
 800f1e8:	d101      	bne.n	800f1ee <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800f1ea:	2302      	movs	r3, #2
 800f1ec:	e048      	b.n	800f280 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	681a      	ldr	r2, [r3, #0]
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	f022 0201 	bic.w	r2, r2, #1
 800f1fc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	2200      	movs	r2, #0
 800f204:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	2200      	movs	r2, #0
 800f20c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	2200      	movs	r2, #0
 800f214:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	2200      	movs	r2, #0
 800f21c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	2200      	movs	r2, #0
 800f224:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	2221      	movs	r2, #33	; 0x21
 800f22c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800f22e:	6878      	ldr	r0, [r7, #4]
 800f230:	f000 fa76 	bl	800f720 <DMA_CalcBaseAndBitshift>
 800f234:	4603      	mov	r3, r0
 800f236:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	2200      	movs	r2, #0
 800f23c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2200      	movs	r2, #0
 800f242:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2200      	movs	r2, #0
 800f248:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	2200      	movs	r2, #0
 800f24e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	2200      	movs	r2, #0
 800f254:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2200      	movs	r2, #0
 800f25a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f260:	223f      	movs	r2, #63	; 0x3f
 800f262:	409a      	lsls	r2, r3
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2200      	movs	r2, #0
 800f26c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2200      	movs	r2, #0
 800f272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2200      	movs	r2, #0
 800f27a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800f27e:	2300      	movs	r3, #0
}
 800f280:	4618      	mov	r0, r3
 800f282:	3710      	adds	r7, #16
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}

0800f288 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b086      	sub	sp, #24
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	60f8      	str	r0, [r7, #12]
 800f290:	60b9      	str	r1, [r7, #8]
 800f292:	607a      	str	r2, [r7, #4]
 800f294:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f296:	2300      	movs	r3, #0
 800f298:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f29e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f2a6:	2b01      	cmp	r3, #1
 800f2a8:	d101      	bne.n	800f2ae <HAL_DMA_Start_IT+0x26>
 800f2aa:	2302      	movs	r3, #2
 800f2ac:	e040      	b.n	800f330 <HAL_DMA_Start_IT+0xa8>
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	2201      	movs	r2, #1
 800f2b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  

  if(HAL_DMA_STATE_READY == hdma->State)
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f2bc:	b2db      	uxtb	r3, r3
 800f2be:	2b01      	cmp	r3, #1
 800f2c0:	d12f      	bne.n	800f322 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	2202      	movs	r2, #2
 800f2c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	687a      	ldr	r2, [r7, #4]
 800f2d4:	68b9      	ldr	r1, [r7, #8]
 800f2d6:	68f8      	ldr	r0, [r7, #12]
 800f2d8:	f000 f9f4 	bl	800f6c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f2e0:	223f      	movs	r2, #63	; 0x3f
 800f2e2:	409a      	lsls	r2, r3
 800f2e4:	693b      	ldr	r3, [r7, #16]
 800f2e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	681a      	ldr	r2, [r3, #0]
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	f042 0216 	orr.w	r2, r2, #22
 800f2f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d007      	beq.n	800f310 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	681a      	ldr	r2, [r3, #0]
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	f042 0208 	orr.w	r2, r2, #8
 800f30e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	681a      	ldr	r2, [r3, #0]
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	f042 0201 	orr.w	r2, r2, #1
 800f31e:	601a      	str	r2, [r3, #0]
 800f320:	e005      	b.n	800f32e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	2200      	movs	r2, #0
 800f326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 800f32a:	2302      	movs	r3, #2
 800f32c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800f32e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f330:	4618      	mov	r0, r3
 800f332:	3718      	adds	r7, #24
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}

0800f338 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800f338:	b480      	push	{r7}
 800f33a:	b083      	sub	sp, #12
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f346:	b2db      	uxtb	r3, r3
 800f348:	2b02      	cmp	r3, #2
 800f34a:	d004      	beq.n	800f356 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	2280      	movs	r2, #128	; 0x80
 800f350:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800f352:	2301      	movs	r3, #1
 800f354:	e00c      	b.n	800f370 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2205      	movs	r2, #5
 800f35a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	681a      	ldr	r2, [r3, #0]
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	f022 0201 	bic.w	r2, r2, #1
 800f36c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800f36e:	2300      	movs	r3, #0
}
 800f370:	4618      	mov	r0, r3
 800f372:	370c      	adds	r7, #12
 800f374:	46bd      	mov	sp, r7
 800f376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37a:	4770      	bx	lr

0800f37c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b086      	sub	sp, #24
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800f384:	2300      	movs	r3, #0
 800f386:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f388:	4b92      	ldr	r3, [pc, #584]	; (800f5d4 <HAL_DMA_IRQHandler+0x258>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	4a92      	ldr	r2, [pc, #584]	; (800f5d8 <HAL_DMA_IRQHandler+0x25c>)
 800f38e:	fba2 2303 	umull	r2, r3, r2, r3
 800f392:	0a9b      	lsrs	r3, r3, #10
 800f394:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f39a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800f39c:	693b      	ldr	r3, [r7, #16]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f3a6:	2208      	movs	r2, #8
 800f3a8:	409a      	lsls	r2, r3
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	4013      	ands	r3, r2
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d01a      	beq.n	800f3e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	f003 0304 	and.w	r3, r3, #4
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d013      	beq.n	800f3e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	681a      	ldr	r2, [r3, #0]
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	f022 0204 	bic.w	r2, r2, #4
 800f3ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f3d4:	2208      	movs	r2, #8
 800f3d6:	409a      	lsls	r2, r3
 800f3d8:	693b      	ldr	r3, [r7, #16]
 800f3da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3e0:	f043 0201 	orr.w	r2, r3, #1
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f3ec:	2201      	movs	r2, #1
 800f3ee:	409a      	lsls	r2, r3
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	4013      	ands	r3, r2
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d012      	beq.n	800f41e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	695b      	ldr	r3, [r3, #20]
 800f3fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f402:	2b00      	cmp	r3, #0
 800f404:	d00b      	beq.n	800f41e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f40a:	2201      	movs	r2, #1
 800f40c:	409a      	lsls	r2, r3
 800f40e:	693b      	ldr	r3, [r7, #16]
 800f410:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f416:	f043 0202 	orr.w	r2, r3, #2
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f422:	2204      	movs	r2, #4
 800f424:	409a      	lsls	r2, r3
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	4013      	ands	r3, r2
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d012      	beq.n	800f454 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	f003 0302 	and.w	r3, r3, #2
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d00b      	beq.n	800f454 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f440:	2204      	movs	r2, #4
 800f442:	409a      	lsls	r2, r3
 800f444:	693b      	ldr	r3, [r7, #16]
 800f446:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f44c:	f043 0204 	orr.w	r2, r3, #4
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f458:	2210      	movs	r2, #16
 800f45a:	409a      	lsls	r2, r3
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	4013      	ands	r3, r2
 800f460:	2b00      	cmp	r3, #0
 800f462:	d043      	beq.n	800f4ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	f003 0308 	and.w	r3, r3, #8
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d03c      	beq.n	800f4ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f476:	2210      	movs	r2, #16
 800f478:	409a      	lsls	r2, r3
 800f47a:	693b      	ldr	r3, [r7, #16]
 800f47c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d018      	beq.n	800f4be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f496:	2b00      	cmp	r3, #0
 800f498:	d108      	bne.n	800f4ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d024      	beq.n	800f4ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	4798      	blx	r3
 800f4aa:	e01f      	b.n	800f4ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d01b      	beq.n	800f4ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	4798      	blx	r3
 800f4bc:	e016      	b.n	800f4ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d107      	bne.n	800f4dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	681a      	ldr	r2, [r3, #0]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	f022 0208 	bic.w	r2, r2, #8
 800f4da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d003      	beq.n	800f4ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4e8:	6878      	ldr	r0, [r7, #4]
 800f4ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f4f0:	2220      	movs	r2, #32
 800f4f2:	409a      	lsls	r2, r3
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	4013      	ands	r3, r2
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	f000 808e 	beq.w	800f61a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	f003 0310 	and.w	r3, r3, #16
 800f508:	2b00      	cmp	r3, #0
 800f50a:	f000 8086 	beq.w	800f61a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f512:	2220      	movs	r2, #32
 800f514:	409a      	lsls	r2, r3
 800f516:	693b      	ldr	r3, [r7, #16]
 800f518:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f520:	b2db      	uxtb	r3, r3
 800f522:	2b05      	cmp	r3, #5
 800f524:	d136      	bne.n	800f594 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	681a      	ldr	r2, [r3, #0]
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	f022 0216 	bic.w	r2, r2, #22
 800f534:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	695a      	ldr	r2, [r3, #20]
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f544:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d103      	bne.n	800f556 <HAL_DMA_IRQHandler+0x1da>
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f552:	2b00      	cmp	r3, #0
 800f554:	d007      	beq.n	800f566 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	681a      	ldr	r2, [r3, #0]
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	f022 0208 	bic.w	r2, r2, #8
 800f564:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f56a:	223f      	movs	r2, #63	; 0x3f
 800f56c:	409a      	lsls	r2, r3
 800f56e:	693b      	ldr	r3, [r7, #16]
 800f570:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	2200      	movs	r2, #0
 800f576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	2201      	movs	r2, #1
 800f57e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f586:	2b00      	cmp	r3, #0
 800f588:	d07d      	beq.n	800f686 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	4798      	blx	r3
        }
        return;
 800f592:	e078      	b.n	800f686 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d01c      	beq.n	800f5dc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d108      	bne.n	800f5c2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d030      	beq.n	800f61a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5bc:	6878      	ldr	r0, [r7, #4]
 800f5be:	4798      	blx	r3
 800f5c0:	e02b      	b.n	800f61a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d027      	beq.n	800f61a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5ce:	6878      	ldr	r0, [r7, #4]
 800f5d0:	4798      	blx	r3
 800f5d2:	e022      	b.n	800f61a <HAL_DMA_IRQHandler+0x29e>
 800f5d4:	200000c0 	.word	0x200000c0
 800f5d8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d10f      	bne.n	800f60a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	681a      	ldr	r2, [r3, #0]
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	f022 0210 	bic.w	r2, r2, #16
 800f5f8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	2201      	movs	r2, #1
 800f606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d003      	beq.n	800f61a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d032      	beq.n	800f688 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f626:	f003 0301 	and.w	r3, r3, #1
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d022      	beq.n	800f674 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	2205      	movs	r2, #5
 800f632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	681a      	ldr	r2, [r3, #0]
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	f022 0201 	bic.w	r2, r2, #1
 800f644:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800f646:	68bb      	ldr	r3, [r7, #8]
 800f648:	3301      	adds	r3, #1
 800f64a:	60bb      	str	r3, [r7, #8]
 800f64c:	697a      	ldr	r2, [r7, #20]
 800f64e:	429a      	cmp	r2, r3
 800f650:	d307      	bcc.n	800f662 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	f003 0301 	and.w	r3, r3, #1
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d1f2      	bne.n	800f646 <HAL_DMA_IRQHandler+0x2ca>
 800f660:	e000      	b.n	800f664 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800f662:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2200      	movs	r2, #0
 800f668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2201      	movs	r2, #1
 800f670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d005      	beq.n	800f688 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f680:	6878      	ldr	r0, [r7, #4]
 800f682:	4798      	blx	r3
 800f684:	e000      	b.n	800f688 <HAL_DMA_IRQHandler+0x30c>
        return;
 800f686:	bf00      	nop
    }
  }
}
 800f688:	3718      	adds	r7, #24
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}
 800f68e:	bf00      	nop

0800f690 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800f690:	b480      	push	{r7}
 800f692:	b083      	sub	sp, #12
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f69e:	b2db      	uxtb	r3, r3
}
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	370c      	adds	r7, #12
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6aa:	4770      	bx	lr

0800f6ac <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b083      	sub	sp, #12
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	370c      	adds	r7, #12
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c2:	4770      	bx	lr

0800f6c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b085      	sub	sp, #20
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	60f8      	str	r0, [r7, #12]
 800f6cc:	60b9      	str	r1, [r7, #8]
 800f6ce:	607a      	str	r2, [r7, #4]
 800f6d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	681a      	ldr	r2, [r3, #0]
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f6e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	683a      	ldr	r2, [r7, #0]
 800f6e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	689b      	ldr	r3, [r3, #8]
 800f6ee:	2b40      	cmp	r3, #64	; 0x40
 800f6f0:	d108      	bne.n	800f704 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	687a      	ldr	r2, [r7, #4]
 800f6f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	68ba      	ldr	r2, [r7, #8]
 800f700:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800f702:	e007      	b.n	800f714 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	68ba      	ldr	r2, [r7, #8]
 800f70a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	687a      	ldr	r2, [r7, #4]
 800f712:	60da      	str	r2, [r3, #12]
}
 800f714:	bf00      	nop
 800f716:	3714      	adds	r7, #20
 800f718:	46bd      	mov	sp, r7
 800f71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71e:	4770      	bx	lr

0800f720 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800f720:	b480      	push	{r7}
 800f722:	b085      	sub	sp, #20
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	b2db      	uxtb	r3, r3
 800f72e:	3b10      	subs	r3, #16
 800f730:	4a14      	ldr	r2, [pc, #80]	; (800f784 <DMA_CalcBaseAndBitshift+0x64>)
 800f732:	fba2 2303 	umull	r2, r3, r2, r3
 800f736:	091b      	lsrs	r3, r3, #4
 800f738:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800f73a:	4a13      	ldr	r2, [pc, #76]	; (800f788 <DMA_CalcBaseAndBitshift+0x68>)
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	4413      	add	r3, r2
 800f740:	781b      	ldrb	r3, [r3, #0]
 800f742:	461a      	mov	r2, r3
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	2b03      	cmp	r3, #3
 800f74c:	d909      	bls.n	800f762 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800f756:	f023 0303 	bic.w	r3, r3, #3
 800f75a:	1d1a      	adds	r2, r3, #4
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	659a      	str	r2, [r3, #88]	; 0x58
 800f760:	e007      	b.n	800f772 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800f76a:	f023 0303 	bic.w	r3, r3, #3
 800f76e:	687a      	ldr	r2, [r7, #4]
 800f770:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800f776:	4618      	mov	r0, r3
 800f778:	3714      	adds	r7, #20
 800f77a:	46bd      	mov	sp, r7
 800f77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f780:	4770      	bx	lr
 800f782:	bf00      	nop
 800f784:	aaaaaaab 	.word	0xaaaaaaab
 800f788:	080209a4 	.word	0x080209a4

0800f78c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800f78c:	b480      	push	{r7}
 800f78e:	b085      	sub	sp, #20
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f794:	2300      	movs	r3, #0
 800f796:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f79c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	699b      	ldr	r3, [r3, #24]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d11f      	bne.n	800f7e6 <DMA_CheckFifoParam+0x5a>
 800f7a6:	68bb      	ldr	r3, [r7, #8]
 800f7a8:	2b03      	cmp	r3, #3
 800f7aa:	d856      	bhi.n	800f85a <DMA_CheckFifoParam+0xce>
 800f7ac:	a201      	add	r2, pc, #4	; (adr r2, 800f7b4 <DMA_CheckFifoParam+0x28>)
 800f7ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7b2:	bf00      	nop
 800f7b4:	0800f7c5 	.word	0x0800f7c5
 800f7b8:	0800f7d7 	.word	0x0800f7d7
 800f7bc:	0800f7c5 	.word	0x0800f7c5
 800f7c0:	0800f85b 	.word	0x0800f85b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d046      	beq.n	800f85e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800f7d0:	2301      	movs	r3, #1
 800f7d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f7d4:	e043      	b.n	800f85e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800f7de:	d140      	bne.n	800f862 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800f7e0:	2301      	movs	r3, #1
 800f7e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f7e4:	e03d      	b.n	800f862 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	699b      	ldr	r3, [r3, #24]
 800f7ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f7ee:	d121      	bne.n	800f834 <DMA_CheckFifoParam+0xa8>
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	2b03      	cmp	r3, #3
 800f7f4:	d837      	bhi.n	800f866 <DMA_CheckFifoParam+0xda>
 800f7f6:	a201      	add	r2, pc, #4	; (adr r2, 800f7fc <DMA_CheckFifoParam+0x70>)
 800f7f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7fc:	0800f80d 	.word	0x0800f80d
 800f800:	0800f813 	.word	0x0800f813
 800f804:	0800f80d 	.word	0x0800f80d
 800f808:	0800f825 	.word	0x0800f825
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800f80c:	2301      	movs	r3, #1
 800f80e:	73fb      	strb	r3, [r7, #15]
      break;
 800f810:	e030      	b.n	800f874 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f816:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d025      	beq.n	800f86a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800f81e:	2301      	movs	r3, #1
 800f820:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f822:	e022      	b.n	800f86a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f828:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800f82c:	d11f      	bne.n	800f86e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800f82e:	2301      	movs	r3, #1
 800f830:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800f832:	e01c      	b.n	800f86e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800f834:	68bb      	ldr	r3, [r7, #8]
 800f836:	2b02      	cmp	r3, #2
 800f838:	d903      	bls.n	800f842 <DMA_CheckFifoParam+0xb6>
 800f83a:	68bb      	ldr	r3, [r7, #8]
 800f83c:	2b03      	cmp	r3, #3
 800f83e:	d003      	beq.n	800f848 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800f840:	e018      	b.n	800f874 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800f842:	2301      	movs	r3, #1
 800f844:	73fb      	strb	r3, [r7, #15]
      break;
 800f846:	e015      	b.n	800f874 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f84c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f850:	2b00      	cmp	r3, #0
 800f852:	d00e      	beq.n	800f872 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800f854:	2301      	movs	r3, #1
 800f856:	73fb      	strb	r3, [r7, #15]
      break;
 800f858:	e00b      	b.n	800f872 <DMA_CheckFifoParam+0xe6>
      break;
 800f85a:	bf00      	nop
 800f85c:	e00a      	b.n	800f874 <DMA_CheckFifoParam+0xe8>
      break;
 800f85e:	bf00      	nop
 800f860:	e008      	b.n	800f874 <DMA_CheckFifoParam+0xe8>
      break;
 800f862:	bf00      	nop
 800f864:	e006      	b.n	800f874 <DMA_CheckFifoParam+0xe8>
      break;
 800f866:	bf00      	nop
 800f868:	e004      	b.n	800f874 <DMA_CheckFifoParam+0xe8>
      break;
 800f86a:	bf00      	nop
 800f86c:	e002      	b.n	800f874 <DMA_CheckFifoParam+0xe8>
      break;   
 800f86e:	bf00      	nop
 800f870:	e000      	b.n	800f874 <DMA_CheckFifoParam+0xe8>
      break;
 800f872:	bf00      	nop
    }
  } 
  
  return status; 
 800f874:	7bfb      	ldrb	r3, [r7, #15]
}
 800f876:	4618      	mov	r0, r3
 800f878:	3714      	adds	r7, #20
 800f87a:	46bd      	mov	sp, r7
 800f87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f880:	4770      	bx	lr
 800f882:	bf00      	nop

0800f884 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b086      	sub	sp, #24
 800f888:	af00      	add	r7, sp, #0
 800f88a:	60f8      	str	r0, [r7, #12]
 800f88c:	60b9      	str	r1, [r7, #8]
 800f88e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800f892:	2301      	movs	r3, #1
 800f894:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800f896:	4b23      	ldr	r3, [pc, #140]	; (800f924 <HAL_FLASH_Program+0xa0>)
 800f898:	7e1b      	ldrb	r3, [r3, #24]
 800f89a:	2b01      	cmp	r3, #1
 800f89c:	d101      	bne.n	800f8a2 <HAL_FLASH_Program+0x1e>
 800f89e:	2302      	movs	r3, #2
 800f8a0:	e03b      	b.n	800f91a <HAL_FLASH_Program+0x96>
 800f8a2:	4b20      	ldr	r3, [pc, #128]	; (800f924 <HAL_FLASH_Program+0xa0>)
 800f8a4:	2201      	movs	r2, #1
 800f8a6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f8a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800f8ac:	f000 f87c 	bl	800f9a8 <FLASH_WaitForLastOperation>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800f8b4:	7dfb      	ldrb	r3, [r7, #23]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d12b      	bne.n	800f912 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d105      	bne.n	800f8cc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800f8c0:	783b      	ldrb	r3, [r7, #0]
 800f8c2:	4619      	mov	r1, r3
 800f8c4:	68b8      	ldr	r0, [r7, #8]
 800f8c6:	f000 f927 	bl	800fb18 <FLASH_Program_Byte>
 800f8ca:	e016      	b.n	800f8fa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	2b01      	cmp	r3, #1
 800f8d0:	d105      	bne.n	800f8de <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800f8d2:	883b      	ldrh	r3, [r7, #0]
 800f8d4:	4619      	mov	r1, r3
 800f8d6:	68b8      	ldr	r0, [r7, #8]
 800f8d8:	f000 f8fa 	bl	800fad0 <FLASH_Program_HalfWord>
 800f8dc:	e00d      	b.n	800f8fa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	2b02      	cmp	r3, #2
 800f8e2:	d105      	bne.n	800f8f0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800f8e4:	683b      	ldr	r3, [r7, #0]
 800f8e6:	4619      	mov	r1, r3
 800f8e8:	68b8      	ldr	r0, [r7, #8]
 800f8ea:	f000 f8cf 	bl	800fa8c <FLASH_Program_Word>
 800f8ee:	e004      	b.n	800f8fa <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800f8f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f8f4:	68b8      	ldr	r0, [r7, #8]
 800f8f6:	f000 f897 	bl	800fa28 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f8fa:	f24c 3050 	movw	r0, #50000	; 0xc350
 800f8fe:	f000 f853 	bl	800f9a8 <FLASH_WaitForLastOperation>
 800f902:	4603      	mov	r3, r0
 800f904:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800f906:	4b08      	ldr	r3, [pc, #32]	; (800f928 <HAL_FLASH_Program+0xa4>)
 800f908:	691b      	ldr	r3, [r3, #16]
 800f90a:	4a07      	ldr	r2, [pc, #28]	; (800f928 <HAL_FLASH_Program+0xa4>)
 800f90c:	f023 0301 	bic.w	r3, r3, #1
 800f910:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800f912:	4b04      	ldr	r3, [pc, #16]	; (800f924 <HAL_FLASH_Program+0xa0>)
 800f914:	2200      	movs	r2, #0
 800f916:	761a      	strb	r2, [r3, #24]
  
  return status;
 800f918:	7dfb      	ldrb	r3, [r7, #23]
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	3718      	adds	r7, #24
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}
 800f922:	bf00      	nop
 800f924:	2000a4ac 	.word	0x2000a4ac
 800f928:	40023c00 	.word	0x40023c00

0800f92c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800f92c:	b480      	push	{r7}
 800f92e:	b083      	sub	sp, #12
 800f930:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800f932:	2300      	movs	r3, #0
 800f934:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800f936:	4b0b      	ldr	r3, [pc, #44]	; (800f964 <HAL_FLASH_Unlock+0x38>)
 800f938:	691b      	ldr	r3, [r3, #16]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	da0b      	bge.n	800f956 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800f93e:	4b09      	ldr	r3, [pc, #36]	; (800f964 <HAL_FLASH_Unlock+0x38>)
 800f940:	4a09      	ldr	r2, [pc, #36]	; (800f968 <HAL_FLASH_Unlock+0x3c>)
 800f942:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800f944:	4b07      	ldr	r3, [pc, #28]	; (800f964 <HAL_FLASH_Unlock+0x38>)
 800f946:	4a09      	ldr	r2, [pc, #36]	; (800f96c <HAL_FLASH_Unlock+0x40>)
 800f948:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800f94a:	4b06      	ldr	r3, [pc, #24]	; (800f964 <HAL_FLASH_Unlock+0x38>)
 800f94c:	691b      	ldr	r3, [r3, #16]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	da01      	bge.n	800f956 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800f952:	2301      	movs	r3, #1
 800f954:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800f956:	79fb      	ldrb	r3, [r7, #7]
}
 800f958:	4618      	mov	r0, r3
 800f95a:	370c      	adds	r7, #12
 800f95c:	46bd      	mov	sp, r7
 800f95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f962:	4770      	bx	lr
 800f964:	40023c00 	.word	0x40023c00
 800f968:	45670123 	.word	0x45670123
 800f96c:	cdef89ab 	.word	0xcdef89ab

0800f970 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800f970:	b480      	push	{r7}
 800f972:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800f974:	4b05      	ldr	r3, [pc, #20]	; (800f98c <HAL_FLASH_Lock+0x1c>)
 800f976:	691b      	ldr	r3, [r3, #16]
 800f978:	4a04      	ldr	r2, [pc, #16]	; (800f98c <HAL_FLASH_Lock+0x1c>)
 800f97a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f97e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800f980:	2300      	movs	r3, #0
}
 800f982:	4618      	mov	r0, r3
 800f984:	46bd      	mov	sp, r7
 800f986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98a:	4770      	bx	lr
 800f98c:	40023c00 	.word	0x40023c00

0800f990 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800f990:	b480      	push	{r7}
 800f992:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800f994:	4b03      	ldr	r3, [pc, #12]	; (800f9a4 <HAL_FLASH_GetError+0x14>)
 800f996:	69db      	ldr	r3, [r3, #28]
}  
 800f998:	4618      	mov	r0, r3
 800f99a:	46bd      	mov	sp, r7
 800f99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a0:	4770      	bx	lr
 800f9a2:	bf00      	nop
 800f9a4:	2000a4ac 	.word	0x2000a4ac

0800f9a8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b084      	sub	sp, #16
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f9b4:	4b1a      	ldr	r3, [pc, #104]	; (800fa20 <FLASH_WaitForLastOperation+0x78>)
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800f9ba:	f7fe fb5b 	bl	800e074 <HAL_GetTick>
 800f9be:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800f9c0:	e010      	b.n	800f9e4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f9c8:	d00c      	beq.n	800f9e4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d007      	beq.n	800f9e0 <FLASH_WaitForLastOperation+0x38>
 800f9d0:	f7fe fb50 	bl	800e074 <HAL_GetTick>
 800f9d4:	4602      	mov	r2, r0
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	1ad3      	subs	r3, r2, r3
 800f9da:	687a      	ldr	r2, [r7, #4]
 800f9dc:	429a      	cmp	r2, r3
 800f9de:	d201      	bcs.n	800f9e4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800f9e0:	2303      	movs	r3, #3
 800f9e2:	e019      	b.n	800fa18 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800f9e4:	4b0f      	ldr	r3, [pc, #60]	; (800fa24 <FLASH_WaitForLastOperation+0x7c>)
 800f9e6:	68db      	ldr	r3, [r3, #12]
 800f9e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d1e8      	bne.n	800f9c2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800f9f0:	4b0c      	ldr	r3, [pc, #48]	; (800fa24 <FLASH_WaitForLastOperation+0x7c>)
 800f9f2:	68db      	ldr	r3, [r3, #12]
 800f9f4:	f003 0301 	and.w	r3, r3, #1
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d002      	beq.n	800fa02 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800f9fc:	4b09      	ldr	r3, [pc, #36]	; (800fa24 <FLASH_WaitForLastOperation+0x7c>)
 800f9fe:	2201      	movs	r2, #1
 800fa00:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800fa02:	4b08      	ldr	r3, [pc, #32]	; (800fa24 <FLASH_WaitForLastOperation+0x7c>)
 800fa04:	68db      	ldr	r3, [r3, #12]
 800fa06:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d003      	beq.n	800fa16 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800fa0e:	f000 f8a5 	bl	800fb5c <FLASH_SetErrorCode>
    return HAL_ERROR;
 800fa12:	2301      	movs	r3, #1
 800fa14:	e000      	b.n	800fa18 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800fa16:	2300      	movs	r3, #0
  
}  
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3710      	adds	r7, #16
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}
 800fa20:	2000a4ac 	.word	0x2000a4ac
 800fa24:	40023c00 	.word	0x40023c00

0800fa28 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800fa28:	b480      	push	{r7}
 800fa2a:	b085      	sub	sp, #20
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	60f8      	str	r0, [r7, #12]
 800fa30:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800fa34:	4b14      	ldr	r3, [pc, #80]	; (800fa88 <FLASH_Program_DoubleWord+0x60>)
 800fa36:	691b      	ldr	r3, [r3, #16]
 800fa38:	4a13      	ldr	r2, [pc, #76]	; (800fa88 <FLASH_Program_DoubleWord+0x60>)
 800fa3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800fa40:	4b11      	ldr	r3, [pc, #68]	; (800fa88 <FLASH_Program_DoubleWord+0x60>)
 800fa42:	691b      	ldr	r3, [r3, #16]
 800fa44:	4a10      	ldr	r2, [pc, #64]	; (800fa88 <FLASH_Program_DoubleWord+0x60>)
 800fa46:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800fa4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800fa4c:	4b0e      	ldr	r3, [pc, #56]	; (800fa88 <FLASH_Program_DoubleWord+0x60>)
 800fa4e:	691b      	ldr	r3, [r3, #16]
 800fa50:	4a0d      	ldr	r2, [pc, #52]	; (800fa88 <FLASH_Program_DoubleWord+0x60>)
 800fa52:	f043 0301 	orr.w	r3, r3, #1
 800fa56:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	683a      	ldr	r2, [r7, #0]
 800fa5c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800fa5e:	f3bf 8f6f 	isb	sy
}
 800fa62:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800fa64:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fa68:	f04f 0200 	mov.w	r2, #0
 800fa6c:	f04f 0300 	mov.w	r3, #0
 800fa70:	000a      	movs	r2, r1
 800fa72:	2300      	movs	r3, #0
 800fa74:	68f9      	ldr	r1, [r7, #12]
 800fa76:	3104      	adds	r1, #4
 800fa78:	4613      	mov	r3, r2
 800fa7a:	600b      	str	r3, [r1, #0]
}
 800fa7c:	bf00      	nop
 800fa7e:	3714      	adds	r7, #20
 800fa80:	46bd      	mov	sp, r7
 800fa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa86:	4770      	bx	lr
 800fa88:	40023c00 	.word	0x40023c00

0800fa8c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800fa8c:	b480      	push	{r7}
 800fa8e:	b083      	sub	sp, #12
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
 800fa94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800fa96:	4b0d      	ldr	r3, [pc, #52]	; (800facc <FLASH_Program_Word+0x40>)
 800fa98:	691b      	ldr	r3, [r3, #16]
 800fa9a:	4a0c      	ldr	r2, [pc, #48]	; (800facc <FLASH_Program_Word+0x40>)
 800fa9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800faa0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800faa2:	4b0a      	ldr	r3, [pc, #40]	; (800facc <FLASH_Program_Word+0x40>)
 800faa4:	691b      	ldr	r3, [r3, #16]
 800faa6:	4a09      	ldr	r2, [pc, #36]	; (800facc <FLASH_Program_Word+0x40>)
 800faa8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800faac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800faae:	4b07      	ldr	r3, [pc, #28]	; (800facc <FLASH_Program_Word+0x40>)
 800fab0:	691b      	ldr	r3, [r3, #16]
 800fab2:	4a06      	ldr	r2, [pc, #24]	; (800facc <FLASH_Program_Word+0x40>)
 800fab4:	f043 0301 	orr.w	r3, r3, #1
 800fab8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	683a      	ldr	r2, [r7, #0]
 800fabe:	601a      	str	r2, [r3, #0]
}
 800fac0:	bf00      	nop
 800fac2:	370c      	adds	r7, #12
 800fac4:	46bd      	mov	sp, r7
 800fac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faca:	4770      	bx	lr
 800facc:	40023c00 	.word	0x40023c00

0800fad0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800fad0:	b480      	push	{r7}
 800fad2:	b083      	sub	sp, #12
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
 800fad8:	460b      	mov	r3, r1
 800fada:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800fadc:	4b0d      	ldr	r3, [pc, #52]	; (800fb14 <FLASH_Program_HalfWord+0x44>)
 800fade:	691b      	ldr	r3, [r3, #16]
 800fae0:	4a0c      	ldr	r2, [pc, #48]	; (800fb14 <FLASH_Program_HalfWord+0x44>)
 800fae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fae6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800fae8:	4b0a      	ldr	r3, [pc, #40]	; (800fb14 <FLASH_Program_HalfWord+0x44>)
 800faea:	691b      	ldr	r3, [r3, #16]
 800faec:	4a09      	ldr	r2, [pc, #36]	; (800fb14 <FLASH_Program_HalfWord+0x44>)
 800faee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800faf2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800faf4:	4b07      	ldr	r3, [pc, #28]	; (800fb14 <FLASH_Program_HalfWord+0x44>)
 800faf6:	691b      	ldr	r3, [r3, #16]
 800faf8:	4a06      	ldr	r2, [pc, #24]	; (800fb14 <FLASH_Program_HalfWord+0x44>)
 800fafa:	f043 0301 	orr.w	r3, r3, #1
 800fafe:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	887a      	ldrh	r2, [r7, #2]
 800fb04:	801a      	strh	r2, [r3, #0]
}
 800fb06:	bf00      	nop
 800fb08:	370c      	adds	r7, #12
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb10:	4770      	bx	lr
 800fb12:	bf00      	nop
 800fb14:	40023c00 	.word	0x40023c00

0800fb18 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800fb18:	b480      	push	{r7}
 800fb1a:	b083      	sub	sp, #12
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
 800fb20:	460b      	mov	r3, r1
 800fb22:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800fb24:	4b0c      	ldr	r3, [pc, #48]	; (800fb58 <FLASH_Program_Byte+0x40>)
 800fb26:	691b      	ldr	r3, [r3, #16]
 800fb28:	4a0b      	ldr	r2, [pc, #44]	; (800fb58 <FLASH_Program_Byte+0x40>)
 800fb2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800fb30:	4b09      	ldr	r3, [pc, #36]	; (800fb58 <FLASH_Program_Byte+0x40>)
 800fb32:	4a09      	ldr	r2, [pc, #36]	; (800fb58 <FLASH_Program_Byte+0x40>)
 800fb34:	691b      	ldr	r3, [r3, #16]
 800fb36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800fb38:	4b07      	ldr	r3, [pc, #28]	; (800fb58 <FLASH_Program_Byte+0x40>)
 800fb3a:	691b      	ldr	r3, [r3, #16]
 800fb3c:	4a06      	ldr	r2, [pc, #24]	; (800fb58 <FLASH_Program_Byte+0x40>)
 800fb3e:	f043 0301 	orr.w	r3, r3, #1
 800fb42:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	78fa      	ldrb	r2, [r7, #3]
 800fb48:	701a      	strb	r2, [r3, #0]
}
 800fb4a:	bf00      	nop
 800fb4c:	370c      	adds	r7, #12
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb54:	4770      	bx	lr
 800fb56:	bf00      	nop
 800fb58:	40023c00 	.word	0x40023c00

0800fb5c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800fb5c:	b480      	push	{r7}
 800fb5e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800fb60:	4b27      	ldr	r3, [pc, #156]	; (800fc00 <FLASH_SetErrorCode+0xa4>)
 800fb62:	68db      	ldr	r3, [r3, #12]
 800fb64:	f003 0310 	and.w	r3, r3, #16
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d008      	beq.n	800fb7e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800fb6c:	4b25      	ldr	r3, [pc, #148]	; (800fc04 <FLASH_SetErrorCode+0xa8>)
 800fb6e:	69db      	ldr	r3, [r3, #28]
 800fb70:	f043 0310 	orr.w	r3, r3, #16
 800fb74:	4a23      	ldr	r2, [pc, #140]	; (800fc04 <FLASH_SetErrorCode+0xa8>)
 800fb76:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800fb78:	4b21      	ldr	r3, [pc, #132]	; (800fc00 <FLASH_SetErrorCode+0xa4>)
 800fb7a:	2210      	movs	r2, #16
 800fb7c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800fb7e:	4b20      	ldr	r3, [pc, #128]	; (800fc00 <FLASH_SetErrorCode+0xa4>)
 800fb80:	68db      	ldr	r3, [r3, #12]
 800fb82:	f003 0320 	and.w	r3, r3, #32
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d008      	beq.n	800fb9c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800fb8a:	4b1e      	ldr	r3, [pc, #120]	; (800fc04 <FLASH_SetErrorCode+0xa8>)
 800fb8c:	69db      	ldr	r3, [r3, #28]
 800fb8e:	f043 0308 	orr.w	r3, r3, #8
 800fb92:	4a1c      	ldr	r2, [pc, #112]	; (800fc04 <FLASH_SetErrorCode+0xa8>)
 800fb94:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800fb96:	4b1a      	ldr	r3, [pc, #104]	; (800fc00 <FLASH_SetErrorCode+0xa4>)
 800fb98:	2220      	movs	r2, #32
 800fb9a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800fb9c:	4b18      	ldr	r3, [pc, #96]	; (800fc00 <FLASH_SetErrorCode+0xa4>)
 800fb9e:	68db      	ldr	r3, [r3, #12]
 800fba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d008      	beq.n	800fbba <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800fba8:	4b16      	ldr	r3, [pc, #88]	; (800fc04 <FLASH_SetErrorCode+0xa8>)
 800fbaa:	69db      	ldr	r3, [r3, #28]
 800fbac:	f043 0304 	orr.w	r3, r3, #4
 800fbb0:	4a14      	ldr	r2, [pc, #80]	; (800fc04 <FLASH_SetErrorCode+0xa8>)
 800fbb2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800fbb4:	4b12      	ldr	r3, [pc, #72]	; (800fc00 <FLASH_SetErrorCode+0xa4>)
 800fbb6:	2240      	movs	r2, #64	; 0x40
 800fbb8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800fbba:	4b11      	ldr	r3, [pc, #68]	; (800fc00 <FLASH_SetErrorCode+0xa4>)
 800fbbc:	68db      	ldr	r3, [r3, #12]
 800fbbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d008      	beq.n	800fbd8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800fbc6:	4b0f      	ldr	r3, [pc, #60]	; (800fc04 <FLASH_SetErrorCode+0xa8>)
 800fbc8:	69db      	ldr	r3, [r3, #28]
 800fbca:	f043 0302 	orr.w	r3, r3, #2
 800fbce:	4a0d      	ldr	r2, [pc, #52]	; (800fc04 <FLASH_SetErrorCode+0xa8>)
 800fbd0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800fbd2:	4b0b      	ldr	r3, [pc, #44]	; (800fc00 <FLASH_SetErrorCode+0xa4>)
 800fbd4:	2280      	movs	r2, #128	; 0x80
 800fbd6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800fbd8:	4b09      	ldr	r3, [pc, #36]	; (800fc00 <FLASH_SetErrorCode+0xa4>)
 800fbda:	68db      	ldr	r3, [r3, #12]
 800fbdc:	f003 0302 	and.w	r3, r3, #2
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d008      	beq.n	800fbf6 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800fbe4:	4b07      	ldr	r3, [pc, #28]	; (800fc04 <FLASH_SetErrorCode+0xa8>)
 800fbe6:	69db      	ldr	r3, [r3, #28]
 800fbe8:	f043 0320 	orr.w	r3, r3, #32
 800fbec:	4a05      	ldr	r2, [pc, #20]	; (800fc04 <FLASH_SetErrorCode+0xa8>)
 800fbee:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800fbf0:	4b03      	ldr	r3, [pc, #12]	; (800fc00 <FLASH_SetErrorCode+0xa4>)
 800fbf2:	2202      	movs	r2, #2
 800fbf4:	60da      	str	r2, [r3, #12]
  }
}
 800fbf6:	bf00      	nop
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfe:	4770      	bx	lr
 800fc00:	40023c00 	.word	0x40023c00
 800fc04:	2000a4ac 	.word	0x2000a4ac

0800fc08 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b084      	sub	sp, #16
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
 800fc10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800fc12:	2301      	movs	r3, #1
 800fc14:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800fc16:	2300      	movs	r3, #0
 800fc18:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800fc1a:	4b31      	ldr	r3, [pc, #196]	; (800fce0 <HAL_FLASHEx_Erase+0xd8>)
 800fc1c:	7e1b      	ldrb	r3, [r3, #24]
 800fc1e:	2b01      	cmp	r3, #1
 800fc20:	d101      	bne.n	800fc26 <HAL_FLASHEx_Erase+0x1e>
 800fc22:	2302      	movs	r3, #2
 800fc24:	e058      	b.n	800fcd8 <HAL_FLASHEx_Erase+0xd0>
 800fc26:	4b2e      	ldr	r3, [pc, #184]	; (800fce0 <HAL_FLASHEx_Erase+0xd8>)
 800fc28:	2201      	movs	r2, #1
 800fc2a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fc2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800fc30:	f7ff feba 	bl	800f9a8 <FLASH_WaitForLastOperation>
 800fc34:	4603      	mov	r3, r0
 800fc36:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800fc38:	7bfb      	ldrb	r3, [r7, #15]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d148      	bne.n	800fcd0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fc44:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	2b01      	cmp	r3, #1
 800fc4c:	d115      	bne.n	800fc7a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	691b      	ldr	r3, [r3, #16]
 800fc52:	b2da      	uxtb	r2, r3
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	685b      	ldr	r3, [r3, #4]
 800fc58:	4619      	mov	r1, r3
 800fc5a:	4610      	mov	r0, r2
 800fc5c:	f000 f844 	bl	800fce8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fc60:	f24c 3050 	movw	r0, #50000	; 0xc350
 800fc64:	f7ff fea0 	bl	800f9a8 <FLASH_WaitForLastOperation>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800fc6c:	4b1d      	ldr	r3, [pc, #116]	; (800fce4 <HAL_FLASHEx_Erase+0xdc>)
 800fc6e:	691b      	ldr	r3, [r3, #16]
 800fc70:	4a1c      	ldr	r2, [pc, #112]	; (800fce4 <HAL_FLASHEx_Erase+0xdc>)
 800fc72:	f023 0304 	bic.w	r3, r3, #4
 800fc76:	6113      	str	r3, [r2, #16]
 800fc78:	e028      	b.n	800fccc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	689b      	ldr	r3, [r3, #8]
 800fc7e:	60bb      	str	r3, [r7, #8]
 800fc80:	e01c      	b.n	800fcbc <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	691b      	ldr	r3, [r3, #16]
 800fc86:	b2db      	uxtb	r3, r3
 800fc88:	4619      	mov	r1, r3
 800fc8a:	68b8      	ldr	r0, [r7, #8]
 800fc8c:	f000 f850 	bl	800fd30 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fc90:	f24c 3050 	movw	r0, #50000	; 0xc350
 800fc94:	f7ff fe88 	bl	800f9a8 <FLASH_WaitForLastOperation>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800fc9c:	4b11      	ldr	r3, [pc, #68]	; (800fce4 <HAL_FLASHEx_Erase+0xdc>)
 800fc9e:	691b      	ldr	r3, [r3, #16]
 800fca0:	4a10      	ldr	r2, [pc, #64]	; (800fce4 <HAL_FLASHEx_Erase+0xdc>)
 800fca2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800fca6:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800fca8:	7bfb      	ldrb	r3, [r7, #15]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d003      	beq.n	800fcb6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	68ba      	ldr	r2, [r7, #8]
 800fcb2:	601a      	str	r2, [r3, #0]
          break;
 800fcb4:	e00a      	b.n	800fccc <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800fcb6:	68bb      	ldr	r3, [r7, #8]
 800fcb8:	3301      	adds	r3, #1
 800fcba:	60bb      	str	r3, [r7, #8]
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	68da      	ldr	r2, [r3, #12]
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	689b      	ldr	r3, [r3, #8]
 800fcc4:	4413      	add	r3, r2
 800fcc6:	68ba      	ldr	r2, [r7, #8]
 800fcc8:	429a      	cmp	r2, r3
 800fcca:	d3da      	bcc.n	800fc82 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800fccc:	f000 f878 	bl	800fdc0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800fcd0:	4b03      	ldr	r3, [pc, #12]	; (800fce0 <HAL_FLASHEx_Erase+0xd8>)
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	761a      	strb	r2, [r3, #24]

  return status;
 800fcd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcd8:	4618      	mov	r0, r3
 800fcda:	3710      	adds	r7, #16
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	bd80      	pop	{r7, pc}
 800fce0:	2000a4ac 	.word	0x2000a4ac
 800fce4:	40023c00 	.word	0x40023c00

0800fce8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800fce8:	b480      	push	{r7}
 800fcea:	b083      	sub	sp, #12
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	4603      	mov	r3, r0
 800fcf0:	6039      	str	r1, [r7, #0]
 800fcf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800fcf4:	4b0d      	ldr	r3, [pc, #52]	; (800fd2c <FLASH_MassErase+0x44>)
 800fcf6:	691b      	ldr	r3, [r3, #16]
 800fcf8:	4a0c      	ldr	r2, [pc, #48]	; (800fd2c <FLASH_MassErase+0x44>)
 800fcfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fcfe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800fd00:	4b0a      	ldr	r3, [pc, #40]	; (800fd2c <FLASH_MassErase+0x44>)
 800fd02:	691b      	ldr	r3, [r3, #16]
 800fd04:	4a09      	ldr	r2, [pc, #36]	; (800fd2c <FLASH_MassErase+0x44>)
 800fd06:	f043 0304 	orr.w	r3, r3, #4
 800fd0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800fd0c:	4b07      	ldr	r3, [pc, #28]	; (800fd2c <FLASH_MassErase+0x44>)
 800fd0e:	691a      	ldr	r2, [r3, #16]
 800fd10:	79fb      	ldrb	r3, [r7, #7]
 800fd12:	021b      	lsls	r3, r3, #8
 800fd14:	4313      	orrs	r3, r2
 800fd16:	4a05      	ldr	r2, [pc, #20]	; (800fd2c <FLASH_MassErase+0x44>)
 800fd18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fd1c:	6113      	str	r3, [r2, #16]
}
 800fd1e:	bf00      	nop
 800fd20:	370c      	adds	r7, #12
 800fd22:	46bd      	mov	sp, r7
 800fd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd28:	4770      	bx	lr
 800fd2a:	bf00      	nop
 800fd2c:	40023c00 	.word	0x40023c00

0800fd30 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800fd30:	b480      	push	{r7}
 800fd32:	b085      	sub	sp, #20
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
 800fd38:	460b      	mov	r3, r1
 800fd3a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800fd40:	78fb      	ldrb	r3, [r7, #3]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d102      	bne.n	800fd4c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800fd46:	2300      	movs	r3, #0
 800fd48:	60fb      	str	r3, [r7, #12]
 800fd4a:	e010      	b.n	800fd6e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800fd4c:	78fb      	ldrb	r3, [r7, #3]
 800fd4e:	2b01      	cmp	r3, #1
 800fd50:	d103      	bne.n	800fd5a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800fd52:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fd56:	60fb      	str	r3, [r7, #12]
 800fd58:	e009      	b.n	800fd6e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800fd5a:	78fb      	ldrb	r3, [r7, #3]
 800fd5c:	2b02      	cmp	r3, #2
 800fd5e:	d103      	bne.n	800fd68 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800fd60:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fd64:	60fb      	str	r3, [r7, #12]
 800fd66:	e002      	b.n	800fd6e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800fd68:	f44f 7340 	mov.w	r3, #768	; 0x300
 800fd6c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800fd6e:	4b13      	ldr	r3, [pc, #76]	; (800fdbc <FLASH_Erase_Sector+0x8c>)
 800fd70:	691b      	ldr	r3, [r3, #16]
 800fd72:	4a12      	ldr	r2, [pc, #72]	; (800fdbc <FLASH_Erase_Sector+0x8c>)
 800fd74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fd78:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800fd7a:	4b10      	ldr	r3, [pc, #64]	; (800fdbc <FLASH_Erase_Sector+0x8c>)
 800fd7c:	691a      	ldr	r2, [r3, #16]
 800fd7e:	490f      	ldr	r1, [pc, #60]	; (800fdbc <FLASH_Erase_Sector+0x8c>)
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	4313      	orrs	r3, r2
 800fd84:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800fd86:	4b0d      	ldr	r3, [pc, #52]	; (800fdbc <FLASH_Erase_Sector+0x8c>)
 800fd88:	691b      	ldr	r3, [r3, #16]
 800fd8a:	4a0c      	ldr	r2, [pc, #48]	; (800fdbc <FLASH_Erase_Sector+0x8c>)
 800fd8c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800fd90:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800fd92:	4b0a      	ldr	r3, [pc, #40]	; (800fdbc <FLASH_Erase_Sector+0x8c>)
 800fd94:	691a      	ldr	r2, [r3, #16]
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	00db      	lsls	r3, r3, #3
 800fd9a:	4313      	orrs	r3, r2
 800fd9c:	4a07      	ldr	r2, [pc, #28]	; (800fdbc <FLASH_Erase_Sector+0x8c>)
 800fd9e:	f043 0302 	orr.w	r3, r3, #2
 800fda2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800fda4:	4b05      	ldr	r3, [pc, #20]	; (800fdbc <FLASH_Erase_Sector+0x8c>)
 800fda6:	691b      	ldr	r3, [r3, #16]
 800fda8:	4a04      	ldr	r2, [pc, #16]	; (800fdbc <FLASH_Erase_Sector+0x8c>)
 800fdaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fdae:	6113      	str	r3, [r2, #16]
}
 800fdb0:	bf00      	nop
 800fdb2:	3714      	adds	r7, #20
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdba:	4770      	bx	lr
 800fdbc:	40023c00 	.word	0x40023c00

0800fdc0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800fdc0:	b480      	push	{r7}
 800fdc2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800fdc4:	4b20      	ldr	r3, [pc, #128]	; (800fe48 <FLASH_FlushCaches+0x88>)
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d017      	beq.n	800fe00 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800fdd0:	4b1d      	ldr	r3, [pc, #116]	; (800fe48 <FLASH_FlushCaches+0x88>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	4a1c      	ldr	r2, [pc, #112]	; (800fe48 <FLASH_FlushCaches+0x88>)
 800fdd6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fdda:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800fddc:	4b1a      	ldr	r3, [pc, #104]	; (800fe48 <FLASH_FlushCaches+0x88>)
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	4a19      	ldr	r2, [pc, #100]	; (800fe48 <FLASH_FlushCaches+0x88>)
 800fde2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800fde6:	6013      	str	r3, [r2, #0]
 800fde8:	4b17      	ldr	r3, [pc, #92]	; (800fe48 <FLASH_FlushCaches+0x88>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	4a16      	ldr	r2, [pc, #88]	; (800fe48 <FLASH_FlushCaches+0x88>)
 800fdee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fdf2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800fdf4:	4b14      	ldr	r3, [pc, #80]	; (800fe48 <FLASH_FlushCaches+0x88>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	4a13      	ldr	r2, [pc, #76]	; (800fe48 <FLASH_FlushCaches+0x88>)
 800fdfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fdfe:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800fe00:	4b11      	ldr	r3, [pc, #68]	; (800fe48 <FLASH_FlushCaches+0x88>)
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d017      	beq.n	800fe3c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800fe0c:	4b0e      	ldr	r3, [pc, #56]	; (800fe48 <FLASH_FlushCaches+0x88>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	4a0d      	ldr	r2, [pc, #52]	; (800fe48 <FLASH_FlushCaches+0x88>)
 800fe12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fe16:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800fe18:	4b0b      	ldr	r3, [pc, #44]	; (800fe48 <FLASH_FlushCaches+0x88>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	4a0a      	ldr	r2, [pc, #40]	; (800fe48 <FLASH_FlushCaches+0x88>)
 800fe1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800fe22:	6013      	str	r3, [r2, #0]
 800fe24:	4b08      	ldr	r3, [pc, #32]	; (800fe48 <FLASH_FlushCaches+0x88>)
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	4a07      	ldr	r2, [pc, #28]	; (800fe48 <FLASH_FlushCaches+0x88>)
 800fe2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fe2e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800fe30:	4b05      	ldr	r3, [pc, #20]	; (800fe48 <FLASH_FlushCaches+0x88>)
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	4a04      	ldr	r2, [pc, #16]	; (800fe48 <FLASH_FlushCaches+0x88>)
 800fe36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800fe3a:	6013      	str	r3, [r2, #0]
  }
}
 800fe3c:	bf00      	nop
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe44:	4770      	bx	lr
 800fe46:	bf00      	nop
 800fe48:	40023c00 	.word	0x40023c00

0800fe4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800fe4c:	b480      	push	{r7}
 800fe4e:	b089      	sub	sp, #36	; 0x24
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
 800fe54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800fe56:	2300      	movs	r3, #0
 800fe58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800fe5e:	2300      	movs	r3, #0
 800fe60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fe62:	2300      	movs	r3, #0
 800fe64:	61fb      	str	r3, [r7, #28]
 800fe66:	e16b      	b.n	8010140 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800fe68:	2201      	movs	r2, #1
 800fe6a:	69fb      	ldr	r3, [r7, #28]
 800fe6c:	fa02 f303 	lsl.w	r3, r2, r3
 800fe70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	697a      	ldr	r2, [r7, #20]
 800fe78:	4013      	ands	r3, r2
 800fe7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800fe7c:	693a      	ldr	r2, [r7, #16]
 800fe7e:	697b      	ldr	r3, [r7, #20]
 800fe80:	429a      	cmp	r2, r3
 800fe82:	f040 815a 	bne.w	801013a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800fe86:	683b      	ldr	r3, [r7, #0]
 800fe88:	685b      	ldr	r3, [r3, #4]
 800fe8a:	2b01      	cmp	r3, #1
 800fe8c:	d00b      	beq.n	800fea6 <HAL_GPIO_Init+0x5a>
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	685b      	ldr	r3, [r3, #4]
 800fe92:	2b02      	cmp	r3, #2
 800fe94:	d007      	beq.n	800fea6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800fe9a:	2b11      	cmp	r3, #17
 800fe9c:	d003      	beq.n	800fea6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	685b      	ldr	r3, [r3, #4]
 800fea2:	2b12      	cmp	r3, #18
 800fea4:	d130      	bne.n	800ff08 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	689b      	ldr	r3, [r3, #8]
 800feaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800feac:	69fb      	ldr	r3, [r7, #28]
 800feae:	005b      	lsls	r3, r3, #1
 800feb0:	2203      	movs	r2, #3
 800feb2:	fa02 f303 	lsl.w	r3, r2, r3
 800feb6:	43db      	mvns	r3, r3
 800feb8:	69ba      	ldr	r2, [r7, #24]
 800feba:	4013      	ands	r3, r2
 800febc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800febe:	683b      	ldr	r3, [r7, #0]
 800fec0:	68da      	ldr	r2, [r3, #12]
 800fec2:	69fb      	ldr	r3, [r7, #28]
 800fec4:	005b      	lsls	r3, r3, #1
 800fec6:	fa02 f303 	lsl.w	r3, r2, r3
 800feca:	69ba      	ldr	r2, [r7, #24]
 800fecc:	4313      	orrs	r3, r2
 800fece:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	69ba      	ldr	r2, [r7, #24]
 800fed4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	685b      	ldr	r3, [r3, #4]
 800feda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800fedc:	2201      	movs	r2, #1
 800fede:	69fb      	ldr	r3, [r7, #28]
 800fee0:	fa02 f303 	lsl.w	r3, r2, r3
 800fee4:	43db      	mvns	r3, r3
 800fee6:	69ba      	ldr	r2, [r7, #24]
 800fee8:	4013      	ands	r3, r2
 800feea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	685b      	ldr	r3, [r3, #4]
 800fef0:	091b      	lsrs	r3, r3, #4
 800fef2:	f003 0201 	and.w	r2, r3, #1
 800fef6:	69fb      	ldr	r3, [r7, #28]
 800fef8:	fa02 f303 	lsl.w	r3, r2, r3
 800fefc:	69ba      	ldr	r2, [r7, #24]
 800fefe:	4313      	orrs	r3, r2
 800ff00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	69ba      	ldr	r2, [r7, #24]
 800ff06:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	68db      	ldr	r3, [r3, #12]
 800ff0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ff0e:	69fb      	ldr	r3, [r7, #28]
 800ff10:	005b      	lsls	r3, r3, #1
 800ff12:	2203      	movs	r2, #3
 800ff14:	fa02 f303 	lsl.w	r3, r2, r3
 800ff18:	43db      	mvns	r3, r3
 800ff1a:	69ba      	ldr	r2, [r7, #24]
 800ff1c:	4013      	ands	r3, r2
 800ff1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	689a      	ldr	r2, [r3, #8]
 800ff24:	69fb      	ldr	r3, [r7, #28]
 800ff26:	005b      	lsls	r3, r3, #1
 800ff28:	fa02 f303 	lsl.w	r3, r2, r3
 800ff2c:	69ba      	ldr	r2, [r7, #24]
 800ff2e:	4313      	orrs	r3, r2
 800ff30:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	69ba      	ldr	r2, [r7, #24]
 800ff36:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	685b      	ldr	r3, [r3, #4]
 800ff3c:	2b02      	cmp	r3, #2
 800ff3e:	d003      	beq.n	800ff48 <HAL_GPIO_Init+0xfc>
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	685b      	ldr	r3, [r3, #4]
 800ff44:	2b12      	cmp	r3, #18
 800ff46:	d123      	bne.n	800ff90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ff48:	69fb      	ldr	r3, [r7, #28]
 800ff4a:	08da      	lsrs	r2, r3, #3
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	3208      	adds	r2, #8
 800ff50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ff56:	69fb      	ldr	r3, [r7, #28]
 800ff58:	f003 0307 	and.w	r3, r3, #7
 800ff5c:	009b      	lsls	r3, r3, #2
 800ff5e:	220f      	movs	r2, #15
 800ff60:	fa02 f303 	lsl.w	r3, r2, r3
 800ff64:	43db      	mvns	r3, r3
 800ff66:	69ba      	ldr	r2, [r7, #24]
 800ff68:	4013      	ands	r3, r2
 800ff6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	691a      	ldr	r2, [r3, #16]
 800ff70:	69fb      	ldr	r3, [r7, #28]
 800ff72:	f003 0307 	and.w	r3, r3, #7
 800ff76:	009b      	lsls	r3, r3, #2
 800ff78:	fa02 f303 	lsl.w	r3, r2, r3
 800ff7c:	69ba      	ldr	r2, [r7, #24]
 800ff7e:	4313      	orrs	r3, r2
 800ff80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ff82:	69fb      	ldr	r3, [r7, #28]
 800ff84:	08da      	lsrs	r2, r3, #3
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	3208      	adds	r2, #8
 800ff8a:	69b9      	ldr	r1, [r7, #24]
 800ff8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ff96:	69fb      	ldr	r3, [r7, #28]
 800ff98:	005b      	lsls	r3, r3, #1
 800ff9a:	2203      	movs	r2, #3
 800ff9c:	fa02 f303 	lsl.w	r3, r2, r3
 800ffa0:	43db      	mvns	r3, r3
 800ffa2:	69ba      	ldr	r2, [r7, #24]
 800ffa4:	4013      	ands	r3, r2
 800ffa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	685b      	ldr	r3, [r3, #4]
 800ffac:	f003 0203 	and.w	r2, r3, #3
 800ffb0:	69fb      	ldr	r3, [r7, #28]
 800ffb2:	005b      	lsls	r3, r3, #1
 800ffb4:	fa02 f303 	lsl.w	r3, r2, r3
 800ffb8:	69ba      	ldr	r2, [r7, #24]
 800ffba:	4313      	orrs	r3, r2
 800ffbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	69ba      	ldr	r2, [r7, #24]
 800ffc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	685b      	ldr	r3, [r3, #4]
 800ffc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	f000 80b4 	beq.w	801013a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	60fb      	str	r3, [r7, #12]
 800ffd6:	4b60      	ldr	r3, [pc, #384]	; (8010158 <HAL_GPIO_Init+0x30c>)
 800ffd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffda:	4a5f      	ldr	r2, [pc, #380]	; (8010158 <HAL_GPIO_Init+0x30c>)
 800ffdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ffe0:	6453      	str	r3, [r2, #68]	; 0x44
 800ffe2:	4b5d      	ldr	r3, [pc, #372]	; (8010158 <HAL_GPIO_Init+0x30c>)
 800ffe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ffea:	60fb      	str	r3, [r7, #12]
 800ffec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ffee:	4a5b      	ldr	r2, [pc, #364]	; (801015c <HAL_GPIO_Init+0x310>)
 800fff0:	69fb      	ldr	r3, [r7, #28]
 800fff2:	089b      	lsrs	r3, r3, #2
 800fff4:	3302      	adds	r3, #2
 800fff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800fffc:	69fb      	ldr	r3, [r7, #28]
 800fffe:	f003 0303 	and.w	r3, r3, #3
 8010002:	009b      	lsls	r3, r3, #2
 8010004:	220f      	movs	r2, #15
 8010006:	fa02 f303 	lsl.w	r3, r2, r3
 801000a:	43db      	mvns	r3, r3
 801000c:	69ba      	ldr	r2, [r7, #24]
 801000e:	4013      	ands	r3, r2
 8010010:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	4a52      	ldr	r2, [pc, #328]	; (8010160 <HAL_GPIO_Init+0x314>)
 8010016:	4293      	cmp	r3, r2
 8010018:	d02b      	beq.n	8010072 <HAL_GPIO_Init+0x226>
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	4a51      	ldr	r2, [pc, #324]	; (8010164 <HAL_GPIO_Init+0x318>)
 801001e:	4293      	cmp	r3, r2
 8010020:	d025      	beq.n	801006e <HAL_GPIO_Init+0x222>
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	4a50      	ldr	r2, [pc, #320]	; (8010168 <HAL_GPIO_Init+0x31c>)
 8010026:	4293      	cmp	r3, r2
 8010028:	d01f      	beq.n	801006a <HAL_GPIO_Init+0x21e>
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	4a4f      	ldr	r2, [pc, #316]	; (801016c <HAL_GPIO_Init+0x320>)
 801002e:	4293      	cmp	r3, r2
 8010030:	d019      	beq.n	8010066 <HAL_GPIO_Init+0x21a>
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	4a4e      	ldr	r2, [pc, #312]	; (8010170 <HAL_GPIO_Init+0x324>)
 8010036:	4293      	cmp	r3, r2
 8010038:	d013      	beq.n	8010062 <HAL_GPIO_Init+0x216>
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	4a4d      	ldr	r2, [pc, #308]	; (8010174 <HAL_GPIO_Init+0x328>)
 801003e:	4293      	cmp	r3, r2
 8010040:	d00d      	beq.n	801005e <HAL_GPIO_Init+0x212>
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	4a4c      	ldr	r2, [pc, #304]	; (8010178 <HAL_GPIO_Init+0x32c>)
 8010046:	4293      	cmp	r3, r2
 8010048:	d007      	beq.n	801005a <HAL_GPIO_Init+0x20e>
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	4a4b      	ldr	r2, [pc, #300]	; (801017c <HAL_GPIO_Init+0x330>)
 801004e:	4293      	cmp	r3, r2
 8010050:	d101      	bne.n	8010056 <HAL_GPIO_Init+0x20a>
 8010052:	2307      	movs	r3, #7
 8010054:	e00e      	b.n	8010074 <HAL_GPIO_Init+0x228>
 8010056:	2308      	movs	r3, #8
 8010058:	e00c      	b.n	8010074 <HAL_GPIO_Init+0x228>
 801005a:	2306      	movs	r3, #6
 801005c:	e00a      	b.n	8010074 <HAL_GPIO_Init+0x228>
 801005e:	2305      	movs	r3, #5
 8010060:	e008      	b.n	8010074 <HAL_GPIO_Init+0x228>
 8010062:	2304      	movs	r3, #4
 8010064:	e006      	b.n	8010074 <HAL_GPIO_Init+0x228>
 8010066:	2303      	movs	r3, #3
 8010068:	e004      	b.n	8010074 <HAL_GPIO_Init+0x228>
 801006a:	2302      	movs	r3, #2
 801006c:	e002      	b.n	8010074 <HAL_GPIO_Init+0x228>
 801006e:	2301      	movs	r3, #1
 8010070:	e000      	b.n	8010074 <HAL_GPIO_Init+0x228>
 8010072:	2300      	movs	r3, #0
 8010074:	69fa      	ldr	r2, [r7, #28]
 8010076:	f002 0203 	and.w	r2, r2, #3
 801007a:	0092      	lsls	r2, r2, #2
 801007c:	4093      	lsls	r3, r2
 801007e:	69ba      	ldr	r2, [r7, #24]
 8010080:	4313      	orrs	r3, r2
 8010082:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010084:	4935      	ldr	r1, [pc, #212]	; (801015c <HAL_GPIO_Init+0x310>)
 8010086:	69fb      	ldr	r3, [r7, #28]
 8010088:	089b      	lsrs	r3, r3, #2
 801008a:	3302      	adds	r3, #2
 801008c:	69ba      	ldr	r2, [r7, #24]
 801008e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010092:	4b3b      	ldr	r3, [pc, #236]	; (8010180 <HAL_GPIO_Init+0x334>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010098:	693b      	ldr	r3, [r7, #16]
 801009a:	43db      	mvns	r3, r3
 801009c:	69ba      	ldr	r2, [r7, #24]
 801009e:	4013      	ands	r3, r2
 80100a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80100a2:	683b      	ldr	r3, [r7, #0]
 80100a4:	685b      	ldr	r3, [r3, #4]
 80100a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d003      	beq.n	80100b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80100ae:	69ba      	ldr	r2, [r7, #24]
 80100b0:	693b      	ldr	r3, [r7, #16]
 80100b2:	4313      	orrs	r3, r2
 80100b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80100b6:	4a32      	ldr	r2, [pc, #200]	; (8010180 <HAL_GPIO_Init+0x334>)
 80100b8:	69bb      	ldr	r3, [r7, #24]
 80100ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80100bc:	4b30      	ldr	r3, [pc, #192]	; (8010180 <HAL_GPIO_Init+0x334>)
 80100be:	685b      	ldr	r3, [r3, #4]
 80100c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80100c2:	693b      	ldr	r3, [r7, #16]
 80100c4:	43db      	mvns	r3, r3
 80100c6:	69ba      	ldr	r2, [r7, #24]
 80100c8:	4013      	ands	r3, r2
 80100ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	685b      	ldr	r3, [r3, #4]
 80100d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d003      	beq.n	80100e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80100d8:	69ba      	ldr	r2, [r7, #24]
 80100da:	693b      	ldr	r3, [r7, #16]
 80100dc:	4313      	orrs	r3, r2
 80100de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80100e0:	4a27      	ldr	r2, [pc, #156]	; (8010180 <HAL_GPIO_Init+0x334>)
 80100e2:	69bb      	ldr	r3, [r7, #24]
 80100e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80100e6:	4b26      	ldr	r3, [pc, #152]	; (8010180 <HAL_GPIO_Init+0x334>)
 80100e8:	689b      	ldr	r3, [r3, #8]
 80100ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80100ec:	693b      	ldr	r3, [r7, #16]
 80100ee:	43db      	mvns	r3, r3
 80100f0:	69ba      	ldr	r2, [r7, #24]
 80100f2:	4013      	ands	r3, r2
 80100f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	685b      	ldr	r3, [r3, #4]
 80100fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d003      	beq.n	801010a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8010102:	69ba      	ldr	r2, [r7, #24]
 8010104:	693b      	ldr	r3, [r7, #16]
 8010106:	4313      	orrs	r3, r2
 8010108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801010a:	4a1d      	ldr	r2, [pc, #116]	; (8010180 <HAL_GPIO_Init+0x334>)
 801010c:	69bb      	ldr	r3, [r7, #24]
 801010e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8010110:	4b1b      	ldr	r3, [pc, #108]	; (8010180 <HAL_GPIO_Init+0x334>)
 8010112:	68db      	ldr	r3, [r3, #12]
 8010114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010116:	693b      	ldr	r3, [r7, #16]
 8010118:	43db      	mvns	r3, r3
 801011a:	69ba      	ldr	r2, [r7, #24]
 801011c:	4013      	ands	r3, r2
 801011e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	685b      	ldr	r3, [r3, #4]
 8010124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010128:	2b00      	cmp	r3, #0
 801012a:	d003      	beq.n	8010134 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 801012c:	69ba      	ldr	r2, [r7, #24]
 801012e:	693b      	ldr	r3, [r7, #16]
 8010130:	4313      	orrs	r3, r2
 8010132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8010134:	4a12      	ldr	r2, [pc, #72]	; (8010180 <HAL_GPIO_Init+0x334>)
 8010136:	69bb      	ldr	r3, [r7, #24]
 8010138:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801013a:	69fb      	ldr	r3, [r7, #28]
 801013c:	3301      	adds	r3, #1
 801013e:	61fb      	str	r3, [r7, #28]
 8010140:	69fb      	ldr	r3, [r7, #28]
 8010142:	2b0f      	cmp	r3, #15
 8010144:	f67f ae90 	bls.w	800fe68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8010148:	bf00      	nop
 801014a:	bf00      	nop
 801014c:	3724      	adds	r7, #36	; 0x24
 801014e:	46bd      	mov	sp, r7
 8010150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010154:	4770      	bx	lr
 8010156:	bf00      	nop
 8010158:	40023800 	.word	0x40023800
 801015c:	40013800 	.word	0x40013800
 8010160:	40020000 	.word	0x40020000
 8010164:	40020400 	.word	0x40020400
 8010168:	40020800 	.word	0x40020800
 801016c:	40020c00 	.word	0x40020c00
 8010170:	40021000 	.word	0x40021000
 8010174:	40021400 	.word	0x40021400
 8010178:	40021800 	.word	0x40021800
 801017c:	40021c00 	.word	0x40021c00
 8010180:	40013c00 	.word	0x40013c00

08010184 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8010184:	b480      	push	{r7}
 8010186:	b087      	sub	sp, #28
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
 801018c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801018e:	2300      	movs	r3, #0
 8010190:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8010192:	2300      	movs	r3, #0
 8010194:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8010196:	2300      	movs	r3, #0
 8010198:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801019a:	2300      	movs	r3, #0
 801019c:	617b      	str	r3, [r7, #20]
 801019e:	e0cd      	b.n	801033c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80101a0:	2201      	movs	r2, #1
 80101a2:	697b      	ldr	r3, [r7, #20]
 80101a4:	fa02 f303 	lsl.w	r3, r2, r3
 80101a8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80101aa:	683a      	ldr	r2, [r7, #0]
 80101ac:	693b      	ldr	r3, [r7, #16]
 80101ae:	4013      	ands	r3, r2
 80101b0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80101b2:	68fa      	ldr	r2, [r7, #12]
 80101b4:	693b      	ldr	r3, [r7, #16]
 80101b6:	429a      	cmp	r2, r3
 80101b8:	f040 80bd 	bne.w	8010336 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80101bc:	4a65      	ldr	r2, [pc, #404]	; (8010354 <HAL_GPIO_DeInit+0x1d0>)
 80101be:	697b      	ldr	r3, [r7, #20]
 80101c0:	089b      	lsrs	r3, r3, #2
 80101c2:	3302      	adds	r3, #2
 80101c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80101c8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80101ca:	697b      	ldr	r3, [r7, #20]
 80101cc:	f003 0303 	and.w	r3, r3, #3
 80101d0:	009b      	lsls	r3, r3, #2
 80101d2:	220f      	movs	r2, #15
 80101d4:	fa02 f303 	lsl.w	r3, r2, r3
 80101d8:	68ba      	ldr	r2, [r7, #8]
 80101da:	4013      	ands	r3, r2
 80101dc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	4a5d      	ldr	r2, [pc, #372]	; (8010358 <HAL_GPIO_DeInit+0x1d4>)
 80101e2:	4293      	cmp	r3, r2
 80101e4:	d02b      	beq.n	801023e <HAL_GPIO_DeInit+0xba>
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	4a5c      	ldr	r2, [pc, #368]	; (801035c <HAL_GPIO_DeInit+0x1d8>)
 80101ea:	4293      	cmp	r3, r2
 80101ec:	d025      	beq.n	801023a <HAL_GPIO_DeInit+0xb6>
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	4a5b      	ldr	r2, [pc, #364]	; (8010360 <HAL_GPIO_DeInit+0x1dc>)
 80101f2:	4293      	cmp	r3, r2
 80101f4:	d01f      	beq.n	8010236 <HAL_GPIO_DeInit+0xb2>
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	4a5a      	ldr	r2, [pc, #360]	; (8010364 <HAL_GPIO_DeInit+0x1e0>)
 80101fa:	4293      	cmp	r3, r2
 80101fc:	d019      	beq.n	8010232 <HAL_GPIO_DeInit+0xae>
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	4a59      	ldr	r2, [pc, #356]	; (8010368 <HAL_GPIO_DeInit+0x1e4>)
 8010202:	4293      	cmp	r3, r2
 8010204:	d013      	beq.n	801022e <HAL_GPIO_DeInit+0xaa>
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	4a58      	ldr	r2, [pc, #352]	; (801036c <HAL_GPIO_DeInit+0x1e8>)
 801020a:	4293      	cmp	r3, r2
 801020c:	d00d      	beq.n	801022a <HAL_GPIO_DeInit+0xa6>
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	4a57      	ldr	r2, [pc, #348]	; (8010370 <HAL_GPIO_DeInit+0x1ec>)
 8010212:	4293      	cmp	r3, r2
 8010214:	d007      	beq.n	8010226 <HAL_GPIO_DeInit+0xa2>
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	4a56      	ldr	r2, [pc, #344]	; (8010374 <HAL_GPIO_DeInit+0x1f0>)
 801021a:	4293      	cmp	r3, r2
 801021c:	d101      	bne.n	8010222 <HAL_GPIO_DeInit+0x9e>
 801021e:	2307      	movs	r3, #7
 8010220:	e00e      	b.n	8010240 <HAL_GPIO_DeInit+0xbc>
 8010222:	2308      	movs	r3, #8
 8010224:	e00c      	b.n	8010240 <HAL_GPIO_DeInit+0xbc>
 8010226:	2306      	movs	r3, #6
 8010228:	e00a      	b.n	8010240 <HAL_GPIO_DeInit+0xbc>
 801022a:	2305      	movs	r3, #5
 801022c:	e008      	b.n	8010240 <HAL_GPIO_DeInit+0xbc>
 801022e:	2304      	movs	r3, #4
 8010230:	e006      	b.n	8010240 <HAL_GPIO_DeInit+0xbc>
 8010232:	2303      	movs	r3, #3
 8010234:	e004      	b.n	8010240 <HAL_GPIO_DeInit+0xbc>
 8010236:	2302      	movs	r3, #2
 8010238:	e002      	b.n	8010240 <HAL_GPIO_DeInit+0xbc>
 801023a:	2301      	movs	r3, #1
 801023c:	e000      	b.n	8010240 <HAL_GPIO_DeInit+0xbc>
 801023e:	2300      	movs	r3, #0
 8010240:	697a      	ldr	r2, [r7, #20]
 8010242:	f002 0203 	and.w	r2, r2, #3
 8010246:	0092      	lsls	r2, r2, #2
 8010248:	4093      	lsls	r3, r2
 801024a:	68ba      	ldr	r2, [r7, #8]
 801024c:	429a      	cmp	r2, r3
 801024e:	d132      	bne.n	80102b6 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8010250:	4b49      	ldr	r3, [pc, #292]	; (8010378 <HAL_GPIO_DeInit+0x1f4>)
 8010252:	681a      	ldr	r2, [r3, #0]
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	43db      	mvns	r3, r3
 8010258:	4947      	ldr	r1, [pc, #284]	; (8010378 <HAL_GPIO_DeInit+0x1f4>)
 801025a:	4013      	ands	r3, r2
 801025c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 801025e:	4b46      	ldr	r3, [pc, #280]	; (8010378 <HAL_GPIO_DeInit+0x1f4>)
 8010260:	685a      	ldr	r2, [r3, #4]
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	43db      	mvns	r3, r3
 8010266:	4944      	ldr	r1, [pc, #272]	; (8010378 <HAL_GPIO_DeInit+0x1f4>)
 8010268:	4013      	ands	r3, r2
 801026a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 801026c:	4b42      	ldr	r3, [pc, #264]	; (8010378 <HAL_GPIO_DeInit+0x1f4>)
 801026e:	689a      	ldr	r2, [r3, #8]
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	43db      	mvns	r3, r3
 8010274:	4940      	ldr	r1, [pc, #256]	; (8010378 <HAL_GPIO_DeInit+0x1f4>)
 8010276:	4013      	ands	r3, r2
 8010278:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 801027a:	4b3f      	ldr	r3, [pc, #252]	; (8010378 <HAL_GPIO_DeInit+0x1f4>)
 801027c:	68da      	ldr	r2, [r3, #12]
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	43db      	mvns	r3, r3
 8010282:	493d      	ldr	r1, [pc, #244]	; (8010378 <HAL_GPIO_DeInit+0x1f4>)
 8010284:	4013      	ands	r3, r2
 8010286:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8010288:	697b      	ldr	r3, [r7, #20]
 801028a:	f003 0303 	and.w	r3, r3, #3
 801028e:	009b      	lsls	r3, r3, #2
 8010290:	220f      	movs	r2, #15
 8010292:	fa02 f303 	lsl.w	r3, r2, r3
 8010296:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8010298:	4a2e      	ldr	r2, [pc, #184]	; (8010354 <HAL_GPIO_DeInit+0x1d0>)
 801029a:	697b      	ldr	r3, [r7, #20]
 801029c:	089b      	lsrs	r3, r3, #2
 801029e:	3302      	adds	r3, #2
 80102a0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	43da      	mvns	r2, r3
 80102a8:	482a      	ldr	r0, [pc, #168]	; (8010354 <HAL_GPIO_DeInit+0x1d0>)
 80102aa:	697b      	ldr	r3, [r7, #20]
 80102ac:	089b      	lsrs	r3, r3, #2
 80102ae:	400a      	ands	r2, r1
 80102b0:	3302      	adds	r3, #2
 80102b2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681a      	ldr	r2, [r3, #0]
 80102ba:	697b      	ldr	r3, [r7, #20]
 80102bc:	005b      	lsls	r3, r3, #1
 80102be:	2103      	movs	r1, #3
 80102c0:	fa01 f303 	lsl.w	r3, r1, r3
 80102c4:	43db      	mvns	r3, r3
 80102c6:	401a      	ands	r2, r3
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80102cc:	697b      	ldr	r3, [r7, #20]
 80102ce:	08da      	lsrs	r2, r3, #3
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	3208      	adds	r2, #8
 80102d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80102d8:	697b      	ldr	r3, [r7, #20]
 80102da:	f003 0307 	and.w	r3, r3, #7
 80102de:	009b      	lsls	r3, r3, #2
 80102e0:	220f      	movs	r2, #15
 80102e2:	fa02 f303 	lsl.w	r3, r2, r3
 80102e6:	43db      	mvns	r3, r3
 80102e8:	697a      	ldr	r2, [r7, #20]
 80102ea:	08d2      	lsrs	r2, r2, #3
 80102ec:	4019      	ands	r1, r3
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	3208      	adds	r2, #8
 80102f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	68da      	ldr	r2, [r3, #12]
 80102fa:	697b      	ldr	r3, [r7, #20]
 80102fc:	005b      	lsls	r3, r3, #1
 80102fe:	2103      	movs	r1, #3
 8010300:	fa01 f303 	lsl.w	r3, r1, r3
 8010304:	43db      	mvns	r3, r3
 8010306:	401a      	ands	r2, r3
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	685a      	ldr	r2, [r3, #4]
 8010310:	2101      	movs	r1, #1
 8010312:	697b      	ldr	r3, [r7, #20]
 8010314:	fa01 f303 	lsl.w	r3, r1, r3
 8010318:	43db      	mvns	r3, r3
 801031a:	401a      	ands	r2, r3
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	689a      	ldr	r2, [r3, #8]
 8010324:	697b      	ldr	r3, [r7, #20]
 8010326:	005b      	lsls	r3, r3, #1
 8010328:	2103      	movs	r1, #3
 801032a:	fa01 f303 	lsl.w	r3, r1, r3
 801032e:	43db      	mvns	r3, r3
 8010330:	401a      	ands	r2, r3
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010336:	697b      	ldr	r3, [r7, #20]
 8010338:	3301      	adds	r3, #1
 801033a:	617b      	str	r3, [r7, #20]
 801033c:	697b      	ldr	r3, [r7, #20]
 801033e:	2b0f      	cmp	r3, #15
 8010340:	f67f af2e 	bls.w	80101a0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8010344:	bf00      	nop
 8010346:	bf00      	nop
 8010348:	371c      	adds	r7, #28
 801034a:	46bd      	mov	sp, r7
 801034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010350:	4770      	bx	lr
 8010352:	bf00      	nop
 8010354:	40013800 	.word	0x40013800
 8010358:	40020000 	.word	0x40020000
 801035c:	40020400 	.word	0x40020400
 8010360:	40020800 	.word	0x40020800
 8010364:	40020c00 	.word	0x40020c00
 8010368:	40021000 	.word	0x40021000
 801036c:	40021400 	.word	0x40021400
 8010370:	40021800 	.word	0x40021800
 8010374:	40021c00 	.word	0x40021c00
 8010378:	40013c00 	.word	0x40013c00

0801037c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801037c:	b480      	push	{r7}
 801037e:	b083      	sub	sp, #12
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
 8010384:	460b      	mov	r3, r1
 8010386:	807b      	strh	r3, [r7, #2]
 8010388:	4613      	mov	r3, r2
 801038a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801038c:	787b      	ldrb	r3, [r7, #1]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d003      	beq.n	801039a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8010392:	887a      	ldrh	r2, [r7, #2]
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8010398:	e003      	b.n	80103a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801039a:	887b      	ldrh	r3, [r7, #2]
 801039c:	041a      	lsls	r2, r3, #16
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	619a      	str	r2, [r3, #24]
}
 80103a2:	bf00      	nop
 80103a4:	370c      	adds	r7, #12
 80103a6:	46bd      	mov	sp, r7
 80103a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ac:	4770      	bx	lr
	...

080103b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b084      	sub	sp, #16
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d101      	bne.n	80103c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80103be:	2301      	movs	r3, #1
 80103c0:	e12b      	b.n	801061a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80103c8:	b2db      	uxtb	r3, r3
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d106      	bne.n	80103dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	2200      	movs	r2, #0
 80103d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80103d6:	6878      	ldr	r0, [r7, #4]
 80103d8:	f7f1 ff9c 	bl	8002314 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2224      	movs	r2, #36	; 0x24
 80103e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	681a      	ldr	r2, [r3, #0]
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	f022 0201 	bic.w	r2, r2, #1
 80103f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	681a      	ldr	r2, [r3, #0]
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010402:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	681a      	ldr	r2, [r3, #0]
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010412:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8010414:	f002 fc64 	bl	8012ce0 <HAL_RCC_GetPCLK1Freq>
 8010418:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	685b      	ldr	r3, [r3, #4]
 801041e:	4a81      	ldr	r2, [pc, #516]	; (8010624 <HAL_I2C_Init+0x274>)
 8010420:	4293      	cmp	r3, r2
 8010422:	d807      	bhi.n	8010434 <HAL_I2C_Init+0x84>
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	4a80      	ldr	r2, [pc, #512]	; (8010628 <HAL_I2C_Init+0x278>)
 8010428:	4293      	cmp	r3, r2
 801042a:	bf94      	ite	ls
 801042c:	2301      	movls	r3, #1
 801042e:	2300      	movhi	r3, #0
 8010430:	b2db      	uxtb	r3, r3
 8010432:	e006      	b.n	8010442 <HAL_I2C_Init+0x92>
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	4a7d      	ldr	r2, [pc, #500]	; (801062c <HAL_I2C_Init+0x27c>)
 8010438:	4293      	cmp	r3, r2
 801043a:	bf94      	ite	ls
 801043c:	2301      	movls	r3, #1
 801043e:	2300      	movhi	r3, #0
 8010440:	b2db      	uxtb	r3, r3
 8010442:	2b00      	cmp	r3, #0
 8010444:	d001      	beq.n	801044a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8010446:	2301      	movs	r3, #1
 8010448:	e0e7      	b.n	801061a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	4a78      	ldr	r2, [pc, #480]	; (8010630 <HAL_I2C_Init+0x280>)
 801044e:	fba2 2303 	umull	r2, r3, r2, r3
 8010452:	0c9b      	lsrs	r3, r3, #18
 8010454:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	685b      	ldr	r3, [r3, #4]
 801045c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	68ba      	ldr	r2, [r7, #8]
 8010466:	430a      	orrs	r2, r1
 8010468:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	6a1b      	ldr	r3, [r3, #32]
 8010470:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	685b      	ldr	r3, [r3, #4]
 8010478:	4a6a      	ldr	r2, [pc, #424]	; (8010624 <HAL_I2C_Init+0x274>)
 801047a:	4293      	cmp	r3, r2
 801047c:	d802      	bhi.n	8010484 <HAL_I2C_Init+0xd4>
 801047e:	68bb      	ldr	r3, [r7, #8]
 8010480:	3301      	adds	r3, #1
 8010482:	e009      	b.n	8010498 <HAL_I2C_Init+0xe8>
 8010484:	68bb      	ldr	r3, [r7, #8]
 8010486:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801048a:	fb02 f303 	mul.w	r3, r2, r3
 801048e:	4a69      	ldr	r2, [pc, #420]	; (8010634 <HAL_I2C_Init+0x284>)
 8010490:	fba2 2303 	umull	r2, r3, r2, r3
 8010494:	099b      	lsrs	r3, r3, #6
 8010496:	3301      	adds	r3, #1
 8010498:	687a      	ldr	r2, [r7, #4]
 801049a:	6812      	ldr	r2, [r2, #0]
 801049c:	430b      	orrs	r3, r1
 801049e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	69db      	ldr	r3, [r3, #28]
 80104a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80104aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	685b      	ldr	r3, [r3, #4]
 80104b2:	495c      	ldr	r1, [pc, #368]	; (8010624 <HAL_I2C_Init+0x274>)
 80104b4:	428b      	cmp	r3, r1
 80104b6:	d819      	bhi.n	80104ec <HAL_I2C_Init+0x13c>
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	1e59      	subs	r1, r3, #1
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	685b      	ldr	r3, [r3, #4]
 80104c0:	005b      	lsls	r3, r3, #1
 80104c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80104c6:	1c59      	adds	r1, r3, #1
 80104c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80104cc:	400b      	ands	r3, r1
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d00a      	beq.n	80104e8 <HAL_I2C_Init+0x138>
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	1e59      	subs	r1, r3, #1
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	685b      	ldr	r3, [r3, #4]
 80104da:	005b      	lsls	r3, r3, #1
 80104dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80104e0:	3301      	adds	r3, #1
 80104e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80104e6:	e051      	b.n	801058c <HAL_I2C_Init+0x1dc>
 80104e8:	2304      	movs	r3, #4
 80104ea:	e04f      	b.n	801058c <HAL_I2C_Init+0x1dc>
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	689b      	ldr	r3, [r3, #8]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d111      	bne.n	8010518 <HAL_I2C_Init+0x168>
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	1e58      	subs	r0, r3, #1
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	6859      	ldr	r1, [r3, #4]
 80104fc:	460b      	mov	r3, r1
 80104fe:	005b      	lsls	r3, r3, #1
 8010500:	440b      	add	r3, r1
 8010502:	fbb0 f3f3 	udiv	r3, r0, r3
 8010506:	3301      	adds	r3, #1
 8010508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801050c:	2b00      	cmp	r3, #0
 801050e:	bf0c      	ite	eq
 8010510:	2301      	moveq	r3, #1
 8010512:	2300      	movne	r3, #0
 8010514:	b2db      	uxtb	r3, r3
 8010516:	e012      	b.n	801053e <HAL_I2C_Init+0x18e>
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	1e58      	subs	r0, r3, #1
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	6859      	ldr	r1, [r3, #4]
 8010520:	460b      	mov	r3, r1
 8010522:	009b      	lsls	r3, r3, #2
 8010524:	440b      	add	r3, r1
 8010526:	0099      	lsls	r1, r3, #2
 8010528:	440b      	add	r3, r1
 801052a:	fbb0 f3f3 	udiv	r3, r0, r3
 801052e:	3301      	adds	r3, #1
 8010530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010534:	2b00      	cmp	r3, #0
 8010536:	bf0c      	ite	eq
 8010538:	2301      	moveq	r3, #1
 801053a:	2300      	movne	r3, #0
 801053c:	b2db      	uxtb	r3, r3
 801053e:	2b00      	cmp	r3, #0
 8010540:	d001      	beq.n	8010546 <HAL_I2C_Init+0x196>
 8010542:	2301      	movs	r3, #1
 8010544:	e022      	b.n	801058c <HAL_I2C_Init+0x1dc>
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	689b      	ldr	r3, [r3, #8]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d10e      	bne.n	801056c <HAL_I2C_Init+0x1bc>
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	1e58      	subs	r0, r3, #1
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	6859      	ldr	r1, [r3, #4]
 8010556:	460b      	mov	r3, r1
 8010558:	005b      	lsls	r3, r3, #1
 801055a:	440b      	add	r3, r1
 801055c:	fbb0 f3f3 	udiv	r3, r0, r3
 8010560:	3301      	adds	r3, #1
 8010562:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801056a:	e00f      	b.n	801058c <HAL_I2C_Init+0x1dc>
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	1e58      	subs	r0, r3, #1
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	6859      	ldr	r1, [r3, #4]
 8010574:	460b      	mov	r3, r1
 8010576:	009b      	lsls	r3, r3, #2
 8010578:	440b      	add	r3, r1
 801057a:	0099      	lsls	r1, r3, #2
 801057c:	440b      	add	r3, r1
 801057e:	fbb0 f3f3 	udiv	r3, r0, r3
 8010582:	3301      	adds	r3, #1
 8010584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010588:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801058c:	6879      	ldr	r1, [r7, #4]
 801058e:	6809      	ldr	r1, [r1, #0]
 8010590:	4313      	orrs	r3, r2
 8010592:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	69da      	ldr	r2, [r3, #28]
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	6a1b      	ldr	r3, [r3, #32]
 80105a6:	431a      	orrs	r2, r3
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	430a      	orrs	r2, r1
 80105ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	689b      	ldr	r3, [r3, #8]
 80105b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80105ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80105be:	687a      	ldr	r2, [r7, #4]
 80105c0:	6911      	ldr	r1, [r2, #16]
 80105c2:	687a      	ldr	r2, [r7, #4]
 80105c4:	68d2      	ldr	r2, [r2, #12]
 80105c6:	4311      	orrs	r1, r2
 80105c8:	687a      	ldr	r2, [r7, #4]
 80105ca:	6812      	ldr	r2, [r2, #0]
 80105cc:	430b      	orrs	r3, r1
 80105ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	68db      	ldr	r3, [r3, #12]
 80105d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	695a      	ldr	r2, [r3, #20]
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	699b      	ldr	r3, [r3, #24]
 80105e2:	431a      	orrs	r2, r3
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	430a      	orrs	r2, r1
 80105ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	681a      	ldr	r2, [r3, #0]
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	f042 0201 	orr.w	r2, r2, #1
 80105fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2200      	movs	r2, #0
 8010600:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	2220      	movs	r2, #32
 8010606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	2200      	movs	r2, #0
 801060e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	2200      	movs	r2, #0
 8010614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8010618:	2300      	movs	r3, #0
}
 801061a:	4618      	mov	r0, r3
 801061c:	3710      	adds	r7, #16
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}
 8010622:	bf00      	nop
 8010624:	000186a0 	.word	0x000186a0
 8010628:	001e847f 	.word	0x001e847f
 801062c:	003d08ff 	.word	0x003d08ff
 8010630:	431bde83 	.word	0x431bde83
 8010634:	10624dd3 	.word	0x10624dd3

08010638 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b082      	sub	sp, #8
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d101      	bne.n	801064a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8010646:	2301      	movs	r3, #1
 8010648:	e021      	b.n	801068e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	2224      	movs	r2, #36	; 0x24
 801064e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	681a      	ldr	r2, [r3, #0]
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	f022 0201 	bic.w	r2, r2, #1
 8010660:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8010662:	6878      	ldr	r0, [r7, #4]
 8010664:	f7f1 ff2c 	bl	80024c0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	2200      	movs	r2, #0
 801066c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	2200      	movs	r2, #0
 8010672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	2200      	movs	r2, #0
 801067a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	2200      	movs	r2, #0
 8010680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	2200      	movs	r2, #0
 8010688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801068c:	2300      	movs	r3, #0
}
 801068e:	4618      	mov	r0, r3
 8010690:	3708      	adds	r7, #8
 8010692:	46bd      	mov	sp, r7
 8010694:	bd80      	pop	{r7, pc}
	...

08010698 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b086      	sub	sp, #24
 801069c:	af00      	add	r7, sp, #0
 801069e:	60f8      	str	r0, [r7, #12]
 80106a0:	607a      	str	r2, [r7, #4]
 80106a2:	461a      	mov	r2, r3
 80106a4:	460b      	mov	r3, r1
 80106a6:	817b      	strh	r3, [r7, #10]
 80106a8:	4613      	mov	r3, r2
 80106aa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80106ac:	2300      	movs	r3, #0
 80106ae:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80106b6:	b2db      	uxtb	r3, r3
 80106b8:	2b20      	cmp	r3, #32
 80106ba:	f040 80f4 	bne.w	80108a6 <HAL_I2C_Master_Receive_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80106be:	4b7c      	ldr	r3, [pc, #496]	; (80108b0 <HAL_I2C_Master_Receive_DMA+0x218>)
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	08db      	lsrs	r3, r3, #3
 80106c4:	4a7b      	ldr	r2, [pc, #492]	; (80108b4 <HAL_I2C_Master_Receive_DMA+0x21c>)
 80106c6:	fba2 2303 	umull	r2, r3, r2, r3
 80106ca:	0a1a      	lsrs	r2, r3, #8
 80106cc:	4613      	mov	r3, r2
 80106ce:	009b      	lsls	r3, r3, #2
 80106d0:	4413      	add	r3, r2
 80106d2:	009a      	lsls	r2, r3, #2
 80106d4:	4413      	add	r3, r2
 80106d6:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 80106d8:	693b      	ldr	r3, [r7, #16]
 80106da:	3b01      	subs	r3, #1
 80106dc:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 80106de:	693b      	ldr	r3, [r7, #16]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d116      	bne.n	8010712 <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	2200      	movs	r2, #0
 80106e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	2220      	movs	r2, #32
 80106ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	2200      	movs	r2, #0
 80106f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106fe:	f043 0220 	orr.w	r2, r3, #32
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	2200      	movs	r2, #0
 801070a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801070e:	2301      	movs	r3, #1
 8010710:	e0ca      	b.n	80108a8 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	699b      	ldr	r3, [r3, #24]
 8010718:	f003 0302 	and.w	r3, r3, #2
 801071c:	2b02      	cmp	r3, #2
 801071e:	d0db      	beq.n	80106d8 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010726:	2b01      	cmp	r3, #1
 8010728:	d101      	bne.n	801072e <HAL_I2C_Master_Receive_DMA+0x96>
 801072a:	2302      	movs	r3, #2
 801072c:	e0bc      	b.n	80108a8 <HAL_I2C_Master_Receive_DMA+0x210>
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	2201      	movs	r2, #1
 8010732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	f003 0301 	and.w	r3, r3, #1
 8010740:	2b01      	cmp	r3, #1
 8010742:	d007      	beq.n	8010754 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	681a      	ldr	r2, [r3, #0]
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	f042 0201 	orr.w	r2, r2, #1
 8010752:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	681a      	ldr	r2, [r3, #0]
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010762:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	2222      	movs	r2, #34	; 0x22
 8010768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	2210      	movs	r2, #16
 8010770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	2200      	movs	r2, #0
 8010778:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	687a      	ldr	r2, [r7, #4]
 801077e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	893a      	ldrh	r2, [r7, #8]
 8010784:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801078a:	b29a      	uxth	r2, r3
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	4a49      	ldr	r2, [pc, #292]	; (80108b8 <HAL_I2C_Master_Receive_DMA+0x220>)
 8010794:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8010796:	897a      	ldrh	r2, [r7, #10]
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d062      	beq.n	801086a <HAL_I2C_Master_Receive_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107a8:	4a44      	ldr	r2, [pc, #272]	; (80108bc <HAL_I2C_Master_Receive_DMA+0x224>)
 80107aa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107b0:	4a43      	ldr	r2, [pc, #268]	; (80108c0 <HAL_I2C_Master_Receive_DMA+0x228>)
 80107b2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107b8:	2200      	movs	r2, #0
 80107ba:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107c0:	2200      	movs	r2, #0
 80107c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107c8:	2200      	movs	r2, #0
 80107ca:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107d0:	2200      	movs	r2, #0
 80107d2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	3310      	adds	r3, #16
 80107de:	4619      	mov	r1, r3
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107e4:	461a      	mov	r2, r3
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80107ea:	f7fe fd4d 	bl	800f288 <HAL_DMA_Start_IT>
 80107ee:	4603      	mov	r3, r0
 80107f0:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 80107f2:	7dfb      	ldrb	r3, [r7, #23]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d124      	bne.n	8010842 <HAL_I2C_Master_Receive_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	681a      	ldr	r2, [r3, #0]
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010806:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	681a      	ldr	r2, [r3, #0]
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010816:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	2200      	movs	r2, #0
 801081c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	685a      	ldr	r2, [r3, #4]
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801082e:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	685a      	ldr	r2, [r3, #4]
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801083e:	605a      	str	r2, [r3, #4]
 8010840:	e02f      	b.n	80108a2 <HAL_I2C_Master_Receive_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	2220      	movs	r2, #32
 8010846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	2200      	movs	r2, #0
 801084e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010856:	f043 0210 	orr.w	r2, r3, #16
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	2200      	movs	r2, #0
 8010862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8010866:	2301      	movs	r3, #1
 8010868:	e01e      	b.n	80108a8 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	681a      	ldr	r2, [r3, #0]
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010878:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	681a      	ldr	r2, [r3, #0]
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010888:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	2200      	movs	r2, #0
 801088e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	685a      	ldr	r2, [r3, #4]
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80108a0:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80108a2:	2300      	movs	r3, #0
 80108a4:	e000      	b.n	80108a8 <HAL_I2C_Master_Receive_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 80108a6:	2302      	movs	r3, #2
  }
}
 80108a8:	4618      	mov	r0, r3
 80108aa:	3718      	adds	r7, #24
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bd80      	pop	{r7, pc}
 80108b0:	200000c0 	.word	0x200000c0
 80108b4:	14f8b589 	.word	0x14f8b589
 80108b8:	ffff0000 	.word	0xffff0000
 80108bc:	08012031 	.word	0x08012031
 80108c0:	080121db 	.word	0x080121db

080108c4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b088      	sub	sp, #32
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80108cc:	2300      	movs	r3, #0
 80108ce:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	685b      	ldr	r3, [r3, #4]
 80108d6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108dc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80108e4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80108ec:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80108ee:	7bfb      	ldrb	r3, [r7, #15]
 80108f0:	2b10      	cmp	r3, #16
 80108f2:	d003      	beq.n	80108fc <HAL_I2C_EV_IRQHandler+0x38>
 80108f4:	7bfb      	ldrb	r3, [r7, #15]
 80108f6:	2b40      	cmp	r3, #64	; 0x40
 80108f8:	f040 80bd 	bne.w	8010a76 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	699b      	ldr	r3, [r3, #24]
 8010902:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	695b      	ldr	r3, [r3, #20]
 801090a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 801090c:	69fb      	ldr	r3, [r7, #28]
 801090e:	f003 0301 	and.w	r3, r3, #1
 8010912:	2b00      	cmp	r3, #0
 8010914:	d10d      	bne.n	8010932 <HAL_I2C_EV_IRQHandler+0x6e>
 8010916:	693b      	ldr	r3, [r7, #16]
 8010918:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801091c:	d003      	beq.n	8010926 <HAL_I2C_EV_IRQHandler+0x62>
 801091e:	693b      	ldr	r3, [r7, #16]
 8010920:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8010924:	d101      	bne.n	801092a <HAL_I2C_EV_IRQHandler+0x66>
 8010926:	2301      	movs	r3, #1
 8010928:	e000      	b.n	801092c <HAL_I2C_EV_IRQHandler+0x68>
 801092a:	2300      	movs	r3, #0
 801092c:	2b01      	cmp	r3, #1
 801092e:	f000 812e 	beq.w	8010b8e <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010932:	69fb      	ldr	r3, [r7, #28]
 8010934:	f003 0301 	and.w	r3, r3, #1
 8010938:	2b00      	cmp	r3, #0
 801093a:	d00c      	beq.n	8010956 <HAL_I2C_EV_IRQHandler+0x92>
 801093c:	697b      	ldr	r3, [r7, #20]
 801093e:	0a5b      	lsrs	r3, r3, #9
 8010940:	f003 0301 	and.w	r3, r3, #1
 8010944:	2b00      	cmp	r3, #0
 8010946:	d006      	beq.n	8010956 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8010948:	6878      	ldr	r0, [r7, #4]
 801094a:	f001 fd5d 	bl	8012408 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 801094e:	6878      	ldr	r0, [r7, #4]
 8010950:	f000 fd58 	bl	8011404 <I2C_Master_SB>
 8010954:	e08e      	b.n	8010a74 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010956:	69fb      	ldr	r3, [r7, #28]
 8010958:	08db      	lsrs	r3, r3, #3
 801095a:	f003 0301 	and.w	r3, r3, #1
 801095e:	2b00      	cmp	r3, #0
 8010960:	d009      	beq.n	8010976 <HAL_I2C_EV_IRQHandler+0xb2>
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	0a5b      	lsrs	r3, r3, #9
 8010966:	f003 0301 	and.w	r3, r3, #1
 801096a:	2b00      	cmp	r3, #0
 801096c:	d003      	beq.n	8010976 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 801096e:	6878      	ldr	r0, [r7, #4]
 8010970:	f000 fdce 	bl	8011510 <I2C_Master_ADD10>
 8010974:	e07e      	b.n	8010a74 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010976:	69fb      	ldr	r3, [r7, #28]
 8010978:	085b      	lsrs	r3, r3, #1
 801097a:	f003 0301 	and.w	r3, r3, #1
 801097e:	2b00      	cmp	r3, #0
 8010980:	d009      	beq.n	8010996 <HAL_I2C_EV_IRQHandler+0xd2>
 8010982:	697b      	ldr	r3, [r7, #20]
 8010984:	0a5b      	lsrs	r3, r3, #9
 8010986:	f003 0301 	and.w	r3, r3, #1
 801098a:	2b00      	cmp	r3, #0
 801098c:	d003      	beq.n	8010996 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 801098e:	6878      	ldr	r0, [r7, #4]
 8010990:	f000 fde8 	bl	8011564 <I2C_Master_ADDR>
 8010994:	e06e      	b.n	8010a74 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8010996:	69bb      	ldr	r3, [r7, #24]
 8010998:	089b      	lsrs	r3, r3, #2
 801099a:	f003 0301 	and.w	r3, r3, #1
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d037      	beq.n	8010a12 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	685b      	ldr	r3, [r3, #4]
 80109a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80109ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80109b0:	f000 80ef 	beq.w	8010b92 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80109b4:	69fb      	ldr	r3, [r7, #28]
 80109b6:	09db      	lsrs	r3, r3, #7
 80109b8:	f003 0301 	and.w	r3, r3, #1
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d00f      	beq.n	80109e0 <HAL_I2C_EV_IRQHandler+0x11c>
 80109c0:	697b      	ldr	r3, [r7, #20]
 80109c2:	0a9b      	lsrs	r3, r3, #10
 80109c4:	f003 0301 	and.w	r3, r3, #1
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d009      	beq.n	80109e0 <HAL_I2C_EV_IRQHandler+0x11c>
 80109cc:	69fb      	ldr	r3, [r7, #28]
 80109ce:	089b      	lsrs	r3, r3, #2
 80109d0:	f003 0301 	and.w	r3, r3, #1
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d103      	bne.n	80109e0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80109d8:	6878      	ldr	r0, [r7, #4]
 80109da:	f000 f9e5 	bl	8010da8 <I2C_MasterTransmit_TXE>
 80109de:	e049      	b.n	8010a74 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80109e0:	69fb      	ldr	r3, [r7, #28]
 80109e2:	089b      	lsrs	r3, r3, #2
 80109e4:	f003 0301 	and.w	r3, r3, #1
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	f000 80d2 	beq.w	8010b92 <HAL_I2C_EV_IRQHandler+0x2ce>
 80109ee:	697b      	ldr	r3, [r7, #20]
 80109f0:	0a5b      	lsrs	r3, r3, #9
 80109f2:	f003 0301 	and.w	r3, r3, #1
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	f000 80cb 	beq.w	8010b92 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80109fc:	7bfb      	ldrb	r3, [r7, #15]
 80109fe:	2b10      	cmp	r3, #16
 8010a00:	d103      	bne.n	8010a0a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8010a02:	6878      	ldr	r0, [r7, #4]
 8010a04:	f000 fa6c 	bl	8010ee0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010a08:	e0c3      	b.n	8010b92 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8010a0a:	6878      	ldr	r0, [r7, #4]
 8010a0c:	f000 fad0 	bl	8010fb0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010a10:	e0bf      	b.n	8010b92 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	685b      	ldr	r3, [r3, #4]
 8010a18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010a1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010a20:	f000 80b7 	beq.w	8010b92 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8010a24:	69fb      	ldr	r3, [r7, #28]
 8010a26:	099b      	lsrs	r3, r3, #6
 8010a28:	f003 0301 	and.w	r3, r3, #1
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d00f      	beq.n	8010a50 <HAL_I2C_EV_IRQHandler+0x18c>
 8010a30:	697b      	ldr	r3, [r7, #20]
 8010a32:	0a9b      	lsrs	r3, r3, #10
 8010a34:	f003 0301 	and.w	r3, r3, #1
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d009      	beq.n	8010a50 <HAL_I2C_EV_IRQHandler+0x18c>
 8010a3c:	69fb      	ldr	r3, [r7, #28]
 8010a3e:	089b      	lsrs	r3, r3, #2
 8010a40:	f003 0301 	and.w	r3, r3, #1
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d103      	bne.n	8010a50 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8010a48:	6878      	ldr	r0, [r7, #4]
 8010a4a:	f000 fb40 	bl	80110ce <I2C_MasterReceive_RXNE>
 8010a4e:	e011      	b.n	8010a74 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010a50:	69fb      	ldr	r3, [r7, #28]
 8010a52:	089b      	lsrs	r3, r3, #2
 8010a54:	f003 0301 	and.w	r3, r3, #1
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	f000 809a 	beq.w	8010b92 <HAL_I2C_EV_IRQHandler+0x2ce>
 8010a5e:	697b      	ldr	r3, [r7, #20]
 8010a60:	0a5b      	lsrs	r3, r3, #9
 8010a62:	f003 0301 	and.w	r3, r3, #1
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	f000 8093 	beq.w	8010b92 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8010a6c:	6878      	ldr	r0, [r7, #4]
 8010a6e:	f000 fbdf 	bl	8011230 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010a72:	e08e      	b.n	8010b92 <HAL_I2C_EV_IRQHandler+0x2ce>
 8010a74:	e08d      	b.n	8010b92 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d004      	beq.n	8010a88 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	695b      	ldr	r3, [r3, #20]
 8010a84:	61fb      	str	r3, [r7, #28]
 8010a86:	e007      	b.n	8010a98 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	699b      	ldr	r3, [r3, #24]
 8010a8e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	695b      	ldr	r3, [r3, #20]
 8010a96:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010a98:	69fb      	ldr	r3, [r7, #28]
 8010a9a:	085b      	lsrs	r3, r3, #1
 8010a9c:	f003 0301 	and.w	r3, r3, #1
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d012      	beq.n	8010aca <HAL_I2C_EV_IRQHandler+0x206>
 8010aa4:	697b      	ldr	r3, [r7, #20]
 8010aa6:	0a5b      	lsrs	r3, r3, #9
 8010aa8:	f003 0301 	and.w	r3, r3, #1
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d00c      	beq.n	8010aca <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d003      	beq.n	8010ac0 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	699b      	ldr	r3, [r3, #24]
 8010abe:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8010ac0:	69b9      	ldr	r1, [r7, #24]
 8010ac2:	6878      	ldr	r0, [r7, #4]
 8010ac4:	f000 ff9d 	bl	8011a02 <I2C_Slave_ADDR>
 8010ac8:	e066      	b.n	8010b98 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010aca:	69fb      	ldr	r3, [r7, #28]
 8010acc:	091b      	lsrs	r3, r3, #4
 8010ace:	f003 0301 	and.w	r3, r3, #1
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d009      	beq.n	8010aea <HAL_I2C_EV_IRQHandler+0x226>
 8010ad6:	697b      	ldr	r3, [r7, #20]
 8010ad8:	0a5b      	lsrs	r3, r3, #9
 8010ada:	f003 0301 	and.w	r3, r3, #1
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d003      	beq.n	8010aea <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	f000 ffd2 	bl	8011a8c <I2C_Slave_STOPF>
 8010ae8:	e056      	b.n	8010b98 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8010aea:	7bbb      	ldrb	r3, [r7, #14]
 8010aec:	2b21      	cmp	r3, #33	; 0x21
 8010aee:	d002      	beq.n	8010af6 <HAL_I2C_EV_IRQHandler+0x232>
 8010af0:	7bbb      	ldrb	r3, [r7, #14]
 8010af2:	2b29      	cmp	r3, #41	; 0x29
 8010af4:	d125      	bne.n	8010b42 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8010af6:	69fb      	ldr	r3, [r7, #28]
 8010af8:	09db      	lsrs	r3, r3, #7
 8010afa:	f003 0301 	and.w	r3, r3, #1
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d00f      	beq.n	8010b22 <HAL_I2C_EV_IRQHandler+0x25e>
 8010b02:	697b      	ldr	r3, [r7, #20]
 8010b04:	0a9b      	lsrs	r3, r3, #10
 8010b06:	f003 0301 	and.w	r3, r3, #1
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d009      	beq.n	8010b22 <HAL_I2C_EV_IRQHandler+0x25e>
 8010b0e:	69fb      	ldr	r3, [r7, #28]
 8010b10:	089b      	lsrs	r3, r3, #2
 8010b12:	f003 0301 	and.w	r3, r3, #1
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d103      	bne.n	8010b22 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8010b1a:	6878      	ldr	r0, [r7, #4]
 8010b1c:	f000 feb3 	bl	8011886 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8010b20:	e039      	b.n	8010b96 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010b22:	69fb      	ldr	r3, [r7, #28]
 8010b24:	089b      	lsrs	r3, r3, #2
 8010b26:	f003 0301 	and.w	r3, r3, #1
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d033      	beq.n	8010b96 <HAL_I2C_EV_IRQHandler+0x2d2>
 8010b2e:	697b      	ldr	r3, [r7, #20]
 8010b30:	0a5b      	lsrs	r3, r3, #9
 8010b32:	f003 0301 	and.w	r3, r3, #1
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d02d      	beq.n	8010b96 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8010b3a:	6878      	ldr	r0, [r7, #4]
 8010b3c:	f000 fee0 	bl	8011900 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8010b40:	e029      	b.n	8010b96 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8010b42:	69fb      	ldr	r3, [r7, #28]
 8010b44:	099b      	lsrs	r3, r3, #6
 8010b46:	f003 0301 	and.w	r3, r3, #1
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d00f      	beq.n	8010b6e <HAL_I2C_EV_IRQHandler+0x2aa>
 8010b4e:	697b      	ldr	r3, [r7, #20]
 8010b50:	0a9b      	lsrs	r3, r3, #10
 8010b52:	f003 0301 	and.w	r3, r3, #1
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d009      	beq.n	8010b6e <HAL_I2C_EV_IRQHandler+0x2aa>
 8010b5a:	69fb      	ldr	r3, [r7, #28]
 8010b5c:	089b      	lsrs	r3, r3, #2
 8010b5e:	f003 0301 	and.w	r3, r3, #1
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d103      	bne.n	8010b6e <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	f000 feeb 	bl	8011942 <I2C_SlaveReceive_RXNE>
 8010b6c:	e014      	b.n	8010b98 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010b6e:	69fb      	ldr	r3, [r7, #28]
 8010b70:	089b      	lsrs	r3, r3, #2
 8010b72:	f003 0301 	and.w	r3, r3, #1
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d00e      	beq.n	8010b98 <HAL_I2C_EV_IRQHandler+0x2d4>
 8010b7a:	697b      	ldr	r3, [r7, #20]
 8010b7c:	0a5b      	lsrs	r3, r3, #9
 8010b7e:	f003 0301 	and.w	r3, r3, #1
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d008      	beq.n	8010b98 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8010b86:	6878      	ldr	r0, [r7, #4]
 8010b88:	f000 ff19 	bl	80119be <I2C_SlaveReceive_BTF>
 8010b8c:	e004      	b.n	8010b98 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8010b8e:	bf00      	nop
 8010b90:	e002      	b.n	8010b98 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010b92:	bf00      	nop
 8010b94:	e000      	b.n	8010b98 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8010b96:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8010b98:	3720      	adds	r7, #32
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}

08010b9e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8010b9e:	b580      	push	{r7, lr}
 8010ba0:	b08a      	sub	sp, #40	; 0x28
 8010ba2:	af00      	add	r7, sp, #0
 8010ba4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	695b      	ldr	r3, [r3, #20]
 8010bac:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	685b      	ldr	r3, [r3, #4]
 8010bb4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010bc0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8010bc2:	6a3b      	ldr	r3, [r7, #32]
 8010bc4:	0a1b      	lsrs	r3, r3, #8
 8010bc6:	f003 0301 	and.w	r3, r3, #1
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d00e      	beq.n	8010bec <HAL_I2C_ER_IRQHandler+0x4e>
 8010bce:	69fb      	ldr	r3, [r7, #28]
 8010bd0:	0a1b      	lsrs	r3, r3, #8
 8010bd2:	f003 0301 	and.w	r3, r3, #1
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d008      	beq.n	8010bec <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8010bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bdc:	f043 0301 	orr.w	r3, r3, #1
 8010be0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010bea:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8010bec:	6a3b      	ldr	r3, [r7, #32]
 8010bee:	0a5b      	lsrs	r3, r3, #9
 8010bf0:	f003 0301 	and.w	r3, r3, #1
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d00e      	beq.n	8010c16 <HAL_I2C_ER_IRQHandler+0x78>
 8010bf8:	69fb      	ldr	r3, [r7, #28]
 8010bfa:	0a1b      	lsrs	r3, r3, #8
 8010bfc:	f003 0301 	and.w	r3, r3, #1
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d008      	beq.n	8010c16 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8010c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c06:	f043 0302 	orr.w	r3, r3, #2
 8010c0a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8010c14:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8010c16:	6a3b      	ldr	r3, [r7, #32]
 8010c18:	0a9b      	lsrs	r3, r3, #10
 8010c1a:	f003 0301 	and.w	r3, r3, #1
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d03f      	beq.n	8010ca2 <HAL_I2C_ER_IRQHandler+0x104>
 8010c22:	69fb      	ldr	r3, [r7, #28]
 8010c24:	0a1b      	lsrs	r3, r3, #8
 8010c26:	f003 0301 	and.w	r3, r3, #1
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d039      	beq.n	8010ca2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8010c2e:	7efb      	ldrb	r3, [r7, #27]
 8010c30:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010c36:	b29b      	uxth	r3, r3
 8010c38:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010c40:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c46:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8010c48:	7ebb      	ldrb	r3, [r7, #26]
 8010c4a:	2b20      	cmp	r3, #32
 8010c4c:	d112      	bne.n	8010c74 <HAL_I2C_ER_IRQHandler+0xd6>
 8010c4e:	697b      	ldr	r3, [r7, #20]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d10f      	bne.n	8010c74 <HAL_I2C_ER_IRQHandler+0xd6>
 8010c54:	7cfb      	ldrb	r3, [r7, #19]
 8010c56:	2b21      	cmp	r3, #33	; 0x21
 8010c58:	d008      	beq.n	8010c6c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8010c5a:	7cfb      	ldrb	r3, [r7, #19]
 8010c5c:	2b29      	cmp	r3, #41	; 0x29
 8010c5e:	d005      	beq.n	8010c6c <HAL_I2C_ER_IRQHandler+0xce>
 8010c60:	7cfb      	ldrb	r3, [r7, #19]
 8010c62:	2b28      	cmp	r3, #40	; 0x28
 8010c64:	d106      	bne.n	8010c74 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	2b21      	cmp	r3, #33	; 0x21
 8010c6a:	d103      	bne.n	8010c74 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8010c6c:	6878      	ldr	r0, [r7, #4]
 8010c6e:	f001 f83d 	bl	8011cec <I2C_Slave_AF>
 8010c72:	e016      	b.n	8010ca2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8010c7c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8010c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c80:	f043 0304 	orr.w	r3, r3, #4
 8010c84:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8010c86:	7efb      	ldrb	r3, [r7, #27]
 8010c88:	2b10      	cmp	r3, #16
 8010c8a:	d002      	beq.n	8010c92 <HAL_I2C_ER_IRQHandler+0xf4>
 8010c8c:	7efb      	ldrb	r3, [r7, #27]
 8010c8e:	2b40      	cmp	r3, #64	; 0x40
 8010c90:	d107      	bne.n	8010ca2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	681a      	ldr	r2, [r3, #0]
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010ca0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8010ca2:	6a3b      	ldr	r3, [r7, #32]
 8010ca4:	0adb      	lsrs	r3, r3, #11
 8010ca6:	f003 0301 	and.w	r3, r3, #1
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d00e      	beq.n	8010ccc <HAL_I2C_ER_IRQHandler+0x12e>
 8010cae:	69fb      	ldr	r3, [r7, #28]
 8010cb0:	0a1b      	lsrs	r3, r3, #8
 8010cb2:	f003 0301 	and.w	r3, r3, #1
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d008      	beq.n	8010ccc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8010cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cbc:	f043 0308 	orr.w	r3, r3, #8
 8010cc0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8010cca:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8010ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d008      	beq.n	8010ce4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cd8:	431a      	orrs	r2, r3
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8010cde:	6878      	ldr	r0, [r7, #4]
 8010ce0:	f001 f874 	bl	8011dcc <I2C_ITError>
  }
}
 8010ce4:	bf00      	nop
 8010ce6:	3728      	adds	r7, #40	; 0x28
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}

08010cec <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010cec:	b480      	push	{r7}
 8010cee:	b083      	sub	sp, #12
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8010cf4:	bf00      	nop
 8010cf6:	370c      	adds	r7, #12
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfe:	4770      	bx	lr

08010d00 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010d00:	b480      	push	{r7}
 8010d02:	b083      	sub	sp, #12
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8010d08:	bf00      	nop
 8010d0a:	370c      	adds	r7, #12
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d12:	4770      	bx	lr

08010d14 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010d14:	b480      	push	{r7}
 8010d16:	b083      	sub	sp, #12
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8010d1c:	bf00      	nop
 8010d1e:	370c      	adds	r7, #12
 8010d20:	46bd      	mov	sp, r7
 8010d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d26:	4770      	bx	lr

08010d28 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8010d28:	b480      	push	{r7}
 8010d2a:	b083      	sub	sp, #12
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
 8010d30:	460b      	mov	r3, r1
 8010d32:	70fb      	strb	r3, [r7, #3]
 8010d34:	4613      	mov	r3, r2
 8010d36:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8010d38:	bf00      	nop
 8010d3a:	370c      	adds	r7, #12
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d42:	4770      	bx	lr

08010d44 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010d44:	b480      	push	{r7}
 8010d46:	b083      	sub	sp, #12
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8010d4c:	bf00      	nop
 8010d4e:	370c      	adds	r7, #12
 8010d50:	46bd      	mov	sp, r7
 8010d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d56:	4770      	bx	lr

08010d58 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010d58:	b480      	push	{r7}
 8010d5a:	b083      	sub	sp, #12
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8010d60:	bf00      	nop
 8010d62:	370c      	adds	r7, #12
 8010d64:	46bd      	mov	sp, r7
 8010d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6a:	4770      	bx	lr

08010d6c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010d6c:	b480      	push	{r7}
 8010d6e:	b083      	sub	sp, #12
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8010d74:	bf00      	nop
 8010d76:	370c      	adds	r7, #12
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7e:	4770      	bx	lr

08010d80 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8010d80:	b480      	push	{r7}
 8010d82:	b083      	sub	sp, #12
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8010d88:	bf00      	nop
 8010d8a:	370c      	adds	r7, #12
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d92:	4770      	bx	lr

08010d94 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010d94:	b480      	push	{r7}
 8010d96:	b083      	sub	sp, #12
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8010d9c:	bf00      	nop
 8010d9e:	370c      	adds	r7, #12
 8010da0:	46bd      	mov	sp, r7
 8010da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da6:	4770      	bx	lr

08010da8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b084      	sub	sp, #16
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010db6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010dbe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dc4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d150      	bne.n	8010e70 <I2C_MasterTransmit_TXE+0xc8>
 8010dce:	7bfb      	ldrb	r3, [r7, #15]
 8010dd0:	2b21      	cmp	r3, #33	; 0x21
 8010dd2:	d14d      	bne.n	8010e70 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8010dd4:	68bb      	ldr	r3, [r7, #8]
 8010dd6:	2b08      	cmp	r3, #8
 8010dd8:	d01d      	beq.n	8010e16 <I2C_MasterTransmit_TXE+0x6e>
 8010dda:	68bb      	ldr	r3, [r7, #8]
 8010ddc:	2b20      	cmp	r3, #32
 8010dde:	d01a      	beq.n	8010e16 <I2C_MasterTransmit_TXE+0x6e>
 8010de0:	68bb      	ldr	r3, [r7, #8]
 8010de2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8010de6:	d016      	beq.n	8010e16 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	685a      	ldr	r2, [r3, #4]
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8010df6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	2211      	movs	r2, #17
 8010dfc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	2200      	movs	r2, #0
 8010e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	2220      	movs	r2, #32
 8010e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	f7ff ff6c 	bl	8010cec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8010e14:	e060      	b.n	8010ed8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	685a      	ldr	r2, [r3, #4]
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8010e24:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	681a      	ldr	r2, [r3, #0]
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010e34:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	2200      	movs	r2, #0
 8010e3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	2220      	movs	r2, #32
 8010e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010e4a:	b2db      	uxtb	r3, r3
 8010e4c:	2b40      	cmp	r3, #64	; 0x40
 8010e4e:	d107      	bne.n	8010e60 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2200      	movs	r2, #0
 8010e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8010e58:	6878      	ldr	r0, [r7, #4]
 8010e5a:	f7ff ff7d 	bl	8010d58 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8010e5e:	e03b      	b.n	8010ed8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	2200      	movs	r2, #0
 8010e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8010e68:	6878      	ldr	r0, [r7, #4]
 8010e6a:	f7ff ff3f 	bl	8010cec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8010e6e:	e033      	b.n	8010ed8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8010e70:	7bfb      	ldrb	r3, [r7, #15]
 8010e72:	2b21      	cmp	r3, #33	; 0x21
 8010e74:	d005      	beq.n	8010e82 <I2C_MasterTransmit_TXE+0xda>
 8010e76:	7bbb      	ldrb	r3, [r7, #14]
 8010e78:	2b40      	cmp	r3, #64	; 0x40
 8010e7a:	d12d      	bne.n	8010ed8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8010e7c:	7bfb      	ldrb	r3, [r7, #15]
 8010e7e:	2b22      	cmp	r3, #34	; 0x22
 8010e80:	d12a      	bne.n	8010ed8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010e86:	b29b      	uxth	r3, r3
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d108      	bne.n	8010e9e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	685a      	ldr	r2, [r3, #4]
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010e9a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8010e9c:	e01c      	b.n	8010ed8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010ea4:	b2db      	uxtb	r3, r3
 8010ea6:	2b40      	cmp	r3, #64	; 0x40
 8010ea8:	d103      	bne.n	8010eb2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8010eaa:	6878      	ldr	r0, [r7, #4]
 8010eac:	f000 f880 	bl	8010fb0 <I2C_MemoryTransmit_TXE_BTF>
}
 8010eb0:	e012      	b.n	8010ed8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010eb6:	781a      	ldrb	r2, [r3, #0]
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ec2:	1c5a      	adds	r2, r3, #1
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010ecc:	b29b      	uxth	r3, r3
 8010ece:	3b01      	subs	r3, #1
 8010ed0:	b29a      	uxth	r2, r3
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8010ed6:	e7ff      	b.n	8010ed8 <I2C_MasterTransmit_TXE+0x130>
 8010ed8:	bf00      	nop
 8010eda:	3710      	adds	r7, #16
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}

08010ee0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b084      	sub	sp, #16
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010eec:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010ef4:	b2db      	uxtb	r3, r3
 8010ef6:	2b21      	cmp	r3, #33	; 0x21
 8010ef8:	d156      	bne.n	8010fa8 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010efe:	b29b      	uxth	r3, r3
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d012      	beq.n	8010f2a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f08:	781a      	ldrb	r2, [r3, #0]
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f14:	1c5a      	adds	r2, r3, #1
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010f1e:	b29b      	uxth	r3, r3
 8010f20:	3b01      	subs	r3, #1
 8010f22:	b29a      	uxth	r2, r3
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8010f28:	e03e      	b.n	8010fa8 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	2b08      	cmp	r3, #8
 8010f2e:	d01d      	beq.n	8010f6c <I2C_MasterTransmit_BTF+0x8c>
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	2b20      	cmp	r3, #32
 8010f34:	d01a      	beq.n	8010f6c <I2C_MasterTransmit_BTF+0x8c>
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8010f3c:	d016      	beq.n	8010f6c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	685a      	ldr	r2, [r3, #4]
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8010f4c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	2211      	movs	r2, #17
 8010f52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	2200      	movs	r2, #0
 8010f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	2220      	movs	r2, #32
 8010f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8010f64:	6878      	ldr	r0, [r7, #4]
 8010f66:	f7ff fec1 	bl	8010cec <HAL_I2C_MasterTxCpltCallback>
}
 8010f6a:	e01d      	b.n	8010fa8 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	685a      	ldr	r2, [r3, #4]
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8010f7a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	681a      	ldr	r2, [r3, #0]
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010f8a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	2200      	movs	r2, #0
 8010f90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	2220      	movs	r2, #32
 8010f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8010fa2:	6878      	ldr	r0, [r7, #4]
 8010fa4:	f7ff fea2 	bl	8010cec <HAL_I2C_MasterTxCpltCallback>
}
 8010fa8:	bf00      	nop
 8010faa:	3710      	adds	r7, #16
 8010fac:	46bd      	mov	sp, r7
 8010fae:	bd80      	pop	{r7, pc}

08010fb0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b084      	sub	sp, #16
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010fbe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d11d      	bne.n	8011004 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010fcc:	2b01      	cmp	r3, #1
 8010fce:	d10b      	bne.n	8010fe8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010fd4:	b2da      	uxtb	r2, r3
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010fe0:	1c9a      	adds	r2, r3, #2
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8010fe6:	e06e      	b.n	80110c6 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010fec:	b29b      	uxth	r3, r3
 8010fee:	121b      	asrs	r3, r3, #8
 8010ff0:	b2da      	uxtb	r2, r3
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ffc:	1c5a      	adds	r2, r3, #1
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	651a      	str	r2, [r3, #80]	; 0x50
}
 8011002:	e060      	b.n	80110c6 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011008:	2b01      	cmp	r3, #1
 801100a:	d10b      	bne.n	8011024 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011010:	b2da      	uxtb	r2, r3
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801101c:	1c5a      	adds	r2, r3, #1
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	651a      	str	r2, [r3, #80]	; 0x50
}
 8011022:	e050      	b.n	80110c6 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011028:	2b02      	cmp	r3, #2
 801102a:	d14c      	bne.n	80110c6 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 801102c:	7bfb      	ldrb	r3, [r7, #15]
 801102e:	2b22      	cmp	r3, #34	; 0x22
 8011030:	d108      	bne.n	8011044 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	681a      	ldr	r2, [r3, #0]
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011040:	601a      	str	r2, [r3, #0]
}
 8011042:	e040      	b.n	80110c6 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011048:	b29b      	uxth	r3, r3
 801104a:	2b00      	cmp	r3, #0
 801104c:	d015      	beq.n	801107a <I2C_MemoryTransmit_TXE_BTF+0xca>
 801104e:	7bfb      	ldrb	r3, [r7, #15]
 8011050:	2b21      	cmp	r3, #33	; 0x21
 8011052:	d112      	bne.n	801107a <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011058:	781a      	ldrb	r2, [r3, #0]
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011064:	1c5a      	adds	r2, r3, #1
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801106e:	b29b      	uxth	r3, r3
 8011070:	3b01      	subs	r3, #1
 8011072:	b29a      	uxth	r2, r3
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8011078:	e025      	b.n	80110c6 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801107e:	b29b      	uxth	r3, r3
 8011080:	2b00      	cmp	r3, #0
 8011082:	d120      	bne.n	80110c6 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8011084:	7bfb      	ldrb	r3, [r7, #15]
 8011086:	2b21      	cmp	r3, #33	; 0x21
 8011088:	d11d      	bne.n	80110c6 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	685a      	ldr	r2, [r3, #4]
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8011098:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	681a      	ldr	r2, [r3, #0]
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80110a8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	2200      	movs	r2, #0
 80110ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2220      	movs	r2, #32
 80110b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	2200      	movs	r2, #0
 80110bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80110c0:	6878      	ldr	r0, [r7, #4]
 80110c2:	f7ff fe49 	bl	8010d58 <HAL_I2C_MemTxCpltCallback>
}
 80110c6:	bf00      	nop
 80110c8:	3710      	adds	r7, #16
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bd80      	pop	{r7, pc}

080110ce <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80110ce:	b580      	push	{r7, lr}
 80110d0:	b084      	sub	sp, #16
 80110d2:	af00      	add	r7, sp, #0
 80110d4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80110dc:	b2db      	uxtb	r3, r3
 80110de:	2b22      	cmp	r3, #34	; 0x22
 80110e0:	f040 80a2 	bne.w	8011228 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80110e8:	b29b      	uxth	r3, r3
 80110ea:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	2b03      	cmp	r3, #3
 80110f0:	d921      	bls.n	8011136 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	691a      	ldr	r2, [r3, #16]
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110fc:	b2d2      	uxtb	r2, r2
 80110fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011104:	1c5a      	adds	r2, r3, #1
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801110e:	b29b      	uxth	r3, r3
 8011110:	3b01      	subs	r3, #1
 8011112:	b29a      	uxth	r2, r3
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801111c:	b29b      	uxth	r3, r3
 801111e:	2b03      	cmp	r3, #3
 8011120:	f040 8082 	bne.w	8011228 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	685a      	ldr	r2, [r3, #4]
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011132:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8011134:	e078      	b.n	8011228 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801113a:	2b02      	cmp	r3, #2
 801113c:	d074      	beq.n	8011228 <I2C_MasterReceive_RXNE+0x15a>
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	2b01      	cmp	r3, #1
 8011142:	d002      	beq.n	801114a <I2C_MasterReceive_RXNE+0x7c>
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d16e      	bne.n	8011228 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801114a:	6878      	ldr	r0, [r7, #4]
 801114c:	f001 f92a 	bl	80123a4 <I2C_WaitOnSTOPRequestThroughIT>
 8011150:	4603      	mov	r3, r0
 8011152:	2b00      	cmp	r3, #0
 8011154:	d142      	bne.n	80111dc <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	681a      	ldr	r2, [r3, #0]
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011164:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	685a      	ldr	r2, [r3, #4]
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8011174:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	691a      	ldr	r2, [r3, #16]
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011180:	b2d2      	uxtb	r2, r2
 8011182:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011188:	1c5a      	adds	r2, r3, #1
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011192:	b29b      	uxth	r3, r3
 8011194:	3b01      	subs	r3, #1
 8011196:	b29a      	uxth	r2, r3
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	2220      	movs	r2, #32
 80111a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80111aa:	b2db      	uxtb	r3, r3
 80111ac:	2b40      	cmp	r3, #64	; 0x40
 80111ae:	d10a      	bne.n	80111c6 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	2200      	movs	r2, #0
 80111b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	2200      	movs	r2, #0
 80111bc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80111be:	6878      	ldr	r0, [r7, #4]
 80111c0:	f7ff fdd4 	bl	8010d6c <HAL_I2C_MemRxCpltCallback>
}
 80111c4:	e030      	b.n	8011228 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	2200      	movs	r2, #0
 80111ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	2212      	movs	r2, #18
 80111d2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80111d4:	6878      	ldr	r0, [r7, #4]
 80111d6:	f7fb fe13 	bl	800ce00 <HAL_I2C_MasterRxCpltCallback>
}
 80111da:	e025      	b.n	8011228 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	685a      	ldr	r2, [r3, #4]
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80111ea:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	691a      	ldr	r2, [r3, #16]
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111f6:	b2d2      	uxtb	r2, r2
 80111f8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111fe:	1c5a      	adds	r2, r3, #1
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011208:	b29b      	uxth	r3, r3
 801120a:	3b01      	subs	r3, #1
 801120c:	b29a      	uxth	r2, r3
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	2220      	movs	r2, #32
 8011216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	2200      	movs	r2, #0
 801121e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8011222:	6878      	ldr	r0, [r7, #4]
 8011224:	f7ff fdac 	bl	8010d80 <HAL_I2C_ErrorCallback>
}
 8011228:	bf00      	nop
 801122a:	3710      	adds	r7, #16
 801122c:	46bd      	mov	sp, r7
 801122e:	bd80      	pop	{r7, pc}

08011230 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b084      	sub	sp, #16
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801123c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011242:	b29b      	uxth	r3, r3
 8011244:	2b04      	cmp	r3, #4
 8011246:	d11b      	bne.n	8011280 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	685a      	ldr	r2, [r3, #4]
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011256:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	691a      	ldr	r2, [r3, #16]
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011262:	b2d2      	uxtb	r2, r2
 8011264:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801126a:	1c5a      	adds	r2, r3, #1
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011274:	b29b      	uxth	r3, r3
 8011276:	3b01      	subs	r3, #1
 8011278:	b29a      	uxth	r2, r3
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 801127e:	e0bd      	b.n	80113fc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011284:	b29b      	uxth	r3, r3
 8011286:	2b03      	cmp	r3, #3
 8011288:	d129      	bne.n	80112de <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	685a      	ldr	r2, [r3, #4]
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011298:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	2b04      	cmp	r3, #4
 801129e:	d00a      	beq.n	80112b6 <I2C_MasterReceive_BTF+0x86>
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	2b02      	cmp	r3, #2
 80112a4:	d007      	beq.n	80112b6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	681a      	ldr	r2, [r3, #0]
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80112b4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	691a      	ldr	r2, [r3, #16]
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112c0:	b2d2      	uxtb	r2, r2
 80112c2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112c8:	1c5a      	adds	r2, r3, #1
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80112d2:	b29b      	uxth	r3, r3
 80112d4:	3b01      	subs	r3, #1
 80112d6:	b29a      	uxth	r2, r3
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80112dc:	e08e      	b.n	80113fc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80112e2:	b29b      	uxth	r3, r3
 80112e4:	2b02      	cmp	r3, #2
 80112e6:	d176      	bne.n	80113d6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	2b01      	cmp	r3, #1
 80112ec:	d002      	beq.n	80112f4 <I2C_MasterReceive_BTF+0xc4>
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	2b10      	cmp	r3, #16
 80112f2:	d108      	bne.n	8011306 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	681a      	ldr	r2, [r3, #0]
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011302:	601a      	str	r2, [r3, #0]
 8011304:	e019      	b.n	801133a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	2b04      	cmp	r3, #4
 801130a:	d002      	beq.n	8011312 <I2C_MasterReceive_BTF+0xe2>
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	2b02      	cmp	r3, #2
 8011310:	d108      	bne.n	8011324 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	681a      	ldr	r2, [r3, #0]
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011320:	601a      	str	r2, [r3, #0]
 8011322:	e00a      	b.n	801133a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	2b10      	cmp	r3, #16
 8011328:	d007      	beq.n	801133a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	681a      	ldr	r2, [r3, #0]
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011338:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	691a      	ldr	r2, [r3, #16]
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011344:	b2d2      	uxtb	r2, r2
 8011346:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801134c:	1c5a      	adds	r2, r3, #1
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011356:	b29b      	uxth	r3, r3
 8011358:	3b01      	subs	r3, #1
 801135a:	b29a      	uxth	r2, r3
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	691a      	ldr	r2, [r3, #16]
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801136a:	b2d2      	uxtb	r2, r2
 801136c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011372:	1c5a      	adds	r2, r3, #1
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801137c:	b29b      	uxth	r3, r3
 801137e:	3b01      	subs	r3, #1
 8011380:	b29a      	uxth	r2, r3
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	685a      	ldr	r2, [r3, #4]
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8011394:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	2220      	movs	r2, #32
 801139a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80113a4:	b2db      	uxtb	r3, r3
 80113a6:	2b40      	cmp	r3, #64	; 0x40
 80113a8:	d10a      	bne.n	80113c0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	2200      	movs	r2, #0
 80113ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	2200      	movs	r2, #0
 80113b6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80113b8:	6878      	ldr	r0, [r7, #4]
 80113ba:	f7ff fcd7 	bl	8010d6c <HAL_I2C_MemRxCpltCallback>
}
 80113be:	e01d      	b.n	80113fc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	2200      	movs	r2, #0
 80113c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	2212      	movs	r2, #18
 80113cc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80113ce:	6878      	ldr	r0, [r7, #4]
 80113d0:	f7fb fd16 	bl	800ce00 <HAL_I2C_MasterRxCpltCallback>
}
 80113d4:	e012      	b.n	80113fc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	691a      	ldr	r2, [r3, #16]
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113e0:	b2d2      	uxtb	r2, r2
 80113e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113e8:	1c5a      	adds	r2, r3, #1
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80113f2:	b29b      	uxth	r3, r3
 80113f4:	3b01      	subs	r3, #1
 80113f6:	b29a      	uxth	r2, r3
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80113fc:	bf00      	nop
 80113fe:	3710      	adds	r7, #16
 8011400:	46bd      	mov	sp, r7
 8011402:	bd80      	pop	{r7, pc}

08011404 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8011404:	b480      	push	{r7}
 8011406:	b083      	sub	sp, #12
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011412:	b2db      	uxtb	r3, r3
 8011414:	2b40      	cmp	r3, #64	; 0x40
 8011416:	d117      	bne.n	8011448 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801141c:	2b00      	cmp	r3, #0
 801141e:	d109      	bne.n	8011434 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011424:	b2db      	uxtb	r3, r3
 8011426:	461a      	mov	r2, r3
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8011430:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8011432:	e067      	b.n	8011504 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011438:	b2db      	uxtb	r3, r3
 801143a:	f043 0301 	orr.w	r3, r3, #1
 801143e:	b2da      	uxtb	r2, r3
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	611a      	str	r2, [r3, #16]
}
 8011446:	e05d      	b.n	8011504 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	691b      	ldr	r3, [r3, #16]
 801144c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011450:	d133      	bne.n	80114ba <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011458:	b2db      	uxtb	r3, r3
 801145a:	2b21      	cmp	r3, #33	; 0x21
 801145c:	d109      	bne.n	8011472 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011462:	b2db      	uxtb	r3, r3
 8011464:	461a      	mov	r2, r3
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801146e:	611a      	str	r2, [r3, #16]
 8011470:	e008      	b.n	8011484 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011476:	b2db      	uxtb	r3, r3
 8011478:	f043 0301 	orr.w	r3, r3, #1
 801147c:	b2da      	uxtb	r2, r3
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011488:	2b00      	cmp	r3, #0
 801148a:	d004      	beq.n	8011496 <I2C_Master_SB+0x92>
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011492:	2b00      	cmp	r3, #0
 8011494:	d108      	bne.n	80114a8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801149a:	2b00      	cmp	r3, #0
 801149c:	d032      	beq.n	8011504 <I2C_Master_SB+0x100>
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d02d      	beq.n	8011504 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	685a      	ldr	r2, [r3, #4]
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80114b6:	605a      	str	r2, [r3, #4]
}
 80114b8:	e024      	b.n	8011504 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d10e      	bne.n	80114e0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114c6:	b29b      	uxth	r3, r3
 80114c8:	11db      	asrs	r3, r3, #7
 80114ca:	b2db      	uxtb	r3, r3
 80114cc:	f003 0306 	and.w	r3, r3, #6
 80114d0:	b2db      	uxtb	r3, r3
 80114d2:	f063 030f 	orn	r3, r3, #15
 80114d6:	b2da      	uxtb	r2, r3
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	611a      	str	r2, [r3, #16]
}
 80114de:	e011      	b.n	8011504 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80114e4:	2b01      	cmp	r3, #1
 80114e6:	d10d      	bne.n	8011504 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114ec:	b29b      	uxth	r3, r3
 80114ee:	11db      	asrs	r3, r3, #7
 80114f0:	b2db      	uxtb	r3, r3
 80114f2:	f003 0306 	and.w	r3, r3, #6
 80114f6:	b2db      	uxtb	r3, r3
 80114f8:	f063 030e 	orn	r3, r3, #14
 80114fc:	b2da      	uxtb	r2, r3
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	611a      	str	r2, [r3, #16]
}
 8011504:	bf00      	nop
 8011506:	370c      	adds	r7, #12
 8011508:	46bd      	mov	sp, r7
 801150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150e:	4770      	bx	lr

08011510 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8011510:	b480      	push	{r7}
 8011512:	b083      	sub	sp, #12
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801151c:	b2da      	uxtb	r2, r3
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011528:	2b00      	cmp	r3, #0
 801152a:	d103      	bne.n	8011534 <I2C_Master_ADD10+0x24>
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011530:	2b00      	cmp	r3, #0
 8011532:	d011      	beq.n	8011558 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801153a:	2b00      	cmp	r3, #0
 801153c:	d104      	bne.n	8011548 <I2C_Master_ADD10+0x38>
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011544:	2b00      	cmp	r3, #0
 8011546:	d007      	beq.n	8011558 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	685a      	ldr	r2, [r3, #4]
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011556:	605a      	str	r2, [r3, #4]
    }
  }
}
 8011558:	bf00      	nop
 801155a:	370c      	adds	r7, #12
 801155c:	46bd      	mov	sp, r7
 801155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011562:	4770      	bx	lr

08011564 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8011564:	b480      	push	{r7}
 8011566:	b091      	sub	sp, #68	; 0x44
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011572:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801157a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011580:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011588:	b2db      	uxtb	r3, r3
 801158a:	2b22      	cmp	r3, #34	; 0x22
 801158c:	f040 8169 	bne.w	8011862 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011594:	2b00      	cmp	r3, #0
 8011596:	d10f      	bne.n	80115b8 <I2C_Master_ADDR+0x54>
 8011598:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801159c:	2b40      	cmp	r3, #64	; 0x40
 801159e:	d10b      	bne.n	80115b8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80115a0:	2300      	movs	r3, #0
 80115a2:	633b      	str	r3, [r7, #48]	; 0x30
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	695b      	ldr	r3, [r3, #20]
 80115aa:	633b      	str	r3, [r7, #48]	; 0x30
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	699b      	ldr	r3, [r3, #24]
 80115b2:	633b      	str	r3, [r7, #48]	; 0x30
 80115b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115b6:	e160      	b.n	801187a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d11d      	bne.n	80115fc <I2C_Master_ADDR+0x98>
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	691b      	ldr	r3, [r3, #16]
 80115c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80115c8:	d118      	bne.n	80115fc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80115ca:	2300      	movs	r3, #0
 80115cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	695b      	ldr	r3, [r3, #20]
 80115d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	699b      	ldr	r3, [r3, #24]
 80115dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80115de:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	681a      	ldr	r2, [r3, #0]
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80115ee:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80115f4:	1c5a      	adds	r2, r3, #1
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	651a      	str	r2, [r3, #80]	; 0x50
 80115fa:	e13e      	b.n	801187a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011600:	b29b      	uxth	r3, r3
 8011602:	2b00      	cmp	r3, #0
 8011604:	d113      	bne.n	801162e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011606:	2300      	movs	r3, #0
 8011608:	62bb      	str	r3, [r7, #40]	; 0x28
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	695b      	ldr	r3, [r3, #20]
 8011610:	62bb      	str	r3, [r7, #40]	; 0x28
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	699b      	ldr	r3, [r3, #24]
 8011618:	62bb      	str	r3, [r7, #40]	; 0x28
 801161a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	681a      	ldr	r2, [r3, #0]
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801162a:	601a      	str	r2, [r3, #0]
 801162c:	e115      	b.n	801185a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011632:	b29b      	uxth	r3, r3
 8011634:	2b01      	cmp	r3, #1
 8011636:	f040 808a 	bne.w	801174e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 801163a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801163c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8011640:	d137      	bne.n	80116b2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	681a      	ldr	r2, [r3, #0]
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011650:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	685b      	ldr	r3, [r3, #4]
 8011658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801165c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011660:	d113      	bne.n	801168a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	681a      	ldr	r2, [r3, #0]
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011670:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011672:	2300      	movs	r3, #0
 8011674:	627b      	str	r3, [r7, #36]	; 0x24
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	695b      	ldr	r3, [r3, #20]
 801167c:	627b      	str	r3, [r7, #36]	; 0x24
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	699b      	ldr	r3, [r3, #24]
 8011684:	627b      	str	r3, [r7, #36]	; 0x24
 8011686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011688:	e0e7      	b.n	801185a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801168a:	2300      	movs	r3, #0
 801168c:	623b      	str	r3, [r7, #32]
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	695b      	ldr	r3, [r3, #20]
 8011694:	623b      	str	r3, [r7, #32]
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	699b      	ldr	r3, [r3, #24]
 801169c:	623b      	str	r3, [r7, #32]
 801169e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	681a      	ldr	r2, [r3, #0]
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80116ae:	601a      	str	r2, [r3, #0]
 80116b0:	e0d3      	b.n	801185a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80116b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116b4:	2b08      	cmp	r3, #8
 80116b6:	d02e      	beq.n	8011716 <I2C_Master_ADDR+0x1b2>
 80116b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ba:	2b20      	cmp	r3, #32
 80116bc:	d02b      	beq.n	8011716 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80116be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116c0:	2b12      	cmp	r3, #18
 80116c2:	d102      	bne.n	80116ca <I2C_Master_ADDR+0x166>
 80116c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116c6:	2b01      	cmp	r3, #1
 80116c8:	d125      	bne.n	8011716 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80116ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116cc:	2b04      	cmp	r3, #4
 80116ce:	d00e      	beq.n	80116ee <I2C_Master_ADDR+0x18a>
 80116d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116d2:	2b02      	cmp	r3, #2
 80116d4:	d00b      	beq.n	80116ee <I2C_Master_ADDR+0x18a>
 80116d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116d8:	2b10      	cmp	r3, #16
 80116da:	d008      	beq.n	80116ee <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	681a      	ldr	r2, [r3, #0]
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80116ea:	601a      	str	r2, [r3, #0]
 80116ec:	e007      	b.n	80116fe <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	681a      	ldr	r2, [r3, #0]
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80116fc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80116fe:	2300      	movs	r3, #0
 8011700:	61fb      	str	r3, [r7, #28]
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	695b      	ldr	r3, [r3, #20]
 8011708:	61fb      	str	r3, [r7, #28]
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	699b      	ldr	r3, [r3, #24]
 8011710:	61fb      	str	r3, [r7, #28]
 8011712:	69fb      	ldr	r3, [r7, #28]
 8011714:	e0a1      	b.n	801185a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	681a      	ldr	r2, [r3, #0]
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011724:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011726:	2300      	movs	r3, #0
 8011728:	61bb      	str	r3, [r7, #24]
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	695b      	ldr	r3, [r3, #20]
 8011730:	61bb      	str	r3, [r7, #24]
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	699b      	ldr	r3, [r3, #24]
 8011738:	61bb      	str	r3, [r7, #24]
 801173a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	681a      	ldr	r2, [r3, #0]
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801174a:	601a      	str	r2, [r3, #0]
 801174c:	e085      	b.n	801185a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011752:	b29b      	uxth	r3, r3
 8011754:	2b02      	cmp	r3, #2
 8011756:	d14d      	bne.n	80117f4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8011758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801175a:	2b04      	cmp	r3, #4
 801175c:	d016      	beq.n	801178c <I2C_Master_ADDR+0x228>
 801175e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011760:	2b02      	cmp	r3, #2
 8011762:	d013      	beq.n	801178c <I2C_Master_ADDR+0x228>
 8011764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011766:	2b10      	cmp	r3, #16
 8011768:	d010      	beq.n	801178c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	681a      	ldr	r2, [r3, #0]
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011778:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	681a      	ldr	r2, [r3, #0]
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011788:	601a      	str	r2, [r3, #0]
 801178a:	e007      	b.n	801179c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	681a      	ldr	r2, [r3, #0]
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801179a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	685b      	ldr	r3, [r3, #4]
 80117a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80117a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80117aa:	d117      	bne.n	80117dc <I2C_Master_ADDR+0x278>
 80117ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80117b2:	d00b      	beq.n	80117cc <I2C_Master_ADDR+0x268>
 80117b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117b6:	2b01      	cmp	r3, #1
 80117b8:	d008      	beq.n	80117cc <I2C_Master_ADDR+0x268>
 80117ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117bc:	2b08      	cmp	r3, #8
 80117be:	d005      	beq.n	80117cc <I2C_Master_ADDR+0x268>
 80117c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117c2:	2b10      	cmp	r3, #16
 80117c4:	d002      	beq.n	80117cc <I2C_Master_ADDR+0x268>
 80117c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117c8:	2b20      	cmp	r3, #32
 80117ca:	d107      	bne.n	80117dc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	685a      	ldr	r2, [r3, #4]
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80117da:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80117dc:	2300      	movs	r3, #0
 80117de:	617b      	str	r3, [r7, #20]
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	695b      	ldr	r3, [r3, #20]
 80117e6:	617b      	str	r3, [r7, #20]
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	699b      	ldr	r3, [r3, #24]
 80117ee:	617b      	str	r3, [r7, #20]
 80117f0:	697b      	ldr	r3, [r7, #20]
 80117f2:	e032      	b.n	801185a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	681a      	ldr	r2, [r3, #0]
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011802:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	685b      	ldr	r3, [r3, #4]
 801180a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801180e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011812:	d117      	bne.n	8011844 <I2C_Master_ADDR+0x2e0>
 8011814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011816:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801181a:	d00b      	beq.n	8011834 <I2C_Master_ADDR+0x2d0>
 801181c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801181e:	2b01      	cmp	r3, #1
 8011820:	d008      	beq.n	8011834 <I2C_Master_ADDR+0x2d0>
 8011822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011824:	2b08      	cmp	r3, #8
 8011826:	d005      	beq.n	8011834 <I2C_Master_ADDR+0x2d0>
 8011828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801182a:	2b10      	cmp	r3, #16
 801182c:	d002      	beq.n	8011834 <I2C_Master_ADDR+0x2d0>
 801182e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011830:	2b20      	cmp	r3, #32
 8011832:	d107      	bne.n	8011844 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	685a      	ldr	r2, [r3, #4]
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011842:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011844:	2300      	movs	r3, #0
 8011846:	613b      	str	r3, [r7, #16]
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	695b      	ldr	r3, [r3, #20]
 801184e:	613b      	str	r3, [r7, #16]
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	699b      	ldr	r3, [r3, #24]
 8011856:	613b      	str	r3, [r7, #16]
 8011858:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	2200      	movs	r2, #0
 801185e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8011860:	e00b      	b.n	801187a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011862:	2300      	movs	r3, #0
 8011864:	60fb      	str	r3, [r7, #12]
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	695b      	ldr	r3, [r3, #20]
 801186c:	60fb      	str	r3, [r7, #12]
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	699b      	ldr	r3, [r3, #24]
 8011874:	60fb      	str	r3, [r7, #12]
 8011876:	68fb      	ldr	r3, [r7, #12]
}
 8011878:	e7ff      	b.n	801187a <I2C_Master_ADDR+0x316>
 801187a:	bf00      	nop
 801187c:	3744      	adds	r7, #68	; 0x44
 801187e:	46bd      	mov	sp, r7
 8011880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011884:	4770      	bx	lr

08011886 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8011886:	b580      	push	{r7, lr}
 8011888:	b084      	sub	sp, #16
 801188a:	af00      	add	r7, sp, #0
 801188c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011894:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801189a:	b29b      	uxth	r3, r3
 801189c:	2b00      	cmp	r3, #0
 801189e:	d02b      	beq.n	80118f8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118a4:	781a      	ldrb	r2, [r3, #0]
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118b0:	1c5a      	adds	r2, r3, #1
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80118ba:	b29b      	uxth	r3, r3
 80118bc:	3b01      	subs	r3, #1
 80118be:	b29a      	uxth	r2, r3
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80118c8:	b29b      	uxth	r3, r3
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d114      	bne.n	80118f8 <I2C_SlaveTransmit_TXE+0x72>
 80118ce:	7bfb      	ldrb	r3, [r7, #15]
 80118d0:	2b29      	cmp	r3, #41	; 0x29
 80118d2:	d111      	bne.n	80118f8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	685a      	ldr	r2, [r3, #4]
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80118e2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	2221      	movs	r2, #33	; 0x21
 80118e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	2228      	movs	r2, #40	; 0x28
 80118ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80118f2:	6878      	ldr	r0, [r7, #4]
 80118f4:	f7ff fa04 	bl	8010d00 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80118f8:	bf00      	nop
 80118fa:	3710      	adds	r7, #16
 80118fc:	46bd      	mov	sp, r7
 80118fe:	bd80      	pop	{r7, pc}

08011900 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8011900:	b480      	push	{r7}
 8011902:	b083      	sub	sp, #12
 8011904:	af00      	add	r7, sp, #0
 8011906:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801190c:	b29b      	uxth	r3, r3
 801190e:	2b00      	cmp	r3, #0
 8011910:	d011      	beq.n	8011936 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011916:	781a      	ldrb	r2, [r3, #0]
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011922:	1c5a      	adds	r2, r3, #1
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801192c:	b29b      	uxth	r3, r3
 801192e:	3b01      	subs	r3, #1
 8011930:	b29a      	uxth	r2, r3
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8011936:	bf00      	nop
 8011938:	370c      	adds	r7, #12
 801193a:	46bd      	mov	sp, r7
 801193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011940:	4770      	bx	lr

08011942 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8011942:	b580      	push	{r7, lr}
 8011944:	b084      	sub	sp, #16
 8011946:	af00      	add	r7, sp, #0
 8011948:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011950:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011956:	b29b      	uxth	r3, r3
 8011958:	2b00      	cmp	r3, #0
 801195a:	d02c      	beq.n	80119b6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	691a      	ldr	r2, [r3, #16]
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011966:	b2d2      	uxtb	r2, r2
 8011968:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801196e:	1c5a      	adds	r2, r3, #1
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011978:	b29b      	uxth	r3, r3
 801197a:	3b01      	subs	r3, #1
 801197c:	b29a      	uxth	r2, r3
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011986:	b29b      	uxth	r3, r3
 8011988:	2b00      	cmp	r3, #0
 801198a:	d114      	bne.n	80119b6 <I2C_SlaveReceive_RXNE+0x74>
 801198c:	7bfb      	ldrb	r3, [r7, #15]
 801198e:	2b2a      	cmp	r3, #42	; 0x2a
 8011990:	d111      	bne.n	80119b6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	685a      	ldr	r2, [r3, #4]
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80119a0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	2222      	movs	r2, #34	; 0x22
 80119a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	2228      	movs	r2, #40	; 0x28
 80119ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80119b0:	6878      	ldr	r0, [r7, #4]
 80119b2:	f7ff f9af 	bl	8010d14 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80119b6:	bf00      	nop
 80119b8:	3710      	adds	r7, #16
 80119ba:	46bd      	mov	sp, r7
 80119bc:	bd80      	pop	{r7, pc}

080119be <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80119be:	b480      	push	{r7}
 80119c0:	b083      	sub	sp, #12
 80119c2:	af00      	add	r7, sp, #0
 80119c4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80119ca:	b29b      	uxth	r3, r3
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d012      	beq.n	80119f6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	691a      	ldr	r2, [r3, #16]
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119da:	b2d2      	uxtb	r2, r2
 80119dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119e2:	1c5a      	adds	r2, r3, #1
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80119ec:	b29b      	uxth	r3, r3
 80119ee:	3b01      	subs	r3, #1
 80119f0:	b29a      	uxth	r2, r3
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80119f6:	bf00      	nop
 80119f8:	370c      	adds	r7, #12
 80119fa:	46bd      	mov	sp, r7
 80119fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a00:	4770      	bx	lr

08011a02 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8011a02:	b580      	push	{r7, lr}
 8011a04:	b084      	sub	sp, #16
 8011a06:	af00      	add	r7, sp, #0
 8011a08:	6078      	str	r0, [r7, #4]
 8011a0a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011a16:	b2db      	uxtb	r3, r3
 8011a18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8011a1c:	2b28      	cmp	r3, #40	; 0x28
 8011a1e:	d127      	bne.n	8011a70 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	685a      	ldr	r2, [r3, #4]
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011a2e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8011a30:	683b      	ldr	r3, [r7, #0]
 8011a32:	089b      	lsrs	r3, r3, #2
 8011a34:	f003 0301 	and.w	r3, r3, #1
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d101      	bne.n	8011a40 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8011a3c:	2301      	movs	r3, #1
 8011a3e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8011a40:	683b      	ldr	r3, [r7, #0]
 8011a42:	09db      	lsrs	r3, r3, #7
 8011a44:	f003 0301 	and.w	r3, r3, #1
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d103      	bne.n	8011a54 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	68db      	ldr	r3, [r3, #12]
 8011a50:	81bb      	strh	r3, [r7, #12]
 8011a52:	e002      	b.n	8011a5a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	699b      	ldr	r3, [r3, #24]
 8011a58:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8011a62:	89ba      	ldrh	r2, [r7, #12]
 8011a64:	7bfb      	ldrb	r3, [r7, #15]
 8011a66:	4619      	mov	r1, r3
 8011a68:	6878      	ldr	r0, [r7, #4]
 8011a6a:	f7ff f95d 	bl	8010d28 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8011a6e:	e008      	b.n	8011a82 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	f06f 0202 	mvn.w	r2, #2
 8011a78:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	2200      	movs	r2, #0
 8011a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8011a82:	bf00      	nop
 8011a84:	3710      	adds	r7, #16
 8011a86:	46bd      	mov	sp, r7
 8011a88:	bd80      	pop	{r7, pc}
	...

08011a8c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b084      	sub	sp, #16
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011a9a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	685a      	ldr	r2, [r3, #4]
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8011aaa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8011aac:	2300      	movs	r3, #0
 8011aae:	60bb      	str	r3, [r7, #8]
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	695b      	ldr	r3, [r3, #20]
 8011ab6:	60bb      	str	r3, [r7, #8]
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	681a      	ldr	r2, [r3, #0]
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	f042 0201 	orr.w	r2, r2, #1
 8011ac6:	601a      	str	r2, [r3, #0]
 8011ac8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	681a      	ldr	r2, [r3, #0]
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011ad8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	685b      	ldr	r3, [r3, #4]
 8011ae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011ae4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011ae8:	d172      	bne.n	8011bd0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8011aea:	7bfb      	ldrb	r3, [r7, #15]
 8011aec:	2b22      	cmp	r3, #34	; 0x22
 8011aee:	d002      	beq.n	8011af6 <I2C_Slave_STOPF+0x6a>
 8011af0:	7bfb      	ldrb	r3, [r7, #15]
 8011af2:	2b2a      	cmp	r3, #42	; 0x2a
 8011af4:	d135      	bne.n	8011b62 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	685b      	ldr	r3, [r3, #4]
 8011afe:	b29a      	uxth	r2, r3
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011b08:	b29b      	uxth	r3, r3
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d005      	beq.n	8011b1a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b12:	f043 0204 	orr.w	r2, r3, #4
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	685a      	ldr	r2, [r3, #4]
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011b28:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b2e:	4618      	mov	r0, r3
 8011b30:	f7fd fdae 	bl	800f690 <HAL_DMA_GetState>
 8011b34:	4603      	mov	r3, r0
 8011b36:	2b01      	cmp	r3, #1
 8011b38:	d049      	beq.n	8011bce <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b3e:	4a69      	ldr	r2, [pc, #420]	; (8011ce4 <I2C_Slave_STOPF+0x258>)
 8011b40:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b46:	4618      	mov	r0, r3
 8011b48:	f7fd fbf6 	bl	800f338 <HAL_DMA_Abort_IT>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d03d      	beq.n	8011bce <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b58:	687a      	ldr	r2, [r7, #4]
 8011b5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8011b5c:	4610      	mov	r0, r2
 8011b5e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011b60:	e035      	b.n	8011bce <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	685b      	ldr	r3, [r3, #4]
 8011b6a:	b29a      	uxth	r2, r3
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011b74:	b29b      	uxth	r3, r3
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d005      	beq.n	8011b86 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b7e:	f043 0204 	orr.w	r2, r3, #4
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	685a      	ldr	r2, [r3, #4]
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011b94:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	f7fd fd78 	bl	800f690 <HAL_DMA_GetState>
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	2b01      	cmp	r3, #1
 8011ba4:	d014      	beq.n	8011bd0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011baa:	4a4e      	ldr	r2, [pc, #312]	; (8011ce4 <I2C_Slave_STOPF+0x258>)
 8011bac:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	f7fd fbc0 	bl	800f338 <HAL_DMA_Abort_IT>
 8011bb8:	4603      	mov	r3, r0
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d008      	beq.n	8011bd0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011bc4:	687a      	ldr	r2, [r7, #4]
 8011bc6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011bc8:	4610      	mov	r0, r2
 8011bca:	4798      	blx	r3
 8011bcc:	e000      	b.n	8011bd0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011bce:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011bd4:	b29b      	uxth	r3, r3
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d03e      	beq.n	8011c58 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	695b      	ldr	r3, [r3, #20]
 8011be0:	f003 0304 	and.w	r3, r3, #4
 8011be4:	2b04      	cmp	r3, #4
 8011be6:	d112      	bne.n	8011c0e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	691a      	ldr	r2, [r3, #16]
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bf2:	b2d2      	uxtb	r2, r2
 8011bf4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bfa:	1c5a      	adds	r2, r3, #1
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011c04:	b29b      	uxth	r3, r3
 8011c06:	3b01      	subs	r3, #1
 8011c08:	b29a      	uxth	r2, r3
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	695b      	ldr	r3, [r3, #20]
 8011c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c18:	2b40      	cmp	r3, #64	; 0x40
 8011c1a:	d112      	bne.n	8011c42 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	691a      	ldr	r2, [r3, #16]
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c26:	b2d2      	uxtb	r2, r2
 8011c28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c2e:	1c5a      	adds	r2, r3, #1
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011c38:	b29b      	uxth	r3, r3
 8011c3a:	3b01      	subs	r3, #1
 8011c3c:	b29a      	uxth	r2, r3
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011c46:	b29b      	uxth	r3, r3
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d005      	beq.n	8011c58 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c50:	f043 0204 	orr.w	r2, r3, #4
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d003      	beq.n	8011c68 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8011c60:	6878      	ldr	r0, [r7, #4]
 8011c62:	f000 f8b3 	bl	8011dcc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8011c66:	e039      	b.n	8011cdc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8011c68:	7bfb      	ldrb	r3, [r7, #15]
 8011c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8011c6c:	d109      	bne.n	8011c82 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	2200      	movs	r2, #0
 8011c72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	2228      	movs	r2, #40	; 0x28
 8011c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011c7c:	6878      	ldr	r0, [r7, #4]
 8011c7e:	f7ff f849 	bl	8010d14 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011c88:	b2db      	uxtb	r3, r3
 8011c8a:	2b28      	cmp	r3, #40	; 0x28
 8011c8c:	d111      	bne.n	8011cb2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	4a15      	ldr	r2, [pc, #84]	; (8011ce8 <I2C_Slave_STOPF+0x25c>)
 8011c92:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	2200      	movs	r2, #0
 8011c98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	2220      	movs	r2, #32
 8011c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8011caa:	6878      	ldr	r0, [r7, #4]
 8011cac:	f7ff f84a 	bl	8010d44 <HAL_I2C_ListenCpltCallback>
}
 8011cb0:	e014      	b.n	8011cdc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cb6:	2b22      	cmp	r3, #34	; 0x22
 8011cb8:	d002      	beq.n	8011cc0 <I2C_Slave_STOPF+0x234>
 8011cba:	7bfb      	ldrb	r3, [r7, #15]
 8011cbc:	2b22      	cmp	r3, #34	; 0x22
 8011cbe:	d10d      	bne.n	8011cdc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	2220      	movs	r2, #32
 8011cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011cd6:	6878      	ldr	r0, [r7, #4]
 8011cd8:	f7ff f81c 	bl	8010d14 <HAL_I2C_SlaveRxCpltCallback>
}
 8011cdc:	bf00      	nop
 8011cde:	3710      	adds	r7, #16
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	bd80      	pop	{r7, pc}
 8011ce4:	08012255 	.word	0x08012255
 8011ce8:	ffff0000 	.word	0xffff0000

08011cec <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b084      	sub	sp, #16
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d00:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8011d02:	68bb      	ldr	r3, [r7, #8]
 8011d04:	2b08      	cmp	r3, #8
 8011d06:	d002      	beq.n	8011d0e <I2C_Slave_AF+0x22>
 8011d08:	68bb      	ldr	r3, [r7, #8]
 8011d0a:	2b20      	cmp	r3, #32
 8011d0c:	d129      	bne.n	8011d62 <I2C_Slave_AF+0x76>
 8011d0e:	7bfb      	ldrb	r3, [r7, #15]
 8011d10:	2b28      	cmp	r3, #40	; 0x28
 8011d12:	d126      	bne.n	8011d62 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	4a2c      	ldr	r2, [pc, #176]	; (8011dc8 <I2C_Slave_AF+0xdc>)
 8011d18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	685a      	ldr	r2, [r3, #4]
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8011d28:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8011d32:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	681a      	ldr	r2, [r3, #0]
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011d42:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	2200      	movs	r2, #0
 8011d48:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	2220      	movs	r2, #32
 8011d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	2200      	movs	r2, #0
 8011d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8011d5a:	6878      	ldr	r0, [r7, #4]
 8011d5c:	f7fe fff2 	bl	8010d44 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8011d60:	e02e      	b.n	8011dc0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8011d62:	7bfb      	ldrb	r3, [r7, #15]
 8011d64:	2b21      	cmp	r3, #33	; 0x21
 8011d66:	d126      	bne.n	8011db6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	4a17      	ldr	r2, [pc, #92]	; (8011dc8 <I2C_Slave_AF+0xdc>)
 8011d6c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	2221      	movs	r2, #33	; 0x21
 8011d72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	2220      	movs	r2, #32
 8011d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	2200      	movs	r2, #0
 8011d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	685a      	ldr	r2, [r3, #4]
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8011d92:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8011d9c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	681a      	ldr	r2, [r3, #0]
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011dac:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011dae:	6878      	ldr	r0, [r7, #4]
 8011db0:	f7fe ffa6 	bl	8010d00 <HAL_I2C_SlaveTxCpltCallback>
}
 8011db4:	e004      	b.n	8011dc0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8011dbe:	615a      	str	r2, [r3, #20]
}
 8011dc0:	bf00      	nop
 8011dc2:	3710      	adds	r7, #16
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	bd80      	pop	{r7, pc}
 8011dc8:	ffff0000 	.word	0xffff0000

08011dcc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b084      	sub	sp, #16
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011dda:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011de2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8011de4:	7bbb      	ldrb	r3, [r7, #14]
 8011de6:	2b10      	cmp	r3, #16
 8011de8:	d002      	beq.n	8011df0 <I2C_ITError+0x24>
 8011dea:	7bbb      	ldrb	r3, [r7, #14]
 8011dec:	2b40      	cmp	r3, #64	; 0x40
 8011dee:	d10a      	bne.n	8011e06 <I2C_ITError+0x3a>
 8011df0:	7bfb      	ldrb	r3, [r7, #15]
 8011df2:	2b22      	cmp	r3, #34	; 0x22
 8011df4:	d107      	bne.n	8011e06 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	681a      	ldr	r2, [r3, #0]
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011e04:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8011e06:	7bfb      	ldrb	r3, [r7, #15]
 8011e08:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8011e0c:	2b28      	cmp	r3, #40	; 0x28
 8011e0e:	d107      	bne.n	8011e20 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	2200      	movs	r2, #0
 8011e14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	2228      	movs	r2, #40	; 0x28
 8011e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8011e1e:	e015      	b.n	8011e4c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	685b      	ldr	r3, [r3, #4]
 8011e26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011e2e:	d00a      	beq.n	8011e46 <I2C_ITError+0x7a>
 8011e30:	7bfb      	ldrb	r3, [r7, #15]
 8011e32:	2b60      	cmp	r3, #96	; 0x60
 8011e34:	d007      	beq.n	8011e46 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	2220      	movs	r2, #32
 8011e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	2200      	movs	r2, #0
 8011e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	2200      	movs	r2, #0
 8011e4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	685b      	ldr	r3, [r3, #4]
 8011e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011e5a:	d162      	bne.n	8011f22 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	685a      	ldr	r2, [r3, #4]
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011e6a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011e74:	b2db      	uxtb	r3, r3
 8011e76:	2b01      	cmp	r3, #1
 8011e78:	d020      	beq.n	8011ebc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e7e:	4a6a      	ldr	r2, [pc, #424]	; (8012028 <I2C_ITError+0x25c>)
 8011e80:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e86:	4618      	mov	r0, r3
 8011e88:	f7fd fa56 	bl	800f338 <HAL_DMA_Abort_IT>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	f000 8089 	beq.w	8011fa6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	681a      	ldr	r2, [r3, #0]
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	f022 0201 	bic.w	r2, r2, #1
 8011ea2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	2220      	movs	r2, #32
 8011ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011eb2:	687a      	ldr	r2, [r7, #4]
 8011eb4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011eb6:	4610      	mov	r0, r2
 8011eb8:	4798      	blx	r3
 8011eba:	e074      	b.n	8011fa6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ec0:	4a59      	ldr	r2, [pc, #356]	; (8012028 <I2C_ITError+0x25c>)
 8011ec2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ec8:	4618      	mov	r0, r3
 8011eca:	f7fd fa35 	bl	800f338 <HAL_DMA_Abort_IT>
 8011ece:	4603      	mov	r3, r0
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d068      	beq.n	8011fa6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	695b      	ldr	r3, [r3, #20]
 8011eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ede:	2b40      	cmp	r3, #64	; 0x40
 8011ee0:	d10b      	bne.n	8011efa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	691a      	ldr	r2, [r3, #16]
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011eec:	b2d2      	uxtb	r2, r2
 8011eee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ef4:	1c5a      	adds	r2, r3, #1
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	681a      	ldr	r2, [r3, #0]
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	f022 0201 	bic.w	r2, r2, #1
 8011f08:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	2220      	movs	r2, #32
 8011f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f18:	687a      	ldr	r2, [r7, #4]
 8011f1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8011f1c:	4610      	mov	r0, r2
 8011f1e:	4798      	blx	r3
 8011f20:	e041      	b.n	8011fa6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011f28:	b2db      	uxtb	r3, r3
 8011f2a:	2b60      	cmp	r3, #96	; 0x60
 8011f2c:	d125      	bne.n	8011f7a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	2220      	movs	r2, #32
 8011f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	2200      	movs	r2, #0
 8011f3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	695b      	ldr	r3, [r3, #20]
 8011f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f46:	2b40      	cmp	r3, #64	; 0x40
 8011f48:	d10b      	bne.n	8011f62 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	691a      	ldr	r2, [r3, #16]
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f54:	b2d2      	uxtb	r2, r2
 8011f56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f5c:	1c5a      	adds	r2, r3, #1
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	681a      	ldr	r2, [r3, #0]
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	f022 0201 	bic.w	r2, r2, #1
 8011f70:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8011f72:	6878      	ldr	r0, [r7, #4]
 8011f74:	f7fe ff0e 	bl	8010d94 <HAL_I2C_AbortCpltCallback>
 8011f78:	e015      	b.n	8011fa6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	695b      	ldr	r3, [r3, #20]
 8011f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f84:	2b40      	cmp	r3, #64	; 0x40
 8011f86:	d10b      	bne.n	8011fa0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	691a      	ldr	r2, [r3, #16]
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f92:	b2d2      	uxtb	r2, r2
 8011f94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f9a:	1c5a      	adds	r2, r3, #1
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8011fa0:	6878      	ldr	r0, [r7, #4]
 8011fa2:	f7fe feed 	bl	8010d80 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011faa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8011fac:	68bb      	ldr	r3, [r7, #8]
 8011fae:	f003 0301 	and.w	r3, r3, #1
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d10e      	bne.n	8011fd4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8011fb6:	68bb      	ldr	r3, [r7, #8]
 8011fb8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d109      	bne.n	8011fd4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8011fc0:	68bb      	ldr	r3, [r7, #8]
 8011fc2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d104      	bne.n	8011fd4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8011fca:	68bb      	ldr	r3, [r7, #8]
 8011fcc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d007      	beq.n	8011fe4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	685a      	ldr	r2, [r3, #4]
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8011fe2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011fea:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ff0:	f003 0304 	and.w	r3, r3, #4
 8011ff4:	2b04      	cmp	r3, #4
 8011ff6:	d113      	bne.n	8012020 <I2C_ITError+0x254>
 8011ff8:	7bfb      	ldrb	r3, [r7, #15]
 8011ffa:	2b28      	cmp	r3, #40	; 0x28
 8011ffc:	d110      	bne.n	8012020 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	4a0a      	ldr	r2, [pc, #40]	; (801202c <I2C_ITError+0x260>)
 8012002:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	2200      	movs	r2, #0
 8012008:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	2220      	movs	r2, #32
 801200e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	2200      	movs	r2, #0
 8012016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801201a:	6878      	ldr	r0, [r7, #4]
 801201c:	f7fe fe92 	bl	8010d44 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8012020:	bf00      	nop
 8012022:	3710      	adds	r7, #16
 8012024:	46bd      	mov	sp, r7
 8012026:	bd80      	pop	{r7, pc}
 8012028:	08012255 	.word	0x08012255
 801202c:	ffff0000 	.word	0xffff0000

08012030 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b086      	sub	sp, #24
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801203c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801203e:	697b      	ldr	r3, [r7, #20]
 8012040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012044:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8012046:	697b      	ldr	r3, [r7, #20]
 8012048:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801204c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801204e:	697b      	ldr	r3, [r7, #20]
 8012050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012052:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8012054:	697b      	ldr	r3, [r7, #20]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	685a      	ldr	r2, [r3, #4]
 801205a:	697b      	ldr	r3, [r7, #20]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8012062:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8012064:	697b      	ldr	r3, [r7, #20]
 8012066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012068:	2b00      	cmp	r3, #0
 801206a:	d003      	beq.n	8012074 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801206c:	697b      	ldr	r3, [r7, #20]
 801206e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012070:	2200      	movs	r2, #0
 8012072:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8012074:	697b      	ldr	r3, [r7, #20]
 8012076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012078:	2b00      	cmp	r3, #0
 801207a:	d003      	beq.n	8012084 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801207c:	697b      	ldr	r3, [r7, #20]
 801207e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012080:	2200      	movs	r2, #0
 8012082:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8012084:	7cfb      	ldrb	r3, [r7, #19]
 8012086:	f003 0321 	and.w	r3, r3, #33	; 0x21
 801208a:	2b21      	cmp	r3, #33	; 0x21
 801208c:	d007      	beq.n	801209e <I2C_DMAXferCplt+0x6e>
 801208e:	7cfb      	ldrb	r3, [r7, #19]
 8012090:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8012094:	2b22      	cmp	r3, #34	; 0x22
 8012096:	d131      	bne.n	80120fc <I2C_DMAXferCplt+0xcc>
 8012098:	7cbb      	ldrb	r3, [r7, #18]
 801209a:	2b20      	cmp	r3, #32
 801209c:	d12e      	bne.n	80120fc <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801209e:	697b      	ldr	r3, [r7, #20]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	685a      	ldr	r2, [r3, #4]
 80120a4:	697b      	ldr	r3, [r7, #20]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80120ac:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80120ae:	697b      	ldr	r3, [r7, #20]
 80120b0:	2200      	movs	r2, #0
 80120b2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80120b4:	7cfb      	ldrb	r3, [r7, #19]
 80120b6:	2b29      	cmp	r3, #41	; 0x29
 80120b8:	d10a      	bne.n	80120d0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80120ba:	697b      	ldr	r3, [r7, #20]
 80120bc:	2221      	movs	r2, #33	; 0x21
 80120be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80120c0:	697b      	ldr	r3, [r7, #20]
 80120c2:	2228      	movs	r2, #40	; 0x28
 80120c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80120c8:	6978      	ldr	r0, [r7, #20]
 80120ca:	f7fe fe19 	bl	8010d00 <HAL_I2C_SlaveTxCpltCallback>
 80120ce:	e00c      	b.n	80120ea <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80120d0:	7cfb      	ldrb	r3, [r7, #19]
 80120d2:	2b2a      	cmp	r3, #42	; 0x2a
 80120d4:	d109      	bne.n	80120ea <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80120d6:	697b      	ldr	r3, [r7, #20]
 80120d8:	2222      	movs	r2, #34	; 0x22
 80120da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80120dc:	697b      	ldr	r3, [r7, #20]
 80120de:	2228      	movs	r2, #40	; 0x28
 80120e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80120e4:	6978      	ldr	r0, [r7, #20]
 80120e6:	f7fe fe15 	bl	8010d14 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80120ea:	697b      	ldr	r3, [r7, #20]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	685a      	ldr	r2, [r3, #4]
 80120f0:	697b      	ldr	r3, [r7, #20]
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80120f8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80120fa:	e06a      	b.n	80121d2 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80120fc:	697b      	ldr	r3, [r7, #20]
 80120fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012102:	b2db      	uxtb	r3, r3
 8012104:	2b00      	cmp	r3, #0
 8012106:	d064      	beq.n	80121d2 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8012108:	697b      	ldr	r3, [r7, #20]
 801210a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801210c:	b29b      	uxth	r3, r3
 801210e:	2b01      	cmp	r3, #1
 8012110:	d107      	bne.n	8012122 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012112:	697b      	ldr	r3, [r7, #20]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	681a      	ldr	r2, [r3, #0]
 8012118:	697b      	ldr	r3, [r7, #20]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012120:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8012122:	697b      	ldr	r3, [r7, #20]
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	685a      	ldr	r2, [r3, #4]
 8012128:	697b      	ldr	r3, [r7, #20]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8012130:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8012138:	d009      	beq.n	801214e <I2C_DMAXferCplt+0x11e>
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	2b08      	cmp	r3, #8
 801213e:	d006      	beq.n	801214e <I2C_DMAXferCplt+0x11e>
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8012146:	d002      	beq.n	801214e <I2C_DMAXferCplt+0x11e>
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	2b20      	cmp	r3, #32
 801214c:	d107      	bne.n	801215e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801214e:	697b      	ldr	r3, [r7, #20]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	681a      	ldr	r2, [r3, #0]
 8012154:	697b      	ldr	r3, [r7, #20]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801215c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801215e:	697b      	ldr	r3, [r7, #20]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	685a      	ldr	r2, [r3, #4]
 8012164:	697b      	ldr	r3, [r7, #20]
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801216c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801216e:	697b      	ldr	r3, [r7, #20]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	685a      	ldr	r2, [r3, #4]
 8012174:	697b      	ldr	r3, [r7, #20]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801217c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 801217e:	697b      	ldr	r3, [r7, #20]
 8012180:	2200      	movs	r2, #0
 8012182:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8012184:	697b      	ldr	r3, [r7, #20]
 8012186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012188:	2b00      	cmp	r3, #0
 801218a:	d003      	beq.n	8012194 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 801218c:	6978      	ldr	r0, [r7, #20]
 801218e:	f7fe fdf7 	bl	8010d80 <HAL_I2C_ErrorCallback>
}
 8012192:	e01e      	b.n	80121d2 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8012194:	697b      	ldr	r3, [r7, #20]
 8012196:	2220      	movs	r2, #32
 8012198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801219c:	697b      	ldr	r3, [r7, #20]
 801219e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80121a2:	b2db      	uxtb	r3, r3
 80121a4:	2b40      	cmp	r3, #64	; 0x40
 80121a6:	d10a      	bne.n	80121be <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80121a8:	697b      	ldr	r3, [r7, #20]
 80121aa:	2200      	movs	r2, #0
 80121ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80121b0:	697b      	ldr	r3, [r7, #20]
 80121b2:	2200      	movs	r2, #0
 80121b4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80121b6:	6978      	ldr	r0, [r7, #20]
 80121b8:	f7fe fdd8 	bl	8010d6c <HAL_I2C_MemRxCpltCallback>
}
 80121bc:	e009      	b.n	80121d2 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80121be:	697b      	ldr	r3, [r7, #20]
 80121c0:	2200      	movs	r2, #0
 80121c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80121c6:	697b      	ldr	r3, [r7, #20]
 80121c8:	2212      	movs	r2, #18
 80121ca:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80121cc:	6978      	ldr	r0, [r7, #20]
 80121ce:	f7fa fe17 	bl	800ce00 <HAL_I2C_MasterRxCpltCallback>
}
 80121d2:	bf00      	nop
 80121d4:	3718      	adds	r7, #24
 80121d6:	46bd      	mov	sp, r7
 80121d8:	bd80      	pop	{r7, pc}

080121da <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80121da:	b580      	push	{r7, lr}
 80121dc:	b084      	sub	sp, #16
 80121de:	af00      	add	r7, sp, #0
 80121e0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121e6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d003      	beq.n	80121f8 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121f4:	2200      	movs	r2, #0
 80121f6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d003      	beq.n	8012208 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012204:	2200      	movs	r2, #0
 8012206:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8012208:	6878      	ldr	r0, [r7, #4]
 801220a:	f7fd fa4f 	bl	800f6ac <HAL_DMA_GetError>
 801220e:	4603      	mov	r3, r0
 8012210:	2b02      	cmp	r3, #2
 8012212:	d01b      	beq.n	801224c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	681a      	ldr	r2, [r3, #0]
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012222:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	2200      	movs	r2, #0
 8012228:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	2220      	movs	r2, #32
 801222e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	2200      	movs	r2, #0
 8012236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801223e:	f043 0210 	orr.w	r2, r3, #16
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8012246:	68f8      	ldr	r0, [r7, #12]
 8012248:	f7fe fd9a 	bl	8010d80 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801224c:	bf00      	nop
 801224e:	3710      	adds	r7, #16
 8012250:	46bd      	mov	sp, r7
 8012252:	bd80      	pop	{r7, pc}

08012254 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8012254:	b580      	push	{r7, lr}
 8012256:	b086      	sub	sp, #24
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801225c:	2300      	movs	r3, #0
 801225e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012264:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8012266:	697b      	ldr	r3, [r7, #20]
 8012268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801226c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 801226e:	4b4b      	ldr	r3, [pc, #300]	; (801239c <I2C_DMAAbort+0x148>)
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	08db      	lsrs	r3, r3, #3
 8012274:	4a4a      	ldr	r2, [pc, #296]	; (80123a0 <I2C_DMAAbort+0x14c>)
 8012276:	fba2 2303 	umull	r2, r3, r2, r3
 801227a:	0a1a      	lsrs	r2, r3, #8
 801227c:	4613      	mov	r3, r2
 801227e:	009b      	lsls	r3, r3, #2
 8012280:	4413      	add	r3, r2
 8012282:	00da      	lsls	r2, r3, #3
 8012284:	1ad3      	subs	r3, r2, r3
 8012286:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d106      	bne.n	801229c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801228e:	697b      	ldr	r3, [r7, #20]
 8012290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012292:	f043 0220 	orr.w	r2, r3, #32
 8012296:	697b      	ldr	r3, [r7, #20]
 8012298:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 801229a:	e00a      	b.n	80122b2 <I2C_DMAAbort+0x5e>
    }
    count--;
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	3b01      	subs	r3, #1
 80122a0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80122a2:	697b      	ldr	r3, [r7, #20]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80122ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80122b0:	d0ea      	beq.n	8012288 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80122b2:	697b      	ldr	r3, [r7, #20]
 80122b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d003      	beq.n	80122c2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80122ba:	697b      	ldr	r3, [r7, #20]
 80122bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122be:	2200      	movs	r2, #0
 80122c0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80122c2:	697b      	ldr	r3, [r7, #20]
 80122c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d003      	beq.n	80122d2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80122ca:	697b      	ldr	r3, [r7, #20]
 80122cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122ce:	2200      	movs	r2, #0
 80122d0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80122d2:	697b      	ldr	r3, [r7, #20]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	681a      	ldr	r2, [r3, #0]
 80122d8:	697b      	ldr	r3, [r7, #20]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80122e0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80122e2:	697b      	ldr	r3, [r7, #20]
 80122e4:	2200      	movs	r2, #0
 80122e6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80122e8:	697b      	ldr	r3, [r7, #20]
 80122ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d003      	beq.n	80122f8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80122f0:	697b      	ldr	r3, [r7, #20]
 80122f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122f4:	2200      	movs	r2, #0
 80122f6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80122f8:	697b      	ldr	r3, [r7, #20]
 80122fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d003      	beq.n	8012308 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8012300:	697b      	ldr	r3, [r7, #20]
 8012302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012304:	2200      	movs	r2, #0
 8012306:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8012308:	697b      	ldr	r3, [r7, #20]
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	681a      	ldr	r2, [r3, #0]
 801230e:	697b      	ldr	r3, [r7, #20]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	f022 0201 	bic.w	r2, r2, #1
 8012316:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8012318:	697b      	ldr	r3, [r7, #20]
 801231a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801231e:	b2db      	uxtb	r3, r3
 8012320:	2b60      	cmp	r3, #96	; 0x60
 8012322:	d10e      	bne.n	8012342 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8012324:	697b      	ldr	r3, [r7, #20]
 8012326:	2220      	movs	r2, #32
 8012328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801232c:	697b      	ldr	r3, [r7, #20]
 801232e:	2200      	movs	r2, #0
 8012330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8012334:	697b      	ldr	r3, [r7, #20]
 8012336:	2200      	movs	r2, #0
 8012338:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801233a:	6978      	ldr	r0, [r7, #20]
 801233c:	f7fe fd2a 	bl	8010d94 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8012340:	e027      	b.n	8012392 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8012342:	7cfb      	ldrb	r3, [r7, #19]
 8012344:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8012348:	2b28      	cmp	r3, #40	; 0x28
 801234a:	d117      	bne.n	801237c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 801234c:	697b      	ldr	r3, [r7, #20]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	681a      	ldr	r2, [r3, #0]
 8012352:	697b      	ldr	r3, [r7, #20]
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	f042 0201 	orr.w	r2, r2, #1
 801235a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801235c:	697b      	ldr	r3, [r7, #20]
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	681a      	ldr	r2, [r3, #0]
 8012362:	697b      	ldr	r3, [r7, #20]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801236a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 801236c:	697b      	ldr	r3, [r7, #20]
 801236e:	2200      	movs	r2, #0
 8012370:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8012372:	697b      	ldr	r3, [r7, #20]
 8012374:	2228      	movs	r2, #40	; 0x28
 8012376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801237a:	e007      	b.n	801238c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 801237c:	697b      	ldr	r3, [r7, #20]
 801237e:	2220      	movs	r2, #32
 8012380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8012384:	697b      	ldr	r3, [r7, #20]
 8012386:	2200      	movs	r2, #0
 8012388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 801238c:	6978      	ldr	r0, [r7, #20]
 801238e:	f7fe fcf7 	bl	8010d80 <HAL_I2C_ErrorCallback>
}
 8012392:	bf00      	nop
 8012394:	3718      	adds	r7, #24
 8012396:	46bd      	mov	sp, r7
 8012398:	bd80      	pop	{r7, pc}
 801239a:	bf00      	nop
 801239c:	200000c0 	.word	0x200000c0
 80123a0:	14f8b589 	.word	0x14f8b589

080123a4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80123a4:	b480      	push	{r7}
 80123a6:	b085      	sub	sp, #20
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80123ac:	2300      	movs	r3, #0
 80123ae:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80123b0:	4b13      	ldr	r3, [pc, #76]	; (8012400 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	08db      	lsrs	r3, r3, #3
 80123b6:	4a13      	ldr	r2, [pc, #76]	; (8012404 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80123b8:	fba2 2303 	umull	r2, r3, r2, r3
 80123bc:	0a1a      	lsrs	r2, r3, #8
 80123be:	4613      	mov	r3, r2
 80123c0:	009b      	lsls	r3, r3, #2
 80123c2:	4413      	add	r3, r2
 80123c4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	3b01      	subs	r3, #1
 80123ca:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d107      	bne.n	80123e2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123d6:	f043 0220 	orr.w	r2, r3, #32
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80123de:	2301      	movs	r3, #1
 80123e0:	e008      	b.n	80123f4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80123ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80123f0:	d0e9      	beq.n	80123c6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80123f2:	2300      	movs	r3, #0
}
 80123f4:	4618      	mov	r0, r3
 80123f6:	3714      	adds	r7, #20
 80123f8:	46bd      	mov	sp, r7
 80123fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123fe:	4770      	bx	lr
 8012400:	200000c0 	.word	0x200000c0
 8012404:	14f8b589 	.word	0x14f8b589

08012408 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8012408:	b480      	push	{r7}
 801240a:	b083      	sub	sp, #12
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012414:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8012418:	d103      	bne.n	8012422 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2201      	movs	r2, #1
 801241e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8012420:	e007      	b.n	8012432 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012426:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801242a:	d102      	bne.n	8012432 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	2208      	movs	r2, #8
 8012430:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8012432:	bf00      	nop
 8012434:	370c      	adds	r7, #12
 8012436:	46bd      	mov	sp, r7
 8012438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801243c:	4770      	bx	lr
	...

08012440 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012440:	b580      	push	{r7, lr}
 8012442:	b086      	sub	sp, #24
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d101      	bne.n	8012452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801244e:	2301      	movs	r3, #1
 8012450:	e25b      	b.n	801290a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	f003 0301 	and.w	r3, r3, #1
 801245a:	2b00      	cmp	r3, #0
 801245c:	d075      	beq.n	801254a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801245e:	4ba3      	ldr	r3, [pc, #652]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 8012460:	689b      	ldr	r3, [r3, #8]
 8012462:	f003 030c 	and.w	r3, r3, #12
 8012466:	2b04      	cmp	r3, #4
 8012468:	d00c      	beq.n	8012484 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801246a:	4ba0      	ldr	r3, [pc, #640]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 801246c:	689b      	ldr	r3, [r3, #8]
 801246e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012472:	2b08      	cmp	r3, #8
 8012474:	d112      	bne.n	801249c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012476:	4b9d      	ldr	r3, [pc, #628]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 8012478:	685b      	ldr	r3, [r3, #4]
 801247a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801247e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012482:	d10b      	bne.n	801249c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012484:	4b99      	ldr	r3, [pc, #612]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801248c:	2b00      	cmp	r3, #0
 801248e:	d05b      	beq.n	8012548 <HAL_RCC_OscConfig+0x108>
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	685b      	ldr	r3, [r3, #4]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d157      	bne.n	8012548 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8012498:	2301      	movs	r3, #1
 801249a:	e236      	b.n	801290a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	685b      	ldr	r3, [r3, #4]
 80124a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80124a4:	d106      	bne.n	80124b4 <HAL_RCC_OscConfig+0x74>
 80124a6:	4b91      	ldr	r3, [pc, #580]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	4a90      	ldr	r2, [pc, #576]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 80124ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80124b0:	6013      	str	r3, [r2, #0]
 80124b2:	e01d      	b.n	80124f0 <HAL_RCC_OscConfig+0xb0>
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	685b      	ldr	r3, [r3, #4]
 80124b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80124bc:	d10c      	bne.n	80124d8 <HAL_RCC_OscConfig+0x98>
 80124be:	4b8b      	ldr	r3, [pc, #556]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	4a8a      	ldr	r2, [pc, #552]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 80124c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80124c8:	6013      	str	r3, [r2, #0]
 80124ca:	4b88      	ldr	r3, [pc, #544]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	4a87      	ldr	r2, [pc, #540]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 80124d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80124d4:	6013      	str	r3, [r2, #0]
 80124d6:	e00b      	b.n	80124f0 <HAL_RCC_OscConfig+0xb0>
 80124d8:	4b84      	ldr	r3, [pc, #528]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	4a83      	ldr	r2, [pc, #524]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 80124de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80124e2:	6013      	str	r3, [r2, #0]
 80124e4:	4b81      	ldr	r3, [pc, #516]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	4a80      	ldr	r2, [pc, #512]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 80124ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80124ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	685b      	ldr	r3, [r3, #4]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d013      	beq.n	8012520 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80124f8:	f7fb fdbc 	bl	800e074 <HAL_GetTick>
 80124fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80124fe:	e008      	b.n	8012512 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012500:	f7fb fdb8 	bl	800e074 <HAL_GetTick>
 8012504:	4602      	mov	r2, r0
 8012506:	693b      	ldr	r3, [r7, #16]
 8012508:	1ad3      	subs	r3, r2, r3
 801250a:	2b64      	cmp	r3, #100	; 0x64
 801250c:	d901      	bls.n	8012512 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801250e:	2303      	movs	r3, #3
 8012510:	e1fb      	b.n	801290a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012512:	4b76      	ldr	r3, [pc, #472]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801251a:	2b00      	cmp	r3, #0
 801251c:	d0f0      	beq.n	8012500 <HAL_RCC_OscConfig+0xc0>
 801251e:	e014      	b.n	801254a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012520:	f7fb fda8 	bl	800e074 <HAL_GetTick>
 8012524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012526:	e008      	b.n	801253a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012528:	f7fb fda4 	bl	800e074 <HAL_GetTick>
 801252c:	4602      	mov	r2, r0
 801252e:	693b      	ldr	r3, [r7, #16]
 8012530:	1ad3      	subs	r3, r2, r3
 8012532:	2b64      	cmp	r3, #100	; 0x64
 8012534:	d901      	bls.n	801253a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8012536:	2303      	movs	r3, #3
 8012538:	e1e7      	b.n	801290a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801253a:	4b6c      	ldr	r3, [pc, #432]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012542:	2b00      	cmp	r3, #0
 8012544:	d1f0      	bne.n	8012528 <HAL_RCC_OscConfig+0xe8>
 8012546:	e000      	b.n	801254a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	f003 0302 	and.w	r3, r3, #2
 8012552:	2b00      	cmp	r3, #0
 8012554:	d063      	beq.n	801261e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012556:	4b65      	ldr	r3, [pc, #404]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 8012558:	689b      	ldr	r3, [r3, #8]
 801255a:	f003 030c 	and.w	r3, r3, #12
 801255e:	2b00      	cmp	r3, #0
 8012560:	d00b      	beq.n	801257a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012562:	4b62      	ldr	r3, [pc, #392]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 8012564:	689b      	ldr	r3, [r3, #8]
 8012566:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801256a:	2b08      	cmp	r3, #8
 801256c:	d11c      	bne.n	80125a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801256e:	4b5f      	ldr	r3, [pc, #380]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 8012570:	685b      	ldr	r3, [r3, #4]
 8012572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012576:	2b00      	cmp	r3, #0
 8012578:	d116      	bne.n	80125a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801257a:	4b5c      	ldr	r3, [pc, #368]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	f003 0302 	and.w	r3, r3, #2
 8012582:	2b00      	cmp	r3, #0
 8012584:	d005      	beq.n	8012592 <HAL_RCC_OscConfig+0x152>
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	68db      	ldr	r3, [r3, #12]
 801258a:	2b01      	cmp	r3, #1
 801258c:	d001      	beq.n	8012592 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801258e:	2301      	movs	r3, #1
 8012590:	e1bb      	b.n	801290a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012592:	4b56      	ldr	r3, [pc, #344]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	691b      	ldr	r3, [r3, #16]
 801259e:	00db      	lsls	r3, r3, #3
 80125a0:	4952      	ldr	r1, [pc, #328]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 80125a2:	4313      	orrs	r3, r2
 80125a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80125a6:	e03a      	b.n	801261e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	68db      	ldr	r3, [r3, #12]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d020      	beq.n	80125f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80125b0:	4b4f      	ldr	r3, [pc, #316]	; (80126f0 <HAL_RCC_OscConfig+0x2b0>)
 80125b2:	2201      	movs	r2, #1
 80125b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80125b6:	f7fb fd5d 	bl	800e074 <HAL_GetTick>
 80125ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80125bc:	e008      	b.n	80125d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80125be:	f7fb fd59 	bl	800e074 <HAL_GetTick>
 80125c2:	4602      	mov	r2, r0
 80125c4:	693b      	ldr	r3, [r7, #16]
 80125c6:	1ad3      	subs	r3, r2, r3
 80125c8:	2b02      	cmp	r3, #2
 80125ca:	d901      	bls.n	80125d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80125cc:	2303      	movs	r3, #3
 80125ce:	e19c      	b.n	801290a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80125d0:	4b46      	ldr	r3, [pc, #280]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	f003 0302 	and.w	r3, r3, #2
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d0f0      	beq.n	80125be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80125dc:	4b43      	ldr	r3, [pc, #268]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	691b      	ldr	r3, [r3, #16]
 80125e8:	00db      	lsls	r3, r3, #3
 80125ea:	4940      	ldr	r1, [pc, #256]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 80125ec:	4313      	orrs	r3, r2
 80125ee:	600b      	str	r3, [r1, #0]
 80125f0:	e015      	b.n	801261e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80125f2:	4b3f      	ldr	r3, [pc, #252]	; (80126f0 <HAL_RCC_OscConfig+0x2b0>)
 80125f4:	2200      	movs	r2, #0
 80125f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80125f8:	f7fb fd3c 	bl	800e074 <HAL_GetTick>
 80125fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80125fe:	e008      	b.n	8012612 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012600:	f7fb fd38 	bl	800e074 <HAL_GetTick>
 8012604:	4602      	mov	r2, r0
 8012606:	693b      	ldr	r3, [r7, #16]
 8012608:	1ad3      	subs	r3, r2, r3
 801260a:	2b02      	cmp	r3, #2
 801260c:	d901      	bls.n	8012612 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801260e:	2303      	movs	r3, #3
 8012610:	e17b      	b.n	801290a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012612:	4b36      	ldr	r3, [pc, #216]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	f003 0302 	and.w	r3, r3, #2
 801261a:	2b00      	cmp	r3, #0
 801261c:	d1f0      	bne.n	8012600 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	f003 0308 	and.w	r3, r3, #8
 8012626:	2b00      	cmp	r3, #0
 8012628:	d030      	beq.n	801268c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	695b      	ldr	r3, [r3, #20]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d016      	beq.n	8012660 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012632:	4b30      	ldr	r3, [pc, #192]	; (80126f4 <HAL_RCC_OscConfig+0x2b4>)
 8012634:	2201      	movs	r2, #1
 8012636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012638:	f7fb fd1c 	bl	800e074 <HAL_GetTick>
 801263c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801263e:	e008      	b.n	8012652 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012640:	f7fb fd18 	bl	800e074 <HAL_GetTick>
 8012644:	4602      	mov	r2, r0
 8012646:	693b      	ldr	r3, [r7, #16]
 8012648:	1ad3      	subs	r3, r2, r3
 801264a:	2b02      	cmp	r3, #2
 801264c:	d901      	bls.n	8012652 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801264e:	2303      	movs	r3, #3
 8012650:	e15b      	b.n	801290a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012652:	4b26      	ldr	r3, [pc, #152]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 8012654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012656:	f003 0302 	and.w	r3, r3, #2
 801265a:	2b00      	cmp	r3, #0
 801265c:	d0f0      	beq.n	8012640 <HAL_RCC_OscConfig+0x200>
 801265e:	e015      	b.n	801268c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012660:	4b24      	ldr	r3, [pc, #144]	; (80126f4 <HAL_RCC_OscConfig+0x2b4>)
 8012662:	2200      	movs	r2, #0
 8012664:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012666:	f7fb fd05 	bl	800e074 <HAL_GetTick>
 801266a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801266c:	e008      	b.n	8012680 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801266e:	f7fb fd01 	bl	800e074 <HAL_GetTick>
 8012672:	4602      	mov	r2, r0
 8012674:	693b      	ldr	r3, [r7, #16]
 8012676:	1ad3      	subs	r3, r2, r3
 8012678:	2b02      	cmp	r3, #2
 801267a:	d901      	bls.n	8012680 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801267c:	2303      	movs	r3, #3
 801267e:	e144      	b.n	801290a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012680:	4b1a      	ldr	r3, [pc, #104]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 8012682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012684:	f003 0302 	and.w	r3, r3, #2
 8012688:	2b00      	cmp	r3, #0
 801268a:	d1f0      	bne.n	801266e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	f003 0304 	and.w	r3, r3, #4
 8012694:	2b00      	cmp	r3, #0
 8012696:	f000 80a0 	beq.w	80127da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 801269a:	2300      	movs	r3, #0
 801269c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801269e:	4b13      	ldr	r3, [pc, #76]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 80126a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d10f      	bne.n	80126ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80126aa:	2300      	movs	r3, #0
 80126ac:	60bb      	str	r3, [r7, #8]
 80126ae:	4b0f      	ldr	r3, [pc, #60]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 80126b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126b2:	4a0e      	ldr	r2, [pc, #56]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 80126b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80126b8:	6413      	str	r3, [r2, #64]	; 0x40
 80126ba:	4b0c      	ldr	r3, [pc, #48]	; (80126ec <HAL_RCC_OscConfig+0x2ac>)
 80126bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80126c2:	60bb      	str	r3, [r7, #8]
 80126c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80126c6:	2301      	movs	r3, #1
 80126c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80126ca:	4b0b      	ldr	r3, [pc, #44]	; (80126f8 <HAL_RCC_OscConfig+0x2b8>)
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d121      	bne.n	801271a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80126d6:	4b08      	ldr	r3, [pc, #32]	; (80126f8 <HAL_RCC_OscConfig+0x2b8>)
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	4a07      	ldr	r2, [pc, #28]	; (80126f8 <HAL_RCC_OscConfig+0x2b8>)
 80126dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80126e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80126e2:	f7fb fcc7 	bl	800e074 <HAL_GetTick>
 80126e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80126e8:	e011      	b.n	801270e <HAL_RCC_OscConfig+0x2ce>
 80126ea:	bf00      	nop
 80126ec:	40023800 	.word	0x40023800
 80126f0:	42470000 	.word	0x42470000
 80126f4:	42470e80 	.word	0x42470e80
 80126f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80126fc:	f7fb fcba 	bl	800e074 <HAL_GetTick>
 8012700:	4602      	mov	r2, r0
 8012702:	693b      	ldr	r3, [r7, #16]
 8012704:	1ad3      	subs	r3, r2, r3
 8012706:	2b02      	cmp	r3, #2
 8012708:	d901      	bls.n	801270e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 801270a:	2303      	movs	r3, #3
 801270c:	e0fd      	b.n	801290a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801270e:	4b81      	ldr	r3, [pc, #516]	; (8012914 <HAL_RCC_OscConfig+0x4d4>)
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012716:	2b00      	cmp	r3, #0
 8012718:	d0f0      	beq.n	80126fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	689b      	ldr	r3, [r3, #8]
 801271e:	2b01      	cmp	r3, #1
 8012720:	d106      	bne.n	8012730 <HAL_RCC_OscConfig+0x2f0>
 8012722:	4b7d      	ldr	r3, [pc, #500]	; (8012918 <HAL_RCC_OscConfig+0x4d8>)
 8012724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012726:	4a7c      	ldr	r2, [pc, #496]	; (8012918 <HAL_RCC_OscConfig+0x4d8>)
 8012728:	f043 0301 	orr.w	r3, r3, #1
 801272c:	6713      	str	r3, [r2, #112]	; 0x70
 801272e:	e01c      	b.n	801276a <HAL_RCC_OscConfig+0x32a>
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	689b      	ldr	r3, [r3, #8]
 8012734:	2b05      	cmp	r3, #5
 8012736:	d10c      	bne.n	8012752 <HAL_RCC_OscConfig+0x312>
 8012738:	4b77      	ldr	r3, [pc, #476]	; (8012918 <HAL_RCC_OscConfig+0x4d8>)
 801273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801273c:	4a76      	ldr	r2, [pc, #472]	; (8012918 <HAL_RCC_OscConfig+0x4d8>)
 801273e:	f043 0304 	orr.w	r3, r3, #4
 8012742:	6713      	str	r3, [r2, #112]	; 0x70
 8012744:	4b74      	ldr	r3, [pc, #464]	; (8012918 <HAL_RCC_OscConfig+0x4d8>)
 8012746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012748:	4a73      	ldr	r2, [pc, #460]	; (8012918 <HAL_RCC_OscConfig+0x4d8>)
 801274a:	f043 0301 	orr.w	r3, r3, #1
 801274e:	6713      	str	r3, [r2, #112]	; 0x70
 8012750:	e00b      	b.n	801276a <HAL_RCC_OscConfig+0x32a>
 8012752:	4b71      	ldr	r3, [pc, #452]	; (8012918 <HAL_RCC_OscConfig+0x4d8>)
 8012754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012756:	4a70      	ldr	r2, [pc, #448]	; (8012918 <HAL_RCC_OscConfig+0x4d8>)
 8012758:	f023 0301 	bic.w	r3, r3, #1
 801275c:	6713      	str	r3, [r2, #112]	; 0x70
 801275e:	4b6e      	ldr	r3, [pc, #440]	; (8012918 <HAL_RCC_OscConfig+0x4d8>)
 8012760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012762:	4a6d      	ldr	r2, [pc, #436]	; (8012918 <HAL_RCC_OscConfig+0x4d8>)
 8012764:	f023 0304 	bic.w	r3, r3, #4
 8012768:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	689b      	ldr	r3, [r3, #8]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d015      	beq.n	801279e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012772:	f7fb fc7f 	bl	800e074 <HAL_GetTick>
 8012776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012778:	e00a      	b.n	8012790 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801277a:	f7fb fc7b 	bl	800e074 <HAL_GetTick>
 801277e:	4602      	mov	r2, r0
 8012780:	693b      	ldr	r3, [r7, #16]
 8012782:	1ad3      	subs	r3, r2, r3
 8012784:	f241 3288 	movw	r2, #5000	; 0x1388
 8012788:	4293      	cmp	r3, r2
 801278a:	d901      	bls.n	8012790 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 801278c:	2303      	movs	r3, #3
 801278e:	e0bc      	b.n	801290a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012790:	4b61      	ldr	r3, [pc, #388]	; (8012918 <HAL_RCC_OscConfig+0x4d8>)
 8012792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012794:	f003 0302 	and.w	r3, r3, #2
 8012798:	2b00      	cmp	r3, #0
 801279a:	d0ee      	beq.n	801277a <HAL_RCC_OscConfig+0x33a>
 801279c:	e014      	b.n	80127c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801279e:	f7fb fc69 	bl	800e074 <HAL_GetTick>
 80127a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80127a4:	e00a      	b.n	80127bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80127a6:	f7fb fc65 	bl	800e074 <HAL_GetTick>
 80127aa:	4602      	mov	r2, r0
 80127ac:	693b      	ldr	r3, [r7, #16]
 80127ae:	1ad3      	subs	r3, r2, r3
 80127b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80127b4:	4293      	cmp	r3, r2
 80127b6:	d901      	bls.n	80127bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80127b8:	2303      	movs	r3, #3
 80127ba:	e0a6      	b.n	801290a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80127bc:	4b56      	ldr	r3, [pc, #344]	; (8012918 <HAL_RCC_OscConfig+0x4d8>)
 80127be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127c0:	f003 0302 	and.w	r3, r3, #2
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d1ee      	bne.n	80127a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80127c8:	7dfb      	ldrb	r3, [r7, #23]
 80127ca:	2b01      	cmp	r3, #1
 80127cc:	d105      	bne.n	80127da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80127ce:	4b52      	ldr	r3, [pc, #328]	; (8012918 <HAL_RCC_OscConfig+0x4d8>)
 80127d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127d2:	4a51      	ldr	r2, [pc, #324]	; (8012918 <HAL_RCC_OscConfig+0x4d8>)
 80127d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80127d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	699b      	ldr	r3, [r3, #24]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	f000 8092 	beq.w	8012908 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80127e4:	4b4c      	ldr	r3, [pc, #304]	; (8012918 <HAL_RCC_OscConfig+0x4d8>)
 80127e6:	689b      	ldr	r3, [r3, #8]
 80127e8:	f003 030c 	and.w	r3, r3, #12
 80127ec:	2b08      	cmp	r3, #8
 80127ee:	d05c      	beq.n	80128aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	699b      	ldr	r3, [r3, #24]
 80127f4:	2b02      	cmp	r3, #2
 80127f6:	d141      	bne.n	801287c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80127f8:	4b48      	ldr	r3, [pc, #288]	; (801291c <HAL_RCC_OscConfig+0x4dc>)
 80127fa:	2200      	movs	r2, #0
 80127fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80127fe:	f7fb fc39 	bl	800e074 <HAL_GetTick>
 8012802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012804:	e008      	b.n	8012818 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012806:	f7fb fc35 	bl	800e074 <HAL_GetTick>
 801280a:	4602      	mov	r2, r0
 801280c:	693b      	ldr	r3, [r7, #16]
 801280e:	1ad3      	subs	r3, r2, r3
 8012810:	2b02      	cmp	r3, #2
 8012812:	d901      	bls.n	8012818 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8012814:	2303      	movs	r3, #3
 8012816:	e078      	b.n	801290a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012818:	4b3f      	ldr	r3, [pc, #252]	; (8012918 <HAL_RCC_OscConfig+0x4d8>)
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012820:	2b00      	cmp	r3, #0
 8012822:	d1f0      	bne.n	8012806 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	69da      	ldr	r2, [r3, #28]
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	6a1b      	ldr	r3, [r3, #32]
 801282c:	431a      	orrs	r2, r3
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012832:	019b      	lsls	r3, r3, #6
 8012834:	431a      	orrs	r2, r3
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801283a:	085b      	lsrs	r3, r3, #1
 801283c:	3b01      	subs	r3, #1
 801283e:	041b      	lsls	r3, r3, #16
 8012840:	431a      	orrs	r2, r3
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012846:	061b      	lsls	r3, r3, #24
 8012848:	4933      	ldr	r1, [pc, #204]	; (8012918 <HAL_RCC_OscConfig+0x4d8>)
 801284a:	4313      	orrs	r3, r2
 801284c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801284e:	4b33      	ldr	r3, [pc, #204]	; (801291c <HAL_RCC_OscConfig+0x4dc>)
 8012850:	2201      	movs	r2, #1
 8012852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012854:	f7fb fc0e 	bl	800e074 <HAL_GetTick>
 8012858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801285a:	e008      	b.n	801286e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801285c:	f7fb fc0a 	bl	800e074 <HAL_GetTick>
 8012860:	4602      	mov	r2, r0
 8012862:	693b      	ldr	r3, [r7, #16]
 8012864:	1ad3      	subs	r3, r2, r3
 8012866:	2b02      	cmp	r3, #2
 8012868:	d901      	bls.n	801286e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 801286a:	2303      	movs	r3, #3
 801286c:	e04d      	b.n	801290a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801286e:	4b2a      	ldr	r3, [pc, #168]	; (8012918 <HAL_RCC_OscConfig+0x4d8>)
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012876:	2b00      	cmp	r3, #0
 8012878:	d0f0      	beq.n	801285c <HAL_RCC_OscConfig+0x41c>
 801287a:	e045      	b.n	8012908 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801287c:	4b27      	ldr	r3, [pc, #156]	; (801291c <HAL_RCC_OscConfig+0x4dc>)
 801287e:	2200      	movs	r2, #0
 8012880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012882:	f7fb fbf7 	bl	800e074 <HAL_GetTick>
 8012886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012888:	e008      	b.n	801289c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801288a:	f7fb fbf3 	bl	800e074 <HAL_GetTick>
 801288e:	4602      	mov	r2, r0
 8012890:	693b      	ldr	r3, [r7, #16]
 8012892:	1ad3      	subs	r3, r2, r3
 8012894:	2b02      	cmp	r3, #2
 8012896:	d901      	bls.n	801289c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8012898:	2303      	movs	r3, #3
 801289a:	e036      	b.n	801290a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801289c:	4b1e      	ldr	r3, [pc, #120]	; (8012918 <HAL_RCC_OscConfig+0x4d8>)
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d1f0      	bne.n	801288a <HAL_RCC_OscConfig+0x44a>
 80128a8:	e02e      	b.n	8012908 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	699b      	ldr	r3, [r3, #24]
 80128ae:	2b01      	cmp	r3, #1
 80128b0:	d101      	bne.n	80128b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80128b2:	2301      	movs	r3, #1
 80128b4:	e029      	b.n	801290a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80128b6:	4b18      	ldr	r3, [pc, #96]	; (8012918 <HAL_RCC_OscConfig+0x4d8>)
 80128b8:	685b      	ldr	r3, [r3, #4]
 80128ba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	69db      	ldr	r3, [r3, #28]
 80128c6:	429a      	cmp	r2, r3
 80128c8:	d11c      	bne.n	8012904 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80128d4:	429a      	cmp	r2, r3
 80128d6:	d115      	bne.n	8012904 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80128d8:	68fa      	ldr	r2, [r7, #12]
 80128da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80128de:	4013      	ands	r3, r2
 80128e0:	687a      	ldr	r2, [r7, #4]
 80128e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80128e4:	4293      	cmp	r3, r2
 80128e6:	d10d      	bne.n	8012904 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80128f2:	429a      	cmp	r2, r3
 80128f4:	d106      	bne.n	8012904 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8012900:	429a      	cmp	r2, r3
 8012902:	d001      	beq.n	8012908 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8012904:	2301      	movs	r3, #1
 8012906:	e000      	b.n	801290a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8012908:	2300      	movs	r3, #0
}
 801290a:	4618      	mov	r0, r3
 801290c:	3718      	adds	r7, #24
 801290e:	46bd      	mov	sp, r7
 8012910:	bd80      	pop	{r7, pc}
 8012912:	bf00      	nop
 8012914:	40007000 	.word	0x40007000
 8012918:	40023800 	.word	0x40023800
 801291c:	42470060 	.word	0x42470060

08012920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012920:	b580      	push	{r7, lr}
 8012922:	b084      	sub	sp, #16
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
 8012928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d101      	bne.n	8012934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8012930:	2301      	movs	r3, #1
 8012932:	e0cc      	b.n	8012ace <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8012934:	4b68      	ldr	r3, [pc, #416]	; (8012ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	f003 030f 	and.w	r3, r3, #15
 801293c:	683a      	ldr	r2, [r7, #0]
 801293e:	429a      	cmp	r2, r3
 8012940:	d90c      	bls.n	801295c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012942:	4b65      	ldr	r3, [pc, #404]	; (8012ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8012944:	683a      	ldr	r2, [r7, #0]
 8012946:	b2d2      	uxtb	r2, r2
 8012948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801294a:	4b63      	ldr	r3, [pc, #396]	; (8012ad8 <HAL_RCC_ClockConfig+0x1b8>)
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	f003 030f 	and.w	r3, r3, #15
 8012952:	683a      	ldr	r2, [r7, #0]
 8012954:	429a      	cmp	r2, r3
 8012956:	d001      	beq.n	801295c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8012958:	2301      	movs	r3, #1
 801295a:	e0b8      	b.n	8012ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	f003 0302 	and.w	r3, r3, #2
 8012964:	2b00      	cmp	r3, #0
 8012966:	d020      	beq.n	80129aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	f003 0304 	and.w	r3, r3, #4
 8012970:	2b00      	cmp	r3, #0
 8012972:	d005      	beq.n	8012980 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8012974:	4b59      	ldr	r3, [pc, #356]	; (8012adc <HAL_RCC_ClockConfig+0x1bc>)
 8012976:	689b      	ldr	r3, [r3, #8]
 8012978:	4a58      	ldr	r2, [pc, #352]	; (8012adc <HAL_RCC_ClockConfig+0x1bc>)
 801297a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801297e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	f003 0308 	and.w	r3, r3, #8
 8012988:	2b00      	cmp	r3, #0
 801298a:	d005      	beq.n	8012998 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801298c:	4b53      	ldr	r3, [pc, #332]	; (8012adc <HAL_RCC_ClockConfig+0x1bc>)
 801298e:	689b      	ldr	r3, [r3, #8]
 8012990:	4a52      	ldr	r2, [pc, #328]	; (8012adc <HAL_RCC_ClockConfig+0x1bc>)
 8012992:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8012996:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012998:	4b50      	ldr	r3, [pc, #320]	; (8012adc <HAL_RCC_ClockConfig+0x1bc>)
 801299a:	689b      	ldr	r3, [r3, #8]
 801299c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	689b      	ldr	r3, [r3, #8]
 80129a4:	494d      	ldr	r1, [pc, #308]	; (8012adc <HAL_RCC_ClockConfig+0x1bc>)
 80129a6:	4313      	orrs	r3, r2
 80129a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	f003 0301 	and.w	r3, r3, #1
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d044      	beq.n	8012a40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	685b      	ldr	r3, [r3, #4]
 80129ba:	2b01      	cmp	r3, #1
 80129bc:	d107      	bne.n	80129ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80129be:	4b47      	ldr	r3, [pc, #284]	; (8012adc <HAL_RCC_ClockConfig+0x1bc>)
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d119      	bne.n	80129fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80129ca:	2301      	movs	r3, #1
 80129cc:	e07f      	b.n	8012ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	685b      	ldr	r3, [r3, #4]
 80129d2:	2b02      	cmp	r3, #2
 80129d4:	d003      	beq.n	80129de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80129da:	2b03      	cmp	r3, #3
 80129dc:	d107      	bne.n	80129ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80129de:	4b3f      	ldr	r3, [pc, #252]	; (8012adc <HAL_RCC_ClockConfig+0x1bc>)
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d109      	bne.n	80129fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80129ea:	2301      	movs	r3, #1
 80129ec:	e06f      	b.n	8012ace <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80129ee:	4b3b      	ldr	r3, [pc, #236]	; (8012adc <HAL_RCC_ClockConfig+0x1bc>)
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	f003 0302 	and.w	r3, r3, #2
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d101      	bne.n	80129fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80129fa:	2301      	movs	r3, #1
 80129fc:	e067      	b.n	8012ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80129fe:	4b37      	ldr	r3, [pc, #220]	; (8012adc <HAL_RCC_ClockConfig+0x1bc>)
 8012a00:	689b      	ldr	r3, [r3, #8]
 8012a02:	f023 0203 	bic.w	r2, r3, #3
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	685b      	ldr	r3, [r3, #4]
 8012a0a:	4934      	ldr	r1, [pc, #208]	; (8012adc <HAL_RCC_ClockConfig+0x1bc>)
 8012a0c:	4313      	orrs	r3, r2
 8012a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8012a10:	f7fb fb30 	bl	800e074 <HAL_GetTick>
 8012a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012a16:	e00a      	b.n	8012a2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012a18:	f7fb fb2c 	bl	800e074 <HAL_GetTick>
 8012a1c:	4602      	mov	r2, r0
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	1ad3      	subs	r3, r2, r3
 8012a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a26:	4293      	cmp	r3, r2
 8012a28:	d901      	bls.n	8012a2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8012a2a:	2303      	movs	r3, #3
 8012a2c:	e04f      	b.n	8012ace <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012a2e:	4b2b      	ldr	r3, [pc, #172]	; (8012adc <HAL_RCC_ClockConfig+0x1bc>)
 8012a30:	689b      	ldr	r3, [r3, #8]
 8012a32:	f003 020c 	and.w	r2, r3, #12
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	685b      	ldr	r3, [r3, #4]
 8012a3a:	009b      	lsls	r3, r3, #2
 8012a3c:	429a      	cmp	r2, r3
 8012a3e:	d1eb      	bne.n	8012a18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8012a40:	4b25      	ldr	r3, [pc, #148]	; (8012ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	f003 030f 	and.w	r3, r3, #15
 8012a48:	683a      	ldr	r2, [r7, #0]
 8012a4a:	429a      	cmp	r2, r3
 8012a4c:	d20c      	bcs.n	8012a68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012a4e:	4b22      	ldr	r3, [pc, #136]	; (8012ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8012a50:	683a      	ldr	r2, [r7, #0]
 8012a52:	b2d2      	uxtb	r2, r2
 8012a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012a56:	4b20      	ldr	r3, [pc, #128]	; (8012ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	f003 030f 	and.w	r3, r3, #15
 8012a5e:	683a      	ldr	r2, [r7, #0]
 8012a60:	429a      	cmp	r2, r3
 8012a62:	d001      	beq.n	8012a68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8012a64:	2301      	movs	r3, #1
 8012a66:	e032      	b.n	8012ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	f003 0304 	and.w	r3, r3, #4
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d008      	beq.n	8012a86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8012a74:	4b19      	ldr	r3, [pc, #100]	; (8012adc <HAL_RCC_ClockConfig+0x1bc>)
 8012a76:	689b      	ldr	r3, [r3, #8]
 8012a78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	68db      	ldr	r3, [r3, #12]
 8012a80:	4916      	ldr	r1, [pc, #88]	; (8012adc <HAL_RCC_ClockConfig+0x1bc>)
 8012a82:	4313      	orrs	r3, r2
 8012a84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	f003 0308 	and.w	r3, r3, #8
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d009      	beq.n	8012aa6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8012a92:	4b12      	ldr	r3, [pc, #72]	; (8012adc <HAL_RCC_ClockConfig+0x1bc>)
 8012a94:	689b      	ldr	r3, [r3, #8]
 8012a96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	691b      	ldr	r3, [r3, #16]
 8012a9e:	00db      	lsls	r3, r3, #3
 8012aa0:	490e      	ldr	r1, [pc, #56]	; (8012adc <HAL_RCC_ClockConfig+0x1bc>)
 8012aa2:	4313      	orrs	r3, r2
 8012aa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8012aa6:	f000 f82d 	bl	8012b04 <HAL_RCC_GetSysClockFreq>
 8012aaa:	4602      	mov	r2, r0
 8012aac:	4b0b      	ldr	r3, [pc, #44]	; (8012adc <HAL_RCC_ClockConfig+0x1bc>)
 8012aae:	689b      	ldr	r3, [r3, #8]
 8012ab0:	091b      	lsrs	r3, r3, #4
 8012ab2:	f003 030f 	and.w	r3, r3, #15
 8012ab6:	490a      	ldr	r1, [pc, #40]	; (8012ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8012ab8:	5ccb      	ldrb	r3, [r1, r3]
 8012aba:	fa22 f303 	lsr.w	r3, r2, r3
 8012abe:	4a09      	ldr	r2, [pc, #36]	; (8012ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8012ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8012ac2:	4b09      	ldr	r3, [pc, #36]	; (8012ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	f7fa f9d6 	bl	800ce78 <HAL_InitTick>

  return HAL_OK;
 8012acc:	2300      	movs	r3, #0
}
 8012ace:	4618      	mov	r0, r3
 8012ad0:	3710      	adds	r7, #16
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	bd80      	pop	{r7, pc}
 8012ad6:	bf00      	nop
 8012ad8:	40023c00 	.word	0x40023c00
 8012adc:	40023800 	.word	0x40023800
 8012ae0:	0802078c 	.word	0x0802078c
 8012ae4:	200000c0 	.word	0x200000c0
 8012ae8:	200000c4 	.word	0x200000c4

08012aec <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8012aec:	b480      	push	{r7}
 8012aee:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8012af0:	4b03      	ldr	r3, [pc, #12]	; (8012b00 <HAL_RCC_EnableCSS+0x14>)
 8012af2:	2201      	movs	r2, #1
 8012af4:	601a      	str	r2, [r3, #0]
}
 8012af6:	bf00      	nop
 8012af8:	46bd      	mov	sp, r7
 8012afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afe:	4770      	bx	lr
 8012b00:	4247004c 	.word	0x4247004c

08012b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012b04:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8012b08:	b084      	sub	sp, #16
 8012b0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	607b      	str	r3, [r7, #4]
 8012b10:	2300      	movs	r3, #0
 8012b12:	60fb      	str	r3, [r7, #12]
 8012b14:	2300      	movs	r3, #0
 8012b16:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8012b18:	2300      	movs	r3, #0
 8012b1a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012b1c:	4b67      	ldr	r3, [pc, #412]	; (8012cbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012b1e:	689b      	ldr	r3, [r3, #8]
 8012b20:	f003 030c 	and.w	r3, r3, #12
 8012b24:	2b08      	cmp	r3, #8
 8012b26:	d00d      	beq.n	8012b44 <HAL_RCC_GetSysClockFreq+0x40>
 8012b28:	2b08      	cmp	r3, #8
 8012b2a:	f200 80bd 	bhi.w	8012ca8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d002      	beq.n	8012b38 <HAL_RCC_GetSysClockFreq+0x34>
 8012b32:	2b04      	cmp	r3, #4
 8012b34:	d003      	beq.n	8012b3e <HAL_RCC_GetSysClockFreq+0x3a>
 8012b36:	e0b7      	b.n	8012ca8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8012b38:	4b61      	ldr	r3, [pc, #388]	; (8012cc0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8012b3a:	60bb      	str	r3, [r7, #8]
       break;
 8012b3c:	e0b7      	b.n	8012cae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8012b3e:	4b61      	ldr	r3, [pc, #388]	; (8012cc4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8012b40:	60bb      	str	r3, [r7, #8]
      break;
 8012b42:	e0b4      	b.n	8012cae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8012b44:	4b5d      	ldr	r3, [pc, #372]	; (8012cbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012b46:	685b      	ldr	r3, [r3, #4]
 8012b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012b4c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8012b4e:	4b5b      	ldr	r3, [pc, #364]	; (8012cbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012b50:	685b      	ldr	r3, [r3, #4]
 8012b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d04d      	beq.n	8012bf6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012b5a:	4b58      	ldr	r3, [pc, #352]	; (8012cbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012b5c:	685b      	ldr	r3, [r3, #4]
 8012b5e:	099b      	lsrs	r3, r3, #6
 8012b60:	461a      	mov	r2, r3
 8012b62:	f04f 0300 	mov.w	r3, #0
 8012b66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8012b6a:	f04f 0100 	mov.w	r1, #0
 8012b6e:	ea02 0800 	and.w	r8, r2, r0
 8012b72:	ea03 0901 	and.w	r9, r3, r1
 8012b76:	4640      	mov	r0, r8
 8012b78:	4649      	mov	r1, r9
 8012b7a:	f04f 0200 	mov.w	r2, #0
 8012b7e:	f04f 0300 	mov.w	r3, #0
 8012b82:	014b      	lsls	r3, r1, #5
 8012b84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8012b88:	0142      	lsls	r2, r0, #5
 8012b8a:	4610      	mov	r0, r2
 8012b8c:	4619      	mov	r1, r3
 8012b8e:	ebb0 0008 	subs.w	r0, r0, r8
 8012b92:	eb61 0109 	sbc.w	r1, r1, r9
 8012b96:	f04f 0200 	mov.w	r2, #0
 8012b9a:	f04f 0300 	mov.w	r3, #0
 8012b9e:	018b      	lsls	r3, r1, #6
 8012ba0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8012ba4:	0182      	lsls	r2, r0, #6
 8012ba6:	1a12      	subs	r2, r2, r0
 8012ba8:	eb63 0301 	sbc.w	r3, r3, r1
 8012bac:	f04f 0000 	mov.w	r0, #0
 8012bb0:	f04f 0100 	mov.w	r1, #0
 8012bb4:	00d9      	lsls	r1, r3, #3
 8012bb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8012bba:	00d0      	lsls	r0, r2, #3
 8012bbc:	4602      	mov	r2, r0
 8012bbe:	460b      	mov	r3, r1
 8012bc0:	eb12 0208 	adds.w	r2, r2, r8
 8012bc4:	eb43 0309 	adc.w	r3, r3, r9
 8012bc8:	f04f 0000 	mov.w	r0, #0
 8012bcc:	f04f 0100 	mov.w	r1, #0
 8012bd0:	0259      	lsls	r1, r3, #9
 8012bd2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8012bd6:	0250      	lsls	r0, r2, #9
 8012bd8:	4602      	mov	r2, r0
 8012bda:	460b      	mov	r3, r1
 8012bdc:	4610      	mov	r0, r2
 8012bde:	4619      	mov	r1, r3
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	461a      	mov	r2, r3
 8012be4:	f04f 0300 	mov.w	r3, #0
 8012be8:	f7ee f84e 	bl	8000c88 <__aeabi_uldivmod>
 8012bec:	4602      	mov	r2, r0
 8012bee:	460b      	mov	r3, r1
 8012bf0:	4613      	mov	r3, r2
 8012bf2:	60fb      	str	r3, [r7, #12]
 8012bf4:	e04a      	b.n	8012c8c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012bf6:	4b31      	ldr	r3, [pc, #196]	; (8012cbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012bf8:	685b      	ldr	r3, [r3, #4]
 8012bfa:	099b      	lsrs	r3, r3, #6
 8012bfc:	461a      	mov	r2, r3
 8012bfe:	f04f 0300 	mov.w	r3, #0
 8012c02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8012c06:	f04f 0100 	mov.w	r1, #0
 8012c0a:	ea02 0400 	and.w	r4, r2, r0
 8012c0e:	ea03 0501 	and.w	r5, r3, r1
 8012c12:	4620      	mov	r0, r4
 8012c14:	4629      	mov	r1, r5
 8012c16:	f04f 0200 	mov.w	r2, #0
 8012c1a:	f04f 0300 	mov.w	r3, #0
 8012c1e:	014b      	lsls	r3, r1, #5
 8012c20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8012c24:	0142      	lsls	r2, r0, #5
 8012c26:	4610      	mov	r0, r2
 8012c28:	4619      	mov	r1, r3
 8012c2a:	1b00      	subs	r0, r0, r4
 8012c2c:	eb61 0105 	sbc.w	r1, r1, r5
 8012c30:	f04f 0200 	mov.w	r2, #0
 8012c34:	f04f 0300 	mov.w	r3, #0
 8012c38:	018b      	lsls	r3, r1, #6
 8012c3a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8012c3e:	0182      	lsls	r2, r0, #6
 8012c40:	1a12      	subs	r2, r2, r0
 8012c42:	eb63 0301 	sbc.w	r3, r3, r1
 8012c46:	f04f 0000 	mov.w	r0, #0
 8012c4a:	f04f 0100 	mov.w	r1, #0
 8012c4e:	00d9      	lsls	r1, r3, #3
 8012c50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8012c54:	00d0      	lsls	r0, r2, #3
 8012c56:	4602      	mov	r2, r0
 8012c58:	460b      	mov	r3, r1
 8012c5a:	1912      	adds	r2, r2, r4
 8012c5c:	eb45 0303 	adc.w	r3, r5, r3
 8012c60:	f04f 0000 	mov.w	r0, #0
 8012c64:	f04f 0100 	mov.w	r1, #0
 8012c68:	0299      	lsls	r1, r3, #10
 8012c6a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8012c6e:	0290      	lsls	r0, r2, #10
 8012c70:	4602      	mov	r2, r0
 8012c72:	460b      	mov	r3, r1
 8012c74:	4610      	mov	r0, r2
 8012c76:	4619      	mov	r1, r3
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	461a      	mov	r2, r3
 8012c7c:	f04f 0300 	mov.w	r3, #0
 8012c80:	f7ee f802 	bl	8000c88 <__aeabi_uldivmod>
 8012c84:	4602      	mov	r2, r0
 8012c86:	460b      	mov	r3, r1
 8012c88:	4613      	mov	r3, r2
 8012c8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8012c8c:	4b0b      	ldr	r3, [pc, #44]	; (8012cbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012c8e:	685b      	ldr	r3, [r3, #4]
 8012c90:	0c1b      	lsrs	r3, r3, #16
 8012c92:	f003 0303 	and.w	r3, r3, #3
 8012c96:	3301      	adds	r3, #1
 8012c98:	005b      	lsls	r3, r3, #1
 8012c9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8012c9c:	68fa      	ldr	r2, [r7, #12]
 8012c9e:	683b      	ldr	r3, [r7, #0]
 8012ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8012ca4:	60bb      	str	r3, [r7, #8]
      break;
 8012ca6:	e002      	b.n	8012cae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8012ca8:	4b05      	ldr	r3, [pc, #20]	; (8012cc0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8012caa:	60bb      	str	r3, [r7, #8]
      break;
 8012cac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8012cae:	68bb      	ldr	r3, [r7, #8]
}
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	3710      	adds	r7, #16
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8012cba:	bf00      	nop
 8012cbc:	40023800 	.word	0x40023800
 8012cc0:	00f42400 	.word	0x00f42400
 8012cc4:	007a1200 	.word	0x007a1200

08012cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012cc8:	b480      	push	{r7}
 8012cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8012ccc:	4b03      	ldr	r3, [pc, #12]	; (8012cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8012cce:	681b      	ldr	r3, [r3, #0]
}
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd8:	4770      	bx	lr
 8012cda:	bf00      	nop
 8012cdc:	200000c0 	.word	0x200000c0

08012ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8012ce4:	f7ff fff0 	bl	8012cc8 <HAL_RCC_GetHCLKFreq>
 8012ce8:	4602      	mov	r2, r0
 8012cea:	4b05      	ldr	r3, [pc, #20]	; (8012d00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8012cec:	689b      	ldr	r3, [r3, #8]
 8012cee:	0a9b      	lsrs	r3, r3, #10
 8012cf0:	f003 0307 	and.w	r3, r3, #7
 8012cf4:	4903      	ldr	r1, [pc, #12]	; (8012d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8012cf6:	5ccb      	ldrb	r3, [r1, r3]
 8012cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	bd80      	pop	{r7, pc}
 8012d00:	40023800 	.word	0x40023800
 8012d04:	0802079c 	.word	0x0802079c

08012d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8012d0c:	f7ff ffdc 	bl	8012cc8 <HAL_RCC_GetHCLKFreq>
 8012d10:	4602      	mov	r2, r0
 8012d12:	4b05      	ldr	r3, [pc, #20]	; (8012d28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8012d14:	689b      	ldr	r3, [r3, #8]
 8012d16:	0b5b      	lsrs	r3, r3, #13
 8012d18:	f003 0307 	and.w	r3, r3, #7
 8012d1c:	4903      	ldr	r1, [pc, #12]	; (8012d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8012d1e:	5ccb      	ldrb	r3, [r1, r3]
 8012d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012d24:	4618      	mov	r0, r3
 8012d26:	bd80      	pop	{r7, pc}
 8012d28:	40023800 	.word	0x40023800
 8012d2c:	0802079c 	.word	0x0802079c

08012d30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8012d30:	b480      	push	{r7}
 8012d32:	b083      	sub	sp, #12
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
 8012d38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	220f      	movs	r2, #15
 8012d3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8012d40:	4b12      	ldr	r3, [pc, #72]	; (8012d8c <HAL_RCC_GetClockConfig+0x5c>)
 8012d42:	689b      	ldr	r3, [r3, #8]
 8012d44:	f003 0203 	and.w	r2, r3, #3
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8012d4c:	4b0f      	ldr	r3, [pc, #60]	; (8012d8c <HAL_RCC_GetClockConfig+0x5c>)
 8012d4e:	689b      	ldr	r3, [r3, #8]
 8012d50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8012d58:	4b0c      	ldr	r3, [pc, #48]	; (8012d8c <HAL_RCC_GetClockConfig+0x5c>)
 8012d5a:	689b      	ldr	r3, [r3, #8]
 8012d5c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8012d64:	4b09      	ldr	r3, [pc, #36]	; (8012d8c <HAL_RCC_GetClockConfig+0x5c>)
 8012d66:	689b      	ldr	r3, [r3, #8]
 8012d68:	08db      	lsrs	r3, r3, #3
 8012d6a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8012d72:	4b07      	ldr	r3, [pc, #28]	; (8012d90 <HAL_RCC_GetClockConfig+0x60>)
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	f003 020f 	and.w	r2, r3, #15
 8012d7a:	683b      	ldr	r3, [r7, #0]
 8012d7c:	601a      	str	r2, [r3, #0]
}
 8012d7e:	bf00      	nop
 8012d80:	370c      	adds	r7, #12
 8012d82:	46bd      	mov	sp, r7
 8012d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d88:	4770      	bx	lr
 8012d8a:	bf00      	nop
 8012d8c:	40023800 	.word	0x40023800
 8012d90:	40023c00 	.word	0x40023c00

08012d94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b082      	sub	sp, #8
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d101      	bne.n	8012da6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8012da2:	2301      	movs	r3, #1
 8012da4:	e056      	b.n	8012e54 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	2200      	movs	r2, #0
 8012daa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012db2:	b2db      	uxtb	r3, r3
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d106      	bne.n	8012dc6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	2200      	movs	r2, #0
 8012dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8012dc0:	6878      	ldr	r0, [r7, #4]
 8012dc2:	f7f0 f94f 	bl	8003064 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	2202      	movs	r2, #2
 8012dca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	681a      	ldr	r2, [r3, #0]
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012ddc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	685a      	ldr	r2, [r3, #4]
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	689b      	ldr	r3, [r3, #8]
 8012de6:	431a      	orrs	r2, r3
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	68db      	ldr	r3, [r3, #12]
 8012dec:	431a      	orrs	r2, r3
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	691b      	ldr	r3, [r3, #16]
 8012df2:	431a      	orrs	r2, r3
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	695b      	ldr	r3, [r3, #20]
 8012df8:	431a      	orrs	r2, r3
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	699b      	ldr	r3, [r3, #24]
 8012dfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012e02:	431a      	orrs	r2, r3
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	69db      	ldr	r3, [r3, #28]
 8012e08:	431a      	orrs	r2, r3
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	6a1b      	ldr	r3, [r3, #32]
 8012e0e:	ea42 0103 	orr.w	r1, r2, r3
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	430a      	orrs	r2, r1
 8012e1c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	699b      	ldr	r3, [r3, #24]
 8012e22:	0c1b      	lsrs	r3, r3, #16
 8012e24:	f003 0104 	and.w	r1, r3, #4
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	430a      	orrs	r2, r1
 8012e32:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	69da      	ldr	r2, [r3, #28]
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012e42:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	2200      	movs	r2, #0
 8012e48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	2201      	movs	r2, #1
 8012e4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8012e52:	2300      	movs	r3, #0
}
 8012e54:	4618      	mov	r0, r3
 8012e56:	3708      	adds	r7, #8
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	bd80      	pop	{r7, pc}

08012e5c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b088      	sub	sp, #32
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	60f8      	str	r0, [r7, #12]
 8012e64:	60b9      	str	r1, [r7, #8]
 8012e66:	603b      	str	r3, [r7, #0]
 8012e68:	4613      	mov	r3, r2
 8012e6a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012e6c:	2300      	movs	r3, #0
 8012e6e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012e76:	2b01      	cmp	r3, #1
 8012e78:	d101      	bne.n	8012e7e <HAL_SPI_Transmit+0x22>
 8012e7a:	2302      	movs	r3, #2
 8012e7c:	e11e      	b.n	80130bc <HAL_SPI_Transmit+0x260>
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	2201      	movs	r2, #1
 8012e82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012e86:	f7fb f8f5 	bl	800e074 <HAL_GetTick>
 8012e8a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8012e8c:	88fb      	ldrh	r3, [r7, #6]
 8012e8e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012e96:	b2db      	uxtb	r3, r3
 8012e98:	2b01      	cmp	r3, #1
 8012e9a:	d002      	beq.n	8012ea2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8012e9c:	2302      	movs	r3, #2
 8012e9e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8012ea0:	e103      	b.n	80130aa <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8012ea2:	68bb      	ldr	r3, [r7, #8]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d002      	beq.n	8012eae <HAL_SPI_Transmit+0x52>
 8012ea8:	88fb      	ldrh	r3, [r7, #6]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d102      	bne.n	8012eb4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8012eae:	2301      	movs	r3, #1
 8012eb0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8012eb2:	e0fa      	b.n	80130aa <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	2203      	movs	r2, #3
 8012eb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	68ba      	ldr	r2, [r7, #8]
 8012ec6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	88fa      	ldrh	r2, [r7, #6]
 8012ecc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	88fa      	ldrh	r2, [r7, #6]
 8012ed2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	2200      	movs	r2, #0
 8012ede:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	2200      	movs	r2, #0
 8012eea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	2200      	movs	r2, #0
 8012ef0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	689b      	ldr	r3, [r3, #8]
 8012ef6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012efa:	d107      	bne.n	8012f0c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	681a      	ldr	r2, [r3, #0]
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012f0a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f16:	2b40      	cmp	r3, #64	; 0x40
 8012f18:	d007      	beq.n	8012f2a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	681a      	ldr	r2, [r3, #0]
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012f28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	68db      	ldr	r3, [r3, #12]
 8012f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012f32:	d14b      	bne.n	8012fcc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	685b      	ldr	r3, [r3, #4]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d002      	beq.n	8012f42 <HAL_SPI_Transmit+0xe6>
 8012f3c:	8afb      	ldrh	r3, [r7, #22]
 8012f3e:	2b01      	cmp	r3, #1
 8012f40:	d13e      	bne.n	8012fc0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f46:	881a      	ldrh	r2, [r3, #0]
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f52:	1c9a      	adds	r2, r3, #2
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012f5c:	b29b      	uxth	r3, r3
 8012f5e:	3b01      	subs	r3, #1
 8012f60:	b29a      	uxth	r2, r3
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8012f66:	e02b      	b.n	8012fc0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	689b      	ldr	r3, [r3, #8]
 8012f6e:	f003 0302 	and.w	r3, r3, #2
 8012f72:	2b02      	cmp	r3, #2
 8012f74:	d112      	bne.n	8012f9c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f7a:	881a      	ldrh	r2, [r3, #0]
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f86:	1c9a      	adds	r2, r3, #2
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012f90:	b29b      	uxth	r3, r3
 8012f92:	3b01      	subs	r3, #1
 8012f94:	b29a      	uxth	r2, r3
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	86da      	strh	r2, [r3, #54]	; 0x36
 8012f9a:	e011      	b.n	8012fc0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012f9c:	f7fb f86a 	bl	800e074 <HAL_GetTick>
 8012fa0:	4602      	mov	r2, r0
 8012fa2:	69bb      	ldr	r3, [r7, #24]
 8012fa4:	1ad3      	subs	r3, r2, r3
 8012fa6:	683a      	ldr	r2, [r7, #0]
 8012fa8:	429a      	cmp	r2, r3
 8012faa:	d803      	bhi.n	8012fb4 <HAL_SPI_Transmit+0x158>
 8012fac:	683b      	ldr	r3, [r7, #0]
 8012fae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012fb2:	d102      	bne.n	8012fba <HAL_SPI_Transmit+0x15e>
 8012fb4:	683b      	ldr	r3, [r7, #0]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d102      	bne.n	8012fc0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8012fba:	2303      	movs	r3, #3
 8012fbc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8012fbe:	e074      	b.n	80130aa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012fc4:	b29b      	uxth	r3, r3
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d1ce      	bne.n	8012f68 <HAL_SPI_Transmit+0x10c>
 8012fca:	e04c      	b.n	8013066 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	685b      	ldr	r3, [r3, #4]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d002      	beq.n	8012fda <HAL_SPI_Transmit+0x17e>
 8012fd4:	8afb      	ldrh	r3, [r7, #22]
 8012fd6:	2b01      	cmp	r3, #1
 8012fd8:	d140      	bne.n	801305c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	330c      	adds	r3, #12
 8012fe4:	7812      	ldrb	r2, [r2, #0]
 8012fe6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fec:	1c5a      	adds	r2, r3, #1
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012ff6:	b29b      	uxth	r3, r3
 8012ff8:	3b01      	subs	r3, #1
 8012ffa:	b29a      	uxth	r2, r3
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8013000:	e02c      	b.n	801305c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	689b      	ldr	r3, [r3, #8]
 8013008:	f003 0302 	and.w	r3, r3, #2
 801300c:	2b02      	cmp	r3, #2
 801300e:	d113      	bne.n	8013038 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	330c      	adds	r3, #12
 801301a:	7812      	ldrb	r2, [r2, #0]
 801301c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013022:	1c5a      	adds	r2, r3, #1
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801302c:	b29b      	uxth	r3, r3
 801302e:	3b01      	subs	r3, #1
 8013030:	b29a      	uxth	r2, r3
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	86da      	strh	r2, [r3, #54]	; 0x36
 8013036:	e011      	b.n	801305c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013038:	f7fb f81c 	bl	800e074 <HAL_GetTick>
 801303c:	4602      	mov	r2, r0
 801303e:	69bb      	ldr	r3, [r7, #24]
 8013040:	1ad3      	subs	r3, r2, r3
 8013042:	683a      	ldr	r2, [r7, #0]
 8013044:	429a      	cmp	r2, r3
 8013046:	d803      	bhi.n	8013050 <HAL_SPI_Transmit+0x1f4>
 8013048:	683b      	ldr	r3, [r7, #0]
 801304a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801304e:	d102      	bne.n	8013056 <HAL_SPI_Transmit+0x1fa>
 8013050:	683b      	ldr	r3, [r7, #0]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d102      	bne.n	801305c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8013056:	2303      	movs	r3, #3
 8013058:	77fb      	strb	r3, [r7, #31]
          goto error;
 801305a:	e026      	b.n	80130aa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013060:	b29b      	uxth	r3, r3
 8013062:	2b00      	cmp	r3, #0
 8013064:	d1cd      	bne.n	8013002 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013066:	69ba      	ldr	r2, [r7, #24]
 8013068:	6839      	ldr	r1, [r7, #0]
 801306a:	68f8      	ldr	r0, [r7, #12]
 801306c:	f000 f9b2 	bl	80133d4 <SPI_EndRxTxTransaction>
 8013070:	4603      	mov	r3, r0
 8013072:	2b00      	cmp	r3, #0
 8013074:	d002      	beq.n	801307c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	2220      	movs	r2, #32
 801307a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	689b      	ldr	r3, [r3, #8]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d10a      	bne.n	801309a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013084:	2300      	movs	r3, #0
 8013086:	613b      	str	r3, [r7, #16]
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	68db      	ldr	r3, [r3, #12]
 801308e:	613b      	str	r3, [r7, #16]
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	689b      	ldr	r3, [r3, #8]
 8013096:	613b      	str	r3, [r7, #16]
 8013098:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d002      	beq.n	80130a8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80130a2:	2301      	movs	r3, #1
 80130a4:	77fb      	strb	r3, [r7, #31]
 80130a6:	e000      	b.n	80130aa <HAL_SPI_Transmit+0x24e>
  }

error:
 80130a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	2201      	movs	r2, #1
 80130ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	2200      	movs	r2, #0
 80130b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80130ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80130bc:	4618      	mov	r0, r3
 80130be:	3720      	adds	r7, #32
 80130c0:	46bd      	mov	sp, r7
 80130c2:	bd80      	pop	{r7, pc}

080130c4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b088      	sub	sp, #32
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	685b      	ldr	r3, [r3, #4]
 80130d2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	689b      	ldr	r3, [r3, #8]
 80130da:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80130dc:	69bb      	ldr	r3, [r7, #24]
 80130de:	099b      	lsrs	r3, r3, #6
 80130e0:	f003 0301 	and.w	r3, r3, #1
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d10f      	bne.n	8013108 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80130e8:	69bb      	ldr	r3, [r7, #24]
 80130ea:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d00a      	beq.n	8013108 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80130f2:	69fb      	ldr	r3, [r7, #28]
 80130f4:	099b      	lsrs	r3, r3, #6
 80130f6:	f003 0301 	and.w	r3, r3, #1
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d004      	beq.n	8013108 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013102:	6878      	ldr	r0, [r7, #4]
 8013104:	4798      	blx	r3
    return;
 8013106:	e0d7      	b.n	80132b8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8013108:	69bb      	ldr	r3, [r7, #24]
 801310a:	085b      	lsrs	r3, r3, #1
 801310c:	f003 0301 	and.w	r3, r3, #1
 8013110:	2b00      	cmp	r3, #0
 8013112:	d00a      	beq.n	801312a <HAL_SPI_IRQHandler+0x66>
 8013114:	69fb      	ldr	r3, [r7, #28]
 8013116:	09db      	lsrs	r3, r3, #7
 8013118:	f003 0301 	and.w	r3, r3, #1
 801311c:	2b00      	cmp	r3, #0
 801311e:	d004      	beq.n	801312a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013124:	6878      	ldr	r0, [r7, #4]
 8013126:	4798      	blx	r3
    return;
 8013128:	e0c6      	b.n	80132b8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801312a:	69bb      	ldr	r3, [r7, #24]
 801312c:	095b      	lsrs	r3, r3, #5
 801312e:	f003 0301 	and.w	r3, r3, #1
 8013132:	2b00      	cmp	r3, #0
 8013134:	d10c      	bne.n	8013150 <HAL_SPI_IRQHandler+0x8c>
 8013136:	69bb      	ldr	r3, [r7, #24]
 8013138:	099b      	lsrs	r3, r3, #6
 801313a:	f003 0301 	and.w	r3, r3, #1
 801313e:	2b00      	cmp	r3, #0
 8013140:	d106      	bne.n	8013150 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8013142:	69bb      	ldr	r3, [r7, #24]
 8013144:	0a1b      	lsrs	r3, r3, #8
 8013146:	f003 0301 	and.w	r3, r3, #1
 801314a:	2b00      	cmp	r3, #0
 801314c:	f000 80b4 	beq.w	80132b8 <HAL_SPI_IRQHandler+0x1f4>
 8013150:	69fb      	ldr	r3, [r7, #28]
 8013152:	095b      	lsrs	r3, r3, #5
 8013154:	f003 0301 	and.w	r3, r3, #1
 8013158:	2b00      	cmp	r3, #0
 801315a:	f000 80ad 	beq.w	80132b8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801315e:	69bb      	ldr	r3, [r7, #24]
 8013160:	099b      	lsrs	r3, r3, #6
 8013162:	f003 0301 	and.w	r3, r3, #1
 8013166:	2b00      	cmp	r3, #0
 8013168:	d023      	beq.n	80131b2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013170:	b2db      	uxtb	r3, r3
 8013172:	2b03      	cmp	r3, #3
 8013174:	d011      	beq.n	801319a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801317a:	f043 0204 	orr.w	r2, r3, #4
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013182:	2300      	movs	r3, #0
 8013184:	617b      	str	r3, [r7, #20]
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	68db      	ldr	r3, [r3, #12]
 801318c:	617b      	str	r3, [r7, #20]
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	689b      	ldr	r3, [r3, #8]
 8013194:	617b      	str	r3, [r7, #20]
 8013196:	697b      	ldr	r3, [r7, #20]
 8013198:	e00b      	b.n	80131b2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801319a:	2300      	movs	r3, #0
 801319c:	613b      	str	r3, [r7, #16]
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	68db      	ldr	r3, [r3, #12]
 80131a4:	613b      	str	r3, [r7, #16]
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	689b      	ldr	r3, [r3, #8]
 80131ac:	613b      	str	r3, [r7, #16]
 80131ae:	693b      	ldr	r3, [r7, #16]
        return;
 80131b0:	e082      	b.n	80132b8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80131b2:	69bb      	ldr	r3, [r7, #24]
 80131b4:	095b      	lsrs	r3, r3, #5
 80131b6:	f003 0301 	and.w	r3, r3, #1
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d014      	beq.n	80131e8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80131c2:	f043 0201 	orr.w	r2, r3, #1
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80131ca:	2300      	movs	r3, #0
 80131cc:	60fb      	str	r3, [r7, #12]
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	689b      	ldr	r3, [r3, #8]
 80131d4:	60fb      	str	r3, [r7, #12]
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	681a      	ldr	r2, [r3, #0]
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80131e4:	601a      	str	r2, [r3, #0]
 80131e6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80131e8:	69bb      	ldr	r3, [r7, #24]
 80131ea:	0a1b      	lsrs	r3, r3, #8
 80131ec:	f003 0301 	and.w	r3, r3, #1
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d00c      	beq.n	801320e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80131f8:	f043 0208 	orr.w	r2, r3, #8
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8013200:	2300      	movs	r3, #0
 8013202:	60bb      	str	r3, [r7, #8]
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	689b      	ldr	r3, [r3, #8]
 801320a:	60bb      	str	r3, [r7, #8]
 801320c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013212:	2b00      	cmp	r3, #0
 8013214:	d04f      	beq.n	80132b6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	685a      	ldr	r2, [r3, #4]
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8013224:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	2201      	movs	r2, #1
 801322a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 801322e:	69fb      	ldr	r3, [r7, #28]
 8013230:	f003 0302 	and.w	r3, r3, #2
 8013234:	2b00      	cmp	r3, #0
 8013236:	d104      	bne.n	8013242 <HAL_SPI_IRQHandler+0x17e>
 8013238:	69fb      	ldr	r3, [r7, #28]
 801323a:	f003 0301 	and.w	r3, r3, #1
 801323e:	2b00      	cmp	r3, #0
 8013240:	d034      	beq.n	80132ac <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	685a      	ldr	r2, [r3, #4]
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	f022 0203 	bic.w	r2, r2, #3
 8013250:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013256:	2b00      	cmp	r3, #0
 8013258:	d011      	beq.n	801327e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801325e:	4a18      	ldr	r2, [pc, #96]	; (80132c0 <HAL_SPI_IRQHandler+0x1fc>)
 8013260:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013266:	4618      	mov	r0, r3
 8013268:	f7fc f866 	bl	800f338 <HAL_DMA_Abort_IT>
 801326c:	4603      	mov	r3, r0
 801326e:	2b00      	cmp	r3, #0
 8013270:	d005      	beq.n	801327e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013276:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013282:	2b00      	cmp	r3, #0
 8013284:	d016      	beq.n	80132b4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801328a:	4a0d      	ldr	r2, [pc, #52]	; (80132c0 <HAL_SPI_IRQHandler+0x1fc>)
 801328c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013292:	4618      	mov	r0, r3
 8013294:	f7fc f850 	bl	800f338 <HAL_DMA_Abort_IT>
 8013298:	4603      	mov	r3, r0
 801329a:	2b00      	cmp	r3, #0
 801329c:	d00a      	beq.n	80132b4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80132a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80132aa:	e003      	b.n	80132b4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80132ac:	6878      	ldr	r0, [r7, #4]
 80132ae:	f000 f809 	bl	80132c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80132b2:	e000      	b.n	80132b6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80132b4:	bf00      	nop
    return;
 80132b6:	bf00      	nop
  }
}
 80132b8:	3720      	adds	r7, #32
 80132ba:	46bd      	mov	sp, r7
 80132bc:	bd80      	pop	{r7, pc}
 80132be:	bf00      	nop
 80132c0:	080132d9 	.word	0x080132d9

080132c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80132c4:	b480      	push	{r7}
 80132c6:	b083      	sub	sp, #12
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80132cc:	bf00      	nop
 80132ce:	370c      	adds	r7, #12
 80132d0:	46bd      	mov	sp, r7
 80132d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d6:	4770      	bx	lr

080132d8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	b084      	sub	sp, #16
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132e4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	2200      	movs	r2, #0
 80132ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	2200      	movs	r2, #0
 80132f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80132f2:	68f8      	ldr	r0, [r7, #12]
 80132f4:	f7ff ffe6 	bl	80132c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80132f8:	bf00      	nop
 80132fa:	3710      	adds	r7, #16
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bd80      	pop	{r7, pc}

08013300 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8013300:	b580      	push	{r7, lr}
 8013302:	b084      	sub	sp, #16
 8013304:	af00      	add	r7, sp, #0
 8013306:	60f8      	str	r0, [r7, #12]
 8013308:	60b9      	str	r1, [r7, #8]
 801330a:	603b      	str	r3, [r7, #0]
 801330c:	4613      	mov	r3, r2
 801330e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013310:	e04c      	b.n	80133ac <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8013312:	683b      	ldr	r3, [r7, #0]
 8013314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013318:	d048      	beq.n	80133ac <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 801331a:	f7fa feab 	bl	800e074 <HAL_GetTick>
 801331e:	4602      	mov	r2, r0
 8013320:	69bb      	ldr	r3, [r7, #24]
 8013322:	1ad3      	subs	r3, r2, r3
 8013324:	683a      	ldr	r2, [r7, #0]
 8013326:	429a      	cmp	r2, r3
 8013328:	d902      	bls.n	8013330 <SPI_WaitFlagStateUntilTimeout+0x30>
 801332a:	683b      	ldr	r3, [r7, #0]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d13d      	bne.n	80133ac <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	685a      	ldr	r2, [r3, #4]
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801333e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	685b      	ldr	r3, [r3, #4]
 8013344:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013348:	d111      	bne.n	801336e <SPI_WaitFlagStateUntilTimeout+0x6e>
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	689b      	ldr	r3, [r3, #8]
 801334e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013352:	d004      	beq.n	801335e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	689b      	ldr	r3, [r3, #8]
 8013358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801335c:	d107      	bne.n	801336e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	681a      	ldr	r2, [r3, #0]
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801336c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013376:	d10f      	bne.n	8013398 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	681a      	ldr	r2, [r3, #0]
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013386:	601a      	str	r2, [r3, #0]
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	681a      	ldr	r2, [r3, #0]
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013396:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	2201      	movs	r2, #1
 801339c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	2200      	movs	r2, #0
 80133a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80133a8:	2303      	movs	r3, #3
 80133aa:	e00f      	b.n	80133cc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	689a      	ldr	r2, [r3, #8]
 80133b2:	68bb      	ldr	r3, [r7, #8]
 80133b4:	4013      	ands	r3, r2
 80133b6:	68ba      	ldr	r2, [r7, #8]
 80133b8:	429a      	cmp	r2, r3
 80133ba:	bf0c      	ite	eq
 80133bc:	2301      	moveq	r3, #1
 80133be:	2300      	movne	r3, #0
 80133c0:	b2db      	uxtb	r3, r3
 80133c2:	461a      	mov	r2, r3
 80133c4:	79fb      	ldrb	r3, [r7, #7]
 80133c6:	429a      	cmp	r2, r3
 80133c8:	d1a3      	bne.n	8013312 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80133ca:	2300      	movs	r3, #0
}
 80133cc:	4618      	mov	r0, r3
 80133ce:	3710      	adds	r7, #16
 80133d0:	46bd      	mov	sp, r7
 80133d2:	bd80      	pop	{r7, pc}

080133d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80133d4:	b580      	push	{r7, lr}
 80133d6:	b088      	sub	sp, #32
 80133d8:	af02      	add	r7, sp, #8
 80133da:	60f8      	str	r0, [r7, #12]
 80133dc:	60b9      	str	r1, [r7, #8]
 80133de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80133e0:	4b1b      	ldr	r3, [pc, #108]	; (8013450 <SPI_EndRxTxTransaction+0x7c>)
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	4a1b      	ldr	r2, [pc, #108]	; (8013454 <SPI_EndRxTxTransaction+0x80>)
 80133e6:	fba2 2303 	umull	r2, r3, r2, r3
 80133ea:	0d5b      	lsrs	r3, r3, #21
 80133ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80133f0:	fb02 f303 	mul.w	r3, r2, r3
 80133f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	685b      	ldr	r3, [r3, #4]
 80133fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80133fe:	d112      	bne.n	8013426 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	9300      	str	r3, [sp, #0]
 8013404:	68bb      	ldr	r3, [r7, #8]
 8013406:	2200      	movs	r2, #0
 8013408:	2180      	movs	r1, #128	; 0x80
 801340a:	68f8      	ldr	r0, [r7, #12]
 801340c:	f7ff ff78 	bl	8013300 <SPI_WaitFlagStateUntilTimeout>
 8013410:	4603      	mov	r3, r0
 8013412:	2b00      	cmp	r3, #0
 8013414:	d016      	beq.n	8013444 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801341a:	f043 0220 	orr.w	r2, r3, #32
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8013422:	2303      	movs	r3, #3
 8013424:	e00f      	b.n	8013446 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8013426:	697b      	ldr	r3, [r7, #20]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d00a      	beq.n	8013442 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 801342c:	697b      	ldr	r3, [r7, #20]
 801342e:	3b01      	subs	r3, #1
 8013430:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	689b      	ldr	r3, [r3, #8]
 8013438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801343c:	2b80      	cmp	r3, #128	; 0x80
 801343e:	d0f2      	beq.n	8013426 <SPI_EndRxTxTransaction+0x52>
 8013440:	e000      	b.n	8013444 <SPI_EndRxTxTransaction+0x70>
        break;
 8013442:	bf00      	nop
  }

  return HAL_OK;
 8013444:	2300      	movs	r3, #0
}
 8013446:	4618      	mov	r0, r3
 8013448:	3718      	adds	r7, #24
 801344a:	46bd      	mov	sp, r7
 801344c:	bd80      	pop	{r7, pc}
 801344e:	bf00      	nop
 8013450:	200000c0 	.word	0x200000c0
 8013454:	165e9f81 	.word	0x165e9f81

08013458 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013458:	b580      	push	{r7, lr}
 801345a:	b082      	sub	sp, #8
 801345c:	af00      	add	r7, sp, #0
 801345e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	2b00      	cmp	r3, #0
 8013464:	d101      	bne.n	801346a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013466:	2301      	movs	r3, #1
 8013468:	e01d      	b.n	80134a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013470:	b2db      	uxtb	r3, r3
 8013472:	2b00      	cmp	r3, #0
 8013474:	d106      	bne.n	8013484 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	2200      	movs	r2, #0
 801347a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801347e:	6878      	ldr	r0, [r7, #4]
 8013480:	f7ef f9c6 	bl	8002810 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	2202      	movs	r2, #2
 8013488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	681a      	ldr	r2, [r3, #0]
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	3304      	adds	r3, #4
 8013494:	4619      	mov	r1, r3
 8013496:	4610      	mov	r0, r2
 8013498:	f000 fc3e 	bl	8013d18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	2201      	movs	r2, #1
 80134a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80134a4:	2300      	movs	r3, #0
}
 80134a6:	4618      	mov	r0, r3
 80134a8:	3708      	adds	r7, #8
 80134aa:	46bd      	mov	sp, r7
 80134ac:	bd80      	pop	{r7, pc}

080134ae <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80134ae:	b480      	push	{r7}
 80134b0:	b085      	sub	sp, #20
 80134b2:	af00      	add	r7, sp, #0
 80134b4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	2202      	movs	r2, #2
 80134ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	689b      	ldr	r3, [r3, #8]
 80134c4:	f003 0307 	and.w	r3, r3, #7
 80134c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	2b06      	cmp	r3, #6
 80134ce:	d007      	beq.n	80134e0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	681a      	ldr	r2, [r3, #0]
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	f042 0201 	orr.w	r2, r2, #1
 80134de:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	2201      	movs	r2, #1
 80134e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80134e8:	2300      	movs	r3, #0
}
 80134ea:	4618      	mov	r0, r3
 80134ec:	3714      	adds	r7, #20
 80134ee:	46bd      	mov	sp, r7
 80134f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f4:	4770      	bx	lr

080134f6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80134f6:	b480      	push	{r7}
 80134f8:	b085      	sub	sp, #20
 80134fa:	af00      	add	r7, sp, #0
 80134fc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	68da      	ldr	r2, [r3, #12]
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	f042 0201 	orr.w	r2, r2, #1
 801350c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	689b      	ldr	r3, [r3, #8]
 8013514:	f003 0307 	and.w	r3, r3, #7
 8013518:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	2b06      	cmp	r3, #6
 801351e:	d007      	beq.n	8013530 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	681a      	ldr	r2, [r3, #0]
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	f042 0201 	orr.w	r2, r2, #1
 801352e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013530:	2300      	movs	r3, #0
}
 8013532:	4618      	mov	r0, r3
 8013534:	3714      	adds	r7, #20
 8013536:	46bd      	mov	sp, r7
 8013538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801353c:	4770      	bx	lr

0801353e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801353e:	b580      	push	{r7, lr}
 8013540:	b082      	sub	sp, #8
 8013542:	af00      	add	r7, sp, #0
 8013544:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d101      	bne.n	8013550 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801354c:	2301      	movs	r3, #1
 801354e:	e01d      	b.n	801358c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013556:	b2db      	uxtb	r3, r3
 8013558:	2b00      	cmp	r3, #0
 801355a:	d106      	bne.n	801356a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	2200      	movs	r2, #0
 8013560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8013564:	6878      	ldr	r0, [r7, #4]
 8013566:	f7ef f815 	bl	8002594 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	2202      	movs	r2, #2
 801356e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	681a      	ldr	r2, [r3, #0]
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	3304      	adds	r3, #4
 801357a:	4619      	mov	r1, r3
 801357c:	4610      	mov	r0, r2
 801357e:	f000 fbcb 	bl	8013d18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	2201      	movs	r2, #1
 8013586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801358a:	2300      	movs	r3, #0
}
 801358c:	4618      	mov	r0, r3
 801358e:	3708      	adds	r7, #8
 8013590:	46bd      	mov	sp, r7
 8013592:	bd80      	pop	{r7, pc}

08013594 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013594:	b580      	push	{r7, lr}
 8013596:	b084      	sub	sp, #16
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
 801359c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	2201      	movs	r2, #1
 80135a4:	6839      	ldr	r1, [r7, #0]
 80135a6:	4618      	mov	r0, r3
 80135a8:	f000 fea0 	bl	80142ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	4a15      	ldr	r2, [pc, #84]	; (8013608 <HAL_TIM_PWM_Start+0x74>)
 80135b2:	4293      	cmp	r3, r2
 80135b4:	d004      	beq.n	80135c0 <HAL_TIM_PWM_Start+0x2c>
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	4a14      	ldr	r2, [pc, #80]	; (801360c <HAL_TIM_PWM_Start+0x78>)
 80135bc:	4293      	cmp	r3, r2
 80135be:	d101      	bne.n	80135c4 <HAL_TIM_PWM_Start+0x30>
 80135c0:	2301      	movs	r3, #1
 80135c2:	e000      	b.n	80135c6 <HAL_TIM_PWM_Start+0x32>
 80135c4:	2300      	movs	r3, #0
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d007      	beq.n	80135da <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80135d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	689b      	ldr	r3, [r3, #8]
 80135e0:	f003 0307 	and.w	r3, r3, #7
 80135e4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	2b06      	cmp	r3, #6
 80135ea:	d007      	beq.n	80135fc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	681a      	ldr	r2, [r3, #0]
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	f042 0201 	orr.w	r2, r2, #1
 80135fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80135fc:	2300      	movs	r3, #0
}
 80135fe:	4618      	mov	r0, r3
 8013600:	3710      	adds	r7, #16
 8013602:	46bd      	mov	sp, r7
 8013604:	bd80      	pop	{r7, pc}
 8013606:	bf00      	nop
 8013608:	40010000 	.word	0x40010000
 801360c:	40010400 	.word	0x40010400

08013610 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8013610:	b580      	push	{r7, lr}
 8013612:	b086      	sub	sp, #24
 8013614:	af00      	add	r7, sp, #0
 8013616:	6078      	str	r0, [r7, #4]
 8013618:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d101      	bne.n	8013624 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8013620:	2301      	movs	r3, #1
 8013622:	e083      	b.n	801372c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801362a:	b2db      	uxtb	r3, r3
 801362c:	2b00      	cmp	r3, #0
 801362e:	d106      	bne.n	801363e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	2200      	movs	r2, #0
 8013634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8013638:	6878      	ldr	r0, [r7, #4]
 801363a:	f7ef fb9d 	bl	8002d78 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	2202      	movs	r2, #2
 8013642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	689b      	ldr	r3, [r3, #8]
 801364c:	687a      	ldr	r2, [r7, #4]
 801364e:	6812      	ldr	r2, [r2, #0]
 8013650:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013654:	f023 0307 	bic.w	r3, r3, #7
 8013658:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	681a      	ldr	r2, [r3, #0]
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	3304      	adds	r3, #4
 8013662:	4619      	mov	r1, r3
 8013664:	4610      	mov	r0, r2
 8013666:	f000 fb57 	bl	8013d18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	689b      	ldr	r3, [r3, #8]
 8013670:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	699b      	ldr	r3, [r3, #24]
 8013678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	6a1b      	ldr	r3, [r3, #32]
 8013680:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8013682:	683b      	ldr	r3, [r7, #0]
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	697a      	ldr	r2, [r7, #20]
 8013688:	4313      	orrs	r3, r2
 801368a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 801368c:	693b      	ldr	r3, [r7, #16]
 801368e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013692:	f023 0303 	bic.w	r3, r3, #3
 8013696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8013698:	683b      	ldr	r3, [r7, #0]
 801369a:	689a      	ldr	r2, [r3, #8]
 801369c:	683b      	ldr	r3, [r7, #0]
 801369e:	699b      	ldr	r3, [r3, #24]
 80136a0:	021b      	lsls	r3, r3, #8
 80136a2:	4313      	orrs	r3, r2
 80136a4:	693a      	ldr	r2, [r7, #16]
 80136a6:	4313      	orrs	r3, r2
 80136a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80136aa:	693b      	ldr	r3, [r7, #16]
 80136ac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80136b0:	f023 030c 	bic.w	r3, r3, #12
 80136b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80136b6:	693b      	ldr	r3, [r7, #16]
 80136b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80136bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80136c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80136c2:	683b      	ldr	r3, [r7, #0]
 80136c4:	68da      	ldr	r2, [r3, #12]
 80136c6:	683b      	ldr	r3, [r7, #0]
 80136c8:	69db      	ldr	r3, [r3, #28]
 80136ca:	021b      	lsls	r3, r3, #8
 80136cc:	4313      	orrs	r3, r2
 80136ce:	693a      	ldr	r2, [r7, #16]
 80136d0:	4313      	orrs	r3, r2
 80136d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80136d4:	683b      	ldr	r3, [r7, #0]
 80136d6:	691b      	ldr	r3, [r3, #16]
 80136d8:	011a      	lsls	r2, r3, #4
 80136da:	683b      	ldr	r3, [r7, #0]
 80136dc:	6a1b      	ldr	r3, [r3, #32]
 80136de:	031b      	lsls	r3, r3, #12
 80136e0:	4313      	orrs	r3, r2
 80136e2:	693a      	ldr	r2, [r7, #16]
 80136e4:	4313      	orrs	r3, r2
 80136e6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80136ee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80136f6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80136f8:	683b      	ldr	r3, [r7, #0]
 80136fa:	685a      	ldr	r2, [r3, #4]
 80136fc:	683b      	ldr	r3, [r7, #0]
 80136fe:	695b      	ldr	r3, [r3, #20]
 8013700:	011b      	lsls	r3, r3, #4
 8013702:	4313      	orrs	r3, r2
 8013704:	68fa      	ldr	r2, [r7, #12]
 8013706:	4313      	orrs	r3, r2
 8013708:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	697a      	ldr	r2, [r7, #20]
 8013710:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	693a      	ldr	r2, [r7, #16]
 8013718:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	68fa      	ldr	r2, [r7, #12]
 8013720:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	2201      	movs	r2, #1
 8013726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801372a:	2300      	movs	r3, #0
}
 801372c:	4618      	mov	r0, r3
 801372e:	3718      	adds	r7, #24
 8013730:	46bd      	mov	sp, r7
 8013732:	bd80      	pop	{r7, pc}

08013734 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013734:	b580      	push	{r7, lr}
 8013736:	b082      	sub	sp, #8
 8013738:	af00      	add	r7, sp, #0
 801373a:	6078      	str	r0, [r7, #4]
 801373c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 801373e:	683b      	ldr	r3, [r7, #0]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d003      	beq.n	801374c <HAL_TIM_Encoder_Start+0x18>
 8013744:	683b      	ldr	r3, [r7, #0]
 8013746:	2b04      	cmp	r3, #4
 8013748:	d008      	beq.n	801375c <HAL_TIM_Encoder_Start+0x28>
 801374a:	e00f      	b.n	801376c <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	2201      	movs	r2, #1
 8013752:	2100      	movs	r1, #0
 8013754:	4618      	mov	r0, r3
 8013756:	f000 fdc9 	bl	80142ec <TIM_CCxChannelCmd>
      break;
 801375a:	e016      	b.n	801378a <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	2201      	movs	r2, #1
 8013762:	2104      	movs	r1, #4
 8013764:	4618      	mov	r0, r3
 8013766:	f000 fdc1 	bl	80142ec <TIM_CCxChannelCmd>
      break;
 801376a:	e00e      	b.n	801378a <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	2201      	movs	r2, #1
 8013772:	2100      	movs	r1, #0
 8013774:	4618      	mov	r0, r3
 8013776:	f000 fdb9 	bl	80142ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	2201      	movs	r2, #1
 8013780:	2104      	movs	r1, #4
 8013782:	4618      	mov	r0, r3
 8013784:	f000 fdb2 	bl	80142ec <TIM_CCxChannelCmd>
      break;
 8013788:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	681a      	ldr	r2, [r3, #0]
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	f042 0201 	orr.w	r2, r2, #1
 8013798:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801379a:	2300      	movs	r3, #0
}
 801379c:	4618      	mov	r0, r3
 801379e:	3708      	adds	r7, #8
 80137a0:	46bd      	mov	sp, r7
 80137a2:	bd80      	pop	{r7, pc}

080137a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b082      	sub	sp, #8
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	691b      	ldr	r3, [r3, #16]
 80137b2:	f003 0302 	and.w	r3, r3, #2
 80137b6:	2b02      	cmp	r3, #2
 80137b8:	d122      	bne.n	8013800 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	68db      	ldr	r3, [r3, #12]
 80137c0:	f003 0302 	and.w	r3, r3, #2
 80137c4:	2b02      	cmp	r3, #2
 80137c6:	d11b      	bne.n	8013800 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	f06f 0202 	mvn.w	r2, #2
 80137d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	2201      	movs	r2, #1
 80137d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	699b      	ldr	r3, [r3, #24]
 80137de:	f003 0303 	and.w	r3, r3, #3
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d003      	beq.n	80137ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80137e6:	6878      	ldr	r0, [r7, #4]
 80137e8:	f000 fa78 	bl	8013cdc <HAL_TIM_IC_CaptureCallback>
 80137ec:	e005      	b.n	80137fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80137ee:	6878      	ldr	r0, [r7, #4]
 80137f0:	f000 fa6a 	bl	8013cc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80137f4:	6878      	ldr	r0, [r7, #4]
 80137f6:	f000 fa7b 	bl	8013cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	2200      	movs	r2, #0
 80137fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	691b      	ldr	r3, [r3, #16]
 8013806:	f003 0304 	and.w	r3, r3, #4
 801380a:	2b04      	cmp	r3, #4
 801380c:	d122      	bne.n	8013854 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	68db      	ldr	r3, [r3, #12]
 8013814:	f003 0304 	and.w	r3, r3, #4
 8013818:	2b04      	cmp	r3, #4
 801381a:	d11b      	bne.n	8013854 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	f06f 0204 	mvn.w	r2, #4
 8013824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	2202      	movs	r2, #2
 801382a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	699b      	ldr	r3, [r3, #24]
 8013832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013836:	2b00      	cmp	r3, #0
 8013838:	d003      	beq.n	8013842 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801383a:	6878      	ldr	r0, [r7, #4]
 801383c:	f000 fa4e 	bl	8013cdc <HAL_TIM_IC_CaptureCallback>
 8013840:	e005      	b.n	801384e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013842:	6878      	ldr	r0, [r7, #4]
 8013844:	f000 fa40 	bl	8013cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013848:	6878      	ldr	r0, [r7, #4]
 801384a:	f000 fa51 	bl	8013cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	2200      	movs	r2, #0
 8013852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	691b      	ldr	r3, [r3, #16]
 801385a:	f003 0308 	and.w	r3, r3, #8
 801385e:	2b08      	cmp	r3, #8
 8013860:	d122      	bne.n	80138a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	68db      	ldr	r3, [r3, #12]
 8013868:	f003 0308 	and.w	r3, r3, #8
 801386c:	2b08      	cmp	r3, #8
 801386e:	d11b      	bne.n	80138a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	f06f 0208 	mvn.w	r2, #8
 8013878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	2204      	movs	r2, #4
 801387e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	69db      	ldr	r3, [r3, #28]
 8013886:	f003 0303 	and.w	r3, r3, #3
 801388a:	2b00      	cmp	r3, #0
 801388c:	d003      	beq.n	8013896 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801388e:	6878      	ldr	r0, [r7, #4]
 8013890:	f000 fa24 	bl	8013cdc <HAL_TIM_IC_CaptureCallback>
 8013894:	e005      	b.n	80138a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013896:	6878      	ldr	r0, [r7, #4]
 8013898:	f000 fa16 	bl	8013cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801389c:	6878      	ldr	r0, [r7, #4]
 801389e:	f000 fa27 	bl	8013cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	2200      	movs	r2, #0
 80138a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	691b      	ldr	r3, [r3, #16]
 80138ae:	f003 0310 	and.w	r3, r3, #16
 80138b2:	2b10      	cmp	r3, #16
 80138b4:	d122      	bne.n	80138fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	68db      	ldr	r3, [r3, #12]
 80138bc:	f003 0310 	and.w	r3, r3, #16
 80138c0:	2b10      	cmp	r3, #16
 80138c2:	d11b      	bne.n	80138fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	f06f 0210 	mvn.w	r2, #16
 80138cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	2208      	movs	r2, #8
 80138d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	69db      	ldr	r3, [r3, #28]
 80138da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d003      	beq.n	80138ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80138e2:	6878      	ldr	r0, [r7, #4]
 80138e4:	f000 f9fa 	bl	8013cdc <HAL_TIM_IC_CaptureCallback>
 80138e8:	e005      	b.n	80138f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80138ea:	6878      	ldr	r0, [r7, #4]
 80138ec:	f000 f9ec 	bl	8013cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80138f0:	6878      	ldr	r0, [r7, #4]
 80138f2:	f000 f9fd 	bl	8013cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	2200      	movs	r2, #0
 80138fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	691b      	ldr	r3, [r3, #16]
 8013902:	f003 0301 	and.w	r3, r3, #1
 8013906:	2b01      	cmp	r3, #1
 8013908:	d10e      	bne.n	8013928 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	68db      	ldr	r3, [r3, #12]
 8013910:	f003 0301 	and.w	r3, r3, #1
 8013914:	2b01      	cmp	r3, #1
 8013916:	d107      	bne.n	8013928 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	f06f 0201 	mvn.w	r2, #1
 8013920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8013922:	6878      	ldr	r0, [r7, #4]
 8013924:	f7f9 fa50 	bl	800cdc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	691b      	ldr	r3, [r3, #16]
 801392e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013932:	2b80      	cmp	r3, #128	; 0x80
 8013934:	d10e      	bne.n	8013954 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	68db      	ldr	r3, [r3, #12]
 801393c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013940:	2b80      	cmp	r3, #128	; 0x80
 8013942:	d107      	bne.n	8013954 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801394c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801394e:	6878      	ldr	r0, [r7, #4]
 8013950:	f000 fd78 	bl	8014444 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	691b      	ldr	r3, [r3, #16]
 801395a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801395e:	2b40      	cmp	r3, #64	; 0x40
 8013960:	d10e      	bne.n	8013980 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	68db      	ldr	r3, [r3, #12]
 8013968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801396c:	2b40      	cmp	r3, #64	; 0x40
 801396e:	d107      	bne.n	8013980 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8013978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801397a:	6878      	ldr	r0, [r7, #4]
 801397c:	f000 f9c2 	bl	8013d04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	691b      	ldr	r3, [r3, #16]
 8013986:	f003 0320 	and.w	r3, r3, #32
 801398a:	2b20      	cmp	r3, #32
 801398c:	d10e      	bne.n	80139ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	68db      	ldr	r3, [r3, #12]
 8013994:	f003 0320 	and.w	r3, r3, #32
 8013998:	2b20      	cmp	r3, #32
 801399a:	d107      	bne.n	80139ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	f06f 0220 	mvn.w	r2, #32
 80139a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80139a6:	6878      	ldr	r0, [r7, #4]
 80139a8:	f000 fd42 	bl	8014430 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80139ac:	bf00      	nop
 80139ae:	3708      	adds	r7, #8
 80139b0:	46bd      	mov	sp, r7
 80139b2:	bd80      	pop	{r7, pc}

080139b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b084      	sub	sp, #16
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	60f8      	str	r0, [r7, #12]
 80139bc:	60b9      	str	r1, [r7, #8]
 80139be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80139c6:	2b01      	cmp	r3, #1
 80139c8:	d101      	bne.n	80139ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 80139ca:	2302      	movs	r3, #2
 80139cc:	e0b4      	b.n	8013b38 <HAL_TIM_PWM_ConfigChannel+0x184>
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	2201      	movs	r2, #1
 80139d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	2202      	movs	r2, #2
 80139da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	2b0c      	cmp	r3, #12
 80139e2:	f200 809f 	bhi.w	8013b24 <HAL_TIM_PWM_ConfigChannel+0x170>
 80139e6:	a201      	add	r2, pc, #4	; (adr r2, 80139ec <HAL_TIM_PWM_ConfigChannel+0x38>)
 80139e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139ec:	08013a21 	.word	0x08013a21
 80139f0:	08013b25 	.word	0x08013b25
 80139f4:	08013b25 	.word	0x08013b25
 80139f8:	08013b25 	.word	0x08013b25
 80139fc:	08013a61 	.word	0x08013a61
 8013a00:	08013b25 	.word	0x08013b25
 8013a04:	08013b25 	.word	0x08013b25
 8013a08:	08013b25 	.word	0x08013b25
 8013a0c:	08013aa3 	.word	0x08013aa3
 8013a10:	08013b25 	.word	0x08013b25
 8013a14:	08013b25 	.word	0x08013b25
 8013a18:	08013b25 	.word	0x08013b25
 8013a1c:	08013ae3 	.word	0x08013ae3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	68b9      	ldr	r1, [r7, #8]
 8013a26:	4618      	mov	r0, r3
 8013a28:	f000 fa16 	bl	8013e58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	699a      	ldr	r2, [r3, #24]
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	f042 0208 	orr.w	r2, r2, #8
 8013a3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	699a      	ldr	r2, [r3, #24]
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	f022 0204 	bic.w	r2, r2, #4
 8013a4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	6999      	ldr	r1, [r3, #24]
 8013a52:	68bb      	ldr	r3, [r7, #8]
 8013a54:	691a      	ldr	r2, [r3, #16]
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	430a      	orrs	r2, r1
 8013a5c:	619a      	str	r2, [r3, #24]
      break;
 8013a5e:	e062      	b.n	8013b26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	68b9      	ldr	r1, [r7, #8]
 8013a66:	4618      	mov	r0, r3
 8013a68:	f000 fa66 	bl	8013f38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	699a      	ldr	r2, [r3, #24]
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013a7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	699a      	ldr	r2, [r3, #24]
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013a8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	6999      	ldr	r1, [r3, #24]
 8013a92:	68bb      	ldr	r3, [r7, #8]
 8013a94:	691b      	ldr	r3, [r3, #16]
 8013a96:	021a      	lsls	r2, r3, #8
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	430a      	orrs	r2, r1
 8013a9e:	619a      	str	r2, [r3, #24]
      break;
 8013aa0:	e041      	b.n	8013b26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	68b9      	ldr	r1, [r7, #8]
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	f000 fabb 	bl	8014024 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	69da      	ldr	r2, [r3, #28]
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	f042 0208 	orr.w	r2, r2, #8
 8013abc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	69da      	ldr	r2, [r3, #28]
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	f022 0204 	bic.w	r2, r2, #4
 8013acc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	69d9      	ldr	r1, [r3, #28]
 8013ad4:	68bb      	ldr	r3, [r7, #8]
 8013ad6:	691a      	ldr	r2, [r3, #16]
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	430a      	orrs	r2, r1
 8013ade:	61da      	str	r2, [r3, #28]
      break;
 8013ae0:	e021      	b.n	8013b26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	68b9      	ldr	r1, [r7, #8]
 8013ae8:	4618      	mov	r0, r3
 8013aea:	f000 fb0f 	bl	801410c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	69da      	ldr	r2, [r3, #28]
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013afc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	69da      	ldr	r2, [r3, #28]
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013b0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	69d9      	ldr	r1, [r3, #28]
 8013b14:	68bb      	ldr	r3, [r7, #8]
 8013b16:	691b      	ldr	r3, [r3, #16]
 8013b18:	021a      	lsls	r2, r3, #8
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	430a      	orrs	r2, r1
 8013b20:	61da      	str	r2, [r3, #28]
      break;
 8013b22:	e000      	b.n	8013b26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8013b24:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	2201      	movs	r2, #1
 8013b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	2200      	movs	r2, #0
 8013b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013b36:	2300      	movs	r3, #0
}
 8013b38:	4618      	mov	r0, r3
 8013b3a:	3710      	adds	r7, #16
 8013b3c:	46bd      	mov	sp, r7
 8013b3e:	bd80      	pop	{r7, pc}

08013b40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8013b40:	b580      	push	{r7, lr}
 8013b42:	b084      	sub	sp, #16
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	6078      	str	r0, [r7, #4]
 8013b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013b50:	2b01      	cmp	r3, #1
 8013b52:	d101      	bne.n	8013b58 <HAL_TIM_ConfigClockSource+0x18>
 8013b54:	2302      	movs	r3, #2
 8013b56:	e0b3      	b.n	8013cc0 <HAL_TIM_ConfigClockSource+0x180>
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	2201      	movs	r2, #1
 8013b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	2202      	movs	r2, #2
 8013b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	689b      	ldr	r3, [r3, #8]
 8013b6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8013b76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013b7e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	68fa      	ldr	r2, [r7, #12]
 8013b86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8013b88:	683b      	ldr	r3, [r7, #0]
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013b90:	d03e      	beq.n	8013c10 <HAL_TIM_ConfigClockSource+0xd0>
 8013b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013b96:	f200 8087 	bhi.w	8013ca8 <HAL_TIM_ConfigClockSource+0x168>
 8013b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013b9e:	f000 8085 	beq.w	8013cac <HAL_TIM_ConfigClockSource+0x16c>
 8013ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013ba6:	d87f      	bhi.n	8013ca8 <HAL_TIM_ConfigClockSource+0x168>
 8013ba8:	2b70      	cmp	r3, #112	; 0x70
 8013baa:	d01a      	beq.n	8013be2 <HAL_TIM_ConfigClockSource+0xa2>
 8013bac:	2b70      	cmp	r3, #112	; 0x70
 8013bae:	d87b      	bhi.n	8013ca8 <HAL_TIM_ConfigClockSource+0x168>
 8013bb0:	2b60      	cmp	r3, #96	; 0x60
 8013bb2:	d050      	beq.n	8013c56 <HAL_TIM_ConfigClockSource+0x116>
 8013bb4:	2b60      	cmp	r3, #96	; 0x60
 8013bb6:	d877      	bhi.n	8013ca8 <HAL_TIM_ConfigClockSource+0x168>
 8013bb8:	2b50      	cmp	r3, #80	; 0x50
 8013bba:	d03c      	beq.n	8013c36 <HAL_TIM_ConfigClockSource+0xf6>
 8013bbc:	2b50      	cmp	r3, #80	; 0x50
 8013bbe:	d873      	bhi.n	8013ca8 <HAL_TIM_ConfigClockSource+0x168>
 8013bc0:	2b40      	cmp	r3, #64	; 0x40
 8013bc2:	d058      	beq.n	8013c76 <HAL_TIM_ConfigClockSource+0x136>
 8013bc4:	2b40      	cmp	r3, #64	; 0x40
 8013bc6:	d86f      	bhi.n	8013ca8 <HAL_TIM_ConfigClockSource+0x168>
 8013bc8:	2b30      	cmp	r3, #48	; 0x30
 8013bca:	d064      	beq.n	8013c96 <HAL_TIM_ConfigClockSource+0x156>
 8013bcc:	2b30      	cmp	r3, #48	; 0x30
 8013bce:	d86b      	bhi.n	8013ca8 <HAL_TIM_ConfigClockSource+0x168>
 8013bd0:	2b20      	cmp	r3, #32
 8013bd2:	d060      	beq.n	8013c96 <HAL_TIM_ConfigClockSource+0x156>
 8013bd4:	2b20      	cmp	r3, #32
 8013bd6:	d867      	bhi.n	8013ca8 <HAL_TIM_ConfigClockSource+0x168>
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d05c      	beq.n	8013c96 <HAL_TIM_ConfigClockSource+0x156>
 8013bdc:	2b10      	cmp	r3, #16
 8013bde:	d05a      	beq.n	8013c96 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8013be0:	e062      	b.n	8013ca8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	6818      	ldr	r0, [r3, #0]
 8013be6:	683b      	ldr	r3, [r7, #0]
 8013be8:	6899      	ldr	r1, [r3, #8]
 8013bea:	683b      	ldr	r3, [r7, #0]
 8013bec:	685a      	ldr	r2, [r3, #4]
 8013bee:	683b      	ldr	r3, [r7, #0]
 8013bf0:	68db      	ldr	r3, [r3, #12]
 8013bf2:	f000 fb5b 	bl	80142ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	689b      	ldr	r3, [r3, #8]
 8013bfc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8013c04:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	68fa      	ldr	r2, [r7, #12]
 8013c0c:	609a      	str	r2, [r3, #8]
      break;
 8013c0e:	e04e      	b.n	8013cae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	6818      	ldr	r0, [r3, #0]
 8013c14:	683b      	ldr	r3, [r7, #0]
 8013c16:	6899      	ldr	r1, [r3, #8]
 8013c18:	683b      	ldr	r3, [r7, #0]
 8013c1a:	685a      	ldr	r2, [r3, #4]
 8013c1c:	683b      	ldr	r3, [r7, #0]
 8013c1e:	68db      	ldr	r3, [r3, #12]
 8013c20:	f000 fb44 	bl	80142ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	689a      	ldr	r2, [r3, #8]
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013c32:	609a      	str	r2, [r3, #8]
      break;
 8013c34:	e03b      	b.n	8013cae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	6818      	ldr	r0, [r3, #0]
 8013c3a:	683b      	ldr	r3, [r7, #0]
 8013c3c:	6859      	ldr	r1, [r3, #4]
 8013c3e:	683b      	ldr	r3, [r7, #0]
 8013c40:	68db      	ldr	r3, [r3, #12]
 8013c42:	461a      	mov	r2, r3
 8013c44:	f000 fab8 	bl	80141b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	2150      	movs	r1, #80	; 0x50
 8013c4e:	4618      	mov	r0, r3
 8013c50:	f000 fb11 	bl	8014276 <TIM_ITRx_SetConfig>
      break;
 8013c54:	e02b      	b.n	8013cae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	6818      	ldr	r0, [r3, #0]
 8013c5a:	683b      	ldr	r3, [r7, #0]
 8013c5c:	6859      	ldr	r1, [r3, #4]
 8013c5e:	683b      	ldr	r3, [r7, #0]
 8013c60:	68db      	ldr	r3, [r3, #12]
 8013c62:	461a      	mov	r2, r3
 8013c64:	f000 fad7 	bl	8014216 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	2160      	movs	r1, #96	; 0x60
 8013c6e:	4618      	mov	r0, r3
 8013c70:	f000 fb01 	bl	8014276 <TIM_ITRx_SetConfig>
      break;
 8013c74:	e01b      	b.n	8013cae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	6818      	ldr	r0, [r3, #0]
 8013c7a:	683b      	ldr	r3, [r7, #0]
 8013c7c:	6859      	ldr	r1, [r3, #4]
 8013c7e:	683b      	ldr	r3, [r7, #0]
 8013c80:	68db      	ldr	r3, [r3, #12]
 8013c82:	461a      	mov	r2, r3
 8013c84:	f000 fa98 	bl	80141b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	2140      	movs	r1, #64	; 0x40
 8013c8e:	4618      	mov	r0, r3
 8013c90:	f000 faf1 	bl	8014276 <TIM_ITRx_SetConfig>
      break;
 8013c94:	e00b      	b.n	8013cae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	681a      	ldr	r2, [r3, #0]
 8013c9a:	683b      	ldr	r3, [r7, #0]
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	4619      	mov	r1, r3
 8013ca0:	4610      	mov	r0, r2
 8013ca2:	f000 fae8 	bl	8014276 <TIM_ITRx_SetConfig>
      break;
 8013ca6:	e002      	b.n	8013cae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8013ca8:	bf00      	nop
 8013caa:	e000      	b.n	8013cae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8013cac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	2201      	movs	r2, #1
 8013cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	2200      	movs	r2, #0
 8013cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013cbe:	2300      	movs	r3, #0
}
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	3710      	adds	r7, #16
 8013cc4:	46bd      	mov	sp, r7
 8013cc6:	bd80      	pop	{r7, pc}

08013cc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013cc8:	b480      	push	{r7}
 8013cca:	b083      	sub	sp, #12
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8013cd0:	bf00      	nop
 8013cd2:	370c      	adds	r7, #12
 8013cd4:	46bd      	mov	sp, r7
 8013cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cda:	4770      	bx	lr

08013cdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013cdc:	b480      	push	{r7}
 8013cde:	b083      	sub	sp, #12
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013ce4:	bf00      	nop
 8013ce6:	370c      	adds	r7, #12
 8013ce8:	46bd      	mov	sp, r7
 8013cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cee:	4770      	bx	lr

08013cf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013cf0:	b480      	push	{r7}
 8013cf2:	b083      	sub	sp, #12
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8013cf8:	bf00      	nop
 8013cfa:	370c      	adds	r7, #12
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d02:	4770      	bx	lr

08013d04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8013d04:	b480      	push	{r7}
 8013d06:	b083      	sub	sp, #12
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8013d0c:	bf00      	nop
 8013d0e:	370c      	adds	r7, #12
 8013d10:	46bd      	mov	sp, r7
 8013d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d16:	4770      	bx	lr

08013d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8013d18:	b480      	push	{r7}
 8013d1a:	b085      	sub	sp, #20
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	6078      	str	r0, [r7, #4]
 8013d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	4a40      	ldr	r2, [pc, #256]	; (8013e2c <TIM_Base_SetConfig+0x114>)
 8013d2c:	4293      	cmp	r3, r2
 8013d2e:	d013      	beq.n	8013d58 <TIM_Base_SetConfig+0x40>
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013d36:	d00f      	beq.n	8013d58 <TIM_Base_SetConfig+0x40>
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	4a3d      	ldr	r2, [pc, #244]	; (8013e30 <TIM_Base_SetConfig+0x118>)
 8013d3c:	4293      	cmp	r3, r2
 8013d3e:	d00b      	beq.n	8013d58 <TIM_Base_SetConfig+0x40>
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	4a3c      	ldr	r2, [pc, #240]	; (8013e34 <TIM_Base_SetConfig+0x11c>)
 8013d44:	4293      	cmp	r3, r2
 8013d46:	d007      	beq.n	8013d58 <TIM_Base_SetConfig+0x40>
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	4a3b      	ldr	r2, [pc, #236]	; (8013e38 <TIM_Base_SetConfig+0x120>)
 8013d4c:	4293      	cmp	r3, r2
 8013d4e:	d003      	beq.n	8013d58 <TIM_Base_SetConfig+0x40>
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	4a3a      	ldr	r2, [pc, #232]	; (8013e3c <TIM_Base_SetConfig+0x124>)
 8013d54:	4293      	cmp	r3, r2
 8013d56:	d108      	bne.n	8013d6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013d60:	683b      	ldr	r3, [r7, #0]
 8013d62:	685b      	ldr	r3, [r3, #4]
 8013d64:	68fa      	ldr	r2, [r7, #12]
 8013d66:	4313      	orrs	r3, r2
 8013d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	4a2f      	ldr	r2, [pc, #188]	; (8013e2c <TIM_Base_SetConfig+0x114>)
 8013d6e:	4293      	cmp	r3, r2
 8013d70:	d02b      	beq.n	8013dca <TIM_Base_SetConfig+0xb2>
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013d78:	d027      	beq.n	8013dca <TIM_Base_SetConfig+0xb2>
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	4a2c      	ldr	r2, [pc, #176]	; (8013e30 <TIM_Base_SetConfig+0x118>)
 8013d7e:	4293      	cmp	r3, r2
 8013d80:	d023      	beq.n	8013dca <TIM_Base_SetConfig+0xb2>
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	4a2b      	ldr	r2, [pc, #172]	; (8013e34 <TIM_Base_SetConfig+0x11c>)
 8013d86:	4293      	cmp	r3, r2
 8013d88:	d01f      	beq.n	8013dca <TIM_Base_SetConfig+0xb2>
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	4a2a      	ldr	r2, [pc, #168]	; (8013e38 <TIM_Base_SetConfig+0x120>)
 8013d8e:	4293      	cmp	r3, r2
 8013d90:	d01b      	beq.n	8013dca <TIM_Base_SetConfig+0xb2>
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	4a29      	ldr	r2, [pc, #164]	; (8013e3c <TIM_Base_SetConfig+0x124>)
 8013d96:	4293      	cmp	r3, r2
 8013d98:	d017      	beq.n	8013dca <TIM_Base_SetConfig+0xb2>
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	4a28      	ldr	r2, [pc, #160]	; (8013e40 <TIM_Base_SetConfig+0x128>)
 8013d9e:	4293      	cmp	r3, r2
 8013da0:	d013      	beq.n	8013dca <TIM_Base_SetConfig+0xb2>
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	4a27      	ldr	r2, [pc, #156]	; (8013e44 <TIM_Base_SetConfig+0x12c>)
 8013da6:	4293      	cmp	r3, r2
 8013da8:	d00f      	beq.n	8013dca <TIM_Base_SetConfig+0xb2>
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	4a26      	ldr	r2, [pc, #152]	; (8013e48 <TIM_Base_SetConfig+0x130>)
 8013dae:	4293      	cmp	r3, r2
 8013db0:	d00b      	beq.n	8013dca <TIM_Base_SetConfig+0xb2>
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	4a25      	ldr	r2, [pc, #148]	; (8013e4c <TIM_Base_SetConfig+0x134>)
 8013db6:	4293      	cmp	r3, r2
 8013db8:	d007      	beq.n	8013dca <TIM_Base_SetConfig+0xb2>
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	4a24      	ldr	r2, [pc, #144]	; (8013e50 <TIM_Base_SetConfig+0x138>)
 8013dbe:	4293      	cmp	r3, r2
 8013dc0:	d003      	beq.n	8013dca <TIM_Base_SetConfig+0xb2>
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	4a23      	ldr	r2, [pc, #140]	; (8013e54 <TIM_Base_SetConfig+0x13c>)
 8013dc6:	4293      	cmp	r3, r2
 8013dc8:	d108      	bne.n	8013ddc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013dd2:	683b      	ldr	r3, [r7, #0]
 8013dd4:	68db      	ldr	r3, [r3, #12]
 8013dd6:	68fa      	ldr	r2, [r7, #12]
 8013dd8:	4313      	orrs	r3, r2
 8013dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013de2:	683b      	ldr	r3, [r7, #0]
 8013de4:	695b      	ldr	r3, [r3, #20]
 8013de6:	4313      	orrs	r3, r2
 8013de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	68fa      	ldr	r2, [r7, #12]
 8013dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013df0:	683b      	ldr	r3, [r7, #0]
 8013df2:	689a      	ldr	r2, [r3, #8]
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013df8:	683b      	ldr	r3, [r7, #0]
 8013dfa:	681a      	ldr	r2, [r3, #0]
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	4a0a      	ldr	r2, [pc, #40]	; (8013e2c <TIM_Base_SetConfig+0x114>)
 8013e04:	4293      	cmp	r3, r2
 8013e06:	d003      	beq.n	8013e10 <TIM_Base_SetConfig+0xf8>
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	4a0c      	ldr	r2, [pc, #48]	; (8013e3c <TIM_Base_SetConfig+0x124>)
 8013e0c:	4293      	cmp	r3, r2
 8013e0e:	d103      	bne.n	8013e18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013e10:	683b      	ldr	r3, [r7, #0]
 8013e12:	691a      	ldr	r2, [r3, #16]
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	2201      	movs	r2, #1
 8013e1c:	615a      	str	r2, [r3, #20]
}
 8013e1e:	bf00      	nop
 8013e20:	3714      	adds	r7, #20
 8013e22:	46bd      	mov	sp, r7
 8013e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e28:	4770      	bx	lr
 8013e2a:	bf00      	nop
 8013e2c:	40010000 	.word	0x40010000
 8013e30:	40000400 	.word	0x40000400
 8013e34:	40000800 	.word	0x40000800
 8013e38:	40000c00 	.word	0x40000c00
 8013e3c:	40010400 	.word	0x40010400
 8013e40:	40014000 	.word	0x40014000
 8013e44:	40014400 	.word	0x40014400
 8013e48:	40014800 	.word	0x40014800
 8013e4c:	40001800 	.word	0x40001800
 8013e50:	40001c00 	.word	0x40001c00
 8013e54:	40002000 	.word	0x40002000

08013e58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013e58:	b480      	push	{r7}
 8013e5a:	b087      	sub	sp, #28
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	6078      	str	r0, [r7, #4]
 8013e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	6a1b      	ldr	r3, [r3, #32]
 8013e66:	f023 0201 	bic.w	r2, r3, #1
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	6a1b      	ldr	r3, [r3, #32]
 8013e72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	685b      	ldr	r3, [r3, #4]
 8013e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	699b      	ldr	r3, [r3, #24]
 8013e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	f023 0303 	bic.w	r3, r3, #3
 8013e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013e90:	683b      	ldr	r3, [r7, #0]
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	68fa      	ldr	r2, [r7, #12]
 8013e96:	4313      	orrs	r3, r2
 8013e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013e9a:	697b      	ldr	r3, [r7, #20]
 8013e9c:	f023 0302 	bic.w	r3, r3, #2
 8013ea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013ea2:	683b      	ldr	r3, [r7, #0]
 8013ea4:	689b      	ldr	r3, [r3, #8]
 8013ea6:	697a      	ldr	r2, [r7, #20]
 8013ea8:	4313      	orrs	r3, r2
 8013eaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	4a20      	ldr	r2, [pc, #128]	; (8013f30 <TIM_OC1_SetConfig+0xd8>)
 8013eb0:	4293      	cmp	r3, r2
 8013eb2:	d003      	beq.n	8013ebc <TIM_OC1_SetConfig+0x64>
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	4a1f      	ldr	r2, [pc, #124]	; (8013f34 <TIM_OC1_SetConfig+0xdc>)
 8013eb8:	4293      	cmp	r3, r2
 8013eba:	d10c      	bne.n	8013ed6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013ebc:	697b      	ldr	r3, [r7, #20]
 8013ebe:	f023 0308 	bic.w	r3, r3, #8
 8013ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013ec4:	683b      	ldr	r3, [r7, #0]
 8013ec6:	68db      	ldr	r3, [r3, #12]
 8013ec8:	697a      	ldr	r2, [r7, #20]
 8013eca:	4313      	orrs	r3, r2
 8013ecc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013ece:	697b      	ldr	r3, [r7, #20]
 8013ed0:	f023 0304 	bic.w	r3, r3, #4
 8013ed4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	4a15      	ldr	r2, [pc, #84]	; (8013f30 <TIM_OC1_SetConfig+0xd8>)
 8013eda:	4293      	cmp	r3, r2
 8013edc:	d003      	beq.n	8013ee6 <TIM_OC1_SetConfig+0x8e>
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	4a14      	ldr	r2, [pc, #80]	; (8013f34 <TIM_OC1_SetConfig+0xdc>)
 8013ee2:	4293      	cmp	r3, r2
 8013ee4:	d111      	bne.n	8013f0a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8013ee6:	693b      	ldr	r3, [r7, #16]
 8013ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013eec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013eee:	693b      	ldr	r3, [r7, #16]
 8013ef0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013ef6:	683b      	ldr	r3, [r7, #0]
 8013ef8:	695b      	ldr	r3, [r3, #20]
 8013efa:	693a      	ldr	r2, [r7, #16]
 8013efc:	4313      	orrs	r3, r2
 8013efe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013f00:	683b      	ldr	r3, [r7, #0]
 8013f02:	699b      	ldr	r3, [r3, #24]
 8013f04:	693a      	ldr	r2, [r7, #16]
 8013f06:	4313      	orrs	r3, r2
 8013f08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	693a      	ldr	r2, [r7, #16]
 8013f0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	68fa      	ldr	r2, [r7, #12]
 8013f14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013f16:	683b      	ldr	r3, [r7, #0]
 8013f18:	685a      	ldr	r2, [r3, #4]
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	697a      	ldr	r2, [r7, #20]
 8013f22:	621a      	str	r2, [r3, #32]
}
 8013f24:	bf00      	nop
 8013f26:	371c      	adds	r7, #28
 8013f28:	46bd      	mov	sp, r7
 8013f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f2e:	4770      	bx	lr
 8013f30:	40010000 	.word	0x40010000
 8013f34:	40010400 	.word	0x40010400

08013f38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013f38:	b480      	push	{r7}
 8013f3a:	b087      	sub	sp, #28
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	6078      	str	r0, [r7, #4]
 8013f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	6a1b      	ldr	r3, [r3, #32]
 8013f46:	f023 0210 	bic.w	r2, r3, #16
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	6a1b      	ldr	r3, [r3, #32]
 8013f52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	685b      	ldr	r3, [r3, #4]
 8013f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	699b      	ldr	r3, [r3, #24]
 8013f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013f6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013f70:	683b      	ldr	r3, [r7, #0]
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	021b      	lsls	r3, r3, #8
 8013f76:	68fa      	ldr	r2, [r7, #12]
 8013f78:	4313      	orrs	r3, r2
 8013f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013f7c:	697b      	ldr	r3, [r7, #20]
 8013f7e:	f023 0320 	bic.w	r3, r3, #32
 8013f82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013f84:	683b      	ldr	r3, [r7, #0]
 8013f86:	689b      	ldr	r3, [r3, #8]
 8013f88:	011b      	lsls	r3, r3, #4
 8013f8a:	697a      	ldr	r2, [r7, #20]
 8013f8c:	4313      	orrs	r3, r2
 8013f8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	4a22      	ldr	r2, [pc, #136]	; (801401c <TIM_OC2_SetConfig+0xe4>)
 8013f94:	4293      	cmp	r3, r2
 8013f96:	d003      	beq.n	8013fa0 <TIM_OC2_SetConfig+0x68>
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	4a21      	ldr	r2, [pc, #132]	; (8014020 <TIM_OC2_SetConfig+0xe8>)
 8013f9c:	4293      	cmp	r3, r2
 8013f9e:	d10d      	bne.n	8013fbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013fa0:	697b      	ldr	r3, [r7, #20]
 8013fa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013fa8:	683b      	ldr	r3, [r7, #0]
 8013faa:	68db      	ldr	r3, [r3, #12]
 8013fac:	011b      	lsls	r3, r3, #4
 8013fae:	697a      	ldr	r2, [r7, #20]
 8013fb0:	4313      	orrs	r3, r2
 8013fb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013fb4:	697b      	ldr	r3, [r7, #20]
 8013fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013fba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	4a17      	ldr	r2, [pc, #92]	; (801401c <TIM_OC2_SetConfig+0xe4>)
 8013fc0:	4293      	cmp	r3, r2
 8013fc2:	d003      	beq.n	8013fcc <TIM_OC2_SetConfig+0x94>
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	4a16      	ldr	r2, [pc, #88]	; (8014020 <TIM_OC2_SetConfig+0xe8>)
 8013fc8:	4293      	cmp	r3, r2
 8013fca:	d113      	bne.n	8013ff4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013fcc:	693b      	ldr	r3, [r7, #16]
 8013fce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013fd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013fd4:	693b      	ldr	r3, [r7, #16]
 8013fd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013fda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013fdc:	683b      	ldr	r3, [r7, #0]
 8013fde:	695b      	ldr	r3, [r3, #20]
 8013fe0:	009b      	lsls	r3, r3, #2
 8013fe2:	693a      	ldr	r2, [r7, #16]
 8013fe4:	4313      	orrs	r3, r2
 8013fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013fe8:	683b      	ldr	r3, [r7, #0]
 8013fea:	699b      	ldr	r3, [r3, #24]
 8013fec:	009b      	lsls	r3, r3, #2
 8013fee:	693a      	ldr	r2, [r7, #16]
 8013ff0:	4313      	orrs	r3, r2
 8013ff2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	693a      	ldr	r2, [r7, #16]
 8013ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	68fa      	ldr	r2, [r7, #12]
 8013ffe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8014000:	683b      	ldr	r3, [r7, #0]
 8014002:	685a      	ldr	r2, [r3, #4]
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	697a      	ldr	r2, [r7, #20]
 801400c:	621a      	str	r2, [r3, #32]
}
 801400e:	bf00      	nop
 8014010:	371c      	adds	r7, #28
 8014012:	46bd      	mov	sp, r7
 8014014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014018:	4770      	bx	lr
 801401a:	bf00      	nop
 801401c:	40010000 	.word	0x40010000
 8014020:	40010400 	.word	0x40010400

08014024 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014024:	b480      	push	{r7}
 8014026:	b087      	sub	sp, #28
 8014028:	af00      	add	r7, sp, #0
 801402a:	6078      	str	r0, [r7, #4]
 801402c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	6a1b      	ldr	r3, [r3, #32]
 8014032:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	6a1b      	ldr	r3, [r3, #32]
 801403e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	685b      	ldr	r3, [r3, #4]
 8014044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	69db      	ldr	r3, [r3, #28]
 801404a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	f023 0303 	bic.w	r3, r3, #3
 801405a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801405c:	683b      	ldr	r3, [r7, #0]
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	68fa      	ldr	r2, [r7, #12]
 8014062:	4313      	orrs	r3, r2
 8014064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8014066:	697b      	ldr	r3, [r7, #20]
 8014068:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801406c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801406e:	683b      	ldr	r3, [r7, #0]
 8014070:	689b      	ldr	r3, [r3, #8]
 8014072:	021b      	lsls	r3, r3, #8
 8014074:	697a      	ldr	r2, [r7, #20]
 8014076:	4313      	orrs	r3, r2
 8014078:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	4a21      	ldr	r2, [pc, #132]	; (8014104 <TIM_OC3_SetConfig+0xe0>)
 801407e:	4293      	cmp	r3, r2
 8014080:	d003      	beq.n	801408a <TIM_OC3_SetConfig+0x66>
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	4a20      	ldr	r2, [pc, #128]	; (8014108 <TIM_OC3_SetConfig+0xe4>)
 8014086:	4293      	cmp	r3, r2
 8014088:	d10d      	bne.n	80140a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801408a:	697b      	ldr	r3, [r7, #20]
 801408c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014090:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8014092:	683b      	ldr	r3, [r7, #0]
 8014094:	68db      	ldr	r3, [r3, #12]
 8014096:	021b      	lsls	r3, r3, #8
 8014098:	697a      	ldr	r2, [r7, #20]
 801409a:	4313      	orrs	r3, r2
 801409c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801409e:	697b      	ldr	r3, [r7, #20]
 80140a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80140a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	4a16      	ldr	r2, [pc, #88]	; (8014104 <TIM_OC3_SetConfig+0xe0>)
 80140aa:	4293      	cmp	r3, r2
 80140ac:	d003      	beq.n	80140b6 <TIM_OC3_SetConfig+0x92>
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	4a15      	ldr	r2, [pc, #84]	; (8014108 <TIM_OC3_SetConfig+0xe4>)
 80140b2:	4293      	cmp	r3, r2
 80140b4:	d113      	bne.n	80140de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80140b6:	693b      	ldr	r3, [r7, #16]
 80140b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80140bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80140be:	693b      	ldr	r3, [r7, #16]
 80140c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80140c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80140c6:	683b      	ldr	r3, [r7, #0]
 80140c8:	695b      	ldr	r3, [r3, #20]
 80140ca:	011b      	lsls	r3, r3, #4
 80140cc:	693a      	ldr	r2, [r7, #16]
 80140ce:	4313      	orrs	r3, r2
 80140d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80140d2:	683b      	ldr	r3, [r7, #0]
 80140d4:	699b      	ldr	r3, [r3, #24]
 80140d6:	011b      	lsls	r3, r3, #4
 80140d8:	693a      	ldr	r2, [r7, #16]
 80140da:	4313      	orrs	r3, r2
 80140dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	693a      	ldr	r2, [r7, #16]
 80140e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	68fa      	ldr	r2, [r7, #12]
 80140e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80140ea:	683b      	ldr	r3, [r7, #0]
 80140ec:	685a      	ldr	r2, [r3, #4]
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	697a      	ldr	r2, [r7, #20]
 80140f6:	621a      	str	r2, [r3, #32]
}
 80140f8:	bf00      	nop
 80140fa:	371c      	adds	r7, #28
 80140fc:	46bd      	mov	sp, r7
 80140fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014102:	4770      	bx	lr
 8014104:	40010000 	.word	0x40010000
 8014108:	40010400 	.word	0x40010400

0801410c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801410c:	b480      	push	{r7}
 801410e:	b087      	sub	sp, #28
 8014110:	af00      	add	r7, sp, #0
 8014112:	6078      	str	r0, [r7, #4]
 8014114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	6a1b      	ldr	r3, [r3, #32]
 801411a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	6a1b      	ldr	r3, [r3, #32]
 8014126:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	685b      	ldr	r3, [r3, #4]
 801412c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	69db      	ldr	r3, [r3, #28]
 8014132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801413a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014144:	683b      	ldr	r3, [r7, #0]
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	021b      	lsls	r3, r3, #8
 801414a:	68fa      	ldr	r2, [r7, #12]
 801414c:	4313      	orrs	r3, r2
 801414e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8014150:	693b      	ldr	r3, [r7, #16]
 8014152:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014156:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8014158:	683b      	ldr	r3, [r7, #0]
 801415a:	689b      	ldr	r3, [r3, #8]
 801415c:	031b      	lsls	r3, r3, #12
 801415e:	693a      	ldr	r2, [r7, #16]
 8014160:	4313      	orrs	r3, r2
 8014162:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	4a12      	ldr	r2, [pc, #72]	; (80141b0 <TIM_OC4_SetConfig+0xa4>)
 8014168:	4293      	cmp	r3, r2
 801416a:	d003      	beq.n	8014174 <TIM_OC4_SetConfig+0x68>
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	4a11      	ldr	r2, [pc, #68]	; (80141b4 <TIM_OC4_SetConfig+0xa8>)
 8014170:	4293      	cmp	r3, r2
 8014172:	d109      	bne.n	8014188 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014174:	697b      	ldr	r3, [r7, #20]
 8014176:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801417a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801417c:	683b      	ldr	r3, [r7, #0]
 801417e:	695b      	ldr	r3, [r3, #20]
 8014180:	019b      	lsls	r3, r3, #6
 8014182:	697a      	ldr	r2, [r7, #20]
 8014184:	4313      	orrs	r3, r2
 8014186:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	697a      	ldr	r2, [r7, #20]
 801418c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	68fa      	ldr	r2, [r7, #12]
 8014192:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8014194:	683b      	ldr	r3, [r7, #0]
 8014196:	685a      	ldr	r2, [r3, #4]
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	693a      	ldr	r2, [r7, #16]
 80141a0:	621a      	str	r2, [r3, #32]
}
 80141a2:	bf00      	nop
 80141a4:	371c      	adds	r7, #28
 80141a6:	46bd      	mov	sp, r7
 80141a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ac:	4770      	bx	lr
 80141ae:	bf00      	nop
 80141b0:	40010000 	.word	0x40010000
 80141b4:	40010400 	.word	0x40010400

080141b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80141b8:	b480      	push	{r7}
 80141ba:	b087      	sub	sp, #28
 80141bc:	af00      	add	r7, sp, #0
 80141be:	60f8      	str	r0, [r7, #12]
 80141c0:	60b9      	str	r1, [r7, #8]
 80141c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	6a1b      	ldr	r3, [r3, #32]
 80141c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	6a1b      	ldr	r3, [r3, #32]
 80141ce:	f023 0201 	bic.w	r2, r3, #1
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	699b      	ldr	r3, [r3, #24]
 80141da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80141dc:	693b      	ldr	r3, [r7, #16]
 80141de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80141e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	011b      	lsls	r3, r3, #4
 80141e8:	693a      	ldr	r2, [r7, #16]
 80141ea:	4313      	orrs	r3, r2
 80141ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80141ee:	697b      	ldr	r3, [r7, #20]
 80141f0:	f023 030a 	bic.w	r3, r3, #10
 80141f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80141f6:	697a      	ldr	r2, [r7, #20]
 80141f8:	68bb      	ldr	r3, [r7, #8]
 80141fa:	4313      	orrs	r3, r2
 80141fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	693a      	ldr	r2, [r7, #16]
 8014202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	697a      	ldr	r2, [r7, #20]
 8014208:	621a      	str	r2, [r3, #32]
}
 801420a:	bf00      	nop
 801420c:	371c      	adds	r7, #28
 801420e:	46bd      	mov	sp, r7
 8014210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014214:	4770      	bx	lr

08014216 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014216:	b480      	push	{r7}
 8014218:	b087      	sub	sp, #28
 801421a:	af00      	add	r7, sp, #0
 801421c:	60f8      	str	r0, [r7, #12]
 801421e:	60b9      	str	r1, [r7, #8]
 8014220:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	6a1b      	ldr	r3, [r3, #32]
 8014226:	f023 0210 	bic.w	r2, r3, #16
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	699b      	ldr	r3, [r3, #24]
 8014232:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	6a1b      	ldr	r3, [r3, #32]
 8014238:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801423a:	697b      	ldr	r3, [r7, #20]
 801423c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8014240:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	031b      	lsls	r3, r3, #12
 8014246:	697a      	ldr	r2, [r7, #20]
 8014248:	4313      	orrs	r3, r2
 801424a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801424c:	693b      	ldr	r3, [r7, #16]
 801424e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8014252:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8014254:	68bb      	ldr	r3, [r7, #8]
 8014256:	011b      	lsls	r3, r3, #4
 8014258:	693a      	ldr	r2, [r7, #16]
 801425a:	4313      	orrs	r3, r2
 801425c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	697a      	ldr	r2, [r7, #20]
 8014262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	693a      	ldr	r2, [r7, #16]
 8014268:	621a      	str	r2, [r3, #32]
}
 801426a:	bf00      	nop
 801426c:	371c      	adds	r7, #28
 801426e:	46bd      	mov	sp, r7
 8014270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014274:	4770      	bx	lr

08014276 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8014276:	b480      	push	{r7}
 8014278:	b085      	sub	sp, #20
 801427a:	af00      	add	r7, sp, #0
 801427c:	6078      	str	r0, [r7, #4]
 801427e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	689b      	ldr	r3, [r3, #8]
 8014284:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8014286:	68fb      	ldr	r3, [r7, #12]
 8014288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801428c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801428e:	683a      	ldr	r2, [r7, #0]
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	4313      	orrs	r3, r2
 8014294:	f043 0307 	orr.w	r3, r3, #7
 8014298:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	68fa      	ldr	r2, [r7, #12]
 801429e:	609a      	str	r2, [r3, #8]
}
 80142a0:	bf00      	nop
 80142a2:	3714      	adds	r7, #20
 80142a4:	46bd      	mov	sp, r7
 80142a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142aa:	4770      	bx	lr

080142ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80142ac:	b480      	push	{r7}
 80142ae:	b087      	sub	sp, #28
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	60f8      	str	r0, [r7, #12]
 80142b4:	60b9      	str	r1, [r7, #8]
 80142b6:	607a      	str	r2, [r7, #4]
 80142b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	689b      	ldr	r3, [r3, #8]
 80142be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80142c0:	697b      	ldr	r3, [r7, #20]
 80142c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80142c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80142c8:	683b      	ldr	r3, [r7, #0]
 80142ca:	021a      	lsls	r2, r3, #8
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	431a      	orrs	r2, r3
 80142d0:	68bb      	ldr	r3, [r7, #8]
 80142d2:	4313      	orrs	r3, r2
 80142d4:	697a      	ldr	r2, [r7, #20]
 80142d6:	4313      	orrs	r3, r2
 80142d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	697a      	ldr	r2, [r7, #20]
 80142de:	609a      	str	r2, [r3, #8]
}
 80142e0:	bf00      	nop
 80142e2:	371c      	adds	r7, #28
 80142e4:	46bd      	mov	sp, r7
 80142e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ea:	4770      	bx	lr

080142ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80142ec:	b480      	push	{r7}
 80142ee:	b087      	sub	sp, #28
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	60f8      	str	r0, [r7, #12]
 80142f4:	60b9      	str	r1, [r7, #8]
 80142f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80142f8:	68bb      	ldr	r3, [r7, #8]
 80142fa:	f003 031f 	and.w	r3, r3, #31
 80142fe:	2201      	movs	r2, #1
 8014300:	fa02 f303 	lsl.w	r3, r2, r3
 8014304:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	6a1a      	ldr	r2, [r3, #32]
 801430a:	697b      	ldr	r3, [r7, #20]
 801430c:	43db      	mvns	r3, r3
 801430e:	401a      	ands	r2, r3
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	6a1a      	ldr	r2, [r3, #32]
 8014318:	68bb      	ldr	r3, [r7, #8]
 801431a:	f003 031f 	and.w	r3, r3, #31
 801431e:	6879      	ldr	r1, [r7, #4]
 8014320:	fa01 f303 	lsl.w	r3, r1, r3
 8014324:	431a      	orrs	r2, r3
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	621a      	str	r2, [r3, #32]
}
 801432a:	bf00      	nop
 801432c:	371c      	adds	r7, #28
 801432e:	46bd      	mov	sp, r7
 8014330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014334:	4770      	bx	lr
	...

08014338 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8014338:	b480      	push	{r7}
 801433a:	b085      	sub	sp, #20
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
 8014340:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014348:	2b01      	cmp	r3, #1
 801434a:	d101      	bne.n	8014350 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801434c:	2302      	movs	r3, #2
 801434e:	e05a      	b.n	8014406 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	2201      	movs	r2, #1
 8014354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	2202      	movs	r2, #2
 801435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	685b      	ldr	r3, [r3, #4]
 8014366:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	689b      	ldr	r3, [r3, #8]
 801436e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014376:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8014378:	683b      	ldr	r3, [r7, #0]
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	68fa      	ldr	r2, [r7, #12]
 801437e:	4313      	orrs	r3, r2
 8014380:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	68fa      	ldr	r2, [r7, #12]
 8014388:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	4a21      	ldr	r2, [pc, #132]	; (8014414 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8014390:	4293      	cmp	r3, r2
 8014392:	d022      	beq.n	80143da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801439c:	d01d      	beq.n	80143da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	4a1d      	ldr	r2, [pc, #116]	; (8014418 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80143a4:	4293      	cmp	r3, r2
 80143a6:	d018      	beq.n	80143da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	4a1b      	ldr	r2, [pc, #108]	; (801441c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80143ae:	4293      	cmp	r3, r2
 80143b0:	d013      	beq.n	80143da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	4a1a      	ldr	r2, [pc, #104]	; (8014420 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80143b8:	4293      	cmp	r3, r2
 80143ba:	d00e      	beq.n	80143da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	4a18      	ldr	r2, [pc, #96]	; (8014424 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80143c2:	4293      	cmp	r3, r2
 80143c4:	d009      	beq.n	80143da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	4a17      	ldr	r2, [pc, #92]	; (8014428 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80143cc:	4293      	cmp	r3, r2
 80143ce:	d004      	beq.n	80143da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	4a15      	ldr	r2, [pc, #84]	; (801442c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80143d6:	4293      	cmp	r3, r2
 80143d8:	d10c      	bne.n	80143f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80143da:	68bb      	ldr	r3, [r7, #8]
 80143dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80143e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80143e2:	683b      	ldr	r3, [r7, #0]
 80143e4:	685b      	ldr	r3, [r3, #4]
 80143e6:	68ba      	ldr	r2, [r7, #8]
 80143e8:	4313      	orrs	r3, r2
 80143ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	68ba      	ldr	r2, [r7, #8]
 80143f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	2201      	movs	r2, #1
 80143f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	2200      	movs	r2, #0
 8014400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014404:	2300      	movs	r3, #0
}
 8014406:	4618      	mov	r0, r3
 8014408:	3714      	adds	r7, #20
 801440a:	46bd      	mov	sp, r7
 801440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014410:	4770      	bx	lr
 8014412:	bf00      	nop
 8014414:	40010000 	.word	0x40010000
 8014418:	40000400 	.word	0x40000400
 801441c:	40000800 	.word	0x40000800
 8014420:	40000c00 	.word	0x40000c00
 8014424:	40010400 	.word	0x40010400
 8014428:	40014000 	.word	0x40014000
 801442c:	40001800 	.word	0x40001800

08014430 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014430:	b480      	push	{r7}
 8014432:	b083      	sub	sp, #12
 8014434:	af00      	add	r7, sp, #0
 8014436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014438:	bf00      	nop
 801443a:	370c      	adds	r7, #12
 801443c:	46bd      	mov	sp, r7
 801443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014442:	4770      	bx	lr

08014444 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014444:	b480      	push	{r7}
 8014446:	b083      	sub	sp, #12
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801444c:	bf00      	nop
 801444e:	370c      	adds	r7, #12
 8014450:	46bd      	mov	sp, r7
 8014452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014456:	4770      	bx	lr

08014458 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014458:	b580      	push	{r7, lr}
 801445a:	b082      	sub	sp, #8
 801445c:	af00      	add	r7, sp, #0
 801445e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d101      	bne.n	801446a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8014466:	2301      	movs	r3, #1
 8014468:	e03f      	b.n	80144ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014470:	b2db      	uxtb	r3, r3
 8014472:	2b00      	cmp	r3, #0
 8014474:	d106      	bne.n	8014484 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	2200      	movs	r2, #0
 801447a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801447e:	6878      	ldr	r0, [r7, #4]
 8014480:	f7ee fb04 	bl	8002a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	2224      	movs	r2, #36	; 0x24
 8014488:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	68da      	ldr	r2, [r3, #12]
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801449a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801449c:	6878      	ldr	r0, [r7, #4]
 801449e:	f000 fb97 	bl	8014bd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	691a      	ldr	r2, [r3, #16]
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80144b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	695a      	ldr	r2, [r3, #20]
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80144c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	68da      	ldr	r2, [r3, #12]
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80144d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	2200      	movs	r2, #0
 80144d6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	2220      	movs	r2, #32
 80144dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	2220      	movs	r2, #32
 80144e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80144e8:	2300      	movs	r3, #0
}
 80144ea:	4618      	mov	r0, r3
 80144ec:	3708      	adds	r7, #8
 80144ee:	46bd      	mov	sp, r7
 80144f0:	bd80      	pop	{r7, pc}

080144f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80144f2:	b580      	push	{r7, lr}
 80144f4:	b088      	sub	sp, #32
 80144f6:	af02      	add	r7, sp, #8
 80144f8:	60f8      	str	r0, [r7, #12]
 80144fa:	60b9      	str	r1, [r7, #8]
 80144fc:	603b      	str	r3, [r7, #0]
 80144fe:	4613      	mov	r3, r2
 8014500:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8014502:	2300      	movs	r3, #0
 8014504:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801450c:	b2db      	uxtb	r3, r3
 801450e:	2b20      	cmp	r3, #32
 8014510:	f040 8083 	bne.w	801461a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8014514:	68bb      	ldr	r3, [r7, #8]
 8014516:	2b00      	cmp	r3, #0
 8014518:	d002      	beq.n	8014520 <HAL_UART_Transmit+0x2e>
 801451a:	88fb      	ldrh	r3, [r7, #6]
 801451c:	2b00      	cmp	r3, #0
 801451e:	d101      	bne.n	8014524 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8014520:	2301      	movs	r3, #1
 8014522:	e07b      	b.n	801461c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801452a:	2b01      	cmp	r3, #1
 801452c:	d101      	bne.n	8014532 <HAL_UART_Transmit+0x40>
 801452e:	2302      	movs	r3, #2
 8014530:	e074      	b.n	801461c <HAL_UART_Transmit+0x12a>
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	2201      	movs	r2, #1
 8014536:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	2200      	movs	r2, #0
 801453e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	2221      	movs	r2, #33	; 0x21
 8014544:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8014548:	f7f9 fd94 	bl	800e074 <HAL_GetTick>
 801454c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	88fa      	ldrh	r2, [r7, #6]
 8014552:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	88fa      	ldrh	r2, [r7, #6]
 8014558:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	2200      	movs	r2, #0
 801455e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8014562:	e042      	b.n	80145ea <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014568:	b29b      	uxth	r3, r3
 801456a:	3b01      	subs	r3, #1
 801456c:	b29a      	uxth	r2, r3
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	689b      	ldr	r3, [r3, #8]
 8014576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801457a:	d122      	bne.n	80145c2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801457c:	683b      	ldr	r3, [r7, #0]
 801457e:	9300      	str	r3, [sp, #0]
 8014580:	697b      	ldr	r3, [r7, #20]
 8014582:	2200      	movs	r2, #0
 8014584:	2180      	movs	r1, #128	; 0x80
 8014586:	68f8      	ldr	r0, [r7, #12]
 8014588:	f000 f9b6 	bl	80148f8 <UART_WaitOnFlagUntilTimeout>
 801458c:	4603      	mov	r3, r0
 801458e:	2b00      	cmp	r3, #0
 8014590:	d001      	beq.n	8014596 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8014592:	2303      	movs	r3, #3
 8014594:	e042      	b.n	801461c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8014596:	68bb      	ldr	r3, [r7, #8]
 8014598:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 801459a:	693b      	ldr	r3, [r7, #16]
 801459c:	881b      	ldrh	r3, [r3, #0]
 801459e:	461a      	mov	r2, r3
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80145a8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	691b      	ldr	r3, [r3, #16]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d103      	bne.n	80145ba <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80145b2:	68bb      	ldr	r3, [r7, #8]
 80145b4:	3302      	adds	r3, #2
 80145b6:	60bb      	str	r3, [r7, #8]
 80145b8:	e017      	b.n	80145ea <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80145ba:	68bb      	ldr	r3, [r7, #8]
 80145bc:	3301      	adds	r3, #1
 80145be:	60bb      	str	r3, [r7, #8]
 80145c0:	e013      	b.n	80145ea <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80145c2:	683b      	ldr	r3, [r7, #0]
 80145c4:	9300      	str	r3, [sp, #0]
 80145c6:	697b      	ldr	r3, [r7, #20]
 80145c8:	2200      	movs	r2, #0
 80145ca:	2180      	movs	r1, #128	; 0x80
 80145cc:	68f8      	ldr	r0, [r7, #12]
 80145ce:	f000 f993 	bl	80148f8 <UART_WaitOnFlagUntilTimeout>
 80145d2:	4603      	mov	r3, r0
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d001      	beq.n	80145dc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80145d8:	2303      	movs	r3, #3
 80145da:	e01f      	b.n	801461c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80145dc:	68bb      	ldr	r3, [r7, #8]
 80145de:	1c5a      	adds	r2, r3, #1
 80145e0:	60ba      	str	r2, [r7, #8]
 80145e2:	781a      	ldrb	r2, [r3, #0]
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80145ee:	b29b      	uxth	r3, r3
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d1b7      	bne.n	8014564 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80145f4:	683b      	ldr	r3, [r7, #0]
 80145f6:	9300      	str	r3, [sp, #0]
 80145f8:	697b      	ldr	r3, [r7, #20]
 80145fa:	2200      	movs	r2, #0
 80145fc:	2140      	movs	r1, #64	; 0x40
 80145fe:	68f8      	ldr	r0, [r7, #12]
 8014600:	f000 f97a 	bl	80148f8 <UART_WaitOnFlagUntilTimeout>
 8014604:	4603      	mov	r3, r0
 8014606:	2b00      	cmp	r3, #0
 8014608:	d001      	beq.n	801460e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 801460a:	2303      	movs	r3, #3
 801460c:	e006      	b.n	801461c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	2220      	movs	r2, #32
 8014612:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8014616:	2300      	movs	r3, #0
 8014618:	e000      	b.n	801461c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 801461a:	2302      	movs	r3, #2
  }
}
 801461c:	4618      	mov	r0, r3
 801461e:	3718      	adds	r7, #24
 8014620:	46bd      	mov	sp, r7
 8014622:	bd80      	pop	{r7, pc}

08014624 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014624:	b480      	push	{r7}
 8014626:	b085      	sub	sp, #20
 8014628:	af00      	add	r7, sp, #0
 801462a:	60f8      	str	r0, [r7, #12]
 801462c:	60b9      	str	r1, [r7, #8]
 801462e:	4613      	mov	r3, r2
 8014630:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8014638:	b2db      	uxtb	r3, r3
 801463a:	2b20      	cmp	r3, #32
 801463c:	d140      	bne.n	80146c0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 801463e:	68bb      	ldr	r3, [r7, #8]
 8014640:	2b00      	cmp	r3, #0
 8014642:	d002      	beq.n	801464a <HAL_UART_Receive_IT+0x26>
 8014644:	88fb      	ldrh	r3, [r7, #6]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d101      	bne.n	801464e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801464a:	2301      	movs	r3, #1
 801464c:	e039      	b.n	80146c2 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014654:	2b01      	cmp	r3, #1
 8014656:	d101      	bne.n	801465c <HAL_UART_Receive_IT+0x38>
 8014658:	2302      	movs	r3, #2
 801465a:	e032      	b.n	80146c2 <HAL_UART_Receive_IT+0x9e>
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	2201      	movs	r2, #1
 8014660:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	68ba      	ldr	r2, [r7, #8]
 8014668:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	88fa      	ldrh	r2, [r7, #6]
 801466e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	88fa      	ldrh	r2, [r7, #6]
 8014674:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	2200      	movs	r2, #0
 801467a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	2222      	movs	r2, #34	; 0x22
 8014680:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	2200      	movs	r2, #0
 8014688:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	68da      	ldr	r2, [r3, #12]
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801469a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	695a      	ldr	r2, [r3, #20]
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	f042 0201 	orr.w	r2, r2, #1
 80146aa:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	68da      	ldr	r2, [r3, #12]
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	f042 0220 	orr.w	r2, r2, #32
 80146ba:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80146bc:	2300      	movs	r3, #0
 80146be:	e000      	b.n	80146c2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80146c0:	2302      	movs	r3, #2
  }
}
 80146c2:	4618      	mov	r0, r3
 80146c4:	3714      	adds	r7, #20
 80146c6:	46bd      	mov	sp, r7
 80146c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146cc:	4770      	bx	lr
	...

080146d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80146d0:	b580      	push	{r7, lr}
 80146d2:	b088      	sub	sp, #32
 80146d4:	af00      	add	r7, sp, #0
 80146d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	68db      	ldr	r3, [r3, #12]
 80146e6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	695b      	ldr	r3, [r3, #20]
 80146ee:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80146f0:	2300      	movs	r3, #0
 80146f2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80146f4:	2300      	movs	r3, #0
 80146f6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80146f8:	69fb      	ldr	r3, [r7, #28]
 80146fa:	f003 030f 	and.w	r3, r3, #15
 80146fe:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8014700:	693b      	ldr	r3, [r7, #16]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d10d      	bne.n	8014722 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8014706:	69fb      	ldr	r3, [r7, #28]
 8014708:	f003 0320 	and.w	r3, r3, #32
 801470c:	2b00      	cmp	r3, #0
 801470e:	d008      	beq.n	8014722 <HAL_UART_IRQHandler+0x52>
 8014710:	69bb      	ldr	r3, [r7, #24]
 8014712:	f003 0320 	and.w	r3, r3, #32
 8014716:	2b00      	cmp	r3, #0
 8014718:	d003      	beq.n	8014722 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 801471a:	6878      	ldr	r0, [r7, #4]
 801471c:	f000 f9d6 	bl	8014acc <UART_Receive_IT>
      return;
 8014720:	e0d0      	b.n	80148c4 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8014722:	693b      	ldr	r3, [r7, #16]
 8014724:	2b00      	cmp	r3, #0
 8014726:	f000 80b0 	beq.w	801488a <HAL_UART_IRQHandler+0x1ba>
 801472a:	697b      	ldr	r3, [r7, #20]
 801472c:	f003 0301 	and.w	r3, r3, #1
 8014730:	2b00      	cmp	r3, #0
 8014732:	d105      	bne.n	8014740 <HAL_UART_IRQHandler+0x70>
 8014734:	69bb      	ldr	r3, [r7, #24]
 8014736:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801473a:	2b00      	cmp	r3, #0
 801473c:	f000 80a5 	beq.w	801488a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8014740:	69fb      	ldr	r3, [r7, #28]
 8014742:	f003 0301 	and.w	r3, r3, #1
 8014746:	2b00      	cmp	r3, #0
 8014748:	d00a      	beq.n	8014760 <HAL_UART_IRQHandler+0x90>
 801474a:	69bb      	ldr	r3, [r7, #24]
 801474c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014750:	2b00      	cmp	r3, #0
 8014752:	d005      	beq.n	8014760 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014758:	f043 0201 	orr.w	r2, r3, #1
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8014760:	69fb      	ldr	r3, [r7, #28]
 8014762:	f003 0304 	and.w	r3, r3, #4
 8014766:	2b00      	cmp	r3, #0
 8014768:	d00a      	beq.n	8014780 <HAL_UART_IRQHandler+0xb0>
 801476a:	697b      	ldr	r3, [r7, #20]
 801476c:	f003 0301 	and.w	r3, r3, #1
 8014770:	2b00      	cmp	r3, #0
 8014772:	d005      	beq.n	8014780 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014778:	f043 0202 	orr.w	r2, r3, #2
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8014780:	69fb      	ldr	r3, [r7, #28]
 8014782:	f003 0302 	and.w	r3, r3, #2
 8014786:	2b00      	cmp	r3, #0
 8014788:	d00a      	beq.n	80147a0 <HAL_UART_IRQHandler+0xd0>
 801478a:	697b      	ldr	r3, [r7, #20]
 801478c:	f003 0301 	and.w	r3, r3, #1
 8014790:	2b00      	cmp	r3, #0
 8014792:	d005      	beq.n	80147a0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014798:	f043 0204 	orr.w	r2, r3, #4
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80147a0:	69fb      	ldr	r3, [r7, #28]
 80147a2:	f003 0308 	and.w	r3, r3, #8
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d00f      	beq.n	80147ca <HAL_UART_IRQHandler+0xfa>
 80147aa:	69bb      	ldr	r3, [r7, #24]
 80147ac:	f003 0320 	and.w	r3, r3, #32
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d104      	bne.n	80147be <HAL_UART_IRQHandler+0xee>
 80147b4:	697b      	ldr	r3, [r7, #20]
 80147b6:	f003 0301 	and.w	r3, r3, #1
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d005      	beq.n	80147ca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80147c2:	f043 0208 	orr.w	r2, r3, #8
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d077      	beq.n	80148c2 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80147d2:	69fb      	ldr	r3, [r7, #28]
 80147d4:	f003 0320 	and.w	r3, r3, #32
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d007      	beq.n	80147ec <HAL_UART_IRQHandler+0x11c>
 80147dc:	69bb      	ldr	r3, [r7, #24]
 80147de:	f003 0320 	and.w	r3, r3, #32
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d002      	beq.n	80147ec <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80147e6:	6878      	ldr	r0, [r7, #4]
 80147e8:	f000 f970 	bl	8014acc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	695b      	ldr	r3, [r3, #20]
 80147f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80147f6:	2b40      	cmp	r3, #64	; 0x40
 80147f8:	bf0c      	ite	eq
 80147fa:	2301      	moveq	r3, #1
 80147fc:	2300      	movne	r3, #0
 80147fe:	b2db      	uxtb	r3, r3
 8014800:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014806:	f003 0308 	and.w	r3, r3, #8
 801480a:	2b00      	cmp	r3, #0
 801480c:	d102      	bne.n	8014814 <HAL_UART_IRQHandler+0x144>
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	2b00      	cmp	r3, #0
 8014812:	d031      	beq.n	8014878 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8014814:	6878      	ldr	r0, [r7, #4]
 8014816:	f000 f8b9 	bl	801498c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	695b      	ldr	r3, [r3, #20]
 8014820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014824:	2b40      	cmp	r3, #64	; 0x40
 8014826:	d123      	bne.n	8014870 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	695a      	ldr	r2, [r3, #20]
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014836:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801483c:	2b00      	cmp	r3, #0
 801483e:	d013      	beq.n	8014868 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014844:	4a21      	ldr	r2, [pc, #132]	; (80148cc <HAL_UART_IRQHandler+0x1fc>)
 8014846:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801484c:	4618      	mov	r0, r3
 801484e:	f7fa fd73 	bl	800f338 <HAL_DMA_Abort_IT>
 8014852:	4603      	mov	r3, r0
 8014854:	2b00      	cmp	r3, #0
 8014856:	d016      	beq.n	8014886 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801485c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801485e:	687a      	ldr	r2, [r7, #4]
 8014860:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8014862:	4610      	mov	r0, r2
 8014864:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014866:	e00e      	b.n	8014886 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8014868:	6878      	ldr	r0, [r7, #4]
 801486a:	f000 f83b 	bl	80148e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801486e:	e00a      	b.n	8014886 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014870:	6878      	ldr	r0, [r7, #4]
 8014872:	f000 f837 	bl	80148e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014876:	e006      	b.n	8014886 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8014878:	6878      	ldr	r0, [r7, #4]
 801487a:	f000 f833 	bl	80148e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	2200      	movs	r2, #0
 8014882:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8014884:	e01d      	b.n	80148c2 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014886:	bf00      	nop
    return;
 8014888:	e01b      	b.n	80148c2 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801488a:	69fb      	ldr	r3, [r7, #28]
 801488c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014890:	2b00      	cmp	r3, #0
 8014892:	d008      	beq.n	80148a6 <HAL_UART_IRQHandler+0x1d6>
 8014894:	69bb      	ldr	r3, [r7, #24]
 8014896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801489a:	2b00      	cmp	r3, #0
 801489c:	d003      	beq.n	80148a6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 801489e:	6878      	ldr	r0, [r7, #4]
 80148a0:	f000 f8a6 	bl	80149f0 <UART_Transmit_IT>
    return;
 80148a4:	e00e      	b.n	80148c4 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80148a6:	69fb      	ldr	r3, [r7, #28]
 80148a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d009      	beq.n	80148c4 <HAL_UART_IRQHandler+0x1f4>
 80148b0:	69bb      	ldr	r3, [r7, #24]
 80148b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d004      	beq.n	80148c4 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80148ba:	6878      	ldr	r0, [r7, #4]
 80148bc:	f000 f8ee 	bl	8014a9c <UART_EndTransmit_IT>
    return;
 80148c0:	e000      	b.n	80148c4 <HAL_UART_IRQHandler+0x1f4>
    return;
 80148c2:	bf00      	nop
  }
}
 80148c4:	3720      	adds	r7, #32
 80148c6:	46bd      	mov	sp, r7
 80148c8:	bd80      	pop	{r7, pc}
 80148ca:	bf00      	nop
 80148cc:	080149c9 	.word	0x080149c9

080148d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80148d0:	b480      	push	{r7}
 80148d2:	b083      	sub	sp, #12
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80148d8:	bf00      	nop
 80148da:	370c      	adds	r7, #12
 80148dc:	46bd      	mov	sp, r7
 80148de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e2:	4770      	bx	lr

080148e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80148e4:	b480      	push	{r7}
 80148e6:	b083      	sub	sp, #12
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80148ec:	bf00      	nop
 80148ee:	370c      	adds	r7, #12
 80148f0:	46bd      	mov	sp, r7
 80148f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148f6:	4770      	bx	lr

080148f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b084      	sub	sp, #16
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	60f8      	str	r0, [r7, #12]
 8014900:	60b9      	str	r1, [r7, #8]
 8014902:	603b      	str	r3, [r7, #0]
 8014904:	4613      	mov	r3, r2
 8014906:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014908:	e02c      	b.n	8014964 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801490a:	69bb      	ldr	r3, [r7, #24]
 801490c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014910:	d028      	beq.n	8014964 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8014912:	69bb      	ldr	r3, [r7, #24]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d007      	beq.n	8014928 <UART_WaitOnFlagUntilTimeout+0x30>
 8014918:	f7f9 fbac 	bl	800e074 <HAL_GetTick>
 801491c:	4602      	mov	r2, r0
 801491e:	683b      	ldr	r3, [r7, #0]
 8014920:	1ad3      	subs	r3, r2, r3
 8014922:	69ba      	ldr	r2, [r7, #24]
 8014924:	429a      	cmp	r2, r3
 8014926:	d21d      	bcs.n	8014964 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	68da      	ldr	r2, [r3, #12]
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8014936:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	695a      	ldr	r2, [r3, #20]
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	f022 0201 	bic.w	r2, r2, #1
 8014946:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	2220      	movs	r2, #32
 801494c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	2220      	movs	r2, #32
 8014954:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	2200      	movs	r2, #0
 801495c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8014960:	2303      	movs	r3, #3
 8014962:	e00f      	b.n	8014984 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	681a      	ldr	r2, [r3, #0]
 801496a:	68bb      	ldr	r3, [r7, #8]
 801496c:	4013      	ands	r3, r2
 801496e:	68ba      	ldr	r2, [r7, #8]
 8014970:	429a      	cmp	r2, r3
 8014972:	bf0c      	ite	eq
 8014974:	2301      	moveq	r3, #1
 8014976:	2300      	movne	r3, #0
 8014978:	b2db      	uxtb	r3, r3
 801497a:	461a      	mov	r2, r3
 801497c:	79fb      	ldrb	r3, [r7, #7]
 801497e:	429a      	cmp	r2, r3
 8014980:	d0c3      	beq.n	801490a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8014982:	2300      	movs	r3, #0
}
 8014984:	4618      	mov	r0, r3
 8014986:	3710      	adds	r7, #16
 8014988:	46bd      	mov	sp, r7
 801498a:	bd80      	pop	{r7, pc}

0801498c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801498c:	b480      	push	{r7}
 801498e:	b083      	sub	sp, #12
 8014990:	af00      	add	r7, sp, #0
 8014992:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	68da      	ldr	r2, [r3, #12]
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80149a2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	695a      	ldr	r2, [r3, #20]
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	f022 0201 	bic.w	r2, r2, #1
 80149b2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	2220      	movs	r2, #32
 80149b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80149bc:	bf00      	nop
 80149be:	370c      	adds	r7, #12
 80149c0:	46bd      	mov	sp, r7
 80149c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149c6:	4770      	bx	lr

080149c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80149c8:	b580      	push	{r7, lr}
 80149ca:	b084      	sub	sp, #16
 80149cc:	af00      	add	r7, sp, #0
 80149ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	2200      	movs	r2, #0
 80149da:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	2200      	movs	r2, #0
 80149e0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80149e2:	68f8      	ldr	r0, [r7, #12]
 80149e4:	f7ff ff7e 	bl	80148e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80149e8:	bf00      	nop
 80149ea:	3710      	adds	r7, #16
 80149ec:	46bd      	mov	sp, r7
 80149ee:	bd80      	pop	{r7, pc}

080149f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80149f0:	b480      	push	{r7}
 80149f2:	b085      	sub	sp, #20
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80149fe:	b2db      	uxtb	r3, r3
 8014a00:	2b21      	cmp	r3, #33	; 0x21
 8014a02:	d144      	bne.n	8014a8e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	689b      	ldr	r3, [r3, #8]
 8014a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014a0c:	d11a      	bne.n	8014a44 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	6a1b      	ldr	r3, [r3, #32]
 8014a12:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	881b      	ldrh	r3, [r3, #0]
 8014a18:	461a      	mov	r2, r3
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014a22:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	691b      	ldr	r3, [r3, #16]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d105      	bne.n	8014a38 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	6a1b      	ldr	r3, [r3, #32]
 8014a30:	1c9a      	adds	r2, r3, #2
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	621a      	str	r2, [r3, #32]
 8014a36:	e00e      	b.n	8014a56 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	6a1b      	ldr	r3, [r3, #32]
 8014a3c:	1c5a      	adds	r2, r3, #1
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	621a      	str	r2, [r3, #32]
 8014a42:	e008      	b.n	8014a56 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	6a1b      	ldr	r3, [r3, #32]
 8014a48:	1c59      	adds	r1, r3, #1
 8014a4a:	687a      	ldr	r2, [r7, #4]
 8014a4c:	6211      	str	r1, [r2, #32]
 8014a4e:	781a      	ldrb	r2, [r3, #0]
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014a5a:	b29b      	uxth	r3, r3
 8014a5c:	3b01      	subs	r3, #1
 8014a5e:	b29b      	uxth	r3, r3
 8014a60:	687a      	ldr	r2, [r7, #4]
 8014a62:	4619      	mov	r1, r3
 8014a64:	84d1      	strh	r1, [r2, #38]	; 0x26
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d10f      	bne.n	8014a8a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	68da      	ldr	r2, [r3, #12]
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014a78:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	68da      	ldr	r2, [r3, #12]
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014a88:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8014a8a:	2300      	movs	r3, #0
 8014a8c:	e000      	b.n	8014a90 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8014a8e:	2302      	movs	r3, #2
  }
}
 8014a90:	4618      	mov	r0, r3
 8014a92:	3714      	adds	r7, #20
 8014a94:	46bd      	mov	sp, r7
 8014a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a9a:	4770      	bx	lr

08014a9c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8014a9c:	b580      	push	{r7, lr}
 8014a9e:	b082      	sub	sp, #8
 8014aa0:	af00      	add	r7, sp, #0
 8014aa2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	68da      	ldr	r2, [r3, #12]
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014ab2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	2220      	movs	r2, #32
 8014ab8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8014abc:	6878      	ldr	r0, [r7, #4]
 8014abe:	f7ff ff07 	bl	80148d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8014ac2:	2300      	movs	r3, #0
}
 8014ac4:	4618      	mov	r0, r3
 8014ac6:	3708      	adds	r7, #8
 8014ac8:	46bd      	mov	sp, r7
 8014aca:	bd80      	pop	{r7, pc}

08014acc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b084      	sub	sp, #16
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8014ada:	b2db      	uxtb	r3, r3
 8014adc:	2b22      	cmp	r3, #34	; 0x22
 8014ade:	d171      	bne.n	8014bc4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	689b      	ldr	r3, [r3, #8]
 8014ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014ae8:	d123      	bne.n	8014b32 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014aee:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	691b      	ldr	r3, [r3, #16]
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d10e      	bne.n	8014b16 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	685b      	ldr	r3, [r3, #4]
 8014afe:	b29b      	uxth	r3, r3
 8014b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014b04:	b29a      	uxth	r2, r3
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b0e:	1c9a      	adds	r2, r3, #2
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	629a      	str	r2, [r3, #40]	; 0x28
 8014b14:	e029      	b.n	8014b6a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	685b      	ldr	r3, [r3, #4]
 8014b1c:	b29b      	uxth	r3, r3
 8014b1e:	b2db      	uxtb	r3, r3
 8014b20:	b29a      	uxth	r2, r3
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b2a:	1c5a      	adds	r2, r3, #1
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	629a      	str	r2, [r3, #40]	; 0x28
 8014b30:	e01b      	b.n	8014b6a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	691b      	ldr	r3, [r3, #16]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d10a      	bne.n	8014b50 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	6858      	ldr	r0, [r3, #4]
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b44:	1c59      	adds	r1, r3, #1
 8014b46:	687a      	ldr	r2, [r7, #4]
 8014b48:	6291      	str	r1, [r2, #40]	; 0x28
 8014b4a:	b2c2      	uxtb	r2, r0
 8014b4c:	701a      	strb	r2, [r3, #0]
 8014b4e:	e00c      	b.n	8014b6a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	685b      	ldr	r3, [r3, #4]
 8014b56:	b2da      	uxtb	r2, r3
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b5c:	1c58      	adds	r0, r3, #1
 8014b5e:	6879      	ldr	r1, [r7, #4]
 8014b60:	6288      	str	r0, [r1, #40]	; 0x28
 8014b62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8014b66:	b2d2      	uxtb	r2, r2
 8014b68:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8014b6e:	b29b      	uxth	r3, r3
 8014b70:	3b01      	subs	r3, #1
 8014b72:	b29b      	uxth	r3, r3
 8014b74:	687a      	ldr	r2, [r7, #4]
 8014b76:	4619      	mov	r1, r3
 8014b78:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d120      	bne.n	8014bc0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	68da      	ldr	r2, [r3, #12]
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	f022 0220 	bic.w	r2, r2, #32
 8014b8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	68da      	ldr	r2, [r3, #12]
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8014b9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	695a      	ldr	r2, [r3, #20]
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	f022 0201 	bic.w	r2, r2, #1
 8014bac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	2220      	movs	r2, #32
 8014bb2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8014bb6:	6878      	ldr	r0, [r7, #4]
 8014bb8:	f7f0 f84e 	bl	8004c58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	e002      	b.n	8014bc6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8014bc0:	2300      	movs	r3, #0
 8014bc2:	e000      	b.n	8014bc6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8014bc4:	2302      	movs	r3, #2
  }
}
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	3710      	adds	r7, #16
 8014bca:	46bd      	mov	sp, r7
 8014bcc:	bd80      	pop	{r7, pc}
	...

08014bd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bd4:	b0bd      	sub	sp, #244	; 0xf4
 8014bd6:	af00      	add	r7, sp, #0
 8014bd8:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	691b      	ldr	r3, [r3, #16]
 8014be4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8014be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014bec:	68d9      	ldr	r1, [r3, #12]
 8014bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014bf2:	681a      	ldr	r2, [r3, #0]
 8014bf4:	ea40 0301 	orr.w	r3, r0, r1
 8014bf8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8014bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014bfe:	689a      	ldr	r2, [r3, #8]
 8014c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014c04:	691b      	ldr	r3, [r3, #16]
 8014c06:	431a      	orrs	r2, r3
 8014c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014c0c:	695b      	ldr	r3, [r3, #20]
 8014c0e:	431a      	orrs	r2, r3
 8014c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014c14:	69db      	ldr	r3, [r3, #28]
 8014c16:	4313      	orrs	r3, r2
 8014c18:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8014c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	68db      	ldr	r3, [r3, #12]
 8014c24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8014c28:	f021 010c 	bic.w	r1, r1, #12
 8014c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014c30:	681a      	ldr	r2, [r3, #0]
 8014c32:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014c36:	430b      	orrs	r3, r1
 8014c38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8014c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	695b      	ldr	r3, [r3, #20]
 8014c42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8014c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014c4a:	6999      	ldr	r1, [r3, #24]
 8014c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014c50:	681a      	ldr	r2, [r3, #0]
 8014c52:	ea40 0301 	orr.w	r3, r0, r1
 8014c56:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014c5c:	69db      	ldr	r3, [r3, #28]
 8014c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014c62:	f040 81a5 	bne.w	8014fb0 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8014c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014c6a:	681a      	ldr	r2, [r3, #0]
 8014c6c:	4bcd      	ldr	r3, [pc, #820]	; (8014fa4 <UART_SetConfig+0x3d4>)
 8014c6e:	429a      	cmp	r2, r3
 8014c70:	d006      	beq.n	8014c80 <UART_SetConfig+0xb0>
 8014c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014c76:	681a      	ldr	r2, [r3, #0]
 8014c78:	4bcb      	ldr	r3, [pc, #812]	; (8014fa8 <UART_SetConfig+0x3d8>)
 8014c7a:	429a      	cmp	r2, r3
 8014c7c:	f040 80cb 	bne.w	8014e16 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8014c80:	f7fe f842 	bl	8012d08 <HAL_RCC_GetPCLK2Freq>
 8014c84:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8014c88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014c8c:	461c      	mov	r4, r3
 8014c8e:	f04f 0500 	mov.w	r5, #0
 8014c92:	4622      	mov	r2, r4
 8014c94:	462b      	mov	r3, r5
 8014c96:	1891      	adds	r1, r2, r2
 8014c98:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8014c9c:	415b      	adcs	r3, r3
 8014c9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8014ca2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8014ca6:	1912      	adds	r2, r2, r4
 8014ca8:	eb45 0303 	adc.w	r3, r5, r3
 8014cac:	f04f 0000 	mov.w	r0, #0
 8014cb0:	f04f 0100 	mov.w	r1, #0
 8014cb4:	00d9      	lsls	r1, r3, #3
 8014cb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014cba:	00d0      	lsls	r0, r2, #3
 8014cbc:	4602      	mov	r2, r0
 8014cbe:	460b      	mov	r3, r1
 8014cc0:	1911      	adds	r1, r2, r4
 8014cc2:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8014cc6:	416b      	adcs	r3, r5
 8014cc8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8014ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014cd0:	685b      	ldr	r3, [r3, #4]
 8014cd2:	461a      	mov	r2, r3
 8014cd4:	f04f 0300 	mov.w	r3, #0
 8014cd8:	1891      	adds	r1, r2, r2
 8014cda:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8014cde:	415b      	adcs	r3, r3
 8014ce0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014ce4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8014ce8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8014cec:	f7eb ffcc 	bl	8000c88 <__aeabi_uldivmod>
 8014cf0:	4602      	mov	r2, r0
 8014cf2:	460b      	mov	r3, r1
 8014cf4:	4bad      	ldr	r3, [pc, #692]	; (8014fac <UART_SetConfig+0x3dc>)
 8014cf6:	fba3 2302 	umull	r2, r3, r3, r2
 8014cfa:	095b      	lsrs	r3, r3, #5
 8014cfc:	011e      	lsls	r6, r3, #4
 8014cfe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014d02:	461c      	mov	r4, r3
 8014d04:	f04f 0500 	mov.w	r5, #0
 8014d08:	4622      	mov	r2, r4
 8014d0a:	462b      	mov	r3, r5
 8014d0c:	1891      	adds	r1, r2, r2
 8014d0e:	67b9      	str	r1, [r7, #120]	; 0x78
 8014d10:	415b      	adcs	r3, r3
 8014d12:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014d14:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8014d18:	1912      	adds	r2, r2, r4
 8014d1a:	eb45 0303 	adc.w	r3, r5, r3
 8014d1e:	f04f 0000 	mov.w	r0, #0
 8014d22:	f04f 0100 	mov.w	r1, #0
 8014d26:	00d9      	lsls	r1, r3, #3
 8014d28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014d2c:	00d0      	lsls	r0, r2, #3
 8014d2e:	4602      	mov	r2, r0
 8014d30:	460b      	mov	r3, r1
 8014d32:	1911      	adds	r1, r2, r4
 8014d34:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8014d38:	416b      	adcs	r3, r5
 8014d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8014d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014d42:	685b      	ldr	r3, [r3, #4]
 8014d44:	461a      	mov	r2, r3
 8014d46:	f04f 0300 	mov.w	r3, #0
 8014d4a:	1891      	adds	r1, r2, r2
 8014d4c:	6739      	str	r1, [r7, #112]	; 0x70
 8014d4e:	415b      	adcs	r3, r3
 8014d50:	677b      	str	r3, [r7, #116]	; 0x74
 8014d52:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8014d56:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8014d5a:	f7eb ff95 	bl	8000c88 <__aeabi_uldivmod>
 8014d5e:	4602      	mov	r2, r0
 8014d60:	460b      	mov	r3, r1
 8014d62:	4b92      	ldr	r3, [pc, #584]	; (8014fac <UART_SetConfig+0x3dc>)
 8014d64:	fba3 1302 	umull	r1, r3, r3, r2
 8014d68:	095b      	lsrs	r3, r3, #5
 8014d6a:	2164      	movs	r1, #100	; 0x64
 8014d6c:	fb01 f303 	mul.w	r3, r1, r3
 8014d70:	1ad3      	subs	r3, r2, r3
 8014d72:	00db      	lsls	r3, r3, #3
 8014d74:	3332      	adds	r3, #50	; 0x32
 8014d76:	4a8d      	ldr	r2, [pc, #564]	; (8014fac <UART_SetConfig+0x3dc>)
 8014d78:	fba2 2303 	umull	r2, r3, r2, r3
 8014d7c:	095b      	lsrs	r3, r3, #5
 8014d7e:	005b      	lsls	r3, r3, #1
 8014d80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8014d84:	441e      	add	r6, r3
 8014d86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	f04f 0100 	mov.w	r1, #0
 8014d90:	4602      	mov	r2, r0
 8014d92:	460b      	mov	r3, r1
 8014d94:	1894      	adds	r4, r2, r2
 8014d96:	66bc      	str	r4, [r7, #104]	; 0x68
 8014d98:	415b      	adcs	r3, r3
 8014d9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014d9c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8014da0:	1812      	adds	r2, r2, r0
 8014da2:	eb41 0303 	adc.w	r3, r1, r3
 8014da6:	f04f 0400 	mov.w	r4, #0
 8014daa:	f04f 0500 	mov.w	r5, #0
 8014dae:	00dd      	lsls	r5, r3, #3
 8014db0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8014db4:	00d4      	lsls	r4, r2, #3
 8014db6:	4622      	mov	r2, r4
 8014db8:	462b      	mov	r3, r5
 8014dba:	1814      	adds	r4, r2, r0
 8014dbc:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8014dc0:	414b      	adcs	r3, r1
 8014dc2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8014dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014dca:	685b      	ldr	r3, [r3, #4]
 8014dcc:	461a      	mov	r2, r3
 8014dce:	f04f 0300 	mov.w	r3, #0
 8014dd2:	1891      	adds	r1, r2, r2
 8014dd4:	6639      	str	r1, [r7, #96]	; 0x60
 8014dd6:	415b      	adcs	r3, r3
 8014dd8:	667b      	str	r3, [r7, #100]	; 0x64
 8014dda:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8014dde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8014de2:	f7eb ff51 	bl	8000c88 <__aeabi_uldivmod>
 8014de6:	4602      	mov	r2, r0
 8014de8:	460b      	mov	r3, r1
 8014dea:	4b70      	ldr	r3, [pc, #448]	; (8014fac <UART_SetConfig+0x3dc>)
 8014dec:	fba3 1302 	umull	r1, r3, r3, r2
 8014df0:	095b      	lsrs	r3, r3, #5
 8014df2:	2164      	movs	r1, #100	; 0x64
 8014df4:	fb01 f303 	mul.w	r3, r1, r3
 8014df8:	1ad3      	subs	r3, r2, r3
 8014dfa:	00db      	lsls	r3, r3, #3
 8014dfc:	3332      	adds	r3, #50	; 0x32
 8014dfe:	4a6b      	ldr	r2, [pc, #428]	; (8014fac <UART_SetConfig+0x3dc>)
 8014e00:	fba2 2303 	umull	r2, r3, r2, r3
 8014e04:	095b      	lsrs	r3, r3, #5
 8014e06:	f003 0207 	and.w	r2, r3, #7
 8014e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	4432      	add	r2, r6
 8014e12:	609a      	str	r2, [r3, #8]
 8014e14:	e26d      	b.n	80152f2 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8014e16:	f7fd ff63 	bl	8012ce0 <HAL_RCC_GetPCLK1Freq>
 8014e1a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8014e1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014e22:	461c      	mov	r4, r3
 8014e24:	f04f 0500 	mov.w	r5, #0
 8014e28:	4622      	mov	r2, r4
 8014e2a:	462b      	mov	r3, r5
 8014e2c:	1891      	adds	r1, r2, r2
 8014e2e:	65b9      	str	r1, [r7, #88]	; 0x58
 8014e30:	415b      	adcs	r3, r3
 8014e32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014e34:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8014e38:	1912      	adds	r2, r2, r4
 8014e3a:	eb45 0303 	adc.w	r3, r5, r3
 8014e3e:	f04f 0000 	mov.w	r0, #0
 8014e42:	f04f 0100 	mov.w	r1, #0
 8014e46:	00d9      	lsls	r1, r3, #3
 8014e48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014e4c:	00d0      	lsls	r0, r2, #3
 8014e4e:	4602      	mov	r2, r0
 8014e50:	460b      	mov	r3, r1
 8014e52:	1911      	adds	r1, r2, r4
 8014e54:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8014e58:	416b      	adcs	r3, r5
 8014e5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8014e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014e62:	685b      	ldr	r3, [r3, #4]
 8014e64:	461a      	mov	r2, r3
 8014e66:	f04f 0300 	mov.w	r3, #0
 8014e6a:	1891      	adds	r1, r2, r2
 8014e6c:	6539      	str	r1, [r7, #80]	; 0x50
 8014e6e:	415b      	adcs	r3, r3
 8014e70:	657b      	str	r3, [r7, #84]	; 0x54
 8014e72:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8014e76:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8014e7a:	f7eb ff05 	bl	8000c88 <__aeabi_uldivmod>
 8014e7e:	4602      	mov	r2, r0
 8014e80:	460b      	mov	r3, r1
 8014e82:	4b4a      	ldr	r3, [pc, #296]	; (8014fac <UART_SetConfig+0x3dc>)
 8014e84:	fba3 2302 	umull	r2, r3, r3, r2
 8014e88:	095b      	lsrs	r3, r3, #5
 8014e8a:	011e      	lsls	r6, r3, #4
 8014e8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014e90:	461c      	mov	r4, r3
 8014e92:	f04f 0500 	mov.w	r5, #0
 8014e96:	4622      	mov	r2, r4
 8014e98:	462b      	mov	r3, r5
 8014e9a:	1891      	adds	r1, r2, r2
 8014e9c:	64b9      	str	r1, [r7, #72]	; 0x48
 8014e9e:	415b      	adcs	r3, r3
 8014ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014ea2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8014ea6:	1912      	adds	r2, r2, r4
 8014ea8:	eb45 0303 	adc.w	r3, r5, r3
 8014eac:	f04f 0000 	mov.w	r0, #0
 8014eb0:	f04f 0100 	mov.w	r1, #0
 8014eb4:	00d9      	lsls	r1, r3, #3
 8014eb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014eba:	00d0      	lsls	r0, r2, #3
 8014ebc:	4602      	mov	r2, r0
 8014ebe:	460b      	mov	r3, r1
 8014ec0:	1911      	adds	r1, r2, r4
 8014ec2:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8014ec6:	416b      	adcs	r3, r5
 8014ec8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8014ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014ed0:	685b      	ldr	r3, [r3, #4]
 8014ed2:	461a      	mov	r2, r3
 8014ed4:	f04f 0300 	mov.w	r3, #0
 8014ed8:	1891      	adds	r1, r2, r2
 8014eda:	6439      	str	r1, [r7, #64]	; 0x40
 8014edc:	415b      	adcs	r3, r3
 8014ede:	647b      	str	r3, [r7, #68]	; 0x44
 8014ee0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8014ee4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8014ee8:	f7eb fece 	bl	8000c88 <__aeabi_uldivmod>
 8014eec:	4602      	mov	r2, r0
 8014eee:	460b      	mov	r3, r1
 8014ef0:	4b2e      	ldr	r3, [pc, #184]	; (8014fac <UART_SetConfig+0x3dc>)
 8014ef2:	fba3 1302 	umull	r1, r3, r3, r2
 8014ef6:	095b      	lsrs	r3, r3, #5
 8014ef8:	2164      	movs	r1, #100	; 0x64
 8014efa:	fb01 f303 	mul.w	r3, r1, r3
 8014efe:	1ad3      	subs	r3, r2, r3
 8014f00:	00db      	lsls	r3, r3, #3
 8014f02:	3332      	adds	r3, #50	; 0x32
 8014f04:	4a29      	ldr	r2, [pc, #164]	; (8014fac <UART_SetConfig+0x3dc>)
 8014f06:	fba2 2303 	umull	r2, r3, r2, r3
 8014f0a:	095b      	lsrs	r3, r3, #5
 8014f0c:	005b      	lsls	r3, r3, #1
 8014f0e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8014f12:	441e      	add	r6, r3
 8014f14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014f18:	4618      	mov	r0, r3
 8014f1a:	f04f 0100 	mov.w	r1, #0
 8014f1e:	4602      	mov	r2, r0
 8014f20:	460b      	mov	r3, r1
 8014f22:	1894      	adds	r4, r2, r2
 8014f24:	63bc      	str	r4, [r7, #56]	; 0x38
 8014f26:	415b      	adcs	r3, r3
 8014f28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014f2a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8014f2e:	1812      	adds	r2, r2, r0
 8014f30:	eb41 0303 	adc.w	r3, r1, r3
 8014f34:	f04f 0400 	mov.w	r4, #0
 8014f38:	f04f 0500 	mov.w	r5, #0
 8014f3c:	00dd      	lsls	r5, r3, #3
 8014f3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8014f42:	00d4      	lsls	r4, r2, #3
 8014f44:	4622      	mov	r2, r4
 8014f46:	462b      	mov	r3, r5
 8014f48:	1814      	adds	r4, r2, r0
 8014f4a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8014f4e:	414b      	adcs	r3, r1
 8014f50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8014f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014f58:	685b      	ldr	r3, [r3, #4]
 8014f5a:	461a      	mov	r2, r3
 8014f5c:	f04f 0300 	mov.w	r3, #0
 8014f60:	1891      	adds	r1, r2, r2
 8014f62:	6339      	str	r1, [r7, #48]	; 0x30
 8014f64:	415b      	adcs	r3, r3
 8014f66:	637b      	str	r3, [r7, #52]	; 0x34
 8014f68:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8014f6c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8014f70:	f7eb fe8a 	bl	8000c88 <__aeabi_uldivmod>
 8014f74:	4602      	mov	r2, r0
 8014f76:	460b      	mov	r3, r1
 8014f78:	4b0c      	ldr	r3, [pc, #48]	; (8014fac <UART_SetConfig+0x3dc>)
 8014f7a:	fba3 1302 	umull	r1, r3, r3, r2
 8014f7e:	095b      	lsrs	r3, r3, #5
 8014f80:	2164      	movs	r1, #100	; 0x64
 8014f82:	fb01 f303 	mul.w	r3, r1, r3
 8014f86:	1ad3      	subs	r3, r2, r3
 8014f88:	00db      	lsls	r3, r3, #3
 8014f8a:	3332      	adds	r3, #50	; 0x32
 8014f8c:	4a07      	ldr	r2, [pc, #28]	; (8014fac <UART_SetConfig+0x3dc>)
 8014f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8014f92:	095b      	lsrs	r3, r3, #5
 8014f94:	f003 0207 	and.w	r2, r3, #7
 8014f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	4432      	add	r2, r6
 8014fa0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8014fa2:	e1a6      	b.n	80152f2 <UART_SetConfig+0x722>
 8014fa4:	40011000 	.word	0x40011000
 8014fa8:	40011400 	.word	0x40011400
 8014fac:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8014fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014fb4:	681a      	ldr	r2, [r3, #0]
 8014fb6:	4bd1      	ldr	r3, [pc, #836]	; (80152fc <UART_SetConfig+0x72c>)
 8014fb8:	429a      	cmp	r2, r3
 8014fba:	d006      	beq.n	8014fca <UART_SetConfig+0x3fa>
 8014fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014fc0:	681a      	ldr	r2, [r3, #0]
 8014fc2:	4bcf      	ldr	r3, [pc, #828]	; (8015300 <UART_SetConfig+0x730>)
 8014fc4:	429a      	cmp	r2, r3
 8014fc6:	f040 80ca 	bne.w	801515e <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8014fca:	f7fd fe9d 	bl	8012d08 <HAL_RCC_GetPCLK2Freq>
 8014fce:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8014fd2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014fd6:	461c      	mov	r4, r3
 8014fd8:	f04f 0500 	mov.w	r5, #0
 8014fdc:	4622      	mov	r2, r4
 8014fde:	462b      	mov	r3, r5
 8014fe0:	1891      	adds	r1, r2, r2
 8014fe2:	62b9      	str	r1, [r7, #40]	; 0x28
 8014fe4:	415b      	adcs	r3, r3
 8014fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014fe8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8014fec:	1912      	adds	r2, r2, r4
 8014fee:	eb45 0303 	adc.w	r3, r5, r3
 8014ff2:	f04f 0000 	mov.w	r0, #0
 8014ff6:	f04f 0100 	mov.w	r1, #0
 8014ffa:	00d9      	lsls	r1, r3, #3
 8014ffc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8015000:	00d0      	lsls	r0, r2, #3
 8015002:	4602      	mov	r2, r0
 8015004:	460b      	mov	r3, r1
 8015006:	eb12 0a04 	adds.w	sl, r2, r4
 801500a:	eb43 0b05 	adc.w	fp, r3, r5
 801500e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015012:	685b      	ldr	r3, [r3, #4]
 8015014:	4618      	mov	r0, r3
 8015016:	f04f 0100 	mov.w	r1, #0
 801501a:	f04f 0200 	mov.w	r2, #0
 801501e:	f04f 0300 	mov.w	r3, #0
 8015022:	008b      	lsls	r3, r1, #2
 8015024:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8015028:	0082      	lsls	r2, r0, #2
 801502a:	4650      	mov	r0, sl
 801502c:	4659      	mov	r1, fp
 801502e:	f7eb fe2b 	bl	8000c88 <__aeabi_uldivmod>
 8015032:	4602      	mov	r2, r0
 8015034:	460b      	mov	r3, r1
 8015036:	4bb3      	ldr	r3, [pc, #716]	; (8015304 <UART_SetConfig+0x734>)
 8015038:	fba3 2302 	umull	r2, r3, r3, r2
 801503c:	095b      	lsrs	r3, r3, #5
 801503e:	011e      	lsls	r6, r3, #4
 8015040:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015044:	4618      	mov	r0, r3
 8015046:	f04f 0100 	mov.w	r1, #0
 801504a:	4602      	mov	r2, r0
 801504c:	460b      	mov	r3, r1
 801504e:	1894      	adds	r4, r2, r2
 8015050:	623c      	str	r4, [r7, #32]
 8015052:	415b      	adcs	r3, r3
 8015054:	627b      	str	r3, [r7, #36]	; 0x24
 8015056:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801505a:	1812      	adds	r2, r2, r0
 801505c:	eb41 0303 	adc.w	r3, r1, r3
 8015060:	f04f 0400 	mov.w	r4, #0
 8015064:	f04f 0500 	mov.w	r5, #0
 8015068:	00dd      	lsls	r5, r3, #3
 801506a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801506e:	00d4      	lsls	r4, r2, #3
 8015070:	4622      	mov	r2, r4
 8015072:	462b      	mov	r3, r5
 8015074:	1814      	adds	r4, r2, r0
 8015076:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 801507a:	414b      	adcs	r3, r1
 801507c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8015080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015084:	685b      	ldr	r3, [r3, #4]
 8015086:	4618      	mov	r0, r3
 8015088:	f04f 0100 	mov.w	r1, #0
 801508c:	f04f 0200 	mov.w	r2, #0
 8015090:	f04f 0300 	mov.w	r3, #0
 8015094:	008b      	lsls	r3, r1, #2
 8015096:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801509a:	0082      	lsls	r2, r0, #2
 801509c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80150a0:	f7eb fdf2 	bl	8000c88 <__aeabi_uldivmod>
 80150a4:	4602      	mov	r2, r0
 80150a6:	460b      	mov	r3, r1
 80150a8:	4b96      	ldr	r3, [pc, #600]	; (8015304 <UART_SetConfig+0x734>)
 80150aa:	fba3 1302 	umull	r1, r3, r3, r2
 80150ae:	095b      	lsrs	r3, r3, #5
 80150b0:	2164      	movs	r1, #100	; 0x64
 80150b2:	fb01 f303 	mul.w	r3, r1, r3
 80150b6:	1ad3      	subs	r3, r2, r3
 80150b8:	011b      	lsls	r3, r3, #4
 80150ba:	3332      	adds	r3, #50	; 0x32
 80150bc:	4a91      	ldr	r2, [pc, #580]	; (8015304 <UART_SetConfig+0x734>)
 80150be:	fba2 2303 	umull	r2, r3, r2, r3
 80150c2:	095b      	lsrs	r3, r3, #5
 80150c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80150c8:	441e      	add	r6, r3
 80150ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80150ce:	4618      	mov	r0, r3
 80150d0:	f04f 0100 	mov.w	r1, #0
 80150d4:	4602      	mov	r2, r0
 80150d6:	460b      	mov	r3, r1
 80150d8:	1894      	adds	r4, r2, r2
 80150da:	61bc      	str	r4, [r7, #24]
 80150dc:	415b      	adcs	r3, r3
 80150de:	61fb      	str	r3, [r7, #28]
 80150e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80150e4:	1812      	adds	r2, r2, r0
 80150e6:	eb41 0303 	adc.w	r3, r1, r3
 80150ea:	f04f 0400 	mov.w	r4, #0
 80150ee:	f04f 0500 	mov.w	r5, #0
 80150f2:	00dd      	lsls	r5, r3, #3
 80150f4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80150f8:	00d4      	lsls	r4, r2, #3
 80150fa:	4622      	mov	r2, r4
 80150fc:	462b      	mov	r3, r5
 80150fe:	1814      	adds	r4, r2, r0
 8015100:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8015104:	414b      	adcs	r3, r1
 8015106:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801510a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801510e:	685b      	ldr	r3, [r3, #4]
 8015110:	4618      	mov	r0, r3
 8015112:	f04f 0100 	mov.w	r1, #0
 8015116:	f04f 0200 	mov.w	r2, #0
 801511a:	f04f 0300 	mov.w	r3, #0
 801511e:	008b      	lsls	r3, r1, #2
 8015120:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8015124:	0082      	lsls	r2, r0, #2
 8015126:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 801512a:	f7eb fdad 	bl	8000c88 <__aeabi_uldivmod>
 801512e:	4602      	mov	r2, r0
 8015130:	460b      	mov	r3, r1
 8015132:	4b74      	ldr	r3, [pc, #464]	; (8015304 <UART_SetConfig+0x734>)
 8015134:	fba3 1302 	umull	r1, r3, r3, r2
 8015138:	095b      	lsrs	r3, r3, #5
 801513a:	2164      	movs	r1, #100	; 0x64
 801513c:	fb01 f303 	mul.w	r3, r1, r3
 8015140:	1ad3      	subs	r3, r2, r3
 8015142:	011b      	lsls	r3, r3, #4
 8015144:	3332      	adds	r3, #50	; 0x32
 8015146:	4a6f      	ldr	r2, [pc, #444]	; (8015304 <UART_SetConfig+0x734>)
 8015148:	fba2 2303 	umull	r2, r3, r2, r3
 801514c:	095b      	lsrs	r3, r3, #5
 801514e:	f003 020f 	and.w	r2, r3, #15
 8015152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	4432      	add	r2, r6
 801515a:	609a      	str	r2, [r3, #8]
 801515c:	e0c9      	b.n	80152f2 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 801515e:	f7fd fdbf 	bl	8012ce0 <HAL_RCC_GetPCLK1Freq>
 8015162:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8015166:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801516a:	461c      	mov	r4, r3
 801516c:	f04f 0500 	mov.w	r5, #0
 8015170:	4622      	mov	r2, r4
 8015172:	462b      	mov	r3, r5
 8015174:	1891      	adds	r1, r2, r2
 8015176:	6139      	str	r1, [r7, #16]
 8015178:	415b      	adcs	r3, r3
 801517a:	617b      	str	r3, [r7, #20]
 801517c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8015180:	1912      	adds	r2, r2, r4
 8015182:	eb45 0303 	adc.w	r3, r5, r3
 8015186:	f04f 0000 	mov.w	r0, #0
 801518a:	f04f 0100 	mov.w	r1, #0
 801518e:	00d9      	lsls	r1, r3, #3
 8015190:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8015194:	00d0      	lsls	r0, r2, #3
 8015196:	4602      	mov	r2, r0
 8015198:	460b      	mov	r3, r1
 801519a:	eb12 0804 	adds.w	r8, r2, r4
 801519e:	eb43 0905 	adc.w	r9, r3, r5
 80151a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80151a6:	685b      	ldr	r3, [r3, #4]
 80151a8:	4618      	mov	r0, r3
 80151aa:	f04f 0100 	mov.w	r1, #0
 80151ae:	f04f 0200 	mov.w	r2, #0
 80151b2:	f04f 0300 	mov.w	r3, #0
 80151b6:	008b      	lsls	r3, r1, #2
 80151b8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80151bc:	0082      	lsls	r2, r0, #2
 80151be:	4640      	mov	r0, r8
 80151c0:	4649      	mov	r1, r9
 80151c2:	f7eb fd61 	bl	8000c88 <__aeabi_uldivmod>
 80151c6:	4602      	mov	r2, r0
 80151c8:	460b      	mov	r3, r1
 80151ca:	4b4e      	ldr	r3, [pc, #312]	; (8015304 <UART_SetConfig+0x734>)
 80151cc:	fba3 2302 	umull	r2, r3, r3, r2
 80151d0:	095b      	lsrs	r3, r3, #5
 80151d2:	011e      	lsls	r6, r3, #4
 80151d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80151d8:	4618      	mov	r0, r3
 80151da:	f04f 0100 	mov.w	r1, #0
 80151de:	4602      	mov	r2, r0
 80151e0:	460b      	mov	r3, r1
 80151e2:	1894      	adds	r4, r2, r2
 80151e4:	60bc      	str	r4, [r7, #8]
 80151e6:	415b      	adcs	r3, r3
 80151e8:	60fb      	str	r3, [r7, #12]
 80151ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80151ee:	1812      	adds	r2, r2, r0
 80151f0:	eb41 0303 	adc.w	r3, r1, r3
 80151f4:	f04f 0400 	mov.w	r4, #0
 80151f8:	f04f 0500 	mov.w	r5, #0
 80151fc:	00dd      	lsls	r5, r3, #3
 80151fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8015202:	00d4      	lsls	r4, r2, #3
 8015204:	4622      	mov	r2, r4
 8015206:	462b      	mov	r3, r5
 8015208:	1814      	adds	r4, r2, r0
 801520a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 801520e:	414b      	adcs	r3, r1
 8015210:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8015214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015218:	685b      	ldr	r3, [r3, #4]
 801521a:	4618      	mov	r0, r3
 801521c:	f04f 0100 	mov.w	r1, #0
 8015220:	f04f 0200 	mov.w	r2, #0
 8015224:	f04f 0300 	mov.w	r3, #0
 8015228:	008b      	lsls	r3, r1, #2
 801522a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801522e:	0082      	lsls	r2, r0, #2
 8015230:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8015234:	f7eb fd28 	bl	8000c88 <__aeabi_uldivmod>
 8015238:	4602      	mov	r2, r0
 801523a:	460b      	mov	r3, r1
 801523c:	4b31      	ldr	r3, [pc, #196]	; (8015304 <UART_SetConfig+0x734>)
 801523e:	fba3 1302 	umull	r1, r3, r3, r2
 8015242:	095b      	lsrs	r3, r3, #5
 8015244:	2164      	movs	r1, #100	; 0x64
 8015246:	fb01 f303 	mul.w	r3, r1, r3
 801524a:	1ad3      	subs	r3, r2, r3
 801524c:	011b      	lsls	r3, r3, #4
 801524e:	3332      	adds	r3, #50	; 0x32
 8015250:	4a2c      	ldr	r2, [pc, #176]	; (8015304 <UART_SetConfig+0x734>)
 8015252:	fba2 2303 	umull	r2, r3, r2, r3
 8015256:	095b      	lsrs	r3, r3, #5
 8015258:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801525c:	441e      	add	r6, r3
 801525e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015262:	4618      	mov	r0, r3
 8015264:	f04f 0100 	mov.w	r1, #0
 8015268:	4602      	mov	r2, r0
 801526a:	460b      	mov	r3, r1
 801526c:	1894      	adds	r4, r2, r2
 801526e:	603c      	str	r4, [r7, #0]
 8015270:	415b      	adcs	r3, r3
 8015272:	607b      	str	r3, [r7, #4]
 8015274:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015278:	1812      	adds	r2, r2, r0
 801527a:	eb41 0303 	adc.w	r3, r1, r3
 801527e:	f04f 0400 	mov.w	r4, #0
 8015282:	f04f 0500 	mov.w	r5, #0
 8015286:	00dd      	lsls	r5, r3, #3
 8015288:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801528c:	00d4      	lsls	r4, r2, #3
 801528e:	4622      	mov	r2, r4
 8015290:	462b      	mov	r3, r5
 8015292:	1814      	adds	r4, r2, r0
 8015294:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8015298:	414b      	adcs	r3, r1
 801529a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801529e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80152a2:	685b      	ldr	r3, [r3, #4]
 80152a4:	4618      	mov	r0, r3
 80152a6:	f04f 0100 	mov.w	r1, #0
 80152aa:	f04f 0200 	mov.w	r2, #0
 80152ae:	f04f 0300 	mov.w	r3, #0
 80152b2:	008b      	lsls	r3, r1, #2
 80152b4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80152b8:	0082      	lsls	r2, r0, #2
 80152ba:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80152be:	f7eb fce3 	bl	8000c88 <__aeabi_uldivmod>
 80152c2:	4602      	mov	r2, r0
 80152c4:	460b      	mov	r3, r1
 80152c6:	4b0f      	ldr	r3, [pc, #60]	; (8015304 <UART_SetConfig+0x734>)
 80152c8:	fba3 1302 	umull	r1, r3, r3, r2
 80152cc:	095b      	lsrs	r3, r3, #5
 80152ce:	2164      	movs	r1, #100	; 0x64
 80152d0:	fb01 f303 	mul.w	r3, r1, r3
 80152d4:	1ad3      	subs	r3, r2, r3
 80152d6:	011b      	lsls	r3, r3, #4
 80152d8:	3332      	adds	r3, #50	; 0x32
 80152da:	4a0a      	ldr	r2, [pc, #40]	; (8015304 <UART_SetConfig+0x734>)
 80152dc:	fba2 2303 	umull	r2, r3, r2, r3
 80152e0:	095b      	lsrs	r3, r3, #5
 80152e2:	f003 020f 	and.w	r2, r3, #15
 80152e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	4432      	add	r2, r6
 80152ee:	609a      	str	r2, [r3, #8]
}
 80152f0:	e7ff      	b.n	80152f2 <UART_SetConfig+0x722>
 80152f2:	bf00      	nop
 80152f4:	37f4      	adds	r7, #244	; 0xf4
 80152f6:	46bd      	mov	sp, r7
 80152f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152fc:	40011000 	.word	0x40011000
 8015300:	40011400 	.word	0x40011400
 8015304:	51eb851f 	.word	0x51eb851f

08015308 <__NVIC_SetPriority>:
{
 8015308:	b480      	push	{r7}
 801530a:	b083      	sub	sp, #12
 801530c:	af00      	add	r7, sp, #0
 801530e:	4603      	mov	r3, r0
 8015310:	6039      	str	r1, [r7, #0]
 8015312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015318:	2b00      	cmp	r3, #0
 801531a:	db0a      	blt.n	8015332 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801531c:	683b      	ldr	r3, [r7, #0]
 801531e:	b2da      	uxtb	r2, r3
 8015320:	490c      	ldr	r1, [pc, #48]	; (8015354 <__NVIC_SetPriority+0x4c>)
 8015322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015326:	0112      	lsls	r2, r2, #4
 8015328:	b2d2      	uxtb	r2, r2
 801532a:	440b      	add	r3, r1
 801532c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015330:	e00a      	b.n	8015348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015332:	683b      	ldr	r3, [r7, #0]
 8015334:	b2da      	uxtb	r2, r3
 8015336:	4908      	ldr	r1, [pc, #32]	; (8015358 <__NVIC_SetPriority+0x50>)
 8015338:	79fb      	ldrb	r3, [r7, #7]
 801533a:	f003 030f 	and.w	r3, r3, #15
 801533e:	3b04      	subs	r3, #4
 8015340:	0112      	lsls	r2, r2, #4
 8015342:	b2d2      	uxtb	r2, r2
 8015344:	440b      	add	r3, r1
 8015346:	761a      	strb	r2, [r3, #24]
}
 8015348:	bf00      	nop
 801534a:	370c      	adds	r7, #12
 801534c:	46bd      	mov	sp, r7
 801534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015352:	4770      	bx	lr
 8015354:	e000e100 	.word	0xe000e100
 8015358:	e000ed00 	.word	0xe000ed00

0801535c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801535c:	b580      	push	{r7, lr}
 801535e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8015360:	4b05      	ldr	r3, [pc, #20]	; (8015378 <SysTick_Handler+0x1c>)
 8015362:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8015364:	f002 fada 	bl	801791c <xTaskGetSchedulerState>
 8015368:	4603      	mov	r3, r0
 801536a:	2b01      	cmp	r3, #1
 801536c:	d001      	beq.n	8015372 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801536e:	f003 f9c3 	bl	80186f8 <xPortSysTickHandler>
  }
}
 8015372:	bf00      	nop
 8015374:	bd80      	pop	{r7, pc}
 8015376:	bf00      	nop
 8015378:	e000e010 	.word	0xe000e010

0801537c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801537c:	b580      	push	{r7, lr}
 801537e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8015380:	2100      	movs	r1, #0
 8015382:	f06f 0004 	mvn.w	r0, #4
 8015386:	f7ff ffbf 	bl	8015308 <__NVIC_SetPriority>
#endif
}
 801538a:	bf00      	nop
 801538c:	bd80      	pop	{r7, pc}
	...

08015390 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8015390:	b480      	push	{r7}
 8015392:	b083      	sub	sp, #12
 8015394:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015396:	f3ef 8305 	mrs	r3, IPSR
 801539a:	603b      	str	r3, [r7, #0]
  return(result);
 801539c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d003      	beq.n	80153aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80153a2:	f06f 0305 	mvn.w	r3, #5
 80153a6:	607b      	str	r3, [r7, #4]
 80153a8:	e00c      	b.n	80153c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80153aa:	4b0a      	ldr	r3, [pc, #40]	; (80153d4 <osKernelInitialize+0x44>)
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d105      	bne.n	80153be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80153b2:	4b08      	ldr	r3, [pc, #32]	; (80153d4 <osKernelInitialize+0x44>)
 80153b4:	2201      	movs	r2, #1
 80153b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80153b8:	2300      	movs	r3, #0
 80153ba:	607b      	str	r3, [r7, #4]
 80153bc:	e002      	b.n	80153c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80153be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80153c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80153c4:	687b      	ldr	r3, [r7, #4]
}
 80153c6:	4618      	mov	r0, r3
 80153c8:	370c      	adds	r7, #12
 80153ca:	46bd      	mov	sp, r7
 80153cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d0:	4770      	bx	lr
 80153d2:	bf00      	nop
 80153d4:	20001134 	.word	0x20001134

080153d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80153d8:	b580      	push	{r7, lr}
 80153da:	b082      	sub	sp, #8
 80153dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80153de:	f3ef 8305 	mrs	r3, IPSR
 80153e2:	603b      	str	r3, [r7, #0]
  return(result);
 80153e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d003      	beq.n	80153f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80153ea:	f06f 0305 	mvn.w	r3, #5
 80153ee:	607b      	str	r3, [r7, #4]
 80153f0:	e010      	b.n	8015414 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80153f2:	4b0b      	ldr	r3, [pc, #44]	; (8015420 <osKernelStart+0x48>)
 80153f4:	681b      	ldr	r3, [r3, #0]
 80153f6:	2b01      	cmp	r3, #1
 80153f8:	d109      	bne.n	801540e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80153fa:	f7ff ffbf 	bl	801537c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80153fe:	4b08      	ldr	r3, [pc, #32]	; (8015420 <osKernelStart+0x48>)
 8015400:	2202      	movs	r2, #2
 8015402:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8015404:	f001 fe42 	bl	801708c <vTaskStartScheduler>
      stat = osOK;
 8015408:	2300      	movs	r3, #0
 801540a:	607b      	str	r3, [r7, #4]
 801540c:	e002      	b.n	8015414 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801540e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015412:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015414:	687b      	ldr	r3, [r7, #4]
}
 8015416:	4618      	mov	r0, r3
 8015418:	3708      	adds	r7, #8
 801541a:	46bd      	mov	sp, r7
 801541c:	bd80      	pop	{r7, pc}
 801541e:	bf00      	nop
 8015420:	20001134 	.word	0x20001134

08015424 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8015424:	b580      	push	{r7, lr}
 8015426:	b08e      	sub	sp, #56	; 0x38
 8015428:	af04      	add	r7, sp, #16
 801542a:	60f8      	str	r0, [r7, #12]
 801542c:	60b9      	str	r1, [r7, #8]
 801542e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8015430:	2300      	movs	r3, #0
 8015432:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015434:	f3ef 8305 	mrs	r3, IPSR
 8015438:	617b      	str	r3, [r7, #20]
  return(result);
 801543a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801543c:	2b00      	cmp	r3, #0
 801543e:	d17e      	bne.n	801553e <osThreadNew+0x11a>
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d07b      	beq.n	801553e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8015446:	2380      	movs	r3, #128	; 0x80
 8015448:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801544a:	2318      	movs	r3, #24
 801544c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801544e:	2300      	movs	r3, #0
 8015450:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8015452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015456:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	2b00      	cmp	r3, #0
 801545c:	d045      	beq.n	80154ea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	2b00      	cmp	r3, #0
 8015464:	d002      	beq.n	801546c <osThreadNew+0x48>
        name = attr->name;
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	699b      	ldr	r3, [r3, #24]
 8015470:	2b00      	cmp	r3, #0
 8015472:	d002      	beq.n	801547a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	699b      	ldr	r3, [r3, #24]
 8015478:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801547a:	69fb      	ldr	r3, [r7, #28]
 801547c:	2b00      	cmp	r3, #0
 801547e:	d008      	beq.n	8015492 <osThreadNew+0x6e>
 8015480:	69fb      	ldr	r3, [r7, #28]
 8015482:	2b38      	cmp	r3, #56	; 0x38
 8015484:	d805      	bhi.n	8015492 <osThreadNew+0x6e>
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	685b      	ldr	r3, [r3, #4]
 801548a:	f003 0301 	and.w	r3, r3, #1
 801548e:	2b00      	cmp	r3, #0
 8015490:	d001      	beq.n	8015496 <osThreadNew+0x72>
        return (NULL);
 8015492:	2300      	movs	r3, #0
 8015494:	e054      	b.n	8015540 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	695b      	ldr	r3, [r3, #20]
 801549a:	2b00      	cmp	r3, #0
 801549c:	d003      	beq.n	80154a6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	695b      	ldr	r3, [r3, #20]
 80154a2:	089b      	lsrs	r3, r3, #2
 80154a4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	689b      	ldr	r3, [r3, #8]
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d00e      	beq.n	80154cc <osThreadNew+0xa8>
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	68db      	ldr	r3, [r3, #12]
 80154b2:	2b5b      	cmp	r3, #91	; 0x5b
 80154b4:	d90a      	bls.n	80154cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d006      	beq.n	80154cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	695b      	ldr	r3, [r3, #20]
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d002      	beq.n	80154cc <osThreadNew+0xa8>
        mem = 1;
 80154c6:	2301      	movs	r3, #1
 80154c8:	61bb      	str	r3, [r7, #24]
 80154ca:	e010      	b.n	80154ee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	689b      	ldr	r3, [r3, #8]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d10c      	bne.n	80154ee <osThreadNew+0xca>
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	68db      	ldr	r3, [r3, #12]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d108      	bne.n	80154ee <osThreadNew+0xca>
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	691b      	ldr	r3, [r3, #16]
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d104      	bne.n	80154ee <osThreadNew+0xca>
          mem = 0;
 80154e4:	2300      	movs	r3, #0
 80154e6:	61bb      	str	r3, [r7, #24]
 80154e8:	e001      	b.n	80154ee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80154ea:	2300      	movs	r3, #0
 80154ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80154ee:	69bb      	ldr	r3, [r7, #24]
 80154f0:	2b01      	cmp	r3, #1
 80154f2:	d110      	bne.n	8015516 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80154f8:	687a      	ldr	r2, [r7, #4]
 80154fa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80154fc:	9202      	str	r2, [sp, #8]
 80154fe:	9301      	str	r3, [sp, #4]
 8015500:	69fb      	ldr	r3, [r7, #28]
 8015502:	9300      	str	r3, [sp, #0]
 8015504:	68bb      	ldr	r3, [r7, #8]
 8015506:	6a3a      	ldr	r2, [r7, #32]
 8015508:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801550a:	68f8      	ldr	r0, [r7, #12]
 801550c:	f001 fa9a 	bl	8016a44 <xTaskCreateStatic>
 8015510:	4603      	mov	r3, r0
 8015512:	613b      	str	r3, [r7, #16]
 8015514:	e013      	b.n	801553e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8015516:	69bb      	ldr	r3, [r7, #24]
 8015518:	2b00      	cmp	r3, #0
 801551a:	d110      	bne.n	801553e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801551c:	6a3b      	ldr	r3, [r7, #32]
 801551e:	b29a      	uxth	r2, r3
 8015520:	f107 0310 	add.w	r3, r7, #16
 8015524:	9301      	str	r3, [sp, #4]
 8015526:	69fb      	ldr	r3, [r7, #28]
 8015528:	9300      	str	r3, [sp, #0]
 801552a:	68bb      	ldr	r3, [r7, #8]
 801552c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801552e:	68f8      	ldr	r0, [r7, #12]
 8015530:	f001 fae5 	bl	8016afe <xTaskCreate>
 8015534:	4603      	mov	r3, r0
 8015536:	2b01      	cmp	r3, #1
 8015538:	d001      	beq.n	801553e <osThreadNew+0x11a>
            hTask = NULL;
 801553a:	2300      	movs	r3, #0
 801553c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801553e:	693b      	ldr	r3, [r7, #16]
}
 8015540:	4618      	mov	r0, r3
 8015542:	3728      	adds	r7, #40	; 0x28
 8015544:	46bd      	mov	sp, r7
 8015546:	bd80      	pop	{r7, pc}

08015548 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8015548:	b580      	push	{r7, lr}
 801554a:	b086      	sub	sp, #24
 801554c:	af00      	add	r7, sp, #0
 801554e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015554:	f3ef 8305 	mrs	r3, IPSR
 8015558:	60fb      	str	r3, [r7, #12]
  return(result);
 801555a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 801555c:	2b00      	cmp	r3, #0
 801555e:	d003      	beq.n	8015568 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8015560:	f06f 0305 	mvn.w	r3, #5
 8015564:	617b      	str	r3, [r7, #20]
 8015566:	e00b      	b.n	8015580 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8015568:	693b      	ldr	r3, [r7, #16]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d103      	bne.n	8015576 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 801556e:	f06f 0303 	mvn.w	r3, #3
 8015572:	617b      	str	r3, [r7, #20]
 8015574:	e004      	b.n	8015580 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8015576:	2300      	movs	r3, #0
 8015578:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 801557a:	6938      	ldr	r0, [r7, #16]
 801557c:	f001 fd10 	bl	8016fa0 <vTaskSuspend>
  }

  return (stat);
 8015580:	697b      	ldr	r3, [r7, #20]
}
 8015582:	4618      	mov	r0, r3
 8015584:	3718      	adds	r7, #24
 8015586:	46bd      	mov	sp, r7
 8015588:	bd80      	pop	{r7, pc}

0801558a <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 801558a:	b580      	push	{r7, lr}
 801558c:	b086      	sub	sp, #24
 801558e:	af00      	add	r7, sp, #0
 8015590:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015596:	f3ef 8305 	mrs	r3, IPSR
 801559a:	60bb      	str	r3, [r7, #8]
  return(result);
 801559c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d003      	beq.n	80155aa <osThreadTerminate+0x20>
    stat = osErrorISR;
 80155a2:	f06f 0305 	mvn.w	r3, #5
 80155a6:	617b      	str	r3, [r7, #20]
 80155a8:	e017      	b.n	80155da <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 80155aa:	693b      	ldr	r3, [r7, #16]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d103      	bne.n	80155b8 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 80155b0:	f06f 0303 	mvn.w	r3, #3
 80155b4:	617b      	str	r3, [r7, #20]
 80155b6:	e010      	b.n	80155da <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 80155b8:	6938      	ldr	r0, [r7, #16]
 80155ba:	f001 fc8b 	bl	8016ed4 <eTaskGetState>
 80155be:	4603      	mov	r3, r0
 80155c0:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 80155c2:	7bfb      	ldrb	r3, [r7, #15]
 80155c4:	2b04      	cmp	r3, #4
 80155c6:	d005      	beq.n	80155d4 <osThreadTerminate+0x4a>
      stat = osOK;
 80155c8:	2300      	movs	r3, #0
 80155ca:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 80155cc:	6938      	ldr	r0, [r7, #16]
 80155ce:	f001 fbdb 	bl	8016d88 <vTaskDelete>
 80155d2:	e002      	b.n	80155da <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 80155d4:	f06f 0302 	mvn.w	r3, #2
 80155d8:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 80155da:	697b      	ldr	r3, [r7, #20]
}
 80155dc:	4618      	mov	r0, r3
 80155de:	3718      	adds	r7, #24
 80155e0:	46bd      	mov	sp, r7
 80155e2:	bd80      	pop	{r7, pc}

080155e4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80155e4:	b580      	push	{r7, lr}
 80155e6:	b084      	sub	sp, #16
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80155ec:	f3ef 8305 	mrs	r3, IPSR
 80155f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80155f2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d003      	beq.n	8015600 <osDelay+0x1c>
    stat = osErrorISR;
 80155f8:	f06f 0305 	mvn.w	r3, #5
 80155fc:	60fb      	str	r3, [r7, #12]
 80155fe:	e007      	b.n	8015610 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8015600:	2300      	movs	r3, #0
 8015602:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	2b00      	cmp	r3, #0
 8015608:	d002      	beq.n	8015610 <osDelay+0x2c>
      vTaskDelay(ticks);
 801560a:	6878      	ldr	r0, [r7, #4]
 801560c:	f001 fc2e 	bl	8016e6c <vTaskDelay>
    }
  }

  return (stat);
 8015610:	68fb      	ldr	r3, [r7, #12]
}
 8015612:	4618      	mov	r0, r3
 8015614:	3710      	adds	r7, #16
 8015616:	46bd      	mov	sp, r7
 8015618:	bd80      	pop	{r7, pc}

0801561a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801561a:	b580      	push	{r7, lr}
 801561c:	b08a      	sub	sp, #40	; 0x28
 801561e:	af02      	add	r7, sp, #8
 8015620:	60f8      	str	r0, [r7, #12]
 8015622:	60b9      	str	r1, [r7, #8]
 8015624:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8015626:	2300      	movs	r3, #0
 8015628:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801562a:	f3ef 8305 	mrs	r3, IPSR
 801562e:	613b      	str	r3, [r7, #16]
  return(result);
 8015630:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8015632:	2b00      	cmp	r3, #0
 8015634:	d175      	bne.n	8015722 <osSemaphoreNew+0x108>
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	2b00      	cmp	r3, #0
 801563a:	d072      	beq.n	8015722 <osSemaphoreNew+0x108>
 801563c:	68ba      	ldr	r2, [r7, #8]
 801563e:	68fb      	ldr	r3, [r7, #12]
 8015640:	429a      	cmp	r2, r3
 8015642:	d86e      	bhi.n	8015722 <osSemaphoreNew+0x108>
    mem = -1;
 8015644:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015648:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	2b00      	cmp	r3, #0
 801564e:	d015      	beq.n	801567c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	689b      	ldr	r3, [r3, #8]
 8015654:	2b00      	cmp	r3, #0
 8015656:	d006      	beq.n	8015666 <osSemaphoreNew+0x4c>
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	68db      	ldr	r3, [r3, #12]
 801565c:	2b4f      	cmp	r3, #79	; 0x4f
 801565e:	d902      	bls.n	8015666 <osSemaphoreNew+0x4c>
        mem = 1;
 8015660:	2301      	movs	r3, #1
 8015662:	61bb      	str	r3, [r7, #24]
 8015664:	e00c      	b.n	8015680 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	689b      	ldr	r3, [r3, #8]
 801566a:	2b00      	cmp	r3, #0
 801566c:	d108      	bne.n	8015680 <osSemaphoreNew+0x66>
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	68db      	ldr	r3, [r3, #12]
 8015672:	2b00      	cmp	r3, #0
 8015674:	d104      	bne.n	8015680 <osSemaphoreNew+0x66>
          mem = 0;
 8015676:	2300      	movs	r3, #0
 8015678:	61bb      	str	r3, [r7, #24]
 801567a:	e001      	b.n	8015680 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 801567c:	2300      	movs	r3, #0
 801567e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8015680:	69bb      	ldr	r3, [r7, #24]
 8015682:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015686:	d04c      	beq.n	8015722 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	2b01      	cmp	r3, #1
 801568c:	d128      	bne.n	80156e0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 801568e:	69bb      	ldr	r3, [r7, #24]
 8015690:	2b01      	cmp	r3, #1
 8015692:	d10a      	bne.n	80156aa <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	689b      	ldr	r3, [r3, #8]
 8015698:	2203      	movs	r2, #3
 801569a:	9200      	str	r2, [sp, #0]
 801569c:	2200      	movs	r2, #0
 801569e:	2100      	movs	r1, #0
 80156a0:	2001      	movs	r0, #1
 80156a2:	f000 fa29 	bl	8015af8 <xQueueGenericCreateStatic>
 80156a6:	61f8      	str	r0, [r7, #28]
 80156a8:	e005      	b.n	80156b6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80156aa:	2203      	movs	r2, #3
 80156ac:	2100      	movs	r1, #0
 80156ae:	2001      	movs	r0, #1
 80156b0:	f000 fa9a 	bl	8015be8 <xQueueGenericCreate>
 80156b4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80156b6:	69fb      	ldr	r3, [r7, #28]
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d022      	beq.n	8015702 <osSemaphoreNew+0xe8>
 80156bc:	68bb      	ldr	r3, [r7, #8]
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d01f      	beq.n	8015702 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80156c2:	2300      	movs	r3, #0
 80156c4:	2200      	movs	r2, #0
 80156c6:	2100      	movs	r1, #0
 80156c8:	69f8      	ldr	r0, [r7, #28]
 80156ca:	f000 fb55 	bl	8015d78 <xQueueGenericSend>
 80156ce:	4603      	mov	r3, r0
 80156d0:	2b01      	cmp	r3, #1
 80156d2:	d016      	beq.n	8015702 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80156d4:	69f8      	ldr	r0, [r7, #28]
 80156d6:	f000 ffe1 	bl	801669c <vQueueDelete>
            hSemaphore = NULL;
 80156da:	2300      	movs	r3, #0
 80156dc:	61fb      	str	r3, [r7, #28]
 80156de:	e010      	b.n	8015702 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80156e0:	69bb      	ldr	r3, [r7, #24]
 80156e2:	2b01      	cmp	r3, #1
 80156e4:	d108      	bne.n	80156f8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	689b      	ldr	r3, [r3, #8]
 80156ea:	461a      	mov	r2, r3
 80156ec:	68b9      	ldr	r1, [r7, #8]
 80156ee:	68f8      	ldr	r0, [r7, #12]
 80156f0:	f000 fad7 	bl	8015ca2 <xQueueCreateCountingSemaphoreStatic>
 80156f4:	61f8      	str	r0, [r7, #28]
 80156f6:	e004      	b.n	8015702 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80156f8:	68b9      	ldr	r1, [r7, #8]
 80156fa:	68f8      	ldr	r0, [r7, #12]
 80156fc:	f000 fb08 	bl	8015d10 <xQueueCreateCountingSemaphore>
 8015700:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8015702:	69fb      	ldr	r3, [r7, #28]
 8015704:	2b00      	cmp	r3, #0
 8015706:	d00c      	beq.n	8015722 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	2b00      	cmp	r3, #0
 801570c:	d003      	beq.n	8015716 <osSemaphoreNew+0xfc>
          name = attr->name;
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	617b      	str	r3, [r7, #20]
 8015714:	e001      	b.n	801571a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8015716:	2300      	movs	r3, #0
 8015718:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801571a:	6979      	ldr	r1, [r7, #20]
 801571c:	69f8      	ldr	r0, [r7, #28]
 801571e:	f001 f909 	bl	8016934 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8015722:	69fb      	ldr	r3, [r7, #28]
}
 8015724:	4618      	mov	r0, r3
 8015726:	3720      	adds	r7, #32
 8015728:	46bd      	mov	sp, r7
 801572a:	bd80      	pop	{r7, pc}

0801572c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 801572c:	b580      	push	{r7, lr}
 801572e:	b086      	sub	sp, #24
 8015730:	af00      	add	r7, sp, #0
 8015732:	6078      	str	r0, [r7, #4]
 8015734:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801573a:	2300      	movs	r3, #0
 801573c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801573e:	693b      	ldr	r3, [r7, #16]
 8015740:	2b00      	cmp	r3, #0
 8015742:	d103      	bne.n	801574c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8015744:	f06f 0303 	mvn.w	r3, #3
 8015748:	617b      	str	r3, [r7, #20]
 801574a:	e039      	b.n	80157c0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801574c:	f3ef 8305 	mrs	r3, IPSR
 8015750:	60fb      	str	r3, [r7, #12]
  return(result);
 8015752:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015754:	2b00      	cmp	r3, #0
 8015756:	d022      	beq.n	801579e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8015758:	683b      	ldr	r3, [r7, #0]
 801575a:	2b00      	cmp	r3, #0
 801575c:	d003      	beq.n	8015766 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 801575e:	f06f 0303 	mvn.w	r3, #3
 8015762:	617b      	str	r3, [r7, #20]
 8015764:	e02c      	b.n	80157c0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8015766:	2300      	movs	r3, #0
 8015768:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801576a:	f107 0308 	add.w	r3, r7, #8
 801576e:	461a      	mov	r2, r3
 8015770:	2100      	movs	r1, #0
 8015772:	6938      	ldr	r0, [r7, #16]
 8015774:	f000 ff12 	bl	801659c <xQueueReceiveFromISR>
 8015778:	4603      	mov	r3, r0
 801577a:	2b01      	cmp	r3, #1
 801577c:	d003      	beq.n	8015786 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 801577e:	f06f 0302 	mvn.w	r3, #2
 8015782:	617b      	str	r3, [r7, #20]
 8015784:	e01c      	b.n	80157c0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8015786:	68bb      	ldr	r3, [r7, #8]
 8015788:	2b00      	cmp	r3, #0
 801578a:	d019      	beq.n	80157c0 <osSemaphoreAcquire+0x94>
 801578c:	4b0f      	ldr	r3, [pc, #60]	; (80157cc <osSemaphoreAcquire+0xa0>)
 801578e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015792:	601a      	str	r2, [r3, #0]
 8015794:	f3bf 8f4f 	dsb	sy
 8015798:	f3bf 8f6f 	isb	sy
 801579c:	e010      	b.n	80157c0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801579e:	6839      	ldr	r1, [r7, #0]
 80157a0:	6938      	ldr	r0, [r7, #16]
 80157a2:	f000 fdef 	bl	8016384 <xQueueSemaphoreTake>
 80157a6:	4603      	mov	r3, r0
 80157a8:	2b01      	cmp	r3, #1
 80157aa:	d009      	beq.n	80157c0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80157ac:	683b      	ldr	r3, [r7, #0]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d003      	beq.n	80157ba <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80157b2:	f06f 0301 	mvn.w	r3, #1
 80157b6:	617b      	str	r3, [r7, #20]
 80157b8:	e002      	b.n	80157c0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80157ba:	f06f 0302 	mvn.w	r3, #2
 80157be:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80157c0:	697b      	ldr	r3, [r7, #20]
}
 80157c2:	4618      	mov	r0, r3
 80157c4:	3718      	adds	r7, #24
 80157c6:	46bd      	mov	sp, r7
 80157c8:	bd80      	pop	{r7, pc}
 80157ca:	bf00      	nop
 80157cc:	e000ed04 	.word	0xe000ed04

080157d0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b086      	sub	sp, #24
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80157dc:	2300      	movs	r3, #0
 80157de:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80157e0:	693b      	ldr	r3, [r7, #16]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d103      	bne.n	80157ee <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80157e6:	f06f 0303 	mvn.w	r3, #3
 80157ea:	617b      	str	r3, [r7, #20]
 80157ec:	e02c      	b.n	8015848 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80157ee:	f3ef 8305 	mrs	r3, IPSR
 80157f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80157f4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d01a      	beq.n	8015830 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80157fa:	2300      	movs	r3, #0
 80157fc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80157fe:	f107 0308 	add.w	r3, r7, #8
 8015802:	4619      	mov	r1, r3
 8015804:	6938      	ldr	r0, [r7, #16]
 8015806:	f000 fc50 	bl	80160aa <xQueueGiveFromISR>
 801580a:	4603      	mov	r3, r0
 801580c:	2b01      	cmp	r3, #1
 801580e:	d003      	beq.n	8015818 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8015810:	f06f 0302 	mvn.w	r3, #2
 8015814:	617b      	str	r3, [r7, #20]
 8015816:	e017      	b.n	8015848 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8015818:	68bb      	ldr	r3, [r7, #8]
 801581a:	2b00      	cmp	r3, #0
 801581c:	d014      	beq.n	8015848 <osSemaphoreRelease+0x78>
 801581e:	4b0d      	ldr	r3, [pc, #52]	; (8015854 <osSemaphoreRelease+0x84>)
 8015820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015824:	601a      	str	r2, [r3, #0]
 8015826:	f3bf 8f4f 	dsb	sy
 801582a:	f3bf 8f6f 	isb	sy
 801582e:	e00b      	b.n	8015848 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015830:	2300      	movs	r3, #0
 8015832:	2200      	movs	r2, #0
 8015834:	2100      	movs	r1, #0
 8015836:	6938      	ldr	r0, [r7, #16]
 8015838:	f000 fa9e 	bl	8015d78 <xQueueGenericSend>
 801583c:	4603      	mov	r3, r0
 801583e:	2b01      	cmp	r3, #1
 8015840:	d002      	beq.n	8015848 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8015842:	f06f 0302 	mvn.w	r3, #2
 8015846:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8015848:	697b      	ldr	r3, [r7, #20]
}
 801584a:	4618      	mov	r0, r3
 801584c:	3718      	adds	r7, #24
 801584e:	46bd      	mov	sp, r7
 8015850:	bd80      	pop	{r7, pc}
 8015852:	bf00      	nop
 8015854:	e000ed04 	.word	0xe000ed04

08015858 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8015858:	b480      	push	{r7}
 801585a:	b085      	sub	sp, #20
 801585c:	af00      	add	r7, sp, #0
 801585e:	60f8      	str	r0, [r7, #12]
 8015860:	60b9      	str	r1, [r7, #8]
 8015862:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	4a07      	ldr	r2, [pc, #28]	; (8015884 <vApplicationGetIdleTaskMemory+0x2c>)
 8015868:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801586a:	68bb      	ldr	r3, [r7, #8]
 801586c:	4a06      	ldr	r2, [pc, #24]	; (8015888 <vApplicationGetIdleTaskMemory+0x30>)
 801586e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	2280      	movs	r2, #128	; 0x80
 8015874:	601a      	str	r2, [r3, #0]
}
 8015876:	bf00      	nop
 8015878:	3714      	adds	r7, #20
 801587a:	46bd      	mov	sp, r7
 801587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015880:	4770      	bx	lr
 8015882:	bf00      	nop
 8015884:	20001138 	.word	0x20001138
 8015888:	20001194 	.word	0x20001194

0801588c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801588c:	b480      	push	{r7}
 801588e:	b085      	sub	sp, #20
 8015890:	af00      	add	r7, sp, #0
 8015892:	60f8      	str	r0, [r7, #12]
 8015894:	60b9      	str	r1, [r7, #8]
 8015896:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	4a07      	ldr	r2, [pc, #28]	; (80158b8 <vApplicationGetTimerTaskMemory+0x2c>)
 801589c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801589e:	68bb      	ldr	r3, [r7, #8]
 80158a0:	4a06      	ldr	r2, [pc, #24]	; (80158bc <vApplicationGetTimerTaskMemory+0x30>)
 80158a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80158aa:	601a      	str	r2, [r3, #0]
}
 80158ac:	bf00      	nop
 80158ae:	3714      	adds	r7, #20
 80158b0:	46bd      	mov	sp, r7
 80158b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b6:	4770      	bx	lr
 80158b8:	20001394 	.word	0x20001394
 80158bc:	200013f0 	.word	0x200013f0

080158c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80158c0:	b480      	push	{r7}
 80158c2:	b083      	sub	sp, #12
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	f103 0208 	add.w	r2, r3, #8
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80158d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	f103 0208 	add.w	r2, r3, #8
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	f103 0208 	add.w	r2, r3, #8
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	2200      	movs	r2, #0
 80158f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80158f4:	bf00      	nop
 80158f6:	370c      	adds	r7, #12
 80158f8:	46bd      	mov	sp, r7
 80158fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158fe:	4770      	bx	lr

08015900 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015900:	b480      	push	{r7}
 8015902:	b083      	sub	sp, #12
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	2200      	movs	r2, #0
 801590c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801590e:	bf00      	nop
 8015910:	370c      	adds	r7, #12
 8015912:	46bd      	mov	sp, r7
 8015914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015918:	4770      	bx	lr

0801591a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801591a:	b480      	push	{r7}
 801591c:	b085      	sub	sp, #20
 801591e:	af00      	add	r7, sp, #0
 8015920:	6078      	str	r0, [r7, #4]
 8015922:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	685b      	ldr	r3, [r3, #4]
 8015928:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801592a:	683b      	ldr	r3, [r7, #0]
 801592c:	68fa      	ldr	r2, [r7, #12]
 801592e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	689a      	ldr	r2, [r3, #8]
 8015934:	683b      	ldr	r3, [r7, #0]
 8015936:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	689b      	ldr	r3, [r3, #8]
 801593c:	683a      	ldr	r2, [r7, #0]
 801593e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015940:	68fb      	ldr	r3, [r7, #12]
 8015942:	683a      	ldr	r2, [r7, #0]
 8015944:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015946:	683b      	ldr	r3, [r7, #0]
 8015948:	687a      	ldr	r2, [r7, #4]
 801594a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	1c5a      	adds	r2, r3, #1
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	601a      	str	r2, [r3, #0]
}
 8015956:	bf00      	nop
 8015958:	3714      	adds	r7, #20
 801595a:	46bd      	mov	sp, r7
 801595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015960:	4770      	bx	lr

08015962 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015962:	b480      	push	{r7}
 8015964:	b085      	sub	sp, #20
 8015966:	af00      	add	r7, sp, #0
 8015968:	6078      	str	r0, [r7, #4]
 801596a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801596c:	683b      	ldr	r3, [r7, #0]
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8015972:	68bb      	ldr	r3, [r7, #8]
 8015974:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015978:	d103      	bne.n	8015982 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	691b      	ldr	r3, [r3, #16]
 801597e:	60fb      	str	r3, [r7, #12]
 8015980:	e00c      	b.n	801599c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	3308      	adds	r3, #8
 8015986:	60fb      	str	r3, [r7, #12]
 8015988:	e002      	b.n	8015990 <vListInsert+0x2e>
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	685b      	ldr	r3, [r3, #4]
 801598e:	60fb      	str	r3, [r7, #12]
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	685b      	ldr	r3, [r3, #4]
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	68ba      	ldr	r2, [r7, #8]
 8015998:	429a      	cmp	r2, r3
 801599a:	d2f6      	bcs.n	801598a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	685a      	ldr	r2, [r3, #4]
 80159a0:	683b      	ldr	r3, [r7, #0]
 80159a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80159a4:	683b      	ldr	r3, [r7, #0]
 80159a6:	685b      	ldr	r3, [r3, #4]
 80159a8:	683a      	ldr	r2, [r7, #0]
 80159aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80159ac:	683b      	ldr	r3, [r7, #0]
 80159ae:	68fa      	ldr	r2, [r7, #12]
 80159b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	683a      	ldr	r2, [r7, #0]
 80159b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80159b8:	683b      	ldr	r3, [r7, #0]
 80159ba:	687a      	ldr	r2, [r7, #4]
 80159bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	1c5a      	adds	r2, r3, #1
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	601a      	str	r2, [r3, #0]
}
 80159c8:	bf00      	nop
 80159ca:	3714      	adds	r7, #20
 80159cc:	46bd      	mov	sp, r7
 80159ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159d2:	4770      	bx	lr

080159d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80159d4:	b480      	push	{r7}
 80159d6:	b085      	sub	sp, #20
 80159d8:	af00      	add	r7, sp, #0
 80159da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	691b      	ldr	r3, [r3, #16]
 80159e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	685b      	ldr	r3, [r3, #4]
 80159e6:	687a      	ldr	r2, [r7, #4]
 80159e8:	6892      	ldr	r2, [r2, #8]
 80159ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	689b      	ldr	r3, [r3, #8]
 80159f0:	687a      	ldr	r2, [r7, #4]
 80159f2:	6852      	ldr	r2, [r2, #4]
 80159f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	685b      	ldr	r3, [r3, #4]
 80159fa:	687a      	ldr	r2, [r7, #4]
 80159fc:	429a      	cmp	r2, r3
 80159fe:	d103      	bne.n	8015a08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	689a      	ldr	r2, [r3, #8]
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	2200      	movs	r2, #0
 8015a0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	681b      	ldr	r3, [r3, #0]
 8015a12:	1e5a      	subs	r2, r3, #1
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	681b      	ldr	r3, [r3, #0]
}
 8015a1c:	4618      	mov	r0, r3
 8015a1e:	3714      	adds	r7, #20
 8015a20:	46bd      	mov	sp, r7
 8015a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a26:	4770      	bx	lr

08015a28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015a28:	b580      	push	{r7, lr}
 8015a2a:	b084      	sub	sp, #16
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	6078      	str	r0, [r7, #4]
 8015a30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d10a      	bne.n	8015a52 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a40:	f383 8811 	msr	BASEPRI, r3
 8015a44:	f3bf 8f6f 	isb	sy
 8015a48:	f3bf 8f4f 	dsb	sy
 8015a4c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8015a4e:	bf00      	nop
 8015a50:	e7fe      	b.n	8015a50 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8015a52:	f002 fdbf 	bl	80185d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	681a      	ldr	r2, [r3, #0]
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015a5e:	68f9      	ldr	r1, [r7, #12]
 8015a60:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015a62:	fb01 f303 	mul.w	r3, r1, r3
 8015a66:	441a      	add	r2, r3
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	2200      	movs	r2, #0
 8015a70:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	681a      	ldr	r2, [r3, #0]
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	681a      	ldr	r2, [r3, #0]
 8015a7e:	68fb      	ldr	r3, [r7, #12]
 8015a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015a82:	3b01      	subs	r3, #1
 8015a84:	68f9      	ldr	r1, [r7, #12]
 8015a86:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015a88:	fb01 f303 	mul.w	r3, r1, r3
 8015a8c:	441a      	add	r2, r3
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	22ff      	movs	r2, #255	; 0xff
 8015a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	22ff      	movs	r2, #255	; 0xff
 8015a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8015aa2:	683b      	ldr	r3, [r7, #0]
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d114      	bne.n	8015ad2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	691b      	ldr	r3, [r3, #16]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d01a      	beq.n	8015ae6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	3310      	adds	r3, #16
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	f001 fd73 	bl	80175a0 <xTaskRemoveFromEventList>
 8015aba:	4603      	mov	r3, r0
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d012      	beq.n	8015ae6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015ac0:	4b0c      	ldr	r3, [pc, #48]	; (8015af4 <xQueueGenericReset+0xcc>)
 8015ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ac6:	601a      	str	r2, [r3, #0]
 8015ac8:	f3bf 8f4f 	dsb	sy
 8015acc:	f3bf 8f6f 	isb	sy
 8015ad0:	e009      	b.n	8015ae6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	3310      	adds	r3, #16
 8015ad6:	4618      	mov	r0, r3
 8015ad8:	f7ff fef2 	bl	80158c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	3324      	adds	r3, #36	; 0x24
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	f7ff feed 	bl	80158c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015ae6:	f002 fda5 	bl	8018634 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8015aea:	2301      	movs	r3, #1
}
 8015aec:	4618      	mov	r0, r3
 8015aee:	3710      	adds	r7, #16
 8015af0:	46bd      	mov	sp, r7
 8015af2:	bd80      	pop	{r7, pc}
 8015af4:	e000ed04 	.word	0xe000ed04

08015af8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015af8:	b580      	push	{r7, lr}
 8015afa:	b08e      	sub	sp, #56	; 0x38
 8015afc:	af02      	add	r7, sp, #8
 8015afe:	60f8      	str	r0, [r7, #12]
 8015b00:	60b9      	str	r1, [r7, #8]
 8015b02:	607a      	str	r2, [r7, #4]
 8015b04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d10a      	bne.n	8015b22 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8015b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b10:	f383 8811 	msr	BASEPRI, r3
 8015b14:	f3bf 8f6f 	isb	sy
 8015b18:	f3bf 8f4f 	dsb	sy
 8015b1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015b1e:	bf00      	nop
 8015b20:	e7fe      	b.n	8015b20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015b22:	683b      	ldr	r3, [r7, #0]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d10a      	bne.n	8015b3e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8015b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b2c:	f383 8811 	msr	BASEPRI, r3
 8015b30:	f3bf 8f6f 	isb	sy
 8015b34:	f3bf 8f4f 	dsb	sy
 8015b38:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015b3a:	bf00      	nop
 8015b3c:	e7fe      	b.n	8015b3c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d002      	beq.n	8015b4a <xQueueGenericCreateStatic+0x52>
 8015b44:	68bb      	ldr	r3, [r7, #8]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d001      	beq.n	8015b4e <xQueueGenericCreateStatic+0x56>
 8015b4a:	2301      	movs	r3, #1
 8015b4c:	e000      	b.n	8015b50 <xQueueGenericCreateStatic+0x58>
 8015b4e:	2300      	movs	r3, #0
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d10a      	bne.n	8015b6a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8015b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b58:	f383 8811 	msr	BASEPRI, r3
 8015b5c:	f3bf 8f6f 	isb	sy
 8015b60:	f3bf 8f4f 	dsb	sy
 8015b64:	623b      	str	r3, [r7, #32]
}
 8015b66:	bf00      	nop
 8015b68:	e7fe      	b.n	8015b68 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d102      	bne.n	8015b76 <xQueueGenericCreateStatic+0x7e>
 8015b70:	68bb      	ldr	r3, [r7, #8]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d101      	bne.n	8015b7a <xQueueGenericCreateStatic+0x82>
 8015b76:	2301      	movs	r3, #1
 8015b78:	e000      	b.n	8015b7c <xQueueGenericCreateStatic+0x84>
 8015b7a:	2300      	movs	r3, #0
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d10a      	bne.n	8015b96 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8015b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b84:	f383 8811 	msr	BASEPRI, r3
 8015b88:	f3bf 8f6f 	isb	sy
 8015b8c:	f3bf 8f4f 	dsb	sy
 8015b90:	61fb      	str	r3, [r7, #28]
}
 8015b92:	bf00      	nop
 8015b94:	e7fe      	b.n	8015b94 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015b96:	2350      	movs	r3, #80	; 0x50
 8015b98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8015b9a:	697b      	ldr	r3, [r7, #20]
 8015b9c:	2b50      	cmp	r3, #80	; 0x50
 8015b9e:	d00a      	beq.n	8015bb6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8015ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ba4:	f383 8811 	msr	BASEPRI, r3
 8015ba8:	f3bf 8f6f 	isb	sy
 8015bac:	f3bf 8f4f 	dsb	sy
 8015bb0:	61bb      	str	r3, [r7, #24]
}
 8015bb2:	bf00      	nop
 8015bb4:	e7fe      	b.n	8015bb4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015bb6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015bb8:	683b      	ldr	r3, [r7, #0]
 8015bba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8015bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d00d      	beq.n	8015bde <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bc4:	2201      	movs	r2, #1
 8015bc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015bca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8015bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bd0:	9300      	str	r3, [sp, #0]
 8015bd2:	4613      	mov	r3, r2
 8015bd4:	687a      	ldr	r2, [r7, #4]
 8015bd6:	68b9      	ldr	r1, [r7, #8]
 8015bd8:	68f8      	ldr	r0, [r7, #12]
 8015bda:	f000 f83f 	bl	8015c5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8015be0:	4618      	mov	r0, r3
 8015be2:	3730      	adds	r7, #48	; 0x30
 8015be4:	46bd      	mov	sp, r7
 8015be6:	bd80      	pop	{r7, pc}

08015be8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015be8:	b580      	push	{r7, lr}
 8015bea:	b08a      	sub	sp, #40	; 0x28
 8015bec:	af02      	add	r7, sp, #8
 8015bee:	60f8      	str	r0, [r7, #12]
 8015bf0:	60b9      	str	r1, [r7, #8]
 8015bf2:	4613      	mov	r3, r2
 8015bf4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d10a      	bne.n	8015c12 <xQueueGenericCreate+0x2a>
	__asm volatile
 8015bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c00:	f383 8811 	msr	BASEPRI, r3
 8015c04:	f3bf 8f6f 	isb	sy
 8015c08:	f3bf 8f4f 	dsb	sy
 8015c0c:	613b      	str	r3, [r7, #16]
}
 8015c0e:	bf00      	nop
 8015c10:	e7fe      	b.n	8015c10 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	68ba      	ldr	r2, [r7, #8]
 8015c16:	fb02 f303 	mul.w	r3, r2, r3
 8015c1a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015c1c:	69fb      	ldr	r3, [r7, #28]
 8015c1e:	3350      	adds	r3, #80	; 0x50
 8015c20:	4618      	mov	r0, r3
 8015c22:	f002 fdf9 	bl	8018818 <pvPortMalloc>
 8015c26:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015c28:	69bb      	ldr	r3, [r7, #24]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d011      	beq.n	8015c52 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8015c2e:	69bb      	ldr	r3, [r7, #24]
 8015c30:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015c32:	697b      	ldr	r3, [r7, #20]
 8015c34:	3350      	adds	r3, #80	; 0x50
 8015c36:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015c38:	69bb      	ldr	r3, [r7, #24]
 8015c3a:	2200      	movs	r2, #0
 8015c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015c40:	79fa      	ldrb	r2, [r7, #7]
 8015c42:	69bb      	ldr	r3, [r7, #24]
 8015c44:	9300      	str	r3, [sp, #0]
 8015c46:	4613      	mov	r3, r2
 8015c48:	697a      	ldr	r2, [r7, #20]
 8015c4a:	68b9      	ldr	r1, [r7, #8]
 8015c4c:	68f8      	ldr	r0, [r7, #12]
 8015c4e:	f000 f805 	bl	8015c5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015c52:	69bb      	ldr	r3, [r7, #24]
	}
 8015c54:	4618      	mov	r0, r3
 8015c56:	3720      	adds	r7, #32
 8015c58:	46bd      	mov	sp, r7
 8015c5a:	bd80      	pop	{r7, pc}

08015c5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015c5c:	b580      	push	{r7, lr}
 8015c5e:	b084      	sub	sp, #16
 8015c60:	af00      	add	r7, sp, #0
 8015c62:	60f8      	str	r0, [r7, #12]
 8015c64:	60b9      	str	r1, [r7, #8]
 8015c66:	607a      	str	r2, [r7, #4]
 8015c68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015c6a:	68bb      	ldr	r3, [r7, #8]
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d103      	bne.n	8015c78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015c70:	69bb      	ldr	r3, [r7, #24]
 8015c72:	69ba      	ldr	r2, [r7, #24]
 8015c74:	601a      	str	r2, [r3, #0]
 8015c76:	e002      	b.n	8015c7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015c78:	69bb      	ldr	r3, [r7, #24]
 8015c7a:	687a      	ldr	r2, [r7, #4]
 8015c7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015c7e:	69bb      	ldr	r3, [r7, #24]
 8015c80:	68fa      	ldr	r2, [r7, #12]
 8015c82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015c84:	69bb      	ldr	r3, [r7, #24]
 8015c86:	68ba      	ldr	r2, [r7, #8]
 8015c88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015c8a:	2101      	movs	r1, #1
 8015c8c:	69b8      	ldr	r0, [r7, #24]
 8015c8e:	f7ff fecb 	bl	8015a28 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8015c92:	69bb      	ldr	r3, [r7, #24]
 8015c94:	78fa      	ldrb	r2, [r7, #3]
 8015c96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8015c9a:	bf00      	nop
 8015c9c:	3710      	adds	r7, #16
 8015c9e:	46bd      	mov	sp, r7
 8015ca0:	bd80      	pop	{r7, pc}

08015ca2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8015ca2:	b580      	push	{r7, lr}
 8015ca4:	b08a      	sub	sp, #40	; 0x28
 8015ca6:	af02      	add	r7, sp, #8
 8015ca8:	60f8      	str	r0, [r7, #12]
 8015caa:	60b9      	str	r1, [r7, #8]
 8015cac:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d10a      	bne.n	8015cca <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8015cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cb8:	f383 8811 	msr	BASEPRI, r3
 8015cbc:	f3bf 8f6f 	isb	sy
 8015cc0:	f3bf 8f4f 	dsb	sy
 8015cc4:	61bb      	str	r3, [r7, #24]
}
 8015cc6:	bf00      	nop
 8015cc8:	e7fe      	b.n	8015cc8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015cca:	68ba      	ldr	r2, [r7, #8]
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	429a      	cmp	r2, r3
 8015cd0:	d90a      	bls.n	8015ce8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8015cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cd6:	f383 8811 	msr	BASEPRI, r3
 8015cda:	f3bf 8f6f 	isb	sy
 8015cde:	f3bf 8f4f 	dsb	sy
 8015ce2:	617b      	str	r3, [r7, #20]
}
 8015ce4:	bf00      	nop
 8015ce6:	e7fe      	b.n	8015ce6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015ce8:	2302      	movs	r3, #2
 8015cea:	9300      	str	r3, [sp, #0]
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	2200      	movs	r2, #0
 8015cf0:	2100      	movs	r1, #0
 8015cf2:	68f8      	ldr	r0, [r7, #12]
 8015cf4:	f7ff ff00 	bl	8015af8 <xQueueGenericCreateStatic>
 8015cf8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8015cfa:	69fb      	ldr	r3, [r7, #28]
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d002      	beq.n	8015d06 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015d00:	69fb      	ldr	r3, [r7, #28]
 8015d02:	68ba      	ldr	r2, [r7, #8]
 8015d04:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8015d06:	69fb      	ldr	r3, [r7, #28]
	}
 8015d08:	4618      	mov	r0, r3
 8015d0a:	3720      	adds	r7, #32
 8015d0c:	46bd      	mov	sp, r7
 8015d0e:	bd80      	pop	{r7, pc}

08015d10 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b086      	sub	sp, #24
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	6078      	str	r0, [r7, #4]
 8015d18:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d10a      	bne.n	8015d36 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8015d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d24:	f383 8811 	msr	BASEPRI, r3
 8015d28:	f3bf 8f6f 	isb	sy
 8015d2c:	f3bf 8f4f 	dsb	sy
 8015d30:	613b      	str	r3, [r7, #16]
}
 8015d32:	bf00      	nop
 8015d34:	e7fe      	b.n	8015d34 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015d36:	683a      	ldr	r2, [r7, #0]
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	429a      	cmp	r2, r3
 8015d3c:	d90a      	bls.n	8015d54 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8015d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d42:	f383 8811 	msr	BASEPRI, r3
 8015d46:	f3bf 8f6f 	isb	sy
 8015d4a:	f3bf 8f4f 	dsb	sy
 8015d4e:	60fb      	str	r3, [r7, #12]
}
 8015d50:	bf00      	nop
 8015d52:	e7fe      	b.n	8015d52 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015d54:	2202      	movs	r2, #2
 8015d56:	2100      	movs	r1, #0
 8015d58:	6878      	ldr	r0, [r7, #4]
 8015d5a:	f7ff ff45 	bl	8015be8 <xQueueGenericCreate>
 8015d5e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8015d60:	697b      	ldr	r3, [r7, #20]
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d002      	beq.n	8015d6c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015d66:	697b      	ldr	r3, [r7, #20]
 8015d68:	683a      	ldr	r2, [r7, #0]
 8015d6a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8015d6c:	697b      	ldr	r3, [r7, #20]
	}
 8015d6e:	4618      	mov	r0, r3
 8015d70:	3718      	adds	r7, #24
 8015d72:	46bd      	mov	sp, r7
 8015d74:	bd80      	pop	{r7, pc}
	...

08015d78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015d78:	b580      	push	{r7, lr}
 8015d7a:	b08e      	sub	sp, #56	; 0x38
 8015d7c:	af00      	add	r7, sp, #0
 8015d7e:	60f8      	str	r0, [r7, #12]
 8015d80:	60b9      	str	r1, [r7, #8]
 8015d82:	607a      	str	r2, [r7, #4]
 8015d84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8015d86:	2300      	movs	r3, #0
 8015d88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d10a      	bne.n	8015daa <xQueueGenericSend+0x32>
	__asm volatile
 8015d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d98:	f383 8811 	msr	BASEPRI, r3
 8015d9c:	f3bf 8f6f 	isb	sy
 8015da0:	f3bf 8f4f 	dsb	sy
 8015da4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015da6:	bf00      	nop
 8015da8:	e7fe      	b.n	8015da8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015daa:	68bb      	ldr	r3, [r7, #8]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d103      	bne.n	8015db8 <xQueueGenericSend+0x40>
 8015db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d101      	bne.n	8015dbc <xQueueGenericSend+0x44>
 8015db8:	2301      	movs	r3, #1
 8015dba:	e000      	b.n	8015dbe <xQueueGenericSend+0x46>
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d10a      	bne.n	8015dd8 <xQueueGenericSend+0x60>
	__asm volatile
 8015dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dc6:	f383 8811 	msr	BASEPRI, r3
 8015dca:	f3bf 8f6f 	isb	sy
 8015dce:	f3bf 8f4f 	dsb	sy
 8015dd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015dd4:	bf00      	nop
 8015dd6:	e7fe      	b.n	8015dd6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015dd8:	683b      	ldr	r3, [r7, #0]
 8015dda:	2b02      	cmp	r3, #2
 8015ddc:	d103      	bne.n	8015de6 <xQueueGenericSend+0x6e>
 8015dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015de2:	2b01      	cmp	r3, #1
 8015de4:	d101      	bne.n	8015dea <xQueueGenericSend+0x72>
 8015de6:	2301      	movs	r3, #1
 8015de8:	e000      	b.n	8015dec <xQueueGenericSend+0x74>
 8015dea:	2300      	movs	r3, #0
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d10a      	bne.n	8015e06 <xQueueGenericSend+0x8e>
	__asm volatile
 8015df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015df4:	f383 8811 	msr	BASEPRI, r3
 8015df8:	f3bf 8f6f 	isb	sy
 8015dfc:	f3bf 8f4f 	dsb	sy
 8015e00:	623b      	str	r3, [r7, #32]
}
 8015e02:	bf00      	nop
 8015e04:	e7fe      	b.n	8015e04 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015e06:	f001 fd89 	bl	801791c <xTaskGetSchedulerState>
 8015e0a:	4603      	mov	r3, r0
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d102      	bne.n	8015e16 <xQueueGenericSend+0x9e>
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d101      	bne.n	8015e1a <xQueueGenericSend+0xa2>
 8015e16:	2301      	movs	r3, #1
 8015e18:	e000      	b.n	8015e1c <xQueueGenericSend+0xa4>
 8015e1a:	2300      	movs	r3, #0
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d10a      	bne.n	8015e36 <xQueueGenericSend+0xbe>
	__asm volatile
 8015e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e24:	f383 8811 	msr	BASEPRI, r3
 8015e28:	f3bf 8f6f 	isb	sy
 8015e2c:	f3bf 8f4f 	dsb	sy
 8015e30:	61fb      	str	r3, [r7, #28]
}
 8015e32:	bf00      	nop
 8015e34:	e7fe      	b.n	8015e34 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015e36:	f002 fbcd 	bl	80185d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015e42:	429a      	cmp	r2, r3
 8015e44:	d302      	bcc.n	8015e4c <xQueueGenericSend+0xd4>
 8015e46:	683b      	ldr	r3, [r7, #0]
 8015e48:	2b02      	cmp	r3, #2
 8015e4a:	d129      	bne.n	8015ea0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015e4c:	683a      	ldr	r2, [r7, #0]
 8015e4e:	68b9      	ldr	r1, [r7, #8]
 8015e50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e52:	f000 fc5e 	bl	8016712 <prvCopyDataToQueue>
 8015e56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d010      	beq.n	8015e82 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e62:	3324      	adds	r3, #36	; 0x24
 8015e64:	4618      	mov	r0, r3
 8015e66:	f001 fb9b 	bl	80175a0 <xTaskRemoveFromEventList>
 8015e6a:	4603      	mov	r3, r0
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d013      	beq.n	8015e98 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015e70:	4b3f      	ldr	r3, [pc, #252]	; (8015f70 <xQueueGenericSend+0x1f8>)
 8015e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e76:	601a      	str	r2, [r3, #0]
 8015e78:	f3bf 8f4f 	dsb	sy
 8015e7c:	f3bf 8f6f 	isb	sy
 8015e80:	e00a      	b.n	8015e98 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d007      	beq.n	8015e98 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015e88:	4b39      	ldr	r3, [pc, #228]	; (8015f70 <xQueueGenericSend+0x1f8>)
 8015e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e8e:	601a      	str	r2, [r3, #0]
 8015e90:	f3bf 8f4f 	dsb	sy
 8015e94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015e98:	f002 fbcc 	bl	8018634 <vPortExitCritical>
				return pdPASS;
 8015e9c:	2301      	movs	r3, #1
 8015e9e:	e063      	b.n	8015f68 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d103      	bne.n	8015eae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015ea6:	f002 fbc5 	bl	8018634 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015eaa:	2300      	movs	r3, #0
 8015eac:	e05c      	b.n	8015f68 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d106      	bne.n	8015ec2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015eb4:	f107 0314 	add.w	r3, r7, #20
 8015eb8:	4618      	mov	r0, r3
 8015eba:	f001 fbd5 	bl	8017668 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015ebe:	2301      	movs	r3, #1
 8015ec0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015ec2:	f002 fbb7 	bl	8018634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015ec6:	f001 f947 	bl	8017158 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015eca:	f002 fb83 	bl	80185d4 <vPortEnterCritical>
 8015ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ed0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015ed4:	b25b      	sxtb	r3, r3
 8015ed6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015eda:	d103      	bne.n	8015ee4 <xQueueGenericSend+0x16c>
 8015edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ede:	2200      	movs	r2, #0
 8015ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ee6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015eea:	b25b      	sxtb	r3, r3
 8015eec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015ef0:	d103      	bne.n	8015efa <xQueueGenericSend+0x182>
 8015ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ef4:	2200      	movs	r2, #0
 8015ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015efa:	f002 fb9b 	bl	8018634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015efe:	1d3a      	adds	r2, r7, #4
 8015f00:	f107 0314 	add.w	r3, r7, #20
 8015f04:	4611      	mov	r1, r2
 8015f06:	4618      	mov	r0, r3
 8015f08:	f001 fbc4 	bl	8017694 <xTaskCheckForTimeOut>
 8015f0c:	4603      	mov	r3, r0
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d124      	bne.n	8015f5c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015f12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f14:	f000 fcf5 	bl	8016902 <prvIsQueueFull>
 8015f18:	4603      	mov	r3, r0
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d018      	beq.n	8015f50 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f20:	3310      	adds	r3, #16
 8015f22:	687a      	ldr	r2, [r7, #4]
 8015f24:	4611      	mov	r1, r2
 8015f26:	4618      	mov	r0, r3
 8015f28:	f001 faea 	bl	8017500 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015f2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f2e:	f000 fc80 	bl	8016832 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015f32:	f001 f91f 	bl	8017174 <xTaskResumeAll>
 8015f36:	4603      	mov	r3, r0
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	f47f af7c 	bne.w	8015e36 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8015f3e:	4b0c      	ldr	r3, [pc, #48]	; (8015f70 <xQueueGenericSend+0x1f8>)
 8015f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015f44:	601a      	str	r2, [r3, #0]
 8015f46:	f3bf 8f4f 	dsb	sy
 8015f4a:	f3bf 8f6f 	isb	sy
 8015f4e:	e772      	b.n	8015e36 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f52:	f000 fc6e 	bl	8016832 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015f56:	f001 f90d 	bl	8017174 <xTaskResumeAll>
 8015f5a:	e76c      	b.n	8015e36 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015f5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f5e:	f000 fc68 	bl	8016832 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015f62:	f001 f907 	bl	8017174 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015f66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015f68:	4618      	mov	r0, r3
 8015f6a:	3738      	adds	r7, #56	; 0x38
 8015f6c:	46bd      	mov	sp, r7
 8015f6e:	bd80      	pop	{r7, pc}
 8015f70:	e000ed04 	.word	0xe000ed04

08015f74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015f74:	b580      	push	{r7, lr}
 8015f76:	b090      	sub	sp, #64	; 0x40
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	60f8      	str	r0, [r7, #12]
 8015f7c:	60b9      	str	r1, [r7, #8]
 8015f7e:	607a      	str	r2, [r7, #4]
 8015f80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8015f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d10a      	bne.n	8015fa2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8015f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f90:	f383 8811 	msr	BASEPRI, r3
 8015f94:	f3bf 8f6f 	isb	sy
 8015f98:	f3bf 8f4f 	dsb	sy
 8015f9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015f9e:	bf00      	nop
 8015fa0:	e7fe      	b.n	8015fa0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015fa2:	68bb      	ldr	r3, [r7, #8]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d103      	bne.n	8015fb0 <xQueueGenericSendFromISR+0x3c>
 8015fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d101      	bne.n	8015fb4 <xQueueGenericSendFromISR+0x40>
 8015fb0:	2301      	movs	r3, #1
 8015fb2:	e000      	b.n	8015fb6 <xQueueGenericSendFromISR+0x42>
 8015fb4:	2300      	movs	r3, #0
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d10a      	bne.n	8015fd0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8015fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fbe:	f383 8811 	msr	BASEPRI, r3
 8015fc2:	f3bf 8f6f 	isb	sy
 8015fc6:	f3bf 8f4f 	dsb	sy
 8015fca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015fcc:	bf00      	nop
 8015fce:	e7fe      	b.n	8015fce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015fd0:	683b      	ldr	r3, [r7, #0]
 8015fd2:	2b02      	cmp	r3, #2
 8015fd4:	d103      	bne.n	8015fde <xQueueGenericSendFromISR+0x6a>
 8015fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015fda:	2b01      	cmp	r3, #1
 8015fdc:	d101      	bne.n	8015fe2 <xQueueGenericSendFromISR+0x6e>
 8015fde:	2301      	movs	r3, #1
 8015fe0:	e000      	b.n	8015fe4 <xQueueGenericSendFromISR+0x70>
 8015fe2:	2300      	movs	r3, #0
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d10a      	bne.n	8015ffe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8015fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fec:	f383 8811 	msr	BASEPRI, r3
 8015ff0:	f3bf 8f6f 	isb	sy
 8015ff4:	f3bf 8f4f 	dsb	sy
 8015ff8:	623b      	str	r3, [r7, #32]
}
 8015ffa:	bf00      	nop
 8015ffc:	e7fe      	b.n	8015ffc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015ffe:	f002 fbcb 	bl	8018798 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016002:	f3ef 8211 	mrs	r2, BASEPRI
 8016006:	f04f 0350 	mov.w	r3, #80	; 0x50
 801600a:	f383 8811 	msr	BASEPRI, r3
 801600e:	f3bf 8f6f 	isb	sy
 8016012:	f3bf 8f4f 	dsb	sy
 8016016:	61fa      	str	r2, [r7, #28]
 8016018:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801601a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801601c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801601e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016026:	429a      	cmp	r2, r3
 8016028:	d302      	bcc.n	8016030 <xQueueGenericSendFromISR+0xbc>
 801602a:	683b      	ldr	r3, [r7, #0]
 801602c:	2b02      	cmp	r3, #2
 801602e:	d12f      	bne.n	8016090 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016032:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801603a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801603c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801603e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016040:	683a      	ldr	r2, [r7, #0]
 8016042:	68b9      	ldr	r1, [r7, #8]
 8016044:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016046:	f000 fb64 	bl	8016712 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801604a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801604e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016052:	d112      	bne.n	801607a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016058:	2b00      	cmp	r3, #0
 801605a:	d016      	beq.n	801608a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801605c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801605e:	3324      	adds	r3, #36	; 0x24
 8016060:	4618      	mov	r0, r3
 8016062:	f001 fa9d 	bl	80175a0 <xTaskRemoveFromEventList>
 8016066:	4603      	mov	r3, r0
 8016068:	2b00      	cmp	r3, #0
 801606a:	d00e      	beq.n	801608a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	2b00      	cmp	r3, #0
 8016070:	d00b      	beq.n	801608a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	2201      	movs	r2, #1
 8016076:	601a      	str	r2, [r3, #0]
 8016078:	e007      	b.n	801608a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801607a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801607e:	3301      	adds	r3, #1
 8016080:	b2db      	uxtb	r3, r3
 8016082:	b25a      	sxtb	r2, r3
 8016084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801608a:	2301      	movs	r3, #1
 801608c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801608e:	e001      	b.n	8016094 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016090:	2300      	movs	r3, #0
 8016092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016096:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8016098:	697b      	ldr	r3, [r7, #20]
 801609a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801609e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80160a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80160a2:	4618      	mov	r0, r3
 80160a4:	3740      	adds	r7, #64	; 0x40
 80160a6:	46bd      	mov	sp, r7
 80160a8:	bd80      	pop	{r7, pc}

080160aa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80160aa:	b580      	push	{r7, lr}
 80160ac:	b08e      	sub	sp, #56	; 0x38
 80160ae:	af00      	add	r7, sp, #0
 80160b0:	6078      	str	r0, [r7, #4]
 80160b2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80160b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d10a      	bne.n	80160d4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80160be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160c2:	f383 8811 	msr	BASEPRI, r3
 80160c6:	f3bf 8f6f 	isb	sy
 80160ca:	f3bf 8f4f 	dsb	sy
 80160ce:	623b      	str	r3, [r7, #32]
}
 80160d0:	bf00      	nop
 80160d2:	e7fe      	b.n	80160d2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80160d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d00a      	beq.n	80160f2 <xQueueGiveFromISR+0x48>
	__asm volatile
 80160dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160e0:	f383 8811 	msr	BASEPRI, r3
 80160e4:	f3bf 8f6f 	isb	sy
 80160e8:	f3bf 8f4f 	dsb	sy
 80160ec:	61fb      	str	r3, [r7, #28]
}
 80160ee:	bf00      	nop
 80160f0:	e7fe      	b.n	80160f0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80160f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160f4:	681b      	ldr	r3, [r3, #0]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d103      	bne.n	8016102 <xQueueGiveFromISR+0x58>
 80160fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160fc:	689b      	ldr	r3, [r3, #8]
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d101      	bne.n	8016106 <xQueueGiveFromISR+0x5c>
 8016102:	2301      	movs	r3, #1
 8016104:	e000      	b.n	8016108 <xQueueGiveFromISR+0x5e>
 8016106:	2300      	movs	r3, #0
 8016108:	2b00      	cmp	r3, #0
 801610a:	d10a      	bne.n	8016122 <xQueueGiveFromISR+0x78>
	__asm volatile
 801610c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016110:	f383 8811 	msr	BASEPRI, r3
 8016114:	f3bf 8f6f 	isb	sy
 8016118:	f3bf 8f4f 	dsb	sy
 801611c:	61bb      	str	r3, [r7, #24]
}
 801611e:	bf00      	nop
 8016120:	e7fe      	b.n	8016120 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016122:	f002 fb39 	bl	8018798 <vPortValidateInterruptPriority>
	__asm volatile
 8016126:	f3ef 8211 	mrs	r2, BASEPRI
 801612a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801612e:	f383 8811 	msr	BASEPRI, r3
 8016132:	f3bf 8f6f 	isb	sy
 8016136:	f3bf 8f4f 	dsb	sy
 801613a:	617a      	str	r2, [r7, #20]
 801613c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801613e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016140:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016146:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8016148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801614a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801614c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801614e:	429a      	cmp	r2, r3
 8016150:	d22b      	bcs.n	80161aa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016154:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801615c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801615e:	1c5a      	adds	r2, r3, #1
 8016160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016162:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016164:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016168:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801616c:	d112      	bne.n	8016194 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801616e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016172:	2b00      	cmp	r3, #0
 8016174:	d016      	beq.n	80161a4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016178:	3324      	adds	r3, #36	; 0x24
 801617a:	4618      	mov	r0, r3
 801617c:	f001 fa10 	bl	80175a0 <xTaskRemoveFromEventList>
 8016180:	4603      	mov	r3, r0
 8016182:	2b00      	cmp	r3, #0
 8016184:	d00e      	beq.n	80161a4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016186:	683b      	ldr	r3, [r7, #0]
 8016188:	2b00      	cmp	r3, #0
 801618a:	d00b      	beq.n	80161a4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801618c:	683b      	ldr	r3, [r7, #0]
 801618e:	2201      	movs	r2, #1
 8016190:	601a      	str	r2, [r3, #0]
 8016192:	e007      	b.n	80161a4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016198:	3301      	adds	r3, #1
 801619a:	b2db      	uxtb	r3, r3
 801619c:	b25a      	sxtb	r2, r3
 801619e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80161a4:	2301      	movs	r3, #1
 80161a6:	637b      	str	r3, [r7, #52]	; 0x34
 80161a8:	e001      	b.n	80161ae <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80161aa:	2300      	movs	r3, #0
 80161ac:	637b      	str	r3, [r7, #52]	; 0x34
 80161ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161b0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	f383 8811 	msr	BASEPRI, r3
}
 80161b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80161ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80161bc:	4618      	mov	r0, r3
 80161be:	3738      	adds	r7, #56	; 0x38
 80161c0:	46bd      	mov	sp, r7
 80161c2:	bd80      	pop	{r7, pc}

080161c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80161c4:	b580      	push	{r7, lr}
 80161c6:	b08c      	sub	sp, #48	; 0x30
 80161c8:	af00      	add	r7, sp, #0
 80161ca:	60f8      	str	r0, [r7, #12]
 80161cc:	60b9      	str	r1, [r7, #8]
 80161ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80161d0:	2300      	movs	r3, #0
 80161d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80161d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d10a      	bne.n	80161f4 <xQueueReceive+0x30>
	__asm volatile
 80161de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161e2:	f383 8811 	msr	BASEPRI, r3
 80161e6:	f3bf 8f6f 	isb	sy
 80161ea:	f3bf 8f4f 	dsb	sy
 80161ee:	623b      	str	r3, [r7, #32]
}
 80161f0:	bf00      	nop
 80161f2:	e7fe      	b.n	80161f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80161f4:	68bb      	ldr	r3, [r7, #8]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d103      	bne.n	8016202 <xQueueReceive+0x3e>
 80161fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d101      	bne.n	8016206 <xQueueReceive+0x42>
 8016202:	2301      	movs	r3, #1
 8016204:	e000      	b.n	8016208 <xQueueReceive+0x44>
 8016206:	2300      	movs	r3, #0
 8016208:	2b00      	cmp	r3, #0
 801620a:	d10a      	bne.n	8016222 <xQueueReceive+0x5e>
	__asm volatile
 801620c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016210:	f383 8811 	msr	BASEPRI, r3
 8016214:	f3bf 8f6f 	isb	sy
 8016218:	f3bf 8f4f 	dsb	sy
 801621c:	61fb      	str	r3, [r7, #28]
}
 801621e:	bf00      	nop
 8016220:	e7fe      	b.n	8016220 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016222:	f001 fb7b 	bl	801791c <xTaskGetSchedulerState>
 8016226:	4603      	mov	r3, r0
 8016228:	2b00      	cmp	r3, #0
 801622a:	d102      	bne.n	8016232 <xQueueReceive+0x6e>
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	2b00      	cmp	r3, #0
 8016230:	d101      	bne.n	8016236 <xQueueReceive+0x72>
 8016232:	2301      	movs	r3, #1
 8016234:	e000      	b.n	8016238 <xQueueReceive+0x74>
 8016236:	2300      	movs	r3, #0
 8016238:	2b00      	cmp	r3, #0
 801623a:	d10a      	bne.n	8016252 <xQueueReceive+0x8e>
	__asm volatile
 801623c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016240:	f383 8811 	msr	BASEPRI, r3
 8016244:	f3bf 8f6f 	isb	sy
 8016248:	f3bf 8f4f 	dsb	sy
 801624c:	61bb      	str	r3, [r7, #24]
}
 801624e:	bf00      	nop
 8016250:	e7fe      	b.n	8016250 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016252:	f002 f9bf 	bl	80185d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801625a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801625e:	2b00      	cmp	r3, #0
 8016260:	d01f      	beq.n	80162a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016262:	68b9      	ldr	r1, [r7, #8]
 8016264:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016266:	f000 fabe 	bl	80167e6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801626c:	1e5a      	subs	r2, r3, #1
 801626e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016270:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016274:	691b      	ldr	r3, [r3, #16]
 8016276:	2b00      	cmp	r3, #0
 8016278:	d00f      	beq.n	801629a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801627c:	3310      	adds	r3, #16
 801627e:	4618      	mov	r0, r3
 8016280:	f001 f98e 	bl	80175a0 <xTaskRemoveFromEventList>
 8016284:	4603      	mov	r3, r0
 8016286:	2b00      	cmp	r3, #0
 8016288:	d007      	beq.n	801629a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801628a:	4b3d      	ldr	r3, [pc, #244]	; (8016380 <xQueueReceive+0x1bc>)
 801628c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016290:	601a      	str	r2, [r3, #0]
 8016292:	f3bf 8f4f 	dsb	sy
 8016296:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801629a:	f002 f9cb 	bl	8018634 <vPortExitCritical>
				return pdPASS;
 801629e:	2301      	movs	r3, #1
 80162a0:	e069      	b.n	8016376 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d103      	bne.n	80162b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80162a8:	f002 f9c4 	bl	8018634 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80162ac:	2300      	movs	r3, #0
 80162ae:	e062      	b.n	8016376 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80162b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d106      	bne.n	80162c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80162b6:	f107 0310 	add.w	r3, r7, #16
 80162ba:	4618      	mov	r0, r3
 80162bc:	f001 f9d4 	bl	8017668 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80162c0:	2301      	movs	r3, #1
 80162c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80162c4:	f002 f9b6 	bl	8018634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80162c8:	f000 ff46 	bl	8017158 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80162cc:	f002 f982 	bl	80185d4 <vPortEnterCritical>
 80162d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80162d6:	b25b      	sxtb	r3, r3
 80162d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80162dc:	d103      	bne.n	80162e6 <xQueueReceive+0x122>
 80162de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162e0:	2200      	movs	r2, #0
 80162e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80162e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80162ec:	b25b      	sxtb	r3, r3
 80162ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80162f2:	d103      	bne.n	80162fc <xQueueReceive+0x138>
 80162f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162f6:	2200      	movs	r2, #0
 80162f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80162fc:	f002 f99a 	bl	8018634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016300:	1d3a      	adds	r2, r7, #4
 8016302:	f107 0310 	add.w	r3, r7, #16
 8016306:	4611      	mov	r1, r2
 8016308:	4618      	mov	r0, r3
 801630a:	f001 f9c3 	bl	8017694 <xTaskCheckForTimeOut>
 801630e:	4603      	mov	r3, r0
 8016310:	2b00      	cmp	r3, #0
 8016312:	d123      	bne.n	801635c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016316:	f000 fade 	bl	80168d6 <prvIsQueueEmpty>
 801631a:	4603      	mov	r3, r0
 801631c:	2b00      	cmp	r3, #0
 801631e:	d017      	beq.n	8016350 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016322:	3324      	adds	r3, #36	; 0x24
 8016324:	687a      	ldr	r2, [r7, #4]
 8016326:	4611      	mov	r1, r2
 8016328:	4618      	mov	r0, r3
 801632a:	f001 f8e9 	bl	8017500 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801632e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016330:	f000 fa7f 	bl	8016832 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016334:	f000 ff1e 	bl	8017174 <xTaskResumeAll>
 8016338:	4603      	mov	r3, r0
 801633a:	2b00      	cmp	r3, #0
 801633c:	d189      	bne.n	8016252 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801633e:	4b10      	ldr	r3, [pc, #64]	; (8016380 <xQueueReceive+0x1bc>)
 8016340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016344:	601a      	str	r2, [r3, #0]
 8016346:	f3bf 8f4f 	dsb	sy
 801634a:	f3bf 8f6f 	isb	sy
 801634e:	e780      	b.n	8016252 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016352:	f000 fa6e 	bl	8016832 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016356:	f000 ff0d 	bl	8017174 <xTaskResumeAll>
 801635a:	e77a      	b.n	8016252 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801635c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801635e:	f000 fa68 	bl	8016832 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016362:	f000 ff07 	bl	8017174 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016368:	f000 fab5 	bl	80168d6 <prvIsQueueEmpty>
 801636c:	4603      	mov	r3, r0
 801636e:	2b00      	cmp	r3, #0
 8016370:	f43f af6f 	beq.w	8016252 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016374:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016376:	4618      	mov	r0, r3
 8016378:	3730      	adds	r7, #48	; 0x30
 801637a:	46bd      	mov	sp, r7
 801637c:	bd80      	pop	{r7, pc}
 801637e:	bf00      	nop
 8016380:	e000ed04 	.word	0xe000ed04

08016384 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8016384:	b580      	push	{r7, lr}
 8016386:	b08e      	sub	sp, #56	; 0x38
 8016388:	af00      	add	r7, sp, #0
 801638a:	6078      	str	r0, [r7, #4]
 801638c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801638e:	2300      	movs	r3, #0
 8016390:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8016396:	2300      	movs	r3, #0
 8016398:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801639a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801639c:	2b00      	cmp	r3, #0
 801639e:	d10a      	bne.n	80163b6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80163a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163a4:	f383 8811 	msr	BASEPRI, r3
 80163a8:	f3bf 8f6f 	isb	sy
 80163ac:	f3bf 8f4f 	dsb	sy
 80163b0:	623b      	str	r3, [r7, #32]
}
 80163b2:	bf00      	nop
 80163b4:	e7fe      	b.n	80163b4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80163b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d00a      	beq.n	80163d4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80163be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163c2:	f383 8811 	msr	BASEPRI, r3
 80163c6:	f3bf 8f6f 	isb	sy
 80163ca:	f3bf 8f4f 	dsb	sy
 80163ce:	61fb      	str	r3, [r7, #28]
}
 80163d0:	bf00      	nop
 80163d2:	e7fe      	b.n	80163d2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80163d4:	f001 faa2 	bl	801791c <xTaskGetSchedulerState>
 80163d8:	4603      	mov	r3, r0
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d102      	bne.n	80163e4 <xQueueSemaphoreTake+0x60>
 80163de:	683b      	ldr	r3, [r7, #0]
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d101      	bne.n	80163e8 <xQueueSemaphoreTake+0x64>
 80163e4:	2301      	movs	r3, #1
 80163e6:	e000      	b.n	80163ea <xQueueSemaphoreTake+0x66>
 80163e8:	2300      	movs	r3, #0
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d10a      	bne.n	8016404 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80163ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163f2:	f383 8811 	msr	BASEPRI, r3
 80163f6:	f3bf 8f6f 	isb	sy
 80163fa:	f3bf 8f4f 	dsb	sy
 80163fe:	61bb      	str	r3, [r7, #24]
}
 8016400:	bf00      	nop
 8016402:	e7fe      	b.n	8016402 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016404:	f002 f8e6 	bl	80185d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8016408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801640a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801640c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801640e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016410:	2b00      	cmp	r3, #0
 8016412:	d024      	beq.n	801645e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8016414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016416:	1e5a      	subs	r2, r3, #1
 8016418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801641a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801641c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	2b00      	cmp	r3, #0
 8016422:	d104      	bne.n	801642e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8016424:	f001 fbf0 	bl	8017c08 <pvTaskIncrementMutexHeldCount>
 8016428:	4602      	mov	r2, r0
 801642a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801642c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801642e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016430:	691b      	ldr	r3, [r3, #16]
 8016432:	2b00      	cmp	r3, #0
 8016434:	d00f      	beq.n	8016456 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016438:	3310      	adds	r3, #16
 801643a:	4618      	mov	r0, r3
 801643c:	f001 f8b0 	bl	80175a0 <xTaskRemoveFromEventList>
 8016440:	4603      	mov	r3, r0
 8016442:	2b00      	cmp	r3, #0
 8016444:	d007      	beq.n	8016456 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016446:	4b54      	ldr	r3, [pc, #336]	; (8016598 <xQueueSemaphoreTake+0x214>)
 8016448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801644c:	601a      	str	r2, [r3, #0]
 801644e:	f3bf 8f4f 	dsb	sy
 8016452:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016456:	f002 f8ed 	bl	8018634 <vPortExitCritical>
				return pdPASS;
 801645a:	2301      	movs	r3, #1
 801645c:	e097      	b.n	801658e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801645e:	683b      	ldr	r3, [r7, #0]
 8016460:	2b00      	cmp	r3, #0
 8016462:	d111      	bne.n	8016488 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8016464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016466:	2b00      	cmp	r3, #0
 8016468:	d00a      	beq.n	8016480 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801646a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801646e:	f383 8811 	msr	BASEPRI, r3
 8016472:	f3bf 8f6f 	isb	sy
 8016476:	f3bf 8f4f 	dsb	sy
 801647a:	617b      	str	r3, [r7, #20]
}
 801647c:	bf00      	nop
 801647e:	e7fe      	b.n	801647e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8016480:	f002 f8d8 	bl	8018634 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016484:	2300      	movs	r3, #0
 8016486:	e082      	b.n	801658e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801648a:	2b00      	cmp	r3, #0
 801648c:	d106      	bne.n	801649c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801648e:	f107 030c 	add.w	r3, r7, #12
 8016492:	4618      	mov	r0, r3
 8016494:	f001 f8e8 	bl	8017668 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016498:	2301      	movs	r3, #1
 801649a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801649c:	f002 f8ca 	bl	8018634 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80164a0:	f000 fe5a 	bl	8017158 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80164a4:	f002 f896 	bl	80185d4 <vPortEnterCritical>
 80164a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80164ae:	b25b      	sxtb	r3, r3
 80164b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80164b4:	d103      	bne.n	80164be <xQueueSemaphoreTake+0x13a>
 80164b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164b8:	2200      	movs	r2, #0
 80164ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80164be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80164c4:	b25b      	sxtb	r3, r3
 80164c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80164ca:	d103      	bne.n	80164d4 <xQueueSemaphoreTake+0x150>
 80164cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164ce:	2200      	movs	r2, #0
 80164d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80164d4:	f002 f8ae 	bl	8018634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80164d8:	463a      	mov	r2, r7
 80164da:	f107 030c 	add.w	r3, r7, #12
 80164de:	4611      	mov	r1, r2
 80164e0:	4618      	mov	r0, r3
 80164e2:	f001 f8d7 	bl	8017694 <xTaskCheckForTimeOut>
 80164e6:	4603      	mov	r3, r0
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d132      	bne.n	8016552 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80164ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80164ee:	f000 f9f2 	bl	80168d6 <prvIsQueueEmpty>
 80164f2:	4603      	mov	r3, r0
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d026      	beq.n	8016546 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80164f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d109      	bne.n	8016514 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8016500:	f002 f868 	bl	80185d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016506:	689b      	ldr	r3, [r3, #8]
 8016508:	4618      	mov	r0, r3
 801650a:	f001 fa25 	bl	8017958 <xTaskPriorityInherit>
 801650e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8016510:	f002 f890 	bl	8018634 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016516:	3324      	adds	r3, #36	; 0x24
 8016518:	683a      	ldr	r2, [r7, #0]
 801651a:	4611      	mov	r1, r2
 801651c:	4618      	mov	r0, r3
 801651e:	f000 ffef 	bl	8017500 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016522:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016524:	f000 f985 	bl	8016832 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016528:	f000 fe24 	bl	8017174 <xTaskResumeAll>
 801652c:	4603      	mov	r3, r0
 801652e:	2b00      	cmp	r3, #0
 8016530:	f47f af68 	bne.w	8016404 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8016534:	4b18      	ldr	r3, [pc, #96]	; (8016598 <xQueueSemaphoreTake+0x214>)
 8016536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801653a:	601a      	str	r2, [r3, #0]
 801653c:	f3bf 8f4f 	dsb	sy
 8016540:	f3bf 8f6f 	isb	sy
 8016544:	e75e      	b.n	8016404 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8016546:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016548:	f000 f973 	bl	8016832 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801654c:	f000 fe12 	bl	8017174 <xTaskResumeAll>
 8016550:	e758      	b.n	8016404 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8016552:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016554:	f000 f96d 	bl	8016832 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016558:	f000 fe0c 	bl	8017174 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801655c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801655e:	f000 f9ba 	bl	80168d6 <prvIsQueueEmpty>
 8016562:	4603      	mov	r3, r0
 8016564:	2b00      	cmp	r3, #0
 8016566:	f43f af4d 	beq.w	8016404 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801656a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801656c:	2b00      	cmp	r3, #0
 801656e:	d00d      	beq.n	801658c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8016570:	f002 f830 	bl	80185d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8016574:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016576:	f000 f8b4 	bl	80166e2 <prvGetDisinheritPriorityAfterTimeout>
 801657a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801657c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801657e:	689b      	ldr	r3, [r3, #8]
 8016580:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016582:	4618      	mov	r0, r3
 8016584:	f001 fabe 	bl	8017b04 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8016588:	f002 f854 	bl	8018634 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801658c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801658e:	4618      	mov	r0, r3
 8016590:	3738      	adds	r7, #56	; 0x38
 8016592:	46bd      	mov	sp, r7
 8016594:	bd80      	pop	{r7, pc}
 8016596:	bf00      	nop
 8016598:	e000ed04 	.word	0xe000ed04

0801659c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801659c:	b580      	push	{r7, lr}
 801659e:	b08e      	sub	sp, #56	; 0x38
 80165a0:	af00      	add	r7, sp, #0
 80165a2:	60f8      	str	r0, [r7, #12]
 80165a4:	60b9      	str	r1, [r7, #8]
 80165a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80165ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d10a      	bne.n	80165c8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80165b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165b6:	f383 8811 	msr	BASEPRI, r3
 80165ba:	f3bf 8f6f 	isb	sy
 80165be:	f3bf 8f4f 	dsb	sy
 80165c2:	623b      	str	r3, [r7, #32]
}
 80165c4:	bf00      	nop
 80165c6:	e7fe      	b.n	80165c6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80165c8:	68bb      	ldr	r3, [r7, #8]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d103      	bne.n	80165d6 <xQueueReceiveFromISR+0x3a>
 80165ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	d101      	bne.n	80165da <xQueueReceiveFromISR+0x3e>
 80165d6:	2301      	movs	r3, #1
 80165d8:	e000      	b.n	80165dc <xQueueReceiveFromISR+0x40>
 80165da:	2300      	movs	r3, #0
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d10a      	bne.n	80165f6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80165e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165e4:	f383 8811 	msr	BASEPRI, r3
 80165e8:	f3bf 8f6f 	isb	sy
 80165ec:	f3bf 8f4f 	dsb	sy
 80165f0:	61fb      	str	r3, [r7, #28]
}
 80165f2:	bf00      	nop
 80165f4:	e7fe      	b.n	80165f4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80165f6:	f002 f8cf 	bl	8018798 <vPortValidateInterruptPriority>
	__asm volatile
 80165fa:	f3ef 8211 	mrs	r2, BASEPRI
 80165fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016602:	f383 8811 	msr	BASEPRI, r3
 8016606:	f3bf 8f6f 	isb	sy
 801660a:	f3bf 8f4f 	dsb	sy
 801660e:	61ba      	str	r2, [r7, #24]
 8016610:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8016612:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016614:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801661a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801661e:	2b00      	cmp	r3, #0
 8016620:	d02f      	beq.n	8016682 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8016622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016624:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801662c:	68b9      	ldr	r1, [r7, #8]
 801662e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016630:	f000 f8d9 	bl	80167e6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016636:	1e5a      	subs	r2, r3, #1
 8016638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801663a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801663c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016644:	d112      	bne.n	801666c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016648:	691b      	ldr	r3, [r3, #16]
 801664a:	2b00      	cmp	r3, #0
 801664c:	d016      	beq.n	801667c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016650:	3310      	adds	r3, #16
 8016652:	4618      	mov	r0, r3
 8016654:	f000 ffa4 	bl	80175a0 <xTaskRemoveFromEventList>
 8016658:	4603      	mov	r3, r0
 801665a:	2b00      	cmp	r3, #0
 801665c:	d00e      	beq.n	801667c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	2b00      	cmp	r3, #0
 8016662:	d00b      	beq.n	801667c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	2201      	movs	r2, #1
 8016668:	601a      	str	r2, [r3, #0]
 801666a:	e007      	b.n	801667c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801666c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016670:	3301      	adds	r3, #1
 8016672:	b2db      	uxtb	r3, r3
 8016674:	b25a      	sxtb	r2, r3
 8016676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801667c:	2301      	movs	r3, #1
 801667e:	637b      	str	r3, [r7, #52]	; 0x34
 8016680:	e001      	b.n	8016686 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8016682:	2300      	movs	r3, #0
 8016684:	637b      	str	r3, [r7, #52]	; 0x34
 8016686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016688:	613b      	str	r3, [r7, #16]
	__asm volatile
 801668a:	693b      	ldr	r3, [r7, #16]
 801668c:	f383 8811 	msr	BASEPRI, r3
}
 8016690:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016694:	4618      	mov	r0, r3
 8016696:	3738      	adds	r7, #56	; 0x38
 8016698:	46bd      	mov	sp, r7
 801669a:	bd80      	pop	{r7, pc}

0801669c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801669c:	b580      	push	{r7, lr}
 801669e:	b084      	sub	sp, #16
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80166a8:	68fb      	ldr	r3, [r7, #12]
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d10a      	bne.n	80166c4 <vQueueDelete+0x28>
	__asm volatile
 80166ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166b2:	f383 8811 	msr	BASEPRI, r3
 80166b6:	f3bf 8f6f 	isb	sy
 80166ba:	f3bf 8f4f 	dsb	sy
 80166be:	60bb      	str	r3, [r7, #8]
}
 80166c0:	bf00      	nop
 80166c2:	e7fe      	b.n	80166c2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80166c4:	68f8      	ldr	r0, [r7, #12]
 80166c6:	f000 f95f 	bl	8016988 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d102      	bne.n	80166da <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80166d4:	68f8      	ldr	r0, [r7, #12]
 80166d6:	f002 f96b 	bl	80189b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80166da:	bf00      	nop
 80166dc:	3710      	adds	r7, #16
 80166de:	46bd      	mov	sp, r7
 80166e0:	bd80      	pop	{r7, pc}

080166e2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80166e2:	b480      	push	{r7}
 80166e4:	b085      	sub	sp, #20
 80166e6:	af00      	add	r7, sp, #0
 80166e8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d006      	beq.n	8016700 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80166fc:	60fb      	str	r3, [r7, #12]
 80166fe:	e001      	b.n	8016704 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8016700:	2300      	movs	r3, #0
 8016702:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8016704:	68fb      	ldr	r3, [r7, #12]
	}
 8016706:	4618      	mov	r0, r3
 8016708:	3714      	adds	r7, #20
 801670a:	46bd      	mov	sp, r7
 801670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016710:	4770      	bx	lr

08016712 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8016712:	b580      	push	{r7, lr}
 8016714:	b086      	sub	sp, #24
 8016716:	af00      	add	r7, sp, #0
 8016718:	60f8      	str	r0, [r7, #12]
 801671a:	60b9      	str	r1, [r7, #8]
 801671c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801671e:	2300      	movs	r3, #0
 8016720:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016726:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801672c:	2b00      	cmp	r3, #0
 801672e:	d10d      	bne.n	801674c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016730:	68fb      	ldr	r3, [r7, #12]
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	2b00      	cmp	r3, #0
 8016736:	d14d      	bne.n	80167d4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	689b      	ldr	r3, [r3, #8]
 801673c:	4618      	mov	r0, r3
 801673e:	f001 f973 	bl	8017a28 <xTaskPriorityDisinherit>
 8016742:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8016744:	68fb      	ldr	r3, [r7, #12]
 8016746:	2200      	movs	r2, #0
 8016748:	609a      	str	r2, [r3, #8]
 801674a:	e043      	b.n	80167d4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	2b00      	cmp	r3, #0
 8016750:	d119      	bne.n	8016786 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	6858      	ldr	r0, [r3, #4]
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801675a:	461a      	mov	r2, r3
 801675c:	68b9      	ldr	r1, [r7, #8]
 801675e:	f002 fa7f 	bl	8018c60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	685a      	ldr	r2, [r3, #4]
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801676a:	441a      	add	r2, r3
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016770:	68fb      	ldr	r3, [r7, #12]
 8016772:	685a      	ldr	r2, [r3, #4]
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	689b      	ldr	r3, [r3, #8]
 8016778:	429a      	cmp	r2, r3
 801677a:	d32b      	bcc.n	80167d4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	681a      	ldr	r2, [r3, #0]
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	605a      	str	r2, [r3, #4]
 8016784:	e026      	b.n	80167d4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	68d8      	ldr	r0, [r3, #12]
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801678e:	461a      	mov	r2, r3
 8016790:	68b9      	ldr	r1, [r7, #8]
 8016792:	f002 fa65 	bl	8018c60 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	68da      	ldr	r2, [r3, #12]
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801679e:	425b      	negs	r3, r3
 80167a0:	441a      	add	r2, r3
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	68da      	ldr	r2, [r3, #12]
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	429a      	cmp	r2, r3
 80167b0:	d207      	bcs.n	80167c2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	689a      	ldr	r2, [r3, #8]
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80167ba:	425b      	negs	r3, r3
 80167bc:	441a      	add	r2, r3
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	2b02      	cmp	r3, #2
 80167c6:	d105      	bne.n	80167d4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80167c8:	693b      	ldr	r3, [r7, #16]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d002      	beq.n	80167d4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80167ce:	693b      	ldr	r3, [r7, #16]
 80167d0:	3b01      	subs	r3, #1
 80167d2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80167d4:	693b      	ldr	r3, [r7, #16]
 80167d6:	1c5a      	adds	r2, r3, #1
 80167d8:	68fb      	ldr	r3, [r7, #12]
 80167da:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80167dc:	697b      	ldr	r3, [r7, #20]
}
 80167de:	4618      	mov	r0, r3
 80167e0:	3718      	adds	r7, #24
 80167e2:	46bd      	mov	sp, r7
 80167e4:	bd80      	pop	{r7, pc}

080167e6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80167e6:	b580      	push	{r7, lr}
 80167e8:	b082      	sub	sp, #8
 80167ea:	af00      	add	r7, sp, #0
 80167ec:	6078      	str	r0, [r7, #4]
 80167ee:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d018      	beq.n	801682a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	68da      	ldr	r2, [r3, #12]
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016800:	441a      	add	r2, r3
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	68da      	ldr	r2, [r3, #12]
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	689b      	ldr	r3, [r3, #8]
 801680e:	429a      	cmp	r2, r3
 8016810:	d303      	bcc.n	801681a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	681a      	ldr	r2, [r3, #0]
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	68d9      	ldr	r1, [r3, #12]
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016822:	461a      	mov	r2, r3
 8016824:	6838      	ldr	r0, [r7, #0]
 8016826:	f002 fa1b 	bl	8018c60 <memcpy>
	}
}
 801682a:	bf00      	nop
 801682c:	3708      	adds	r7, #8
 801682e:	46bd      	mov	sp, r7
 8016830:	bd80      	pop	{r7, pc}

08016832 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8016832:	b580      	push	{r7, lr}
 8016834:	b084      	sub	sp, #16
 8016836:	af00      	add	r7, sp, #0
 8016838:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801683a:	f001 fecb 	bl	80185d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016844:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016846:	e011      	b.n	801686c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801684c:	2b00      	cmp	r3, #0
 801684e:	d012      	beq.n	8016876 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	3324      	adds	r3, #36	; 0x24
 8016854:	4618      	mov	r0, r3
 8016856:	f000 fea3 	bl	80175a0 <xTaskRemoveFromEventList>
 801685a:	4603      	mov	r3, r0
 801685c:	2b00      	cmp	r3, #0
 801685e:	d001      	beq.n	8016864 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8016860:	f000 ff7a 	bl	8017758 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8016864:	7bfb      	ldrb	r3, [r7, #15]
 8016866:	3b01      	subs	r3, #1
 8016868:	b2db      	uxtb	r3, r3
 801686a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801686c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016870:	2b00      	cmp	r3, #0
 8016872:	dce9      	bgt.n	8016848 <prvUnlockQueue+0x16>
 8016874:	e000      	b.n	8016878 <prvUnlockQueue+0x46>
					break;
 8016876:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	22ff      	movs	r2, #255	; 0xff
 801687c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8016880:	f001 fed8 	bl	8018634 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016884:	f001 fea6 	bl	80185d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801688e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016890:	e011      	b.n	80168b6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	691b      	ldr	r3, [r3, #16]
 8016896:	2b00      	cmp	r3, #0
 8016898:	d012      	beq.n	80168c0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	3310      	adds	r3, #16
 801689e:	4618      	mov	r0, r3
 80168a0:	f000 fe7e 	bl	80175a0 <xTaskRemoveFromEventList>
 80168a4:	4603      	mov	r3, r0
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d001      	beq.n	80168ae <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80168aa:	f000 ff55 	bl	8017758 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80168ae:	7bbb      	ldrb	r3, [r7, #14]
 80168b0:	3b01      	subs	r3, #1
 80168b2:	b2db      	uxtb	r3, r3
 80168b4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80168b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	dce9      	bgt.n	8016892 <prvUnlockQueue+0x60>
 80168be:	e000      	b.n	80168c2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80168c0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	22ff      	movs	r2, #255	; 0xff
 80168c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80168ca:	f001 feb3 	bl	8018634 <vPortExitCritical>
}
 80168ce:	bf00      	nop
 80168d0:	3710      	adds	r7, #16
 80168d2:	46bd      	mov	sp, r7
 80168d4:	bd80      	pop	{r7, pc}

080168d6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80168d6:	b580      	push	{r7, lr}
 80168d8:	b084      	sub	sp, #16
 80168da:	af00      	add	r7, sp, #0
 80168dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80168de:	f001 fe79 	bl	80185d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	d102      	bne.n	80168f0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80168ea:	2301      	movs	r3, #1
 80168ec:	60fb      	str	r3, [r7, #12]
 80168ee:	e001      	b.n	80168f4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80168f0:	2300      	movs	r3, #0
 80168f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80168f4:	f001 fe9e 	bl	8018634 <vPortExitCritical>

	return xReturn;
 80168f8:	68fb      	ldr	r3, [r7, #12]
}
 80168fa:	4618      	mov	r0, r3
 80168fc:	3710      	adds	r7, #16
 80168fe:	46bd      	mov	sp, r7
 8016900:	bd80      	pop	{r7, pc}

08016902 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8016902:	b580      	push	{r7, lr}
 8016904:	b084      	sub	sp, #16
 8016906:	af00      	add	r7, sp, #0
 8016908:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801690a:	f001 fe63 	bl	80185d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016916:	429a      	cmp	r2, r3
 8016918:	d102      	bne.n	8016920 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801691a:	2301      	movs	r3, #1
 801691c:	60fb      	str	r3, [r7, #12]
 801691e:	e001      	b.n	8016924 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8016920:	2300      	movs	r3, #0
 8016922:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016924:	f001 fe86 	bl	8018634 <vPortExitCritical>

	return xReturn;
 8016928:	68fb      	ldr	r3, [r7, #12]
}
 801692a:	4618      	mov	r0, r3
 801692c:	3710      	adds	r7, #16
 801692e:	46bd      	mov	sp, r7
 8016930:	bd80      	pop	{r7, pc}
	...

08016934 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016934:	b480      	push	{r7}
 8016936:	b085      	sub	sp, #20
 8016938:	af00      	add	r7, sp, #0
 801693a:	6078      	str	r0, [r7, #4]
 801693c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801693e:	2300      	movs	r3, #0
 8016940:	60fb      	str	r3, [r7, #12]
 8016942:	e014      	b.n	801696e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8016944:	4a0f      	ldr	r2, [pc, #60]	; (8016984 <vQueueAddToRegistry+0x50>)
 8016946:	68fb      	ldr	r3, [r7, #12]
 8016948:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801694c:	2b00      	cmp	r3, #0
 801694e:	d10b      	bne.n	8016968 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8016950:	490c      	ldr	r1, [pc, #48]	; (8016984 <vQueueAddToRegistry+0x50>)
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	683a      	ldr	r2, [r7, #0]
 8016956:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801695a:	4a0a      	ldr	r2, [pc, #40]	; (8016984 <vQueueAddToRegistry+0x50>)
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	00db      	lsls	r3, r3, #3
 8016960:	4413      	add	r3, r2
 8016962:	687a      	ldr	r2, [r7, #4]
 8016964:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8016966:	e006      	b.n	8016976 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016968:	68fb      	ldr	r3, [r7, #12]
 801696a:	3301      	adds	r3, #1
 801696c:	60fb      	str	r3, [r7, #12]
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	2b07      	cmp	r3, #7
 8016972:	d9e7      	bls.n	8016944 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8016974:	bf00      	nop
 8016976:	bf00      	nop
 8016978:	3714      	adds	r7, #20
 801697a:	46bd      	mov	sp, r7
 801697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016980:	4770      	bx	lr
 8016982:	bf00      	nop
 8016984:	2000a4cc 	.word	0x2000a4cc

08016988 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8016988:	b480      	push	{r7}
 801698a:	b085      	sub	sp, #20
 801698c:	af00      	add	r7, sp, #0
 801698e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016990:	2300      	movs	r3, #0
 8016992:	60fb      	str	r3, [r7, #12]
 8016994:	e016      	b.n	80169c4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8016996:	4a10      	ldr	r2, [pc, #64]	; (80169d8 <vQueueUnregisterQueue+0x50>)
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	00db      	lsls	r3, r3, #3
 801699c:	4413      	add	r3, r2
 801699e:	685b      	ldr	r3, [r3, #4]
 80169a0:	687a      	ldr	r2, [r7, #4]
 80169a2:	429a      	cmp	r2, r3
 80169a4:	d10b      	bne.n	80169be <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80169a6:	4a0c      	ldr	r2, [pc, #48]	; (80169d8 <vQueueUnregisterQueue+0x50>)
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	2100      	movs	r1, #0
 80169ac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80169b0:	4a09      	ldr	r2, [pc, #36]	; (80169d8 <vQueueUnregisterQueue+0x50>)
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	00db      	lsls	r3, r3, #3
 80169b6:	4413      	add	r3, r2
 80169b8:	2200      	movs	r2, #0
 80169ba:	605a      	str	r2, [r3, #4]
				break;
 80169bc:	e006      	b.n	80169cc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	3301      	adds	r3, #1
 80169c2:	60fb      	str	r3, [r7, #12]
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	2b07      	cmp	r3, #7
 80169c8:	d9e5      	bls.n	8016996 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80169ca:	bf00      	nop
 80169cc:	bf00      	nop
 80169ce:	3714      	adds	r7, #20
 80169d0:	46bd      	mov	sp, r7
 80169d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169d6:	4770      	bx	lr
 80169d8:	2000a4cc 	.word	0x2000a4cc

080169dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80169dc:	b580      	push	{r7, lr}
 80169de:	b086      	sub	sp, #24
 80169e0:	af00      	add	r7, sp, #0
 80169e2:	60f8      	str	r0, [r7, #12]
 80169e4:	60b9      	str	r1, [r7, #8]
 80169e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80169ec:	f001 fdf2 	bl	80185d4 <vPortEnterCritical>
 80169f0:	697b      	ldr	r3, [r7, #20]
 80169f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80169f6:	b25b      	sxtb	r3, r3
 80169f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80169fc:	d103      	bne.n	8016a06 <vQueueWaitForMessageRestricted+0x2a>
 80169fe:	697b      	ldr	r3, [r7, #20]
 8016a00:	2200      	movs	r2, #0
 8016a02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016a06:	697b      	ldr	r3, [r7, #20]
 8016a08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016a0c:	b25b      	sxtb	r3, r3
 8016a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016a12:	d103      	bne.n	8016a1c <vQueueWaitForMessageRestricted+0x40>
 8016a14:	697b      	ldr	r3, [r7, #20]
 8016a16:	2200      	movs	r2, #0
 8016a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016a1c:	f001 fe0a 	bl	8018634 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8016a20:	697b      	ldr	r3, [r7, #20]
 8016a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d106      	bne.n	8016a36 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016a28:	697b      	ldr	r3, [r7, #20]
 8016a2a:	3324      	adds	r3, #36	; 0x24
 8016a2c:	687a      	ldr	r2, [r7, #4]
 8016a2e:	68b9      	ldr	r1, [r7, #8]
 8016a30:	4618      	mov	r0, r3
 8016a32:	f000 fd89 	bl	8017548 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8016a36:	6978      	ldr	r0, [r7, #20]
 8016a38:	f7ff fefb 	bl	8016832 <prvUnlockQueue>
	}
 8016a3c:	bf00      	nop
 8016a3e:	3718      	adds	r7, #24
 8016a40:	46bd      	mov	sp, r7
 8016a42:	bd80      	pop	{r7, pc}

08016a44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016a44:	b580      	push	{r7, lr}
 8016a46:	b08e      	sub	sp, #56	; 0x38
 8016a48:	af04      	add	r7, sp, #16
 8016a4a:	60f8      	str	r0, [r7, #12]
 8016a4c:	60b9      	str	r1, [r7, #8]
 8016a4e:	607a      	str	r2, [r7, #4]
 8016a50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8016a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d10a      	bne.n	8016a6e <xTaskCreateStatic+0x2a>
	__asm volatile
 8016a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a5c:	f383 8811 	msr	BASEPRI, r3
 8016a60:	f3bf 8f6f 	isb	sy
 8016a64:	f3bf 8f4f 	dsb	sy
 8016a68:	623b      	str	r3, [r7, #32]
}
 8016a6a:	bf00      	nop
 8016a6c:	e7fe      	b.n	8016a6c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8016a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d10a      	bne.n	8016a8a <xTaskCreateStatic+0x46>
	__asm volatile
 8016a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a78:	f383 8811 	msr	BASEPRI, r3
 8016a7c:	f3bf 8f6f 	isb	sy
 8016a80:	f3bf 8f4f 	dsb	sy
 8016a84:	61fb      	str	r3, [r7, #28]
}
 8016a86:	bf00      	nop
 8016a88:	e7fe      	b.n	8016a88 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8016a8a:	235c      	movs	r3, #92	; 0x5c
 8016a8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8016a8e:	693b      	ldr	r3, [r7, #16]
 8016a90:	2b5c      	cmp	r3, #92	; 0x5c
 8016a92:	d00a      	beq.n	8016aaa <xTaskCreateStatic+0x66>
	__asm volatile
 8016a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a98:	f383 8811 	msr	BASEPRI, r3
 8016a9c:	f3bf 8f6f 	isb	sy
 8016aa0:	f3bf 8f4f 	dsb	sy
 8016aa4:	61bb      	str	r3, [r7, #24]
}
 8016aa6:	bf00      	nop
 8016aa8:	e7fe      	b.n	8016aa8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8016aaa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d01e      	beq.n	8016af0 <xTaskCreateStatic+0xac>
 8016ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d01b      	beq.n	8016af0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016aba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016abe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016ac0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ac4:	2202      	movs	r2, #2
 8016ac6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016aca:	2300      	movs	r3, #0
 8016acc:	9303      	str	r3, [sp, #12]
 8016ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ad0:	9302      	str	r3, [sp, #8]
 8016ad2:	f107 0314 	add.w	r3, r7, #20
 8016ad6:	9301      	str	r3, [sp, #4]
 8016ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ada:	9300      	str	r3, [sp, #0]
 8016adc:	683b      	ldr	r3, [r7, #0]
 8016ade:	687a      	ldr	r2, [r7, #4]
 8016ae0:	68b9      	ldr	r1, [r7, #8]
 8016ae2:	68f8      	ldr	r0, [r7, #12]
 8016ae4:	f000 f850 	bl	8016b88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016ae8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016aea:	f000 f8dd 	bl	8016ca8 <prvAddNewTaskToReadyList>
 8016aee:	e001      	b.n	8016af4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8016af0:	2300      	movs	r3, #0
 8016af2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016af4:	697b      	ldr	r3, [r7, #20]
	}
 8016af6:	4618      	mov	r0, r3
 8016af8:	3728      	adds	r7, #40	; 0x28
 8016afa:	46bd      	mov	sp, r7
 8016afc:	bd80      	pop	{r7, pc}

08016afe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016afe:	b580      	push	{r7, lr}
 8016b00:	b08c      	sub	sp, #48	; 0x30
 8016b02:	af04      	add	r7, sp, #16
 8016b04:	60f8      	str	r0, [r7, #12]
 8016b06:	60b9      	str	r1, [r7, #8]
 8016b08:	603b      	str	r3, [r7, #0]
 8016b0a:	4613      	mov	r3, r2
 8016b0c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016b0e:	88fb      	ldrh	r3, [r7, #6]
 8016b10:	009b      	lsls	r3, r3, #2
 8016b12:	4618      	mov	r0, r3
 8016b14:	f001 fe80 	bl	8018818 <pvPortMalloc>
 8016b18:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016b1a:	697b      	ldr	r3, [r7, #20]
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d00e      	beq.n	8016b3e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016b20:	205c      	movs	r0, #92	; 0x5c
 8016b22:	f001 fe79 	bl	8018818 <pvPortMalloc>
 8016b26:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016b28:	69fb      	ldr	r3, [r7, #28]
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d003      	beq.n	8016b36 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016b2e:	69fb      	ldr	r3, [r7, #28]
 8016b30:	697a      	ldr	r2, [r7, #20]
 8016b32:	631a      	str	r2, [r3, #48]	; 0x30
 8016b34:	e005      	b.n	8016b42 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016b36:	6978      	ldr	r0, [r7, #20]
 8016b38:	f001 ff3a 	bl	80189b0 <vPortFree>
 8016b3c:	e001      	b.n	8016b42 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016b3e:	2300      	movs	r3, #0
 8016b40:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016b42:	69fb      	ldr	r3, [r7, #28]
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d017      	beq.n	8016b78 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016b48:	69fb      	ldr	r3, [r7, #28]
 8016b4a:	2200      	movs	r2, #0
 8016b4c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016b50:	88fa      	ldrh	r2, [r7, #6]
 8016b52:	2300      	movs	r3, #0
 8016b54:	9303      	str	r3, [sp, #12]
 8016b56:	69fb      	ldr	r3, [r7, #28]
 8016b58:	9302      	str	r3, [sp, #8]
 8016b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b5c:	9301      	str	r3, [sp, #4]
 8016b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b60:	9300      	str	r3, [sp, #0]
 8016b62:	683b      	ldr	r3, [r7, #0]
 8016b64:	68b9      	ldr	r1, [r7, #8]
 8016b66:	68f8      	ldr	r0, [r7, #12]
 8016b68:	f000 f80e 	bl	8016b88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016b6c:	69f8      	ldr	r0, [r7, #28]
 8016b6e:	f000 f89b 	bl	8016ca8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016b72:	2301      	movs	r3, #1
 8016b74:	61bb      	str	r3, [r7, #24]
 8016b76:	e002      	b.n	8016b7e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016b78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016b7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016b7e:	69bb      	ldr	r3, [r7, #24]
	}
 8016b80:	4618      	mov	r0, r3
 8016b82:	3720      	adds	r7, #32
 8016b84:	46bd      	mov	sp, r7
 8016b86:	bd80      	pop	{r7, pc}

08016b88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8016b88:	b580      	push	{r7, lr}
 8016b8a:	b088      	sub	sp, #32
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	60f8      	str	r0, [r7, #12]
 8016b90:	60b9      	str	r1, [r7, #8]
 8016b92:	607a      	str	r2, [r7, #4]
 8016b94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8016b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b98:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	009b      	lsls	r3, r3, #2
 8016b9e:	461a      	mov	r2, r3
 8016ba0:	21a5      	movs	r1, #165	; 0xa5
 8016ba2:	f002 f86b 	bl	8018c7c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016bb0:	3b01      	subs	r3, #1
 8016bb2:	009b      	lsls	r3, r3, #2
 8016bb4:	4413      	add	r3, r2
 8016bb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8016bb8:	69bb      	ldr	r3, [r7, #24]
 8016bba:	f023 0307 	bic.w	r3, r3, #7
 8016bbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016bc0:	69bb      	ldr	r3, [r7, #24]
 8016bc2:	f003 0307 	and.w	r3, r3, #7
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d00a      	beq.n	8016be0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8016bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bce:	f383 8811 	msr	BASEPRI, r3
 8016bd2:	f3bf 8f6f 	isb	sy
 8016bd6:	f3bf 8f4f 	dsb	sy
 8016bda:	617b      	str	r3, [r7, #20]
}
 8016bdc:	bf00      	nop
 8016bde:	e7fe      	b.n	8016bde <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8016be0:	68bb      	ldr	r3, [r7, #8]
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d01f      	beq.n	8016c26 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016be6:	2300      	movs	r3, #0
 8016be8:	61fb      	str	r3, [r7, #28]
 8016bea:	e012      	b.n	8016c12 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016bec:	68ba      	ldr	r2, [r7, #8]
 8016bee:	69fb      	ldr	r3, [r7, #28]
 8016bf0:	4413      	add	r3, r2
 8016bf2:	7819      	ldrb	r1, [r3, #0]
 8016bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016bf6:	69fb      	ldr	r3, [r7, #28]
 8016bf8:	4413      	add	r3, r2
 8016bfa:	3334      	adds	r3, #52	; 0x34
 8016bfc:	460a      	mov	r2, r1
 8016bfe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016c00:	68ba      	ldr	r2, [r7, #8]
 8016c02:	69fb      	ldr	r3, [r7, #28]
 8016c04:	4413      	add	r3, r2
 8016c06:	781b      	ldrb	r3, [r3, #0]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d006      	beq.n	8016c1a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016c0c:	69fb      	ldr	r3, [r7, #28]
 8016c0e:	3301      	adds	r3, #1
 8016c10:	61fb      	str	r3, [r7, #28]
 8016c12:	69fb      	ldr	r3, [r7, #28]
 8016c14:	2b0f      	cmp	r3, #15
 8016c16:	d9e9      	bls.n	8016bec <prvInitialiseNewTask+0x64>
 8016c18:	e000      	b.n	8016c1c <prvInitialiseNewTask+0x94>
			{
				break;
 8016c1a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c1e:	2200      	movs	r2, #0
 8016c20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016c24:	e003      	b.n	8016c2e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c28:	2200      	movs	r2, #0
 8016c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c30:	2b37      	cmp	r3, #55	; 0x37
 8016c32:	d901      	bls.n	8016c38 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016c34:	2337      	movs	r3, #55	; 0x37
 8016c36:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016c3c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8016c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016c42:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8016c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c46:	2200      	movs	r2, #0
 8016c48:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c4c:	3304      	adds	r3, #4
 8016c4e:	4618      	mov	r0, r3
 8016c50:	f7fe fe56 	bl	8015900 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c56:	3318      	adds	r3, #24
 8016c58:	4618      	mov	r0, r3
 8016c5a:	f7fe fe51 	bl	8015900 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c76:	2200      	movs	r2, #0
 8016c78:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c7c:	2200      	movs	r2, #0
 8016c7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016c82:	683a      	ldr	r2, [r7, #0]
 8016c84:	68f9      	ldr	r1, [r7, #12]
 8016c86:	69b8      	ldr	r0, [r7, #24]
 8016c88:	f001 fb74 	bl	8018374 <pxPortInitialiseStack>
 8016c8c:	4602      	mov	r2, r0
 8016c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c90:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8016c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d002      	beq.n	8016c9e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016c9e:	bf00      	nop
 8016ca0:	3720      	adds	r7, #32
 8016ca2:	46bd      	mov	sp, r7
 8016ca4:	bd80      	pop	{r7, pc}
	...

08016ca8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016ca8:	b580      	push	{r7, lr}
 8016caa:	b082      	sub	sp, #8
 8016cac:	af00      	add	r7, sp, #0
 8016cae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016cb0:	f001 fc90 	bl	80185d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016cb4:	4b2d      	ldr	r3, [pc, #180]	; (8016d6c <prvAddNewTaskToReadyList+0xc4>)
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	3301      	adds	r3, #1
 8016cba:	4a2c      	ldr	r2, [pc, #176]	; (8016d6c <prvAddNewTaskToReadyList+0xc4>)
 8016cbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8016cbe:	4b2c      	ldr	r3, [pc, #176]	; (8016d70 <prvAddNewTaskToReadyList+0xc8>)
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d109      	bne.n	8016cda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016cc6:	4a2a      	ldr	r2, [pc, #168]	; (8016d70 <prvAddNewTaskToReadyList+0xc8>)
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016ccc:	4b27      	ldr	r3, [pc, #156]	; (8016d6c <prvAddNewTaskToReadyList+0xc4>)
 8016cce:	681b      	ldr	r3, [r3, #0]
 8016cd0:	2b01      	cmp	r3, #1
 8016cd2:	d110      	bne.n	8016cf6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016cd4:	f000 fd64 	bl	80177a0 <prvInitialiseTaskLists>
 8016cd8:	e00d      	b.n	8016cf6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016cda:	4b26      	ldr	r3, [pc, #152]	; (8016d74 <prvAddNewTaskToReadyList+0xcc>)
 8016cdc:	681b      	ldr	r3, [r3, #0]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d109      	bne.n	8016cf6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016ce2:	4b23      	ldr	r3, [pc, #140]	; (8016d70 <prvAddNewTaskToReadyList+0xc8>)
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cec:	429a      	cmp	r2, r3
 8016cee:	d802      	bhi.n	8016cf6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016cf0:	4a1f      	ldr	r2, [pc, #124]	; (8016d70 <prvAddNewTaskToReadyList+0xc8>)
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8016cf6:	4b20      	ldr	r3, [pc, #128]	; (8016d78 <prvAddNewTaskToReadyList+0xd0>)
 8016cf8:	681b      	ldr	r3, [r3, #0]
 8016cfa:	3301      	adds	r3, #1
 8016cfc:	4a1e      	ldr	r2, [pc, #120]	; (8016d78 <prvAddNewTaskToReadyList+0xd0>)
 8016cfe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8016d00:	4b1d      	ldr	r3, [pc, #116]	; (8016d78 <prvAddNewTaskToReadyList+0xd0>)
 8016d02:	681a      	ldr	r2, [r3, #0]
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d0c:	4b1b      	ldr	r3, [pc, #108]	; (8016d7c <prvAddNewTaskToReadyList+0xd4>)
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	429a      	cmp	r2, r3
 8016d12:	d903      	bls.n	8016d1c <prvAddNewTaskToReadyList+0x74>
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d18:	4a18      	ldr	r2, [pc, #96]	; (8016d7c <prvAddNewTaskToReadyList+0xd4>)
 8016d1a:	6013      	str	r3, [r2, #0]
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d20:	4613      	mov	r3, r2
 8016d22:	009b      	lsls	r3, r3, #2
 8016d24:	4413      	add	r3, r2
 8016d26:	009b      	lsls	r3, r3, #2
 8016d28:	4a15      	ldr	r2, [pc, #84]	; (8016d80 <prvAddNewTaskToReadyList+0xd8>)
 8016d2a:	441a      	add	r2, r3
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	3304      	adds	r3, #4
 8016d30:	4619      	mov	r1, r3
 8016d32:	4610      	mov	r0, r2
 8016d34:	f7fe fdf1 	bl	801591a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016d38:	f001 fc7c 	bl	8018634 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016d3c:	4b0d      	ldr	r3, [pc, #52]	; (8016d74 <prvAddNewTaskToReadyList+0xcc>)
 8016d3e:	681b      	ldr	r3, [r3, #0]
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d00e      	beq.n	8016d62 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016d44:	4b0a      	ldr	r3, [pc, #40]	; (8016d70 <prvAddNewTaskToReadyList+0xc8>)
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d4e:	429a      	cmp	r2, r3
 8016d50:	d207      	bcs.n	8016d62 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016d52:	4b0c      	ldr	r3, [pc, #48]	; (8016d84 <prvAddNewTaskToReadyList+0xdc>)
 8016d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d58:	601a      	str	r2, [r3, #0]
 8016d5a:	f3bf 8f4f 	dsb	sy
 8016d5e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016d62:	bf00      	nop
 8016d64:	3708      	adds	r7, #8
 8016d66:	46bd      	mov	sp, r7
 8016d68:	bd80      	pop	{r7, pc}
 8016d6a:	bf00      	nop
 8016d6c:	20001cc4 	.word	0x20001cc4
 8016d70:	200017f0 	.word	0x200017f0
 8016d74:	20001cd0 	.word	0x20001cd0
 8016d78:	20001ce0 	.word	0x20001ce0
 8016d7c:	20001ccc 	.word	0x20001ccc
 8016d80:	200017f4 	.word	0x200017f4
 8016d84:	e000ed04 	.word	0xe000ed04

08016d88 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8016d88:	b580      	push	{r7, lr}
 8016d8a:	b084      	sub	sp, #16
 8016d8c:	af00      	add	r7, sp, #0
 8016d8e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8016d90:	f001 fc20 	bl	80185d4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d102      	bne.n	8016da0 <vTaskDelete+0x18>
 8016d9a:	4b2c      	ldr	r3, [pc, #176]	; (8016e4c <vTaskDelete+0xc4>)
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	e000      	b.n	8016da2 <vTaskDelete+0x1a>
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	3304      	adds	r3, #4
 8016da8:	4618      	mov	r0, r3
 8016daa:	f7fe fe13 	bl	80159d4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d004      	beq.n	8016dc0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016db6:	68fb      	ldr	r3, [r7, #12]
 8016db8:	3318      	adds	r3, #24
 8016dba:	4618      	mov	r0, r3
 8016dbc:	f7fe fe0a 	bl	80159d4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8016dc0:	4b23      	ldr	r3, [pc, #140]	; (8016e50 <vTaskDelete+0xc8>)
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	3301      	adds	r3, #1
 8016dc6:	4a22      	ldr	r2, [pc, #136]	; (8016e50 <vTaskDelete+0xc8>)
 8016dc8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8016dca:	4b20      	ldr	r3, [pc, #128]	; (8016e4c <vTaskDelete+0xc4>)
 8016dcc:	681b      	ldr	r3, [r3, #0]
 8016dce:	68fa      	ldr	r2, [r7, #12]
 8016dd0:	429a      	cmp	r2, r3
 8016dd2:	d10b      	bne.n	8016dec <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	3304      	adds	r3, #4
 8016dd8:	4619      	mov	r1, r3
 8016dda:	481e      	ldr	r0, [pc, #120]	; (8016e54 <vTaskDelete+0xcc>)
 8016ddc:	f7fe fd9d 	bl	801591a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8016de0:	4b1d      	ldr	r3, [pc, #116]	; (8016e58 <vTaskDelete+0xd0>)
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	3301      	adds	r3, #1
 8016de6:	4a1c      	ldr	r2, [pc, #112]	; (8016e58 <vTaskDelete+0xd0>)
 8016de8:	6013      	str	r3, [r2, #0]
 8016dea:	e009      	b.n	8016e00 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8016dec:	4b1b      	ldr	r3, [pc, #108]	; (8016e5c <vTaskDelete+0xd4>)
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	3b01      	subs	r3, #1
 8016df2:	4a1a      	ldr	r2, [pc, #104]	; (8016e5c <vTaskDelete+0xd4>)
 8016df4:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8016df6:	68f8      	ldr	r0, [r7, #12]
 8016df8:	f000 fd40 	bl	801787c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8016dfc:	f000 fd6e 	bl	80178dc <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8016e00:	f001 fc18 	bl	8018634 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8016e04:	4b16      	ldr	r3, [pc, #88]	; (8016e60 <vTaskDelete+0xd8>)
 8016e06:	681b      	ldr	r3, [r3, #0]
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d01b      	beq.n	8016e44 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8016e0c:	4b0f      	ldr	r3, [pc, #60]	; (8016e4c <vTaskDelete+0xc4>)
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	68fa      	ldr	r2, [r7, #12]
 8016e12:	429a      	cmp	r2, r3
 8016e14:	d116      	bne.n	8016e44 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8016e16:	4b13      	ldr	r3, [pc, #76]	; (8016e64 <vTaskDelete+0xdc>)
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d00a      	beq.n	8016e34 <vTaskDelete+0xac>
	__asm volatile
 8016e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e22:	f383 8811 	msr	BASEPRI, r3
 8016e26:	f3bf 8f6f 	isb	sy
 8016e2a:	f3bf 8f4f 	dsb	sy
 8016e2e:	60bb      	str	r3, [r7, #8]
}
 8016e30:	bf00      	nop
 8016e32:	e7fe      	b.n	8016e32 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8016e34:	4b0c      	ldr	r3, [pc, #48]	; (8016e68 <vTaskDelete+0xe0>)
 8016e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e3a:	601a      	str	r2, [r3, #0]
 8016e3c:	f3bf 8f4f 	dsb	sy
 8016e40:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8016e44:	bf00      	nop
 8016e46:	3710      	adds	r7, #16
 8016e48:	46bd      	mov	sp, r7
 8016e4a:	bd80      	pop	{r7, pc}
 8016e4c:	200017f0 	.word	0x200017f0
 8016e50:	20001ce0 	.word	0x20001ce0
 8016e54:	20001c98 	.word	0x20001c98
 8016e58:	20001cac 	.word	0x20001cac
 8016e5c:	20001cc4 	.word	0x20001cc4
 8016e60:	20001cd0 	.word	0x20001cd0
 8016e64:	20001cec 	.word	0x20001cec
 8016e68:	e000ed04 	.word	0xe000ed04

08016e6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8016e6c:	b580      	push	{r7, lr}
 8016e6e:	b084      	sub	sp, #16
 8016e70:	af00      	add	r7, sp, #0
 8016e72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8016e74:	2300      	movs	r3, #0
 8016e76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d017      	beq.n	8016eae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8016e7e:	4b13      	ldr	r3, [pc, #76]	; (8016ecc <vTaskDelay+0x60>)
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d00a      	beq.n	8016e9c <vTaskDelay+0x30>
	__asm volatile
 8016e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e8a:	f383 8811 	msr	BASEPRI, r3
 8016e8e:	f3bf 8f6f 	isb	sy
 8016e92:	f3bf 8f4f 	dsb	sy
 8016e96:	60bb      	str	r3, [r7, #8]
}
 8016e98:	bf00      	nop
 8016e9a:	e7fe      	b.n	8016e9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8016e9c:	f000 f95c 	bl	8017158 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8016ea0:	2100      	movs	r1, #0
 8016ea2:	6878      	ldr	r0, [r7, #4]
 8016ea4:	f000 fec4 	bl	8017c30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016ea8:	f000 f964 	bl	8017174 <xTaskResumeAll>
 8016eac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d107      	bne.n	8016ec4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8016eb4:	4b06      	ldr	r3, [pc, #24]	; (8016ed0 <vTaskDelay+0x64>)
 8016eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016eba:	601a      	str	r2, [r3, #0]
 8016ebc:	f3bf 8f4f 	dsb	sy
 8016ec0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016ec4:	bf00      	nop
 8016ec6:	3710      	adds	r7, #16
 8016ec8:	46bd      	mov	sp, r7
 8016eca:	bd80      	pop	{r7, pc}
 8016ecc:	20001cec 	.word	0x20001cec
 8016ed0:	e000ed04 	.word	0xe000ed04

08016ed4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8016ed4:	b580      	push	{r7, lr}
 8016ed6:	b088      	sub	sp, #32
 8016ed8:	af00      	add	r7, sp, #0
 8016eda:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8016ee0:	69bb      	ldr	r3, [r7, #24]
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d10a      	bne.n	8016efc <eTaskGetState+0x28>
	__asm volatile
 8016ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016eea:	f383 8811 	msr	BASEPRI, r3
 8016eee:	f3bf 8f6f 	isb	sy
 8016ef2:	f3bf 8f4f 	dsb	sy
 8016ef6:	60bb      	str	r3, [r7, #8]
}
 8016ef8:	bf00      	nop
 8016efa:	e7fe      	b.n	8016efa <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8016efc:	4b23      	ldr	r3, [pc, #140]	; (8016f8c <eTaskGetState+0xb8>)
 8016efe:	681b      	ldr	r3, [r3, #0]
 8016f00:	69ba      	ldr	r2, [r7, #24]
 8016f02:	429a      	cmp	r2, r3
 8016f04:	d102      	bne.n	8016f0c <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8016f06:	2300      	movs	r3, #0
 8016f08:	77fb      	strb	r3, [r7, #31]
 8016f0a:	e03a      	b.n	8016f82 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8016f0c:	f001 fb62 	bl	80185d4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8016f10:	69bb      	ldr	r3, [r7, #24]
 8016f12:	695b      	ldr	r3, [r3, #20]
 8016f14:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8016f16:	4b1e      	ldr	r3, [pc, #120]	; (8016f90 <eTaskGetState+0xbc>)
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8016f1c:	4b1d      	ldr	r3, [pc, #116]	; (8016f94 <eTaskGetState+0xc0>)
 8016f1e:	681b      	ldr	r3, [r3, #0]
 8016f20:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8016f22:	f001 fb87 	bl	8018634 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8016f26:	697a      	ldr	r2, [r7, #20]
 8016f28:	693b      	ldr	r3, [r7, #16]
 8016f2a:	429a      	cmp	r2, r3
 8016f2c:	d003      	beq.n	8016f36 <eTaskGetState+0x62>
 8016f2e:	697a      	ldr	r2, [r7, #20]
 8016f30:	68fb      	ldr	r3, [r7, #12]
 8016f32:	429a      	cmp	r2, r3
 8016f34:	d102      	bne.n	8016f3c <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8016f36:	2302      	movs	r3, #2
 8016f38:	77fb      	strb	r3, [r7, #31]
 8016f3a:	e022      	b.n	8016f82 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8016f3c:	697b      	ldr	r3, [r7, #20]
 8016f3e:	4a16      	ldr	r2, [pc, #88]	; (8016f98 <eTaskGetState+0xc4>)
 8016f40:	4293      	cmp	r3, r2
 8016f42:	d112      	bne.n	8016f6a <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8016f44:	69bb      	ldr	r3, [r7, #24]
 8016f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d10b      	bne.n	8016f64 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8016f4c:	69bb      	ldr	r3, [r7, #24]
 8016f4e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8016f52:	b2db      	uxtb	r3, r3
 8016f54:	2b01      	cmp	r3, #1
 8016f56:	d102      	bne.n	8016f5e <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8016f58:	2302      	movs	r3, #2
 8016f5a:	77fb      	strb	r3, [r7, #31]
 8016f5c:	e011      	b.n	8016f82 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8016f5e:	2303      	movs	r3, #3
 8016f60:	77fb      	strb	r3, [r7, #31]
 8016f62:	e00e      	b.n	8016f82 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8016f64:	2302      	movs	r3, #2
 8016f66:	77fb      	strb	r3, [r7, #31]
 8016f68:	e00b      	b.n	8016f82 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8016f6a:	697b      	ldr	r3, [r7, #20]
 8016f6c:	4a0b      	ldr	r2, [pc, #44]	; (8016f9c <eTaskGetState+0xc8>)
 8016f6e:	4293      	cmp	r3, r2
 8016f70:	d002      	beq.n	8016f78 <eTaskGetState+0xa4>
 8016f72:	697b      	ldr	r3, [r7, #20]
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d102      	bne.n	8016f7e <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8016f78:	2304      	movs	r3, #4
 8016f7a:	77fb      	strb	r3, [r7, #31]
 8016f7c:	e001      	b.n	8016f82 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8016f7e:	2301      	movs	r3, #1
 8016f80:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8016f82:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8016f84:	4618      	mov	r0, r3
 8016f86:	3720      	adds	r7, #32
 8016f88:	46bd      	mov	sp, r7
 8016f8a:	bd80      	pop	{r7, pc}
 8016f8c:	200017f0 	.word	0x200017f0
 8016f90:	20001c7c 	.word	0x20001c7c
 8016f94:	20001c80 	.word	0x20001c80
 8016f98:	20001cb0 	.word	0x20001cb0
 8016f9c:	20001c98 	.word	0x20001c98

08016fa0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8016fa0:	b580      	push	{r7, lr}
 8016fa2:	b084      	sub	sp, #16
 8016fa4:	af00      	add	r7, sp, #0
 8016fa6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8016fa8:	f001 fb14 	bl	80185d4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d102      	bne.n	8016fb8 <vTaskSuspend+0x18>
 8016fb2:	4b30      	ldr	r3, [pc, #192]	; (8017074 <vTaskSuspend+0xd4>)
 8016fb4:	681b      	ldr	r3, [r3, #0]
 8016fb6:	e000      	b.n	8016fba <vTaskSuspend+0x1a>
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016fbc:	68fb      	ldr	r3, [r7, #12]
 8016fbe:	3304      	adds	r3, #4
 8016fc0:	4618      	mov	r0, r3
 8016fc2:	f7fe fd07 	bl	80159d4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016fc6:	68fb      	ldr	r3, [r7, #12]
 8016fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d004      	beq.n	8016fd8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016fce:	68fb      	ldr	r3, [r7, #12]
 8016fd0:	3318      	adds	r3, #24
 8016fd2:	4618      	mov	r0, r3
 8016fd4:	f7fe fcfe 	bl	80159d4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8016fd8:	68fb      	ldr	r3, [r7, #12]
 8016fda:	3304      	adds	r3, #4
 8016fdc:	4619      	mov	r1, r3
 8016fde:	4826      	ldr	r0, [pc, #152]	; (8017078 <vTaskSuspend+0xd8>)
 8016fe0:	f7fe fc9b 	bl	801591a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8016fe4:	68fb      	ldr	r3, [r7, #12]
 8016fe6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8016fea:	b2db      	uxtb	r3, r3
 8016fec:	2b01      	cmp	r3, #1
 8016fee:	d103      	bne.n	8016ff8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016ff0:	68fb      	ldr	r3, [r7, #12]
 8016ff2:	2200      	movs	r2, #0
 8016ff4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8016ff8:	f001 fb1c 	bl	8018634 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8016ffc:	4b1f      	ldr	r3, [pc, #124]	; (801707c <vTaskSuspend+0xdc>)
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	2b00      	cmp	r3, #0
 8017002:	d005      	beq.n	8017010 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8017004:	f001 fae6 	bl	80185d4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8017008:	f000 fc68 	bl	80178dc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 801700c:	f001 fb12 	bl	8018634 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8017010:	4b18      	ldr	r3, [pc, #96]	; (8017074 <vTaskSuspend+0xd4>)
 8017012:	681b      	ldr	r3, [r3, #0]
 8017014:	68fa      	ldr	r2, [r7, #12]
 8017016:	429a      	cmp	r2, r3
 8017018:	d127      	bne.n	801706a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 801701a:	4b18      	ldr	r3, [pc, #96]	; (801707c <vTaskSuspend+0xdc>)
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	2b00      	cmp	r3, #0
 8017020:	d017      	beq.n	8017052 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8017022:	4b17      	ldr	r3, [pc, #92]	; (8017080 <vTaskSuspend+0xe0>)
 8017024:	681b      	ldr	r3, [r3, #0]
 8017026:	2b00      	cmp	r3, #0
 8017028:	d00a      	beq.n	8017040 <vTaskSuspend+0xa0>
	__asm volatile
 801702a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801702e:	f383 8811 	msr	BASEPRI, r3
 8017032:	f3bf 8f6f 	isb	sy
 8017036:	f3bf 8f4f 	dsb	sy
 801703a:	60bb      	str	r3, [r7, #8]
}
 801703c:	bf00      	nop
 801703e:	e7fe      	b.n	801703e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8017040:	4b10      	ldr	r3, [pc, #64]	; (8017084 <vTaskSuspend+0xe4>)
 8017042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017046:	601a      	str	r2, [r3, #0]
 8017048:	f3bf 8f4f 	dsb	sy
 801704c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017050:	e00b      	b.n	801706a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8017052:	4b09      	ldr	r3, [pc, #36]	; (8017078 <vTaskSuspend+0xd8>)
 8017054:	681a      	ldr	r2, [r3, #0]
 8017056:	4b0c      	ldr	r3, [pc, #48]	; (8017088 <vTaskSuspend+0xe8>)
 8017058:	681b      	ldr	r3, [r3, #0]
 801705a:	429a      	cmp	r2, r3
 801705c:	d103      	bne.n	8017066 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 801705e:	4b05      	ldr	r3, [pc, #20]	; (8017074 <vTaskSuspend+0xd4>)
 8017060:	2200      	movs	r2, #0
 8017062:	601a      	str	r2, [r3, #0]
	}
 8017064:	e001      	b.n	801706a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8017066:	f000 f9ed 	bl	8017444 <vTaskSwitchContext>
	}
 801706a:	bf00      	nop
 801706c:	3710      	adds	r7, #16
 801706e:	46bd      	mov	sp, r7
 8017070:	bd80      	pop	{r7, pc}
 8017072:	bf00      	nop
 8017074:	200017f0 	.word	0x200017f0
 8017078:	20001cb0 	.word	0x20001cb0
 801707c:	20001cd0 	.word	0x20001cd0
 8017080:	20001cec 	.word	0x20001cec
 8017084:	e000ed04 	.word	0xe000ed04
 8017088:	20001cc4 	.word	0x20001cc4

0801708c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801708c:	b580      	push	{r7, lr}
 801708e:	b08a      	sub	sp, #40	; 0x28
 8017090:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017092:	2300      	movs	r3, #0
 8017094:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017096:	2300      	movs	r3, #0
 8017098:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801709a:	463a      	mov	r2, r7
 801709c:	1d39      	adds	r1, r7, #4
 801709e:	f107 0308 	add.w	r3, r7, #8
 80170a2:	4618      	mov	r0, r3
 80170a4:	f7fe fbd8 	bl	8015858 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80170a8:	6839      	ldr	r1, [r7, #0]
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	68ba      	ldr	r2, [r7, #8]
 80170ae:	9202      	str	r2, [sp, #8]
 80170b0:	9301      	str	r3, [sp, #4]
 80170b2:	2300      	movs	r3, #0
 80170b4:	9300      	str	r3, [sp, #0]
 80170b6:	2300      	movs	r3, #0
 80170b8:	460a      	mov	r2, r1
 80170ba:	4921      	ldr	r1, [pc, #132]	; (8017140 <vTaskStartScheduler+0xb4>)
 80170bc:	4821      	ldr	r0, [pc, #132]	; (8017144 <vTaskStartScheduler+0xb8>)
 80170be:	f7ff fcc1 	bl	8016a44 <xTaskCreateStatic>
 80170c2:	4603      	mov	r3, r0
 80170c4:	4a20      	ldr	r2, [pc, #128]	; (8017148 <vTaskStartScheduler+0xbc>)
 80170c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80170c8:	4b1f      	ldr	r3, [pc, #124]	; (8017148 <vTaskStartScheduler+0xbc>)
 80170ca:	681b      	ldr	r3, [r3, #0]
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	d002      	beq.n	80170d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80170d0:	2301      	movs	r3, #1
 80170d2:	617b      	str	r3, [r7, #20]
 80170d4:	e001      	b.n	80170da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80170d6:	2300      	movs	r3, #0
 80170d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80170da:	697b      	ldr	r3, [r7, #20]
 80170dc:	2b01      	cmp	r3, #1
 80170de:	d102      	bne.n	80170e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80170e0:	f000 fdfa 	bl	8017cd8 <xTimerCreateTimerTask>
 80170e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80170e6:	697b      	ldr	r3, [r7, #20]
 80170e8:	2b01      	cmp	r3, #1
 80170ea:	d116      	bne.n	801711a <vTaskStartScheduler+0x8e>
	__asm volatile
 80170ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170f0:	f383 8811 	msr	BASEPRI, r3
 80170f4:	f3bf 8f6f 	isb	sy
 80170f8:	f3bf 8f4f 	dsb	sy
 80170fc:	613b      	str	r3, [r7, #16]
}
 80170fe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8017100:	4b12      	ldr	r3, [pc, #72]	; (801714c <vTaskStartScheduler+0xc0>)
 8017102:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017106:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8017108:	4b11      	ldr	r3, [pc, #68]	; (8017150 <vTaskStartScheduler+0xc4>)
 801710a:	2201      	movs	r2, #1
 801710c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801710e:	4b11      	ldr	r3, [pc, #68]	; (8017154 <vTaskStartScheduler+0xc8>)
 8017110:	2200      	movs	r2, #0
 8017112:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8017114:	f001 f9bc 	bl	8018490 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8017118:	e00e      	b.n	8017138 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801711a:	697b      	ldr	r3, [r7, #20]
 801711c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017120:	d10a      	bne.n	8017138 <vTaskStartScheduler+0xac>
	__asm volatile
 8017122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017126:	f383 8811 	msr	BASEPRI, r3
 801712a:	f3bf 8f6f 	isb	sy
 801712e:	f3bf 8f4f 	dsb	sy
 8017132:	60fb      	str	r3, [r7, #12]
}
 8017134:	bf00      	nop
 8017136:	e7fe      	b.n	8017136 <vTaskStartScheduler+0xaa>
}
 8017138:	bf00      	nop
 801713a:	3718      	adds	r7, #24
 801713c:	46bd      	mov	sp, r7
 801713e:	bd80      	pop	{r7, pc}
 8017140:	0801feac 	.word	0x0801feac
 8017144:	08017771 	.word	0x08017771
 8017148:	20001ce8 	.word	0x20001ce8
 801714c:	20001ce4 	.word	0x20001ce4
 8017150:	20001cd0 	.word	0x20001cd0
 8017154:	20001cc8 	.word	0x20001cc8

08017158 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017158:	b480      	push	{r7}
 801715a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801715c:	4b04      	ldr	r3, [pc, #16]	; (8017170 <vTaskSuspendAll+0x18>)
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	3301      	adds	r3, #1
 8017162:	4a03      	ldr	r2, [pc, #12]	; (8017170 <vTaskSuspendAll+0x18>)
 8017164:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8017166:	bf00      	nop
 8017168:	46bd      	mov	sp, r7
 801716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801716e:	4770      	bx	lr
 8017170:	20001cec 	.word	0x20001cec

08017174 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017174:	b580      	push	{r7, lr}
 8017176:	b084      	sub	sp, #16
 8017178:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801717a:	2300      	movs	r3, #0
 801717c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801717e:	2300      	movs	r3, #0
 8017180:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8017182:	4b42      	ldr	r3, [pc, #264]	; (801728c <xTaskResumeAll+0x118>)
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	2b00      	cmp	r3, #0
 8017188:	d10a      	bne.n	80171a0 <xTaskResumeAll+0x2c>
	__asm volatile
 801718a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801718e:	f383 8811 	msr	BASEPRI, r3
 8017192:	f3bf 8f6f 	isb	sy
 8017196:	f3bf 8f4f 	dsb	sy
 801719a:	603b      	str	r3, [r7, #0]
}
 801719c:	bf00      	nop
 801719e:	e7fe      	b.n	801719e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80171a0:	f001 fa18 	bl	80185d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80171a4:	4b39      	ldr	r3, [pc, #228]	; (801728c <xTaskResumeAll+0x118>)
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	3b01      	subs	r3, #1
 80171aa:	4a38      	ldr	r2, [pc, #224]	; (801728c <xTaskResumeAll+0x118>)
 80171ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80171ae:	4b37      	ldr	r3, [pc, #220]	; (801728c <xTaskResumeAll+0x118>)
 80171b0:	681b      	ldr	r3, [r3, #0]
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d162      	bne.n	801727c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80171b6:	4b36      	ldr	r3, [pc, #216]	; (8017290 <xTaskResumeAll+0x11c>)
 80171b8:	681b      	ldr	r3, [r3, #0]
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d05e      	beq.n	801727c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80171be:	e02f      	b.n	8017220 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80171c0:	4b34      	ldr	r3, [pc, #208]	; (8017294 <xTaskResumeAll+0x120>)
 80171c2:	68db      	ldr	r3, [r3, #12]
 80171c4:	68db      	ldr	r3, [r3, #12]
 80171c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	3318      	adds	r3, #24
 80171cc:	4618      	mov	r0, r3
 80171ce:	f7fe fc01 	bl	80159d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	3304      	adds	r3, #4
 80171d6:	4618      	mov	r0, r3
 80171d8:	f7fe fbfc 	bl	80159d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80171e0:	4b2d      	ldr	r3, [pc, #180]	; (8017298 <xTaskResumeAll+0x124>)
 80171e2:	681b      	ldr	r3, [r3, #0]
 80171e4:	429a      	cmp	r2, r3
 80171e6:	d903      	bls.n	80171f0 <xTaskResumeAll+0x7c>
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171ec:	4a2a      	ldr	r2, [pc, #168]	; (8017298 <xTaskResumeAll+0x124>)
 80171ee:	6013      	str	r3, [r2, #0]
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80171f4:	4613      	mov	r3, r2
 80171f6:	009b      	lsls	r3, r3, #2
 80171f8:	4413      	add	r3, r2
 80171fa:	009b      	lsls	r3, r3, #2
 80171fc:	4a27      	ldr	r2, [pc, #156]	; (801729c <xTaskResumeAll+0x128>)
 80171fe:	441a      	add	r2, r3
 8017200:	68fb      	ldr	r3, [r7, #12]
 8017202:	3304      	adds	r3, #4
 8017204:	4619      	mov	r1, r3
 8017206:	4610      	mov	r0, r2
 8017208:	f7fe fb87 	bl	801591a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017210:	4b23      	ldr	r3, [pc, #140]	; (80172a0 <xTaskResumeAll+0x12c>)
 8017212:	681b      	ldr	r3, [r3, #0]
 8017214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017216:	429a      	cmp	r2, r3
 8017218:	d302      	bcc.n	8017220 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801721a:	4b22      	ldr	r3, [pc, #136]	; (80172a4 <xTaskResumeAll+0x130>)
 801721c:	2201      	movs	r2, #1
 801721e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017220:	4b1c      	ldr	r3, [pc, #112]	; (8017294 <xTaskResumeAll+0x120>)
 8017222:	681b      	ldr	r3, [r3, #0]
 8017224:	2b00      	cmp	r3, #0
 8017226:	d1cb      	bne.n	80171c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8017228:	68fb      	ldr	r3, [r7, #12]
 801722a:	2b00      	cmp	r3, #0
 801722c:	d001      	beq.n	8017232 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801722e:	f000 fb55 	bl	80178dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8017232:	4b1d      	ldr	r3, [pc, #116]	; (80172a8 <xTaskResumeAll+0x134>)
 8017234:	681b      	ldr	r3, [r3, #0]
 8017236:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	2b00      	cmp	r3, #0
 801723c:	d010      	beq.n	8017260 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801723e:	f000 f847 	bl	80172d0 <xTaskIncrementTick>
 8017242:	4603      	mov	r3, r0
 8017244:	2b00      	cmp	r3, #0
 8017246:	d002      	beq.n	801724e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8017248:	4b16      	ldr	r3, [pc, #88]	; (80172a4 <xTaskResumeAll+0x130>)
 801724a:	2201      	movs	r2, #1
 801724c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	3b01      	subs	r3, #1
 8017252:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	2b00      	cmp	r3, #0
 8017258:	d1f1      	bne.n	801723e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801725a:	4b13      	ldr	r3, [pc, #76]	; (80172a8 <xTaskResumeAll+0x134>)
 801725c:	2200      	movs	r2, #0
 801725e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8017260:	4b10      	ldr	r3, [pc, #64]	; (80172a4 <xTaskResumeAll+0x130>)
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	2b00      	cmp	r3, #0
 8017266:	d009      	beq.n	801727c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017268:	2301      	movs	r3, #1
 801726a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801726c:	4b0f      	ldr	r3, [pc, #60]	; (80172ac <xTaskResumeAll+0x138>)
 801726e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017272:	601a      	str	r2, [r3, #0]
 8017274:	f3bf 8f4f 	dsb	sy
 8017278:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801727c:	f001 f9da 	bl	8018634 <vPortExitCritical>

	return xAlreadyYielded;
 8017280:	68bb      	ldr	r3, [r7, #8]
}
 8017282:	4618      	mov	r0, r3
 8017284:	3710      	adds	r7, #16
 8017286:	46bd      	mov	sp, r7
 8017288:	bd80      	pop	{r7, pc}
 801728a:	bf00      	nop
 801728c:	20001cec 	.word	0x20001cec
 8017290:	20001cc4 	.word	0x20001cc4
 8017294:	20001c84 	.word	0x20001c84
 8017298:	20001ccc 	.word	0x20001ccc
 801729c:	200017f4 	.word	0x200017f4
 80172a0:	200017f0 	.word	0x200017f0
 80172a4:	20001cd8 	.word	0x20001cd8
 80172a8:	20001cd4 	.word	0x20001cd4
 80172ac:	e000ed04 	.word	0xe000ed04

080172b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80172b0:	b480      	push	{r7}
 80172b2:	b083      	sub	sp, #12
 80172b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80172b6:	4b05      	ldr	r3, [pc, #20]	; (80172cc <xTaskGetTickCount+0x1c>)
 80172b8:	681b      	ldr	r3, [r3, #0]
 80172ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80172bc:	687b      	ldr	r3, [r7, #4]
}
 80172be:	4618      	mov	r0, r3
 80172c0:	370c      	adds	r7, #12
 80172c2:	46bd      	mov	sp, r7
 80172c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172c8:	4770      	bx	lr
 80172ca:	bf00      	nop
 80172cc:	20001cc8 	.word	0x20001cc8

080172d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80172d0:	b580      	push	{r7, lr}
 80172d2:	b086      	sub	sp, #24
 80172d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80172d6:	2300      	movs	r3, #0
 80172d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80172da:	4b4f      	ldr	r3, [pc, #316]	; (8017418 <xTaskIncrementTick+0x148>)
 80172dc:	681b      	ldr	r3, [r3, #0]
 80172de:	2b00      	cmp	r3, #0
 80172e0:	f040 808f 	bne.w	8017402 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80172e4:	4b4d      	ldr	r3, [pc, #308]	; (801741c <xTaskIncrementTick+0x14c>)
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	3301      	adds	r3, #1
 80172ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80172ec:	4a4b      	ldr	r2, [pc, #300]	; (801741c <xTaskIncrementTick+0x14c>)
 80172ee:	693b      	ldr	r3, [r7, #16]
 80172f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80172f2:	693b      	ldr	r3, [r7, #16]
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d120      	bne.n	801733a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80172f8:	4b49      	ldr	r3, [pc, #292]	; (8017420 <xTaskIncrementTick+0x150>)
 80172fa:	681b      	ldr	r3, [r3, #0]
 80172fc:	681b      	ldr	r3, [r3, #0]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d00a      	beq.n	8017318 <xTaskIncrementTick+0x48>
	__asm volatile
 8017302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017306:	f383 8811 	msr	BASEPRI, r3
 801730a:	f3bf 8f6f 	isb	sy
 801730e:	f3bf 8f4f 	dsb	sy
 8017312:	603b      	str	r3, [r7, #0]
}
 8017314:	bf00      	nop
 8017316:	e7fe      	b.n	8017316 <xTaskIncrementTick+0x46>
 8017318:	4b41      	ldr	r3, [pc, #260]	; (8017420 <xTaskIncrementTick+0x150>)
 801731a:	681b      	ldr	r3, [r3, #0]
 801731c:	60fb      	str	r3, [r7, #12]
 801731e:	4b41      	ldr	r3, [pc, #260]	; (8017424 <xTaskIncrementTick+0x154>)
 8017320:	681b      	ldr	r3, [r3, #0]
 8017322:	4a3f      	ldr	r2, [pc, #252]	; (8017420 <xTaskIncrementTick+0x150>)
 8017324:	6013      	str	r3, [r2, #0]
 8017326:	4a3f      	ldr	r2, [pc, #252]	; (8017424 <xTaskIncrementTick+0x154>)
 8017328:	68fb      	ldr	r3, [r7, #12]
 801732a:	6013      	str	r3, [r2, #0]
 801732c:	4b3e      	ldr	r3, [pc, #248]	; (8017428 <xTaskIncrementTick+0x158>)
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	3301      	adds	r3, #1
 8017332:	4a3d      	ldr	r2, [pc, #244]	; (8017428 <xTaskIncrementTick+0x158>)
 8017334:	6013      	str	r3, [r2, #0]
 8017336:	f000 fad1 	bl	80178dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801733a:	4b3c      	ldr	r3, [pc, #240]	; (801742c <xTaskIncrementTick+0x15c>)
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	693a      	ldr	r2, [r7, #16]
 8017340:	429a      	cmp	r2, r3
 8017342:	d349      	bcc.n	80173d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017344:	4b36      	ldr	r3, [pc, #216]	; (8017420 <xTaskIncrementTick+0x150>)
 8017346:	681b      	ldr	r3, [r3, #0]
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	2b00      	cmp	r3, #0
 801734c:	d104      	bne.n	8017358 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801734e:	4b37      	ldr	r3, [pc, #220]	; (801742c <xTaskIncrementTick+0x15c>)
 8017350:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017354:	601a      	str	r2, [r3, #0]
					break;
 8017356:	e03f      	b.n	80173d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017358:	4b31      	ldr	r3, [pc, #196]	; (8017420 <xTaskIncrementTick+0x150>)
 801735a:	681b      	ldr	r3, [r3, #0]
 801735c:	68db      	ldr	r3, [r3, #12]
 801735e:	68db      	ldr	r3, [r3, #12]
 8017360:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017362:	68bb      	ldr	r3, [r7, #8]
 8017364:	685b      	ldr	r3, [r3, #4]
 8017366:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017368:	693a      	ldr	r2, [r7, #16]
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	429a      	cmp	r2, r3
 801736e:	d203      	bcs.n	8017378 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017370:	4a2e      	ldr	r2, [pc, #184]	; (801742c <xTaskIncrementTick+0x15c>)
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017376:	e02f      	b.n	80173d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017378:	68bb      	ldr	r3, [r7, #8]
 801737a:	3304      	adds	r3, #4
 801737c:	4618      	mov	r0, r3
 801737e:	f7fe fb29 	bl	80159d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017382:	68bb      	ldr	r3, [r7, #8]
 8017384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017386:	2b00      	cmp	r3, #0
 8017388:	d004      	beq.n	8017394 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801738a:	68bb      	ldr	r3, [r7, #8]
 801738c:	3318      	adds	r3, #24
 801738e:	4618      	mov	r0, r3
 8017390:	f7fe fb20 	bl	80159d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017394:	68bb      	ldr	r3, [r7, #8]
 8017396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017398:	4b25      	ldr	r3, [pc, #148]	; (8017430 <xTaskIncrementTick+0x160>)
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	429a      	cmp	r2, r3
 801739e:	d903      	bls.n	80173a8 <xTaskIncrementTick+0xd8>
 80173a0:	68bb      	ldr	r3, [r7, #8]
 80173a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173a4:	4a22      	ldr	r2, [pc, #136]	; (8017430 <xTaskIncrementTick+0x160>)
 80173a6:	6013      	str	r3, [r2, #0]
 80173a8:	68bb      	ldr	r3, [r7, #8]
 80173aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173ac:	4613      	mov	r3, r2
 80173ae:	009b      	lsls	r3, r3, #2
 80173b0:	4413      	add	r3, r2
 80173b2:	009b      	lsls	r3, r3, #2
 80173b4:	4a1f      	ldr	r2, [pc, #124]	; (8017434 <xTaskIncrementTick+0x164>)
 80173b6:	441a      	add	r2, r3
 80173b8:	68bb      	ldr	r3, [r7, #8]
 80173ba:	3304      	adds	r3, #4
 80173bc:	4619      	mov	r1, r3
 80173be:	4610      	mov	r0, r2
 80173c0:	f7fe faab 	bl	801591a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80173c4:	68bb      	ldr	r3, [r7, #8]
 80173c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173c8:	4b1b      	ldr	r3, [pc, #108]	; (8017438 <xTaskIncrementTick+0x168>)
 80173ca:	681b      	ldr	r3, [r3, #0]
 80173cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173ce:	429a      	cmp	r2, r3
 80173d0:	d3b8      	bcc.n	8017344 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80173d2:	2301      	movs	r3, #1
 80173d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80173d6:	e7b5      	b.n	8017344 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80173d8:	4b17      	ldr	r3, [pc, #92]	; (8017438 <xTaskIncrementTick+0x168>)
 80173da:	681b      	ldr	r3, [r3, #0]
 80173dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173de:	4915      	ldr	r1, [pc, #84]	; (8017434 <xTaskIncrementTick+0x164>)
 80173e0:	4613      	mov	r3, r2
 80173e2:	009b      	lsls	r3, r3, #2
 80173e4:	4413      	add	r3, r2
 80173e6:	009b      	lsls	r3, r3, #2
 80173e8:	440b      	add	r3, r1
 80173ea:	681b      	ldr	r3, [r3, #0]
 80173ec:	2b01      	cmp	r3, #1
 80173ee:	d901      	bls.n	80173f4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80173f0:	2301      	movs	r3, #1
 80173f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80173f4:	4b11      	ldr	r3, [pc, #68]	; (801743c <xTaskIncrementTick+0x16c>)
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d007      	beq.n	801740c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80173fc:	2301      	movs	r3, #1
 80173fe:	617b      	str	r3, [r7, #20]
 8017400:	e004      	b.n	801740c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8017402:	4b0f      	ldr	r3, [pc, #60]	; (8017440 <xTaskIncrementTick+0x170>)
 8017404:	681b      	ldr	r3, [r3, #0]
 8017406:	3301      	adds	r3, #1
 8017408:	4a0d      	ldr	r2, [pc, #52]	; (8017440 <xTaskIncrementTick+0x170>)
 801740a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801740c:	697b      	ldr	r3, [r7, #20]
}
 801740e:	4618      	mov	r0, r3
 8017410:	3718      	adds	r7, #24
 8017412:	46bd      	mov	sp, r7
 8017414:	bd80      	pop	{r7, pc}
 8017416:	bf00      	nop
 8017418:	20001cec 	.word	0x20001cec
 801741c:	20001cc8 	.word	0x20001cc8
 8017420:	20001c7c 	.word	0x20001c7c
 8017424:	20001c80 	.word	0x20001c80
 8017428:	20001cdc 	.word	0x20001cdc
 801742c:	20001ce4 	.word	0x20001ce4
 8017430:	20001ccc 	.word	0x20001ccc
 8017434:	200017f4 	.word	0x200017f4
 8017438:	200017f0 	.word	0x200017f0
 801743c:	20001cd8 	.word	0x20001cd8
 8017440:	20001cd4 	.word	0x20001cd4

08017444 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017444:	b480      	push	{r7}
 8017446:	b085      	sub	sp, #20
 8017448:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801744a:	4b28      	ldr	r3, [pc, #160]	; (80174ec <vTaskSwitchContext+0xa8>)
 801744c:	681b      	ldr	r3, [r3, #0]
 801744e:	2b00      	cmp	r3, #0
 8017450:	d003      	beq.n	801745a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017452:	4b27      	ldr	r3, [pc, #156]	; (80174f0 <vTaskSwitchContext+0xac>)
 8017454:	2201      	movs	r2, #1
 8017456:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017458:	e041      	b.n	80174de <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801745a:	4b25      	ldr	r3, [pc, #148]	; (80174f0 <vTaskSwitchContext+0xac>)
 801745c:	2200      	movs	r2, #0
 801745e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017460:	4b24      	ldr	r3, [pc, #144]	; (80174f4 <vTaskSwitchContext+0xb0>)
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	60fb      	str	r3, [r7, #12]
 8017466:	e010      	b.n	801748a <vTaskSwitchContext+0x46>
 8017468:	68fb      	ldr	r3, [r7, #12]
 801746a:	2b00      	cmp	r3, #0
 801746c:	d10a      	bne.n	8017484 <vTaskSwitchContext+0x40>
	__asm volatile
 801746e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017472:	f383 8811 	msr	BASEPRI, r3
 8017476:	f3bf 8f6f 	isb	sy
 801747a:	f3bf 8f4f 	dsb	sy
 801747e:	607b      	str	r3, [r7, #4]
}
 8017480:	bf00      	nop
 8017482:	e7fe      	b.n	8017482 <vTaskSwitchContext+0x3e>
 8017484:	68fb      	ldr	r3, [r7, #12]
 8017486:	3b01      	subs	r3, #1
 8017488:	60fb      	str	r3, [r7, #12]
 801748a:	491b      	ldr	r1, [pc, #108]	; (80174f8 <vTaskSwitchContext+0xb4>)
 801748c:	68fa      	ldr	r2, [r7, #12]
 801748e:	4613      	mov	r3, r2
 8017490:	009b      	lsls	r3, r3, #2
 8017492:	4413      	add	r3, r2
 8017494:	009b      	lsls	r3, r3, #2
 8017496:	440b      	add	r3, r1
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	2b00      	cmp	r3, #0
 801749c:	d0e4      	beq.n	8017468 <vTaskSwitchContext+0x24>
 801749e:	68fa      	ldr	r2, [r7, #12]
 80174a0:	4613      	mov	r3, r2
 80174a2:	009b      	lsls	r3, r3, #2
 80174a4:	4413      	add	r3, r2
 80174a6:	009b      	lsls	r3, r3, #2
 80174a8:	4a13      	ldr	r2, [pc, #76]	; (80174f8 <vTaskSwitchContext+0xb4>)
 80174aa:	4413      	add	r3, r2
 80174ac:	60bb      	str	r3, [r7, #8]
 80174ae:	68bb      	ldr	r3, [r7, #8]
 80174b0:	685b      	ldr	r3, [r3, #4]
 80174b2:	685a      	ldr	r2, [r3, #4]
 80174b4:	68bb      	ldr	r3, [r7, #8]
 80174b6:	605a      	str	r2, [r3, #4]
 80174b8:	68bb      	ldr	r3, [r7, #8]
 80174ba:	685a      	ldr	r2, [r3, #4]
 80174bc:	68bb      	ldr	r3, [r7, #8]
 80174be:	3308      	adds	r3, #8
 80174c0:	429a      	cmp	r2, r3
 80174c2:	d104      	bne.n	80174ce <vTaskSwitchContext+0x8a>
 80174c4:	68bb      	ldr	r3, [r7, #8]
 80174c6:	685b      	ldr	r3, [r3, #4]
 80174c8:	685a      	ldr	r2, [r3, #4]
 80174ca:	68bb      	ldr	r3, [r7, #8]
 80174cc:	605a      	str	r2, [r3, #4]
 80174ce:	68bb      	ldr	r3, [r7, #8]
 80174d0:	685b      	ldr	r3, [r3, #4]
 80174d2:	68db      	ldr	r3, [r3, #12]
 80174d4:	4a09      	ldr	r2, [pc, #36]	; (80174fc <vTaskSwitchContext+0xb8>)
 80174d6:	6013      	str	r3, [r2, #0]
 80174d8:	4a06      	ldr	r2, [pc, #24]	; (80174f4 <vTaskSwitchContext+0xb0>)
 80174da:	68fb      	ldr	r3, [r7, #12]
 80174dc:	6013      	str	r3, [r2, #0]
}
 80174de:	bf00      	nop
 80174e0:	3714      	adds	r7, #20
 80174e2:	46bd      	mov	sp, r7
 80174e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174e8:	4770      	bx	lr
 80174ea:	bf00      	nop
 80174ec:	20001cec 	.word	0x20001cec
 80174f0:	20001cd8 	.word	0x20001cd8
 80174f4:	20001ccc 	.word	0x20001ccc
 80174f8:	200017f4 	.word	0x200017f4
 80174fc:	200017f0 	.word	0x200017f0

08017500 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017500:	b580      	push	{r7, lr}
 8017502:	b084      	sub	sp, #16
 8017504:	af00      	add	r7, sp, #0
 8017506:	6078      	str	r0, [r7, #4]
 8017508:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	2b00      	cmp	r3, #0
 801750e:	d10a      	bne.n	8017526 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8017510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017514:	f383 8811 	msr	BASEPRI, r3
 8017518:	f3bf 8f6f 	isb	sy
 801751c:	f3bf 8f4f 	dsb	sy
 8017520:	60fb      	str	r3, [r7, #12]
}
 8017522:	bf00      	nop
 8017524:	e7fe      	b.n	8017524 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017526:	4b07      	ldr	r3, [pc, #28]	; (8017544 <vTaskPlaceOnEventList+0x44>)
 8017528:	681b      	ldr	r3, [r3, #0]
 801752a:	3318      	adds	r3, #24
 801752c:	4619      	mov	r1, r3
 801752e:	6878      	ldr	r0, [r7, #4]
 8017530:	f7fe fa17 	bl	8015962 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017534:	2101      	movs	r1, #1
 8017536:	6838      	ldr	r0, [r7, #0]
 8017538:	f000 fb7a 	bl	8017c30 <prvAddCurrentTaskToDelayedList>
}
 801753c:	bf00      	nop
 801753e:	3710      	adds	r7, #16
 8017540:	46bd      	mov	sp, r7
 8017542:	bd80      	pop	{r7, pc}
 8017544:	200017f0 	.word	0x200017f0

08017548 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017548:	b580      	push	{r7, lr}
 801754a:	b086      	sub	sp, #24
 801754c:	af00      	add	r7, sp, #0
 801754e:	60f8      	str	r0, [r7, #12]
 8017550:	60b9      	str	r1, [r7, #8]
 8017552:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	2b00      	cmp	r3, #0
 8017558:	d10a      	bne.n	8017570 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801755a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801755e:	f383 8811 	msr	BASEPRI, r3
 8017562:	f3bf 8f6f 	isb	sy
 8017566:	f3bf 8f4f 	dsb	sy
 801756a:	617b      	str	r3, [r7, #20]
}
 801756c:	bf00      	nop
 801756e:	e7fe      	b.n	801756e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017570:	4b0a      	ldr	r3, [pc, #40]	; (801759c <vTaskPlaceOnEventListRestricted+0x54>)
 8017572:	681b      	ldr	r3, [r3, #0]
 8017574:	3318      	adds	r3, #24
 8017576:	4619      	mov	r1, r3
 8017578:	68f8      	ldr	r0, [r7, #12]
 801757a:	f7fe f9ce 	bl	801591a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	2b00      	cmp	r3, #0
 8017582:	d002      	beq.n	801758a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8017584:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017588:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801758a:	6879      	ldr	r1, [r7, #4]
 801758c:	68b8      	ldr	r0, [r7, #8]
 801758e:	f000 fb4f 	bl	8017c30 <prvAddCurrentTaskToDelayedList>
	}
 8017592:	bf00      	nop
 8017594:	3718      	adds	r7, #24
 8017596:	46bd      	mov	sp, r7
 8017598:	bd80      	pop	{r7, pc}
 801759a:	bf00      	nop
 801759c:	200017f0 	.word	0x200017f0

080175a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80175a0:	b580      	push	{r7, lr}
 80175a2:	b086      	sub	sp, #24
 80175a4:	af00      	add	r7, sp, #0
 80175a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	68db      	ldr	r3, [r3, #12]
 80175ac:	68db      	ldr	r3, [r3, #12]
 80175ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80175b0:	693b      	ldr	r3, [r7, #16]
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d10a      	bne.n	80175cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80175b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175ba:	f383 8811 	msr	BASEPRI, r3
 80175be:	f3bf 8f6f 	isb	sy
 80175c2:	f3bf 8f4f 	dsb	sy
 80175c6:	60fb      	str	r3, [r7, #12]
}
 80175c8:	bf00      	nop
 80175ca:	e7fe      	b.n	80175ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80175cc:	693b      	ldr	r3, [r7, #16]
 80175ce:	3318      	adds	r3, #24
 80175d0:	4618      	mov	r0, r3
 80175d2:	f7fe f9ff 	bl	80159d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80175d6:	4b1e      	ldr	r3, [pc, #120]	; (8017650 <xTaskRemoveFromEventList+0xb0>)
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d11d      	bne.n	801761a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80175de:	693b      	ldr	r3, [r7, #16]
 80175e0:	3304      	adds	r3, #4
 80175e2:	4618      	mov	r0, r3
 80175e4:	f7fe f9f6 	bl	80159d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80175e8:	693b      	ldr	r3, [r7, #16]
 80175ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80175ec:	4b19      	ldr	r3, [pc, #100]	; (8017654 <xTaskRemoveFromEventList+0xb4>)
 80175ee:	681b      	ldr	r3, [r3, #0]
 80175f0:	429a      	cmp	r2, r3
 80175f2:	d903      	bls.n	80175fc <xTaskRemoveFromEventList+0x5c>
 80175f4:	693b      	ldr	r3, [r7, #16]
 80175f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175f8:	4a16      	ldr	r2, [pc, #88]	; (8017654 <xTaskRemoveFromEventList+0xb4>)
 80175fa:	6013      	str	r3, [r2, #0]
 80175fc:	693b      	ldr	r3, [r7, #16]
 80175fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017600:	4613      	mov	r3, r2
 8017602:	009b      	lsls	r3, r3, #2
 8017604:	4413      	add	r3, r2
 8017606:	009b      	lsls	r3, r3, #2
 8017608:	4a13      	ldr	r2, [pc, #76]	; (8017658 <xTaskRemoveFromEventList+0xb8>)
 801760a:	441a      	add	r2, r3
 801760c:	693b      	ldr	r3, [r7, #16]
 801760e:	3304      	adds	r3, #4
 8017610:	4619      	mov	r1, r3
 8017612:	4610      	mov	r0, r2
 8017614:	f7fe f981 	bl	801591a <vListInsertEnd>
 8017618:	e005      	b.n	8017626 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801761a:	693b      	ldr	r3, [r7, #16]
 801761c:	3318      	adds	r3, #24
 801761e:	4619      	mov	r1, r3
 8017620:	480e      	ldr	r0, [pc, #56]	; (801765c <xTaskRemoveFromEventList+0xbc>)
 8017622:	f7fe f97a 	bl	801591a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017626:	693b      	ldr	r3, [r7, #16]
 8017628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801762a:	4b0d      	ldr	r3, [pc, #52]	; (8017660 <xTaskRemoveFromEventList+0xc0>)
 801762c:	681b      	ldr	r3, [r3, #0]
 801762e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017630:	429a      	cmp	r2, r3
 8017632:	d905      	bls.n	8017640 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8017634:	2301      	movs	r3, #1
 8017636:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8017638:	4b0a      	ldr	r3, [pc, #40]	; (8017664 <xTaskRemoveFromEventList+0xc4>)
 801763a:	2201      	movs	r2, #1
 801763c:	601a      	str	r2, [r3, #0]
 801763e:	e001      	b.n	8017644 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8017640:	2300      	movs	r3, #0
 8017642:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8017644:	697b      	ldr	r3, [r7, #20]
}
 8017646:	4618      	mov	r0, r3
 8017648:	3718      	adds	r7, #24
 801764a:	46bd      	mov	sp, r7
 801764c:	bd80      	pop	{r7, pc}
 801764e:	bf00      	nop
 8017650:	20001cec 	.word	0x20001cec
 8017654:	20001ccc 	.word	0x20001ccc
 8017658:	200017f4 	.word	0x200017f4
 801765c:	20001c84 	.word	0x20001c84
 8017660:	200017f0 	.word	0x200017f0
 8017664:	20001cd8 	.word	0x20001cd8

08017668 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017668:	b480      	push	{r7}
 801766a:	b083      	sub	sp, #12
 801766c:	af00      	add	r7, sp, #0
 801766e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017670:	4b06      	ldr	r3, [pc, #24]	; (801768c <vTaskInternalSetTimeOutState+0x24>)
 8017672:	681a      	ldr	r2, [r3, #0]
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017678:	4b05      	ldr	r3, [pc, #20]	; (8017690 <vTaskInternalSetTimeOutState+0x28>)
 801767a:	681a      	ldr	r2, [r3, #0]
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	605a      	str	r2, [r3, #4]
}
 8017680:	bf00      	nop
 8017682:	370c      	adds	r7, #12
 8017684:	46bd      	mov	sp, r7
 8017686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801768a:	4770      	bx	lr
 801768c:	20001cdc 	.word	0x20001cdc
 8017690:	20001cc8 	.word	0x20001cc8

08017694 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017694:	b580      	push	{r7, lr}
 8017696:	b088      	sub	sp, #32
 8017698:	af00      	add	r7, sp, #0
 801769a:	6078      	str	r0, [r7, #4]
 801769c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d10a      	bne.n	80176ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80176a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176a8:	f383 8811 	msr	BASEPRI, r3
 80176ac:	f3bf 8f6f 	isb	sy
 80176b0:	f3bf 8f4f 	dsb	sy
 80176b4:	613b      	str	r3, [r7, #16]
}
 80176b6:	bf00      	nop
 80176b8:	e7fe      	b.n	80176b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80176ba:	683b      	ldr	r3, [r7, #0]
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d10a      	bne.n	80176d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80176c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176c4:	f383 8811 	msr	BASEPRI, r3
 80176c8:	f3bf 8f6f 	isb	sy
 80176cc:	f3bf 8f4f 	dsb	sy
 80176d0:	60fb      	str	r3, [r7, #12]
}
 80176d2:	bf00      	nop
 80176d4:	e7fe      	b.n	80176d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80176d6:	f000 ff7d 	bl	80185d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80176da:	4b1d      	ldr	r3, [pc, #116]	; (8017750 <xTaskCheckForTimeOut+0xbc>)
 80176dc:	681b      	ldr	r3, [r3, #0]
 80176de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	685b      	ldr	r3, [r3, #4]
 80176e4:	69ba      	ldr	r2, [r7, #24]
 80176e6:	1ad3      	subs	r3, r2, r3
 80176e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80176ea:	683b      	ldr	r3, [r7, #0]
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80176f2:	d102      	bne.n	80176fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80176f4:	2300      	movs	r3, #0
 80176f6:	61fb      	str	r3, [r7, #28]
 80176f8:	e023      	b.n	8017742 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	681a      	ldr	r2, [r3, #0]
 80176fe:	4b15      	ldr	r3, [pc, #84]	; (8017754 <xTaskCheckForTimeOut+0xc0>)
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	429a      	cmp	r2, r3
 8017704:	d007      	beq.n	8017716 <xTaskCheckForTimeOut+0x82>
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	685b      	ldr	r3, [r3, #4]
 801770a:	69ba      	ldr	r2, [r7, #24]
 801770c:	429a      	cmp	r2, r3
 801770e:	d302      	bcc.n	8017716 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017710:	2301      	movs	r3, #1
 8017712:	61fb      	str	r3, [r7, #28]
 8017714:	e015      	b.n	8017742 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017716:	683b      	ldr	r3, [r7, #0]
 8017718:	681b      	ldr	r3, [r3, #0]
 801771a:	697a      	ldr	r2, [r7, #20]
 801771c:	429a      	cmp	r2, r3
 801771e:	d20b      	bcs.n	8017738 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017720:	683b      	ldr	r3, [r7, #0]
 8017722:	681a      	ldr	r2, [r3, #0]
 8017724:	697b      	ldr	r3, [r7, #20]
 8017726:	1ad2      	subs	r2, r2, r3
 8017728:	683b      	ldr	r3, [r7, #0]
 801772a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801772c:	6878      	ldr	r0, [r7, #4]
 801772e:	f7ff ff9b 	bl	8017668 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8017732:	2300      	movs	r3, #0
 8017734:	61fb      	str	r3, [r7, #28]
 8017736:	e004      	b.n	8017742 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8017738:	683b      	ldr	r3, [r7, #0]
 801773a:	2200      	movs	r2, #0
 801773c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801773e:	2301      	movs	r3, #1
 8017740:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8017742:	f000 ff77 	bl	8018634 <vPortExitCritical>

	return xReturn;
 8017746:	69fb      	ldr	r3, [r7, #28]
}
 8017748:	4618      	mov	r0, r3
 801774a:	3720      	adds	r7, #32
 801774c:	46bd      	mov	sp, r7
 801774e:	bd80      	pop	{r7, pc}
 8017750:	20001cc8 	.word	0x20001cc8
 8017754:	20001cdc 	.word	0x20001cdc

08017758 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017758:	b480      	push	{r7}
 801775a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801775c:	4b03      	ldr	r3, [pc, #12]	; (801776c <vTaskMissedYield+0x14>)
 801775e:	2201      	movs	r2, #1
 8017760:	601a      	str	r2, [r3, #0]
}
 8017762:	bf00      	nop
 8017764:	46bd      	mov	sp, r7
 8017766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801776a:	4770      	bx	lr
 801776c:	20001cd8 	.word	0x20001cd8

08017770 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017770:	b580      	push	{r7, lr}
 8017772:	b082      	sub	sp, #8
 8017774:	af00      	add	r7, sp, #0
 8017776:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017778:	f000 f852 	bl	8017820 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801777c:	4b06      	ldr	r3, [pc, #24]	; (8017798 <prvIdleTask+0x28>)
 801777e:	681b      	ldr	r3, [r3, #0]
 8017780:	2b01      	cmp	r3, #1
 8017782:	d9f9      	bls.n	8017778 <prvIdleTask+0x8>
			{
				taskYIELD();
 8017784:	4b05      	ldr	r3, [pc, #20]	; (801779c <prvIdleTask+0x2c>)
 8017786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801778a:	601a      	str	r2, [r3, #0]
 801778c:	f3bf 8f4f 	dsb	sy
 8017790:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8017794:	e7f0      	b.n	8017778 <prvIdleTask+0x8>
 8017796:	bf00      	nop
 8017798:	200017f4 	.word	0x200017f4
 801779c:	e000ed04 	.word	0xe000ed04

080177a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80177a0:	b580      	push	{r7, lr}
 80177a2:	b082      	sub	sp, #8
 80177a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80177a6:	2300      	movs	r3, #0
 80177a8:	607b      	str	r3, [r7, #4]
 80177aa:	e00c      	b.n	80177c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80177ac:	687a      	ldr	r2, [r7, #4]
 80177ae:	4613      	mov	r3, r2
 80177b0:	009b      	lsls	r3, r3, #2
 80177b2:	4413      	add	r3, r2
 80177b4:	009b      	lsls	r3, r3, #2
 80177b6:	4a12      	ldr	r2, [pc, #72]	; (8017800 <prvInitialiseTaskLists+0x60>)
 80177b8:	4413      	add	r3, r2
 80177ba:	4618      	mov	r0, r3
 80177bc:	f7fe f880 	bl	80158c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	3301      	adds	r3, #1
 80177c4:	607b      	str	r3, [r7, #4]
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	2b37      	cmp	r3, #55	; 0x37
 80177ca:	d9ef      	bls.n	80177ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80177cc:	480d      	ldr	r0, [pc, #52]	; (8017804 <prvInitialiseTaskLists+0x64>)
 80177ce:	f7fe f877 	bl	80158c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80177d2:	480d      	ldr	r0, [pc, #52]	; (8017808 <prvInitialiseTaskLists+0x68>)
 80177d4:	f7fe f874 	bl	80158c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80177d8:	480c      	ldr	r0, [pc, #48]	; (801780c <prvInitialiseTaskLists+0x6c>)
 80177da:	f7fe f871 	bl	80158c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80177de:	480c      	ldr	r0, [pc, #48]	; (8017810 <prvInitialiseTaskLists+0x70>)
 80177e0:	f7fe f86e 	bl	80158c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80177e4:	480b      	ldr	r0, [pc, #44]	; (8017814 <prvInitialiseTaskLists+0x74>)
 80177e6:	f7fe f86b 	bl	80158c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80177ea:	4b0b      	ldr	r3, [pc, #44]	; (8017818 <prvInitialiseTaskLists+0x78>)
 80177ec:	4a05      	ldr	r2, [pc, #20]	; (8017804 <prvInitialiseTaskLists+0x64>)
 80177ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80177f0:	4b0a      	ldr	r3, [pc, #40]	; (801781c <prvInitialiseTaskLists+0x7c>)
 80177f2:	4a05      	ldr	r2, [pc, #20]	; (8017808 <prvInitialiseTaskLists+0x68>)
 80177f4:	601a      	str	r2, [r3, #0]
}
 80177f6:	bf00      	nop
 80177f8:	3708      	adds	r7, #8
 80177fa:	46bd      	mov	sp, r7
 80177fc:	bd80      	pop	{r7, pc}
 80177fe:	bf00      	nop
 8017800:	200017f4 	.word	0x200017f4
 8017804:	20001c54 	.word	0x20001c54
 8017808:	20001c68 	.word	0x20001c68
 801780c:	20001c84 	.word	0x20001c84
 8017810:	20001c98 	.word	0x20001c98
 8017814:	20001cb0 	.word	0x20001cb0
 8017818:	20001c7c 	.word	0x20001c7c
 801781c:	20001c80 	.word	0x20001c80

08017820 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017820:	b580      	push	{r7, lr}
 8017822:	b082      	sub	sp, #8
 8017824:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017826:	e019      	b.n	801785c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8017828:	f000 fed4 	bl	80185d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801782c:	4b10      	ldr	r3, [pc, #64]	; (8017870 <prvCheckTasksWaitingTermination+0x50>)
 801782e:	68db      	ldr	r3, [r3, #12]
 8017830:	68db      	ldr	r3, [r3, #12]
 8017832:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	3304      	adds	r3, #4
 8017838:	4618      	mov	r0, r3
 801783a:	f7fe f8cb 	bl	80159d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801783e:	4b0d      	ldr	r3, [pc, #52]	; (8017874 <prvCheckTasksWaitingTermination+0x54>)
 8017840:	681b      	ldr	r3, [r3, #0]
 8017842:	3b01      	subs	r3, #1
 8017844:	4a0b      	ldr	r2, [pc, #44]	; (8017874 <prvCheckTasksWaitingTermination+0x54>)
 8017846:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017848:	4b0b      	ldr	r3, [pc, #44]	; (8017878 <prvCheckTasksWaitingTermination+0x58>)
 801784a:	681b      	ldr	r3, [r3, #0]
 801784c:	3b01      	subs	r3, #1
 801784e:	4a0a      	ldr	r2, [pc, #40]	; (8017878 <prvCheckTasksWaitingTermination+0x58>)
 8017850:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017852:	f000 feef 	bl	8018634 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017856:	6878      	ldr	r0, [r7, #4]
 8017858:	f000 f810 	bl	801787c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801785c:	4b06      	ldr	r3, [pc, #24]	; (8017878 <prvCheckTasksWaitingTermination+0x58>)
 801785e:	681b      	ldr	r3, [r3, #0]
 8017860:	2b00      	cmp	r3, #0
 8017862:	d1e1      	bne.n	8017828 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017864:	bf00      	nop
 8017866:	bf00      	nop
 8017868:	3708      	adds	r7, #8
 801786a:	46bd      	mov	sp, r7
 801786c:	bd80      	pop	{r7, pc}
 801786e:	bf00      	nop
 8017870:	20001c98 	.word	0x20001c98
 8017874:	20001cc4 	.word	0x20001cc4
 8017878:	20001cac 	.word	0x20001cac

0801787c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801787c:	b580      	push	{r7, lr}
 801787e:	b084      	sub	sp, #16
 8017880:	af00      	add	r7, sp, #0
 8017882:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801788a:	2b00      	cmp	r3, #0
 801788c:	d108      	bne.n	80178a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017892:	4618      	mov	r0, r3
 8017894:	f001 f88c 	bl	80189b0 <vPortFree>
				vPortFree( pxTCB );
 8017898:	6878      	ldr	r0, [r7, #4]
 801789a:	f001 f889 	bl	80189b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801789e:	e018      	b.n	80178d2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80178a6:	2b01      	cmp	r3, #1
 80178a8:	d103      	bne.n	80178b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80178aa:	6878      	ldr	r0, [r7, #4]
 80178ac:	f001 f880 	bl	80189b0 <vPortFree>
	}
 80178b0:	e00f      	b.n	80178d2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80178b8:	2b02      	cmp	r3, #2
 80178ba:	d00a      	beq.n	80178d2 <prvDeleteTCB+0x56>
	__asm volatile
 80178bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178c0:	f383 8811 	msr	BASEPRI, r3
 80178c4:	f3bf 8f6f 	isb	sy
 80178c8:	f3bf 8f4f 	dsb	sy
 80178cc:	60fb      	str	r3, [r7, #12]
}
 80178ce:	bf00      	nop
 80178d0:	e7fe      	b.n	80178d0 <prvDeleteTCB+0x54>
	}
 80178d2:	bf00      	nop
 80178d4:	3710      	adds	r7, #16
 80178d6:	46bd      	mov	sp, r7
 80178d8:	bd80      	pop	{r7, pc}
	...

080178dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80178dc:	b480      	push	{r7}
 80178de:	b083      	sub	sp, #12
 80178e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80178e2:	4b0c      	ldr	r3, [pc, #48]	; (8017914 <prvResetNextTaskUnblockTime+0x38>)
 80178e4:	681b      	ldr	r3, [r3, #0]
 80178e6:	681b      	ldr	r3, [r3, #0]
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d104      	bne.n	80178f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80178ec:	4b0a      	ldr	r3, [pc, #40]	; (8017918 <prvResetNextTaskUnblockTime+0x3c>)
 80178ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80178f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80178f4:	e008      	b.n	8017908 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80178f6:	4b07      	ldr	r3, [pc, #28]	; (8017914 <prvResetNextTaskUnblockTime+0x38>)
 80178f8:	681b      	ldr	r3, [r3, #0]
 80178fa:	68db      	ldr	r3, [r3, #12]
 80178fc:	68db      	ldr	r3, [r3, #12]
 80178fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	685b      	ldr	r3, [r3, #4]
 8017904:	4a04      	ldr	r2, [pc, #16]	; (8017918 <prvResetNextTaskUnblockTime+0x3c>)
 8017906:	6013      	str	r3, [r2, #0]
}
 8017908:	bf00      	nop
 801790a:	370c      	adds	r7, #12
 801790c:	46bd      	mov	sp, r7
 801790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017912:	4770      	bx	lr
 8017914:	20001c7c 	.word	0x20001c7c
 8017918:	20001ce4 	.word	0x20001ce4

0801791c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801791c:	b480      	push	{r7}
 801791e:	b083      	sub	sp, #12
 8017920:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8017922:	4b0b      	ldr	r3, [pc, #44]	; (8017950 <xTaskGetSchedulerState+0x34>)
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	2b00      	cmp	r3, #0
 8017928:	d102      	bne.n	8017930 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801792a:	2301      	movs	r3, #1
 801792c:	607b      	str	r3, [r7, #4]
 801792e:	e008      	b.n	8017942 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017930:	4b08      	ldr	r3, [pc, #32]	; (8017954 <xTaskGetSchedulerState+0x38>)
 8017932:	681b      	ldr	r3, [r3, #0]
 8017934:	2b00      	cmp	r3, #0
 8017936:	d102      	bne.n	801793e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017938:	2302      	movs	r3, #2
 801793a:	607b      	str	r3, [r7, #4]
 801793c:	e001      	b.n	8017942 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801793e:	2300      	movs	r3, #0
 8017940:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8017942:	687b      	ldr	r3, [r7, #4]
	}
 8017944:	4618      	mov	r0, r3
 8017946:	370c      	adds	r7, #12
 8017948:	46bd      	mov	sp, r7
 801794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801794e:	4770      	bx	lr
 8017950:	20001cd0 	.word	0x20001cd0
 8017954:	20001cec 	.word	0x20001cec

08017958 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8017958:	b580      	push	{r7, lr}
 801795a:	b084      	sub	sp, #16
 801795c:	af00      	add	r7, sp, #0
 801795e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8017964:	2300      	movs	r3, #0
 8017966:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	2b00      	cmp	r3, #0
 801796c:	d051      	beq.n	8017a12 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801796e:	68bb      	ldr	r3, [r7, #8]
 8017970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017972:	4b2a      	ldr	r3, [pc, #168]	; (8017a1c <xTaskPriorityInherit+0xc4>)
 8017974:	681b      	ldr	r3, [r3, #0]
 8017976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017978:	429a      	cmp	r2, r3
 801797a:	d241      	bcs.n	8017a00 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801797c:	68bb      	ldr	r3, [r7, #8]
 801797e:	699b      	ldr	r3, [r3, #24]
 8017980:	2b00      	cmp	r3, #0
 8017982:	db06      	blt.n	8017992 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017984:	4b25      	ldr	r3, [pc, #148]	; (8017a1c <xTaskPriorityInherit+0xc4>)
 8017986:	681b      	ldr	r3, [r3, #0]
 8017988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801798a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801798e:	68bb      	ldr	r3, [r7, #8]
 8017990:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8017992:	68bb      	ldr	r3, [r7, #8]
 8017994:	6959      	ldr	r1, [r3, #20]
 8017996:	68bb      	ldr	r3, [r7, #8]
 8017998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801799a:	4613      	mov	r3, r2
 801799c:	009b      	lsls	r3, r3, #2
 801799e:	4413      	add	r3, r2
 80179a0:	009b      	lsls	r3, r3, #2
 80179a2:	4a1f      	ldr	r2, [pc, #124]	; (8017a20 <xTaskPriorityInherit+0xc8>)
 80179a4:	4413      	add	r3, r2
 80179a6:	4299      	cmp	r1, r3
 80179a8:	d122      	bne.n	80179f0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80179aa:	68bb      	ldr	r3, [r7, #8]
 80179ac:	3304      	adds	r3, #4
 80179ae:	4618      	mov	r0, r3
 80179b0:	f7fe f810 	bl	80159d4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80179b4:	4b19      	ldr	r3, [pc, #100]	; (8017a1c <xTaskPriorityInherit+0xc4>)
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179ba:	68bb      	ldr	r3, [r7, #8]
 80179bc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80179be:	68bb      	ldr	r3, [r7, #8]
 80179c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179c2:	4b18      	ldr	r3, [pc, #96]	; (8017a24 <xTaskPriorityInherit+0xcc>)
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	429a      	cmp	r2, r3
 80179c8:	d903      	bls.n	80179d2 <xTaskPriorityInherit+0x7a>
 80179ca:	68bb      	ldr	r3, [r7, #8]
 80179cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179ce:	4a15      	ldr	r2, [pc, #84]	; (8017a24 <xTaskPriorityInherit+0xcc>)
 80179d0:	6013      	str	r3, [r2, #0]
 80179d2:	68bb      	ldr	r3, [r7, #8]
 80179d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179d6:	4613      	mov	r3, r2
 80179d8:	009b      	lsls	r3, r3, #2
 80179da:	4413      	add	r3, r2
 80179dc:	009b      	lsls	r3, r3, #2
 80179de:	4a10      	ldr	r2, [pc, #64]	; (8017a20 <xTaskPriorityInherit+0xc8>)
 80179e0:	441a      	add	r2, r3
 80179e2:	68bb      	ldr	r3, [r7, #8]
 80179e4:	3304      	adds	r3, #4
 80179e6:	4619      	mov	r1, r3
 80179e8:	4610      	mov	r0, r2
 80179ea:	f7fd ff96 	bl	801591a <vListInsertEnd>
 80179ee:	e004      	b.n	80179fa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80179f0:	4b0a      	ldr	r3, [pc, #40]	; (8017a1c <xTaskPriorityInherit+0xc4>)
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179f6:	68bb      	ldr	r3, [r7, #8]
 80179f8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80179fa:	2301      	movs	r3, #1
 80179fc:	60fb      	str	r3, [r7, #12]
 80179fe:	e008      	b.n	8017a12 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8017a00:	68bb      	ldr	r3, [r7, #8]
 8017a02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017a04:	4b05      	ldr	r3, [pc, #20]	; (8017a1c <xTaskPriorityInherit+0xc4>)
 8017a06:	681b      	ldr	r3, [r3, #0]
 8017a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a0a:	429a      	cmp	r2, r3
 8017a0c:	d201      	bcs.n	8017a12 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8017a0e:	2301      	movs	r3, #1
 8017a10:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017a12:	68fb      	ldr	r3, [r7, #12]
	}
 8017a14:	4618      	mov	r0, r3
 8017a16:	3710      	adds	r7, #16
 8017a18:	46bd      	mov	sp, r7
 8017a1a:	bd80      	pop	{r7, pc}
 8017a1c:	200017f0 	.word	0x200017f0
 8017a20:	200017f4 	.word	0x200017f4
 8017a24:	20001ccc 	.word	0x20001ccc

08017a28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8017a28:	b580      	push	{r7, lr}
 8017a2a:	b086      	sub	sp, #24
 8017a2c:	af00      	add	r7, sp, #0
 8017a2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017a34:	2300      	movs	r3, #0
 8017a36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d056      	beq.n	8017aec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8017a3e:	4b2e      	ldr	r3, [pc, #184]	; (8017af8 <xTaskPriorityDisinherit+0xd0>)
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	693a      	ldr	r2, [r7, #16]
 8017a44:	429a      	cmp	r2, r3
 8017a46:	d00a      	beq.n	8017a5e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8017a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a4c:	f383 8811 	msr	BASEPRI, r3
 8017a50:	f3bf 8f6f 	isb	sy
 8017a54:	f3bf 8f4f 	dsb	sy
 8017a58:	60fb      	str	r3, [r7, #12]
}
 8017a5a:	bf00      	nop
 8017a5c:	e7fe      	b.n	8017a5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8017a5e:	693b      	ldr	r3, [r7, #16]
 8017a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d10a      	bne.n	8017a7c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8017a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a6a:	f383 8811 	msr	BASEPRI, r3
 8017a6e:	f3bf 8f6f 	isb	sy
 8017a72:	f3bf 8f4f 	dsb	sy
 8017a76:	60bb      	str	r3, [r7, #8]
}
 8017a78:	bf00      	nop
 8017a7a:	e7fe      	b.n	8017a7a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8017a7c:	693b      	ldr	r3, [r7, #16]
 8017a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017a80:	1e5a      	subs	r2, r3, #1
 8017a82:	693b      	ldr	r3, [r7, #16]
 8017a84:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8017a86:	693b      	ldr	r3, [r7, #16]
 8017a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a8a:	693b      	ldr	r3, [r7, #16]
 8017a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017a8e:	429a      	cmp	r2, r3
 8017a90:	d02c      	beq.n	8017aec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8017a92:	693b      	ldr	r3, [r7, #16]
 8017a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	d128      	bne.n	8017aec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017a9a:	693b      	ldr	r3, [r7, #16]
 8017a9c:	3304      	adds	r3, #4
 8017a9e:	4618      	mov	r0, r3
 8017aa0:	f7fd ff98 	bl	80159d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8017aa4:	693b      	ldr	r3, [r7, #16]
 8017aa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017aa8:	693b      	ldr	r3, [r7, #16]
 8017aaa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017aac:	693b      	ldr	r3, [r7, #16]
 8017aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ab0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017ab4:	693b      	ldr	r3, [r7, #16]
 8017ab6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8017ab8:	693b      	ldr	r3, [r7, #16]
 8017aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017abc:	4b0f      	ldr	r3, [pc, #60]	; (8017afc <xTaskPriorityDisinherit+0xd4>)
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	429a      	cmp	r2, r3
 8017ac2:	d903      	bls.n	8017acc <xTaskPriorityDisinherit+0xa4>
 8017ac4:	693b      	ldr	r3, [r7, #16]
 8017ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ac8:	4a0c      	ldr	r2, [pc, #48]	; (8017afc <xTaskPriorityDisinherit+0xd4>)
 8017aca:	6013      	str	r3, [r2, #0]
 8017acc:	693b      	ldr	r3, [r7, #16]
 8017ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ad0:	4613      	mov	r3, r2
 8017ad2:	009b      	lsls	r3, r3, #2
 8017ad4:	4413      	add	r3, r2
 8017ad6:	009b      	lsls	r3, r3, #2
 8017ad8:	4a09      	ldr	r2, [pc, #36]	; (8017b00 <xTaskPriorityDisinherit+0xd8>)
 8017ada:	441a      	add	r2, r3
 8017adc:	693b      	ldr	r3, [r7, #16]
 8017ade:	3304      	adds	r3, #4
 8017ae0:	4619      	mov	r1, r3
 8017ae2:	4610      	mov	r0, r2
 8017ae4:	f7fd ff19 	bl	801591a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8017ae8:	2301      	movs	r3, #1
 8017aea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017aec:	697b      	ldr	r3, [r7, #20]
	}
 8017aee:	4618      	mov	r0, r3
 8017af0:	3718      	adds	r7, #24
 8017af2:	46bd      	mov	sp, r7
 8017af4:	bd80      	pop	{r7, pc}
 8017af6:	bf00      	nop
 8017af8:	200017f0 	.word	0x200017f0
 8017afc:	20001ccc 	.word	0x20001ccc
 8017b00:	200017f4 	.word	0x200017f4

08017b04 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8017b04:	b580      	push	{r7, lr}
 8017b06:	b088      	sub	sp, #32
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	6078      	str	r0, [r7, #4]
 8017b0c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8017b12:	2301      	movs	r3, #1
 8017b14:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d06a      	beq.n	8017bf2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8017b1c:	69bb      	ldr	r3, [r7, #24]
 8017b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d10a      	bne.n	8017b3a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8017b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b28:	f383 8811 	msr	BASEPRI, r3
 8017b2c:	f3bf 8f6f 	isb	sy
 8017b30:	f3bf 8f4f 	dsb	sy
 8017b34:	60fb      	str	r3, [r7, #12]
}
 8017b36:	bf00      	nop
 8017b38:	e7fe      	b.n	8017b38 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8017b3a:	69bb      	ldr	r3, [r7, #24]
 8017b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b3e:	683a      	ldr	r2, [r7, #0]
 8017b40:	429a      	cmp	r2, r3
 8017b42:	d902      	bls.n	8017b4a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8017b44:	683b      	ldr	r3, [r7, #0]
 8017b46:	61fb      	str	r3, [r7, #28]
 8017b48:	e002      	b.n	8017b50 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8017b4a:	69bb      	ldr	r3, [r7, #24]
 8017b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b4e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8017b50:	69bb      	ldr	r3, [r7, #24]
 8017b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b54:	69fa      	ldr	r2, [r7, #28]
 8017b56:	429a      	cmp	r2, r3
 8017b58:	d04b      	beq.n	8017bf2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8017b5a:	69bb      	ldr	r3, [r7, #24]
 8017b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017b5e:	697a      	ldr	r2, [r7, #20]
 8017b60:	429a      	cmp	r2, r3
 8017b62:	d146      	bne.n	8017bf2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8017b64:	4b25      	ldr	r3, [pc, #148]	; (8017bfc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8017b66:	681b      	ldr	r3, [r3, #0]
 8017b68:	69ba      	ldr	r2, [r7, #24]
 8017b6a:	429a      	cmp	r2, r3
 8017b6c:	d10a      	bne.n	8017b84 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8017b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b72:	f383 8811 	msr	BASEPRI, r3
 8017b76:	f3bf 8f6f 	isb	sy
 8017b7a:	f3bf 8f4f 	dsb	sy
 8017b7e:	60bb      	str	r3, [r7, #8]
}
 8017b80:	bf00      	nop
 8017b82:	e7fe      	b.n	8017b82 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8017b84:	69bb      	ldr	r3, [r7, #24]
 8017b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b88:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8017b8a:	69bb      	ldr	r3, [r7, #24]
 8017b8c:	69fa      	ldr	r2, [r7, #28]
 8017b8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017b90:	69bb      	ldr	r3, [r7, #24]
 8017b92:	699b      	ldr	r3, [r3, #24]
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	db04      	blt.n	8017ba2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017b98:	69fb      	ldr	r3, [r7, #28]
 8017b9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017b9e:	69bb      	ldr	r3, [r7, #24]
 8017ba0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8017ba2:	69bb      	ldr	r3, [r7, #24]
 8017ba4:	6959      	ldr	r1, [r3, #20]
 8017ba6:	693a      	ldr	r2, [r7, #16]
 8017ba8:	4613      	mov	r3, r2
 8017baa:	009b      	lsls	r3, r3, #2
 8017bac:	4413      	add	r3, r2
 8017bae:	009b      	lsls	r3, r3, #2
 8017bb0:	4a13      	ldr	r2, [pc, #76]	; (8017c00 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8017bb2:	4413      	add	r3, r2
 8017bb4:	4299      	cmp	r1, r3
 8017bb6:	d11c      	bne.n	8017bf2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017bb8:	69bb      	ldr	r3, [r7, #24]
 8017bba:	3304      	adds	r3, #4
 8017bbc:	4618      	mov	r0, r3
 8017bbe:	f7fd ff09 	bl	80159d4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8017bc2:	69bb      	ldr	r3, [r7, #24]
 8017bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017bc6:	4b0f      	ldr	r3, [pc, #60]	; (8017c04 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017bc8:	681b      	ldr	r3, [r3, #0]
 8017bca:	429a      	cmp	r2, r3
 8017bcc:	d903      	bls.n	8017bd6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8017bce:	69bb      	ldr	r3, [r7, #24]
 8017bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bd2:	4a0c      	ldr	r2, [pc, #48]	; (8017c04 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017bd4:	6013      	str	r3, [r2, #0]
 8017bd6:	69bb      	ldr	r3, [r7, #24]
 8017bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017bda:	4613      	mov	r3, r2
 8017bdc:	009b      	lsls	r3, r3, #2
 8017bde:	4413      	add	r3, r2
 8017be0:	009b      	lsls	r3, r3, #2
 8017be2:	4a07      	ldr	r2, [pc, #28]	; (8017c00 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8017be4:	441a      	add	r2, r3
 8017be6:	69bb      	ldr	r3, [r7, #24]
 8017be8:	3304      	adds	r3, #4
 8017bea:	4619      	mov	r1, r3
 8017bec:	4610      	mov	r0, r2
 8017bee:	f7fd fe94 	bl	801591a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017bf2:	bf00      	nop
 8017bf4:	3720      	adds	r7, #32
 8017bf6:	46bd      	mov	sp, r7
 8017bf8:	bd80      	pop	{r7, pc}
 8017bfa:	bf00      	nop
 8017bfc:	200017f0 	.word	0x200017f0
 8017c00:	200017f4 	.word	0x200017f4
 8017c04:	20001ccc 	.word	0x20001ccc

08017c08 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8017c08:	b480      	push	{r7}
 8017c0a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8017c0c:	4b07      	ldr	r3, [pc, #28]	; (8017c2c <pvTaskIncrementMutexHeldCount+0x24>)
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d004      	beq.n	8017c1e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8017c14:	4b05      	ldr	r3, [pc, #20]	; (8017c2c <pvTaskIncrementMutexHeldCount+0x24>)
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017c1a:	3201      	adds	r2, #1
 8017c1c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8017c1e:	4b03      	ldr	r3, [pc, #12]	; (8017c2c <pvTaskIncrementMutexHeldCount+0x24>)
 8017c20:	681b      	ldr	r3, [r3, #0]
	}
 8017c22:	4618      	mov	r0, r3
 8017c24:	46bd      	mov	sp, r7
 8017c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c2a:	4770      	bx	lr
 8017c2c:	200017f0 	.word	0x200017f0

08017c30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017c30:	b580      	push	{r7, lr}
 8017c32:	b084      	sub	sp, #16
 8017c34:	af00      	add	r7, sp, #0
 8017c36:	6078      	str	r0, [r7, #4]
 8017c38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8017c3a:	4b21      	ldr	r3, [pc, #132]	; (8017cc0 <prvAddCurrentTaskToDelayedList+0x90>)
 8017c3c:	681b      	ldr	r3, [r3, #0]
 8017c3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017c40:	4b20      	ldr	r3, [pc, #128]	; (8017cc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8017c42:	681b      	ldr	r3, [r3, #0]
 8017c44:	3304      	adds	r3, #4
 8017c46:	4618      	mov	r0, r3
 8017c48:	f7fd fec4 	bl	80159d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017c52:	d10a      	bne.n	8017c6a <prvAddCurrentTaskToDelayedList+0x3a>
 8017c54:	683b      	ldr	r3, [r7, #0]
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d007      	beq.n	8017c6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017c5a:	4b1a      	ldr	r3, [pc, #104]	; (8017cc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	3304      	adds	r3, #4
 8017c60:	4619      	mov	r1, r3
 8017c62:	4819      	ldr	r0, [pc, #100]	; (8017cc8 <prvAddCurrentTaskToDelayedList+0x98>)
 8017c64:	f7fd fe59 	bl	801591a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017c68:	e026      	b.n	8017cb8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8017c6a:	68fa      	ldr	r2, [r7, #12]
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	4413      	add	r3, r2
 8017c70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017c72:	4b14      	ldr	r3, [pc, #80]	; (8017cc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	68ba      	ldr	r2, [r7, #8]
 8017c78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8017c7a:	68ba      	ldr	r2, [r7, #8]
 8017c7c:	68fb      	ldr	r3, [r7, #12]
 8017c7e:	429a      	cmp	r2, r3
 8017c80:	d209      	bcs.n	8017c96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017c82:	4b12      	ldr	r3, [pc, #72]	; (8017ccc <prvAddCurrentTaskToDelayedList+0x9c>)
 8017c84:	681a      	ldr	r2, [r3, #0]
 8017c86:	4b0f      	ldr	r3, [pc, #60]	; (8017cc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8017c88:	681b      	ldr	r3, [r3, #0]
 8017c8a:	3304      	adds	r3, #4
 8017c8c:	4619      	mov	r1, r3
 8017c8e:	4610      	mov	r0, r2
 8017c90:	f7fd fe67 	bl	8015962 <vListInsert>
}
 8017c94:	e010      	b.n	8017cb8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017c96:	4b0e      	ldr	r3, [pc, #56]	; (8017cd0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8017c98:	681a      	ldr	r2, [r3, #0]
 8017c9a:	4b0a      	ldr	r3, [pc, #40]	; (8017cc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	3304      	adds	r3, #4
 8017ca0:	4619      	mov	r1, r3
 8017ca2:	4610      	mov	r0, r2
 8017ca4:	f7fd fe5d 	bl	8015962 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8017ca8:	4b0a      	ldr	r3, [pc, #40]	; (8017cd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8017caa:	681b      	ldr	r3, [r3, #0]
 8017cac:	68ba      	ldr	r2, [r7, #8]
 8017cae:	429a      	cmp	r2, r3
 8017cb0:	d202      	bcs.n	8017cb8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8017cb2:	4a08      	ldr	r2, [pc, #32]	; (8017cd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8017cb4:	68bb      	ldr	r3, [r7, #8]
 8017cb6:	6013      	str	r3, [r2, #0]
}
 8017cb8:	bf00      	nop
 8017cba:	3710      	adds	r7, #16
 8017cbc:	46bd      	mov	sp, r7
 8017cbe:	bd80      	pop	{r7, pc}
 8017cc0:	20001cc8 	.word	0x20001cc8
 8017cc4:	200017f0 	.word	0x200017f0
 8017cc8:	20001cb0 	.word	0x20001cb0
 8017ccc:	20001c80 	.word	0x20001c80
 8017cd0:	20001c7c 	.word	0x20001c7c
 8017cd4:	20001ce4 	.word	0x20001ce4

08017cd8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8017cd8:	b580      	push	{r7, lr}
 8017cda:	b08a      	sub	sp, #40	; 0x28
 8017cdc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8017cde:	2300      	movs	r3, #0
 8017ce0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8017ce2:	f000 fb07 	bl	80182f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8017ce6:	4b1c      	ldr	r3, [pc, #112]	; (8017d58 <xTimerCreateTimerTask+0x80>)
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	2b00      	cmp	r3, #0
 8017cec:	d021      	beq.n	8017d32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8017cee:	2300      	movs	r3, #0
 8017cf0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8017cf2:	2300      	movs	r3, #0
 8017cf4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8017cf6:	1d3a      	adds	r2, r7, #4
 8017cf8:	f107 0108 	add.w	r1, r7, #8
 8017cfc:	f107 030c 	add.w	r3, r7, #12
 8017d00:	4618      	mov	r0, r3
 8017d02:	f7fd fdc3 	bl	801588c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8017d06:	6879      	ldr	r1, [r7, #4]
 8017d08:	68bb      	ldr	r3, [r7, #8]
 8017d0a:	68fa      	ldr	r2, [r7, #12]
 8017d0c:	9202      	str	r2, [sp, #8]
 8017d0e:	9301      	str	r3, [sp, #4]
 8017d10:	2302      	movs	r3, #2
 8017d12:	9300      	str	r3, [sp, #0]
 8017d14:	2300      	movs	r3, #0
 8017d16:	460a      	mov	r2, r1
 8017d18:	4910      	ldr	r1, [pc, #64]	; (8017d5c <xTimerCreateTimerTask+0x84>)
 8017d1a:	4811      	ldr	r0, [pc, #68]	; (8017d60 <xTimerCreateTimerTask+0x88>)
 8017d1c:	f7fe fe92 	bl	8016a44 <xTaskCreateStatic>
 8017d20:	4603      	mov	r3, r0
 8017d22:	4a10      	ldr	r2, [pc, #64]	; (8017d64 <xTimerCreateTimerTask+0x8c>)
 8017d24:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8017d26:	4b0f      	ldr	r3, [pc, #60]	; (8017d64 <xTimerCreateTimerTask+0x8c>)
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	d001      	beq.n	8017d32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8017d2e:	2301      	movs	r3, #1
 8017d30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8017d32:	697b      	ldr	r3, [r7, #20]
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	d10a      	bne.n	8017d4e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8017d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d3c:	f383 8811 	msr	BASEPRI, r3
 8017d40:	f3bf 8f6f 	isb	sy
 8017d44:	f3bf 8f4f 	dsb	sy
 8017d48:	613b      	str	r3, [r7, #16]
}
 8017d4a:	bf00      	nop
 8017d4c:	e7fe      	b.n	8017d4c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8017d4e:	697b      	ldr	r3, [r7, #20]
}
 8017d50:	4618      	mov	r0, r3
 8017d52:	3718      	adds	r7, #24
 8017d54:	46bd      	mov	sp, r7
 8017d56:	bd80      	pop	{r7, pc}
 8017d58:	20001d20 	.word	0x20001d20
 8017d5c:	0801feb4 	.word	0x0801feb4
 8017d60:	08017e9d 	.word	0x08017e9d
 8017d64:	20001d24 	.word	0x20001d24

08017d68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8017d68:	b580      	push	{r7, lr}
 8017d6a:	b08a      	sub	sp, #40	; 0x28
 8017d6c:	af00      	add	r7, sp, #0
 8017d6e:	60f8      	str	r0, [r7, #12]
 8017d70:	60b9      	str	r1, [r7, #8]
 8017d72:	607a      	str	r2, [r7, #4]
 8017d74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8017d76:	2300      	movs	r3, #0
 8017d78:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8017d7a:	68fb      	ldr	r3, [r7, #12]
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d10a      	bne.n	8017d96 <xTimerGenericCommand+0x2e>
	__asm volatile
 8017d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d84:	f383 8811 	msr	BASEPRI, r3
 8017d88:	f3bf 8f6f 	isb	sy
 8017d8c:	f3bf 8f4f 	dsb	sy
 8017d90:	623b      	str	r3, [r7, #32]
}
 8017d92:	bf00      	nop
 8017d94:	e7fe      	b.n	8017d94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8017d96:	4b1a      	ldr	r3, [pc, #104]	; (8017e00 <xTimerGenericCommand+0x98>)
 8017d98:	681b      	ldr	r3, [r3, #0]
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	d02a      	beq.n	8017df4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8017d9e:	68bb      	ldr	r3, [r7, #8]
 8017da0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8017da6:	68fb      	ldr	r3, [r7, #12]
 8017da8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8017daa:	68bb      	ldr	r3, [r7, #8]
 8017dac:	2b05      	cmp	r3, #5
 8017dae:	dc18      	bgt.n	8017de2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8017db0:	f7ff fdb4 	bl	801791c <xTaskGetSchedulerState>
 8017db4:	4603      	mov	r3, r0
 8017db6:	2b02      	cmp	r3, #2
 8017db8:	d109      	bne.n	8017dce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8017dba:	4b11      	ldr	r3, [pc, #68]	; (8017e00 <xTimerGenericCommand+0x98>)
 8017dbc:	6818      	ldr	r0, [r3, #0]
 8017dbe:	f107 0110 	add.w	r1, r7, #16
 8017dc2:	2300      	movs	r3, #0
 8017dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017dc6:	f7fd ffd7 	bl	8015d78 <xQueueGenericSend>
 8017dca:	6278      	str	r0, [r7, #36]	; 0x24
 8017dcc:	e012      	b.n	8017df4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8017dce:	4b0c      	ldr	r3, [pc, #48]	; (8017e00 <xTimerGenericCommand+0x98>)
 8017dd0:	6818      	ldr	r0, [r3, #0]
 8017dd2:	f107 0110 	add.w	r1, r7, #16
 8017dd6:	2300      	movs	r3, #0
 8017dd8:	2200      	movs	r2, #0
 8017dda:	f7fd ffcd 	bl	8015d78 <xQueueGenericSend>
 8017dde:	6278      	str	r0, [r7, #36]	; 0x24
 8017de0:	e008      	b.n	8017df4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8017de2:	4b07      	ldr	r3, [pc, #28]	; (8017e00 <xTimerGenericCommand+0x98>)
 8017de4:	6818      	ldr	r0, [r3, #0]
 8017de6:	f107 0110 	add.w	r1, r7, #16
 8017dea:	2300      	movs	r3, #0
 8017dec:	683a      	ldr	r2, [r7, #0]
 8017dee:	f7fe f8c1 	bl	8015f74 <xQueueGenericSendFromISR>
 8017df2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8017df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017df6:	4618      	mov	r0, r3
 8017df8:	3728      	adds	r7, #40	; 0x28
 8017dfa:	46bd      	mov	sp, r7
 8017dfc:	bd80      	pop	{r7, pc}
 8017dfe:	bf00      	nop
 8017e00:	20001d20 	.word	0x20001d20

08017e04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8017e04:	b580      	push	{r7, lr}
 8017e06:	b088      	sub	sp, #32
 8017e08:	af02      	add	r7, sp, #8
 8017e0a:	6078      	str	r0, [r7, #4]
 8017e0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017e0e:	4b22      	ldr	r3, [pc, #136]	; (8017e98 <prvProcessExpiredTimer+0x94>)
 8017e10:	681b      	ldr	r3, [r3, #0]
 8017e12:	68db      	ldr	r3, [r3, #12]
 8017e14:	68db      	ldr	r3, [r3, #12]
 8017e16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017e18:	697b      	ldr	r3, [r7, #20]
 8017e1a:	3304      	adds	r3, #4
 8017e1c:	4618      	mov	r0, r3
 8017e1e:	f7fd fdd9 	bl	80159d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017e22:	697b      	ldr	r3, [r7, #20]
 8017e24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017e28:	f003 0304 	and.w	r3, r3, #4
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	d022      	beq.n	8017e76 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8017e30:	697b      	ldr	r3, [r7, #20]
 8017e32:	699a      	ldr	r2, [r3, #24]
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	18d1      	adds	r1, r2, r3
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	683a      	ldr	r2, [r7, #0]
 8017e3c:	6978      	ldr	r0, [r7, #20]
 8017e3e:	f000 f8d1 	bl	8017fe4 <prvInsertTimerInActiveList>
 8017e42:	4603      	mov	r3, r0
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d01f      	beq.n	8017e88 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017e48:	2300      	movs	r3, #0
 8017e4a:	9300      	str	r3, [sp, #0]
 8017e4c:	2300      	movs	r3, #0
 8017e4e:	687a      	ldr	r2, [r7, #4]
 8017e50:	2100      	movs	r1, #0
 8017e52:	6978      	ldr	r0, [r7, #20]
 8017e54:	f7ff ff88 	bl	8017d68 <xTimerGenericCommand>
 8017e58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8017e5a:	693b      	ldr	r3, [r7, #16]
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d113      	bne.n	8017e88 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8017e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e64:	f383 8811 	msr	BASEPRI, r3
 8017e68:	f3bf 8f6f 	isb	sy
 8017e6c:	f3bf 8f4f 	dsb	sy
 8017e70:	60fb      	str	r3, [r7, #12]
}
 8017e72:	bf00      	nop
 8017e74:	e7fe      	b.n	8017e74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017e76:	697b      	ldr	r3, [r7, #20]
 8017e78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017e7c:	f023 0301 	bic.w	r3, r3, #1
 8017e80:	b2da      	uxtb	r2, r3
 8017e82:	697b      	ldr	r3, [r7, #20]
 8017e84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017e88:	697b      	ldr	r3, [r7, #20]
 8017e8a:	6a1b      	ldr	r3, [r3, #32]
 8017e8c:	6978      	ldr	r0, [r7, #20]
 8017e8e:	4798      	blx	r3
}
 8017e90:	bf00      	nop
 8017e92:	3718      	adds	r7, #24
 8017e94:	46bd      	mov	sp, r7
 8017e96:	bd80      	pop	{r7, pc}
 8017e98:	20001d18 	.word	0x20001d18

08017e9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8017e9c:	b580      	push	{r7, lr}
 8017e9e:	b084      	sub	sp, #16
 8017ea0:	af00      	add	r7, sp, #0
 8017ea2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017ea4:	f107 0308 	add.w	r3, r7, #8
 8017ea8:	4618      	mov	r0, r3
 8017eaa:	f000 f857 	bl	8017f5c <prvGetNextExpireTime>
 8017eae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8017eb0:	68bb      	ldr	r3, [r7, #8]
 8017eb2:	4619      	mov	r1, r3
 8017eb4:	68f8      	ldr	r0, [r7, #12]
 8017eb6:	f000 f803 	bl	8017ec0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8017eba:	f000 f8d5 	bl	8018068 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017ebe:	e7f1      	b.n	8017ea4 <prvTimerTask+0x8>

08017ec0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8017ec0:	b580      	push	{r7, lr}
 8017ec2:	b084      	sub	sp, #16
 8017ec4:	af00      	add	r7, sp, #0
 8017ec6:	6078      	str	r0, [r7, #4]
 8017ec8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8017eca:	f7ff f945 	bl	8017158 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017ece:	f107 0308 	add.w	r3, r7, #8
 8017ed2:	4618      	mov	r0, r3
 8017ed4:	f000 f866 	bl	8017fa4 <prvSampleTimeNow>
 8017ed8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8017eda:	68bb      	ldr	r3, [r7, #8]
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d130      	bne.n	8017f42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8017ee0:	683b      	ldr	r3, [r7, #0]
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	d10a      	bne.n	8017efc <prvProcessTimerOrBlockTask+0x3c>
 8017ee6:	687a      	ldr	r2, [r7, #4]
 8017ee8:	68fb      	ldr	r3, [r7, #12]
 8017eea:	429a      	cmp	r2, r3
 8017eec:	d806      	bhi.n	8017efc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8017eee:	f7ff f941 	bl	8017174 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8017ef2:	68f9      	ldr	r1, [r7, #12]
 8017ef4:	6878      	ldr	r0, [r7, #4]
 8017ef6:	f7ff ff85 	bl	8017e04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8017efa:	e024      	b.n	8017f46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8017efc:	683b      	ldr	r3, [r7, #0]
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	d008      	beq.n	8017f14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8017f02:	4b13      	ldr	r3, [pc, #76]	; (8017f50 <prvProcessTimerOrBlockTask+0x90>)
 8017f04:	681b      	ldr	r3, [r3, #0]
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d101      	bne.n	8017f10 <prvProcessTimerOrBlockTask+0x50>
 8017f0c:	2301      	movs	r3, #1
 8017f0e:	e000      	b.n	8017f12 <prvProcessTimerOrBlockTask+0x52>
 8017f10:	2300      	movs	r3, #0
 8017f12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8017f14:	4b0f      	ldr	r3, [pc, #60]	; (8017f54 <prvProcessTimerOrBlockTask+0x94>)
 8017f16:	6818      	ldr	r0, [r3, #0]
 8017f18:	687a      	ldr	r2, [r7, #4]
 8017f1a:	68fb      	ldr	r3, [r7, #12]
 8017f1c:	1ad3      	subs	r3, r2, r3
 8017f1e:	683a      	ldr	r2, [r7, #0]
 8017f20:	4619      	mov	r1, r3
 8017f22:	f7fe fd5b 	bl	80169dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8017f26:	f7ff f925 	bl	8017174 <xTaskResumeAll>
 8017f2a:	4603      	mov	r3, r0
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	d10a      	bne.n	8017f46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8017f30:	4b09      	ldr	r3, [pc, #36]	; (8017f58 <prvProcessTimerOrBlockTask+0x98>)
 8017f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017f36:	601a      	str	r2, [r3, #0]
 8017f38:	f3bf 8f4f 	dsb	sy
 8017f3c:	f3bf 8f6f 	isb	sy
}
 8017f40:	e001      	b.n	8017f46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8017f42:	f7ff f917 	bl	8017174 <xTaskResumeAll>
}
 8017f46:	bf00      	nop
 8017f48:	3710      	adds	r7, #16
 8017f4a:	46bd      	mov	sp, r7
 8017f4c:	bd80      	pop	{r7, pc}
 8017f4e:	bf00      	nop
 8017f50:	20001d1c 	.word	0x20001d1c
 8017f54:	20001d20 	.word	0x20001d20
 8017f58:	e000ed04 	.word	0xe000ed04

08017f5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017f5c:	b480      	push	{r7}
 8017f5e:	b085      	sub	sp, #20
 8017f60:	af00      	add	r7, sp, #0
 8017f62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8017f64:	4b0e      	ldr	r3, [pc, #56]	; (8017fa0 <prvGetNextExpireTime+0x44>)
 8017f66:	681b      	ldr	r3, [r3, #0]
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d101      	bne.n	8017f72 <prvGetNextExpireTime+0x16>
 8017f6e:	2201      	movs	r2, #1
 8017f70:	e000      	b.n	8017f74 <prvGetNextExpireTime+0x18>
 8017f72:	2200      	movs	r2, #0
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	681b      	ldr	r3, [r3, #0]
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d105      	bne.n	8017f8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017f80:	4b07      	ldr	r3, [pc, #28]	; (8017fa0 <prvGetNextExpireTime+0x44>)
 8017f82:	681b      	ldr	r3, [r3, #0]
 8017f84:	68db      	ldr	r3, [r3, #12]
 8017f86:	681b      	ldr	r3, [r3, #0]
 8017f88:	60fb      	str	r3, [r7, #12]
 8017f8a:	e001      	b.n	8017f90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8017f8c:	2300      	movs	r3, #0
 8017f8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8017f90:	68fb      	ldr	r3, [r7, #12]
}
 8017f92:	4618      	mov	r0, r3
 8017f94:	3714      	adds	r7, #20
 8017f96:	46bd      	mov	sp, r7
 8017f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f9c:	4770      	bx	lr
 8017f9e:	bf00      	nop
 8017fa0:	20001d18 	.word	0x20001d18

08017fa4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8017fa4:	b580      	push	{r7, lr}
 8017fa6:	b084      	sub	sp, #16
 8017fa8:	af00      	add	r7, sp, #0
 8017faa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8017fac:	f7ff f980 	bl	80172b0 <xTaskGetTickCount>
 8017fb0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8017fb2:	4b0b      	ldr	r3, [pc, #44]	; (8017fe0 <prvSampleTimeNow+0x3c>)
 8017fb4:	681b      	ldr	r3, [r3, #0]
 8017fb6:	68fa      	ldr	r2, [r7, #12]
 8017fb8:	429a      	cmp	r2, r3
 8017fba:	d205      	bcs.n	8017fc8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8017fbc:	f000 f936 	bl	801822c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	2201      	movs	r2, #1
 8017fc4:	601a      	str	r2, [r3, #0]
 8017fc6:	e002      	b.n	8017fce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	2200      	movs	r2, #0
 8017fcc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8017fce:	4a04      	ldr	r2, [pc, #16]	; (8017fe0 <prvSampleTimeNow+0x3c>)
 8017fd0:	68fb      	ldr	r3, [r7, #12]
 8017fd2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8017fd4:	68fb      	ldr	r3, [r7, #12]
}
 8017fd6:	4618      	mov	r0, r3
 8017fd8:	3710      	adds	r7, #16
 8017fda:	46bd      	mov	sp, r7
 8017fdc:	bd80      	pop	{r7, pc}
 8017fde:	bf00      	nop
 8017fe0:	20001d28 	.word	0x20001d28

08017fe4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8017fe4:	b580      	push	{r7, lr}
 8017fe6:	b086      	sub	sp, #24
 8017fe8:	af00      	add	r7, sp, #0
 8017fea:	60f8      	str	r0, [r7, #12]
 8017fec:	60b9      	str	r1, [r7, #8]
 8017fee:	607a      	str	r2, [r7, #4]
 8017ff0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8017ff2:	2300      	movs	r3, #0
 8017ff4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8017ff6:	68fb      	ldr	r3, [r7, #12]
 8017ff8:	68ba      	ldr	r2, [r7, #8]
 8017ffa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017ffc:	68fb      	ldr	r3, [r7, #12]
 8017ffe:	68fa      	ldr	r2, [r7, #12]
 8018000:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8018002:	68ba      	ldr	r2, [r7, #8]
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	429a      	cmp	r2, r3
 8018008:	d812      	bhi.n	8018030 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801800a:	687a      	ldr	r2, [r7, #4]
 801800c:	683b      	ldr	r3, [r7, #0]
 801800e:	1ad2      	subs	r2, r2, r3
 8018010:	68fb      	ldr	r3, [r7, #12]
 8018012:	699b      	ldr	r3, [r3, #24]
 8018014:	429a      	cmp	r2, r3
 8018016:	d302      	bcc.n	801801e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018018:	2301      	movs	r3, #1
 801801a:	617b      	str	r3, [r7, #20]
 801801c:	e01b      	b.n	8018056 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801801e:	4b10      	ldr	r3, [pc, #64]	; (8018060 <prvInsertTimerInActiveList+0x7c>)
 8018020:	681a      	ldr	r2, [r3, #0]
 8018022:	68fb      	ldr	r3, [r7, #12]
 8018024:	3304      	adds	r3, #4
 8018026:	4619      	mov	r1, r3
 8018028:	4610      	mov	r0, r2
 801802a:	f7fd fc9a 	bl	8015962 <vListInsert>
 801802e:	e012      	b.n	8018056 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018030:	687a      	ldr	r2, [r7, #4]
 8018032:	683b      	ldr	r3, [r7, #0]
 8018034:	429a      	cmp	r2, r3
 8018036:	d206      	bcs.n	8018046 <prvInsertTimerInActiveList+0x62>
 8018038:	68ba      	ldr	r2, [r7, #8]
 801803a:	683b      	ldr	r3, [r7, #0]
 801803c:	429a      	cmp	r2, r3
 801803e:	d302      	bcc.n	8018046 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018040:	2301      	movs	r3, #1
 8018042:	617b      	str	r3, [r7, #20]
 8018044:	e007      	b.n	8018056 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018046:	4b07      	ldr	r3, [pc, #28]	; (8018064 <prvInsertTimerInActiveList+0x80>)
 8018048:	681a      	ldr	r2, [r3, #0]
 801804a:	68fb      	ldr	r3, [r7, #12]
 801804c:	3304      	adds	r3, #4
 801804e:	4619      	mov	r1, r3
 8018050:	4610      	mov	r0, r2
 8018052:	f7fd fc86 	bl	8015962 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8018056:	697b      	ldr	r3, [r7, #20]
}
 8018058:	4618      	mov	r0, r3
 801805a:	3718      	adds	r7, #24
 801805c:	46bd      	mov	sp, r7
 801805e:	bd80      	pop	{r7, pc}
 8018060:	20001d1c 	.word	0x20001d1c
 8018064:	20001d18 	.word	0x20001d18

08018068 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018068:	b580      	push	{r7, lr}
 801806a:	b08e      	sub	sp, #56	; 0x38
 801806c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801806e:	e0ca      	b.n	8018206 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	2b00      	cmp	r3, #0
 8018074:	da18      	bge.n	80180a8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8018076:	1d3b      	adds	r3, r7, #4
 8018078:	3304      	adds	r3, #4
 801807a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801807c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801807e:	2b00      	cmp	r3, #0
 8018080:	d10a      	bne.n	8018098 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8018082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018086:	f383 8811 	msr	BASEPRI, r3
 801808a:	f3bf 8f6f 	isb	sy
 801808e:	f3bf 8f4f 	dsb	sy
 8018092:	61fb      	str	r3, [r7, #28]
}
 8018094:	bf00      	nop
 8018096:	e7fe      	b.n	8018096 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801809a:	681b      	ldr	r3, [r3, #0]
 801809c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801809e:	6850      	ldr	r0, [r2, #4]
 80180a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80180a2:	6892      	ldr	r2, [r2, #8]
 80180a4:	4611      	mov	r1, r2
 80180a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	f2c0 80aa 	blt.w	8018204 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80180b0:	68fb      	ldr	r3, [r7, #12]
 80180b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80180b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180b6:	695b      	ldr	r3, [r3, #20]
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d004      	beq.n	80180c6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80180bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180be:	3304      	adds	r3, #4
 80180c0:	4618      	mov	r0, r3
 80180c2:	f7fd fc87 	bl	80159d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80180c6:	463b      	mov	r3, r7
 80180c8:	4618      	mov	r0, r3
 80180ca:	f7ff ff6b 	bl	8017fa4 <prvSampleTimeNow>
 80180ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	2b09      	cmp	r3, #9
 80180d4:	f200 8097 	bhi.w	8018206 <prvProcessReceivedCommands+0x19e>
 80180d8:	a201      	add	r2, pc, #4	; (adr r2, 80180e0 <prvProcessReceivedCommands+0x78>)
 80180da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80180de:	bf00      	nop
 80180e0:	08018109 	.word	0x08018109
 80180e4:	08018109 	.word	0x08018109
 80180e8:	08018109 	.word	0x08018109
 80180ec:	0801817d 	.word	0x0801817d
 80180f0:	08018191 	.word	0x08018191
 80180f4:	080181db 	.word	0x080181db
 80180f8:	08018109 	.word	0x08018109
 80180fc:	08018109 	.word	0x08018109
 8018100:	0801817d 	.word	0x0801817d
 8018104:	08018191 	.word	0x08018191
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801810a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801810e:	f043 0301 	orr.w	r3, r3, #1
 8018112:	b2da      	uxtb	r2, r3
 8018114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018116:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801811a:	68ba      	ldr	r2, [r7, #8]
 801811c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801811e:	699b      	ldr	r3, [r3, #24]
 8018120:	18d1      	adds	r1, r2, r3
 8018122:	68bb      	ldr	r3, [r7, #8]
 8018124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018126:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018128:	f7ff ff5c 	bl	8017fe4 <prvInsertTimerInActiveList>
 801812c:	4603      	mov	r3, r0
 801812e:	2b00      	cmp	r3, #0
 8018130:	d069      	beq.n	8018206 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018134:	6a1b      	ldr	r3, [r3, #32]
 8018136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018138:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801813a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801813c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018140:	f003 0304 	and.w	r3, r3, #4
 8018144:	2b00      	cmp	r3, #0
 8018146:	d05e      	beq.n	8018206 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018148:	68ba      	ldr	r2, [r7, #8]
 801814a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801814c:	699b      	ldr	r3, [r3, #24]
 801814e:	441a      	add	r2, r3
 8018150:	2300      	movs	r3, #0
 8018152:	9300      	str	r3, [sp, #0]
 8018154:	2300      	movs	r3, #0
 8018156:	2100      	movs	r1, #0
 8018158:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801815a:	f7ff fe05 	bl	8017d68 <xTimerGenericCommand>
 801815e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8018160:	6a3b      	ldr	r3, [r7, #32]
 8018162:	2b00      	cmp	r3, #0
 8018164:	d14f      	bne.n	8018206 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8018166:	f04f 0350 	mov.w	r3, #80	; 0x50
 801816a:	f383 8811 	msr	BASEPRI, r3
 801816e:	f3bf 8f6f 	isb	sy
 8018172:	f3bf 8f4f 	dsb	sy
 8018176:	61bb      	str	r3, [r7, #24]
}
 8018178:	bf00      	nop
 801817a:	e7fe      	b.n	801817a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801817c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801817e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018182:	f023 0301 	bic.w	r3, r3, #1
 8018186:	b2da      	uxtb	r2, r3
 8018188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801818a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801818e:	e03a      	b.n	8018206 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018192:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018196:	f043 0301 	orr.w	r3, r3, #1
 801819a:	b2da      	uxtb	r2, r3
 801819c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801819e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80181a2:	68ba      	ldr	r2, [r7, #8]
 80181a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80181a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181aa:	699b      	ldr	r3, [r3, #24]
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d10a      	bne.n	80181c6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80181b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181b4:	f383 8811 	msr	BASEPRI, r3
 80181b8:	f3bf 8f6f 	isb	sy
 80181bc:	f3bf 8f4f 	dsb	sy
 80181c0:	617b      	str	r3, [r7, #20]
}
 80181c2:	bf00      	nop
 80181c4:	e7fe      	b.n	80181c4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80181c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181c8:	699a      	ldr	r2, [r3, #24]
 80181ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181cc:	18d1      	adds	r1, r2, r3
 80181ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80181d4:	f7ff ff06 	bl	8017fe4 <prvInsertTimerInActiveList>
					break;
 80181d8:	e015      	b.n	8018206 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80181da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80181e0:	f003 0302 	and.w	r3, r3, #2
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d103      	bne.n	80181f0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80181e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80181ea:	f000 fbe1 	bl	80189b0 <vPortFree>
 80181ee:	e00a      	b.n	8018206 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80181f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80181f6:	f023 0301 	bic.w	r3, r3, #1
 80181fa:	b2da      	uxtb	r2, r3
 80181fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8018202:	e000      	b.n	8018206 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8018204:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018206:	4b08      	ldr	r3, [pc, #32]	; (8018228 <prvProcessReceivedCommands+0x1c0>)
 8018208:	681b      	ldr	r3, [r3, #0]
 801820a:	1d39      	adds	r1, r7, #4
 801820c:	2200      	movs	r2, #0
 801820e:	4618      	mov	r0, r3
 8018210:	f7fd ffd8 	bl	80161c4 <xQueueReceive>
 8018214:	4603      	mov	r3, r0
 8018216:	2b00      	cmp	r3, #0
 8018218:	f47f af2a 	bne.w	8018070 <prvProcessReceivedCommands+0x8>
	}
}
 801821c:	bf00      	nop
 801821e:	bf00      	nop
 8018220:	3730      	adds	r7, #48	; 0x30
 8018222:	46bd      	mov	sp, r7
 8018224:	bd80      	pop	{r7, pc}
 8018226:	bf00      	nop
 8018228:	20001d20 	.word	0x20001d20

0801822c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801822c:	b580      	push	{r7, lr}
 801822e:	b088      	sub	sp, #32
 8018230:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018232:	e048      	b.n	80182c6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018234:	4b2d      	ldr	r3, [pc, #180]	; (80182ec <prvSwitchTimerLists+0xc0>)
 8018236:	681b      	ldr	r3, [r3, #0]
 8018238:	68db      	ldr	r3, [r3, #12]
 801823a:	681b      	ldr	r3, [r3, #0]
 801823c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801823e:	4b2b      	ldr	r3, [pc, #172]	; (80182ec <prvSwitchTimerLists+0xc0>)
 8018240:	681b      	ldr	r3, [r3, #0]
 8018242:	68db      	ldr	r3, [r3, #12]
 8018244:	68db      	ldr	r3, [r3, #12]
 8018246:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018248:	68fb      	ldr	r3, [r7, #12]
 801824a:	3304      	adds	r3, #4
 801824c:	4618      	mov	r0, r3
 801824e:	f7fd fbc1 	bl	80159d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018252:	68fb      	ldr	r3, [r7, #12]
 8018254:	6a1b      	ldr	r3, [r3, #32]
 8018256:	68f8      	ldr	r0, [r7, #12]
 8018258:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801825a:	68fb      	ldr	r3, [r7, #12]
 801825c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018260:	f003 0304 	and.w	r3, r3, #4
 8018264:	2b00      	cmp	r3, #0
 8018266:	d02e      	beq.n	80182c6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018268:	68fb      	ldr	r3, [r7, #12]
 801826a:	699b      	ldr	r3, [r3, #24]
 801826c:	693a      	ldr	r2, [r7, #16]
 801826e:	4413      	add	r3, r2
 8018270:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8018272:	68ba      	ldr	r2, [r7, #8]
 8018274:	693b      	ldr	r3, [r7, #16]
 8018276:	429a      	cmp	r2, r3
 8018278:	d90e      	bls.n	8018298 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801827a:	68fb      	ldr	r3, [r7, #12]
 801827c:	68ba      	ldr	r2, [r7, #8]
 801827e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018280:	68fb      	ldr	r3, [r7, #12]
 8018282:	68fa      	ldr	r2, [r7, #12]
 8018284:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018286:	4b19      	ldr	r3, [pc, #100]	; (80182ec <prvSwitchTimerLists+0xc0>)
 8018288:	681a      	ldr	r2, [r3, #0]
 801828a:	68fb      	ldr	r3, [r7, #12]
 801828c:	3304      	adds	r3, #4
 801828e:	4619      	mov	r1, r3
 8018290:	4610      	mov	r0, r2
 8018292:	f7fd fb66 	bl	8015962 <vListInsert>
 8018296:	e016      	b.n	80182c6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018298:	2300      	movs	r3, #0
 801829a:	9300      	str	r3, [sp, #0]
 801829c:	2300      	movs	r3, #0
 801829e:	693a      	ldr	r2, [r7, #16]
 80182a0:	2100      	movs	r1, #0
 80182a2:	68f8      	ldr	r0, [r7, #12]
 80182a4:	f7ff fd60 	bl	8017d68 <xTimerGenericCommand>
 80182a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	d10a      	bne.n	80182c6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80182b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182b4:	f383 8811 	msr	BASEPRI, r3
 80182b8:	f3bf 8f6f 	isb	sy
 80182bc:	f3bf 8f4f 	dsb	sy
 80182c0:	603b      	str	r3, [r7, #0]
}
 80182c2:	bf00      	nop
 80182c4:	e7fe      	b.n	80182c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80182c6:	4b09      	ldr	r3, [pc, #36]	; (80182ec <prvSwitchTimerLists+0xc0>)
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	681b      	ldr	r3, [r3, #0]
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d1b1      	bne.n	8018234 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80182d0:	4b06      	ldr	r3, [pc, #24]	; (80182ec <prvSwitchTimerLists+0xc0>)
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80182d6:	4b06      	ldr	r3, [pc, #24]	; (80182f0 <prvSwitchTimerLists+0xc4>)
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	4a04      	ldr	r2, [pc, #16]	; (80182ec <prvSwitchTimerLists+0xc0>)
 80182dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80182de:	4a04      	ldr	r2, [pc, #16]	; (80182f0 <prvSwitchTimerLists+0xc4>)
 80182e0:	697b      	ldr	r3, [r7, #20]
 80182e2:	6013      	str	r3, [r2, #0]
}
 80182e4:	bf00      	nop
 80182e6:	3718      	adds	r7, #24
 80182e8:	46bd      	mov	sp, r7
 80182ea:	bd80      	pop	{r7, pc}
 80182ec:	20001d18 	.word	0x20001d18
 80182f0:	20001d1c 	.word	0x20001d1c

080182f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80182f4:	b580      	push	{r7, lr}
 80182f6:	b082      	sub	sp, #8
 80182f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80182fa:	f000 f96b 	bl	80185d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80182fe:	4b15      	ldr	r3, [pc, #84]	; (8018354 <prvCheckForValidListAndQueue+0x60>)
 8018300:	681b      	ldr	r3, [r3, #0]
 8018302:	2b00      	cmp	r3, #0
 8018304:	d120      	bne.n	8018348 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8018306:	4814      	ldr	r0, [pc, #80]	; (8018358 <prvCheckForValidListAndQueue+0x64>)
 8018308:	f7fd fada 	bl	80158c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801830c:	4813      	ldr	r0, [pc, #76]	; (801835c <prvCheckForValidListAndQueue+0x68>)
 801830e:	f7fd fad7 	bl	80158c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8018312:	4b13      	ldr	r3, [pc, #76]	; (8018360 <prvCheckForValidListAndQueue+0x6c>)
 8018314:	4a10      	ldr	r2, [pc, #64]	; (8018358 <prvCheckForValidListAndQueue+0x64>)
 8018316:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8018318:	4b12      	ldr	r3, [pc, #72]	; (8018364 <prvCheckForValidListAndQueue+0x70>)
 801831a:	4a10      	ldr	r2, [pc, #64]	; (801835c <prvCheckForValidListAndQueue+0x68>)
 801831c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801831e:	2300      	movs	r3, #0
 8018320:	9300      	str	r3, [sp, #0]
 8018322:	4b11      	ldr	r3, [pc, #68]	; (8018368 <prvCheckForValidListAndQueue+0x74>)
 8018324:	4a11      	ldr	r2, [pc, #68]	; (801836c <prvCheckForValidListAndQueue+0x78>)
 8018326:	2110      	movs	r1, #16
 8018328:	200a      	movs	r0, #10
 801832a:	f7fd fbe5 	bl	8015af8 <xQueueGenericCreateStatic>
 801832e:	4603      	mov	r3, r0
 8018330:	4a08      	ldr	r2, [pc, #32]	; (8018354 <prvCheckForValidListAndQueue+0x60>)
 8018332:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8018334:	4b07      	ldr	r3, [pc, #28]	; (8018354 <prvCheckForValidListAndQueue+0x60>)
 8018336:	681b      	ldr	r3, [r3, #0]
 8018338:	2b00      	cmp	r3, #0
 801833a:	d005      	beq.n	8018348 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801833c:	4b05      	ldr	r3, [pc, #20]	; (8018354 <prvCheckForValidListAndQueue+0x60>)
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	490b      	ldr	r1, [pc, #44]	; (8018370 <prvCheckForValidListAndQueue+0x7c>)
 8018342:	4618      	mov	r0, r3
 8018344:	f7fe faf6 	bl	8016934 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018348:	f000 f974 	bl	8018634 <vPortExitCritical>
}
 801834c:	bf00      	nop
 801834e:	46bd      	mov	sp, r7
 8018350:	bd80      	pop	{r7, pc}
 8018352:	bf00      	nop
 8018354:	20001d20 	.word	0x20001d20
 8018358:	20001cf0 	.word	0x20001cf0
 801835c:	20001d04 	.word	0x20001d04
 8018360:	20001d18 	.word	0x20001d18
 8018364:	20001d1c 	.word	0x20001d1c
 8018368:	20001dcc 	.word	0x20001dcc
 801836c:	20001d2c 	.word	0x20001d2c
 8018370:	0801febc 	.word	0x0801febc

08018374 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018374:	b480      	push	{r7}
 8018376:	b085      	sub	sp, #20
 8018378:	af00      	add	r7, sp, #0
 801837a:	60f8      	str	r0, [r7, #12]
 801837c:	60b9      	str	r1, [r7, #8]
 801837e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018380:	68fb      	ldr	r3, [r7, #12]
 8018382:	3b04      	subs	r3, #4
 8018384:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018386:	68fb      	ldr	r3, [r7, #12]
 8018388:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801838c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801838e:	68fb      	ldr	r3, [r7, #12]
 8018390:	3b04      	subs	r3, #4
 8018392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018394:	68bb      	ldr	r3, [r7, #8]
 8018396:	f023 0201 	bic.w	r2, r3, #1
 801839a:	68fb      	ldr	r3, [r7, #12]
 801839c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801839e:	68fb      	ldr	r3, [r7, #12]
 80183a0:	3b04      	subs	r3, #4
 80183a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80183a4:	4a0c      	ldr	r2, [pc, #48]	; (80183d8 <pxPortInitialiseStack+0x64>)
 80183a6:	68fb      	ldr	r3, [r7, #12]
 80183a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80183aa:	68fb      	ldr	r3, [r7, #12]
 80183ac:	3b14      	subs	r3, #20
 80183ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80183b0:	687a      	ldr	r2, [r7, #4]
 80183b2:	68fb      	ldr	r3, [r7, #12]
 80183b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80183b6:	68fb      	ldr	r3, [r7, #12]
 80183b8:	3b04      	subs	r3, #4
 80183ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80183bc:	68fb      	ldr	r3, [r7, #12]
 80183be:	f06f 0202 	mvn.w	r2, #2
 80183c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	3b20      	subs	r3, #32
 80183c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80183ca:	68fb      	ldr	r3, [r7, #12]
}
 80183cc:	4618      	mov	r0, r3
 80183ce:	3714      	adds	r7, #20
 80183d0:	46bd      	mov	sp, r7
 80183d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183d6:	4770      	bx	lr
 80183d8:	080183dd 	.word	0x080183dd

080183dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80183dc:	b480      	push	{r7}
 80183de:	b085      	sub	sp, #20
 80183e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80183e2:	2300      	movs	r3, #0
 80183e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80183e6:	4b12      	ldr	r3, [pc, #72]	; (8018430 <prvTaskExitError+0x54>)
 80183e8:	681b      	ldr	r3, [r3, #0]
 80183ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80183ee:	d00a      	beq.n	8018406 <prvTaskExitError+0x2a>
	__asm volatile
 80183f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183f4:	f383 8811 	msr	BASEPRI, r3
 80183f8:	f3bf 8f6f 	isb	sy
 80183fc:	f3bf 8f4f 	dsb	sy
 8018400:	60fb      	str	r3, [r7, #12]
}
 8018402:	bf00      	nop
 8018404:	e7fe      	b.n	8018404 <prvTaskExitError+0x28>
	__asm volatile
 8018406:	f04f 0350 	mov.w	r3, #80	; 0x50
 801840a:	f383 8811 	msr	BASEPRI, r3
 801840e:	f3bf 8f6f 	isb	sy
 8018412:	f3bf 8f4f 	dsb	sy
 8018416:	60bb      	str	r3, [r7, #8]
}
 8018418:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801841a:	bf00      	nop
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	2b00      	cmp	r3, #0
 8018420:	d0fc      	beq.n	801841c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018422:	bf00      	nop
 8018424:	bf00      	nop
 8018426:	3714      	adds	r7, #20
 8018428:	46bd      	mov	sp, r7
 801842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801842e:	4770      	bx	lr
 8018430:	200000cc 	.word	0x200000cc
	...

08018440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018440:	4b07      	ldr	r3, [pc, #28]	; (8018460 <pxCurrentTCBConst2>)
 8018442:	6819      	ldr	r1, [r3, #0]
 8018444:	6808      	ldr	r0, [r1, #0]
 8018446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801844a:	f380 8809 	msr	PSP, r0
 801844e:	f3bf 8f6f 	isb	sy
 8018452:	f04f 0000 	mov.w	r0, #0
 8018456:	f380 8811 	msr	BASEPRI, r0
 801845a:	4770      	bx	lr
 801845c:	f3af 8000 	nop.w

08018460 <pxCurrentTCBConst2>:
 8018460:	200017f0 	.word	0x200017f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018464:	bf00      	nop
 8018466:	bf00      	nop

08018468 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018468:	4808      	ldr	r0, [pc, #32]	; (801848c <prvPortStartFirstTask+0x24>)
 801846a:	6800      	ldr	r0, [r0, #0]
 801846c:	6800      	ldr	r0, [r0, #0]
 801846e:	f380 8808 	msr	MSP, r0
 8018472:	f04f 0000 	mov.w	r0, #0
 8018476:	f380 8814 	msr	CONTROL, r0
 801847a:	b662      	cpsie	i
 801847c:	b661      	cpsie	f
 801847e:	f3bf 8f4f 	dsb	sy
 8018482:	f3bf 8f6f 	isb	sy
 8018486:	df00      	svc	0
 8018488:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801848a:	bf00      	nop
 801848c:	e000ed08 	.word	0xe000ed08

08018490 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018490:	b580      	push	{r7, lr}
 8018492:	b086      	sub	sp, #24
 8018494:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018496:	4b46      	ldr	r3, [pc, #280]	; (80185b0 <xPortStartScheduler+0x120>)
 8018498:	681b      	ldr	r3, [r3, #0]
 801849a:	4a46      	ldr	r2, [pc, #280]	; (80185b4 <xPortStartScheduler+0x124>)
 801849c:	4293      	cmp	r3, r2
 801849e:	d10a      	bne.n	80184b6 <xPortStartScheduler+0x26>
	__asm volatile
 80184a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184a4:	f383 8811 	msr	BASEPRI, r3
 80184a8:	f3bf 8f6f 	isb	sy
 80184ac:	f3bf 8f4f 	dsb	sy
 80184b0:	613b      	str	r3, [r7, #16]
}
 80184b2:	bf00      	nop
 80184b4:	e7fe      	b.n	80184b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80184b6:	4b3e      	ldr	r3, [pc, #248]	; (80185b0 <xPortStartScheduler+0x120>)
 80184b8:	681b      	ldr	r3, [r3, #0]
 80184ba:	4a3f      	ldr	r2, [pc, #252]	; (80185b8 <xPortStartScheduler+0x128>)
 80184bc:	4293      	cmp	r3, r2
 80184be:	d10a      	bne.n	80184d6 <xPortStartScheduler+0x46>
	__asm volatile
 80184c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184c4:	f383 8811 	msr	BASEPRI, r3
 80184c8:	f3bf 8f6f 	isb	sy
 80184cc:	f3bf 8f4f 	dsb	sy
 80184d0:	60fb      	str	r3, [r7, #12]
}
 80184d2:	bf00      	nop
 80184d4:	e7fe      	b.n	80184d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80184d6:	4b39      	ldr	r3, [pc, #228]	; (80185bc <xPortStartScheduler+0x12c>)
 80184d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80184da:	697b      	ldr	r3, [r7, #20]
 80184dc:	781b      	ldrb	r3, [r3, #0]
 80184de:	b2db      	uxtb	r3, r3
 80184e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80184e2:	697b      	ldr	r3, [r7, #20]
 80184e4:	22ff      	movs	r2, #255	; 0xff
 80184e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80184e8:	697b      	ldr	r3, [r7, #20]
 80184ea:	781b      	ldrb	r3, [r3, #0]
 80184ec:	b2db      	uxtb	r3, r3
 80184ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80184f0:	78fb      	ldrb	r3, [r7, #3]
 80184f2:	b2db      	uxtb	r3, r3
 80184f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80184f8:	b2da      	uxtb	r2, r3
 80184fa:	4b31      	ldr	r3, [pc, #196]	; (80185c0 <xPortStartScheduler+0x130>)
 80184fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80184fe:	4b31      	ldr	r3, [pc, #196]	; (80185c4 <xPortStartScheduler+0x134>)
 8018500:	2207      	movs	r2, #7
 8018502:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018504:	e009      	b.n	801851a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8018506:	4b2f      	ldr	r3, [pc, #188]	; (80185c4 <xPortStartScheduler+0x134>)
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	3b01      	subs	r3, #1
 801850c:	4a2d      	ldr	r2, [pc, #180]	; (80185c4 <xPortStartScheduler+0x134>)
 801850e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018510:	78fb      	ldrb	r3, [r7, #3]
 8018512:	b2db      	uxtb	r3, r3
 8018514:	005b      	lsls	r3, r3, #1
 8018516:	b2db      	uxtb	r3, r3
 8018518:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801851a:	78fb      	ldrb	r3, [r7, #3]
 801851c:	b2db      	uxtb	r3, r3
 801851e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018522:	2b80      	cmp	r3, #128	; 0x80
 8018524:	d0ef      	beq.n	8018506 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018526:	4b27      	ldr	r3, [pc, #156]	; (80185c4 <xPortStartScheduler+0x134>)
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	f1c3 0307 	rsb	r3, r3, #7
 801852e:	2b04      	cmp	r3, #4
 8018530:	d00a      	beq.n	8018548 <xPortStartScheduler+0xb8>
	__asm volatile
 8018532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018536:	f383 8811 	msr	BASEPRI, r3
 801853a:	f3bf 8f6f 	isb	sy
 801853e:	f3bf 8f4f 	dsb	sy
 8018542:	60bb      	str	r3, [r7, #8]
}
 8018544:	bf00      	nop
 8018546:	e7fe      	b.n	8018546 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018548:	4b1e      	ldr	r3, [pc, #120]	; (80185c4 <xPortStartScheduler+0x134>)
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	021b      	lsls	r3, r3, #8
 801854e:	4a1d      	ldr	r2, [pc, #116]	; (80185c4 <xPortStartScheduler+0x134>)
 8018550:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018552:	4b1c      	ldr	r3, [pc, #112]	; (80185c4 <xPortStartScheduler+0x134>)
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801855a:	4a1a      	ldr	r2, [pc, #104]	; (80185c4 <xPortStartScheduler+0x134>)
 801855c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	b2da      	uxtb	r2, r3
 8018562:	697b      	ldr	r3, [r7, #20]
 8018564:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018566:	4b18      	ldr	r3, [pc, #96]	; (80185c8 <xPortStartScheduler+0x138>)
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	4a17      	ldr	r2, [pc, #92]	; (80185c8 <xPortStartScheduler+0x138>)
 801856c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018570:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018572:	4b15      	ldr	r3, [pc, #84]	; (80185c8 <xPortStartScheduler+0x138>)
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	4a14      	ldr	r2, [pc, #80]	; (80185c8 <xPortStartScheduler+0x138>)
 8018578:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801857c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801857e:	f000 f8dd 	bl	801873c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018582:	4b12      	ldr	r3, [pc, #72]	; (80185cc <xPortStartScheduler+0x13c>)
 8018584:	2200      	movs	r2, #0
 8018586:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018588:	f000 f8fc 	bl	8018784 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801858c:	4b10      	ldr	r3, [pc, #64]	; (80185d0 <xPortStartScheduler+0x140>)
 801858e:	681b      	ldr	r3, [r3, #0]
 8018590:	4a0f      	ldr	r2, [pc, #60]	; (80185d0 <xPortStartScheduler+0x140>)
 8018592:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8018596:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8018598:	f7ff ff66 	bl	8018468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801859c:	f7fe ff52 	bl	8017444 <vTaskSwitchContext>
	prvTaskExitError();
 80185a0:	f7ff ff1c 	bl	80183dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80185a4:	2300      	movs	r3, #0
}
 80185a6:	4618      	mov	r0, r3
 80185a8:	3718      	adds	r7, #24
 80185aa:	46bd      	mov	sp, r7
 80185ac:	bd80      	pop	{r7, pc}
 80185ae:	bf00      	nop
 80185b0:	e000ed00 	.word	0xe000ed00
 80185b4:	410fc271 	.word	0x410fc271
 80185b8:	410fc270 	.word	0x410fc270
 80185bc:	e000e400 	.word	0xe000e400
 80185c0:	20001e1c 	.word	0x20001e1c
 80185c4:	20001e20 	.word	0x20001e20
 80185c8:	e000ed20 	.word	0xe000ed20
 80185cc:	200000cc 	.word	0x200000cc
 80185d0:	e000ef34 	.word	0xe000ef34

080185d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80185d4:	b480      	push	{r7}
 80185d6:	b083      	sub	sp, #12
 80185d8:	af00      	add	r7, sp, #0
	__asm volatile
 80185da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185de:	f383 8811 	msr	BASEPRI, r3
 80185e2:	f3bf 8f6f 	isb	sy
 80185e6:	f3bf 8f4f 	dsb	sy
 80185ea:	607b      	str	r3, [r7, #4]
}
 80185ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80185ee:	4b0f      	ldr	r3, [pc, #60]	; (801862c <vPortEnterCritical+0x58>)
 80185f0:	681b      	ldr	r3, [r3, #0]
 80185f2:	3301      	adds	r3, #1
 80185f4:	4a0d      	ldr	r2, [pc, #52]	; (801862c <vPortEnterCritical+0x58>)
 80185f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80185f8:	4b0c      	ldr	r3, [pc, #48]	; (801862c <vPortEnterCritical+0x58>)
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	2b01      	cmp	r3, #1
 80185fe:	d10f      	bne.n	8018620 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018600:	4b0b      	ldr	r3, [pc, #44]	; (8018630 <vPortEnterCritical+0x5c>)
 8018602:	681b      	ldr	r3, [r3, #0]
 8018604:	b2db      	uxtb	r3, r3
 8018606:	2b00      	cmp	r3, #0
 8018608:	d00a      	beq.n	8018620 <vPortEnterCritical+0x4c>
	__asm volatile
 801860a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801860e:	f383 8811 	msr	BASEPRI, r3
 8018612:	f3bf 8f6f 	isb	sy
 8018616:	f3bf 8f4f 	dsb	sy
 801861a:	603b      	str	r3, [r7, #0]
}
 801861c:	bf00      	nop
 801861e:	e7fe      	b.n	801861e <vPortEnterCritical+0x4a>
	}
}
 8018620:	bf00      	nop
 8018622:	370c      	adds	r7, #12
 8018624:	46bd      	mov	sp, r7
 8018626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801862a:	4770      	bx	lr
 801862c:	200000cc 	.word	0x200000cc
 8018630:	e000ed04 	.word	0xe000ed04

08018634 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018634:	b480      	push	{r7}
 8018636:	b083      	sub	sp, #12
 8018638:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801863a:	4b12      	ldr	r3, [pc, #72]	; (8018684 <vPortExitCritical+0x50>)
 801863c:	681b      	ldr	r3, [r3, #0]
 801863e:	2b00      	cmp	r3, #0
 8018640:	d10a      	bne.n	8018658 <vPortExitCritical+0x24>
	__asm volatile
 8018642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018646:	f383 8811 	msr	BASEPRI, r3
 801864a:	f3bf 8f6f 	isb	sy
 801864e:	f3bf 8f4f 	dsb	sy
 8018652:	607b      	str	r3, [r7, #4]
}
 8018654:	bf00      	nop
 8018656:	e7fe      	b.n	8018656 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8018658:	4b0a      	ldr	r3, [pc, #40]	; (8018684 <vPortExitCritical+0x50>)
 801865a:	681b      	ldr	r3, [r3, #0]
 801865c:	3b01      	subs	r3, #1
 801865e:	4a09      	ldr	r2, [pc, #36]	; (8018684 <vPortExitCritical+0x50>)
 8018660:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018662:	4b08      	ldr	r3, [pc, #32]	; (8018684 <vPortExitCritical+0x50>)
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	2b00      	cmp	r3, #0
 8018668:	d105      	bne.n	8018676 <vPortExitCritical+0x42>
 801866a:	2300      	movs	r3, #0
 801866c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801866e:	683b      	ldr	r3, [r7, #0]
 8018670:	f383 8811 	msr	BASEPRI, r3
}
 8018674:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8018676:	bf00      	nop
 8018678:	370c      	adds	r7, #12
 801867a:	46bd      	mov	sp, r7
 801867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018680:	4770      	bx	lr
 8018682:	bf00      	nop
 8018684:	200000cc 	.word	0x200000cc
	...

08018690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018690:	f3ef 8009 	mrs	r0, PSP
 8018694:	f3bf 8f6f 	isb	sy
 8018698:	4b15      	ldr	r3, [pc, #84]	; (80186f0 <pxCurrentTCBConst>)
 801869a:	681a      	ldr	r2, [r3, #0]
 801869c:	f01e 0f10 	tst.w	lr, #16
 80186a0:	bf08      	it	eq
 80186a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80186a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186aa:	6010      	str	r0, [r2, #0]
 80186ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80186b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80186b4:	f380 8811 	msr	BASEPRI, r0
 80186b8:	f3bf 8f4f 	dsb	sy
 80186bc:	f3bf 8f6f 	isb	sy
 80186c0:	f7fe fec0 	bl	8017444 <vTaskSwitchContext>
 80186c4:	f04f 0000 	mov.w	r0, #0
 80186c8:	f380 8811 	msr	BASEPRI, r0
 80186cc:	bc09      	pop	{r0, r3}
 80186ce:	6819      	ldr	r1, [r3, #0]
 80186d0:	6808      	ldr	r0, [r1, #0]
 80186d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186d6:	f01e 0f10 	tst.w	lr, #16
 80186da:	bf08      	it	eq
 80186dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80186e0:	f380 8809 	msr	PSP, r0
 80186e4:	f3bf 8f6f 	isb	sy
 80186e8:	4770      	bx	lr
 80186ea:	bf00      	nop
 80186ec:	f3af 8000 	nop.w

080186f0 <pxCurrentTCBConst>:
 80186f0:	200017f0 	.word	0x200017f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80186f4:	bf00      	nop
 80186f6:	bf00      	nop

080186f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80186f8:	b580      	push	{r7, lr}
 80186fa:	b082      	sub	sp, #8
 80186fc:	af00      	add	r7, sp, #0
	__asm volatile
 80186fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018702:	f383 8811 	msr	BASEPRI, r3
 8018706:	f3bf 8f6f 	isb	sy
 801870a:	f3bf 8f4f 	dsb	sy
 801870e:	607b      	str	r3, [r7, #4]
}
 8018710:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018712:	f7fe fddd 	bl	80172d0 <xTaskIncrementTick>
 8018716:	4603      	mov	r3, r0
 8018718:	2b00      	cmp	r3, #0
 801871a:	d003      	beq.n	8018724 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801871c:	4b06      	ldr	r3, [pc, #24]	; (8018738 <xPortSysTickHandler+0x40>)
 801871e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018722:	601a      	str	r2, [r3, #0]
 8018724:	2300      	movs	r3, #0
 8018726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018728:	683b      	ldr	r3, [r7, #0]
 801872a:	f383 8811 	msr	BASEPRI, r3
}
 801872e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018730:	bf00      	nop
 8018732:	3708      	adds	r7, #8
 8018734:	46bd      	mov	sp, r7
 8018736:	bd80      	pop	{r7, pc}
 8018738:	e000ed04 	.word	0xe000ed04

0801873c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801873c:	b480      	push	{r7}
 801873e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018740:	4b0b      	ldr	r3, [pc, #44]	; (8018770 <vPortSetupTimerInterrupt+0x34>)
 8018742:	2200      	movs	r2, #0
 8018744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018746:	4b0b      	ldr	r3, [pc, #44]	; (8018774 <vPortSetupTimerInterrupt+0x38>)
 8018748:	2200      	movs	r2, #0
 801874a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801874c:	4b0a      	ldr	r3, [pc, #40]	; (8018778 <vPortSetupTimerInterrupt+0x3c>)
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	4a0a      	ldr	r2, [pc, #40]	; (801877c <vPortSetupTimerInterrupt+0x40>)
 8018752:	fba2 2303 	umull	r2, r3, r2, r3
 8018756:	099b      	lsrs	r3, r3, #6
 8018758:	4a09      	ldr	r2, [pc, #36]	; (8018780 <vPortSetupTimerInterrupt+0x44>)
 801875a:	3b01      	subs	r3, #1
 801875c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801875e:	4b04      	ldr	r3, [pc, #16]	; (8018770 <vPortSetupTimerInterrupt+0x34>)
 8018760:	2207      	movs	r2, #7
 8018762:	601a      	str	r2, [r3, #0]
}
 8018764:	bf00      	nop
 8018766:	46bd      	mov	sp, r7
 8018768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801876c:	4770      	bx	lr
 801876e:	bf00      	nop
 8018770:	e000e010 	.word	0xe000e010
 8018774:	e000e018 	.word	0xe000e018
 8018778:	200000c0 	.word	0x200000c0
 801877c:	10624dd3 	.word	0x10624dd3
 8018780:	e000e014 	.word	0xe000e014

08018784 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018784:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018794 <vPortEnableVFP+0x10>
 8018788:	6801      	ldr	r1, [r0, #0]
 801878a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801878e:	6001      	str	r1, [r0, #0]
 8018790:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018792:	bf00      	nop
 8018794:	e000ed88 	.word	0xe000ed88

08018798 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018798:	b480      	push	{r7}
 801879a:	b085      	sub	sp, #20
 801879c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801879e:	f3ef 8305 	mrs	r3, IPSR
 80187a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80187a4:	68fb      	ldr	r3, [r7, #12]
 80187a6:	2b0f      	cmp	r3, #15
 80187a8:	d914      	bls.n	80187d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80187aa:	4a17      	ldr	r2, [pc, #92]	; (8018808 <vPortValidateInterruptPriority+0x70>)
 80187ac:	68fb      	ldr	r3, [r7, #12]
 80187ae:	4413      	add	r3, r2
 80187b0:	781b      	ldrb	r3, [r3, #0]
 80187b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80187b4:	4b15      	ldr	r3, [pc, #84]	; (801880c <vPortValidateInterruptPriority+0x74>)
 80187b6:	781b      	ldrb	r3, [r3, #0]
 80187b8:	7afa      	ldrb	r2, [r7, #11]
 80187ba:	429a      	cmp	r2, r3
 80187bc:	d20a      	bcs.n	80187d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80187be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187c2:	f383 8811 	msr	BASEPRI, r3
 80187c6:	f3bf 8f6f 	isb	sy
 80187ca:	f3bf 8f4f 	dsb	sy
 80187ce:	607b      	str	r3, [r7, #4]
}
 80187d0:	bf00      	nop
 80187d2:	e7fe      	b.n	80187d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80187d4:	4b0e      	ldr	r3, [pc, #56]	; (8018810 <vPortValidateInterruptPriority+0x78>)
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80187dc:	4b0d      	ldr	r3, [pc, #52]	; (8018814 <vPortValidateInterruptPriority+0x7c>)
 80187de:	681b      	ldr	r3, [r3, #0]
 80187e0:	429a      	cmp	r2, r3
 80187e2:	d90a      	bls.n	80187fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80187e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187e8:	f383 8811 	msr	BASEPRI, r3
 80187ec:	f3bf 8f6f 	isb	sy
 80187f0:	f3bf 8f4f 	dsb	sy
 80187f4:	603b      	str	r3, [r7, #0]
}
 80187f6:	bf00      	nop
 80187f8:	e7fe      	b.n	80187f8 <vPortValidateInterruptPriority+0x60>
	}
 80187fa:	bf00      	nop
 80187fc:	3714      	adds	r7, #20
 80187fe:	46bd      	mov	sp, r7
 8018800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018804:	4770      	bx	lr
 8018806:	bf00      	nop
 8018808:	e000e3f0 	.word	0xe000e3f0
 801880c:	20001e1c 	.word	0x20001e1c
 8018810:	e000ed0c 	.word	0xe000ed0c
 8018814:	20001e20 	.word	0x20001e20

08018818 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018818:	b580      	push	{r7, lr}
 801881a:	b08a      	sub	sp, #40	; 0x28
 801881c:	af00      	add	r7, sp, #0
 801881e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018820:	2300      	movs	r3, #0
 8018822:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018824:	f7fe fc98 	bl	8017158 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018828:	4b5b      	ldr	r3, [pc, #364]	; (8018998 <pvPortMalloc+0x180>)
 801882a:	681b      	ldr	r3, [r3, #0]
 801882c:	2b00      	cmp	r3, #0
 801882e:	d101      	bne.n	8018834 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018830:	f000 f920 	bl	8018a74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018834:	4b59      	ldr	r3, [pc, #356]	; (801899c <pvPortMalloc+0x184>)
 8018836:	681a      	ldr	r2, [r3, #0]
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	4013      	ands	r3, r2
 801883c:	2b00      	cmp	r3, #0
 801883e:	f040 8093 	bne.w	8018968 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	2b00      	cmp	r3, #0
 8018846:	d01d      	beq.n	8018884 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8018848:	2208      	movs	r2, #8
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	4413      	add	r3, r2
 801884e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	f003 0307 	and.w	r3, r3, #7
 8018856:	2b00      	cmp	r3, #0
 8018858:	d014      	beq.n	8018884 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	f023 0307 	bic.w	r3, r3, #7
 8018860:	3308      	adds	r3, #8
 8018862:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	f003 0307 	and.w	r3, r3, #7
 801886a:	2b00      	cmp	r3, #0
 801886c:	d00a      	beq.n	8018884 <pvPortMalloc+0x6c>
	__asm volatile
 801886e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018872:	f383 8811 	msr	BASEPRI, r3
 8018876:	f3bf 8f6f 	isb	sy
 801887a:	f3bf 8f4f 	dsb	sy
 801887e:	617b      	str	r3, [r7, #20]
}
 8018880:	bf00      	nop
 8018882:	e7fe      	b.n	8018882 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	2b00      	cmp	r3, #0
 8018888:	d06e      	beq.n	8018968 <pvPortMalloc+0x150>
 801888a:	4b45      	ldr	r3, [pc, #276]	; (80189a0 <pvPortMalloc+0x188>)
 801888c:	681b      	ldr	r3, [r3, #0]
 801888e:	687a      	ldr	r2, [r7, #4]
 8018890:	429a      	cmp	r2, r3
 8018892:	d869      	bhi.n	8018968 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8018894:	4b43      	ldr	r3, [pc, #268]	; (80189a4 <pvPortMalloc+0x18c>)
 8018896:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8018898:	4b42      	ldr	r3, [pc, #264]	; (80189a4 <pvPortMalloc+0x18c>)
 801889a:	681b      	ldr	r3, [r3, #0]
 801889c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801889e:	e004      	b.n	80188aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80188a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80188a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80188aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188ac:	685b      	ldr	r3, [r3, #4]
 80188ae:	687a      	ldr	r2, [r7, #4]
 80188b0:	429a      	cmp	r2, r3
 80188b2:	d903      	bls.n	80188bc <pvPortMalloc+0xa4>
 80188b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188b6:	681b      	ldr	r3, [r3, #0]
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	d1f1      	bne.n	80188a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80188bc:	4b36      	ldr	r3, [pc, #216]	; (8018998 <pvPortMalloc+0x180>)
 80188be:	681b      	ldr	r3, [r3, #0]
 80188c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80188c2:	429a      	cmp	r2, r3
 80188c4:	d050      	beq.n	8018968 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80188c6:	6a3b      	ldr	r3, [r7, #32]
 80188c8:	681b      	ldr	r3, [r3, #0]
 80188ca:	2208      	movs	r2, #8
 80188cc:	4413      	add	r3, r2
 80188ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80188d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188d2:	681a      	ldr	r2, [r3, #0]
 80188d4:	6a3b      	ldr	r3, [r7, #32]
 80188d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80188d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188da:	685a      	ldr	r2, [r3, #4]
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	1ad2      	subs	r2, r2, r3
 80188e0:	2308      	movs	r3, #8
 80188e2:	005b      	lsls	r3, r3, #1
 80188e4:	429a      	cmp	r2, r3
 80188e6:	d91f      	bls.n	8018928 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80188e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	4413      	add	r3, r2
 80188ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80188f0:	69bb      	ldr	r3, [r7, #24]
 80188f2:	f003 0307 	and.w	r3, r3, #7
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	d00a      	beq.n	8018910 <pvPortMalloc+0xf8>
	__asm volatile
 80188fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188fe:	f383 8811 	msr	BASEPRI, r3
 8018902:	f3bf 8f6f 	isb	sy
 8018906:	f3bf 8f4f 	dsb	sy
 801890a:	613b      	str	r3, [r7, #16]
}
 801890c:	bf00      	nop
 801890e:	e7fe      	b.n	801890e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018912:	685a      	ldr	r2, [r3, #4]
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	1ad2      	subs	r2, r2, r3
 8018918:	69bb      	ldr	r3, [r7, #24]
 801891a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801891c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801891e:	687a      	ldr	r2, [r7, #4]
 8018920:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018922:	69b8      	ldr	r0, [r7, #24]
 8018924:	f000 f908 	bl	8018b38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018928:	4b1d      	ldr	r3, [pc, #116]	; (80189a0 <pvPortMalloc+0x188>)
 801892a:	681a      	ldr	r2, [r3, #0]
 801892c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801892e:	685b      	ldr	r3, [r3, #4]
 8018930:	1ad3      	subs	r3, r2, r3
 8018932:	4a1b      	ldr	r2, [pc, #108]	; (80189a0 <pvPortMalloc+0x188>)
 8018934:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018936:	4b1a      	ldr	r3, [pc, #104]	; (80189a0 <pvPortMalloc+0x188>)
 8018938:	681a      	ldr	r2, [r3, #0]
 801893a:	4b1b      	ldr	r3, [pc, #108]	; (80189a8 <pvPortMalloc+0x190>)
 801893c:	681b      	ldr	r3, [r3, #0]
 801893e:	429a      	cmp	r2, r3
 8018940:	d203      	bcs.n	801894a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018942:	4b17      	ldr	r3, [pc, #92]	; (80189a0 <pvPortMalloc+0x188>)
 8018944:	681b      	ldr	r3, [r3, #0]
 8018946:	4a18      	ldr	r2, [pc, #96]	; (80189a8 <pvPortMalloc+0x190>)
 8018948:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801894a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801894c:	685a      	ldr	r2, [r3, #4]
 801894e:	4b13      	ldr	r3, [pc, #76]	; (801899c <pvPortMalloc+0x184>)
 8018950:	681b      	ldr	r3, [r3, #0]
 8018952:	431a      	orrs	r2, r3
 8018954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018956:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801895a:	2200      	movs	r2, #0
 801895c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801895e:	4b13      	ldr	r3, [pc, #76]	; (80189ac <pvPortMalloc+0x194>)
 8018960:	681b      	ldr	r3, [r3, #0]
 8018962:	3301      	adds	r3, #1
 8018964:	4a11      	ldr	r2, [pc, #68]	; (80189ac <pvPortMalloc+0x194>)
 8018966:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018968:	f7fe fc04 	bl	8017174 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801896c:	69fb      	ldr	r3, [r7, #28]
 801896e:	f003 0307 	and.w	r3, r3, #7
 8018972:	2b00      	cmp	r3, #0
 8018974:	d00a      	beq.n	801898c <pvPortMalloc+0x174>
	__asm volatile
 8018976:	f04f 0350 	mov.w	r3, #80	; 0x50
 801897a:	f383 8811 	msr	BASEPRI, r3
 801897e:	f3bf 8f6f 	isb	sy
 8018982:	f3bf 8f4f 	dsb	sy
 8018986:	60fb      	str	r3, [r7, #12]
}
 8018988:	bf00      	nop
 801898a:	e7fe      	b.n	801898a <pvPortMalloc+0x172>
	return pvReturn;
 801898c:	69fb      	ldr	r3, [r7, #28]
}
 801898e:	4618      	mov	r0, r3
 8018990:	3728      	adds	r7, #40	; 0x28
 8018992:	46bd      	mov	sp, r7
 8018994:	bd80      	pop	{r7, pc}
 8018996:	bf00      	nop
 8018998:	20005a2c 	.word	0x20005a2c
 801899c:	20005a40 	.word	0x20005a40
 80189a0:	20005a30 	.word	0x20005a30
 80189a4:	20005a24 	.word	0x20005a24
 80189a8:	20005a34 	.word	0x20005a34
 80189ac:	20005a38 	.word	0x20005a38

080189b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80189b0:	b580      	push	{r7, lr}
 80189b2:	b086      	sub	sp, #24
 80189b4:	af00      	add	r7, sp, #0
 80189b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d04d      	beq.n	8018a5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80189c2:	2308      	movs	r3, #8
 80189c4:	425b      	negs	r3, r3
 80189c6:	697a      	ldr	r2, [r7, #20]
 80189c8:	4413      	add	r3, r2
 80189ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80189cc:	697b      	ldr	r3, [r7, #20]
 80189ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80189d0:	693b      	ldr	r3, [r7, #16]
 80189d2:	685a      	ldr	r2, [r3, #4]
 80189d4:	4b24      	ldr	r3, [pc, #144]	; (8018a68 <vPortFree+0xb8>)
 80189d6:	681b      	ldr	r3, [r3, #0]
 80189d8:	4013      	ands	r3, r2
 80189da:	2b00      	cmp	r3, #0
 80189dc:	d10a      	bne.n	80189f4 <vPortFree+0x44>
	__asm volatile
 80189de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189e2:	f383 8811 	msr	BASEPRI, r3
 80189e6:	f3bf 8f6f 	isb	sy
 80189ea:	f3bf 8f4f 	dsb	sy
 80189ee:	60fb      	str	r3, [r7, #12]
}
 80189f0:	bf00      	nop
 80189f2:	e7fe      	b.n	80189f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80189f4:	693b      	ldr	r3, [r7, #16]
 80189f6:	681b      	ldr	r3, [r3, #0]
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d00a      	beq.n	8018a12 <vPortFree+0x62>
	__asm volatile
 80189fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a00:	f383 8811 	msr	BASEPRI, r3
 8018a04:	f3bf 8f6f 	isb	sy
 8018a08:	f3bf 8f4f 	dsb	sy
 8018a0c:	60bb      	str	r3, [r7, #8]
}
 8018a0e:	bf00      	nop
 8018a10:	e7fe      	b.n	8018a10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8018a12:	693b      	ldr	r3, [r7, #16]
 8018a14:	685a      	ldr	r2, [r3, #4]
 8018a16:	4b14      	ldr	r3, [pc, #80]	; (8018a68 <vPortFree+0xb8>)
 8018a18:	681b      	ldr	r3, [r3, #0]
 8018a1a:	4013      	ands	r3, r2
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	d01e      	beq.n	8018a5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8018a20:	693b      	ldr	r3, [r7, #16]
 8018a22:	681b      	ldr	r3, [r3, #0]
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d11a      	bne.n	8018a5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018a28:	693b      	ldr	r3, [r7, #16]
 8018a2a:	685a      	ldr	r2, [r3, #4]
 8018a2c:	4b0e      	ldr	r3, [pc, #56]	; (8018a68 <vPortFree+0xb8>)
 8018a2e:	681b      	ldr	r3, [r3, #0]
 8018a30:	43db      	mvns	r3, r3
 8018a32:	401a      	ands	r2, r3
 8018a34:	693b      	ldr	r3, [r7, #16]
 8018a36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018a38:	f7fe fb8e 	bl	8017158 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8018a3c:	693b      	ldr	r3, [r7, #16]
 8018a3e:	685a      	ldr	r2, [r3, #4]
 8018a40:	4b0a      	ldr	r3, [pc, #40]	; (8018a6c <vPortFree+0xbc>)
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	4413      	add	r3, r2
 8018a46:	4a09      	ldr	r2, [pc, #36]	; (8018a6c <vPortFree+0xbc>)
 8018a48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8018a4a:	6938      	ldr	r0, [r7, #16]
 8018a4c:	f000 f874 	bl	8018b38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8018a50:	4b07      	ldr	r3, [pc, #28]	; (8018a70 <vPortFree+0xc0>)
 8018a52:	681b      	ldr	r3, [r3, #0]
 8018a54:	3301      	adds	r3, #1
 8018a56:	4a06      	ldr	r2, [pc, #24]	; (8018a70 <vPortFree+0xc0>)
 8018a58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8018a5a:	f7fe fb8b 	bl	8017174 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8018a5e:	bf00      	nop
 8018a60:	3718      	adds	r7, #24
 8018a62:	46bd      	mov	sp, r7
 8018a64:	bd80      	pop	{r7, pc}
 8018a66:	bf00      	nop
 8018a68:	20005a40 	.word	0x20005a40
 8018a6c:	20005a30 	.word	0x20005a30
 8018a70:	20005a3c 	.word	0x20005a3c

08018a74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018a74:	b480      	push	{r7}
 8018a76:	b085      	sub	sp, #20
 8018a78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8018a7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8018a7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8018a80:	4b27      	ldr	r3, [pc, #156]	; (8018b20 <prvHeapInit+0xac>)
 8018a82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018a84:	68fb      	ldr	r3, [r7, #12]
 8018a86:	f003 0307 	and.w	r3, r3, #7
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	d00c      	beq.n	8018aa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8018a8e:	68fb      	ldr	r3, [r7, #12]
 8018a90:	3307      	adds	r3, #7
 8018a92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018a94:	68fb      	ldr	r3, [r7, #12]
 8018a96:	f023 0307 	bic.w	r3, r3, #7
 8018a9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8018a9c:	68ba      	ldr	r2, [r7, #8]
 8018a9e:	68fb      	ldr	r3, [r7, #12]
 8018aa0:	1ad3      	subs	r3, r2, r3
 8018aa2:	4a1f      	ldr	r2, [pc, #124]	; (8018b20 <prvHeapInit+0xac>)
 8018aa4:	4413      	add	r3, r2
 8018aa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8018aa8:	68fb      	ldr	r3, [r7, #12]
 8018aaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8018aac:	4a1d      	ldr	r2, [pc, #116]	; (8018b24 <prvHeapInit+0xb0>)
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8018ab2:	4b1c      	ldr	r3, [pc, #112]	; (8018b24 <prvHeapInit+0xb0>)
 8018ab4:	2200      	movs	r2, #0
 8018ab6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	68ba      	ldr	r2, [r7, #8]
 8018abc:	4413      	add	r3, r2
 8018abe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8018ac0:	2208      	movs	r2, #8
 8018ac2:	68fb      	ldr	r3, [r7, #12]
 8018ac4:	1a9b      	subs	r3, r3, r2
 8018ac6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018ac8:	68fb      	ldr	r3, [r7, #12]
 8018aca:	f023 0307 	bic.w	r3, r3, #7
 8018ace:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	4a15      	ldr	r2, [pc, #84]	; (8018b28 <prvHeapInit+0xb4>)
 8018ad4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8018ad6:	4b14      	ldr	r3, [pc, #80]	; (8018b28 <prvHeapInit+0xb4>)
 8018ad8:	681b      	ldr	r3, [r3, #0]
 8018ada:	2200      	movs	r2, #0
 8018adc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8018ade:	4b12      	ldr	r3, [pc, #72]	; (8018b28 <prvHeapInit+0xb4>)
 8018ae0:	681b      	ldr	r3, [r3, #0]
 8018ae2:	2200      	movs	r2, #0
 8018ae4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8018aea:	683b      	ldr	r3, [r7, #0]
 8018aec:	68fa      	ldr	r2, [r7, #12]
 8018aee:	1ad2      	subs	r2, r2, r3
 8018af0:	683b      	ldr	r3, [r7, #0]
 8018af2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8018af4:	4b0c      	ldr	r3, [pc, #48]	; (8018b28 <prvHeapInit+0xb4>)
 8018af6:	681a      	ldr	r2, [r3, #0]
 8018af8:	683b      	ldr	r3, [r7, #0]
 8018afa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018afc:	683b      	ldr	r3, [r7, #0]
 8018afe:	685b      	ldr	r3, [r3, #4]
 8018b00:	4a0a      	ldr	r2, [pc, #40]	; (8018b2c <prvHeapInit+0xb8>)
 8018b02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018b04:	683b      	ldr	r3, [r7, #0]
 8018b06:	685b      	ldr	r3, [r3, #4]
 8018b08:	4a09      	ldr	r2, [pc, #36]	; (8018b30 <prvHeapInit+0xbc>)
 8018b0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8018b0c:	4b09      	ldr	r3, [pc, #36]	; (8018b34 <prvHeapInit+0xc0>)
 8018b0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8018b12:	601a      	str	r2, [r3, #0]
}
 8018b14:	bf00      	nop
 8018b16:	3714      	adds	r7, #20
 8018b18:	46bd      	mov	sp, r7
 8018b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b1e:	4770      	bx	lr
 8018b20:	20001e24 	.word	0x20001e24
 8018b24:	20005a24 	.word	0x20005a24
 8018b28:	20005a2c 	.word	0x20005a2c
 8018b2c:	20005a34 	.word	0x20005a34
 8018b30:	20005a30 	.word	0x20005a30
 8018b34:	20005a40 	.word	0x20005a40

08018b38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018b38:	b480      	push	{r7}
 8018b3a:	b085      	sub	sp, #20
 8018b3c:	af00      	add	r7, sp, #0
 8018b3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018b40:	4b28      	ldr	r3, [pc, #160]	; (8018be4 <prvInsertBlockIntoFreeList+0xac>)
 8018b42:	60fb      	str	r3, [r7, #12]
 8018b44:	e002      	b.n	8018b4c <prvInsertBlockIntoFreeList+0x14>
 8018b46:	68fb      	ldr	r3, [r7, #12]
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	60fb      	str	r3, [r7, #12]
 8018b4c:	68fb      	ldr	r3, [r7, #12]
 8018b4e:	681b      	ldr	r3, [r3, #0]
 8018b50:	687a      	ldr	r2, [r7, #4]
 8018b52:	429a      	cmp	r2, r3
 8018b54:	d8f7      	bhi.n	8018b46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8018b56:	68fb      	ldr	r3, [r7, #12]
 8018b58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8018b5a:	68fb      	ldr	r3, [r7, #12]
 8018b5c:	685b      	ldr	r3, [r3, #4]
 8018b5e:	68ba      	ldr	r2, [r7, #8]
 8018b60:	4413      	add	r3, r2
 8018b62:	687a      	ldr	r2, [r7, #4]
 8018b64:	429a      	cmp	r2, r3
 8018b66:	d108      	bne.n	8018b7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018b68:	68fb      	ldr	r3, [r7, #12]
 8018b6a:	685a      	ldr	r2, [r3, #4]
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	685b      	ldr	r3, [r3, #4]
 8018b70:	441a      	add	r2, r3
 8018b72:	68fb      	ldr	r3, [r7, #12]
 8018b74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8018b76:	68fb      	ldr	r3, [r7, #12]
 8018b78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	685b      	ldr	r3, [r3, #4]
 8018b82:	68ba      	ldr	r2, [r7, #8]
 8018b84:	441a      	add	r2, r3
 8018b86:	68fb      	ldr	r3, [r7, #12]
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	429a      	cmp	r2, r3
 8018b8c:	d118      	bne.n	8018bc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8018b8e:	68fb      	ldr	r3, [r7, #12]
 8018b90:	681a      	ldr	r2, [r3, #0]
 8018b92:	4b15      	ldr	r3, [pc, #84]	; (8018be8 <prvInsertBlockIntoFreeList+0xb0>)
 8018b94:	681b      	ldr	r3, [r3, #0]
 8018b96:	429a      	cmp	r2, r3
 8018b98:	d00d      	beq.n	8018bb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	685a      	ldr	r2, [r3, #4]
 8018b9e:	68fb      	ldr	r3, [r7, #12]
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	685b      	ldr	r3, [r3, #4]
 8018ba4:	441a      	add	r2, r3
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8018baa:	68fb      	ldr	r3, [r7, #12]
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	681a      	ldr	r2, [r3, #0]
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	601a      	str	r2, [r3, #0]
 8018bb4:	e008      	b.n	8018bc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8018bb6:	4b0c      	ldr	r3, [pc, #48]	; (8018be8 <prvInsertBlockIntoFreeList+0xb0>)
 8018bb8:	681a      	ldr	r2, [r3, #0]
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	601a      	str	r2, [r3, #0]
 8018bbe:	e003      	b.n	8018bc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018bc0:	68fb      	ldr	r3, [r7, #12]
 8018bc2:	681a      	ldr	r2, [r3, #0]
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8018bc8:	68fa      	ldr	r2, [r7, #12]
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	429a      	cmp	r2, r3
 8018bce:	d002      	beq.n	8018bd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018bd0:	68fb      	ldr	r3, [r7, #12]
 8018bd2:	687a      	ldr	r2, [r7, #4]
 8018bd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018bd6:	bf00      	nop
 8018bd8:	3714      	adds	r7, #20
 8018bda:	46bd      	mov	sp, r7
 8018bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018be0:	4770      	bx	lr
 8018be2:	bf00      	nop
 8018be4:	20005a24 	.word	0x20005a24
 8018be8:	20005a2c 	.word	0x20005a2c

08018bec <__errno>:
 8018bec:	4b01      	ldr	r3, [pc, #4]	; (8018bf4 <__errno+0x8>)
 8018bee:	6818      	ldr	r0, [r3, #0]
 8018bf0:	4770      	bx	lr
 8018bf2:	bf00      	nop
 8018bf4:	200000d0 	.word	0x200000d0

08018bf8 <__libc_init_array>:
 8018bf8:	b570      	push	{r4, r5, r6, lr}
 8018bfa:	4d0d      	ldr	r5, [pc, #52]	; (8018c30 <__libc_init_array+0x38>)
 8018bfc:	4c0d      	ldr	r4, [pc, #52]	; (8018c34 <__libc_init_array+0x3c>)
 8018bfe:	1b64      	subs	r4, r4, r5
 8018c00:	10a4      	asrs	r4, r4, #2
 8018c02:	2600      	movs	r6, #0
 8018c04:	42a6      	cmp	r6, r4
 8018c06:	d109      	bne.n	8018c1c <__libc_init_array+0x24>
 8018c08:	4d0b      	ldr	r5, [pc, #44]	; (8018c38 <__libc_init_array+0x40>)
 8018c0a:	4c0c      	ldr	r4, [pc, #48]	; (8018c3c <__libc_init_array+0x44>)
 8018c0c:	f007 f8bc 	bl	801fd88 <_init>
 8018c10:	1b64      	subs	r4, r4, r5
 8018c12:	10a4      	asrs	r4, r4, #2
 8018c14:	2600      	movs	r6, #0
 8018c16:	42a6      	cmp	r6, r4
 8018c18:	d105      	bne.n	8018c26 <__libc_init_array+0x2e>
 8018c1a:	bd70      	pop	{r4, r5, r6, pc}
 8018c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8018c20:	4798      	blx	r3
 8018c22:	3601      	adds	r6, #1
 8018c24:	e7ee      	b.n	8018c04 <__libc_init_array+0xc>
 8018c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8018c2a:	4798      	blx	r3
 8018c2c:	3601      	adds	r6, #1
 8018c2e:	e7f2      	b.n	8018c16 <__libc_init_array+0x1e>
 8018c30:	08021318 	.word	0x08021318
 8018c34:	08021318 	.word	0x08021318
 8018c38:	08021318 	.word	0x08021318
 8018c3c:	0802131c 	.word	0x0802131c

08018c40 <malloc>:
 8018c40:	4b02      	ldr	r3, [pc, #8]	; (8018c4c <malloc+0xc>)
 8018c42:	4601      	mov	r1, r0
 8018c44:	6818      	ldr	r0, [r3, #0]
 8018c46:	f000 b871 	b.w	8018d2c <_malloc_r>
 8018c4a:	bf00      	nop
 8018c4c:	200000d0 	.word	0x200000d0

08018c50 <free>:
 8018c50:	4b02      	ldr	r3, [pc, #8]	; (8018c5c <free+0xc>)
 8018c52:	4601      	mov	r1, r0
 8018c54:	6818      	ldr	r0, [r3, #0]
 8018c56:	f000 b819 	b.w	8018c8c <_free_r>
 8018c5a:	bf00      	nop
 8018c5c:	200000d0 	.word	0x200000d0

08018c60 <memcpy>:
 8018c60:	440a      	add	r2, r1
 8018c62:	4291      	cmp	r1, r2
 8018c64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8018c68:	d100      	bne.n	8018c6c <memcpy+0xc>
 8018c6a:	4770      	bx	lr
 8018c6c:	b510      	push	{r4, lr}
 8018c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018c72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018c76:	4291      	cmp	r1, r2
 8018c78:	d1f9      	bne.n	8018c6e <memcpy+0xe>
 8018c7a:	bd10      	pop	{r4, pc}

08018c7c <memset>:
 8018c7c:	4402      	add	r2, r0
 8018c7e:	4603      	mov	r3, r0
 8018c80:	4293      	cmp	r3, r2
 8018c82:	d100      	bne.n	8018c86 <memset+0xa>
 8018c84:	4770      	bx	lr
 8018c86:	f803 1b01 	strb.w	r1, [r3], #1
 8018c8a:	e7f9      	b.n	8018c80 <memset+0x4>

08018c8c <_free_r>:
 8018c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018c8e:	2900      	cmp	r1, #0
 8018c90:	d048      	beq.n	8018d24 <_free_r+0x98>
 8018c92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018c96:	9001      	str	r0, [sp, #4]
 8018c98:	2b00      	cmp	r3, #0
 8018c9a:	f1a1 0404 	sub.w	r4, r1, #4
 8018c9e:	bfb8      	it	lt
 8018ca0:	18e4      	addlt	r4, r4, r3
 8018ca2:	f003 f8f1 	bl	801be88 <__malloc_lock>
 8018ca6:	4a20      	ldr	r2, [pc, #128]	; (8018d28 <_free_r+0x9c>)
 8018ca8:	9801      	ldr	r0, [sp, #4]
 8018caa:	6813      	ldr	r3, [r2, #0]
 8018cac:	4615      	mov	r5, r2
 8018cae:	b933      	cbnz	r3, 8018cbe <_free_r+0x32>
 8018cb0:	6063      	str	r3, [r4, #4]
 8018cb2:	6014      	str	r4, [r2, #0]
 8018cb4:	b003      	add	sp, #12
 8018cb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018cba:	f003 b8eb 	b.w	801be94 <__malloc_unlock>
 8018cbe:	42a3      	cmp	r3, r4
 8018cc0:	d90b      	bls.n	8018cda <_free_r+0x4e>
 8018cc2:	6821      	ldr	r1, [r4, #0]
 8018cc4:	1862      	adds	r2, r4, r1
 8018cc6:	4293      	cmp	r3, r2
 8018cc8:	bf04      	itt	eq
 8018cca:	681a      	ldreq	r2, [r3, #0]
 8018ccc:	685b      	ldreq	r3, [r3, #4]
 8018cce:	6063      	str	r3, [r4, #4]
 8018cd0:	bf04      	itt	eq
 8018cd2:	1852      	addeq	r2, r2, r1
 8018cd4:	6022      	streq	r2, [r4, #0]
 8018cd6:	602c      	str	r4, [r5, #0]
 8018cd8:	e7ec      	b.n	8018cb4 <_free_r+0x28>
 8018cda:	461a      	mov	r2, r3
 8018cdc:	685b      	ldr	r3, [r3, #4]
 8018cde:	b10b      	cbz	r3, 8018ce4 <_free_r+0x58>
 8018ce0:	42a3      	cmp	r3, r4
 8018ce2:	d9fa      	bls.n	8018cda <_free_r+0x4e>
 8018ce4:	6811      	ldr	r1, [r2, #0]
 8018ce6:	1855      	adds	r5, r2, r1
 8018ce8:	42a5      	cmp	r5, r4
 8018cea:	d10b      	bne.n	8018d04 <_free_r+0x78>
 8018cec:	6824      	ldr	r4, [r4, #0]
 8018cee:	4421      	add	r1, r4
 8018cf0:	1854      	adds	r4, r2, r1
 8018cf2:	42a3      	cmp	r3, r4
 8018cf4:	6011      	str	r1, [r2, #0]
 8018cf6:	d1dd      	bne.n	8018cb4 <_free_r+0x28>
 8018cf8:	681c      	ldr	r4, [r3, #0]
 8018cfa:	685b      	ldr	r3, [r3, #4]
 8018cfc:	6053      	str	r3, [r2, #4]
 8018cfe:	4421      	add	r1, r4
 8018d00:	6011      	str	r1, [r2, #0]
 8018d02:	e7d7      	b.n	8018cb4 <_free_r+0x28>
 8018d04:	d902      	bls.n	8018d0c <_free_r+0x80>
 8018d06:	230c      	movs	r3, #12
 8018d08:	6003      	str	r3, [r0, #0]
 8018d0a:	e7d3      	b.n	8018cb4 <_free_r+0x28>
 8018d0c:	6825      	ldr	r5, [r4, #0]
 8018d0e:	1961      	adds	r1, r4, r5
 8018d10:	428b      	cmp	r3, r1
 8018d12:	bf04      	itt	eq
 8018d14:	6819      	ldreq	r1, [r3, #0]
 8018d16:	685b      	ldreq	r3, [r3, #4]
 8018d18:	6063      	str	r3, [r4, #4]
 8018d1a:	bf04      	itt	eq
 8018d1c:	1949      	addeq	r1, r1, r5
 8018d1e:	6021      	streq	r1, [r4, #0]
 8018d20:	6054      	str	r4, [r2, #4]
 8018d22:	e7c7      	b.n	8018cb4 <_free_r+0x28>
 8018d24:	b003      	add	sp, #12
 8018d26:	bd30      	pop	{r4, r5, pc}
 8018d28:	20005a44 	.word	0x20005a44

08018d2c <_malloc_r>:
 8018d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d2e:	1ccd      	adds	r5, r1, #3
 8018d30:	f025 0503 	bic.w	r5, r5, #3
 8018d34:	3508      	adds	r5, #8
 8018d36:	2d0c      	cmp	r5, #12
 8018d38:	bf38      	it	cc
 8018d3a:	250c      	movcc	r5, #12
 8018d3c:	2d00      	cmp	r5, #0
 8018d3e:	4606      	mov	r6, r0
 8018d40:	db01      	blt.n	8018d46 <_malloc_r+0x1a>
 8018d42:	42a9      	cmp	r1, r5
 8018d44:	d903      	bls.n	8018d4e <_malloc_r+0x22>
 8018d46:	230c      	movs	r3, #12
 8018d48:	6033      	str	r3, [r6, #0]
 8018d4a:	2000      	movs	r0, #0
 8018d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d4e:	f003 f89b 	bl	801be88 <__malloc_lock>
 8018d52:	4921      	ldr	r1, [pc, #132]	; (8018dd8 <_malloc_r+0xac>)
 8018d54:	680a      	ldr	r2, [r1, #0]
 8018d56:	4614      	mov	r4, r2
 8018d58:	b99c      	cbnz	r4, 8018d82 <_malloc_r+0x56>
 8018d5a:	4f20      	ldr	r7, [pc, #128]	; (8018ddc <_malloc_r+0xb0>)
 8018d5c:	683b      	ldr	r3, [r7, #0]
 8018d5e:	b923      	cbnz	r3, 8018d6a <_malloc_r+0x3e>
 8018d60:	4621      	mov	r1, r4
 8018d62:	4630      	mov	r0, r6
 8018d64:	f000 febe 	bl	8019ae4 <_sbrk_r>
 8018d68:	6038      	str	r0, [r7, #0]
 8018d6a:	4629      	mov	r1, r5
 8018d6c:	4630      	mov	r0, r6
 8018d6e:	f000 feb9 	bl	8019ae4 <_sbrk_r>
 8018d72:	1c43      	adds	r3, r0, #1
 8018d74:	d123      	bne.n	8018dbe <_malloc_r+0x92>
 8018d76:	230c      	movs	r3, #12
 8018d78:	6033      	str	r3, [r6, #0]
 8018d7a:	4630      	mov	r0, r6
 8018d7c:	f003 f88a 	bl	801be94 <__malloc_unlock>
 8018d80:	e7e3      	b.n	8018d4a <_malloc_r+0x1e>
 8018d82:	6823      	ldr	r3, [r4, #0]
 8018d84:	1b5b      	subs	r3, r3, r5
 8018d86:	d417      	bmi.n	8018db8 <_malloc_r+0x8c>
 8018d88:	2b0b      	cmp	r3, #11
 8018d8a:	d903      	bls.n	8018d94 <_malloc_r+0x68>
 8018d8c:	6023      	str	r3, [r4, #0]
 8018d8e:	441c      	add	r4, r3
 8018d90:	6025      	str	r5, [r4, #0]
 8018d92:	e004      	b.n	8018d9e <_malloc_r+0x72>
 8018d94:	6863      	ldr	r3, [r4, #4]
 8018d96:	42a2      	cmp	r2, r4
 8018d98:	bf0c      	ite	eq
 8018d9a:	600b      	streq	r3, [r1, #0]
 8018d9c:	6053      	strne	r3, [r2, #4]
 8018d9e:	4630      	mov	r0, r6
 8018da0:	f003 f878 	bl	801be94 <__malloc_unlock>
 8018da4:	f104 000b 	add.w	r0, r4, #11
 8018da8:	1d23      	adds	r3, r4, #4
 8018daa:	f020 0007 	bic.w	r0, r0, #7
 8018dae:	1ac2      	subs	r2, r0, r3
 8018db0:	d0cc      	beq.n	8018d4c <_malloc_r+0x20>
 8018db2:	1a1b      	subs	r3, r3, r0
 8018db4:	50a3      	str	r3, [r4, r2]
 8018db6:	e7c9      	b.n	8018d4c <_malloc_r+0x20>
 8018db8:	4622      	mov	r2, r4
 8018dba:	6864      	ldr	r4, [r4, #4]
 8018dbc:	e7cc      	b.n	8018d58 <_malloc_r+0x2c>
 8018dbe:	1cc4      	adds	r4, r0, #3
 8018dc0:	f024 0403 	bic.w	r4, r4, #3
 8018dc4:	42a0      	cmp	r0, r4
 8018dc6:	d0e3      	beq.n	8018d90 <_malloc_r+0x64>
 8018dc8:	1a21      	subs	r1, r4, r0
 8018dca:	4630      	mov	r0, r6
 8018dcc:	f000 fe8a 	bl	8019ae4 <_sbrk_r>
 8018dd0:	3001      	adds	r0, #1
 8018dd2:	d1dd      	bne.n	8018d90 <_malloc_r+0x64>
 8018dd4:	e7cf      	b.n	8018d76 <_malloc_r+0x4a>
 8018dd6:	bf00      	nop
 8018dd8:	20005a44 	.word	0x20005a44
 8018ddc:	20005a48 	.word	0x20005a48

08018de0 <__cvt>:
 8018de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018de4:	ec55 4b10 	vmov	r4, r5, d0
 8018de8:	2d00      	cmp	r5, #0
 8018dea:	460e      	mov	r6, r1
 8018dec:	4619      	mov	r1, r3
 8018dee:	462b      	mov	r3, r5
 8018df0:	bfbb      	ittet	lt
 8018df2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8018df6:	461d      	movlt	r5, r3
 8018df8:	2300      	movge	r3, #0
 8018dfa:	232d      	movlt	r3, #45	; 0x2d
 8018dfc:	700b      	strb	r3, [r1, #0]
 8018dfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018e00:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8018e04:	4691      	mov	r9, r2
 8018e06:	f023 0820 	bic.w	r8, r3, #32
 8018e0a:	bfbc      	itt	lt
 8018e0c:	4622      	movlt	r2, r4
 8018e0e:	4614      	movlt	r4, r2
 8018e10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8018e14:	d005      	beq.n	8018e22 <__cvt+0x42>
 8018e16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8018e1a:	d100      	bne.n	8018e1e <__cvt+0x3e>
 8018e1c:	3601      	adds	r6, #1
 8018e1e:	2102      	movs	r1, #2
 8018e20:	e000      	b.n	8018e24 <__cvt+0x44>
 8018e22:	2103      	movs	r1, #3
 8018e24:	ab03      	add	r3, sp, #12
 8018e26:	9301      	str	r3, [sp, #4]
 8018e28:	ab02      	add	r3, sp, #8
 8018e2a:	9300      	str	r3, [sp, #0]
 8018e2c:	ec45 4b10 	vmov	d0, r4, r5
 8018e30:	4653      	mov	r3, sl
 8018e32:	4632      	mov	r2, r6
 8018e34:	f001 fea4 	bl	801ab80 <_dtoa_r>
 8018e38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8018e3c:	4607      	mov	r7, r0
 8018e3e:	d102      	bne.n	8018e46 <__cvt+0x66>
 8018e40:	f019 0f01 	tst.w	r9, #1
 8018e44:	d022      	beq.n	8018e8c <__cvt+0xac>
 8018e46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8018e4a:	eb07 0906 	add.w	r9, r7, r6
 8018e4e:	d110      	bne.n	8018e72 <__cvt+0x92>
 8018e50:	783b      	ldrb	r3, [r7, #0]
 8018e52:	2b30      	cmp	r3, #48	; 0x30
 8018e54:	d10a      	bne.n	8018e6c <__cvt+0x8c>
 8018e56:	2200      	movs	r2, #0
 8018e58:	2300      	movs	r3, #0
 8018e5a:	4620      	mov	r0, r4
 8018e5c:	4629      	mov	r1, r5
 8018e5e:	f7e7 fe33 	bl	8000ac8 <__aeabi_dcmpeq>
 8018e62:	b918      	cbnz	r0, 8018e6c <__cvt+0x8c>
 8018e64:	f1c6 0601 	rsb	r6, r6, #1
 8018e68:	f8ca 6000 	str.w	r6, [sl]
 8018e6c:	f8da 3000 	ldr.w	r3, [sl]
 8018e70:	4499      	add	r9, r3
 8018e72:	2200      	movs	r2, #0
 8018e74:	2300      	movs	r3, #0
 8018e76:	4620      	mov	r0, r4
 8018e78:	4629      	mov	r1, r5
 8018e7a:	f7e7 fe25 	bl	8000ac8 <__aeabi_dcmpeq>
 8018e7e:	b108      	cbz	r0, 8018e84 <__cvt+0xa4>
 8018e80:	f8cd 900c 	str.w	r9, [sp, #12]
 8018e84:	2230      	movs	r2, #48	; 0x30
 8018e86:	9b03      	ldr	r3, [sp, #12]
 8018e88:	454b      	cmp	r3, r9
 8018e8a:	d307      	bcc.n	8018e9c <__cvt+0xbc>
 8018e8c:	9b03      	ldr	r3, [sp, #12]
 8018e8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018e90:	1bdb      	subs	r3, r3, r7
 8018e92:	4638      	mov	r0, r7
 8018e94:	6013      	str	r3, [r2, #0]
 8018e96:	b004      	add	sp, #16
 8018e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e9c:	1c59      	adds	r1, r3, #1
 8018e9e:	9103      	str	r1, [sp, #12]
 8018ea0:	701a      	strb	r2, [r3, #0]
 8018ea2:	e7f0      	b.n	8018e86 <__cvt+0xa6>

08018ea4 <__exponent>:
 8018ea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018ea6:	4603      	mov	r3, r0
 8018ea8:	2900      	cmp	r1, #0
 8018eaa:	bfb8      	it	lt
 8018eac:	4249      	neglt	r1, r1
 8018eae:	f803 2b02 	strb.w	r2, [r3], #2
 8018eb2:	bfb4      	ite	lt
 8018eb4:	222d      	movlt	r2, #45	; 0x2d
 8018eb6:	222b      	movge	r2, #43	; 0x2b
 8018eb8:	2909      	cmp	r1, #9
 8018eba:	7042      	strb	r2, [r0, #1]
 8018ebc:	dd2a      	ble.n	8018f14 <__exponent+0x70>
 8018ebe:	f10d 0407 	add.w	r4, sp, #7
 8018ec2:	46a4      	mov	ip, r4
 8018ec4:	270a      	movs	r7, #10
 8018ec6:	46a6      	mov	lr, r4
 8018ec8:	460a      	mov	r2, r1
 8018eca:	fb91 f6f7 	sdiv	r6, r1, r7
 8018ece:	fb07 1516 	mls	r5, r7, r6, r1
 8018ed2:	3530      	adds	r5, #48	; 0x30
 8018ed4:	2a63      	cmp	r2, #99	; 0x63
 8018ed6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8018eda:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8018ede:	4631      	mov	r1, r6
 8018ee0:	dcf1      	bgt.n	8018ec6 <__exponent+0x22>
 8018ee2:	3130      	adds	r1, #48	; 0x30
 8018ee4:	f1ae 0502 	sub.w	r5, lr, #2
 8018ee8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8018eec:	1c44      	adds	r4, r0, #1
 8018eee:	4629      	mov	r1, r5
 8018ef0:	4561      	cmp	r1, ip
 8018ef2:	d30a      	bcc.n	8018f0a <__exponent+0x66>
 8018ef4:	f10d 0209 	add.w	r2, sp, #9
 8018ef8:	eba2 020e 	sub.w	r2, r2, lr
 8018efc:	4565      	cmp	r5, ip
 8018efe:	bf88      	it	hi
 8018f00:	2200      	movhi	r2, #0
 8018f02:	4413      	add	r3, r2
 8018f04:	1a18      	subs	r0, r3, r0
 8018f06:	b003      	add	sp, #12
 8018f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018f0e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8018f12:	e7ed      	b.n	8018ef0 <__exponent+0x4c>
 8018f14:	2330      	movs	r3, #48	; 0x30
 8018f16:	3130      	adds	r1, #48	; 0x30
 8018f18:	7083      	strb	r3, [r0, #2]
 8018f1a:	70c1      	strb	r1, [r0, #3]
 8018f1c:	1d03      	adds	r3, r0, #4
 8018f1e:	e7f1      	b.n	8018f04 <__exponent+0x60>

08018f20 <_printf_float>:
 8018f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f24:	ed2d 8b02 	vpush	{d8}
 8018f28:	b08d      	sub	sp, #52	; 0x34
 8018f2a:	460c      	mov	r4, r1
 8018f2c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8018f30:	4616      	mov	r6, r2
 8018f32:	461f      	mov	r7, r3
 8018f34:	4605      	mov	r5, r0
 8018f36:	f002 ff7f 	bl	801be38 <_localeconv_r>
 8018f3a:	f8d0 a000 	ldr.w	sl, [r0]
 8018f3e:	4650      	mov	r0, sl
 8018f40:	f7e7 f946 	bl	80001d0 <strlen>
 8018f44:	2300      	movs	r3, #0
 8018f46:	930a      	str	r3, [sp, #40]	; 0x28
 8018f48:	6823      	ldr	r3, [r4, #0]
 8018f4a:	9305      	str	r3, [sp, #20]
 8018f4c:	f8d8 3000 	ldr.w	r3, [r8]
 8018f50:	f894 b018 	ldrb.w	fp, [r4, #24]
 8018f54:	3307      	adds	r3, #7
 8018f56:	f023 0307 	bic.w	r3, r3, #7
 8018f5a:	f103 0208 	add.w	r2, r3, #8
 8018f5e:	f8c8 2000 	str.w	r2, [r8]
 8018f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f66:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8018f6a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8018f6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8018f72:	9307      	str	r3, [sp, #28]
 8018f74:	f8cd 8018 	str.w	r8, [sp, #24]
 8018f78:	ee08 0a10 	vmov	s16, r0
 8018f7c:	4b9f      	ldr	r3, [pc, #636]	; (80191fc <_printf_float+0x2dc>)
 8018f7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018f82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018f86:	f7e7 fdd1 	bl	8000b2c <__aeabi_dcmpun>
 8018f8a:	bb88      	cbnz	r0, 8018ff0 <_printf_float+0xd0>
 8018f8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018f90:	4b9a      	ldr	r3, [pc, #616]	; (80191fc <_printf_float+0x2dc>)
 8018f92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018f96:	f7e7 fdab 	bl	8000af0 <__aeabi_dcmple>
 8018f9a:	bb48      	cbnz	r0, 8018ff0 <_printf_float+0xd0>
 8018f9c:	2200      	movs	r2, #0
 8018f9e:	2300      	movs	r3, #0
 8018fa0:	4640      	mov	r0, r8
 8018fa2:	4649      	mov	r1, r9
 8018fa4:	f7e7 fd9a 	bl	8000adc <__aeabi_dcmplt>
 8018fa8:	b110      	cbz	r0, 8018fb0 <_printf_float+0x90>
 8018faa:	232d      	movs	r3, #45	; 0x2d
 8018fac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018fb0:	4b93      	ldr	r3, [pc, #588]	; (8019200 <_printf_float+0x2e0>)
 8018fb2:	4894      	ldr	r0, [pc, #592]	; (8019204 <_printf_float+0x2e4>)
 8018fb4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8018fb8:	bf94      	ite	ls
 8018fba:	4698      	movls	r8, r3
 8018fbc:	4680      	movhi	r8, r0
 8018fbe:	2303      	movs	r3, #3
 8018fc0:	6123      	str	r3, [r4, #16]
 8018fc2:	9b05      	ldr	r3, [sp, #20]
 8018fc4:	f023 0204 	bic.w	r2, r3, #4
 8018fc8:	6022      	str	r2, [r4, #0]
 8018fca:	f04f 0900 	mov.w	r9, #0
 8018fce:	9700      	str	r7, [sp, #0]
 8018fd0:	4633      	mov	r3, r6
 8018fd2:	aa0b      	add	r2, sp, #44	; 0x2c
 8018fd4:	4621      	mov	r1, r4
 8018fd6:	4628      	mov	r0, r5
 8018fd8:	f000 f9d8 	bl	801938c <_printf_common>
 8018fdc:	3001      	adds	r0, #1
 8018fde:	f040 8090 	bne.w	8019102 <_printf_float+0x1e2>
 8018fe2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018fe6:	b00d      	add	sp, #52	; 0x34
 8018fe8:	ecbd 8b02 	vpop	{d8}
 8018fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ff0:	4642      	mov	r2, r8
 8018ff2:	464b      	mov	r3, r9
 8018ff4:	4640      	mov	r0, r8
 8018ff6:	4649      	mov	r1, r9
 8018ff8:	f7e7 fd98 	bl	8000b2c <__aeabi_dcmpun>
 8018ffc:	b140      	cbz	r0, 8019010 <_printf_float+0xf0>
 8018ffe:	464b      	mov	r3, r9
 8019000:	2b00      	cmp	r3, #0
 8019002:	bfbc      	itt	lt
 8019004:	232d      	movlt	r3, #45	; 0x2d
 8019006:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801900a:	487f      	ldr	r0, [pc, #508]	; (8019208 <_printf_float+0x2e8>)
 801900c:	4b7f      	ldr	r3, [pc, #508]	; (801920c <_printf_float+0x2ec>)
 801900e:	e7d1      	b.n	8018fb4 <_printf_float+0x94>
 8019010:	6863      	ldr	r3, [r4, #4]
 8019012:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8019016:	9206      	str	r2, [sp, #24]
 8019018:	1c5a      	adds	r2, r3, #1
 801901a:	d13f      	bne.n	801909c <_printf_float+0x17c>
 801901c:	2306      	movs	r3, #6
 801901e:	6063      	str	r3, [r4, #4]
 8019020:	9b05      	ldr	r3, [sp, #20]
 8019022:	6861      	ldr	r1, [r4, #4]
 8019024:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019028:	2300      	movs	r3, #0
 801902a:	9303      	str	r3, [sp, #12]
 801902c:	ab0a      	add	r3, sp, #40	; 0x28
 801902e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8019032:	ab09      	add	r3, sp, #36	; 0x24
 8019034:	ec49 8b10 	vmov	d0, r8, r9
 8019038:	9300      	str	r3, [sp, #0]
 801903a:	6022      	str	r2, [r4, #0]
 801903c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8019040:	4628      	mov	r0, r5
 8019042:	f7ff fecd 	bl	8018de0 <__cvt>
 8019046:	9b06      	ldr	r3, [sp, #24]
 8019048:	9909      	ldr	r1, [sp, #36]	; 0x24
 801904a:	2b47      	cmp	r3, #71	; 0x47
 801904c:	4680      	mov	r8, r0
 801904e:	d108      	bne.n	8019062 <_printf_float+0x142>
 8019050:	1cc8      	adds	r0, r1, #3
 8019052:	db02      	blt.n	801905a <_printf_float+0x13a>
 8019054:	6863      	ldr	r3, [r4, #4]
 8019056:	4299      	cmp	r1, r3
 8019058:	dd41      	ble.n	80190de <_printf_float+0x1be>
 801905a:	f1ab 0b02 	sub.w	fp, fp, #2
 801905e:	fa5f fb8b 	uxtb.w	fp, fp
 8019062:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019066:	d820      	bhi.n	80190aa <_printf_float+0x18a>
 8019068:	3901      	subs	r1, #1
 801906a:	465a      	mov	r2, fp
 801906c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019070:	9109      	str	r1, [sp, #36]	; 0x24
 8019072:	f7ff ff17 	bl	8018ea4 <__exponent>
 8019076:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019078:	1813      	adds	r3, r2, r0
 801907a:	2a01      	cmp	r2, #1
 801907c:	4681      	mov	r9, r0
 801907e:	6123      	str	r3, [r4, #16]
 8019080:	dc02      	bgt.n	8019088 <_printf_float+0x168>
 8019082:	6822      	ldr	r2, [r4, #0]
 8019084:	07d2      	lsls	r2, r2, #31
 8019086:	d501      	bpl.n	801908c <_printf_float+0x16c>
 8019088:	3301      	adds	r3, #1
 801908a:	6123      	str	r3, [r4, #16]
 801908c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8019090:	2b00      	cmp	r3, #0
 8019092:	d09c      	beq.n	8018fce <_printf_float+0xae>
 8019094:	232d      	movs	r3, #45	; 0x2d
 8019096:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801909a:	e798      	b.n	8018fce <_printf_float+0xae>
 801909c:	9a06      	ldr	r2, [sp, #24]
 801909e:	2a47      	cmp	r2, #71	; 0x47
 80190a0:	d1be      	bne.n	8019020 <_printf_float+0x100>
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	d1bc      	bne.n	8019020 <_printf_float+0x100>
 80190a6:	2301      	movs	r3, #1
 80190a8:	e7b9      	b.n	801901e <_printf_float+0xfe>
 80190aa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80190ae:	d118      	bne.n	80190e2 <_printf_float+0x1c2>
 80190b0:	2900      	cmp	r1, #0
 80190b2:	6863      	ldr	r3, [r4, #4]
 80190b4:	dd0b      	ble.n	80190ce <_printf_float+0x1ae>
 80190b6:	6121      	str	r1, [r4, #16]
 80190b8:	b913      	cbnz	r3, 80190c0 <_printf_float+0x1a0>
 80190ba:	6822      	ldr	r2, [r4, #0]
 80190bc:	07d0      	lsls	r0, r2, #31
 80190be:	d502      	bpl.n	80190c6 <_printf_float+0x1a6>
 80190c0:	3301      	adds	r3, #1
 80190c2:	440b      	add	r3, r1
 80190c4:	6123      	str	r3, [r4, #16]
 80190c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80190c8:	f04f 0900 	mov.w	r9, #0
 80190cc:	e7de      	b.n	801908c <_printf_float+0x16c>
 80190ce:	b913      	cbnz	r3, 80190d6 <_printf_float+0x1b6>
 80190d0:	6822      	ldr	r2, [r4, #0]
 80190d2:	07d2      	lsls	r2, r2, #31
 80190d4:	d501      	bpl.n	80190da <_printf_float+0x1ba>
 80190d6:	3302      	adds	r3, #2
 80190d8:	e7f4      	b.n	80190c4 <_printf_float+0x1a4>
 80190da:	2301      	movs	r3, #1
 80190dc:	e7f2      	b.n	80190c4 <_printf_float+0x1a4>
 80190de:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80190e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80190e4:	4299      	cmp	r1, r3
 80190e6:	db05      	blt.n	80190f4 <_printf_float+0x1d4>
 80190e8:	6823      	ldr	r3, [r4, #0]
 80190ea:	6121      	str	r1, [r4, #16]
 80190ec:	07d8      	lsls	r0, r3, #31
 80190ee:	d5ea      	bpl.n	80190c6 <_printf_float+0x1a6>
 80190f0:	1c4b      	adds	r3, r1, #1
 80190f2:	e7e7      	b.n	80190c4 <_printf_float+0x1a4>
 80190f4:	2900      	cmp	r1, #0
 80190f6:	bfd4      	ite	le
 80190f8:	f1c1 0202 	rsble	r2, r1, #2
 80190fc:	2201      	movgt	r2, #1
 80190fe:	4413      	add	r3, r2
 8019100:	e7e0      	b.n	80190c4 <_printf_float+0x1a4>
 8019102:	6823      	ldr	r3, [r4, #0]
 8019104:	055a      	lsls	r2, r3, #21
 8019106:	d407      	bmi.n	8019118 <_printf_float+0x1f8>
 8019108:	6923      	ldr	r3, [r4, #16]
 801910a:	4642      	mov	r2, r8
 801910c:	4631      	mov	r1, r6
 801910e:	4628      	mov	r0, r5
 8019110:	47b8      	blx	r7
 8019112:	3001      	adds	r0, #1
 8019114:	d12c      	bne.n	8019170 <_printf_float+0x250>
 8019116:	e764      	b.n	8018fe2 <_printf_float+0xc2>
 8019118:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801911c:	f240 80e0 	bls.w	80192e0 <_printf_float+0x3c0>
 8019120:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019124:	2200      	movs	r2, #0
 8019126:	2300      	movs	r3, #0
 8019128:	f7e7 fcce 	bl	8000ac8 <__aeabi_dcmpeq>
 801912c:	2800      	cmp	r0, #0
 801912e:	d034      	beq.n	801919a <_printf_float+0x27a>
 8019130:	4a37      	ldr	r2, [pc, #220]	; (8019210 <_printf_float+0x2f0>)
 8019132:	2301      	movs	r3, #1
 8019134:	4631      	mov	r1, r6
 8019136:	4628      	mov	r0, r5
 8019138:	47b8      	blx	r7
 801913a:	3001      	adds	r0, #1
 801913c:	f43f af51 	beq.w	8018fe2 <_printf_float+0xc2>
 8019140:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019144:	429a      	cmp	r2, r3
 8019146:	db02      	blt.n	801914e <_printf_float+0x22e>
 8019148:	6823      	ldr	r3, [r4, #0]
 801914a:	07d8      	lsls	r0, r3, #31
 801914c:	d510      	bpl.n	8019170 <_printf_float+0x250>
 801914e:	ee18 3a10 	vmov	r3, s16
 8019152:	4652      	mov	r2, sl
 8019154:	4631      	mov	r1, r6
 8019156:	4628      	mov	r0, r5
 8019158:	47b8      	blx	r7
 801915a:	3001      	adds	r0, #1
 801915c:	f43f af41 	beq.w	8018fe2 <_printf_float+0xc2>
 8019160:	f04f 0800 	mov.w	r8, #0
 8019164:	f104 091a 	add.w	r9, r4, #26
 8019168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801916a:	3b01      	subs	r3, #1
 801916c:	4543      	cmp	r3, r8
 801916e:	dc09      	bgt.n	8019184 <_printf_float+0x264>
 8019170:	6823      	ldr	r3, [r4, #0]
 8019172:	079b      	lsls	r3, r3, #30
 8019174:	f100 8105 	bmi.w	8019382 <_printf_float+0x462>
 8019178:	68e0      	ldr	r0, [r4, #12]
 801917a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801917c:	4298      	cmp	r0, r3
 801917e:	bfb8      	it	lt
 8019180:	4618      	movlt	r0, r3
 8019182:	e730      	b.n	8018fe6 <_printf_float+0xc6>
 8019184:	2301      	movs	r3, #1
 8019186:	464a      	mov	r2, r9
 8019188:	4631      	mov	r1, r6
 801918a:	4628      	mov	r0, r5
 801918c:	47b8      	blx	r7
 801918e:	3001      	adds	r0, #1
 8019190:	f43f af27 	beq.w	8018fe2 <_printf_float+0xc2>
 8019194:	f108 0801 	add.w	r8, r8, #1
 8019198:	e7e6      	b.n	8019168 <_printf_float+0x248>
 801919a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801919c:	2b00      	cmp	r3, #0
 801919e:	dc39      	bgt.n	8019214 <_printf_float+0x2f4>
 80191a0:	4a1b      	ldr	r2, [pc, #108]	; (8019210 <_printf_float+0x2f0>)
 80191a2:	2301      	movs	r3, #1
 80191a4:	4631      	mov	r1, r6
 80191a6:	4628      	mov	r0, r5
 80191a8:	47b8      	blx	r7
 80191aa:	3001      	adds	r0, #1
 80191ac:	f43f af19 	beq.w	8018fe2 <_printf_float+0xc2>
 80191b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80191b4:	4313      	orrs	r3, r2
 80191b6:	d102      	bne.n	80191be <_printf_float+0x29e>
 80191b8:	6823      	ldr	r3, [r4, #0]
 80191ba:	07d9      	lsls	r1, r3, #31
 80191bc:	d5d8      	bpl.n	8019170 <_printf_float+0x250>
 80191be:	ee18 3a10 	vmov	r3, s16
 80191c2:	4652      	mov	r2, sl
 80191c4:	4631      	mov	r1, r6
 80191c6:	4628      	mov	r0, r5
 80191c8:	47b8      	blx	r7
 80191ca:	3001      	adds	r0, #1
 80191cc:	f43f af09 	beq.w	8018fe2 <_printf_float+0xc2>
 80191d0:	f04f 0900 	mov.w	r9, #0
 80191d4:	f104 0a1a 	add.w	sl, r4, #26
 80191d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191da:	425b      	negs	r3, r3
 80191dc:	454b      	cmp	r3, r9
 80191de:	dc01      	bgt.n	80191e4 <_printf_float+0x2c4>
 80191e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80191e2:	e792      	b.n	801910a <_printf_float+0x1ea>
 80191e4:	2301      	movs	r3, #1
 80191e6:	4652      	mov	r2, sl
 80191e8:	4631      	mov	r1, r6
 80191ea:	4628      	mov	r0, r5
 80191ec:	47b8      	blx	r7
 80191ee:	3001      	adds	r0, #1
 80191f0:	f43f aef7 	beq.w	8018fe2 <_printf_float+0xc2>
 80191f4:	f109 0901 	add.w	r9, r9, #1
 80191f8:	e7ee      	b.n	80191d8 <_printf_float+0x2b8>
 80191fa:	bf00      	nop
 80191fc:	7fefffff 	.word	0x7fefffff
 8019200:	080209b0 	.word	0x080209b0
 8019204:	080209b4 	.word	0x080209b4
 8019208:	080209bc 	.word	0x080209bc
 801920c:	080209b8 	.word	0x080209b8
 8019210:	080209c0 	.word	0x080209c0
 8019214:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019216:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019218:	429a      	cmp	r2, r3
 801921a:	bfa8      	it	ge
 801921c:	461a      	movge	r2, r3
 801921e:	2a00      	cmp	r2, #0
 8019220:	4691      	mov	r9, r2
 8019222:	dc37      	bgt.n	8019294 <_printf_float+0x374>
 8019224:	f04f 0b00 	mov.w	fp, #0
 8019228:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801922c:	f104 021a 	add.w	r2, r4, #26
 8019230:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019232:	9305      	str	r3, [sp, #20]
 8019234:	eba3 0309 	sub.w	r3, r3, r9
 8019238:	455b      	cmp	r3, fp
 801923a:	dc33      	bgt.n	80192a4 <_printf_float+0x384>
 801923c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019240:	429a      	cmp	r2, r3
 8019242:	db3b      	blt.n	80192bc <_printf_float+0x39c>
 8019244:	6823      	ldr	r3, [r4, #0]
 8019246:	07da      	lsls	r2, r3, #31
 8019248:	d438      	bmi.n	80192bc <_printf_float+0x39c>
 801924a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801924c:	9b05      	ldr	r3, [sp, #20]
 801924e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019250:	1ad3      	subs	r3, r2, r3
 8019252:	eba2 0901 	sub.w	r9, r2, r1
 8019256:	4599      	cmp	r9, r3
 8019258:	bfa8      	it	ge
 801925a:	4699      	movge	r9, r3
 801925c:	f1b9 0f00 	cmp.w	r9, #0
 8019260:	dc35      	bgt.n	80192ce <_printf_float+0x3ae>
 8019262:	f04f 0800 	mov.w	r8, #0
 8019266:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801926a:	f104 0a1a 	add.w	sl, r4, #26
 801926e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019272:	1a9b      	subs	r3, r3, r2
 8019274:	eba3 0309 	sub.w	r3, r3, r9
 8019278:	4543      	cmp	r3, r8
 801927a:	f77f af79 	ble.w	8019170 <_printf_float+0x250>
 801927e:	2301      	movs	r3, #1
 8019280:	4652      	mov	r2, sl
 8019282:	4631      	mov	r1, r6
 8019284:	4628      	mov	r0, r5
 8019286:	47b8      	blx	r7
 8019288:	3001      	adds	r0, #1
 801928a:	f43f aeaa 	beq.w	8018fe2 <_printf_float+0xc2>
 801928e:	f108 0801 	add.w	r8, r8, #1
 8019292:	e7ec      	b.n	801926e <_printf_float+0x34e>
 8019294:	4613      	mov	r3, r2
 8019296:	4631      	mov	r1, r6
 8019298:	4642      	mov	r2, r8
 801929a:	4628      	mov	r0, r5
 801929c:	47b8      	blx	r7
 801929e:	3001      	adds	r0, #1
 80192a0:	d1c0      	bne.n	8019224 <_printf_float+0x304>
 80192a2:	e69e      	b.n	8018fe2 <_printf_float+0xc2>
 80192a4:	2301      	movs	r3, #1
 80192a6:	4631      	mov	r1, r6
 80192a8:	4628      	mov	r0, r5
 80192aa:	9205      	str	r2, [sp, #20]
 80192ac:	47b8      	blx	r7
 80192ae:	3001      	adds	r0, #1
 80192b0:	f43f ae97 	beq.w	8018fe2 <_printf_float+0xc2>
 80192b4:	9a05      	ldr	r2, [sp, #20]
 80192b6:	f10b 0b01 	add.w	fp, fp, #1
 80192ba:	e7b9      	b.n	8019230 <_printf_float+0x310>
 80192bc:	ee18 3a10 	vmov	r3, s16
 80192c0:	4652      	mov	r2, sl
 80192c2:	4631      	mov	r1, r6
 80192c4:	4628      	mov	r0, r5
 80192c6:	47b8      	blx	r7
 80192c8:	3001      	adds	r0, #1
 80192ca:	d1be      	bne.n	801924a <_printf_float+0x32a>
 80192cc:	e689      	b.n	8018fe2 <_printf_float+0xc2>
 80192ce:	9a05      	ldr	r2, [sp, #20]
 80192d0:	464b      	mov	r3, r9
 80192d2:	4442      	add	r2, r8
 80192d4:	4631      	mov	r1, r6
 80192d6:	4628      	mov	r0, r5
 80192d8:	47b8      	blx	r7
 80192da:	3001      	adds	r0, #1
 80192dc:	d1c1      	bne.n	8019262 <_printf_float+0x342>
 80192de:	e680      	b.n	8018fe2 <_printf_float+0xc2>
 80192e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80192e2:	2a01      	cmp	r2, #1
 80192e4:	dc01      	bgt.n	80192ea <_printf_float+0x3ca>
 80192e6:	07db      	lsls	r3, r3, #31
 80192e8:	d538      	bpl.n	801935c <_printf_float+0x43c>
 80192ea:	2301      	movs	r3, #1
 80192ec:	4642      	mov	r2, r8
 80192ee:	4631      	mov	r1, r6
 80192f0:	4628      	mov	r0, r5
 80192f2:	47b8      	blx	r7
 80192f4:	3001      	adds	r0, #1
 80192f6:	f43f ae74 	beq.w	8018fe2 <_printf_float+0xc2>
 80192fa:	ee18 3a10 	vmov	r3, s16
 80192fe:	4652      	mov	r2, sl
 8019300:	4631      	mov	r1, r6
 8019302:	4628      	mov	r0, r5
 8019304:	47b8      	blx	r7
 8019306:	3001      	adds	r0, #1
 8019308:	f43f ae6b 	beq.w	8018fe2 <_printf_float+0xc2>
 801930c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019310:	2200      	movs	r2, #0
 8019312:	2300      	movs	r3, #0
 8019314:	f7e7 fbd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8019318:	b9d8      	cbnz	r0, 8019352 <_printf_float+0x432>
 801931a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801931c:	f108 0201 	add.w	r2, r8, #1
 8019320:	3b01      	subs	r3, #1
 8019322:	4631      	mov	r1, r6
 8019324:	4628      	mov	r0, r5
 8019326:	47b8      	blx	r7
 8019328:	3001      	adds	r0, #1
 801932a:	d10e      	bne.n	801934a <_printf_float+0x42a>
 801932c:	e659      	b.n	8018fe2 <_printf_float+0xc2>
 801932e:	2301      	movs	r3, #1
 8019330:	4652      	mov	r2, sl
 8019332:	4631      	mov	r1, r6
 8019334:	4628      	mov	r0, r5
 8019336:	47b8      	blx	r7
 8019338:	3001      	adds	r0, #1
 801933a:	f43f ae52 	beq.w	8018fe2 <_printf_float+0xc2>
 801933e:	f108 0801 	add.w	r8, r8, #1
 8019342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019344:	3b01      	subs	r3, #1
 8019346:	4543      	cmp	r3, r8
 8019348:	dcf1      	bgt.n	801932e <_printf_float+0x40e>
 801934a:	464b      	mov	r3, r9
 801934c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019350:	e6dc      	b.n	801910c <_printf_float+0x1ec>
 8019352:	f04f 0800 	mov.w	r8, #0
 8019356:	f104 0a1a 	add.w	sl, r4, #26
 801935a:	e7f2      	b.n	8019342 <_printf_float+0x422>
 801935c:	2301      	movs	r3, #1
 801935e:	4642      	mov	r2, r8
 8019360:	e7df      	b.n	8019322 <_printf_float+0x402>
 8019362:	2301      	movs	r3, #1
 8019364:	464a      	mov	r2, r9
 8019366:	4631      	mov	r1, r6
 8019368:	4628      	mov	r0, r5
 801936a:	47b8      	blx	r7
 801936c:	3001      	adds	r0, #1
 801936e:	f43f ae38 	beq.w	8018fe2 <_printf_float+0xc2>
 8019372:	f108 0801 	add.w	r8, r8, #1
 8019376:	68e3      	ldr	r3, [r4, #12]
 8019378:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801937a:	1a5b      	subs	r3, r3, r1
 801937c:	4543      	cmp	r3, r8
 801937e:	dcf0      	bgt.n	8019362 <_printf_float+0x442>
 8019380:	e6fa      	b.n	8019178 <_printf_float+0x258>
 8019382:	f04f 0800 	mov.w	r8, #0
 8019386:	f104 0919 	add.w	r9, r4, #25
 801938a:	e7f4      	b.n	8019376 <_printf_float+0x456>

0801938c <_printf_common>:
 801938c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019390:	4616      	mov	r6, r2
 8019392:	4699      	mov	r9, r3
 8019394:	688a      	ldr	r2, [r1, #8]
 8019396:	690b      	ldr	r3, [r1, #16]
 8019398:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801939c:	4293      	cmp	r3, r2
 801939e:	bfb8      	it	lt
 80193a0:	4613      	movlt	r3, r2
 80193a2:	6033      	str	r3, [r6, #0]
 80193a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80193a8:	4607      	mov	r7, r0
 80193aa:	460c      	mov	r4, r1
 80193ac:	b10a      	cbz	r2, 80193b2 <_printf_common+0x26>
 80193ae:	3301      	adds	r3, #1
 80193b0:	6033      	str	r3, [r6, #0]
 80193b2:	6823      	ldr	r3, [r4, #0]
 80193b4:	0699      	lsls	r1, r3, #26
 80193b6:	bf42      	ittt	mi
 80193b8:	6833      	ldrmi	r3, [r6, #0]
 80193ba:	3302      	addmi	r3, #2
 80193bc:	6033      	strmi	r3, [r6, #0]
 80193be:	6825      	ldr	r5, [r4, #0]
 80193c0:	f015 0506 	ands.w	r5, r5, #6
 80193c4:	d106      	bne.n	80193d4 <_printf_common+0x48>
 80193c6:	f104 0a19 	add.w	sl, r4, #25
 80193ca:	68e3      	ldr	r3, [r4, #12]
 80193cc:	6832      	ldr	r2, [r6, #0]
 80193ce:	1a9b      	subs	r3, r3, r2
 80193d0:	42ab      	cmp	r3, r5
 80193d2:	dc26      	bgt.n	8019422 <_printf_common+0x96>
 80193d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80193d8:	1e13      	subs	r3, r2, #0
 80193da:	6822      	ldr	r2, [r4, #0]
 80193dc:	bf18      	it	ne
 80193de:	2301      	movne	r3, #1
 80193e0:	0692      	lsls	r2, r2, #26
 80193e2:	d42b      	bmi.n	801943c <_printf_common+0xb0>
 80193e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80193e8:	4649      	mov	r1, r9
 80193ea:	4638      	mov	r0, r7
 80193ec:	47c0      	blx	r8
 80193ee:	3001      	adds	r0, #1
 80193f0:	d01e      	beq.n	8019430 <_printf_common+0xa4>
 80193f2:	6823      	ldr	r3, [r4, #0]
 80193f4:	68e5      	ldr	r5, [r4, #12]
 80193f6:	6832      	ldr	r2, [r6, #0]
 80193f8:	f003 0306 	and.w	r3, r3, #6
 80193fc:	2b04      	cmp	r3, #4
 80193fe:	bf08      	it	eq
 8019400:	1aad      	subeq	r5, r5, r2
 8019402:	68a3      	ldr	r3, [r4, #8]
 8019404:	6922      	ldr	r2, [r4, #16]
 8019406:	bf0c      	ite	eq
 8019408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801940c:	2500      	movne	r5, #0
 801940e:	4293      	cmp	r3, r2
 8019410:	bfc4      	itt	gt
 8019412:	1a9b      	subgt	r3, r3, r2
 8019414:	18ed      	addgt	r5, r5, r3
 8019416:	2600      	movs	r6, #0
 8019418:	341a      	adds	r4, #26
 801941a:	42b5      	cmp	r5, r6
 801941c:	d11a      	bne.n	8019454 <_printf_common+0xc8>
 801941e:	2000      	movs	r0, #0
 8019420:	e008      	b.n	8019434 <_printf_common+0xa8>
 8019422:	2301      	movs	r3, #1
 8019424:	4652      	mov	r2, sl
 8019426:	4649      	mov	r1, r9
 8019428:	4638      	mov	r0, r7
 801942a:	47c0      	blx	r8
 801942c:	3001      	adds	r0, #1
 801942e:	d103      	bne.n	8019438 <_printf_common+0xac>
 8019430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019438:	3501      	adds	r5, #1
 801943a:	e7c6      	b.n	80193ca <_printf_common+0x3e>
 801943c:	18e1      	adds	r1, r4, r3
 801943e:	1c5a      	adds	r2, r3, #1
 8019440:	2030      	movs	r0, #48	; 0x30
 8019442:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019446:	4422      	add	r2, r4
 8019448:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801944c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019450:	3302      	adds	r3, #2
 8019452:	e7c7      	b.n	80193e4 <_printf_common+0x58>
 8019454:	2301      	movs	r3, #1
 8019456:	4622      	mov	r2, r4
 8019458:	4649      	mov	r1, r9
 801945a:	4638      	mov	r0, r7
 801945c:	47c0      	blx	r8
 801945e:	3001      	adds	r0, #1
 8019460:	d0e6      	beq.n	8019430 <_printf_common+0xa4>
 8019462:	3601      	adds	r6, #1
 8019464:	e7d9      	b.n	801941a <_printf_common+0x8e>
	...

08019468 <_printf_i>:
 8019468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801946c:	460c      	mov	r4, r1
 801946e:	4691      	mov	r9, r2
 8019470:	7e27      	ldrb	r7, [r4, #24]
 8019472:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019474:	2f78      	cmp	r7, #120	; 0x78
 8019476:	4680      	mov	r8, r0
 8019478:	469a      	mov	sl, r3
 801947a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801947e:	d807      	bhi.n	8019490 <_printf_i+0x28>
 8019480:	2f62      	cmp	r7, #98	; 0x62
 8019482:	d80a      	bhi.n	801949a <_printf_i+0x32>
 8019484:	2f00      	cmp	r7, #0
 8019486:	f000 80d8 	beq.w	801963a <_printf_i+0x1d2>
 801948a:	2f58      	cmp	r7, #88	; 0x58
 801948c:	f000 80a3 	beq.w	80195d6 <_printf_i+0x16e>
 8019490:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019494:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019498:	e03a      	b.n	8019510 <_printf_i+0xa8>
 801949a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801949e:	2b15      	cmp	r3, #21
 80194a0:	d8f6      	bhi.n	8019490 <_printf_i+0x28>
 80194a2:	a001      	add	r0, pc, #4	; (adr r0, 80194a8 <_printf_i+0x40>)
 80194a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80194a8:	08019501 	.word	0x08019501
 80194ac:	08019515 	.word	0x08019515
 80194b0:	08019491 	.word	0x08019491
 80194b4:	08019491 	.word	0x08019491
 80194b8:	08019491 	.word	0x08019491
 80194bc:	08019491 	.word	0x08019491
 80194c0:	08019515 	.word	0x08019515
 80194c4:	08019491 	.word	0x08019491
 80194c8:	08019491 	.word	0x08019491
 80194cc:	08019491 	.word	0x08019491
 80194d0:	08019491 	.word	0x08019491
 80194d4:	08019621 	.word	0x08019621
 80194d8:	08019545 	.word	0x08019545
 80194dc:	08019603 	.word	0x08019603
 80194e0:	08019491 	.word	0x08019491
 80194e4:	08019491 	.word	0x08019491
 80194e8:	08019643 	.word	0x08019643
 80194ec:	08019491 	.word	0x08019491
 80194f0:	08019545 	.word	0x08019545
 80194f4:	08019491 	.word	0x08019491
 80194f8:	08019491 	.word	0x08019491
 80194fc:	0801960b 	.word	0x0801960b
 8019500:	680b      	ldr	r3, [r1, #0]
 8019502:	1d1a      	adds	r2, r3, #4
 8019504:	681b      	ldr	r3, [r3, #0]
 8019506:	600a      	str	r2, [r1, #0]
 8019508:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801950c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019510:	2301      	movs	r3, #1
 8019512:	e0a3      	b.n	801965c <_printf_i+0x1f4>
 8019514:	6825      	ldr	r5, [r4, #0]
 8019516:	6808      	ldr	r0, [r1, #0]
 8019518:	062e      	lsls	r6, r5, #24
 801951a:	f100 0304 	add.w	r3, r0, #4
 801951e:	d50a      	bpl.n	8019536 <_printf_i+0xce>
 8019520:	6805      	ldr	r5, [r0, #0]
 8019522:	600b      	str	r3, [r1, #0]
 8019524:	2d00      	cmp	r5, #0
 8019526:	da03      	bge.n	8019530 <_printf_i+0xc8>
 8019528:	232d      	movs	r3, #45	; 0x2d
 801952a:	426d      	negs	r5, r5
 801952c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019530:	485e      	ldr	r0, [pc, #376]	; (80196ac <_printf_i+0x244>)
 8019532:	230a      	movs	r3, #10
 8019534:	e019      	b.n	801956a <_printf_i+0x102>
 8019536:	f015 0f40 	tst.w	r5, #64	; 0x40
 801953a:	6805      	ldr	r5, [r0, #0]
 801953c:	600b      	str	r3, [r1, #0]
 801953e:	bf18      	it	ne
 8019540:	b22d      	sxthne	r5, r5
 8019542:	e7ef      	b.n	8019524 <_printf_i+0xbc>
 8019544:	680b      	ldr	r3, [r1, #0]
 8019546:	6825      	ldr	r5, [r4, #0]
 8019548:	1d18      	adds	r0, r3, #4
 801954a:	6008      	str	r0, [r1, #0]
 801954c:	0628      	lsls	r0, r5, #24
 801954e:	d501      	bpl.n	8019554 <_printf_i+0xec>
 8019550:	681d      	ldr	r5, [r3, #0]
 8019552:	e002      	b.n	801955a <_printf_i+0xf2>
 8019554:	0669      	lsls	r1, r5, #25
 8019556:	d5fb      	bpl.n	8019550 <_printf_i+0xe8>
 8019558:	881d      	ldrh	r5, [r3, #0]
 801955a:	4854      	ldr	r0, [pc, #336]	; (80196ac <_printf_i+0x244>)
 801955c:	2f6f      	cmp	r7, #111	; 0x6f
 801955e:	bf0c      	ite	eq
 8019560:	2308      	moveq	r3, #8
 8019562:	230a      	movne	r3, #10
 8019564:	2100      	movs	r1, #0
 8019566:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801956a:	6866      	ldr	r6, [r4, #4]
 801956c:	60a6      	str	r6, [r4, #8]
 801956e:	2e00      	cmp	r6, #0
 8019570:	bfa2      	ittt	ge
 8019572:	6821      	ldrge	r1, [r4, #0]
 8019574:	f021 0104 	bicge.w	r1, r1, #4
 8019578:	6021      	strge	r1, [r4, #0]
 801957a:	b90d      	cbnz	r5, 8019580 <_printf_i+0x118>
 801957c:	2e00      	cmp	r6, #0
 801957e:	d04d      	beq.n	801961c <_printf_i+0x1b4>
 8019580:	4616      	mov	r6, r2
 8019582:	fbb5 f1f3 	udiv	r1, r5, r3
 8019586:	fb03 5711 	mls	r7, r3, r1, r5
 801958a:	5dc7      	ldrb	r7, [r0, r7]
 801958c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019590:	462f      	mov	r7, r5
 8019592:	42bb      	cmp	r3, r7
 8019594:	460d      	mov	r5, r1
 8019596:	d9f4      	bls.n	8019582 <_printf_i+0x11a>
 8019598:	2b08      	cmp	r3, #8
 801959a:	d10b      	bne.n	80195b4 <_printf_i+0x14c>
 801959c:	6823      	ldr	r3, [r4, #0]
 801959e:	07df      	lsls	r7, r3, #31
 80195a0:	d508      	bpl.n	80195b4 <_printf_i+0x14c>
 80195a2:	6923      	ldr	r3, [r4, #16]
 80195a4:	6861      	ldr	r1, [r4, #4]
 80195a6:	4299      	cmp	r1, r3
 80195a8:	bfde      	ittt	le
 80195aa:	2330      	movle	r3, #48	; 0x30
 80195ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80195b0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80195b4:	1b92      	subs	r2, r2, r6
 80195b6:	6122      	str	r2, [r4, #16]
 80195b8:	f8cd a000 	str.w	sl, [sp]
 80195bc:	464b      	mov	r3, r9
 80195be:	aa03      	add	r2, sp, #12
 80195c0:	4621      	mov	r1, r4
 80195c2:	4640      	mov	r0, r8
 80195c4:	f7ff fee2 	bl	801938c <_printf_common>
 80195c8:	3001      	adds	r0, #1
 80195ca:	d14c      	bne.n	8019666 <_printf_i+0x1fe>
 80195cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80195d0:	b004      	add	sp, #16
 80195d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80195d6:	4835      	ldr	r0, [pc, #212]	; (80196ac <_printf_i+0x244>)
 80195d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80195dc:	6823      	ldr	r3, [r4, #0]
 80195de:	680e      	ldr	r6, [r1, #0]
 80195e0:	061f      	lsls	r7, r3, #24
 80195e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80195e6:	600e      	str	r6, [r1, #0]
 80195e8:	d514      	bpl.n	8019614 <_printf_i+0x1ac>
 80195ea:	07d9      	lsls	r1, r3, #31
 80195ec:	bf44      	itt	mi
 80195ee:	f043 0320 	orrmi.w	r3, r3, #32
 80195f2:	6023      	strmi	r3, [r4, #0]
 80195f4:	b91d      	cbnz	r5, 80195fe <_printf_i+0x196>
 80195f6:	6823      	ldr	r3, [r4, #0]
 80195f8:	f023 0320 	bic.w	r3, r3, #32
 80195fc:	6023      	str	r3, [r4, #0]
 80195fe:	2310      	movs	r3, #16
 8019600:	e7b0      	b.n	8019564 <_printf_i+0xfc>
 8019602:	6823      	ldr	r3, [r4, #0]
 8019604:	f043 0320 	orr.w	r3, r3, #32
 8019608:	6023      	str	r3, [r4, #0]
 801960a:	2378      	movs	r3, #120	; 0x78
 801960c:	4828      	ldr	r0, [pc, #160]	; (80196b0 <_printf_i+0x248>)
 801960e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019612:	e7e3      	b.n	80195dc <_printf_i+0x174>
 8019614:	065e      	lsls	r6, r3, #25
 8019616:	bf48      	it	mi
 8019618:	b2ad      	uxthmi	r5, r5
 801961a:	e7e6      	b.n	80195ea <_printf_i+0x182>
 801961c:	4616      	mov	r6, r2
 801961e:	e7bb      	b.n	8019598 <_printf_i+0x130>
 8019620:	680b      	ldr	r3, [r1, #0]
 8019622:	6826      	ldr	r6, [r4, #0]
 8019624:	6960      	ldr	r0, [r4, #20]
 8019626:	1d1d      	adds	r5, r3, #4
 8019628:	600d      	str	r5, [r1, #0]
 801962a:	0635      	lsls	r5, r6, #24
 801962c:	681b      	ldr	r3, [r3, #0]
 801962e:	d501      	bpl.n	8019634 <_printf_i+0x1cc>
 8019630:	6018      	str	r0, [r3, #0]
 8019632:	e002      	b.n	801963a <_printf_i+0x1d2>
 8019634:	0671      	lsls	r1, r6, #25
 8019636:	d5fb      	bpl.n	8019630 <_printf_i+0x1c8>
 8019638:	8018      	strh	r0, [r3, #0]
 801963a:	2300      	movs	r3, #0
 801963c:	6123      	str	r3, [r4, #16]
 801963e:	4616      	mov	r6, r2
 8019640:	e7ba      	b.n	80195b8 <_printf_i+0x150>
 8019642:	680b      	ldr	r3, [r1, #0]
 8019644:	1d1a      	adds	r2, r3, #4
 8019646:	600a      	str	r2, [r1, #0]
 8019648:	681e      	ldr	r6, [r3, #0]
 801964a:	6862      	ldr	r2, [r4, #4]
 801964c:	2100      	movs	r1, #0
 801964e:	4630      	mov	r0, r6
 8019650:	f7e6 fdc6 	bl	80001e0 <memchr>
 8019654:	b108      	cbz	r0, 801965a <_printf_i+0x1f2>
 8019656:	1b80      	subs	r0, r0, r6
 8019658:	6060      	str	r0, [r4, #4]
 801965a:	6863      	ldr	r3, [r4, #4]
 801965c:	6123      	str	r3, [r4, #16]
 801965e:	2300      	movs	r3, #0
 8019660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019664:	e7a8      	b.n	80195b8 <_printf_i+0x150>
 8019666:	6923      	ldr	r3, [r4, #16]
 8019668:	4632      	mov	r2, r6
 801966a:	4649      	mov	r1, r9
 801966c:	4640      	mov	r0, r8
 801966e:	47d0      	blx	sl
 8019670:	3001      	adds	r0, #1
 8019672:	d0ab      	beq.n	80195cc <_printf_i+0x164>
 8019674:	6823      	ldr	r3, [r4, #0]
 8019676:	079b      	lsls	r3, r3, #30
 8019678:	d413      	bmi.n	80196a2 <_printf_i+0x23a>
 801967a:	68e0      	ldr	r0, [r4, #12]
 801967c:	9b03      	ldr	r3, [sp, #12]
 801967e:	4298      	cmp	r0, r3
 8019680:	bfb8      	it	lt
 8019682:	4618      	movlt	r0, r3
 8019684:	e7a4      	b.n	80195d0 <_printf_i+0x168>
 8019686:	2301      	movs	r3, #1
 8019688:	4632      	mov	r2, r6
 801968a:	4649      	mov	r1, r9
 801968c:	4640      	mov	r0, r8
 801968e:	47d0      	blx	sl
 8019690:	3001      	adds	r0, #1
 8019692:	d09b      	beq.n	80195cc <_printf_i+0x164>
 8019694:	3501      	adds	r5, #1
 8019696:	68e3      	ldr	r3, [r4, #12]
 8019698:	9903      	ldr	r1, [sp, #12]
 801969a:	1a5b      	subs	r3, r3, r1
 801969c:	42ab      	cmp	r3, r5
 801969e:	dcf2      	bgt.n	8019686 <_printf_i+0x21e>
 80196a0:	e7eb      	b.n	801967a <_printf_i+0x212>
 80196a2:	2500      	movs	r5, #0
 80196a4:	f104 0619 	add.w	r6, r4, #25
 80196a8:	e7f5      	b.n	8019696 <_printf_i+0x22e>
 80196aa:	bf00      	nop
 80196ac:	080209c2 	.word	0x080209c2
 80196b0:	080209d3 	.word	0x080209d3

080196b4 <_scanf_float>:
 80196b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196b8:	b087      	sub	sp, #28
 80196ba:	4617      	mov	r7, r2
 80196bc:	9303      	str	r3, [sp, #12]
 80196be:	688b      	ldr	r3, [r1, #8]
 80196c0:	1e5a      	subs	r2, r3, #1
 80196c2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80196c6:	bf83      	ittte	hi
 80196c8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80196cc:	195b      	addhi	r3, r3, r5
 80196ce:	9302      	strhi	r3, [sp, #8]
 80196d0:	2300      	movls	r3, #0
 80196d2:	bf86      	itte	hi
 80196d4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80196d8:	608b      	strhi	r3, [r1, #8]
 80196da:	9302      	strls	r3, [sp, #8]
 80196dc:	680b      	ldr	r3, [r1, #0]
 80196de:	468b      	mov	fp, r1
 80196e0:	2500      	movs	r5, #0
 80196e2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80196e6:	f84b 3b1c 	str.w	r3, [fp], #28
 80196ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80196ee:	4680      	mov	r8, r0
 80196f0:	460c      	mov	r4, r1
 80196f2:	465e      	mov	r6, fp
 80196f4:	46aa      	mov	sl, r5
 80196f6:	46a9      	mov	r9, r5
 80196f8:	9501      	str	r5, [sp, #4]
 80196fa:	68a2      	ldr	r2, [r4, #8]
 80196fc:	b152      	cbz	r2, 8019714 <_scanf_float+0x60>
 80196fe:	683b      	ldr	r3, [r7, #0]
 8019700:	781b      	ldrb	r3, [r3, #0]
 8019702:	2b4e      	cmp	r3, #78	; 0x4e
 8019704:	d864      	bhi.n	80197d0 <_scanf_float+0x11c>
 8019706:	2b40      	cmp	r3, #64	; 0x40
 8019708:	d83c      	bhi.n	8019784 <_scanf_float+0xd0>
 801970a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801970e:	b2c8      	uxtb	r0, r1
 8019710:	280e      	cmp	r0, #14
 8019712:	d93a      	bls.n	801978a <_scanf_float+0xd6>
 8019714:	f1b9 0f00 	cmp.w	r9, #0
 8019718:	d003      	beq.n	8019722 <_scanf_float+0x6e>
 801971a:	6823      	ldr	r3, [r4, #0]
 801971c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019720:	6023      	str	r3, [r4, #0]
 8019722:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8019726:	f1ba 0f01 	cmp.w	sl, #1
 801972a:	f200 8113 	bhi.w	8019954 <_scanf_float+0x2a0>
 801972e:	455e      	cmp	r6, fp
 8019730:	f200 8105 	bhi.w	801993e <_scanf_float+0x28a>
 8019734:	2501      	movs	r5, #1
 8019736:	4628      	mov	r0, r5
 8019738:	b007      	add	sp, #28
 801973a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801973e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8019742:	2a0d      	cmp	r2, #13
 8019744:	d8e6      	bhi.n	8019714 <_scanf_float+0x60>
 8019746:	a101      	add	r1, pc, #4	; (adr r1, 801974c <_scanf_float+0x98>)
 8019748:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801974c:	0801988b 	.word	0x0801988b
 8019750:	08019715 	.word	0x08019715
 8019754:	08019715 	.word	0x08019715
 8019758:	08019715 	.word	0x08019715
 801975c:	080198eb 	.word	0x080198eb
 8019760:	080198c3 	.word	0x080198c3
 8019764:	08019715 	.word	0x08019715
 8019768:	08019715 	.word	0x08019715
 801976c:	08019899 	.word	0x08019899
 8019770:	08019715 	.word	0x08019715
 8019774:	08019715 	.word	0x08019715
 8019778:	08019715 	.word	0x08019715
 801977c:	08019715 	.word	0x08019715
 8019780:	08019851 	.word	0x08019851
 8019784:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8019788:	e7db      	b.n	8019742 <_scanf_float+0x8e>
 801978a:	290e      	cmp	r1, #14
 801978c:	d8c2      	bhi.n	8019714 <_scanf_float+0x60>
 801978e:	a001      	add	r0, pc, #4	; (adr r0, 8019794 <_scanf_float+0xe0>)
 8019790:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8019794:	08019843 	.word	0x08019843
 8019798:	08019715 	.word	0x08019715
 801979c:	08019843 	.word	0x08019843
 80197a0:	080198d7 	.word	0x080198d7
 80197a4:	08019715 	.word	0x08019715
 80197a8:	080197f1 	.word	0x080197f1
 80197ac:	0801982d 	.word	0x0801982d
 80197b0:	0801982d 	.word	0x0801982d
 80197b4:	0801982d 	.word	0x0801982d
 80197b8:	0801982d 	.word	0x0801982d
 80197bc:	0801982d 	.word	0x0801982d
 80197c0:	0801982d 	.word	0x0801982d
 80197c4:	0801982d 	.word	0x0801982d
 80197c8:	0801982d 	.word	0x0801982d
 80197cc:	0801982d 	.word	0x0801982d
 80197d0:	2b6e      	cmp	r3, #110	; 0x6e
 80197d2:	d809      	bhi.n	80197e8 <_scanf_float+0x134>
 80197d4:	2b60      	cmp	r3, #96	; 0x60
 80197d6:	d8b2      	bhi.n	801973e <_scanf_float+0x8a>
 80197d8:	2b54      	cmp	r3, #84	; 0x54
 80197da:	d077      	beq.n	80198cc <_scanf_float+0x218>
 80197dc:	2b59      	cmp	r3, #89	; 0x59
 80197de:	d199      	bne.n	8019714 <_scanf_float+0x60>
 80197e0:	2d07      	cmp	r5, #7
 80197e2:	d197      	bne.n	8019714 <_scanf_float+0x60>
 80197e4:	2508      	movs	r5, #8
 80197e6:	e029      	b.n	801983c <_scanf_float+0x188>
 80197e8:	2b74      	cmp	r3, #116	; 0x74
 80197ea:	d06f      	beq.n	80198cc <_scanf_float+0x218>
 80197ec:	2b79      	cmp	r3, #121	; 0x79
 80197ee:	e7f6      	b.n	80197de <_scanf_float+0x12a>
 80197f0:	6821      	ldr	r1, [r4, #0]
 80197f2:	05c8      	lsls	r0, r1, #23
 80197f4:	d51a      	bpl.n	801982c <_scanf_float+0x178>
 80197f6:	9b02      	ldr	r3, [sp, #8]
 80197f8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80197fc:	6021      	str	r1, [r4, #0]
 80197fe:	f109 0901 	add.w	r9, r9, #1
 8019802:	b11b      	cbz	r3, 801980c <_scanf_float+0x158>
 8019804:	3b01      	subs	r3, #1
 8019806:	3201      	adds	r2, #1
 8019808:	9302      	str	r3, [sp, #8]
 801980a:	60a2      	str	r2, [r4, #8]
 801980c:	68a3      	ldr	r3, [r4, #8]
 801980e:	3b01      	subs	r3, #1
 8019810:	60a3      	str	r3, [r4, #8]
 8019812:	6923      	ldr	r3, [r4, #16]
 8019814:	3301      	adds	r3, #1
 8019816:	6123      	str	r3, [r4, #16]
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	3b01      	subs	r3, #1
 801981c:	2b00      	cmp	r3, #0
 801981e:	607b      	str	r3, [r7, #4]
 8019820:	f340 8084 	ble.w	801992c <_scanf_float+0x278>
 8019824:	683b      	ldr	r3, [r7, #0]
 8019826:	3301      	adds	r3, #1
 8019828:	603b      	str	r3, [r7, #0]
 801982a:	e766      	b.n	80196fa <_scanf_float+0x46>
 801982c:	eb1a 0f05 	cmn.w	sl, r5
 8019830:	f47f af70 	bne.w	8019714 <_scanf_float+0x60>
 8019834:	6822      	ldr	r2, [r4, #0]
 8019836:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801983a:	6022      	str	r2, [r4, #0]
 801983c:	f806 3b01 	strb.w	r3, [r6], #1
 8019840:	e7e4      	b.n	801980c <_scanf_float+0x158>
 8019842:	6822      	ldr	r2, [r4, #0]
 8019844:	0610      	lsls	r0, r2, #24
 8019846:	f57f af65 	bpl.w	8019714 <_scanf_float+0x60>
 801984a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801984e:	e7f4      	b.n	801983a <_scanf_float+0x186>
 8019850:	f1ba 0f00 	cmp.w	sl, #0
 8019854:	d10e      	bne.n	8019874 <_scanf_float+0x1c0>
 8019856:	f1b9 0f00 	cmp.w	r9, #0
 801985a:	d10e      	bne.n	801987a <_scanf_float+0x1c6>
 801985c:	6822      	ldr	r2, [r4, #0]
 801985e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8019862:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8019866:	d108      	bne.n	801987a <_scanf_float+0x1c6>
 8019868:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801986c:	6022      	str	r2, [r4, #0]
 801986e:	f04f 0a01 	mov.w	sl, #1
 8019872:	e7e3      	b.n	801983c <_scanf_float+0x188>
 8019874:	f1ba 0f02 	cmp.w	sl, #2
 8019878:	d055      	beq.n	8019926 <_scanf_float+0x272>
 801987a:	2d01      	cmp	r5, #1
 801987c:	d002      	beq.n	8019884 <_scanf_float+0x1d0>
 801987e:	2d04      	cmp	r5, #4
 8019880:	f47f af48 	bne.w	8019714 <_scanf_float+0x60>
 8019884:	3501      	adds	r5, #1
 8019886:	b2ed      	uxtb	r5, r5
 8019888:	e7d8      	b.n	801983c <_scanf_float+0x188>
 801988a:	f1ba 0f01 	cmp.w	sl, #1
 801988e:	f47f af41 	bne.w	8019714 <_scanf_float+0x60>
 8019892:	f04f 0a02 	mov.w	sl, #2
 8019896:	e7d1      	b.n	801983c <_scanf_float+0x188>
 8019898:	b97d      	cbnz	r5, 80198ba <_scanf_float+0x206>
 801989a:	f1b9 0f00 	cmp.w	r9, #0
 801989e:	f47f af3c 	bne.w	801971a <_scanf_float+0x66>
 80198a2:	6822      	ldr	r2, [r4, #0]
 80198a4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80198a8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80198ac:	f47f af39 	bne.w	8019722 <_scanf_float+0x6e>
 80198b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80198b4:	6022      	str	r2, [r4, #0]
 80198b6:	2501      	movs	r5, #1
 80198b8:	e7c0      	b.n	801983c <_scanf_float+0x188>
 80198ba:	2d03      	cmp	r5, #3
 80198bc:	d0e2      	beq.n	8019884 <_scanf_float+0x1d0>
 80198be:	2d05      	cmp	r5, #5
 80198c0:	e7de      	b.n	8019880 <_scanf_float+0x1cc>
 80198c2:	2d02      	cmp	r5, #2
 80198c4:	f47f af26 	bne.w	8019714 <_scanf_float+0x60>
 80198c8:	2503      	movs	r5, #3
 80198ca:	e7b7      	b.n	801983c <_scanf_float+0x188>
 80198cc:	2d06      	cmp	r5, #6
 80198ce:	f47f af21 	bne.w	8019714 <_scanf_float+0x60>
 80198d2:	2507      	movs	r5, #7
 80198d4:	e7b2      	b.n	801983c <_scanf_float+0x188>
 80198d6:	6822      	ldr	r2, [r4, #0]
 80198d8:	0591      	lsls	r1, r2, #22
 80198da:	f57f af1b 	bpl.w	8019714 <_scanf_float+0x60>
 80198de:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80198e2:	6022      	str	r2, [r4, #0]
 80198e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80198e8:	e7a8      	b.n	801983c <_scanf_float+0x188>
 80198ea:	6822      	ldr	r2, [r4, #0]
 80198ec:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80198f0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80198f4:	d006      	beq.n	8019904 <_scanf_float+0x250>
 80198f6:	0550      	lsls	r0, r2, #21
 80198f8:	f57f af0c 	bpl.w	8019714 <_scanf_float+0x60>
 80198fc:	f1b9 0f00 	cmp.w	r9, #0
 8019900:	f43f af0f 	beq.w	8019722 <_scanf_float+0x6e>
 8019904:	0591      	lsls	r1, r2, #22
 8019906:	bf58      	it	pl
 8019908:	9901      	ldrpl	r1, [sp, #4]
 801990a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801990e:	bf58      	it	pl
 8019910:	eba9 0101 	subpl.w	r1, r9, r1
 8019914:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8019918:	bf58      	it	pl
 801991a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801991e:	6022      	str	r2, [r4, #0]
 8019920:	f04f 0900 	mov.w	r9, #0
 8019924:	e78a      	b.n	801983c <_scanf_float+0x188>
 8019926:	f04f 0a03 	mov.w	sl, #3
 801992a:	e787      	b.n	801983c <_scanf_float+0x188>
 801992c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019930:	4639      	mov	r1, r7
 8019932:	4640      	mov	r0, r8
 8019934:	4798      	blx	r3
 8019936:	2800      	cmp	r0, #0
 8019938:	f43f aedf 	beq.w	80196fa <_scanf_float+0x46>
 801993c:	e6ea      	b.n	8019714 <_scanf_float+0x60>
 801993e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019942:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019946:	463a      	mov	r2, r7
 8019948:	4640      	mov	r0, r8
 801994a:	4798      	blx	r3
 801994c:	6923      	ldr	r3, [r4, #16]
 801994e:	3b01      	subs	r3, #1
 8019950:	6123      	str	r3, [r4, #16]
 8019952:	e6ec      	b.n	801972e <_scanf_float+0x7a>
 8019954:	1e6b      	subs	r3, r5, #1
 8019956:	2b06      	cmp	r3, #6
 8019958:	d825      	bhi.n	80199a6 <_scanf_float+0x2f2>
 801995a:	2d02      	cmp	r5, #2
 801995c:	d836      	bhi.n	80199cc <_scanf_float+0x318>
 801995e:	455e      	cmp	r6, fp
 8019960:	f67f aee8 	bls.w	8019734 <_scanf_float+0x80>
 8019964:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019968:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801996c:	463a      	mov	r2, r7
 801996e:	4640      	mov	r0, r8
 8019970:	4798      	blx	r3
 8019972:	6923      	ldr	r3, [r4, #16]
 8019974:	3b01      	subs	r3, #1
 8019976:	6123      	str	r3, [r4, #16]
 8019978:	e7f1      	b.n	801995e <_scanf_float+0x2aa>
 801997a:	9802      	ldr	r0, [sp, #8]
 801997c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019980:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8019984:	9002      	str	r0, [sp, #8]
 8019986:	463a      	mov	r2, r7
 8019988:	4640      	mov	r0, r8
 801998a:	4798      	blx	r3
 801998c:	6923      	ldr	r3, [r4, #16]
 801998e:	3b01      	subs	r3, #1
 8019990:	6123      	str	r3, [r4, #16]
 8019992:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8019996:	fa5f fa8a 	uxtb.w	sl, sl
 801999a:	f1ba 0f02 	cmp.w	sl, #2
 801999e:	d1ec      	bne.n	801997a <_scanf_float+0x2c6>
 80199a0:	3d03      	subs	r5, #3
 80199a2:	b2ed      	uxtb	r5, r5
 80199a4:	1b76      	subs	r6, r6, r5
 80199a6:	6823      	ldr	r3, [r4, #0]
 80199a8:	05da      	lsls	r2, r3, #23
 80199aa:	d52f      	bpl.n	8019a0c <_scanf_float+0x358>
 80199ac:	055b      	lsls	r3, r3, #21
 80199ae:	d510      	bpl.n	80199d2 <_scanf_float+0x31e>
 80199b0:	455e      	cmp	r6, fp
 80199b2:	f67f aebf 	bls.w	8019734 <_scanf_float+0x80>
 80199b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80199ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80199be:	463a      	mov	r2, r7
 80199c0:	4640      	mov	r0, r8
 80199c2:	4798      	blx	r3
 80199c4:	6923      	ldr	r3, [r4, #16]
 80199c6:	3b01      	subs	r3, #1
 80199c8:	6123      	str	r3, [r4, #16]
 80199ca:	e7f1      	b.n	80199b0 <_scanf_float+0x2fc>
 80199cc:	46aa      	mov	sl, r5
 80199ce:	9602      	str	r6, [sp, #8]
 80199d0:	e7df      	b.n	8019992 <_scanf_float+0x2de>
 80199d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80199d6:	6923      	ldr	r3, [r4, #16]
 80199d8:	2965      	cmp	r1, #101	; 0x65
 80199da:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80199de:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80199e2:	6123      	str	r3, [r4, #16]
 80199e4:	d00c      	beq.n	8019a00 <_scanf_float+0x34c>
 80199e6:	2945      	cmp	r1, #69	; 0x45
 80199e8:	d00a      	beq.n	8019a00 <_scanf_float+0x34c>
 80199ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80199ee:	463a      	mov	r2, r7
 80199f0:	4640      	mov	r0, r8
 80199f2:	4798      	blx	r3
 80199f4:	6923      	ldr	r3, [r4, #16]
 80199f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80199fa:	3b01      	subs	r3, #1
 80199fc:	1eb5      	subs	r5, r6, #2
 80199fe:	6123      	str	r3, [r4, #16]
 8019a00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019a04:	463a      	mov	r2, r7
 8019a06:	4640      	mov	r0, r8
 8019a08:	4798      	blx	r3
 8019a0a:	462e      	mov	r6, r5
 8019a0c:	6825      	ldr	r5, [r4, #0]
 8019a0e:	f015 0510 	ands.w	r5, r5, #16
 8019a12:	d158      	bne.n	8019ac6 <_scanf_float+0x412>
 8019a14:	7035      	strb	r5, [r6, #0]
 8019a16:	6823      	ldr	r3, [r4, #0]
 8019a18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8019a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019a20:	d11c      	bne.n	8019a5c <_scanf_float+0x3a8>
 8019a22:	9b01      	ldr	r3, [sp, #4]
 8019a24:	454b      	cmp	r3, r9
 8019a26:	eba3 0209 	sub.w	r2, r3, r9
 8019a2a:	d124      	bne.n	8019a76 <_scanf_float+0x3c2>
 8019a2c:	2200      	movs	r2, #0
 8019a2e:	4659      	mov	r1, fp
 8019a30:	4640      	mov	r0, r8
 8019a32:	f000 ff6b 	bl	801a90c <_strtod_r>
 8019a36:	9b03      	ldr	r3, [sp, #12]
 8019a38:	6821      	ldr	r1, [r4, #0]
 8019a3a:	681b      	ldr	r3, [r3, #0]
 8019a3c:	f011 0f02 	tst.w	r1, #2
 8019a40:	ec57 6b10 	vmov	r6, r7, d0
 8019a44:	f103 0204 	add.w	r2, r3, #4
 8019a48:	d020      	beq.n	8019a8c <_scanf_float+0x3d8>
 8019a4a:	9903      	ldr	r1, [sp, #12]
 8019a4c:	600a      	str	r2, [r1, #0]
 8019a4e:	681b      	ldr	r3, [r3, #0]
 8019a50:	e9c3 6700 	strd	r6, r7, [r3]
 8019a54:	68e3      	ldr	r3, [r4, #12]
 8019a56:	3301      	adds	r3, #1
 8019a58:	60e3      	str	r3, [r4, #12]
 8019a5a:	e66c      	b.n	8019736 <_scanf_float+0x82>
 8019a5c:	9b04      	ldr	r3, [sp, #16]
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	d0e4      	beq.n	8019a2c <_scanf_float+0x378>
 8019a62:	9905      	ldr	r1, [sp, #20]
 8019a64:	230a      	movs	r3, #10
 8019a66:	462a      	mov	r2, r5
 8019a68:	3101      	adds	r1, #1
 8019a6a:	4640      	mov	r0, r8
 8019a6c:	f000 ffd8 	bl	801aa20 <_strtol_r>
 8019a70:	9b04      	ldr	r3, [sp, #16]
 8019a72:	9e05      	ldr	r6, [sp, #20]
 8019a74:	1ac2      	subs	r2, r0, r3
 8019a76:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8019a7a:	429e      	cmp	r6, r3
 8019a7c:	bf28      	it	cs
 8019a7e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8019a82:	4912      	ldr	r1, [pc, #72]	; (8019acc <_scanf_float+0x418>)
 8019a84:	4630      	mov	r0, r6
 8019a86:	f000 f8b5 	bl	8019bf4 <siprintf>
 8019a8a:	e7cf      	b.n	8019a2c <_scanf_float+0x378>
 8019a8c:	f011 0f04 	tst.w	r1, #4
 8019a90:	9903      	ldr	r1, [sp, #12]
 8019a92:	600a      	str	r2, [r1, #0]
 8019a94:	d1db      	bne.n	8019a4e <_scanf_float+0x39a>
 8019a96:	f8d3 8000 	ldr.w	r8, [r3]
 8019a9a:	ee10 2a10 	vmov	r2, s0
 8019a9e:	ee10 0a10 	vmov	r0, s0
 8019aa2:	463b      	mov	r3, r7
 8019aa4:	4639      	mov	r1, r7
 8019aa6:	f7e7 f841 	bl	8000b2c <__aeabi_dcmpun>
 8019aaa:	b128      	cbz	r0, 8019ab8 <_scanf_float+0x404>
 8019aac:	4808      	ldr	r0, [pc, #32]	; (8019ad0 <_scanf_float+0x41c>)
 8019aae:	f000 f829 	bl	8019b04 <nanf>
 8019ab2:	ed88 0a00 	vstr	s0, [r8]
 8019ab6:	e7cd      	b.n	8019a54 <_scanf_float+0x3a0>
 8019ab8:	4630      	mov	r0, r6
 8019aba:	4639      	mov	r1, r7
 8019abc:	f7e7 f894 	bl	8000be8 <__aeabi_d2f>
 8019ac0:	f8c8 0000 	str.w	r0, [r8]
 8019ac4:	e7c6      	b.n	8019a54 <_scanf_float+0x3a0>
 8019ac6:	2500      	movs	r5, #0
 8019ac8:	e635      	b.n	8019736 <_scanf_float+0x82>
 8019aca:	bf00      	nop
 8019acc:	080209e4 	.word	0x080209e4
 8019ad0:	08020e00 	.word	0x08020e00

08019ad4 <realloc>:
 8019ad4:	4b02      	ldr	r3, [pc, #8]	; (8019ae0 <realloc+0xc>)
 8019ad6:	460a      	mov	r2, r1
 8019ad8:	4601      	mov	r1, r0
 8019ada:	6818      	ldr	r0, [r3, #0]
 8019adc:	f002 beaa 	b.w	801c834 <_realloc_r>
 8019ae0:	200000d0 	.word	0x200000d0

08019ae4 <_sbrk_r>:
 8019ae4:	b538      	push	{r3, r4, r5, lr}
 8019ae6:	4d06      	ldr	r5, [pc, #24]	; (8019b00 <_sbrk_r+0x1c>)
 8019ae8:	2300      	movs	r3, #0
 8019aea:	4604      	mov	r4, r0
 8019aec:	4608      	mov	r0, r1
 8019aee:	602b      	str	r3, [r5, #0]
 8019af0:	f7f3 faac 	bl	800d04c <_sbrk>
 8019af4:	1c43      	adds	r3, r0, #1
 8019af6:	d102      	bne.n	8019afe <_sbrk_r+0x1a>
 8019af8:	682b      	ldr	r3, [r5, #0]
 8019afa:	b103      	cbz	r3, 8019afe <_sbrk_r+0x1a>
 8019afc:	6023      	str	r3, [r4, #0]
 8019afe:	bd38      	pop	{r3, r4, r5, pc}
 8019b00:	2000a50c 	.word	0x2000a50c

08019b04 <nanf>:
 8019b04:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019b0c <nanf+0x8>
 8019b08:	4770      	bx	lr
 8019b0a:	bf00      	nop
 8019b0c:	7fc00000 	.word	0x7fc00000

08019b10 <scalbnf>:
 8019b10:	ee10 3a10 	vmov	r3, s0
 8019b14:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8019b18:	d025      	beq.n	8019b66 <scalbnf+0x56>
 8019b1a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8019b1e:	d302      	bcc.n	8019b26 <scalbnf+0x16>
 8019b20:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019b24:	4770      	bx	lr
 8019b26:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8019b2a:	d122      	bne.n	8019b72 <scalbnf+0x62>
 8019b2c:	4b2a      	ldr	r3, [pc, #168]	; (8019bd8 <scalbnf+0xc8>)
 8019b2e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8019bdc <scalbnf+0xcc>
 8019b32:	4298      	cmp	r0, r3
 8019b34:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019b38:	db16      	blt.n	8019b68 <scalbnf+0x58>
 8019b3a:	ee10 3a10 	vmov	r3, s0
 8019b3e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019b42:	3a19      	subs	r2, #25
 8019b44:	4402      	add	r2, r0
 8019b46:	2afe      	cmp	r2, #254	; 0xfe
 8019b48:	dd15      	ble.n	8019b76 <scalbnf+0x66>
 8019b4a:	ee10 3a10 	vmov	r3, s0
 8019b4e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8019be0 <scalbnf+0xd0>
 8019b52:	eddf 6a24 	vldr	s13, [pc, #144]	; 8019be4 <scalbnf+0xd4>
 8019b56:	2b00      	cmp	r3, #0
 8019b58:	eeb0 7a67 	vmov.f32	s14, s15
 8019b5c:	bfb8      	it	lt
 8019b5e:	eef0 7a66 	vmovlt.f32	s15, s13
 8019b62:	ee27 0a27 	vmul.f32	s0, s14, s15
 8019b66:	4770      	bx	lr
 8019b68:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8019be8 <scalbnf+0xd8>
 8019b6c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019b70:	4770      	bx	lr
 8019b72:	0dd2      	lsrs	r2, r2, #23
 8019b74:	e7e6      	b.n	8019b44 <scalbnf+0x34>
 8019b76:	2a00      	cmp	r2, #0
 8019b78:	dd06      	ble.n	8019b88 <scalbnf+0x78>
 8019b7a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019b7e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8019b82:	ee00 3a10 	vmov	s0, r3
 8019b86:	4770      	bx	lr
 8019b88:	f112 0f16 	cmn.w	r2, #22
 8019b8c:	da1a      	bge.n	8019bc4 <scalbnf+0xb4>
 8019b8e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019b92:	4298      	cmp	r0, r3
 8019b94:	ee10 3a10 	vmov	r3, s0
 8019b98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019b9c:	dd0a      	ble.n	8019bb4 <scalbnf+0xa4>
 8019b9e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8019be0 <scalbnf+0xd0>
 8019ba2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8019be4 <scalbnf+0xd4>
 8019ba6:	eef0 7a40 	vmov.f32	s15, s0
 8019baa:	2b00      	cmp	r3, #0
 8019bac:	bf18      	it	ne
 8019bae:	eeb0 0a47 	vmovne.f32	s0, s14
 8019bb2:	e7db      	b.n	8019b6c <scalbnf+0x5c>
 8019bb4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8019be8 <scalbnf+0xd8>
 8019bb8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8019bec <scalbnf+0xdc>
 8019bbc:	eef0 7a40 	vmov.f32	s15, s0
 8019bc0:	2b00      	cmp	r3, #0
 8019bc2:	e7f3      	b.n	8019bac <scalbnf+0x9c>
 8019bc4:	3219      	adds	r2, #25
 8019bc6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019bca:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8019bce:	eddf 7a08 	vldr	s15, [pc, #32]	; 8019bf0 <scalbnf+0xe0>
 8019bd2:	ee07 3a10 	vmov	s14, r3
 8019bd6:	e7c4      	b.n	8019b62 <scalbnf+0x52>
 8019bd8:	ffff3cb0 	.word	0xffff3cb0
 8019bdc:	4c000000 	.word	0x4c000000
 8019be0:	7149f2ca 	.word	0x7149f2ca
 8019be4:	f149f2ca 	.word	0xf149f2ca
 8019be8:	0da24260 	.word	0x0da24260
 8019bec:	8da24260 	.word	0x8da24260
 8019bf0:	33000000 	.word	0x33000000

08019bf4 <siprintf>:
 8019bf4:	b40e      	push	{r1, r2, r3}
 8019bf6:	b500      	push	{lr}
 8019bf8:	b09c      	sub	sp, #112	; 0x70
 8019bfa:	ab1d      	add	r3, sp, #116	; 0x74
 8019bfc:	9002      	str	r0, [sp, #8]
 8019bfe:	9006      	str	r0, [sp, #24]
 8019c00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019c04:	4809      	ldr	r0, [pc, #36]	; (8019c2c <siprintf+0x38>)
 8019c06:	9107      	str	r1, [sp, #28]
 8019c08:	9104      	str	r1, [sp, #16]
 8019c0a:	4909      	ldr	r1, [pc, #36]	; (8019c30 <siprintf+0x3c>)
 8019c0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8019c10:	9105      	str	r1, [sp, #20]
 8019c12:	6800      	ldr	r0, [r0, #0]
 8019c14:	9301      	str	r3, [sp, #4]
 8019c16:	a902      	add	r1, sp, #8
 8019c18:	f002 fe8e 	bl	801c938 <_svfiprintf_r>
 8019c1c:	9b02      	ldr	r3, [sp, #8]
 8019c1e:	2200      	movs	r2, #0
 8019c20:	701a      	strb	r2, [r3, #0]
 8019c22:	b01c      	add	sp, #112	; 0x70
 8019c24:	f85d eb04 	ldr.w	lr, [sp], #4
 8019c28:	b003      	add	sp, #12
 8019c2a:	4770      	bx	lr
 8019c2c:	200000d0 	.word	0x200000d0
 8019c30:	ffff0208 	.word	0xffff0208

08019c34 <__sread>:
 8019c34:	b510      	push	{r4, lr}
 8019c36:	460c      	mov	r4, r1
 8019c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c3c:	f002 ff7c 	bl	801cb38 <_read_r>
 8019c40:	2800      	cmp	r0, #0
 8019c42:	bfab      	itete	ge
 8019c44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019c46:	89a3      	ldrhlt	r3, [r4, #12]
 8019c48:	181b      	addge	r3, r3, r0
 8019c4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019c4e:	bfac      	ite	ge
 8019c50:	6563      	strge	r3, [r4, #84]	; 0x54
 8019c52:	81a3      	strhlt	r3, [r4, #12]
 8019c54:	bd10      	pop	{r4, pc}

08019c56 <__swrite>:
 8019c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c5a:	461f      	mov	r7, r3
 8019c5c:	898b      	ldrh	r3, [r1, #12]
 8019c5e:	05db      	lsls	r3, r3, #23
 8019c60:	4605      	mov	r5, r0
 8019c62:	460c      	mov	r4, r1
 8019c64:	4616      	mov	r6, r2
 8019c66:	d505      	bpl.n	8019c74 <__swrite+0x1e>
 8019c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c6c:	2302      	movs	r3, #2
 8019c6e:	2200      	movs	r2, #0
 8019c70:	f002 f8e6 	bl	801be40 <_lseek_r>
 8019c74:	89a3      	ldrh	r3, [r4, #12]
 8019c76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019c7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019c7e:	81a3      	strh	r3, [r4, #12]
 8019c80:	4632      	mov	r2, r6
 8019c82:	463b      	mov	r3, r7
 8019c84:	4628      	mov	r0, r5
 8019c86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019c8a:	f000 becb 	b.w	801aa24 <_write_r>

08019c8e <__sseek>:
 8019c8e:	b510      	push	{r4, lr}
 8019c90:	460c      	mov	r4, r1
 8019c92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c96:	f002 f8d3 	bl	801be40 <_lseek_r>
 8019c9a:	1c43      	adds	r3, r0, #1
 8019c9c:	89a3      	ldrh	r3, [r4, #12]
 8019c9e:	bf15      	itete	ne
 8019ca0:	6560      	strne	r0, [r4, #84]	; 0x54
 8019ca2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019ca6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019caa:	81a3      	strheq	r3, [r4, #12]
 8019cac:	bf18      	it	ne
 8019cae:	81a3      	strhne	r3, [r4, #12]
 8019cb0:	bd10      	pop	{r4, pc}

08019cb2 <__sclose>:
 8019cb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019cb6:	f000 bec7 	b.w	801aa48 <_close_r>

08019cba <sulp>:
 8019cba:	b570      	push	{r4, r5, r6, lr}
 8019cbc:	4604      	mov	r4, r0
 8019cbe:	460d      	mov	r5, r1
 8019cc0:	ec45 4b10 	vmov	d0, r4, r5
 8019cc4:	4616      	mov	r6, r2
 8019cc6:	f002 fc57 	bl	801c578 <__ulp>
 8019cca:	ec51 0b10 	vmov	r0, r1, d0
 8019cce:	b17e      	cbz	r6, 8019cf0 <sulp+0x36>
 8019cd0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8019cd4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	dd09      	ble.n	8019cf0 <sulp+0x36>
 8019cdc:	051b      	lsls	r3, r3, #20
 8019cde:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8019ce2:	2400      	movs	r4, #0
 8019ce4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8019ce8:	4622      	mov	r2, r4
 8019cea:	462b      	mov	r3, r5
 8019cec:	f7e6 fc84 	bl	80005f8 <__aeabi_dmul>
 8019cf0:	bd70      	pop	{r4, r5, r6, pc}
 8019cf2:	0000      	movs	r0, r0
 8019cf4:	0000      	movs	r0, r0
	...

08019cf8 <_strtod_l>:
 8019cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cfc:	b0a3      	sub	sp, #140	; 0x8c
 8019cfe:	461f      	mov	r7, r3
 8019d00:	2300      	movs	r3, #0
 8019d02:	931e      	str	r3, [sp, #120]	; 0x78
 8019d04:	4ba4      	ldr	r3, [pc, #656]	; (8019f98 <_strtod_l+0x2a0>)
 8019d06:	9219      	str	r2, [sp, #100]	; 0x64
 8019d08:	681b      	ldr	r3, [r3, #0]
 8019d0a:	9307      	str	r3, [sp, #28]
 8019d0c:	4604      	mov	r4, r0
 8019d0e:	4618      	mov	r0, r3
 8019d10:	4688      	mov	r8, r1
 8019d12:	f7e6 fa5d 	bl	80001d0 <strlen>
 8019d16:	f04f 0a00 	mov.w	sl, #0
 8019d1a:	4605      	mov	r5, r0
 8019d1c:	f04f 0b00 	mov.w	fp, #0
 8019d20:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8019d24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019d26:	781a      	ldrb	r2, [r3, #0]
 8019d28:	2a2b      	cmp	r2, #43	; 0x2b
 8019d2a:	d04c      	beq.n	8019dc6 <_strtod_l+0xce>
 8019d2c:	d839      	bhi.n	8019da2 <_strtod_l+0xaa>
 8019d2e:	2a0d      	cmp	r2, #13
 8019d30:	d832      	bhi.n	8019d98 <_strtod_l+0xa0>
 8019d32:	2a08      	cmp	r2, #8
 8019d34:	d832      	bhi.n	8019d9c <_strtod_l+0xa4>
 8019d36:	2a00      	cmp	r2, #0
 8019d38:	d03c      	beq.n	8019db4 <_strtod_l+0xbc>
 8019d3a:	2300      	movs	r3, #0
 8019d3c:	930e      	str	r3, [sp, #56]	; 0x38
 8019d3e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8019d40:	7833      	ldrb	r3, [r6, #0]
 8019d42:	2b30      	cmp	r3, #48	; 0x30
 8019d44:	f040 80b4 	bne.w	8019eb0 <_strtod_l+0x1b8>
 8019d48:	7873      	ldrb	r3, [r6, #1]
 8019d4a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019d4e:	2b58      	cmp	r3, #88	; 0x58
 8019d50:	d16c      	bne.n	8019e2c <_strtod_l+0x134>
 8019d52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019d54:	9301      	str	r3, [sp, #4]
 8019d56:	ab1e      	add	r3, sp, #120	; 0x78
 8019d58:	9702      	str	r7, [sp, #8]
 8019d5a:	9300      	str	r3, [sp, #0]
 8019d5c:	4a8f      	ldr	r2, [pc, #572]	; (8019f9c <_strtod_l+0x2a4>)
 8019d5e:	ab1f      	add	r3, sp, #124	; 0x7c
 8019d60:	a91d      	add	r1, sp, #116	; 0x74
 8019d62:	4620      	mov	r0, r4
 8019d64:	f001 fd60 	bl	801b828 <__gethex>
 8019d68:	f010 0707 	ands.w	r7, r0, #7
 8019d6c:	4605      	mov	r5, r0
 8019d6e:	d005      	beq.n	8019d7c <_strtod_l+0x84>
 8019d70:	2f06      	cmp	r7, #6
 8019d72:	d12a      	bne.n	8019dca <_strtod_l+0xd2>
 8019d74:	3601      	adds	r6, #1
 8019d76:	2300      	movs	r3, #0
 8019d78:	961d      	str	r6, [sp, #116]	; 0x74
 8019d7a:	930e      	str	r3, [sp, #56]	; 0x38
 8019d7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	f040 8596 	bne.w	801a8b0 <_strtod_l+0xbb8>
 8019d84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019d86:	b1db      	cbz	r3, 8019dc0 <_strtod_l+0xc8>
 8019d88:	4652      	mov	r2, sl
 8019d8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8019d8e:	ec43 2b10 	vmov	d0, r2, r3
 8019d92:	b023      	add	sp, #140	; 0x8c
 8019d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d98:	2a20      	cmp	r2, #32
 8019d9a:	d1ce      	bne.n	8019d3a <_strtod_l+0x42>
 8019d9c:	3301      	adds	r3, #1
 8019d9e:	931d      	str	r3, [sp, #116]	; 0x74
 8019da0:	e7c0      	b.n	8019d24 <_strtod_l+0x2c>
 8019da2:	2a2d      	cmp	r2, #45	; 0x2d
 8019da4:	d1c9      	bne.n	8019d3a <_strtod_l+0x42>
 8019da6:	2201      	movs	r2, #1
 8019da8:	920e      	str	r2, [sp, #56]	; 0x38
 8019daa:	1c5a      	adds	r2, r3, #1
 8019dac:	921d      	str	r2, [sp, #116]	; 0x74
 8019dae:	785b      	ldrb	r3, [r3, #1]
 8019db0:	2b00      	cmp	r3, #0
 8019db2:	d1c4      	bne.n	8019d3e <_strtod_l+0x46>
 8019db4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019db6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8019dba:	2b00      	cmp	r3, #0
 8019dbc:	f040 8576 	bne.w	801a8ac <_strtod_l+0xbb4>
 8019dc0:	4652      	mov	r2, sl
 8019dc2:	465b      	mov	r3, fp
 8019dc4:	e7e3      	b.n	8019d8e <_strtod_l+0x96>
 8019dc6:	2200      	movs	r2, #0
 8019dc8:	e7ee      	b.n	8019da8 <_strtod_l+0xb0>
 8019dca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8019dcc:	b13a      	cbz	r2, 8019dde <_strtod_l+0xe6>
 8019dce:	2135      	movs	r1, #53	; 0x35
 8019dd0:	a820      	add	r0, sp, #128	; 0x80
 8019dd2:	f002 fcdc 	bl	801c78e <__copybits>
 8019dd6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8019dd8:	4620      	mov	r0, r4
 8019dda:	f002 f8a1 	bl	801bf20 <_Bfree>
 8019dde:	3f01      	subs	r7, #1
 8019de0:	2f05      	cmp	r7, #5
 8019de2:	d807      	bhi.n	8019df4 <_strtod_l+0xfc>
 8019de4:	e8df f007 	tbb	[pc, r7]
 8019de8:	1d180b0e 	.word	0x1d180b0e
 8019dec:	030e      	.short	0x030e
 8019dee:	f04f 0b00 	mov.w	fp, #0
 8019df2:	46da      	mov	sl, fp
 8019df4:	0728      	lsls	r0, r5, #28
 8019df6:	d5c1      	bpl.n	8019d7c <_strtod_l+0x84>
 8019df8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8019dfc:	e7be      	b.n	8019d7c <_strtod_l+0x84>
 8019dfe:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8019e02:	e7f7      	b.n	8019df4 <_strtod_l+0xfc>
 8019e04:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8019e08:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8019e0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8019e0e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8019e12:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8019e16:	e7ed      	b.n	8019df4 <_strtod_l+0xfc>
 8019e18:	f8df b184 	ldr.w	fp, [pc, #388]	; 8019fa0 <_strtod_l+0x2a8>
 8019e1c:	f04f 0a00 	mov.w	sl, #0
 8019e20:	e7e8      	b.n	8019df4 <_strtod_l+0xfc>
 8019e22:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8019e26:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8019e2a:	e7e3      	b.n	8019df4 <_strtod_l+0xfc>
 8019e2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019e2e:	1c5a      	adds	r2, r3, #1
 8019e30:	921d      	str	r2, [sp, #116]	; 0x74
 8019e32:	785b      	ldrb	r3, [r3, #1]
 8019e34:	2b30      	cmp	r3, #48	; 0x30
 8019e36:	d0f9      	beq.n	8019e2c <_strtod_l+0x134>
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	d09f      	beq.n	8019d7c <_strtod_l+0x84>
 8019e3c:	2301      	movs	r3, #1
 8019e3e:	f04f 0900 	mov.w	r9, #0
 8019e42:	9304      	str	r3, [sp, #16]
 8019e44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019e46:	930a      	str	r3, [sp, #40]	; 0x28
 8019e48:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8019e4c:	464f      	mov	r7, r9
 8019e4e:	220a      	movs	r2, #10
 8019e50:	981d      	ldr	r0, [sp, #116]	; 0x74
 8019e52:	7806      	ldrb	r6, [r0, #0]
 8019e54:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8019e58:	b2d9      	uxtb	r1, r3
 8019e5a:	2909      	cmp	r1, #9
 8019e5c:	d92a      	bls.n	8019eb4 <_strtod_l+0x1bc>
 8019e5e:	9907      	ldr	r1, [sp, #28]
 8019e60:	462a      	mov	r2, r5
 8019e62:	f002 fe92 	bl	801cb8a <strncmp>
 8019e66:	b398      	cbz	r0, 8019ed0 <_strtod_l+0x1d8>
 8019e68:	2000      	movs	r0, #0
 8019e6a:	4633      	mov	r3, r6
 8019e6c:	463d      	mov	r5, r7
 8019e6e:	9007      	str	r0, [sp, #28]
 8019e70:	4602      	mov	r2, r0
 8019e72:	2b65      	cmp	r3, #101	; 0x65
 8019e74:	d001      	beq.n	8019e7a <_strtod_l+0x182>
 8019e76:	2b45      	cmp	r3, #69	; 0x45
 8019e78:	d118      	bne.n	8019eac <_strtod_l+0x1b4>
 8019e7a:	b91d      	cbnz	r5, 8019e84 <_strtod_l+0x18c>
 8019e7c:	9b04      	ldr	r3, [sp, #16]
 8019e7e:	4303      	orrs	r3, r0
 8019e80:	d098      	beq.n	8019db4 <_strtod_l+0xbc>
 8019e82:	2500      	movs	r5, #0
 8019e84:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8019e88:	f108 0301 	add.w	r3, r8, #1
 8019e8c:	931d      	str	r3, [sp, #116]	; 0x74
 8019e8e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8019e92:	2b2b      	cmp	r3, #43	; 0x2b
 8019e94:	d075      	beq.n	8019f82 <_strtod_l+0x28a>
 8019e96:	2b2d      	cmp	r3, #45	; 0x2d
 8019e98:	d07b      	beq.n	8019f92 <_strtod_l+0x29a>
 8019e9a:	f04f 0c00 	mov.w	ip, #0
 8019e9e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8019ea2:	2909      	cmp	r1, #9
 8019ea4:	f240 8082 	bls.w	8019fac <_strtod_l+0x2b4>
 8019ea8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8019eac:	2600      	movs	r6, #0
 8019eae:	e09d      	b.n	8019fec <_strtod_l+0x2f4>
 8019eb0:	2300      	movs	r3, #0
 8019eb2:	e7c4      	b.n	8019e3e <_strtod_l+0x146>
 8019eb4:	2f08      	cmp	r7, #8
 8019eb6:	bfd8      	it	le
 8019eb8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8019eba:	f100 0001 	add.w	r0, r0, #1
 8019ebe:	bfda      	itte	le
 8019ec0:	fb02 3301 	mlale	r3, r2, r1, r3
 8019ec4:	9309      	strle	r3, [sp, #36]	; 0x24
 8019ec6:	fb02 3909 	mlagt	r9, r2, r9, r3
 8019eca:	3701      	adds	r7, #1
 8019ecc:	901d      	str	r0, [sp, #116]	; 0x74
 8019ece:	e7bf      	b.n	8019e50 <_strtod_l+0x158>
 8019ed0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019ed2:	195a      	adds	r2, r3, r5
 8019ed4:	921d      	str	r2, [sp, #116]	; 0x74
 8019ed6:	5d5b      	ldrb	r3, [r3, r5]
 8019ed8:	2f00      	cmp	r7, #0
 8019eda:	d037      	beq.n	8019f4c <_strtod_l+0x254>
 8019edc:	9007      	str	r0, [sp, #28]
 8019ede:	463d      	mov	r5, r7
 8019ee0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8019ee4:	2a09      	cmp	r2, #9
 8019ee6:	d912      	bls.n	8019f0e <_strtod_l+0x216>
 8019ee8:	2201      	movs	r2, #1
 8019eea:	e7c2      	b.n	8019e72 <_strtod_l+0x17a>
 8019eec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019eee:	1c5a      	adds	r2, r3, #1
 8019ef0:	921d      	str	r2, [sp, #116]	; 0x74
 8019ef2:	785b      	ldrb	r3, [r3, #1]
 8019ef4:	3001      	adds	r0, #1
 8019ef6:	2b30      	cmp	r3, #48	; 0x30
 8019ef8:	d0f8      	beq.n	8019eec <_strtod_l+0x1f4>
 8019efa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8019efe:	2a08      	cmp	r2, #8
 8019f00:	f200 84db 	bhi.w	801a8ba <_strtod_l+0xbc2>
 8019f04:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019f06:	9007      	str	r0, [sp, #28]
 8019f08:	2000      	movs	r0, #0
 8019f0a:	920a      	str	r2, [sp, #40]	; 0x28
 8019f0c:	4605      	mov	r5, r0
 8019f0e:	3b30      	subs	r3, #48	; 0x30
 8019f10:	f100 0201 	add.w	r2, r0, #1
 8019f14:	d014      	beq.n	8019f40 <_strtod_l+0x248>
 8019f16:	9907      	ldr	r1, [sp, #28]
 8019f18:	4411      	add	r1, r2
 8019f1a:	9107      	str	r1, [sp, #28]
 8019f1c:	462a      	mov	r2, r5
 8019f1e:	eb00 0e05 	add.w	lr, r0, r5
 8019f22:	210a      	movs	r1, #10
 8019f24:	4572      	cmp	r2, lr
 8019f26:	d113      	bne.n	8019f50 <_strtod_l+0x258>
 8019f28:	182a      	adds	r2, r5, r0
 8019f2a:	2a08      	cmp	r2, #8
 8019f2c:	f105 0501 	add.w	r5, r5, #1
 8019f30:	4405      	add	r5, r0
 8019f32:	dc1c      	bgt.n	8019f6e <_strtod_l+0x276>
 8019f34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019f36:	220a      	movs	r2, #10
 8019f38:	fb02 3301 	mla	r3, r2, r1, r3
 8019f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8019f3e:	2200      	movs	r2, #0
 8019f40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019f42:	1c59      	adds	r1, r3, #1
 8019f44:	911d      	str	r1, [sp, #116]	; 0x74
 8019f46:	785b      	ldrb	r3, [r3, #1]
 8019f48:	4610      	mov	r0, r2
 8019f4a:	e7c9      	b.n	8019ee0 <_strtod_l+0x1e8>
 8019f4c:	4638      	mov	r0, r7
 8019f4e:	e7d2      	b.n	8019ef6 <_strtod_l+0x1fe>
 8019f50:	2a08      	cmp	r2, #8
 8019f52:	dc04      	bgt.n	8019f5e <_strtod_l+0x266>
 8019f54:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8019f56:	434e      	muls	r6, r1
 8019f58:	9609      	str	r6, [sp, #36]	; 0x24
 8019f5a:	3201      	adds	r2, #1
 8019f5c:	e7e2      	b.n	8019f24 <_strtod_l+0x22c>
 8019f5e:	f102 0c01 	add.w	ip, r2, #1
 8019f62:	f1bc 0f10 	cmp.w	ip, #16
 8019f66:	bfd8      	it	le
 8019f68:	fb01 f909 	mulle.w	r9, r1, r9
 8019f6c:	e7f5      	b.n	8019f5a <_strtod_l+0x262>
 8019f6e:	2d10      	cmp	r5, #16
 8019f70:	bfdc      	itt	le
 8019f72:	220a      	movle	r2, #10
 8019f74:	fb02 3909 	mlale	r9, r2, r9, r3
 8019f78:	e7e1      	b.n	8019f3e <_strtod_l+0x246>
 8019f7a:	2300      	movs	r3, #0
 8019f7c:	9307      	str	r3, [sp, #28]
 8019f7e:	2201      	movs	r2, #1
 8019f80:	e77c      	b.n	8019e7c <_strtod_l+0x184>
 8019f82:	f04f 0c00 	mov.w	ip, #0
 8019f86:	f108 0302 	add.w	r3, r8, #2
 8019f8a:	931d      	str	r3, [sp, #116]	; 0x74
 8019f8c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8019f90:	e785      	b.n	8019e9e <_strtod_l+0x1a6>
 8019f92:	f04f 0c01 	mov.w	ip, #1
 8019f96:	e7f6      	b.n	8019f86 <_strtod_l+0x28e>
 8019f98:	08020c40 	.word	0x08020c40
 8019f9c:	080209ec 	.word	0x080209ec
 8019fa0:	7ff00000 	.word	0x7ff00000
 8019fa4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019fa6:	1c59      	adds	r1, r3, #1
 8019fa8:	911d      	str	r1, [sp, #116]	; 0x74
 8019faa:	785b      	ldrb	r3, [r3, #1]
 8019fac:	2b30      	cmp	r3, #48	; 0x30
 8019fae:	d0f9      	beq.n	8019fa4 <_strtod_l+0x2ac>
 8019fb0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8019fb4:	2908      	cmp	r1, #8
 8019fb6:	f63f af79 	bhi.w	8019eac <_strtod_l+0x1b4>
 8019fba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8019fbe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019fc0:	9308      	str	r3, [sp, #32]
 8019fc2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019fc4:	1c59      	adds	r1, r3, #1
 8019fc6:	911d      	str	r1, [sp, #116]	; 0x74
 8019fc8:	785b      	ldrb	r3, [r3, #1]
 8019fca:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8019fce:	2e09      	cmp	r6, #9
 8019fd0:	d937      	bls.n	801a042 <_strtod_l+0x34a>
 8019fd2:	9e08      	ldr	r6, [sp, #32]
 8019fd4:	1b89      	subs	r1, r1, r6
 8019fd6:	2908      	cmp	r1, #8
 8019fd8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8019fdc:	dc02      	bgt.n	8019fe4 <_strtod_l+0x2ec>
 8019fde:	4576      	cmp	r6, lr
 8019fe0:	bfa8      	it	ge
 8019fe2:	4676      	movge	r6, lr
 8019fe4:	f1bc 0f00 	cmp.w	ip, #0
 8019fe8:	d000      	beq.n	8019fec <_strtod_l+0x2f4>
 8019fea:	4276      	negs	r6, r6
 8019fec:	2d00      	cmp	r5, #0
 8019fee:	d14f      	bne.n	801a090 <_strtod_l+0x398>
 8019ff0:	9904      	ldr	r1, [sp, #16]
 8019ff2:	4301      	orrs	r1, r0
 8019ff4:	f47f aec2 	bne.w	8019d7c <_strtod_l+0x84>
 8019ff8:	2a00      	cmp	r2, #0
 8019ffa:	f47f aedb 	bne.w	8019db4 <_strtod_l+0xbc>
 8019ffe:	2b69      	cmp	r3, #105	; 0x69
 801a000:	d027      	beq.n	801a052 <_strtod_l+0x35a>
 801a002:	dc24      	bgt.n	801a04e <_strtod_l+0x356>
 801a004:	2b49      	cmp	r3, #73	; 0x49
 801a006:	d024      	beq.n	801a052 <_strtod_l+0x35a>
 801a008:	2b4e      	cmp	r3, #78	; 0x4e
 801a00a:	f47f aed3 	bne.w	8019db4 <_strtod_l+0xbc>
 801a00e:	499e      	ldr	r1, [pc, #632]	; (801a288 <_strtod_l+0x590>)
 801a010:	a81d      	add	r0, sp, #116	; 0x74
 801a012:	f001 fe61 	bl	801bcd8 <__match>
 801a016:	2800      	cmp	r0, #0
 801a018:	f43f aecc 	beq.w	8019db4 <_strtod_l+0xbc>
 801a01c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a01e:	781b      	ldrb	r3, [r3, #0]
 801a020:	2b28      	cmp	r3, #40	; 0x28
 801a022:	d12d      	bne.n	801a080 <_strtod_l+0x388>
 801a024:	4999      	ldr	r1, [pc, #612]	; (801a28c <_strtod_l+0x594>)
 801a026:	aa20      	add	r2, sp, #128	; 0x80
 801a028:	a81d      	add	r0, sp, #116	; 0x74
 801a02a:	f001 fe69 	bl	801bd00 <__hexnan>
 801a02e:	2805      	cmp	r0, #5
 801a030:	d126      	bne.n	801a080 <_strtod_l+0x388>
 801a032:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a034:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801a038:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801a03c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801a040:	e69c      	b.n	8019d7c <_strtod_l+0x84>
 801a042:	210a      	movs	r1, #10
 801a044:	fb01 3e0e 	mla	lr, r1, lr, r3
 801a048:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801a04c:	e7b9      	b.n	8019fc2 <_strtod_l+0x2ca>
 801a04e:	2b6e      	cmp	r3, #110	; 0x6e
 801a050:	e7db      	b.n	801a00a <_strtod_l+0x312>
 801a052:	498f      	ldr	r1, [pc, #572]	; (801a290 <_strtod_l+0x598>)
 801a054:	a81d      	add	r0, sp, #116	; 0x74
 801a056:	f001 fe3f 	bl	801bcd8 <__match>
 801a05a:	2800      	cmp	r0, #0
 801a05c:	f43f aeaa 	beq.w	8019db4 <_strtod_l+0xbc>
 801a060:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a062:	498c      	ldr	r1, [pc, #560]	; (801a294 <_strtod_l+0x59c>)
 801a064:	3b01      	subs	r3, #1
 801a066:	a81d      	add	r0, sp, #116	; 0x74
 801a068:	931d      	str	r3, [sp, #116]	; 0x74
 801a06a:	f001 fe35 	bl	801bcd8 <__match>
 801a06e:	b910      	cbnz	r0, 801a076 <_strtod_l+0x37e>
 801a070:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a072:	3301      	adds	r3, #1
 801a074:	931d      	str	r3, [sp, #116]	; 0x74
 801a076:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801a2a4 <_strtod_l+0x5ac>
 801a07a:	f04f 0a00 	mov.w	sl, #0
 801a07e:	e67d      	b.n	8019d7c <_strtod_l+0x84>
 801a080:	4885      	ldr	r0, [pc, #532]	; (801a298 <_strtod_l+0x5a0>)
 801a082:	f002 fd6d 	bl	801cb60 <nan>
 801a086:	ed8d 0b04 	vstr	d0, [sp, #16]
 801a08a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801a08e:	e675      	b.n	8019d7c <_strtod_l+0x84>
 801a090:	9b07      	ldr	r3, [sp, #28]
 801a092:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a094:	1af3      	subs	r3, r6, r3
 801a096:	2f00      	cmp	r7, #0
 801a098:	bf08      	it	eq
 801a09a:	462f      	moveq	r7, r5
 801a09c:	2d10      	cmp	r5, #16
 801a09e:	9308      	str	r3, [sp, #32]
 801a0a0:	46a8      	mov	r8, r5
 801a0a2:	bfa8      	it	ge
 801a0a4:	f04f 0810 	movge.w	r8, #16
 801a0a8:	f7e6 fa2c 	bl	8000504 <__aeabi_ui2d>
 801a0ac:	2d09      	cmp	r5, #9
 801a0ae:	4682      	mov	sl, r0
 801a0b0:	468b      	mov	fp, r1
 801a0b2:	dd13      	ble.n	801a0dc <_strtod_l+0x3e4>
 801a0b4:	4b79      	ldr	r3, [pc, #484]	; (801a29c <_strtod_l+0x5a4>)
 801a0b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801a0ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801a0be:	f7e6 fa9b 	bl	80005f8 <__aeabi_dmul>
 801a0c2:	4682      	mov	sl, r0
 801a0c4:	4648      	mov	r0, r9
 801a0c6:	468b      	mov	fp, r1
 801a0c8:	f7e6 fa1c 	bl	8000504 <__aeabi_ui2d>
 801a0cc:	4602      	mov	r2, r0
 801a0ce:	460b      	mov	r3, r1
 801a0d0:	4650      	mov	r0, sl
 801a0d2:	4659      	mov	r1, fp
 801a0d4:	f7e6 f8da 	bl	800028c <__adddf3>
 801a0d8:	4682      	mov	sl, r0
 801a0da:	468b      	mov	fp, r1
 801a0dc:	2d0f      	cmp	r5, #15
 801a0de:	dc38      	bgt.n	801a152 <_strtod_l+0x45a>
 801a0e0:	9b08      	ldr	r3, [sp, #32]
 801a0e2:	2b00      	cmp	r3, #0
 801a0e4:	f43f ae4a 	beq.w	8019d7c <_strtod_l+0x84>
 801a0e8:	dd24      	ble.n	801a134 <_strtod_l+0x43c>
 801a0ea:	2b16      	cmp	r3, #22
 801a0ec:	dc0b      	bgt.n	801a106 <_strtod_l+0x40e>
 801a0ee:	4d6b      	ldr	r5, [pc, #428]	; (801a29c <_strtod_l+0x5a4>)
 801a0f0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801a0f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a0f8:	4652      	mov	r2, sl
 801a0fa:	465b      	mov	r3, fp
 801a0fc:	f7e6 fa7c 	bl	80005f8 <__aeabi_dmul>
 801a100:	4682      	mov	sl, r0
 801a102:	468b      	mov	fp, r1
 801a104:	e63a      	b.n	8019d7c <_strtod_l+0x84>
 801a106:	9a08      	ldr	r2, [sp, #32]
 801a108:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801a10c:	4293      	cmp	r3, r2
 801a10e:	db20      	blt.n	801a152 <_strtod_l+0x45a>
 801a110:	4c62      	ldr	r4, [pc, #392]	; (801a29c <_strtod_l+0x5a4>)
 801a112:	f1c5 050f 	rsb	r5, r5, #15
 801a116:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801a11a:	4652      	mov	r2, sl
 801a11c:	465b      	mov	r3, fp
 801a11e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a122:	f7e6 fa69 	bl	80005f8 <__aeabi_dmul>
 801a126:	9b08      	ldr	r3, [sp, #32]
 801a128:	1b5d      	subs	r5, r3, r5
 801a12a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801a12e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a132:	e7e3      	b.n	801a0fc <_strtod_l+0x404>
 801a134:	9b08      	ldr	r3, [sp, #32]
 801a136:	3316      	adds	r3, #22
 801a138:	db0b      	blt.n	801a152 <_strtod_l+0x45a>
 801a13a:	9b07      	ldr	r3, [sp, #28]
 801a13c:	4a57      	ldr	r2, [pc, #348]	; (801a29c <_strtod_l+0x5a4>)
 801a13e:	1b9e      	subs	r6, r3, r6
 801a140:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801a144:	e9d6 2300 	ldrd	r2, r3, [r6]
 801a148:	4650      	mov	r0, sl
 801a14a:	4659      	mov	r1, fp
 801a14c:	f7e6 fb7e 	bl	800084c <__aeabi_ddiv>
 801a150:	e7d6      	b.n	801a100 <_strtod_l+0x408>
 801a152:	9b08      	ldr	r3, [sp, #32]
 801a154:	eba5 0808 	sub.w	r8, r5, r8
 801a158:	4498      	add	r8, r3
 801a15a:	f1b8 0f00 	cmp.w	r8, #0
 801a15e:	dd71      	ble.n	801a244 <_strtod_l+0x54c>
 801a160:	f018 030f 	ands.w	r3, r8, #15
 801a164:	d00a      	beq.n	801a17c <_strtod_l+0x484>
 801a166:	494d      	ldr	r1, [pc, #308]	; (801a29c <_strtod_l+0x5a4>)
 801a168:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801a16c:	4652      	mov	r2, sl
 801a16e:	465b      	mov	r3, fp
 801a170:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a174:	f7e6 fa40 	bl	80005f8 <__aeabi_dmul>
 801a178:	4682      	mov	sl, r0
 801a17a:	468b      	mov	fp, r1
 801a17c:	f038 080f 	bics.w	r8, r8, #15
 801a180:	d04d      	beq.n	801a21e <_strtod_l+0x526>
 801a182:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801a186:	dd22      	ble.n	801a1ce <_strtod_l+0x4d6>
 801a188:	2500      	movs	r5, #0
 801a18a:	462e      	mov	r6, r5
 801a18c:	9509      	str	r5, [sp, #36]	; 0x24
 801a18e:	9507      	str	r5, [sp, #28]
 801a190:	2322      	movs	r3, #34	; 0x22
 801a192:	f8df b110 	ldr.w	fp, [pc, #272]	; 801a2a4 <_strtod_l+0x5ac>
 801a196:	6023      	str	r3, [r4, #0]
 801a198:	f04f 0a00 	mov.w	sl, #0
 801a19c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	f43f adec 	beq.w	8019d7c <_strtod_l+0x84>
 801a1a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 801a1a6:	4620      	mov	r0, r4
 801a1a8:	f001 feba 	bl	801bf20 <_Bfree>
 801a1ac:	9907      	ldr	r1, [sp, #28]
 801a1ae:	4620      	mov	r0, r4
 801a1b0:	f001 feb6 	bl	801bf20 <_Bfree>
 801a1b4:	4631      	mov	r1, r6
 801a1b6:	4620      	mov	r0, r4
 801a1b8:	f001 feb2 	bl	801bf20 <_Bfree>
 801a1bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a1be:	4620      	mov	r0, r4
 801a1c0:	f001 feae 	bl	801bf20 <_Bfree>
 801a1c4:	4629      	mov	r1, r5
 801a1c6:	4620      	mov	r0, r4
 801a1c8:	f001 feaa 	bl	801bf20 <_Bfree>
 801a1cc:	e5d6      	b.n	8019d7c <_strtod_l+0x84>
 801a1ce:	2300      	movs	r3, #0
 801a1d0:	ea4f 1828 	mov.w	r8, r8, asr #4
 801a1d4:	4650      	mov	r0, sl
 801a1d6:	4659      	mov	r1, fp
 801a1d8:	4699      	mov	r9, r3
 801a1da:	f1b8 0f01 	cmp.w	r8, #1
 801a1de:	dc21      	bgt.n	801a224 <_strtod_l+0x52c>
 801a1e0:	b10b      	cbz	r3, 801a1e6 <_strtod_l+0x4ee>
 801a1e2:	4682      	mov	sl, r0
 801a1e4:	468b      	mov	fp, r1
 801a1e6:	4b2e      	ldr	r3, [pc, #184]	; (801a2a0 <_strtod_l+0x5a8>)
 801a1e8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801a1ec:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801a1f0:	4652      	mov	r2, sl
 801a1f2:	465b      	mov	r3, fp
 801a1f4:	e9d9 0100 	ldrd	r0, r1, [r9]
 801a1f8:	f7e6 f9fe 	bl	80005f8 <__aeabi_dmul>
 801a1fc:	4b29      	ldr	r3, [pc, #164]	; (801a2a4 <_strtod_l+0x5ac>)
 801a1fe:	460a      	mov	r2, r1
 801a200:	400b      	ands	r3, r1
 801a202:	4929      	ldr	r1, [pc, #164]	; (801a2a8 <_strtod_l+0x5b0>)
 801a204:	428b      	cmp	r3, r1
 801a206:	4682      	mov	sl, r0
 801a208:	d8be      	bhi.n	801a188 <_strtod_l+0x490>
 801a20a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801a20e:	428b      	cmp	r3, r1
 801a210:	bf86      	itte	hi
 801a212:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801a2ac <_strtod_l+0x5b4>
 801a216:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 801a21a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801a21e:	2300      	movs	r3, #0
 801a220:	9304      	str	r3, [sp, #16]
 801a222:	e081      	b.n	801a328 <_strtod_l+0x630>
 801a224:	f018 0f01 	tst.w	r8, #1
 801a228:	d007      	beq.n	801a23a <_strtod_l+0x542>
 801a22a:	4b1d      	ldr	r3, [pc, #116]	; (801a2a0 <_strtod_l+0x5a8>)
 801a22c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801a230:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a234:	f7e6 f9e0 	bl	80005f8 <__aeabi_dmul>
 801a238:	2301      	movs	r3, #1
 801a23a:	f109 0901 	add.w	r9, r9, #1
 801a23e:	ea4f 0868 	mov.w	r8, r8, asr #1
 801a242:	e7ca      	b.n	801a1da <_strtod_l+0x4e2>
 801a244:	d0eb      	beq.n	801a21e <_strtod_l+0x526>
 801a246:	f1c8 0800 	rsb	r8, r8, #0
 801a24a:	f018 020f 	ands.w	r2, r8, #15
 801a24e:	d00a      	beq.n	801a266 <_strtod_l+0x56e>
 801a250:	4b12      	ldr	r3, [pc, #72]	; (801a29c <_strtod_l+0x5a4>)
 801a252:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a256:	4650      	mov	r0, sl
 801a258:	4659      	mov	r1, fp
 801a25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a25e:	f7e6 faf5 	bl	800084c <__aeabi_ddiv>
 801a262:	4682      	mov	sl, r0
 801a264:	468b      	mov	fp, r1
 801a266:	ea5f 1828 	movs.w	r8, r8, asr #4
 801a26a:	d0d8      	beq.n	801a21e <_strtod_l+0x526>
 801a26c:	f1b8 0f1f 	cmp.w	r8, #31
 801a270:	dd1e      	ble.n	801a2b0 <_strtod_l+0x5b8>
 801a272:	2500      	movs	r5, #0
 801a274:	462e      	mov	r6, r5
 801a276:	9509      	str	r5, [sp, #36]	; 0x24
 801a278:	9507      	str	r5, [sp, #28]
 801a27a:	2322      	movs	r3, #34	; 0x22
 801a27c:	f04f 0a00 	mov.w	sl, #0
 801a280:	f04f 0b00 	mov.w	fp, #0
 801a284:	6023      	str	r3, [r4, #0]
 801a286:	e789      	b.n	801a19c <_strtod_l+0x4a4>
 801a288:	080209bd 	.word	0x080209bd
 801a28c:	08020a00 	.word	0x08020a00
 801a290:	080209b5 	.word	0x080209b5
 801a294:	08020b44 	.word	0x08020b44
 801a298:	08020e00 	.word	0x08020e00
 801a29c:	08020ce0 	.word	0x08020ce0
 801a2a0:	08020cb8 	.word	0x08020cb8
 801a2a4:	7ff00000 	.word	0x7ff00000
 801a2a8:	7ca00000 	.word	0x7ca00000
 801a2ac:	7fefffff 	.word	0x7fefffff
 801a2b0:	f018 0310 	ands.w	r3, r8, #16
 801a2b4:	bf18      	it	ne
 801a2b6:	236a      	movne	r3, #106	; 0x6a
 801a2b8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801a670 <_strtod_l+0x978>
 801a2bc:	9304      	str	r3, [sp, #16]
 801a2be:	4650      	mov	r0, sl
 801a2c0:	4659      	mov	r1, fp
 801a2c2:	2300      	movs	r3, #0
 801a2c4:	f018 0f01 	tst.w	r8, #1
 801a2c8:	d004      	beq.n	801a2d4 <_strtod_l+0x5dc>
 801a2ca:	e9d9 2300 	ldrd	r2, r3, [r9]
 801a2ce:	f7e6 f993 	bl	80005f8 <__aeabi_dmul>
 801a2d2:	2301      	movs	r3, #1
 801a2d4:	ea5f 0868 	movs.w	r8, r8, asr #1
 801a2d8:	f109 0908 	add.w	r9, r9, #8
 801a2dc:	d1f2      	bne.n	801a2c4 <_strtod_l+0x5cc>
 801a2de:	b10b      	cbz	r3, 801a2e4 <_strtod_l+0x5ec>
 801a2e0:	4682      	mov	sl, r0
 801a2e2:	468b      	mov	fp, r1
 801a2e4:	9b04      	ldr	r3, [sp, #16]
 801a2e6:	b1bb      	cbz	r3, 801a318 <_strtod_l+0x620>
 801a2e8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801a2ec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	4659      	mov	r1, fp
 801a2f4:	dd10      	ble.n	801a318 <_strtod_l+0x620>
 801a2f6:	2b1f      	cmp	r3, #31
 801a2f8:	f340 8128 	ble.w	801a54c <_strtod_l+0x854>
 801a2fc:	2b34      	cmp	r3, #52	; 0x34
 801a2fe:	bfde      	ittt	le
 801a300:	3b20      	suble	r3, #32
 801a302:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 801a306:	fa02 f303 	lslle.w	r3, r2, r3
 801a30a:	f04f 0a00 	mov.w	sl, #0
 801a30e:	bfcc      	ite	gt
 801a310:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801a314:	ea03 0b01 	andle.w	fp, r3, r1
 801a318:	2200      	movs	r2, #0
 801a31a:	2300      	movs	r3, #0
 801a31c:	4650      	mov	r0, sl
 801a31e:	4659      	mov	r1, fp
 801a320:	f7e6 fbd2 	bl	8000ac8 <__aeabi_dcmpeq>
 801a324:	2800      	cmp	r0, #0
 801a326:	d1a4      	bne.n	801a272 <_strtod_l+0x57a>
 801a328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a32a:	9300      	str	r3, [sp, #0]
 801a32c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a32e:	462b      	mov	r3, r5
 801a330:	463a      	mov	r2, r7
 801a332:	4620      	mov	r0, r4
 801a334:	f001 fe60 	bl	801bff8 <__s2b>
 801a338:	9009      	str	r0, [sp, #36]	; 0x24
 801a33a:	2800      	cmp	r0, #0
 801a33c:	f43f af24 	beq.w	801a188 <_strtod_l+0x490>
 801a340:	9b07      	ldr	r3, [sp, #28]
 801a342:	1b9e      	subs	r6, r3, r6
 801a344:	9b08      	ldr	r3, [sp, #32]
 801a346:	2b00      	cmp	r3, #0
 801a348:	bfb4      	ite	lt
 801a34a:	4633      	movlt	r3, r6
 801a34c:	2300      	movge	r3, #0
 801a34e:	9310      	str	r3, [sp, #64]	; 0x40
 801a350:	9b08      	ldr	r3, [sp, #32]
 801a352:	2500      	movs	r5, #0
 801a354:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a358:	9318      	str	r3, [sp, #96]	; 0x60
 801a35a:	462e      	mov	r6, r5
 801a35c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a35e:	4620      	mov	r0, r4
 801a360:	6859      	ldr	r1, [r3, #4]
 801a362:	f001 fd9d 	bl	801bea0 <_Balloc>
 801a366:	9007      	str	r0, [sp, #28]
 801a368:	2800      	cmp	r0, #0
 801a36a:	f43f af11 	beq.w	801a190 <_strtod_l+0x498>
 801a36e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a370:	691a      	ldr	r2, [r3, #16]
 801a372:	3202      	adds	r2, #2
 801a374:	f103 010c 	add.w	r1, r3, #12
 801a378:	0092      	lsls	r2, r2, #2
 801a37a:	300c      	adds	r0, #12
 801a37c:	f7fe fc70 	bl	8018c60 <memcpy>
 801a380:	ec4b ab10 	vmov	d0, sl, fp
 801a384:	aa20      	add	r2, sp, #128	; 0x80
 801a386:	a91f      	add	r1, sp, #124	; 0x7c
 801a388:	4620      	mov	r0, r4
 801a38a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801a38e:	f002 f96f 	bl	801c670 <__d2b>
 801a392:	901e      	str	r0, [sp, #120]	; 0x78
 801a394:	2800      	cmp	r0, #0
 801a396:	f43f aefb 	beq.w	801a190 <_strtod_l+0x498>
 801a39a:	2101      	movs	r1, #1
 801a39c:	4620      	mov	r0, r4
 801a39e:	f001 fec5 	bl	801c12c <__i2b>
 801a3a2:	4606      	mov	r6, r0
 801a3a4:	2800      	cmp	r0, #0
 801a3a6:	f43f aef3 	beq.w	801a190 <_strtod_l+0x498>
 801a3aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801a3ac:	9904      	ldr	r1, [sp, #16]
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	bfab      	itete	ge
 801a3b2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801a3b4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801a3b6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801a3b8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801a3bc:	bfac      	ite	ge
 801a3be:	eb03 0902 	addge.w	r9, r3, r2
 801a3c2:	1ad7      	sublt	r7, r2, r3
 801a3c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a3c6:	eba3 0801 	sub.w	r8, r3, r1
 801a3ca:	4490      	add	r8, r2
 801a3cc:	4ba3      	ldr	r3, [pc, #652]	; (801a65c <_strtod_l+0x964>)
 801a3ce:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801a3d2:	4598      	cmp	r8, r3
 801a3d4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801a3d8:	f280 80cc 	bge.w	801a574 <_strtod_l+0x87c>
 801a3dc:	eba3 0308 	sub.w	r3, r3, r8
 801a3e0:	2b1f      	cmp	r3, #31
 801a3e2:	eba2 0203 	sub.w	r2, r2, r3
 801a3e6:	f04f 0101 	mov.w	r1, #1
 801a3ea:	f300 80b6 	bgt.w	801a55a <_strtod_l+0x862>
 801a3ee:	fa01 f303 	lsl.w	r3, r1, r3
 801a3f2:	9311      	str	r3, [sp, #68]	; 0x44
 801a3f4:	2300      	movs	r3, #0
 801a3f6:	930c      	str	r3, [sp, #48]	; 0x30
 801a3f8:	eb09 0802 	add.w	r8, r9, r2
 801a3fc:	9b04      	ldr	r3, [sp, #16]
 801a3fe:	45c1      	cmp	r9, r8
 801a400:	4417      	add	r7, r2
 801a402:	441f      	add	r7, r3
 801a404:	464b      	mov	r3, r9
 801a406:	bfa8      	it	ge
 801a408:	4643      	movge	r3, r8
 801a40a:	42bb      	cmp	r3, r7
 801a40c:	bfa8      	it	ge
 801a40e:	463b      	movge	r3, r7
 801a410:	2b00      	cmp	r3, #0
 801a412:	bfc2      	ittt	gt
 801a414:	eba8 0803 	subgt.w	r8, r8, r3
 801a418:	1aff      	subgt	r7, r7, r3
 801a41a:	eba9 0903 	subgt.w	r9, r9, r3
 801a41e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a420:	2b00      	cmp	r3, #0
 801a422:	dd17      	ble.n	801a454 <_strtod_l+0x75c>
 801a424:	4631      	mov	r1, r6
 801a426:	461a      	mov	r2, r3
 801a428:	4620      	mov	r0, r4
 801a42a:	f001 ff3b 	bl	801c2a4 <__pow5mult>
 801a42e:	4606      	mov	r6, r0
 801a430:	2800      	cmp	r0, #0
 801a432:	f43f aead 	beq.w	801a190 <_strtod_l+0x498>
 801a436:	4601      	mov	r1, r0
 801a438:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801a43a:	4620      	mov	r0, r4
 801a43c:	f001 fe8c 	bl	801c158 <__multiply>
 801a440:	900f      	str	r0, [sp, #60]	; 0x3c
 801a442:	2800      	cmp	r0, #0
 801a444:	f43f aea4 	beq.w	801a190 <_strtod_l+0x498>
 801a448:	991e      	ldr	r1, [sp, #120]	; 0x78
 801a44a:	4620      	mov	r0, r4
 801a44c:	f001 fd68 	bl	801bf20 <_Bfree>
 801a450:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a452:	931e      	str	r3, [sp, #120]	; 0x78
 801a454:	f1b8 0f00 	cmp.w	r8, #0
 801a458:	f300 8091 	bgt.w	801a57e <_strtod_l+0x886>
 801a45c:	9b08      	ldr	r3, [sp, #32]
 801a45e:	2b00      	cmp	r3, #0
 801a460:	dd08      	ble.n	801a474 <_strtod_l+0x77c>
 801a462:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a464:	9907      	ldr	r1, [sp, #28]
 801a466:	4620      	mov	r0, r4
 801a468:	f001 ff1c 	bl	801c2a4 <__pow5mult>
 801a46c:	9007      	str	r0, [sp, #28]
 801a46e:	2800      	cmp	r0, #0
 801a470:	f43f ae8e 	beq.w	801a190 <_strtod_l+0x498>
 801a474:	2f00      	cmp	r7, #0
 801a476:	dd08      	ble.n	801a48a <_strtod_l+0x792>
 801a478:	9907      	ldr	r1, [sp, #28]
 801a47a:	463a      	mov	r2, r7
 801a47c:	4620      	mov	r0, r4
 801a47e:	f001 ff6b 	bl	801c358 <__lshift>
 801a482:	9007      	str	r0, [sp, #28]
 801a484:	2800      	cmp	r0, #0
 801a486:	f43f ae83 	beq.w	801a190 <_strtod_l+0x498>
 801a48a:	f1b9 0f00 	cmp.w	r9, #0
 801a48e:	dd08      	ble.n	801a4a2 <_strtod_l+0x7aa>
 801a490:	4631      	mov	r1, r6
 801a492:	464a      	mov	r2, r9
 801a494:	4620      	mov	r0, r4
 801a496:	f001 ff5f 	bl	801c358 <__lshift>
 801a49a:	4606      	mov	r6, r0
 801a49c:	2800      	cmp	r0, #0
 801a49e:	f43f ae77 	beq.w	801a190 <_strtod_l+0x498>
 801a4a2:	9a07      	ldr	r2, [sp, #28]
 801a4a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 801a4a6:	4620      	mov	r0, r4
 801a4a8:	f001 ffde 	bl	801c468 <__mdiff>
 801a4ac:	4605      	mov	r5, r0
 801a4ae:	2800      	cmp	r0, #0
 801a4b0:	f43f ae6e 	beq.w	801a190 <_strtod_l+0x498>
 801a4b4:	68c3      	ldr	r3, [r0, #12]
 801a4b6:	930f      	str	r3, [sp, #60]	; 0x3c
 801a4b8:	2300      	movs	r3, #0
 801a4ba:	60c3      	str	r3, [r0, #12]
 801a4bc:	4631      	mov	r1, r6
 801a4be:	f001 ffb7 	bl	801c430 <__mcmp>
 801a4c2:	2800      	cmp	r0, #0
 801a4c4:	da65      	bge.n	801a592 <_strtod_l+0x89a>
 801a4c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a4c8:	ea53 030a 	orrs.w	r3, r3, sl
 801a4cc:	f040 8087 	bne.w	801a5de <_strtod_l+0x8e6>
 801a4d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	f040 8082 	bne.w	801a5de <_strtod_l+0x8e6>
 801a4da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a4de:	0d1b      	lsrs	r3, r3, #20
 801a4e0:	051b      	lsls	r3, r3, #20
 801a4e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801a4e6:	d97a      	bls.n	801a5de <_strtod_l+0x8e6>
 801a4e8:	696b      	ldr	r3, [r5, #20]
 801a4ea:	b913      	cbnz	r3, 801a4f2 <_strtod_l+0x7fa>
 801a4ec:	692b      	ldr	r3, [r5, #16]
 801a4ee:	2b01      	cmp	r3, #1
 801a4f0:	dd75      	ble.n	801a5de <_strtod_l+0x8e6>
 801a4f2:	4629      	mov	r1, r5
 801a4f4:	2201      	movs	r2, #1
 801a4f6:	4620      	mov	r0, r4
 801a4f8:	f001 ff2e 	bl	801c358 <__lshift>
 801a4fc:	4631      	mov	r1, r6
 801a4fe:	4605      	mov	r5, r0
 801a500:	f001 ff96 	bl	801c430 <__mcmp>
 801a504:	2800      	cmp	r0, #0
 801a506:	dd6a      	ble.n	801a5de <_strtod_l+0x8e6>
 801a508:	9904      	ldr	r1, [sp, #16]
 801a50a:	4a55      	ldr	r2, [pc, #340]	; (801a660 <_strtod_l+0x968>)
 801a50c:	465b      	mov	r3, fp
 801a50e:	2900      	cmp	r1, #0
 801a510:	f000 8085 	beq.w	801a61e <_strtod_l+0x926>
 801a514:	ea02 010b 	and.w	r1, r2, fp
 801a518:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801a51c:	dc7f      	bgt.n	801a61e <_strtod_l+0x926>
 801a51e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801a522:	f77f aeaa 	ble.w	801a27a <_strtod_l+0x582>
 801a526:	4a4f      	ldr	r2, [pc, #316]	; (801a664 <_strtod_l+0x96c>)
 801a528:	2300      	movs	r3, #0
 801a52a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801a52e:	4650      	mov	r0, sl
 801a530:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801a534:	4659      	mov	r1, fp
 801a536:	f7e6 f85f 	bl	80005f8 <__aeabi_dmul>
 801a53a:	460b      	mov	r3, r1
 801a53c:	4303      	orrs	r3, r0
 801a53e:	bf08      	it	eq
 801a540:	2322      	moveq	r3, #34	; 0x22
 801a542:	4682      	mov	sl, r0
 801a544:	468b      	mov	fp, r1
 801a546:	bf08      	it	eq
 801a548:	6023      	streq	r3, [r4, #0]
 801a54a:	e62b      	b.n	801a1a4 <_strtod_l+0x4ac>
 801a54c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a550:	fa02 f303 	lsl.w	r3, r2, r3
 801a554:	ea03 0a0a 	and.w	sl, r3, sl
 801a558:	e6de      	b.n	801a318 <_strtod_l+0x620>
 801a55a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801a55e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801a562:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801a566:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801a56a:	fa01 f308 	lsl.w	r3, r1, r8
 801a56e:	930c      	str	r3, [sp, #48]	; 0x30
 801a570:	9111      	str	r1, [sp, #68]	; 0x44
 801a572:	e741      	b.n	801a3f8 <_strtod_l+0x700>
 801a574:	2300      	movs	r3, #0
 801a576:	930c      	str	r3, [sp, #48]	; 0x30
 801a578:	2301      	movs	r3, #1
 801a57a:	9311      	str	r3, [sp, #68]	; 0x44
 801a57c:	e73c      	b.n	801a3f8 <_strtod_l+0x700>
 801a57e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801a580:	4642      	mov	r2, r8
 801a582:	4620      	mov	r0, r4
 801a584:	f001 fee8 	bl	801c358 <__lshift>
 801a588:	901e      	str	r0, [sp, #120]	; 0x78
 801a58a:	2800      	cmp	r0, #0
 801a58c:	f47f af66 	bne.w	801a45c <_strtod_l+0x764>
 801a590:	e5fe      	b.n	801a190 <_strtod_l+0x498>
 801a592:	465f      	mov	r7, fp
 801a594:	d16e      	bne.n	801a674 <_strtod_l+0x97c>
 801a596:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a598:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a59c:	b342      	cbz	r2, 801a5f0 <_strtod_l+0x8f8>
 801a59e:	4a32      	ldr	r2, [pc, #200]	; (801a668 <_strtod_l+0x970>)
 801a5a0:	4293      	cmp	r3, r2
 801a5a2:	d128      	bne.n	801a5f6 <_strtod_l+0x8fe>
 801a5a4:	9b04      	ldr	r3, [sp, #16]
 801a5a6:	4650      	mov	r0, sl
 801a5a8:	b1eb      	cbz	r3, 801a5e6 <_strtod_l+0x8ee>
 801a5aa:	4a2d      	ldr	r2, [pc, #180]	; (801a660 <_strtod_l+0x968>)
 801a5ac:	403a      	ands	r2, r7
 801a5ae:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801a5b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801a5b6:	d819      	bhi.n	801a5ec <_strtod_l+0x8f4>
 801a5b8:	0d12      	lsrs	r2, r2, #20
 801a5ba:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801a5be:	fa01 f303 	lsl.w	r3, r1, r3
 801a5c2:	4298      	cmp	r0, r3
 801a5c4:	d117      	bne.n	801a5f6 <_strtod_l+0x8fe>
 801a5c6:	4b29      	ldr	r3, [pc, #164]	; (801a66c <_strtod_l+0x974>)
 801a5c8:	429f      	cmp	r7, r3
 801a5ca:	d102      	bne.n	801a5d2 <_strtod_l+0x8da>
 801a5cc:	3001      	adds	r0, #1
 801a5ce:	f43f addf 	beq.w	801a190 <_strtod_l+0x498>
 801a5d2:	4b23      	ldr	r3, [pc, #140]	; (801a660 <_strtod_l+0x968>)
 801a5d4:	403b      	ands	r3, r7
 801a5d6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801a5da:	f04f 0a00 	mov.w	sl, #0
 801a5de:	9b04      	ldr	r3, [sp, #16]
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	d1a0      	bne.n	801a526 <_strtod_l+0x82e>
 801a5e4:	e5de      	b.n	801a1a4 <_strtod_l+0x4ac>
 801a5e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a5ea:	e7ea      	b.n	801a5c2 <_strtod_l+0x8ca>
 801a5ec:	460b      	mov	r3, r1
 801a5ee:	e7e8      	b.n	801a5c2 <_strtod_l+0x8ca>
 801a5f0:	ea53 030a 	orrs.w	r3, r3, sl
 801a5f4:	d088      	beq.n	801a508 <_strtod_l+0x810>
 801a5f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a5f8:	b1db      	cbz	r3, 801a632 <_strtod_l+0x93a>
 801a5fa:	423b      	tst	r3, r7
 801a5fc:	d0ef      	beq.n	801a5de <_strtod_l+0x8e6>
 801a5fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a600:	9a04      	ldr	r2, [sp, #16]
 801a602:	4650      	mov	r0, sl
 801a604:	4659      	mov	r1, fp
 801a606:	b1c3      	cbz	r3, 801a63a <_strtod_l+0x942>
 801a608:	f7ff fb57 	bl	8019cba <sulp>
 801a60c:	4602      	mov	r2, r0
 801a60e:	460b      	mov	r3, r1
 801a610:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801a614:	f7e5 fe3a 	bl	800028c <__adddf3>
 801a618:	4682      	mov	sl, r0
 801a61a:	468b      	mov	fp, r1
 801a61c:	e7df      	b.n	801a5de <_strtod_l+0x8e6>
 801a61e:	4013      	ands	r3, r2
 801a620:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801a624:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801a628:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801a62c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801a630:	e7d5      	b.n	801a5de <_strtod_l+0x8e6>
 801a632:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a634:	ea13 0f0a 	tst.w	r3, sl
 801a638:	e7e0      	b.n	801a5fc <_strtod_l+0x904>
 801a63a:	f7ff fb3e 	bl	8019cba <sulp>
 801a63e:	4602      	mov	r2, r0
 801a640:	460b      	mov	r3, r1
 801a642:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801a646:	f7e5 fe1f 	bl	8000288 <__aeabi_dsub>
 801a64a:	2200      	movs	r2, #0
 801a64c:	2300      	movs	r3, #0
 801a64e:	4682      	mov	sl, r0
 801a650:	468b      	mov	fp, r1
 801a652:	f7e6 fa39 	bl	8000ac8 <__aeabi_dcmpeq>
 801a656:	2800      	cmp	r0, #0
 801a658:	d0c1      	beq.n	801a5de <_strtod_l+0x8e6>
 801a65a:	e60e      	b.n	801a27a <_strtod_l+0x582>
 801a65c:	fffffc02 	.word	0xfffffc02
 801a660:	7ff00000 	.word	0x7ff00000
 801a664:	39500000 	.word	0x39500000
 801a668:	000fffff 	.word	0x000fffff
 801a66c:	7fefffff 	.word	0x7fefffff
 801a670:	08020a18 	.word	0x08020a18
 801a674:	4631      	mov	r1, r6
 801a676:	4628      	mov	r0, r5
 801a678:	f002 f856 	bl	801c728 <__ratio>
 801a67c:	ec59 8b10 	vmov	r8, r9, d0
 801a680:	ee10 0a10 	vmov	r0, s0
 801a684:	2200      	movs	r2, #0
 801a686:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a68a:	4649      	mov	r1, r9
 801a68c:	f7e6 fa30 	bl	8000af0 <__aeabi_dcmple>
 801a690:	2800      	cmp	r0, #0
 801a692:	d07c      	beq.n	801a78e <_strtod_l+0xa96>
 801a694:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a696:	2b00      	cmp	r3, #0
 801a698:	d04c      	beq.n	801a734 <_strtod_l+0xa3c>
 801a69a:	4b95      	ldr	r3, [pc, #596]	; (801a8f0 <_strtod_l+0xbf8>)
 801a69c:	2200      	movs	r2, #0
 801a69e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801a6a2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801a8f0 <_strtod_l+0xbf8>
 801a6a6:	f04f 0800 	mov.w	r8, #0
 801a6aa:	4b92      	ldr	r3, [pc, #584]	; (801a8f4 <_strtod_l+0xbfc>)
 801a6ac:	403b      	ands	r3, r7
 801a6ae:	9311      	str	r3, [sp, #68]	; 0x44
 801a6b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a6b2:	4b91      	ldr	r3, [pc, #580]	; (801a8f8 <_strtod_l+0xc00>)
 801a6b4:	429a      	cmp	r2, r3
 801a6b6:	f040 80b2 	bne.w	801a81e <_strtod_l+0xb26>
 801a6ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801a6be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801a6c2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801a6c6:	ec4b ab10 	vmov	d0, sl, fp
 801a6ca:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801a6ce:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801a6d2:	f001 ff51 	bl	801c578 <__ulp>
 801a6d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801a6da:	ec53 2b10 	vmov	r2, r3, d0
 801a6de:	f7e5 ff8b 	bl	80005f8 <__aeabi_dmul>
 801a6e2:	4652      	mov	r2, sl
 801a6e4:	465b      	mov	r3, fp
 801a6e6:	f7e5 fdd1 	bl	800028c <__adddf3>
 801a6ea:	460b      	mov	r3, r1
 801a6ec:	4981      	ldr	r1, [pc, #516]	; (801a8f4 <_strtod_l+0xbfc>)
 801a6ee:	4a83      	ldr	r2, [pc, #524]	; (801a8fc <_strtod_l+0xc04>)
 801a6f0:	4019      	ands	r1, r3
 801a6f2:	4291      	cmp	r1, r2
 801a6f4:	4682      	mov	sl, r0
 801a6f6:	d95e      	bls.n	801a7b6 <_strtod_l+0xabe>
 801a6f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a6fa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801a6fe:	4293      	cmp	r3, r2
 801a700:	d103      	bne.n	801a70a <_strtod_l+0xa12>
 801a702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a704:	3301      	adds	r3, #1
 801a706:	f43f ad43 	beq.w	801a190 <_strtod_l+0x498>
 801a70a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801a908 <_strtod_l+0xc10>
 801a70e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801a712:	991e      	ldr	r1, [sp, #120]	; 0x78
 801a714:	4620      	mov	r0, r4
 801a716:	f001 fc03 	bl	801bf20 <_Bfree>
 801a71a:	9907      	ldr	r1, [sp, #28]
 801a71c:	4620      	mov	r0, r4
 801a71e:	f001 fbff 	bl	801bf20 <_Bfree>
 801a722:	4631      	mov	r1, r6
 801a724:	4620      	mov	r0, r4
 801a726:	f001 fbfb 	bl	801bf20 <_Bfree>
 801a72a:	4629      	mov	r1, r5
 801a72c:	4620      	mov	r0, r4
 801a72e:	f001 fbf7 	bl	801bf20 <_Bfree>
 801a732:	e613      	b.n	801a35c <_strtod_l+0x664>
 801a734:	f1ba 0f00 	cmp.w	sl, #0
 801a738:	d11b      	bne.n	801a772 <_strtod_l+0xa7a>
 801a73a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a73e:	b9f3      	cbnz	r3, 801a77e <_strtod_l+0xa86>
 801a740:	4b6b      	ldr	r3, [pc, #428]	; (801a8f0 <_strtod_l+0xbf8>)
 801a742:	2200      	movs	r2, #0
 801a744:	4640      	mov	r0, r8
 801a746:	4649      	mov	r1, r9
 801a748:	f7e6 f9c8 	bl	8000adc <__aeabi_dcmplt>
 801a74c:	b9d0      	cbnz	r0, 801a784 <_strtod_l+0xa8c>
 801a74e:	4640      	mov	r0, r8
 801a750:	4649      	mov	r1, r9
 801a752:	4b6b      	ldr	r3, [pc, #428]	; (801a900 <_strtod_l+0xc08>)
 801a754:	2200      	movs	r2, #0
 801a756:	f7e5 ff4f 	bl	80005f8 <__aeabi_dmul>
 801a75a:	4680      	mov	r8, r0
 801a75c:	4689      	mov	r9, r1
 801a75e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801a762:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801a766:	931b      	str	r3, [sp, #108]	; 0x6c
 801a768:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801a76c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801a770:	e79b      	b.n	801a6aa <_strtod_l+0x9b2>
 801a772:	f1ba 0f01 	cmp.w	sl, #1
 801a776:	d102      	bne.n	801a77e <_strtod_l+0xa86>
 801a778:	2f00      	cmp	r7, #0
 801a77a:	f43f ad7e 	beq.w	801a27a <_strtod_l+0x582>
 801a77e:	4b61      	ldr	r3, [pc, #388]	; (801a904 <_strtod_l+0xc0c>)
 801a780:	2200      	movs	r2, #0
 801a782:	e78c      	b.n	801a69e <_strtod_l+0x9a6>
 801a784:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801a900 <_strtod_l+0xc08>
 801a788:	f04f 0800 	mov.w	r8, #0
 801a78c:	e7e7      	b.n	801a75e <_strtod_l+0xa66>
 801a78e:	4b5c      	ldr	r3, [pc, #368]	; (801a900 <_strtod_l+0xc08>)
 801a790:	4640      	mov	r0, r8
 801a792:	4649      	mov	r1, r9
 801a794:	2200      	movs	r2, #0
 801a796:	f7e5 ff2f 	bl	80005f8 <__aeabi_dmul>
 801a79a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a79c:	4680      	mov	r8, r0
 801a79e:	4689      	mov	r9, r1
 801a7a0:	b933      	cbnz	r3, 801a7b0 <_strtod_l+0xab8>
 801a7a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a7a6:	9012      	str	r0, [sp, #72]	; 0x48
 801a7a8:	9313      	str	r3, [sp, #76]	; 0x4c
 801a7aa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801a7ae:	e7dd      	b.n	801a76c <_strtod_l+0xa74>
 801a7b0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801a7b4:	e7f9      	b.n	801a7aa <_strtod_l+0xab2>
 801a7b6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801a7ba:	9b04      	ldr	r3, [sp, #16]
 801a7bc:	2b00      	cmp	r3, #0
 801a7be:	d1a8      	bne.n	801a712 <_strtod_l+0xa1a>
 801a7c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a7c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a7c6:	0d1b      	lsrs	r3, r3, #20
 801a7c8:	051b      	lsls	r3, r3, #20
 801a7ca:	429a      	cmp	r2, r3
 801a7cc:	d1a1      	bne.n	801a712 <_strtod_l+0xa1a>
 801a7ce:	4640      	mov	r0, r8
 801a7d0:	4649      	mov	r1, r9
 801a7d2:	f7e6 fa71 	bl	8000cb8 <__aeabi_d2lz>
 801a7d6:	f7e5 fee1 	bl	800059c <__aeabi_l2d>
 801a7da:	4602      	mov	r2, r0
 801a7dc:	460b      	mov	r3, r1
 801a7de:	4640      	mov	r0, r8
 801a7e0:	4649      	mov	r1, r9
 801a7e2:	f7e5 fd51 	bl	8000288 <__aeabi_dsub>
 801a7e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a7e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a7ec:	ea43 030a 	orr.w	r3, r3, sl
 801a7f0:	4313      	orrs	r3, r2
 801a7f2:	4680      	mov	r8, r0
 801a7f4:	4689      	mov	r9, r1
 801a7f6:	d053      	beq.n	801a8a0 <_strtod_l+0xba8>
 801a7f8:	a335      	add	r3, pc, #212	; (adr r3, 801a8d0 <_strtod_l+0xbd8>)
 801a7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7fe:	f7e6 f96d 	bl	8000adc <__aeabi_dcmplt>
 801a802:	2800      	cmp	r0, #0
 801a804:	f47f acce 	bne.w	801a1a4 <_strtod_l+0x4ac>
 801a808:	a333      	add	r3, pc, #204	; (adr r3, 801a8d8 <_strtod_l+0xbe0>)
 801a80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a80e:	4640      	mov	r0, r8
 801a810:	4649      	mov	r1, r9
 801a812:	f7e6 f981 	bl	8000b18 <__aeabi_dcmpgt>
 801a816:	2800      	cmp	r0, #0
 801a818:	f43f af7b 	beq.w	801a712 <_strtod_l+0xa1a>
 801a81c:	e4c2      	b.n	801a1a4 <_strtod_l+0x4ac>
 801a81e:	9b04      	ldr	r3, [sp, #16]
 801a820:	b333      	cbz	r3, 801a870 <_strtod_l+0xb78>
 801a822:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a824:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801a828:	d822      	bhi.n	801a870 <_strtod_l+0xb78>
 801a82a:	a32d      	add	r3, pc, #180	; (adr r3, 801a8e0 <_strtod_l+0xbe8>)
 801a82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a830:	4640      	mov	r0, r8
 801a832:	4649      	mov	r1, r9
 801a834:	f7e6 f95c 	bl	8000af0 <__aeabi_dcmple>
 801a838:	b1a0      	cbz	r0, 801a864 <_strtod_l+0xb6c>
 801a83a:	4649      	mov	r1, r9
 801a83c:	4640      	mov	r0, r8
 801a83e:	f7e6 f9b3 	bl	8000ba8 <__aeabi_d2uiz>
 801a842:	2801      	cmp	r0, #1
 801a844:	bf38      	it	cc
 801a846:	2001      	movcc	r0, #1
 801a848:	f7e5 fe5c 	bl	8000504 <__aeabi_ui2d>
 801a84c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a84e:	4680      	mov	r8, r0
 801a850:	4689      	mov	r9, r1
 801a852:	bb13      	cbnz	r3, 801a89a <_strtod_l+0xba2>
 801a854:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a858:	9014      	str	r0, [sp, #80]	; 0x50
 801a85a:	9315      	str	r3, [sp, #84]	; 0x54
 801a85c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801a860:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801a864:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a866:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a868:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801a86c:	1a9b      	subs	r3, r3, r2
 801a86e:	930d      	str	r3, [sp, #52]	; 0x34
 801a870:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801a874:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801a878:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801a87c:	f001 fe7c 	bl	801c578 <__ulp>
 801a880:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801a884:	ec53 2b10 	vmov	r2, r3, d0
 801a888:	f7e5 feb6 	bl	80005f8 <__aeabi_dmul>
 801a88c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801a890:	f7e5 fcfc 	bl	800028c <__adddf3>
 801a894:	4682      	mov	sl, r0
 801a896:	468b      	mov	fp, r1
 801a898:	e78f      	b.n	801a7ba <_strtod_l+0xac2>
 801a89a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801a89e:	e7dd      	b.n	801a85c <_strtod_l+0xb64>
 801a8a0:	a311      	add	r3, pc, #68	; (adr r3, 801a8e8 <_strtod_l+0xbf0>)
 801a8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8a6:	f7e6 f919 	bl	8000adc <__aeabi_dcmplt>
 801a8aa:	e7b4      	b.n	801a816 <_strtod_l+0xb1e>
 801a8ac:	2300      	movs	r3, #0
 801a8ae:	930e      	str	r3, [sp, #56]	; 0x38
 801a8b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801a8b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a8b4:	6013      	str	r3, [r2, #0]
 801a8b6:	f7ff ba65 	b.w	8019d84 <_strtod_l+0x8c>
 801a8ba:	2b65      	cmp	r3, #101	; 0x65
 801a8bc:	f43f ab5d 	beq.w	8019f7a <_strtod_l+0x282>
 801a8c0:	2b45      	cmp	r3, #69	; 0x45
 801a8c2:	f43f ab5a 	beq.w	8019f7a <_strtod_l+0x282>
 801a8c6:	2201      	movs	r2, #1
 801a8c8:	f7ff bb92 	b.w	8019ff0 <_strtod_l+0x2f8>
 801a8cc:	f3af 8000 	nop.w
 801a8d0:	94a03595 	.word	0x94a03595
 801a8d4:	3fdfffff 	.word	0x3fdfffff
 801a8d8:	35afe535 	.word	0x35afe535
 801a8dc:	3fe00000 	.word	0x3fe00000
 801a8e0:	ffc00000 	.word	0xffc00000
 801a8e4:	41dfffff 	.word	0x41dfffff
 801a8e8:	94a03595 	.word	0x94a03595
 801a8ec:	3fcfffff 	.word	0x3fcfffff
 801a8f0:	3ff00000 	.word	0x3ff00000
 801a8f4:	7ff00000 	.word	0x7ff00000
 801a8f8:	7fe00000 	.word	0x7fe00000
 801a8fc:	7c9fffff 	.word	0x7c9fffff
 801a900:	3fe00000 	.word	0x3fe00000
 801a904:	bff00000 	.word	0xbff00000
 801a908:	7fefffff 	.word	0x7fefffff

0801a90c <_strtod_r>:
 801a90c:	4b01      	ldr	r3, [pc, #4]	; (801a914 <_strtod_r+0x8>)
 801a90e:	f7ff b9f3 	b.w	8019cf8 <_strtod_l>
 801a912:	bf00      	nop
 801a914:	20000138 	.word	0x20000138

0801a918 <_strtol_l.isra.0>:
 801a918:	2b01      	cmp	r3, #1
 801a91a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a91e:	d001      	beq.n	801a924 <_strtol_l.isra.0+0xc>
 801a920:	2b24      	cmp	r3, #36	; 0x24
 801a922:	d906      	bls.n	801a932 <_strtol_l.isra.0+0x1a>
 801a924:	f7fe f962 	bl	8018bec <__errno>
 801a928:	2316      	movs	r3, #22
 801a92a:	6003      	str	r3, [r0, #0]
 801a92c:	2000      	movs	r0, #0
 801a92e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a932:	4f3a      	ldr	r7, [pc, #232]	; (801aa1c <_strtol_l.isra.0+0x104>)
 801a934:	468e      	mov	lr, r1
 801a936:	4676      	mov	r6, lr
 801a938:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801a93c:	5de5      	ldrb	r5, [r4, r7]
 801a93e:	f015 0508 	ands.w	r5, r5, #8
 801a942:	d1f8      	bne.n	801a936 <_strtol_l.isra.0+0x1e>
 801a944:	2c2d      	cmp	r4, #45	; 0x2d
 801a946:	d134      	bne.n	801a9b2 <_strtol_l.isra.0+0x9a>
 801a948:	f89e 4000 	ldrb.w	r4, [lr]
 801a94c:	f04f 0801 	mov.w	r8, #1
 801a950:	f106 0e02 	add.w	lr, r6, #2
 801a954:	2b00      	cmp	r3, #0
 801a956:	d05c      	beq.n	801aa12 <_strtol_l.isra.0+0xfa>
 801a958:	2b10      	cmp	r3, #16
 801a95a:	d10c      	bne.n	801a976 <_strtol_l.isra.0+0x5e>
 801a95c:	2c30      	cmp	r4, #48	; 0x30
 801a95e:	d10a      	bne.n	801a976 <_strtol_l.isra.0+0x5e>
 801a960:	f89e 4000 	ldrb.w	r4, [lr]
 801a964:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801a968:	2c58      	cmp	r4, #88	; 0x58
 801a96a:	d14d      	bne.n	801aa08 <_strtol_l.isra.0+0xf0>
 801a96c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801a970:	2310      	movs	r3, #16
 801a972:	f10e 0e02 	add.w	lr, lr, #2
 801a976:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801a97a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801a97e:	2600      	movs	r6, #0
 801a980:	fbbc f9f3 	udiv	r9, ip, r3
 801a984:	4635      	mov	r5, r6
 801a986:	fb03 ca19 	mls	sl, r3, r9, ip
 801a98a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801a98e:	2f09      	cmp	r7, #9
 801a990:	d818      	bhi.n	801a9c4 <_strtol_l.isra.0+0xac>
 801a992:	463c      	mov	r4, r7
 801a994:	42a3      	cmp	r3, r4
 801a996:	dd24      	ble.n	801a9e2 <_strtol_l.isra.0+0xca>
 801a998:	2e00      	cmp	r6, #0
 801a99a:	db1f      	blt.n	801a9dc <_strtol_l.isra.0+0xc4>
 801a99c:	45a9      	cmp	r9, r5
 801a99e:	d31d      	bcc.n	801a9dc <_strtol_l.isra.0+0xc4>
 801a9a0:	d101      	bne.n	801a9a6 <_strtol_l.isra.0+0x8e>
 801a9a2:	45a2      	cmp	sl, r4
 801a9a4:	db1a      	blt.n	801a9dc <_strtol_l.isra.0+0xc4>
 801a9a6:	fb05 4503 	mla	r5, r5, r3, r4
 801a9aa:	2601      	movs	r6, #1
 801a9ac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801a9b0:	e7eb      	b.n	801a98a <_strtol_l.isra.0+0x72>
 801a9b2:	2c2b      	cmp	r4, #43	; 0x2b
 801a9b4:	bf08      	it	eq
 801a9b6:	f89e 4000 	ldrbeq.w	r4, [lr]
 801a9ba:	46a8      	mov	r8, r5
 801a9bc:	bf08      	it	eq
 801a9be:	f106 0e02 	addeq.w	lr, r6, #2
 801a9c2:	e7c7      	b.n	801a954 <_strtol_l.isra.0+0x3c>
 801a9c4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801a9c8:	2f19      	cmp	r7, #25
 801a9ca:	d801      	bhi.n	801a9d0 <_strtol_l.isra.0+0xb8>
 801a9cc:	3c37      	subs	r4, #55	; 0x37
 801a9ce:	e7e1      	b.n	801a994 <_strtol_l.isra.0+0x7c>
 801a9d0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801a9d4:	2f19      	cmp	r7, #25
 801a9d6:	d804      	bhi.n	801a9e2 <_strtol_l.isra.0+0xca>
 801a9d8:	3c57      	subs	r4, #87	; 0x57
 801a9da:	e7db      	b.n	801a994 <_strtol_l.isra.0+0x7c>
 801a9dc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801a9e0:	e7e4      	b.n	801a9ac <_strtol_l.isra.0+0x94>
 801a9e2:	2e00      	cmp	r6, #0
 801a9e4:	da05      	bge.n	801a9f2 <_strtol_l.isra.0+0xda>
 801a9e6:	2322      	movs	r3, #34	; 0x22
 801a9e8:	6003      	str	r3, [r0, #0]
 801a9ea:	4665      	mov	r5, ip
 801a9ec:	b942      	cbnz	r2, 801aa00 <_strtol_l.isra.0+0xe8>
 801a9ee:	4628      	mov	r0, r5
 801a9f0:	e79d      	b.n	801a92e <_strtol_l.isra.0+0x16>
 801a9f2:	f1b8 0f00 	cmp.w	r8, #0
 801a9f6:	d000      	beq.n	801a9fa <_strtol_l.isra.0+0xe2>
 801a9f8:	426d      	negs	r5, r5
 801a9fa:	2a00      	cmp	r2, #0
 801a9fc:	d0f7      	beq.n	801a9ee <_strtol_l.isra.0+0xd6>
 801a9fe:	b10e      	cbz	r6, 801aa04 <_strtol_l.isra.0+0xec>
 801aa00:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 801aa04:	6011      	str	r1, [r2, #0]
 801aa06:	e7f2      	b.n	801a9ee <_strtol_l.isra.0+0xd6>
 801aa08:	2430      	movs	r4, #48	; 0x30
 801aa0a:	2b00      	cmp	r3, #0
 801aa0c:	d1b3      	bne.n	801a976 <_strtol_l.isra.0+0x5e>
 801aa0e:	2308      	movs	r3, #8
 801aa10:	e7b1      	b.n	801a976 <_strtol_l.isra.0+0x5e>
 801aa12:	2c30      	cmp	r4, #48	; 0x30
 801aa14:	d0a4      	beq.n	801a960 <_strtol_l.isra.0+0x48>
 801aa16:	230a      	movs	r3, #10
 801aa18:	e7ad      	b.n	801a976 <_strtol_l.isra.0+0x5e>
 801aa1a:	bf00      	nop
 801aa1c:	08020a41 	.word	0x08020a41

0801aa20 <_strtol_r>:
 801aa20:	f7ff bf7a 	b.w	801a918 <_strtol_l.isra.0>

0801aa24 <_write_r>:
 801aa24:	b538      	push	{r3, r4, r5, lr}
 801aa26:	4d07      	ldr	r5, [pc, #28]	; (801aa44 <_write_r+0x20>)
 801aa28:	4604      	mov	r4, r0
 801aa2a:	4608      	mov	r0, r1
 801aa2c:	4611      	mov	r1, r2
 801aa2e:	2200      	movs	r2, #0
 801aa30:	602a      	str	r2, [r5, #0]
 801aa32:	461a      	mov	r2, r3
 801aa34:	f7f2 fab9 	bl	800cfaa <_write>
 801aa38:	1c43      	adds	r3, r0, #1
 801aa3a:	d102      	bne.n	801aa42 <_write_r+0x1e>
 801aa3c:	682b      	ldr	r3, [r5, #0]
 801aa3e:	b103      	cbz	r3, 801aa42 <_write_r+0x1e>
 801aa40:	6023      	str	r3, [r4, #0]
 801aa42:	bd38      	pop	{r3, r4, r5, pc}
 801aa44:	2000a50c 	.word	0x2000a50c

0801aa48 <_close_r>:
 801aa48:	b538      	push	{r3, r4, r5, lr}
 801aa4a:	4d06      	ldr	r5, [pc, #24]	; (801aa64 <_close_r+0x1c>)
 801aa4c:	2300      	movs	r3, #0
 801aa4e:	4604      	mov	r4, r0
 801aa50:	4608      	mov	r0, r1
 801aa52:	602b      	str	r3, [r5, #0]
 801aa54:	f7f2 fac5 	bl	800cfe2 <_close>
 801aa58:	1c43      	adds	r3, r0, #1
 801aa5a:	d102      	bne.n	801aa62 <_close_r+0x1a>
 801aa5c:	682b      	ldr	r3, [r5, #0]
 801aa5e:	b103      	cbz	r3, 801aa62 <_close_r+0x1a>
 801aa60:	6023      	str	r3, [r4, #0]
 801aa62:	bd38      	pop	{r3, r4, r5, pc}
 801aa64:	2000a50c 	.word	0x2000a50c

0801aa68 <quorem>:
 801aa68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa6c:	6903      	ldr	r3, [r0, #16]
 801aa6e:	690c      	ldr	r4, [r1, #16]
 801aa70:	42a3      	cmp	r3, r4
 801aa72:	4607      	mov	r7, r0
 801aa74:	f2c0 8081 	blt.w	801ab7a <quorem+0x112>
 801aa78:	3c01      	subs	r4, #1
 801aa7a:	f101 0814 	add.w	r8, r1, #20
 801aa7e:	f100 0514 	add.w	r5, r0, #20
 801aa82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801aa86:	9301      	str	r3, [sp, #4]
 801aa88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801aa8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801aa90:	3301      	adds	r3, #1
 801aa92:	429a      	cmp	r2, r3
 801aa94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801aa98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801aa9c:	fbb2 f6f3 	udiv	r6, r2, r3
 801aaa0:	d331      	bcc.n	801ab06 <quorem+0x9e>
 801aaa2:	f04f 0e00 	mov.w	lr, #0
 801aaa6:	4640      	mov	r0, r8
 801aaa8:	46ac      	mov	ip, r5
 801aaaa:	46f2      	mov	sl, lr
 801aaac:	f850 2b04 	ldr.w	r2, [r0], #4
 801aab0:	b293      	uxth	r3, r2
 801aab2:	fb06 e303 	mla	r3, r6, r3, lr
 801aab6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801aaba:	b29b      	uxth	r3, r3
 801aabc:	ebaa 0303 	sub.w	r3, sl, r3
 801aac0:	0c12      	lsrs	r2, r2, #16
 801aac2:	f8dc a000 	ldr.w	sl, [ip]
 801aac6:	fb06 e202 	mla	r2, r6, r2, lr
 801aaca:	fa13 f38a 	uxtah	r3, r3, sl
 801aace:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801aad2:	fa1f fa82 	uxth.w	sl, r2
 801aad6:	f8dc 2000 	ldr.w	r2, [ip]
 801aada:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801aade:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801aae2:	b29b      	uxth	r3, r3
 801aae4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801aae8:	4581      	cmp	r9, r0
 801aaea:	f84c 3b04 	str.w	r3, [ip], #4
 801aaee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801aaf2:	d2db      	bcs.n	801aaac <quorem+0x44>
 801aaf4:	f855 300b 	ldr.w	r3, [r5, fp]
 801aaf8:	b92b      	cbnz	r3, 801ab06 <quorem+0x9e>
 801aafa:	9b01      	ldr	r3, [sp, #4]
 801aafc:	3b04      	subs	r3, #4
 801aafe:	429d      	cmp	r5, r3
 801ab00:	461a      	mov	r2, r3
 801ab02:	d32e      	bcc.n	801ab62 <quorem+0xfa>
 801ab04:	613c      	str	r4, [r7, #16]
 801ab06:	4638      	mov	r0, r7
 801ab08:	f001 fc92 	bl	801c430 <__mcmp>
 801ab0c:	2800      	cmp	r0, #0
 801ab0e:	db24      	blt.n	801ab5a <quorem+0xf2>
 801ab10:	3601      	adds	r6, #1
 801ab12:	4628      	mov	r0, r5
 801ab14:	f04f 0c00 	mov.w	ip, #0
 801ab18:	f858 2b04 	ldr.w	r2, [r8], #4
 801ab1c:	f8d0 e000 	ldr.w	lr, [r0]
 801ab20:	b293      	uxth	r3, r2
 801ab22:	ebac 0303 	sub.w	r3, ip, r3
 801ab26:	0c12      	lsrs	r2, r2, #16
 801ab28:	fa13 f38e 	uxtah	r3, r3, lr
 801ab2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801ab30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ab34:	b29b      	uxth	r3, r3
 801ab36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ab3a:	45c1      	cmp	r9, r8
 801ab3c:	f840 3b04 	str.w	r3, [r0], #4
 801ab40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801ab44:	d2e8      	bcs.n	801ab18 <quorem+0xb0>
 801ab46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ab4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ab4e:	b922      	cbnz	r2, 801ab5a <quorem+0xf2>
 801ab50:	3b04      	subs	r3, #4
 801ab52:	429d      	cmp	r5, r3
 801ab54:	461a      	mov	r2, r3
 801ab56:	d30a      	bcc.n	801ab6e <quorem+0x106>
 801ab58:	613c      	str	r4, [r7, #16]
 801ab5a:	4630      	mov	r0, r6
 801ab5c:	b003      	add	sp, #12
 801ab5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab62:	6812      	ldr	r2, [r2, #0]
 801ab64:	3b04      	subs	r3, #4
 801ab66:	2a00      	cmp	r2, #0
 801ab68:	d1cc      	bne.n	801ab04 <quorem+0x9c>
 801ab6a:	3c01      	subs	r4, #1
 801ab6c:	e7c7      	b.n	801aafe <quorem+0x96>
 801ab6e:	6812      	ldr	r2, [r2, #0]
 801ab70:	3b04      	subs	r3, #4
 801ab72:	2a00      	cmp	r2, #0
 801ab74:	d1f0      	bne.n	801ab58 <quorem+0xf0>
 801ab76:	3c01      	subs	r4, #1
 801ab78:	e7eb      	b.n	801ab52 <quorem+0xea>
 801ab7a:	2000      	movs	r0, #0
 801ab7c:	e7ee      	b.n	801ab5c <quorem+0xf4>
	...

0801ab80 <_dtoa_r>:
 801ab80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab84:	ed2d 8b02 	vpush	{d8}
 801ab88:	ec57 6b10 	vmov	r6, r7, d0
 801ab8c:	b095      	sub	sp, #84	; 0x54
 801ab8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801ab90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801ab94:	9105      	str	r1, [sp, #20]
 801ab96:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801ab9a:	4604      	mov	r4, r0
 801ab9c:	9209      	str	r2, [sp, #36]	; 0x24
 801ab9e:	930f      	str	r3, [sp, #60]	; 0x3c
 801aba0:	b975      	cbnz	r5, 801abc0 <_dtoa_r+0x40>
 801aba2:	2010      	movs	r0, #16
 801aba4:	f7fe f84c 	bl	8018c40 <malloc>
 801aba8:	4602      	mov	r2, r0
 801abaa:	6260      	str	r0, [r4, #36]	; 0x24
 801abac:	b920      	cbnz	r0, 801abb8 <_dtoa_r+0x38>
 801abae:	4bb2      	ldr	r3, [pc, #712]	; (801ae78 <_dtoa_r+0x2f8>)
 801abb0:	21ea      	movs	r1, #234	; 0xea
 801abb2:	48b2      	ldr	r0, [pc, #712]	; (801ae7c <_dtoa_r+0x2fc>)
 801abb4:	f002 f808 	bl	801cbc8 <__assert_func>
 801abb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801abbc:	6005      	str	r5, [r0, #0]
 801abbe:	60c5      	str	r5, [r0, #12]
 801abc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801abc2:	6819      	ldr	r1, [r3, #0]
 801abc4:	b151      	cbz	r1, 801abdc <_dtoa_r+0x5c>
 801abc6:	685a      	ldr	r2, [r3, #4]
 801abc8:	604a      	str	r2, [r1, #4]
 801abca:	2301      	movs	r3, #1
 801abcc:	4093      	lsls	r3, r2
 801abce:	608b      	str	r3, [r1, #8]
 801abd0:	4620      	mov	r0, r4
 801abd2:	f001 f9a5 	bl	801bf20 <_Bfree>
 801abd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801abd8:	2200      	movs	r2, #0
 801abda:	601a      	str	r2, [r3, #0]
 801abdc:	1e3b      	subs	r3, r7, #0
 801abde:	bfb9      	ittee	lt
 801abe0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801abe4:	9303      	strlt	r3, [sp, #12]
 801abe6:	2300      	movge	r3, #0
 801abe8:	f8c8 3000 	strge.w	r3, [r8]
 801abec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801abf0:	4ba3      	ldr	r3, [pc, #652]	; (801ae80 <_dtoa_r+0x300>)
 801abf2:	bfbc      	itt	lt
 801abf4:	2201      	movlt	r2, #1
 801abf6:	f8c8 2000 	strlt.w	r2, [r8]
 801abfa:	ea33 0309 	bics.w	r3, r3, r9
 801abfe:	d11b      	bne.n	801ac38 <_dtoa_r+0xb8>
 801ac00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ac02:	f242 730f 	movw	r3, #9999	; 0x270f
 801ac06:	6013      	str	r3, [r2, #0]
 801ac08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ac0c:	4333      	orrs	r3, r6
 801ac0e:	f000 857a 	beq.w	801b706 <_dtoa_r+0xb86>
 801ac12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ac14:	b963      	cbnz	r3, 801ac30 <_dtoa_r+0xb0>
 801ac16:	4b9b      	ldr	r3, [pc, #620]	; (801ae84 <_dtoa_r+0x304>)
 801ac18:	e024      	b.n	801ac64 <_dtoa_r+0xe4>
 801ac1a:	4b9b      	ldr	r3, [pc, #620]	; (801ae88 <_dtoa_r+0x308>)
 801ac1c:	9300      	str	r3, [sp, #0]
 801ac1e:	3308      	adds	r3, #8
 801ac20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ac22:	6013      	str	r3, [r2, #0]
 801ac24:	9800      	ldr	r0, [sp, #0]
 801ac26:	b015      	add	sp, #84	; 0x54
 801ac28:	ecbd 8b02 	vpop	{d8}
 801ac2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac30:	4b94      	ldr	r3, [pc, #592]	; (801ae84 <_dtoa_r+0x304>)
 801ac32:	9300      	str	r3, [sp, #0]
 801ac34:	3303      	adds	r3, #3
 801ac36:	e7f3      	b.n	801ac20 <_dtoa_r+0xa0>
 801ac38:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ac3c:	2200      	movs	r2, #0
 801ac3e:	ec51 0b17 	vmov	r0, r1, d7
 801ac42:	2300      	movs	r3, #0
 801ac44:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801ac48:	f7e5 ff3e 	bl	8000ac8 <__aeabi_dcmpeq>
 801ac4c:	4680      	mov	r8, r0
 801ac4e:	b158      	cbz	r0, 801ac68 <_dtoa_r+0xe8>
 801ac50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ac52:	2301      	movs	r3, #1
 801ac54:	6013      	str	r3, [r2, #0]
 801ac56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	f000 8551 	beq.w	801b700 <_dtoa_r+0xb80>
 801ac5e:	488b      	ldr	r0, [pc, #556]	; (801ae8c <_dtoa_r+0x30c>)
 801ac60:	6018      	str	r0, [r3, #0]
 801ac62:	1e43      	subs	r3, r0, #1
 801ac64:	9300      	str	r3, [sp, #0]
 801ac66:	e7dd      	b.n	801ac24 <_dtoa_r+0xa4>
 801ac68:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801ac6c:	aa12      	add	r2, sp, #72	; 0x48
 801ac6e:	a913      	add	r1, sp, #76	; 0x4c
 801ac70:	4620      	mov	r0, r4
 801ac72:	f001 fcfd 	bl	801c670 <__d2b>
 801ac76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801ac7a:	4683      	mov	fp, r0
 801ac7c:	2d00      	cmp	r5, #0
 801ac7e:	d07c      	beq.n	801ad7a <_dtoa_r+0x1fa>
 801ac80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ac82:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801ac86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ac8a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801ac8e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801ac92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801ac96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801ac9a:	4b7d      	ldr	r3, [pc, #500]	; (801ae90 <_dtoa_r+0x310>)
 801ac9c:	2200      	movs	r2, #0
 801ac9e:	4630      	mov	r0, r6
 801aca0:	4639      	mov	r1, r7
 801aca2:	f7e5 faf1 	bl	8000288 <__aeabi_dsub>
 801aca6:	a36e      	add	r3, pc, #440	; (adr r3, 801ae60 <_dtoa_r+0x2e0>)
 801aca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acac:	f7e5 fca4 	bl	80005f8 <__aeabi_dmul>
 801acb0:	a36d      	add	r3, pc, #436	; (adr r3, 801ae68 <_dtoa_r+0x2e8>)
 801acb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acb6:	f7e5 fae9 	bl	800028c <__adddf3>
 801acba:	4606      	mov	r6, r0
 801acbc:	4628      	mov	r0, r5
 801acbe:	460f      	mov	r7, r1
 801acc0:	f7e5 fc30 	bl	8000524 <__aeabi_i2d>
 801acc4:	a36a      	add	r3, pc, #424	; (adr r3, 801ae70 <_dtoa_r+0x2f0>)
 801acc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acca:	f7e5 fc95 	bl	80005f8 <__aeabi_dmul>
 801acce:	4602      	mov	r2, r0
 801acd0:	460b      	mov	r3, r1
 801acd2:	4630      	mov	r0, r6
 801acd4:	4639      	mov	r1, r7
 801acd6:	f7e5 fad9 	bl	800028c <__adddf3>
 801acda:	4606      	mov	r6, r0
 801acdc:	460f      	mov	r7, r1
 801acde:	f7e5 ff3b 	bl	8000b58 <__aeabi_d2iz>
 801ace2:	2200      	movs	r2, #0
 801ace4:	4682      	mov	sl, r0
 801ace6:	2300      	movs	r3, #0
 801ace8:	4630      	mov	r0, r6
 801acea:	4639      	mov	r1, r7
 801acec:	f7e5 fef6 	bl	8000adc <__aeabi_dcmplt>
 801acf0:	b148      	cbz	r0, 801ad06 <_dtoa_r+0x186>
 801acf2:	4650      	mov	r0, sl
 801acf4:	f7e5 fc16 	bl	8000524 <__aeabi_i2d>
 801acf8:	4632      	mov	r2, r6
 801acfa:	463b      	mov	r3, r7
 801acfc:	f7e5 fee4 	bl	8000ac8 <__aeabi_dcmpeq>
 801ad00:	b908      	cbnz	r0, 801ad06 <_dtoa_r+0x186>
 801ad02:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801ad06:	f1ba 0f16 	cmp.w	sl, #22
 801ad0a:	d854      	bhi.n	801adb6 <_dtoa_r+0x236>
 801ad0c:	4b61      	ldr	r3, [pc, #388]	; (801ae94 <_dtoa_r+0x314>)
 801ad0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801ad12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ad1a:	f7e5 fedf 	bl	8000adc <__aeabi_dcmplt>
 801ad1e:	2800      	cmp	r0, #0
 801ad20:	d04b      	beq.n	801adba <_dtoa_r+0x23a>
 801ad22:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801ad26:	2300      	movs	r3, #0
 801ad28:	930e      	str	r3, [sp, #56]	; 0x38
 801ad2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ad2c:	1b5d      	subs	r5, r3, r5
 801ad2e:	1e6b      	subs	r3, r5, #1
 801ad30:	9304      	str	r3, [sp, #16]
 801ad32:	bf43      	ittte	mi
 801ad34:	2300      	movmi	r3, #0
 801ad36:	f1c5 0801 	rsbmi	r8, r5, #1
 801ad3a:	9304      	strmi	r3, [sp, #16]
 801ad3c:	f04f 0800 	movpl.w	r8, #0
 801ad40:	f1ba 0f00 	cmp.w	sl, #0
 801ad44:	db3b      	blt.n	801adbe <_dtoa_r+0x23e>
 801ad46:	9b04      	ldr	r3, [sp, #16]
 801ad48:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801ad4c:	4453      	add	r3, sl
 801ad4e:	9304      	str	r3, [sp, #16]
 801ad50:	2300      	movs	r3, #0
 801ad52:	9306      	str	r3, [sp, #24]
 801ad54:	9b05      	ldr	r3, [sp, #20]
 801ad56:	2b09      	cmp	r3, #9
 801ad58:	d869      	bhi.n	801ae2e <_dtoa_r+0x2ae>
 801ad5a:	2b05      	cmp	r3, #5
 801ad5c:	bfc4      	itt	gt
 801ad5e:	3b04      	subgt	r3, #4
 801ad60:	9305      	strgt	r3, [sp, #20]
 801ad62:	9b05      	ldr	r3, [sp, #20]
 801ad64:	f1a3 0302 	sub.w	r3, r3, #2
 801ad68:	bfcc      	ite	gt
 801ad6a:	2500      	movgt	r5, #0
 801ad6c:	2501      	movle	r5, #1
 801ad6e:	2b03      	cmp	r3, #3
 801ad70:	d869      	bhi.n	801ae46 <_dtoa_r+0x2c6>
 801ad72:	e8df f003 	tbb	[pc, r3]
 801ad76:	4e2c      	.short	0x4e2c
 801ad78:	5a4c      	.short	0x5a4c
 801ad7a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801ad7e:	441d      	add	r5, r3
 801ad80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801ad84:	2b20      	cmp	r3, #32
 801ad86:	bfc1      	itttt	gt
 801ad88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801ad8c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801ad90:	fa09 f303 	lslgt.w	r3, r9, r3
 801ad94:	fa26 f000 	lsrgt.w	r0, r6, r0
 801ad98:	bfda      	itte	le
 801ad9a:	f1c3 0320 	rsble	r3, r3, #32
 801ad9e:	fa06 f003 	lslle.w	r0, r6, r3
 801ada2:	4318      	orrgt	r0, r3
 801ada4:	f7e5 fbae 	bl	8000504 <__aeabi_ui2d>
 801ada8:	2301      	movs	r3, #1
 801adaa:	4606      	mov	r6, r0
 801adac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801adb0:	3d01      	subs	r5, #1
 801adb2:	9310      	str	r3, [sp, #64]	; 0x40
 801adb4:	e771      	b.n	801ac9a <_dtoa_r+0x11a>
 801adb6:	2301      	movs	r3, #1
 801adb8:	e7b6      	b.n	801ad28 <_dtoa_r+0x1a8>
 801adba:	900e      	str	r0, [sp, #56]	; 0x38
 801adbc:	e7b5      	b.n	801ad2a <_dtoa_r+0x1aa>
 801adbe:	f1ca 0300 	rsb	r3, sl, #0
 801adc2:	9306      	str	r3, [sp, #24]
 801adc4:	2300      	movs	r3, #0
 801adc6:	eba8 080a 	sub.w	r8, r8, sl
 801adca:	930d      	str	r3, [sp, #52]	; 0x34
 801adcc:	e7c2      	b.n	801ad54 <_dtoa_r+0x1d4>
 801adce:	2300      	movs	r3, #0
 801add0:	9308      	str	r3, [sp, #32]
 801add2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801add4:	2b00      	cmp	r3, #0
 801add6:	dc39      	bgt.n	801ae4c <_dtoa_r+0x2cc>
 801add8:	f04f 0901 	mov.w	r9, #1
 801addc:	f8cd 9004 	str.w	r9, [sp, #4]
 801ade0:	464b      	mov	r3, r9
 801ade2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801ade6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801ade8:	2200      	movs	r2, #0
 801adea:	6042      	str	r2, [r0, #4]
 801adec:	2204      	movs	r2, #4
 801adee:	f102 0614 	add.w	r6, r2, #20
 801adf2:	429e      	cmp	r6, r3
 801adf4:	6841      	ldr	r1, [r0, #4]
 801adf6:	d92f      	bls.n	801ae58 <_dtoa_r+0x2d8>
 801adf8:	4620      	mov	r0, r4
 801adfa:	f001 f851 	bl	801bea0 <_Balloc>
 801adfe:	9000      	str	r0, [sp, #0]
 801ae00:	2800      	cmp	r0, #0
 801ae02:	d14b      	bne.n	801ae9c <_dtoa_r+0x31c>
 801ae04:	4b24      	ldr	r3, [pc, #144]	; (801ae98 <_dtoa_r+0x318>)
 801ae06:	4602      	mov	r2, r0
 801ae08:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801ae0c:	e6d1      	b.n	801abb2 <_dtoa_r+0x32>
 801ae0e:	2301      	movs	r3, #1
 801ae10:	e7de      	b.n	801add0 <_dtoa_r+0x250>
 801ae12:	2300      	movs	r3, #0
 801ae14:	9308      	str	r3, [sp, #32]
 801ae16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae18:	eb0a 0903 	add.w	r9, sl, r3
 801ae1c:	f109 0301 	add.w	r3, r9, #1
 801ae20:	2b01      	cmp	r3, #1
 801ae22:	9301      	str	r3, [sp, #4]
 801ae24:	bfb8      	it	lt
 801ae26:	2301      	movlt	r3, #1
 801ae28:	e7dd      	b.n	801ade6 <_dtoa_r+0x266>
 801ae2a:	2301      	movs	r3, #1
 801ae2c:	e7f2      	b.n	801ae14 <_dtoa_r+0x294>
 801ae2e:	2501      	movs	r5, #1
 801ae30:	2300      	movs	r3, #0
 801ae32:	9305      	str	r3, [sp, #20]
 801ae34:	9508      	str	r5, [sp, #32]
 801ae36:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801ae3a:	2200      	movs	r2, #0
 801ae3c:	f8cd 9004 	str.w	r9, [sp, #4]
 801ae40:	2312      	movs	r3, #18
 801ae42:	9209      	str	r2, [sp, #36]	; 0x24
 801ae44:	e7cf      	b.n	801ade6 <_dtoa_r+0x266>
 801ae46:	2301      	movs	r3, #1
 801ae48:	9308      	str	r3, [sp, #32]
 801ae4a:	e7f4      	b.n	801ae36 <_dtoa_r+0x2b6>
 801ae4c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801ae50:	f8cd 9004 	str.w	r9, [sp, #4]
 801ae54:	464b      	mov	r3, r9
 801ae56:	e7c6      	b.n	801ade6 <_dtoa_r+0x266>
 801ae58:	3101      	adds	r1, #1
 801ae5a:	6041      	str	r1, [r0, #4]
 801ae5c:	0052      	lsls	r2, r2, #1
 801ae5e:	e7c6      	b.n	801adee <_dtoa_r+0x26e>
 801ae60:	636f4361 	.word	0x636f4361
 801ae64:	3fd287a7 	.word	0x3fd287a7
 801ae68:	8b60c8b3 	.word	0x8b60c8b3
 801ae6c:	3fc68a28 	.word	0x3fc68a28
 801ae70:	509f79fb 	.word	0x509f79fb
 801ae74:	3fd34413 	.word	0x3fd34413
 801ae78:	08020b4e 	.word	0x08020b4e
 801ae7c:	08020b65 	.word	0x08020b65
 801ae80:	7ff00000 	.word	0x7ff00000
 801ae84:	08020b4a 	.word	0x08020b4a
 801ae88:	08020b41 	.word	0x08020b41
 801ae8c:	080209c1 	.word	0x080209c1
 801ae90:	3ff80000 	.word	0x3ff80000
 801ae94:	08020ce0 	.word	0x08020ce0
 801ae98:	08020bc4 	.word	0x08020bc4
 801ae9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ae9e:	9a00      	ldr	r2, [sp, #0]
 801aea0:	601a      	str	r2, [r3, #0]
 801aea2:	9b01      	ldr	r3, [sp, #4]
 801aea4:	2b0e      	cmp	r3, #14
 801aea6:	f200 80ad 	bhi.w	801b004 <_dtoa_r+0x484>
 801aeaa:	2d00      	cmp	r5, #0
 801aeac:	f000 80aa 	beq.w	801b004 <_dtoa_r+0x484>
 801aeb0:	f1ba 0f00 	cmp.w	sl, #0
 801aeb4:	dd36      	ble.n	801af24 <_dtoa_r+0x3a4>
 801aeb6:	4ac3      	ldr	r2, [pc, #780]	; (801b1c4 <_dtoa_r+0x644>)
 801aeb8:	f00a 030f 	and.w	r3, sl, #15
 801aebc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801aec0:	ed93 7b00 	vldr	d7, [r3]
 801aec4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801aec8:	ea4f 172a 	mov.w	r7, sl, asr #4
 801aecc:	eeb0 8a47 	vmov.f32	s16, s14
 801aed0:	eef0 8a67 	vmov.f32	s17, s15
 801aed4:	d016      	beq.n	801af04 <_dtoa_r+0x384>
 801aed6:	4bbc      	ldr	r3, [pc, #752]	; (801b1c8 <_dtoa_r+0x648>)
 801aed8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801aedc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801aee0:	f7e5 fcb4 	bl	800084c <__aeabi_ddiv>
 801aee4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801aee8:	f007 070f 	and.w	r7, r7, #15
 801aeec:	2503      	movs	r5, #3
 801aeee:	4eb6      	ldr	r6, [pc, #728]	; (801b1c8 <_dtoa_r+0x648>)
 801aef0:	b957      	cbnz	r7, 801af08 <_dtoa_r+0x388>
 801aef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801aef6:	ec53 2b18 	vmov	r2, r3, d8
 801aefa:	f7e5 fca7 	bl	800084c <__aeabi_ddiv>
 801aefe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801af02:	e029      	b.n	801af58 <_dtoa_r+0x3d8>
 801af04:	2502      	movs	r5, #2
 801af06:	e7f2      	b.n	801aeee <_dtoa_r+0x36e>
 801af08:	07f9      	lsls	r1, r7, #31
 801af0a:	d508      	bpl.n	801af1e <_dtoa_r+0x39e>
 801af0c:	ec51 0b18 	vmov	r0, r1, d8
 801af10:	e9d6 2300 	ldrd	r2, r3, [r6]
 801af14:	f7e5 fb70 	bl	80005f8 <__aeabi_dmul>
 801af18:	ec41 0b18 	vmov	d8, r0, r1
 801af1c:	3501      	adds	r5, #1
 801af1e:	107f      	asrs	r7, r7, #1
 801af20:	3608      	adds	r6, #8
 801af22:	e7e5      	b.n	801aef0 <_dtoa_r+0x370>
 801af24:	f000 80a6 	beq.w	801b074 <_dtoa_r+0x4f4>
 801af28:	f1ca 0600 	rsb	r6, sl, #0
 801af2c:	4ba5      	ldr	r3, [pc, #660]	; (801b1c4 <_dtoa_r+0x644>)
 801af2e:	4fa6      	ldr	r7, [pc, #664]	; (801b1c8 <_dtoa_r+0x648>)
 801af30:	f006 020f 	and.w	r2, r6, #15
 801af34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801af38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801af40:	f7e5 fb5a 	bl	80005f8 <__aeabi_dmul>
 801af44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801af48:	1136      	asrs	r6, r6, #4
 801af4a:	2300      	movs	r3, #0
 801af4c:	2502      	movs	r5, #2
 801af4e:	2e00      	cmp	r6, #0
 801af50:	f040 8085 	bne.w	801b05e <_dtoa_r+0x4de>
 801af54:	2b00      	cmp	r3, #0
 801af56:	d1d2      	bne.n	801aefe <_dtoa_r+0x37e>
 801af58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801af5a:	2b00      	cmp	r3, #0
 801af5c:	f000 808c 	beq.w	801b078 <_dtoa_r+0x4f8>
 801af60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801af64:	4b99      	ldr	r3, [pc, #612]	; (801b1cc <_dtoa_r+0x64c>)
 801af66:	2200      	movs	r2, #0
 801af68:	4630      	mov	r0, r6
 801af6a:	4639      	mov	r1, r7
 801af6c:	f7e5 fdb6 	bl	8000adc <__aeabi_dcmplt>
 801af70:	2800      	cmp	r0, #0
 801af72:	f000 8081 	beq.w	801b078 <_dtoa_r+0x4f8>
 801af76:	9b01      	ldr	r3, [sp, #4]
 801af78:	2b00      	cmp	r3, #0
 801af7a:	d07d      	beq.n	801b078 <_dtoa_r+0x4f8>
 801af7c:	f1b9 0f00 	cmp.w	r9, #0
 801af80:	dd3c      	ble.n	801affc <_dtoa_r+0x47c>
 801af82:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801af86:	9307      	str	r3, [sp, #28]
 801af88:	2200      	movs	r2, #0
 801af8a:	4b91      	ldr	r3, [pc, #580]	; (801b1d0 <_dtoa_r+0x650>)
 801af8c:	4630      	mov	r0, r6
 801af8e:	4639      	mov	r1, r7
 801af90:	f7e5 fb32 	bl	80005f8 <__aeabi_dmul>
 801af94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801af98:	3501      	adds	r5, #1
 801af9a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801af9e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801afa2:	4628      	mov	r0, r5
 801afa4:	f7e5 fabe 	bl	8000524 <__aeabi_i2d>
 801afa8:	4632      	mov	r2, r6
 801afaa:	463b      	mov	r3, r7
 801afac:	f7e5 fb24 	bl	80005f8 <__aeabi_dmul>
 801afb0:	4b88      	ldr	r3, [pc, #544]	; (801b1d4 <_dtoa_r+0x654>)
 801afb2:	2200      	movs	r2, #0
 801afb4:	f7e5 f96a 	bl	800028c <__adddf3>
 801afb8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801afbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801afc0:	9303      	str	r3, [sp, #12]
 801afc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801afc4:	2b00      	cmp	r3, #0
 801afc6:	d15c      	bne.n	801b082 <_dtoa_r+0x502>
 801afc8:	4b83      	ldr	r3, [pc, #524]	; (801b1d8 <_dtoa_r+0x658>)
 801afca:	2200      	movs	r2, #0
 801afcc:	4630      	mov	r0, r6
 801afce:	4639      	mov	r1, r7
 801afd0:	f7e5 f95a 	bl	8000288 <__aeabi_dsub>
 801afd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801afd8:	4606      	mov	r6, r0
 801afda:	460f      	mov	r7, r1
 801afdc:	f7e5 fd9c 	bl	8000b18 <__aeabi_dcmpgt>
 801afe0:	2800      	cmp	r0, #0
 801afe2:	f040 8296 	bne.w	801b512 <_dtoa_r+0x992>
 801afe6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801afea:	4630      	mov	r0, r6
 801afec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801aff0:	4639      	mov	r1, r7
 801aff2:	f7e5 fd73 	bl	8000adc <__aeabi_dcmplt>
 801aff6:	2800      	cmp	r0, #0
 801aff8:	f040 8288 	bne.w	801b50c <_dtoa_r+0x98c>
 801affc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801b000:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b004:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b006:	2b00      	cmp	r3, #0
 801b008:	f2c0 8158 	blt.w	801b2bc <_dtoa_r+0x73c>
 801b00c:	f1ba 0f0e 	cmp.w	sl, #14
 801b010:	f300 8154 	bgt.w	801b2bc <_dtoa_r+0x73c>
 801b014:	4b6b      	ldr	r3, [pc, #428]	; (801b1c4 <_dtoa_r+0x644>)
 801b016:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801b01a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b01e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b020:	2b00      	cmp	r3, #0
 801b022:	f280 80e3 	bge.w	801b1ec <_dtoa_r+0x66c>
 801b026:	9b01      	ldr	r3, [sp, #4]
 801b028:	2b00      	cmp	r3, #0
 801b02a:	f300 80df 	bgt.w	801b1ec <_dtoa_r+0x66c>
 801b02e:	f040 826d 	bne.w	801b50c <_dtoa_r+0x98c>
 801b032:	4b69      	ldr	r3, [pc, #420]	; (801b1d8 <_dtoa_r+0x658>)
 801b034:	2200      	movs	r2, #0
 801b036:	4640      	mov	r0, r8
 801b038:	4649      	mov	r1, r9
 801b03a:	f7e5 fadd 	bl	80005f8 <__aeabi_dmul>
 801b03e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b042:	f7e5 fd5f 	bl	8000b04 <__aeabi_dcmpge>
 801b046:	9e01      	ldr	r6, [sp, #4]
 801b048:	4637      	mov	r7, r6
 801b04a:	2800      	cmp	r0, #0
 801b04c:	f040 8243 	bne.w	801b4d6 <_dtoa_r+0x956>
 801b050:	9d00      	ldr	r5, [sp, #0]
 801b052:	2331      	movs	r3, #49	; 0x31
 801b054:	f805 3b01 	strb.w	r3, [r5], #1
 801b058:	f10a 0a01 	add.w	sl, sl, #1
 801b05c:	e23f      	b.n	801b4de <_dtoa_r+0x95e>
 801b05e:	07f2      	lsls	r2, r6, #31
 801b060:	d505      	bpl.n	801b06e <_dtoa_r+0x4ee>
 801b062:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b066:	f7e5 fac7 	bl	80005f8 <__aeabi_dmul>
 801b06a:	3501      	adds	r5, #1
 801b06c:	2301      	movs	r3, #1
 801b06e:	1076      	asrs	r6, r6, #1
 801b070:	3708      	adds	r7, #8
 801b072:	e76c      	b.n	801af4e <_dtoa_r+0x3ce>
 801b074:	2502      	movs	r5, #2
 801b076:	e76f      	b.n	801af58 <_dtoa_r+0x3d8>
 801b078:	9b01      	ldr	r3, [sp, #4]
 801b07a:	f8cd a01c 	str.w	sl, [sp, #28]
 801b07e:	930c      	str	r3, [sp, #48]	; 0x30
 801b080:	e78d      	b.n	801af9e <_dtoa_r+0x41e>
 801b082:	9900      	ldr	r1, [sp, #0]
 801b084:	980c      	ldr	r0, [sp, #48]	; 0x30
 801b086:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b088:	4b4e      	ldr	r3, [pc, #312]	; (801b1c4 <_dtoa_r+0x644>)
 801b08a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b08e:	4401      	add	r1, r0
 801b090:	9102      	str	r1, [sp, #8]
 801b092:	9908      	ldr	r1, [sp, #32]
 801b094:	eeb0 8a47 	vmov.f32	s16, s14
 801b098:	eef0 8a67 	vmov.f32	s17, s15
 801b09c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b0a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801b0a4:	2900      	cmp	r1, #0
 801b0a6:	d045      	beq.n	801b134 <_dtoa_r+0x5b4>
 801b0a8:	494c      	ldr	r1, [pc, #304]	; (801b1dc <_dtoa_r+0x65c>)
 801b0aa:	2000      	movs	r0, #0
 801b0ac:	f7e5 fbce 	bl	800084c <__aeabi_ddiv>
 801b0b0:	ec53 2b18 	vmov	r2, r3, d8
 801b0b4:	f7e5 f8e8 	bl	8000288 <__aeabi_dsub>
 801b0b8:	9d00      	ldr	r5, [sp, #0]
 801b0ba:	ec41 0b18 	vmov	d8, r0, r1
 801b0be:	4639      	mov	r1, r7
 801b0c0:	4630      	mov	r0, r6
 801b0c2:	f7e5 fd49 	bl	8000b58 <__aeabi_d2iz>
 801b0c6:	900c      	str	r0, [sp, #48]	; 0x30
 801b0c8:	f7e5 fa2c 	bl	8000524 <__aeabi_i2d>
 801b0cc:	4602      	mov	r2, r0
 801b0ce:	460b      	mov	r3, r1
 801b0d0:	4630      	mov	r0, r6
 801b0d2:	4639      	mov	r1, r7
 801b0d4:	f7e5 f8d8 	bl	8000288 <__aeabi_dsub>
 801b0d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b0da:	3330      	adds	r3, #48	; 0x30
 801b0dc:	f805 3b01 	strb.w	r3, [r5], #1
 801b0e0:	ec53 2b18 	vmov	r2, r3, d8
 801b0e4:	4606      	mov	r6, r0
 801b0e6:	460f      	mov	r7, r1
 801b0e8:	f7e5 fcf8 	bl	8000adc <__aeabi_dcmplt>
 801b0ec:	2800      	cmp	r0, #0
 801b0ee:	d165      	bne.n	801b1bc <_dtoa_r+0x63c>
 801b0f0:	4632      	mov	r2, r6
 801b0f2:	463b      	mov	r3, r7
 801b0f4:	4935      	ldr	r1, [pc, #212]	; (801b1cc <_dtoa_r+0x64c>)
 801b0f6:	2000      	movs	r0, #0
 801b0f8:	f7e5 f8c6 	bl	8000288 <__aeabi_dsub>
 801b0fc:	ec53 2b18 	vmov	r2, r3, d8
 801b100:	f7e5 fcec 	bl	8000adc <__aeabi_dcmplt>
 801b104:	2800      	cmp	r0, #0
 801b106:	f040 80b9 	bne.w	801b27c <_dtoa_r+0x6fc>
 801b10a:	9b02      	ldr	r3, [sp, #8]
 801b10c:	429d      	cmp	r5, r3
 801b10e:	f43f af75 	beq.w	801affc <_dtoa_r+0x47c>
 801b112:	4b2f      	ldr	r3, [pc, #188]	; (801b1d0 <_dtoa_r+0x650>)
 801b114:	ec51 0b18 	vmov	r0, r1, d8
 801b118:	2200      	movs	r2, #0
 801b11a:	f7e5 fa6d 	bl	80005f8 <__aeabi_dmul>
 801b11e:	4b2c      	ldr	r3, [pc, #176]	; (801b1d0 <_dtoa_r+0x650>)
 801b120:	ec41 0b18 	vmov	d8, r0, r1
 801b124:	2200      	movs	r2, #0
 801b126:	4630      	mov	r0, r6
 801b128:	4639      	mov	r1, r7
 801b12a:	f7e5 fa65 	bl	80005f8 <__aeabi_dmul>
 801b12e:	4606      	mov	r6, r0
 801b130:	460f      	mov	r7, r1
 801b132:	e7c4      	b.n	801b0be <_dtoa_r+0x53e>
 801b134:	ec51 0b17 	vmov	r0, r1, d7
 801b138:	f7e5 fa5e 	bl	80005f8 <__aeabi_dmul>
 801b13c:	9b02      	ldr	r3, [sp, #8]
 801b13e:	9d00      	ldr	r5, [sp, #0]
 801b140:	930c      	str	r3, [sp, #48]	; 0x30
 801b142:	ec41 0b18 	vmov	d8, r0, r1
 801b146:	4639      	mov	r1, r7
 801b148:	4630      	mov	r0, r6
 801b14a:	f7e5 fd05 	bl	8000b58 <__aeabi_d2iz>
 801b14e:	9011      	str	r0, [sp, #68]	; 0x44
 801b150:	f7e5 f9e8 	bl	8000524 <__aeabi_i2d>
 801b154:	4602      	mov	r2, r0
 801b156:	460b      	mov	r3, r1
 801b158:	4630      	mov	r0, r6
 801b15a:	4639      	mov	r1, r7
 801b15c:	f7e5 f894 	bl	8000288 <__aeabi_dsub>
 801b160:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b162:	3330      	adds	r3, #48	; 0x30
 801b164:	f805 3b01 	strb.w	r3, [r5], #1
 801b168:	9b02      	ldr	r3, [sp, #8]
 801b16a:	429d      	cmp	r5, r3
 801b16c:	4606      	mov	r6, r0
 801b16e:	460f      	mov	r7, r1
 801b170:	f04f 0200 	mov.w	r2, #0
 801b174:	d134      	bne.n	801b1e0 <_dtoa_r+0x660>
 801b176:	4b19      	ldr	r3, [pc, #100]	; (801b1dc <_dtoa_r+0x65c>)
 801b178:	ec51 0b18 	vmov	r0, r1, d8
 801b17c:	f7e5 f886 	bl	800028c <__adddf3>
 801b180:	4602      	mov	r2, r0
 801b182:	460b      	mov	r3, r1
 801b184:	4630      	mov	r0, r6
 801b186:	4639      	mov	r1, r7
 801b188:	f7e5 fcc6 	bl	8000b18 <__aeabi_dcmpgt>
 801b18c:	2800      	cmp	r0, #0
 801b18e:	d175      	bne.n	801b27c <_dtoa_r+0x6fc>
 801b190:	ec53 2b18 	vmov	r2, r3, d8
 801b194:	4911      	ldr	r1, [pc, #68]	; (801b1dc <_dtoa_r+0x65c>)
 801b196:	2000      	movs	r0, #0
 801b198:	f7e5 f876 	bl	8000288 <__aeabi_dsub>
 801b19c:	4602      	mov	r2, r0
 801b19e:	460b      	mov	r3, r1
 801b1a0:	4630      	mov	r0, r6
 801b1a2:	4639      	mov	r1, r7
 801b1a4:	f7e5 fc9a 	bl	8000adc <__aeabi_dcmplt>
 801b1a8:	2800      	cmp	r0, #0
 801b1aa:	f43f af27 	beq.w	801affc <_dtoa_r+0x47c>
 801b1ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b1b0:	1e6b      	subs	r3, r5, #1
 801b1b2:	930c      	str	r3, [sp, #48]	; 0x30
 801b1b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801b1b8:	2b30      	cmp	r3, #48	; 0x30
 801b1ba:	d0f8      	beq.n	801b1ae <_dtoa_r+0x62e>
 801b1bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801b1c0:	e04a      	b.n	801b258 <_dtoa_r+0x6d8>
 801b1c2:	bf00      	nop
 801b1c4:	08020ce0 	.word	0x08020ce0
 801b1c8:	08020cb8 	.word	0x08020cb8
 801b1cc:	3ff00000 	.word	0x3ff00000
 801b1d0:	40240000 	.word	0x40240000
 801b1d4:	401c0000 	.word	0x401c0000
 801b1d8:	40140000 	.word	0x40140000
 801b1dc:	3fe00000 	.word	0x3fe00000
 801b1e0:	4baf      	ldr	r3, [pc, #700]	; (801b4a0 <_dtoa_r+0x920>)
 801b1e2:	f7e5 fa09 	bl	80005f8 <__aeabi_dmul>
 801b1e6:	4606      	mov	r6, r0
 801b1e8:	460f      	mov	r7, r1
 801b1ea:	e7ac      	b.n	801b146 <_dtoa_r+0x5c6>
 801b1ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801b1f0:	9d00      	ldr	r5, [sp, #0]
 801b1f2:	4642      	mov	r2, r8
 801b1f4:	464b      	mov	r3, r9
 801b1f6:	4630      	mov	r0, r6
 801b1f8:	4639      	mov	r1, r7
 801b1fa:	f7e5 fb27 	bl	800084c <__aeabi_ddiv>
 801b1fe:	f7e5 fcab 	bl	8000b58 <__aeabi_d2iz>
 801b202:	9002      	str	r0, [sp, #8]
 801b204:	f7e5 f98e 	bl	8000524 <__aeabi_i2d>
 801b208:	4642      	mov	r2, r8
 801b20a:	464b      	mov	r3, r9
 801b20c:	f7e5 f9f4 	bl	80005f8 <__aeabi_dmul>
 801b210:	4602      	mov	r2, r0
 801b212:	460b      	mov	r3, r1
 801b214:	4630      	mov	r0, r6
 801b216:	4639      	mov	r1, r7
 801b218:	f7e5 f836 	bl	8000288 <__aeabi_dsub>
 801b21c:	9e02      	ldr	r6, [sp, #8]
 801b21e:	9f01      	ldr	r7, [sp, #4]
 801b220:	3630      	adds	r6, #48	; 0x30
 801b222:	f805 6b01 	strb.w	r6, [r5], #1
 801b226:	9e00      	ldr	r6, [sp, #0]
 801b228:	1bae      	subs	r6, r5, r6
 801b22a:	42b7      	cmp	r7, r6
 801b22c:	4602      	mov	r2, r0
 801b22e:	460b      	mov	r3, r1
 801b230:	d137      	bne.n	801b2a2 <_dtoa_r+0x722>
 801b232:	f7e5 f82b 	bl	800028c <__adddf3>
 801b236:	4642      	mov	r2, r8
 801b238:	464b      	mov	r3, r9
 801b23a:	4606      	mov	r6, r0
 801b23c:	460f      	mov	r7, r1
 801b23e:	f7e5 fc6b 	bl	8000b18 <__aeabi_dcmpgt>
 801b242:	b9c8      	cbnz	r0, 801b278 <_dtoa_r+0x6f8>
 801b244:	4642      	mov	r2, r8
 801b246:	464b      	mov	r3, r9
 801b248:	4630      	mov	r0, r6
 801b24a:	4639      	mov	r1, r7
 801b24c:	f7e5 fc3c 	bl	8000ac8 <__aeabi_dcmpeq>
 801b250:	b110      	cbz	r0, 801b258 <_dtoa_r+0x6d8>
 801b252:	9b02      	ldr	r3, [sp, #8]
 801b254:	07d9      	lsls	r1, r3, #31
 801b256:	d40f      	bmi.n	801b278 <_dtoa_r+0x6f8>
 801b258:	4620      	mov	r0, r4
 801b25a:	4659      	mov	r1, fp
 801b25c:	f000 fe60 	bl	801bf20 <_Bfree>
 801b260:	2300      	movs	r3, #0
 801b262:	702b      	strb	r3, [r5, #0]
 801b264:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b266:	f10a 0001 	add.w	r0, sl, #1
 801b26a:	6018      	str	r0, [r3, #0]
 801b26c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b26e:	2b00      	cmp	r3, #0
 801b270:	f43f acd8 	beq.w	801ac24 <_dtoa_r+0xa4>
 801b274:	601d      	str	r5, [r3, #0]
 801b276:	e4d5      	b.n	801ac24 <_dtoa_r+0xa4>
 801b278:	f8cd a01c 	str.w	sl, [sp, #28]
 801b27c:	462b      	mov	r3, r5
 801b27e:	461d      	mov	r5, r3
 801b280:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b284:	2a39      	cmp	r2, #57	; 0x39
 801b286:	d108      	bne.n	801b29a <_dtoa_r+0x71a>
 801b288:	9a00      	ldr	r2, [sp, #0]
 801b28a:	429a      	cmp	r2, r3
 801b28c:	d1f7      	bne.n	801b27e <_dtoa_r+0x6fe>
 801b28e:	9a07      	ldr	r2, [sp, #28]
 801b290:	9900      	ldr	r1, [sp, #0]
 801b292:	3201      	adds	r2, #1
 801b294:	9207      	str	r2, [sp, #28]
 801b296:	2230      	movs	r2, #48	; 0x30
 801b298:	700a      	strb	r2, [r1, #0]
 801b29a:	781a      	ldrb	r2, [r3, #0]
 801b29c:	3201      	adds	r2, #1
 801b29e:	701a      	strb	r2, [r3, #0]
 801b2a0:	e78c      	b.n	801b1bc <_dtoa_r+0x63c>
 801b2a2:	4b7f      	ldr	r3, [pc, #508]	; (801b4a0 <_dtoa_r+0x920>)
 801b2a4:	2200      	movs	r2, #0
 801b2a6:	f7e5 f9a7 	bl	80005f8 <__aeabi_dmul>
 801b2aa:	2200      	movs	r2, #0
 801b2ac:	2300      	movs	r3, #0
 801b2ae:	4606      	mov	r6, r0
 801b2b0:	460f      	mov	r7, r1
 801b2b2:	f7e5 fc09 	bl	8000ac8 <__aeabi_dcmpeq>
 801b2b6:	2800      	cmp	r0, #0
 801b2b8:	d09b      	beq.n	801b1f2 <_dtoa_r+0x672>
 801b2ba:	e7cd      	b.n	801b258 <_dtoa_r+0x6d8>
 801b2bc:	9a08      	ldr	r2, [sp, #32]
 801b2be:	2a00      	cmp	r2, #0
 801b2c0:	f000 80c4 	beq.w	801b44c <_dtoa_r+0x8cc>
 801b2c4:	9a05      	ldr	r2, [sp, #20]
 801b2c6:	2a01      	cmp	r2, #1
 801b2c8:	f300 80a8 	bgt.w	801b41c <_dtoa_r+0x89c>
 801b2cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b2ce:	2a00      	cmp	r2, #0
 801b2d0:	f000 80a0 	beq.w	801b414 <_dtoa_r+0x894>
 801b2d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801b2d8:	9e06      	ldr	r6, [sp, #24]
 801b2da:	4645      	mov	r5, r8
 801b2dc:	9a04      	ldr	r2, [sp, #16]
 801b2de:	2101      	movs	r1, #1
 801b2e0:	441a      	add	r2, r3
 801b2e2:	4620      	mov	r0, r4
 801b2e4:	4498      	add	r8, r3
 801b2e6:	9204      	str	r2, [sp, #16]
 801b2e8:	f000 ff20 	bl	801c12c <__i2b>
 801b2ec:	4607      	mov	r7, r0
 801b2ee:	2d00      	cmp	r5, #0
 801b2f0:	dd0b      	ble.n	801b30a <_dtoa_r+0x78a>
 801b2f2:	9b04      	ldr	r3, [sp, #16]
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	dd08      	ble.n	801b30a <_dtoa_r+0x78a>
 801b2f8:	42ab      	cmp	r3, r5
 801b2fa:	9a04      	ldr	r2, [sp, #16]
 801b2fc:	bfa8      	it	ge
 801b2fe:	462b      	movge	r3, r5
 801b300:	eba8 0803 	sub.w	r8, r8, r3
 801b304:	1aed      	subs	r5, r5, r3
 801b306:	1ad3      	subs	r3, r2, r3
 801b308:	9304      	str	r3, [sp, #16]
 801b30a:	9b06      	ldr	r3, [sp, #24]
 801b30c:	b1fb      	cbz	r3, 801b34e <_dtoa_r+0x7ce>
 801b30e:	9b08      	ldr	r3, [sp, #32]
 801b310:	2b00      	cmp	r3, #0
 801b312:	f000 809f 	beq.w	801b454 <_dtoa_r+0x8d4>
 801b316:	2e00      	cmp	r6, #0
 801b318:	dd11      	ble.n	801b33e <_dtoa_r+0x7be>
 801b31a:	4639      	mov	r1, r7
 801b31c:	4632      	mov	r2, r6
 801b31e:	4620      	mov	r0, r4
 801b320:	f000 ffc0 	bl	801c2a4 <__pow5mult>
 801b324:	465a      	mov	r2, fp
 801b326:	4601      	mov	r1, r0
 801b328:	4607      	mov	r7, r0
 801b32a:	4620      	mov	r0, r4
 801b32c:	f000 ff14 	bl	801c158 <__multiply>
 801b330:	4659      	mov	r1, fp
 801b332:	9007      	str	r0, [sp, #28]
 801b334:	4620      	mov	r0, r4
 801b336:	f000 fdf3 	bl	801bf20 <_Bfree>
 801b33a:	9b07      	ldr	r3, [sp, #28]
 801b33c:	469b      	mov	fp, r3
 801b33e:	9b06      	ldr	r3, [sp, #24]
 801b340:	1b9a      	subs	r2, r3, r6
 801b342:	d004      	beq.n	801b34e <_dtoa_r+0x7ce>
 801b344:	4659      	mov	r1, fp
 801b346:	4620      	mov	r0, r4
 801b348:	f000 ffac 	bl	801c2a4 <__pow5mult>
 801b34c:	4683      	mov	fp, r0
 801b34e:	2101      	movs	r1, #1
 801b350:	4620      	mov	r0, r4
 801b352:	f000 feeb 	bl	801c12c <__i2b>
 801b356:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b358:	2b00      	cmp	r3, #0
 801b35a:	4606      	mov	r6, r0
 801b35c:	dd7c      	ble.n	801b458 <_dtoa_r+0x8d8>
 801b35e:	461a      	mov	r2, r3
 801b360:	4601      	mov	r1, r0
 801b362:	4620      	mov	r0, r4
 801b364:	f000 ff9e 	bl	801c2a4 <__pow5mult>
 801b368:	9b05      	ldr	r3, [sp, #20]
 801b36a:	2b01      	cmp	r3, #1
 801b36c:	4606      	mov	r6, r0
 801b36e:	dd76      	ble.n	801b45e <_dtoa_r+0x8de>
 801b370:	2300      	movs	r3, #0
 801b372:	9306      	str	r3, [sp, #24]
 801b374:	6933      	ldr	r3, [r6, #16]
 801b376:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801b37a:	6918      	ldr	r0, [r3, #16]
 801b37c:	f000 fe86 	bl	801c08c <__hi0bits>
 801b380:	f1c0 0020 	rsb	r0, r0, #32
 801b384:	9b04      	ldr	r3, [sp, #16]
 801b386:	4418      	add	r0, r3
 801b388:	f010 001f 	ands.w	r0, r0, #31
 801b38c:	f000 8086 	beq.w	801b49c <_dtoa_r+0x91c>
 801b390:	f1c0 0320 	rsb	r3, r0, #32
 801b394:	2b04      	cmp	r3, #4
 801b396:	dd7f      	ble.n	801b498 <_dtoa_r+0x918>
 801b398:	f1c0 001c 	rsb	r0, r0, #28
 801b39c:	9b04      	ldr	r3, [sp, #16]
 801b39e:	4403      	add	r3, r0
 801b3a0:	4480      	add	r8, r0
 801b3a2:	4405      	add	r5, r0
 801b3a4:	9304      	str	r3, [sp, #16]
 801b3a6:	f1b8 0f00 	cmp.w	r8, #0
 801b3aa:	dd05      	ble.n	801b3b8 <_dtoa_r+0x838>
 801b3ac:	4659      	mov	r1, fp
 801b3ae:	4642      	mov	r2, r8
 801b3b0:	4620      	mov	r0, r4
 801b3b2:	f000 ffd1 	bl	801c358 <__lshift>
 801b3b6:	4683      	mov	fp, r0
 801b3b8:	9b04      	ldr	r3, [sp, #16]
 801b3ba:	2b00      	cmp	r3, #0
 801b3bc:	dd05      	ble.n	801b3ca <_dtoa_r+0x84a>
 801b3be:	4631      	mov	r1, r6
 801b3c0:	461a      	mov	r2, r3
 801b3c2:	4620      	mov	r0, r4
 801b3c4:	f000 ffc8 	bl	801c358 <__lshift>
 801b3c8:	4606      	mov	r6, r0
 801b3ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b3cc:	2b00      	cmp	r3, #0
 801b3ce:	d069      	beq.n	801b4a4 <_dtoa_r+0x924>
 801b3d0:	4631      	mov	r1, r6
 801b3d2:	4658      	mov	r0, fp
 801b3d4:	f001 f82c 	bl	801c430 <__mcmp>
 801b3d8:	2800      	cmp	r0, #0
 801b3da:	da63      	bge.n	801b4a4 <_dtoa_r+0x924>
 801b3dc:	2300      	movs	r3, #0
 801b3de:	4659      	mov	r1, fp
 801b3e0:	220a      	movs	r2, #10
 801b3e2:	4620      	mov	r0, r4
 801b3e4:	f000 fdbe 	bl	801bf64 <__multadd>
 801b3e8:	9b08      	ldr	r3, [sp, #32]
 801b3ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801b3ee:	4683      	mov	fp, r0
 801b3f0:	2b00      	cmp	r3, #0
 801b3f2:	f000 818f 	beq.w	801b714 <_dtoa_r+0xb94>
 801b3f6:	4639      	mov	r1, r7
 801b3f8:	2300      	movs	r3, #0
 801b3fa:	220a      	movs	r2, #10
 801b3fc:	4620      	mov	r0, r4
 801b3fe:	f000 fdb1 	bl	801bf64 <__multadd>
 801b402:	f1b9 0f00 	cmp.w	r9, #0
 801b406:	4607      	mov	r7, r0
 801b408:	f300 808e 	bgt.w	801b528 <_dtoa_r+0x9a8>
 801b40c:	9b05      	ldr	r3, [sp, #20]
 801b40e:	2b02      	cmp	r3, #2
 801b410:	dc50      	bgt.n	801b4b4 <_dtoa_r+0x934>
 801b412:	e089      	b.n	801b528 <_dtoa_r+0x9a8>
 801b414:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b416:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801b41a:	e75d      	b.n	801b2d8 <_dtoa_r+0x758>
 801b41c:	9b01      	ldr	r3, [sp, #4]
 801b41e:	1e5e      	subs	r6, r3, #1
 801b420:	9b06      	ldr	r3, [sp, #24]
 801b422:	42b3      	cmp	r3, r6
 801b424:	bfbf      	itttt	lt
 801b426:	9b06      	ldrlt	r3, [sp, #24]
 801b428:	9606      	strlt	r6, [sp, #24]
 801b42a:	1af2      	sublt	r2, r6, r3
 801b42c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801b42e:	bfb6      	itet	lt
 801b430:	189b      	addlt	r3, r3, r2
 801b432:	1b9e      	subge	r6, r3, r6
 801b434:	930d      	strlt	r3, [sp, #52]	; 0x34
 801b436:	9b01      	ldr	r3, [sp, #4]
 801b438:	bfb8      	it	lt
 801b43a:	2600      	movlt	r6, #0
 801b43c:	2b00      	cmp	r3, #0
 801b43e:	bfb5      	itete	lt
 801b440:	eba8 0503 	sublt.w	r5, r8, r3
 801b444:	9b01      	ldrge	r3, [sp, #4]
 801b446:	2300      	movlt	r3, #0
 801b448:	4645      	movge	r5, r8
 801b44a:	e747      	b.n	801b2dc <_dtoa_r+0x75c>
 801b44c:	9e06      	ldr	r6, [sp, #24]
 801b44e:	9f08      	ldr	r7, [sp, #32]
 801b450:	4645      	mov	r5, r8
 801b452:	e74c      	b.n	801b2ee <_dtoa_r+0x76e>
 801b454:	9a06      	ldr	r2, [sp, #24]
 801b456:	e775      	b.n	801b344 <_dtoa_r+0x7c4>
 801b458:	9b05      	ldr	r3, [sp, #20]
 801b45a:	2b01      	cmp	r3, #1
 801b45c:	dc18      	bgt.n	801b490 <_dtoa_r+0x910>
 801b45e:	9b02      	ldr	r3, [sp, #8]
 801b460:	b9b3      	cbnz	r3, 801b490 <_dtoa_r+0x910>
 801b462:	9b03      	ldr	r3, [sp, #12]
 801b464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b468:	b9a3      	cbnz	r3, 801b494 <_dtoa_r+0x914>
 801b46a:	9b03      	ldr	r3, [sp, #12]
 801b46c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b470:	0d1b      	lsrs	r3, r3, #20
 801b472:	051b      	lsls	r3, r3, #20
 801b474:	b12b      	cbz	r3, 801b482 <_dtoa_r+0x902>
 801b476:	9b04      	ldr	r3, [sp, #16]
 801b478:	3301      	adds	r3, #1
 801b47a:	9304      	str	r3, [sp, #16]
 801b47c:	f108 0801 	add.w	r8, r8, #1
 801b480:	2301      	movs	r3, #1
 801b482:	9306      	str	r3, [sp, #24]
 801b484:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b486:	2b00      	cmp	r3, #0
 801b488:	f47f af74 	bne.w	801b374 <_dtoa_r+0x7f4>
 801b48c:	2001      	movs	r0, #1
 801b48e:	e779      	b.n	801b384 <_dtoa_r+0x804>
 801b490:	2300      	movs	r3, #0
 801b492:	e7f6      	b.n	801b482 <_dtoa_r+0x902>
 801b494:	9b02      	ldr	r3, [sp, #8]
 801b496:	e7f4      	b.n	801b482 <_dtoa_r+0x902>
 801b498:	d085      	beq.n	801b3a6 <_dtoa_r+0x826>
 801b49a:	4618      	mov	r0, r3
 801b49c:	301c      	adds	r0, #28
 801b49e:	e77d      	b.n	801b39c <_dtoa_r+0x81c>
 801b4a0:	40240000 	.word	0x40240000
 801b4a4:	9b01      	ldr	r3, [sp, #4]
 801b4a6:	2b00      	cmp	r3, #0
 801b4a8:	dc38      	bgt.n	801b51c <_dtoa_r+0x99c>
 801b4aa:	9b05      	ldr	r3, [sp, #20]
 801b4ac:	2b02      	cmp	r3, #2
 801b4ae:	dd35      	ble.n	801b51c <_dtoa_r+0x99c>
 801b4b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801b4b4:	f1b9 0f00 	cmp.w	r9, #0
 801b4b8:	d10d      	bne.n	801b4d6 <_dtoa_r+0x956>
 801b4ba:	4631      	mov	r1, r6
 801b4bc:	464b      	mov	r3, r9
 801b4be:	2205      	movs	r2, #5
 801b4c0:	4620      	mov	r0, r4
 801b4c2:	f000 fd4f 	bl	801bf64 <__multadd>
 801b4c6:	4601      	mov	r1, r0
 801b4c8:	4606      	mov	r6, r0
 801b4ca:	4658      	mov	r0, fp
 801b4cc:	f000 ffb0 	bl	801c430 <__mcmp>
 801b4d0:	2800      	cmp	r0, #0
 801b4d2:	f73f adbd 	bgt.w	801b050 <_dtoa_r+0x4d0>
 801b4d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b4d8:	9d00      	ldr	r5, [sp, #0]
 801b4da:	ea6f 0a03 	mvn.w	sl, r3
 801b4de:	f04f 0800 	mov.w	r8, #0
 801b4e2:	4631      	mov	r1, r6
 801b4e4:	4620      	mov	r0, r4
 801b4e6:	f000 fd1b 	bl	801bf20 <_Bfree>
 801b4ea:	2f00      	cmp	r7, #0
 801b4ec:	f43f aeb4 	beq.w	801b258 <_dtoa_r+0x6d8>
 801b4f0:	f1b8 0f00 	cmp.w	r8, #0
 801b4f4:	d005      	beq.n	801b502 <_dtoa_r+0x982>
 801b4f6:	45b8      	cmp	r8, r7
 801b4f8:	d003      	beq.n	801b502 <_dtoa_r+0x982>
 801b4fa:	4641      	mov	r1, r8
 801b4fc:	4620      	mov	r0, r4
 801b4fe:	f000 fd0f 	bl	801bf20 <_Bfree>
 801b502:	4639      	mov	r1, r7
 801b504:	4620      	mov	r0, r4
 801b506:	f000 fd0b 	bl	801bf20 <_Bfree>
 801b50a:	e6a5      	b.n	801b258 <_dtoa_r+0x6d8>
 801b50c:	2600      	movs	r6, #0
 801b50e:	4637      	mov	r7, r6
 801b510:	e7e1      	b.n	801b4d6 <_dtoa_r+0x956>
 801b512:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801b514:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801b518:	4637      	mov	r7, r6
 801b51a:	e599      	b.n	801b050 <_dtoa_r+0x4d0>
 801b51c:	9b08      	ldr	r3, [sp, #32]
 801b51e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801b522:	2b00      	cmp	r3, #0
 801b524:	f000 80fd 	beq.w	801b722 <_dtoa_r+0xba2>
 801b528:	2d00      	cmp	r5, #0
 801b52a:	dd05      	ble.n	801b538 <_dtoa_r+0x9b8>
 801b52c:	4639      	mov	r1, r7
 801b52e:	462a      	mov	r2, r5
 801b530:	4620      	mov	r0, r4
 801b532:	f000 ff11 	bl	801c358 <__lshift>
 801b536:	4607      	mov	r7, r0
 801b538:	9b06      	ldr	r3, [sp, #24]
 801b53a:	2b00      	cmp	r3, #0
 801b53c:	d05c      	beq.n	801b5f8 <_dtoa_r+0xa78>
 801b53e:	6879      	ldr	r1, [r7, #4]
 801b540:	4620      	mov	r0, r4
 801b542:	f000 fcad 	bl	801bea0 <_Balloc>
 801b546:	4605      	mov	r5, r0
 801b548:	b928      	cbnz	r0, 801b556 <_dtoa_r+0x9d6>
 801b54a:	4b80      	ldr	r3, [pc, #512]	; (801b74c <_dtoa_r+0xbcc>)
 801b54c:	4602      	mov	r2, r0
 801b54e:	f240 21ea 	movw	r1, #746	; 0x2ea
 801b552:	f7ff bb2e 	b.w	801abb2 <_dtoa_r+0x32>
 801b556:	693a      	ldr	r2, [r7, #16]
 801b558:	3202      	adds	r2, #2
 801b55a:	0092      	lsls	r2, r2, #2
 801b55c:	f107 010c 	add.w	r1, r7, #12
 801b560:	300c      	adds	r0, #12
 801b562:	f7fd fb7d 	bl	8018c60 <memcpy>
 801b566:	2201      	movs	r2, #1
 801b568:	4629      	mov	r1, r5
 801b56a:	4620      	mov	r0, r4
 801b56c:	f000 fef4 	bl	801c358 <__lshift>
 801b570:	9b00      	ldr	r3, [sp, #0]
 801b572:	3301      	adds	r3, #1
 801b574:	9301      	str	r3, [sp, #4]
 801b576:	9b00      	ldr	r3, [sp, #0]
 801b578:	444b      	add	r3, r9
 801b57a:	9307      	str	r3, [sp, #28]
 801b57c:	9b02      	ldr	r3, [sp, #8]
 801b57e:	f003 0301 	and.w	r3, r3, #1
 801b582:	46b8      	mov	r8, r7
 801b584:	9306      	str	r3, [sp, #24]
 801b586:	4607      	mov	r7, r0
 801b588:	9b01      	ldr	r3, [sp, #4]
 801b58a:	4631      	mov	r1, r6
 801b58c:	3b01      	subs	r3, #1
 801b58e:	4658      	mov	r0, fp
 801b590:	9302      	str	r3, [sp, #8]
 801b592:	f7ff fa69 	bl	801aa68 <quorem>
 801b596:	4603      	mov	r3, r0
 801b598:	3330      	adds	r3, #48	; 0x30
 801b59a:	9004      	str	r0, [sp, #16]
 801b59c:	4641      	mov	r1, r8
 801b59e:	4658      	mov	r0, fp
 801b5a0:	9308      	str	r3, [sp, #32]
 801b5a2:	f000 ff45 	bl	801c430 <__mcmp>
 801b5a6:	463a      	mov	r2, r7
 801b5a8:	4681      	mov	r9, r0
 801b5aa:	4631      	mov	r1, r6
 801b5ac:	4620      	mov	r0, r4
 801b5ae:	f000 ff5b 	bl	801c468 <__mdiff>
 801b5b2:	68c2      	ldr	r2, [r0, #12]
 801b5b4:	9b08      	ldr	r3, [sp, #32]
 801b5b6:	4605      	mov	r5, r0
 801b5b8:	bb02      	cbnz	r2, 801b5fc <_dtoa_r+0xa7c>
 801b5ba:	4601      	mov	r1, r0
 801b5bc:	4658      	mov	r0, fp
 801b5be:	f000 ff37 	bl	801c430 <__mcmp>
 801b5c2:	9b08      	ldr	r3, [sp, #32]
 801b5c4:	4602      	mov	r2, r0
 801b5c6:	4629      	mov	r1, r5
 801b5c8:	4620      	mov	r0, r4
 801b5ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801b5ce:	f000 fca7 	bl	801bf20 <_Bfree>
 801b5d2:	9b05      	ldr	r3, [sp, #20]
 801b5d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b5d6:	9d01      	ldr	r5, [sp, #4]
 801b5d8:	ea43 0102 	orr.w	r1, r3, r2
 801b5dc:	9b06      	ldr	r3, [sp, #24]
 801b5de:	430b      	orrs	r3, r1
 801b5e0:	9b08      	ldr	r3, [sp, #32]
 801b5e2:	d10d      	bne.n	801b600 <_dtoa_r+0xa80>
 801b5e4:	2b39      	cmp	r3, #57	; 0x39
 801b5e6:	d029      	beq.n	801b63c <_dtoa_r+0xabc>
 801b5e8:	f1b9 0f00 	cmp.w	r9, #0
 801b5ec:	dd01      	ble.n	801b5f2 <_dtoa_r+0xa72>
 801b5ee:	9b04      	ldr	r3, [sp, #16]
 801b5f0:	3331      	adds	r3, #49	; 0x31
 801b5f2:	9a02      	ldr	r2, [sp, #8]
 801b5f4:	7013      	strb	r3, [r2, #0]
 801b5f6:	e774      	b.n	801b4e2 <_dtoa_r+0x962>
 801b5f8:	4638      	mov	r0, r7
 801b5fa:	e7b9      	b.n	801b570 <_dtoa_r+0x9f0>
 801b5fc:	2201      	movs	r2, #1
 801b5fe:	e7e2      	b.n	801b5c6 <_dtoa_r+0xa46>
 801b600:	f1b9 0f00 	cmp.w	r9, #0
 801b604:	db06      	blt.n	801b614 <_dtoa_r+0xa94>
 801b606:	9905      	ldr	r1, [sp, #20]
 801b608:	ea41 0909 	orr.w	r9, r1, r9
 801b60c:	9906      	ldr	r1, [sp, #24]
 801b60e:	ea59 0101 	orrs.w	r1, r9, r1
 801b612:	d120      	bne.n	801b656 <_dtoa_r+0xad6>
 801b614:	2a00      	cmp	r2, #0
 801b616:	ddec      	ble.n	801b5f2 <_dtoa_r+0xa72>
 801b618:	4659      	mov	r1, fp
 801b61a:	2201      	movs	r2, #1
 801b61c:	4620      	mov	r0, r4
 801b61e:	9301      	str	r3, [sp, #4]
 801b620:	f000 fe9a 	bl	801c358 <__lshift>
 801b624:	4631      	mov	r1, r6
 801b626:	4683      	mov	fp, r0
 801b628:	f000 ff02 	bl	801c430 <__mcmp>
 801b62c:	2800      	cmp	r0, #0
 801b62e:	9b01      	ldr	r3, [sp, #4]
 801b630:	dc02      	bgt.n	801b638 <_dtoa_r+0xab8>
 801b632:	d1de      	bne.n	801b5f2 <_dtoa_r+0xa72>
 801b634:	07da      	lsls	r2, r3, #31
 801b636:	d5dc      	bpl.n	801b5f2 <_dtoa_r+0xa72>
 801b638:	2b39      	cmp	r3, #57	; 0x39
 801b63a:	d1d8      	bne.n	801b5ee <_dtoa_r+0xa6e>
 801b63c:	9a02      	ldr	r2, [sp, #8]
 801b63e:	2339      	movs	r3, #57	; 0x39
 801b640:	7013      	strb	r3, [r2, #0]
 801b642:	462b      	mov	r3, r5
 801b644:	461d      	mov	r5, r3
 801b646:	3b01      	subs	r3, #1
 801b648:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801b64c:	2a39      	cmp	r2, #57	; 0x39
 801b64e:	d050      	beq.n	801b6f2 <_dtoa_r+0xb72>
 801b650:	3201      	adds	r2, #1
 801b652:	701a      	strb	r2, [r3, #0]
 801b654:	e745      	b.n	801b4e2 <_dtoa_r+0x962>
 801b656:	2a00      	cmp	r2, #0
 801b658:	dd03      	ble.n	801b662 <_dtoa_r+0xae2>
 801b65a:	2b39      	cmp	r3, #57	; 0x39
 801b65c:	d0ee      	beq.n	801b63c <_dtoa_r+0xabc>
 801b65e:	3301      	adds	r3, #1
 801b660:	e7c7      	b.n	801b5f2 <_dtoa_r+0xa72>
 801b662:	9a01      	ldr	r2, [sp, #4]
 801b664:	9907      	ldr	r1, [sp, #28]
 801b666:	f802 3c01 	strb.w	r3, [r2, #-1]
 801b66a:	428a      	cmp	r2, r1
 801b66c:	d02a      	beq.n	801b6c4 <_dtoa_r+0xb44>
 801b66e:	4659      	mov	r1, fp
 801b670:	2300      	movs	r3, #0
 801b672:	220a      	movs	r2, #10
 801b674:	4620      	mov	r0, r4
 801b676:	f000 fc75 	bl	801bf64 <__multadd>
 801b67a:	45b8      	cmp	r8, r7
 801b67c:	4683      	mov	fp, r0
 801b67e:	f04f 0300 	mov.w	r3, #0
 801b682:	f04f 020a 	mov.w	r2, #10
 801b686:	4641      	mov	r1, r8
 801b688:	4620      	mov	r0, r4
 801b68a:	d107      	bne.n	801b69c <_dtoa_r+0xb1c>
 801b68c:	f000 fc6a 	bl	801bf64 <__multadd>
 801b690:	4680      	mov	r8, r0
 801b692:	4607      	mov	r7, r0
 801b694:	9b01      	ldr	r3, [sp, #4]
 801b696:	3301      	adds	r3, #1
 801b698:	9301      	str	r3, [sp, #4]
 801b69a:	e775      	b.n	801b588 <_dtoa_r+0xa08>
 801b69c:	f000 fc62 	bl	801bf64 <__multadd>
 801b6a0:	4639      	mov	r1, r7
 801b6a2:	4680      	mov	r8, r0
 801b6a4:	2300      	movs	r3, #0
 801b6a6:	220a      	movs	r2, #10
 801b6a8:	4620      	mov	r0, r4
 801b6aa:	f000 fc5b 	bl	801bf64 <__multadd>
 801b6ae:	4607      	mov	r7, r0
 801b6b0:	e7f0      	b.n	801b694 <_dtoa_r+0xb14>
 801b6b2:	f1b9 0f00 	cmp.w	r9, #0
 801b6b6:	9a00      	ldr	r2, [sp, #0]
 801b6b8:	bfcc      	ite	gt
 801b6ba:	464d      	movgt	r5, r9
 801b6bc:	2501      	movle	r5, #1
 801b6be:	4415      	add	r5, r2
 801b6c0:	f04f 0800 	mov.w	r8, #0
 801b6c4:	4659      	mov	r1, fp
 801b6c6:	2201      	movs	r2, #1
 801b6c8:	4620      	mov	r0, r4
 801b6ca:	9301      	str	r3, [sp, #4]
 801b6cc:	f000 fe44 	bl	801c358 <__lshift>
 801b6d0:	4631      	mov	r1, r6
 801b6d2:	4683      	mov	fp, r0
 801b6d4:	f000 feac 	bl	801c430 <__mcmp>
 801b6d8:	2800      	cmp	r0, #0
 801b6da:	dcb2      	bgt.n	801b642 <_dtoa_r+0xac2>
 801b6dc:	d102      	bne.n	801b6e4 <_dtoa_r+0xb64>
 801b6de:	9b01      	ldr	r3, [sp, #4]
 801b6e0:	07db      	lsls	r3, r3, #31
 801b6e2:	d4ae      	bmi.n	801b642 <_dtoa_r+0xac2>
 801b6e4:	462b      	mov	r3, r5
 801b6e6:	461d      	mov	r5, r3
 801b6e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b6ec:	2a30      	cmp	r2, #48	; 0x30
 801b6ee:	d0fa      	beq.n	801b6e6 <_dtoa_r+0xb66>
 801b6f0:	e6f7      	b.n	801b4e2 <_dtoa_r+0x962>
 801b6f2:	9a00      	ldr	r2, [sp, #0]
 801b6f4:	429a      	cmp	r2, r3
 801b6f6:	d1a5      	bne.n	801b644 <_dtoa_r+0xac4>
 801b6f8:	f10a 0a01 	add.w	sl, sl, #1
 801b6fc:	2331      	movs	r3, #49	; 0x31
 801b6fe:	e779      	b.n	801b5f4 <_dtoa_r+0xa74>
 801b700:	4b13      	ldr	r3, [pc, #76]	; (801b750 <_dtoa_r+0xbd0>)
 801b702:	f7ff baaf 	b.w	801ac64 <_dtoa_r+0xe4>
 801b706:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b708:	2b00      	cmp	r3, #0
 801b70a:	f47f aa86 	bne.w	801ac1a <_dtoa_r+0x9a>
 801b70e:	4b11      	ldr	r3, [pc, #68]	; (801b754 <_dtoa_r+0xbd4>)
 801b710:	f7ff baa8 	b.w	801ac64 <_dtoa_r+0xe4>
 801b714:	f1b9 0f00 	cmp.w	r9, #0
 801b718:	dc03      	bgt.n	801b722 <_dtoa_r+0xba2>
 801b71a:	9b05      	ldr	r3, [sp, #20]
 801b71c:	2b02      	cmp	r3, #2
 801b71e:	f73f aec9 	bgt.w	801b4b4 <_dtoa_r+0x934>
 801b722:	9d00      	ldr	r5, [sp, #0]
 801b724:	4631      	mov	r1, r6
 801b726:	4658      	mov	r0, fp
 801b728:	f7ff f99e 	bl	801aa68 <quorem>
 801b72c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801b730:	f805 3b01 	strb.w	r3, [r5], #1
 801b734:	9a00      	ldr	r2, [sp, #0]
 801b736:	1aaa      	subs	r2, r5, r2
 801b738:	4591      	cmp	r9, r2
 801b73a:	ddba      	ble.n	801b6b2 <_dtoa_r+0xb32>
 801b73c:	4659      	mov	r1, fp
 801b73e:	2300      	movs	r3, #0
 801b740:	220a      	movs	r2, #10
 801b742:	4620      	mov	r0, r4
 801b744:	f000 fc0e 	bl	801bf64 <__multadd>
 801b748:	4683      	mov	fp, r0
 801b74a:	e7eb      	b.n	801b724 <_dtoa_r+0xba4>
 801b74c:	08020bc4 	.word	0x08020bc4
 801b750:	080209c0 	.word	0x080209c0
 801b754:	08020b41 	.word	0x08020b41

0801b758 <rshift>:
 801b758:	6903      	ldr	r3, [r0, #16]
 801b75a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801b75e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b762:	ea4f 1261 	mov.w	r2, r1, asr #5
 801b766:	f100 0414 	add.w	r4, r0, #20
 801b76a:	dd45      	ble.n	801b7f8 <rshift+0xa0>
 801b76c:	f011 011f 	ands.w	r1, r1, #31
 801b770:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801b774:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801b778:	d10c      	bne.n	801b794 <rshift+0x3c>
 801b77a:	f100 0710 	add.w	r7, r0, #16
 801b77e:	4629      	mov	r1, r5
 801b780:	42b1      	cmp	r1, r6
 801b782:	d334      	bcc.n	801b7ee <rshift+0x96>
 801b784:	1a9b      	subs	r3, r3, r2
 801b786:	009b      	lsls	r3, r3, #2
 801b788:	1eea      	subs	r2, r5, #3
 801b78a:	4296      	cmp	r6, r2
 801b78c:	bf38      	it	cc
 801b78e:	2300      	movcc	r3, #0
 801b790:	4423      	add	r3, r4
 801b792:	e015      	b.n	801b7c0 <rshift+0x68>
 801b794:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801b798:	f1c1 0820 	rsb	r8, r1, #32
 801b79c:	40cf      	lsrs	r7, r1
 801b79e:	f105 0e04 	add.w	lr, r5, #4
 801b7a2:	46a1      	mov	r9, r4
 801b7a4:	4576      	cmp	r6, lr
 801b7a6:	46f4      	mov	ip, lr
 801b7a8:	d815      	bhi.n	801b7d6 <rshift+0x7e>
 801b7aa:	1a9b      	subs	r3, r3, r2
 801b7ac:	009a      	lsls	r2, r3, #2
 801b7ae:	3a04      	subs	r2, #4
 801b7b0:	3501      	adds	r5, #1
 801b7b2:	42ae      	cmp	r6, r5
 801b7b4:	bf38      	it	cc
 801b7b6:	2200      	movcc	r2, #0
 801b7b8:	18a3      	adds	r3, r4, r2
 801b7ba:	50a7      	str	r7, [r4, r2]
 801b7bc:	b107      	cbz	r7, 801b7c0 <rshift+0x68>
 801b7be:	3304      	adds	r3, #4
 801b7c0:	1b1a      	subs	r2, r3, r4
 801b7c2:	42a3      	cmp	r3, r4
 801b7c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801b7c8:	bf08      	it	eq
 801b7ca:	2300      	moveq	r3, #0
 801b7cc:	6102      	str	r2, [r0, #16]
 801b7ce:	bf08      	it	eq
 801b7d0:	6143      	streq	r3, [r0, #20]
 801b7d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b7d6:	f8dc c000 	ldr.w	ip, [ip]
 801b7da:	fa0c fc08 	lsl.w	ip, ip, r8
 801b7de:	ea4c 0707 	orr.w	r7, ip, r7
 801b7e2:	f849 7b04 	str.w	r7, [r9], #4
 801b7e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 801b7ea:	40cf      	lsrs	r7, r1
 801b7ec:	e7da      	b.n	801b7a4 <rshift+0x4c>
 801b7ee:	f851 cb04 	ldr.w	ip, [r1], #4
 801b7f2:	f847 cf04 	str.w	ip, [r7, #4]!
 801b7f6:	e7c3      	b.n	801b780 <rshift+0x28>
 801b7f8:	4623      	mov	r3, r4
 801b7fa:	e7e1      	b.n	801b7c0 <rshift+0x68>

0801b7fc <__hexdig_fun>:
 801b7fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801b800:	2b09      	cmp	r3, #9
 801b802:	d802      	bhi.n	801b80a <__hexdig_fun+0xe>
 801b804:	3820      	subs	r0, #32
 801b806:	b2c0      	uxtb	r0, r0
 801b808:	4770      	bx	lr
 801b80a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801b80e:	2b05      	cmp	r3, #5
 801b810:	d801      	bhi.n	801b816 <__hexdig_fun+0x1a>
 801b812:	3847      	subs	r0, #71	; 0x47
 801b814:	e7f7      	b.n	801b806 <__hexdig_fun+0xa>
 801b816:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801b81a:	2b05      	cmp	r3, #5
 801b81c:	d801      	bhi.n	801b822 <__hexdig_fun+0x26>
 801b81e:	3827      	subs	r0, #39	; 0x27
 801b820:	e7f1      	b.n	801b806 <__hexdig_fun+0xa>
 801b822:	2000      	movs	r0, #0
 801b824:	4770      	bx	lr
	...

0801b828 <__gethex>:
 801b828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b82c:	ed2d 8b02 	vpush	{d8}
 801b830:	b089      	sub	sp, #36	; 0x24
 801b832:	ee08 0a10 	vmov	s16, r0
 801b836:	9304      	str	r3, [sp, #16]
 801b838:	4bbc      	ldr	r3, [pc, #752]	; (801bb2c <__gethex+0x304>)
 801b83a:	681b      	ldr	r3, [r3, #0]
 801b83c:	9301      	str	r3, [sp, #4]
 801b83e:	4618      	mov	r0, r3
 801b840:	468b      	mov	fp, r1
 801b842:	4690      	mov	r8, r2
 801b844:	f7e4 fcc4 	bl	80001d0 <strlen>
 801b848:	9b01      	ldr	r3, [sp, #4]
 801b84a:	f8db 2000 	ldr.w	r2, [fp]
 801b84e:	4403      	add	r3, r0
 801b850:	4682      	mov	sl, r0
 801b852:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801b856:	9305      	str	r3, [sp, #20]
 801b858:	1c93      	adds	r3, r2, #2
 801b85a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801b85e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801b862:	32fe      	adds	r2, #254	; 0xfe
 801b864:	18d1      	adds	r1, r2, r3
 801b866:	461f      	mov	r7, r3
 801b868:	f813 0b01 	ldrb.w	r0, [r3], #1
 801b86c:	9100      	str	r1, [sp, #0]
 801b86e:	2830      	cmp	r0, #48	; 0x30
 801b870:	d0f8      	beq.n	801b864 <__gethex+0x3c>
 801b872:	f7ff ffc3 	bl	801b7fc <__hexdig_fun>
 801b876:	4604      	mov	r4, r0
 801b878:	2800      	cmp	r0, #0
 801b87a:	d13a      	bne.n	801b8f2 <__gethex+0xca>
 801b87c:	9901      	ldr	r1, [sp, #4]
 801b87e:	4652      	mov	r2, sl
 801b880:	4638      	mov	r0, r7
 801b882:	f001 f982 	bl	801cb8a <strncmp>
 801b886:	4605      	mov	r5, r0
 801b888:	2800      	cmp	r0, #0
 801b88a:	d168      	bne.n	801b95e <__gethex+0x136>
 801b88c:	f817 000a 	ldrb.w	r0, [r7, sl]
 801b890:	eb07 060a 	add.w	r6, r7, sl
 801b894:	f7ff ffb2 	bl	801b7fc <__hexdig_fun>
 801b898:	2800      	cmp	r0, #0
 801b89a:	d062      	beq.n	801b962 <__gethex+0x13a>
 801b89c:	4633      	mov	r3, r6
 801b89e:	7818      	ldrb	r0, [r3, #0]
 801b8a0:	2830      	cmp	r0, #48	; 0x30
 801b8a2:	461f      	mov	r7, r3
 801b8a4:	f103 0301 	add.w	r3, r3, #1
 801b8a8:	d0f9      	beq.n	801b89e <__gethex+0x76>
 801b8aa:	f7ff ffa7 	bl	801b7fc <__hexdig_fun>
 801b8ae:	2301      	movs	r3, #1
 801b8b0:	fab0 f480 	clz	r4, r0
 801b8b4:	0964      	lsrs	r4, r4, #5
 801b8b6:	4635      	mov	r5, r6
 801b8b8:	9300      	str	r3, [sp, #0]
 801b8ba:	463a      	mov	r2, r7
 801b8bc:	4616      	mov	r6, r2
 801b8be:	3201      	adds	r2, #1
 801b8c0:	7830      	ldrb	r0, [r6, #0]
 801b8c2:	f7ff ff9b 	bl	801b7fc <__hexdig_fun>
 801b8c6:	2800      	cmp	r0, #0
 801b8c8:	d1f8      	bne.n	801b8bc <__gethex+0x94>
 801b8ca:	9901      	ldr	r1, [sp, #4]
 801b8cc:	4652      	mov	r2, sl
 801b8ce:	4630      	mov	r0, r6
 801b8d0:	f001 f95b 	bl	801cb8a <strncmp>
 801b8d4:	b980      	cbnz	r0, 801b8f8 <__gethex+0xd0>
 801b8d6:	b94d      	cbnz	r5, 801b8ec <__gethex+0xc4>
 801b8d8:	eb06 050a 	add.w	r5, r6, sl
 801b8dc:	462a      	mov	r2, r5
 801b8de:	4616      	mov	r6, r2
 801b8e0:	3201      	adds	r2, #1
 801b8e2:	7830      	ldrb	r0, [r6, #0]
 801b8e4:	f7ff ff8a 	bl	801b7fc <__hexdig_fun>
 801b8e8:	2800      	cmp	r0, #0
 801b8ea:	d1f8      	bne.n	801b8de <__gethex+0xb6>
 801b8ec:	1bad      	subs	r5, r5, r6
 801b8ee:	00ad      	lsls	r5, r5, #2
 801b8f0:	e004      	b.n	801b8fc <__gethex+0xd4>
 801b8f2:	2400      	movs	r4, #0
 801b8f4:	4625      	mov	r5, r4
 801b8f6:	e7e0      	b.n	801b8ba <__gethex+0x92>
 801b8f8:	2d00      	cmp	r5, #0
 801b8fa:	d1f7      	bne.n	801b8ec <__gethex+0xc4>
 801b8fc:	7833      	ldrb	r3, [r6, #0]
 801b8fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801b902:	2b50      	cmp	r3, #80	; 0x50
 801b904:	d13b      	bne.n	801b97e <__gethex+0x156>
 801b906:	7873      	ldrb	r3, [r6, #1]
 801b908:	2b2b      	cmp	r3, #43	; 0x2b
 801b90a:	d02c      	beq.n	801b966 <__gethex+0x13e>
 801b90c:	2b2d      	cmp	r3, #45	; 0x2d
 801b90e:	d02e      	beq.n	801b96e <__gethex+0x146>
 801b910:	1c71      	adds	r1, r6, #1
 801b912:	f04f 0900 	mov.w	r9, #0
 801b916:	7808      	ldrb	r0, [r1, #0]
 801b918:	f7ff ff70 	bl	801b7fc <__hexdig_fun>
 801b91c:	1e43      	subs	r3, r0, #1
 801b91e:	b2db      	uxtb	r3, r3
 801b920:	2b18      	cmp	r3, #24
 801b922:	d82c      	bhi.n	801b97e <__gethex+0x156>
 801b924:	f1a0 0210 	sub.w	r2, r0, #16
 801b928:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801b92c:	f7ff ff66 	bl	801b7fc <__hexdig_fun>
 801b930:	1e43      	subs	r3, r0, #1
 801b932:	b2db      	uxtb	r3, r3
 801b934:	2b18      	cmp	r3, #24
 801b936:	d91d      	bls.n	801b974 <__gethex+0x14c>
 801b938:	f1b9 0f00 	cmp.w	r9, #0
 801b93c:	d000      	beq.n	801b940 <__gethex+0x118>
 801b93e:	4252      	negs	r2, r2
 801b940:	4415      	add	r5, r2
 801b942:	f8cb 1000 	str.w	r1, [fp]
 801b946:	b1e4      	cbz	r4, 801b982 <__gethex+0x15a>
 801b948:	9b00      	ldr	r3, [sp, #0]
 801b94a:	2b00      	cmp	r3, #0
 801b94c:	bf14      	ite	ne
 801b94e:	2700      	movne	r7, #0
 801b950:	2706      	moveq	r7, #6
 801b952:	4638      	mov	r0, r7
 801b954:	b009      	add	sp, #36	; 0x24
 801b956:	ecbd 8b02 	vpop	{d8}
 801b95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b95e:	463e      	mov	r6, r7
 801b960:	4625      	mov	r5, r4
 801b962:	2401      	movs	r4, #1
 801b964:	e7ca      	b.n	801b8fc <__gethex+0xd4>
 801b966:	f04f 0900 	mov.w	r9, #0
 801b96a:	1cb1      	adds	r1, r6, #2
 801b96c:	e7d3      	b.n	801b916 <__gethex+0xee>
 801b96e:	f04f 0901 	mov.w	r9, #1
 801b972:	e7fa      	b.n	801b96a <__gethex+0x142>
 801b974:	230a      	movs	r3, #10
 801b976:	fb03 0202 	mla	r2, r3, r2, r0
 801b97a:	3a10      	subs	r2, #16
 801b97c:	e7d4      	b.n	801b928 <__gethex+0x100>
 801b97e:	4631      	mov	r1, r6
 801b980:	e7df      	b.n	801b942 <__gethex+0x11a>
 801b982:	1bf3      	subs	r3, r6, r7
 801b984:	3b01      	subs	r3, #1
 801b986:	4621      	mov	r1, r4
 801b988:	2b07      	cmp	r3, #7
 801b98a:	dc0b      	bgt.n	801b9a4 <__gethex+0x17c>
 801b98c:	ee18 0a10 	vmov	r0, s16
 801b990:	f000 fa86 	bl	801bea0 <_Balloc>
 801b994:	4604      	mov	r4, r0
 801b996:	b940      	cbnz	r0, 801b9aa <__gethex+0x182>
 801b998:	4b65      	ldr	r3, [pc, #404]	; (801bb30 <__gethex+0x308>)
 801b99a:	4602      	mov	r2, r0
 801b99c:	21de      	movs	r1, #222	; 0xde
 801b99e:	4865      	ldr	r0, [pc, #404]	; (801bb34 <__gethex+0x30c>)
 801b9a0:	f001 f912 	bl	801cbc8 <__assert_func>
 801b9a4:	3101      	adds	r1, #1
 801b9a6:	105b      	asrs	r3, r3, #1
 801b9a8:	e7ee      	b.n	801b988 <__gethex+0x160>
 801b9aa:	f100 0914 	add.w	r9, r0, #20
 801b9ae:	f04f 0b00 	mov.w	fp, #0
 801b9b2:	f1ca 0301 	rsb	r3, sl, #1
 801b9b6:	f8cd 9008 	str.w	r9, [sp, #8]
 801b9ba:	f8cd b000 	str.w	fp, [sp]
 801b9be:	9306      	str	r3, [sp, #24]
 801b9c0:	42b7      	cmp	r7, r6
 801b9c2:	d340      	bcc.n	801ba46 <__gethex+0x21e>
 801b9c4:	9802      	ldr	r0, [sp, #8]
 801b9c6:	9b00      	ldr	r3, [sp, #0]
 801b9c8:	f840 3b04 	str.w	r3, [r0], #4
 801b9cc:	eba0 0009 	sub.w	r0, r0, r9
 801b9d0:	1080      	asrs	r0, r0, #2
 801b9d2:	0146      	lsls	r6, r0, #5
 801b9d4:	6120      	str	r0, [r4, #16]
 801b9d6:	4618      	mov	r0, r3
 801b9d8:	f000 fb58 	bl	801c08c <__hi0bits>
 801b9dc:	1a30      	subs	r0, r6, r0
 801b9de:	f8d8 6000 	ldr.w	r6, [r8]
 801b9e2:	42b0      	cmp	r0, r6
 801b9e4:	dd63      	ble.n	801baae <__gethex+0x286>
 801b9e6:	1b87      	subs	r7, r0, r6
 801b9e8:	4639      	mov	r1, r7
 801b9ea:	4620      	mov	r0, r4
 801b9ec:	f000 fef2 	bl	801c7d4 <__any_on>
 801b9f0:	4682      	mov	sl, r0
 801b9f2:	b1a8      	cbz	r0, 801ba20 <__gethex+0x1f8>
 801b9f4:	1e7b      	subs	r3, r7, #1
 801b9f6:	1159      	asrs	r1, r3, #5
 801b9f8:	f003 021f 	and.w	r2, r3, #31
 801b9fc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801ba00:	f04f 0a01 	mov.w	sl, #1
 801ba04:	fa0a f202 	lsl.w	r2, sl, r2
 801ba08:	420a      	tst	r2, r1
 801ba0a:	d009      	beq.n	801ba20 <__gethex+0x1f8>
 801ba0c:	4553      	cmp	r3, sl
 801ba0e:	dd05      	ble.n	801ba1c <__gethex+0x1f4>
 801ba10:	1eb9      	subs	r1, r7, #2
 801ba12:	4620      	mov	r0, r4
 801ba14:	f000 fede 	bl	801c7d4 <__any_on>
 801ba18:	2800      	cmp	r0, #0
 801ba1a:	d145      	bne.n	801baa8 <__gethex+0x280>
 801ba1c:	f04f 0a02 	mov.w	sl, #2
 801ba20:	4639      	mov	r1, r7
 801ba22:	4620      	mov	r0, r4
 801ba24:	f7ff fe98 	bl	801b758 <rshift>
 801ba28:	443d      	add	r5, r7
 801ba2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ba2e:	42ab      	cmp	r3, r5
 801ba30:	da4c      	bge.n	801bacc <__gethex+0x2a4>
 801ba32:	ee18 0a10 	vmov	r0, s16
 801ba36:	4621      	mov	r1, r4
 801ba38:	f000 fa72 	bl	801bf20 <_Bfree>
 801ba3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ba3e:	2300      	movs	r3, #0
 801ba40:	6013      	str	r3, [r2, #0]
 801ba42:	27a3      	movs	r7, #163	; 0xa3
 801ba44:	e785      	b.n	801b952 <__gethex+0x12a>
 801ba46:	1e73      	subs	r3, r6, #1
 801ba48:	9a05      	ldr	r2, [sp, #20]
 801ba4a:	9303      	str	r3, [sp, #12]
 801ba4c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801ba50:	4293      	cmp	r3, r2
 801ba52:	d019      	beq.n	801ba88 <__gethex+0x260>
 801ba54:	f1bb 0f20 	cmp.w	fp, #32
 801ba58:	d107      	bne.n	801ba6a <__gethex+0x242>
 801ba5a:	9b02      	ldr	r3, [sp, #8]
 801ba5c:	9a00      	ldr	r2, [sp, #0]
 801ba5e:	f843 2b04 	str.w	r2, [r3], #4
 801ba62:	9302      	str	r3, [sp, #8]
 801ba64:	2300      	movs	r3, #0
 801ba66:	9300      	str	r3, [sp, #0]
 801ba68:	469b      	mov	fp, r3
 801ba6a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801ba6e:	f7ff fec5 	bl	801b7fc <__hexdig_fun>
 801ba72:	9b00      	ldr	r3, [sp, #0]
 801ba74:	f000 000f 	and.w	r0, r0, #15
 801ba78:	fa00 f00b 	lsl.w	r0, r0, fp
 801ba7c:	4303      	orrs	r3, r0
 801ba7e:	9300      	str	r3, [sp, #0]
 801ba80:	f10b 0b04 	add.w	fp, fp, #4
 801ba84:	9b03      	ldr	r3, [sp, #12]
 801ba86:	e00d      	b.n	801baa4 <__gethex+0x27c>
 801ba88:	9b03      	ldr	r3, [sp, #12]
 801ba8a:	9a06      	ldr	r2, [sp, #24]
 801ba8c:	4413      	add	r3, r2
 801ba8e:	42bb      	cmp	r3, r7
 801ba90:	d3e0      	bcc.n	801ba54 <__gethex+0x22c>
 801ba92:	4618      	mov	r0, r3
 801ba94:	9901      	ldr	r1, [sp, #4]
 801ba96:	9307      	str	r3, [sp, #28]
 801ba98:	4652      	mov	r2, sl
 801ba9a:	f001 f876 	bl	801cb8a <strncmp>
 801ba9e:	9b07      	ldr	r3, [sp, #28]
 801baa0:	2800      	cmp	r0, #0
 801baa2:	d1d7      	bne.n	801ba54 <__gethex+0x22c>
 801baa4:	461e      	mov	r6, r3
 801baa6:	e78b      	b.n	801b9c0 <__gethex+0x198>
 801baa8:	f04f 0a03 	mov.w	sl, #3
 801baac:	e7b8      	b.n	801ba20 <__gethex+0x1f8>
 801baae:	da0a      	bge.n	801bac6 <__gethex+0x29e>
 801bab0:	1a37      	subs	r7, r6, r0
 801bab2:	4621      	mov	r1, r4
 801bab4:	ee18 0a10 	vmov	r0, s16
 801bab8:	463a      	mov	r2, r7
 801baba:	f000 fc4d 	bl	801c358 <__lshift>
 801babe:	1bed      	subs	r5, r5, r7
 801bac0:	4604      	mov	r4, r0
 801bac2:	f100 0914 	add.w	r9, r0, #20
 801bac6:	f04f 0a00 	mov.w	sl, #0
 801baca:	e7ae      	b.n	801ba2a <__gethex+0x202>
 801bacc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801bad0:	42a8      	cmp	r0, r5
 801bad2:	dd72      	ble.n	801bbba <__gethex+0x392>
 801bad4:	1b45      	subs	r5, r0, r5
 801bad6:	42ae      	cmp	r6, r5
 801bad8:	dc36      	bgt.n	801bb48 <__gethex+0x320>
 801bada:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801bade:	2b02      	cmp	r3, #2
 801bae0:	d02a      	beq.n	801bb38 <__gethex+0x310>
 801bae2:	2b03      	cmp	r3, #3
 801bae4:	d02c      	beq.n	801bb40 <__gethex+0x318>
 801bae6:	2b01      	cmp	r3, #1
 801bae8:	d115      	bne.n	801bb16 <__gethex+0x2ee>
 801baea:	42ae      	cmp	r6, r5
 801baec:	d113      	bne.n	801bb16 <__gethex+0x2ee>
 801baee:	2e01      	cmp	r6, #1
 801baf0:	d10b      	bne.n	801bb0a <__gethex+0x2e2>
 801baf2:	9a04      	ldr	r2, [sp, #16]
 801baf4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801baf8:	6013      	str	r3, [r2, #0]
 801bafa:	2301      	movs	r3, #1
 801bafc:	6123      	str	r3, [r4, #16]
 801bafe:	f8c9 3000 	str.w	r3, [r9]
 801bb02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801bb04:	2762      	movs	r7, #98	; 0x62
 801bb06:	601c      	str	r4, [r3, #0]
 801bb08:	e723      	b.n	801b952 <__gethex+0x12a>
 801bb0a:	1e71      	subs	r1, r6, #1
 801bb0c:	4620      	mov	r0, r4
 801bb0e:	f000 fe61 	bl	801c7d4 <__any_on>
 801bb12:	2800      	cmp	r0, #0
 801bb14:	d1ed      	bne.n	801baf2 <__gethex+0x2ca>
 801bb16:	ee18 0a10 	vmov	r0, s16
 801bb1a:	4621      	mov	r1, r4
 801bb1c:	f000 fa00 	bl	801bf20 <_Bfree>
 801bb20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bb22:	2300      	movs	r3, #0
 801bb24:	6013      	str	r3, [r2, #0]
 801bb26:	2750      	movs	r7, #80	; 0x50
 801bb28:	e713      	b.n	801b952 <__gethex+0x12a>
 801bb2a:	bf00      	nop
 801bb2c:	08020c40 	.word	0x08020c40
 801bb30:	08020bc4 	.word	0x08020bc4
 801bb34:	08020bd5 	.word	0x08020bd5
 801bb38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bb3a:	2b00      	cmp	r3, #0
 801bb3c:	d1eb      	bne.n	801bb16 <__gethex+0x2ee>
 801bb3e:	e7d8      	b.n	801baf2 <__gethex+0x2ca>
 801bb40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bb42:	2b00      	cmp	r3, #0
 801bb44:	d1d5      	bne.n	801baf2 <__gethex+0x2ca>
 801bb46:	e7e6      	b.n	801bb16 <__gethex+0x2ee>
 801bb48:	1e6f      	subs	r7, r5, #1
 801bb4a:	f1ba 0f00 	cmp.w	sl, #0
 801bb4e:	d131      	bne.n	801bbb4 <__gethex+0x38c>
 801bb50:	b127      	cbz	r7, 801bb5c <__gethex+0x334>
 801bb52:	4639      	mov	r1, r7
 801bb54:	4620      	mov	r0, r4
 801bb56:	f000 fe3d 	bl	801c7d4 <__any_on>
 801bb5a:	4682      	mov	sl, r0
 801bb5c:	117b      	asrs	r3, r7, #5
 801bb5e:	2101      	movs	r1, #1
 801bb60:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801bb64:	f007 071f 	and.w	r7, r7, #31
 801bb68:	fa01 f707 	lsl.w	r7, r1, r7
 801bb6c:	421f      	tst	r7, r3
 801bb6e:	4629      	mov	r1, r5
 801bb70:	4620      	mov	r0, r4
 801bb72:	bf18      	it	ne
 801bb74:	f04a 0a02 	orrne.w	sl, sl, #2
 801bb78:	1b76      	subs	r6, r6, r5
 801bb7a:	f7ff fded 	bl	801b758 <rshift>
 801bb7e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801bb82:	2702      	movs	r7, #2
 801bb84:	f1ba 0f00 	cmp.w	sl, #0
 801bb88:	d048      	beq.n	801bc1c <__gethex+0x3f4>
 801bb8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801bb8e:	2b02      	cmp	r3, #2
 801bb90:	d015      	beq.n	801bbbe <__gethex+0x396>
 801bb92:	2b03      	cmp	r3, #3
 801bb94:	d017      	beq.n	801bbc6 <__gethex+0x39e>
 801bb96:	2b01      	cmp	r3, #1
 801bb98:	d109      	bne.n	801bbae <__gethex+0x386>
 801bb9a:	f01a 0f02 	tst.w	sl, #2
 801bb9e:	d006      	beq.n	801bbae <__gethex+0x386>
 801bba0:	f8d9 0000 	ldr.w	r0, [r9]
 801bba4:	ea4a 0a00 	orr.w	sl, sl, r0
 801bba8:	f01a 0f01 	tst.w	sl, #1
 801bbac:	d10e      	bne.n	801bbcc <__gethex+0x3a4>
 801bbae:	f047 0710 	orr.w	r7, r7, #16
 801bbb2:	e033      	b.n	801bc1c <__gethex+0x3f4>
 801bbb4:	f04f 0a01 	mov.w	sl, #1
 801bbb8:	e7d0      	b.n	801bb5c <__gethex+0x334>
 801bbba:	2701      	movs	r7, #1
 801bbbc:	e7e2      	b.n	801bb84 <__gethex+0x35c>
 801bbbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bbc0:	f1c3 0301 	rsb	r3, r3, #1
 801bbc4:	9315      	str	r3, [sp, #84]	; 0x54
 801bbc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bbc8:	2b00      	cmp	r3, #0
 801bbca:	d0f0      	beq.n	801bbae <__gethex+0x386>
 801bbcc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801bbd0:	f104 0314 	add.w	r3, r4, #20
 801bbd4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801bbd8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801bbdc:	f04f 0c00 	mov.w	ip, #0
 801bbe0:	4618      	mov	r0, r3
 801bbe2:	f853 2b04 	ldr.w	r2, [r3], #4
 801bbe6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801bbea:	d01c      	beq.n	801bc26 <__gethex+0x3fe>
 801bbec:	3201      	adds	r2, #1
 801bbee:	6002      	str	r2, [r0, #0]
 801bbf0:	2f02      	cmp	r7, #2
 801bbf2:	f104 0314 	add.w	r3, r4, #20
 801bbf6:	d13f      	bne.n	801bc78 <__gethex+0x450>
 801bbf8:	f8d8 2000 	ldr.w	r2, [r8]
 801bbfc:	3a01      	subs	r2, #1
 801bbfe:	42b2      	cmp	r2, r6
 801bc00:	d10a      	bne.n	801bc18 <__gethex+0x3f0>
 801bc02:	1171      	asrs	r1, r6, #5
 801bc04:	2201      	movs	r2, #1
 801bc06:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801bc0a:	f006 061f 	and.w	r6, r6, #31
 801bc0e:	fa02 f606 	lsl.w	r6, r2, r6
 801bc12:	421e      	tst	r6, r3
 801bc14:	bf18      	it	ne
 801bc16:	4617      	movne	r7, r2
 801bc18:	f047 0720 	orr.w	r7, r7, #32
 801bc1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801bc1e:	601c      	str	r4, [r3, #0]
 801bc20:	9b04      	ldr	r3, [sp, #16]
 801bc22:	601d      	str	r5, [r3, #0]
 801bc24:	e695      	b.n	801b952 <__gethex+0x12a>
 801bc26:	4299      	cmp	r1, r3
 801bc28:	f843 cc04 	str.w	ip, [r3, #-4]
 801bc2c:	d8d8      	bhi.n	801bbe0 <__gethex+0x3b8>
 801bc2e:	68a3      	ldr	r3, [r4, #8]
 801bc30:	459b      	cmp	fp, r3
 801bc32:	db19      	blt.n	801bc68 <__gethex+0x440>
 801bc34:	6861      	ldr	r1, [r4, #4]
 801bc36:	ee18 0a10 	vmov	r0, s16
 801bc3a:	3101      	adds	r1, #1
 801bc3c:	f000 f930 	bl	801bea0 <_Balloc>
 801bc40:	4681      	mov	r9, r0
 801bc42:	b918      	cbnz	r0, 801bc4c <__gethex+0x424>
 801bc44:	4b1a      	ldr	r3, [pc, #104]	; (801bcb0 <__gethex+0x488>)
 801bc46:	4602      	mov	r2, r0
 801bc48:	2184      	movs	r1, #132	; 0x84
 801bc4a:	e6a8      	b.n	801b99e <__gethex+0x176>
 801bc4c:	6922      	ldr	r2, [r4, #16]
 801bc4e:	3202      	adds	r2, #2
 801bc50:	f104 010c 	add.w	r1, r4, #12
 801bc54:	0092      	lsls	r2, r2, #2
 801bc56:	300c      	adds	r0, #12
 801bc58:	f7fd f802 	bl	8018c60 <memcpy>
 801bc5c:	4621      	mov	r1, r4
 801bc5e:	ee18 0a10 	vmov	r0, s16
 801bc62:	f000 f95d 	bl	801bf20 <_Bfree>
 801bc66:	464c      	mov	r4, r9
 801bc68:	6923      	ldr	r3, [r4, #16]
 801bc6a:	1c5a      	adds	r2, r3, #1
 801bc6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801bc70:	6122      	str	r2, [r4, #16]
 801bc72:	2201      	movs	r2, #1
 801bc74:	615a      	str	r2, [r3, #20]
 801bc76:	e7bb      	b.n	801bbf0 <__gethex+0x3c8>
 801bc78:	6922      	ldr	r2, [r4, #16]
 801bc7a:	455a      	cmp	r2, fp
 801bc7c:	dd0b      	ble.n	801bc96 <__gethex+0x46e>
 801bc7e:	2101      	movs	r1, #1
 801bc80:	4620      	mov	r0, r4
 801bc82:	f7ff fd69 	bl	801b758 <rshift>
 801bc86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801bc8a:	3501      	adds	r5, #1
 801bc8c:	42ab      	cmp	r3, r5
 801bc8e:	f6ff aed0 	blt.w	801ba32 <__gethex+0x20a>
 801bc92:	2701      	movs	r7, #1
 801bc94:	e7c0      	b.n	801bc18 <__gethex+0x3f0>
 801bc96:	f016 061f 	ands.w	r6, r6, #31
 801bc9a:	d0fa      	beq.n	801bc92 <__gethex+0x46a>
 801bc9c:	449a      	add	sl, r3
 801bc9e:	f1c6 0620 	rsb	r6, r6, #32
 801bca2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801bca6:	f000 f9f1 	bl	801c08c <__hi0bits>
 801bcaa:	42b0      	cmp	r0, r6
 801bcac:	dbe7      	blt.n	801bc7e <__gethex+0x456>
 801bcae:	e7f0      	b.n	801bc92 <__gethex+0x46a>
 801bcb0:	08020bc4 	.word	0x08020bc4

0801bcb4 <L_shift>:
 801bcb4:	f1c2 0208 	rsb	r2, r2, #8
 801bcb8:	0092      	lsls	r2, r2, #2
 801bcba:	b570      	push	{r4, r5, r6, lr}
 801bcbc:	f1c2 0620 	rsb	r6, r2, #32
 801bcc0:	6843      	ldr	r3, [r0, #4]
 801bcc2:	6804      	ldr	r4, [r0, #0]
 801bcc4:	fa03 f506 	lsl.w	r5, r3, r6
 801bcc8:	432c      	orrs	r4, r5
 801bcca:	40d3      	lsrs	r3, r2
 801bccc:	6004      	str	r4, [r0, #0]
 801bcce:	f840 3f04 	str.w	r3, [r0, #4]!
 801bcd2:	4288      	cmp	r0, r1
 801bcd4:	d3f4      	bcc.n	801bcc0 <L_shift+0xc>
 801bcd6:	bd70      	pop	{r4, r5, r6, pc}

0801bcd8 <__match>:
 801bcd8:	b530      	push	{r4, r5, lr}
 801bcda:	6803      	ldr	r3, [r0, #0]
 801bcdc:	3301      	adds	r3, #1
 801bcde:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bce2:	b914      	cbnz	r4, 801bcea <__match+0x12>
 801bce4:	6003      	str	r3, [r0, #0]
 801bce6:	2001      	movs	r0, #1
 801bce8:	bd30      	pop	{r4, r5, pc}
 801bcea:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bcee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801bcf2:	2d19      	cmp	r5, #25
 801bcf4:	bf98      	it	ls
 801bcf6:	3220      	addls	r2, #32
 801bcf8:	42a2      	cmp	r2, r4
 801bcfa:	d0f0      	beq.n	801bcde <__match+0x6>
 801bcfc:	2000      	movs	r0, #0
 801bcfe:	e7f3      	b.n	801bce8 <__match+0x10>

0801bd00 <__hexnan>:
 801bd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd04:	680b      	ldr	r3, [r1, #0]
 801bd06:	6801      	ldr	r1, [r0, #0]
 801bd08:	115e      	asrs	r6, r3, #5
 801bd0a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801bd0e:	f013 031f 	ands.w	r3, r3, #31
 801bd12:	b087      	sub	sp, #28
 801bd14:	bf18      	it	ne
 801bd16:	3604      	addne	r6, #4
 801bd18:	2500      	movs	r5, #0
 801bd1a:	1f37      	subs	r7, r6, #4
 801bd1c:	4682      	mov	sl, r0
 801bd1e:	4690      	mov	r8, r2
 801bd20:	9301      	str	r3, [sp, #4]
 801bd22:	f846 5c04 	str.w	r5, [r6, #-4]
 801bd26:	46b9      	mov	r9, r7
 801bd28:	463c      	mov	r4, r7
 801bd2a:	9502      	str	r5, [sp, #8]
 801bd2c:	46ab      	mov	fp, r5
 801bd2e:	784a      	ldrb	r2, [r1, #1]
 801bd30:	1c4b      	adds	r3, r1, #1
 801bd32:	9303      	str	r3, [sp, #12]
 801bd34:	b342      	cbz	r2, 801bd88 <__hexnan+0x88>
 801bd36:	4610      	mov	r0, r2
 801bd38:	9105      	str	r1, [sp, #20]
 801bd3a:	9204      	str	r2, [sp, #16]
 801bd3c:	f7ff fd5e 	bl	801b7fc <__hexdig_fun>
 801bd40:	2800      	cmp	r0, #0
 801bd42:	d14f      	bne.n	801bde4 <__hexnan+0xe4>
 801bd44:	9a04      	ldr	r2, [sp, #16]
 801bd46:	9905      	ldr	r1, [sp, #20]
 801bd48:	2a20      	cmp	r2, #32
 801bd4a:	d818      	bhi.n	801bd7e <__hexnan+0x7e>
 801bd4c:	9b02      	ldr	r3, [sp, #8]
 801bd4e:	459b      	cmp	fp, r3
 801bd50:	dd13      	ble.n	801bd7a <__hexnan+0x7a>
 801bd52:	454c      	cmp	r4, r9
 801bd54:	d206      	bcs.n	801bd64 <__hexnan+0x64>
 801bd56:	2d07      	cmp	r5, #7
 801bd58:	dc04      	bgt.n	801bd64 <__hexnan+0x64>
 801bd5a:	462a      	mov	r2, r5
 801bd5c:	4649      	mov	r1, r9
 801bd5e:	4620      	mov	r0, r4
 801bd60:	f7ff ffa8 	bl	801bcb4 <L_shift>
 801bd64:	4544      	cmp	r4, r8
 801bd66:	d950      	bls.n	801be0a <__hexnan+0x10a>
 801bd68:	2300      	movs	r3, #0
 801bd6a:	f1a4 0904 	sub.w	r9, r4, #4
 801bd6e:	f844 3c04 	str.w	r3, [r4, #-4]
 801bd72:	f8cd b008 	str.w	fp, [sp, #8]
 801bd76:	464c      	mov	r4, r9
 801bd78:	461d      	mov	r5, r3
 801bd7a:	9903      	ldr	r1, [sp, #12]
 801bd7c:	e7d7      	b.n	801bd2e <__hexnan+0x2e>
 801bd7e:	2a29      	cmp	r2, #41	; 0x29
 801bd80:	d156      	bne.n	801be30 <__hexnan+0x130>
 801bd82:	3102      	adds	r1, #2
 801bd84:	f8ca 1000 	str.w	r1, [sl]
 801bd88:	f1bb 0f00 	cmp.w	fp, #0
 801bd8c:	d050      	beq.n	801be30 <__hexnan+0x130>
 801bd8e:	454c      	cmp	r4, r9
 801bd90:	d206      	bcs.n	801bda0 <__hexnan+0xa0>
 801bd92:	2d07      	cmp	r5, #7
 801bd94:	dc04      	bgt.n	801bda0 <__hexnan+0xa0>
 801bd96:	462a      	mov	r2, r5
 801bd98:	4649      	mov	r1, r9
 801bd9a:	4620      	mov	r0, r4
 801bd9c:	f7ff ff8a 	bl	801bcb4 <L_shift>
 801bda0:	4544      	cmp	r4, r8
 801bda2:	d934      	bls.n	801be0e <__hexnan+0x10e>
 801bda4:	f1a8 0204 	sub.w	r2, r8, #4
 801bda8:	4623      	mov	r3, r4
 801bdaa:	f853 1b04 	ldr.w	r1, [r3], #4
 801bdae:	f842 1f04 	str.w	r1, [r2, #4]!
 801bdb2:	429f      	cmp	r7, r3
 801bdb4:	d2f9      	bcs.n	801bdaa <__hexnan+0xaa>
 801bdb6:	1b3b      	subs	r3, r7, r4
 801bdb8:	f023 0303 	bic.w	r3, r3, #3
 801bdbc:	3304      	adds	r3, #4
 801bdbe:	3401      	adds	r4, #1
 801bdc0:	3e03      	subs	r6, #3
 801bdc2:	42b4      	cmp	r4, r6
 801bdc4:	bf88      	it	hi
 801bdc6:	2304      	movhi	r3, #4
 801bdc8:	4443      	add	r3, r8
 801bdca:	2200      	movs	r2, #0
 801bdcc:	f843 2b04 	str.w	r2, [r3], #4
 801bdd0:	429f      	cmp	r7, r3
 801bdd2:	d2fb      	bcs.n	801bdcc <__hexnan+0xcc>
 801bdd4:	683b      	ldr	r3, [r7, #0]
 801bdd6:	b91b      	cbnz	r3, 801bde0 <__hexnan+0xe0>
 801bdd8:	4547      	cmp	r7, r8
 801bdda:	d127      	bne.n	801be2c <__hexnan+0x12c>
 801bddc:	2301      	movs	r3, #1
 801bdde:	603b      	str	r3, [r7, #0]
 801bde0:	2005      	movs	r0, #5
 801bde2:	e026      	b.n	801be32 <__hexnan+0x132>
 801bde4:	3501      	adds	r5, #1
 801bde6:	2d08      	cmp	r5, #8
 801bde8:	f10b 0b01 	add.w	fp, fp, #1
 801bdec:	dd06      	ble.n	801bdfc <__hexnan+0xfc>
 801bdee:	4544      	cmp	r4, r8
 801bdf0:	d9c3      	bls.n	801bd7a <__hexnan+0x7a>
 801bdf2:	2300      	movs	r3, #0
 801bdf4:	f844 3c04 	str.w	r3, [r4, #-4]
 801bdf8:	2501      	movs	r5, #1
 801bdfa:	3c04      	subs	r4, #4
 801bdfc:	6822      	ldr	r2, [r4, #0]
 801bdfe:	f000 000f 	and.w	r0, r0, #15
 801be02:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801be06:	6022      	str	r2, [r4, #0]
 801be08:	e7b7      	b.n	801bd7a <__hexnan+0x7a>
 801be0a:	2508      	movs	r5, #8
 801be0c:	e7b5      	b.n	801bd7a <__hexnan+0x7a>
 801be0e:	9b01      	ldr	r3, [sp, #4]
 801be10:	2b00      	cmp	r3, #0
 801be12:	d0df      	beq.n	801bdd4 <__hexnan+0xd4>
 801be14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801be18:	f1c3 0320 	rsb	r3, r3, #32
 801be1c:	fa22 f303 	lsr.w	r3, r2, r3
 801be20:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801be24:	401a      	ands	r2, r3
 801be26:	f846 2c04 	str.w	r2, [r6, #-4]
 801be2a:	e7d3      	b.n	801bdd4 <__hexnan+0xd4>
 801be2c:	3f04      	subs	r7, #4
 801be2e:	e7d1      	b.n	801bdd4 <__hexnan+0xd4>
 801be30:	2004      	movs	r0, #4
 801be32:	b007      	add	sp, #28
 801be34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801be38 <_localeconv_r>:
 801be38:	4800      	ldr	r0, [pc, #0]	; (801be3c <_localeconv_r+0x4>)
 801be3a:	4770      	bx	lr
 801be3c:	20000228 	.word	0x20000228

0801be40 <_lseek_r>:
 801be40:	b538      	push	{r3, r4, r5, lr}
 801be42:	4d07      	ldr	r5, [pc, #28]	; (801be60 <_lseek_r+0x20>)
 801be44:	4604      	mov	r4, r0
 801be46:	4608      	mov	r0, r1
 801be48:	4611      	mov	r1, r2
 801be4a:	2200      	movs	r2, #0
 801be4c:	602a      	str	r2, [r5, #0]
 801be4e:	461a      	mov	r2, r3
 801be50:	f7f1 f8ee 	bl	800d030 <_lseek>
 801be54:	1c43      	adds	r3, r0, #1
 801be56:	d102      	bne.n	801be5e <_lseek_r+0x1e>
 801be58:	682b      	ldr	r3, [r5, #0]
 801be5a:	b103      	cbz	r3, 801be5e <_lseek_r+0x1e>
 801be5c:	6023      	str	r3, [r4, #0]
 801be5e:	bd38      	pop	{r3, r4, r5, pc}
 801be60:	2000a50c 	.word	0x2000a50c

0801be64 <__ascii_mbtowc>:
 801be64:	b082      	sub	sp, #8
 801be66:	b901      	cbnz	r1, 801be6a <__ascii_mbtowc+0x6>
 801be68:	a901      	add	r1, sp, #4
 801be6a:	b142      	cbz	r2, 801be7e <__ascii_mbtowc+0x1a>
 801be6c:	b14b      	cbz	r3, 801be82 <__ascii_mbtowc+0x1e>
 801be6e:	7813      	ldrb	r3, [r2, #0]
 801be70:	600b      	str	r3, [r1, #0]
 801be72:	7812      	ldrb	r2, [r2, #0]
 801be74:	1e10      	subs	r0, r2, #0
 801be76:	bf18      	it	ne
 801be78:	2001      	movne	r0, #1
 801be7a:	b002      	add	sp, #8
 801be7c:	4770      	bx	lr
 801be7e:	4610      	mov	r0, r2
 801be80:	e7fb      	b.n	801be7a <__ascii_mbtowc+0x16>
 801be82:	f06f 0001 	mvn.w	r0, #1
 801be86:	e7f8      	b.n	801be7a <__ascii_mbtowc+0x16>

0801be88 <__malloc_lock>:
 801be88:	4801      	ldr	r0, [pc, #4]	; (801be90 <__malloc_lock+0x8>)
 801be8a:	f001 b885 	b.w	801cf98 <__retarget_lock_acquire_recursive>
 801be8e:	bf00      	nop
 801be90:	2000a514 	.word	0x2000a514

0801be94 <__malloc_unlock>:
 801be94:	4801      	ldr	r0, [pc, #4]	; (801be9c <__malloc_unlock+0x8>)
 801be96:	f001 b880 	b.w	801cf9a <__retarget_lock_release_recursive>
 801be9a:	bf00      	nop
 801be9c:	2000a514 	.word	0x2000a514

0801bea0 <_Balloc>:
 801bea0:	b570      	push	{r4, r5, r6, lr}
 801bea2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801bea4:	4604      	mov	r4, r0
 801bea6:	460d      	mov	r5, r1
 801bea8:	b976      	cbnz	r6, 801bec8 <_Balloc+0x28>
 801beaa:	2010      	movs	r0, #16
 801beac:	f7fc fec8 	bl	8018c40 <malloc>
 801beb0:	4602      	mov	r2, r0
 801beb2:	6260      	str	r0, [r4, #36]	; 0x24
 801beb4:	b920      	cbnz	r0, 801bec0 <_Balloc+0x20>
 801beb6:	4b18      	ldr	r3, [pc, #96]	; (801bf18 <_Balloc+0x78>)
 801beb8:	4818      	ldr	r0, [pc, #96]	; (801bf1c <_Balloc+0x7c>)
 801beba:	2166      	movs	r1, #102	; 0x66
 801bebc:	f000 fe84 	bl	801cbc8 <__assert_func>
 801bec0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801bec4:	6006      	str	r6, [r0, #0]
 801bec6:	60c6      	str	r6, [r0, #12]
 801bec8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801beca:	68f3      	ldr	r3, [r6, #12]
 801becc:	b183      	cbz	r3, 801bef0 <_Balloc+0x50>
 801bece:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bed0:	68db      	ldr	r3, [r3, #12]
 801bed2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801bed6:	b9b8      	cbnz	r0, 801bf08 <_Balloc+0x68>
 801bed8:	2101      	movs	r1, #1
 801beda:	fa01 f605 	lsl.w	r6, r1, r5
 801bede:	1d72      	adds	r2, r6, #5
 801bee0:	0092      	lsls	r2, r2, #2
 801bee2:	4620      	mov	r0, r4
 801bee4:	f000 fc97 	bl	801c816 <_calloc_r>
 801bee8:	b160      	cbz	r0, 801bf04 <_Balloc+0x64>
 801beea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801beee:	e00e      	b.n	801bf0e <_Balloc+0x6e>
 801bef0:	2221      	movs	r2, #33	; 0x21
 801bef2:	2104      	movs	r1, #4
 801bef4:	4620      	mov	r0, r4
 801bef6:	f000 fc8e 	bl	801c816 <_calloc_r>
 801befa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801befc:	60f0      	str	r0, [r6, #12]
 801befe:	68db      	ldr	r3, [r3, #12]
 801bf00:	2b00      	cmp	r3, #0
 801bf02:	d1e4      	bne.n	801bece <_Balloc+0x2e>
 801bf04:	2000      	movs	r0, #0
 801bf06:	bd70      	pop	{r4, r5, r6, pc}
 801bf08:	6802      	ldr	r2, [r0, #0]
 801bf0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801bf0e:	2300      	movs	r3, #0
 801bf10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801bf14:	e7f7      	b.n	801bf06 <_Balloc+0x66>
 801bf16:	bf00      	nop
 801bf18:	08020b4e 	.word	0x08020b4e
 801bf1c:	08020c54 	.word	0x08020c54

0801bf20 <_Bfree>:
 801bf20:	b570      	push	{r4, r5, r6, lr}
 801bf22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801bf24:	4605      	mov	r5, r0
 801bf26:	460c      	mov	r4, r1
 801bf28:	b976      	cbnz	r6, 801bf48 <_Bfree+0x28>
 801bf2a:	2010      	movs	r0, #16
 801bf2c:	f7fc fe88 	bl	8018c40 <malloc>
 801bf30:	4602      	mov	r2, r0
 801bf32:	6268      	str	r0, [r5, #36]	; 0x24
 801bf34:	b920      	cbnz	r0, 801bf40 <_Bfree+0x20>
 801bf36:	4b09      	ldr	r3, [pc, #36]	; (801bf5c <_Bfree+0x3c>)
 801bf38:	4809      	ldr	r0, [pc, #36]	; (801bf60 <_Bfree+0x40>)
 801bf3a:	218a      	movs	r1, #138	; 0x8a
 801bf3c:	f000 fe44 	bl	801cbc8 <__assert_func>
 801bf40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801bf44:	6006      	str	r6, [r0, #0]
 801bf46:	60c6      	str	r6, [r0, #12]
 801bf48:	b13c      	cbz	r4, 801bf5a <_Bfree+0x3a>
 801bf4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801bf4c:	6862      	ldr	r2, [r4, #4]
 801bf4e:	68db      	ldr	r3, [r3, #12]
 801bf50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801bf54:	6021      	str	r1, [r4, #0]
 801bf56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801bf5a:	bd70      	pop	{r4, r5, r6, pc}
 801bf5c:	08020b4e 	.word	0x08020b4e
 801bf60:	08020c54 	.word	0x08020c54

0801bf64 <__multadd>:
 801bf64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf68:	690e      	ldr	r6, [r1, #16]
 801bf6a:	4607      	mov	r7, r0
 801bf6c:	4698      	mov	r8, r3
 801bf6e:	460c      	mov	r4, r1
 801bf70:	f101 0014 	add.w	r0, r1, #20
 801bf74:	2300      	movs	r3, #0
 801bf76:	6805      	ldr	r5, [r0, #0]
 801bf78:	b2a9      	uxth	r1, r5
 801bf7a:	fb02 8101 	mla	r1, r2, r1, r8
 801bf7e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801bf82:	0c2d      	lsrs	r5, r5, #16
 801bf84:	fb02 c505 	mla	r5, r2, r5, ip
 801bf88:	b289      	uxth	r1, r1
 801bf8a:	3301      	adds	r3, #1
 801bf8c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801bf90:	429e      	cmp	r6, r3
 801bf92:	f840 1b04 	str.w	r1, [r0], #4
 801bf96:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801bf9a:	dcec      	bgt.n	801bf76 <__multadd+0x12>
 801bf9c:	f1b8 0f00 	cmp.w	r8, #0
 801bfa0:	d022      	beq.n	801bfe8 <__multadd+0x84>
 801bfa2:	68a3      	ldr	r3, [r4, #8]
 801bfa4:	42b3      	cmp	r3, r6
 801bfa6:	dc19      	bgt.n	801bfdc <__multadd+0x78>
 801bfa8:	6861      	ldr	r1, [r4, #4]
 801bfaa:	4638      	mov	r0, r7
 801bfac:	3101      	adds	r1, #1
 801bfae:	f7ff ff77 	bl	801bea0 <_Balloc>
 801bfb2:	4605      	mov	r5, r0
 801bfb4:	b928      	cbnz	r0, 801bfc2 <__multadd+0x5e>
 801bfb6:	4602      	mov	r2, r0
 801bfb8:	4b0d      	ldr	r3, [pc, #52]	; (801bff0 <__multadd+0x8c>)
 801bfba:	480e      	ldr	r0, [pc, #56]	; (801bff4 <__multadd+0x90>)
 801bfbc:	21b5      	movs	r1, #181	; 0xb5
 801bfbe:	f000 fe03 	bl	801cbc8 <__assert_func>
 801bfc2:	6922      	ldr	r2, [r4, #16]
 801bfc4:	3202      	adds	r2, #2
 801bfc6:	f104 010c 	add.w	r1, r4, #12
 801bfca:	0092      	lsls	r2, r2, #2
 801bfcc:	300c      	adds	r0, #12
 801bfce:	f7fc fe47 	bl	8018c60 <memcpy>
 801bfd2:	4621      	mov	r1, r4
 801bfd4:	4638      	mov	r0, r7
 801bfd6:	f7ff ffa3 	bl	801bf20 <_Bfree>
 801bfda:	462c      	mov	r4, r5
 801bfdc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801bfe0:	3601      	adds	r6, #1
 801bfe2:	f8c3 8014 	str.w	r8, [r3, #20]
 801bfe6:	6126      	str	r6, [r4, #16]
 801bfe8:	4620      	mov	r0, r4
 801bfea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bfee:	bf00      	nop
 801bff0:	08020bc4 	.word	0x08020bc4
 801bff4:	08020c54 	.word	0x08020c54

0801bff8 <__s2b>:
 801bff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bffc:	460c      	mov	r4, r1
 801bffe:	4615      	mov	r5, r2
 801c000:	461f      	mov	r7, r3
 801c002:	2209      	movs	r2, #9
 801c004:	3308      	adds	r3, #8
 801c006:	4606      	mov	r6, r0
 801c008:	fb93 f3f2 	sdiv	r3, r3, r2
 801c00c:	2100      	movs	r1, #0
 801c00e:	2201      	movs	r2, #1
 801c010:	429a      	cmp	r2, r3
 801c012:	db09      	blt.n	801c028 <__s2b+0x30>
 801c014:	4630      	mov	r0, r6
 801c016:	f7ff ff43 	bl	801bea0 <_Balloc>
 801c01a:	b940      	cbnz	r0, 801c02e <__s2b+0x36>
 801c01c:	4602      	mov	r2, r0
 801c01e:	4b19      	ldr	r3, [pc, #100]	; (801c084 <__s2b+0x8c>)
 801c020:	4819      	ldr	r0, [pc, #100]	; (801c088 <__s2b+0x90>)
 801c022:	21ce      	movs	r1, #206	; 0xce
 801c024:	f000 fdd0 	bl	801cbc8 <__assert_func>
 801c028:	0052      	lsls	r2, r2, #1
 801c02a:	3101      	adds	r1, #1
 801c02c:	e7f0      	b.n	801c010 <__s2b+0x18>
 801c02e:	9b08      	ldr	r3, [sp, #32]
 801c030:	6143      	str	r3, [r0, #20]
 801c032:	2d09      	cmp	r5, #9
 801c034:	f04f 0301 	mov.w	r3, #1
 801c038:	6103      	str	r3, [r0, #16]
 801c03a:	dd16      	ble.n	801c06a <__s2b+0x72>
 801c03c:	f104 0909 	add.w	r9, r4, #9
 801c040:	46c8      	mov	r8, r9
 801c042:	442c      	add	r4, r5
 801c044:	f818 3b01 	ldrb.w	r3, [r8], #1
 801c048:	4601      	mov	r1, r0
 801c04a:	3b30      	subs	r3, #48	; 0x30
 801c04c:	220a      	movs	r2, #10
 801c04e:	4630      	mov	r0, r6
 801c050:	f7ff ff88 	bl	801bf64 <__multadd>
 801c054:	45a0      	cmp	r8, r4
 801c056:	d1f5      	bne.n	801c044 <__s2b+0x4c>
 801c058:	f1a5 0408 	sub.w	r4, r5, #8
 801c05c:	444c      	add	r4, r9
 801c05e:	1b2d      	subs	r5, r5, r4
 801c060:	1963      	adds	r3, r4, r5
 801c062:	42bb      	cmp	r3, r7
 801c064:	db04      	blt.n	801c070 <__s2b+0x78>
 801c066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c06a:	340a      	adds	r4, #10
 801c06c:	2509      	movs	r5, #9
 801c06e:	e7f6      	b.n	801c05e <__s2b+0x66>
 801c070:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c074:	4601      	mov	r1, r0
 801c076:	3b30      	subs	r3, #48	; 0x30
 801c078:	220a      	movs	r2, #10
 801c07a:	4630      	mov	r0, r6
 801c07c:	f7ff ff72 	bl	801bf64 <__multadd>
 801c080:	e7ee      	b.n	801c060 <__s2b+0x68>
 801c082:	bf00      	nop
 801c084:	08020bc4 	.word	0x08020bc4
 801c088:	08020c54 	.word	0x08020c54

0801c08c <__hi0bits>:
 801c08c:	0c03      	lsrs	r3, r0, #16
 801c08e:	041b      	lsls	r3, r3, #16
 801c090:	b9d3      	cbnz	r3, 801c0c8 <__hi0bits+0x3c>
 801c092:	0400      	lsls	r0, r0, #16
 801c094:	2310      	movs	r3, #16
 801c096:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801c09a:	bf04      	itt	eq
 801c09c:	0200      	lsleq	r0, r0, #8
 801c09e:	3308      	addeq	r3, #8
 801c0a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801c0a4:	bf04      	itt	eq
 801c0a6:	0100      	lsleq	r0, r0, #4
 801c0a8:	3304      	addeq	r3, #4
 801c0aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801c0ae:	bf04      	itt	eq
 801c0b0:	0080      	lsleq	r0, r0, #2
 801c0b2:	3302      	addeq	r3, #2
 801c0b4:	2800      	cmp	r0, #0
 801c0b6:	db05      	blt.n	801c0c4 <__hi0bits+0x38>
 801c0b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801c0bc:	f103 0301 	add.w	r3, r3, #1
 801c0c0:	bf08      	it	eq
 801c0c2:	2320      	moveq	r3, #32
 801c0c4:	4618      	mov	r0, r3
 801c0c6:	4770      	bx	lr
 801c0c8:	2300      	movs	r3, #0
 801c0ca:	e7e4      	b.n	801c096 <__hi0bits+0xa>

0801c0cc <__lo0bits>:
 801c0cc:	6803      	ldr	r3, [r0, #0]
 801c0ce:	f013 0207 	ands.w	r2, r3, #7
 801c0d2:	4601      	mov	r1, r0
 801c0d4:	d00b      	beq.n	801c0ee <__lo0bits+0x22>
 801c0d6:	07da      	lsls	r2, r3, #31
 801c0d8:	d424      	bmi.n	801c124 <__lo0bits+0x58>
 801c0da:	0798      	lsls	r0, r3, #30
 801c0dc:	bf49      	itett	mi
 801c0de:	085b      	lsrmi	r3, r3, #1
 801c0e0:	089b      	lsrpl	r3, r3, #2
 801c0e2:	2001      	movmi	r0, #1
 801c0e4:	600b      	strmi	r3, [r1, #0]
 801c0e6:	bf5c      	itt	pl
 801c0e8:	600b      	strpl	r3, [r1, #0]
 801c0ea:	2002      	movpl	r0, #2
 801c0ec:	4770      	bx	lr
 801c0ee:	b298      	uxth	r0, r3
 801c0f0:	b9b0      	cbnz	r0, 801c120 <__lo0bits+0x54>
 801c0f2:	0c1b      	lsrs	r3, r3, #16
 801c0f4:	2010      	movs	r0, #16
 801c0f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 801c0fa:	bf04      	itt	eq
 801c0fc:	0a1b      	lsreq	r3, r3, #8
 801c0fe:	3008      	addeq	r0, #8
 801c100:	071a      	lsls	r2, r3, #28
 801c102:	bf04      	itt	eq
 801c104:	091b      	lsreq	r3, r3, #4
 801c106:	3004      	addeq	r0, #4
 801c108:	079a      	lsls	r2, r3, #30
 801c10a:	bf04      	itt	eq
 801c10c:	089b      	lsreq	r3, r3, #2
 801c10e:	3002      	addeq	r0, #2
 801c110:	07da      	lsls	r2, r3, #31
 801c112:	d403      	bmi.n	801c11c <__lo0bits+0x50>
 801c114:	085b      	lsrs	r3, r3, #1
 801c116:	f100 0001 	add.w	r0, r0, #1
 801c11a:	d005      	beq.n	801c128 <__lo0bits+0x5c>
 801c11c:	600b      	str	r3, [r1, #0]
 801c11e:	4770      	bx	lr
 801c120:	4610      	mov	r0, r2
 801c122:	e7e8      	b.n	801c0f6 <__lo0bits+0x2a>
 801c124:	2000      	movs	r0, #0
 801c126:	4770      	bx	lr
 801c128:	2020      	movs	r0, #32
 801c12a:	4770      	bx	lr

0801c12c <__i2b>:
 801c12c:	b510      	push	{r4, lr}
 801c12e:	460c      	mov	r4, r1
 801c130:	2101      	movs	r1, #1
 801c132:	f7ff feb5 	bl	801bea0 <_Balloc>
 801c136:	4602      	mov	r2, r0
 801c138:	b928      	cbnz	r0, 801c146 <__i2b+0x1a>
 801c13a:	4b05      	ldr	r3, [pc, #20]	; (801c150 <__i2b+0x24>)
 801c13c:	4805      	ldr	r0, [pc, #20]	; (801c154 <__i2b+0x28>)
 801c13e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801c142:	f000 fd41 	bl	801cbc8 <__assert_func>
 801c146:	2301      	movs	r3, #1
 801c148:	6144      	str	r4, [r0, #20]
 801c14a:	6103      	str	r3, [r0, #16]
 801c14c:	bd10      	pop	{r4, pc}
 801c14e:	bf00      	nop
 801c150:	08020bc4 	.word	0x08020bc4
 801c154:	08020c54 	.word	0x08020c54

0801c158 <__multiply>:
 801c158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c15c:	4614      	mov	r4, r2
 801c15e:	690a      	ldr	r2, [r1, #16]
 801c160:	6923      	ldr	r3, [r4, #16]
 801c162:	429a      	cmp	r2, r3
 801c164:	bfb8      	it	lt
 801c166:	460b      	movlt	r3, r1
 801c168:	460d      	mov	r5, r1
 801c16a:	bfbc      	itt	lt
 801c16c:	4625      	movlt	r5, r4
 801c16e:	461c      	movlt	r4, r3
 801c170:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801c174:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801c178:	68ab      	ldr	r3, [r5, #8]
 801c17a:	6869      	ldr	r1, [r5, #4]
 801c17c:	eb0a 0709 	add.w	r7, sl, r9
 801c180:	42bb      	cmp	r3, r7
 801c182:	b085      	sub	sp, #20
 801c184:	bfb8      	it	lt
 801c186:	3101      	addlt	r1, #1
 801c188:	f7ff fe8a 	bl	801bea0 <_Balloc>
 801c18c:	b930      	cbnz	r0, 801c19c <__multiply+0x44>
 801c18e:	4602      	mov	r2, r0
 801c190:	4b42      	ldr	r3, [pc, #264]	; (801c29c <__multiply+0x144>)
 801c192:	4843      	ldr	r0, [pc, #268]	; (801c2a0 <__multiply+0x148>)
 801c194:	f240 115d 	movw	r1, #349	; 0x15d
 801c198:	f000 fd16 	bl	801cbc8 <__assert_func>
 801c19c:	f100 0614 	add.w	r6, r0, #20
 801c1a0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801c1a4:	4633      	mov	r3, r6
 801c1a6:	2200      	movs	r2, #0
 801c1a8:	4543      	cmp	r3, r8
 801c1aa:	d31e      	bcc.n	801c1ea <__multiply+0x92>
 801c1ac:	f105 0c14 	add.w	ip, r5, #20
 801c1b0:	f104 0314 	add.w	r3, r4, #20
 801c1b4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801c1b8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801c1bc:	9202      	str	r2, [sp, #8]
 801c1be:	ebac 0205 	sub.w	r2, ip, r5
 801c1c2:	3a15      	subs	r2, #21
 801c1c4:	f022 0203 	bic.w	r2, r2, #3
 801c1c8:	3204      	adds	r2, #4
 801c1ca:	f105 0115 	add.w	r1, r5, #21
 801c1ce:	458c      	cmp	ip, r1
 801c1d0:	bf38      	it	cc
 801c1d2:	2204      	movcc	r2, #4
 801c1d4:	9201      	str	r2, [sp, #4]
 801c1d6:	9a02      	ldr	r2, [sp, #8]
 801c1d8:	9303      	str	r3, [sp, #12]
 801c1da:	429a      	cmp	r2, r3
 801c1dc:	d808      	bhi.n	801c1f0 <__multiply+0x98>
 801c1de:	2f00      	cmp	r7, #0
 801c1e0:	dc55      	bgt.n	801c28e <__multiply+0x136>
 801c1e2:	6107      	str	r7, [r0, #16]
 801c1e4:	b005      	add	sp, #20
 801c1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1ea:	f843 2b04 	str.w	r2, [r3], #4
 801c1ee:	e7db      	b.n	801c1a8 <__multiply+0x50>
 801c1f0:	f8b3 a000 	ldrh.w	sl, [r3]
 801c1f4:	f1ba 0f00 	cmp.w	sl, #0
 801c1f8:	d020      	beq.n	801c23c <__multiply+0xe4>
 801c1fa:	f105 0e14 	add.w	lr, r5, #20
 801c1fe:	46b1      	mov	r9, r6
 801c200:	2200      	movs	r2, #0
 801c202:	f85e 4b04 	ldr.w	r4, [lr], #4
 801c206:	f8d9 b000 	ldr.w	fp, [r9]
 801c20a:	b2a1      	uxth	r1, r4
 801c20c:	fa1f fb8b 	uxth.w	fp, fp
 801c210:	fb0a b101 	mla	r1, sl, r1, fp
 801c214:	4411      	add	r1, r2
 801c216:	f8d9 2000 	ldr.w	r2, [r9]
 801c21a:	0c24      	lsrs	r4, r4, #16
 801c21c:	0c12      	lsrs	r2, r2, #16
 801c21e:	fb0a 2404 	mla	r4, sl, r4, r2
 801c222:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801c226:	b289      	uxth	r1, r1
 801c228:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801c22c:	45f4      	cmp	ip, lr
 801c22e:	f849 1b04 	str.w	r1, [r9], #4
 801c232:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801c236:	d8e4      	bhi.n	801c202 <__multiply+0xaa>
 801c238:	9901      	ldr	r1, [sp, #4]
 801c23a:	5072      	str	r2, [r6, r1]
 801c23c:	9a03      	ldr	r2, [sp, #12]
 801c23e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801c242:	3304      	adds	r3, #4
 801c244:	f1b9 0f00 	cmp.w	r9, #0
 801c248:	d01f      	beq.n	801c28a <__multiply+0x132>
 801c24a:	6834      	ldr	r4, [r6, #0]
 801c24c:	f105 0114 	add.w	r1, r5, #20
 801c250:	46b6      	mov	lr, r6
 801c252:	f04f 0a00 	mov.w	sl, #0
 801c256:	880a      	ldrh	r2, [r1, #0]
 801c258:	f8be b002 	ldrh.w	fp, [lr, #2]
 801c25c:	fb09 b202 	mla	r2, r9, r2, fp
 801c260:	4492      	add	sl, r2
 801c262:	b2a4      	uxth	r4, r4
 801c264:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801c268:	f84e 4b04 	str.w	r4, [lr], #4
 801c26c:	f851 4b04 	ldr.w	r4, [r1], #4
 801c270:	f8be 2000 	ldrh.w	r2, [lr]
 801c274:	0c24      	lsrs	r4, r4, #16
 801c276:	fb09 2404 	mla	r4, r9, r4, r2
 801c27a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801c27e:	458c      	cmp	ip, r1
 801c280:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801c284:	d8e7      	bhi.n	801c256 <__multiply+0xfe>
 801c286:	9a01      	ldr	r2, [sp, #4]
 801c288:	50b4      	str	r4, [r6, r2]
 801c28a:	3604      	adds	r6, #4
 801c28c:	e7a3      	b.n	801c1d6 <__multiply+0x7e>
 801c28e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801c292:	2b00      	cmp	r3, #0
 801c294:	d1a5      	bne.n	801c1e2 <__multiply+0x8a>
 801c296:	3f01      	subs	r7, #1
 801c298:	e7a1      	b.n	801c1de <__multiply+0x86>
 801c29a:	bf00      	nop
 801c29c:	08020bc4 	.word	0x08020bc4
 801c2a0:	08020c54 	.word	0x08020c54

0801c2a4 <__pow5mult>:
 801c2a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c2a8:	4615      	mov	r5, r2
 801c2aa:	f012 0203 	ands.w	r2, r2, #3
 801c2ae:	4606      	mov	r6, r0
 801c2b0:	460f      	mov	r7, r1
 801c2b2:	d007      	beq.n	801c2c4 <__pow5mult+0x20>
 801c2b4:	4c25      	ldr	r4, [pc, #148]	; (801c34c <__pow5mult+0xa8>)
 801c2b6:	3a01      	subs	r2, #1
 801c2b8:	2300      	movs	r3, #0
 801c2ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c2be:	f7ff fe51 	bl	801bf64 <__multadd>
 801c2c2:	4607      	mov	r7, r0
 801c2c4:	10ad      	asrs	r5, r5, #2
 801c2c6:	d03d      	beq.n	801c344 <__pow5mult+0xa0>
 801c2c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801c2ca:	b97c      	cbnz	r4, 801c2ec <__pow5mult+0x48>
 801c2cc:	2010      	movs	r0, #16
 801c2ce:	f7fc fcb7 	bl	8018c40 <malloc>
 801c2d2:	4602      	mov	r2, r0
 801c2d4:	6270      	str	r0, [r6, #36]	; 0x24
 801c2d6:	b928      	cbnz	r0, 801c2e4 <__pow5mult+0x40>
 801c2d8:	4b1d      	ldr	r3, [pc, #116]	; (801c350 <__pow5mult+0xac>)
 801c2da:	481e      	ldr	r0, [pc, #120]	; (801c354 <__pow5mult+0xb0>)
 801c2dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801c2e0:	f000 fc72 	bl	801cbc8 <__assert_func>
 801c2e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c2e8:	6004      	str	r4, [r0, #0]
 801c2ea:	60c4      	str	r4, [r0, #12]
 801c2ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801c2f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c2f4:	b94c      	cbnz	r4, 801c30a <__pow5mult+0x66>
 801c2f6:	f240 2171 	movw	r1, #625	; 0x271
 801c2fa:	4630      	mov	r0, r6
 801c2fc:	f7ff ff16 	bl	801c12c <__i2b>
 801c300:	2300      	movs	r3, #0
 801c302:	f8c8 0008 	str.w	r0, [r8, #8]
 801c306:	4604      	mov	r4, r0
 801c308:	6003      	str	r3, [r0, #0]
 801c30a:	f04f 0900 	mov.w	r9, #0
 801c30e:	07eb      	lsls	r3, r5, #31
 801c310:	d50a      	bpl.n	801c328 <__pow5mult+0x84>
 801c312:	4639      	mov	r1, r7
 801c314:	4622      	mov	r2, r4
 801c316:	4630      	mov	r0, r6
 801c318:	f7ff ff1e 	bl	801c158 <__multiply>
 801c31c:	4639      	mov	r1, r7
 801c31e:	4680      	mov	r8, r0
 801c320:	4630      	mov	r0, r6
 801c322:	f7ff fdfd 	bl	801bf20 <_Bfree>
 801c326:	4647      	mov	r7, r8
 801c328:	106d      	asrs	r5, r5, #1
 801c32a:	d00b      	beq.n	801c344 <__pow5mult+0xa0>
 801c32c:	6820      	ldr	r0, [r4, #0]
 801c32e:	b938      	cbnz	r0, 801c340 <__pow5mult+0x9c>
 801c330:	4622      	mov	r2, r4
 801c332:	4621      	mov	r1, r4
 801c334:	4630      	mov	r0, r6
 801c336:	f7ff ff0f 	bl	801c158 <__multiply>
 801c33a:	6020      	str	r0, [r4, #0]
 801c33c:	f8c0 9000 	str.w	r9, [r0]
 801c340:	4604      	mov	r4, r0
 801c342:	e7e4      	b.n	801c30e <__pow5mult+0x6a>
 801c344:	4638      	mov	r0, r7
 801c346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c34a:	bf00      	nop
 801c34c:	08020da8 	.word	0x08020da8
 801c350:	08020b4e 	.word	0x08020b4e
 801c354:	08020c54 	.word	0x08020c54

0801c358 <__lshift>:
 801c358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c35c:	460c      	mov	r4, r1
 801c35e:	6849      	ldr	r1, [r1, #4]
 801c360:	6923      	ldr	r3, [r4, #16]
 801c362:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801c366:	68a3      	ldr	r3, [r4, #8]
 801c368:	4607      	mov	r7, r0
 801c36a:	4691      	mov	r9, r2
 801c36c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c370:	f108 0601 	add.w	r6, r8, #1
 801c374:	42b3      	cmp	r3, r6
 801c376:	db0b      	blt.n	801c390 <__lshift+0x38>
 801c378:	4638      	mov	r0, r7
 801c37a:	f7ff fd91 	bl	801bea0 <_Balloc>
 801c37e:	4605      	mov	r5, r0
 801c380:	b948      	cbnz	r0, 801c396 <__lshift+0x3e>
 801c382:	4602      	mov	r2, r0
 801c384:	4b28      	ldr	r3, [pc, #160]	; (801c428 <__lshift+0xd0>)
 801c386:	4829      	ldr	r0, [pc, #164]	; (801c42c <__lshift+0xd4>)
 801c388:	f240 11d9 	movw	r1, #473	; 0x1d9
 801c38c:	f000 fc1c 	bl	801cbc8 <__assert_func>
 801c390:	3101      	adds	r1, #1
 801c392:	005b      	lsls	r3, r3, #1
 801c394:	e7ee      	b.n	801c374 <__lshift+0x1c>
 801c396:	2300      	movs	r3, #0
 801c398:	f100 0114 	add.w	r1, r0, #20
 801c39c:	f100 0210 	add.w	r2, r0, #16
 801c3a0:	4618      	mov	r0, r3
 801c3a2:	4553      	cmp	r3, sl
 801c3a4:	db33      	blt.n	801c40e <__lshift+0xb6>
 801c3a6:	6920      	ldr	r0, [r4, #16]
 801c3a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c3ac:	f104 0314 	add.w	r3, r4, #20
 801c3b0:	f019 091f 	ands.w	r9, r9, #31
 801c3b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c3b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801c3bc:	d02b      	beq.n	801c416 <__lshift+0xbe>
 801c3be:	f1c9 0e20 	rsb	lr, r9, #32
 801c3c2:	468a      	mov	sl, r1
 801c3c4:	2200      	movs	r2, #0
 801c3c6:	6818      	ldr	r0, [r3, #0]
 801c3c8:	fa00 f009 	lsl.w	r0, r0, r9
 801c3cc:	4302      	orrs	r2, r0
 801c3ce:	f84a 2b04 	str.w	r2, [sl], #4
 801c3d2:	f853 2b04 	ldr.w	r2, [r3], #4
 801c3d6:	459c      	cmp	ip, r3
 801c3d8:	fa22 f20e 	lsr.w	r2, r2, lr
 801c3dc:	d8f3      	bhi.n	801c3c6 <__lshift+0x6e>
 801c3de:	ebac 0304 	sub.w	r3, ip, r4
 801c3e2:	3b15      	subs	r3, #21
 801c3e4:	f023 0303 	bic.w	r3, r3, #3
 801c3e8:	3304      	adds	r3, #4
 801c3ea:	f104 0015 	add.w	r0, r4, #21
 801c3ee:	4584      	cmp	ip, r0
 801c3f0:	bf38      	it	cc
 801c3f2:	2304      	movcc	r3, #4
 801c3f4:	50ca      	str	r2, [r1, r3]
 801c3f6:	b10a      	cbz	r2, 801c3fc <__lshift+0xa4>
 801c3f8:	f108 0602 	add.w	r6, r8, #2
 801c3fc:	3e01      	subs	r6, #1
 801c3fe:	4638      	mov	r0, r7
 801c400:	612e      	str	r6, [r5, #16]
 801c402:	4621      	mov	r1, r4
 801c404:	f7ff fd8c 	bl	801bf20 <_Bfree>
 801c408:	4628      	mov	r0, r5
 801c40a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c40e:	f842 0f04 	str.w	r0, [r2, #4]!
 801c412:	3301      	adds	r3, #1
 801c414:	e7c5      	b.n	801c3a2 <__lshift+0x4a>
 801c416:	3904      	subs	r1, #4
 801c418:	f853 2b04 	ldr.w	r2, [r3], #4
 801c41c:	f841 2f04 	str.w	r2, [r1, #4]!
 801c420:	459c      	cmp	ip, r3
 801c422:	d8f9      	bhi.n	801c418 <__lshift+0xc0>
 801c424:	e7ea      	b.n	801c3fc <__lshift+0xa4>
 801c426:	bf00      	nop
 801c428:	08020bc4 	.word	0x08020bc4
 801c42c:	08020c54 	.word	0x08020c54

0801c430 <__mcmp>:
 801c430:	b530      	push	{r4, r5, lr}
 801c432:	6902      	ldr	r2, [r0, #16]
 801c434:	690c      	ldr	r4, [r1, #16]
 801c436:	1b12      	subs	r2, r2, r4
 801c438:	d10e      	bne.n	801c458 <__mcmp+0x28>
 801c43a:	f100 0314 	add.w	r3, r0, #20
 801c43e:	3114      	adds	r1, #20
 801c440:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801c444:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801c448:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801c44c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801c450:	42a5      	cmp	r5, r4
 801c452:	d003      	beq.n	801c45c <__mcmp+0x2c>
 801c454:	d305      	bcc.n	801c462 <__mcmp+0x32>
 801c456:	2201      	movs	r2, #1
 801c458:	4610      	mov	r0, r2
 801c45a:	bd30      	pop	{r4, r5, pc}
 801c45c:	4283      	cmp	r3, r0
 801c45e:	d3f3      	bcc.n	801c448 <__mcmp+0x18>
 801c460:	e7fa      	b.n	801c458 <__mcmp+0x28>
 801c462:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c466:	e7f7      	b.n	801c458 <__mcmp+0x28>

0801c468 <__mdiff>:
 801c468:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c46c:	460c      	mov	r4, r1
 801c46e:	4606      	mov	r6, r0
 801c470:	4611      	mov	r1, r2
 801c472:	4620      	mov	r0, r4
 801c474:	4617      	mov	r7, r2
 801c476:	f7ff ffdb 	bl	801c430 <__mcmp>
 801c47a:	1e05      	subs	r5, r0, #0
 801c47c:	d110      	bne.n	801c4a0 <__mdiff+0x38>
 801c47e:	4629      	mov	r1, r5
 801c480:	4630      	mov	r0, r6
 801c482:	f7ff fd0d 	bl	801bea0 <_Balloc>
 801c486:	b930      	cbnz	r0, 801c496 <__mdiff+0x2e>
 801c488:	4b39      	ldr	r3, [pc, #228]	; (801c570 <__mdiff+0x108>)
 801c48a:	4602      	mov	r2, r0
 801c48c:	f240 2132 	movw	r1, #562	; 0x232
 801c490:	4838      	ldr	r0, [pc, #224]	; (801c574 <__mdiff+0x10c>)
 801c492:	f000 fb99 	bl	801cbc8 <__assert_func>
 801c496:	2301      	movs	r3, #1
 801c498:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801c49c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4a0:	bfa4      	itt	ge
 801c4a2:	463b      	movge	r3, r7
 801c4a4:	4627      	movge	r7, r4
 801c4a6:	4630      	mov	r0, r6
 801c4a8:	6879      	ldr	r1, [r7, #4]
 801c4aa:	bfa6      	itte	ge
 801c4ac:	461c      	movge	r4, r3
 801c4ae:	2500      	movge	r5, #0
 801c4b0:	2501      	movlt	r5, #1
 801c4b2:	f7ff fcf5 	bl	801bea0 <_Balloc>
 801c4b6:	b920      	cbnz	r0, 801c4c2 <__mdiff+0x5a>
 801c4b8:	4b2d      	ldr	r3, [pc, #180]	; (801c570 <__mdiff+0x108>)
 801c4ba:	4602      	mov	r2, r0
 801c4bc:	f44f 7110 	mov.w	r1, #576	; 0x240
 801c4c0:	e7e6      	b.n	801c490 <__mdiff+0x28>
 801c4c2:	693e      	ldr	r6, [r7, #16]
 801c4c4:	60c5      	str	r5, [r0, #12]
 801c4c6:	6925      	ldr	r5, [r4, #16]
 801c4c8:	f107 0114 	add.w	r1, r7, #20
 801c4cc:	f104 0914 	add.w	r9, r4, #20
 801c4d0:	f100 0e14 	add.w	lr, r0, #20
 801c4d4:	f107 0210 	add.w	r2, r7, #16
 801c4d8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801c4dc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801c4e0:	46f2      	mov	sl, lr
 801c4e2:	2700      	movs	r7, #0
 801c4e4:	f859 3b04 	ldr.w	r3, [r9], #4
 801c4e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801c4ec:	fa1f f883 	uxth.w	r8, r3
 801c4f0:	fa17 f78b 	uxtah	r7, r7, fp
 801c4f4:	0c1b      	lsrs	r3, r3, #16
 801c4f6:	eba7 0808 	sub.w	r8, r7, r8
 801c4fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801c4fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801c502:	fa1f f888 	uxth.w	r8, r8
 801c506:	141f      	asrs	r7, r3, #16
 801c508:	454d      	cmp	r5, r9
 801c50a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801c50e:	f84a 3b04 	str.w	r3, [sl], #4
 801c512:	d8e7      	bhi.n	801c4e4 <__mdiff+0x7c>
 801c514:	1b2b      	subs	r3, r5, r4
 801c516:	3b15      	subs	r3, #21
 801c518:	f023 0303 	bic.w	r3, r3, #3
 801c51c:	3304      	adds	r3, #4
 801c51e:	3415      	adds	r4, #21
 801c520:	42a5      	cmp	r5, r4
 801c522:	bf38      	it	cc
 801c524:	2304      	movcc	r3, #4
 801c526:	4419      	add	r1, r3
 801c528:	4473      	add	r3, lr
 801c52a:	469e      	mov	lr, r3
 801c52c:	460d      	mov	r5, r1
 801c52e:	4565      	cmp	r5, ip
 801c530:	d30e      	bcc.n	801c550 <__mdiff+0xe8>
 801c532:	f10c 0203 	add.w	r2, ip, #3
 801c536:	1a52      	subs	r2, r2, r1
 801c538:	f022 0203 	bic.w	r2, r2, #3
 801c53c:	3903      	subs	r1, #3
 801c53e:	458c      	cmp	ip, r1
 801c540:	bf38      	it	cc
 801c542:	2200      	movcc	r2, #0
 801c544:	441a      	add	r2, r3
 801c546:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801c54a:	b17b      	cbz	r3, 801c56c <__mdiff+0x104>
 801c54c:	6106      	str	r6, [r0, #16]
 801c54e:	e7a5      	b.n	801c49c <__mdiff+0x34>
 801c550:	f855 8b04 	ldr.w	r8, [r5], #4
 801c554:	fa17 f488 	uxtah	r4, r7, r8
 801c558:	1422      	asrs	r2, r4, #16
 801c55a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801c55e:	b2a4      	uxth	r4, r4
 801c560:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801c564:	f84e 4b04 	str.w	r4, [lr], #4
 801c568:	1417      	asrs	r7, r2, #16
 801c56a:	e7e0      	b.n	801c52e <__mdiff+0xc6>
 801c56c:	3e01      	subs	r6, #1
 801c56e:	e7ea      	b.n	801c546 <__mdiff+0xde>
 801c570:	08020bc4 	.word	0x08020bc4
 801c574:	08020c54 	.word	0x08020c54

0801c578 <__ulp>:
 801c578:	b082      	sub	sp, #8
 801c57a:	ed8d 0b00 	vstr	d0, [sp]
 801c57e:	9b01      	ldr	r3, [sp, #4]
 801c580:	4912      	ldr	r1, [pc, #72]	; (801c5cc <__ulp+0x54>)
 801c582:	4019      	ands	r1, r3
 801c584:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801c588:	2900      	cmp	r1, #0
 801c58a:	dd05      	ble.n	801c598 <__ulp+0x20>
 801c58c:	2200      	movs	r2, #0
 801c58e:	460b      	mov	r3, r1
 801c590:	ec43 2b10 	vmov	d0, r2, r3
 801c594:	b002      	add	sp, #8
 801c596:	4770      	bx	lr
 801c598:	4249      	negs	r1, r1
 801c59a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801c59e:	ea4f 5021 	mov.w	r0, r1, asr #20
 801c5a2:	f04f 0200 	mov.w	r2, #0
 801c5a6:	f04f 0300 	mov.w	r3, #0
 801c5aa:	da04      	bge.n	801c5b6 <__ulp+0x3e>
 801c5ac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801c5b0:	fa41 f300 	asr.w	r3, r1, r0
 801c5b4:	e7ec      	b.n	801c590 <__ulp+0x18>
 801c5b6:	f1a0 0114 	sub.w	r1, r0, #20
 801c5ba:	291e      	cmp	r1, #30
 801c5bc:	bfda      	itte	le
 801c5be:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801c5c2:	fa20 f101 	lsrle.w	r1, r0, r1
 801c5c6:	2101      	movgt	r1, #1
 801c5c8:	460a      	mov	r2, r1
 801c5ca:	e7e1      	b.n	801c590 <__ulp+0x18>
 801c5cc:	7ff00000 	.word	0x7ff00000

0801c5d0 <__b2d>:
 801c5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c5d2:	6905      	ldr	r5, [r0, #16]
 801c5d4:	f100 0714 	add.w	r7, r0, #20
 801c5d8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801c5dc:	1f2e      	subs	r6, r5, #4
 801c5de:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801c5e2:	4620      	mov	r0, r4
 801c5e4:	f7ff fd52 	bl	801c08c <__hi0bits>
 801c5e8:	f1c0 0320 	rsb	r3, r0, #32
 801c5ec:	280a      	cmp	r0, #10
 801c5ee:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801c66c <__b2d+0x9c>
 801c5f2:	600b      	str	r3, [r1, #0]
 801c5f4:	dc14      	bgt.n	801c620 <__b2d+0x50>
 801c5f6:	f1c0 0e0b 	rsb	lr, r0, #11
 801c5fa:	fa24 f10e 	lsr.w	r1, r4, lr
 801c5fe:	42b7      	cmp	r7, r6
 801c600:	ea41 030c 	orr.w	r3, r1, ip
 801c604:	bf34      	ite	cc
 801c606:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801c60a:	2100      	movcs	r1, #0
 801c60c:	3015      	adds	r0, #21
 801c60e:	fa04 f000 	lsl.w	r0, r4, r0
 801c612:	fa21 f10e 	lsr.w	r1, r1, lr
 801c616:	ea40 0201 	orr.w	r2, r0, r1
 801c61a:	ec43 2b10 	vmov	d0, r2, r3
 801c61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c620:	42b7      	cmp	r7, r6
 801c622:	bf3a      	itte	cc
 801c624:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801c628:	f1a5 0608 	subcc.w	r6, r5, #8
 801c62c:	2100      	movcs	r1, #0
 801c62e:	380b      	subs	r0, #11
 801c630:	d017      	beq.n	801c662 <__b2d+0x92>
 801c632:	f1c0 0c20 	rsb	ip, r0, #32
 801c636:	fa04 f500 	lsl.w	r5, r4, r0
 801c63a:	42be      	cmp	r6, r7
 801c63c:	fa21 f40c 	lsr.w	r4, r1, ip
 801c640:	ea45 0504 	orr.w	r5, r5, r4
 801c644:	bf8c      	ite	hi
 801c646:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801c64a:	2400      	movls	r4, #0
 801c64c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801c650:	fa01 f000 	lsl.w	r0, r1, r0
 801c654:	fa24 f40c 	lsr.w	r4, r4, ip
 801c658:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801c65c:	ea40 0204 	orr.w	r2, r0, r4
 801c660:	e7db      	b.n	801c61a <__b2d+0x4a>
 801c662:	ea44 030c 	orr.w	r3, r4, ip
 801c666:	460a      	mov	r2, r1
 801c668:	e7d7      	b.n	801c61a <__b2d+0x4a>
 801c66a:	bf00      	nop
 801c66c:	3ff00000 	.word	0x3ff00000

0801c670 <__d2b>:
 801c670:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c674:	4689      	mov	r9, r1
 801c676:	2101      	movs	r1, #1
 801c678:	ec57 6b10 	vmov	r6, r7, d0
 801c67c:	4690      	mov	r8, r2
 801c67e:	f7ff fc0f 	bl	801bea0 <_Balloc>
 801c682:	4604      	mov	r4, r0
 801c684:	b930      	cbnz	r0, 801c694 <__d2b+0x24>
 801c686:	4602      	mov	r2, r0
 801c688:	4b25      	ldr	r3, [pc, #148]	; (801c720 <__d2b+0xb0>)
 801c68a:	4826      	ldr	r0, [pc, #152]	; (801c724 <__d2b+0xb4>)
 801c68c:	f240 310a 	movw	r1, #778	; 0x30a
 801c690:	f000 fa9a 	bl	801cbc8 <__assert_func>
 801c694:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801c698:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801c69c:	bb35      	cbnz	r5, 801c6ec <__d2b+0x7c>
 801c69e:	2e00      	cmp	r6, #0
 801c6a0:	9301      	str	r3, [sp, #4]
 801c6a2:	d028      	beq.n	801c6f6 <__d2b+0x86>
 801c6a4:	4668      	mov	r0, sp
 801c6a6:	9600      	str	r6, [sp, #0]
 801c6a8:	f7ff fd10 	bl	801c0cc <__lo0bits>
 801c6ac:	9900      	ldr	r1, [sp, #0]
 801c6ae:	b300      	cbz	r0, 801c6f2 <__d2b+0x82>
 801c6b0:	9a01      	ldr	r2, [sp, #4]
 801c6b2:	f1c0 0320 	rsb	r3, r0, #32
 801c6b6:	fa02 f303 	lsl.w	r3, r2, r3
 801c6ba:	430b      	orrs	r3, r1
 801c6bc:	40c2      	lsrs	r2, r0
 801c6be:	6163      	str	r3, [r4, #20]
 801c6c0:	9201      	str	r2, [sp, #4]
 801c6c2:	9b01      	ldr	r3, [sp, #4]
 801c6c4:	61a3      	str	r3, [r4, #24]
 801c6c6:	2b00      	cmp	r3, #0
 801c6c8:	bf14      	ite	ne
 801c6ca:	2202      	movne	r2, #2
 801c6cc:	2201      	moveq	r2, #1
 801c6ce:	6122      	str	r2, [r4, #16]
 801c6d0:	b1d5      	cbz	r5, 801c708 <__d2b+0x98>
 801c6d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801c6d6:	4405      	add	r5, r0
 801c6d8:	f8c9 5000 	str.w	r5, [r9]
 801c6dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801c6e0:	f8c8 0000 	str.w	r0, [r8]
 801c6e4:	4620      	mov	r0, r4
 801c6e6:	b003      	add	sp, #12
 801c6e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c6ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801c6f0:	e7d5      	b.n	801c69e <__d2b+0x2e>
 801c6f2:	6161      	str	r1, [r4, #20]
 801c6f4:	e7e5      	b.n	801c6c2 <__d2b+0x52>
 801c6f6:	a801      	add	r0, sp, #4
 801c6f8:	f7ff fce8 	bl	801c0cc <__lo0bits>
 801c6fc:	9b01      	ldr	r3, [sp, #4]
 801c6fe:	6163      	str	r3, [r4, #20]
 801c700:	2201      	movs	r2, #1
 801c702:	6122      	str	r2, [r4, #16]
 801c704:	3020      	adds	r0, #32
 801c706:	e7e3      	b.n	801c6d0 <__d2b+0x60>
 801c708:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c70c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801c710:	f8c9 0000 	str.w	r0, [r9]
 801c714:	6918      	ldr	r0, [r3, #16]
 801c716:	f7ff fcb9 	bl	801c08c <__hi0bits>
 801c71a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c71e:	e7df      	b.n	801c6e0 <__d2b+0x70>
 801c720:	08020bc4 	.word	0x08020bc4
 801c724:	08020c54 	.word	0x08020c54

0801c728 <__ratio>:
 801c728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c72c:	4688      	mov	r8, r1
 801c72e:	4669      	mov	r1, sp
 801c730:	4681      	mov	r9, r0
 801c732:	f7ff ff4d 	bl	801c5d0 <__b2d>
 801c736:	a901      	add	r1, sp, #4
 801c738:	4640      	mov	r0, r8
 801c73a:	ec55 4b10 	vmov	r4, r5, d0
 801c73e:	f7ff ff47 	bl	801c5d0 <__b2d>
 801c742:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c746:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801c74a:	eba3 0c02 	sub.w	ip, r3, r2
 801c74e:	e9dd 3200 	ldrd	r3, r2, [sp]
 801c752:	1a9b      	subs	r3, r3, r2
 801c754:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801c758:	ec51 0b10 	vmov	r0, r1, d0
 801c75c:	2b00      	cmp	r3, #0
 801c75e:	bfd6      	itet	le
 801c760:	460a      	movle	r2, r1
 801c762:	462a      	movgt	r2, r5
 801c764:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801c768:	468b      	mov	fp, r1
 801c76a:	462f      	mov	r7, r5
 801c76c:	bfd4      	ite	le
 801c76e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801c772:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801c776:	4620      	mov	r0, r4
 801c778:	ee10 2a10 	vmov	r2, s0
 801c77c:	465b      	mov	r3, fp
 801c77e:	4639      	mov	r1, r7
 801c780:	f7e4 f864 	bl	800084c <__aeabi_ddiv>
 801c784:	ec41 0b10 	vmov	d0, r0, r1
 801c788:	b003      	add	sp, #12
 801c78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c78e <__copybits>:
 801c78e:	3901      	subs	r1, #1
 801c790:	b570      	push	{r4, r5, r6, lr}
 801c792:	1149      	asrs	r1, r1, #5
 801c794:	6914      	ldr	r4, [r2, #16]
 801c796:	3101      	adds	r1, #1
 801c798:	f102 0314 	add.w	r3, r2, #20
 801c79c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801c7a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801c7a4:	1f05      	subs	r5, r0, #4
 801c7a6:	42a3      	cmp	r3, r4
 801c7a8:	d30c      	bcc.n	801c7c4 <__copybits+0x36>
 801c7aa:	1aa3      	subs	r3, r4, r2
 801c7ac:	3b11      	subs	r3, #17
 801c7ae:	f023 0303 	bic.w	r3, r3, #3
 801c7b2:	3211      	adds	r2, #17
 801c7b4:	42a2      	cmp	r2, r4
 801c7b6:	bf88      	it	hi
 801c7b8:	2300      	movhi	r3, #0
 801c7ba:	4418      	add	r0, r3
 801c7bc:	2300      	movs	r3, #0
 801c7be:	4288      	cmp	r0, r1
 801c7c0:	d305      	bcc.n	801c7ce <__copybits+0x40>
 801c7c2:	bd70      	pop	{r4, r5, r6, pc}
 801c7c4:	f853 6b04 	ldr.w	r6, [r3], #4
 801c7c8:	f845 6f04 	str.w	r6, [r5, #4]!
 801c7cc:	e7eb      	b.n	801c7a6 <__copybits+0x18>
 801c7ce:	f840 3b04 	str.w	r3, [r0], #4
 801c7d2:	e7f4      	b.n	801c7be <__copybits+0x30>

0801c7d4 <__any_on>:
 801c7d4:	f100 0214 	add.w	r2, r0, #20
 801c7d8:	6900      	ldr	r0, [r0, #16]
 801c7da:	114b      	asrs	r3, r1, #5
 801c7dc:	4298      	cmp	r0, r3
 801c7de:	b510      	push	{r4, lr}
 801c7e0:	db11      	blt.n	801c806 <__any_on+0x32>
 801c7e2:	dd0a      	ble.n	801c7fa <__any_on+0x26>
 801c7e4:	f011 011f 	ands.w	r1, r1, #31
 801c7e8:	d007      	beq.n	801c7fa <__any_on+0x26>
 801c7ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801c7ee:	fa24 f001 	lsr.w	r0, r4, r1
 801c7f2:	fa00 f101 	lsl.w	r1, r0, r1
 801c7f6:	428c      	cmp	r4, r1
 801c7f8:	d10b      	bne.n	801c812 <__any_on+0x3e>
 801c7fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c7fe:	4293      	cmp	r3, r2
 801c800:	d803      	bhi.n	801c80a <__any_on+0x36>
 801c802:	2000      	movs	r0, #0
 801c804:	bd10      	pop	{r4, pc}
 801c806:	4603      	mov	r3, r0
 801c808:	e7f7      	b.n	801c7fa <__any_on+0x26>
 801c80a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c80e:	2900      	cmp	r1, #0
 801c810:	d0f5      	beq.n	801c7fe <__any_on+0x2a>
 801c812:	2001      	movs	r0, #1
 801c814:	e7f6      	b.n	801c804 <__any_on+0x30>

0801c816 <_calloc_r>:
 801c816:	b513      	push	{r0, r1, r4, lr}
 801c818:	434a      	muls	r2, r1
 801c81a:	4611      	mov	r1, r2
 801c81c:	9201      	str	r2, [sp, #4]
 801c81e:	f7fc fa85 	bl	8018d2c <_malloc_r>
 801c822:	4604      	mov	r4, r0
 801c824:	b118      	cbz	r0, 801c82e <_calloc_r+0x18>
 801c826:	9a01      	ldr	r2, [sp, #4]
 801c828:	2100      	movs	r1, #0
 801c82a:	f7fc fa27 	bl	8018c7c <memset>
 801c82e:	4620      	mov	r0, r4
 801c830:	b002      	add	sp, #8
 801c832:	bd10      	pop	{r4, pc}

0801c834 <_realloc_r>:
 801c834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c836:	4607      	mov	r7, r0
 801c838:	4614      	mov	r4, r2
 801c83a:	460e      	mov	r6, r1
 801c83c:	b921      	cbnz	r1, 801c848 <_realloc_r+0x14>
 801c83e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801c842:	4611      	mov	r1, r2
 801c844:	f7fc ba72 	b.w	8018d2c <_malloc_r>
 801c848:	b922      	cbnz	r2, 801c854 <_realloc_r+0x20>
 801c84a:	f7fc fa1f 	bl	8018c8c <_free_r>
 801c84e:	4625      	mov	r5, r4
 801c850:	4628      	mov	r0, r5
 801c852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c854:	f000 fbbc 	bl	801cfd0 <_malloc_usable_size_r>
 801c858:	42a0      	cmp	r0, r4
 801c85a:	d20f      	bcs.n	801c87c <_realloc_r+0x48>
 801c85c:	4621      	mov	r1, r4
 801c85e:	4638      	mov	r0, r7
 801c860:	f7fc fa64 	bl	8018d2c <_malloc_r>
 801c864:	4605      	mov	r5, r0
 801c866:	2800      	cmp	r0, #0
 801c868:	d0f2      	beq.n	801c850 <_realloc_r+0x1c>
 801c86a:	4631      	mov	r1, r6
 801c86c:	4622      	mov	r2, r4
 801c86e:	f7fc f9f7 	bl	8018c60 <memcpy>
 801c872:	4631      	mov	r1, r6
 801c874:	4638      	mov	r0, r7
 801c876:	f7fc fa09 	bl	8018c8c <_free_r>
 801c87a:	e7e9      	b.n	801c850 <_realloc_r+0x1c>
 801c87c:	4635      	mov	r5, r6
 801c87e:	e7e7      	b.n	801c850 <_realloc_r+0x1c>

0801c880 <__ssputs_r>:
 801c880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c884:	688e      	ldr	r6, [r1, #8]
 801c886:	429e      	cmp	r6, r3
 801c888:	4682      	mov	sl, r0
 801c88a:	460c      	mov	r4, r1
 801c88c:	4690      	mov	r8, r2
 801c88e:	461f      	mov	r7, r3
 801c890:	d838      	bhi.n	801c904 <__ssputs_r+0x84>
 801c892:	898a      	ldrh	r2, [r1, #12]
 801c894:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801c898:	d032      	beq.n	801c900 <__ssputs_r+0x80>
 801c89a:	6825      	ldr	r5, [r4, #0]
 801c89c:	6909      	ldr	r1, [r1, #16]
 801c89e:	eba5 0901 	sub.w	r9, r5, r1
 801c8a2:	6965      	ldr	r5, [r4, #20]
 801c8a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c8a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c8ac:	3301      	adds	r3, #1
 801c8ae:	444b      	add	r3, r9
 801c8b0:	106d      	asrs	r5, r5, #1
 801c8b2:	429d      	cmp	r5, r3
 801c8b4:	bf38      	it	cc
 801c8b6:	461d      	movcc	r5, r3
 801c8b8:	0553      	lsls	r3, r2, #21
 801c8ba:	d531      	bpl.n	801c920 <__ssputs_r+0xa0>
 801c8bc:	4629      	mov	r1, r5
 801c8be:	f7fc fa35 	bl	8018d2c <_malloc_r>
 801c8c2:	4606      	mov	r6, r0
 801c8c4:	b950      	cbnz	r0, 801c8dc <__ssputs_r+0x5c>
 801c8c6:	230c      	movs	r3, #12
 801c8c8:	f8ca 3000 	str.w	r3, [sl]
 801c8cc:	89a3      	ldrh	r3, [r4, #12]
 801c8ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c8d2:	81a3      	strh	r3, [r4, #12]
 801c8d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c8d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c8dc:	6921      	ldr	r1, [r4, #16]
 801c8de:	464a      	mov	r2, r9
 801c8e0:	f7fc f9be 	bl	8018c60 <memcpy>
 801c8e4:	89a3      	ldrh	r3, [r4, #12]
 801c8e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801c8ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c8ee:	81a3      	strh	r3, [r4, #12]
 801c8f0:	6126      	str	r6, [r4, #16]
 801c8f2:	6165      	str	r5, [r4, #20]
 801c8f4:	444e      	add	r6, r9
 801c8f6:	eba5 0509 	sub.w	r5, r5, r9
 801c8fa:	6026      	str	r6, [r4, #0]
 801c8fc:	60a5      	str	r5, [r4, #8]
 801c8fe:	463e      	mov	r6, r7
 801c900:	42be      	cmp	r6, r7
 801c902:	d900      	bls.n	801c906 <__ssputs_r+0x86>
 801c904:	463e      	mov	r6, r7
 801c906:	4632      	mov	r2, r6
 801c908:	6820      	ldr	r0, [r4, #0]
 801c90a:	4641      	mov	r1, r8
 801c90c:	f000 fb46 	bl	801cf9c <memmove>
 801c910:	68a3      	ldr	r3, [r4, #8]
 801c912:	6822      	ldr	r2, [r4, #0]
 801c914:	1b9b      	subs	r3, r3, r6
 801c916:	4432      	add	r2, r6
 801c918:	60a3      	str	r3, [r4, #8]
 801c91a:	6022      	str	r2, [r4, #0]
 801c91c:	2000      	movs	r0, #0
 801c91e:	e7db      	b.n	801c8d8 <__ssputs_r+0x58>
 801c920:	462a      	mov	r2, r5
 801c922:	f7ff ff87 	bl	801c834 <_realloc_r>
 801c926:	4606      	mov	r6, r0
 801c928:	2800      	cmp	r0, #0
 801c92a:	d1e1      	bne.n	801c8f0 <__ssputs_r+0x70>
 801c92c:	6921      	ldr	r1, [r4, #16]
 801c92e:	4650      	mov	r0, sl
 801c930:	f7fc f9ac 	bl	8018c8c <_free_r>
 801c934:	e7c7      	b.n	801c8c6 <__ssputs_r+0x46>
	...

0801c938 <_svfiprintf_r>:
 801c938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c93c:	4698      	mov	r8, r3
 801c93e:	898b      	ldrh	r3, [r1, #12]
 801c940:	061b      	lsls	r3, r3, #24
 801c942:	b09d      	sub	sp, #116	; 0x74
 801c944:	4607      	mov	r7, r0
 801c946:	460d      	mov	r5, r1
 801c948:	4614      	mov	r4, r2
 801c94a:	d50e      	bpl.n	801c96a <_svfiprintf_r+0x32>
 801c94c:	690b      	ldr	r3, [r1, #16]
 801c94e:	b963      	cbnz	r3, 801c96a <_svfiprintf_r+0x32>
 801c950:	2140      	movs	r1, #64	; 0x40
 801c952:	f7fc f9eb 	bl	8018d2c <_malloc_r>
 801c956:	6028      	str	r0, [r5, #0]
 801c958:	6128      	str	r0, [r5, #16]
 801c95a:	b920      	cbnz	r0, 801c966 <_svfiprintf_r+0x2e>
 801c95c:	230c      	movs	r3, #12
 801c95e:	603b      	str	r3, [r7, #0]
 801c960:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c964:	e0d1      	b.n	801cb0a <_svfiprintf_r+0x1d2>
 801c966:	2340      	movs	r3, #64	; 0x40
 801c968:	616b      	str	r3, [r5, #20]
 801c96a:	2300      	movs	r3, #0
 801c96c:	9309      	str	r3, [sp, #36]	; 0x24
 801c96e:	2320      	movs	r3, #32
 801c970:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c974:	f8cd 800c 	str.w	r8, [sp, #12]
 801c978:	2330      	movs	r3, #48	; 0x30
 801c97a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801cb24 <_svfiprintf_r+0x1ec>
 801c97e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c982:	f04f 0901 	mov.w	r9, #1
 801c986:	4623      	mov	r3, r4
 801c988:	469a      	mov	sl, r3
 801c98a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c98e:	b10a      	cbz	r2, 801c994 <_svfiprintf_r+0x5c>
 801c990:	2a25      	cmp	r2, #37	; 0x25
 801c992:	d1f9      	bne.n	801c988 <_svfiprintf_r+0x50>
 801c994:	ebba 0b04 	subs.w	fp, sl, r4
 801c998:	d00b      	beq.n	801c9b2 <_svfiprintf_r+0x7a>
 801c99a:	465b      	mov	r3, fp
 801c99c:	4622      	mov	r2, r4
 801c99e:	4629      	mov	r1, r5
 801c9a0:	4638      	mov	r0, r7
 801c9a2:	f7ff ff6d 	bl	801c880 <__ssputs_r>
 801c9a6:	3001      	adds	r0, #1
 801c9a8:	f000 80aa 	beq.w	801cb00 <_svfiprintf_r+0x1c8>
 801c9ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c9ae:	445a      	add	r2, fp
 801c9b0:	9209      	str	r2, [sp, #36]	; 0x24
 801c9b2:	f89a 3000 	ldrb.w	r3, [sl]
 801c9b6:	2b00      	cmp	r3, #0
 801c9b8:	f000 80a2 	beq.w	801cb00 <_svfiprintf_r+0x1c8>
 801c9bc:	2300      	movs	r3, #0
 801c9be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c9c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c9c6:	f10a 0a01 	add.w	sl, sl, #1
 801c9ca:	9304      	str	r3, [sp, #16]
 801c9cc:	9307      	str	r3, [sp, #28]
 801c9ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c9d2:	931a      	str	r3, [sp, #104]	; 0x68
 801c9d4:	4654      	mov	r4, sl
 801c9d6:	2205      	movs	r2, #5
 801c9d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c9dc:	4851      	ldr	r0, [pc, #324]	; (801cb24 <_svfiprintf_r+0x1ec>)
 801c9de:	f7e3 fbff 	bl	80001e0 <memchr>
 801c9e2:	9a04      	ldr	r2, [sp, #16]
 801c9e4:	b9d8      	cbnz	r0, 801ca1e <_svfiprintf_r+0xe6>
 801c9e6:	06d0      	lsls	r0, r2, #27
 801c9e8:	bf44      	itt	mi
 801c9ea:	2320      	movmi	r3, #32
 801c9ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c9f0:	0711      	lsls	r1, r2, #28
 801c9f2:	bf44      	itt	mi
 801c9f4:	232b      	movmi	r3, #43	; 0x2b
 801c9f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c9fa:	f89a 3000 	ldrb.w	r3, [sl]
 801c9fe:	2b2a      	cmp	r3, #42	; 0x2a
 801ca00:	d015      	beq.n	801ca2e <_svfiprintf_r+0xf6>
 801ca02:	9a07      	ldr	r2, [sp, #28]
 801ca04:	4654      	mov	r4, sl
 801ca06:	2000      	movs	r0, #0
 801ca08:	f04f 0c0a 	mov.w	ip, #10
 801ca0c:	4621      	mov	r1, r4
 801ca0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ca12:	3b30      	subs	r3, #48	; 0x30
 801ca14:	2b09      	cmp	r3, #9
 801ca16:	d94e      	bls.n	801cab6 <_svfiprintf_r+0x17e>
 801ca18:	b1b0      	cbz	r0, 801ca48 <_svfiprintf_r+0x110>
 801ca1a:	9207      	str	r2, [sp, #28]
 801ca1c:	e014      	b.n	801ca48 <_svfiprintf_r+0x110>
 801ca1e:	eba0 0308 	sub.w	r3, r0, r8
 801ca22:	fa09 f303 	lsl.w	r3, r9, r3
 801ca26:	4313      	orrs	r3, r2
 801ca28:	9304      	str	r3, [sp, #16]
 801ca2a:	46a2      	mov	sl, r4
 801ca2c:	e7d2      	b.n	801c9d4 <_svfiprintf_r+0x9c>
 801ca2e:	9b03      	ldr	r3, [sp, #12]
 801ca30:	1d19      	adds	r1, r3, #4
 801ca32:	681b      	ldr	r3, [r3, #0]
 801ca34:	9103      	str	r1, [sp, #12]
 801ca36:	2b00      	cmp	r3, #0
 801ca38:	bfbb      	ittet	lt
 801ca3a:	425b      	neglt	r3, r3
 801ca3c:	f042 0202 	orrlt.w	r2, r2, #2
 801ca40:	9307      	strge	r3, [sp, #28]
 801ca42:	9307      	strlt	r3, [sp, #28]
 801ca44:	bfb8      	it	lt
 801ca46:	9204      	strlt	r2, [sp, #16]
 801ca48:	7823      	ldrb	r3, [r4, #0]
 801ca4a:	2b2e      	cmp	r3, #46	; 0x2e
 801ca4c:	d10c      	bne.n	801ca68 <_svfiprintf_r+0x130>
 801ca4e:	7863      	ldrb	r3, [r4, #1]
 801ca50:	2b2a      	cmp	r3, #42	; 0x2a
 801ca52:	d135      	bne.n	801cac0 <_svfiprintf_r+0x188>
 801ca54:	9b03      	ldr	r3, [sp, #12]
 801ca56:	1d1a      	adds	r2, r3, #4
 801ca58:	681b      	ldr	r3, [r3, #0]
 801ca5a:	9203      	str	r2, [sp, #12]
 801ca5c:	2b00      	cmp	r3, #0
 801ca5e:	bfb8      	it	lt
 801ca60:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801ca64:	3402      	adds	r4, #2
 801ca66:	9305      	str	r3, [sp, #20]
 801ca68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801cb34 <_svfiprintf_r+0x1fc>
 801ca6c:	7821      	ldrb	r1, [r4, #0]
 801ca6e:	2203      	movs	r2, #3
 801ca70:	4650      	mov	r0, sl
 801ca72:	f7e3 fbb5 	bl	80001e0 <memchr>
 801ca76:	b140      	cbz	r0, 801ca8a <_svfiprintf_r+0x152>
 801ca78:	2340      	movs	r3, #64	; 0x40
 801ca7a:	eba0 000a 	sub.w	r0, r0, sl
 801ca7e:	fa03 f000 	lsl.w	r0, r3, r0
 801ca82:	9b04      	ldr	r3, [sp, #16]
 801ca84:	4303      	orrs	r3, r0
 801ca86:	3401      	adds	r4, #1
 801ca88:	9304      	str	r3, [sp, #16]
 801ca8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ca8e:	4826      	ldr	r0, [pc, #152]	; (801cb28 <_svfiprintf_r+0x1f0>)
 801ca90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ca94:	2206      	movs	r2, #6
 801ca96:	f7e3 fba3 	bl	80001e0 <memchr>
 801ca9a:	2800      	cmp	r0, #0
 801ca9c:	d038      	beq.n	801cb10 <_svfiprintf_r+0x1d8>
 801ca9e:	4b23      	ldr	r3, [pc, #140]	; (801cb2c <_svfiprintf_r+0x1f4>)
 801caa0:	bb1b      	cbnz	r3, 801caea <_svfiprintf_r+0x1b2>
 801caa2:	9b03      	ldr	r3, [sp, #12]
 801caa4:	3307      	adds	r3, #7
 801caa6:	f023 0307 	bic.w	r3, r3, #7
 801caaa:	3308      	adds	r3, #8
 801caac:	9303      	str	r3, [sp, #12]
 801caae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cab0:	4433      	add	r3, r6
 801cab2:	9309      	str	r3, [sp, #36]	; 0x24
 801cab4:	e767      	b.n	801c986 <_svfiprintf_r+0x4e>
 801cab6:	fb0c 3202 	mla	r2, ip, r2, r3
 801caba:	460c      	mov	r4, r1
 801cabc:	2001      	movs	r0, #1
 801cabe:	e7a5      	b.n	801ca0c <_svfiprintf_r+0xd4>
 801cac0:	2300      	movs	r3, #0
 801cac2:	3401      	adds	r4, #1
 801cac4:	9305      	str	r3, [sp, #20]
 801cac6:	4619      	mov	r1, r3
 801cac8:	f04f 0c0a 	mov.w	ip, #10
 801cacc:	4620      	mov	r0, r4
 801cace:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cad2:	3a30      	subs	r2, #48	; 0x30
 801cad4:	2a09      	cmp	r2, #9
 801cad6:	d903      	bls.n	801cae0 <_svfiprintf_r+0x1a8>
 801cad8:	2b00      	cmp	r3, #0
 801cada:	d0c5      	beq.n	801ca68 <_svfiprintf_r+0x130>
 801cadc:	9105      	str	r1, [sp, #20]
 801cade:	e7c3      	b.n	801ca68 <_svfiprintf_r+0x130>
 801cae0:	fb0c 2101 	mla	r1, ip, r1, r2
 801cae4:	4604      	mov	r4, r0
 801cae6:	2301      	movs	r3, #1
 801cae8:	e7f0      	b.n	801cacc <_svfiprintf_r+0x194>
 801caea:	ab03      	add	r3, sp, #12
 801caec:	9300      	str	r3, [sp, #0]
 801caee:	462a      	mov	r2, r5
 801caf0:	4b0f      	ldr	r3, [pc, #60]	; (801cb30 <_svfiprintf_r+0x1f8>)
 801caf2:	a904      	add	r1, sp, #16
 801caf4:	4638      	mov	r0, r7
 801caf6:	f7fc fa13 	bl	8018f20 <_printf_float>
 801cafa:	1c42      	adds	r2, r0, #1
 801cafc:	4606      	mov	r6, r0
 801cafe:	d1d6      	bne.n	801caae <_svfiprintf_r+0x176>
 801cb00:	89ab      	ldrh	r3, [r5, #12]
 801cb02:	065b      	lsls	r3, r3, #25
 801cb04:	f53f af2c 	bmi.w	801c960 <_svfiprintf_r+0x28>
 801cb08:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cb0a:	b01d      	add	sp, #116	; 0x74
 801cb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb10:	ab03      	add	r3, sp, #12
 801cb12:	9300      	str	r3, [sp, #0]
 801cb14:	462a      	mov	r2, r5
 801cb16:	4b06      	ldr	r3, [pc, #24]	; (801cb30 <_svfiprintf_r+0x1f8>)
 801cb18:	a904      	add	r1, sp, #16
 801cb1a:	4638      	mov	r0, r7
 801cb1c:	f7fc fca4 	bl	8019468 <_printf_i>
 801cb20:	e7eb      	b.n	801cafa <_svfiprintf_r+0x1c2>
 801cb22:	bf00      	nop
 801cb24:	08020db4 	.word	0x08020db4
 801cb28:	08020dbe 	.word	0x08020dbe
 801cb2c:	08018f21 	.word	0x08018f21
 801cb30:	0801c881 	.word	0x0801c881
 801cb34:	08020dba 	.word	0x08020dba

0801cb38 <_read_r>:
 801cb38:	b538      	push	{r3, r4, r5, lr}
 801cb3a:	4d07      	ldr	r5, [pc, #28]	; (801cb58 <_read_r+0x20>)
 801cb3c:	4604      	mov	r4, r0
 801cb3e:	4608      	mov	r0, r1
 801cb40:	4611      	mov	r1, r2
 801cb42:	2200      	movs	r2, #0
 801cb44:	602a      	str	r2, [r5, #0]
 801cb46:	461a      	mov	r2, r3
 801cb48:	f7f0 fa12 	bl	800cf70 <_read>
 801cb4c:	1c43      	adds	r3, r0, #1
 801cb4e:	d102      	bne.n	801cb56 <_read_r+0x1e>
 801cb50:	682b      	ldr	r3, [r5, #0]
 801cb52:	b103      	cbz	r3, 801cb56 <_read_r+0x1e>
 801cb54:	6023      	str	r3, [r4, #0]
 801cb56:	bd38      	pop	{r3, r4, r5, pc}
 801cb58:	2000a50c 	.word	0x2000a50c
 801cb5c:	00000000 	.word	0x00000000

0801cb60 <nan>:
 801cb60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801cb68 <nan+0x8>
 801cb64:	4770      	bx	lr
 801cb66:	bf00      	nop
 801cb68:	00000000 	.word	0x00000000
 801cb6c:	7ff80000 	.word	0x7ff80000

0801cb70 <finitef>:
 801cb70:	b082      	sub	sp, #8
 801cb72:	ed8d 0a01 	vstr	s0, [sp, #4]
 801cb76:	9801      	ldr	r0, [sp, #4]
 801cb78:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801cb7c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801cb80:	bfac      	ite	ge
 801cb82:	2000      	movge	r0, #0
 801cb84:	2001      	movlt	r0, #1
 801cb86:	b002      	add	sp, #8
 801cb88:	4770      	bx	lr

0801cb8a <strncmp>:
 801cb8a:	b510      	push	{r4, lr}
 801cb8c:	b16a      	cbz	r2, 801cbaa <strncmp+0x20>
 801cb8e:	3901      	subs	r1, #1
 801cb90:	1884      	adds	r4, r0, r2
 801cb92:	f810 3b01 	ldrb.w	r3, [r0], #1
 801cb96:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801cb9a:	4293      	cmp	r3, r2
 801cb9c:	d103      	bne.n	801cba6 <strncmp+0x1c>
 801cb9e:	42a0      	cmp	r0, r4
 801cba0:	d001      	beq.n	801cba6 <strncmp+0x1c>
 801cba2:	2b00      	cmp	r3, #0
 801cba4:	d1f5      	bne.n	801cb92 <strncmp+0x8>
 801cba6:	1a98      	subs	r0, r3, r2
 801cba8:	bd10      	pop	{r4, pc}
 801cbaa:	4610      	mov	r0, r2
 801cbac:	e7fc      	b.n	801cba8 <strncmp+0x1e>

0801cbae <__ascii_wctomb>:
 801cbae:	b149      	cbz	r1, 801cbc4 <__ascii_wctomb+0x16>
 801cbb0:	2aff      	cmp	r2, #255	; 0xff
 801cbb2:	bf85      	ittet	hi
 801cbb4:	238a      	movhi	r3, #138	; 0x8a
 801cbb6:	6003      	strhi	r3, [r0, #0]
 801cbb8:	700a      	strbls	r2, [r1, #0]
 801cbba:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801cbbe:	bf98      	it	ls
 801cbc0:	2001      	movls	r0, #1
 801cbc2:	4770      	bx	lr
 801cbc4:	4608      	mov	r0, r1
 801cbc6:	4770      	bx	lr

0801cbc8 <__assert_func>:
 801cbc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801cbca:	4614      	mov	r4, r2
 801cbcc:	461a      	mov	r2, r3
 801cbce:	4b09      	ldr	r3, [pc, #36]	; (801cbf4 <__assert_func+0x2c>)
 801cbd0:	681b      	ldr	r3, [r3, #0]
 801cbd2:	4605      	mov	r5, r0
 801cbd4:	68d8      	ldr	r0, [r3, #12]
 801cbd6:	b14c      	cbz	r4, 801cbec <__assert_func+0x24>
 801cbd8:	4b07      	ldr	r3, [pc, #28]	; (801cbf8 <__assert_func+0x30>)
 801cbda:	9100      	str	r1, [sp, #0]
 801cbdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801cbe0:	4906      	ldr	r1, [pc, #24]	; (801cbfc <__assert_func+0x34>)
 801cbe2:	462b      	mov	r3, r5
 801cbe4:	f000 f9a6 	bl	801cf34 <fiprintf>
 801cbe8:	f000 fc14 	bl	801d414 <abort>
 801cbec:	4b04      	ldr	r3, [pc, #16]	; (801cc00 <__assert_func+0x38>)
 801cbee:	461c      	mov	r4, r3
 801cbf0:	e7f3      	b.n	801cbda <__assert_func+0x12>
 801cbf2:	bf00      	nop
 801cbf4:	200000d0 	.word	0x200000d0
 801cbf8:	08020dc5 	.word	0x08020dc5
 801cbfc:	08020dd2 	.word	0x08020dd2
 801cc00:	08020e00 	.word	0x08020e00

0801cc04 <__sflush_r>:
 801cc04:	898a      	ldrh	r2, [r1, #12]
 801cc06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc0a:	4605      	mov	r5, r0
 801cc0c:	0710      	lsls	r0, r2, #28
 801cc0e:	460c      	mov	r4, r1
 801cc10:	d458      	bmi.n	801ccc4 <__sflush_r+0xc0>
 801cc12:	684b      	ldr	r3, [r1, #4]
 801cc14:	2b00      	cmp	r3, #0
 801cc16:	dc05      	bgt.n	801cc24 <__sflush_r+0x20>
 801cc18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801cc1a:	2b00      	cmp	r3, #0
 801cc1c:	dc02      	bgt.n	801cc24 <__sflush_r+0x20>
 801cc1e:	2000      	movs	r0, #0
 801cc20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cc26:	2e00      	cmp	r6, #0
 801cc28:	d0f9      	beq.n	801cc1e <__sflush_r+0x1a>
 801cc2a:	2300      	movs	r3, #0
 801cc2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801cc30:	682f      	ldr	r7, [r5, #0]
 801cc32:	602b      	str	r3, [r5, #0]
 801cc34:	d032      	beq.n	801cc9c <__sflush_r+0x98>
 801cc36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801cc38:	89a3      	ldrh	r3, [r4, #12]
 801cc3a:	075a      	lsls	r2, r3, #29
 801cc3c:	d505      	bpl.n	801cc4a <__sflush_r+0x46>
 801cc3e:	6863      	ldr	r3, [r4, #4]
 801cc40:	1ac0      	subs	r0, r0, r3
 801cc42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801cc44:	b10b      	cbz	r3, 801cc4a <__sflush_r+0x46>
 801cc46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cc48:	1ac0      	subs	r0, r0, r3
 801cc4a:	2300      	movs	r3, #0
 801cc4c:	4602      	mov	r2, r0
 801cc4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cc50:	6a21      	ldr	r1, [r4, #32]
 801cc52:	4628      	mov	r0, r5
 801cc54:	47b0      	blx	r6
 801cc56:	1c43      	adds	r3, r0, #1
 801cc58:	89a3      	ldrh	r3, [r4, #12]
 801cc5a:	d106      	bne.n	801cc6a <__sflush_r+0x66>
 801cc5c:	6829      	ldr	r1, [r5, #0]
 801cc5e:	291d      	cmp	r1, #29
 801cc60:	d82c      	bhi.n	801ccbc <__sflush_r+0xb8>
 801cc62:	4a2a      	ldr	r2, [pc, #168]	; (801cd0c <__sflush_r+0x108>)
 801cc64:	40ca      	lsrs	r2, r1
 801cc66:	07d6      	lsls	r6, r2, #31
 801cc68:	d528      	bpl.n	801ccbc <__sflush_r+0xb8>
 801cc6a:	2200      	movs	r2, #0
 801cc6c:	6062      	str	r2, [r4, #4]
 801cc6e:	04d9      	lsls	r1, r3, #19
 801cc70:	6922      	ldr	r2, [r4, #16]
 801cc72:	6022      	str	r2, [r4, #0]
 801cc74:	d504      	bpl.n	801cc80 <__sflush_r+0x7c>
 801cc76:	1c42      	adds	r2, r0, #1
 801cc78:	d101      	bne.n	801cc7e <__sflush_r+0x7a>
 801cc7a:	682b      	ldr	r3, [r5, #0]
 801cc7c:	b903      	cbnz	r3, 801cc80 <__sflush_r+0x7c>
 801cc7e:	6560      	str	r0, [r4, #84]	; 0x54
 801cc80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cc82:	602f      	str	r7, [r5, #0]
 801cc84:	2900      	cmp	r1, #0
 801cc86:	d0ca      	beq.n	801cc1e <__sflush_r+0x1a>
 801cc88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cc8c:	4299      	cmp	r1, r3
 801cc8e:	d002      	beq.n	801cc96 <__sflush_r+0x92>
 801cc90:	4628      	mov	r0, r5
 801cc92:	f7fb fffb 	bl	8018c8c <_free_r>
 801cc96:	2000      	movs	r0, #0
 801cc98:	6360      	str	r0, [r4, #52]	; 0x34
 801cc9a:	e7c1      	b.n	801cc20 <__sflush_r+0x1c>
 801cc9c:	6a21      	ldr	r1, [r4, #32]
 801cc9e:	2301      	movs	r3, #1
 801cca0:	4628      	mov	r0, r5
 801cca2:	47b0      	blx	r6
 801cca4:	1c41      	adds	r1, r0, #1
 801cca6:	d1c7      	bne.n	801cc38 <__sflush_r+0x34>
 801cca8:	682b      	ldr	r3, [r5, #0]
 801ccaa:	2b00      	cmp	r3, #0
 801ccac:	d0c4      	beq.n	801cc38 <__sflush_r+0x34>
 801ccae:	2b1d      	cmp	r3, #29
 801ccb0:	d001      	beq.n	801ccb6 <__sflush_r+0xb2>
 801ccb2:	2b16      	cmp	r3, #22
 801ccb4:	d101      	bne.n	801ccba <__sflush_r+0xb6>
 801ccb6:	602f      	str	r7, [r5, #0]
 801ccb8:	e7b1      	b.n	801cc1e <__sflush_r+0x1a>
 801ccba:	89a3      	ldrh	r3, [r4, #12]
 801ccbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ccc0:	81a3      	strh	r3, [r4, #12]
 801ccc2:	e7ad      	b.n	801cc20 <__sflush_r+0x1c>
 801ccc4:	690f      	ldr	r7, [r1, #16]
 801ccc6:	2f00      	cmp	r7, #0
 801ccc8:	d0a9      	beq.n	801cc1e <__sflush_r+0x1a>
 801ccca:	0793      	lsls	r3, r2, #30
 801cccc:	680e      	ldr	r6, [r1, #0]
 801ccce:	bf08      	it	eq
 801ccd0:	694b      	ldreq	r3, [r1, #20]
 801ccd2:	600f      	str	r7, [r1, #0]
 801ccd4:	bf18      	it	ne
 801ccd6:	2300      	movne	r3, #0
 801ccd8:	eba6 0807 	sub.w	r8, r6, r7
 801ccdc:	608b      	str	r3, [r1, #8]
 801ccde:	f1b8 0f00 	cmp.w	r8, #0
 801cce2:	dd9c      	ble.n	801cc1e <__sflush_r+0x1a>
 801cce4:	6a21      	ldr	r1, [r4, #32]
 801cce6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801cce8:	4643      	mov	r3, r8
 801ccea:	463a      	mov	r2, r7
 801ccec:	4628      	mov	r0, r5
 801ccee:	47b0      	blx	r6
 801ccf0:	2800      	cmp	r0, #0
 801ccf2:	dc06      	bgt.n	801cd02 <__sflush_r+0xfe>
 801ccf4:	89a3      	ldrh	r3, [r4, #12]
 801ccf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ccfa:	81a3      	strh	r3, [r4, #12]
 801ccfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cd00:	e78e      	b.n	801cc20 <__sflush_r+0x1c>
 801cd02:	4407      	add	r7, r0
 801cd04:	eba8 0800 	sub.w	r8, r8, r0
 801cd08:	e7e9      	b.n	801ccde <__sflush_r+0xda>
 801cd0a:	bf00      	nop
 801cd0c:	20400001 	.word	0x20400001

0801cd10 <_fflush_r>:
 801cd10:	b538      	push	{r3, r4, r5, lr}
 801cd12:	690b      	ldr	r3, [r1, #16]
 801cd14:	4605      	mov	r5, r0
 801cd16:	460c      	mov	r4, r1
 801cd18:	b913      	cbnz	r3, 801cd20 <_fflush_r+0x10>
 801cd1a:	2500      	movs	r5, #0
 801cd1c:	4628      	mov	r0, r5
 801cd1e:	bd38      	pop	{r3, r4, r5, pc}
 801cd20:	b118      	cbz	r0, 801cd2a <_fflush_r+0x1a>
 801cd22:	6983      	ldr	r3, [r0, #24]
 801cd24:	b90b      	cbnz	r3, 801cd2a <_fflush_r+0x1a>
 801cd26:	f000 f887 	bl	801ce38 <__sinit>
 801cd2a:	4b14      	ldr	r3, [pc, #80]	; (801cd7c <_fflush_r+0x6c>)
 801cd2c:	429c      	cmp	r4, r3
 801cd2e:	d11b      	bne.n	801cd68 <_fflush_r+0x58>
 801cd30:	686c      	ldr	r4, [r5, #4]
 801cd32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	d0ef      	beq.n	801cd1a <_fflush_r+0xa>
 801cd3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801cd3c:	07d0      	lsls	r0, r2, #31
 801cd3e:	d404      	bmi.n	801cd4a <_fflush_r+0x3a>
 801cd40:	0599      	lsls	r1, r3, #22
 801cd42:	d402      	bmi.n	801cd4a <_fflush_r+0x3a>
 801cd44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cd46:	f000 f927 	bl	801cf98 <__retarget_lock_acquire_recursive>
 801cd4a:	4628      	mov	r0, r5
 801cd4c:	4621      	mov	r1, r4
 801cd4e:	f7ff ff59 	bl	801cc04 <__sflush_r>
 801cd52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cd54:	07da      	lsls	r2, r3, #31
 801cd56:	4605      	mov	r5, r0
 801cd58:	d4e0      	bmi.n	801cd1c <_fflush_r+0xc>
 801cd5a:	89a3      	ldrh	r3, [r4, #12]
 801cd5c:	059b      	lsls	r3, r3, #22
 801cd5e:	d4dd      	bmi.n	801cd1c <_fflush_r+0xc>
 801cd60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cd62:	f000 f91a 	bl	801cf9a <__retarget_lock_release_recursive>
 801cd66:	e7d9      	b.n	801cd1c <_fflush_r+0xc>
 801cd68:	4b05      	ldr	r3, [pc, #20]	; (801cd80 <_fflush_r+0x70>)
 801cd6a:	429c      	cmp	r4, r3
 801cd6c:	d101      	bne.n	801cd72 <_fflush_r+0x62>
 801cd6e:	68ac      	ldr	r4, [r5, #8]
 801cd70:	e7df      	b.n	801cd32 <_fflush_r+0x22>
 801cd72:	4b04      	ldr	r3, [pc, #16]	; (801cd84 <_fflush_r+0x74>)
 801cd74:	429c      	cmp	r4, r3
 801cd76:	bf08      	it	eq
 801cd78:	68ec      	ldreq	r4, [r5, #12]
 801cd7a:	e7da      	b.n	801cd32 <_fflush_r+0x22>
 801cd7c:	08020e24 	.word	0x08020e24
 801cd80:	08020e44 	.word	0x08020e44
 801cd84:	08020e04 	.word	0x08020e04

0801cd88 <std>:
 801cd88:	2300      	movs	r3, #0
 801cd8a:	b510      	push	{r4, lr}
 801cd8c:	4604      	mov	r4, r0
 801cd8e:	e9c0 3300 	strd	r3, r3, [r0]
 801cd92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cd96:	6083      	str	r3, [r0, #8]
 801cd98:	8181      	strh	r1, [r0, #12]
 801cd9a:	6643      	str	r3, [r0, #100]	; 0x64
 801cd9c:	81c2      	strh	r2, [r0, #14]
 801cd9e:	6183      	str	r3, [r0, #24]
 801cda0:	4619      	mov	r1, r3
 801cda2:	2208      	movs	r2, #8
 801cda4:	305c      	adds	r0, #92	; 0x5c
 801cda6:	f7fb ff69 	bl	8018c7c <memset>
 801cdaa:	4b05      	ldr	r3, [pc, #20]	; (801cdc0 <std+0x38>)
 801cdac:	6263      	str	r3, [r4, #36]	; 0x24
 801cdae:	4b05      	ldr	r3, [pc, #20]	; (801cdc4 <std+0x3c>)
 801cdb0:	62a3      	str	r3, [r4, #40]	; 0x28
 801cdb2:	4b05      	ldr	r3, [pc, #20]	; (801cdc8 <std+0x40>)
 801cdb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801cdb6:	4b05      	ldr	r3, [pc, #20]	; (801cdcc <std+0x44>)
 801cdb8:	6224      	str	r4, [r4, #32]
 801cdba:	6323      	str	r3, [r4, #48]	; 0x30
 801cdbc:	bd10      	pop	{r4, pc}
 801cdbe:	bf00      	nop
 801cdc0:	08019c35 	.word	0x08019c35
 801cdc4:	08019c57 	.word	0x08019c57
 801cdc8:	08019c8f 	.word	0x08019c8f
 801cdcc:	08019cb3 	.word	0x08019cb3

0801cdd0 <_cleanup_r>:
 801cdd0:	4901      	ldr	r1, [pc, #4]	; (801cdd8 <_cleanup_r+0x8>)
 801cdd2:	f000 b8c1 	b.w	801cf58 <_fwalk_reent>
 801cdd6:	bf00      	nop
 801cdd8:	0801cd11 	.word	0x0801cd11

0801cddc <__sfmoreglue>:
 801cddc:	b570      	push	{r4, r5, r6, lr}
 801cdde:	1e4a      	subs	r2, r1, #1
 801cde0:	2568      	movs	r5, #104	; 0x68
 801cde2:	4355      	muls	r5, r2
 801cde4:	460e      	mov	r6, r1
 801cde6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801cdea:	f7fb ff9f 	bl	8018d2c <_malloc_r>
 801cdee:	4604      	mov	r4, r0
 801cdf0:	b140      	cbz	r0, 801ce04 <__sfmoreglue+0x28>
 801cdf2:	2100      	movs	r1, #0
 801cdf4:	e9c0 1600 	strd	r1, r6, [r0]
 801cdf8:	300c      	adds	r0, #12
 801cdfa:	60a0      	str	r0, [r4, #8]
 801cdfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ce00:	f7fb ff3c 	bl	8018c7c <memset>
 801ce04:	4620      	mov	r0, r4
 801ce06:	bd70      	pop	{r4, r5, r6, pc}

0801ce08 <__sfp_lock_acquire>:
 801ce08:	4801      	ldr	r0, [pc, #4]	; (801ce10 <__sfp_lock_acquire+0x8>)
 801ce0a:	f000 b8c5 	b.w	801cf98 <__retarget_lock_acquire_recursive>
 801ce0e:	bf00      	nop
 801ce10:	2000a518 	.word	0x2000a518

0801ce14 <__sfp_lock_release>:
 801ce14:	4801      	ldr	r0, [pc, #4]	; (801ce1c <__sfp_lock_release+0x8>)
 801ce16:	f000 b8c0 	b.w	801cf9a <__retarget_lock_release_recursive>
 801ce1a:	bf00      	nop
 801ce1c:	2000a518 	.word	0x2000a518

0801ce20 <__sinit_lock_acquire>:
 801ce20:	4801      	ldr	r0, [pc, #4]	; (801ce28 <__sinit_lock_acquire+0x8>)
 801ce22:	f000 b8b9 	b.w	801cf98 <__retarget_lock_acquire_recursive>
 801ce26:	bf00      	nop
 801ce28:	2000a513 	.word	0x2000a513

0801ce2c <__sinit_lock_release>:
 801ce2c:	4801      	ldr	r0, [pc, #4]	; (801ce34 <__sinit_lock_release+0x8>)
 801ce2e:	f000 b8b4 	b.w	801cf9a <__retarget_lock_release_recursive>
 801ce32:	bf00      	nop
 801ce34:	2000a513 	.word	0x2000a513

0801ce38 <__sinit>:
 801ce38:	b510      	push	{r4, lr}
 801ce3a:	4604      	mov	r4, r0
 801ce3c:	f7ff fff0 	bl	801ce20 <__sinit_lock_acquire>
 801ce40:	69a3      	ldr	r3, [r4, #24]
 801ce42:	b11b      	cbz	r3, 801ce4c <__sinit+0x14>
 801ce44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ce48:	f7ff bff0 	b.w	801ce2c <__sinit_lock_release>
 801ce4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801ce50:	6523      	str	r3, [r4, #80]	; 0x50
 801ce52:	4b13      	ldr	r3, [pc, #76]	; (801cea0 <__sinit+0x68>)
 801ce54:	4a13      	ldr	r2, [pc, #76]	; (801cea4 <__sinit+0x6c>)
 801ce56:	681b      	ldr	r3, [r3, #0]
 801ce58:	62a2      	str	r2, [r4, #40]	; 0x28
 801ce5a:	42a3      	cmp	r3, r4
 801ce5c:	bf04      	itt	eq
 801ce5e:	2301      	moveq	r3, #1
 801ce60:	61a3      	streq	r3, [r4, #24]
 801ce62:	4620      	mov	r0, r4
 801ce64:	f000 f820 	bl	801cea8 <__sfp>
 801ce68:	6060      	str	r0, [r4, #4]
 801ce6a:	4620      	mov	r0, r4
 801ce6c:	f000 f81c 	bl	801cea8 <__sfp>
 801ce70:	60a0      	str	r0, [r4, #8]
 801ce72:	4620      	mov	r0, r4
 801ce74:	f000 f818 	bl	801cea8 <__sfp>
 801ce78:	2200      	movs	r2, #0
 801ce7a:	60e0      	str	r0, [r4, #12]
 801ce7c:	2104      	movs	r1, #4
 801ce7e:	6860      	ldr	r0, [r4, #4]
 801ce80:	f7ff ff82 	bl	801cd88 <std>
 801ce84:	68a0      	ldr	r0, [r4, #8]
 801ce86:	2201      	movs	r2, #1
 801ce88:	2109      	movs	r1, #9
 801ce8a:	f7ff ff7d 	bl	801cd88 <std>
 801ce8e:	68e0      	ldr	r0, [r4, #12]
 801ce90:	2202      	movs	r2, #2
 801ce92:	2112      	movs	r1, #18
 801ce94:	f7ff ff78 	bl	801cd88 <std>
 801ce98:	2301      	movs	r3, #1
 801ce9a:	61a3      	str	r3, [r4, #24]
 801ce9c:	e7d2      	b.n	801ce44 <__sinit+0xc>
 801ce9e:	bf00      	nop
 801cea0:	080209ac 	.word	0x080209ac
 801cea4:	0801cdd1 	.word	0x0801cdd1

0801cea8 <__sfp>:
 801cea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ceaa:	4607      	mov	r7, r0
 801ceac:	f7ff ffac 	bl	801ce08 <__sfp_lock_acquire>
 801ceb0:	4b1e      	ldr	r3, [pc, #120]	; (801cf2c <__sfp+0x84>)
 801ceb2:	681e      	ldr	r6, [r3, #0]
 801ceb4:	69b3      	ldr	r3, [r6, #24]
 801ceb6:	b913      	cbnz	r3, 801cebe <__sfp+0x16>
 801ceb8:	4630      	mov	r0, r6
 801ceba:	f7ff ffbd 	bl	801ce38 <__sinit>
 801cebe:	3648      	adds	r6, #72	; 0x48
 801cec0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801cec4:	3b01      	subs	r3, #1
 801cec6:	d503      	bpl.n	801ced0 <__sfp+0x28>
 801cec8:	6833      	ldr	r3, [r6, #0]
 801ceca:	b30b      	cbz	r3, 801cf10 <__sfp+0x68>
 801cecc:	6836      	ldr	r6, [r6, #0]
 801cece:	e7f7      	b.n	801cec0 <__sfp+0x18>
 801ced0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ced4:	b9d5      	cbnz	r5, 801cf0c <__sfp+0x64>
 801ced6:	4b16      	ldr	r3, [pc, #88]	; (801cf30 <__sfp+0x88>)
 801ced8:	60e3      	str	r3, [r4, #12]
 801ceda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801cede:	6665      	str	r5, [r4, #100]	; 0x64
 801cee0:	f000 f859 	bl	801cf96 <__retarget_lock_init_recursive>
 801cee4:	f7ff ff96 	bl	801ce14 <__sfp_lock_release>
 801cee8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ceec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801cef0:	6025      	str	r5, [r4, #0]
 801cef2:	61a5      	str	r5, [r4, #24]
 801cef4:	2208      	movs	r2, #8
 801cef6:	4629      	mov	r1, r5
 801cef8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801cefc:	f7fb febe 	bl	8018c7c <memset>
 801cf00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801cf04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801cf08:	4620      	mov	r0, r4
 801cf0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf0c:	3468      	adds	r4, #104	; 0x68
 801cf0e:	e7d9      	b.n	801cec4 <__sfp+0x1c>
 801cf10:	2104      	movs	r1, #4
 801cf12:	4638      	mov	r0, r7
 801cf14:	f7ff ff62 	bl	801cddc <__sfmoreglue>
 801cf18:	4604      	mov	r4, r0
 801cf1a:	6030      	str	r0, [r6, #0]
 801cf1c:	2800      	cmp	r0, #0
 801cf1e:	d1d5      	bne.n	801cecc <__sfp+0x24>
 801cf20:	f7ff ff78 	bl	801ce14 <__sfp_lock_release>
 801cf24:	230c      	movs	r3, #12
 801cf26:	603b      	str	r3, [r7, #0]
 801cf28:	e7ee      	b.n	801cf08 <__sfp+0x60>
 801cf2a:	bf00      	nop
 801cf2c:	080209ac 	.word	0x080209ac
 801cf30:	ffff0001 	.word	0xffff0001

0801cf34 <fiprintf>:
 801cf34:	b40e      	push	{r1, r2, r3}
 801cf36:	b503      	push	{r0, r1, lr}
 801cf38:	4601      	mov	r1, r0
 801cf3a:	ab03      	add	r3, sp, #12
 801cf3c:	4805      	ldr	r0, [pc, #20]	; (801cf54 <fiprintf+0x20>)
 801cf3e:	f853 2b04 	ldr.w	r2, [r3], #4
 801cf42:	6800      	ldr	r0, [r0, #0]
 801cf44:	9301      	str	r3, [sp, #4]
 801cf46:	f000 f875 	bl	801d034 <_vfiprintf_r>
 801cf4a:	b002      	add	sp, #8
 801cf4c:	f85d eb04 	ldr.w	lr, [sp], #4
 801cf50:	b003      	add	sp, #12
 801cf52:	4770      	bx	lr
 801cf54:	200000d0 	.word	0x200000d0

0801cf58 <_fwalk_reent>:
 801cf58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cf5c:	4606      	mov	r6, r0
 801cf5e:	4688      	mov	r8, r1
 801cf60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801cf64:	2700      	movs	r7, #0
 801cf66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801cf6a:	f1b9 0901 	subs.w	r9, r9, #1
 801cf6e:	d505      	bpl.n	801cf7c <_fwalk_reent+0x24>
 801cf70:	6824      	ldr	r4, [r4, #0]
 801cf72:	2c00      	cmp	r4, #0
 801cf74:	d1f7      	bne.n	801cf66 <_fwalk_reent+0xe>
 801cf76:	4638      	mov	r0, r7
 801cf78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cf7c:	89ab      	ldrh	r3, [r5, #12]
 801cf7e:	2b01      	cmp	r3, #1
 801cf80:	d907      	bls.n	801cf92 <_fwalk_reent+0x3a>
 801cf82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cf86:	3301      	adds	r3, #1
 801cf88:	d003      	beq.n	801cf92 <_fwalk_reent+0x3a>
 801cf8a:	4629      	mov	r1, r5
 801cf8c:	4630      	mov	r0, r6
 801cf8e:	47c0      	blx	r8
 801cf90:	4307      	orrs	r7, r0
 801cf92:	3568      	adds	r5, #104	; 0x68
 801cf94:	e7e9      	b.n	801cf6a <_fwalk_reent+0x12>

0801cf96 <__retarget_lock_init_recursive>:
 801cf96:	4770      	bx	lr

0801cf98 <__retarget_lock_acquire_recursive>:
 801cf98:	4770      	bx	lr

0801cf9a <__retarget_lock_release_recursive>:
 801cf9a:	4770      	bx	lr

0801cf9c <memmove>:
 801cf9c:	4288      	cmp	r0, r1
 801cf9e:	b510      	push	{r4, lr}
 801cfa0:	eb01 0402 	add.w	r4, r1, r2
 801cfa4:	d902      	bls.n	801cfac <memmove+0x10>
 801cfa6:	4284      	cmp	r4, r0
 801cfa8:	4623      	mov	r3, r4
 801cfaa:	d807      	bhi.n	801cfbc <memmove+0x20>
 801cfac:	1e43      	subs	r3, r0, #1
 801cfae:	42a1      	cmp	r1, r4
 801cfb0:	d008      	beq.n	801cfc4 <memmove+0x28>
 801cfb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cfb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801cfba:	e7f8      	b.n	801cfae <memmove+0x12>
 801cfbc:	4402      	add	r2, r0
 801cfbe:	4601      	mov	r1, r0
 801cfc0:	428a      	cmp	r2, r1
 801cfc2:	d100      	bne.n	801cfc6 <memmove+0x2a>
 801cfc4:	bd10      	pop	{r4, pc}
 801cfc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801cfca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801cfce:	e7f7      	b.n	801cfc0 <memmove+0x24>

0801cfd0 <_malloc_usable_size_r>:
 801cfd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cfd4:	1f18      	subs	r0, r3, #4
 801cfd6:	2b00      	cmp	r3, #0
 801cfd8:	bfbc      	itt	lt
 801cfda:	580b      	ldrlt	r3, [r1, r0]
 801cfdc:	18c0      	addlt	r0, r0, r3
 801cfde:	4770      	bx	lr

0801cfe0 <__sfputc_r>:
 801cfe0:	6893      	ldr	r3, [r2, #8]
 801cfe2:	3b01      	subs	r3, #1
 801cfe4:	2b00      	cmp	r3, #0
 801cfe6:	b410      	push	{r4}
 801cfe8:	6093      	str	r3, [r2, #8]
 801cfea:	da08      	bge.n	801cffe <__sfputc_r+0x1e>
 801cfec:	6994      	ldr	r4, [r2, #24]
 801cfee:	42a3      	cmp	r3, r4
 801cff0:	db01      	blt.n	801cff6 <__sfputc_r+0x16>
 801cff2:	290a      	cmp	r1, #10
 801cff4:	d103      	bne.n	801cffe <__sfputc_r+0x1e>
 801cff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cffa:	f000 b94b 	b.w	801d294 <__swbuf_r>
 801cffe:	6813      	ldr	r3, [r2, #0]
 801d000:	1c58      	adds	r0, r3, #1
 801d002:	6010      	str	r0, [r2, #0]
 801d004:	7019      	strb	r1, [r3, #0]
 801d006:	4608      	mov	r0, r1
 801d008:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d00c:	4770      	bx	lr

0801d00e <__sfputs_r>:
 801d00e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d010:	4606      	mov	r6, r0
 801d012:	460f      	mov	r7, r1
 801d014:	4614      	mov	r4, r2
 801d016:	18d5      	adds	r5, r2, r3
 801d018:	42ac      	cmp	r4, r5
 801d01a:	d101      	bne.n	801d020 <__sfputs_r+0x12>
 801d01c:	2000      	movs	r0, #0
 801d01e:	e007      	b.n	801d030 <__sfputs_r+0x22>
 801d020:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d024:	463a      	mov	r2, r7
 801d026:	4630      	mov	r0, r6
 801d028:	f7ff ffda 	bl	801cfe0 <__sfputc_r>
 801d02c:	1c43      	adds	r3, r0, #1
 801d02e:	d1f3      	bne.n	801d018 <__sfputs_r+0xa>
 801d030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d034 <_vfiprintf_r>:
 801d034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d038:	460d      	mov	r5, r1
 801d03a:	b09d      	sub	sp, #116	; 0x74
 801d03c:	4614      	mov	r4, r2
 801d03e:	4698      	mov	r8, r3
 801d040:	4606      	mov	r6, r0
 801d042:	b118      	cbz	r0, 801d04c <_vfiprintf_r+0x18>
 801d044:	6983      	ldr	r3, [r0, #24]
 801d046:	b90b      	cbnz	r3, 801d04c <_vfiprintf_r+0x18>
 801d048:	f7ff fef6 	bl	801ce38 <__sinit>
 801d04c:	4b89      	ldr	r3, [pc, #548]	; (801d274 <_vfiprintf_r+0x240>)
 801d04e:	429d      	cmp	r5, r3
 801d050:	d11b      	bne.n	801d08a <_vfiprintf_r+0x56>
 801d052:	6875      	ldr	r5, [r6, #4]
 801d054:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d056:	07d9      	lsls	r1, r3, #31
 801d058:	d405      	bmi.n	801d066 <_vfiprintf_r+0x32>
 801d05a:	89ab      	ldrh	r3, [r5, #12]
 801d05c:	059a      	lsls	r2, r3, #22
 801d05e:	d402      	bmi.n	801d066 <_vfiprintf_r+0x32>
 801d060:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d062:	f7ff ff99 	bl	801cf98 <__retarget_lock_acquire_recursive>
 801d066:	89ab      	ldrh	r3, [r5, #12]
 801d068:	071b      	lsls	r3, r3, #28
 801d06a:	d501      	bpl.n	801d070 <_vfiprintf_r+0x3c>
 801d06c:	692b      	ldr	r3, [r5, #16]
 801d06e:	b9eb      	cbnz	r3, 801d0ac <_vfiprintf_r+0x78>
 801d070:	4629      	mov	r1, r5
 801d072:	4630      	mov	r0, r6
 801d074:	f000 f960 	bl	801d338 <__swsetup_r>
 801d078:	b1c0      	cbz	r0, 801d0ac <_vfiprintf_r+0x78>
 801d07a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d07c:	07dc      	lsls	r4, r3, #31
 801d07e:	d50e      	bpl.n	801d09e <_vfiprintf_r+0x6a>
 801d080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d084:	b01d      	add	sp, #116	; 0x74
 801d086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d08a:	4b7b      	ldr	r3, [pc, #492]	; (801d278 <_vfiprintf_r+0x244>)
 801d08c:	429d      	cmp	r5, r3
 801d08e:	d101      	bne.n	801d094 <_vfiprintf_r+0x60>
 801d090:	68b5      	ldr	r5, [r6, #8]
 801d092:	e7df      	b.n	801d054 <_vfiprintf_r+0x20>
 801d094:	4b79      	ldr	r3, [pc, #484]	; (801d27c <_vfiprintf_r+0x248>)
 801d096:	429d      	cmp	r5, r3
 801d098:	bf08      	it	eq
 801d09a:	68f5      	ldreq	r5, [r6, #12]
 801d09c:	e7da      	b.n	801d054 <_vfiprintf_r+0x20>
 801d09e:	89ab      	ldrh	r3, [r5, #12]
 801d0a0:	0598      	lsls	r0, r3, #22
 801d0a2:	d4ed      	bmi.n	801d080 <_vfiprintf_r+0x4c>
 801d0a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d0a6:	f7ff ff78 	bl	801cf9a <__retarget_lock_release_recursive>
 801d0aa:	e7e9      	b.n	801d080 <_vfiprintf_r+0x4c>
 801d0ac:	2300      	movs	r3, #0
 801d0ae:	9309      	str	r3, [sp, #36]	; 0x24
 801d0b0:	2320      	movs	r3, #32
 801d0b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d0b6:	f8cd 800c 	str.w	r8, [sp, #12]
 801d0ba:	2330      	movs	r3, #48	; 0x30
 801d0bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801d280 <_vfiprintf_r+0x24c>
 801d0c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d0c4:	f04f 0901 	mov.w	r9, #1
 801d0c8:	4623      	mov	r3, r4
 801d0ca:	469a      	mov	sl, r3
 801d0cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d0d0:	b10a      	cbz	r2, 801d0d6 <_vfiprintf_r+0xa2>
 801d0d2:	2a25      	cmp	r2, #37	; 0x25
 801d0d4:	d1f9      	bne.n	801d0ca <_vfiprintf_r+0x96>
 801d0d6:	ebba 0b04 	subs.w	fp, sl, r4
 801d0da:	d00b      	beq.n	801d0f4 <_vfiprintf_r+0xc0>
 801d0dc:	465b      	mov	r3, fp
 801d0de:	4622      	mov	r2, r4
 801d0e0:	4629      	mov	r1, r5
 801d0e2:	4630      	mov	r0, r6
 801d0e4:	f7ff ff93 	bl	801d00e <__sfputs_r>
 801d0e8:	3001      	adds	r0, #1
 801d0ea:	f000 80aa 	beq.w	801d242 <_vfiprintf_r+0x20e>
 801d0ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d0f0:	445a      	add	r2, fp
 801d0f2:	9209      	str	r2, [sp, #36]	; 0x24
 801d0f4:	f89a 3000 	ldrb.w	r3, [sl]
 801d0f8:	2b00      	cmp	r3, #0
 801d0fa:	f000 80a2 	beq.w	801d242 <_vfiprintf_r+0x20e>
 801d0fe:	2300      	movs	r3, #0
 801d100:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d104:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d108:	f10a 0a01 	add.w	sl, sl, #1
 801d10c:	9304      	str	r3, [sp, #16]
 801d10e:	9307      	str	r3, [sp, #28]
 801d110:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d114:	931a      	str	r3, [sp, #104]	; 0x68
 801d116:	4654      	mov	r4, sl
 801d118:	2205      	movs	r2, #5
 801d11a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d11e:	4858      	ldr	r0, [pc, #352]	; (801d280 <_vfiprintf_r+0x24c>)
 801d120:	f7e3 f85e 	bl	80001e0 <memchr>
 801d124:	9a04      	ldr	r2, [sp, #16]
 801d126:	b9d8      	cbnz	r0, 801d160 <_vfiprintf_r+0x12c>
 801d128:	06d1      	lsls	r1, r2, #27
 801d12a:	bf44      	itt	mi
 801d12c:	2320      	movmi	r3, #32
 801d12e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d132:	0713      	lsls	r3, r2, #28
 801d134:	bf44      	itt	mi
 801d136:	232b      	movmi	r3, #43	; 0x2b
 801d138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d13c:	f89a 3000 	ldrb.w	r3, [sl]
 801d140:	2b2a      	cmp	r3, #42	; 0x2a
 801d142:	d015      	beq.n	801d170 <_vfiprintf_r+0x13c>
 801d144:	9a07      	ldr	r2, [sp, #28]
 801d146:	4654      	mov	r4, sl
 801d148:	2000      	movs	r0, #0
 801d14a:	f04f 0c0a 	mov.w	ip, #10
 801d14e:	4621      	mov	r1, r4
 801d150:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d154:	3b30      	subs	r3, #48	; 0x30
 801d156:	2b09      	cmp	r3, #9
 801d158:	d94e      	bls.n	801d1f8 <_vfiprintf_r+0x1c4>
 801d15a:	b1b0      	cbz	r0, 801d18a <_vfiprintf_r+0x156>
 801d15c:	9207      	str	r2, [sp, #28]
 801d15e:	e014      	b.n	801d18a <_vfiprintf_r+0x156>
 801d160:	eba0 0308 	sub.w	r3, r0, r8
 801d164:	fa09 f303 	lsl.w	r3, r9, r3
 801d168:	4313      	orrs	r3, r2
 801d16a:	9304      	str	r3, [sp, #16]
 801d16c:	46a2      	mov	sl, r4
 801d16e:	e7d2      	b.n	801d116 <_vfiprintf_r+0xe2>
 801d170:	9b03      	ldr	r3, [sp, #12]
 801d172:	1d19      	adds	r1, r3, #4
 801d174:	681b      	ldr	r3, [r3, #0]
 801d176:	9103      	str	r1, [sp, #12]
 801d178:	2b00      	cmp	r3, #0
 801d17a:	bfbb      	ittet	lt
 801d17c:	425b      	neglt	r3, r3
 801d17e:	f042 0202 	orrlt.w	r2, r2, #2
 801d182:	9307      	strge	r3, [sp, #28]
 801d184:	9307      	strlt	r3, [sp, #28]
 801d186:	bfb8      	it	lt
 801d188:	9204      	strlt	r2, [sp, #16]
 801d18a:	7823      	ldrb	r3, [r4, #0]
 801d18c:	2b2e      	cmp	r3, #46	; 0x2e
 801d18e:	d10c      	bne.n	801d1aa <_vfiprintf_r+0x176>
 801d190:	7863      	ldrb	r3, [r4, #1]
 801d192:	2b2a      	cmp	r3, #42	; 0x2a
 801d194:	d135      	bne.n	801d202 <_vfiprintf_r+0x1ce>
 801d196:	9b03      	ldr	r3, [sp, #12]
 801d198:	1d1a      	adds	r2, r3, #4
 801d19a:	681b      	ldr	r3, [r3, #0]
 801d19c:	9203      	str	r2, [sp, #12]
 801d19e:	2b00      	cmp	r3, #0
 801d1a0:	bfb8      	it	lt
 801d1a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801d1a6:	3402      	adds	r4, #2
 801d1a8:	9305      	str	r3, [sp, #20]
 801d1aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801d290 <_vfiprintf_r+0x25c>
 801d1ae:	7821      	ldrb	r1, [r4, #0]
 801d1b0:	2203      	movs	r2, #3
 801d1b2:	4650      	mov	r0, sl
 801d1b4:	f7e3 f814 	bl	80001e0 <memchr>
 801d1b8:	b140      	cbz	r0, 801d1cc <_vfiprintf_r+0x198>
 801d1ba:	2340      	movs	r3, #64	; 0x40
 801d1bc:	eba0 000a 	sub.w	r0, r0, sl
 801d1c0:	fa03 f000 	lsl.w	r0, r3, r0
 801d1c4:	9b04      	ldr	r3, [sp, #16]
 801d1c6:	4303      	orrs	r3, r0
 801d1c8:	3401      	adds	r4, #1
 801d1ca:	9304      	str	r3, [sp, #16]
 801d1cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d1d0:	482c      	ldr	r0, [pc, #176]	; (801d284 <_vfiprintf_r+0x250>)
 801d1d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d1d6:	2206      	movs	r2, #6
 801d1d8:	f7e3 f802 	bl	80001e0 <memchr>
 801d1dc:	2800      	cmp	r0, #0
 801d1de:	d03f      	beq.n	801d260 <_vfiprintf_r+0x22c>
 801d1e0:	4b29      	ldr	r3, [pc, #164]	; (801d288 <_vfiprintf_r+0x254>)
 801d1e2:	bb1b      	cbnz	r3, 801d22c <_vfiprintf_r+0x1f8>
 801d1e4:	9b03      	ldr	r3, [sp, #12]
 801d1e6:	3307      	adds	r3, #7
 801d1e8:	f023 0307 	bic.w	r3, r3, #7
 801d1ec:	3308      	adds	r3, #8
 801d1ee:	9303      	str	r3, [sp, #12]
 801d1f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d1f2:	443b      	add	r3, r7
 801d1f4:	9309      	str	r3, [sp, #36]	; 0x24
 801d1f6:	e767      	b.n	801d0c8 <_vfiprintf_r+0x94>
 801d1f8:	fb0c 3202 	mla	r2, ip, r2, r3
 801d1fc:	460c      	mov	r4, r1
 801d1fe:	2001      	movs	r0, #1
 801d200:	e7a5      	b.n	801d14e <_vfiprintf_r+0x11a>
 801d202:	2300      	movs	r3, #0
 801d204:	3401      	adds	r4, #1
 801d206:	9305      	str	r3, [sp, #20]
 801d208:	4619      	mov	r1, r3
 801d20a:	f04f 0c0a 	mov.w	ip, #10
 801d20e:	4620      	mov	r0, r4
 801d210:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d214:	3a30      	subs	r2, #48	; 0x30
 801d216:	2a09      	cmp	r2, #9
 801d218:	d903      	bls.n	801d222 <_vfiprintf_r+0x1ee>
 801d21a:	2b00      	cmp	r3, #0
 801d21c:	d0c5      	beq.n	801d1aa <_vfiprintf_r+0x176>
 801d21e:	9105      	str	r1, [sp, #20]
 801d220:	e7c3      	b.n	801d1aa <_vfiprintf_r+0x176>
 801d222:	fb0c 2101 	mla	r1, ip, r1, r2
 801d226:	4604      	mov	r4, r0
 801d228:	2301      	movs	r3, #1
 801d22a:	e7f0      	b.n	801d20e <_vfiprintf_r+0x1da>
 801d22c:	ab03      	add	r3, sp, #12
 801d22e:	9300      	str	r3, [sp, #0]
 801d230:	462a      	mov	r2, r5
 801d232:	4b16      	ldr	r3, [pc, #88]	; (801d28c <_vfiprintf_r+0x258>)
 801d234:	a904      	add	r1, sp, #16
 801d236:	4630      	mov	r0, r6
 801d238:	f7fb fe72 	bl	8018f20 <_printf_float>
 801d23c:	4607      	mov	r7, r0
 801d23e:	1c78      	adds	r0, r7, #1
 801d240:	d1d6      	bne.n	801d1f0 <_vfiprintf_r+0x1bc>
 801d242:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d244:	07d9      	lsls	r1, r3, #31
 801d246:	d405      	bmi.n	801d254 <_vfiprintf_r+0x220>
 801d248:	89ab      	ldrh	r3, [r5, #12]
 801d24a:	059a      	lsls	r2, r3, #22
 801d24c:	d402      	bmi.n	801d254 <_vfiprintf_r+0x220>
 801d24e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d250:	f7ff fea3 	bl	801cf9a <__retarget_lock_release_recursive>
 801d254:	89ab      	ldrh	r3, [r5, #12]
 801d256:	065b      	lsls	r3, r3, #25
 801d258:	f53f af12 	bmi.w	801d080 <_vfiprintf_r+0x4c>
 801d25c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d25e:	e711      	b.n	801d084 <_vfiprintf_r+0x50>
 801d260:	ab03      	add	r3, sp, #12
 801d262:	9300      	str	r3, [sp, #0]
 801d264:	462a      	mov	r2, r5
 801d266:	4b09      	ldr	r3, [pc, #36]	; (801d28c <_vfiprintf_r+0x258>)
 801d268:	a904      	add	r1, sp, #16
 801d26a:	4630      	mov	r0, r6
 801d26c:	f7fc f8fc 	bl	8019468 <_printf_i>
 801d270:	e7e4      	b.n	801d23c <_vfiprintf_r+0x208>
 801d272:	bf00      	nop
 801d274:	08020e24 	.word	0x08020e24
 801d278:	08020e44 	.word	0x08020e44
 801d27c:	08020e04 	.word	0x08020e04
 801d280:	08020db4 	.word	0x08020db4
 801d284:	08020dbe 	.word	0x08020dbe
 801d288:	08018f21 	.word	0x08018f21
 801d28c:	0801d00f 	.word	0x0801d00f
 801d290:	08020dba 	.word	0x08020dba

0801d294 <__swbuf_r>:
 801d294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d296:	460e      	mov	r6, r1
 801d298:	4614      	mov	r4, r2
 801d29a:	4605      	mov	r5, r0
 801d29c:	b118      	cbz	r0, 801d2a6 <__swbuf_r+0x12>
 801d29e:	6983      	ldr	r3, [r0, #24]
 801d2a0:	b90b      	cbnz	r3, 801d2a6 <__swbuf_r+0x12>
 801d2a2:	f7ff fdc9 	bl	801ce38 <__sinit>
 801d2a6:	4b21      	ldr	r3, [pc, #132]	; (801d32c <__swbuf_r+0x98>)
 801d2a8:	429c      	cmp	r4, r3
 801d2aa:	d12b      	bne.n	801d304 <__swbuf_r+0x70>
 801d2ac:	686c      	ldr	r4, [r5, #4]
 801d2ae:	69a3      	ldr	r3, [r4, #24]
 801d2b0:	60a3      	str	r3, [r4, #8]
 801d2b2:	89a3      	ldrh	r3, [r4, #12]
 801d2b4:	071a      	lsls	r2, r3, #28
 801d2b6:	d52f      	bpl.n	801d318 <__swbuf_r+0x84>
 801d2b8:	6923      	ldr	r3, [r4, #16]
 801d2ba:	b36b      	cbz	r3, 801d318 <__swbuf_r+0x84>
 801d2bc:	6923      	ldr	r3, [r4, #16]
 801d2be:	6820      	ldr	r0, [r4, #0]
 801d2c0:	1ac0      	subs	r0, r0, r3
 801d2c2:	6963      	ldr	r3, [r4, #20]
 801d2c4:	b2f6      	uxtb	r6, r6
 801d2c6:	4283      	cmp	r3, r0
 801d2c8:	4637      	mov	r7, r6
 801d2ca:	dc04      	bgt.n	801d2d6 <__swbuf_r+0x42>
 801d2cc:	4621      	mov	r1, r4
 801d2ce:	4628      	mov	r0, r5
 801d2d0:	f7ff fd1e 	bl	801cd10 <_fflush_r>
 801d2d4:	bb30      	cbnz	r0, 801d324 <__swbuf_r+0x90>
 801d2d6:	68a3      	ldr	r3, [r4, #8]
 801d2d8:	3b01      	subs	r3, #1
 801d2da:	60a3      	str	r3, [r4, #8]
 801d2dc:	6823      	ldr	r3, [r4, #0]
 801d2de:	1c5a      	adds	r2, r3, #1
 801d2e0:	6022      	str	r2, [r4, #0]
 801d2e2:	701e      	strb	r6, [r3, #0]
 801d2e4:	6963      	ldr	r3, [r4, #20]
 801d2e6:	3001      	adds	r0, #1
 801d2e8:	4283      	cmp	r3, r0
 801d2ea:	d004      	beq.n	801d2f6 <__swbuf_r+0x62>
 801d2ec:	89a3      	ldrh	r3, [r4, #12]
 801d2ee:	07db      	lsls	r3, r3, #31
 801d2f0:	d506      	bpl.n	801d300 <__swbuf_r+0x6c>
 801d2f2:	2e0a      	cmp	r6, #10
 801d2f4:	d104      	bne.n	801d300 <__swbuf_r+0x6c>
 801d2f6:	4621      	mov	r1, r4
 801d2f8:	4628      	mov	r0, r5
 801d2fa:	f7ff fd09 	bl	801cd10 <_fflush_r>
 801d2fe:	b988      	cbnz	r0, 801d324 <__swbuf_r+0x90>
 801d300:	4638      	mov	r0, r7
 801d302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d304:	4b0a      	ldr	r3, [pc, #40]	; (801d330 <__swbuf_r+0x9c>)
 801d306:	429c      	cmp	r4, r3
 801d308:	d101      	bne.n	801d30e <__swbuf_r+0x7a>
 801d30a:	68ac      	ldr	r4, [r5, #8]
 801d30c:	e7cf      	b.n	801d2ae <__swbuf_r+0x1a>
 801d30e:	4b09      	ldr	r3, [pc, #36]	; (801d334 <__swbuf_r+0xa0>)
 801d310:	429c      	cmp	r4, r3
 801d312:	bf08      	it	eq
 801d314:	68ec      	ldreq	r4, [r5, #12]
 801d316:	e7ca      	b.n	801d2ae <__swbuf_r+0x1a>
 801d318:	4621      	mov	r1, r4
 801d31a:	4628      	mov	r0, r5
 801d31c:	f000 f80c 	bl	801d338 <__swsetup_r>
 801d320:	2800      	cmp	r0, #0
 801d322:	d0cb      	beq.n	801d2bc <__swbuf_r+0x28>
 801d324:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801d328:	e7ea      	b.n	801d300 <__swbuf_r+0x6c>
 801d32a:	bf00      	nop
 801d32c:	08020e24 	.word	0x08020e24
 801d330:	08020e44 	.word	0x08020e44
 801d334:	08020e04 	.word	0x08020e04

0801d338 <__swsetup_r>:
 801d338:	4b32      	ldr	r3, [pc, #200]	; (801d404 <__swsetup_r+0xcc>)
 801d33a:	b570      	push	{r4, r5, r6, lr}
 801d33c:	681d      	ldr	r5, [r3, #0]
 801d33e:	4606      	mov	r6, r0
 801d340:	460c      	mov	r4, r1
 801d342:	b125      	cbz	r5, 801d34e <__swsetup_r+0x16>
 801d344:	69ab      	ldr	r3, [r5, #24]
 801d346:	b913      	cbnz	r3, 801d34e <__swsetup_r+0x16>
 801d348:	4628      	mov	r0, r5
 801d34a:	f7ff fd75 	bl	801ce38 <__sinit>
 801d34e:	4b2e      	ldr	r3, [pc, #184]	; (801d408 <__swsetup_r+0xd0>)
 801d350:	429c      	cmp	r4, r3
 801d352:	d10f      	bne.n	801d374 <__swsetup_r+0x3c>
 801d354:	686c      	ldr	r4, [r5, #4]
 801d356:	89a3      	ldrh	r3, [r4, #12]
 801d358:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d35c:	0719      	lsls	r1, r3, #28
 801d35e:	d42c      	bmi.n	801d3ba <__swsetup_r+0x82>
 801d360:	06dd      	lsls	r5, r3, #27
 801d362:	d411      	bmi.n	801d388 <__swsetup_r+0x50>
 801d364:	2309      	movs	r3, #9
 801d366:	6033      	str	r3, [r6, #0]
 801d368:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d36c:	81a3      	strh	r3, [r4, #12]
 801d36e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d372:	e03e      	b.n	801d3f2 <__swsetup_r+0xba>
 801d374:	4b25      	ldr	r3, [pc, #148]	; (801d40c <__swsetup_r+0xd4>)
 801d376:	429c      	cmp	r4, r3
 801d378:	d101      	bne.n	801d37e <__swsetup_r+0x46>
 801d37a:	68ac      	ldr	r4, [r5, #8]
 801d37c:	e7eb      	b.n	801d356 <__swsetup_r+0x1e>
 801d37e:	4b24      	ldr	r3, [pc, #144]	; (801d410 <__swsetup_r+0xd8>)
 801d380:	429c      	cmp	r4, r3
 801d382:	bf08      	it	eq
 801d384:	68ec      	ldreq	r4, [r5, #12]
 801d386:	e7e6      	b.n	801d356 <__swsetup_r+0x1e>
 801d388:	0758      	lsls	r0, r3, #29
 801d38a:	d512      	bpl.n	801d3b2 <__swsetup_r+0x7a>
 801d38c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d38e:	b141      	cbz	r1, 801d3a2 <__swsetup_r+0x6a>
 801d390:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d394:	4299      	cmp	r1, r3
 801d396:	d002      	beq.n	801d39e <__swsetup_r+0x66>
 801d398:	4630      	mov	r0, r6
 801d39a:	f7fb fc77 	bl	8018c8c <_free_r>
 801d39e:	2300      	movs	r3, #0
 801d3a0:	6363      	str	r3, [r4, #52]	; 0x34
 801d3a2:	89a3      	ldrh	r3, [r4, #12]
 801d3a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d3a8:	81a3      	strh	r3, [r4, #12]
 801d3aa:	2300      	movs	r3, #0
 801d3ac:	6063      	str	r3, [r4, #4]
 801d3ae:	6923      	ldr	r3, [r4, #16]
 801d3b0:	6023      	str	r3, [r4, #0]
 801d3b2:	89a3      	ldrh	r3, [r4, #12]
 801d3b4:	f043 0308 	orr.w	r3, r3, #8
 801d3b8:	81a3      	strh	r3, [r4, #12]
 801d3ba:	6923      	ldr	r3, [r4, #16]
 801d3bc:	b94b      	cbnz	r3, 801d3d2 <__swsetup_r+0x9a>
 801d3be:	89a3      	ldrh	r3, [r4, #12]
 801d3c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d3c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d3c8:	d003      	beq.n	801d3d2 <__swsetup_r+0x9a>
 801d3ca:	4621      	mov	r1, r4
 801d3cc:	4630      	mov	r0, r6
 801d3ce:	f000 f84d 	bl	801d46c <__smakebuf_r>
 801d3d2:	89a0      	ldrh	r0, [r4, #12]
 801d3d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d3d8:	f010 0301 	ands.w	r3, r0, #1
 801d3dc:	d00a      	beq.n	801d3f4 <__swsetup_r+0xbc>
 801d3de:	2300      	movs	r3, #0
 801d3e0:	60a3      	str	r3, [r4, #8]
 801d3e2:	6963      	ldr	r3, [r4, #20]
 801d3e4:	425b      	negs	r3, r3
 801d3e6:	61a3      	str	r3, [r4, #24]
 801d3e8:	6923      	ldr	r3, [r4, #16]
 801d3ea:	b943      	cbnz	r3, 801d3fe <__swsetup_r+0xc6>
 801d3ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d3f0:	d1ba      	bne.n	801d368 <__swsetup_r+0x30>
 801d3f2:	bd70      	pop	{r4, r5, r6, pc}
 801d3f4:	0781      	lsls	r1, r0, #30
 801d3f6:	bf58      	it	pl
 801d3f8:	6963      	ldrpl	r3, [r4, #20]
 801d3fa:	60a3      	str	r3, [r4, #8]
 801d3fc:	e7f4      	b.n	801d3e8 <__swsetup_r+0xb0>
 801d3fe:	2000      	movs	r0, #0
 801d400:	e7f7      	b.n	801d3f2 <__swsetup_r+0xba>
 801d402:	bf00      	nop
 801d404:	200000d0 	.word	0x200000d0
 801d408:	08020e24 	.word	0x08020e24
 801d40c:	08020e44 	.word	0x08020e44
 801d410:	08020e04 	.word	0x08020e04

0801d414 <abort>:
 801d414:	b508      	push	{r3, lr}
 801d416:	2006      	movs	r0, #6
 801d418:	f000 f890 	bl	801d53c <raise>
 801d41c:	2001      	movs	r0, #1
 801d41e:	f7ef fd9d 	bl	800cf5c <_exit>

0801d422 <__swhatbuf_r>:
 801d422:	b570      	push	{r4, r5, r6, lr}
 801d424:	460e      	mov	r6, r1
 801d426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d42a:	2900      	cmp	r1, #0
 801d42c:	b096      	sub	sp, #88	; 0x58
 801d42e:	4614      	mov	r4, r2
 801d430:	461d      	mov	r5, r3
 801d432:	da07      	bge.n	801d444 <__swhatbuf_r+0x22>
 801d434:	2300      	movs	r3, #0
 801d436:	602b      	str	r3, [r5, #0]
 801d438:	89b3      	ldrh	r3, [r6, #12]
 801d43a:	061a      	lsls	r2, r3, #24
 801d43c:	d410      	bmi.n	801d460 <__swhatbuf_r+0x3e>
 801d43e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d442:	e00e      	b.n	801d462 <__swhatbuf_r+0x40>
 801d444:	466a      	mov	r2, sp
 801d446:	f000 f895 	bl	801d574 <_fstat_r>
 801d44a:	2800      	cmp	r0, #0
 801d44c:	dbf2      	blt.n	801d434 <__swhatbuf_r+0x12>
 801d44e:	9a01      	ldr	r2, [sp, #4]
 801d450:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d454:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d458:	425a      	negs	r2, r3
 801d45a:	415a      	adcs	r2, r3
 801d45c:	602a      	str	r2, [r5, #0]
 801d45e:	e7ee      	b.n	801d43e <__swhatbuf_r+0x1c>
 801d460:	2340      	movs	r3, #64	; 0x40
 801d462:	2000      	movs	r0, #0
 801d464:	6023      	str	r3, [r4, #0]
 801d466:	b016      	add	sp, #88	; 0x58
 801d468:	bd70      	pop	{r4, r5, r6, pc}
	...

0801d46c <__smakebuf_r>:
 801d46c:	898b      	ldrh	r3, [r1, #12]
 801d46e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d470:	079d      	lsls	r5, r3, #30
 801d472:	4606      	mov	r6, r0
 801d474:	460c      	mov	r4, r1
 801d476:	d507      	bpl.n	801d488 <__smakebuf_r+0x1c>
 801d478:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d47c:	6023      	str	r3, [r4, #0]
 801d47e:	6123      	str	r3, [r4, #16]
 801d480:	2301      	movs	r3, #1
 801d482:	6163      	str	r3, [r4, #20]
 801d484:	b002      	add	sp, #8
 801d486:	bd70      	pop	{r4, r5, r6, pc}
 801d488:	ab01      	add	r3, sp, #4
 801d48a:	466a      	mov	r2, sp
 801d48c:	f7ff ffc9 	bl	801d422 <__swhatbuf_r>
 801d490:	9900      	ldr	r1, [sp, #0]
 801d492:	4605      	mov	r5, r0
 801d494:	4630      	mov	r0, r6
 801d496:	f7fb fc49 	bl	8018d2c <_malloc_r>
 801d49a:	b948      	cbnz	r0, 801d4b0 <__smakebuf_r+0x44>
 801d49c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d4a0:	059a      	lsls	r2, r3, #22
 801d4a2:	d4ef      	bmi.n	801d484 <__smakebuf_r+0x18>
 801d4a4:	f023 0303 	bic.w	r3, r3, #3
 801d4a8:	f043 0302 	orr.w	r3, r3, #2
 801d4ac:	81a3      	strh	r3, [r4, #12]
 801d4ae:	e7e3      	b.n	801d478 <__smakebuf_r+0xc>
 801d4b0:	4b0d      	ldr	r3, [pc, #52]	; (801d4e8 <__smakebuf_r+0x7c>)
 801d4b2:	62b3      	str	r3, [r6, #40]	; 0x28
 801d4b4:	89a3      	ldrh	r3, [r4, #12]
 801d4b6:	6020      	str	r0, [r4, #0]
 801d4b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d4bc:	81a3      	strh	r3, [r4, #12]
 801d4be:	9b00      	ldr	r3, [sp, #0]
 801d4c0:	6163      	str	r3, [r4, #20]
 801d4c2:	9b01      	ldr	r3, [sp, #4]
 801d4c4:	6120      	str	r0, [r4, #16]
 801d4c6:	b15b      	cbz	r3, 801d4e0 <__smakebuf_r+0x74>
 801d4c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d4cc:	4630      	mov	r0, r6
 801d4ce:	f000 f863 	bl	801d598 <_isatty_r>
 801d4d2:	b128      	cbz	r0, 801d4e0 <__smakebuf_r+0x74>
 801d4d4:	89a3      	ldrh	r3, [r4, #12]
 801d4d6:	f023 0303 	bic.w	r3, r3, #3
 801d4da:	f043 0301 	orr.w	r3, r3, #1
 801d4de:	81a3      	strh	r3, [r4, #12]
 801d4e0:	89a0      	ldrh	r0, [r4, #12]
 801d4e2:	4305      	orrs	r5, r0
 801d4e4:	81a5      	strh	r5, [r4, #12]
 801d4e6:	e7cd      	b.n	801d484 <__smakebuf_r+0x18>
 801d4e8:	0801cdd1 	.word	0x0801cdd1

0801d4ec <_raise_r>:
 801d4ec:	291f      	cmp	r1, #31
 801d4ee:	b538      	push	{r3, r4, r5, lr}
 801d4f0:	4604      	mov	r4, r0
 801d4f2:	460d      	mov	r5, r1
 801d4f4:	d904      	bls.n	801d500 <_raise_r+0x14>
 801d4f6:	2316      	movs	r3, #22
 801d4f8:	6003      	str	r3, [r0, #0]
 801d4fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d4fe:	bd38      	pop	{r3, r4, r5, pc}
 801d500:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801d502:	b112      	cbz	r2, 801d50a <_raise_r+0x1e>
 801d504:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d508:	b94b      	cbnz	r3, 801d51e <_raise_r+0x32>
 801d50a:	4620      	mov	r0, r4
 801d50c:	f000 f830 	bl	801d570 <_getpid_r>
 801d510:	462a      	mov	r2, r5
 801d512:	4601      	mov	r1, r0
 801d514:	4620      	mov	r0, r4
 801d516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d51a:	f000 b817 	b.w	801d54c <_kill_r>
 801d51e:	2b01      	cmp	r3, #1
 801d520:	d00a      	beq.n	801d538 <_raise_r+0x4c>
 801d522:	1c59      	adds	r1, r3, #1
 801d524:	d103      	bne.n	801d52e <_raise_r+0x42>
 801d526:	2316      	movs	r3, #22
 801d528:	6003      	str	r3, [r0, #0]
 801d52a:	2001      	movs	r0, #1
 801d52c:	e7e7      	b.n	801d4fe <_raise_r+0x12>
 801d52e:	2400      	movs	r4, #0
 801d530:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d534:	4628      	mov	r0, r5
 801d536:	4798      	blx	r3
 801d538:	2000      	movs	r0, #0
 801d53a:	e7e0      	b.n	801d4fe <_raise_r+0x12>

0801d53c <raise>:
 801d53c:	4b02      	ldr	r3, [pc, #8]	; (801d548 <raise+0xc>)
 801d53e:	4601      	mov	r1, r0
 801d540:	6818      	ldr	r0, [r3, #0]
 801d542:	f7ff bfd3 	b.w	801d4ec <_raise_r>
 801d546:	bf00      	nop
 801d548:	200000d0 	.word	0x200000d0

0801d54c <_kill_r>:
 801d54c:	b538      	push	{r3, r4, r5, lr}
 801d54e:	4d07      	ldr	r5, [pc, #28]	; (801d56c <_kill_r+0x20>)
 801d550:	2300      	movs	r3, #0
 801d552:	4604      	mov	r4, r0
 801d554:	4608      	mov	r0, r1
 801d556:	4611      	mov	r1, r2
 801d558:	602b      	str	r3, [r5, #0]
 801d55a:	f7ef fcef 	bl	800cf3c <_kill>
 801d55e:	1c43      	adds	r3, r0, #1
 801d560:	d102      	bne.n	801d568 <_kill_r+0x1c>
 801d562:	682b      	ldr	r3, [r5, #0]
 801d564:	b103      	cbz	r3, 801d568 <_kill_r+0x1c>
 801d566:	6023      	str	r3, [r4, #0]
 801d568:	bd38      	pop	{r3, r4, r5, pc}
 801d56a:	bf00      	nop
 801d56c:	2000a50c 	.word	0x2000a50c

0801d570 <_getpid_r>:
 801d570:	f7ef bcdc 	b.w	800cf2c <_getpid>

0801d574 <_fstat_r>:
 801d574:	b538      	push	{r3, r4, r5, lr}
 801d576:	4d07      	ldr	r5, [pc, #28]	; (801d594 <_fstat_r+0x20>)
 801d578:	2300      	movs	r3, #0
 801d57a:	4604      	mov	r4, r0
 801d57c:	4608      	mov	r0, r1
 801d57e:	4611      	mov	r1, r2
 801d580:	602b      	str	r3, [r5, #0]
 801d582:	f7ef fd3a 	bl	800cffa <_fstat>
 801d586:	1c43      	adds	r3, r0, #1
 801d588:	d102      	bne.n	801d590 <_fstat_r+0x1c>
 801d58a:	682b      	ldr	r3, [r5, #0]
 801d58c:	b103      	cbz	r3, 801d590 <_fstat_r+0x1c>
 801d58e:	6023      	str	r3, [r4, #0]
 801d590:	bd38      	pop	{r3, r4, r5, pc}
 801d592:	bf00      	nop
 801d594:	2000a50c 	.word	0x2000a50c

0801d598 <_isatty_r>:
 801d598:	b538      	push	{r3, r4, r5, lr}
 801d59a:	4d06      	ldr	r5, [pc, #24]	; (801d5b4 <_isatty_r+0x1c>)
 801d59c:	2300      	movs	r3, #0
 801d59e:	4604      	mov	r4, r0
 801d5a0:	4608      	mov	r0, r1
 801d5a2:	602b      	str	r3, [r5, #0]
 801d5a4:	f7ef fd39 	bl	800d01a <_isatty>
 801d5a8:	1c43      	adds	r3, r0, #1
 801d5aa:	d102      	bne.n	801d5b2 <_isatty_r+0x1a>
 801d5ac:	682b      	ldr	r3, [r5, #0]
 801d5ae:	b103      	cbz	r3, 801d5b2 <_isatty_r+0x1a>
 801d5b0:	6023      	str	r3, [r4, #0]
 801d5b2:	bd38      	pop	{r3, r4, r5, pc}
 801d5b4:	2000a50c 	.word	0x2000a50c

0801d5b8 <atan>:
 801d5b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5bc:	ec55 4b10 	vmov	r4, r5, d0
 801d5c0:	4bc3      	ldr	r3, [pc, #780]	; (801d8d0 <atan+0x318>)
 801d5c2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801d5c6:	429e      	cmp	r6, r3
 801d5c8:	46ab      	mov	fp, r5
 801d5ca:	dd18      	ble.n	801d5fe <atan+0x46>
 801d5cc:	4bc1      	ldr	r3, [pc, #772]	; (801d8d4 <atan+0x31c>)
 801d5ce:	429e      	cmp	r6, r3
 801d5d0:	dc01      	bgt.n	801d5d6 <atan+0x1e>
 801d5d2:	d109      	bne.n	801d5e8 <atan+0x30>
 801d5d4:	b144      	cbz	r4, 801d5e8 <atan+0x30>
 801d5d6:	4622      	mov	r2, r4
 801d5d8:	462b      	mov	r3, r5
 801d5da:	4620      	mov	r0, r4
 801d5dc:	4629      	mov	r1, r5
 801d5de:	f7e2 fe55 	bl	800028c <__adddf3>
 801d5e2:	4604      	mov	r4, r0
 801d5e4:	460d      	mov	r5, r1
 801d5e6:	e006      	b.n	801d5f6 <atan+0x3e>
 801d5e8:	f1bb 0f00 	cmp.w	fp, #0
 801d5ec:	f300 8131 	bgt.w	801d852 <atan+0x29a>
 801d5f0:	a59b      	add	r5, pc, #620	; (adr r5, 801d860 <atan+0x2a8>)
 801d5f2:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d5f6:	ec45 4b10 	vmov	d0, r4, r5
 801d5fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5fe:	4bb6      	ldr	r3, [pc, #728]	; (801d8d8 <atan+0x320>)
 801d600:	429e      	cmp	r6, r3
 801d602:	dc14      	bgt.n	801d62e <atan+0x76>
 801d604:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801d608:	429e      	cmp	r6, r3
 801d60a:	dc0d      	bgt.n	801d628 <atan+0x70>
 801d60c:	a396      	add	r3, pc, #600	; (adr r3, 801d868 <atan+0x2b0>)
 801d60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d612:	ee10 0a10 	vmov	r0, s0
 801d616:	4629      	mov	r1, r5
 801d618:	f7e2 fe38 	bl	800028c <__adddf3>
 801d61c:	4baf      	ldr	r3, [pc, #700]	; (801d8dc <atan+0x324>)
 801d61e:	2200      	movs	r2, #0
 801d620:	f7e3 fa7a 	bl	8000b18 <__aeabi_dcmpgt>
 801d624:	2800      	cmp	r0, #0
 801d626:	d1e6      	bne.n	801d5f6 <atan+0x3e>
 801d628:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801d62c:	e02b      	b.n	801d686 <atan+0xce>
 801d62e:	f000 f963 	bl	801d8f8 <fabs>
 801d632:	4bab      	ldr	r3, [pc, #684]	; (801d8e0 <atan+0x328>)
 801d634:	429e      	cmp	r6, r3
 801d636:	ec55 4b10 	vmov	r4, r5, d0
 801d63a:	f300 80bf 	bgt.w	801d7bc <atan+0x204>
 801d63e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801d642:	429e      	cmp	r6, r3
 801d644:	f300 80a0 	bgt.w	801d788 <atan+0x1d0>
 801d648:	ee10 2a10 	vmov	r2, s0
 801d64c:	ee10 0a10 	vmov	r0, s0
 801d650:	462b      	mov	r3, r5
 801d652:	4629      	mov	r1, r5
 801d654:	f7e2 fe1a 	bl	800028c <__adddf3>
 801d658:	4ba0      	ldr	r3, [pc, #640]	; (801d8dc <atan+0x324>)
 801d65a:	2200      	movs	r2, #0
 801d65c:	f7e2 fe14 	bl	8000288 <__aeabi_dsub>
 801d660:	2200      	movs	r2, #0
 801d662:	4606      	mov	r6, r0
 801d664:	460f      	mov	r7, r1
 801d666:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d66a:	4620      	mov	r0, r4
 801d66c:	4629      	mov	r1, r5
 801d66e:	f7e2 fe0d 	bl	800028c <__adddf3>
 801d672:	4602      	mov	r2, r0
 801d674:	460b      	mov	r3, r1
 801d676:	4630      	mov	r0, r6
 801d678:	4639      	mov	r1, r7
 801d67a:	f7e3 f8e7 	bl	800084c <__aeabi_ddiv>
 801d67e:	f04f 0a00 	mov.w	sl, #0
 801d682:	4604      	mov	r4, r0
 801d684:	460d      	mov	r5, r1
 801d686:	4622      	mov	r2, r4
 801d688:	462b      	mov	r3, r5
 801d68a:	4620      	mov	r0, r4
 801d68c:	4629      	mov	r1, r5
 801d68e:	f7e2 ffb3 	bl	80005f8 <__aeabi_dmul>
 801d692:	4602      	mov	r2, r0
 801d694:	460b      	mov	r3, r1
 801d696:	4680      	mov	r8, r0
 801d698:	4689      	mov	r9, r1
 801d69a:	f7e2 ffad 	bl	80005f8 <__aeabi_dmul>
 801d69e:	a374      	add	r3, pc, #464	; (adr r3, 801d870 <atan+0x2b8>)
 801d6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6a4:	4606      	mov	r6, r0
 801d6a6:	460f      	mov	r7, r1
 801d6a8:	f7e2 ffa6 	bl	80005f8 <__aeabi_dmul>
 801d6ac:	a372      	add	r3, pc, #456	; (adr r3, 801d878 <atan+0x2c0>)
 801d6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6b2:	f7e2 fdeb 	bl	800028c <__adddf3>
 801d6b6:	4632      	mov	r2, r6
 801d6b8:	463b      	mov	r3, r7
 801d6ba:	f7e2 ff9d 	bl	80005f8 <__aeabi_dmul>
 801d6be:	a370      	add	r3, pc, #448	; (adr r3, 801d880 <atan+0x2c8>)
 801d6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6c4:	f7e2 fde2 	bl	800028c <__adddf3>
 801d6c8:	4632      	mov	r2, r6
 801d6ca:	463b      	mov	r3, r7
 801d6cc:	f7e2 ff94 	bl	80005f8 <__aeabi_dmul>
 801d6d0:	a36d      	add	r3, pc, #436	; (adr r3, 801d888 <atan+0x2d0>)
 801d6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6d6:	f7e2 fdd9 	bl	800028c <__adddf3>
 801d6da:	4632      	mov	r2, r6
 801d6dc:	463b      	mov	r3, r7
 801d6de:	f7e2 ff8b 	bl	80005f8 <__aeabi_dmul>
 801d6e2:	a36b      	add	r3, pc, #428	; (adr r3, 801d890 <atan+0x2d8>)
 801d6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6e8:	f7e2 fdd0 	bl	800028c <__adddf3>
 801d6ec:	4632      	mov	r2, r6
 801d6ee:	463b      	mov	r3, r7
 801d6f0:	f7e2 ff82 	bl	80005f8 <__aeabi_dmul>
 801d6f4:	a368      	add	r3, pc, #416	; (adr r3, 801d898 <atan+0x2e0>)
 801d6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6fa:	f7e2 fdc7 	bl	800028c <__adddf3>
 801d6fe:	4642      	mov	r2, r8
 801d700:	464b      	mov	r3, r9
 801d702:	f7e2 ff79 	bl	80005f8 <__aeabi_dmul>
 801d706:	a366      	add	r3, pc, #408	; (adr r3, 801d8a0 <atan+0x2e8>)
 801d708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d70c:	4680      	mov	r8, r0
 801d70e:	4689      	mov	r9, r1
 801d710:	4630      	mov	r0, r6
 801d712:	4639      	mov	r1, r7
 801d714:	f7e2 ff70 	bl	80005f8 <__aeabi_dmul>
 801d718:	a363      	add	r3, pc, #396	; (adr r3, 801d8a8 <atan+0x2f0>)
 801d71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d71e:	f7e2 fdb3 	bl	8000288 <__aeabi_dsub>
 801d722:	4632      	mov	r2, r6
 801d724:	463b      	mov	r3, r7
 801d726:	f7e2 ff67 	bl	80005f8 <__aeabi_dmul>
 801d72a:	a361      	add	r3, pc, #388	; (adr r3, 801d8b0 <atan+0x2f8>)
 801d72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d730:	f7e2 fdaa 	bl	8000288 <__aeabi_dsub>
 801d734:	4632      	mov	r2, r6
 801d736:	463b      	mov	r3, r7
 801d738:	f7e2 ff5e 	bl	80005f8 <__aeabi_dmul>
 801d73c:	a35e      	add	r3, pc, #376	; (adr r3, 801d8b8 <atan+0x300>)
 801d73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d742:	f7e2 fda1 	bl	8000288 <__aeabi_dsub>
 801d746:	4632      	mov	r2, r6
 801d748:	463b      	mov	r3, r7
 801d74a:	f7e2 ff55 	bl	80005f8 <__aeabi_dmul>
 801d74e:	a35c      	add	r3, pc, #368	; (adr r3, 801d8c0 <atan+0x308>)
 801d750:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d754:	f7e2 fd98 	bl	8000288 <__aeabi_dsub>
 801d758:	4632      	mov	r2, r6
 801d75a:	463b      	mov	r3, r7
 801d75c:	f7e2 ff4c 	bl	80005f8 <__aeabi_dmul>
 801d760:	4602      	mov	r2, r0
 801d762:	460b      	mov	r3, r1
 801d764:	4640      	mov	r0, r8
 801d766:	4649      	mov	r1, r9
 801d768:	f7e2 fd90 	bl	800028c <__adddf3>
 801d76c:	4622      	mov	r2, r4
 801d76e:	462b      	mov	r3, r5
 801d770:	f7e2 ff42 	bl	80005f8 <__aeabi_dmul>
 801d774:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 801d778:	4602      	mov	r2, r0
 801d77a:	460b      	mov	r3, r1
 801d77c:	d14b      	bne.n	801d816 <atan+0x25e>
 801d77e:	4620      	mov	r0, r4
 801d780:	4629      	mov	r1, r5
 801d782:	f7e2 fd81 	bl	8000288 <__aeabi_dsub>
 801d786:	e72c      	b.n	801d5e2 <atan+0x2a>
 801d788:	ee10 0a10 	vmov	r0, s0
 801d78c:	4b53      	ldr	r3, [pc, #332]	; (801d8dc <atan+0x324>)
 801d78e:	2200      	movs	r2, #0
 801d790:	4629      	mov	r1, r5
 801d792:	f7e2 fd79 	bl	8000288 <__aeabi_dsub>
 801d796:	4b51      	ldr	r3, [pc, #324]	; (801d8dc <atan+0x324>)
 801d798:	4606      	mov	r6, r0
 801d79a:	460f      	mov	r7, r1
 801d79c:	2200      	movs	r2, #0
 801d79e:	4620      	mov	r0, r4
 801d7a0:	4629      	mov	r1, r5
 801d7a2:	f7e2 fd73 	bl	800028c <__adddf3>
 801d7a6:	4602      	mov	r2, r0
 801d7a8:	460b      	mov	r3, r1
 801d7aa:	4630      	mov	r0, r6
 801d7ac:	4639      	mov	r1, r7
 801d7ae:	f7e3 f84d 	bl	800084c <__aeabi_ddiv>
 801d7b2:	f04f 0a01 	mov.w	sl, #1
 801d7b6:	4604      	mov	r4, r0
 801d7b8:	460d      	mov	r5, r1
 801d7ba:	e764      	b.n	801d686 <atan+0xce>
 801d7bc:	4b49      	ldr	r3, [pc, #292]	; (801d8e4 <atan+0x32c>)
 801d7be:	429e      	cmp	r6, r3
 801d7c0:	da1d      	bge.n	801d7fe <atan+0x246>
 801d7c2:	ee10 0a10 	vmov	r0, s0
 801d7c6:	4b48      	ldr	r3, [pc, #288]	; (801d8e8 <atan+0x330>)
 801d7c8:	2200      	movs	r2, #0
 801d7ca:	4629      	mov	r1, r5
 801d7cc:	f7e2 fd5c 	bl	8000288 <__aeabi_dsub>
 801d7d0:	4b45      	ldr	r3, [pc, #276]	; (801d8e8 <atan+0x330>)
 801d7d2:	4606      	mov	r6, r0
 801d7d4:	460f      	mov	r7, r1
 801d7d6:	2200      	movs	r2, #0
 801d7d8:	4620      	mov	r0, r4
 801d7da:	4629      	mov	r1, r5
 801d7dc:	f7e2 ff0c 	bl	80005f8 <__aeabi_dmul>
 801d7e0:	4b3e      	ldr	r3, [pc, #248]	; (801d8dc <atan+0x324>)
 801d7e2:	2200      	movs	r2, #0
 801d7e4:	f7e2 fd52 	bl	800028c <__adddf3>
 801d7e8:	4602      	mov	r2, r0
 801d7ea:	460b      	mov	r3, r1
 801d7ec:	4630      	mov	r0, r6
 801d7ee:	4639      	mov	r1, r7
 801d7f0:	f7e3 f82c 	bl	800084c <__aeabi_ddiv>
 801d7f4:	f04f 0a02 	mov.w	sl, #2
 801d7f8:	4604      	mov	r4, r0
 801d7fa:	460d      	mov	r5, r1
 801d7fc:	e743      	b.n	801d686 <atan+0xce>
 801d7fe:	462b      	mov	r3, r5
 801d800:	ee10 2a10 	vmov	r2, s0
 801d804:	4939      	ldr	r1, [pc, #228]	; (801d8ec <atan+0x334>)
 801d806:	2000      	movs	r0, #0
 801d808:	f7e3 f820 	bl	800084c <__aeabi_ddiv>
 801d80c:	f04f 0a03 	mov.w	sl, #3
 801d810:	4604      	mov	r4, r0
 801d812:	460d      	mov	r5, r1
 801d814:	e737      	b.n	801d686 <atan+0xce>
 801d816:	4b36      	ldr	r3, [pc, #216]	; (801d8f0 <atan+0x338>)
 801d818:	4e36      	ldr	r6, [pc, #216]	; (801d8f4 <atan+0x33c>)
 801d81a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801d81e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801d822:	e9da 2300 	ldrd	r2, r3, [sl]
 801d826:	f7e2 fd2f 	bl	8000288 <__aeabi_dsub>
 801d82a:	4622      	mov	r2, r4
 801d82c:	462b      	mov	r3, r5
 801d82e:	f7e2 fd2b 	bl	8000288 <__aeabi_dsub>
 801d832:	4602      	mov	r2, r0
 801d834:	460b      	mov	r3, r1
 801d836:	e9d6 0100 	ldrd	r0, r1, [r6]
 801d83a:	f7e2 fd25 	bl	8000288 <__aeabi_dsub>
 801d83e:	f1bb 0f00 	cmp.w	fp, #0
 801d842:	4604      	mov	r4, r0
 801d844:	460d      	mov	r5, r1
 801d846:	f6bf aed6 	bge.w	801d5f6 <atan+0x3e>
 801d84a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d84e:	461d      	mov	r5, r3
 801d850:	e6d1      	b.n	801d5f6 <atan+0x3e>
 801d852:	a51d      	add	r5, pc, #116	; (adr r5, 801d8c8 <atan+0x310>)
 801d854:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d858:	e6cd      	b.n	801d5f6 <atan+0x3e>
 801d85a:	bf00      	nop
 801d85c:	f3af 8000 	nop.w
 801d860:	54442d18 	.word	0x54442d18
 801d864:	bff921fb 	.word	0xbff921fb
 801d868:	8800759c 	.word	0x8800759c
 801d86c:	7e37e43c 	.word	0x7e37e43c
 801d870:	e322da11 	.word	0xe322da11
 801d874:	3f90ad3a 	.word	0x3f90ad3a
 801d878:	24760deb 	.word	0x24760deb
 801d87c:	3fa97b4b 	.word	0x3fa97b4b
 801d880:	a0d03d51 	.word	0xa0d03d51
 801d884:	3fb10d66 	.word	0x3fb10d66
 801d888:	c54c206e 	.word	0xc54c206e
 801d88c:	3fb745cd 	.word	0x3fb745cd
 801d890:	920083ff 	.word	0x920083ff
 801d894:	3fc24924 	.word	0x3fc24924
 801d898:	5555550d 	.word	0x5555550d
 801d89c:	3fd55555 	.word	0x3fd55555
 801d8a0:	2c6a6c2f 	.word	0x2c6a6c2f
 801d8a4:	bfa2b444 	.word	0xbfa2b444
 801d8a8:	52defd9a 	.word	0x52defd9a
 801d8ac:	3fadde2d 	.word	0x3fadde2d
 801d8b0:	af749a6d 	.word	0xaf749a6d
 801d8b4:	3fb3b0f2 	.word	0x3fb3b0f2
 801d8b8:	fe231671 	.word	0xfe231671
 801d8bc:	3fbc71c6 	.word	0x3fbc71c6
 801d8c0:	9998ebc4 	.word	0x9998ebc4
 801d8c4:	3fc99999 	.word	0x3fc99999
 801d8c8:	54442d18 	.word	0x54442d18
 801d8cc:	3ff921fb 	.word	0x3ff921fb
 801d8d0:	440fffff 	.word	0x440fffff
 801d8d4:	7ff00000 	.word	0x7ff00000
 801d8d8:	3fdbffff 	.word	0x3fdbffff
 801d8dc:	3ff00000 	.word	0x3ff00000
 801d8e0:	3ff2ffff 	.word	0x3ff2ffff
 801d8e4:	40038000 	.word	0x40038000
 801d8e8:	3ff80000 	.word	0x3ff80000
 801d8ec:	bff00000 	.word	0xbff00000
 801d8f0:	08020e88 	.word	0x08020e88
 801d8f4:	08020e68 	.word	0x08020e68

0801d8f8 <fabs>:
 801d8f8:	ec51 0b10 	vmov	r0, r1, d0
 801d8fc:	ee10 2a10 	vmov	r2, s0
 801d900:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d904:	ec43 2b10 	vmov	d0, r2, r3
 801d908:	4770      	bx	lr
	...

0801d90c <atanf>:
 801d90c:	b538      	push	{r3, r4, r5, lr}
 801d90e:	ee10 5a10 	vmov	r5, s0
 801d912:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801d916:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801d91a:	eef0 7a40 	vmov.f32	s15, s0
 801d91e:	db10      	blt.n	801d942 <atanf+0x36>
 801d920:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801d924:	dd04      	ble.n	801d930 <atanf+0x24>
 801d926:	ee70 7a00 	vadd.f32	s15, s0, s0
 801d92a:	eeb0 0a67 	vmov.f32	s0, s15
 801d92e:	bd38      	pop	{r3, r4, r5, pc}
 801d930:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801da68 <atanf+0x15c>
 801d934:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801da6c <atanf+0x160>
 801d938:	2d00      	cmp	r5, #0
 801d93a:	bfd8      	it	le
 801d93c:	eef0 7a40 	vmovle.f32	s15, s0
 801d940:	e7f3      	b.n	801d92a <atanf+0x1e>
 801d942:	4b4b      	ldr	r3, [pc, #300]	; (801da70 <atanf+0x164>)
 801d944:	429c      	cmp	r4, r3
 801d946:	dc10      	bgt.n	801d96a <atanf+0x5e>
 801d948:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801d94c:	da0a      	bge.n	801d964 <atanf+0x58>
 801d94e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801da74 <atanf+0x168>
 801d952:	ee30 7a07 	vadd.f32	s14, s0, s14
 801d956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d95a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801d95e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d962:	dce2      	bgt.n	801d92a <atanf+0x1e>
 801d964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d968:	e013      	b.n	801d992 <atanf+0x86>
 801d96a:	f000 f8e3 	bl	801db34 <fabsf>
 801d96e:	4b42      	ldr	r3, [pc, #264]	; (801da78 <atanf+0x16c>)
 801d970:	429c      	cmp	r4, r3
 801d972:	dc4f      	bgt.n	801da14 <atanf+0x108>
 801d974:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801d978:	429c      	cmp	r4, r3
 801d97a:	dc41      	bgt.n	801da00 <atanf+0xf4>
 801d97c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801d980:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801d984:	eea0 7a27 	vfma.f32	s14, s0, s15
 801d988:	2300      	movs	r3, #0
 801d98a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801d98e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d992:	1c5a      	adds	r2, r3, #1
 801d994:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801d998:	eddf 5a38 	vldr	s11, [pc, #224]	; 801da7c <atanf+0x170>
 801d99c:	ed9f 6a38 	vldr	s12, [pc, #224]	; 801da80 <atanf+0x174>
 801d9a0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801da84 <atanf+0x178>
 801d9a4:	ed9f 0a38 	vldr	s0, [pc, #224]	; 801da88 <atanf+0x17c>
 801d9a8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801d9ac:	eea7 6a25 	vfma.f32	s12, s14, s11
 801d9b0:	eddf 5a36 	vldr	s11, [pc, #216]	; 801da8c <atanf+0x180>
 801d9b4:	eee6 5a07 	vfma.f32	s11, s12, s14
 801d9b8:	ed9f 6a35 	vldr	s12, [pc, #212]	; 801da90 <atanf+0x184>
 801d9bc:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d9c0:	eddf 5a34 	vldr	s11, [pc, #208]	; 801da94 <atanf+0x188>
 801d9c4:	eee6 5a07 	vfma.f32	s11, s12, s14
 801d9c8:	ed9f 6a33 	vldr	s12, [pc, #204]	; 801da98 <atanf+0x18c>
 801d9cc:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d9d0:	eddf 5a32 	vldr	s11, [pc, #200]	; 801da9c <atanf+0x190>
 801d9d4:	eee7 5a05 	vfma.f32	s11, s14, s10
 801d9d8:	ed9f 5a31 	vldr	s10, [pc, #196]	; 801daa0 <atanf+0x194>
 801d9dc:	eea5 5a87 	vfma.f32	s10, s11, s14
 801d9e0:	eddf 5a30 	vldr	s11, [pc, #192]	; 801daa4 <atanf+0x198>
 801d9e4:	eee5 5a07 	vfma.f32	s11, s10, s14
 801d9e8:	eea5 0a87 	vfma.f32	s0, s11, s14
 801d9ec:	ee20 0a07 	vmul.f32	s0, s0, s14
 801d9f0:	eea6 0a26 	vfma.f32	s0, s12, s13
 801d9f4:	ee27 0a80 	vmul.f32	s0, s15, s0
 801d9f8:	d121      	bne.n	801da3e <atanf+0x132>
 801d9fa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801d9fe:	e794      	b.n	801d92a <atanf+0x1e>
 801da00:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801da04:	ee30 7a67 	vsub.f32	s14, s0, s15
 801da08:	ee30 0a27 	vadd.f32	s0, s0, s15
 801da0c:	2301      	movs	r3, #1
 801da0e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801da12:	e7be      	b.n	801d992 <atanf+0x86>
 801da14:	4b24      	ldr	r3, [pc, #144]	; (801daa8 <atanf+0x19c>)
 801da16:	429c      	cmp	r4, r3
 801da18:	dc0b      	bgt.n	801da32 <atanf+0x126>
 801da1a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801da1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801da22:	eea0 7a27 	vfma.f32	s14, s0, s15
 801da26:	2302      	movs	r3, #2
 801da28:	ee70 6a67 	vsub.f32	s13, s0, s15
 801da2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801da30:	e7af      	b.n	801d992 <atanf+0x86>
 801da32:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801da36:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801da3a:	2303      	movs	r3, #3
 801da3c:	e7a9      	b.n	801d992 <atanf+0x86>
 801da3e:	4a1b      	ldr	r2, [pc, #108]	; (801daac <atanf+0x1a0>)
 801da40:	491b      	ldr	r1, [pc, #108]	; (801dab0 <atanf+0x1a4>)
 801da42:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801da46:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801da4a:	ed93 7a00 	vldr	s14, [r3]
 801da4e:	ee30 0a47 	vsub.f32	s0, s0, s14
 801da52:	2d00      	cmp	r5, #0
 801da54:	ee70 7a67 	vsub.f32	s15, s0, s15
 801da58:	ed92 0a00 	vldr	s0, [r2]
 801da5c:	ee70 7a67 	vsub.f32	s15, s0, s15
 801da60:	bfb8      	it	lt
 801da62:	eef1 7a67 	vneglt.f32	s15, s15
 801da66:	e760      	b.n	801d92a <atanf+0x1e>
 801da68:	3fc90fdb 	.word	0x3fc90fdb
 801da6c:	bfc90fdb 	.word	0xbfc90fdb
 801da70:	3edfffff 	.word	0x3edfffff
 801da74:	7149f2ca 	.word	0x7149f2ca
 801da78:	3f97ffff 	.word	0x3f97ffff
 801da7c:	3c8569d7 	.word	0x3c8569d7
 801da80:	3d4bda59 	.word	0x3d4bda59
 801da84:	bd15a221 	.word	0xbd15a221
 801da88:	be4ccccd 	.word	0xbe4ccccd
 801da8c:	3d886b35 	.word	0x3d886b35
 801da90:	3dba2e6e 	.word	0x3dba2e6e
 801da94:	3e124925 	.word	0x3e124925
 801da98:	3eaaaaab 	.word	0x3eaaaaab
 801da9c:	bd6ef16b 	.word	0xbd6ef16b
 801daa0:	bd9d8795 	.word	0xbd9d8795
 801daa4:	bde38e38 	.word	0xbde38e38
 801daa8:	401bffff 	.word	0x401bffff
 801daac:	08020ea8 	.word	0x08020ea8
 801dab0:	08020eb8 	.word	0x08020eb8

0801dab4 <cosf>:
 801dab4:	ee10 3a10 	vmov	r3, s0
 801dab8:	b507      	push	{r0, r1, r2, lr}
 801daba:	4a1c      	ldr	r2, [pc, #112]	; (801db2c <cosf+0x78>)
 801dabc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801dac0:	4293      	cmp	r3, r2
 801dac2:	dc04      	bgt.n	801dace <cosf+0x1a>
 801dac4:	eddf 0a1a 	vldr	s1, [pc, #104]	; 801db30 <cosf+0x7c>
 801dac8:	f001 fc70 	bl	801f3ac <__kernel_cosf>
 801dacc:	e004      	b.n	801dad8 <cosf+0x24>
 801dace:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801dad2:	db04      	blt.n	801dade <cosf+0x2a>
 801dad4:	ee30 0a40 	vsub.f32	s0, s0, s0
 801dad8:	b003      	add	sp, #12
 801dada:	f85d fb04 	ldr.w	pc, [sp], #4
 801dade:	4668      	mov	r0, sp
 801dae0:	f001 fb24 	bl	801f12c <__ieee754_rem_pio2f>
 801dae4:	f000 0003 	and.w	r0, r0, #3
 801dae8:	2801      	cmp	r0, #1
 801daea:	d007      	beq.n	801dafc <cosf+0x48>
 801daec:	2802      	cmp	r0, #2
 801daee:	d00e      	beq.n	801db0e <cosf+0x5a>
 801daf0:	b9a0      	cbnz	r0, 801db1c <cosf+0x68>
 801daf2:	eddd 0a01 	vldr	s1, [sp, #4]
 801daf6:	ed9d 0a00 	vldr	s0, [sp]
 801dafa:	e7e5      	b.n	801dac8 <cosf+0x14>
 801dafc:	eddd 0a01 	vldr	s1, [sp, #4]
 801db00:	ed9d 0a00 	vldr	s0, [sp]
 801db04:	f001 ff3c 	bl	801f980 <__kernel_sinf>
 801db08:	eeb1 0a40 	vneg.f32	s0, s0
 801db0c:	e7e4      	b.n	801dad8 <cosf+0x24>
 801db0e:	eddd 0a01 	vldr	s1, [sp, #4]
 801db12:	ed9d 0a00 	vldr	s0, [sp]
 801db16:	f001 fc49 	bl	801f3ac <__kernel_cosf>
 801db1a:	e7f5      	b.n	801db08 <cosf+0x54>
 801db1c:	eddd 0a01 	vldr	s1, [sp, #4]
 801db20:	ed9d 0a00 	vldr	s0, [sp]
 801db24:	2001      	movs	r0, #1
 801db26:	f001 ff2b 	bl	801f980 <__kernel_sinf>
 801db2a:	e7d5      	b.n	801dad8 <cosf+0x24>
 801db2c:	3f490fd8 	.word	0x3f490fd8
 801db30:	00000000 	.word	0x00000000

0801db34 <fabsf>:
 801db34:	ee10 3a10 	vmov	r3, s0
 801db38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801db3c:	ee00 3a10 	vmov	s0, r3
 801db40:	4770      	bx	lr
	...

0801db44 <sinf>:
 801db44:	ee10 3a10 	vmov	r3, s0
 801db48:	b507      	push	{r0, r1, r2, lr}
 801db4a:	4a1d      	ldr	r2, [pc, #116]	; (801dbc0 <sinf+0x7c>)
 801db4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801db50:	4293      	cmp	r3, r2
 801db52:	dc05      	bgt.n	801db60 <sinf+0x1c>
 801db54:	eddf 0a1b 	vldr	s1, [pc, #108]	; 801dbc4 <sinf+0x80>
 801db58:	2000      	movs	r0, #0
 801db5a:	f001 ff11 	bl	801f980 <__kernel_sinf>
 801db5e:	e004      	b.n	801db6a <sinf+0x26>
 801db60:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801db64:	db04      	blt.n	801db70 <sinf+0x2c>
 801db66:	ee30 0a40 	vsub.f32	s0, s0, s0
 801db6a:	b003      	add	sp, #12
 801db6c:	f85d fb04 	ldr.w	pc, [sp], #4
 801db70:	4668      	mov	r0, sp
 801db72:	f001 fadb 	bl	801f12c <__ieee754_rem_pio2f>
 801db76:	f000 0003 	and.w	r0, r0, #3
 801db7a:	2801      	cmp	r0, #1
 801db7c:	d008      	beq.n	801db90 <sinf+0x4c>
 801db7e:	2802      	cmp	r0, #2
 801db80:	d00d      	beq.n	801db9e <sinf+0x5a>
 801db82:	b9b0      	cbnz	r0, 801dbb2 <sinf+0x6e>
 801db84:	eddd 0a01 	vldr	s1, [sp, #4]
 801db88:	ed9d 0a00 	vldr	s0, [sp]
 801db8c:	2001      	movs	r0, #1
 801db8e:	e7e4      	b.n	801db5a <sinf+0x16>
 801db90:	eddd 0a01 	vldr	s1, [sp, #4]
 801db94:	ed9d 0a00 	vldr	s0, [sp]
 801db98:	f001 fc08 	bl	801f3ac <__kernel_cosf>
 801db9c:	e7e5      	b.n	801db6a <sinf+0x26>
 801db9e:	eddd 0a01 	vldr	s1, [sp, #4]
 801dba2:	ed9d 0a00 	vldr	s0, [sp]
 801dba6:	2001      	movs	r0, #1
 801dba8:	f001 feea 	bl	801f980 <__kernel_sinf>
 801dbac:	eeb1 0a40 	vneg.f32	s0, s0
 801dbb0:	e7db      	b.n	801db6a <sinf+0x26>
 801dbb2:	eddd 0a01 	vldr	s1, [sp, #4]
 801dbb6:	ed9d 0a00 	vldr	s0, [sp]
 801dbba:	f001 fbf7 	bl	801f3ac <__kernel_cosf>
 801dbbe:	e7f5      	b.n	801dbac <sinf+0x68>
 801dbc0:	3f490fd8 	.word	0x3f490fd8
 801dbc4:	00000000 	.word	0x00000000

0801dbc8 <pow>:
 801dbc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dbcc:	ec59 8b10 	vmov	r8, r9, d0
 801dbd0:	ec57 6b11 	vmov	r6, r7, d1
 801dbd4:	f000 f974 	bl	801dec0 <__ieee754_pow>
 801dbd8:	4b4e      	ldr	r3, [pc, #312]	; (801dd14 <pow+0x14c>)
 801dbda:	f993 3000 	ldrsb.w	r3, [r3]
 801dbde:	3301      	adds	r3, #1
 801dbe0:	ec55 4b10 	vmov	r4, r5, d0
 801dbe4:	d015      	beq.n	801dc12 <pow+0x4a>
 801dbe6:	4632      	mov	r2, r6
 801dbe8:	463b      	mov	r3, r7
 801dbea:	4630      	mov	r0, r6
 801dbec:	4639      	mov	r1, r7
 801dbee:	f7e2 ff9d 	bl	8000b2c <__aeabi_dcmpun>
 801dbf2:	b970      	cbnz	r0, 801dc12 <pow+0x4a>
 801dbf4:	4642      	mov	r2, r8
 801dbf6:	464b      	mov	r3, r9
 801dbf8:	4640      	mov	r0, r8
 801dbfa:	4649      	mov	r1, r9
 801dbfc:	f7e2 ff96 	bl	8000b2c <__aeabi_dcmpun>
 801dc00:	2200      	movs	r2, #0
 801dc02:	2300      	movs	r3, #0
 801dc04:	b148      	cbz	r0, 801dc1a <pow+0x52>
 801dc06:	4630      	mov	r0, r6
 801dc08:	4639      	mov	r1, r7
 801dc0a:	f7e2 ff5d 	bl	8000ac8 <__aeabi_dcmpeq>
 801dc0e:	2800      	cmp	r0, #0
 801dc10:	d17d      	bne.n	801dd0e <pow+0x146>
 801dc12:	ec45 4b10 	vmov	d0, r4, r5
 801dc16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dc1a:	4640      	mov	r0, r8
 801dc1c:	4649      	mov	r1, r9
 801dc1e:	f7e2 ff53 	bl	8000ac8 <__aeabi_dcmpeq>
 801dc22:	b1e0      	cbz	r0, 801dc5e <pow+0x96>
 801dc24:	2200      	movs	r2, #0
 801dc26:	2300      	movs	r3, #0
 801dc28:	4630      	mov	r0, r6
 801dc2a:	4639      	mov	r1, r7
 801dc2c:	f7e2 ff4c 	bl	8000ac8 <__aeabi_dcmpeq>
 801dc30:	2800      	cmp	r0, #0
 801dc32:	d16c      	bne.n	801dd0e <pow+0x146>
 801dc34:	ec47 6b10 	vmov	d0, r6, r7
 801dc38:	f001 feea 	bl	801fa10 <finite>
 801dc3c:	2800      	cmp	r0, #0
 801dc3e:	d0e8      	beq.n	801dc12 <pow+0x4a>
 801dc40:	2200      	movs	r2, #0
 801dc42:	2300      	movs	r3, #0
 801dc44:	4630      	mov	r0, r6
 801dc46:	4639      	mov	r1, r7
 801dc48:	f7e2 ff48 	bl	8000adc <__aeabi_dcmplt>
 801dc4c:	2800      	cmp	r0, #0
 801dc4e:	d0e0      	beq.n	801dc12 <pow+0x4a>
 801dc50:	f7fa ffcc 	bl	8018bec <__errno>
 801dc54:	2321      	movs	r3, #33	; 0x21
 801dc56:	6003      	str	r3, [r0, #0]
 801dc58:	2400      	movs	r4, #0
 801dc5a:	4d2f      	ldr	r5, [pc, #188]	; (801dd18 <pow+0x150>)
 801dc5c:	e7d9      	b.n	801dc12 <pow+0x4a>
 801dc5e:	ec45 4b10 	vmov	d0, r4, r5
 801dc62:	f001 fed5 	bl	801fa10 <finite>
 801dc66:	bbb8      	cbnz	r0, 801dcd8 <pow+0x110>
 801dc68:	ec49 8b10 	vmov	d0, r8, r9
 801dc6c:	f001 fed0 	bl	801fa10 <finite>
 801dc70:	b390      	cbz	r0, 801dcd8 <pow+0x110>
 801dc72:	ec47 6b10 	vmov	d0, r6, r7
 801dc76:	f001 fecb 	bl	801fa10 <finite>
 801dc7a:	b368      	cbz	r0, 801dcd8 <pow+0x110>
 801dc7c:	4622      	mov	r2, r4
 801dc7e:	462b      	mov	r3, r5
 801dc80:	4620      	mov	r0, r4
 801dc82:	4629      	mov	r1, r5
 801dc84:	f7e2 ff52 	bl	8000b2c <__aeabi_dcmpun>
 801dc88:	b160      	cbz	r0, 801dca4 <pow+0xdc>
 801dc8a:	f7fa ffaf 	bl	8018bec <__errno>
 801dc8e:	2321      	movs	r3, #33	; 0x21
 801dc90:	6003      	str	r3, [r0, #0]
 801dc92:	2200      	movs	r2, #0
 801dc94:	2300      	movs	r3, #0
 801dc96:	4610      	mov	r0, r2
 801dc98:	4619      	mov	r1, r3
 801dc9a:	f7e2 fdd7 	bl	800084c <__aeabi_ddiv>
 801dc9e:	4604      	mov	r4, r0
 801dca0:	460d      	mov	r5, r1
 801dca2:	e7b6      	b.n	801dc12 <pow+0x4a>
 801dca4:	f7fa ffa2 	bl	8018bec <__errno>
 801dca8:	2322      	movs	r3, #34	; 0x22
 801dcaa:	6003      	str	r3, [r0, #0]
 801dcac:	2200      	movs	r2, #0
 801dcae:	2300      	movs	r3, #0
 801dcb0:	4640      	mov	r0, r8
 801dcb2:	4649      	mov	r1, r9
 801dcb4:	f7e2 ff12 	bl	8000adc <__aeabi_dcmplt>
 801dcb8:	2400      	movs	r4, #0
 801dcba:	b158      	cbz	r0, 801dcd4 <pow+0x10c>
 801dcbc:	ec47 6b10 	vmov	d0, r6, r7
 801dcc0:	f001 feb2 	bl	801fa28 <rint>
 801dcc4:	4632      	mov	r2, r6
 801dcc6:	ec51 0b10 	vmov	r0, r1, d0
 801dcca:	463b      	mov	r3, r7
 801dccc:	f7e2 fefc 	bl	8000ac8 <__aeabi_dcmpeq>
 801dcd0:	2800      	cmp	r0, #0
 801dcd2:	d0c2      	beq.n	801dc5a <pow+0x92>
 801dcd4:	4d11      	ldr	r5, [pc, #68]	; (801dd1c <pow+0x154>)
 801dcd6:	e79c      	b.n	801dc12 <pow+0x4a>
 801dcd8:	2200      	movs	r2, #0
 801dcda:	2300      	movs	r3, #0
 801dcdc:	4620      	mov	r0, r4
 801dcde:	4629      	mov	r1, r5
 801dce0:	f7e2 fef2 	bl	8000ac8 <__aeabi_dcmpeq>
 801dce4:	2800      	cmp	r0, #0
 801dce6:	d094      	beq.n	801dc12 <pow+0x4a>
 801dce8:	ec49 8b10 	vmov	d0, r8, r9
 801dcec:	f001 fe90 	bl	801fa10 <finite>
 801dcf0:	2800      	cmp	r0, #0
 801dcf2:	d08e      	beq.n	801dc12 <pow+0x4a>
 801dcf4:	ec47 6b10 	vmov	d0, r6, r7
 801dcf8:	f001 fe8a 	bl	801fa10 <finite>
 801dcfc:	2800      	cmp	r0, #0
 801dcfe:	d088      	beq.n	801dc12 <pow+0x4a>
 801dd00:	f7fa ff74 	bl	8018bec <__errno>
 801dd04:	2322      	movs	r3, #34	; 0x22
 801dd06:	6003      	str	r3, [r0, #0]
 801dd08:	2400      	movs	r4, #0
 801dd0a:	2500      	movs	r5, #0
 801dd0c:	e781      	b.n	801dc12 <pow+0x4a>
 801dd0e:	4d04      	ldr	r5, [pc, #16]	; (801dd20 <pow+0x158>)
 801dd10:	2400      	movs	r4, #0
 801dd12:	e77e      	b.n	801dc12 <pow+0x4a>
 801dd14:	200002a4 	.word	0x200002a4
 801dd18:	fff00000 	.word	0xfff00000
 801dd1c:	7ff00000 	.word	0x7ff00000
 801dd20:	3ff00000 	.word	0x3ff00000

0801dd24 <sqrt>:
 801dd24:	b538      	push	{r3, r4, r5, lr}
 801dd26:	ed2d 8b02 	vpush	{d8}
 801dd2a:	ec55 4b10 	vmov	r4, r5, d0
 801dd2e:	f000 fde9 	bl	801e904 <__ieee754_sqrt>
 801dd32:	4b15      	ldr	r3, [pc, #84]	; (801dd88 <sqrt+0x64>)
 801dd34:	eeb0 8a40 	vmov.f32	s16, s0
 801dd38:	eef0 8a60 	vmov.f32	s17, s1
 801dd3c:	f993 3000 	ldrsb.w	r3, [r3]
 801dd40:	3301      	adds	r3, #1
 801dd42:	d019      	beq.n	801dd78 <sqrt+0x54>
 801dd44:	4622      	mov	r2, r4
 801dd46:	462b      	mov	r3, r5
 801dd48:	4620      	mov	r0, r4
 801dd4a:	4629      	mov	r1, r5
 801dd4c:	f7e2 feee 	bl	8000b2c <__aeabi_dcmpun>
 801dd50:	b990      	cbnz	r0, 801dd78 <sqrt+0x54>
 801dd52:	2200      	movs	r2, #0
 801dd54:	2300      	movs	r3, #0
 801dd56:	4620      	mov	r0, r4
 801dd58:	4629      	mov	r1, r5
 801dd5a:	f7e2 febf 	bl	8000adc <__aeabi_dcmplt>
 801dd5e:	b158      	cbz	r0, 801dd78 <sqrt+0x54>
 801dd60:	f7fa ff44 	bl	8018bec <__errno>
 801dd64:	2321      	movs	r3, #33	; 0x21
 801dd66:	6003      	str	r3, [r0, #0]
 801dd68:	2200      	movs	r2, #0
 801dd6a:	2300      	movs	r3, #0
 801dd6c:	4610      	mov	r0, r2
 801dd6e:	4619      	mov	r1, r3
 801dd70:	f7e2 fd6c 	bl	800084c <__aeabi_ddiv>
 801dd74:	ec41 0b18 	vmov	d8, r0, r1
 801dd78:	eeb0 0a48 	vmov.f32	s0, s16
 801dd7c:	eef0 0a68 	vmov.f32	s1, s17
 801dd80:	ecbd 8b02 	vpop	{d8}
 801dd84:	bd38      	pop	{r3, r4, r5, pc}
 801dd86:	bf00      	nop
 801dd88:	200002a4 	.word	0x200002a4

0801dd8c <atan2f>:
 801dd8c:	f000 be6e 	b.w	801ea6c <__ieee754_atan2f>

0801dd90 <powf>:
 801dd90:	b508      	push	{r3, lr}
 801dd92:	ed2d 8b04 	vpush	{d8-d9}
 801dd96:	eeb0 9a40 	vmov.f32	s18, s0
 801dd9a:	eef0 8a60 	vmov.f32	s17, s1
 801dd9e:	f000 ff05 	bl	801ebac <__ieee754_powf>
 801dda2:	4b43      	ldr	r3, [pc, #268]	; (801deb0 <powf+0x120>)
 801dda4:	f993 3000 	ldrsb.w	r3, [r3]
 801dda8:	3301      	adds	r3, #1
 801ddaa:	eeb0 8a40 	vmov.f32	s16, s0
 801ddae:	d012      	beq.n	801ddd6 <powf+0x46>
 801ddb0:	eef4 8a68 	vcmp.f32	s17, s17
 801ddb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddb8:	d60d      	bvs.n	801ddd6 <powf+0x46>
 801ddba:	eeb4 9a49 	vcmp.f32	s18, s18
 801ddbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddc2:	d70d      	bvc.n	801dde0 <powf+0x50>
 801ddc4:	eef5 8a40 	vcmp.f32	s17, #0.0
 801ddc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddcc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801ddd0:	bf08      	it	eq
 801ddd2:	eeb0 8a67 	vmoveq.f32	s16, s15
 801ddd6:	eeb0 0a48 	vmov.f32	s0, s16
 801ddda:	ecbd 8b04 	vpop	{d8-d9}
 801ddde:	bd08      	pop	{r3, pc}
 801dde0:	eddf 9a34 	vldr	s19, [pc, #208]	; 801deb4 <powf+0x124>
 801dde4:	eeb4 9a69 	vcmp.f32	s18, s19
 801dde8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddec:	d116      	bne.n	801de1c <powf+0x8c>
 801ddee:	eef4 8a69 	vcmp.f32	s17, s19
 801ddf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddf6:	d057      	beq.n	801dea8 <powf+0x118>
 801ddf8:	eeb0 0a68 	vmov.f32	s0, s17
 801ddfc:	f7fe feb8 	bl	801cb70 <finitef>
 801de00:	2800      	cmp	r0, #0
 801de02:	d0e8      	beq.n	801ddd6 <powf+0x46>
 801de04:	eef4 8ae9 	vcmpe.f32	s17, s19
 801de08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de0c:	d5e3      	bpl.n	801ddd6 <powf+0x46>
 801de0e:	f7fa feed 	bl	8018bec <__errno>
 801de12:	2321      	movs	r3, #33	; 0x21
 801de14:	6003      	str	r3, [r0, #0]
 801de16:	ed9f 8a28 	vldr	s16, [pc, #160]	; 801deb8 <powf+0x128>
 801de1a:	e7dc      	b.n	801ddd6 <powf+0x46>
 801de1c:	f7fe fea8 	bl	801cb70 <finitef>
 801de20:	bb50      	cbnz	r0, 801de78 <powf+0xe8>
 801de22:	eeb0 0a49 	vmov.f32	s0, s18
 801de26:	f7fe fea3 	bl	801cb70 <finitef>
 801de2a:	b328      	cbz	r0, 801de78 <powf+0xe8>
 801de2c:	eeb0 0a68 	vmov.f32	s0, s17
 801de30:	f7fe fe9e 	bl	801cb70 <finitef>
 801de34:	b300      	cbz	r0, 801de78 <powf+0xe8>
 801de36:	eeb4 8a48 	vcmp.f32	s16, s16
 801de3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de3e:	d706      	bvc.n	801de4e <powf+0xbe>
 801de40:	f7fa fed4 	bl	8018bec <__errno>
 801de44:	2321      	movs	r3, #33	; 0x21
 801de46:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 801de4a:	6003      	str	r3, [r0, #0]
 801de4c:	e7c3      	b.n	801ddd6 <powf+0x46>
 801de4e:	f7fa fecd 	bl	8018bec <__errno>
 801de52:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 801de56:	2322      	movs	r3, #34	; 0x22
 801de58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de5c:	6003      	str	r3, [r0, #0]
 801de5e:	d508      	bpl.n	801de72 <powf+0xe2>
 801de60:	eeb0 0a68 	vmov.f32	s0, s17
 801de64:	f001 ff34 	bl	801fcd0 <rintf>
 801de68:	eeb4 0a68 	vcmp.f32	s0, s17
 801de6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de70:	d1d1      	bne.n	801de16 <powf+0x86>
 801de72:	ed9f 8a12 	vldr	s16, [pc, #72]	; 801debc <powf+0x12c>
 801de76:	e7ae      	b.n	801ddd6 <powf+0x46>
 801de78:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801de7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de80:	d1a9      	bne.n	801ddd6 <powf+0x46>
 801de82:	eeb0 0a49 	vmov.f32	s0, s18
 801de86:	f7fe fe73 	bl	801cb70 <finitef>
 801de8a:	2800      	cmp	r0, #0
 801de8c:	d0a3      	beq.n	801ddd6 <powf+0x46>
 801de8e:	eeb0 0a68 	vmov.f32	s0, s17
 801de92:	f7fe fe6d 	bl	801cb70 <finitef>
 801de96:	2800      	cmp	r0, #0
 801de98:	d09d      	beq.n	801ddd6 <powf+0x46>
 801de9a:	f7fa fea7 	bl	8018bec <__errno>
 801de9e:	2322      	movs	r3, #34	; 0x22
 801dea0:	ed9f 8a04 	vldr	s16, [pc, #16]	; 801deb4 <powf+0x124>
 801dea4:	6003      	str	r3, [r0, #0]
 801dea6:	e796      	b.n	801ddd6 <powf+0x46>
 801dea8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801deac:	e793      	b.n	801ddd6 <powf+0x46>
 801deae:	bf00      	nop
 801deb0:	200002a4 	.word	0x200002a4
 801deb4:	00000000 	.word	0x00000000
 801deb8:	ff800000 	.word	0xff800000
 801debc:	7f800000 	.word	0x7f800000

0801dec0 <__ieee754_pow>:
 801dec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dec4:	ed2d 8b06 	vpush	{d8-d10}
 801dec8:	b08d      	sub	sp, #52	; 0x34
 801deca:	ed8d 1b02 	vstr	d1, [sp, #8]
 801dece:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 801ded2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801ded6:	ea56 0100 	orrs.w	r1, r6, r0
 801deda:	ec53 2b10 	vmov	r2, r3, d0
 801dede:	f000 84d1 	beq.w	801e884 <__ieee754_pow+0x9c4>
 801dee2:	497f      	ldr	r1, [pc, #508]	; (801e0e0 <__ieee754_pow+0x220>)
 801dee4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 801dee8:	428c      	cmp	r4, r1
 801deea:	ee10 8a10 	vmov	r8, s0
 801deee:	4699      	mov	r9, r3
 801def0:	dc09      	bgt.n	801df06 <__ieee754_pow+0x46>
 801def2:	d103      	bne.n	801defc <__ieee754_pow+0x3c>
 801def4:	b97a      	cbnz	r2, 801df16 <__ieee754_pow+0x56>
 801def6:	42a6      	cmp	r6, r4
 801def8:	dd02      	ble.n	801df00 <__ieee754_pow+0x40>
 801defa:	e00c      	b.n	801df16 <__ieee754_pow+0x56>
 801defc:	428e      	cmp	r6, r1
 801defe:	dc02      	bgt.n	801df06 <__ieee754_pow+0x46>
 801df00:	428e      	cmp	r6, r1
 801df02:	d110      	bne.n	801df26 <__ieee754_pow+0x66>
 801df04:	b178      	cbz	r0, 801df26 <__ieee754_pow+0x66>
 801df06:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801df0a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801df0e:	ea54 0308 	orrs.w	r3, r4, r8
 801df12:	f000 84b7 	beq.w	801e884 <__ieee754_pow+0x9c4>
 801df16:	4873      	ldr	r0, [pc, #460]	; (801e0e4 <__ieee754_pow+0x224>)
 801df18:	b00d      	add	sp, #52	; 0x34
 801df1a:	ecbd 8b06 	vpop	{d8-d10}
 801df1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df22:	f7fe be1d 	b.w	801cb60 <nan>
 801df26:	f1b9 0f00 	cmp.w	r9, #0
 801df2a:	da36      	bge.n	801df9a <__ieee754_pow+0xda>
 801df2c:	496e      	ldr	r1, [pc, #440]	; (801e0e8 <__ieee754_pow+0x228>)
 801df2e:	428e      	cmp	r6, r1
 801df30:	dc51      	bgt.n	801dfd6 <__ieee754_pow+0x116>
 801df32:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 801df36:	428e      	cmp	r6, r1
 801df38:	f340 84af 	ble.w	801e89a <__ieee754_pow+0x9da>
 801df3c:	1531      	asrs	r1, r6, #20
 801df3e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801df42:	2914      	cmp	r1, #20
 801df44:	dd0f      	ble.n	801df66 <__ieee754_pow+0xa6>
 801df46:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 801df4a:	fa20 fc01 	lsr.w	ip, r0, r1
 801df4e:	fa0c f101 	lsl.w	r1, ip, r1
 801df52:	4281      	cmp	r1, r0
 801df54:	f040 84a1 	bne.w	801e89a <__ieee754_pow+0x9da>
 801df58:	f00c 0c01 	and.w	ip, ip, #1
 801df5c:	f1cc 0102 	rsb	r1, ip, #2
 801df60:	9100      	str	r1, [sp, #0]
 801df62:	b180      	cbz	r0, 801df86 <__ieee754_pow+0xc6>
 801df64:	e059      	b.n	801e01a <__ieee754_pow+0x15a>
 801df66:	2800      	cmp	r0, #0
 801df68:	d155      	bne.n	801e016 <__ieee754_pow+0x156>
 801df6a:	f1c1 0114 	rsb	r1, r1, #20
 801df6e:	fa46 fc01 	asr.w	ip, r6, r1
 801df72:	fa0c f101 	lsl.w	r1, ip, r1
 801df76:	42b1      	cmp	r1, r6
 801df78:	f040 848c 	bne.w	801e894 <__ieee754_pow+0x9d4>
 801df7c:	f00c 0c01 	and.w	ip, ip, #1
 801df80:	f1cc 0102 	rsb	r1, ip, #2
 801df84:	9100      	str	r1, [sp, #0]
 801df86:	4959      	ldr	r1, [pc, #356]	; (801e0ec <__ieee754_pow+0x22c>)
 801df88:	428e      	cmp	r6, r1
 801df8a:	d12d      	bne.n	801dfe8 <__ieee754_pow+0x128>
 801df8c:	2f00      	cmp	r7, #0
 801df8e:	da79      	bge.n	801e084 <__ieee754_pow+0x1c4>
 801df90:	4956      	ldr	r1, [pc, #344]	; (801e0ec <__ieee754_pow+0x22c>)
 801df92:	2000      	movs	r0, #0
 801df94:	f7e2 fc5a 	bl	800084c <__aeabi_ddiv>
 801df98:	e016      	b.n	801dfc8 <__ieee754_pow+0x108>
 801df9a:	2100      	movs	r1, #0
 801df9c:	9100      	str	r1, [sp, #0]
 801df9e:	2800      	cmp	r0, #0
 801dfa0:	d13b      	bne.n	801e01a <__ieee754_pow+0x15a>
 801dfa2:	494f      	ldr	r1, [pc, #316]	; (801e0e0 <__ieee754_pow+0x220>)
 801dfa4:	428e      	cmp	r6, r1
 801dfa6:	d1ee      	bne.n	801df86 <__ieee754_pow+0xc6>
 801dfa8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801dfac:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801dfb0:	ea53 0308 	orrs.w	r3, r3, r8
 801dfb4:	f000 8466 	beq.w	801e884 <__ieee754_pow+0x9c4>
 801dfb8:	4b4d      	ldr	r3, [pc, #308]	; (801e0f0 <__ieee754_pow+0x230>)
 801dfba:	429c      	cmp	r4, r3
 801dfbc:	dd0d      	ble.n	801dfda <__ieee754_pow+0x11a>
 801dfbe:	2f00      	cmp	r7, #0
 801dfc0:	f280 8464 	bge.w	801e88c <__ieee754_pow+0x9cc>
 801dfc4:	2000      	movs	r0, #0
 801dfc6:	2100      	movs	r1, #0
 801dfc8:	ec41 0b10 	vmov	d0, r0, r1
 801dfcc:	b00d      	add	sp, #52	; 0x34
 801dfce:	ecbd 8b06 	vpop	{d8-d10}
 801dfd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dfd6:	2102      	movs	r1, #2
 801dfd8:	e7e0      	b.n	801df9c <__ieee754_pow+0xdc>
 801dfda:	2f00      	cmp	r7, #0
 801dfdc:	daf2      	bge.n	801dfc4 <__ieee754_pow+0x104>
 801dfde:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 801dfe2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801dfe6:	e7ef      	b.n	801dfc8 <__ieee754_pow+0x108>
 801dfe8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 801dfec:	d104      	bne.n	801dff8 <__ieee754_pow+0x138>
 801dfee:	4610      	mov	r0, r2
 801dff0:	4619      	mov	r1, r3
 801dff2:	f7e2 fb01 	bl	80005f8 <__aeabi_dmul>
 801dff6:	e7e7      	b.n	801dfc8 <__ieee754_pow+0x108>
 801dff8:	493e      	ldr	r1, [pc, #248]	; (801e0f4 <__ieee754_pow+0x234>)
 801dffa:	428f      	cmp	r7, r1
 801dffc:	d10d      	bne.n	801e01a <__ieee754_pow+0x15a>
 801dffe:	f1b9 0f00 	cmp.w	r9, #0
 801e002:	db0a      	blt.n	801e01a <__ieee754_pow+0x15a>
 801e004:	ec43 2b10 	vmov	d0, r2, r3
 801e008:	b00d      	add	sp, #52	; 0x34
 801e00a:	ecbd 8b06 	vpop	{d8-d10}
 801e00e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e012:	f000 bc77 	b.w	801e904 <__ieee754_sqrt>
 801e016:	2100      	movs	r1, #0
 801e018:	9100      	str	r1, [sp, #0]
 801e01a:	ec43 2b10 	vmov	d0, r2, r3
 801e01e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801e022:	f7ff fc69 	bl	801d8f8 <fabs>
 801e026:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e02a:	ec51 0b10 	vmov	r0, r1, d0
 801e02e:	f1b8 0f00 	cmp.w	r8, #0
 801e032:	d12a      	bne.n	801e08a <__ieee754_pow+0x1ca>
 801e034:	b12c      	cbz	r4, 801e042 <__ieee754_pow+0x182>
 801e036:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 801e0ec <__ieee754_pow+0x22c>
 801e03a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 801e03e:	45e6      	cmp	lr, ip
 801e040:	d123      	bne.n	801e08a <__ieee754_pow+0x1ca>
 801e042:	2f00      	cmp	r7, #0
 801e044:	da05      	bge.n	801e052 <__ieee754_pow+0x192>
 801e046:	4602      	mov	r2, r0
 801e048:	460b      	mov	r3, r1
 801e04a:	2000      	movs	r0, #0
 801e04c:	4927      	ldr	r1, [pc, #156]	; (801e0ec <__ieee754_pow+0x22c>)
 801e04e:	f7e2 fbfd 	bl	800084c <__aeabi_ddiv>
 801e052:	f1b9 0f00 	cmp.w	r9, #0
 801e056:	dab7      	bge.n	801dfc8 <__ieee754_pow+0x108>
 801e058:	9b00      	ldr	r3, [sp, #0]
 801e05a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801e05e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801e062:	4323      	orrs	r3, r4
 801e064:	d108      	bne.n	801e078 <__ieee754_pow+0x1b8>
 801e066:	4602      	mov	r2, r0
 801e068:	460b      	mov	r3, r1
 801e06a:	4610      	mov	r0, r2
 801e06c:	4619      	mov	r1, r3
 801e06e:	f7e2 f90b 	bl	8000288 <__aeabi_dsub>
 801e072:	4602      	mov	r2, r0
 801e074:	460b      	mov	r3, r1
 801e076:	e78d      	b.n	801df94 <__ieee754_pow+0xd4>
 801e078:	9b00      	ldr	r3, [sp, #0]
 801e07a:	2b01      	cmp	r3, #1
 801e07c:	d1a4      	bne.n	801dfc8 <__ieee754_pow+0x108>
 801e07e:	4602      	mov	r2, r0
 801e080:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e084:	4610      	mov	r0, r2
 801e086:	4619      	mov	r1, r3
 801e088:	e79e      	b.n	801dfc8 <__ieee754_pow+0x108>
 801e08a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 801e08e:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 801e092:	950a      	str	r5, [sp, #40]	; 0x28
 801e094:	9d00      	ldr	r5, [sp, #0]
 801e096:	46ac      	mov	ip, r5
 801e098:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e09a:	ea5c 0505 	orrs.w	r5, ip, r5
 801e09e:	d0e4      	beq.n	801e06a <__ieee754_pow+0x1aa>
 801e0a0:	4b15      	ldr	r3, [pc, #84]	; (801e0f8 <__ieee754_pow+0x238>)
 801e0a2:	429e      	cmp	r6, r3
 801e0a4:	f340 80fc 	ble.w	801e2a0 <__ieee754_pow+0x3e0>
 801e0a8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801e0ac:	429e      	cmp	r6, r3
 801e0ae:	4b10      	ldr	r3, [pc, #64]	; (801e0f0 <__ieee754_pow+0x230>)
 801e0b0:	dd07      	ble.n	801e0c2 <__ieee754_pow+0x202>
 801e0b2:	429c      	cmp	r4, r3
 801e0b4:	dc0a      	bgt.n	801e0cc <__ieee754_pow+0x20c>
 801e0b6:	2f00      	cmp	r7, #0
 801e0b8:	da84      	bge.n	801dfc4 <__ieee754_pow+0x104>
 801e0ba:	a307      	add	r3, pc, #28	; (adr r3, 801e0d8 <__ieee754_pow+0x218>)
 801e0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0c0:	e795      	b.n	801dfee <__ieee754_pow+0x12e>
 801e0c2:	429c      	cmp	r4, r3
 801e0c4:	dbf7      	blt.n	801e0b6 <__ieee754_pow+0x1f6>
 801e0c6:	4b09      	ldr	r3, [pc, #36]	; (801e0ec <__ieee754_pow+0x22c>)
 801e0c8:	429c      	cmp	r4, r3
 801e0ca:	dd17      	ble.n	801e0fc <__ieee754_pow+0x23c>
 801e0cc:	2f00      	cmp	r7, #0
 801e0ce:	dcf4      	bgt.n	801e0ba <__ieee754_pow+0x1fa>
 801e0d0:	e778      	b.n	801dfc4 <__ieee754_pow+0x104>
 801e0d2:	bf00      	nop
 801e0d4:	f3af 8000 	nop.w
 801e0d8:	8800759c 	.word	0x8800759c
 801e0dc:	7e37e43c 	.word	0x7e37e43c
 801e0e0:	7ff00000 	.word	0x7ff00000
 801e0e4:	08020e00 	.word	0x08020e00
 801e0e8:	433fffff 	.word	0x433fffff
 801e0ec:	3ff00000 	.word	0x3ff00000
 801e0f0:	3fefffff 	.word	0x3fefffff
 801e0f4:	3fe00000 	.word	0x3fe00000
 801e0f8:	41e00000 	.word	0x41e00000
 801e0fc:	4b64      	ldr	r3, [pc, #400]	; (801e290 <__ieee754_pow+0x3d0>)
 801e0fe:	2200      	movs	r2, #0
 801e100:	f7e2 f8c2 	bl	8000288 <__aeabi_dsub>
 801e104:	a356      	add	r3, pc, #344	; (adr r3, 801e260 <__ieee754_pow+0x3a0>)
 801e106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e10a:	4604      	mov	r4, r0
 801e10c:	460d      	mov	r5, r1
 801e10e:	f7e2 fa73 	bl	80005f8 <__aeabi_dmul>
 801e112:	a355      	add	r3, pc, #340	; (adr r3, 801e268 <__ieee754_pow+0x3a8>)
 801e114:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e118:	4606      	mov	r6, r0
 801e11a:	460f      	mov	r7, r1
 801e11c:	4620      	mov	r0, r4
 801e11e:	4629      	mov	r1, r5
 801e120:	f7e2 fa6a 	bl	80005f8 <__aeabi_dmul>
 801e124:	4b5b      	ldr	r3, [pc, #364]	; (801e294 <__ieee754_pow+0x3d4>)
 801e126:	4682      	mov	sl, r0
 801e128:	468b      	mov	fp, r1
 801e12a:	2200      	movs	r2, #0
 801e12c:	4620      	mov	r0, r4
 801e12e:	4629      	mov	r1, r5
 801e130:	f7e2 fa62 	bl	80005f8 <__aeabi_dmul>
 801e134:	4602      	mov	r2, r0
 801e136:	460b      	mov	r3, r1
 801e138:	a14d      	add	r1, pc, #308	; (adr r1, 801e270 <__ieee754_pow+0x3b0>)
 801e13a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e13e:	f7e2 f8a3 	bl	8000288 <__aeabi_dsub>
 801e142:	4622      	mov	r2, r4
 801e144:	462b      	mov	r3, r5
 801e146:	f7e2 fa57 	bl	80005f8 <__aeabi_dmul>
 801e14a:	4602      	mov	r2, r0
 801e14c:	460b      	mov	r3, r1
 801e14e:	2000      	movs	r0, #0
 801e150:	4951      	ldr	r1, [pc, #324]	; (801e298 <__ieee754_pow+0x3d8>)
 801e152:	f7e2 f899 	bl	8000288 <__aeabi_dsub>
 801e156:	4622      	mov	r2, r4
 801e158:	4680      	mov	r8, r0
 801e15a:	4689      	mov	r9, r1
 801e15c:	462b      	mov	r3, r5
 801e15e:	4620      	mov	r0, r4
 801e160:	4629      	mov	r1, r5
 801e162:	f7e2 fa49 	bl	80005f8 <__aeabi_dmul>
 801e166:	4602      	mov	r2, r0
 801e168:	460b      	mov	r3, r1
 801e16a:	4640      	mov	r0, r8
 801e16c:	4649      	mov	r1, r9
 801e16e:	f7e2 fa43 	bl	80005f8 <__aeabi_dmul>
 801e172:	a341      	add	r3, pc, #260	; (adr r3, 801e278 <__ieee754_pow+0x3b8>)
 801e174:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e178:	f7e2 fa3e 	bl	80005f8 <__aeabi_dmul>
 801e17c:	4602      	mov	r2, r0
 801e17e:	460b      	mov	r3, r1
 801e180:	4650      	mov	r0, sl
 801e182:	4659      	mov	r1, fp
 801e184:	f7e2 f880 	bl	8000288 <__aeabi_dsub>
 801e188:	4602      	mov	r2, r0
 801e18a:	460b      	mov	r3, r1
 801e18c:	4680      	mov	r8, r0
 801e18e:	4689      	mov	r9, r1
 801e190:	4630      	mov	r0, r6
 801e192:	4639      	mov	r1, r7
 801e194:	f7e2 f87a 	bl	800028c <__adddf3>
 801e198:	2400      	movs	r4, #0
 801e19a:	4632      	mov	r2, r6
 801e19c:	463b      	mov	r3, r7
 801e19e:	4620      	mov	r0, r4
 801e1a0:	460d      	mov	r5, r1
 801e1a2:	f7e2 f871 	bl	8000288 <__aeabi_dsub>
 801e1a6:	4602      	mov	r2, r0
 801e1a8:	460b      	mov	r3, r1
 801e1aa:	4640      	mov	r0, r8
 801e1ac:	4649      	mov	r1, r9
 801e1ae:	f7e2 f86b 	bl	8000288 <__aeabi_dsub>
 801e1b2:	9b00      	ldr	r3, [sp, #0]
 801e1b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e1b6:	3b01      	subs	r3, #1
 801e1b8:	4313      	orrs	r3, r2
 801e1ba:	4682      	mov	sl, r0
 801e1bc:	468b      	mov	fp, r1
 801e1be:	f040 81f1 	bne.w	801e5a4 <__ieee754_pow+0x6e4>
 801e1c2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 801e280 <__ieee754_pow+0x3c0>
 801e1c6:	eeb0 8a47 	vmov.f32	s16, s14
 801e1ca:	eef0 8a67 	vmov.f32	s17, s15
 801e1ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801e1d2:	2600      	movs	r6, #0
 801e1d4:	4632      	mov	r2, r6
 801e1d6:	463b      	mov	r3, r7
 801e1d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e1dc:	f7e2 f854 	bl	8000288 <__aeabi_dsub>
 801e1e0:	4622      	mov	r2, r4
 801e1e2:	462b      	mov	r3, r5
 801e1e4:	f7e2 fa08 	bl	80005f8 <__aeabi_dmul>
 801e1e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e1ec:	4680      	mov	r8, r0
 801e1ee:	4689      	mov	r9, r1
 801e1f0:	4650      	mov	r0, sl
 801e1f2:	4659      	mov	r1, fp
 801e1f4:	f7e2 fa00 	bl	80005f8 <__aeabi_dmul>
 801e1f8:	4602      	mov	r2, r0
 801e1fa:	460b      	mov	r3, r1
 801e1fc:	4640      	mov	r0, r8
 801e1fe:	4649      	mov	r1, r9
 801e200:	f7e2 f844 	bl	800028c <__adddf3>
 801e204:	4632      	mov	r2, r6
 801e206:	463b      	mov	r3, r7
 801e208:	4680      	mov	r8, r0
 801e20a:	4689      	mov	r9, r1
 801e20c:	4620      	mov	r0, r4
 801e20e:	4629      	mov	r1, r5
 801e210:	f7e2 f9f2 	bl	80005f8 <__aeabi_dmul>
 801e214:	460b      	mov	r3, r1
 801e216:	4604      	mov	r4, r0
 801e218:	460d      	mov	r5, r1
 801e21a:	4602      	mov	r2, r0
 801e21c:	4649      	mov	r1, r9
 801e21e:	4640      	mov	r0, r8
 801e220:	f7e2 f834 	bl	800028c <__adddf3>
 801e224:	4b1d      	ldr	r3, [pc, #116]	; (801e29c <__ieee754_pow+0x3dc>)
 801e226:	4299      	cmp	r1, r3
 801e228:	ec45 4b19 	vmov	d9, r4, r5
 801e22c:	4606      	mov	r6, r0
 801e22e:	460f      	mov	r7, r1
 801e230:	468b      	mov	fp, r1
 801e232:	f340 82fe 	ble.w	801e832 <__ieee754_pow+0x972>
 801e236:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801e23a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801e23e:	4303      	orrs	r3, r0
 801e240:	f000 81f0 	beq.w	801e624 <__ieee754_pow+0x764>
 801e244:	a310      	add	r3, pc, #64	; (adr r3, 801e288 <__ieee754_pow+0x3c8>)
 801e246:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e24a:	ec51 0b18 	vmov	r0, r1, d8
 801e24e:	f7e2 f9d3 	bl	80005f8 <__aeabi_dmul>
 801e252:	a30d      	add	r3, pc, #52	; (adr r3, 801e288 <__ieee754_pow+0x3c8>)
 801e254:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e258:	e6cb      	b.n	801dff2 <__ieee754_pow+0x132>
 801e25a:	bf00      	nop
 801e25c:	f3af 8000 	nop.w
 801e260:	60000000 	.word	0x60000000
 801e264:	3ff71547 	.word	0x3ff71547
 801e268:	f85ddf44 	.word	0xf85ddf44
 801e26c:	3e54ae0b 	.word	0x3e54ae0b
 801e270:	55555555 	.word	0x55555555
 801e274:	3fd55555 	.word	0x3fd55555
 801e278:	652b82fe 	.word	0x652b82fe
 801e27c:	3ff71547 	.word	0x3ff71547
 801e280:	00000000 	.word	0x00000000
 801e284:	bff00000 	.word	0xbff00000
 801e288:	8800759c 	.word	0x8800759c
 801e28c:	7e37e43c 	.word	0x7e37e43c
 801e290:	3ff00000 	.word	0x3ff00000
 801e294:	3fd00000 	.word	0x3fd00000
 801e298:	3fe00000 	.word	0x3fe00000
 801e29c:	408fffff 	.word	0x408fffff
 801e2a0:	4bd7      	ldr	r3, [pc, #860]	; (801e600 <__ieee754_pow+0x740>)
 801e2a2:	ea03 0309 	and.w	r3, r3, r9
 801e2a6:	2200      	movs	r2, #0
 801e2a8:	b92b      	cbnz	r3, 801e2b6 <__ieee754_pow+0x3f6>
 801e2aa:	4bd6      	ldr	r3, [pc, #856]	; (801e604 <__ieee754_pow+0x744>)
 801e2ac:	f7e2 f9a4 	bl	80005f8 <__aeabi_dmul>
 801e2b0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801e2b4:	460c      	mov	r4, r1
 801e2b6:	1523      	asrs	r3, r4, #20
 801e2b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801e2bc:	4413      	add	r3, r2
 801e2be:	9309      	str	r3, [sp, #36]	; 0x24
 801e2c0:	4bd1      	ldr	r3, [pc, #836]	; (801e608 <__ieee754_pow+0x748>)
 801e2c2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801e2c6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801e2ca:	429c      	cmp	r4, r3
 801e2cc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801e2d0:	dd08      	ble.n	801e2e4 <__ieee754_pow+0x424>
 801e2d2:	4bce      	ldr	r3, [pc, #824]	; (801e60c <__ieee754_pow+0x74c>)
 801e2d4:	429c      	cmp	r4, r3
 801e2d6:	f340 8163 	ble.w	801e5a0 <__ieee754_pow+0x6e0>
 801e2da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e2dc:	3301      	adds	r3, #1
 801e2de:	9309      	str	r3, [sp, #36]	; 0x24
 801e2e0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801e2e4:	2400      	movs	r4, #0
 801e2e6:	00e3      	lsls	r3, r4, #3
 801e2e8:	930b      	str	r3, [sp, #44]	; 0x2c
 801e2ea:	4bc9      	ldr	r3, [pc, #804]	; (801e610 <__ieee754_pow+0x750>)
 801e2ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e2f0:	ed93 7b00 	vldr	d7, [r3]
 801e2f4:	4629      	mov	r1, r5
 801e2f6:	ec53 2b17 	vmov	r2, r3, d7
 801e2fa:	eeb0 8a47 	vmov.f32	s16, s14
 801e2fe:	eef0 8a67 	vmov.f32	s17, s15
 801e302:	4682      	mov	sl, r0
 801e304:	f7e1 ffc0 	bl	8000288 <__aeabi_dsub>
 801e308:	4652      	mov	r2, sl
 801e30a:	4606      	mov	r6, r0
 801e30c:	460f      	mov	r7, r1
 801e30e:	462b      	mov	r3, r5
 801e310:	ec51 0b18 	vmov	r0, r1, d8
 801e314:	f7e1 ffba 	bl	800028c <__adddf3>
 801e318:	4602      	mov	r2, r0
 801e31a:	460b      	mov	r3, r1
 801e31c:	2000      	movs	r0, #0
 801e31e:	49bd      	ldr	r1, [pc, #756]	; (801e614 <__ieee754_pow+0x754>)
 801e320:	f7e2 fa94 	bl	800084c <__aeabi_ddiv>
 801e324:	ec41 0b19 	vmov	d9, r0, r1
 801e328:	4602      	mov	r2, r0
 801e32a:	460b      	mov	r3, r1
 801e32c:	4630      	mov	r0, r6
 801e32e:	4639      	mov	r1, r7
 801e330:	f7e2 f962 	bl	80005f8 <__aeabi_dmul>
 801e334:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e338:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e33c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801e340:	2300      	movs	r3, #0
 801e342:	9304      	str	r3, [sp, #16]
 801e344:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801e348:	46ab      	mov	fp, r5
 801e34a:	106d      	asrs	r5, r5, #1
 801e34c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801e350:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801e354:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801e358:	2200      	movs	r2, #0
 801e35a:	4640      	mov	r0, r8
 801e35c:	4649      	mov	r1, r9
 801e35e:	4614      	mov	r4, r2
 801e360:	461d      	mov	r5, r3
 801e362:	f7e2 f949 	bl	80005f8 <__aeabi_dmul>
 801e366:	4602      	mov	r2, r0
 801e368:	460b      	mov	r3, r1
 801e36a:	4630      	mov	r0, r6
 801e36c:	4639      	mov	r1, r7
 801e36e:	f7e1 ff8b 	bl	8000288 <__aeabi_dsub>
 801e372:	ec53 2b18 	vmov	r2, r3, d8
 801e376:	4606      	mov	r6, r0
 801e378:	460f      	mov	r7, r1
 801e37a:	4620      	mov	r0, r4
 801e37c:	4629      	mov	r1, r5
 801e37e:	f7e1 ff83 	bl	8000288 <__aeabi_dsub>
 801e382:	4602      	mov	r2, r0
 801e384:	460b      	mov	r3, r1
 801e386:	4650      	mov	r0, sl
 801e388:	4659      	mov	r1, fp
 801e38a:	f7e1 ff7d 	bl	8000288 <__aeabi_dsub>
 801e38e:	4642      	mov	r2, r8
 801e390:	464b      	mov	r3, r9
 801e392:	f7e2 f931 	bl	80005f8 <__aeabi_dmul>
 801e396:	4602      	mov	r2, r0
 801e398:	460b      	mov	r3, r1
 801e39a:	4630      	mov	r0, r6
 801e39c:	4639      	mov	r1, r7
 801e39e:	f7e1 ff73 	bl	8000288 <__aeabi_dsub>
 801e3a2:	ec53 2b19 	vmov	r2, r3, d9
 801e3a6:	f7e2 f927 	bl	80005f8 <__aeabi_dmul>
 801e3aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e3ae:	ec41 0b18 	vmov	d8, r0, r1
 801e3b2:	4610      	mov	r0, r2
 801e3b4:	4619      	mov	r1, r3
 801e3b6:	f7e2 f91f 	bl	80005f8 <__aeabi_dmul>
 801e3ba:	a37d      	add	r3, pc, #500	; (adr r3, 801e5b0 <__ieee754_pow+0x6f0>)
 801e3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3c0:	4604      	mov	r4, r0
 801e3c2:	460d      	mov	r5, r1
 801e3c4:	f7e2 f918 	bl	80005f8 <__aeabi_dmul>
 801e3c8:	a37b      	add	r3, pc, #492	; (adr r3, 801e5b8 <__ieee754_pow+0x6f8>)
 801e3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3ce:	f7e1 ff5d 	bl	800028c <__adddf3>
 801e3d2:	4622      	mov	r2, r4
 801e3d4:	462b      	mov	r3, r5
 801e3d6:	f7e2 f90f 	bl	80005f8 <__aeabi_dmul>
 801e3da:	a379      	add	r3, pc, #484	; (adr r3, 801e5c0 <__ieee754_pow+0x700>)
 801e3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3e0:	f7e1 ff54 	bl	800028c <__adddf3>
 801e3e4:	4622      	mov	r2, r4
 801e3e6:	462b      	mov	r3, r5
 801e3e8:	f7e2 f906 	bl	80005f8 <__aeabi_dmul>
 801e3ec:	a376      	add	r3, pc, #472	; (adr r3, 801e5c8 <__ieee754_pow+0x708>)
 801e3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3f2:	f7e1 ff4b 	bl	800028c <__adddf3>
 801e3f6:	4622      	mov	r2, r4
 801e3f8:	462b      	mov	r3, r5
 801e3fa:	f7e2 f8fd 	bl	80005f8 <__aeabi_dmul>
 801e3fe:	a374      	add	r3, pc, #464	; (adr r3, 801e5d0 <__ieee754_pow+0x710>)
 801e400:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e404:	f7e1 ff42 	bl	800028c <__adddf3>
 801e408:	4622      	mov	r2, r4
 801e40a:	462b      	mov	r3, r5
 801e40c:	f7e2 f8f4 	bl	80005f8 <__aeabi_dmul>
 801e410:	a371      	add	r3, pc, #452	; (adr r3, 801e5d8 <__ieee754_pow+0x718>)
 801e412:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e416:	f7e1 ff39 	bl	800028c <__adddf3>
 801e41a:	4622      	mov	r2, r4
 801e41c:	4606      	mov	r6, r0
 801e41e:	460f      	mov	r7, r1
 801e420:	462b      	mov	r3, r5
 801e422:	4620      	mov	r0, r4
 801e424:	4629      	mov	r1, r5
 801e426:	f7e2 f8e7 	bl	80005f8 <__aeabi_dmul>
 801e42a:	4602      	mov	r2, r0
 801e42c:	460b      	mov	r3, r1
 801e42e:	4630      	mov	r0, r6
 801e430:	4639      	mov	r1, r7
 801e432:	f7e2 f8e1 	bl	80005f8 <__aeabi_dmul>
 801e436:	4642      	mov	r2, r8
 801e438:	4604      	mov	r4, r0
 801e43a:	460d      	mov	r5, r1
 801e43c:	464b      	mov	r3, r9
 801e43e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e442:	f7e1 ff23 	bl	800028c <__adddf3>
 801e446:	ec53 2b18 	vmov	r2, r3, d8
 801e44a:	f7e2 f8d5 	bl	80005f8 <__aeabi_dmul>
 801e44e:	4622      	mov	r2, r4
 801e450:	462b      	mov	r3, r5
 801e452:	f7e1 ff1b 	bl	800028c <__adddf3>
 801e456:	4642      	mov	r2, r8
 801e458:	4682      	mov	sl, r0
 801e45a:	468b      	mov	fp, r1
 801e45c:	464b      	mov	r3, r9
 801e45e:	4640      	mov	r0, r8
 801e460:	4649      	mov	r1, r9
 801e462:	f7e2 f8c9 	bl	80005f8 <__aeabi_dmul>
 801e466:	4b6c      	ldr	r3, [pc, #432]	; (801e618 <__ieee754_pow+0x758>)
 801e468:	2200      	movs	r2, #0
 801e46a:	4606      	mov	r6, r0
 801e46c:	460f      	mov	r7, r1
 801e46e:	f7e1 ff0d 	bl	800028c <__adddf3>
 801e472:	4652      	mov	r2, sl
 801e474:	465b      	mov	r3, fp
 801e476:	f7e1 ff09 	bl	800028c <__adddf3>
 801e47a:	9c04      	ldr	r4, [sp, #16]
 801e47c:	460d      	mov	r5, r1
 801e47e:	4622      	mov	r2, r4
 801e480:	460b      	mov	r3, r1
 801e482:	4640      	mov	r0, r8
 801e484:	4649      	mov	r1, r9
 801e486:	f7e2 f8b7 	bl	80005f8 <__aeabi_dmul>
 801e48a:	4b63      	ldr	r3, [pc, #396]	; (801e618 <__ieee754_pow+0x758>)
 801e48c:	4680      	mov	r8, r0
 801e48e:	4689      	mov	r9, r1
 801e490:	2200      	movs	r2, #0
 801e492:	4620      	mov	r0, r4
 801e494:	4629      	mov	r1, r5
 801e496:	f7e1 fef7 	bl	8000288 <__aeabi_dsub>
 801e49a:	4632      	mov	r2, r6
 801e49c:	463b      	mov	r3, r7
 801e49e:	f7e1 fef3 	bl	8000288 <__aeabi_dsub>
 801e4a2:	4602      	mov	r2, r0
 801e4a4:	460b      	mov	r3, r1
 801e4a6:	4650      	mov	r0, sl
 801e4a8:	4659      	mov	r1, fp
 801e4aa:	f7e1 feed 	bl	8000288 <__aeabi_dsub>
 801e4ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e4b2:	f7e2 f8a1 	bl	80005f8 <__aeabi_dmul>
 801e4b6:	4622      	mov	r2, r4
 801e4b8:	4606      	mov	r6, r0
 801e4ba:	460f      	mov	r7, r1
 801e4bc:	462b      	mov	r3, r5
 801e4be:	ec51 0b18 	vmov	r0, r1, d8
 801e4c2:	f7e2 f899 	bl	80005f8 <__aeabi_dmul>
 801e4c6:	4602      	mov	r2, r0
 801e4c8:	460b      	mov	r3, r1
 801e4ca:	4630      	mov	r0, r6
 801e4cc:	4639      	mov	r1, r7
 801e4ce:	f7e1 fedd 	bl	800028c <__adddf3>
 801e4d2:	4606      	mov	r6, r0
 801e4d4:	460f      	mov	r7, r1
 801e4d6:	4602      	mov	r2, r0
 801e4d8:	460b      	mov	r3, r1
 801e4da:	4640      	mov	r0, r8
 801e4dc:	4649      	mov	r1, r9
 801e4de:	f7e1 fed5 	bl	800028c <__adddf3>
 801e4e2:	9c04      	ldr	r4, [sp, #16]
 801e4e4:	a33e      	add	r3, pc, #248	; (adr r3, 801e5e0 <__ieee754_pow+0x720>)
 801e4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4ea:	4620      	mov	r0, r4
 801e4ec:	460d      	mov	r5, r1
 801e4ee:	f7e2 f883 	bl	80005f8 <__aeabi_dmul>
 801e4f2:	4642      	mov	r2, r8
 801e4f4:	ec41 0b18 	vmov	d8, r0, r1
 801e4f8:	464b      	mov	r3, r9
 801e4fa:	4620      	mov	r0, r4
 801e4fc:	4629      	mov	r1, r5
 801e4fe:	f7e1 fec3 	bl	8000288 <__aeabi_dsub>
 801e502:	4602      	mov	r2, r0
 801e504:	460b      	mov	r3, r1
 801e506:	4630      	mov	r0, r6
 801e508:	4639      	mov	r1, r7
 801e50a:	f7e1 febd 	bl	8000288 <__aeabi_dsub>
 801e50e:	a336      	add	r3, pc, #216	; (adr r3, 801e5e8 <__ieee754_pow+0x728>)
 801e510:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e514:	f7e2 f870 	bl	80005f8 <__aeabi_dmul>
 801e518:	a335      	add	r3, pc, #212	; (adr r3, 801e5f0 <__ieee754_pow+0x730>)
 801e51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e51e:	4606      	mov	r6, r0
 801e520:	460f      	mov	r7, r1
 801e522:	4620      	mov	r0, r4
 801e524:	4629      	mov	r1, r5
 801e526:	f7e2 f867 	bl	80005f8 <__aeabi_dmul>
 801e52a:	4602      	mov	r2, r0
 801e52c:	460b      	mov	r3, r1
 801e52e:	4630      	mov	r0, r6
 801e530:	4639      	mov	r1, r7
 801e532:	f7e1 feab 	bl	800028c <__adddf3>
 801e536:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e538:	4b38      	ldr	r3, [pc, #224]	; (801e61c <__ieee754_pow+0x75c>)
 801e53a:	4413      	add	r3, r2
 801e53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e540:	f7e1 fea4 	bl	800028c <__adddf3>
 801e544:	4682      	mov	sl, r0
 801e546:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e548:	468b      	mov	fp, r1
 801e54a:	f7e1 ffeb 	bl	8000524 <__aeabi_i2d>
 801e54e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e550:	4b33      	ldr	r3, [pc, #204]	; (801e620 <__ieee754_pow+0x760>)
 801e552:	4413      	add	r3, r2
 801e554:	e9d3 8900 	ldrd	r8, r9, [r3]
 801e558:	4606      	mov	r6, r0
 801e55a:	460f      	mov	r7, r1
 801e55c:	4652      	mov	r2, sl
 801e55e:	465b      	mov	r3, fp
 801e560:	ec51 0b18 	vmov	r0, r1, d8
 801e564:	f7e1 fe92 	bl	800028c <__adddf3>
 801e568:	4642      	mov	r2, r8
 801e56a:	464b      	mov	r3, r9
 801e56c:	f7e1 fe8e 	bl	800028c <__adddf3>
 801e570:	4632      	mov	r2, r6
 801e572:	463b      	mov	r3, r7
 801e574:	f7e1 fe8a 	bl	800028c <__adddf3>
 801e578:	9c04      	ldr	r4, [sp, #16]
 801e57a:	4632      	mov	r2, r6
 801e57c:	463b      	mov	r3, r7
 801e57e:	4620      	mov	r0, r4
 801e580:	460d      	mov	r5, r1
 801e582:	f7e1 fe81 	bl	8000288 <__aeabi_dsub>
 801e586:	4642      	mov	r2, r8
 801e588:	464b      	mov	r3, r9
 801e58a:	f7e1 fe7d 	bl	8000288 <__aeabi_dsub>
 801e58e:	ec53 2b18 	vmov	r2, r3, d8
 801e592:	f7e1 fe79 	bl	8000288 <__aeabi_dsub>
 801e596:	4602      	mov	r2, r0
 801e598:	460b      	mov	r3, r1
 801e59a:	4650      	mov	r0, sl
 801e59c:	4659      	mov	r1, fp
 801e59e:	e606      	b.n	801e1ae <__ieee754_pow+0x2ee>
 801e5a0:	2401      	movs	r4, #1
 801e5a2:	e6a0      	b.n	801e2e6 <__ieee754_pow+0x426>
 801e5a4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801e5f8 <__ieee754_pow+0x738>
 801e5a8:	e60d      	b.n	801e1c6 <__ieee754_pow+0x306>
 801e5aa:	bf00      	nop
 801e5ac:	f3af 8000 	nop.w
 801e5b0:	4a454eef 	.word	0x4a454eef
 801e5b4:	3fca7e28 	.word	0x3fca7e28
 801e5b8:	93c9db65 	.word	0x93c9db65
 801e5bc:	3fcd864a 	.word	0x3fcd864a
 801e5c0:	a91d4101 	.word	0xa91d4101
 801e5c4:	3fd17460 	.word	0x3fd17460
 801e5c8:	518f264d 	.word	0x518f264d
 801e5cc:	3fd55555 	.word	0x3fd55555
 801e5d0:	db6fabff 	.word	0xdb6fabff
 801e5d4:	3fdb6db6 	.word	0x3fdb6db6
 801e5d8:	33333303 	.word	0x33333303
 801e5dc:	3fe33333 	.word	0x3fe33333
 801e5e0:	e0000000 	.word	0xe0000000
 801e5e4:	3feec709 	.word	0x3feec709
 801e5e8:	dc3a03fd 	.word	0xdc3a03fd
 801e5ec:	3feec709 	.word	0x3feec709
 801e5f0:	145b01f5 	.word	0x145b01f5
 801e5f4:	be3e2fe0 	.word	0xbe3e2fe0
 801e5f8:	00000000 	.word	0x00000000
 801e5fc:	3ff00000 	.word	0x3ff00000
 801e600:	7ff00000 	.word	0x7ff00000
 801e604:	43400000 	.word	0x43400000
 801e608:	0003988e 	.word	0x0003988e
 801e60c:	000bb679 	.word	0x000bb679
 801e610:	08020ec8 	.word	0x08020ec8
 801e614:	3ff00000 	.word	0x3ff00000
 801e618:	40080000 	.word	0x40080000
 801e61c:	08020ee8 	.word	0x08020ee8
 801e620:	08020ed8 	.word	0x08020ed8
 801e624:	a3b5      	add	r3, pc, #724	; (adr r3, 801e8fc <__ieee754_pow+0xa3c>)
 801e626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e62a:	4640      	mov	r0, r8
 801e62c:	4649      	mov	r1, r9
 801e62e:	f7e1 fe2d 	bl	800028c <__adddf3>
 801e632:	4622      	mov	r2, r4
 801e634:	ec41 0b1a 	vmov	d10, r0, r1
 801e638:	462b      	mov	r3, r5
 801e63a:	4630      	mov	r0, r6
 801e63c:	4639      	mov	r1, r7
 801e63e:	f7e1 fe23 	bl	8000288 <__aeabi_dsub>
 801e642:	4602      	mov	r2, r0
 801e644:	460b      	mov	r3, r1
 801e646:	ec51 0b1a 	vmov	r0, r1, d10
 801e64a:	f7e2 fa65 	bl	8000b18 <__aeabi_dcmpgt>
 801e64e:	2800      	cmp	r0, #0
 801e650:	f47f adf8 	bne.w	801e244 <__ieee754_pow+0x384>
 801e654:	4aa4      	ldr	r2, [pc, #656]	; (801e8e8 <__ieee754_pow+0xa28>)
 801e656:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801e65a:	4293      	cmp	r3, r2
 801e65c:	f340 810b 	ble.w	801e876 <__ieee754_pow+0x9b6>
 801e660:	151b      	asrs	r3, r3, #20
 801e662:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801e666:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801e66a:	fa4a f303 	asr.w	r3, sl, r3
 801e66e:	445b      	add	r3, fp
 801e670:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801e674:	4e9d      	ldr	r6, [pc, #628]	; (801e8ec <__ieee754_pow+0xa2c>)
 801e676:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801e67a:	4116      	asrs	r6, r2
 801e67c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801e680:	2000      	movs	r0, #0
 801e682:	ea23 0106 	bic.w	r1, r3, r6
 801e686:	f1c2 0214 	rsb	r2, r2, #20
 801e68a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801e68e:	fa4a fa02 	asr.w	sl, sl, r2
 801e692:	f1bb 0f00 	cmp.w	fp, #0
 801e696:	4602      	mov	r2, r0
 801e698:	460b      	mov	r3, r1
 801e69a:	4620      	mov	r0, r4
 801e69c:	4629      	mov	r1, r5
 801e69e:	bfb8      	it	lt
 801e6a0:	f1ca 0a00 	rsblt	sl, sl, #0
 801e6a4:	f7e1 fdf0 	bl	8000288 <__aeabi_dsub>
 801e6a8:	ec41 0b19 	vmov	d9, r0, r1
 801e6ac:	4642      	mov	r2, r8
 801e6ae:	464b      	mov	r3, r9
 801e6b0:	ec51 0b19 	vmov	r0, r1, d9
 801e6b4:	f7e1 fdea 	bl	800028c <__adddf3>
 801e6b8:	2400      	movs	r4, #0
 801e6ba:	a379      	add	r3, pc, #484	; (adr r3, 801e8a0 <__ieee754_pow+0x9e0>)
 801e6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6c0:	4620      	mov	r0, r4
 801e6c2:	460d      	mov	r5, r1
 801e6c4:	f7e1 ff98 	bl	80005f8 <__aeabi_dmul>
 801e6c8:	ec53 2b19 	vmov	r2, r3, d9
 801e6cc:	4606      	mov	r6, r0
 801e6ce:	460f      	mov	r7, r1
 801e6d0:	4620      	mov	r0, r4
 801e6d2:	4629      	mov	r1, r5
 801e6d4:	f7e1 fdd8 	bl	8000288 <__aeabi_dsub>
 801e6d8:	4602      	mov	r2, r0
 801e6da:	460b      	mov	r3, r1
 801e6dc:	4640      	mov	r0, r8
 801e6de:	4649      	mov	r1, r9
 801e6e0:	f7e1 fdd2 	bl	8000288 <__aeabi_dsub>
 801e6e4:	a370      	add	r3, pc, #448	; (adr r3, 801e8a8 <__ieee754_pow+0x9e8>)
 801e6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6ea:	f7e1 ff85 	bl	80005f8 <__aeabi_dmul>
 801e6ee:	a370      	add	r3, pc, #448	; (adr r3, 801e8b0 <__ieee754_pow+0x9f0>)
 801e6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6f4:	4680      	mov	r8, r0
 801e6f6:	4689      	mov	r9, r1
 801e6f8:	4620      	mov	r0, r4
 801e6fa:	4629      	mov	r1, r5
 801e6fc:	f7e1 ff7c 	bl	80005f8 <__aeabi_dmul>
 801e700:	4602      	mov	r2, r0
 801e702:	460b      	mov	r3, r1
 801e704:	4640      	mov	r0, r8
 801e706:	4649      	mov	r1, r9
 801e708:	f7e1 fdc0 	bl	800028c <__adddf3>
 801e70c:	4604      	mov	r4, r0
 801e70e:	460d      	mov	r5, r1
 801e710:	4602      	mov	r2, r0
 801e712:	460b      	mov	r3, r1
 801e714:	4630      	mov	r0, r6
 801e716:	4639      	mov	r1, r7
 801e718:	f7e1 fdb8 	bl	800028c <__adddf3>
 801e71c:	4632      	mov	r2, r6
 801e71e:	463b      	mov	r3, r7
 801e720:	4680      	mov	r8, r0
 801e722:	4689      	mov	r9, r1
 801e724:	f7e1 fdb0 	bl	8000288 <__aeabi_dsub>
 801e728:	4602      	mov	r2, r0
 801e72a:	460b      	mov	r3, r1
 801e72c:	4620      	mov	r0, r4
 801e72e:	4629      	mov	r1, r5
 801e730:	f7e1 fdaa 	bl	8000288 <__aeabi_dsub>
 801e734:	4642      	mov	r2, r8
 801e736:	4606      	mov	r6, r0
 801e738:	460f      	mov	r7, r1
 801e73a:	464b      	mov	r3, r9
 801e73c:	4640      	mov	r0, r8
 801e73e:	4649      	mov	r1, r9
 801e740:	f7e1 ff5a 	bl	80005f8 <__aeabi_dmul>
 801e744:	a35c      	add	r3, pc, #368	; (adr r3, 801e8b8 <__ieee754_pow+0x9f8>)
 801e746:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e74a:	4604      	mov	r4, r0
 801e74c:	460d      	mov	r5, r1
 801e74e:	f7e1 ff53 	bl	80005f8 <__aeabi_dmul>
 801e752:	a35b      	add	r3, pc, #364	; (adr r3, 801e8c0 <__ieee754_pow+0xa00>)
 801e754:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e758:	f7e1 fd96 	bl	8000288 <__aeabi_dsub>
 801e75c:	4622      	mov	r2, r4
 801e75e:	462b      	mov	r3, r5
 801e760:	f7e1 ff4a 	bl	80005f8 <__aeabi_dmul>
 801e764:	a358      	add	r3, pc, #352	; (adr r3, 801e8c8 <__ieee754_pow+0xa08>)
 801e766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e76a:	f7e1 fd8f 	bl	800028c <__adddf3>
 801e76e:	4622      	mov	r2, r4
 801e770:	462b      	mov	r3, r5
 801e772:	f7e1 ff41 	bl	80005f8 <__aeabi_dmul>
 801e776:	a356      	add	r3, pc, #344	; (adr r3, 801e8d0 <__ieee754_pow+0xa10>)
 801e778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e77c:	f7e1 fd84 	bl	8000288 <__aeabi_dsub>
 801e780:	4622      	mov	r2, r4
 801e782:	462b      	mov	r3, r5
 801e784:	f7e1 ff38 	bl	80005f8 <__aeabi_dmul>
 801e788:	a353      	add	r3, pc, #332	; (adr r3, 801e8d8 <__ieee754_pow+0xa18>)
 801e78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e78e:	f7e1 fd7d 	bl	800028c <__adddf3>
 801e792:	4622      	mov	r2, r4
 801e794:	462b      	mov	r3, r5
 801e796:	f7e1 ff2f 	bl	80005f8 <__aeabi_dmul>
 801e79a:	4602      	mov	r2, r0
 801e79c:	460b      	mov	r3, r1
 801e79e:	4640      	mov	r0, r8
 801e7a0:	4649      	mov	r1, r9
 801e7a2:	f7e1 fd71 	bl	8000288 <__aeabi_dsub>
 801e7a6:	4604      	mov	r4, r0
 801e7a8:	460d      	mov	r5, r1
 801e7aa:	4602      	mov	r2, r0
 801e7ac:	460b      	mov	r3, r1
 801e7ae:	4640      	mov	r0, r8
 801e7b0:	4649      	mov	r1, r9
 801e7b2:	f7e1 ff21 	bl	80005f8 <__aeabi_dmul>
 801e7b6:	2200      	movs	r2, #0
 801e7b8:	ec41 0b19 	vmov	d9, r0, r1
 801e7bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801e7c0:	4620      	mov	r0, r4
 801e7c2:	4629      	mov	r1, r5
 801e7c4:	f7e1 fd60 	bl	8000288 <__aeabi_dsub>
 801e7c8:	4602      	mov	r2, r0
 801e7ca:	460b      	mov	r3, r1
 801e7cc:	ec51 0b19 	vmov	r0, r1, d9
 801e7d0:	f7e2 f83c 	bl	800084c <__aeabi_ddiv>
 801e7d4:	4632      	mov	r2, r6
 801e7d6:	4604      	mov	r4, r0
 801e7d8:	460d      	mov	r5, r1
 801e7da:	463b      	mov	r3, r7
 801e7dc:	4640      	mov	r0, r8
 801e7de:	4649      	mov	r1, r9
 801e7e0:	f7e1 ff0a 	bl	80005f8 <__aeabi_dmul>
 801e7e4:	4632      	mov	r2, r6
 801e7e6:	463b      	mov	r3, r7
 801e7e8:	f7e1 fd50 	bl	800028c <__adddf3>
 801e7ec:	4602      	mov	r2, r0
 801e7ee:	460b      	mov	r3, r1
 801e7f0:	4620      	mov	r0, r4
 801e7f2:	4629      	mov	r1, r5
 801e7f4:	f7e1 fd48 	bl	8000288 <__aeabi_dsub>
 801e7f8:	4642      	mov	r2, r8
 801e7fa:	464b      	mov	r3, r9
 801e7fc:	f7e1 fd44 	bl	8000288 <__aeabi_dsub>
 801e800:	460b      	mov	r3, r1
 801e802:	4602      	mov	r2, r0
 801e804:	493a      	ldr	r1, [pc, #232]	; (801e8f0 <__ieee754_pow+0xa30>)
 801e806:	2000      	movs	r0, #0
 801e808:	f7e1 fd3e 	bl	8000288 <__aeabi_dsub>
 801e80c:	e9cd 0100 	strd	r0, r1, [sp]
 801e810:	9b01      	ldr	r3, [sp, #4]
 801e812:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801e816:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e81a:	da2f      	bge.n	801e87c <__ieee754_pow+0x9bc>
 801e81c:	4650      	mov	r0, sl
 801e81e:	ed9d 0b00 	vldr	d0, [sp]
 801e822:	f001 f98d 	bl	801fb40 <scalbn>
 801e826:	ec51 0b10 	vmov	r0, r1, d0
 801e82a:	ec53 2b18 	vmov	r2, r3, d8
 801e82e:	f7ff bbe0 	b.w	801dff2 <__ieee754_pow+0x132>
 801e832:	4b30      	ldr	r3, [pc, #192]	; (801e8f4 <__ieee754_pow+0xa34>)
 801e834:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801e838:	429e      	cmp	r6, r3
 801e83a:	f77f af0b 	ble.w	801e654 <__ieee754_pow+0x794>
 801e83e:	4b2e      	ldr	r3, [pc, #184]	; (801e8f8 <__ieee754_pow+0xa38>)
 801e840:	440b      	add	r3, r1
 801e842:	4303      	orrs	r3, r0
 801e844:	d00b      	beq.n	801e85e <__ieee754_pow+0x99e>
 801e846:	a326      	add	r3, pc, #152	; (adr r3, 801e8e0 <__ieee754_pow+0xa20>)
 801e848:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e84c:	ec51 0b18 	vmov	r0, r1, d8
 801e850:	f7e1 fed2 	bl	80005f8 <__aeabi_dmul>
 801e854:	a322      	add	r3, pc, #136	; (adr r3, 801e8e0 <__ieee754_pow+0xa20>)
 801e856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e85a:	f7ff bbca 	b.w	801dff2 <__ieee754_pow+0x132>
 801e85e:	4622      	mov	r2, r4
 801e860:	462b      	mov	r3, r5
 801e862:	f7e1 fd11 	bl	8000288 <__aeabi_dsub>
 801e866:	4642      	mov	r2, r8
 801e868:	464b      	mov	r3, r9
 801e86a:	f7e2 f94b 	bl	8000b04 <__aeabi_dcmpge>
 801e86e:	2800      	cmp	r0, #0
 801e870:	f43f aef0 	beq.w	801e654 <__ieee754_pow+0x794>
 801e874:	e7e7      	b.n	801e846 <__ieee754_pow+0x986>
 801e876:	f04f 0a00 	mov.w	sl, #0
 801e87a:	e717      	b.n	801e6ac <__ieee754_pow+0x7ec>
 801e87c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e880:	4619      	mov	r1, r3
 801e882:	e7d2      	b.n	801e82a <__ieee754_pow+0x96a>
 801e884:	491a      	ldr	r1, [pc, #104]	; (801e8f0 <__ieee754_pow+0xa30>)
 801e886:	2000      	movs	r0, #0
 801e888:	f7ff bb9e 	b.w	801dfc8 <__ieee754_pow+0x108>
 801e88c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e890:	f7ff bb9a 	b.w	801dfc8 <__ieee754_pow+0x108>
 801e894:	9000      	str	r0, [sp, #0]
 801e896:	f7ff bb76 	b.w	801df86 <__ieee754_pow+0xc6>
 801e89a:	2100      	movs	r1, #0
 801e89c:	f7ff bb60 	b.w	801df60 <__ieee754_pow+0xa0>
 801e8a0:	00000000 	.word	0x00000000
 801e8a4:	3fe62e43 	.word	0x3fe62e43
 801e8a8:	fefa39ef 	.word	0xfefa39ef
 801e8ac:	3fe62e42 	.word	0x3fe62e42
 801e8b0:	0ca86c39 	.word	0x0ca86c39
 801e8b4:	be205c61 	.word	0xbe205c61
 801e8b8:	72bea4d0 	.word	0x72bea4d0
 801e8bc:	3e663769 	.word	0x3e663769
 801e8c0:	c5d26bf1 	.word	0xc5d26bf1
 801e8c4:	3ebbbd41 	.word	0x3ebbbd41
 801e8c8:	af25de2c 	.word	0xaf25de2c
 801e8cc:	3f11566a 	.word	0x3f11566a
 801e8d0:	16bebd93 	.word	0x16bebd93
 801e8d4:	3f66c16c 	.word	0x3f66c16c
 801e8d8:	5555553e 	.word	0x5555553e
 801e8dc:	3fc55555 	.word	0x3fc55555
 801e8e0:	c2f8f359 	.word	0xc2f8f359
 801e8e4:	01a56e1f 	.word	0x01a56e1f
 801e8e8:	3fe00000 	.word	0x3fe00000
 801e8ec:	000fffff 	.word	0x000fffff
 801e8f0:	3ff00000 	.word	0x3ff00000
 801e8f4:	4090cbff 	.word	0x4090cbff
 801e8f8:	3f6f3400 	.word	0x3f6f3400
 801e8fc:	652b82fe 	.word	0x652b82fe
 801e900:	3c971547 	.word	0x3c971547

0801e904 <__ieee754_sqrt>:
 801e904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e908:	ec55 4b10 	vmov	r4, r5, d0
 801e90c:	4e56      	ldr	r6, [pc, #344]	; (801ea68 <__ieee754_sqrt+0x164>)
 801e90e:	43ae      	bics	r6, r5
 801e910:	ee10 0a10 	vmov	r0, s0
 801e914:	ee10 3a10 	vmov	r3, s0
 801e918:	4629      	mov	r1, r5
 801e91a:	462a      	mov	r2, r5
 801e91c:	d110      	bne.n	801e940 <__ieee754_sqrt+0x3c>
 801e91e:	ee10 2a10 	vmov	r2, s0
 801e922:	462b      	mov	r3, r5
 801e924:	f7e1 fe68 	bl	80005f8 <__aeabi_dmul>
 801e928:	4602      	mov	r2, r0
 801e92a:	460b      	mov	r3, r1
 801e92c:	4620      	mov	r0, r4
 801e92e:	4629      	mov	r1, r5
 801e930:	f7e1 fcac 	bl	800028c <__adddf3>
 801e934:	4604      	mov	r4, r0
 801e936:	460d      	mov	r5, r1
 801e938:	ec45 4b10 	vmov	d0, r4, r5
 801e93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e940:	2d00      	cmp	r5, #0
 801e942:	dc10      	bgt.n	801e966 <__ieee754_sqrt+0x62>
 801e944:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801e948:	4330      	orrs	r0, r6
 801e94a:	d0f5      	beq.n	801e938 <__ieee754_sqrt+0x34>
 801e94c:	b15d      	cbz	r5, 801e966 <__ieee754_sqrt+0x62>
 801e94e:	ee10 2a10 	vmov	r2, s0
 801e952:	462b      	mov	r3, r5
 801e954:	ee10 0a10 	vmov	r0, s0
 801e958:	f7e1 fc96 	bl	8000288 <__aeabi_dsub>
 801e95c:	4602      	mov	r2, r0
 801e95e:	460b      	mov	r3, r1
 801e960:	f7e1 ff74 	bl	800084c <__aeabi_ddiv>
 801e964:	e7e6      	b.n	801e934 <__ieee754_sqrt+0x30>
 801e966:	1509      	asrs	r1, r1, #20
 801e968:	d076      	beq.n	801ea58 <__ieee754_sqrt+0x154>
 801e96a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801e96e:	07ce      	lsls	r6, r1, #31
 801e970:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801e974:	bf5e      	ittt	pl
 801e976:	0fda      	lsrpl	r2, r3, #31
 801e978:	005b      	lslpl	r3, r3, #1
 801e97a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801e97e:	0fda      	lsrs	r2, r3, #31
 801e980:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801e984:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801e988:	2000      	movs	r0, #0
 801e98a:	106d      	asrs	r5, r5, #1
 801e98c:	005b      	lsls	r3, r3, #1
 801e98e:	f04f 0e16 	mov.w	lr, #22
 801e992:	4684      	mov	ip, r0
 801e994:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801e998:	eb0c 0401 	add.w	r4, ip, r1
 801e99c:	4294      	cmp	r4, r2
 801e99e:	bfde      	ittt	le
 801e9a0:	1b12      	suble	r2, r2, r4
 801e9a2:	eb04 0c01 	addle.w	ip, r4, r1
 801e9a6:	1840      	addle	r0, r0, r1
 801e9a8:	0052      	lsls	r2, r2, #1
 801e9aa:	f1be 0e01 	subs.w	lr, lr, #1
 801e9ae:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801e9b2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801e9b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801e9ba:	d1ed      	bne.n	801e998 <__ieee754_sqrt+0x94>
 801e9bc:	4671      	mov	r1, lr
 801e9be:	2720      	movs	r7, #32
 801e9c0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801e9c4:	4562      	cmp	r2, ip
 801e9c6:	eb04 060e 	add.w	r6, r4, lr
 801e9ca:	dc02      	bgt.n	801e9d2 <__ieee754_sqrt+0xce>
 801e9cc:	d113      	bne.n	801e9f6 <__ieee754_sqrt+0xf2>
 801e9ce:	429e      	cmp	r6, r3
 801e9d0:	d811      	bhi.n	801e9f6 <__ieee754_sqrt+0xf2>
 801e9d2:	2e00      	cmp	r6, #0
 801e9d4:	eb06 0e04 	add.w	lr, r6, r4
 801e9d8:	da43      	bge.n	801ea62 <__ieee754_sqrt+0x15e>
 801e9da:	f1be 0f00 	cmp.w	lr, #0
 801e9de:	db40      	blt.n	801ea62 <__ieee754_sqrt+0x15e>
 801e9e0:	f10c 0801 	add.w	r8, ip, #1
 801e9e4:	eba2 020c 	sub.w	r2, r2, ip
 801e9e8:	429e      	cmp	r6, r3
 801e9ea:	bf88      	it	hi
 801e9ec:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 801e9f0:	1b9b      	subs	r3, r3, r6
 801e9f2:	4421      	add	r1, r4
 801e9f4:	46c4      	mov	ip, r8
 801e9f6:	0052      	lsls	r2, r2, #1
 801e9f8:	3f01      	subs	r7, #1
 801e9fa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801e9fe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801ea02:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ea06:	d1dd      	bne.n	801e9c4 <__ieee754_sqrt+0xc0>
 801ea08:	4313      	orrs	r3, r2
 801ea0a:	d006      	beq.n	801ea1a <__ieee754_sqrt+0x116>
 801ea0c:	1c4c      	adds	r4, r1, #1
 801ea0e:	bf13      	iteet	ne
 801ea10:	3101      	addne	r1, #1
 801ea12:	3001      	addeq	r0, #1
 801ea14:	4639      	moveq	r1, r7
 801ea16:	f021 0101 	bicne.w	r1, r1, #1
 801ea1a:	1043      	asrs	r3, r0, #1
 801ea1c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801ea20:	0849      	lsrs	r1, r1, #1
 801ea22:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801ea26:	07c2      	lsls	r2, r0, #31
 801ea28:	bf48      	it	mi
 801ea2a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801ea2e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801ea32:	460c      	mov	r4, r1
 801ea34:	463d      	mov	r5, r7
 801ea36:	e77f      	b.n	801e938 <__ieee754_sqrt+0x34>
 801ea38:	0ada      	lsrs	r2, r3, #11
 801ea3a:	3815      	subs	r0, #21
 801ea3c:	055b      	lsls	r3, r3, #21
 801ea3e:	2a00      	cmp	r2, #0
 801ea40:	d0fa      	beq.n	801ea38 <__ieee754_sqrt+0x134>
 801ea42:	02d7      	lsls	r7, r2, #11
 801ea44:	d50a      	bpl.n	801ea5c <__ieee754_sqrt+0x158>
 801ea46:	f1c1 0420 	rsb	r4, r1, #32
 801ea4a:	fa23 f404 	lsr.w	r4, r3, r4
 801ea4e:	1e4d      	subs	r5, r1, #1
 801ea50:	408b      	lsls	r3, r1
 801ea52:	4322      	orrs	r2, r4
 801ea54:	1b41      	subs	r1, r0, r5
 801ea56:	e788      	b.n	801e96a <__ieee754_sqrt+0x66>
 801ea58:	4608      	mov	r0, r1
 801ea5a:	e7f0      	b.n	801ea3e <__ieee754_sqrt+0x13a>
 801ea5c:	0052      	lsls	r2, r2, #1
 801ea5e:	3101      	adds	r1, #1
 801ea60:	e7ef      	b.n	801ea42 <__ieee754_sqrt+0x13e>
 801ea62:	46e0      	mov	r8, ip
 801ea64:	e7be      	b.n	801e9e4 <__ieee754_sqrt+0xe0>
 801ea66:	bf00      	nop
 801ea68:	7ff00000 	.word	0x7ff00000

0801ea6c <__ieee754_atan2f>:
 801ea6c:	ee10 2a90 	vmov	r2, s1
 801ea70:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801ea74:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801ea78:	b510      	push	{r4, lr}
 801ea7a:	eef0 7a40 	vmov.f32	s15, s0
 801ea7e:	dc06      	bgt.n	801ea8e <__ieee754_atan2f+0x22>
 801ea80:	ee10 0a10 	vmov	r0, s0
 801ea84:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801ea88:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801ea8c:	dd04      	ble.n	801ea98 <__ieee754_atan2f+0x2c>
 801ea8e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801ea92:	eeb0 0a67 	vmov.f32	s0, s15
 801ea96:	bd10      	pop	{r4, pc}
 801ea98:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801ea9c:	d103      	bne.n	801eaa6 <__ieee754_atan2f+0x3a>
 801ea9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eaa2:	f7fe bf33 	b.w	801d90c <atanf>
 801eaa6:	1794      	asrs	r4, r2, #30
 801eaa8:	f004 0402 	and.w	r4, r4, #2
 801eaac:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801eab0:	b943      	cbnz	r3, 801eac4 <__ieee754_atan2f+0x58>
 801eab2:	2c02      	cmp	r4, #2
 801eab4:	d05e      	beq.n	801eb74 <__ieee754_atan2f+0x108>
 801eab6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801eb88 <__ieee754_atan2f+0x11c>
 801eaba:	2c03      	cmp	r4, #3
 801eabc:	bf08      	it	eq
 801eabe:	eef0 7a47 	vmoveq.f32	s15, s14
 801eac2:	e7e6      	b.n	801ea92 <__ieee754_atan2f+0x26>
 801eac4:	b941      	cbnz	r1, 801ead8 <__ieee754_atan2f+0x6c>
 801eac6:	eddf 7a31 	vldr	s15, [pc, #196]	; 801eb8c <__ieee754_atan2f+0x120>
 801eaca:	ed9f 0a31 	vldr	s0, [pc, #196]	; 801eb90 <__ieee754_atan2f+0x124>
 801eace:	2800      	cmp	r0, #0
 801ead0:	bfb8      	it	lt
 801ead2:	eef0 7a40 	vmovlt.f32	s15, s0
 801ead6:	e7dc      	b.n	801ea92 <__ieee754_atan2f+0x26>
 801ead8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801eadc:	d110      	bne.n	801eb00 <__ieee754_atan2f+0x94>
 801eade:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801eae2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801eae6:	d107      	bne.n	801eaf8 <__ieee754_atan2f+0x8c>
 801eae8:	2c02      	cmp	r4, #2
 801eaea:	d846      	bhi.n	801eb7a <__ieee754_atan2f+0x10e>
 801eaec:	4b29      	ldr	r3, [pc, #164]	; (801eb94 <__ieee754_atan2f+0x128>)
 801eaee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801eaf2:	edd4 7a00 	vldr	s15, [r4]
 801eaf6:	e7cc      	b.n	801ea92 <__ieee754_atan2f+0x26>
 801eaf8:	2c02      	cmp	r4, #2
 801eafa:	d841      	bhi.n	801eb80 <__ieee754_atan2f+0x114>
 801eafc:	4b26      	ldr	r3, [pc, #152]	; (801eb98 <__ieee754_atan2f+0x12c>)
 801eafe:	e7f6      	b.n	801eaee <__ieee754_atan2f+0x82>
 801eb00:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801eb04:	d0df      	beq.n	801eac6 <__ieee754_atan2f+0x5a>
 801eb06:	1a5b      	subs	r3, r3, r1
 801eb08:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801eb0c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801eb10:	da1a      	bge.n	801eb48 <__ieee754_atan2f+0xdc>
 801eb12:	2a00      	cmp	r2, #0
 801eb14:	da01      	bge.n	801eb1a <__ieee754_atan2f+0xae>
 801eb16:	313c      	adds	r1, #60	; 0x3c
 801eb18:	db19      	blt.n	801eb4e <__ieee754_atan2f+0xe2>
 801eb1a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801eb1e:	f7ff f809 	bl	801db34 <fabsf>
 801eb22:	f7fe fef3 	bl	801d90c <atanf>
 801eb26:	eef0 7a40 	vmov.f32	s15, s0
 801eb2a:	2c01      	cmp	r4, #1
 801eb2c:	d012      	beq.n	801eb54 <__ieee754_atan2f+0xe8>
 801eb2e:	2c02      	cmp	r4, #2
 801eb30:	d017      	beq.n	801eb62 <__ieee754_atan2f+0xf6>
 801eb32:	2c00      	cmp	r4, #0
 801eb34:	d0ad      	beq.n	801ea92 <__ieee754_atan2f+0x26>
 801eb36:	ed9f 0a19 	vldr	s0, [pc, #100]	; 801eb9c <__ieee754_atan2f+0x130>
 801eb3a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801eb3e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 801eba0 <__ieee754_atan2f+0x134>
 801eb42:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801eb46:	e7a4      	b.n	801ea92 <__ieee754_atan2f+0x26>
 801eb48:	eddf 7a10 	vldr	s15, [pc, #64]	; 801eb8c <__ieee754_atan2f+0x120>
 801eb4c:	e7ed      	b.n	801eb2a <__ieee754_atan2f+0xbe>
 801eb4e:	eddf 7a15 	vldr	s15, [pc, #84]	; 801eba4 <__ieee754_atan2f+0x138>
 801eb52:	e7ea      	b.n	801eb2a <__ieee754_atan2f+0xbe>
 801eb54:	ee17 3a90 	vmov	r3, s15
 801eb58:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801eb5c:	ee07 3a90 	vmov	s15, r3
 801eb60:	e797      	b.n	801ea92 <__ieee754_atan2f+0x26>
 801eb62:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801eb9c <__ieee754_atan2f+0x130>
 801eb66:	ee77 7a80 	vadd.f32	s15, s15, s0
 801eb6a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 801eba0 <__ieee754_atan2f+0x134>
 801eb6e:	ee70 7a67 	vsub.f32	s15, s0, s15
 801eb72:	e78e      	b.n	801ea92 <__ieee754_atan2f+0x26>
 801eb74:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801eba0 <__ieee754_atan2f+0x134>
 801eb78:	e78b      	b.n	801ea92 <__ieee754_atan2f+0x26>
 801eb7a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801eba8 <__ieee754_atan2f+0x13c>
 801eb7e:	e788      	b.n	801ea92 <__ieee754_atan2f+0x26>
 801eb80:	eddf 7a08 	vldr	s15, [pc, #32]	; 801eba4 <__ieee754_atan2f+0x138>
 801eb84:	e785      	b.n	801ea92 <__ieee754_atan2f+0x26>
 801eb86:	bf00      	nop
 801eb88:	c0490fdb 	.word	0xc0490fdb
 801eb8c:	3fc90fdb 	.word	0x3fc90fdb
 801eb90:	bfc90fdb 	.word	0xbfc90fdb
 801eb94:	08020ef8 	.word	0x08020ef8
 801eb98:	08020f04 	.word	0x08020f04
 801eb9c:	33bbbd2e 	.word	0x33bbbd2e
 801eba0:	40490fdb 	.word	0x40490fdb
 801eba4:	00000000 	.word	0x00000000
 801eba8:	3f490fdb 	.word	0x3f490fdb

0801ebac <__ieee754_powf>:
 801ebac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ebb0:	ee10 5a90 	vmov	r5, s1
 801ebb4:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 801ebb8:	ed2d 8b02 	vpush	{d8}
 801ebbc:	eeb0 8a40 	vmov.f32	s16, s0
 801ebc0:	eef0 8a60 	vmov.f32	s17, s1
 801ebc4:	f000 8291 	beq.w	801f0ea <__ieee754_powf+0x53e>
 801ebc8:	ee10 8a10 	vmov	r8, s0
 801ebcc:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 801ebd0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801ebd4:	dc06      	bgt.n	801ebe4 <__ieee754_powf+0x38>
 801ebd6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801ebda:	dd0a      	ble.n	801ebf2 <__ieee754_powf+0x46>
 801ebdc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801ebe0:	f000 8283 	beq.w	801f0ea <__ieee754_powf+0x53e>
 801ebe4:	ecbd 8b02 	vpop	{d8}
 801ebe8:	48d8      	ldr	r0, [pc, #864]	; (801ef4c <__ieee754_powf+0x3a0>)
 801ebea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ebee:	f7fa bf89 	b.w	8019b04 <nanf>
 801ebf2:	f1b8 0f00 	cmp.w	r8, #0
 801ebf6:	da1f      	bge.n	801ec38 <__ieee754_powf+0x8c>
 801ebf8:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 801ebfc:	da2e      	bge.n	801ec5c <__ieee754_powf+0xb0>
 801ebfe:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801ec02:	f2c0 827b 	blt.w	801f0fc <__ieee754_powf+0x550>
 801ec06:	15fb      	asrs	r3, r7, #23
 801ec08:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801ec0c:	fa47 f603 	asr.w	r6, r7, r3
 801ec10:	fa06 f303 	lsl.w	r3, r6, r3
 801ec14:	42bb      	cmp	r3, r7
 801ec16:	f040 8271 	bne.w	801f0fc <__ieee754_powf+0x550>
 801ec1a:	f006 0601 	and.w	r6, r6, #1
 801ec1e:	f1c6 0602 	rsb	r6, r6, #2
 801ec22:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801ec26:	d120      	bne.n	801ec6a <__ieee754_powf+0xbe>
 801ec28:	2d00      	cmp	r5, #0
 801ec2a:	f280 8264 	bge.w	801f0f6 <__ieee754_powf+0x54a>
 801ec2e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801ec32:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801ec36:	e00d      	b.n	801ec54 <__ieee754_powf+0xa8>
 801ec38:	2600      	movs	r6, #0
 801ec3a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801ec3e:	d1f0      	bne.n	801ec22 <__ieee754_powf+0x76>
 801ec40:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801ec44:	f000 8251 	beq.w	801f0ea <__ieee754_powf+0x53e>
 801ec48:	dd0a      	ble.n	801ec60 <__ieee754_powf+0xb4>
 801ec4a:	2d00      	cmp	r5, #0
 801ec4c:	f280 8250 	bge.w	801f0f0 <__ieee754_powf+0x544>
 801ec50:	ed9f 0abf 	vldr	s0, [pc, #764]	; 801ef50 <__ieee754_powf+0x3a4>
 801ec54:	ecbd 8b02 	vpop	{d8}
 801ec58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ec5c:	2602      	movs	r6, #2
 801ec5e:	e7ec      	b.n	801ec3a <__ieee754_powf+0x8e>
 801ec60:	2d00      	cmp	r5, #0
 801ec62:	daf5      	bge.n	801ec50 <__ieee754_powf+0xa4>
 801ec64:	eeb1 0a68 	vneg.f32	s0, s17
 801ec68:	e7f4      	b.n	801ec54 <__ieee754_powf+0xa8>
 801ec6a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801ec6e:	d102      	bne.n	801ec76 <__ieee754_powf+0xca>
 801ec70:	ee28 0a08 	vmul.f32	s0, s16, s16
 801ec74:	e7ee      	b.n	801ec54 <__ieee754_powf+0xa8>
 801ec76:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 801ec7a:	eeb0 0a48 	vmov.f32	s0, s16
 801ec7e:	d108      	bne.n	801ec92 <__ieee754_powf+0xe6>
 801ec80:	f1b8 0f00 	cmp.w	r8, #0
 801ec84:	db05      	blt.n	801ec92 <__ieee754_powf+0xe6>
 801ec86:	ecbd 8b02 	vpop	{d8}
 801ec8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ec8e:	f000 bb89 	b.w	801f3a4 <__ieee754_sqrtf>
 801ec92:	f7fe ff4f 	bl	801db34 <fabsf>
 801ec96:	b124      	cbz	r4, 801eca2 <__ieee754_powf+0xf6>
 801ec98:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 801ec9c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801eca0:	d117      	bne.n	801ecd2 <__ieee754_powf+0x126>
 801eca2:	2d00      	cmp	r5, #0
 801eca4:	bfbc      	itt	lt
 801eca6:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801ecaa:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801ecae:	f1b8 0f00 	cmp.w	r8, #0
 801ecb2:	dacf      	bge.n	801ec54 <__ieee754_powf+0xa8>
 801ecb4:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 801ecb8:	ea54 0306 	orrs.w	r3, r4, r6
 801ecbc:	d104      	bne.n	801ecc8 <__ieee754_powf+0x11c>
 801ecbe:	ee70 7a40 	vsub.f32	s15, s0, s0
 801ecc2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801ecc6:	e7c5      	b.n	801ec54 <__ieee754_powf+0xa8>
 801ecc8:	2e01      	cmp	r6, #1
 801ecca:	d1c3      	bne.n	801ec54 <__ieee754_powf+0xa8>
 801eccc:	eeb1 0a40 	vneg.f32	s0, s0
 801ecd0:	e7c0      	b.n	801ec54 <__ieee754_powf+0xa8>
 801ecd2:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 801ecd6:	3801      	subs	r0, #1
 801ecd8:	ea56 0300 	orrs.w	r3, r6, r0
 801ecdc:	d104      	bne.n	801ece8 <__ieee754_powf+0x13c>
 801ecde:	ee38 8a48 	vsub.f32	s16, s16, s16
 801ece2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801ece6:	e7b5      	b.n	801ec54 <__ieee754_powf+0xa8>
 801ece8:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 801ecec:	dd6b      	ble.n	801edc6 <__ieee754_powf+0x21a>
 801ecee:	4b99      	ldr	r3, [pc, #612]	; (801ef54 <__ieee754_powf+0x3a8>)
 801ecf0:	429c      	cmp	r4, r3
 801ecf2:	dc06      	bgt.n	801ed02 <__ieee754_powf+0x156>
 801ecf4:	2d00      	cmp	r5, #0
 801ecf6:	daab      	bge.n	801ec50 <__ieee754_powf+0xa4>
 801ecf8:	ed9f 0a97 	vldr	s0, [pc, #604]	; 801ef58 <__ieee754_powf+0x3ac>
 801ecfc:	ee20 0a00 	vmul.f32	s0, s0, s0
 801ed00:	e7a8      	b.n	801ec54 <__ieee754_powf+0xa8>
 801ed02:	4b96      	ldr	r3, [pc, #600]	; (801ef5c <__ieee754_powf+0x3b0>)
 801ed04:	429c      	cmp	r4, r3
 801ed06:	dd02      	ble.n	801ed0e <__ieee754_powf+0x162>
 801ed08:	2d00      	cmp	r5, #0
 801ed0a:	dcf5      	bgt.n	801ecf8 <__ieee754_powf+0x14c>
 801ed0c:	e7a0      	b.n	801ec50 <__ieee754_powf+0xa4>
 801ed0e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801ed12:	ee30 0a67 	vsub.f32	s0, s0, s15
 801ed16:	eddf 6a92 	vldr	s13, [pc, #584]	; 801ef60 <__ieee754_powf+0x3b4>
 801ed1a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801ed1e:	eee0 6a67 	vfms.f32	s13, s0, s15
 801ed22:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801ed26:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801ed2a:	ee20 7a00 	vmul.f32	s14, s0, s0
 801ed2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ed32:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 801ef64 <__ieee754_powf+0x3b8>
 801ed36:	ee67 7a67 	vnmul.f32	s15, s14, s15
 801ed3a:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 801ef68 <__ieee754_powf+0x3bc>
 801ed3e:	eee0 7a07 	vfma.f32	s15, s0, s14
 801ed42:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801ef6c <__ieee754_powf+0x3c0>
 801ed46:	eef0 6a67 	vmov.f32	s13, s15
 801ed4a:	eee0 6a07 	vfma.f32	s13, s0, s14
 801ed4e:	ee16 3a90 	vmov	r3, s13
 801ed52:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801ed56:	f023 030f 	bic.w	r3, r3, #15
 801ed5a:	ee00 3a90 	vmov	s1, r3
 801ed5e:	eee0 0a47 	vfms.f32	s1, s0, s14
 801ed62:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801ed66:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 801ed6a:	f025 050f 	bic.w	r5, r5, #15
 801ed6e:	ee07 5a10 	vmov	s14, r5
 801ed72:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801ed76:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801ed7a:	ee07 3a90 	vmov	s15, r3
 801ed7e:	eee7 0a27 	vfma.f32	s1, s14, s15
 801ed82:	3e01      	subs	r6, #1
 801ed84:	ea56 0200 	orrs.w	r2, r6, r0
 801ed88:	ee07 5a10 	vmov	s14, r5
 801ed8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ed90:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801ed94:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801ed98:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801ed9c:	ee17 4a10 	vmov	r4, s14
 801eda0:	bf08      	it	eq
 801eda2:	eeb0 8a40 	vmoveq.f32	s16, s0
 801eda6:	2c00      	cmp	r4, #0
 801eda8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801edac:	f340 8184 	ble.w	801f0b8 <__ieee754_powf+0x50c>
 801edb0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801edb4:	f340 80fc 	ble.w	801efb0 <__ieee754_powf+0x404>
 801edb8:	eddf 7a67 	vldr	s15, [pc, #412]	; 801ef58 <__ieee754_powf+0x3ac>
 801edbc:	ee28 0a27 	vmul.f32	s0, s16, s15
 801edc0:	ee20 0a27 	vmul.f32	s0, s0, s15
 801edc4:	e746      	b.n	801ec54 <__ieee754_powf+0xa8>
 801edc6:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 801edca:	bf01      	itttt	eq
 801edcc:	eddf 7a68 	vldreq	s15, [pc, #416]	; 801ef70 <__ieee754_powf+0x3c4>
 801edd0:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801edd4:	f06f 0217 	mvneq.w	r2, #23
 801edd8:	ee17 4a90 	vmoveq	r4, s15
 801eddc:	ea4f 53e4 	mov.w	r3, r4, asr #23
 801ede0:	bf18      	it	ne
 801ede2:	2200      	movne	r2, #0
 801ede4:	3b7f      	subs	r3, #127	; 0x7f
 801ede6:	4413      	add	r3, r2
 801ede8:	4a62      	ldr	r2, [pc, #392]	; (801ef74 <__ieee754_powf+0x3c8>)
 801edea:	f3c4 0416 	ubfx	r4, r4, #0, #23
 801edee:	4294      	cmp	r4, r2
 801edf0:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 801edf4:	dd06      	ble.n	801ee04 <__ieee754_powf+0x258>
 801edf6:	4a60      	ldr	r2, [pc, #384]	; (801ef78 <__ieee754_powf+0x3cc>)
 801edf8:	4294      	cmp	r4, r2
 801edfa:	f340 80a4 	ble.w	801ef46 <__ieee754_powf+0x39a>
 801edfe:	3301      	adds	r3, #1
 801ee00:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801ee04:	2400      	movs	r4, #0
 801ee06:	4a5d      	ldr	r2, [pc, #372]	; (801ef7c <__ieee754_powf+0x3d0>)
 801ee08:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801ee0c:	ee07 1a90 	vmov	s15, r1
 801ee10:	ed92 7a00 	vldr	s14, [r2]
 801ee14:	4a5a      	ldr	r2, [pc, #360]	; (801ef80 <__ieee754_powf+0x3d4>)
 801ee16:	ee37 6a27 	vadd.f32	s12, s14, s15
 801ee1a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801ee1e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 801ee22:	1049      	asrs	r1, r1, #1
 801ee24:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801ee28:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801ee2c:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 801ee30:	ee37 5ac7 	vsub.f32	s10, s15, s14
 801ee34:	ee06 1a10 	vmov	s12, r1
 801ee38:	ee65 4a26 	vmul.f32	s9, s10, s13
 801ee3c:	ee36 7a47 	vsub.f32	s14, s12, s14
 801ee40:	ee14 7a90 	vmov	r7, s9
 801ee44:	4017      	ands	r7, r2
 801ee46:	ee05 7a90 	vmov	s11, r7
 801ee4a:	eea5 5ac6 	vfms.f32	s10, s11, s12
 801ee4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ee52:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 801ef84 <__ieee754_powf+0x3d8>
 801ee56:	eea5 5ae7 	vfms.f32	s10, s11, s15
 801ee5a:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801ee5e:	ee25 6a26 	vmul.f32	s12, s10, s13
 801ee62:	eddf 6a49 	vldr	s13, [pc, #292]	; 801ef88 <__ieee754_powf+0x3dc>
 801ee66:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801ee6a:	eddf 6a48 	vldr	s13, [pc, #288]	; 801ef8c <__ieee754_powf+0x3e0>
 801ee6e:	eee7 6a27 	vfma.f32	s13, s14, s15
 801ee72:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 801ef60 <__ieee754_powf+0x3b4>
 801ee76:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801ee7a:	eddf 6a45 	vldr	s13, [pc, #276]	; 801ef90 <__ieee754_powf+0x3e4>
 801ee7e:	eee7 6a27 	vfma.f32	s13, s14, s15
 801ee82:	ed9f 7a44 	vldr	s14, [pc, #272]	; 801ef94 <__ieee754_powf+0x3e8>
 801ee86:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801ee8a:	ee74 6aa5 	vadd.f32	s13, s9, s11
 801ee8e:	ee27 5aa7 	vmul.f32	s10, s15, s15
 801ee92:	ee66 6a86 	vmul.f32	s13, s13, s12
 801ee96:	eee5 6a07 	vfma.f32	s13, s10, s14
 801ee9a:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 801ee9e:	eef0 7a45 	vmov.f32	s15, s10
 801eea2:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801eea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801eeaa:	ee17 1a90 	vmov	r1, s15
 801eeae:	4011      	ands	r1, r2
 801eeb0:	ee07 1a90 	vmov	s15, r1
 801eeb4:	ee37 7ac5 	vsub.f32	s14, s15, s10
 801eeb8:	eea5 7ae5 	vfms.f32	s14, s11, s11
 801eebc:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801eec0:	ee27 7a24 	vmul.f32	s14, s14, s9
 801eec4:	eea6 7a27 	vfma.f32	s14, s12, s15
 801eec8:	eeb0 6a47 	vmov.f32	s12, s14
 801eecc:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801eed0:	ee16 1a10 	vmov	r1, s12
 801eed4:	4011      	ands	r1, r2
 801eed6:	ee06 1a90 	vmov	s13, r1
 801eeda:	eee5 6ae7 	vfms.f32	s13, s11, s15
 801eede:	eddf 7a2e 	vldr	s15, [pc, #184]	; 801ef98 <__ieee754_powf+0x3ec>
 801eee2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801ef9c <__ieee754_powf+0x3f0>
 801eee6:	ee37 7a66 	vsub.f32	s14, s14, s13
 801eeea:	ee06 1a10 	vmov	s12, r1
 801eeee:	ee27 7a27 	vmul.f32	s14, s14, s15
 801eef2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801efa0 <__ieee754_powf+0x3f4>
 801eef6:	492b      	ldr	r1, [pc, #172]	; (801efa4 <__ieee754_powf+0x3f8>)
 801eef8:	eea6 7a27 	vfma.f32	s14, s12, s15
 801eefc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801ef00:	edd1 7a00 	vldr	s15, [r1]
 801ef04:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ef08:	ee07 3a90 	vmov	s15, r3
 801ef0c:	4b26      	ldr	r3, [pc, #152]	; (801efa8 <__ieee754_powf+0x3fc>)
 801ef0e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801ef12:	eef0 7a47 	vmov.f32	s15, s14
 801ef16:	eee6 7a25 	vfma.f32	s15, s12, s11
 801ef1a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801ef1e:	edd4 0a00 	vldr	s1, [r4]
 801ef22:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801ef26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ef2a:	ee17 3a90 	vmov	r3, s15
 801ef2e:	4013      	ands	r3, r2
 801ef30:	ee07 3a90 	vmov	s15, r3
 801ef34:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801ef38:	ee76 6ae0 	vsub.f32	s13, s13, s1
 801ef3c:	eee6 6a65 	vfms.f32	s13, s12, s11
 801ef40:	ee77 7a66 	vsub.f32	s15, s14, s13
 801ef44:	e70f      	b.n	801ed66 <__ieee754_powf+0x1ba>
 801ef46:	2401      	movs	r4, #1
 801ef48:	e75d      	b.n	801ee06 <__ieee754_powf+0x25a>
 801ef4a:	bf00      	nop
 801ef4c:	08020e00 	.word	0x08020e00
 801ef50:	00000000 	.word	0x00000000
 801ef54:	3f7ffff7 	.word	0x3f7ffff7
 801ef58:	7149f2ca 	.word	0x7149f2ca
 801ef5c:	3f800007 	.word	0x3f800007
 801ef60:	3eaaaaab 	.word	0x3eaaaaab
 801ef64:	3fb8aa3b 	.word	0x3fb8aa3b
 801ef68:	36eca570 	.word	0x36eca570
 801ef6c:	3fb8aa00 	.word	0x3fb8aa00
 801ef70:	4b800000 	.word	0x4b800000
 801ef74:	001cc471 	.word	0x001cc471
 801ef78:	005db3d6 	.word	0x005db3d6
 801ef7c:	08020f10 	.word	0x08020f10
 801ef80:	fffff000 	.word	0xfffff000
 801ef84:	3e6c3255 	.word	0x3e6c3255
 801ef88:	3e53f142 	.word	0x3e53f142
 801ef8c:	3e8ba305 	.word	0x3e8ba305
 801ef90:	3edb6db7 	.word	0x3edb6db7
 801ef94:	3f19999a 	.word	0x3f19999a
 801ef98:	3f76384f 	.word	0x3f76384f
 801ef9c:	3f763800 	.word	0x3f763800
 801efa0:	369dc3a0 	.word	0x369dc3a0
 801efa4:	08020f20 	.word	0x08020f20
 801efa8:	08020f18 	.word	0x08020f18
 801efac:	3338aa3c 	.word	0x3338aa3c
 801efb0:	f040 8092 	bne.w	801f0d8 <__ieee754_powf+0x52c>
 801efb4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801efac <__ieee754_powf+0x400>
 801efb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 801efbc:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801efc0:	eef4 6ac7 	vcmpe.f32	s13, s14
 801efc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efc8:	f73f aef6 	bgt.w	801edb8 <__ieee754_powf+0x20c>
 801efcc:	15db      	asrs	r3, r3, #23
 801efce:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801efd2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801efd6:	4103      	asrs	r3, r0
 801efd8:	4423      	add	r3, r4
 801efda:	4949      	ldr	r1, [pc, #292]	; (801f100 <__ieee754_powf+0x554>)
 801efdc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801efe0:	3a7f      	subs	r2, #127	; 0x7f
 801efe2:	4111      	asrs	r1, r2
 801efe4:	ea23 0101 	bic.w	r1, r3, r1
 801efe8:	ee07 1a10 	vmov	s14, r1
 801efec:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801eff0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801eff4:	f1c2 0217 	rsb	r2, r2, #23
 801eff8:	4110      	asrs	r0, r2
 801effa:	2c00      	cmp	r4, #0
 801effc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f000:	bfb8      	it	lt
 801f002:	4240      	neglt	r0, r0
 801f004:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801f008:	eddf 6a3e 	vldr	s13, [pc, #248]	; 801f104 <__ieee754_powf+0x558>
 801f00c:	ee17 3a10 	vmov	r3, s14
 801f010:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801f014:	f023 030f 	bic.w	r3, r3, #15
 801f018:	ee07 3a10 	vmov	s14, r3
 801f01c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f020:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801f024:	eddf 7a38 	vldr	s15, [pc, #224]	; 801f108 <__ieee754_powf+0x55c>
 801f028:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f02c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801f030:	eddf 6a36 	vldr	s13, [pc, #216]	; 801f10c <__ieee754_powf+0x560>
 801f034:	eeb0 0a67 	vmov.f32	s0, s15
 801f038:	eea7 0a26 	vfma.f32	s0, s14, s13
 801f03c:	eeb0 6a40 	vmov.f32	s12, s0
 801f040:	eea7 6a66 	vfms.f32	s12, s14, s13
 801f044:	ee20 7a00 	vmul.f32	s14, s0, s0
 801f048:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801f04c:	eddf 6a30 	vldr	s13, [pc, #192]	; 801f110 <__ieee754_powf+0x564>
 801f050:	ed9f 6a30 	vldr	s12, [pc, #192]	; 801f114 <__ieee754_powf+0x568>
 801f054:	eea7 6a26 	vfma.f32	s12, s14, s13
 801f058:	eddf 6a2f 	vldr	s13, [pc, #188]	; 801f118 <__ieee754_powf+0x56c>
 801f05c:	eee6 6a07 	vfma.f32	s13, s12, s14
 801f060:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 801f11c <__ieee754_powf+0x570>
 801f064:	eea6 6a87 	vfma.f32	s12, s13, s14
 801f068:	eddf 6a2d 	vldr	s13, [pc, #180]	; 801f120 <__ieee754_powf+0x574>
 801f06c:	eee6 6a07 	vfma.f32	s13, s12, s14
 801f070:	eeb0 6a40 	vmov.f32	s12, s0
 801f074:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801f078:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801f07c:	eeb0 7a46 	vmov.f32	s14, s12
 801f080:	ee77 6a66 	vsub.f32	s13, s14, s13
 801f084:	ee20 6a06 	vmul.f32	s12, s0, s12
 801f088:	eee0 7a27 	vfma.f32	s15, s0, s15
 801f08c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801f090:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f094:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801f098:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801f09c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801f0a0:	ee10 3a10 	vmov	r3, s0
 801f0a4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801f0a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801f0ac:	da1a      	bge.n	801f0e4 <__ieee754_powf+0x538>
 801f0ae:	f7fa fd2f 	bl	8019b10 <scalbnf>
 801f0b2:	ee20 0a08 	vmul.f32	s0, s0, s16
 801f0b6:	e5cd      	b.n	801ec54 <__ieee754_powf+0xa8>
 801f0b8:	4a1a      	ldr	r2, [pc, #104]	; (801f124 <__ieee754_powf+0x578>)
 801f0ba:	4293      	cmp	r3, r2
 801f0bc:	dd02      	ble.n	801f0c4 <__ieee754_powf+0x518>
 801f0be:	eddf 7a1a 	vldr	s15, [pc, #104]	; 801f128 <__ieee754_powf+0x57c>
 801f0c2:	e67b      	b.n	801edbc <__ieee754_powf+0x210>
 801f0c4:	d108      	bne.n	801f0d8 <__ieee754_powf+0x52c>
 801f0c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 801f0ca:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801f0ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f0d2:	f6ff af7b 	blt.w	801efcc <__ieee754_powf+0x420>
 801f0d6:	e7f2      	b.n	801f0be <__ieee754_powf+0x512>
 801f0d8:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801f0dc:	f73f af76 	bgt.w	801efcc <__ieee754_powf+0x420>
 801f0e0:	2000      	movs	r0, #0
 801f0e2:	e78f      	b.n	801f004 <__ieee754_powf+0x458>
 801f0e4:	ee00 3a10 	vmov	s0, r3
 801f0e8:	e7e3      	b.n	801f0b2 <__ieee754_powf+0x506>
 801f0ea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801f0ee:	e5b1      	b.n	801ec54 <__ieee754_powf+0xa8>
 801f0f0:	eeb0 0a68 	vmov.f32	s0, s17
 801f0f4:	e5ae      	b.n	801ec54 <__ieee754_powf+0xa8>
 801f0f6:	eeb0 0a48 	vmov.f32	s0, s16
 801f0fa:	e5ab      	b.n	801ec54 <__ieee754_powf+0xa8>
 801f0fc:	2600      	movs	r6, #0
 801f0fe:	e590      	b.n	801ec22 <__ieee754_powf+0x76>
 801f100:	007fffff 	.word	0x007fffff
 801f104:	3f317218 	.word	0x3f317218
 801f108:	35bfbe8c 	.word	0x35bfbe8c
 801f10c:	3f317200 	.word	0x3f317200
 801f110:	3331bb4c 	.word	0x3331bb4c
 801f114:	b5ddea0e 	.word	0xb5ddea0e
 801f118:	388ab355 	.word	0x388ab355
 801f11c:	bb360b61 	.word	0xbb360b61
 801f120:	3e2aaaab 	.word	0x3e2aaaab
 801f124:	43160000 	.word	0x43160000
 801f128:	0da24260 	.word	0x0da24260

0801f12c <__ieee754_rem_pio2f>:
 801f12c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f12e:	ee10 6a10 	vmov	r6, s0
 801f132:	4b8e      	ldr	r3, [pc, #568]	; (801f36c <__ieee754_rem_pio2f+0x240>)
 801f134:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801f138:	429d      	cmp	r5, r3
 801f13a:	b087      	sub	sp, #28
 801f13c:	eef0 7a40 	vmov.f32	s15, s0
 801f140:	4604      	mov	r4, r0
 801f142:	dc05      	bgt.n	801f150 <__ieee754_rem_pio2f+0x24>
 801f144:	2300      	movs	r3, #0
 801f146:	ed80 0a00 	vstr	s0, [r0]
 801f14a:	6043      	str	r3, [r0, #4]
 801f14c:	2000      	movs	r0, #0
 801f14e:	e01a      	b.n	801f186 <__ieee754_rem_pio2f+0x5a>
 801f150:	4b87      	ldr	r3, [pc, #540]	; (801f370 <__ieee754_rem_pio2f+0x244>)
 801f152:	429d      	cmp	r5, r3
 801f154:	dc46      	bgt.n	801f1e4 <__ieee754_rem_pio2f+0xb8>
 801f156:	2e00      	cmp	r6, #0
 801f158:	ed9f 0a86 	vldr	s0, [pc, #536]	; 801f374 <__ieee754_rem_pio2f+0x248>
 801f15c:	4b86      	ldr	r3, [pc, #536]	; (801f378 <__ieee754_rem_pio2f+0x24c>)
 801f15e:	f025 050f 	bic.w	r5, r5, #15
 801f162:	dd1f      	ble.n	801f1a4 <__ieee754_rem_pio2f+0x78>
 801f164:	429d      	cmp	r5, r3
 801f166:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801f16a:	d00e      	beq.n	801f18a <__ieee754_rem_pio2f+0x5e>
 801f16c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801f37c <__ieee754_rem_pio2f+0x250>
 801f170:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801f174:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801f178:	ed80 0a00 	vstr	s0, [r0]
 801f17c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f180:	2001      	movs	r0, #1
 801f182:	edc4 7a01 	vstr	s15, [r4, #4]
 801f186:	b007      	add	sp, #28
 801f188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f18a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801f380 <__ieee754_rem_pio2f+0x254>
 801f18e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801f384 <__ieee754_rem_pio2f+0x258>
 801f192:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801f196:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801f19a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801f19e:	edc0 6a00 	vstr	s13, [r0]
 801f1a2:	e7eb      	b.n	801f17c <__ieee754_rem_pio2f+0x50>
 801f1a4:	429d      	cmp	r5, r3
 801f1a6:	ee77 7a80 	vadd.f32	s15, s15, s0
 801f1aa:	d00e      	beq.n	801f1ca <__ieee754_rem_pio2f+0x9e>
 801f1ac:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801f37c <__ieee754_rem_pio2f+0x250>
 801f1b0:	ee37 0a87 	vadd.f32	s0, s15, s14
 801f1b4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801f1b8:	ed80 0a00 	vstr	s0, [r0]
 801f1bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f1c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f1c4:	edc4 7a01 	vstr	s15, [r4, #4]
 801f1c8:	e7dd      	b.n	801f186 <__ieee754_rem_pio2f+0x5a>
 801f1ca:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801f380 <__ieee754_rem_pio2f+0x254>
 801f1ce:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 801f384 <__ieee754_rem_pio2f+0x258>
 801f1d2:	ee77 7a80 	vadd.f32	s15, s15, s0
 801f1d6:	ee77 6a87 	vadd.f32	s13, s15, s14
 801f1da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801f1de:	edc0 6a00 	vstr	s13, [r0]
 801f1e2:	e7eb      	b.n	801f1bc <__ieee754_rem_pio2f+0x90>
 801f1e4:	4b68      	ldr	r3, [pc, #416]	; (801f388 <__ieee754_rem_pio2f+0x25c>)
 801f1e6:	429d      	cmp	r5, r3
 801f1e8:	dc72      	bgt.n	801f2d0 <__ieee754_rem_pio2f+0x1a4>
 801f1ea:	f7fe fca3 	bl	801db34 <fabsf>
 801f1ee:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801f38c <__ieee754_rem_pio2f+0x260>
 801f1f2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f1f6:	eee0 7a07 	vfma.f32	s15, s0, s14
 801f1fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f1fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f202:	ee17 0a90 	vmov	r0, s15
 801f206:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801f374 <__ieee754_rem_pio2f+0x248>
 801f20a:	eea7 0a67 	vfms.f32	s0, s14, s15
 801f20e:	281f      	cmp	r0, #31
 801f210:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801f37c <__ieee754_rem_pio2f+0x250>
 801f214:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f218:	eeb1 6a47 	vneg.f32	s12, s14
 801f21c:	ee70 6a67 	vsub.f32	s13, s0, s15
 801f220:	ee16 2a90 	vmov	r2, s13
 801f224:	dc1c      	bgt.n	801f260 <__ieee754_rem_pio2f+0x134>
 801f226:	495a      	ldr	r1, [pc, #360]	; (801f390 <__ieee754_rem_pio2f+0x264>)
 801f228:	1e47      	subs	r7, r0, #1
 801f22a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801f22e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801f232:	428b      	cmp	r3, r1
 801f234:	d014      	beq.n	801f260 <__ieee754_rem_pio2f+0x134>
 801f236:	6022      	str	r2, [r4, #0]
 801f238:	ed94 7a00 	vldr	s14, [r4]
 801f23c:	ee30 0a47 	vsub.f32	s0, s0, s14
 801f240:	2e00      	cmp	r6, #0
 801f242:	ee30 0a67 	vsub.f32	s0, s0, s15
 801f246:	ed84 0a01 	vstr	s0, [r4, #4]
 801f24a:	da9c      	bge.n	801f186 <__ieee754_rem_pio2f+0x5a>
 801f24c:	eeb1 7a47 	vneg.f32	s14, s14
 801f250:	eeb1 0a40 	vneg.f32	s0, s0
 801f254:	ed84 7a00 	vstr	s14, [r4]
 801f258:	ed84 0a01 	vstr	s0, [r4, #4]
 801f25c:	4240      	negs	r0, r0
 801f25e:	e792      	b.n	801f186 <__ieee754_rem_pio2f+0x5a>
 801f260:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801f264:	15eb      	asrs	r3, r5, #23
 801f266:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801f26a:	2d08      	cmp	r5, #8
 801f26c:	dde3      	ble.n	801f236 <__ieee754_rem_pio2f+0x10a>
 801f26e:	eddf 7a44 	vldr	s15, [pc, #272]	; 801f380 <__ieee754_rem_pio2f+0x254>
 801f272:	eef0 6a40 	vmov.f32	s13, s0
 801f276:	eee6 6a27 	vfma.f32	s13, s12, s15
 801f27a:	ee30 0a66 	vsub.f32	s0, s0, s13
 801f27e:	eea6 0a27 	vfma.f32	s0, s12, s15
 801f282:	eddf 7a40 	vldr	s15, [pc, #256]	; 801f384 <__ieee754_rem_pio2f+0x258>
 801f286:	ee97 0a27 	vfnms.f32	s0, s14, s15
 801f28a:	ee76 5ac0 	vsub.f32	s11, s13, s0
 801f28e:	eef0 7a40 	vmov.f32	s15, s0
 801f292:	ee15 2a90 	vmov	r2, s11
 801f296:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801f29a:	1a5b      	subs	r3, r3, r1
 801f29c:	2b19      	cmp	r3, #25
 801f29e:	dc04      	bgt.n	801f2aa <__ieee754_rem_pio2f+0x17e>
 801f2a0:	edc4 5a00 	vstr	s11, [r4]
 801f2a4:	eeb0 0a66 	vmov.f32	s0, s13
 801f2a8:	e7c6      	b.n	801f238 <__ieee754_rem_pio2f+0x10c>
 801f2aa:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801f394 <__ieee754_rem_pio2f+0x268>
 801f2ae:	eeb0 0a66 	vmov.f32	s0, s13
 801f2b2:	eea6 0a25 	vfma.f32	s0, s12, s11
 801f2b6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801f2ba:	eddf 6a37 	vldr	s13, [pc, #220]	; 801f398 <__ieee754_rem_pio2f+0x26c>
 801f2be:	eee6 7a25 	vfma.f32	s15, s12, s11
 801f2c2:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801f2c6:	ee30 7a67 	vsub.f32	s14, s0, s15
 801f2ca:	ed84 7a00 	vstr	s14, [r4]
 801f2ce:	e7b3      	b.n	801f238 <__ieee754_rem_pio2f+0x10c>
 801f2d0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801f2d4:	db06      	blt.n	801f2e4 <__ieee754_rem_pio2f+0x1b8>
 801f2d6:	ee70 7a40 	vsub.f32	s15, s0, s0
 801f2da:	edc0 7a01 	vstr	s15, [r0, #4]
 801f2de:	edc0 7a00 	vstr	s15, [r0]
 801f2e2:	e733      	b.n	801f14c <__ieee754_rem_pio2f+0x20>
 801f2e4:	15ea      	asrs	r2, r5, #23
 801f2e6:	3a86      	subs	r2, #134	; 0x86
 801f2e8:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801f2ec:	ee07 3a90 	vmov	s15, r3
 801f2f0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801f2f4:	eddf 6a29 	vldr	s13, [pc, #164]	; 801f39c <__ieee754_rem_pio2f+0x270>
 801f2f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f2fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f300:	ed8d 7a03 	vstr	s14, [sp, #12]
 801f304:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f308:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801f30c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f310:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f314:	ed8d 7a04 	vstr	s14, [sp, #16]
 801f318:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f31c:	eef5 7a40 	vcmp.f32	s15, #0.0
 801f320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f324:	edcd 7a05 	vstr	s15, [sp, #20]
 801f328:	d11e      	bne.n	801f368 <__ieee754_rem_pio2f+0x23c>
 801f32a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801f32e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f332:	bf14      	ite	ne
 801f334:	2302      	movne	r3, #2
 801f336:	2301      	moveq	r3, #1
 801f338:	4919      	ldr	r1, [pc, #100]	; (801f3a0 <__ieee754_rem_pio2f+0x274>)
 801f33a:	9101      	str	r1, [sp, #4]
 801f33c:	2102      	movs	r1, #2
 801f33e:	9100      	str	r1, [sp, #0]
 801f340:	a803      	add	r0, sp, #12
 801f342:	4621      	mov	r1, r4
 801f344:	f000 f892 	bl	801f46c <__kernel_rem_pio2f>
 801f348:	2e00      	cmp	r6, #0
 801f34a:	f6bf af1c 	bge.w	801f186 <__ieee754_rem_pio2f+0x5a>
 801f34e:	edd4 7a00 	vldr	s15, [r4]
 801f352:	eef1 7a67 	vneg.f32	s15, s15
 801f356:	edc4 7a00 	vstr	s15, [r4]
 801f35a:	edd4 7a01 	vldr	s15, [r4, #4]
 801f35e:	eef1 7a67 	vneg.f32	s15, s15
 801f362:	edc4 7a01 	vstr	s15, [r4, #4]
 801f366:	e779      	b.n	801f25c <__ieee754_rem_pio2f+0x130>
 801f368:	2303      	movs	r3, #3
 801f36a:	e7e5      	b.n	801f338 <__ieee754_rem_pio2f+0x20c>
 801f36c:	3f490fd8 	.word	0x3f490fd8
 801f370:	4016cbe3 	.word	0x4016cbe3
 801f374:	3fc90f80 	.word	0x3fc90f80
 801f378:	3fc90fd0 	.word	0x3fc90fd0
 801f37c:	37354443 	.word	0x37354443
 801f380:	37354400 	.word	0x37354400
 801f384:	2e85a308 	.word	0x2e85a308
 801f388:	43490f80 	.word	0x43490f80
 801f38c:	3f22f984 	.word	0x3f22f984
 801f390:	08020f28 	.word	0x08020f28
 801f394:	2e85a300 	.word	0x2e85a300
 801f398:	248d3132 	.word	0x248d3132
 801f39c:	43800000 	.word	0x43800000
 801f3a0:	08020fa8 	.word	0x08020fa8

0801f3a4 <__ieee754_sqrtf>:
 801f3a4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801f3a8:	4770      	bx	lr
	...

0801f3ac <__kernel_cosf>:
 801f3ac:	ee10 3a10 	vmov	r3, s0
 801f3b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f3b4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801f3b8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801f3bc:	da05      	bge.n	801f3ca <__kernel_cosf+0x1e>
 801f3be:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801f3c2:	ee17 2a90 	vmov	r2, s15
 801f3c6:	2a00      	cmp	r2, #0
 801f3c8:	d03d      	beq.n	801f446 <__kernel_cosf+0x9a>
 801f3ca:	ee60 5a00 	vmul.f32	s11, s0, s0
 801f3ce:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801f44c <__kernel_cosf+0xa0>
 801f3d2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801f450 <__kernel_cosf+0xa4>
 801f3d6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 801f454 <__kernel_cosf+0xa8>
 801f3da:	4a1f      	ldr	r2, [pc, #124]	; (801f458 <__kernel_cosf+0xac>)
 801f3dc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801f3e0:	4293      	cmp	r3, r2
 801f3e2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801f45c <__kernel_cosf+0xb0>
 801f3e6:	eee7 7a25 	vfma.f32	s15, s14, s11
 801f3ea:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 801f460 <__kernel_cosf+0xb4>
 801f3ee:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801f3f2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801f464 <__kernel_cosf+0xb8>
 801f3f6:	eee7 7a25 	vfma.f32	s15, s14, s11
 801f3fa:	eeb0 7a66 	vmov.f32	s14, s13
 801f3fe:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801f402:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801f406:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801f40a:	ee67 6a25 	vmul.f32	s13, s14, s11
 801f40e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 801f412:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801f416:	dc04      	bgt.n	801f422 <__kernel_cosf+0x76>
 801f418:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801f41c:	ee36 0a47 	vsub.f32	s0, s12, s14
 801f420:	4770      	bx	lr
 801f422:	4a11      	ldr	r2, [pc, #68]	; (801f468 <__kernel_cosf+0xbc>)
 801f424:	4293      	cmp	r3, r2
 801f426:	bfda      	itte	le
 801f428:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801f42c:	ee06 3a90 	vmovle	s13, r3
 801f430:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 801f434:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801f438:	ee36 0a66 	vsub.f32	s0, s12, s13
 801f43c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f440:	ee30 0a67 	vsub.f32	s0, s0, s15
 801f444:	4770      	bx	lr
 801f446:	eeb0 0a46 	vmov.f32	s0, s12
 801f44a:	4770      	bx	lr
 801f44c:	ad47d74e 	.word	0xad47d74e
 801f450:	310f74f6 	.word	0x310f74f6
 801f454:	3d2aaaab 	.word	0x3d2aaaab
 801f458:	3e999999 	.word	0x3e999999
 801f45c:	b493f27c 	.word	0xb493f27c
 801f460:	37d00d01 	.word	0x37d00d01
 801f464:	bab60b61 	.word	0xbab60b61
 801f468:	3f480000 	.word	0x3f480000

0801f46c <__kernel_rem_pio2f>:
 801f46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f470:	ed2d 8b04 	vpush	{d8-d9}
 801f474:	b0d7      	sub	sp, #348	; 0x15c
 801f476:	4616      	mov	r6, r2
 801f478:	4698      	mov	r8, r3
 801f47a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801f47c:	4bbb      	ldr	r3, [pc, #748]	; (801f76c <__kernel_rem_pio2f+0x300>)
 801f47e:	9001      	str	r0, [sp, #4]
 801f480:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801f484:	1d33      	adds	r3, r6, #4
 801f486:	460d      	mov	r5, r1
 801f488:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 801f48c:	db29      	blt.n	801f4e2 <__kernel_rem_pio2f+0x76>
 801f48e:	1ef1      	subs	r1, r6, #3
 801f490:	bf48      	it	mi
 801f492:	1d31      	addmi	r1, r6, #4
 801f494:	10c9      	asrs	r1, r1, #3
 801f496:	1c4c      	adds	r4, r1, #1
 801f498:	00e3      	lsls	r3, r4, #3
 801f49a:	9302      	str	r3, [sp, #8]
 801f49c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801f49e:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 801f77c <__kernel_rem_pio2f+0x310>
 801f4a2:	eba1 0009 	sub.w	r0, r1, r9
 801f4a6:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 801f4aa:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 801f4ae:	eb07 0c09 	add.w	ip, r7, r9
 801f4b2:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 801f4b6:	2300      	movs	r3, #0
 801f4b8:	4563      	cmp	r3, ip
 801f4ba:	dd14      	ble.n	801f4e6 <__kernel_rem_pio2f+0x7a>
 801f4bc:	ab1a      	add	r3, sp, #104	; 0x68
 801f4be:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 801f4c2:	46cc      	mov	ip, r9
 801f4c4:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 801f4c8:	f1c8 0b01 	rsb	fp, r8, #1
 801f4cc:	eb0b 020c 	add.w	r2, fp, ip
 801f4d0:	4297      	cmp	r7, r2
 801f4d2:	db27      	blt.n	801f524 <__kernel_rem_pio2f+0xb8>
 801f4d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 801f4d8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801f77c <__kernel_rem_pio2f+0x310>
 801f4dc:	4618      	mov	r0, r3
 801f4de:	2200      	movs	r2, #0
 801f4e0:	e016      	b.n	801f510 <__kernel_rem_pio2f+0xa4>
 801f4e2:	2100      	movs	r1, #0
 801f4e4:	e7d7      	b.n	801f496 <__kernel_rem_pio2f+0x2a>
 801f4e6:	42d8      	cmn	r0, r3
 801f4e8:	bf5d      	ittte	pl
 801f4ea:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 801f4ee:	ee07 2a90 	vmovpl	s15, r2
 801f4f2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801f4f6:	eef0 7a47 	vmovmi.f32	s15, s14
 801f4fa:	ecea 7a01 	vstmia	sl!, {s15}
 801f4fe:	3301      	adds	r3, #1
 801f500:	e7da      	b.n	801f4b8 <__kernel_rem_pio2f+0x4c>
 801f502:	ecfe 6a01 	vldmia	lr!, {s13}
 801f506:	ed90 7a00 	vldr	s14, [r0]
 801f50a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f50e:	3201      	adds	r2, #1
 801f510:	454a      	cmp	r2, r9
 801f512:	f1a0 0004 	sub.w	r0, r0, #4
 801f516:	ddf4      	ble.n	801f502 <__kernel_rem_pio2f+0x96>
 801f518:	ecea 7a01 	vstmia	sl!, {s15}
 801f51c:	3304      	adds	r3, #4
 801f51e:	f10c 0c01 	add.w	ip, ip, #1
 801f522:	e7d3      	b.n	801f4cc <__kernel_rem_pio2f+0x60>
 801f524:	ab06      	add	r3, sp, #24
 801f526:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 801f52a:	9304      	str	r3, [sp, #16]
 801f52c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801f52e:	eddf 8a92 	vldr	s17, [pc, #584]	; 801f778 <__kernel_rem_pio2f+0x30c>
 801f532:	ed9f 9a90 	vldr	s18, [pc, #576]	; 801f774 <__kernel_rem_pio2f+0x308>
 801f536:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801f53a:	9303      	str	r3, [sp, #12]
 801f53c:	46ba      	mov	sl, r7
 801f53e:	ab56      	add	r3, sp, #344	; 0x158
 801f540:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801f544:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 801f548:	ab06      	add	r3, sp, #24
 801f54a:	4618      	mov	r0, r3
 801f54c:	4652      	mov	r2, sl
 801f54e:	2a00      	cmp	r2, #0
 801f550:	dc51      	bgt.n	801f5f6 <__kernel_rem_pio2f+0x18a>
 801f552:	4620      	mov	r0, r4
 801f554:	9305      	str	r3, [sp, #20]
 801f556:	f7fa fadb 	bl	8019b10 <scalbnf>
 801f55a:	eeb0 8a40 	vmov.f32	s16, s0
 801f55e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801f562:	ee28 0a00 	vmul.f32	s0, s16, s0
 801f566:	f000 fb71 	bl	801fc4c <floorf>
 801f56a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801f56e:	eea0 8a67 	vfms.f32	s16, s0, s15
 801f572:	2c00      	cmp	r4, #0
 801f574:	9b05      	ldr	r3, [sp, #20]
 801f576:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801f57a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801f57e:	edcd 7a00 	vstr	s15, [sp]
 801f582:	ee38 8a40 	vsub.f32	s16, s16, s0
 801f586:	dd4b      	ble.n	801f620 <__kernel_rem_pio2f+0x1b4>
 801f588:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 801f58c:	aa06      	add	r2, sp, #24
 801f58e:	f1c4 0e08 	rsb	lr, r4, #8
 801f592:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801f596:	ee17 1a90 	vmov	r1, s15
 801f59a:	fa42 f00e 	asr.w	r0, r2, lr
 801f59e:	4401      	add	r1, r0
 801f5a0:	9100      	str	r1, [sp, #0]
 801f5a2:	fa00 f00e 	lsl.w	r0, r0, lr
 801f5a6:	a906      	add	r1, sp, #24
 801f5a8:	1a12      	subs	r2, r2, r0
 801f5aa:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801f5ae:	f1c4 0007 	rsb	r0, r4, #7
 801f5b2:	fa42 fb00 	asr.w	fp, r2, r0
 801f5b6:	f1bb 0f00 	cmp.w	fp, #0
 801f5ba:	dd43      	ble.n	801f644 <__kernel_rem_pio2f+0x1d8>
 801f5bc:	9a00      	ldr	r2, [sp, #0]
 801f5be:	f04f 0e00 	mov.w	lr, #0
 801f5c2:	3201      	adds	r2, #1
 801f5c4:	9200      	str	r2, [sp, #0]
 801f5c6:	4670      	mov	r0, lr
 801f5c8:	45f2      	cmp	sl, lr
 801f5ca:	dc6c      	bgt.n	801f6a6 <__kernel_rem_pio2f+0x23a>
 801f5cc:	2c00      	cmp	r4, #0
 801f5ce:	dd04      	ble.n	801f5da <__kernel_rem_pio2f+0x16e>
 801f5d0:	2c01      	cmp	r4, #1
 801f5d2:	d079      	beq.n	801f6c8 <__kernel_rem_pio2f+0x25c>
 801f5d4:	2c02      	cmp	r4, #2
 801f5d6:	f000 8082 	beq.w	801f6de <__kernel_rem_pio2f+0x272>
 801f5da:	f1bb 0f02 	cmp.w	fp, #2
 801f5de:	d131      	bne.n	801f644 <__kernel_rem_pio2f+0x1d8>
 801f5e0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801f5e4:	ee30 8a48 	vsub.f32	s16, s0, s16
 801f5e8:	b360      	cbz	r0, 801f644 <__kernel_rem_pio2f+0x1d8>
 801f5ea:	4620      	mov	r0, r4
 801f5ec:	f7fa fa90 	bl	8019b10 <scalbnf>
 801f5f0:	ee38 8a40 	vsub.f32	s16, s16, s0
 801f5f4:	e026      	b.n	801f644 <__kernel_rem_pio2f+0x1d8>
 801f5f6:	ee60 7a28 	vmul.f32	s15, s0, s17
 801f5fa:	3a01      	subs	r2, #1
 801f5fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f600:	a942      	add	r1, sp, #264	; 0x108
 801f602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f606:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801f60a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801f60e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801f612:	eca0 0a01 	vstmia	r0!, {s0}
 801f616:	ed9c 0a00 	vldr	s0, [ip]
 801f61a:	ee37 0a80 	vadd.f32	s0, s15, s0
 801f61e:	e796      	b.n	801f54e <__kernel_rem_pio2f+0xe2>
 801f620:	d107      	bne.n	801f632 <__kernel_rem_pio2f+0x1c6>
 801f622:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 801f626:	a906      	add	r1, sp, #24
 801f628:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801f62c:	ea4f 2b22 	mov.w	fp, r2, asr #8
 801f630:	e7c1      	b.n	801f5b6 <__kernel_rem_pio2f+0x14a>
 801f632:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f636:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801f63a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f63e:	da2f      	bge.n	801f6a0 <__kernel_rem_pio2f+0x234>
 801f640:	f04f 0b00 	mov.w	fp, #0
 801f644:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801f648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f64c:	f040 8098 	bne.w	801f780 <__kernel_rem_pio2f+0x314>
 801f650:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801f654:	469c      	mov	ip, r3
 801f656:	2200      	movs	r2, #0
 801f658:	45bc      	cmp	ip, r7
 801f65a:	da48      	bge.n	801f6ee <__kernel_rem_pio2f+0x282>
 801f65c:	2a00      	cmp	r2, #0
 801f65e:	d05f      	beq.n	801f720 <__kernel_rem_pio2f+0x2b4>
 801f660:	aa06      	add	r2, sp, #24
 801f662:	3c08      	subs	r4, #8
 801f664:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801f668:	2900      	cmp	r1, #0
 801f66a:	d07d      	beq.n	801f768 <__kernel_rem_pio2f+0x2fc>
 801f66c:	4620      	mov	r0, r4
 801f66e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801f672:	9301      	str	r3, [sp, #4]
 801f674:	f7fa fa4c 	bl	8019b10 <scalbnf>
 801f678:	9b01      	ldr	r3, [sp, #4]
 801f67a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 801f778 <__kernel_rem_pio2f+0x30c>
 801f67e:	4619      	mov	r1, r3
 801f680:	2900      	cmp	r1, #0
 801f682:	f280 80af 	bge.w	801f7e4 <__kernel_rem_pio2f+0x378>
 801f686:	4618      	mov	r0, r3
 801f688:	2400      	movs	r4, #0
 801f68a:	2800      	cmp	r0, #0
 801f68c:	f2c0 80d0 	blt.w	801f830 <__kernel_rem_pio2f+0x3c4>
 801f690:	a942      	add	r1, sp, #264	; 0x108
 801f692:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 801f696:	4a36      	ldr	r2, [pc, #216]	; (801f770 <__kernel_rem_pio2f+0x304>)
 801f698:	eddf 7a38 	vldr	s15, [pc, #224]	; 801f77c <__kernel_rem_pio2f+0x310>
 801f69c:	2100      	movs	r1, #0
 801f69e:	e0bb      	b.n	801f818 <__kernel_rem_pio2f+0x3ac>
 801f6a0:	f04f 0b02 	mov.w	fp, #2
 801f6a4:	e78a      	b.n	801f5bc <__kernel_rem_pio2f+0x150>
 801f6a6:	681a      	ldr	r2, [r3, #0]
 801f6a8:	b948      	cbnz	r0, 801f6be <__kernel_rem_pio2f+0x252>
 801f6aa:	b11a      	cbz	r2, 801f6b4 <__kernel_rem_pio2f+0x248>
 801f6ac:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801f6b0:	601a      	str	r2, [r3, #0]
 801f6b2:	2201      	movs	r2, #1
 801f6b4:	f10e 0e01 	add.w	lr, lr, #1
 801f6b8:	3304      	adds	r3, #4
 801f6ba:	4610      	mov	r0, r2
 801f6bc:	e784      	b.n	801f5c8 <__kernel_rem_pio2f+0x15c>
 801f6be:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801f6c2:	601a      	str	r2, [r3, #0]
 801f6c4:	4602      	mov	r2, r0
 801f6c6:	e7f5      	b.n	801f6b4 <__kernel_rem_pio2f+0x248>
 801f6c8:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 801f6cc:	ab06      	add	r3, sp, #24
 801f6ce:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801f6d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801f6d6:	aa06      	add	r2, sp, #24
 801f6d8:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 801f6dc:	e77d      	b.n	801f5da <__kernel_rem_pio2f+0x16e>
 801f6de:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 801f6e2:	ab06      	add	r3, sp, #24
 801f6e4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801f6e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f6ec:	e7f3      	b.n	801f6d6 <__kernel_rem_pio2f+0x26a>
 801f6ee:	a906      	add	r1, sp, #24
 801f6f0:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 801f6f4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801f6f8:	4302      	orrs	r2, r0
 801f6fa:	e7ad      	b.n	801f658 <__kernel_rem_pio2f+0x1ec>
 801f6fc:	3001      	adds	r0, #1
 801f6fe:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801f702:	2a00      	cmp	r2, #0
 801f704:	d0fa      	beq.n	801f6fc <__kernel_rem_pio2f+0x290>
 801f706:	a91a      	add	r1, sp, #104	; 0x68
 801f708:	eb0a 0208 	add.w	r2, sl, r8
 801f70c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801f710:	f10a 0301 	add.w	r3, sl, #1
 801f714:	eb0a 0100 	add.w	r1, sl, r0
 801f718:	4299      	cmp	r1, r3
 801f71a:	da04      	bge.n	801f726 <__kernel_rem_pio2f+0x2ba>
 801f71c:	468a      	mov	sl, r1
 801f71e:	e70e      	b.n	801f53e <__kernel_rem_pio2f+0xd2>
 801f720:	9b04      	ldr	r3, [sp, #16]
 801f722:	2001      	movs	r0, #1
 801f724:	e7eb      	b.n	801f6fe <__kernel_rem_pio2f+0x292>
 801f726:	9803      	ldr	r0, [sp, #12]
 801f728:	f8dd c004 	ldr.w	ip, [sp, #4]
 801f72c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801f730:	9000      	str	r0, [sp, #0]
 801f732:	ee07 0a90 	vmov	s15, r0
 801f736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f73a:	2000      	movs	r0, #0
 801f73c:	ece2 7a01 	vstmia	r2!, {s15}
 801f740:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801f77c <__kernel_rem_pio2f+0x310>
 801f744:	4696      	mov	lr, r2
 801f746:	4548      	cmp	r0, r9
 801f748:	dd06      	ble.n	801f758 <__kernel_rem_pio2f+0x2ec>
 801f74a:	a842      	add	r0, sp, #264	; 0x108
 801f74c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801f750:	edc0 7a00 	vstr	s15, [r0]
 801f754:	3301      	adds	r3, #1
 801f756:	e7df      	b.n	801f718 <__kernel_rem_pio2f+0x2ac>
 801f758:	ecfc 6a01 	vldmia	ip!, {s13}
 801f75c:	ed3e 7a01 	vldmdb	lr!, {s14}
 801f760:	3001      	adds	r0, #1
 801f762:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f766:	e7ee      	b.n	801f746 <__kernel_rem_pio2f+0x2da>
 801f768:	3b01      	subs	r3, #1
 801f76a:	e779      	b.n	801f660 <__kernel_rem_pio2f+0x1f4>
 801f76c:	080212ec 	.word	0x080212ec
 801f770:	080212c0 	.word	0x080212c0
 801f774:	43800000 	.word	0x43800000
 801f778:	3b800000 	.word	0x3b800000
 801f77c:	00000000 	.word	0x00000000
 801f780:	9b02      	ldr	r3, [sp, #8]
 801f782:	eeb0 0a48 	vmov.f32	s0, s16
 801f786:	1b98      	subs	r0, r3, r6
 801f788:	f7fa f9c2 	bl	8019b10 <scalbnf>
 801f78c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801f774 <__kernel_rem_pio2f+0x308>
 801f790:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801f794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f798:	db1b      	blt.n	801f7d2 <__kernel_rem_pio2f+0x366>
 801f79a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801f778 <__kernel_rem_pio2f+0x30c>
 801f79e:	ee60 7a27 	vmul.f32	s15, s0, s15
 801f7a2:	aa06      	add	r2, sp, #24
 801f7a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f7a8:	a906      	add	r1, sp, #24
 801f7aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f7ae:	3408      	adds	r4, #8
 801f7b0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801f7b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f7b8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801f7bc:	ee10 3a10 	vmov	r3, s0
 801f7c0:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801f7c4:	ee17 2a90 	vmov	r2, s15
 801f7c8:	f10a 0301 	add.w	r3, sl, #1
 801f7cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801f7d0:	e74c      	b.n	801f66c <__kernel_rem_pio2f+0x200>
 801f7d2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801f7d6:	aa06      	add	r2, sp, #24
 801f7d8:	ee10 3a10 	vmov	r3, s0
 801f7dc:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801f7e0:	4653      	mov	r3, sl
 801f7e2:	e743      	b.n	801f66c <__kernel_rem_pio2f+0x200>
 801f7e4:	aa42      	add	r2, sp, #264	; 0x108
 801f7e6:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801f7ea:	aa06      	add	r2, sp, #24
 801f7ec:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801f7f0:	9201      	str	r2, [sp, #4]
 801f7f2:	ee07 2a90 	vmov	s15, r2
 801f7f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f7fa:	3901      	subs	r1, #1
 801f7fc:	ee67 7a80 	vmul.f32	s15, s15, s0
 801f800:	ee20 0a07 	vmul.f32	s0, s0, s14
 801f804:	edc0 7a00 	vstr	s15, [r0]
 801f808:	e73a      	b.n	801f680 <__kernel_rem_pio2f+0x214>
 801f80a:	ecf2 6a01 	vldmia	r2!, {s13}
 801f80e:	ecb6 7a01 	vldmia	r6!, {s14}
 801f812:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f816:	3101      	adds	r1, #1
 801f818:	42b9      	cmp	r1, r7
 801f81a:	dc01      	bgt.n	801f820 <__kernel_rem_pio2f+0x3b4>
 801f81c:	428c      	cmp	r4, r1
 801f81e:	daf4      	bge.n	801f80a <__kernel_rem_pio2f+0x39e>
 801f820:	aa56      	add	r2, sp, #344	; 0x158
 801f822:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 801f826:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801f82a:	3801      	subs	r0, #1
 801f82c:	3401      	adds	r4, #1
 801f82e:	e72c      	b.n	801f68a <__kernel_rem_pio2f+0x21e>
 801f830:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801f832:	2a02      	cmp	r2, #2
 801f834:	dc0a      	bgt.n	801f84c <__kernel_rem_pio2f+0x3e0>
 801f836:	2a00      	cmp	r2, #0
 801f838:	dc61      	bgt.n	801f8fe <__kernel_rem_pio2f+0x492>
 801f83a:	d03c      	beq.n	801f8b6 <__kernel_rem_pio2f+0x44a>
 801f83c:	9b00      	ldr	r3, [sp, #0]
 801f83e:	f003 0007 	and.w	r0, r3, #7
 801f842:	b057      	add	sp, #348	; 0x15c
 801f844:	ecbd 8b04 	vpop	{d8-d9}
 801f848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f84c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801f84e:	2a03      	cmp	r2, #3
 801f850:	d1f4      	bne.n	801f83c <__kernel_rem_pio2f+0x3d0>
 801f852:	aa2e      	add	r2, sp, #184	; 0xb8
 801f854:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801f858:	4608      	mov	r0, r1
 801f85a:	461c      	mov	r4, r3
 801f85c:	2c00      	cmp	r4, #0
 801f85e:	f1a0 0004 	sub.w	r0, r0, #4
 801f862:	dc59      	bgt.n	801f918 <__kernel_rem_pio2f+0x4ac>
 801f864:	4618      	mov	r0, r3
 801f866:	2801      	cmp	r0, #1
 801f868:	f1a1 0104 	sub.w	r1, r1, #4
 801f86c:	dc64      	bgt.n	801f938 <__kernel_rem_pio2f+0x4cc>
 801f86e:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 801f77c <__kernel_rem_pio2f+0x310>
 801f872:	2b01      	cmp	r3, #1
 801f874:	dc70      	bgt.n	801f958 <__kernel_rem_pio2f+0x4ec>
 801f876:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 801f87a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801f87e:	f1bb 0f00 	cmp.w	fp, #0
 801f882:	d172      	bne.n	801f96a <__kernel_rem_pio2f+0x4fe>
 801f884:	edc5 6a00 	vstr	s13, [r5]
 801f888:	ed85 7a01 	vstr	s14, [r5, #4]
 801f88c:	edc5 7a02 	vstr	s15, [r5, #8]
 801f890:	e7d4      	b.n	801f83c <__kernel_rem_pio2f+0x3d0>
 801f892:	aa2e      	add	r2, sp, #184	; 0xb8
 801f894:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801f898:	ed91 7a00 	vldr	s14, [r1]
 801f89c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f8a0:	3b01      	subs	r3, #1
 801f8a2:	2b00      	cmp	r3, #0
 801f8a4:	daf5      	bge.n	801f892 <__kernel_rem_pio2f+0x426>
 801f8a6:	f1bb 0f00 	cmp.w	fp, #0
 801f8aa:	d001      	beq.n	801f8b0 <__kernel_rem_pio2f+0x444>
 801f8ac:	eef1 7a67 	vneg.f32	s15, s15
 801f8b0:	edc5 7a00 	vstr	s15, [r5]
 801f8b4:	e7c2      	b.n	801f83c <__kernel_rem_pio2f+0x3d0>
 801f8b6:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 801f77c <__kernel_rem_pio2f+0x310>
 801f8ba:	e7f2      	b.n	801f8a2 <__kernel_rem_pio2f+0x436>
 801f8bc:	aa2e      	add	r2, sp, #184	; 0xb8
 801f8be:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801f8c2:	edd0 7a00 	vldr	s15, [r0]
 801f8c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f8ca:	3901      	subs	r1, #1
 801f8cc:	2900      	cmp	r1, #0
 801f8ce:	daf5      	bge.n	801f8bc <__kernel_rem_pio2f+0x450>
 801f8d0:	f1bb 0f00 	cmp.w	fp, #0
 801f8d4:	d017      	beq.n	801f906 <__kernel_rem_pio2f+0x49a>
 801f8d6:	eef1 7a47 	vneg.f32	s15, s14
 801f8da:	edc5 7a00 	vstr	s15, [r5]
 801f8de:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 801f8e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f8e6:	a82f      	add	r0, sp, #188	; 0xbc
 801f8e8:	2101      	movs	r1, #1
 801f8ea:	428b      	cmp	r3, r1
 801f8ec:	da0e      	bge.n	801f90c <__kernel_rem_pio2f+0x4a0>
 801f8ee:	f1bb 0f00 	cmp.w	fp, #0
 801f8f2:	d001      	beq.n	801f8f8 <__kernel_rem_pio2f+0x48c>
 801f8f4:	eef1 7a67 	vneg.f32	s15, s15
 801f8f8:	edc5 7a01 	vstr	s15, [r5, #4]
 801f8fc:	e79e      	b.n	801f83c <__kernel_rem_pio2f+0x3d0>
 801f8fe:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 801f77c <__kernel_rem_pio2f+0x310>
 801f902:	4619      	mov	r1, r3
 801f904:	e7e2      	b.n	801f8cc <__kernel_rem_pio2f+0x460>
 801f906:	eef0 7a47 	vmov.f32	s15, s14
 801f90a:	e7e6      	b.n	801f8da <__kernel_rem_pio2f+0x46e>
 801f90c:	ecb0 7a01 	vldmia	r0!, {s14}
 801f910:	3101      	adds	r1, #1
 801f912:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f916:	e7e8      	b.n	801f8ea <__kernel_rem_pio2f+0x47e>
 801f918:	edd0 7a00 	vldr	s15, [r0]
 801f91c:	edd0 6a01 	vldr	s13, [r0, #4]
 801f920:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801f924:	3c01      	subs	r4, #1
 801f926:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f92a:	ed80 7a00 	vstr	s14, [r0]
 801f92e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f932:	edc0 7a01 	vstr	s15, [r0, #4]
 801f936:	e791      	b.n	801f85c <__kernel_rem_pio2f+0x3f0>
 801f938:	edd1 7a00 	vldr	s15, [r1]
 801f93c:	edd1 6a01 	vldr	s13, [r1, #4]
 801f940:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801f944:	3801      	subs	r0, #1
 801f946:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f94a:	ed81 7a00 	vstr	s14, [r1]
 801f94e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f952:	edc1 7a01 	vstr	s15, [r1, #4]
 801f956:	e786      	b.n	801f866 <__kernel_rem_pio2f+0x3fa>
 801f958:	aa2e      	add	r2, sp, #184	; 0xb8
 801f95a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801f95e:	ed91 7a00 	vldr	s14, [r1]
 801f962:	3b01      	subs	r3, #1
 801f964:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f968:	e783      	b.n	801f872 <__kernel_rem_pio2f+0x406>
 801f96a:	eef1 6a66 	vneg.f32	s13, s13
 801f96e:	eeb1 7a47 	vneg.f32	s14, s14
 801f972:	edc5 6a00 	vstr	s13, [r5]
 801f976:	ed85 7a01 	vstr	s14, [r5, #4]
 801f97a:	eef1 7a67 	vneg.f32	s15, s15
 801f97e:	e785      	b.n	801f88c <__kernel_rem_pio2f+0x420>

0801f980 <__kernel_sinf>:
 801f980:	ee10 3a10 	vmov	r3, s0
 801f984:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f988:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801f98c:	da04      	bge.n	801f998 <__kernel_sinf+0x18>
 801f98e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801f992:	ee17 3a90 	vmov	r3, s15
 801f996:	b35b      	cbz	r3, 801f9f0 <__kernel_sinf+0x70>
 801f998:	ee20 7a00 	vmul.f32	s14, s0, s0
 801f99c:	eddf 7a15 	vldr	s15, [pc, #84]	; 801f9f4 <__kernel_sinf+0x74>
 801f9a0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801f9f8 <__kernel_sinf+0x78>
 801f9a4:	eea7 6a27 	vfma.f32	s12, s14, s15
 801f9a8:	eddf 7a14 	vldr	s15, [pc, #80]	; 801f9fc <__kernel_sinf+0x7c>
 801f9ac:	eee6 7a07 	vfma.f32	s15, s12, s14
 801f9b0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801fa00 <__kernel_sinf+0x80>
 801f9b4:	eea7 6a87 	vfma.f32	s12, s15, s14
 801f9b8:	eddf 7a12 	vldr	s15, [pc, #72]	; 801fa04 <__kernel_sinf+0x84>
 801f9bc:	ee60 6a07 	vmul.f32	s13, s0, s14
 801f9c0:	eee6 7a07 	vfma.f32	s15, s12, s14
 801f9c4:	b930      	cbnz	r0, 801f9d4 <__kernel_sinf+0x54>
 801f9c6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801fa08 <__kernel_sinf+0x88>
 801f9ca:	eea7 6a27 	vfma.f32	s12, s14, s15
 801f9ce:	eea6 0a26 	vfma.f32	s0, s12, s13
 801f9d2:	4770      	bx	lr
 801f9d4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801f9d8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801f9dc:	eee0 7a86 	vfma.f32	s15, s1, s12
 801f9e0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801f9e4:	eddf 7a09 	vldr	s15, [pc, #36]	; 801fa0c <__kernel_sinf+0x8c>
 801f9e8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801f9ec:	ee30 0a60 	vsub.f32	s0, s0, s1
 801f9f0:	4770      	bx	lr
 801f9f2:	bf00      	nop
 801f9f4:	2f2ec9d3 	.word	0x2f2ec9d3
 801f9f8:	b2d72f34 	.word	0xb2d72f34
 801f9fc:	3638ef1b 	.word	0x3638ef1b
 801fa00:	b9500d01 	.word	0xb9500d01
 801fa04:	3c088889 	.word	0x3c088889
 801fa08:	be2aaaab 	.word	0xbe2aaaab
 801fa0c:	3e2aaaab 	.word	0x3e2aaaab

0801fa10 <finite>:
 801fa10:	b082      	sub	sp, #8
 801fa12:	ed8d 0b00 	vstr	d0, [sp]
 801fa16:	9801      	ldr	r0, [sp, #4]
 801fa18:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801fa1c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801fa20:	0fc0      	lsrs	r0, r0, #31
 801fa22:	b002      	add	sp, #8
 801fa24:	4770      	bx	lr
	...

0801fa28 <rint>:
 801fa28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fa2a:	ec51 0b10 	vmov	r0, r1, d0
 801fa2e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801fa32:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801fa36:	2e13      	cmp	r6, #19
 801fa38:	ee10 4a10 	vmov	r4, s0
 801fa3c:	460b      	mov	r3, r1
 801fa3e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801fa42:	dc58      	bgt.n	801faf6 <rint+0xce>
 801fa44:	2e00      	cmp	r6, #0
 801fa46:	da2b      	bge.n	801faa0 <rint+0x78>
 801fa48:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801fa4c:	4302      	orrs	r2, r0
 801fa4e:	d023      	beq.n	801fa98 <rint+0x70>
 801fa50:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801fa54:	4302      	orrs	r2, r0
 801fa56:	4254      	negs	r4, r2
 801fa58:	4314      	orrs	r4, r2
 801fa5a:	0c4b      	lsrs	r3, r1, #17
 801fa5c:	0b24      	lsrs	r4, r4, #12
 801fa5e:	045b      	lsls	r3, r3, #17
 801fa60:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801fa64:	ea44 0103 	orr.w	r1, r4, r3
 801fa68:	4b32      	ldr	r3, [pc, #200]	; (801fb34 <rint+0x10c>)
 801fa6a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801fa6e:	e9d3 6700 	ldrd	r6, r7, [r3]
 801fa72:	4602      	mov	r2, r0
 801fa74:	460b      	mov	r3, r1
 801fa76:	4630      	mov	r0, r6
 801fa78:	4639      	mov	r1, r7
 801fa7a:	f7e0 fc07 	bl	800028c <__adddf3>
 801fa7e:	e9cd 0100 	strd	r0, r1, [sp]
 801fa82:	463b      	mov	r3, r7
 801fa84:	e9dd 0100 	ldrd	r0, r1, [sp]
 801fa88:	4632      	mov	r2, r6
 801fa8a:	f7e0 fbfd 	bl	8000288 <__aeabi_dsub>
 801fa8e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801fa92:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801fa96:	4639      	mov	r1, r7
 801fa98:	ec41 0b10 	vmov	d0, r0, r1
 801fa9c:	b003      	add	sp, #12
 801fa9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801faa0:	4a25      	ldr	r2, [pc, #148]	; (801fb38 <rint+0x110>)
 801faa2:	4132      	asrs	r2, r6
 801faa4:	ea01 0702 	and.w	r7, r1, r2
 801faa8:	4307      	orrs	r7, r0
 801faaa:	d0f5      	beq.n	801fa98 <rint+0x70>
 801faac:	0851      	lsrs	r1, r2, #1
 801faae:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801fab2:	4314      	orrs	r4, r2
 801fab4:	d00c      	beq.n	801fad0 <rint+0xa8>
 801fab6:	ea23 0201 	bic.w	r2, r3, r1
 801faba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801fabe:	2e13      	cmp	r6, #19
 801fac0:	fa43 f606 	asr.w	r6, r3, r6
 801fac4:	bf0c      	ite	eq
 801fac6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801faca:	2400      	movne	r4, #0
 801facc:	ea42 0306 	orr.w	r3, r2, r6
 801fad0:	4918      	ldr	r1, [pc, #96]	; (801fb34 <rint+0x10c>)
 801fad2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801fad6:	4622      	mov	r2, r4
 801fad8:	e9d5 4500 	ldrd	r4, r5, [r5]
 801fadc:	4620      	mov	r0, r4
 801fade:	4629      	mov	r1, r5
 801fae0:	f7e0 fbd4 	bl	800028c <__adddf3>
 801fae4:	e9cd 0100 	strd	r0, r1, [sp]
 801fae8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801faec:	4622      	mov	r2, r4
 801faee:	462b      	mov	r3, r5
 801faf0:	f7e0 fbca 	bl	8000288 <__aeabi_dsub>
 801faf4:	e7d0      	b.n	801fa98 <rint+0x70>
 801faf6:	2e33      	cmp	r6, #51	; 0x33
 801faf8:	dd07      	ble.n	801fb0a <rint+0xe2>
 801fafa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801fafe:	d1cb      	bne.n	801fa98 <rint+0x70>
 801fb00:	ee10 2a10 	vmov	r2, s0
 801fb04:	f7e0 fbc2 	bl	800028c <__adddf3>
 801fb08:	e7c6      	b.n	801fa98 <rint+0x70>
 801fb0a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801fb0e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801fb12:	40d6      	lsrs	r6, r2
 801fb14:	4230      	tst	r0, r6
 801fb16:	d0bf      	beq.n	801fa98 <rint+0x70>
 801fb18:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 801fb1c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801fb20:	bf1f      	itttt	ne
 801fb22:	ea24 0101 	bicne.w	r1, r4, r1
 801fb26:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801fb2a:	fa44 f202 	asrne.w	r2, r4, r2
 801fb2e:	ea41 0402 	orrne.w	r4, r1, r2
 801fb32:	e7cd      	b.n	801fad0 <rint+0xa8>
 801fb34:	080212f8 	.word	0x080212f8
 801fb38:	000fffff 	.word	0x000fffff
 801fb3c:	00000000 	.word	0x00000000

0801fb40 <scalbn>:
 801fb40:	b570      	push	{r4, r5, r6, lr}
 801fb42:	ec55 4b10 	vmov	r4, r5, d0
 801fb46:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801fb4a:	4606      	mov	r6, r0
 801fb4c:	462b      	mov	r3, r5
 801fb4e:	b99a      	cbnz	r2, 801fb78 <scalbn+0x38>
 801fb50:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801fb54:	4323      	orrs	r3, r4
 801fb56:	d036      	beq.n	801fbc6 <scalbn+0x86>
 801fb58:	4b39      	ldr	r3, [pc, #228]	; (801fc40 <scalbn+0x100>)
 801fb5a:	4629      	mov	r1, r5
 801fb5c:	ee10 0a10 	vmov	r0, s0
 801fb60:	2200      	movs	r2, #0
 801fb62:	f7e0 fd49 	bl	80005f8 <__aeabi_dmul>
 801fb66:	4b37      	ldr	r3, [pc, #220]	; (801fc44 <scalbn+0x104>)
 801fb68:	429e      	cmp	r6, r3
 801fb6a:	4604      	mov	r4, r0
 801fb6c:	460d      	mov	r5, r1
 801fb6e:	da10      	bge.n	801fb92 <scalbn+0x52>
 801fb70:	a32b      	add	r3, pc, #172	; (adr r3, 801fc20 <scalbn+0xe0>)
 801fb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb76:	e03a      	b.n	801fbee <scalbn+0xae>
 801fb78:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801fb7c:	428a      	cmp	r2, r1
 801fb7e:	d10c      	bne.n	801fb9a <scalbn+0x5a>
 801fb80:	ee10 2a10 	vmov	r2, s0
 801fb84:	4620      	mov	r0, r4
 801fb86:	4629      	mov	r1, r5
 801fb88:	f7e0 fb80 	bl	800028c <__adddf3>
 801fb8c:	4604      	mov	r4, r0
 801fb8e:	460d      	mov	r5, r1
 801fb90:	e019      	b.n	801fbc6 <scalbn+0x86>
 801fb92:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801fb96:	460b      	mov	r3, r1
 801fb98:	3a36      	subs	r2, #54	; 0x36
 801fb9a:	4432      	add	r2, r6
 801fb9c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801fba0:	428a      	cmp	r2, r1
 801fba2:	dd08      	ble.n	801fbb6 <scalbn+0x76>
 801fba4:	2d00      	cmp	r5, #0
 801fba6:	a120      	add	r1, pc, #128	; (adr r1, 801fc28 <scalbn+0xe8>)
 801fba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fbac:	da1c      	bge.n	801fbe8 <scalbn+0xa8>
 801fbae:	a120      	add	r1, pc, #128	; (adr r1, 801fc30 <scalbn+0xf0>)
 801fbb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fbb4:	e018      	b.n	801fbe8 <scalbn+0xa8>
 801fbb6:	2a00      	cmp	r2, #0
 801fbb8:	dd08      	ble.n	801fbcc <scalbn+0x8c>
 801fbba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801fbbe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801fbc2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801fbc6:	ec45 4b10 	vmov	d0, r4, r5
 801fbca:	bd70      	pop	{r4, r5, r6, pc}
 801fbcc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801fbd0:	da19      	bge.n	801fc06 <scalbn+0xc6>
 801fbd2:	f24c 3350 	movw	r3, #50000	; 0xc350
 801fbd6:	429e      	cmp	r6, r3
 801fbd8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801fbdc:	dd0a      	ble.n	801fbf4 <scalbn+0xb4>
 801fbde:	a112      	add	r1, pc, #72	; (adr r1, 801fc28 <scalbn+0xe8>)
 801fbe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fbe4:	2b00      	cmp	r3, #0
 801fbe6:	d1e2      	bne.n	801fbae <scalbn+0x6e>
 801fbe8:	a30f      	add	r3, pc, #60	; (adr r3, 801fc28 <scalbn+0xe8>)
 801fbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbee:	f7e0 fd03 	bl	80005f8 <__aeabi_dmul>
 801fbf2:	e7cb      	b.n	801fb8c <scalbn+0x4c>
 801fbf4:	a10a      	add	r1, pc, #40	; (adr r1, 801fc20 <scalbn+0xe0>)
 801fbf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fbfa:	2b00      	cmp	r3, #0
 801fbfc:	d0b8      	beq.n	801fb70 <scalbn+0x30>
 801fbfe:	a10e      	add	r1, pc, #56	; (adr r1, 801fc38 <scalbn+0xf8>)
 801fc00:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fc04:	e7b4      	b.n	801fb70 <scalbn+0x30>
 801fc06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801fc0a:	3236      	adds	r2, #54	; 0x36
 801fc0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801fc10:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801fc14:	4620      	mov	r0, r4
 801fc16:	4b0c      	ldr	r3, [pc, #48]	; (801fc48 <scalbn+0x108>)
 801fc18:	2200      	movs	r2, #0
 801fc1a:	e7e8      	b.n	801fbee <scalbn+0xae>
 801fc1c:	f3af 8000 	nop.w
 801fc20:	c2f8f359 	.word	0xc2f8f359
 801fc24:	01a56e1f 	.word	0x01a56e1f
 801fc28:	8800759c 	.word	0x8800759c
 801fc2c:	7e37e43c 	.word	0x7e37e43c
 801fc30:	8800759c 	.word	0x8800759c
 801fc34:	fe37e43c 	.word	0xfe37e43c
 801fc38:	c2f8f359 	.word	0xc2f8f359
 801fc3c:	81a56e1f 	.word	0x81a56e1f
 801fc40:	43500000 	.word	0x43500000
 801fc44:	ffff3cb0 	.word	0xffff3cb0
 801fc48:	3c900000 	.word	0x3c900000

0801fc4c <floorf>:
 801fc4c:	ee10 3a10 	vmov	r3, s0
 801fc50:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801fc54:	3a7f      	subs	r2, #127	; 0x7f
 801fc56:	2a16      	cmp	r2, #22
 801fc58:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801fc5c:	dc2a      	bgt.n	801fcb4 <floorf+0x68>
 801fc5e:	2a00      	cmp	r2, #0
 801fc60:	da11      	bge.n	801fc86 <floorf+0x3a>
 801fc62:	eddf 7a18 	vldr	s15, [pc, #96]	; 801fcc4 <floorf+0x78>
 801fc66:	ee30 0a27 	vadd.f32	s0, s0, s15
 801fc6a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801fc6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc72:	dd05      	ble.n	801fc80 <floorf+0x34>
 801fc74:	2b00      	cmp	r3, #0
 801fc76:	da23      	bge.n	801fcc0 <floorf+0x74>
 801fc78:	4a13      	ldr	r2, [pc, #76]	; (801fcc8 <floorf+0x7c>)
 801fc7a:	2900      	cmp	r1, #0
 801fc7c:	bf18      	it	ne
 801fc7e:	4613      	movne	r3, r2
 801fc80:	ee00 3a10 	vmov	s0, r3
 801fc84:	4770      	bx	lr
 801fc86:	4911      	ldr	r1, [pc, #68]	; (801fccc <floorf+0x80>)
 801fc88:	4111      	asrs	r1, r2
 801fc8a:	420b      	tst	r3, r1
 801fc8c:	d0fa      	beq.n	801fc84 <floorf+0x38>
 801fc8e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801fcc4 <floorf+0x78>
 801fc92:	ee30 0a27 	vadd.f32	s0, s0, s15
 801fc96:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801fc9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc9e:	ddef      	ble.n	801fc80 <floorf+0x34>
 801fca0:	2b00      	cmp	r3, #0
 801fca2:	bfbe      	ittt	lt
 801fca4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801fca8:	fa40 f202 	asrlt.w	r2, r0, r2
 801fcac:	189b      	addlt	r3, r3, r2
 801fcae:	ea23 0301 	bic.w	r3, r3, r1
 801fcb2:	e7e5      	b.n	801fc80 <floorf+0x34>
 801fcb4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801fcb8:	d3e4      	bcc.n	801fc84 <floorf+0x38>
 801fcba:	ee30 0a00 	vadd.f32	s0, s0, s0
 801fcbe:	4770      	bx	lr
 801fcc0:	2300      	movs	r3, #0
 801fcc2:	e7dd      	b.n	801fc80 <floorf+0x34>
 801fcc4:	7149f2ca 	.word	0x7149f2ca
 801fcc8:	bf800000 	.word	0xbf800000
 801fccc:	007fffff 	.word	0x007fffff

0801fcd0 <rintf>:
 801fcd0:	ee10 2a10 	vmov	r2, s0
 801fcd4:	b513      	push	{r0, r1, r4, lr}
 801fcd6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801fcda:	397f      	subs	r1, #127	; 0x7f
 801fcdc:	2916      	cmp	r1, #22
 801fcde:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801fce2:	dc47      	bgt.n	801fd74 <rintf+0xa4>
 801fce4:	b32b      	cbz	r3, 801fd32 <rintf+0x62>
 801fce6:	2900      	cmp	r1, #0
 801fce8:	ee10 3a10 	vmov	r3, s0
 801fcec:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 801fcf0:	da21      	bge.n	801fd36 <rintf+0x66>
 801fcf2:	f3c2 0316 	ubfx	r3, r2, #0, #23
 801fcf6:	425b      	negs	r3, r3
 801fcf8:	4921      	ldr	r1, [pc, #132]	; (801fd80 <rintf+0xb0>)
 801fcfa:	0a5b      	lsrs	r3, r3, #9
 801fcfc:	0d12      	lsrs	r2, r2, #20
 801fcfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801fd02:	0512      	lsls	r2, r2, #20
 801fd04:	4313      	orrs	r3, r2
 801fd06:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 801fd0a:	ee07 3a90 	vmov	s15, r3
 801fd0e:	edd1 6a00 	vldr	s13, [r1]
 801fd12:	ee36 7aa7 	vadd.f32	s14, s13, s15
 801fd16:	ed8d 7a01 	vstr	s14, [sp, #4]
 801fd1a:	eddd 7a01 	vldr	s15, [sp, #4]
 801fd1e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801fd22:	ee17 3a90 	vmov	r3, s15
 801fd26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801fd2a:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 801fd2e:	ee00 3a10 	vmov	s0, r3
 801fd32:	b002      	add	sp, #8
 801fd34:	bd10      	pop	{r4, pc}
 801fd36:	4a13      	ldr	r2, [pc, #76]	; (801fd84 <rintf+0xb4>)
 801fd38:	410a      	asrs	r2, r1
 801fd3a:	4213      	tst	r3, r2
 801fd3c:	d0f9      	beq.n	801fd32 <rintf+0x62>
 801fd3e:	0854      	lsrs	r4, r2, #1
 801fd40:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 801fd44:	d006      	beq.n	801fd54 <rintf+0x84>
 801fd46:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801fd4a:	ea23 0304 	bic.w	r3, r3, r4
 801fd4e:	fa42 f101 	asr.w	r1, r2, r1
 801fd52:	430b      	orrs	r3, r1
 801fd54:	4a0a      	ldr	r2, [pc, #40]	; (801fd80 <rintf+0xb0>)
 801fd56:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801fd5a:	ed90 7a00 	vldr	s14, [r0]
 801fd5e:	ee07 3a90 	vmov	s15, r3
 801fd62:	ee77 7a27 	vadd.f32	s15, s14, s15
 801fd66:	edcd 7a01 	vstr	s15, [sp, #4]
 801fd6a:	ed9d 0a01 	vldr	s0, [sp, #4]
 801fd6e:	ee30 0a47 	vsub.f32	s0, s0, s14
 801fd72:	e7de      	b.n	801fd32 <rintf+0x62>
 801fd74:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801fd78:	d3db      	bcc.n	801fd32 <rintf+0x62>
 801fd7a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801fd7e:	e7d8      	b.n	801fd32 <rintf+0x62>
 801fd80:	08021308 	.word	0x08021308
 801fd84:	007fffff 	.word	0x007fffff

0801fd88 <_init>:
 801fd88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd8a:	bf00      	nop
 801fd8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fd8e:	bc08      	pop	{r3}
 801fd90:	469e      	mov	lr, r3
 801fd92:	4770      	bx	lr

0801fd94 <_fini>:
 801fd94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd96:	bf00      	nop
 801fd98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fd9a:	bc08      	pop	{r3}
 801fd9c:	469e      	mov	lr, r3
 801fd9e:	4770      	bx	lr
