
brushless_navi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000202c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001558  08020450  08020450  00030450  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080219a8  080219a8  000402a8  2**0
                  CONTENTS
  4 .ARM          00000008  080219a8  080219a8  000319a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080219b0  080219b0  000402a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080219b0  080219b0  000319b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080219b4  080219b4  000319b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a8  20000000  080219b8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a2e0  200002a8  08021c60  000402a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000a588  08021c60  0004a588  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000402a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0009bcb9  00000000  00000000  000402d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a676  00000000  00000000  000dbf91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027f8  00000000  00000000  000e6608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002558  00000000  00000000  000e8e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031d1a  00000000  00000000  000eb358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004648e  00000000  00000000  0011d072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebcd2  00000000  00000000  00163500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0024f1d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bf4c  00000000  00000000  0024f228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002a8 	.word	0x200002a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08020438 	.word	0x08020438

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002ac 	.word	0x200002ac
 80001cc:	08020438 	.word	0x08020438

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <ABTInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void ABTInit(float samp_time, float a, float b, float g, float *ip, float *pos, float *vel, float *acc, ABT_t *filt)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	ed87 0a07 	vstr	s0, [r7, #28]
 8000ff6:	edc7 0a06 	vstr	s1, [r7, #24]
 8000ffa:	ed87 1a05 	vstr	s2, [r7, #20]
 8000ffe:	edc7 1a04 	vstr	s3, [r7, #16]
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	603b      	str	r3, [r7, #0]
	filt->sample_time = samp_time;
 800100a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800100c:	69fa      	ldr	r2, [r7, #28]
 800100e:	601a      	str	r2, [r3, #0]
	filt->alpha = a;
 8001010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	605a      	str	r2, [r3, #4]
	filt->beta = b;
 8001016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	609a      	str	r2, [r3, #8]
	filt->gamma = g;
 800101c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	60da      	str	r2, [r3, #12]
	filt->input = ip;
 8001022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	611a      	str	r2, [r3, #16]
	filt->pos_output = pos;
 8001028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	615a      	str	r2, [r3, #20]
	filt->vel_output = vel;
 800102e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	619a      	str	r2, [r3, #24]
	filt->acc_output = acc;
 8001034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	61da      	str	r2, [r3, #28]
}
 800103a:	bf00      	nop
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <ABTEstimateInit>:

void ABTEstimateInit(ABT_t *filt)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
	*(filt->pos_output) = 0;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
	*(filt->vel_output) = 0;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
	*(filt->acc_output) = 0;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <ABT>:

void ABT(ABT_t *filt)
{
 8001078:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800107c:	b086      	sub	sp, #24
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
	float pos_residual;
	float pos_predict;
	float vel_predict;

	/* Predict position and velocity using previous sample values */
	pos_predict = *(filt->pos_output) + filt->sample_time *
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	ed93 7a00 	vldr	s14, [r3]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	edd3 6a00 	vldr	s13, [r3]
								(*(filt->vel_output)) + filt->sample_time *
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	edd3 7a00 	vldr	s15, [r3]
	pos_predict = *(filt->pos_output) + filt->sample_time *
 8001098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800109c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a0:	ee17 0a90 	vmov	r0, s15
 80010a4:	f7ff fa50 	bl	8000548 <__aeabi_f2d>
 80010a8:	4604      	mov	r4, r0
 80010aa:	460d      	mov	r5, r1
								(*(filt->vel_output)) + filt->sample_time *
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	ed93 7a00 	vldr	s14, [r3]
								filt->sample_time * 0.5 * (*(filt->acc_output));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	edd3 7a00 	vldr	s15, [r3]
								(*(filt->vel_output)) + filt->sample_time *
 80010b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010bc:	ee17 0a90 	vmov	r0, s15
 80010c0:	f7ff fa42 	bl	8000548 <__aeabi_f2d>
								filt->sample_time * 0.5 * (*(filt->acc_output));
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	4b54      	ldr	r3, [pc, #336]	; (800121c <ABT+0x1a4>)
 80010ca:	f7ff fa95 	bl	80005f8 <__aeabi_dmul>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4690      	mov	r8, r2
 80010d4:	4699      	mov	r9, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fa33 	bl	8000548 <__aeabi_f2d>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4640      	mov	r0, r8
 80010e8:	4649      	mov	r1, r9
 80010ea:	f7ff fa85 	bl	80005f8 <__aeabi_dmul>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
								(*(filt->vel_output)) + filt->sample_time *
 80010f2:	4620      	mov	r0, r4
 80010f4:	4629      	mov	r1, r5
 80010f6:	f7ff f8c9 	bl	800028c <__adddf3>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
	pos_predict = *(filt->pos_output) + filt->sample_time *
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	f7ff fd71 	bl	8000be8 <__aeabi_d2f>
 8001106:	4603      	mov	r3, r0
 8001108:	617b      	str	r3, [r7, #20]
	vel_predict = *(filt->vel_output) + filt->sample_time * (*(filt->acc_output));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	ed93 7a00 	vldr	s14, [r3]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	edd3 6a00 	vldr	s13, [r3]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	edd3 7a00 	vldr	s15, [r3]
 8001120:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001128:	edc7 7a04 	vstr	s15, [r7, #16]

	/* Calculate residue */
	pos_residual = *filt->input - pos_predict;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	ed93 7a00 	vldr	s14, [r3]
 8001134:	edd7 7a05 	vldr	s15, [r7, #20]
 8001138:	ee77 7a67 	vsub.f32	s15, s14, s15
 800113c:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Update estimate with weighted input (a - b - g) */
	*(filt->pos_output) = pos_predict + filt->alpha * pos_residual;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	ed93 7a01 	vldr	s14, [r3, #4]
 8001146:	edd7 7a03 	vldr	s15, [r7, #12]
 800114a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	edd7 7a05 	vldr	s15, [r7, #20]
 8001156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800115a:	edc3 7a00 	vstr	s15, [r3]
	*(filt->vel_output) = vel_predict + (filt->beta / filt->sample_time)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	edd3 6a02 	vldr	s13, [r3, #8]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	edd3 7a00 	vldr	s15, [r3]
 800116a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
																* pos_residual;
 800116e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001172:	ee27 7a27 	vmul.f32	s14, s14, s15
	*(filt->vel_output) = vel_predict + (filt->beta / filt->sample_time)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	edd7 7a04 	vldr	s15, [r7, #16]
 800117e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001182:	edc3 7a00 	vstr	s15, [r3]
	*(filt->acc_output) = *(filt->acc_output) + (filt->gamma * 0.5 /
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f9db 	bl	8000548 <__aeabi_f2d>
 8001192:	4604      	mov	r4, r0
 8001194:	460d      	mov	r5, r1
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f9d4 	bl	8000548 <__aeabi_f2d>
 80011a0:	f04f 0200 	mov.w	r2, #0
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <ABT+0x1a4>)
 80011a6:	f7ff fa27 	bl	80005f8 <__aeabi_dmul>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4690      	mov	r8, r2
 80011b0:	4699      	mov	r9, r3
						(filt->sample_time * filt->sample_time)) * pos_residual;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	ed93 7a00 	vldr	s14, [r3]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	edd3 7a00 	vldr	s15, [r3]
 80011be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c2:	ee17 0a90 	vmov	r0, s15
 80011c6:	f7ff f9bf 	bl	8000548 <__aeabi_f2d>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
	*(filt->acc_output) = *(filt->acc_output) + (filt->gamma * 0.5 /
 80011ce:	4640      	mov	r0, r8
 80011d0:	4649      	mov	r1, r9
 80011d2:	f7ff fb3b 	bl	800084c <__aeabi_ddiv>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4690      	mov	r8, r2
 80011dc:	4699      	mov	r9, r3
						(filt->sample_time * filt->sample_time)) * pos_residual;
 80011de:	68f8      	ldr	r0, [r7, #12]
 80011e0:	f7ff f9b2 	bl	8000548 <__aeabi_f2d>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4640      	mov	r0, r8
 80011ea:	4649      	mov	r1, r9
 80011ec:	f7ff fa04 	bl	80005f8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
	*(filt->acc_output) = *(filt->acc_output) + (filt->gamma * 0.5 /
 80011f4:	4620      	mov	r0, r4
 80011f6:	4629      	mov	r1, r5
 80011f8:	f7ff f848 	bl	800028c <__adddf3>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69dc      	ldr	r4, [r3, #28]
 8001208:	f7ff fcee 	bl	8000be8 <__aeabi_d2f>
 800120c:	4603      	mov	r3, r0
 800120e:	6023      	str	r3, [r4, #0]
}
 8001210:	bf00      	nop
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800121a:	bf00      	nop
 800121c:	3fe00000 	.word	0x3fe00000

08001220 <BDCInit>:
 * Function Return		: None
 * Function Example		: BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 * 						  BDCInit(&BDC2, &htim3, TIM_CHANNEL_1, GPIO, GPIOA, GPIO_Pin_9, GPIOA, GPIO_Pin_10);
 */

void BDCInit(BDC_t* bdc,TIM_HandleTypeDef* htimx,uint32_t Channel, BCDDIRPINType Dirpintype, ...){
 8001220:	b408      	push	{r3}
 8001222:	b580      	push	{r7, lr}
 8001224:	b089      	sub	sp, #36	; 0x24
 8001226:	af02      	add	r7, sp, #8
 8001228:	60f8      	str	r0, [r7, #12]
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	607a      	str	r2, [r7, #4]

	bdc->htim = htimx;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	61da      	str	r2, [r3, #28]
	bdc->Channel = Channel;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	621a      	str	r2, [r3, #32]
	bdc->Dirpintype =  Dirpintype;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001240:	701a      	strb	r2, [r3, #0]

	va_list pinconfig;
	va_start(pinconfig, Dirpintype);
 8001242:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001246:	617b      	str	r3, [r7, #20]

	if( bdc->Dirpintype == GPIO){
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d12e      	bne.n	80012ae <BDCInit+0x8e>

		bdc->GPIOx_DIR1 = va_arg(pinconfig, GPIO_TypeDef*);
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	1d1a      	adds	r2, r3, #4
 8001254:	617a      	str	r2, [r7, #20]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	605a      	str	r2, [r3, #4]
		bdc->GPIO_Pin_DIR1	= va_arg(pinconfig, int);
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	1d1a      	adds	r2, r3, #4
 8001260:	617a      	str	r2, [r7, #20]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	b29a      	uxth	r2, r3
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	811a      	strh	r2, [r3, #8]
		bdc->GPIOx_DIR2 = va_arg(pinconfig, GPIO_TypeDef*);
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	1d1a      	adds	r2, r3, #4
 800126e:	617a      	str	r2, [r7, #20]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	60da      	str	r2, [r3, #12]
		bdc->GPIO_Pin_DIR2	= va_arg(pinconfig, int);
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	1d1a      	adds	r2, r3, #4
 800127a:	617a      	str	r2, [r7, #20]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	b29a      	uxth	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	821a      	strh	r2, [r3, #16]



		GPIOPinsInit(bdc->GPIOx_DIR1, bdc->GPIO_Pin_DIR1,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6858      	ldr	r0, [r3, #4]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	8919      	ldrh	r1, [r3, #8]
 800128c:	2301      	movs	r3, #1
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2302      	movs	r3, #2
 8001292:	2201      	movs	r2, #1
 8001294:	f000 f84e 	bl	8001334 <GPIOPinsInit>
		GPIOPinsInit(bdc->GPIOx_DIR2, bdc->GPIO_Pin_DIR2,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	68d8      	ldr	r0, [r3, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	8a19      	ldrh	r1, [r3, #16]
 80012a0:	2301      	movs	r3, #1
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	2302      	movs	r3, #2
 80012a6:	2201      	movs	r2, #1
 80012a8:	f000 f844 	bl	8001334 <GPIOPinsInit>
 80012ac:	e017      	b.n	80012de <BDCInit+0xbe>

	}else if(bdc->Dirpintype == SHIFTREG){
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d113      	bne.n	80012de <BDCInit+0xbe>

		bdc->shiftreg = va_arg(pinconfig, byte_t *);
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	1d1a      	adds	r2, r3, #4
 80012ba:	617a      	str	r2, [r7, #20]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	615a      	str	r2, [r3, #20]
		bdc->dir1 = va_arg(pinconfig, int);
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	1d1a      	adds	r2, r3, #4
 80012c6:	617a      	str	r2, [r7, #20]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	761a      	strb	r2, [r3, #24]
		bdc->dir2 = va_arg(pinconfig, int);
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	1d1a      	adds	r2, r3, #4
 80012d4:	617a      	str	r2, [r7, #20]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	765a      	strb	r2, [r3, #25]
	}

	va_end(pinconfig);
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6a1b      	ldr	r3, [r3, #32]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d105      	bne.n	80012f2 <BDCInit+0xd2>
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2200      	movs	r2, #0
 80012ee:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012f0:	e018      	b.n	8001324 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	d105      	bne.n	8001306 <BDCInit+0xe6>
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	2300      	movs	r3, #0
 8001302:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001304:	e00e      	b.n	8001324 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6a1b      	ldr	r3, [r3, #32]
 800130a:	2b08      	cmp	r3, #8
 800130c:	d105      	bne.n	800131a <BDCInit+0xfa>
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	2300      	movs	r3, #0
 8001316:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001318:	e004      	b.n	8001324 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	2300      	movs	r3, #0
 8001322:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001324:	bf00      	nop
 8001326:	371c      	adds	r7, #28
 8001328:	46bd      	mov	sp, r7
 800132a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800132e:	b001      	add	sp, #4
 8001330:	4770      	bx	lr
	...

08001334 <GPIOPinsInit>:
 * Function Return		: None
 * Function Example		: GPIOPinsInit(GPIOA, GPIO_Pin_2, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 */

void GPIOPinsInit (GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin,uint32_t Mode, uint32_t GPIO_Speed,  uint32_t GPIO_PuPd)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b092      	sub	sp, #72	; 0x48
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	460b      	mov	r3, r1
 8001342:	817b      	strh	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]

	switch((uint32_t)GPIOx){
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4a6a      	ldr	r2, [pc, #424]	; (8001500 <GPIOPinsInit+0x1cc>)
 8001358:	4293      	cmp	r3, r2
 800135a:	f000 80af 	beq.w	80014bc <GPIOPinsInit+0x188>
 800135e:	4a68      	ldr	r2, [pc, #416]	; (8001500 <GPIOPinsInit+0x1cc>)
 8001360:	4293      	cmp	r3, r2
 8001362:	f200 80ba 	bhi.w	80014da <GPIOPinsInit+0x1a6>
 8001366:	4a67      	ldr	r2, [pc, #412]	; (8001504 <GPIOPinsInit+0x1d0>)
 8001368:	4293      	cmp	r3, r2
 800136a:	f000 8098 	beq.w	800149e <GPIOPinsInit+0x16a>
 800136e:	4a65      	ldr	r2, [pc, #404]	; (8001504 <GPIOPinsInit+0x1d0>)
 8001370:	4293      	cmp	r3, r2
 8001372:	f200 80b2 	bhi.w	80014da <GPIOPinsInit+0x1a6>
 8001376:	4a64      	ldr	r2, [pc, #400]	; (8001508 <GPIOPinsInit+0x1d4>)
 8001378:	4293      	cmp	r3, r2
 800137a:	f000 8081 	beq.w	8001480 <GPIOPinsInit+0x14c>
 800137e:	4a62      	ldr	r2, [pc, #392]	; (8001508 <GPIOPinsInit+0x1d4>)
 8001380:	4293      	cmp	r3, r2
 8001382:	f200 80aa 	bhi.w	80014da <GPIOPinsInit+0x1a6>
 8001386:	4a61      	ldr	r2, [pc, #388]	; (800150c <GPIOPinsInit+0x1d8>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d06a      	beq.n	8001462 <GPIOPinsInit+0x12e>
 800138c:	4a5f      	ldr	r2, [pc, #380]	; (800150c <GPIOPinsInit+0x1d8>)
 800138e:	4293      	cmp	r3, r2
 8001390:	f200 80a3 	bhi.w	80014da <GPIOPinsInit+0x1a6>
 8001394:	4a5e      	ldr	r2, [pc, #376]	; (8001510 <GPIOPinsInit+0x1dc>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d054      	beq.n	8001444 <GPIOPinsInit+0x110>
 800139a:	4a5d      	ldr	r2, [pc, #372]	; (8001510 <GPIOPinsInit+0x1dc>)
 800139c:	4293      	cmp	r3, r2
 800139e:	f200 809c 	bhi.w	80014da <GPIOPinsInit+0x1a6>
 80013a2:	4a5c      	ldr	r2, [pc, #368]	; (8001514 <GPIOPinsInit+0x1e0>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d03e      	beq.n	8001426 <GPIOPinsInit+0xf2>
 80013a8:	4a5a      	ldr	r2, [pc, #360]	; (8001514 <GPIOPinsInit+0x1e0>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	f200 8095 	bhi.w	80014da <GPIOPinsInit+0x1a6>
 80013b0:	4a59      	ldr	r2, [pc, #356]	; (8001518 <GPIOPinsInit+0x1e4>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d028      	beq.n	8001408 <GPIOPinsInit+0xd4>
 80013b6:	4a58      	ldr	r2, [pc, #352]	; (8001518 <GPIOPinsInit+0x1e4>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	f200 808e 	bhi.w	80014da <GPIOPinsInit+0x1a6>
 80013be:	4a57      	ldr	r2, [pc, #348]	; (800151c <GPIOPinsInit+0x1e8>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d003      	beq.n	80013cc <GPIOPinsInit+0x98>
 80013c4:	4a56      	ldr	r2, [pc, #344]	; (8001520 <GPIOPinsInit+0x1ec>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d00f      	beq.n	80013ea <GPIOPinsInit+0xb6>
	break;

	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
	break;

	default: break;
 80013ca:	e086      	b.n	80014da <GPIOPinsInit+0x1a6>
	case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013cc:	2300      	movs	r3, #0
 80013ce:	633b      	str	r3, [r7, #48]	; 0x30
 80013d0:	4b54      	ldr	r3, [pc, #336]	; (8001524 <GPIOPinsInit+0x1f0>)
 80013d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d4:	4a53      	ldr	r2, [pc, #332]	; (8001524 <GPIOPinsInit+0x1f0>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	6313      	str	r3, [r2, #48]	; 0x30
 80013dc:	4b51      	ldr	r3, [pc, #324]	; (8001524 <GPIOPinsInit+0x1f0>)
 80013de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	633b      	str	r3, [r7, #48]	; 0x30
 80013e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	break;
 80013e8:	e078      	b.n	80014dc <GPIOPinsInit+0x1a8>
	case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ee:	4b4d      	ldr	r3, [pc, #308]	; (8001524 <GPIOPinsInit+0x1f0>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a4c      	ldr	r2, [pc, #304]	; (8001524 <GPIOPinsInit+0x1f0>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b4a      	ldr	r3, [pc, #296]	; (8001524 <GPIOPinsInit+0x1f0>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	break;
 8001406:	e069      	b.n	80014dc <GPIOPinsInit+0x1a8>
	case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001408:	2300      	movs	r3, #0
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
 800140c:	4b45      	ldr	r3, [pc, #276]	; (8001524 <GPIOPinsInit+0x1f0>)
 800140e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001410:	4a44      	ldr	r2, [pc, #272]	; (8001524 <GPIOPinsInit+0x1f0>)
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	6313      	str	r3, [r2, #48]	; 0x30
 8001418:	4b42      	ldr	r3, [pc, #264]	; (8001524 <GPIOPinsInit+0x1f0>)
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	62bb      	str	r3, [r7, #40]	; 0x28
 8001422:	6abb      	ldr	r3, [r7, #40]	; 0x28
	break;
 8001424:	e05a      	b.n	80014dc <GPIOPinsInit+0x1a8>
	case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
 800142a:	4b3e      	ldr	r3, [pc, #248]	; (8001524 <GPIOPinsInit+0x1f0>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a3d      	ldr	r2, [pc, #244]	; (8001524 <GPIOPinsInit+0x1f0>)
 8001430:	f043 0308 	orr.w	r3, r3, #8
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b3b      	ldr	r3, [pc, #236]	; (8001524 <GPIOPinsInit+0x1f0>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	break;
 8001442:	e04b      	b.n	80014dc <GPIOPinsInit+0x1a8>
	case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
 8001448:	4b36      	ldr	r3, [pc, #216]	; (8001524 <GPIOPinsInit+0x1f0>)
 800144a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144c:	4a35      	ldr	r2, [pc, #212]	; (8001524 <GPIOPinsInit+0x1f0>)
 800144e:	f043 0310 	orr.w	r3, r3, #16
 8001452:	6313      	str	r3, [r2, #48]	; 0x30
 8001454:	4b33      	ldr	r3, [pc, #204]	; (8001524 <GPIOPinsInit+0x1f0>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	f003 0310 	and.w	r3, r3, #16
 800145c:	623b      	str	r3, [r7, #32]
 800145e:	6a3b      	ldr	r3, [r7, #32]
	break;
 8001460:	e03c      	b.n	80014dc <GPIOPinsInit+0x1a8>
	case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
 8001466:	4b2f      	ldr	r3, [pc, #188]	; (8001524 <GPIOPinsInit+0x1f0>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a2e      	ldr	r2, [pc, #184]	; (8001524 <GPIOPinsInit+0x1f0>)
 800146c:	f043 0320 	orr.w	r3, r3, #32
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b2c      	ldr	r3, [pc, #176]	; (8001524 <GPIOPinsInit+0x1f0>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0320 	and.w	r3, r3, #32
 800147a:	61fb      	str	r3, [r7, #28]
 800147c:	69fb      	ldr	r3, [r7, #28]
	break;
 800147e:	e02d      	b.n	80014dc <GPIOPinsInit+0x1a8>
	case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001480:	2300      	movs	r3, #0
 8001482:	61bb      	str	r3, [r7, #24]
 8001484:	4b27      	ldr	r3, [pc, #156]	; (8001524 <GPIOPinsInit+0x1f0>)
 8001486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001488:	4a26      	ldr	r2, [pc, #152]	; (8001524 <GPIOPinsInit+0x1f0>)
 800148a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800148e:	6313      	str	r3, [r2, #48]	; 0x30
 8001490:	4b24      	ldr	r3, [pc, #144]	; (8001524 <GPIOPinsInit+0x1f0>)
 8001492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001498:	61bb      	str	r3, [r7, #24]
 800149a:	69bb      	ldr	r3, [r7, #24]
	break;
 800149c:	e01e      	b.n	80014dc <GPIOPinsInit+0x1a8>
	case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	4b20      	ldr	r3, [pc, #128]	; (8001524 <GPIOPinsInit+0x1f0>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a1f      	ldr	r2, [pc, #124]	; (8001524 <GPIOPinsInit+0x1f0>)
 80014a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <GPIOPinsInit+0x1f0>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697b      	ldr	r3, [r7, #20]
	break;
 80014ba:	e00f      	b.n	80014dc <GPIOPinsInit+0x1a8>
	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 80014bc:	2300      	movs	r3, #0
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	4b18      	ldr	r3, [pc, #96]	; (8001524 <GPIOPinsInit+0x1f0>)
 80014c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c4:	4a17      	ldr	r2, [pc, #92]	; (8001524 <GPIOPinsInit+0x1f0>)
 80014c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ca:	6313      	str	r3, [r2, #48]	; 0x30
 80014cc:	4b15      	ldr	r3, [pc, #84]	; (8001524 <GPIOPinsInit+0x1f0>)
 80014ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	693b      	ldr	r3, [r7, #16]
	break;
 80014d8:	e000      	b.n	80014dc <GPIOPinsInit+0x1a8>
	default: break;
 80014da:	bf00      	nop
	}


	GPIO_InitStruct.Pin = GPIO_Pin;
 80014dc:	897b      	ldrh	r3, [r7, #10]
 80014de:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Mode = Mode;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PuPd;
 80014e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_Speed;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80014ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014f0:	4619      	mov	r1, r3
 80014f2:	68f8      	ldr	r0, [r7, #12]
 80014f4:	f00f f808 	bl	8010508 <HAL_GPIO_Init>

}
 80014f8:	bf00      	nop
 80014fa:	3748      	adds	r7, #72	; 0x48
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40022000 	.word	0x40022000
 8001504:	40021c00 	.word	0x40021c00
 8001508:	40021800 	.word	0x40021800
 800150c:	40021400 	.word	0x40021400
 8001510:	40021000 	.word	0x40021000
 8001514:	40020c00 	.word	0x40020c00
 8001518:	40020800 	.word	0x40020800
 800151c:	40020000 	.word	0x40020000
 8001520:	40020400 	.word	0x40020400
 8001524:	40023800 	.word	0x40023800

08001528 <PWMTimeBaseInit>:
 * 						  Prescaler 	Prescaler value to divide TIM clock (1 to 65535)
 * Function Return		: None
 * Function Example		: PWMTimeBaseInit(&htim3, 20000, 84);
 */
void PWMTimeBaseInit(TIM_HandleTypeDef* htimx, uint32_t Period, uint32_t Prescaler)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001534:	f107 0318 	add.w	r3, r7, #24
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001542:	f107 0310 	add.w	r3, r7, #16
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]


	if(htimx == &htim1){
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4a52      	ldr	r2, [pc, #328]	; (8001698 <PWMTimeBaseInit+0x170>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d103      	bne.n	800155c <PWMTimeBaseInit+0x34>
		htimx->Instance = TIM1;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4a51      	ldr	r2, [pc, #324]	; (800169c <PWMTimeBaseInit+0x174>)
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	e057      	b.n	800160c <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim2)	{
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4a50      	ldr	r2, [pc, #320]	; (80016a0 <PWMTimeBaseInit+0x178>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d104      	bne.n	800156e <PWMTimeBaseInit+0x46>
		htimx->Instance = TIM2;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	e04e      	b.n	800160c <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim3)	{
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4a4c      	ldr	r2, [pc, #304]	; (80016a4 <PWMTimeBaseInit+0x17c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d103      	bne.n	800157e <PWMTimeBaseInit+0x56>
		htimx->Instance = TIM3;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4a4b      	ldr	r2, [pc, #300]	; (80016a8 <PWMTimeBaseInit+0x180>)
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	e046      	b.n	800160c <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim4)	{
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4a4a      	ldr	r2, [pc, #296]	; (80016ac <PWMTimeBaseInit+0x184>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d103      	bne.n	800158e <PWMTimeBaseInit+0x66>
		htimx->Instance = TIM4;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	4a49      	ldr	r2, [pc, #292]	; (80016b0 <PWMTimeBaseInit+0x188>)
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	e03e      	b.n	800160c <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim5)	{
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4a48      	ldr	r2, [pc, #288]	; (80016b4 <PWMTimeBaseInit+0x18c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d103      	bne.n	800159e <PWMTimeBaseInit+0x76>
		htimx->Instance = TIM5;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4a47      	ldr	r2, [pc, #284]	; (80016b8 <PWMTimeBaseInit+0x190>)
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	e036      	b.n	800160c <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim8)	{
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4a46      	ldr	r2, [pc, #280]	; (80016bc <PWMTimeBaseInit+0x194>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d103      	bne.n	80015ae <PWMTimeBaseInit+0x86>
		htimx->Instance = TIM8;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4a45      	ldr	r2, [pc, #276]	; (80016c0 <PWMTimeBaseInit+0x198>)
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	e02e      	b.n	800160c <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim9)	{
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4a44      	ldr	r2, [pc, #272]	; (80016c4 <PWMTimeBaseInit+0x19c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d103      	bne.n	80015be <PWMTimeBaseInit+0x96>
		htimx->Instance = TIM9;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4a43      	ldr	r2, [pc, #268]	; (80016c8 <PWMTimeBaseInit+0x1a0>)
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	e026      	b.n	800160c <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim10)	{
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4a42      	ldr	r2, [pc, #264]	; (80016cc <PWMTimeBaseInit+0x1a4>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d103      	bne.n	80015ce <PWMTimeBaseInit+0xa6>
		htimx->Instance = TIM10;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4a41      	ldr	r2, [pc, #260]	; (80016d0 <PWMTimeBaseInit+0x1a8>)
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	e01e      	b.n	800160c <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim11)	{
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	4a40      	ldr	r2, [pc, #256]	; (80016d4 <PWMTimeBaseInit+0x1ac>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d103      	bne.n	80015de <PWMTimeBaseInit+0xb6>
		htimx->Instance = TIM11;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4a3f      	ldr	r2, [pc, #252]	; (80016d8 <PWMTimeBaseInit+0x1b0>)
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	e016      	b.n	800160c <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim12)	{
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4a3e      	ldr	r2, [pc, #248]	; (80016dc <PWMTimeBaseInit+0x1b4>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d103      	bne.n	80015ee <PWMTimeBaseInit+0xc6>
		htimx->Instance = TIM12;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4a3d      	ldr	r2, [pc, #244]	; (80016e0 <PWMTimeBaseInit+0x1b8>)
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	e00e      	b.n	800160c <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim13)	{
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	4a3c      	ldr	r2, [pc, #240]	; (80016e4 <PWMTimeBaseInit+0x1bc>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d103      	bne.n	80015fe <PWMTimeBaseInit+0xd6>
		htimx->Instance = TIM13;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	4a3b      	ldr	r2, [pc, #236]	; (80016e8 <PWMTimeBaseInit+0x1c0>)
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	e006      	b.n	800160c <PWMTimeBaseInit+0xe4>
		}
	else if(htimx == &htim14)	{
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4a3a      	ldr	r2, [pc, #232]	; (80016ec <PWMTimeBaseInit+0x1c4>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d102      	bne.n	800160c <PWMTimeBaseInit+0xe4>
		htimx->Instance = TIM14;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4a39      	ldr	r2, [pc, #228]	; (80016f0 <PWMTimeBaseInit+0x1c8>)
 800160a:	601a      	str	r2, [r3, #0]
		}

	htimx->Init.Prescaler = Prescaler - 1;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	1e5a      	subs	r2, r3, #1
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = Period - 1;
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	1e5a      	subs	r2, r3, #1
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2280      	movs	r2, #128	; 0x80
 800162c:	619a      	str	r2, [r3, #24]
	 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f012 fa70 	bl	8013b14 <HAL_TIM_Base_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <PWMTimeBaseInit+0x116>
	  {
	    Error_Handler();
 800163a:	f003 fb83 	bl	8004d44 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800163e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001642:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 8001644:	f107 0318 	add.w	r3, r7, #24
 8001648:	4619      	mov	r1, r3
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f012 fdd6 	bl	80141fc <HAL_TIM_ConfigClockSource>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <PWMTimeBaseInit+0x132>
	  {
	    Error_Handler();
 8001656:	f003 fb75 	bl	8004d44 <Error_Handler>
	  }
	if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f012 facd 	bl	8013bfa <HAL_TIM_PWM_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <PWMTimeBaseInit+0x142>
		{
			Error_Handler();
 8001666:	f003 fb6d 	bl	8004d44 <Error_Handler>
		}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8001672:	f107 0310 	add.w	r3, r7, #16
 8001676:	4619      	mov	r1, r3
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f013 f9bb 	bl	80149f4 <HAL_TIMEx_MasterConfigSynchronization>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <PWMTimeBaseInit+0x160>
	{
		Error_Handler();
 8001684:	f003 fb5e 	bl	8004d44 <Error_Handler>
	}


    HAL_TIM_Base_Start(htimx);
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f012 fa6e 	bl	8013b6a <HAL_TIM_Base_Start>

}
 800168e:	bf00      	nop
 8001690:	3728      	adds	r7, #40	; 0x28
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20005f64 	.word	0x20005f64
 800169c:	40010000 	.word	0x40010000
 80016a0:	20006068 	.word	0x20006068
 80016a4:	20005d18 	.word	0x20005d18
 80016a8:	40000400 	.word	0x40000400
 80016ac:	20005b54 	.word	0x20005b54
 80016b0:	40000800 	.word	0x40000800
 80016b4:	20005cd8 	.word	0x20005cd8
 80016b8:	40000c00 	.word	0x40000c00
 80016bc:	20005b14 	.word	0x20005b14
 80016c0:	40010400 	.word	0x40010400
 80016c4:	20005fa4 	.word	0x20005fa4
 80016c8:	40014000 	.word	0x40014000
 80016cc:	20005c34 	.word	0x20005c34
 80016d0:	40014400 	.word	0x40014400
 80016d4:	20005e7c 	.word	0x20005e7c
 80016d8:	40014800 	.word	0x40014800
 80016dc:	20006188 	.word	0x20006188
 80016e0:	40001800 	.word	0x40001800
 80016e4:	20005dfc 	.word	0x20005dfc
 80016e8:	40001c00 	.word	0x40001c00
 80016ec:	20006148 	.word	0x20006148
 80016f0:	40002000 	.word	0x40002000

080016f4 <PWMChannelConfig>:
 * 						  GPIO_Pin_x	GPIO_Pin_x of PWM pin(x = 0,1,2,...or 15)
 * Function Return		: None
 * Function Example		: PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 */

void PWMChannelConfig(TIM_HandleTypeDef* htimx, uint32_t Channel , GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_x){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b09a      	sub	sp, #104	; 0x68
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
 8001700:	807b      	strh	r3, [r7, #2]

	TIM_OC_InitTypeDef sConfigOC = {0};
 8001702:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]
 8001712:	615a      	str	r2, [r3, #20]
 8001714:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001716:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	611a      	str	r2, [r3, #16]

	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001726:	2370      	movs	r3, #112	; 0x70
 8001728:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.Pulse = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800172e:	2302      	movs	r3, #2
 8001730:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001732:	2308      	movs	r3, #8
 8001734:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	65fb      	str	r3, [r7, #92]	; 0x5c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800173a:	2300      	movs	r3, #0
 800173c:	663b      	str	r3, [r7, #96]	; 0x60
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800173e:	2300      	movs	r3, #0
 8001740:	667b      	str	r3, [r7, #100]	; 0x64

	if (HAL_TIM_PWM_ConfigChannel(htimx, &sConfigOC, Channel) != HAL_OK)
 8001742:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	4619      	mov	r1, r3
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f012 fc90 	bl	8014070 <HAL_TIM_PWM_ConfigChannel>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <PWMChannelConfig+0x66>
	{
		Error_Handler();
 8001756:	f003 faf5 	bl	8004d44 <Error_Handler>
	}

	switch((uint32_t)GPIOx){
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a95      	ldr	r2, [pc, #596]	; (80019b4 <PWMChannelConfig+0x2c0>)
 800175e:	4293      	cmp	r3, r2
 8001760:	f000 80af 	beq.w	80018c2 <PWMChannelConfig+0x1ce>
 8001764:	4a93      	ldr	r2, [pc, #588]	; (80019b4 <PWMChannelConfig+0x2c0>)
 8001766:	4293      	cmp	r3, r2
 8001768:	f200 80ba 	bhi.w	80018e0 <PWMChannelConfig+0x1ec>
 800176c:	4a92      	ldr	r2, [pc, #584]	; (80019b8 <PWMChannelConfig+0x2c4>)
 800176e:	4293      	cmp	r3, r2
 8001770:	f000 8098 	beq.w	80018a4 <PWMChannelConfig+0x1b0>
 8001774:	4a90      	ldr	r2, [pc, #576]	; (80019b8 <PWMChannelConfig+0x2c4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	f200 80b2 	bhi.w	80018e0 <PWMChannelConfig+0x1ec>
 800177c:	4a8f      	ldr	r2, [pc, #572]	; (80019bc <PWMChannelConfig+0x2c8>)
 800177e:	4293      	cmp	r3, r2
 8001780:	f000 8081 	beq.w	8001886 <PWMChannelConfig+0x192>
 8001784:	4a8d      	ldr	r2, [pc, #564]	; (80019bc <PWMChannelConfig+0x2c8>)
 8001786:	4293      	cmp	r3, r2
 8001788:	f200 80aa 	bhi.w	80018e0 <PWMChannelConfig+0x1ec>
 800178c:	4a8c      	ldr	r2, [pc, #560]	; (80019c0 <PWMChannelConfig+0x2cc>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d06a      	beq.n	8001868 <PWMChannelConfig+0x174>
 8001792:	4a8b      	ldr	r2, [pc, #556]	; (80019c0 <PWMChannelConfig+0x2cc>)
 8001794:	4293      	cmp	r3, r2
 8001796:	f200 80a3 	bhi.w	80018e0 <PWMChannelConfig+0x1ec>
 800179a:	4a8a      	ldr	r2, [pc, #552]	; (80019c4 <PWMChannelConfig+0x2d0>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d054      	beq.n	800184a <PWMChannelConfig+0x156>
 80017a0:	4a88      	ldr	r2, [pc, #544]	; (80019c4 <PWMChannelConfig+0x2d0>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	f200 809c 	bhi.w	80018e0 <PWMChannelConfig+0x1ec>
 80017a8:	4a87      	ldr	r2, [pc, #540]	; (80019c8 <PWMChannelConfig+0x2d4>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d03e      	beq.n	800182c <PWMChannelConfig+0x138>
 80017ae:	4a86      	ldr	r2, [pc, #536]	; (80019c8 <PWMChannelConfig+0x2d4>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	f200 8095 	bhi.w	80018e0 <PWMChannelConfig+0x1ec>
 80017b6:	4a85      	ldr	r2, [pc, #532]	; (80019cc <PWMChannelConfig+0x2d8>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d028      	beq.n	800180e <PWMChannelConfig+0x11a>
 80017bc:	4a83      	ldr	r2, [pc, #524]	; (80019cc <PWMChannelConfig+0x2d8>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	f200 808e 	bhi.w	80018e0 <PWMChannelConfig+0x1ec>
 80017c4:	4a82      	ldr	r2, [pc, #520]	; (80019d0 <PWMChannelConfig+0x2dc>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d003      	beq.n	80017d2 <PWMChannelConfig+0xde>
 80017ca:	4a82      	ldr	r2, [pc, #520]	; (80019d4 <PWMChannelConfig+0x2e0>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d00f      	beq.n	80017f0 <PWMChannelConfig+0xfc>
		break;

		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
		break;

		default: break;
 80017d0:	e086      	b.n	80018e0 <PWMChannelConfig+0x1ec>
		case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	637b      	str	r3, [r7, #52]	; 0x34
 80017d6:	4b80      	ldr	r3, [pc, #512]	; (80019d8 <PWMChannelConfig+0x2e4>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a7f      	ldr	r2, [pc, #508]	; (80019d8 <PWMChannelConfig+0x2e4>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b7d      	ldr	r3, [pc, #500]	; (80019d8 <PWMChannelConfig+0x2e4>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	637b      	str	r3, [r7, #52]	; 0x34
 80017ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
		break;
 80017ee:	e078      	b.n	80018e2 <PWMChannelConfig+0x1ee>
		case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017f0:	2300      	movs	r3, #0
 80017f2:	633b      	str	r3, [r7, #48]	; 0x30
 80017f4:	4b78      	ldr	r3, [pc, #480]	; (80019d8 <PWMChannelConfig+0x2e4>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	4a77      	ldr	r2, [pc, #476]	; (80019d8 <PWMChannelConfig+0x2e4>)
 80017fa:	f043 0302 	orr.w	r3, r3, #2
 80017fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001800:	4b75      	ldr	r3, [pc, #468]	; (80019d8 <PWMChannelConfig+0x2e4>)
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	633b      	str	r3, [r7, #48]	; 0x30
 800180a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		break;
 800180c:	e069      	b.n	80018e2 <PWMChannelConfig+0x1ee>
		case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001812:	4b71      	ldr	r3, [pc, #452]	; (80019d8 <PWMChannelConfig+0x2e4>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a70      	ldr	r2, [pc, #448]	; (80019d8 <PWMChannelConfig+0x2e4>)
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b6e      	ldr	r3, [pc, #440]	; (80019d8 <PWMChannelConfig+0x2e4>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		break;
 800182a:	e05a      	b.n	80018e2 <PWMChannelConfig+0x1ee>
		case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 800182c:	2300      	movs	r3, #0
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001830:	4b69      	ldr	r3, [pc, #420]	; (80019d8 <PWMChannelConfig+0x2e4>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	4a68      	ldr	r2, [pc, #416]	; (80019d8 <PWMChannelConfig+0x2e4>)
 8001836:	f043 0308 	orr.w	r3, r3, #8
 800183a:	6313      	str	r3, [r2, #48]	; 0x30
 800183c:	4b66      	ldr	r3, [pc, #408]	; (80019d8 <PWMChannelConfig+0x2e4>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
 8001846:	6abb      	ldr	r3, [r7, #40]	; 0x28
		break;
 8001848:	e04b      	b.n	80018e2 <PWMChannelConfig+0x1ee>
		case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
 800184e:	4b62      	ldr	r3, [pc, #392]	; (80019d8 <PWMChannelConfig+0x2e4>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a61      	ldr	r2, [pc, #388]	; (80019d8 <PWMChannelConfig+0x2e4>)
 8001854:	f043 0310 	orr.w	r3, r3, #16
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b5f      	ldr	r3, [pc, #380]	; (80019d8 <PWMChannelConfig+0x2e4>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0310 	and.w	r3, r3, #16
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		break;
 8001866:	e03c      	b.n	80018e2 <PWMChannelConfig+0x1ee>
		case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
 800186c:	4b5a      	ldr	r3, [pc, #360]	; (80019d8 <PWMChannelConfig+0x2e4>)
 800186e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001870:	4a59      	ldr	r2, [pc, #356]	; (80019d8 <PWMChannelConfig+0x2e4>)
 8001872:	f043 0320 	orr.w	r3, r3, #32
 8001876:	6313      	str	r3, [r2, #48]	; 0x30
 8001878:	4b57      	ldr	r3, [pc, #348]	; (80019d8 <PWMChannelConfig+0x2e4>)
 800187a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187c:	f003 0320 	and.w	r3, r3, #32
 8001880:	623b      	str	r3, [r7, #32]
 8001882:	6a3b      	ldr	r3, [r7, #32]
		break;
 8001884:	e02d      	b.n	80018e2 <PWMChannelConfig+0x1ee>
		case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	4b53      	ldr	r3, [pc, #332]	; (80019d8 <PWMChannelConfig+0x2e4>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a52      	ldr	r2, [pc, #328]	; (80019d8 <PWMChannelConfig+0x2e4>)
 8001890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b50      	ldr	r3, [pc, #320]	; (80019d8 <PWMChannelConfig+0x2e4>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800189e:	61fb      	str	r3, [r7, #28]
 80018a0:	69fb      	ldr	r3, [r7, #28]
		break;
 80018a2:	e01e      	b.n	80018e2 <PWMChannelConfig+0x1ee>
		case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 80018a4:	2300      	movs	r3, #0
 80018a6:	61bb      	str	r3, [r7, #24]
 80018a8:	4b4b      	ldr	r3, [pc, #300]	; (80019d8 <PWMChannelConfig+0x2e4>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	4a4a      	ldr	r2, [pc, #296]	; (80019d8 <PWMChannelConfig+0x2e4>)
 80018ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b2:	6313      	str	r3, [r2, #48]	; 0x30
 80018b4:	4b48      	ldr	r3, [pc, #288]	; (80019d8 <PWMChannelConfig+0x2e4>)
 80018b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018bc:	61bb      	str	r3, [r7, #24]
 80018be:	69bb      	ldr	r3, [r7, #24]
		break;
 80018c0:	e00f      	b.n	80018e2 <PWMChannelConfig+0x1ee>
		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	4b44      	ldr	r3, [pc, #272]	; (80019d8 <PWMChannelConfig+0x2e4>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a43      	ldr	r2, [pc, #268]	; (80019d8 <PWMChannelConfig+0x2e4>)
 80018cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b41      	ldr	r3, [pc, #260]	; (80019d8 <PWMChannelConfig+0x2e4>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	697b      	ldr	r3, [r7, #20]
		break;
 80018de:	e000      	b.n	80018e2 <PWMChannelConfig+0x1ee>
		default: break;
 80018e0:	bf00      	nop
		}

	    GPIO_InitStruct.Pin = GPIO_Pin_x;
 80018e2:	887b      	ldrh	r3, [r7, #2]
 80018e4:	63bb      	str	r3, [r7, #56]	; 0x38
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ea:	2301      	movs	r3, #1
 80018ec:	643b      	str	r3, [r7, #64]	; 0x40
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ee:	2303      	movs	r3, #3
 80018f0:	647b      	str	r3, [r7, #68]	; 0x44
		if(htimx == &htim1){
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4a39      	ldr	r2, [pc, #228]	; (80019dc <PWMChannelConfig+0x2e8>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d102      	bne.n	8001900 <PWMChannelConfig+0x20c>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018fa:	2301      	movs	r3, #1
 80018fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80018fe:	e04b      	b.n	8001998 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim2)	{
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4a37      	ldr	r2, [pc, #220]	; (80019e0 <PWMChannelConfig+0x2ec>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d102      	bne.n	800190e <PWMChannelConfig+0x21a>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM2 ;
 8001908:	2301      	movs	r3, #1
 800190a:	64bb      	str	r3, [r7, #72]	; 0x48
 800190c:	e044      	b.n	8001998 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim3)	{
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	4a34      	ldr	r2, [pc, #208]	; (80019e4 <PWMChannelConfig+0x2f0>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d102      	bne.n	800191c <PWMChannelConfig+0x228>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001916:	2302      	movs	r3, #2
 8001918:	64bb      	str	r3, [r7, #72]	; 0x48
 800191a:	e03d      	b.n	8001998 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim4)	{
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4a32      	ldr	r2, [pc, #200]	; (80019e8 <PWMChannelConfig+0x2f4>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d102      	bne.n	800192a <PWMChannelConfig+0x236>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001924:	2302      	movs	r3, #2
 8001926:	64bb      	str	r3, [r7, #72]	; 0x48
 8001928:	e036      	b.n	8001998 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim5)	{
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4a2f      	ldr	r2, [pc, #188]	; (80019ec <PWMChannelConfig+0x2f8>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d102      	bne.n	8001938 <PWMChannelConfig+0x244>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001932:	2302      	movs	r3, #2
 8001934:	64bb      	str	r3, [r7, #72]	; 0x48
 8001936:	e02f      	b.n	8001998 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim8)	{
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4a2d      	ldr	r2, [pc, #180]	; (80019f0 <PWMChannelConfig+0x2fc>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d102      	bne.n	8001946 <PWMChannelConfig+0x252>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001940:	2303      	movs	r3, #3
 8001942:	64bb      	str	r3, [r7, #72]	; 0x48
 8001944:	e028      	b.n	8001998 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim9)	{
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4a2a      	ldr	r2, [pc, #168]	; (80019f4 <PWMChannelConfig+0x300>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d102      	bne.n	8001954 <PWMChannelConfig+0x260>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800194e:	2303      	movs	r3, #3
 8001950:	64bb      	str	r3, [r7, #72]	; 0x48
 8001952:	e021      	b.n	8001998 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim10)	{
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4a28      	ldr	r2, [pc, #160]	; (80019f8 <PWMChannelConfig+0x304>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d102      	bne.n	8001962 <PWMChannelConfig+0x26e>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800195c:	2303      	movs	r3, #3
 800195e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001960:	e01a      	b.n	8001998 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim11)	{
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4a25      	ldr	r2, [pc, #148]	; (80019fc <PWMChannelConfig+0x308>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d102      	bne.n	8001970 <PWMChannelConfig+0x27c>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800196a:	2303      	movs	r3, #3
 800196c:	64bb      	str	r3, [r7, #72]	; 0x48
 800196e:	e013      	b.n	8001998 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim12)	{
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4a23      	ldr	r2, [pc, #140]	; (8001a00 <PWMChannelConfig+0x30c>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d102      	bne.n	800197e <PWMChannelConfig+0x28a>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001978:	2309      	movs	r3, #9
 800197a:	64bb      	str	r3, [r7, #72]	; 0x48
 800197c:	e00c      	b.n	8001998 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim13)	{
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4a20      	ldr	r2, [pc, #128]	; (8001a04 <PWMChannelConfig+0x310>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d102      	bne.n	800198c <PWMChannelConfig+0x298>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001986:	2309      	movs	r3, #9
 8001988:	64bb      	str	r3, [r7, #72]	; 0x48
 800198a:	e005      	b.n	8001998 <PWMChannelConfig+0x2a4>
			}
		else if(htimx == &htim14)	{
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4a1e      	ldr	r2, [pc, #120]	; (8001a08 <PWMChannelConfig+0x314>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d101      	bne.n	8001998 <PWMChannelConfig+0x2a4>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001994:	2309      	movs	r3, #9
 8001996:	64bb      	str	r3, [r7, #72]	; 0x48
			}

	    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001998:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800199c:	4619      	mov	r1, r3
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f00e fdb2 	bl	8010508 <HAL_GPIO_Init>


	    HAL_TIM_PWM_Start(htimx,Channel);
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f012 f952 	bl	8013c50 <HAL_TIM_PWM_Start>

}
 80019ac:	bf00      	nop
 80019ae:	3768      	adds	r7, #104	; 0x68
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40022000 	.word	0x40022000
 80019b8:	40021c00 	.word	0x40021c00
 80019bc:	40021800 	.word	0x40021800
 80019c0:	40021400 	.word	0x40021400
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40020c00 	.word	0x40020c00
 80019cc:	40020800 	.word	0x40020800
 80019d0:	40020000 	.word	0x40020000
 80019d4:	40020400 	.word	0x40020400
 80019d8:	40023800 	.word	0x40023800
 80019dc:	20005f64 	.word	0x20005f64
 80019e0:	20006068 	.word	0x20006068
 80019e4:	20005d18 	.word	0x20005d18
 80019e8:	20005b54 	.word	0x20005b54
 80019ec:	20005cd8 	.word	0x20005cd8
 80019f0:	20005b14 	.word	0x20005b14
 80019f4:	20005fa4 	.word	0x20005fa4
 80019f8:	20005c34 	.word	0x20005c34
 80019fc:	20005e7c 	.word	0x20005e7c
 8001a00:	20006188 	.word	0x20006188
 8001a04:	20005dfc 	.word	0x20005dfc
 8001a08:	20006148 	.word	0x20006148

08001a0c <QEIInit>:
 * Function Arguments	: htimx					Pointer to timer handle
 * Function Return		: None
 * Function Example		: QEIInit(&htim1,5,5);  	//Initialize QEI1
 */
void QEIInit(TIM_HandleTypeDef* htimx)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08e      	sub	sp, #56	; 0x38
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	TIM_Encoder_InitTypeDef sConfig = {0};
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	2224      	movs	r2, #36	; 0x24
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f017 fc85 	bl	801932c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a22:	f107 0308 	add.w	r3, r7, #8
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]

	IRQn_Type nvic;

	if(htimx == &htim1){
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a6b      	ldr	r2, [pc, #428]	; (8001bdc <QEIInit+0x1d0>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d106      	bne.n	8001a42 <QEIInit+0x36>
		htimx->Instance = TIM1;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a6a      	ldr	r2, [pc, #424]	; (8001be0 <QEIInit+0x1d4>)
 8001a38:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8001a3a:	2319      	movs	r3, #25
 8001a3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a40:	e036      	b.n	8001ab0 <QEIInit+0xa4>
	}
	else if(htimx == &htim2)	{
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a67      	ldr	r2, [pc, #412]	; (8001be4 <QEIInit+0x1d8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d107      	bne.n	8001a5a <QEIInit+0x4e>
		htimx->Instance = TIM2;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a50:	601a      	str	r2, [r3, #0]
		nvic=TIM2_IRQn;
 8001a52:	231c      	movs	r3, #28
 8001a54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a58:	e02a      	b.n	8001ab0 <QEIInit+0xa4>
	}
	else if(htimx == &htim3)	{
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a62      	ldr	r2, [pc, #392]	; (8001be8 <QEIInit+0x1dc>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d106      	bne.n	8001a70 <QEIInit+0x64>
		htimx->Instance = TIM3;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a61      	ldr	r2, [pc, #388]	; (8001bec <QEIInit+0x1e0>)
 8001a66:	601a      	str	r2, [r3, #0]
		nvic=TIM3_IRQn;
 8001a68:	231d      	movs	r3, #29
 8001a6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a6e:	e01f      	b.n	8001ab0 <QEIInit+0xa4>
	}
	else if(htimx == &htim4)	{
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a5f      	ldr	r2, [pc, #380]	; (8001bf0 <QEIInit+0x1e4>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d106      	bne.n	8001a86 <QEIInit+0x7a>
		htimx->Instance = TIM4;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a5e      	ldr	r2, [pc, #376]	; (8001bf4 <QEIInit+0x1e8>)
 8001a7c:	601a      	str	r2, [r3, #0]
		nvic=TIM4_IRQn;
 8001a7e:	231e      	movs	r3, #30
 8001a80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a84:	e014      	b.n	8001ab0 <QEIInit+0xa4>
	}
	else if(htimx == &htim5)	{
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a5b      	ldr	r2, [pc, #364]	; (8001bf8 <QEIInit+0x1ec>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d106      	bne.n	8001a9c <QEIInit+0x90>
		htimx->Instance = TIM5;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a5a      	ldr	r2, [pc, #360]	; (8001bfc <QEIInit+0x1f0>)
 8001a92:	601a      	str	r2, [r3, #0]
		nvic=TIM5_IRQn;
 8001a94:	2332      	movs	r3, #50	; 0x32
 8001a96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a9a:	e009      	b.n	8001ab0 <QEIInit+0xa4>
	}
	else if(htimx == &htim8)	{
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a58      	ldr	r2, [pc, #352]	; (8001c00 <QEIInit+0x1f4>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d105      	bne.n	8001ab0 <QEIInit+0xa4>
		htimx->Instance = TIM8;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a57      	ldr	r2, [pc, #348]	; (8001c04 <QEIInit+0x1f8>)
 8001aa8:	601a      	str	r2, [r3, #0]
		nvic=TIM8_UP_TIM13_IRQn;
 8001aaa:	232c      	movs	r3, #44	; 0x2c
 8001aac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	htimx->Init.Prescaler = 0;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = 0xFFFF;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ac2:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]
	htimx->Init.RepetitionCounter = 0;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	615a      	str	r2, [r3, #20]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2280      	movs	r2, #128	; 0x80
 8001ad4:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	613b      	str	r3, [r7, #16]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
	sConfig.IC1Filter = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	623b      	str	r3, [r7, #32]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001aea:	2300      	movs	r3, #0
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001aee:	2301      	movs	r3, #1
 8001af0:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001af2:	2300      	movs	r3, #0
 8001af4:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfig.IC2Filter = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_Encoder_Init(htimx, &sConfig) != HAL_OK)
 8001afa:	f107 0310 	add.w	r3, r7, #16
 8001afe:	4619      	mov	r1, r3
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f012 f8e3 	bl	8013ccc <HAL_TIM_Encoder_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <QEIInit+0x104>
	{
		Error_Handler();
 8001b0c:	f003 f91a 	bl	8004d44 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8001b18:	f107 0308 	add.w	r3, r7, #8
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f012 ff68 	bl	80149f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <QEIInit+0x122>
	{
		Error_Handler();
 8001b2a:	f003 f90b 	bl	8004d44 <Error_Handler>
	}

	__HAL_TIM_CLEAR_IT(htimx, TIM_IT_UPDATE);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f06f 0201 	mvn.w	r2, #1
 8001b36:	611a      	str	r2, [r3, #16]
	__HAL_TIM_ENABLE_IT(htimx, TIM_IT_UPDATE);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68da      	ldr	r2, [r3, #12]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f042 0201 	orr.w	r2, r2, #1
 8001b46:	60da      	str	r2, [r3, #12]

	if(htimx == &htim1){
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a24      	ldr	r2, [pc, #144]	; (8001bdc <QEIInit+0x1d0>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d111      	bne.n	8001b74 <QEIInit+0x168>
		HAL_NVIC_SetPriority(nvic, QEI1_IRQ_PRIO, 0);
 8001b50:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b54:	2200      	movs	r2, #0
 8001b56:	2103      	movs	r1, #3
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f00d fda1 	bl	800f6a0 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001b5e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b62:	4618      	mov	r0, r3
 8001b64:	f00d fdd4 	bl	800f710 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001b68:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f00d fdb3 	bl	800f6d8 <HAL_NVIC_EnableIRQ>
 8001b72:	e02a      	b.n	8001bca <QEIInit+0x1be>
	}else if(htimx == &htim4){
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a1e      	ldr	r2, [pc, #120]	; (8001bf0 <QEIInit+0x1e4>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d111      	bne.n	8001ba0 <QEIInit+0x194>
		HAL_NVIC_SetPriority(nvic, QEI4_IRQ_PRIO, 1);
 8001b7c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b80:	2201      	movs	r2, #1
 8001b82:	2104      	movs	r1, #4
 8001b84:	4618      	mov	r0, r3
 8001b86:	f00d fd8b 	bl	800f6a0 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001b8a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f00d fdbe 	bl	800f710 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001b94:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f00d fd9d 	bl	800f6d8 <HAL_NVIC_EnableIRQ>
 8001b9e:	e014      	b.n	8001bca <QEIInit+0x1be>
	}else if(htimx == &htim8){
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a17      	ldr	r2, [pc, #92]	; (8001c00 <QEIInit+0x1f4>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d110      	bne.n	8001bca <QEIInit+0x1be>
		HAL_NVIC_SetPriority(nvic, QEI6_IRQ_PRIO, 0);
 8001ba8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001bac:	2200      	movs	r2, #0
 8001bae:	210e      	movs	r1, #14
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f00d fd75 	bl	800f6a0 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001bb6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f00d fda8 	bl	800f710 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001bc0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f00d fd87 	bl	800f6d8 <HAL_NVIC_EnableIRQ>
	}

	HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8001bca:	213c      	movs	r1, #60	; 0x3c
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f012 f90f 	bl	8013df0 <HAL_TIM_Encoder_Start>
}
 8001bd2:	bf00      	nop
 8001bd4:	3738      	adds	r7, #56	; 0x38
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20005f64 	.word	0x20005f64
 8001be0:	40010000 	.word	0x40010000
 8001be4:	20006068 	.word	0x20006068
 8001be8:	20005d18 	.word	0x20005d18
 8001bec:	40000400 	.word	0x40000400
 8001bf0:	20005b54 	.word	0x20005b54
 8001bf4:	40000800 	.word	0x40000800
 8001bf8:	20005cd8 	.word	0x20005cd8
 8001bfc:	40000c00 	.word	0x40000c00
 8001c00:	20005b14 	.word	0x20005b14
 8001c04:	40010400 	.word	0x40010400

08001c08 <QEIWrite>:
 * Function Return		: None
 * Function Example		: QEIWrite(QEI1, 10000);
 */

void QEIWrite(QEI_TypeDef QEIx, int32_t value)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	6039      	str	r1, [r7, #0]
 8001c12:	71fb      	strb	r3, [r7, #7]

	switch (QEIx){
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	2b05      	cmp	r3, #5
 8001c1a:	d840      	bhi.n	8001c9e <QEIWrite+0x96>
 8001c1c:	a201      	add	r2, pc, #4	; (adr r2, 8001c24 <QEIWrite+0x1c>)
 8001c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c22:	bf00      	nop
 8001c24:	08001c3d 	.word	0x08001c3d
 8001c28:	08001c4d 	.word	0x08001c4d
 8001c2c:	08001c5f 	.word	0x08001c5f
 8001c30:	08001c6f 	.word	0x08001c6f
 8001c34:	08001c7f 	.word	0x08001c7f
 8001c38:	08001c8f 	.word	0x08001c8f

	case QEI1:	BIOS_QEI1.count = value;
 8001c3c:	4a1b      	ldr	r2, [pc, #108]	; (8001cac <QEIWrite+0xa4>)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	6013      	str	r3, [r2, #0]
	TIM1->CNT = BIOS_QEI1.poscnt;
 8001c42:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <QEIWrite+0xa4>)
 8001c44:	881a      	ldrh	r2, [r3, #0]
 8001c46:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <QEIWrite+0xa8>)
 8001c48:	625a      	str	r2, [r3, #36]	; 0x24
	break;
 8001c4a:	e028      	b.n	8001c9e <QEIWrite+0x96>

	case QEI2:	BIOS_QEI2.count = value;
 8001c4c:	4a19      	ldr	r2, [pc, #100]	; (8001cb4 <QEIWrite+0xac>)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	6013      	str	r3, [r2, #0]
	TIM2->CNT = BIOS_QEI2.poscnt;
 8001c52:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <QEIWrite+0xac>)
 8001c54:	881a      	ldrh	r2, [r3, #0]
 8001c56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c5a:	625a      	str	r2, [r3, #36]	; 0x24
	break;
 8001c5c:	e01f      	b.n	8001c9e <QEIWrite+0x96>

	case QEI3:  BIOS_QEI3.count = value;
 8001c5e:	4a16      	ldr	r2, [pc, #88]	; (8001cb8 <QEIWrite+0xb0>)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	6013      	str	r3, [r2, #0]
	TIM3->CNT = BIOS_QEI3.poscnt;
 8001c64:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <QEIWrite+0xb0>)
 8001c66:	881a      	ldrh	r2, [r3, #0]
 8001c68:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <QEIWrite+0xb4>)
 8001c6a:	625a      	str	r2, [r3, #36]	; 0x24
	break;
 8001c6c:	e017      	b.n	8001c9e <QEIWrite+0x96>

	case QEI4:  BIOS_QEI4.count = value;
 8001c6e:	4a14      	ldr	r2, [pc, #80]	; (8001cc0 <QEIWrite+0xb8>)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	6013      	str	r3, [r2, #0]
	TIM4->CNT = BIOS_QEI4.poscnt;
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <QEIWrite+0xb8>)
 8001c76:	881a      	ldrh	r2, [r3, #0]
 8001c78:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <QEIWrite+0xbc>)
 8001c7a:	625a      	str	r2, [r3, #36]	; 0x24
	break;
 8001c7c:	e00f      	b.n	8001c9e <QEIWrite+0x96>

	case QEI5:	BIOS_QEI5.count = value;
 8001c7e:	4a12      	ldr	r2, [pc, #72]	; (8001cc8 <QEIWrite+0xc0>)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	6013      	str	r3, [r2, #0]
	TIM5->CNT = BIOS_QEI5.poscnt;
 8001c84:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <QEIWrite+0xc0>)
 8001c86:	881a      	ldrh	r2, [r3, #0]
 8001c88:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <QEIWrite+0xc4>)
 8001c8a:	625a      	str	r2, [r3, #36]	; 0x24
	break;
 8001c8c:	e007      	b.n	8001c9e <QEIWrite+0x96>

	case QEI6:	BIOS_QEI6.count = value;
 8001c8e:	4a10      	ldr	r2, [pc, #64]	; (8001cd0 <QEIWrite+0xc8>)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	6013      	str	r3, [r2, #0]
	TIM8->CNT = BIOS_QEI6.poscnt;
 8001c94:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <QEIWrite+0xc8>)
 8001c96:	881a      	ldrh	r2, [r3, #0]
 8001c98:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <QEIWrite+0xcc>)
 8001c9a:	625a      	str	r2, [r3, #36]	; 0x24
	break;
 8001c9c:	bf00      	nop

	}

}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	200064c4 	.word	0x200064c4
 8001cb0:	40010000 	.word	0x40010000
 8001cb4:	200064c8 	.word	0x200064c8
 8001cb8:	200064c0 	.word	0x200064c0
 8001cbc:	40000400 	.word	0x40000400
 8001cc0:	200064e8 	.word	0x200064e8
 8001cc4:	40000800 	.word	0x40000800
 8001cc8:	200064e4 	.word	0x200064e4
 8001ccc:	40000c00 	.word	0x40000c00
 8001cd0:	200064ec 	.word	0x200064ec
 8001cd4:	40010400 	.word	0x40010400

08001cd8 <QEISwap>:
 * Function Return		: None
 * Function Example		: QEISwap(QEI1, QEI_Swap);
 */

void QEISwap(QEI_TypeDef QEIx, QEI_Direction_TypeDef swap)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	460a      	mov	r2, r1
 8001ce2:	71fb      	strb	r3, [r7, #7]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	71bb      	strb	r3, [r7, #6]

	switch(QEIx){
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	2b05      	cmp	r3, #5
 8001cee:	f200 80f6 	bhi.w	8001ede <QEISwap+0x206>
 8001cf2:	a201      	add	r2, pc, #4	; (adr r2, 8001cf8 <QEISwap+0x20>)
 8001cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf8:	08001d11 	.word	0x08001d11
 8001cfc:	08001d5f 	.word	0x08001d5f
 8001d00:	08001dad 	.word	0x08001dad
 8001d04:	08001dfb 	.word	0x08001dfb
 8001d08:	08001e47 	.word	0x08001e47
 8001d0c:	08001e93 	.word	0x08001e93

	case QEI1:	if(swap == QEI_No_Swap){
 8001d10:	79bb      	ldrb	r3, [r7, #6]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10e      	bne.n	8001d34 <QEISwap+0x5c>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 8001d16:	4b7a      	ldr	r3, [pc, #488]	; (8001f00 <QEISwap+0x228>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6a1a      	ldr	r2, [r3, #32]
 8001d1c:	4b78      	ldr	r3, [pc, #480]	; (8001f00 <QEISwap+0x228>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 020a 	bic.w	r2, r2, #10
 8001d24:	621a      	str	r2, [r3, #32]
 8001d26:	4b76      	ldr	r3, [pc, #472]	; (8001f00 <QEISwap+0x228>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	4b75      	ldr	r3, [pc, #468]	; (8001f00 <QEISwap+0x228>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6a12      	ldr	r2, [r2, #32]
 8001d30:	621a      	str	r2, [r3, #32]
	default: break;

	}

	}
}
 8001d32:	e0df      	b.n	8001ef4 <QEISwap+0x21c>
	else if(swap == QEI_Swap){
 8001d34:	79bb      	ldrb	r3, [r7, #6]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	f040 80dc 	bne.w	8001ef4 <QEISwap+0x21c>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8001d3c:	4b70      	ldr	r3, [pc, #448]	; (8001f00 <QEISwap+0x228>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6a1a      	ldr	r2, [r3, #32]
 8001d42:	4b6f      	ldr	r3, [pc, #444]	; (8001f00 <QEISwap+0x228>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 020a 	bic.w	r2, r2, #10
 8001d4a:	621a      	str	r2, [r3, #32]
 8001d4c:	4b6c      	ldr	r3, [pc, #432]	; (8001f00 <QEISwap+0x228>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6a1a      	ldr	r2, [r3, #32]
 8001d52:	4b6b      	ldr	r3, [pc, #428]	; (8001f00 <QEISwap+0x228>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0202 	orr.w	r2, r2, #2
 8001d5a:	621a      	str	r2, [r3, #32]
		break;
 8001d5c:	e0ca      	b.n	8001ef4 <QEISwap+0x21c>
	case QEI2:	if(swap == QEI_No_Swap){
 8001d5e:	79bb      	ldrb	r3, [r7, #6]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10e      	bne.n	8001d82 <QEISwap+0xaa>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 8001d64:	4b67      	ldr	r3, [pc, #412]	; (8001f04 <QEISwap+0x22c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6a1a      	ldr	r2, [r3, #32]
 8001d6a:	4b66      	ldr	r3, [pc, #408]	; (8001f04 <QEISwap+0x22c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 020a 	bic.w	r2, r2, #10
 8001d72:	621a      	str	r2, [r3, #32]
 8001d74:	4b63      	ldr	r3, [pc, #396]	; (8001f04 <QEISwap+0x22c>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b62      	ldr	r3, [pc, #392]	; (8001f04 <QEISwap+0x22c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6a12      	ldr	r2, [r2, #32]
 8001d7e:	621a      	str	r2, [r3, #32]
	break;
 8001d80:	e0af      	b.n	8001ee2 <QEISwap+0x20a>
	else if(swap == QEI_Swap){
 8001d82:	79bb      	ldrb	r3, [r7, #6]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	f040 80ac 	bne.w	8001ee2 <QEISwap+0x20a>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8001d8a:	4b5e      	ldr	r3, [pc, #376]	; (8001f04 <QEISwap+0x22c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6a1a      	ldr	r2, [r3, #32]
 8001d90:	4b5c      	ldr	r3, [pc, #368]	; (8001f04 <QEISwap+0x22c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 020a 	bic.w	r2, r2, #10
 8001d98:	621a      	str	r2, [r3, #32]
 8001d9a:	4b5a      	ldr	r3, [pc, #360]	; (8001f04 <QEISwap+0x22c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6a1a      	ldr	r2, [r3, #32]
 8001da0:	4b58      	ldr	r3, [pc, #352]	; (8001f04 <QEISwap+0x22c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f042 0202 	orr.w	r2, r2, #2
 8001da8:	621a      	str	r2, [r3, #32]
	break;
 8001daa:	e09a      	b.n	8001ee2 <QEISwap+0x20a>
	case QEI3:	if(swap == QEI_No_Swap){
 8001dac:	79bb      	ldrb	r3, [r7, #6]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10e      	bne.n	8001dd0 <QEISwap+0xf8>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 8001db2:	4b55      	ldr	r3, [pc, #340]	; (8001f08 <QEISwap+0x230>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6a1a      	ldr	r2, [r3, #32]
 8001db8:	4b53      	ldr	r3, [pc, #332]	; (8001f08 <QEISwap+0x230>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 020a 	bic.w	r2, r2, #10
 8001dc0:	621a      	str	r2, [r3, #32]
 8001dc2:	4b51      	ldr	r3, [pc, #324]	; (8001f08 <QEISwap+0x230>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	4b50      	ldr	r3, [pc, #320]	; (8001f08 <QEISwap+0x230>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6a12      	ldr	r2, [r2, #32]
 8001dcc:	621a      	str	r2, [r3, #32]
	break;
 8001dce:	e08a      	b.n	8001ee6 <QEISwap+0x20e>
	else if(swap == QEI_Swap){
 8001dd0:	79bb      	ldrb	r3, [r7, #6]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	f040 8087 	bne.w	8001ee6 <QEISwap+0x20e>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8001dd8:	4b4b      	ldr	r3, [pc, #300]	; (8001f08 <QEISwap+0x230>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6a1a      	ldr	r2, [r3, #32]
 8001dde:	4b4a      	ldr	r3, [pc, #296]	; (8001f08 <QEISwap+0x230>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 020a 	bic.w	r2, r2, #10
 8001de6:	621a      	str	r2, [r3, #32]
 8001de8:	4b47      	ldr	r3, [pc, #284]	; (8001f08 <QEISwap+0x230>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6a1a      	ldr	r2, [r3, #32]
 8001dee:	4b46      	ldr	r3, [pc, #280]	; (8001f08 <QEISwap+0x230>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0202 	orr.w	r2, r2, #2
 8001df6:	621a      	str	r2, [r3, #32]
	break;
 8001df8:	e075      	b.n	8001ee6 <QEISwap+0x20e>
	case QEI4:	if(swap == QEI_No_Swap){
 8001dfa:	79bb      	ldrb	r3, [r7, #6]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10e      	bne.n	8001e1e <QEISwap+0x146>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 8001e00:	4b42      	ldr	r3, [pc, #264]	; (8001f0c <QEISwap+0x234>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6a1a      	ldr	r2, [r3, #32]
 8001e06:	4b41      	ldr	r3, [pc, #260]	; (8001f0c <QEISwap+0x234>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 020a 	bic.w	r2, r2, #10
 8001e0e:	621a      	str	r2, [r3, #32]
 8001e10:	4b3e      	ldr	r3, [pc, #248]	; (8001f0c <QEISwap+0x234>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b3d      	ldr	r3, [pc, #244]	; (8001f0c <QEISwap+0x234>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6a12      	ldr	r2, [r2, #32]
 8001e1a:	621a      	str	r2, [r3, #32]
	break;
 8001e1c:	e065      	b.n	8001eea <QEISwap+0x212>
	else if(swap == QEI_Swap){
 8001e1e:	79bb      	ldrb	r3, [r7, #6]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d162      	bne.n	8001eea <QEISwap+0x212>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8001e24:	4b39      	ldr	r3, [pc, #228]	; (8001f0c <QEISwap+0x234>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6a1a      	ldr	r2, [r3, #32]
 8001e2a:	4b38      	ldr	r3, [pc, #224]	; (8001f0c <QEISwap+0x234>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 020a 	bic.w	r2, r2, #10
 8001e32:	621a      	str	r2, [r3, #32]
 8001e34:	4b35      	ldr	r3, [pc, #212]	; (8001f0c <QEISwap+0x234>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6a1a      	ldr	r2, [r3, #32]
 8001e3a:	4b34      	ldr	r3, [pc, #208]	; (8001f0c <QEISwap+0x234>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0202 	orr.w	r2, r2, #2
 8001e42:	621a      	str	r2, [r3, #32]
	break;
 8001e44:	e051      	b.n	8001eea <QEISwap+0x212>
	case QEI5:	if(swap == QEI_No_Swap){
 8001e46:	79bb      	ldrb	r3, [r7, #6]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d10e      	bne.n	8001e6a <QEISwap+0x192>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 8001e4c:	4b30      	ldr	r3, [pc, #192]	; (8001f10 <QEISwap+0x238>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6a1a      	ldr	r2, [r3, #32]
 8001e52:	4b2f      	ldr	r3, [pc, #188]	; (8001f10 <QEISwap+0x238>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 020a 	bic.w	r2, r2, #10
 8001e5a:	621a      	str	r2, [r3, #32]
 8001e5c:	4b2c      	ldr	r3, [pc, #176]	; (8001f10 <QEISwap+0x238>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4b2b      	ldr	r3, [pc, #172]	; (8001f10 <QEISwap+0x238>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6a12      	ldr	r2, [r2, #32]
 8001e66:	621a      	str	r2, [r3, #32]
	break;
 8001e68:	e041      	b.n	8001eee <QEISwap+0x216>
	else if(swap == QEI_Swap){
 8001e6a:	79bb      	ldrb	r3, [r7, #6]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d13e      	bne.n	8001eee <QEISwap+0x216>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8001e70:	4b27      	ldr	r3, [pc, #156]	; (8001f10 <QEISwap+0x238>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6a1a      	ldr	r2, [r3, #32]
 8001e76:	4b26      	ldr	r3, [pc, #152]	; (8001f10 <QEISwap+0x238>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 020a 	bic.w	r2, r2, #10
 8001e7e:	621a      	str	r2, [r3, #32]
 8001e80:	4b23      	ldr	r3, [pc, #140]	; (8001f10 <QEISwap+0x238>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6a1a      	ldr	r2, [r3, #32]
 8001e86:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <QEISwap+0x238>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0202 	orr.w	r2, r2, #2
 8001e8e:	621a      	str	r2, [r3, #32]
	break;
 8001e90:	e02d      	b.n	8001eee <QEISwap+0x216>
	case QEI6:	if(swap == QEI_No_Swap){
 8001e92:	79bb      	ldrb	r3, [r7, #6]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10e      	bne.n	8001eb6 <QEISwap+0x1de>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim8, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 8001e98:	4b1e      	ldr	r3, [pc, #120]	; (8001f14 <QEISwap+0x23c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6a1a      	ldr	r2, [r3, #32]
 8001e9e:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <QEISwap+0x23c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 020a 	bic.w	r2, r2, #10
 8001ea6:	621a      	str	r2, [r3, #32]
 8001ea8:	4b1a      	ldr	r3, [pc, #104]	; (8001f14 <QEISwap+0x23c>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <QEISwap+0x23c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6a12      	ldr	r2, [r2, #32]
 8001eb2:	621a      	str	r2, [r3, #32]
	break;
 8001eb4:	e01d      	b.n	8001ef2 <QEISwap+0x21a>
	else if(swap == QEI_Swap){
 8001eb6:	79bb      	ldrb	r3, [r7, #6]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d11a      	bne.n	8001ef2 <QEISwap+0x21a>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim8, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8001ebc:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <QEISwap+0x23c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6a1a      	ldr	r2, [r3, #32]
 8001ec2:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <QEISwap+0x23c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 020a 	bic.w	r2, r2, #10
 8001eca:	621a      	str	r2, [r3, #32]
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <QEISwap+0x23c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6a1a      	ldr	r2, [r3, #32]
 8001ed2:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <QEISwap+0x23c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0202 	orr.w	r2, r2, #2
 8001eda:	621a      	str	r2, [r3, #32]
	break;
 8001edc:	e009      	b.n	8001ef2 <QEISwap+0x21a>
	default: break;
 8001ede:	bf00      	nop
 8001ee0:	e008      	b.n	8001ef4 <QEISwap+0x21c>
	break;
 8001ee2:	bf00      	nop
 8001ee4:	e006      	b.n	8001ef4 <QEISwap+0x21c>
	break;
 8001ee6:	bf00      	nop
 8001ee8:	e004      	b.n	8001ef4 <QEISwap+0x21c>
	break;
 8001eea:	bf00      	nop
 8001eec:	e002      	b.n	8001ef4 <QEISwap+0x21c>
	break;
 8001eee:	bf00      	nop
 8001ef0:	e000      	b.n	8001ef4 <QEISwap+0x21c>
	break;
 8001ef2:	bf00      	nop
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	20005f64 	.word	0x20005f64
 8001f04:	20006068 	.word	0x20006068
 8001f08:	20005d18 	.word	0x20005d18
 8001f0c:	20005b54 	.word	0x20005b54
 8001f10:	20005cd8 	.word	0x20005cd8
 8001f14:	20005b14 	.word	0x20005b14

08001f18 <QEIDelay>:
 * Function Return		: None
 * Function Example		: QEIDelay(100);
 */

void QEIDelay(uint8_t value)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
	uint8_t currentvalues;
	value = value * 8400;
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	461a      	mov	r2, r3
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	011b      	lsls	r3, r3, #4
 8001f2c:	71fb      	strb	r3, [r7, #7]
	while(currentvalues < value)
 8001f2e:	e002      	b.n	8001f36 <QEIDelay+0x1e>
	{
		currentvalues++;
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	3301      	adds	r3, #1
 8001f34:	73fb      	strb	r3, [r7, #15]
	while(currentvalues < value)
 8001f36:	7bfa      	ldrb	r2, [r7, #15]
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d3f8      	bcc.n	8001f30 <QEIDelay+0x18>
	}
	currentvalues = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	73fb      	strb	r3, [r7, #15]
}
 8001f42:	bf00      	nop
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
	...

08001f50 <QEIRead>:
 * Function Arguments	: QEIx		where x can be 1 to 5.
 * Function Return		: QEI's count with 32 bits with sign.
 * Function Example		: QEIRead(QEI1);
 */

int32_t QEIRead(QEI_TypeDef QEIx){
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]

	int32_t value;
	switch(QEIx){
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	2b05      	cmp	r3, #5
 8001f60:	d845      	bhi.n	8001fee <QEIRead+0x9e>
 8001f62:	a201      	add	r2, pc, #4	; (adr r2, 8001f68 <QEIRead+0x18>)
 8001f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f68:	08001f81 	.word	0x08001f81
 8001f6c:	08001f93 	.word	0x08001f93
 8001f70:	08001fa7 	.word	0x08001fa7
 8001f74:	08001fb9 	.word	0x08001fb9
 8001f78:	08001fcb 	.word	0x08001fcb
 8001f7c:	08001fdd 	.word	0x08001fdd

	case QEI1:	BIOS_QEI1.poscnt = TIM1-> CNT;
 8001f80:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <QEIRead+0xb0>)
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <QEIRead+0xb4>)
 8001f88:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI1.count;
 8001f8a:	4b1e      	ldr	r3, [pc, #120]	; (8002004 <QEIRead+0xb4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	60fb      	str	r3, [r7, #12]
	break;
 8001f90:	e02e      	b.n	8001ff0 <QEIRead+0xa0>

	case QEI2:	BIOS_QEI2.poscnt = TIM2-> CNT;
 8001f92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <QEIRead+0xb8>)
 8001f9c:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI2.count;
 8001f9e:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <QEIRead+0xb8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	60fb      	str	r3, [r7, #12]
	break;
 8001fa4:	e024      	b.n	8001ff0 <QEIRead+0xa0>

	case QEI3:	BIOS_QEI3.poscnt = TIM3-> CNT;
 8001fa6:	4b19      	ldr	r3, [pc, #100]	; (800200c <QEIRead+0xbc>)
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	4b18      	ldr	r3, [pc, #96]	; (8002010 <QEIRead+0xc0>)
 8001fae:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI3.count;
 8001fb0:	4b17      	ldr	r3, [pc, #92]	; (8002010 <QEIRead+0xc0>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	60fb      	str	r3, [r7, #12]
	break;
 8001fb6:	e01b      	b.n	8001ff0 <QEIRead+0xa0>

	case QEI4:	BIOS_QEI4.poscnt = TIM4-> CNT;
 8001fb8:	4b16      	ldr	r3, [pc, #88]	; (8002014 <QEIRead+0xc4>)
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	4b16      	ldr	r3, [pc, #88]	; (8002018 <QEIRead+0xc8>)
 8001fc0:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI4.count;
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <QEIRead+0xc8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	60fb      	str	r3, [r7, #12]
	break;
 8001fc8:	e012      	b.n	8001ff0 <QEIRead+0xa0>

	case QEI5:	BIOS_QEI5.poscnt = TIM5-> CNT;
 8001fca:	4b14      	ldr	r3, [pc, #80]	; (800201c <QEIRead+0xcc>)
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	4b13      	ldr	r3, [pc, #76]	; (8002020 <QEIRead+0xd0>)
 8001fd2:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI5.count;
 8001fd4:	4b12      	ldr	r3, [pc, #72]	; (8002020 <QEIRead+0xd0>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	60fb      	str	r3, [r7, #12]
	break;
 8001fda:	e009      	b.n	8001ff0 <QEIRead+0xa0>

	case QEI6:	BIOS_QEI6.poscnt = TIM8-> CNT;
 8001fdc:	4b11      	ldr	r3, [pc, #68]	; (8002024 <QEIRead+0xd4>)
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <QEIRead+0xd8>)
 8001fe4:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI6.count;
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <QEIRead+0xd8>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	60fb      	str	r3, [r7, #12]
	break;
 8001fec:	e000      	b.n	8001ff0 <QEIRead+0xa0>

	default: break;
 8001fee:	bf00      	nop
	}

	return value;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40010000 	.word	0x40010000
 8002004:	200064c4 	.word	0x200064c4
 8002008:	200064c8 	.word	0x200064c8
 800200c:	40000400 	.word	0x40000400
 8002010:	200064c0 	.word	0x200064c0
 8002014:	40000800 	.word	0x40000800
 8002018:	200064e8 	.word	0x200064e8
 800201c:	40000c00 	.word	0x40000c00
 8002020:	200064e4 	.word	0x200064e4
 8002024:	40010400 	.word	0x40010400
 8002028:	200064ec 	.word	0x200064ec

0800202c <SHIFTREGInit>:
 * Function Return		: None
 * Function Example		: SHIFTREGInit(&shiftreg, CASCADE_1, GPIOD, GPIO_Pin_0, GPIOD, GPIO_Pin_1, GPIOD, GPIO_Pin_2);
 */

void SHIFTREGInit (shiftreg_t* shiftreg, fSR cascade, GPIO_TypeDef *GPIOx_sck, uint16_t GPIO_Pin_sck,
		           GPIO_TypeDef *GPIOx_rck , uint16_t GPIO_Pin_rck,GPIO_TypeDef *GPIOx_si, uint16_t GPIO_Pin_si){
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af02      	add	r7, sp, #8
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	461a      	mov	r2, r3
 8002038:	460b      	mov	r3, r1
 800203a:	72fb      	strb	r3, [r7, #11]
 800203c:	4613      	mov	r3, r2
 800203e:	813b      	strh	r3, [r7, #8]

	shiftreg->flag = cascade;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	7afa      	ldrb	r2, [r7, #11]
 8002044:	759a      	strb	r2, [r3, #22]

	shiftreg->GPIOx_sck = GPIOx_sck;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	601a      	str	r2, [r3, #0]
	shiftreg->GPIO_Pin_sck = GPIO_Pin_sck;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	893a      	ldrh	r2, [r7, #8]
 8002050:	809a      	strh	r2, [r3, #4]

	shiftreg->GPIOx_rck = GPIOx_rck;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	609a      	str	r2, [r3, #8]
	shiftreg->GPIO_Pin_rck = GPIO_Pin_rck;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8bba      	ldrh	r2, [r7, #28]
 800205c:	819a      	strh	r2, [r3, #12]

	shiftreg->GPIOx_si = GPIOx_si;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6a3a      	ldr	r2, [r7, #32]
 8002062:	611a      	str	r2, [r3, #16]
	shiftreg->GPIO_Pin_si = GPIO_Pin_si;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002068:	829a      	strh	r2, [r3, #20]

	GPIOPinsInit(shiftreg->GPIOx_sck, shiftreg->GPIO_Pin_sck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6818      	ldr	r0, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8899      	ldrh	r1, [r3, #4]
 8002072:	2301      	movs	r3, #1
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	2302      	movs	r3, #2
 8002078:	2201      	movs	r2, #1
 800207a:	f7ff f95b 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_rck, shiftreg->GPIO_Pin_rck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6898      	ldr	r0, [r3, #8]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8999      	ldrh	r1, [r3, #12]
 8002086:	2301      	movs	r3, #1
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	2302      	movs	r3, #2
 800208c:	2201      	movs	r2, #1
 800208e:	f7ff f951 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_si, shiftreg->GPIO_Pin_si , GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6918      	ldr	r0, [r3, #16]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8a99      	ldrh	r1, [r3, #20]
 800209a:	2301      	movs	r3, #1
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	2302      	movs	r3, #2
 80020a0:	2201      	movs	r2, #1
 80020a2:	f7ff f947 	bl	8001334 <GPIOPinsInit>

}
 80020a6:	bf00      	nop
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <SHIFTREGShift>:
 * Function Arguments	: shiftreg			pointer to structure
 * Function Return		: None
 * Function Example		: SHIFTREGShift (&shiftreg);
 */

void SHIFTREGShift(shiftreg_t* shiftreg){
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b084      	sub	sp, #16
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]

	uint8_t out, i, j;

	i = shiftreg->flag;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	7d9b      	ldrb	r3, [r3, #22]
 80020ba:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6818      	ldr	r0, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	889b      	ldrh	r3, [r3, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	4619      	mov	r1, r3
 80020c8:	f00e fcb6 	bl	8010a38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6898      	ldr	r0, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	899b      	ldrh	r3, [r3, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	4619      	mov	r1, r3
 80020d8:	f00e fcae 	bl	8010a38 <HAL_GPIO_WritePin>

	do{
		out = shiftreg->cast[i].Byte;
 80020dc:	7bba      	ldrb	r2, [r7, #14]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3206      	adds	r2, #6
 80020e2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80020e6:	73fb      	strb	r3, [r7, #15]
		for (j = 8; j; j--){
 80020e8:	2308      	movs	r3, #8
 80020ea:	737b      	strb	r3, [r7, #13]
 80020ec:	e02a      	b.n	8002144 <SHIFTREGShift+0x96>
			(out & 0x80) ? HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_SET) : HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_RESET);
 80020ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	da08      	bge.n	8002108 <SHIFTREGShift+0x5a>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6918      	ldr	r0, [r3, #16]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	8a9b      	ldrh	r3, [r3, #20]
 80020fe:	2201      	movs	r2, #1
 8002100:	4619      	mov	r1, r3
 8002102:	f00e fc99 	bl	8010a38 <HAL_GPIO_WritePin>
 8002106:	e007      	b.n	8002118 <SHIFTREGShift+0x6a>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6918      	ldr	r0, [r3, #16]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	8a9b      	ldrh	r3, [r3, #20]
 8002110:	2200      	movs	r2, #0
 8002112:	4619      	mov	r1, r3
 8002114:	f00e fc90 	bl	8010a38 <HAL_GPIO_WritePin>
			out <<= 1;
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_SET);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6818      	ldr	r0, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	889b      	ldrh	r3, [r3, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	4619      	mov	r1, r3
 800212a:	f00e fc85 	bl	8010a38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6818      	ldr	r0, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	889b      	ldrh	r3, [r3, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	4619      	mov	r1, r3
 800213a:	f00e fc7d 	bl	8010a38 <HAL_GPIO_WritePin>
		for (j = 8; j; j--){
 800213e:	7b7b      	ldrb	r3, [r7, #13]
 8002140:	3b01      	subs	r3, #1
 8002142:	737b      	strb	r3, [r7, #13]
 8002144:	7b7b      	ldrb	r3, [r7, #13]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1d1      	bne.n	80020ee <SHIFTREGShift+0x40>
		}
	}while(i--);
 800214a:	7bbb      	ldrb	r3, [r7, #14]
 800214c:	1e5a      	subs	r2, r3, #1
 800214e:	73ba      	strb	r2, [r7, #14]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1c3      	bne.n	80020dc <SHIFTREGShift+0x2e>

	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_SET);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6898      	ldr	r0, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	899b      	ldrh	r3, [r3, #12]
 800215c:	2201      	movs	r2, #1
 800215e:	4619      	mov	r1, r3
 8002160:	f00e fc6a 	bl	8010a38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6898      	ldr	r0, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	899b      	ldrh	r3, [r3, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	4619      	mov	r1, r3
 8002170:	f00e fc62 	bl	8010a38 <HAL_GPIO_WritePin>

}
 8002174:	bf00      	nop
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <HAL_MspInit+0x54>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	4a11      	ldr	r2, [pc, #68]	; (80021d0 <HAL_MspInit+0x54>)
 800218c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002190:	6453      	str	r3, [r2, #68]	; 0x44
 8002192:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <HAL_MspInit+0x54>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	603b      	str	r3, [r7, #0]
 80021a2:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_MspInit+0x54>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <HAL_MspInit+0x54>)
 80021a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ac:	6413      	str	r3, [r2, #64]	; 0x40
 80021ae:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <HAL_MspInit+0x54>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b6:	603b      	str	r3, [r7, #0]
 80021b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	210f      	movs	r1, #15
 80021be:	f06f 0001 	mvn.w	r0, #1
 80021c2:	f00d fa6d 	bl	800f6a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40023800 	.word	0x40023800

080021d4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08c      	sub	sp, #48	; 0x30
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021dc:	f107 031c 	add.w	r3, r7, #28
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a42      	ldr	r2, [pc, #264]	; (80022fc <HAL_CAN_MspInit+0x128>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d135      	bne.n	8002262 <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80021f6:	4b42      	ldr	r3, [pc, #264]	; (8002300 <HAL_CAN_MspInit+0x12c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	3301      	adds	r3, #1
 80021fc:	4a40      	ldr	r2, [pc, #256]	; (8002300 <HAL_CAN_MspInit+0x12c>)
 80021fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002200:	4b3f      	ldr	r3, [pc, #252]	; (8002300 <HAL_CAN_MspInit+0x12c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d10d      	bne.n	8002224 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002208:	2300      	movs	r3, #0
 800220a:	61bb      	str	r3, [r7, #24]
 800220c:	4b3d      	ldr	r3, [pc, #244]	; (8002304 <HAL_CAN_MspInit+0x130>)
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	4a3c      	ldr	r2, [pc, #240]	; (8002304 <HAL_CAN_MspInit+0x130>)
 8002212:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002216:	6413      	str	r3, [r2, #64]	; 0x40
 8002218:	4b3a      	ldr	r3, [pc, #232]	; (8002304 <HAL_CAN_MspInit+0x130>)
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002220:	61bb      	str	r3, [r7, #24]
 8002222:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	4b36      	ldr	r3, [pc, #216]	; (8002304 <HAL_CAN_MspInit+0x130>)
 800222a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222c:	4a35      	ldr	r2, [pc, #212]	; (8002304 <HAL_CAN_MspInit+0x130>)
 800222e:	f043 0308 	orr.w	r3, r3, #8
 8002232:	6313      	str	r3, [r2, #48]	; 0x30
 8002234:	4b33      	ldr	r3, [pc, #204]	; (8002304 <HAL_CAN_MspInit+0x130>)
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	f003 0308 	and.w	r3, r3, #8
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	697b      	ldr	r3, [r7, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002240:	2303      	movs	r3, #3
 8002242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002244:	2302      	movs	r3, #2
 8002246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224c:	2303      	movs	r3, #3
 800224e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002250:	2309      	movs	r3, #9
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002254:	f107 031c 	add.w	r3, r7, #28
 8002258:	4619      	mov	r1, r3
 800225a:	482b      	ldr	r0, [pc, #172]	; (8002308 <HAL_CAN_MspInit+0x134>)
 800225c:	f00e f954 	bl	8010508 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002260:	e048      	b.n	80022f4 <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a29      	ldr	r2, [pc, #164]	; (800230c <HAL_CAN_MspInit+0x138>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d143      	bne.n	80022f4 <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800226c:	2300      	movs	r3, #0
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	4b24      	ldr	r3, [pc, #144]	; (8002304 <HAL_CAN_MspInit+0x130>)
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	4a23      	ldr	r2, [pc, #140]	; (8002304 <HAL_CAN_MspInit+0x130>)
 8002276:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800227a:	6413      	str	r3, [r2, #64]	; 0x40
 800227c:	4b21      	ldr	r3, [pc, #132]	; (8002304 <HAL_CAN_MspInit+0x130>)
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002284:	613b      	str	r3, [r7, #16]
 8002286:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002288:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <HAL_CAN_MspInit+0x12c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	3301      	adds	r3, #1
 800228e:	4a1c      	ldr	r2, [pc, #112]	; (8002300 <HAL_CAN_MspInit+0x12c>)
 8002290:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002292:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <HAL_CAN_MspInit+0x12c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d10d      	bne.n	80022b6 <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	4b19      	ldr	r3, [pc, #100]	; (8002304 <HAL_CAN_MspInit+0x130>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	4a18      	ldr	r2, [pc, #96]	; (8002304 <HAL_CAN_MspInit+0x130>)
 80022a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022a8:	6413      	str	r3, [r2, #64]	; 0x40
 80022aa:	4b16      	ldr	r3, [pc, #88]	; (8002304 <HAL_CAN_MspInit+0x130>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_CAN_MspInit+0x130>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4a11      	ldr	r2, [pc, #68]	; (8002304 <HAL_CAN_MspInit+0x130>)
 80022c0:	f043 0302 	orr.w	r3, r3, #2
 80022c4:	6313      	str	r3, [r2, #48]	; 0x30
 80022c6:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <HAL_CAN_MspInit+0x130>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80022d2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80022d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d8:	2302      	movs	r3, #2
 80022da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e0:	2303      	movs	r3, #3
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80022e4:	2309      	movs	r3, #9
 80022e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e8:	f107 031c 	add.w	r3, r7, #28
 80022ec:	4619      	mov	r1, r3
 80022ee:	4808      	ldr	r0, [pc, #32]	; (8002310 <HAL_CAN_MspInit+0x13c>)
 80022f0:	f00e f90a 	bl	8010508 <HAL_GPIO_Init>
}
 80022f4:	bf00      	nop
 80022f6:	3730      	adds	r7, #48	; 0x30
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40006400 	.word	0x40006400
 8002300:	200002c4 	.word	0x200002c4
 8002304:	40023800 	.word	0x40023800
 8002308:	40020c00 	.word	0x40020c00
 800230c:	40006800 	.word	0x40006800
 8002310:	40020400 	.word	0x40020400

08002314 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08e      	sub	sp, #56	; 0x38
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a5c      	ldr	r2, [pc, #368]	; (80024a4 <HAL_I2C_MspInit+0x190>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d12d      	bne.n	8002392 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	623b      	str	r3, [r7, #32]
 800233a:	4b5b      	ldr	r3, [pc, #364]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4a5a      	ldr	r2, [pc, #360]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4b58      	ldr	r3, [pc, #352]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	623b      	str	r3, [r7, #32]
 8002350:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002352:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002358:	2312      	movs	r3, #18
 800235a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800235c:	2301      	movs	r3, #1
 800235e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002360:	2303      	movs	r3, #3
 8002362:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002364:	2304      	movs	r3, #4
 8002366:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800236c:	4619      	mov	r1, r3
 800236e:	484f      	ldr	r0, [pc, #316]	; (80024ac <HAL_I2C_MspInit+0x198>)
 8002370:	f00e f8ca 	bl	8010508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002374:	2300      	movs	r3, #0
 8002376:	61fb      	str	r3, [r7, #28]
 8002378:	4b4b      	ldr	r3, [pc, #300]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	4a4a      	ldr	r2, [pc, #296]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 800237e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002382:	6413      	str	r3, [r2, #64]	; 0x40
 8002384:	4b48      	ldr	r3, [pc, #288]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800238c:	61fb      	str	r3, [r7, #28]
 800238e:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002390:	e083      	b.n	800249a <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a46      	ldr	r2, [pc, #280]	; (80024b0 <HAL_I2C_MspInit+0x19c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d12d      	bne.n	80023f8 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800239c:	2300      	movs	r3, #0
 800239e:	61bb      	str	r3, [r7, #24]
 80023a0:	4b41      	ldr	r3, [pc, #260]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 80023a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a4:	4a40      	ldr	r2, [pc, #256]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 80023a6:	f043 0302 	orr.w	r3, r3, #2
 80023aa:	6313      	str	r3, [r2, #48]	; 0x30
 80023ac:	4b3e      	ldr	r3, [pc, #248]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 80023ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	61bb      	str	r3, [r7, #24]
 80023b6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80023b8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023be:	2312      	movs	r3, #18
 80023c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023c2:	2301      	movs	r3, #1
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c6:	2303      	movs	r3, #3
 80023c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80023ca:	2304      	movs	r3, #4
 80023cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d2:	4619      	mov	r1, r3
 80023d4:	4835      	ldr	r0, [pc, #212]	; (80024ac <HAL_I2C_MspInit+0x198>)
 80023d6:	f00e f897 	bl	8010508 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	4b32      	ldr	r3, [pc, #200]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	4a31      	ldr	r2, [pc, #196]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 80023e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023e8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ea:	4b2f      	ldr	r3, [pc, #188]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	697b      	ldr	r3, [r7, #20]
}
 80023f6:	e050      	b.n	800249a <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a2d      	ldr	r2, [pc, #180]	; (80024b4 <HAL_I2C_MspInit+0x1a0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d14b      	bne.n	800249a <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	4b28      	ldr	r3, [pc, #160]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	4a27      	ldr	r2, [pc, #156]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 800240c:	f043 0304 	orr.w	r3, r3, #4
 8002410:	6313      	str	r3, [r2, #48]	; 0x30
 8002412:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	4b21      	ldr	r3, [pc, #132]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	4a20      	ldr	r2, [pc, #128]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6313      	str	r3, [r2, #48]	; 0x30
 800242e:	4b1e      	ldr	r3, [pc, #120]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800243a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002440:	2312      	movs	r3, #18
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002444:	2301      	movs	r3, #1
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002448:	2303      	movs	r3, #3
 800244a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800244c:	2304      	movs	r3, #4
 800244e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002454:	4619      	mov	r1, r3
 8002456:	4818      	ldr	r0, [pc, #96]	; (80024b8 <HAL_I2C_MspInit+0x1a4>)
 8002458:	f00e f856 	bl	8010508 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800245c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002462:	2312      	movs	r3, #18
 8002464:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002466:	2301      	movs	r3, #1
 8002468:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246a:	2303      	movs	r3, #3
 800246c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800246e:	2304      	movs	r3, #4
 8002470:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002476:	4619      	mov	r1, r3
 8002478:	4810      	ldr	r0, [pc, #64]	; (80024bc <HAL_I2C_MspInit+0x1a8>)
 800247a:	f00e f845 	bl	8010508 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	4a08      	ldr	r2, [pc, #32]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 8002488:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800248c:	6413      	str	r3, [r2, #64]	; 0x40
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_I2C_MspInit+0x194>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]
}
 800249a:	bf00      	nop
 800249c:	3738      	adds	r7, #56	; 0x38
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40005400 	.word	0x40005400
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40020400 	.word	0x40020400
 80024b0:	40005800 	.word	0x40005800
 80024b4:	40005c00 	.word	0x40005c00
 80024b8:	40020800 	.word	0x40020800
 80024bc:	40020000 	.word	0x40020000

080024c0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a2a      	ldr	r2, [pc, #168]	; (8002578 <HAL_I2C_MspDeInit+0xb8>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d116      	bne.n	8002500 <HAL_I2C_MspDeInit+0x40>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80024d2:	4b2a      	ldr	r3, [pc, #168]	; (800257c <HAL_I2C_MspDeInit+0xbc>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	4a29      	ldr	r2, [pc, #164]	; (800257c <HAL_I2C_MspDeInit+0xbc>)
 80024d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024dc:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80024de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024e2:	4827      	ldr	r0, [pc, #156]	; (8002580 <HAL_I2C_MspDeInit+0xc0>)
 80024e4:	f00e f9ac 	bl	8010840 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80024e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024ec:	4824      	ldr	r0, [pc, #144]	; (8002580 <HAL_I2C_MspDeInit+0xc0>)
 80024ee:	f00e f9a7 	bl	8010840 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 80024f2:	201f      	movs	r0, #31
 80024f4:	f00d f8fe 	bl	800f6f4 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 80024f8:	2020      	movs	r0, #32
 80024fa:	f00d f8fb 	bl	800f6f4 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80024fe:	e036      	b.n	800256e <HAL_I2C_MspDeInit+0xae>
  else if(hi2c->Instance==I2C2)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a1f      	ldr	r2, [pc, #124]	; (8002584 <HAL_I2C_MspDeInit+0xc4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d116      	bne.n	8002538 <HAL_I2C_MspDeInit+0x78>
    __HAL_RCC_I2C2_CLK_DISABLE();
 800250a:	4b1c      	ldr	r3, [pc, #112]	; (800257c <HAL_I2C_MspDeInit+0xbc>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	4a1b      	ldr	r2, [pc, #108]	; (800257c <HAL_I2C_MspDeInit+0xbc>)
 8002510:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002514:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002516:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800251a:	4819      	ldr	r0, [pc, #100]	; (8002580 <HAL_I2C_MspDeInit+0xc0>)
 800251c:	f00e f990 	bl	8010840 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8002520:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002524:	4816      	ldr	r0, [pc, #88]	; (8002580 <HAL_I2C_MspDeInit+0xc0>)
 8002526:	f00e f98b 	bl	8010840 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 800252a:	2021      	movs	r0, #33	; 0x21
 800252c:	f00d f8e2 	bl	800f6f4 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8002530:	2022      	movs	r0, #34	; 0x22
 8002532:	f00d f8df 	bl	800f6f4 <HAL_NVIC_DisableIRQ>
}
 8002536:	e01a      	b.n	800256e <HAL_I2C_MspDeInit+0xae>
  else if(hi2c->Instance==I2C3)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a12      	ldr	r2, [pc, #72]	; (8002588 <HAL_I2C_MspDeInit+0xc8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d115      	bne.n	800256e <HAL_I2C_MspDeInit+0xae>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <HAL_I2C_MspDeInit+0xbc>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	4a0d      	ldr	r2, [pc, #52]	; (800257c <HAL_I2C_MspDeInit+0xbc>)
 8002548:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800254c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 800254e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002552:	480e      	ldr	r0, [pc, #56]	; (800258c <HAL_I2C_MspDeInit+0xcc>)
 8002554:	f00e f974 	bl	8010840 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8002558:	f44f 7180 	mov.w	r1, #256	; 0x100
 800255c:	480c      	ldr	r0, [pc, #48]	; (8002590 <HAL_I2C_MspDeInit+0xd0>)
 800255e:	f00e f96f 	bl	8010840 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8002562:	2048      	movs	r0, #72	; 0x48
 8002564:	f00d f8c6 	bl	800f6f4 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8002568:	2049      	movs	r0, #73	; 0x49
 800256a:	f00d f8c3 	bl	800f6f4 <HAL_NVIC_DisableIRQ>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40005400 	.word	0x40005400
 800257c:	40023800 	.word	0x40023800
 8002580:	40020400 	.word	0x40020400
 8002584:	40005800 	.word	0x40005800
 8002588:	40005c00 	.word	0x40005c00
 800258c:	40020800 	.word	0x40020800
 8002590:	40020000 	.word	0x40020000

08002594 <HAL_TIM_PWM_MspInit>:


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002594:	b480      	push	{r7}
 8002596:	b091      	sub	sp, #68	; 0x44
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
	if(htim_pwm->Instance==TIM1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a8d      	ldr	r2, [pc, #564]	; (80027d8 <HAL_TIM_PWM_MspInit+0x244>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d10e      	bne.n	80025c4 <HAL_TIM_PWM_MspInit+0x30>
		{
			/* Peripheral clock enable */
			__HAL_RCC_TIM1_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025aa:	4b8c      	ldr	r3, [pc, #560]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	4a8b      	ldr	r2, [pc, #556]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	6453      	str	r3, [r2, #68]	; 0x44
 80025b6:	4b89      	ldr	r3, [pc, #548]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	  {
	    /* Peripheral clock enable */
	    __HAL_RCC_TIM14_CLK_ENABLE();
	  }

}
 80025c2:	e102      	b.n	80027ca <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM2)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025cc:	d10e      	bne.n	80025ec <HAL_TIM_PWM_MspInit+0x58>
			__HAL_RCC_TIM2_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80025d2:	4b82      	ldr	r3, [pc, #520]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	4a81      	ldr	r2, [pc, #516]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	6413      	str	r3, [r2, #64]	; 0x40
 80025de:	4b7f      	ldr	r3, [pc, #508]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80025e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80025ea:	e0ee      	b.n	80027ca <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM3)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a7b      	ldr	r2, [pc, #492]	; (80027e0 <HAL_TIM_PWM_MspInit+0x24c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d10e      	bne.n	8002614 <HAL_TIM_PWM_MspInit+0x80>
			__HAL_RCC_TIM3_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	637b      	str	r3, [r7, #52]	; 0x34
 80025fa:	4b78      	ldr	r3, [pc, #480]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	4a77      	ldr	r2, [pc, #476]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002600:	f043 0302 	orr.w	r3, r3, #2
 8002604:	6413      	str	r3, [r2, #64]	; 0x40
 8002606:	4b75      	ldr	r3, [pc, #468]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	637b      	str	r3, [r7, #52]	; 0x34
 8002610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002612:	e0da      	b.n	80027ca <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM4)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a72      	ldr	r2, [pc, #456]	; (80027e4 <HAL_TIM_PWM_MspInit+0x250>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d10e      	bne.n	800263c <HAL_TIM_PWM_MspInit+0xa8>
			__HAL_RCC_TIM4_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	633b      	str	r3, [r7, #48]	; 0x30
 8002622:	4b6e      	ldr	r3, [pc, #440]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	4a6d      	ldr	r2, [pc, #436]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002628:	f043 0304 	orr.w	r3, r3, #4
 800262c:	6413      	str	r3, [r2, #64]	; 0x40
 800262e:	4b6b      	ldr	r3, [pc, #428]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f003 0304 	and.w	r3, r3, #4
 8002636:	633b      	str	r3, [r7, #48]	; 0x30
 8002638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800263a:	e0c6      	b.n	80027ca <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM5)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a69      	ldr	r2, [pc, #420]	; (80027e8 <HAL_TIM_PWM_MspInit+0x254>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d10e      	bne.n	8002664 <HAL_TIM_PWM_MspInit+0xd0>
	    __HAL_RCC_TIM5_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	62fb      	str	r3, [r7, #44]	; 0x2c
 800264a:	4b64      	ldr	r3, [pc, #400]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	4a63      	ldr	r2, [pc, #396]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002650:	f043 0308 	orr.w	r3, r3, #8
 8002654:	6413      	str	r3, [r2, #64]	; 0x40
 8002656:	4b61      	ldr	r3, [pc, #388]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002662:	e0b2      	b.n	80027ca <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM6)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a60      	ldr	r2, [pc, #384]	; (80027ec <HAL_TIM_PWM_MspInit+0x258>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d10e      	bne.n	800268c <HAL_TIM_PWM_MspInit+0xf8>
	    __HAL_RCC_TIM6_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	62bb      	str	r3, [r7, #40]	; 0x28
 8002672:	4b5a      	ldr	r3, [pc, #360]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	4a59      	ldr	r2, [pc, #356]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002678:	f043 0310 	orr.w	r3, r3, #16
 800267c:	6413      	str	r3, [r2, #64]	; 0x40
 800267e:	4b57      	ldr	r3, [pc, #348]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f003 0310 	and.w	r3, r3, #16
 8002686:	62bb      	str	r3, [r7, #40]	; 0x28
 8002688:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800268a:	e09e      	b.n	80027ca <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM7)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a57      	ldr	r2, [pc, #348]	; (80027f0 <HAL_TIM_PWM_MspInit+0x25c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d10e      	bne.n	80026b4 <HAL_TIM_PWM_MspInit+0x120>
	     __HAL_RCC_TIM7_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
 800269a:	4b50      	ldr	r3, [pc, #320]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	4a4f      	ldr	r2, [pc, #316]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80026a0:	f043 0320 	orr.w	r3, r3, #32
 80026a4:	6413      	str	r3, [r2, #64]	; 0x40
 80026a6:	4b4d      	ldr	r3, [pc, #308]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f003 0320 	and.w	r3, r3, #32
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80026b2:	e08a      	b.n	80027ca <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM8)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a4e      	ldr	r2, [pc, #312]	; (80027f4 <HAL_TIM_PWM_MspInit+0x260>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d10e      	bne.n	80026dc <HAL_TIM_PWM_MspInit+0x148>
	     __HAL_RCC_TIM8_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	623b      	str	r3, [r7, #32]
 80026c2:	4b46      	ldr	r3, [pc, #280]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	4a45      	ldr	r2, [pc, #276]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80026c8:	f043 0302 	orr.w	r3, r3, #2
 80026cc:	6453      	str	r3, [r2, #68]	; 0x44
 80026ce:	4b43      	ldr	r3, [pc, #268]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	623b      	str	r3, [r7, #32]
 80026d8:	6a3b      	ldr	r3, [r7, #32]
}
 80026da:	e076      	b.n	80027ca <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM9)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a45      	ldr	r2, [pc, #276]	; (80027f8 <HAL_TIM_PWM_MspInit+0x264>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d10e      	bne.n	8002704 <HAL_TIM_PWM_MspInit+0x170>
	    __HAL_RCC_TIM9_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	4b3c      	ldr	r3, [pc, #240]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	4a3b      	ldr	r2, [pc, #236]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80026f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f4:	6453      	str	r3, [r2, #68]	; 0x44
 80026f6:	4b39      	ldr	r3, [pc, #228]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026fe:	61fb      	str	r3, [r7, #28]
 8002700:	69fb      	ldr	r3, [r7, #28]
}
 8002702:	e062      	b.n	80027ca <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM10)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a3c      	ldr	r2, [pc, #240]	; (80027fc <HAL_TIM_PWM_MspInit+0x268>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d10e      	bne.n	800272c <HAL_TIM_PWM_MspInit+0x198>
	    __HAL_RCC_TIM10_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	61bb      	str	r3, [r7, #24]
 8002712:	4b32      	ldr	r3, [pc, #200]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	4a31      	ldr	r2, [pc, #196]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800271c:	6453      	str	r3, [r2, #68]	; 0x44
 800271e:	4b2f      	ldr	r3, [pc, #188]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	61bb      	str	r3, [r7, #24]
 8002728:	69bb      	ldr	r3, [r7, #24]
}
 800272a:	e04e      	b.n	80027ca <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM11)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a33      	ldr	r2, [pc, #204]	; (8002800 <HAL_TIM_PWM_MspInit+0x26c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d10e      	bne.n	8002754 <HAL_TIM_PWM_MspInit+0x1c0>
	    __HAL_RCC_TIM11_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	4b28      	ldr	r3, [pc, #160]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	4a27      	ldr	r2, [pc, #156]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002740:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002744:	6453      	str	r3, [r2, #68]	; 0x44
 8002746:	4b25      	ldr	r3, [pc, #148]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	697b      	ldr	r3, [r7, #20]
}
 8002752:	e03a      	b.n	80027ca <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM12)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a2a      	ldr	r2, [pc, #168]	; (8002804 <HAL_TIM_PWM_MspInit+0x270>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d10e      	bne.n	800277c <HAL_TIM_PWM_MspInit+0x1e8>
	    __HAL_RCC_TIM12_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	4b1e      	ldr	r3, [pc, #120]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	4a1d      	ldr	r2, [pc, #116]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800276c:	6413      	str	r3, [r2, #64]	; 0x40
 800276e:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	693b      	ldr	r3, [r7, #16]
}
 800277a:	e026      	b.n	80027ca <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM13)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a21      	ldr	r2, [pc, #132]	; (8002808 <HAL_TIM_PWM_MspInit+0x274>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d10e      	bne.n	80027a4 <HAL_TIM_PWM_MspInit+0x210>
	    __HAL_RCC_TIM13_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	4b14      	ldr	r3, [pc, #80]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	4a13      	ldr	r2, [pc, #76]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002794:	6413      	str	r3, [r2, #64]	; 0x40
 8002796:	4b11      	ldr	r3, [pc, #68]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
}
 80027a2:	e012      	b.n	80027ca <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM14)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a18      	ldr	r2, [pc, #96]	; (800280c <HAL_TIM_PWM_MspInit+0x278>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d10d      	bne.n	80027ca <HAL_TIM_PWM_MspInit+0x236>
	    __HAL_RCC_TIM14_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	4a09      	ldr	r2, [pc, #36]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80027b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027bc:	6413      	str	r3, [r2, #64]	; 0x40
 80027be:	4b07      	ldr	r3, [pc, #28]	; (80027dc <HAL_TIM_PWM_MspInit+0x248>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	68bb      	ldr	r3, [r7, #8]
}
 80027ca:	bf00      	nop
 80027cc:	3744      	adds	r7, #68	; 0x44
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40010000 	.word	0x40010000
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40000400 	.word	0x40000400
 80027e4:	40000800 	.word	0x40000800
 80027e8:	40000c00 	.word	0x40000c00
 80027ec:	40001000 	.word	0x40001000
 80027f0:	40001400 	.word	0x40001400
 80027f4:	40010400 	.word	0x40010400
 80027f8:	40014000 	.word	0x40014000
 80027fc:	40014400 	.word	0x40014400
 8002800:	40014800 	.word	0x40014800
 8002804:	40001800 	.word	0x40001800
 8002808:	40001c00 	.word	0x40001c00
 800280c:	40002000 	.word	0x40002000

08002810 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002810:	b480      	push	{r7}
 8002812:	b091      	sub	sp, #68	; 0x44
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]

	if(htim_base->Instance==TIM1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a8d      	ldr	r2, [pc, #564]	; (8002a54 <HAL_TIM_Base_MspInit+0x244>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d10e      	bne.n	8002840 <HAL_TIM_Base_MspInit+0x30>
	{
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002826:	4b8c      	ldr	r3, [pc, #560]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	4a8b      	ldr	r2, [pc, #556]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	6453      	str	r3, [r2, #68]	; 0x44
 8002832:	4b89      	ldr	r3, [pc, #548]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800283c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  else if(htim_base->Instance==TIM14)
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
  }
}
 800283e:	e102      	b.n	8002a46 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM2)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002848:	d10e      	bne.n	8002868 <HAL_TIM_Base_MspInit+0x58>
		__HAL_RCC_TIM2_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	63bb      	str	r3, [r7, #56]	; 0x38
 800284e:	4b82      	ldr	r3, [pc, #520]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	4a81      	ldr	r2, [pc, #516]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	6413      	str	r3, [r2, #64]	; 0x40
 800285a:	4b7f      	ldr	r3, [pc, #508]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	63bb      	str	r3, [r7, #56]	; 0x38
 8002864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002866:	e0ee      	b.n	8002a46 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM3)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a7b      	ldr	r2, [pc, #492]	; (8002a5c <HAL_TIM_Base_MspInit+0x24c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d10e      	bne.n	8002890 <HAL_TIM_Base_MspInit+0x80>
		__HAL_RCC_TIM3_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	637b      	str	r3, [r7, #52]	; 0x34
 8002876:	4b78      	ldr	r3, [pc, #480]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	4a77      	ldr	r2, [pc, #476]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 800287c:	f043 0302 	orr.w	r3, r3, #2
 8002880:	6413      	str	r3, [r2, #64]	; 0x40
 8002882:	4b75      	ldr	r3, [pc, #468]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	637b      	str	r3, [r7, #52]	; 0x34
 800288c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800288e:	e0da      	b.n	8002a46 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM4)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a72      	ldr	r2, [pc, #456]	; (8002a60 <HAL_TIM_Base_MspInit+0x250>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d10e      	bne.n	80028b8 <HAL_TIM_Base_MspInit+0xa8>
		__HAL_RCC_TIM4_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	633b      	str	r3, [r7, #48]	; 0x30
 800289e:	4b6e      	ldr	r3, [pc, #440]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	4a6d      	ldr	r2, [pc, #436]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 80028a4:	f043 0304 	orr.w	r3, r3, #4
 80028a8:	6413      	str	r3, [r2, #64]	; 0x40
 80028aa:	4b6b      	ldr	r3, [pc, #428]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	633b      	str	r3, [r7, #48]	; 0x30
 80028b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80028b6:	e0c6      	b.n	8002a46 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM5)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a69      	ldr	r2, [pc, #420]	; (8002a64 <HAL_TIM_Base_MspInit+0x254>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d10e      	bne.n	80028e0 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028c6:	4b64      	ldr	r3, [pc, #400]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	4a63      	ldr	r2, [pc, #396]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 80028cc:	f043 0308 	orr.w	r3, r3, #8
 80028d0:	6413      	str	r3, [r2, #64]	; 0x40
 80028d2:	4b61      	ldr	r3, [pc, #388]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80028de:	e0b2      	b.n	8002a46 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM6)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a60      	ldr	r2, [pc, #384]	; (8002a68 <HAL_TIM_Base_MspInit+0x258>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d10e      	bne.n	8002908 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ee:	4b5a      	ldr	r3, [pc, #360]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	4a59      	ldr	r2, [pc, #356]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 80028f4:	f043 0310 	orr.w	r3, r3, #16
 80028f8:	6413      	str	r3, [r2, #64]	; 0x40
 80028fa:	4b57      	ldr	r3, [pc, #348]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f003 0310 	and.w	r3, r3, #16
 8002902:	62bb      	str	r3, [r7, #40]	; 0x28
 8002904:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002906:	e09e      	b.n	8002a46 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM7)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a57      	ldr	r2, [pc, #348]	; (8002a6c <HAL_TIM_Base_MspInit+0x25c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d10e      	bne.n	8002930 <HAL_TIM_Base_MspInit+0x120>
     __HAL_RCC_TIM7_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
 8002916:	4b50      	ldr	r3, [pc, #320]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	4a4f      	ldr	r2, [pc, #316]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 800291c:	f043 0320 	orr.w	r3, r3, #32
 8002920:	6413      	str	r3, [r2, #64]	; 0x40
 8002922:	4b4d      	ldr	r3, [pc, #308]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f003 0320 	and.w	r3, r3, #32
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800292e:	e08a      	b.n	8002a46 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM8)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a4e      	ldr	r2, [pc, #312]	; (8002a70 <HAL_TIM_Base_MspInit+0x260>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d10e      	bne.n	8002958 <HAL_TIM_Base_MspInit+0x148>
     __HAL_RCC_TIM8_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	623b      	str	r3, [r7, #32]
 800293e:	4b46      	ldr	r3, [pc, #280]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	4a45      	ldr	r2, [pc, #276]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002944:	f043 0302 	orr.w	r3, r3, #2
 8002948:	6453      	str	r3, [r2, #68]	; 0x44
 800294a:	4b43      	ldr	r3, [pc, #268]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	623b      	str	r3, [r7, #32]
 8002954:	6a3b      	ldr	r3, [r7, #32]
}
 8002956:	e076      	b.n	8002a46 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM9)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a45      	ldr	r2, [pc, #276]	; (8002a74 <HAL_TIM_Base_MspInit+0x264>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d10e      	bne.n	8002980 <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
 8002966:	4b3c      	ldr	r3, [pc, #240]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	4a3b      	ldr	r2, [pc, #236]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 800296c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002970:	6453      	str	r3, [r2, #68]	; 0x44
 8002972:	4b39      	ldr	r3, [pc, #228]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800297a:	61fb      	str	r3, [r7, #28]
 800297c:	69fb      	ldr	r3, [r7, #28]
}
 800297e:	e062      	b.n	8002a46 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM10)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a3c      	ldr	r2, [pc, #240]	; (8002a78 <HAL_TIM_Base_MspInit+0x268>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d10e      	bne.n	80029a8 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	61bb      	str	r3, [r7, #24]
 800298e:	4b32      	ldr	r3, [pc, #200]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002992:	4a31      	ldr	r2, [pc, #196]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002998:	6453      	str	r3, [r2, #68]	; 0x44
 800299a:	4b2f      	ldr	r3, [pc, #188]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a2:	61bb      	str	r3, [r7, #24]
 80029a4:	69bb      	ldr	r3, [r7, #24]
}
 80029a6:	e04e      	b.n	8002a46 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM11)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a33      	ldr	r2, [pc, #204]	; (8002a7c <HAL_TIM_Base_MspInit+0x26c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d10e      	bne.n	80029d0 <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	4b28      	ldr	r3, [pc, #160]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	4a27      	ldr	r2, [pc, #156]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 80029bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029c0:	6453      	str	r3, [r2, #68]	; 0x44
 80029c2:	4b25      	ldr	r3, [pc, #148]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	697b      	ldr	r3, [r7, #20]
}
 80029ce:	e03a      	b.n	8002a46 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM12)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a2a      	ldr	r2, [pc, #168]	; (8002a80 <HAL_TIM_Base_MspInit+0x270>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d10e      	bne.n	80029f8 <HAL_TIM_Base_MspInit+0x1e8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	4b1e      	ldr	r3, [pc, #120]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	4a1d      	ldr	r2, [pc, #116]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 80029e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029e8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ea:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f2:	613b      	str	r3, [r7, #16]
 80029f4:	693b      	ldr	r3, [r7, #16]
}
 80029f6:	e026      	b.n	8002a46 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM13)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a21      	ldr	r2, [pc, #132]	; (8002a84 <HAL_TIM_Base_MspInit+0x274>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d10e      	bne.n	8002a20 <HAL_TIM_Base_MspInit+0x210>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	4b14      	ldr	r3, [pc, #80]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	4a13      	ldr	r2, [pc, #76]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a10:	6413      	str	r3, [r2, #64]	; 0x40
 8002a12:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
}
 8002a1e:	e012      	b.n	8002a46 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM14)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a18      	ldr	r2, [pc, #96]	; (8002a88 <HAL_TIM_Base_MspInit+0x278>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d10d      	bne.n	8002a46 <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	4a09      	ldr	r2, [pc, #36]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a38:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3a:	4b07      	ldr	r3, [pc, #28]	; (8002a58 <HAL_TIM_Base_MspInit+0x248>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
}
 8002a46:	bf00      	nop
 8002a48:	3744      	adds	r7, #68	; 0x44
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	40010000 	.word	0x40010000
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40000400 	.word	0x40000400
 8002a60:	40000800 	.word	0x40000800
 8002a64:	40000c00 	.word	0x40000c00
 8002a68:	40001000 	.word	0x40001000
 8002a6c:	40001400 	.word	0x40001400
 8002a70:	40010400 	.word	0x40010400
 8002a74:	40014000 	.word	0x40014000
 8002a78:	40014400 	.word	0x40014400
 8002a7c:	40014800 	.word	0x40014800
 8002a80:	40001800 	.word	0x40001800
 8002a84:	40001c00 	.word	0x40001c00
 8002a88:	40002000 	.word	0x40002000

08002a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b094      	sub	sp, #80	; 0x50
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	611a      	str	r2, [r3, #16]

  if(huart->Instance==USART1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a8c      	ldr	r2, [pc, #560]	; (8002cdc <HAL_UART_MspInit+0x250>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d12d      	bne.n	8002b0a <HAL_UART_MspInit+0x7e>
    {
	  __HAL_RCC_USART1_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ab2:	4b8b      	ldr	r3, [pc, #556]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	4a8a      	ldr	r2, [pc, #552]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002ab8:	f043 0310 	orr.w	r3, r3, #16
 8002abc:	6453      	str	r3, [r2, #68]	; 0x44
 8002abe:	4b88      	ldr	r3, [pc, #544]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38

	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	637b      	str	r3, [r7, #52]	; 0x34
 8002ace:	4b84      	ldr	r3, [pc, #528]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	4a83      	ldr	r2, [pc, #524]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ada:	4b81      	ldr	r3, [pc, #516]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	  /**USART1 GPIO Configuration
	      PA9     ------> USART1_TX
	      PA10     ------> USART1_RX
	   */
	  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ae6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002aea:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aec:	2302      	movs	r3, #2
 8002aee:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af4:	2303      	movs	r3, #3
 8002af6:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002af8:	2307      	movs	r3, #7
 8002afa:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b00:	4619      	mov	r1, r3
 8002b02:	4878      	ldr	r0, [pc, #480]	; (8002ce4 <HAL_UART_MspInit+0x258>)
 8002b04:	f00d fd00 	bl	8010508 <HAL_GPIO_Init>
   /* USER CODE BEGIN USART6_MspInit 1 */

   /* USER CODE END USART6_MspInit 1 */
   }

}
 8002b08:	e12b      	b.n	8002d62 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART2)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a76      	ldr	r2, [pc, #472]	; (8002ce8 <HAL_UART_MspInit+0x25c>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d12c      	bne.n	8002b6e <HAL_UART_MspInit+0xe2>
      __HAL_RCC_USART2_CLK_ENABLE();
 8002b14:	2300      	movs	r3, #0
 8002b16:	633b      	str	r3, [r7, #48]	; 0x30
 8002b18:	4b71      	ldr	r3, [pc, #452]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	4a70      	ldr	r2, [pc, #448]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002b1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b22:	6413      	str	r3, [r2, #64]	; 0x40
 8002b24:	4b6e      	ldr	r3, [pc, #440]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b30:	2300      	movs	r3, #0
 8002b32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b34:	4b6a      	ldr	r3, [pc, #424]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	4a69      	ldr	r2, [pc, #420]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002b3a:	f043 0308 	orr.w	r3, r3, #8
 8002b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b40:	4b67      	ldr	r3, [pc, #412]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002b4c:	2360      	movs	r3, #96	; 0x60
 8002b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b50:	2302      	movs	r3, #2
 8002b52:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b5c:	2307      	movs	r3, #7
 8002b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b60:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b64:	4619      	mov	r1, r3
 8002b66:	4861      	ldr	r0, [pc, #388]	; (8002cec <HAL_UART_MspInit+0x260>)
 8002b68:	f00d fcce 	bl	8010508 <HAL_GPIO_Init>
}
 8002b6c:	e0f9      	b.n	8002d62 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART3)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a5f      	ldr	r2, [pc, #380]	; (8002cf0 <HAL_UART_MspInit+0x264>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d12d      	bne.n	8002bd4 <HAL_UART_MspInit+0x148>
      __HAL_RCC_USART3_CLK_ENABLE();
 8002b78:	2300      	movs	r3, #0
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b7c:	4b58      	ldr	r3, [pc, #352]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	4a57      	ldr	r2, [pc, #348]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002b82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b86:	6413      	str	r3, [r2, #64]	; 0x40
 8002b88:	4b55      	ldr	r3, [pc, #340]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b94:	2300      	movs	r3, #0
 8002b96:	627b      	str	r3, [r7, #36]	; 0x24
 8002b98:	4b51      	ldr	r3, [pc, #324]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9c:	4a50      	ldr	r2, [pc, #320]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002b9e:	f043 0308 	orr.w	r3, r3, #8
 8002ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba4:	4b4e      	ldr	r3, [pc, #312]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bb0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002bc2:	2307      	movs	r3, #7
 8002bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bc6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4847      	ldr	r0, [pc, #284]	; (8002cec <HAL_UART_MspInit+0x260>)
 8002bce:	f00d fc9b 	bl	8010508 <HAL_GPIO_Init>
}
 8002bd2:	e0c6      	b.n	8002d62 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART4)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a46      	ldr	r2, [pc, #280]	; (8002cf4 <HAL_UART_MspInit+0x268>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d12d      	bne.n	8002c3a <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_UART4_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	623b      	str	r3, [r7, #32]
 8002be2:	4b3f      	ldr	r3, [pc, #252]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	4a3e      	ldr	r2, [pc, #248]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002be8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002bec:	6413      	str	r3, [r2, #64]	; 0x40
 8002bee:	4b3c      	ldr	r3, [pc, #240]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bf6:	623b      	str	r3, [r7, #32]
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
 8002bfe:	4b38      	ldr	r3, [pc, #224]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	4a37      	ldr	r2, [pc, #220]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002c04:	f043 0304 	orr.w	r3, r3, #4
 8002c08:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0a:	4b35      	ldr	r3, [pc, #212]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	61fb      	str	r3, [r7, #28]
 8002c14:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002c16:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c20:	2301      	movs	r3, #1
 8002c22:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c24:	2303      	movs	r3, #3
 8002c26:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002c28:	2308      	movs	r3, #8
 8002c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c2c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c30:	4619      	mov	r1, r3
 8002c32:	4831      	ldr	r0, [pc, #196]	; (8002cf8 <HAL_UART_MspInit+0x26c>)
 8002c34:	f00d fc68 	bl	8010508 <HAL_GPIO_Init>
}
 8002c38:	e093      	b.n	8002d62 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART5)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a2f      	ldr	r2, [pc, #188]	; (8002cfc <HAL_UART_MspInit+0x270>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d15d      	bne.n	8002d00 <HAL_UART_MspInit+0x274>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002c44:	2300      	movs	r3, #0
 8002c46:	61bb      	str	r3, [r7, #24]
 8002c48:	4b25      	ldr	r3, [pc, #148]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	4a24      	ldr	r2, [pc, #144]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002c4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c52:	6413      	str	r3, [r2, #64]	; 0x40
 8002c54:	4b22      	ldr	r3, [pc, #136]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	4b1e      	ldr	r3, [pc, #120]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	4a1d      	ldr	r2, [pc, #116]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002c6a:	f043 0304 	orr.w	r3, r3, #4
 8002c6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c70:	4b1b      	ldr	r3, [pc, #108]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	4b17      	ldr	r3, [pc, #92]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	4a16      	ldr	r2, [pc, #88]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002c86:	f043 0308 	orr.w	r3, r3, #8
 8002c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8c:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <HAL_UART_MspInit+0x254>)
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002caa:	2308      	movs	r3, #8
 8002cac:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4810      	ldr	r0, [pc, #64]	; (8002cf8 <HAL_UART_MspInit+0x26c>)
 8002cb6:	f00d fc27 	bl	8010508 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002cba:	2304      	movs	r3, #4
 8002cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002cca:	2308      	movs	r3, #8
 8002ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4805      	ldr	r0, [pc, #20]	; (8002cec <HAL_UART_MspInit+0x260>)
 8002cd6:	f00d fc17 	bl	8010508 <HAL_GPIO_Init>
}
 8002cda:	e042      	b.n	8002d62 <HAL_UART_MspInit+0x2d6>
 8002cdc:	40011000 	.word	0x40011000
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	40020000 	.word	0x40020000
 8002ce8:	40004400 	.word	0x40004400
 8002cec:	40020c00 	.word	0x40020c00
 8002cf0:	40004800 	.word	0x40004800
 8002cf4:	40004c00 	.word	0x40004c00
 8002cf8:	40020800 	.word	0x40020800
 8002cfc:	40005000 	.word	0x40005000
  else if(huart->Instance==USART6)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a19      	ldr	r2, [pc, #100]	; (8002d6c <HAL_UART_MspInit+0x2e0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d12b      	bne.n	8002d62 <HAL_UART_MspInit+0x2d6>
     __HAL_RCC_USART6_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	4b18      	ldr	r3, [pc, #96]	; (8002d70 <HAL_UART_MspInit+0x2e4>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	4a17      	ldr	r2, [pc, #92]	; (8002d70 <HAL_UART_MspInit+0x2e4>)
 8002d14:	f043 0320 	orr.w	r3, r3, #32
 8002d18:	6453      	str	r3, [r2, #68]	; 0x44
 8002d1a:	4b15      	ldr	r3, [pc, #84]	; (8002d70 <HAL_UART_MspInit+0x2e4>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	f003 0320 	and.w	r3, r3, #32
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]
     __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <HAL_UART_MspInit+0x2e4>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	4a10      	ldr	r2, [pc, #64]	; (8002d70 <HAL_UART_MspInit+0x2e4>)
 8002d30:	f043 0304 	orr.w	r3, r3, #4
 8002d34:	6313      	str	r3, [r2, #48]	; 0x30
 8002d36:	4b0e      	ldr	r3, [pc, #56]	; (8002d70 <HAL_UART_MspInit+0x2e4>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	f003 0304 	and.w	r3, r3, #4
 8002d3e:	60bb      	str	r3, [r7, #8]
 8002d40:	68bb      	ldr	r3, [r7, #8]
     GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d42:	23c0      	movs	r3, #192	; 0xc0
 8002d44:	63fb      	str	r3, [r7, #60]	; 0x3c
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d46:	2302      	movs	r3, #2
 8002d48:	643b      	str	r3, [r7, #64]	; 0x40
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	647b      	str	r3, [r7, #68]	; 0x44
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	64bb      	str	r3, [r7, #72]	; 0x48
     GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002d52:	2308      	movs	r3, #8
 8002d54:	64fb      	str	r3, [r7, #76]	; 0x4c
     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d56:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4805      	ldr	r0, [pc, #20]	; (8002d74 <HAL_UART_MspInit+0x2e8>)
 8002d5e:	f00d fbd3 	bl	8010508 <HAL_GPIO_Init>
}
 8002d62:	bf00      	nop
 8002d64:	3750      	adds	r7, #80	; 0x50
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40011400 	.word	0x40011400
 8002d70:	40023800 	.word	0x40023800
 8002d74:	40020800 	.word	0x40020800

08002d78 <HAL_TIM_Encoder_MspInit>:
  }

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b094      	sub	sp, #80	; 0x50
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	60da      	str	r2, [r3, #12]
 8002d8e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a8c      	ldr	r2, [pc, #560]	; (8002fc8 <HAL_TIM_Encoder_MspInit+0x250>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d12d      	bne.n	8002df6 <HAL_TIM_Encoder_MspInit+0x7e>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d9e:	4b8b      	ldr	r3, [pc, #556]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da2:	4a8a      	ldr	r2, [pc, #552]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	6453      	str	r3, [r2, #68]	; 0x44
 8002daa:	4b88      	ldr	r3, [pc, #544]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	637b      	str	r3, [r7, #52]	; 0x34
 8002dba:	4b84      	ldr	r3, [pc, #528]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	4a83      	ldr	r2, [pc, #524]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002dc0:	f043 0310 	orr.w	r3, r3, #16
 8002dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc6:	4b81      	ldr	r3, [pc, #516]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	f003 0310 	and.w	r3, r3, #16
 8002dce:	637b      	str	r3, [r7, #52]	; 0x34
 8002dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34


    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002dd2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de0:	2300      	movs	r3, #0
 8002de2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002de4:	2301      	movs	r3, #1
 8002de6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002de8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002dec:	4619      	mov	r1, r3
 8002dee:	4878      	ldr	r0, [pc, #480]	; (8002fd0 <HAL_TIM_Encoder_MspInit+0x258>)
 8002df0:	f00d fb8a 	bl	8010508 <HAL_GPIO_Init>
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  }

}
 8002df4:	e12b      	b.n	800304e <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM2){
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dfe:	d14b      	bne.n	8002e98 <HAL_TIM_Encoder_MspInit+0x120>
	  __HAL_RCC_TIM2_CLK_ENABLE();
 8002e00:	2300      	movs	r3, #0
 8002e02:	633b      	str	r3, [r7, #48]	; 0x30
 8002e04:	4b71      	ldr	r3, [pc, #452]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	4a70      	ldr	r2, [pc, #448]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	6413      	str	r3, [r2, #64]	; 0x40
 8002e10:	4b6e      	ldr	r3, [pc, #440]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	633b      	str	r3, [r7, #48]	; 0x30
 8002e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e20:	4b6a      	ldr	r3, [pc, #424]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e24:	4a69      	ldr	r2, [pc, #420]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2c:	4b67      	ldr	r3, [pc, #412]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e38:	2300      	movs	r3, #0
 8002e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e3c:	4b63      	ldr	r3, [pc, #396]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e40:	4a62      	ldr	r2, [pc, #392]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002e42:	f043 0302 	orr.w	r3, r3, #2
 8002e46:	6313      	str	r3, [r2, #48]	; 0x30
 8002e48:	4b60      	ldr	r3, [pc, #384]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002e54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e58:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e62:	2300      	movs	r3, #0
 8002e64:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e66:	2301      	movs	r3, #1
 8002e68:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4858      	ldr	r0, [pc, #352]	; (8002fd4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002e72:	f00d fb49 	bl	8010508 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e76:	2308      	movs	r3, #8
 8002e78:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e82:	2300      	movs	r3, #0
 8002e84:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e86:	2301      	movs	r3, #1
 8002e88:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e8a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4851      	ldr	r0, [pc, #324]	; (8002fd8 <HAL_TIM_Encoder_MspInit+0x260>)
 8002e92:	f00d fb39 	bl	8010508 <HAL_GPIO_Init>
}
 8002e96:	e0da      	b.n	800304e <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM3){
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a4f      	ldr	r2, [pc, #316]	; (8002fdc <HAL_TIM_Encoder_MspInit+0x264>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d12c      	bne.n	8002efc <HAL_TIM_Encoder_MspInit+0x184>
	  __HAL_RCC_TIM3_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea6:	4b49      	ldr	r3, [pc, #292]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	4a48      	ldr	r2, [pc, #288]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002eac:	f043 0302 	orr.w	r3, r3, #2
 8002eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb2:	4b46      	ldr	r3, [pc, #280]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	627b      	str	r3, [r7, #36]	; 0x24
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	623b      	str	r3, [r7, #32]
 8002ec2:	4b42      	ldr	r3, [pc, #264]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	4a41      	ldr	r2, [pc, #260]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ece:	4b3f      	ldr	r3, [pc, #252]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	623b      	str	r3, [r7, #32]
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
	  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002eda:	23c0      	movs	r3, #192	; 0xc0
 8002edc:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002eea:	2302      	movs	r3, #2
 8002eec:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4837      	ldr	r0, [pc, #220]	; (8002fd4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002ef6:	f00d fb07 	bl	8010508 <HAL_GPIO_Init>
}
 8002efa:	e0a8      	b.n	800304e <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM4){
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a37      	ldr	r2, [pc, #220]	; (8002fe0 <HAL_TIM_Encoder_MspInit+0x268>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d12d      	bne.n	8002f62 <HAL_TIM_Encoder_MspInit+0x1ea>
	  __HAL_RCC_TIM4_CLK_ENABLE();
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	4b30      	ldr	r3, [pc, #192]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	4a2f      	ldr	r2, [pc, #188]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002f10:	f043 0304 	orr.w	r3, r3, #4
 8002f14:	6413      	str	r3, [r2, #64]	; 0x40
 8002f16:	4b2d      	ldr	r3, [pc, #180]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	61fb      	str	r3, [r7, #28]
 8002f20:	69fb      	ldr	r3, [r7, #28]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f22:	2300      	movs	r3, #0
 8002f24:	61bb      	str	r3, [r7, #24]
 8002f26:	4b29      	ldr	r3, [pc, #164]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	4a28      	ldr	r2, [pc, #160]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002f2c:	f043 0308 	orr.w	r3, r3, #8
 8002f30:	6313      	str	r3, [r2, #48]	; 0x30
 8002f32:	4b26      	ldr	r3, [pc, #152]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	61bb      	str	r3, [r7, #24]
 8002f3c:	69bb      	ldr	r3, [r7, #24]
	  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002f3e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002f42:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f44:	2302      	movs	r3, #2
 8002f46:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f50:	2302      	movs	r3, #2
 8002f52:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4822      	ldr	r0, [pc, #136]	; (8002fe4 <HAL_TIM_Encoder_MspInit+0x26c>)
 8002f5c:	f00d fad4 	bl	8010508 <HAL_GPIO_Init>
}
 8002f60:	e075      	b.n	800304e <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM5){
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a20      	ldr	r2, [pc, #128]	; (8002fe8 <HAL_TIM_Encoder_MspInit+0x270>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d13f      	bne.n	8002fec <HAL_TIM_Encoder_MspInit+0x274>
	  __HAL_RCC_TIM5_CLK_ENABLE();
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	4b16      	ldr	r3, [pc, #88]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	4a15      	ldr	r2, [pc, #84]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002f76:	f043 0308 	orr.w	r3, r3, #8
 8002f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f7c:	4b13      	ldr	r3, [pc, #76]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f88:	2300      	movs	r3, #0
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	4b0f      	ldr	r3, [pc, #60]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f90:	4a0e      	ldr	r2, [pc, #56]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002f92:	f043 0301 	orr.w	r3, r3, #1
 8002f96:	6313      	str	r3, [r2, #48]	; 0x30
 8002f98:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x254>)
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	693b      	ldr	r3, [r7, #16]
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4805      	ldr	r0, [pc, #20]	; (8002fd4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002fc0:	f00d faa2 	bl	8010508 <HAL_GPIO_Init>
}
 8002fc4:	e043      	b.n	800304e <HAL_TIM_Encoder_MspInit+0x2d6>
 8002fc6:	bf00      	nop
 8002fc8:	40010000 	.word	0x40010000
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	40020000 	.word	0x40020000
 8002fd8:	40020400 	.word	0x40020400
 8002fdc:	40000400 	.word	0x40000400
 8002fe0:	40000800 	.word	0x40000800
 8002fe4:	40020c00 	.word	0x40020c00
 8002fe8:	40000c00 	.word	0x40000c00
  }else if(htim_encoder->Instance==TIM8){
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a19      	ldr	r2, [pc, #100]	; (8003058 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d12b      	bne.n	800304e <HAL_TIM_Encoder_MspInit+0x2d6>
	  __HAL_RCC_TIM8_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	4b18      	ldr	r3, [pc, #96]	; (800305c <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffe:	4a17      	ldr	r2, [pc, #92]	; (800305c <HAL_TIM_Encoder_MspInit+0x2e4>)
 8003000:	f043 0302 	orr.w	r3, r3, #2
 8003004:	6453      	str	r3, [r2, #68]	; 0x44
 8003006:	4b15      	ldr	r3, [pc, #84]	; (800305c <HAL_TIM_Encoder_MspInit+0x2e4>)
 8003008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	4b11      	ldr	r3, [pc, #68]	; (800305c <HAL_TIM_Encoder_MspInit+0x2e4>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	4a10      	ldr	r2, [pc, #64]	; (800305c <HAL_TIM_Encoder_MspInit+0x2e4>)
 800301c:	f043 0304 	orr.w	r3, r3, #4
 8003020:	6313      	str	r3, [r2, #48]	; 0x30
 8003022:	4b0e      	ldr	r3, [pc, #56]	; (800305c <HAL_TIM_Encoder_MspInit+0x2e4>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	60bb      	str	r3, [r7, #8]
 800302c:	68bb      	ldr	r3, [r7, #8]
	  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800302e:	23c0      	movs	r3, #192	; 0xc0
 8003030:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003032:	2302      	movs	r3, #2
 8003034:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003036:	2300      	movs	r3, #0
 8003038:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303a:	2300      	movs	r3, #0
 800303c:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800303e:	2303      	movs	r3, #3
 8003040:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003042:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003046:	4619      	mov	r1, r3
 8003048:	4805      	ldr	r0, [pc, #20]	; (8003060 <HAL_TIM_Encoder_MspInit+0x2e8>)
 800304a:	f00d fa5d 	bl	8010508 <HAL_GPIO_Init>
}
 800304e:	bf00      	nop
 8003050:	3750      	adds	r7, #80	; 0x50
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40010400 	.word	0x40010400
 800305c:	40023800 	.word	0x40023800
 8003060:	40020800 	.word	0x40020800

08003064 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08e      	sub	sp, #56	; 0x38
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800306c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	60da      	str	r2, [r3, #12]
 800307a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a6a      	ldr	r2, [pc, #424]	; (800322c <HAL_SPI_MspInit+0x1c8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d13c      	bne.n	8003100 <HAL_SPI_MspInit+0x9c>
  {

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	623b      	str	r3, [r7, #32]
 800308a:	4b69      	ldr	r3, [pc, #420]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 800308c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308e:	4a68      	ldr	r2, [pc, #416]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 8003090:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003094:	6453      	str	r3, [r2, #68]	; 0x44
 8003096:	4b66      	ldr	r3, [pc, #408]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800309e:	623b      	str	r3, [r7, #32]
 80030a0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	61fb      	str	r3, [r7, #28]
 80030a6:	4b62      	ldr	r3, [pc, #392]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	4a61      	ldr	r2, [pc, #388]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	6313      	str	r3, [r2, #48]	; 0x30
 80030b2:	4b5f      	ldr	r3, [pc, #380]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	61fb      	str	r3, [r7, #28]
 80030bc:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80030be:	2320      	movs	r3, #32
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c2:	2302      	movs	r3, #2
 80030c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030c6:	2301      	movs	r3, #1
 80030c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ca:	2303      	movs	r3, #3
 80030cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80030ce:	2305      	movs	r3, #5
 80030d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030d6:	4619      	mov	r1, r3
 80030d8:	4856      	ldr	r0, [pc, #344]	; (8003234 <HAL_SPI_MspInit+0x1d0>)
 80030da:	f00d fa15 	bl	8010508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030de:	23c0      	movs	r3, #192	; 0xc0
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e2:	2302      	movs	r3, #2
 80030e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80030e6:	2302      	movs	r3, #2
 80030e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ea:	2303      	movs	r3, #3
 80030ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80030ee:	2305      	movs	r3, #5
 80030f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030f6:	4619      	mov	r1, r3
 80030f8:	484e      	ldr	r0, [pc, #312]	; (8003234 <HAL_SPI_MspInit+0x1d0>)
 80030fa:	f00d fa05 	bl	8010508 <HAL_GPIO_Init>
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);


  }

}
 80030fe:	e090      	b.n	8003222 <HAL_SPI_MspInit+0x1be>
  }else if (hspi->Instance==SPI2){
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a4c      	ldr	r2, [pc, #304]	; (8003238 <HAL_SPI_MspInit+0x1d4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d13e      	bne.n	8003188 <HAL_SPI_MspInit+0x124>
	  __HAL_RCC_SPI2_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	61bb      	str	r3, [r7, #24]
 800310e:	4b48      	ldr	r3, [pc, #288]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	4a47      	ldr	r2, [pc, #284]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 8003114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003118:	6413      	str	r3, [r2, #64]	; 0x40
 800311a:	4b45      	ldr	r3, [pc, #276]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003122:	61bb      	str	r3, [r7, #24]
 8003124:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]
 800312a:	4b41      	ldr	r3, [pc, #260]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	4a40      	ldr	r2, [pc, #256]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 8003130:	f043 0302 	orr.w	r3, r3, #2
 8003134:	6313      	str	r3, [r2, #48]	; 0x30
 8003136:	4b3e      	ldr	r3, [pc, #248]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	697b      	ldr	r3, [r7, #20]
	  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003142:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003148:	2302      	movs	r3, #2
 800314a:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800314c:	2301      	movs	r3, #1
 800314e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003150:	2303      	movs	r3, #3
 8003152:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003154:	2305      	movs	r3, #5
 8003156:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800315c:	4619      	mov	r1, r3
 800315e:	4837      	ldr	r0, [pc, #220]	; (800323c <HAL_SPI_MspInit+0x1d8>)
 8003160:	f00d f9d2 	bl	8010508 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003164:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316a:	2302      	movs	r3, #2
 800316c:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800316e:	2302      	movs	r3, #2
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003172:	2303      	movs	r3, #3
 8003174:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003176:	2305      	movs	r3, #5
 8003178:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800317a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800317e:	4619      	mov	r1, r3
 8003180:	482e      	ldr	r0, [pc, #184]	; (800323c <HAL_SPI_MspInit+0x1d8>)
 8003182:	f00d f9c1 	bl	8010508 <HAL_GPIO_Init>
}
 8003186:	e04c      	b.n	8003222 <HAL_SPI_MspInit+0x1be>
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003188:	2300      	movs	r3, #0
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	4b28      	ldr	r3, [pc, #160]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	4a27      	ldr	r2, [pc, #156]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 8003192:	f043 0302 	orr.w	r3, r3, #2
 8003196:	6313      	str	r3, [r2, #48]	; 0x30
 8003198:	4b25      	ldr	r3, [pc, #148]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	613b      	str	r3, [r7, #16]
 80031a2:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031a4:	2300      	movs	r3, #0
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	4b21      	ldr	r3, [pc, #132]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ac:	4a20      	ldr	r2, [pc, #128]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 80031ae:	f043 0304 	orr.w	r3, r3, #4
 80031b2:	6313      	str	r3, [r2, #48]	; 0x30
 80031b4:	4b1e      	ldr	r3, [pc, #120]	; (8003230 <HAL_SPI_MspInit+0x1cc>)
 80031b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	68fb      	ldr	r3, [r7, #12]
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80031c0:	2308      	movs	r3, #8
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c4:	2302      	movs	r3, #2
 80031c6:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031c8:	2301      	movs	r3, #1
 80031ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031cc:	2303      	movs	r3, #3
 80031ce:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80031d0:	2306      	movs	r3, #6
 80031d2:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031d8:	4619      	mov	r1, r3
 80031da:	4818      	ldr	r0, [pc, #96]	; (800323c <HAL_SPI_MspInit+0x1d8>)
 80031dc:	f00d f994 	bl	8010508 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80031e0:	2310      	movs	r3, #16
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e4:	2302      	movs	r3, #2
 80031e6:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80031e8:	2302      	movs	r3, #2
 80031ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ec:	2303      	movs	r3, #3
 80031ee:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80031f0:	2306      	movs	r3, #6
 80031f2:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031f8:	4619      	mov	r1, r3
 80031fa:	4810      	ldr	r0, [pc, #64]	; (800323c <HAL_SPI_MspInit+0x1d8>)
 80031fc:	f00d f984 	bl	8010508 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003206:	2302      	movs	r3, #2
 8003208:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800320a:	2302      	movs	r3, #2
 800320c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800320e:	2303      	movs	r3, #3
 8003210:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003212:	2306      	movs	r3, #6
 8003214:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800321a:	4619      	mov	r1, r3
 800321c:	4808      	ldr	r0, [pc, #32]	; (8003240 <HAL_SPI_MspInit+0x1dc>)
 800321e:	f00d f973 	bl	8010508 <HAL_GPIO_Init>
}
 8003222:	bf00      	nop
 8003224:	3738      	adds	r7, #56	; 0x38
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40013000 	.word	0x40013000
 8003230:	40023800 	.word	0x40023800
 8003234:	40020000 	.word	0x40020000
 8003238:	40003800 	.word	0x40003800
 800323c:	40020400 	.word	0x40020400
 8003240:	40020800 	.word	0x40020800

08003244 <SystemClock_Config>:

	}
}

void SystemClock_Config(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b094      	sub	sp, #80	; 0x50
 8003248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800324a:	f107 0320 	add.w	r3, r7, #32
 800324e:	2230      	movs	r2, #48	; 0x30
 8003250:	2100      	movs	r1, #0
 8003252:	4618      	mov	r0, r3
 8003254:	f016 f86a 	bl	801932c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003258:	f107 030c 	add.w	r3, r7, #12
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	605a      	str	r2, [r3, #4]
 8003262:	609a      	str	r2, [r3, #8]
 8003264:	60da      	str	r2, [r3, #12]
 8003266:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003268:	2300      	movs	r3, #0
 800326a:	60bb      	str	r3, [r7, #8]
 800326c:	4b29      	ldr	r3, [pc, #164]	; (8003314 <SystemClock_Config+0xd0>)
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	4a28      	ldr	r2, [pc, #160]	; (8003314 <SystemClock_Config+0xd0>)
 8003272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003276:	6413      	str	r3, [r2, #64]	; 0x40
 8003278:	4b26      	ldr	r3, [pc, #152]	; (8003314 <SystemClock_Config+0xd0>)
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003284:	2300      	movs	r3, #0
 8003286:	607b      	str	r3, [r7, #4]
 8003288:	4b23      	ldr	r3, [pc, #140]	; (8003318 <SystemClock_Config+0xd4>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a22      	ldr	r2, [pc, #136]	; (8003318 <SystemClock_Config+0xd4>)
 800328e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	4b20      	ldr	r3, [pc, #128]	; (8003318 <SystemClock_Config+0xd4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800329c:	607b      	str	r3, [r7, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80032a0:	2301      	movs	r3, #1
 80032a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80032a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032aa:	2302      	movs	r3, #2
 80032ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80032ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80032b4:	2308      	movs	r3, #8
 80032b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80032b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80032bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80032be:	2302      	movs	r3, #2
 80032c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80032c2:	2304      	movs	r3, #4
 80032c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032c6:	f107 0320 	add.w	r3, r7, #32
 80032ca:	4618      	mov	r0, r3
 80032cc:	f00f fc16 	bl	8012afc <HAL_RCC_OscConfig>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80032d6:	f001 fd35 	bl	8004d44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032da:	230f      	movs	r3, #15
 80032dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032de:	2302      	movs	r3, #2
 80032e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80032e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80032ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80032ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80032f2:	f107 030c 	add.w	r3, r7, #12
 80032f6:	2105      	movs	r1, #5
 80032f8:	4618      	mov	r0, r3
 80032fa:	f00f fe6f 	bl	8012fdc <HAL_RCC_ClockConfig>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003304:	f001 fd1e 	bl	8004d44 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003308:	f00f ff4e 	bl	80131a8 <HAL_RCC_EnableCSS>
}
 800330c:	bf00      	nop
 800330e:	3750      	adds	r7, #80	; 0x50
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40023800 	.word	0x40023800
 8003318:	40007000 	.word	0x40007000

0800331c <TIMxInit>:
 * 						  BIOSTIMx_Init (&htim2, 1000, 84);  //1ms  interrupt
 * 						  BIOSTIMx_Init (&htim3, 20000, 84); //20ms interrupt
 */

void TIMxInit(TIM_HandleTypeDef* htimx, uint16_t period, uint16_t prescaler)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	807b      	strh	r3, [r7, #2]
 8003328:	4613      	mov	r3, r2
 800332a:	803b      	strh	r3, [r7, #0]

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800332c:	f107 030c 	add.w	r3, r7, #12
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	605a      	str	r2, [r3, #4]
	int nvic = 0;
 8003336:	2300      	movs	r3, #0
 8003338:	617b      	str	r3, [r7, #20]

	if(htimx == &htim1){
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a9b      	ldr	r2, [pc, #620]	; (80035ac <TIMxInit+0x290>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d105      	bne.n	800334e <TIMxInit+0x32>
		htimx->Instance = TIM1;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a9a      	ldr	r2, [pc, #616]	; (80035b0 <TIMxInit+0x294>)
 8003346:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8003348:	2319      	movs	r3, #25
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	e081      	b.n	8003452 <TIMxInit+0x136>
	}
	else if(htimx == &htim2)	{
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a98      	ldr	r2, [pc, #608]	; (80035b4 <TIMxInit+0x298>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d106      	bne.n	8003364 <TIMxInit+0x48>
		htimx->Instance = TIM2;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800335c:	601a      	str	r2, [r3, #0]
		nvic = TIM2_IRQn;
 800335e:	231c      	movs	r3, #28
 8003360:	617b      	str	r3, [r7, #20]
 8003362:	e076      	b.n	8003452 <TIMxInit+0x136>
	}
	else if(htimx == &htim3)	{
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a94      	ldr	r2, [pc, #592]	; (80035b8 <TIMxInit+0x29c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d105      	bne.n	8003378 <TIMxInit+0x5c>
		htimx->Instance = TIM3;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a93      	ldr	r2, [pc, #588]	; (80035bc <TIMxInit+0x2a0>)
 8003370:	601a      	str	r2, [r3, #0]
		nvic = TIM3_IRQn;
 8003372:	231d      	movs	r3, #29
 8003374:	617b      	str	r3, [r7, #20]
 8003376:	e06c      	b.n	8003452 <TIMxInit+0x136>
	}
	else if(htimx == &htim4)	{
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a91      	ldr	r2, [pc, #580]	; (80035c0 <TIMxInit+0x2a4>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d105      	bne.n	800338c <TIMxInit+0x70>
		htimx->Instance = TIM4;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a90      	ldr	r2, [pc, #576]	; (80035c4 <TIMxInit+0x2a8>)
 8003384:	601a      	str	r2, [r3, #0]
		nvic = TIM4_IRQn;
 8003386:	231e      	movs	r3, #30
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	e062      	b.n	8003452 <TIMxInit+0x136>
	}
	else if(htimx == &htim5)	{
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a8e      	ldr	r2, [pc, #568]	; (80035c8 <TIMxInit+0x2ac>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d105      	bne.n	80033a0 <TIMxInit+0x84>
		htimx->Instance = TIM5;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a8d      	ldr	r2, [pc, #564]	; (80035cc <TIMxInit+0x2b0>)
 8003398:	601a      	str	r2, [r3, #0]
		nvic = TIM5_IRQn;
 800339a:	2332      	movs	r3, #50	; 0x32
 800339c:	617b      	str	r3, [r7, #20]
 800339e:	e058      	b.n	8003452 <TIMxInit+0x136>
	}
	else if(htimx == &htim6)	{
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a8b      	ldr	r2, [pc, #556]	; (80035d0 <TIMxInit+0x2b4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d105      	bne.n	80033b4 <TIMxInit+0x98>
		htimx->Instance = TIM6;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a8a      	ldr	r2, [pc, #552]	; (80035d4 <TIMxInit+0x2b8>)
 80033ac:	601a      	str	r2, [r3, #0]
		nvic = TIM6_DAC_IRQn;
 80033ae:	2336      	movs	r3, #54	; 0x36
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	e04e      	b.n	8003452 <TIMxInit+0x136>
	}
	else if(htimx == &htim7)	{
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a88      	ldr	r2, [pc, #544]	; (80035d8 <TIMxInit+0x2bc>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d105      	bne.n	80033c8 <TIMxInit+0xac>
		htimx->Instance = TIM7;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a87      	ldr	r2, [pc, #540]	; (80035dc <TIMxInit+0x2c0>)
 80033c0:	601a      	str	r2, [r3, #0]
		nvic = TIM7_IRQn;
 80033c2:	2337      	movs	r3, #55	; 0x37
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	e044      	b.n	8003452 <TIMxInit+0x136>
	}
	else if(htimx == &htim8)	{
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a85      	ldr	r2, [pc, #532]	; (80035e0 <TIMxInit+0x2c4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d105      	bne.n	80033dc <TIMxInit+0xc0>
		htimx->Instance = TIM8;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a84      	ldr	r2, [pc, #528]	; (80035e4 <TIMxInit+0x2c8>)
 80033d4:	601a      	str	r2, [r3, #0]
		nvic = TIM8_CC_IRQn;
 80033d6:	232e      	movs	r3, #46	; 0x2e
 80033d8:	617b      	str	r3, [r7, #20]
 80033da:	e03a      	b.n	8003452 <TIMxInit+0x136>
	}
	else if(htimx == &htim9)	{
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a82      	ldr	r2, [pc, #520]	; (80035e8 <TIMxInit+0x2cc>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d105      	bne.n	80033f0 <TIMxInit+0xd4>
		htimx->Instance = TIM9;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a81      	ldr	r2, [pc, #516]	; (80035ec <TIMxInit+0x2d0>)
 80033e8:	601a      	str	r2, [r3, #0]
		nvic = TIM1_BRK_TIM9_IRQn;
 80033ea:	2318      	movs	r3, #24
 80033ec:	617b      	str	r3, [r7, #20]
 80033ee:	e030      	b.n	8003452 <TIMxInit+0x136>
	}
	else if(htimx == &htim10)	{
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a7f      	ldr	r2, [pc, #508]	; (80035f0 <TIMxInit+0x2d4>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d105      	bne.n	8003404 <TIMxInit+0xe8>
		htimx->Instance = TIM10;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a7e      	ldr	r2, [pc, #504]	; (80035f4 <TIMxInit+0x2d8>)
 80033fc:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 80033fe:	2319      	movs	r3, #25
 8003400:	617b      	str	r3, [r7, #20]
 8003402:	e026      	b.n	8003452 <TIMxInit+0x136>
	}
	else if(htimx == &htim11)	{
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a7c      	ldr	r2, [pc, #496]	; (80035f8 <TIMxInit+0x2dc>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d105      	bne.n	8003418 <TIMxInit+0xfc>
		htimx->Instance = TIM11;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a7b      	ldr	r2, [pc, #492]	; (80035fc <TIMxInit+0x2e0>)
 8003410:	601a      	str	r2, [r3, #0]
		nvic = TIM1_TRG_COM_TIM11_IRQn;
 8003412:	231a      	movs	r3, #26
 8003414:	617b      	str	r3, [r7, #20]
 8003416:	e01c      	b.n	8003452 <TIMxInit+0x136>
	}
	else if(htimx == &htim12)	{
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a79      	ldr	r2, [pc, #484]	; (8003600 <TIMxInit+0x2e4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d105      	bne.n	800342c <TIMxInit+0x110>
		htimx->Instance = TIM12;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a78      	ldr	r2, [pc, #480]	; (8003604 <TIMxInit+0x2e8>)
 8003424:	601a      	str	r2, [r3, #0]
		nvic = TIM8_BRK_TIM12_IRQn;
 8003426:	232b      	movs	r3, #43	; 0x2b
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	e012      	b.n	8003452 <TIMxInit+0x136>
	}
	else if(htimx == &htim13)	{
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a76      	ldr	r2, [pc, #472]	; (8003608 <TIMxInit+0x2ec>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d105      	bne.n	8003440 <TIMxInit+0x124>
		htimx->Instance = TIM13;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a75      	ldr	r2, [pc, #468]	; (800360c <TIMxInit+0x2f0>)
 8003438:	601a      	str	r2, [r3, #0]
		nvic = TIM8_UP_TIM13_IRQn;
 800343a:	232c      	movs	r3, #44	; 0x2c
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	e008      	b.n	8003452 <TIMxInit+0x136>
	}
	else if(htimx == &htim14)	{
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a73      	ldr	r2, [pc, #460]	; (8003610 <TIMxInit+0x2f4>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d104      	bne.n	8003452 <TIMxInit+0x136>
		htimx->Instance = TIM14;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a72      	ldr	r2, [pc, #456]	; (8003614 <TIMxInit+0x2f8>)
 800344c:	601a      	str	r2, [r3, #0]
		nvic = TIM8_TRG_COM_TIM14_IRQn;
 800344e:	232d      	movs	r3, #45	; 0x2d
 8003450:	617b      	str	r3, [r7, #20]
	}


	htimx->Init.Prescaler = prescaler;
 8003452:	883a      	ldrh	r2, [r7, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = period;
 800345e:	887a      	ldrh	r2, [r7, #2]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	60da      	str	r2, [r3, #12]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f010 fb52 	bl	8013b14 <HAL_TIM_Base_Init>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <TIMxInit+0x15e>
	{
		Error_Handler();
 8003476:	f001 fc65 	bl	8004d44 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800347a:	2300      	movs	r3, #0
 800347c:	60fb      	str	r3, [r7, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800347e:	2300      	movs	r3, #0
 8003480:	613b      	str	r3, [r7, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8003482:	f107 030c 	add.w	r3, r7, #12
 8003486:	4619      	mov	r1, r3
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f011 fab3 	bl	80149f4 <HAL_TIMEx_MasterConfigSynchronization>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <TIMxInit+0x17c>
	{
		Error_Handler();
 8003494:	f001 fc56 	bl	8004d44 <Error_Handler>
	}

	if(htimx == &htim1){
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a44      	ldr	r2, [pc, #272]	; (80035ac <TIMxInit+0x290>)
 800349c:	4293      	cmp	r3, r2
 800349e:	f000 80cb 	beq.w	8003638 <TIMxInit+0x31c>
#ifndef QEI1_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM1_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim2)	{
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a43      	ldr	r2, [pc, #268]	; (80035b4 <TIMxInit+0x298>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	f000 80c6 	beq.w	8003638 <TIMxInit+0x31c>
#ifndef FREERTOS_USED
		HAL_NVIC_SetPriority(nvic, TIM2_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim3)	{
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a42      	ldr	r2, [pc, #264]	; (80035b8 <TIMxInit+0x29c>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	f000 80c1 	beq.w	8003638 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM3_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim4)	{
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a41      	ldr	r2, [pc, #260]	; (80035c0 <TIMxInit+0x2a4>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	f000 80bc 	beq.w	8003638 <TIMxInit+0x31c>
#ifndef QEI4_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM4_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim5)	{
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a41      	ldr	r2, [pc, #260]	; (80035c8 <TIMxInit+0x2ac>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	f000 80b7 	beq.w	8003638 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM5_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim6)	{
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a40      	ldr	r2, [pc, #256]	; (80035d0 <TIMxInit+0x2b4>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d10c      	bne.n	80034ec <TIMxInit+0x1d0>
		HAL_NVIC_SetPriority(nvic, TIM6_IRQ_PRIO, 0);
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	b25b      	sxtb	r3, r3
 80034d6:	2200      	movs	r2, #0
 80034d8:	2108      	movs	r1, #8
 80034da:	4618      	mov	r0, r3
 80034dc:	f00c f8e0 	bl	800f6a0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	b25b      	sxtb	r3, r3
 80034e4:	4618      	mov	r0, r3
 80034e6:	f00c f8f7 	bl	800f6d8 <HAL_NVIC_EnableIRQ>
 80034ea:	e0a5      	b.n	8003638 <TIMxInit+0x31c>
	}
	else if(htimx == &htim7)	{
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a3a      	ldr	r2, [pc, #232]	; (80035d8 <TIMxInit+0x2bc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d10c      	bne.n	800350e <TIMxInit+0x1f2>
		HAL_NVIC_SetPriority(nvic, TIM7_IRQ_PRIO, 0);
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	b25b      	sxtb	r3, r3
 80034f8:	2200      	movs	r2, #0
 80034fa:	210e      	movs	r1, #14
 80034fc:	4618      	mov	r0, r3
 80034fe:	f00c f8cf 	bl	800f6a0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	b25b      	sxtb	r3, r3
 8003506:	4618      	mov	r0, r3
 8003508:	f00c f8e6 	bl	800f6d8 <HAL_NVIC_EnableIRQ>
 800350c:	e094      	b.n	8003638 <TIMxInit+0x31c>
	}
	else if(htimx == &htim8)	{
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a33      	ldr	r2, [pc, #204]	; (80035e0 <TIMxInit+0x2c4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	f000 8090 	beq.w	8003638 <TIMxInit+0x31c>
#ifndef QEI6_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM8_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim9)	{
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a33      	ldr	r2, [pc, #204]	; (80035e8 <TIMxInit+0x2cc>)
 800351c:	4293      	cmp	r3, r2
 800351e:	f000 808b 	beq.w	8003638 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM9_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim10)	{
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a32      	ldr	r2, [pc, #200]	; (80035f0 <TIMxInit+0x2d4>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d10c      	bne.n	8003544 <TIMxInit+0x228>
		HAL_NVIC_SetPriority(nvic, TIM10_IRQ_PRIO, 0);
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	b25b      	sxtb	r3, r3
 800352e:	2200      	movs	r2, #0
 8003530:	210e      	movs	r1, #14
 8003532:	4618      	mov	r0, r3
 8003534:	f00c f8b4 	bl	800f6a0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	b25b      	sxtb	r3, r3
 800353c:	4618      	mov	r0, r3
 800353e:	f00c f8cb 	bl	800f6d8 <HAL_NVIC_EnableIRQ>
 8003542:	e079      	b.n	8003638 <TIMxInit+0x31c>
	}
	else if(htimx == &htim11)	{
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a2c      	ldr	r2, [pc, #176]	; (80035f8 <TIMxInit+0x2dc>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d10c      	bne.n	8003566 <TIMxInit+0x24a>
		HAL_NVIC_SetPriority(nvic, TIM11_IRQ_PRIO, 0);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	b25b      	sxtb	r3, r3
 8003550:	2200      	movs	r2, #0
 8003552:	210e      	movs	r1, #14
 8003554:	4618      	mov	r0, r3
 8003556:	f00c f8a3 	bl	800f6a0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	b25b      	sxtb	r3, r3
 800355e:	4618      	mov	r0, r3
 8003560:	f00c f8ba 	bl	800f6d8 <HAL_NVIC_EnableIRQ>
 8003564:	e068      	b.n	8003638 <TIMxInit+0x31c>
	}
	else if(htimx == &htim12)	{
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a25      	ldr	r2, [pc, #148]	; (8003600 <TIMxInit+0x2e4>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d10c      	bne.n	8003588 <TIMxInit+0x26c>
		HAL_NVIC_SetPriority(nvic, TIM12_IRQ_PRIO, 0);
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	b25b      	sxtb	r3, r3
 8003572:	2200      	movs	r2, #0
 8003574:	210e      	movs	r1, #14
 8003576:	4618      	mov	r0, r3
 8003578:	f00c f892 	bl	800f6a0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	b25b      	sxtb	r3, r3
 8003580:	4618      	mov	r0, r3
 8003582:	f00c f8a9 	bl	800f6d8 <HAL_NVIC_EnableIRQ>
 8003586:	e057      	b.n	8003638 <TIMxInit+0x31c>
	}
	else if(htimx == &htim13)	{
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a1f      	ldr	r2, [pc, #124]	; (8003608 <TIMxInit+0x2ec>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d143      	bne.n	8003618 <TIMxInit+0x2fc>
		HAL_NVIC_SetPriority(nvic, TIM13_IRQ_PRIO, 0);
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	b25b      	sxtb	r3, r3
 8003594:	2200      	movs	r2, #0
 8003596:	210e      	movs	r1, #14
 8003598:	4618      	mov	r0, r3
 800359a:	f00c f881 	bl	800f6a0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	b25b      	sxtb	r3, r3
 80035a2:	4618      	mov	r0, r3
 80035a4:	f00c f898 	bl	800f6d8 <HAL_NVIC_EnableIRQ>
 80035a8:	e046      	b.n	8003638 <TIMxInit+0x31c>
 80035aa:	bf00      	nop
 80035ac:	20005f64 	.word	0x20005f64
 80035b0:	40010000 	.word	0x40010000
 80035b4:	20006068 	.word	0x20006068
 80035b8:	20005d18 	.word	0x20005d18
 80035bc:	40000400 	.word	0x40000400
 80035c0:	20005b54 	.word	0x20005b54
 80035c4:	40000800 	.word	0x40000800
 80035c8:	20005cd8 	.word	0x20005cd8
 80035cc:	40000c00 	.word	0x40000c00
 80035d0:	20005f24 	.word	0x20005f24
 80035d4:	40001000 	.word	0x40001000
 80035d8:	200061c8 	.word	0x200061c8
 80035dc:	40001400 	.word	0x40001400
 80035e0:	20005b14 	.word	0x20005b14
 80035e4:	40010400 	.word	0x40010400
 80035e8:	20005fa4 	.word	0x20005fa4
 80035ec:	40014000 	.word	0x40014000
 80035f0:	20005c34 	.word	0x20005c34
 80035f4:	40014400 	.word	0x40014400
 80035f8:	20005e7c 	.word	0x20005e7c
 80035fc:	40014800 	.word	0x40014800
 8003600:	20006188 	.word	0x20006188
 8003604:	40001800 	.word	0x40001800
 8003608:	20005dfc 	.word	0x20005dfc
 800360c:	40001c00 	.word	0x40001c00
 8003610:	20006148 	.word	0x20006148
 8003614:	40002000 	.word	0x40002000
	}
	else if(htimx == &htim14)	{
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a0c      	ldr	r2, [pc, #48]	; (800364c <TIMxInit+0x330>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d10b      	bne.n	8003638 <TIMxInit+0x31c>
		HAL_NVIC_SetPriority(nvic, TIM14_IRQ_PRIO, 0);
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	b25b      	sxtb	r3, r3
 8003624:	2200      	movs	r2, #0
 8003626:	210e      	movs	r1, #14
 8003628:	4618      	mov	r0, r3
 800362a:	f00c f839 	bl	800f6a0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	b25b      	sxtb	r3, r3
 8003632:	4618      	mov	r0, r3
 8003634:	f00c f850 	bl	800f6d8 <HAL_NVIC_EnableIRQ>
	}

	HAL_TIM_Base_Start(htimx);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f010 fa96 	bl	8013b6a <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(htimx);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f010 fab7 	bl	8013bb2 <HAL_TIM_Base_Start_IT>

}
 8003644:	bf00      	nop
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20006148 	.word	0x20006148

08003650 <UARTInit>:
 * 						  rxstate				,can be ENABLE (enable USART1 receive interrupt) or DISBALE
 * Function Return		: None
 * Function Example		: UARTxInit(&huart1, 115200, ENABLE, 0, 0);
 */
void UARTInit(UART_HandleTypeDef* huartx, uint32_t baudrate, FunctionalState rxstate)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	4613      	mov	r3, r2
 800365c:	71fb      	strb	r3, [r7, #7]
	IRQn_Type nvic;
	uint8_t *rcv_data;

	if (huartx == &huart1){
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4a6e      	ldr	r2, [pc, #440]	; (800381c <UARTInit+0x1cc>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d107      	bne.n	8003676 <UARTInit+0x26>
		huartx->Instance = USART1;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4a6d      	ldr	r2, [pc, #436]	; (8003820 <UARTInit+0x1d0>)
 800366a:	601a      	str	r2, [r3, #0]
		nvic = USART1_IRQn;
 800366c:	2325      	movs	r3, #37	; 0x25
 800366e:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart1_data;
 8003670:	4b6c      	ldr	r3, [pc, #432]	; (8003824 <UARTInit+0x1d4>)
 8003672:	613b      	str	r3, [r7, #16]
 8003674:	e036      	b.n	80036e4 <UARTInit+0x94>
	}else if(huartx == &huart2){
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	4a6b      	ldr	r2, [pc, #428]	; (8003828 <UARTInit+0x1d8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d107      	bne.n	800368e <UARTInit+0x3e>
		huartx->Instance = USART2;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4a6a      	ldr	r2, [pc, #424]	; (800382c <UARTInit+0x1dc>)
 8003682:	601a      	str	r2, [r3, #0]
		nvic = USART2_IRQn;
 8003684:	2326      	movs	r3, #38	; 0x26
 8003686:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart2_data;
 8003688:	4b69      	ldr	r3, [pc, #420]	; (8003830 <UARTInit+0x1e0>)
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	e02a      	b.n	80036e4 <UARTInit+0x94>
	}else if(huartx == &huart3){
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4a68      	ldr	r2, [pc, #416]	; (8003834 <UARTInit+0x1e4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d107      	bne.n	80036a6 <UARTInit+0x56>
		huartx->Instance = USART3;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	4a67      	ldr	r2, [pc, #412]	; (8003838 <UARTInit+0x1e8>)
 800369a:	601a      	str	r2, [r3, #0]
		nvic = USART3_IRQn;
 800369c:	2327      	movs	r3, #39	; 0x27
 800369e:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart3_data;
 80036a0:	4b66      	ldr	r3, [pc, #408]	; (800383c <UARTInit+0x1ec>)
 80036a2:	613b      	str	r3, [r7, #16]
 80036a4:	e01e      	b.n	80036e4 <UARTInit+0x94>
	}else if(huartx == &huart4){
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4a65      	ldr	r2, [pc, #404]	; (8003840 <UARTInit+0x1f0>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d107      	bne.n	80036be <UARTInit+0x6e>
		huartx->Instance = UART4;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4a64      	ldr	r2, [pc, #400]	; (8003844 <UARTInit+0x1f4>)
 80036b2:	601a      	str	r2, [r3, #0]
		nvic = UART4_IRQn;
 80036b4:	2334      	movs	r3, #52	; 0x34
 80036b6:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart4_data;
 80036b8:	4b63      	ldr	r3, [pc, #396]	; (8003848 <UARTInit+0x1f8>)
 80036ba:	613b      	str	r3, [r7, #16]
 80036bc:	e012      	b.n	80036e4 <UARTInit+0x94>
	}else if(huartx == &huart5){
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	4a62      	ldr	r2, [pc, #392]	; (800384c <UARTInit+0x1fc>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d107      	bne.n	80036d6 <UARTInit+0x86>
		huartx->Instance = UART5;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4a61      	ldr	r2, [pc, #388]	; (8003850 <UARTInit+0x200>)
 80036ca:	601a      	str	r2, [r3, #0]
		nvic = UART5_IRQn;
 80036cc:	2335      	movs	r3, #53	; 0x35
 80036ce:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart5_data;
 80036d0:	4b60      	ldr	r3, [pc, #384]	; (8003854 <UARTInit+0x204>)
 80036d2:	613b      	str	r3, [r7, #16]
 80036d4:	e006      	b.n	80036e4 <UARTInit+0x94>
	}else{
		huartx->Instance = USART6;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4a5f      	ldr	r2, [pc, #380]	; (8003858 <UARTInit+0x208>)
 80036da:	601a      	str	r2, [r3, #0]
		nvic = USART6_IRQn;
 80036dc:	2347      	movs	r3, #71	; 0x47
 80036de:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart6_data;
 80036e0:	4b5e      	ldr	r3, [pc, #376]	; (800385c <UARTInit+0x20c>)
 80036e2:	613b      	str	r3, [r7, #16]
	}


	huartx->Init.BaudRate = baudrate;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	605a      	str	r2, [r3, #4]
	huartx->Init.WordLength = UART_WORDLENGTH_8B;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	609a      	str	r2, [r3, #8]
	huartx->Init.StopBits = UART_STOPBITS_1;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	60da      	str	r2, [r3, #12]
	huartx->Init.Parity = UART_PARITY_NONE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	611a      	str	r2, [r3, #16]
	huartx->Init.Mode = UART_MODE_TX_RX;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	220c      	movs	r2, #12
 8003700:	615a      	str	r2, [r3, #20]
	huartx->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	619a      	str	r2, [r3, #24]
	huartx->Init.OverSampling = UART_OVERSAMPLING_16;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	61da      	str	r2, [r3, #28]


	if (HAL_UART_Init(huartx) != HAL_OK)
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f011 fa00 	bl	8014b14 <HAL_UART_Init>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <UARTInit+0xce>
	{
		Error_Handler();
 800371a:	f001 fb13 	bl	8004d44 <Error_Handler>
	}

	if(rxstate == ENABLE){
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d176      	bne.n	8003812 <UARTInit+0x1c2>
		if(huartx == &huart2){
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4a40      	ldr	r2, [pc, #256]	; (8003828 <UARTInit+0x1d8>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d119      	bne.n	8003760 <UARTInit+0x110>

			HAL_NVIC_SetPriority(nvic, UART2_RX_IRQ_PRIO, 0);
 800372c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003730:	2200      	movs	r2, #0
 8003732:	2102      	movs	r1, #2
 8003734:	4618      	mov	r0, r3
 8003736:	f00b ffb3 	bl	800f6a0 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 800373a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800373e:	4618      	mov	r0, r3
 8003740:	f00b ffe6 	bl	800f710 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8003744:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003748:	4618      	mov	r0, r3
 800374a:	f00b ffc5 	bl	800f6d8 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f042 0220 	orr.w	r2, r2, #32
 800375c:	60da      	str	r2, [r3, #12]
			HAL_NVIC_EnableIRQ(nvic);
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);

		}
	}
}
 800375e:	e058      	b.n	8003812 <UARTInit+0x1c2>
		}else if(huartx == &huart3){
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4a34      	ldr	r2, [pc, #208]	; (8003834 <UARTInit+0x1e4>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d119      	bne.n	800379c <UARTInit+0x14c>
			HAL_NVIC_SetPriority(nvic, UART3_RX_IRQ_PRIO, 0);
 8003768:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800376c:	2200      	movs	r2, #0
 800376e:	210e      	movs	r1, #14
 8003770:	4618      	mov	r0, r3
 8003772:	f00b ff95 	bl	800f6a0 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 8003776:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800377a:	4618      	mov	r0, r3
 800377c:	f00b ffc8 	bl	800f710 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8003780:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003784:	4618      	mov	r0, r3
 8003786:	f00b ffa7 	bl	800f6d8 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f042 0220 	orr.w	r2, r2, #32
 8003798:	60da      	str	r2, [r3, #12]
}
 800379a:	e03a      	b.n	8003812 <UARTInit+0x1c2>
		}else if(huartx == &huart4){
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4a28      	ldr	r2, [pc, #160]	; (8003840 <UARTInit+0x1f0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d119      	bne.n	80037d8 <UARTInit+0x188>
			HAL_NVIC_SetPriority(nvic, UART4_RX_IRQ_PRIO, 0);
 80037a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037a8:	2200      	movs	r2, #0
 80037aa:	2101      	movs	r1, #1
 80037ac:	4618      	mov	r0, r3
 80037ae:	f00b ff77 	bl	800f6a0 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 80037b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f00b ffaa 	bl	800f710 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 80037bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f00b ff89 	bl	800f6d8 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0220 	orr.w	r2, r2, #32
 80037d4:	60da      	str	r2, [r3, #12]
}
 80037d6:	e01c      	b.n	8003812 <UARTInit+0x1c2>
		}else if(huartx == &huart5){
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4a1c      	ldr	r2, [pc, #112]	; (800384c <UARTInit+0x1fc>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d118      	bne.n	8003812 <UARTInit+0x1c2>
			HAL_NVIC_SetPriority(nvic, UART5_RX_IRQ_PRIO, 0);
 80037e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037e4:	2200      	movs	r2, #0
 80037e6:	2105      	movs	r1, #5
 80037e8:	4618      	mov	r0, r3
 80037ea:	f00b ff59 	bl	800f6a0 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 80037ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f00b ff8c 	bl	800f710 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 80037f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f00b ff6b 	bl	800f6d8 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0220 	orr.w	r2, r2, #32
 8003810:	60da      	str	r2, [r3, #12]
}
 8003812:	bf00      	nop
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	20005e3c 	.word	0x20005e3c
 8003820:	40011000 	.word	0x40011000
 8003824:	20005b10 	.word	0x20005b10
 8003828:	200060a8 	.word	0x200060a8
 800382c:	40004400 	.word	0x40004400
 8003830:	20005ebc 	.word	0x20005ebc
 8003834:	20005bf4 	.word	0x20005bf4
 8003838:	40004800 	.word	0x40004800
 800383c:	20005d59 	.word	0x20005d59
 8003840:	20006028 	.word	0x20006028
 8003844:	40004c00 	.word	0x40004c00
 8003848:	20006024 	.word	0x20006024
 800384c:	20005d5c 	.word	0x20005d5c
 8003850:	40005000 	.word	0x40005000
 8003854:	20005cd4 	.word	0x20005cd4
 8003858:	40011400 	.word	0x40011400
 800385c:	20005d58 	.word	0x20005d58

08003860 <USART1_IRQHandler>:
void UARTPrintString_IT(UART_HandleTypeDef* huartx, char s[]){
	if(HAL_UART_GetState(huartx) == HAL_UART_STATE_READY)
		HAL_UART_Transmit_IT(huartx, (uint8_t *)s, strlen(s));
}

void  USART1_IRQHandler(void){
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0


	HAL_UART_IRQHandler(&huart1);
 8003864:	4802      	ldr	r0, [pc, #8]	; (8003870 <USART1_IRQHandler+0x10>)
 8003866:	f011 fa91 	bl	8014d8c <HAL_UART_IRQHandler>
}
 800386a:	bf00      	nop
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	20005e3c 	.word	0x20005e3c

08003874 <USART2_IRQHandler>:

void  USART2_IRQHandler(void){
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart2);
 8003878:	4802      	ldr	r0, [pc, #8]	; (8003884 <USART2_IRQHandler+0x10>)
 800387a:	f011 fa87 	bl	8014d8c <HAL_UART_IRQHandler>
}
 800387e:	bf00      	nop
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	200060a8 	.word	0x200060a8

08003888 <USART3_IRQHandler>:

void  USART3_IRQHandler(void){
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart3);
 800388c:	4802      	ldr	r0, [pc, #8]	; (8003898 <USART3_IRQHandler+0x10>)
 800388e:	f011 fa7d 	bl	8014d8c <HAL_UART_IRQHandler>
}
 8003892:	bf00      	nop
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	20005bf4 	.word	0x20005bf4

0800389c <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart4);
 80038a0:	4802      	ldr	r0, [pc, #8]	; (80038ac <UART4_IRQHandler+0x10>)
 80038a2:	f011 fa73 	bl	8014d8c <HAL_UART_IRQHandler>
}
 80038a6:	bf00      	nop
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20006028 	.word	0x20006028

080038b0 <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart5);
 80038b4:	4802      	ldr	r0, [pc, #8]	; (80038c0 <UART5_IRQHandler+0x10>)
 80038b6:	f011 fa69 	bl	8014d8c <HAL_UART_IRQHandler>
}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20005d5c 	.word	0x20005d5c

080038c4 <USART6_IRQHandler>:

void  USART6_IRQHandler(void){
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart6);
 80038c8:	4802      	ldr	r0, [pc, #8]	; (80038d4 <USART6_IRQHandler+0x10>)
 80038ca:	f011 fa5f 	bl	8014d8c <HAL_UART_IRQHandler>
}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20005fe4 	.word	0x20005fe4

080038d8 <CANxInit>:
 * Function Return		: CAN_InitStatus				Constant indicates initialization succeed which will be
  *        											    CAN_InitStatus_Failed or CAN_InitStatus_Success.
 * Function Example		: CAN1_Init(&hcan1,4,CAN_Filter_FIFO0,0,0,13,1,1);
 */
void CANxInit(CAN_HandleTypeDef* hcanx,uint16_t prescaler,uint32_t FilterFIFOAssignment,uint16_t CAN_FilterId_11bits,
		uint16_t CAN_FilterMaskId_11bits,uint8_t CAN_FilterNumber, uint8_t rate){
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08e      	sub	sp, #56	; 0x38
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	607a      	str	r2, [r7, #4]
 80038e2:	461a      	mov	r2, r3
 80038e4:	460b      	mov	r3, r1
 80038e6:	817b      	strh	r3, [r7, #10]
 80038e8:	4613      	mov	r3, r2
 80038ea:	813b      	strh	r3, [r7, #8]

	CAN_FilterTypeDef sFilterConfig = {0};
 80038ec:	f107 0310 	add.w	r3, r7, #16
 80038f0:	2228      	movs	r2, #40	; 0x28
 80038f2:	2100      	movs	r1, #0
 80038f4:	4618      	mov	r0, r3
 80038f6:	f015 fd19 	bl	801932c <memset>

	if(hcanx == &hcan1){
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4a53      	ldr	r2, [pc, #332]	; (8003a4c <CANxInit+0x174>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d103      	bne.n	800390a <CANxInit+0x32>
		hcanx->Instance = CAN1;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	4a52      	ldr	r2, [pc, #328]	; (8003a50 <CANxInit+0x178>)
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	e002      	b.n	8003910 <CANxInit+0x38>
	}else{
		hcanx->Instance = CAN2;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4a51      	ldr	r2, [pc, #324]	; (8003a54 <CANxInit+0x17c>)
 800390e:	601a      	str	r2, [r3, #0]
	}


	hcanx->Init.Prescaler = prescaler;
 8003910:	897a      	ldrh	r2, [r7, #10]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	605a      	str	r2, [r3, #4]
	hcanx->Init.Mode = CAN_MODE_NORMAL;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	609a      	str	r2, [r3, #8]

	hcanx->Init.SyncJumpWidth = CAN_SJW_1TQ;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	60da      	str	r2, [r3, #12]
	if(rate == CAN_1MHz){
 8003922:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003926:	2b01      	cmp	r3, #1
 8003928:	d108      	bne.n	800393c <CANxInit+0x64>
		//sampling point 85.71%
		hcanx->Init.TimeSeg1 = CAN_BS1_11TQ;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8003930:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_2TQ;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003938:	615a      	str	r2, [r3, #20]
 800393a:	e00b      	b.n	8003954 <CANxInit+0x7c>
	}else if(rate == CAN_500KHz){
 800393c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003940:	2b00      	cmp	r3, #0
 8003942:	d107      	bne.n	8003954 <CANxInit+0x7c>
		//sampling point 71.42%
		hcanx->Init.TimeSeg1 = CAN_BS1_14TQ;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 800394a:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_6TQ;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 8003952:	615a      	str	r2, [r3, #20]
	}
	hcanx->Init.TimeTriggeredMode = DISABLE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	761a      	strb	r2, [r3, #24]
	hcanx->Init.AutoBusOff = ENABLE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2201      	movs	r2, #1
 800395e:	765a      	strb	r2, [r3, #25]
	hcanx->Init.AutoWakeUp = DISABLE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	769a      	strb	r2, [r3, #26]
	hcanx->Init.AutoRetransmission = DISABLE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	76da      	strb	r2, [r3, #27]
	hcanx->Init.ReceiveFifoLocked = DISABLE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	771a      	strb	r2, [r3, #28]
	hcanx->Init.TransmitFifoPriority = DISABLE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(hcanx) != HAL_OK)
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f00a ff09 	bl	800e790 <HAL_CAN_Init>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <CANxInit+0xb0>
	{
		Error_Handler();
 8003984:	f001 f9de 	bl	8004d44 <Error_Handler>
	}

	sFilterConfig.SlaveStartFilterBank = 14;
 8003988:	230e      	movs	r3, #14
 800398a:	637b      	str	r3, [r7, #52]	; 0x34
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 800398c:	2301      	movs	r3, #1
 800398e:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003990:	2300      	movs	r3, #0
 8003992:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment=FilterFIFOAssignment; //set fifo assignment
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh= CAN_FilterId_11bits <<5; //the ID that the filter looks for (switch this for the other microcontroller)
 8003998:	893b      	ldrh	r3, [r7, #8]
 800399a:	015b      	lsls	r3, r3, #5
 800399c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow=0;
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh=CAN_FilterMaskId_11bits <<5;
 80039a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80039a6:	015b      	lsls	r3, r3, #5
 80039a8:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow=0;
 80039aa:	2300      	movs	r3, #0
 80039ac:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //set filter scale
 80039ae:	2301      	movs	r3, #1
 80039b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterBank = CAN_FilterNumber;
 80039b2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(hcanx, &sFilterConfig);
 80039b8:	f107 0310 	add.w	r3, r7, #16
 80039bc:	4619      	mov	r1, r3
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f00a ffe2 	bl	800e988 <HAL_CAN_ConfigFilter>



	if(hcanx == &hcan1){
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4a21      	ldr	r2, [pc, #132]	; (8003a4c <CANxInit+0x174>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d11c      	bne.n	8003a06 <CANxInit+0x12e>

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10c      	bne.n	80039ec <CANxInit+0x114>
			/* CAN1_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX0_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 80039d2:	2200      	movs	r2, #0
 80039d4:	210e      	movs	r1, #14
 80039d6:	2014      	movs	r0, #20
 80039d8:	f00b fe62 	bl	800f6a0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80039dc:	2014      	movs	r0, #20
 80039de:	f00b fe7b 	bl	800f6d8 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 80039e2:	2102      	movs	r1, #2
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f00b fb15 	bl	800f014 <HAL_CAN_ActivateNotification>
 80039ea:	e028      	b.n	8003a3e <CANxInit+0x166>

		}else{
			/* CAN1_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX1_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 80039ec:	2200      	movs	r2, #0
 80039ee:	210e      	movs	r1, #14
 80039f0:	2015      	movs	r0, #21
 80039f2:	f00b fe55 	bl	800f6a0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80039f6:	2015      	movs	r0, #21
 80039f8:	f00b fe6e 	bl	800f6d8 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 80039fc:	2110      	movs	r1, #16
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f00b fb08 	bl	800f014 <HAL_CAN_ActivateNotification>
 8003a04:	e01b      	b.n	8003a3e <CANxInit+0x166>
		}
	}else{

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10c      	bne.n	8003a26 <CANxInit+0x14e>
			/* CAN2_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX0_IRQn, CAN2_FIFO0_IRQ_PRIO, 0);
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	210e      	movs	r1, #14
 8003a10:	2040      	movs	r0, #64	; 0x40
 8003a12:	f00b fe45 	bl	800f6a0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003a16:	2040      	movs	r0, #64	; 0x40
 8003a18:	f00b fe5e 	bl	800f6d8 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003a1c:	2102      	movs	r1, #2
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f00b faf8 	bl	800f014 <HAL_CAN_ActivateNotification>
 8003a24:	e00b      	b.n	8003a3e <CANxInit+0x166>
		}else{
			/* CAN2_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX1_IRQn, CAN2_FIFO1_IRQ_PRIO, 0);
 8003a26:	2200      	movs	r2, #0
 8003a28:	210e      	movs	r1, #14
 8003a2a:	2041      	movs	r0, #65	; 0x41
 8003a2c:	f00b fe38 	bl	800f6a0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8003a30:	2041      	movs	r0, #65	; 0x41
 8003a32:	f00b fe51 	bl	800f6d8 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 8003a36:	2110      	movs	r1, #16
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f00b faeb 	bl	800f014 <HAL_CAN_ActivateNotification>
		}
	}

	HAL_CAN_Start(hcanx);
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f00b f882 	bl	800eb48 <HAL_CAN_Start>

}
 8003a44:	bf00      	nop
 8003a46:	3738      	adds	r7, #56	; 0x38
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	20009d44 	.word	0x20009d44
 8003a50:	40006400 	.word	0x40006400
 8003a54:	40006800 	.word	0x40006800

08003a58 <CAN_TxMsg>:
 * Function Return		: canmailbox		The number of the mailbox that is used for transmission or
  *         								CAN_TxStatus_NoMailBox if there is no empty mailbox.
 * Function Example		: CAN_TxMsg(&hcan1,1,&data,1);
 */
uint32_t CAN_TxMsg(CAN_HandleTypeDef* hcanx,uint32_t StdId_11bits,uint8_t *Msg,uint8_t len)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b090      	sub	sp, #64	; 0x40
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
 8003a64:	70fb      	strb	r3, [r7, #3]
//	sys.rns_busy = 1;
	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0);
 8003a66:	bf00      	nop
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f00b f98c 	bl	800ed86 <HAL_CAN_GetTxMailboxesFreeLevel>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0f9      	beq.n	8003a68 <CAN_TxMsg+0x10>
	CAN_TxHeaderTypeDef TxMessage;
	uint32_t canMailbox;
	uint8_t* buf = Msg;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t i=0,datalen=len;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003a7c:	78fb      	ldrb	r3, [r7, #3]
 8003a7e:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t Txmsg[8];

	TxMessage.StdId=StdId_11bits;					 // standard identifier=0
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	623b      	str	r3, [r7, #32]
	TxMessage.ExtId=0;					 // extended identifier=StdId
 8003a84:	2300      	movs	r3, #0
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
	TxMessage.IDE=CAN_Id_Standard;			 // type of identifier for the message is Standard
 8003a88:	2300      	movs	r3, #0
 8003a8a:	62bb      	str	r3, [r7, #40]	; 0x28
	TxMessage.RTR=CAN_RTR_Data;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxMessage.TransmitGlobalTime = DISABLE;  // the type of frame for the message that will be transmitted
 8003a90:	2300      	movs	r3, #0
 8003a92:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	while(datalen--)
 8003a96:	e00c      	b.n	8003ab2 <CAN_TxMsg+0x5a>
	{
		Txmsg[i++]= *(uint8_t*)buf++;
 8003a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a9e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003aa0:	1c51      	adds	r1, r2, #1
 8003aa2:	8779      	strh	r1, [r7, #58]	; 0x3a
 8003aa4:	4611      	mov	r1, r2
 8003aa6:	781a      	ldrb	r2, [r3, #0]
 8003aa8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003aac:	440b      	add	r3, r1
 8003aae:	f803 2c2c 	strb.w	r2, [r3, #-44]
	while(datalen--)
 8003ab2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003ab4:	1e5a      	subs	r2, r3, #1
 8003ab6:	873a      	strh	r2, [r7, #56]	; 0x38
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1ed      	bne.n	8003a98 <CAN_TxMsg+0x40>
//			if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
//				Error_Handler();
//			}
//		}
	}
	if(i>0){
 8003abc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00f      	beq.n	8003ae2 <CAN_TxMsg+0x8a>
		TxMessage.DLC = i;
 8003ac2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003ac4:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 8003ac6:	f107 031c 	add.w	r3, r7, #28
 8003aca:	f107 0214 	add.w	r2, r7, #20
 8003ace:	f107 0120 	add.w	r1, r7, #32
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f00b f87c 	bl	800ebd0 <HAL_CAN_AddTxMessage>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <CAN_TxMsg+0x8a>
			Error_Handler();
 8003ade:	f001 f931 	bl	8004d44 <Error_Handler>
		}

	}
//	sys.rns_busy = 0;

	return(canMailbox);
 8003ae2:	69fb      	ldr	r3, [r7, #28]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3740      	adds	r7, #64	; 0x40
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <CAN_TxMsgEID>:
 * Function Return		: canmailbox		The number of the mailbox that is used for transmission or
  *         								CAN_TxStatus_NoMailBox if there is no empty mailbox.
 * Function Example		: CAN_TxMsg(&hcan1,1,&data,1);
 */
uint32_t CAN_TxMsgEID(CAN_HandleTypeDef* hcanx,uint32_t EID,uint8_t *Msg,uint8_t len)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b090      	sub	sp, #64	; 0x40
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	70fb      	strb	r3, [r7, #3]


	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0);
 8003afa:	bf00      	nop
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f00b f942 	bl	800ed86 <HAL_CAN_GetTxMailboxesFreeLevel>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0f9      	beq.n	8003afc <CAN_TxMsgEID+0x10>
	CAN_TxHeaderTypeDef TxMessage;
	uint32_t canMailbox;
	uint8_t* buf = Msg;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t i=0,datalen=len;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003b10:	78fb      	ldrb	r3, [r7, #3]
 8003b12:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t Txmsg[8];

	TxMessage.StdId=0;					 // standard identifier=0
 8003b14:	2300      	movs	r3, #0
 8003b16:	623b      	str	r3, [r7, #32]
	TxMessage.ExtId=EID;					 // extended identifier=StdId
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24
	TxMessage.IDE=CAN_Id_Extended;			 // type of identifier for the message is Standard
 8003b1c:	2304      	movs	r3, #4
 8003b1e:	62bb      	str	r3, [r7, #40]	; 0x28
	TxMessage.RTR=CAN_RTR_Data;
 8003b20:	2300      	movs	r3, #0
 8003b22:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxMessage.TransmitGlobalTime = DISABLE;  // the type of frame for the message that will be transmitted
 8003b24:	2300      	movs	r3, #0
 8003b26:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	while(datalen--)
 8003b2a:	e01f      	b.n	8003b6c <CAN_TxMsgEID+0x80>
	{
		Txmsg[i++]= *(uint8_t*)buf++;
 8003b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b32:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003b34:	1c51      	adds	r1, r2, #1
 8003b36:	8779      	strh	r1, [r7, #58]	; 0x3a
 8003b38:	4611      	mov	r1, r2
 8003b3a:	781a      	ldrb	r2, [r3, #0]
 8003b3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b40:	440b      	add	r3, r1
 8003b42:	f803 2c2c 	strb.w	r2, [r3, #-44]
		if(i == 8){
 8003b46:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d10f      	bne.n	8003b6c <CAN_TxMsgEID+0x80>
			TxMessage.DLC=8;
 8003b4c:	2308      	movs	r3, #8
 8003b4e:	633b      	str	r3, [r7, #48]	; 0x30
			if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 8003b50:	f107 031c 	add.w	r3, r7, #28
 8003b54:	f107 0214 	add.w	r2, r7, #20
 8003b58:	f107 0120 	add.w	r1, r7, #32
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f00b f837 	bl	800ebd0 <HAL_CAN_AddTxMessage>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <CAN_TxMsgEID+0x80>
				Error_Handler();
 8003b68:	f001 f8ec 	bl	8004d44 <Error_Handler>
	while(datalen--)
 8003b6c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003b6e:	1e5a      	subs	r2, r3, #1
 8003b70:	873a      	strh	r2, [r7, #56]	; 0x38
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1da      	bne.n	8003b2c <CAN_TxMsgEID+0x40>
			}
		}
	}
	if(i>0){
 8003b76:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00f      	beq.n	8003b9c <CAN_TxMsgEID+0xb0>
		TxMessage.DLC = i;
 8003b7c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003b7e:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 8003b80:	f107 031c 	add.w	r3, r7, #28
 8003b84:	f107 0214 	add.w	r2, r7, #20
 8003b88:	f107 0120 	add.w	r1, r7, #32
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f00b f81f 	bl	800ebd0 <HAL_CAN_AddTxMessage>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <CAN_TxMsgEID+0xb0>
			Error_Handler();
 8003b98:	f001 f8d4 	bl	8004d44 <Error_Handler>
		}

	}

	return(canMailbox);
 8003b9c:	69fb      	ldr	r3, [r7, #28]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3740      	adds	r7, #64	; 0x40
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
	...

08003ba8 <I2CX_DMA_RX_Init>:
 * 						  ClockSpeed					Speed of transmission can be CLOCK_SPEED_100KHz or CLOCK_SPEED_400KHz
 * Function Return		: NONE
 * Function Example		: I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 *
 */
void I2CX_DMA_RX_Init(I2C_HandleTypeDef *hi2cx,DMA_HandleTypeDef* hdma_i2cx,uint8_t OwnAddress,uint32_t ClockSpeed){
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b088      	sub	sp, #32
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	603b      	str	r3, [r7, #0]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	71fb      	strb	r3, [r7, #7]

	IRQn_Type nvic,nvicER,nvicEV;
	uint32_t DMA_CHANNEL;
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003bb8:	2300      	movs	r3, #0
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	4b9e      	ldr	r3, [pc, #632]	; (8003e38 <I2CX_DMA_RX_Init+0x290>)
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc0:	4a9d      	ldr	r2, [pc, #628]	; (8003e38 <I2CX_DMA_RX_Init+0x290>)
 8003bc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bc6:	6313      	str	r3, [r2, #48]	; 0x30
 8003bc8:	4b9b      	ldr	r3, [pc, #620]	; (8003e38 <I2CX_DMA_RX_Init+0x290>)
 8003bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bd0:	617b      	str	r3, [r7, #20]
 8003bd2:	697b      	ldr	r3, [r7, #20]
	if(hi2cx == &hi2c1){
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4a99      	ldr	r2, [pc, #612]	; (8003e3c <I2CX_DMA_RX_Init+0x294>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d11d      	bne.n	8003c18 <I2CX_DMA_RX_Init+0x70>

		hi2cx->Instance = I2C1;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4a98      	ldr	r2, [pc, #608]	; (8003e40 <I2CX_DMA_RX_Init+0x298>)
 8003be0:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream0;
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	4a97      	ldr	r2, [pc, #604]	; (8003e44 <I2CX_DMA_RX_Init+0x29c>)
 8003be6:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_1;
 8003be8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bec:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream0_IRQn;
 8003bee:	230b      	movs	r3, #11
 8003bf0:	77fb      	strb	r3, [r7, #31]

		nvicER = I2C1_ER_IRQn;
 8003bf2:	2320      	movs	r3, #32
 8003bf4:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C1_EV_IRQn;
 8003bf6:	231f      	movs	r3, #31
 8003bf8:	777b      	strb	r3, [r7, #29]
		__HAL_RCC_DMA1_CLK_ENABLE();
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	4b8e      	ldr	r3, [pc, #568]	; (8003e38 <I2CX_DMA_RX_Init+0x290>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	4a8d      	ldr	r2, [pc, #564]	; (8003e38 <I2CX_DMA_RX_Init+0x290>)
 8003c04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c08:	6313      	str	r3, [r2, #48]	; 0x30
 8003c0a:	4b8b      	ldr	r3, [pc, #556]	; (8003e38 <I2CX_DMA_RX_Init+0x290>)
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c12:	613b      	str	r3, [r7, #16]
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	e022      	b.n	8003c5e <I2CX_DMA_RX_Init+0xb6>
	}else if(hi2cx == &hi2c2){
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4a8b      	ldr	r2, [pc, #556]	; (8003e48 <I2CX_DMA_RX_Init+0x2a0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d10f      	bne.n	8003c40 <I2CX_DMA_RX_Init+0x98>

		hi2cx->Instance = I2C2;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4a8a      	ldr	r2, [pc, #552]	; (8003e4c <I2CX_DMA_RX_Init+0x2a4>)
 8003c24:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream3;
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	4a89      	ldr	r2, [pc, #548]	; (8003e50 <I2CX_DMA_RX_Init+0x2a8>)
 8003c2a:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_7;
 8003c2c:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 8003c30:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream3_IRQn;
 8003c32:	230e      	movs	r3, #14
 8003c34:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C2_ER_IRQn;
 8003c36:	2322      	movs	r3, #34	; 0x22
 8003c38:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C2_EV_IRQn;
 8003c3a:	2321      	movs	r3, #33	; 0x21
 8003c3c:	777b      	strb	r3, [r7, #29]
 8003c3e:	e00e      	b.n	8003c5e <I2CX_DMA_RX_Init+0xb6>

	}else{
		hi2cx->Instance = I2C3;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4a84      	ldr	r2, [pc, #528]	; (8003e54 <I2CX_DMA_RX_Init+0x2ac>)
 8003c44:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream2;
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	4a83      	ldr	r2, [pc, #524]	; (8003e58 <I2CX_DMA_RX_Init+0x2b0>)
 8003c4a:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_3;
 8003c4c:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8003c50:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream2_IRQn;
 8003c52:	230d      	movs	r3, #13
 8003c54:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C3_ER_IRQn;
 8003c56:	2349      	movs	r3, #73	; 0x49
 8003c58:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C3_EV_IRQn;
 8003c5a:	2348      	movs	r3, #72	; 0x48
 8003c5c:	777b      	strb	r3, [r7, #29]
	}

	hdma_i2cx->Init.Channel = DMA_CHANNEL;
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	605a      	str	r2, [r3, #4]
	hdma_i2cx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2200      	movs	r2, #0
 8003c68:	609a      	str	r2, [r3, #8]
	hdma_i2cx->Init.PeriphInc = DMA_PINC_DISABLE;
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	60da      	str	r2, [r3, #12]
	hdma_i2cx->Init.MemInc = DMA_MINC_ENABLE;
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c76:	611a      	str	r2, [r3, #16]
	hdma_i2cx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	615a      	str	r2, [r3, #20]
	hdma_i2cx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2200      	movs	r2, #0
 8003c82:	619a      	str	r2, [r3, #24]
	hdma_i2cx->Init.Mode = DMA_NORMAL;
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2200      	movs	r2, #0
 8003c88:	61da      	str	r2, [r3, #28]
	hdma_i2cx->Init.Priority = DMA_PRIORITY_HIGH;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c90:	621a      	str	r2, [r3, #32]
	hdma_i2cx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2200      	movs	r2, #0
 8003c96:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_i2cx->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2203      	movs	r2, #3
 8003c9c:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_i2cx->Init.MemBurst = DMA_MBURST_INC4;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003ca4:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_i2cx->Init.PeriphBurst = DMA_PBURST_INC4;
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003cac:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(hdma_i2cx) != HAL_OK)
 8003cae:	68b8      	ldr	r0, [r7, #8]
 8003cb0:	f00b fd3c 	bl	800f72c <HAL_DMA_Init>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <I2CX_DMA_RX_Init+0x116>
	{

		Error_Handler();
 8003cba:	f001 f843 	bl	8004d44 <Error_Handler>

	}
	__HAL_LINKDMA(hi2cx,hdmarx,*hdma_i2cx);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	639a      	str	r2, [r3, #56]	; 0x38
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	639a      	str	r2, [r3, #56]	; 0x38

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */

	//	__HAL_DMA_ENABLE_IT(hdma_i2cx,DMA_IT_TC);
	if(hi2cx == &hi2c1){
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4a5b      	ldr	r2, [pc, #364]	; (8003e3c <I2CX_DMA_RX_Init+0x294>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d111      	bne.n	8003cf6 <I2CX_DMA_RX_Init+0x14e>
		HAL_NVIC_SetPriority(nvic, DMA1_Str0__IRQ_PRIO, 0);
 8003cd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	210a      	movs	r1, #10
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f00b fce0 	bl	800f6a0 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003ce0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f00b fd13 	bl	800f710 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003cea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f00b fcf2 	bl	800f6d8 <HAL_NVIC_EnableIRQ>
 8003cf4:	e026      	b.n	8003d44 <I2CX_DMA_RX_Init+0x19c>
	}else if(hi2cx == &hi2c2){
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4a53      	ldr	r2, [pc, #332]	; (8003e48 <I2CX_DMA_RX_Init+0x2a0>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d111      	bne.n	8003d22 <I2CX_DMA_RX_Init+0x17a>
		HAL_NVIC_SetPriority(nvic, DMA1_Str3__IRQ_PRIO, 0);
 8003cfe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d02:	2200      	movs	r2, #0
 8003d04:	210e      	movs	r1, #14
 8003d06:	4618      	mov	r0, r3
 8003d08:	f00b fcca 	bl	800f6a0 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003d0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f00b fcfd 	bl	800f710 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003d16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f00b fcdc 	bl	800f6d8 <HAL_NVIC_EnableIRQ>
 8003d20:	e010      	b.n	8003d44 <I2CX_DMA_RX_Init+0x19c>
	}else{
		HAL_NVIC_SetPriority(nvic, DMA1_Str2__IRQ_PRIO, 0);
 8003d22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d26:	2200      	movs	r2, #0
 8003d28:	210e      	movs	r1, #14
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f00b fcb8 	bl	800f6a0 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003d30:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f00b fceb 	bl	800f710 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003d3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f00b fcca 	bl	800f6d8 <HAL_NVIC_EnableIRQ>
	}

	hi2cx->Init.ClockSpeed = ClockSpeed;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	605a      	str	r2, [r3, #4]
	hi2cx->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	609a      	str	r2, [r3, #8]
	hi2cx->Init.OwnAddress1 = OwnAddress<<1;
 8003d50:	79fb      	ldrb	r3, [r7, #7]
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	461a      	mov	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	60da      	str	r2, [r3, #12]
	hi2cx->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d60:	611a      	str	r2, [r3, #16]
	hi2cx->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	615a      	str	r2, [r3, #20]
	hi2cx->Init.OwnAddress2 = 0;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	619a      	str	r2, [r3, #24]
	hi2cx->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	61da      	str	r2, [r3, #28]
	hi2cx->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	621a      	str	r2, [r3, #32]

	if(hi2cx == &hi2c1){
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4a2f      	ldr	r2, [pc, #188]	; (8003e3c <I2CX_DMA_RX_Init+0x294>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d118      	bne.n	8003db4 <I2CX_DMA_RX_Init+0x20c>
		HAL_NVIC_SetPriority(nvicER, I2C1_ER_IRQ_PRIO, 0);
 8003d82:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003d86:	2200      	movs	r2, #0
 8003d88:	2100      	movs	r1, #0
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f00b fc88 	bl	800f6a0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003d90:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f00b fc9f 	bl	800f6d8 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C1_EV_IRQ_PRIO, 0);
 8003d9a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2109      	movs	r1, #9
 8003da2:	4618      	mov	r0, r3
 8003da4:	f00b fc7c 	bl	800f6a0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003da8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f00b fc93 	bl	800f6d8 <HAL_NVIC_EnableIRQ>
 8003db2:	e034      	b.n	8003e1e <I2CX_DMA_RX_Init+0x276>
	}else if(hi2cx == &hi2c2){
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4a24      	ldr	r2, [pc, #144]	; (8003e48 <I2CX_DMA_RX_Init+0x2a0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d118      	bne.n	8003dee <I2CX_DMA_RX_Init+0x246>
		HAL_NVIC_SetPriority(nvicER, I2C2_ER_IRQ_PRIO, 0);
 8003dbc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	210e      	movs	r1, #14
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f00b fc6b 	bl	800f6a0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003dca:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f00b fc82 	bl	800f6d8 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C2_EV_IRQ_PRIO, 0);
 8003dd4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	210e      	movs	r1, #14
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f00b fc5f 	bl	800f6a0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003de2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f00b fc76 	bl	800f6d8 <HAL_NVIC_EnableIRQ>
 8003dec:	e017      	b.n	8003e1e <I2CX_DMA_RX_Init+0x276>
	}else{
		HAL_NVIC_SetPriority(nvicER, I2C3_ER_IRQ_PRIO, 0);
 8003dee:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003df2:	2200      	movs	r2, #0
 8003df4:	210e      	movs	r1, #14
 8003df6:	4618      	mov	r0, r3
 8003df8:	f00b fc52 	bl	800f6a0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003dfc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f00b fc69 	bl	800f6d8 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C3_EV_IRQ_PRIO, 0);
 8003e06:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	210e      	movs	r1, #14
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f00b fc46 	bl	800f6a0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003e14:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f00b fc5d 	bl	800f6d8 <HAL_NVIC_EnableIRQ>
	}

	if (HAL_I2C_Init(hi2cx) != HAL_OK)
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f00c fe24 	bl	8010a6c <HAL_I2C_Init>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <I2CX_DMA_RX_Init+0x286>
	{

		Error_Handler();
 8003e2a:	f000 ff8b 	bl	8004d44 <Error_Handler>
	}
}
 8003e2e:	bf00      	nop
 8003e30:	3720      	adds	r7, #32
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	20006b64 	.word	0x20006b64
 8003e40:	40005400 	.word	0x40005400
 8003e44:	40026010 	.word	0x40026010
 8003e48:	20006bc0 	.word	0x20006bc0
 8003e4c:	40005800 	.word	0x40005800
 8003e50:	40026058 	.word	0x40026058
 8003e54:	40005c00 	.word	0x40005c00
 8003e58:	40026040 	.word	0x40026040

08003e5c <I2C2_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_EV_IRQHandler(void){
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0


	HAL_I2C_EV_IRQHandler(&hi2c2);
 8003e60:	4802      	ldr	r0, [pc, #8]	; (8003e6c <I2C2_EV_IRQHandler+0x10>)
 8003e62:	f00d f88d 	bl	8010f80 <HAL_I2C_EV_IRQHandler>


}
 8003e66:	bf00      	nop
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	20006bc0 	.word	0x20006bc0

08003e70 <I2C2_ER_IRQHandler>:
 * Function Remarks		: This interrupt handle the error event of I2C2.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_ER_IRQHandler(void){
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0

	HAL_I2C_ER_IRQHandler(&hi2c2);
 8003e74:	4802      	ldr	r0, [pc, #8]	; (8003e80 <I2C2_ER_IRQHandler+0x10>)
 8003e76:	f00d f9f0 	bl	801125a <HAL_I2C_ER_IRQHandler>


}
 8003e7a:	bf00      	nop
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	20006bc0 	.word	0x20006bc0

08003e84 <I2C3_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C3_EV_IRQHandler(void){
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0

	//	taskENTER_CRITICAL();
	HAL_I2C_EV_IRQHandler(&hi2c3);
 8003e88:	4802      	ldr	r0, [pc, #8]	; (8003e94 <I2C3_EV_IRQHandler+0x10>)
 8003e8a:	f00d f879 	bl	8010f80 <HAL_I2C_EV_IRQHandler>
	//	taskEXIT_CRITICAL();

}
 8003e8e:	bf00      	nop
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20006768 	.word	0x20006768

08003e98 <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
static SPI_HandleTypeDef led_spi;

void ILI9341_Init() {
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
//	ILI9341_SPI_Init();

	/* Reset The Screen */
	ILI9341_Reset();
 8003e9c:	f000 f910 	bl	80040c0 <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 8003ea0:	2001      	movs	r0, #1
 8003ea2:	f000 fa13 	bl	80042cc <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 8003ea6:	20cb      	movs	r0, #203	; 0xcb
 8003ea8:	f000 fa10 	bl	80042cc <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 8003eac:	2039      	movs	r0, #57	; 0x39
 8003eae:	f000 fa1c 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 8003eb2:	202c      	movs	r0, #44	; 0x2c
 8003eb4:	f000 fa19 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8003eb8:	2000      	movs	r0, #0
 8003eba:	f000 fa16 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 8003ebe:	2034      	movs	r0, #52	; 0x34
 8003ec0:	f000 fa13 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8003ec4:	2002      	movs	r0, #2
 8003ec6:	f000 fa10 	bl	80042ea <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 8003eca:	20cf      	movs	r0, #207	; 0xcf
 8003ecc:	f000 f9fe 	bl	80042cc <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8003ed0:	2000      	movs	r0, #0
 8003ed2:	f000 fa0a 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8003ed6:	20c1      	movs	r0, #193	; 0xc1
 8003ed8:	f000 fa07 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8003edc:	2030      	movs	r0, #48	; 0x30
 8003ede:	f000 fa04 	bl	80042ea <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8003ee2:	20e8      	movs	r0, #232	; 0xe8
 8003ee4:	f000 f9f2 	bl	80042cc <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 8003ee8:	2085      	movs	r0, #133	; 0x85
 8003eea:	f000 f9fe 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8003eee:	2000      	movs	r0, #0
 8003ef0:	f000 f9fb 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8003ef4:	2078      	movs	r0, #120	; 0x78
 8003ef6:	f000 f9f8 	bl	80042ea <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 8003efa:	20ea      	movs	r0, #234	; 0xea
 8003efc:	f000 f9e6 	bl	80042cc <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8003f00:	2000      	movs	r0, #0
 8003f02:	f000 f9f2 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8003f06:	2000      	movs	r0, #0
 8003f08:	f000 f9ef 	bl	80042ea <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 8003f0c:	20ed      	movs	r0, #237	; 0xed
 8003f0e:	f000 f9dd 	bl	80042cc <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8003f12:	2064      	movs	r0, #100	; 0x64
 8003f14:	f000 f9e9 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8003f18:	2003      	movs	r0, #3
 8003f1a:	f000 f9e6 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 8003f1e:	2012      	movs	r0, #18
 8003f20:	f000 f9e3 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 8003f24:	2081      	movs	r0, #129	; 0x81
 8003f26:	f000 f9e0 	bl	80042ea <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 8003f2a:	20f7      	movs	r0, #247	; 0xf7
 8003f2c:	f000 f9ce 	bl	80042cc <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8003f30:	2020      	movs	r0, #32
 8003f32:	f000 f9da 	bl	80042ea <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 8003f36:	20c0      	movs	r0, #192	; 0xc0
 8003f38:	f000 f9c8 	bl	80042cc <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8003f3c:	2010      	movs	r0, #16
 8003f3e:	f000 f9d4 	bl	80042ea <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 8003f42:	20c1      	movs	r0, #193	; 0xc1
 8003f44:	f000 f9c2 	bl	80042cc <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8003f48:	2010      	movs	r0, #16
 8003f4a:	f000 f9ce 	bl	80042ea <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 8003f4e:	20c5      	movs	r0, #197	; 0xc5
 8003f50:	f000 f9bc 	bl	80042cc <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8003f54:	203e      	movs	r0, #62	; 0x3e
 8003f56:	f000 f9c8 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 8003f5a:	2028      	movs	r0, #40	; 0x28
 8003f5c:	f000 f9c5 	bl	80042ea <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 8003f60:	20c7      	movs	r0, #199	; 0xc7
 8003f62:	f000 f9b3 	bl	80042cc <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 8003f66:	2086      	movs	r0, #134	; 0x86
 8003f68:	f000 f9bf 	bl	80042ea <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 8003f6c:	2036      	movs	r0, #54	; 0x36
 8003f6e:	f000 f9ad 	bl	80042cc <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 8003f72:	2048      	movs	r0, #72	; 0x48
 8003f74:	f000 f9b9 	bl	80042ea <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 8003f78:	203a      	movs	r0, #58	; 0x3a
 8003f7a:	f000 f9a7 	bl	80042cc <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 8003f7e:	2055      	movs	r0, #85	; 0x55
 8003f80:	f000 f9b3 	bl	80042ea <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 8003f84:	20b1      	movs	r0, #177	; 0xb1
 8003f86:	f000 f9a1 	bl	80042cc <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8003f8a:	2000      	movs	r0, #0
 8003f8c:	f000 f9ad 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 8003f90:	2018      	movs	r0, #24
 8003f92:	f000 f9aa 	bl	80042ea <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 8003f96:	20b6      	movs	r0, #182	; 0xb6
 8003f98:	f000 f998 	bl	80042cc <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 8003f9c:	2008      	movs	r0, #8
 8003f9e:	f000 f9a4 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 8003fa2:	2082      	movs	r0, #130	; 0x82
 8003fa4:	f000 f9a1 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 8003fa8:	2027      	movs	r0, #39	; 0x27
 8003faa:	f000 f99e 	bl	80042ea <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 8003fae:	20f2      	movs	r0, #242	; 0xf2
 8003fb0:	f000 f98c 	bl	80042cc <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8003fb4:	2000      	movs	r0, #0
 8003fb6:	f000 f998 	bl	80042ea <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 8003fba:	2026      	movs	r0, #38	; 0x26
 8003fbc:	f000 f986 	bl	80042cc <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8003fc0:	2001      	movs	r0, #1
 8003fc2:	f000 f992 	bl	80042ea <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 8003fc6:	20e0      	movs	r0, #224	; 0xe0
 8003fc8:	f000 f980 	bl	80042cc <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8003fcc:	200f      	movs	r0, #15
 8003fce:	f000 f98c 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8003fd2:	2031      	movs	r0, #49	; 0x31
 8003fd4:	f000 f989 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 8003fd8:	202b      	movs	r0, #43	; 0x2b
 8003fda:	f000 f986 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8003fde:	200c      	movs	r0, #12
 8003fe0:	f000 f983 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8003fe4:	200e      	movs	r0, #14
 8003fe6:	f000 f980 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 8003fea:	2008      	movs	r0, #8
 8003fec:	f000 f97d 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8003ff0:	204e      	movs	r0, #78	; 0x4e
 8003ff2:	f000 f97a 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 8003ff6:	20f1      	movs	r0, #241	; 0xf1
 8003ff8:	f000 f977 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8003ffc:	2037      	movs	r0, #55	; 0x37
 8003ffe:	f000 f974 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8004002:	2007      	movs	r0, #7
 8004004:	f000 f971 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 8004008:	2010      	movs	r0, #16
 800400a:	f000 f96e 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800400e:	2003      	movs	r0, #3
 8004010:	f000 f96b 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8004014:	200e      	movs	r0, #14
 8004016:	f000 f968 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 800401a:	2009      	movs	r0, #9
 800401c:	f000 f965 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8004020:	2000      	movs	r0, #0
 8004022:	f000 f962 	bl	80042ea <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 8004026:	20e1      	movs	r0, #225	; 0xe1
 8004028:	f000 f950 	bl	80042cc <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800402c:	2000      	movs	r0, #0
 800402e:	f000 f95c 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8004032:	200e      	movs	r0, #14
 8004034:	f000 f959 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 8004038:	2014      	movs	r0, #20
 800403a:	f000 f956 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800403e:	2003      	movs	r0, #3
 8004040:	f000 f953 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8004044:	2011      	movs	r0, #17
 8004046:	f000 f950 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800404a:	2007      	movs	r0, #7
 800404c:	f000 f94d 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8004050:	2031      	movs	r0, #49	; 0x31
 8004052:	f000 f94a 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8004056:	20c1      	movs	r0, #193	; 0xc1
 8004058:	f000 f947 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 800405c:	2048      	movs	r0, #72	; 0x48
 800405e:	f000 f944 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 8004062:	2008      	movs	r0, #8
 8004064:	f000 f941 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8004068:	200f      	movs	r0, #15
 800406a:	f000 f93e 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 800406e:	200c      	movs	r0, #12
 8004070:	f000 f93b 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8004074:	2031      	movs	r0, #49	; 0x31
 8004076:	f000 f938 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 800407a:	2036      	movs	r0, #54	; 0x36
 800407c:	f000 f935 	bl	80042ea <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8004080:	200f      	movs	r0, #15
 8004082:	f000 f932 	bl	80042ea <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 8004086:	2011      	movs	r0, #17
 8004088:	f000 f920 	bl	80042cc <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 800408c:	2029      	movs	r0, #41	; 0x29
 800408e:	f000 f91d 	bl	80042cc <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 8004092:	202c      	movs	r0, #44	; 0x2c
 8004094:	f000 f929 	bl	80042ea <ILI9341_Send_Data>
}
 8004098:	bf00      	nop
 800409a:	bd80      	pop	{r7, pc}

0800409c <ILI9341_SPI_Send>:
		Error_Handler();
	}
}

void ILI9341_SPI_Send(unsigned char data)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	4603      	mov	r3, r0
 80040a4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &data, 1, 1);
 80040a6:	1df9      	adds	r1, r7, #7
 80040a8:	2301      	movs	r3, #1
 80040aa:	2201      	movs	r2, #1
 80040ac:	4803      	ldr	r0, [pc, #12]	; (80040bc <ILI9341_SPI_Send+0x20>)
 80040ae:	f00f fa33 	bl	8013518 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_DMA(&hspi1, &data, 1);
}
 80040b2:	bf00      	nop
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	200099f4 	.word	0x200099f4

080040c0 <ILI9341_Reset>:
{
	HAL_SPI_Transmit(&hspi1, &data, size, 10);
//	HAL_SPI_Transmit_DMA(&hspi1, &data, size);
}

void ILI9341_Reset() {
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
	RESET_ON;
 80040c4:	2200      	movs	r2, #0
 80040c6:	2110      	movs	r1, #16
 80040c8:	4809      	ldr	r0, [pc, #36]	; (80040f0 <ILI9341_Reset+0x30>)
 80040ca:	f00c fcb5 	bl	8010a38 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80040ce:	2032      	movs	r0, #50	; 0x32
 80040d0:	f00a fb3a 	bl	800e748 <HAL_Delay>
	RESET_OFF;
 80040d4:	2201      	movs	r2, #1
 80040d6:	2110      	movs	r1, #16
 80040d8:	4805      	ldr	r0, [pc, #20]	; (80040f0 <ILI9341_Reset+0x30>)
 80040da:	f00c fcad 	bl	8010a38 <HAL_GPIO_WritePin>
	//CS_ON;
	HAL_Delay(50);
 80040de:	2032      	movs	r0, #50	; 0x32
 80040e0:	f00a fb32 	bl	800e748 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 80040e4:	2001      	movs	r0, #1
 80040e6:	f000 f8f1 	bl	80042cc <ILI9341_Send_Command>
	//CS_OFF;
}
 80040ea:	bf00      	nop
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40020000 	.word	0x40020000

080040f4 <ILI9341_SPI_Send_32>:
		Y_SIZE = 240;
		break;
	}
}

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	6039      	str	r1, [r7, #0]
 80040fe:	71fb      	strb	r3, [r7, #7]
	//CS_ON;
	DC_COMMAND;
 8004100:	2200      	movs	r2, #0
 8004102:	2140      	movs	r1, #64	; 0x40
 8004104:	4813      	ldr	r0, [pc, #76]	; (8004154 <ILI9341_SPI_Send_32+0x60>)
 8004106:	f00c fc97 	bl	8010a38 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 800410a:	79fb      	ldrb	r3, [r7, #7]
 800410c:	4618      	mov	r0, r3
 800410e:	f7ff ffc5 	bl	800409c <ILI9341_SPI_Send>

	DC_DATA;
 8004112:	2201      	movs	r2, #1
 8004114:	2140      	movs	r1, #64	; 0x40
 8004116:	480f      	ldr	r0, [pc, #60]	; (8004154 <ILI9341_SPI_Send_32+0x60>)
 8004118:	f00c fc8e 	bl	8010a38 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	0e1b      	lsrs	r3, r3, #24
 8004120:	b2db      	uxtb	r3, r3
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff ffba 	bl	800409c <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	0c1b      	lsrs	r3, r3, #16
 800412c:	b2db      	uxtb	r3, r3
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff ffb4 	bl	800409c <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	0a1b      	lsrs	r3, r3, #8
 8004138:	b2db      	uxtb	r3, r3
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff ffae 	bl	800409c <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	b2db      	uxtb	r3, r3
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff ffa9 	bl	800409c <ILI9341_SPI_Send>

}
 800414a:	bf00      	nop
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	40020000 	.word	0x40020000

08004158 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
 8004164:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	617b      	str	r3, [r7, #20]
	t <<= 16;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	041b      	lsls	r3, r3, #16
 800416e:	617b      	str	r3, [r7, #20]
	t |= x2;
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8004178:	6979      	ldr	r1, [r7, #20]
 800417a:	202a      	movs	r0, #42	; 0x2a
 800417c:	f7ff ffba 	bl	80040f4 <ILI9341_SPI_Send_32>
	t = y1;
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	041b      	lsls	r3, r3, #16
 8004188:	617b      	str	r3, [r7, #20]
	t |= y2;
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	4313      	orrs	r3, r2
 8004190:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 8004192:	6979      	ldr	r1, [r7, #20]
 8004194:	202b      	movs	r0, #43	; 0x2b
 8004196:	f7ff ffad 	bl	80040f4 <ILI9341_SPI_Send_32>
}
 800419a:	bf00      	nop
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 80041ac:	4b0d      	ldr	r3, [pc, #52]	; (80041e4 <ILI9341_Fill_Screen+0x40>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	1e5a      	subs	r2, r3, #1
 80041b2:	4b0d      	ldr	r3, [pc, #52]	; (80041e8 <ILI9341_Fill_Screen+0x44>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	2100      	movs	r1, #0
 80041ba:	2000      	movs	r0, #0
 80041bc:	f7ff ffcc 	bl	8004158 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	4a07      	ldr	r2, [pc, #28]	; (80041e4 <ILI9341_Fill_Screen+0x40>)
 80041c6:	6812      	ldr	r2, [r2, #0]
 80041c8:	4611      	mov	r1, r2
 80041ca:	4a07      	ldr	r2, [pc, #28]	; (80041e8 <ILI9341_Fill_Screen+0x44>)
 80041cc:	6812      	ldr	r2, [r2, #0]
 80041ce:	fb02 f201 	mul.w	r2, r2, r1
 80041d2:	4611      	mov	r1, r2
 80041d4:	4618      	mov	r0, r3
 80041d6:	f000 f897 	bl	8004308 <ILI9341_Send_Burst>
}
 80041da:	bf00      	nop
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20000000 	.word	0x20000000
 80041e8:	20000004 	.word	0x20000004

080041ec <ILI9341_Draw_String>:
		}
	}
}

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af02      	add	r7, sp, #8
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	603b      	str	r3, [r7, #0]
	switch (size)
 80041fa:	7f3b      	ldrb	r3, [r7, #28]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d028      	beq.n	8004252 <ILI9341_Draw_String+0x66>
 8004200:	2b02      	cmp	r3, #2
 8004202:	d02b      	beq.n	800425c <ILI9341_Draw_String+0x70>
			x += hh*8;
			str++;
		}
	break;
	}
}
 8004204:	e059      	b.n	80042ba <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 8004206:	7f3b      	ldrb	r3, [r7, #28]
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	461a      	mov	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	441a      	add	r2, r3
 8004210:	4b2c      	ldr	r3, [pc, #176]	; (80042c4 <ILI9341_Draw_String+0xd8>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	429a      	cmp	r2, r3
 8004216:	d907      	bls.n	8004228 <ILI9341_Draw_String+0x3c>
				x = 1;
 8004218:	2301      	movs	r3, #1
 800421a:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 800421c:	7f3b      	ldrb	r3, [r7, #28]
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	461a      	mov	r2, r3
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	4413      	add	r3, r2
 8004226:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	68b9      	ldr	r1, [r7, #8]
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	7f3a      	ldrb	r2, [r7, #28]
 8004232:	9201      	str	r2, [sp, #4]
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	f000 f919 	bl	8004470 <ILI9341_Draw_Char>
			x += size*8-2;
 800423e:	7f3b      	ldrb	r3, [r7, #28]
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	461a      	mov	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	4413      	add	r3, r2
 8004248:	3b02      	subs	r3, #2
 800424a:	60fb      	str	r3, [r7, #12]
			str++;
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	3301      	adds	r3, #1
 8004250:	61bb      	str	r3, [r7, #24]
		while (*str)
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1d5      	bne.n	8004206 <ILI9341_Draw_String+0x1a>
	break;
 800425a:	e02e      	b.n	80042ba <ILI9341_Draw_String+0xce>
		hh=1;
 800425c:	4b1a      	ldr	r3, [pc, #104]	; (80042c8 <ILI9341_Draw_String+0xdc>)
 800425e:	2201      	movs	r2, #1
 8004260:	701a      	strb	r2, [r3, #0]
		while (*str)
 8004262:	e025      	b.n	80042b0 <ILI9341_Draw_String+0xc4>
			if ((x+(size*8))>X_SIZE)
 8004264:	7f3b      	ldrb	r3, [r7, #28]
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	461a      	mov	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	441a      	add	r2, r3
 800426e:	4b15      	ldr	r3, [pc, #84]	; (80042c4 <ILI9341_Draw_String+0xd8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	429a      	cmp	r2, r3
 8004274:	d907      	bls.n	8004286 <ILI9341_Draw_String+0x9a>
				x = 1;
 8004276:	2301      	movs	r3, #1
 8004278:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 800427a:	7f3b      	ldrb	r3, [r7, #28]
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	461a      	mov	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4413      	add	r3, r2
 8004284:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	68b9      	ldr	r1, [r7, #8]
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	7f3a      	ldrb	r2, [r7, #28]
 8004290:	9201      	str	r2, [sp, #4]
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	f000 f8ea 	bl	8004470 <ILI9341_Draw_Char>
			x += hh*8;
 800429c:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <ILI9341_Draw_String+0xdc>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	461a      	mov	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4413      	add	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]
			str++;
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	3301      	adds	r3, #1
 80042ae:	61bb      	str	r3, [r7, #24]
		while (*str)
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1d5      	bne.n	8004264 <ILI9341_Draw_String+0x78>
	break;
 80042b8:	bf00      	nop
}
 80042ba:	bf00      	nop
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	20000000 	.word	0x20000000
 80042c8:	2000a504 	.word	0x2000a504

080042cc <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 80042d6:	f000 f995 	bl	8004604 <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 80042da:	79fb      	ldrb	r3, [r7, #7]
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff fedd 	bl	800409c <ILI9341_SPI_Send>
}
 80042e2:	bf00      	nop
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b082      	sub	sp, #8
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	4603      	mov	r3, r0
 80042f2:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 80042f4:	f000 f97a 	bl	80045ec <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 80042f8:	79fb      	ldrb	r3, [r7, #7]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff fece 	bl	800409c <ILI9341_SPI_Send>
}
 8004300:	bf00      	nop
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	4603      	mov	r3, r0
 8004310:	6039      	str	r1, [r7, #0]
 8004312:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8004314:	88fb      	ldrh	r3, [r7, #6]
 8004316:	0a1b      	lsrs	r3, r3, #8
 8004318:	b29b      	uxth	r3, r3
 800431a:	733b      	strb	r3, [r7, #12]
 800431c:	88fb      	ldrh	r3, [r7, #6]
 800431e:	72fb      	strb	r3, [r7, #11]
	//CS_ON;
	DC_COMMAND;
 8004320:	2200      	movs	r2, #0
 8004322:	2140      	movs	r1, #64	; 0x40
 8004324:	4851      	ldr	r0, [pc, #324]	; (800446c <ILI9341_Send_Burst+0x164>)
 8004326:	f00c fb87 	bl	8010a38 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 800432a:	202c      	movs	r0, #44	; 0x2c
 800432c:	f7ff feb6 	bl	800409c <ILI9341_SPI_Send>
	DC_DATA;
 8004330:	2201      	movs	r2, #1
 8004332:	2140      	movs	r1, #64	; 0x40
 8004334:	484d      	ldr	r0, [pc, #308]	; (800446c <ILI9341_Send_Burst+0x164>)
 8004336:	f00c fb7f 	bl	8010a38 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 800433a:	7b3b      	ldrb	r3, [r7, #12]
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff fead 	bl	800409c <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8004342:	7afb      	ldrb	r3, [r7, #11]
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff fea9 	bl	800409c <ILI9341_SPI_Send>
	len--;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	3b01      	subs	r3, #1
 800434e:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	099b      	lsrs	r3, r3, #6
 8004354:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8004356:	7b3a      	ldrb	r2, [r7, #12]
 8004358:	7afb      	ldrb	r3, [r7, #11]
 800435a:	429a      	cmp	r2, r3
 800435c:	d169      	bne.n	8004432 <ILI9341_Send_Burst+0x12a>
	{
		while (blocks--) {
 800435e:	e027      	b.n	80043b0 <ILI9341_Send_Burst+0xa8>
			i = 16;
 8004360:	2310      	movs	r3, #16
 8004362:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 8004364:	7afb      	ldrb	r3, [r7, #11]
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff fe98 	bl	800409c <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 800436c:	7afb      	ldrb	r3, [r7, #11]
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff fe94 	bl	800409c <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8004374:	7afb      	ldrb	r3, [r7, #11]
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff fe90 	bl	800409c <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 800437c:	7afb      	ldrb	r3, [r7, #11]
 800437e:	4618      	mov	r0, r3
 8004380:	f7ff fe8c 	bl	800409c <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8004384:	7afb      	ldrb	r3, [r7, #11]
 8004386:	4618      	mov	r0, r3
 8004388:	f7ff fe88 	bl	800409c <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 800438c:	7afb      	ldrb	r3, [r7, #11]
 800438e:	4618      	mov	r0, r3
 8004390:	f7ff fe84 	bl	800409c <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8004394:	7afb      	ldrb	r3, [r7, #11]
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff fe80 	bl	800409c <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 800439c:	7afb      	ldrb	r3, [r7, #11]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7ff fe7c 	bl	800409c <ILI9341_SPI_Send>
			} while (--i);
 80043a4:	7b7b      	ldrb	r3, [r7, #13]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	737b      	strb	r3, [r7, #13]
 80043aa:	7b7b      	ldrb	r3, [r7, #13]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1d9      	bne.n	8004364 <ILI9341_Send_Burst+0x5c>
		while (blocks--) {
 80043b0:	89fb      	ldrh	r3, [r7, #14]
 80043b2:	1e5a      	subs	r2, r3, #1
 80043b4:	81fa      	strh	r2, [r7, #14]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1d2      	bne.n	8004360 <ILI9341_Send_Burst+0x58>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043c2:	737b      	strb	r3, [r7, #13]
 80043c4:	e007      	b.n	80043d6 <ILI9341_Send_Burst+0xce>
			ILI9341_SPI_Send(low_bit);
 80043c6:	7afb      	ldrb	r3, [r7, #11]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7ff fe67 	bl	800409c <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 80043ce:	7afb      	ldrb	r3, [r7, #11]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff fe63 	bl	800409c <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 80043d6:	7b7b      	ldrb	r3, [r7, #13]
 80043d8:	1e5a      	subs	r2, r3, #1
 80043da:	737a      	strb	r2, [r7, #13]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1f2      	bne.n	80043c6 <ILI9341_Send_Burst+0xbe>
			ILI9341_SPI_Send(high_bit);
			ILI9341_SPI_Send(low_bit);
		}
	}
	//CS_OFF;
}
 80043e0:	e03f      	b.n	8004462 <ILI9341_Send_Burst+0x15a>
			i = 16;
 80043e2:	2310      	movs	r3, #16
 80043e4:	737b      	strb	r3, [r7, #13]
				ILI9341_SPI_Send(high_bit);
 80043e6:	7b3b      	ldrb	r3, [r7, #12]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff fe57 	bl	800409c <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80043ee:	7afb      	ldrb	r3, [r7, #11]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff fe53 	bl	800409c <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 80043f6:	7b3b      	ldrb	r3, [r7, #12]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff fe4f 	bl	800409c <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80043fe:	7afb      	ldrb	r3, [r7, #11]
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff fe4b 	bl	800409c <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8004406:	7b3b      	ldrb	r3, [r7, #12]
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff fe47 	bl	800409c <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 800440e:	7afb      	ldrb	r3, [r7, #11]
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff fe43 	bl	800409c <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8004416:	7b3b      	ldrb	r3, [r7, #12]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff fe3f 	bl	800409c <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 800441e:	7afb      	ldrb	r3, [r7, #11]
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff fe3b 	bl	800409c <ILI9341_SPI_Send>
			} while (--i);
 8004426:	7b7b      	ldrb	r3, [r7, #13]
 8004428:	3b01      	subs	r3, #1
 800442a:	737b      	strb	r3, [r7, #13]
 800442c:	7b7b      	ldrb	r3, [r7, #13]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1d9      	bne.n	80043e6 <ILI9341_Send_Burst+0xde>
		while (blocks--) {
 8004432:	89fb      	ldrh	r3, [r7, #14]
 8004434:	1e5a      	subs	r2, r3, #1
 8004436:	81fa      	strh	r2, [r7, #14]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1d2      	bne.n	80043e2 <ILI9341_Send_Burst+0xda>
		for (i = (unsigned char) len & 63; i--;) {
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	b2db      	uxtb	r3, r3
 8004440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004444:	737b      	strb	r3, [r7, #13]
 8004446:	e007      	b.n	8004458 <ILI9341_Send_Burst+0x150>
			ILI9341_SPI_Send(high_bit);
 8004448:	7b3b      	ldrb	r3, [r7, #12]
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff fe26 	bl	800409c <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8004450:	7afb      	ldrb	r3, [r7, #11]
 8004452:	4618      	mov	r0, r3
 8004454:	f7ff fe22 	bl	800409c <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8004458:	7b7b      	ldrb	r3, [r7, #13]
 800445a:	1e5a      	subs	r2, r3, #1
 800445c:	737a      	strb	r2, [r7, #13]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1f2      	bne.n	8004448 <ILI9341_Send_Burst+0x140>
}
 8004462:	bf00      	nop
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	40020000 	.word	0x40020000

08004470 <ILI9341_Draw_Char>:
	ILI9341_SPI_Send(color1);
	ILI9341_SPI_Send(color2);
}

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 800447e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004482:	2b01      	cmp	r3, #1
 8004484:	d002      	beq.n	800448c <ILI9341_Draw_Char+0x1c>
 8004486:	2b02      	cmp	r3, #2
 8004488:	d053      	beq.n	8004532 <ILI9341_Draw_Char+0xc2>
					}
				}
			}
		break;
	}
}
 800448a:	e0a5      	b.n	80045d8 <ILI9341_Draw_Char+0x168>
			ILI9341_Set_Address(x, y, x+5, y+8);
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	68b9      	ldr	r1, [r7, #8]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	3305      	adds	r3, #5
 8004494:	461a      	mov	r2, r3
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	3308      	adds	r3, #8
 800449a:	f7ff fe5d 	bl	8004158 <ILI9341_Set_Address>
			DC_COMMAND;
 800449e:	2200      	movs	r2, #0
 80044a0:	2140      	movs	r1, #64	; 0x40
 80044a2:	484f      	ldr	r0, [pc, #316]	; (80045e0 <ILI9341_Draw_Char+0x170>)
 80044a4:	f00c fac8 	bl	8010a38 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 80044a8:	202c      	movs	r0, #44	; 0x2c
 80044aa:	f7ff fdf7 	bl	800409c <ILI9341_SPI_Send>
			DC_DATA;
 80044ae:	2201      	movs	r2, #1
 80044b0:	2140      	movs	r1, #64	; 0x40
 80044b2:	484b      	ldr	r0, [pc, #300]	; (80045e0 <ILI9341_Draw_Char+0x170>)
 80044b4:	f00c fac0 	bl	8010a38 <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 80044b8:	2300      	movs	r3, #0
 80044ba:	613b      	str	r3, [r7, #16]
 80044bc:	e035      	b.n	800452a <ILI9341_Draw_Char+0xba>
				for(i=2;i<8;i++)
 80044be:	2302      	movs	r3, #2
 80044c0:	617b      	str	r3, [r7, #20]
 80044c2:	e02c      	b.n	800451e <ILI9341_Draw_Char+0xae>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 80044c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80044c8:	3b20      	subs	r3, #32
 80044ca:	4a46      	ldr	r2, [pc, #280]	; (80045e4 <ILI9341_Draw_Char+0x174>)
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	441a      	add	r2, r3
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	4413      	add	r3, r2
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	461a      	mov	r2, r3
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f1c3 0307 	rsb	r3, r3, #7
 80044de:	fa42 f303 	asr.w	r3, r2, r3
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00b      	beq.n	8004502 <ILI9341_Draw_Char+0x92>
						ILI9341_SPI_Send(color>>8);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	0a1b      	lsrs	r3, r3, #8
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff fdd3 	bl	800409c <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7ff fdce 	bl	800409c <ILI9341_SPI_Send>
 8004500:	e00a      	b.n	8004518 <ILI9341_Draw_Char+0xa8>
						ILI9341_SPI_Send(phone>>8);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	0a1b      	lsrs	r3, r3, #8
 8004506:	b2db      	uxtb	r3, r3
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff fdc7 	bl	800409c <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	b2db      	uxtb	r3, r3
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff fdc2 	bl	800409c <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	3301      	adds	r3, #1
 800451c:	617b      	str	r3, [r7, #20]
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2b07      	cmp	r3, #7
 8004522:	ddcf      	ble.n	80044c4 <ILI9341_Draw_Char+0x54>
			for(h=0;h<8;h++)
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	3301      	adds	r3, #1
 8004528:	613b      	str	r3, [r7, #16]
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	2b07      	cmp	r3, #7
 800452e:	ddc6      	ble.n	80044be <ILI9341_Draw_Char+0x4e>
			break;
 8004530:	e052      	b.n	80045d8 <ILI9341_Draw_Char+0x168>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	68b9      	ldr	r1, [r7, #8]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	3307      	adds	r3, #7
 800453a:	461a      	mov	r2, r3
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	3310      	adds	r3, #16
 8004540:	f7ff fe0a 	bl	8004158 <ILI9341_Set_Address>
			DC_COMMAND;
 8004544:	2200      	movs	r2, #0
 8004546:	2140      	movs	r1, #64	; 0x40
 8004548:	4825      	ldr	r0, [pc, #148]	; (80045e0 <ILI9341_Draw_Char+0x170>)
 800454a:	f00c fa75 	bl	8010a38 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 800454e:	202c      	movs	r0, #44	; 0x2c
 8004550:	f7ff fda4 	bl	800409c <ILI9341_SPI_Send>
			DC_DATA;
 8004554:	2201      	movs	r2, #1
 8004556:	2140      	movs	r1, #64	; 0x40
 8004558:	4821      	ldr	r0, [pc, #132]	; (80045e0 <ILI9341_Draw_Char+0x170>)
 800455a:	f00c fa6d 	bl	8010a38 <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 800455e:	2300      	movs	r3, #0
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	e035      	b.n	80045d0 <ILI9341_Draw_Char+0x160>
				for(i=0;i<8;i++)
 8004564:	2300      	movs	r3, #0
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	e02c      	b.n	80045c4 <ILI9341_Draw_Char+0x154>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 800456a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800456e:	3b20      	subs	r3, #32
 8004570:	4a1d      	ldr	r2, [pc, #116]	; (80045e8 <ILI9341_Draw_Char+0x178>)
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	441a      	add	r2, r3
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	4413      	add	r3, r2
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	461a      	mov	r2, r3
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f1c3 0307 	rsb	r3, r3, #7
 8004584:	fa42 f303 	asr.w	r3, r2, r3
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00b      	beq.n	80045a8 <ILI9341_Draw_Char+0x138>
						ILI9341_SPI_Send(color>>8);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	0a1b      	lsrs	r3, r3, #8
 8004594:	b2db      	uxtb	r3, r3
 8004596:	4618      	mov	r0, r3
 8004598:	f7ff fd80 	bl	800409c <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff fd7b 	bl	800409c <ILI9341_SPI_Send>
 80045a6:	e00a      	b.n	80045be <ILI9341_Draw_Char+0x14e>
						ILI9341_SPI_Send(phone>>8);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	0a1b      	lsrs	r3, r3, #8
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff fd74 	bl	800409c <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff fd6f 	bl	800409c <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	3301      	adds	r3, #1
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	2b07      	cmp	r3, #7
 80045c8:	ddcf      	ble.n	800456a <ILI9341_Draw_Char+0xfa>
			for(h=0;h<16;h++)
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	3301      	adds	r3, #1
 80045ce:	613b      	str	r3, [r7, #16]
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	2b0f      	cmp	r3, #15
 80045d4:	ddc6      	ble.n	8004564 <ILI9341_Draw_Char+0xf4>
		break;
 80045d6:	bf00      	nop
}
 80045d8:	bf00      	nop
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40020000 	.word	0x40020000
 80045e4:	08020560 	.word	0x08020560
 80045e8:	08020838 	.word	0x08020838

080045ec <Before_Sending_Data>:

static void Before_Sending_Data() {
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_GPIO_PIN, GPIO_PIN_SET);
 80045f0:	2201      	movs	r2, #1
 80045f2:	2140      	movs	r1, #64	; 0x40
 80045f4:	4802      	ldr	r0, [pc, #8]	; (8004600 <Before_Sending_Data+0x14>)
 80045f6:	f00c fa1f 	bl	8010a38 <HAL_GPIO_WritePin>
//	CS_ON
}
 80045fa:	bf00      	nop
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	40020000 	.word	0x40020000

08004604 <Before_Sending_Command>:

static void Before_Sending_Command() {
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_GPIO_PIN, GPIO_PIN_RESET);
 8004608:	2200      	movs	r2, #0
 800460a:	2140      	movs	r1, #64	; 0x40
 800460c:	4802      	ldr	r0, [pc, #8]	; (8004618 <Before_Sending_Command+0x14>)
 800460e:	f00c fa13 	bl	8010a38 <HAL_GPIO_WritePin>
//	CS_ON
}
 8004612:	bf00      	nop
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40020000 	.word	0x40020000

0800461c <main>:
 * @brief  The application entry point.
 * @retval int
 */

int main(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b0a0      	sub	sp, #128	; 0x80
 8004620:	af00      	add	r7, sp, #0
	set();
 8004622:	f007 fa7d 	bl	800bb20 <set>

	const osThreadAttr_t MainTask_attributes = {
 8004626:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800462a:	2224      	movs	r2, #36	; 0x24
 800462c:	2100      	movs	r1, #0
 800462e:	4618      	mov	r0, r3
 8004630:	f014 fe7c 	bl	801932c <memset>
 8004634:	4b33      	ldr	r3, [pc, #204]	; (8004704 <main+0xe8>)
 8004636:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800463c:	673b      	str	r3, [r7, #112]	; 0x70
 800463e:	2318      	movs	r3, #24
 8004640:	677b      	str	r3, [r7, #116]	; 0x74
			.name = "MainTask",
			.stack_size = 1024 * 4,
			.priority = (osPriority_t) osPriorityNormal,
	};

	const osThreadAttr_t EmergencyTask_attributes = {
 8004642:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004646:	2224      	movs	r2, #36	; 0x24
 8004648:	2100      	movs	r1, #0
 800464a:	4618      	mov	r0, r3
 800464c:	f014 fe6e 	bl	801932c <memset>
 8004650:	4b2d      	ldr	r3, [pc, #180]	; (8004708 <main+0xec>)
 8004652:	63bb      	str	r3, [r7, #56]	; 0x38
 8004654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004658:	64fb      	str	r3, [r7, #76]	; 0x4c
 800465a:	2318      	movs	r3, #24
 800465c:	653b      	str	r3, [r7, #80]	; 0x50
//			.name = "TuneTask",
//			.stack_size = 256 * 4,
//			.priority = (osPriority_t) osPriorityAboveNormal,
//	};

	const osThreadAttr_t Calculation_Task_attributes = {
 800465e:	f107 0314 	add.w	r3, r7, #20
 8004662:	2224      	movs	r2, #36	; 0x24
 8004664:	2100      	movs	r1, #0
 8004666:	4618      	mov	r0, r3
 8004668:	f014 fe60 	bl	801932c <memset>
 800466c:	4b27      	ldr	r3, [pc, #156]	; (800470c <main+0xf0>)
 800466e:	617b      	str	r3, [r7, #20]
 8004670:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004674:	62bb      	str	r3, [r7, #40]	; 0x28
 8004676:	2320      	movs	r3, #32
 8004678:	62fb      	str	r3, [r7, #44]	; 0x2c
			.name = "Calculation_Task",
			.stack_size = 512 *  4,
			.priority = (osPriority_t) osPriorityAboveNormal,
	};

	const osSemaphoreAttr_t CalcSemaphore_attributes = {
 800467a:	1d3b      	adds	r3, r7, #4
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	605a      	str	r2, [r3, #4]
 8004682:	609a      	str	r2, [r3, #8]
 8004684:	60da      	str	r2, [r3, #12]
 8004686:	4b22      	ldr	r3, [pc, #136]	; (8004710 <main+0xf4>)
 8004688:	607b      	str	r3, [r7, #4]

//	const osSemaphoreAttr_t TuneSemaphore_attributes = {
//			.name = "TuneSemaphore"
//	};

	ILI9341_Init();
 800468a:	f7ff fc05 	bl	8003e98 <ILI9341_Init>
//	ILI9341_Set_Rotation(1);
	ILI9341_Fill_Screen(BLACK);
 800468e:	2000      	movs	r0, #0
 8004690:	f7ff fd88 	bl	80041a4 <ILI9341_Fill_Screen>
	ILI9341_Init_List();
 8004694:	f008 fabc 	bl	800cc10 <ILI9341_Init_List>

	osKernelInitialize();
 8004698:	f011 f9d8 	bl	8015a4c <osKernelInitialize>

	MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
 800469c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80046a0:	461a      	mov	r2, r3
 80046a2:	2100      	movs	r1, #0
 80046a4:	481b      	ldr	r0, [pc, #108]	; (8004714 <main+0xf8>)
 80046a6:	f011 fa1b 	bl	8015ae0 <osThreadNew>
 80046aa:	4603      	mov	r3, r0
 80046ac:	4a1a      	ldr	r2, [pc, #104]	; (8004718 <main+0xfc>)
 80046ae:	6013      	str	r3, [r2, #0]
	EmergencyTaskHandle = osThreadNew(EmergencyTask, NULL, &EmergencyTask_attributes);
 80046b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80046b4:	461a      	mov	r2, r3
 80046b6:	2100      	movs	r1, #0
 80046b8:	4818      	ldr	r0, [pc, #96]	; (800471c <main+0x100>)
 80046ba:	f011 fa11 	bl	8015ae0 <osThreadNew>
 80046be:	4603      	mov	r3, r0
 80046c0:	4a17      	ldr	r2, [pc, #92]	; (8004720 <main+0x104>)
 80046c2:	6013      	str	r3, [r2, #0]
	Calculation_Task_Handle = osThreadNew(Calculation, NULL, &Calculation_Task_attributes);
 80046c4:	f107 0314 	add.w	r3, r7, #20
 80046c8:	461a      	mov	r2, r3
 80046ca:	2100      	movs	r1, #0
 80046cc:	4815      	ldr	r0, [pc, #84]	; (8004724 <main+0x108>)
 80046ce:	f011 fa07 	bl	8015ae0 <osThreadNew>
 80046d2:	4603      	mov	r3, r0
 80046d4:	4a14      	ldr	r2, [pc, #80]	; (8004728 <main+0x10c>)
 80046d6:	6013      	str	r3, [r2, #0]
//	TuneTaskHandle = osThreadNew(TuneTask, NULL, &TuneTask_attributes);
//	TuneSemaphore = osSemaphoreNew(1, 0, &TuneSemaphore_attributes);
	CalcSemaphore = osSemaphoreNew(1, 0, &CalcSemaphore_attributes);
 80046d8:	1d3b      	adds	r3, r7, #4
 80046da:	461a      	mov	r2, r3
 80046dc:	2100      	movs	r1, #0
 80046de:	2001      	movs	r0, #1
 80046e0:	f011 faf9 	bl	8015cd6 <osSemaphoreNew>
 80046e4:	4603      	mov	r3, r0
 80046e6:	4a11      	ldr	r2, [pc, #68]	; (800472c <main+0x110>)
 80046e8:	6013      	str	r3, [r2, #0]
	led2 = 1;
 80046ea:	4a11      	ldr	r2, [pc, #68]	; (8004730 <main+0x114>)
 80046ec:	7853      	ldrb	r3, [r2, #1]
 80046ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046f2:	7053      	strb	r3, [r2, #1]
	led3 = 0;
 80046f4:	4a0e      	ldr	r2, [pc, #56]	; (8004730 <main+0x114>)
 80046f6:	7853      	ldrb	r3, [r2, #1]
 80046f8:	f36f 13c7 	bfc	r3, #7, #1
 80046fc:	7053      	strb	r3, [r2, #1]
	osKernelStart();
 80046fe:	f011 f9c9 	bl	8015a94 <osKernelStart>

	while(1)
 8004702:	e7fe      	b.n	8004702 <main+0xe6>
 8004704:	08020450 	.word	0x08020450
 8004708:	0802045c 	.word	0x0802045c
 800470c:	0802046c 	.word	0x0802046c
 8004710:	08020480 	.word	0x08020480
 8004714:	08004ab5 	.word	0x08004ab5
 8004718:	20007784 	.word	0x20007784
 800471c:	08004c59 	.word	0x08004c59
 8004720:	20009bb4 	.word	0x20009bb4
 8004724:	08004b91 	.word	0x08004b91
 8004728:	2000a508 	.word	0x2000a508
 800472c:	2000a50c 	.word	0x2000a50c
 8004730:	40020814 	.word	0x40020814

08004734 <TIM6_DAC_IRQHandler>:

	}
}

void TIM6_DAC_IRQHandler(void)
{
 8004734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004738:	b08d      	sub	sp, #52	; 0x34
 800473a:	af0a      	add	r7, sp, #40	; 0x28
	static int counter = 0;
	osSemaphoreRelease(CalcSemaphore);
 800473c:	4b95      	ldr	r3, [pc, #596]	; (8004994 <TIM6_DAC_IRQHandler+0x260>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4618      	mov	r0, r3
 8004742:	f011 fba3 	bl	8015e8c <osSemaphoreRelease>

	if(counter % 4 == 0)
 8004746:	4b94      	ldr	r3, [pc, #592]	; (8004998 <TIM6_DAC_IRQHandler+0x264>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0303 	and.w	r3, r3, #3
 800474e:	2b00      	cmp	r3, #0
 8004750:	f040 818b 	bne.w	8004a6a <TIM6_DAC_IRQHandler+0x336>
	{
		led1 = !led1;
 8004754:	4b91      	ldr	r3, [pc, #580]	; (800499c <TIM6_DAC_IRQHandler+0x268>)
 8004756:	785b      	ldrb	r3, [r3, #1]
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	b2db      	uxtb	r3, r3
 800475e:	4a8f      	ldr	r2, [pc, #572]	; (800499c <TIM6_DAC_IRQHandler+0x268>)
 8004760:	2b00      	cmp	r3, #0
 8004762:	bf0c      	ite	eq
 8004764:	2301      	moveq	r3, #1
 8004766:	2300      	movne	r3, #0
 8004768:	b2d9      	uxtb	r1, r3
 800476a:	7853      	ldrb	r3, [r2, #1]
 800476c:	f361 1345 	bfi	r3, r1, #5, #1
 8004770:	7053      	strb	r3, [r2, #1]
		switch(mode)
 8004772:	4b8b      	ldr	r3, [pc, #556]	; (80049a0 <TIM6_DAC_IRQHandler+0x26c>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b02      	cmp	r3, #2
 8004778:	d058      	beq.n	800482c <TIM6_DAC_IRQHandler+0xf8>
 800477a:	2b02      	cmp	r3, #2
 800477c:	f300 8178 	bgt.w	8004a70 <TIM6_DAC_IRQHandler+0x33c>
 8004780:	2b00      	cmp	r3, #0
 8004782:	d002      	beq.n	800478a <TIM6_DAC_IRQHandler+0x56>
 8004784:	2b01      	cmp	r3, #1
 8004786:	d036      	beq.n	80047f6 <TIM6_DAC_IRQHandler+0xc2>
 8004788:	e172      	b.n	8004a70 <TIM6_DAC_IRQHandler+0x33c>
//					VESCNav.c_vel, VESCNav.d_vel, pp.real_x, pp.real_y, pp.real_z_rad);
//				sprintf((char*)debug, "1: %.2f 2: %.2f 3: %.2f 4: %.2f\n", fFLeftVelU, fFRightVelU,
//									fBLeftVelU, fBRightVelU);
//				sprintf((char*)debug, "1: %.2f 2: %.2f 3: %.2f 4: %.2f\n", VESCNav.a.info.current, VESCNav.b.info.current,
//										VESCNav.c.info.current, VESCNav.d.info.current);
				sprintf((char*)debug, "Z: %.2f Ex: %.2f Ux: %.2f Ey: %.2f Uy: %.2f\n", pp.real_z_rad, pp.error_x, pp.outx, pp.error_y, pp.outy);
 800478a:	4b86      	ldr	r3, [pc, #536]	; (80049a4 <TIM6_DAC_IRQHandler+0x270>)
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	4618      	mov	r0, r3
 8004790:	f7fb feda 	bl	8000548 <__aeabi_f2d>
 8004794:	e9c7 0100 	strd	r0, r1, [r7]
 8004798:	4b82      	ldr	r3, [pc, #520]	; (80049a4 <TIM6_DAC_IRQHandler+0x270>)
 800479a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fb fed2 	bl	8000548 <__aeabi_f2d>
 80047a4:	4604      	mov	r4, r0
 80047a6:	460d      	mov	r5, r1
 80047a8:	4b7e      	ldr	r3, [pc, #504]	; (80049a4 <TIM6_DAC_IRQHandler+0x270>)
 80047aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fb feca 	bl	8000548 <__aeabi_f2d>
 80047b4:	4680      	mov	r8, r0
 80047b6:	4689      	mov	r9, r1
 80047b8:	4b7a      	ldr	r3, [pc, #488]	; (80049a4 <TIM6_DAC_IRQHandler+0x270>)
 80047ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fb fec2 	bl	8000548 <__aeabi_f2d>
 80047c4:	4682      	mov	sl, r0
 80047c6:	468b      	mov	fp, r1
 80047c8:	4b76      	ldr	r3, [pc, #472]	; (80049a4 <TIM6_DAC_IRQHandler+0x270>)
 80047ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7fb feba 	bl	8000548 <__aeabi_f2d>
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80047dc:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80047e0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80047e4:	e9cd 4500 	strd	r4, r5, [sp]
 80047e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047ec:	496e      	ldr	r1, [pc, #440]	; (80049a8 <TIM6_DAC_IRQHandler+0x274>)
 80047ee:	486f      	ldr	r0, [pc, #444]	; (80049ac <TIM6_DAC_IRQHandler+0x278>)
 80047f0:	f015 fd58 	bl	801a2a4 <siprintf>
			break;
 80047f4:	e13c      	b.n	8004a70 <TIM6_DAC_IRQHandler+0x33c>

			case INITIALIZE:
				sprintf((char*)debug, "Pitch: %ld Yaw: %ld L: %ld P: %ld Vesc: %.2f\n", pitch.currentPulse, yaw_servo.currentPulse,
 80047f6:	4b6e      	ldr	r3, [pc, #440]	; (80049b0 <TIM6_DAC_IRQHandler+0x27c>)
 80047f8:	6a1e      	ldr	r6, [r3, #32]
 80047fa:	4b6e      	ldr	r3, [pc, #440]	; (80049b4 <TIM6_DAC_IRQHandler+0x280>)
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	603b      	str	r3, [r7, #0]
 8004800:	4b6d      	ldr	r3, [pc, #436]	; (80049b8 <TIM6_DAC_IRQHandler+0x284>)
 8004802:	6a1c      	ldr	r4, [r3, #32]
 8004804:	4b6d      	ldr	r3, [pc, #436]	; (80049bc <TIM6_DAC_IRQHandler+0x288>)
 8004806:	6a1d      	ldr	r5, [r3, #32]
 8004808:	4b6d      	ldr	r3, [pc, #436]	; (80049c0 <TIM6_DAC_IRQHandler+0x28c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f7fb fe9b 	bl	8000548 <__aeabi_f2d>
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800481a:	9501      	str	r5, [sp, #4]
 800481c:	9400      	str	r4, [sp, #0]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	4632      	mov	r2, r6
 8004822:	4968      	ldr	r1, [pc, #416]	; (80049c4 <TIM6_DAC_IRQHandler+0x290>)
 8004824:	4861      	ldr	r0, [pc, #388]	; (80049ac <TIM6_DAC_IRQHandler+0x278>)
 8004826:	f015 fd3d 	bl	801a2a4 <siprintf>
								load.currentPulse, pick.currentPulse, vesc_pdc);
				break;
 800482a:	e121      	b.n	8004a70 <TIM6_DAC_IRQHandler+0x33c>

			case TUNE_PID:
				switch(wheel)
 800482c:	4b66      	ldr	r3, [pc, #408]	; (80049c8 <TIM6_DAC_IRQHandler+0x294>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3b01      	subs	r3, #1
 8004832:	2b03      	cmp	r3, #3
 8004834:	f200 811b 	bhi.w	8004a6e <TIM6_DAC_IRQHandler+0x33a>
 8004838:	a201      	add	r2, pc, #4	; (adr r2, 8004840 <TIM6_DAC_IRQHandler+0x10c>)
 800483a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483e:	bf00      	nop
 8004840:	08004851 	.word	0x08004851
 8004844:	080048bd 	.word	0x080048bd
 8004848:	08004929 	.word	0x08004929
 800484c:	080049fd 	.word	0x080049fd
				{
					case 1:
						sprintf((char*)debug, "P: %.2f I: %.2f D: %.4f Vel: %.2f VelR: %.2f W: %d\n", AP, AI, AD, VESCNav.a_vel, vesc_pulse, wheel);
 8004850:	4b5e      	ldr	r3, [pc, #376]	; (80049cc <TIM6_DAC_IRQHandler+0x298>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4618      	mov	r0, r3
 8004856:	f7fb fe77 	bl	8000548 <__aeabi_f2d>
 800485a:	e9c7 0100 	strd	r0, r1, [r7]
 800485e:	4b5c      	ldr	r3, [pc, #368]	; (80049d0 <TIM6_DAC_IRQHandler+0x29c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4618      	mov	r0, r3
 8004864:	f7fb fe70 	bl	8000548 <__aeabi_f2d>
 8004868:	4604      	mov	r4, r0
 800486a:	460d      	mov	r5, r1
 800486c:	4b59      	ldr	r3, [pc, #356]	; (80049d4 <TIM6_DAC_IRQHandler+0x2a0>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4618      	mov	r0, r3
 8004872:	f7fb fe69 	bl	8000548 <__aeabi_f2d>
 8004876:	4680      	mov	r8, r0
 8004878:	4689      	mov	r9, r1
 800487a:	4b57      	ldr	r3, [pc, #348]	; (80049d8 <TIM6_DAC_IRQHandler+0x2a4>)
 800487c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004880:	4618      	mov	r0, r3
 8004882:	f7fb fe61 	bl	8000548 <__aeabi_f2d>
 8004886:	4682      	mov	sl, r0
 8004888:	468b      	mov	fp, r1
 800488a:	4b54      	ldr	r3, [pc, #336]	; (80049dc <TIM6_DAC_IRQHandler+0x2a8>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f7fb fe5a 	bl	8000548 <__aeabi_f2d>
 8004894:	4602      	mov	r2, r0
 8004896:	460b      	mov	r3, r1
 8004898:	494b      	ldr	r1, [pc, #300]	; (80049c8 <TIM6_DAC_IRQHandler+0x294>)
 800489a:	6809      	ldr	r1, [r1, #0]
 800489c:	9108      	str	r1, [sp, #32]
 800489e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80048a2:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80048a6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80048aa:	e9cd 4500 	strd	r4, r5, [sp]
 80048ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048b2:	494b      	ldr	r1, [pc, #300]	; (80049e0 <TIM6_DAC_IRQHandler+0x2ac>)
 80048b4:	483d      	ldr	r0, [pc, #244]	; (80049ac <TIM6_DAC_IRQHandler+0x278>)
 80048b6:	f015 fcf5 	bl	801a2a4 <siprintf>
						break;
 80048ba:	e0d5      	b.n	8004a68 <TIM6_DAC_IRQHandler+0x334>
					case 2:
						sprintf((char*)debug, "P: %.2f I: %.2f D: %.4f Vel: %.2f VelR: %.2f W: %d\n", BP, BI, BD, VESCNav.b_vel, vesc_pulse, wheel);
 80048bc:	4b49      	ldr	r3, [pc, #292]	; (80049e4 <TIM6_DAC_IRQHandler+0x2b0>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7fb fe41 	bl	8000548 <__aeabi_f2d>
 80048c6:	e9c7 0100 	strd	r0, r1, [r7]
 80048ca:	4b47      	ldr	r3, [pc, #284]	; (80049e8 <TIM6_DAC_IRQHandler+0x2b4>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fb fe3a 	bl	8000548 <__aeabi_f2d>
 80048d4:	4604      	mov	r4, r0
 80048d6:	460d      	mov	r5, r1
 80048d8:	4b44      	ldr	r3, [pc, #272]	; (80049ec <TIM6_DAC_IRQHandler+0x2b8>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fb fe33 	bl	8000548 <__aeabi_f2d>
 80048e2:	4680      	mov	r8, r0
 80048e4:	4689      	mov	r9, r1
 80048e6:	4b3c      	ldr	r3, [pc, #240]	; (80049d8 <TIM6_DAC_IRQHandler+0x2a4>)
 80048e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7fb fe2b 	bl	8000548 <__aeabi_f2d>
 80048f2:	4682      	mov	sl, r0
 80048f4:	468b      	mov	fp, r1
 80048f6:	4b39      	ldr	r3, [pc, #228]	; (80049dc <TIM6_DAC_IRQHandler+0x2a8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7fb fe24 	bl	8000548 <__aeabi_f2d>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4930      	ldr	r1, [pc, #192]	; (80049c8 <TIM6_DAC_IRQHandler+0x294>)
 8004906:	6809      	ldr	r1, [r1, #0]
 8004908:	9108      	str	r1, [sp, #32]
 800490a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800490e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8004912:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004916:	e9cd 4500 	strd	r4, r5, [sp]
 800491a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800491e:	4930      	ldr	r1, [pc, #192]	; (80049e0 <TIM6_DAC_IRQHandler+0x2ac>)
 8004920:	4822      	ldr	r0, [pc, #136]	; (80049ac <TIM6_DAC_IRQHandler+0x278>)
 8004922:	f015 fcbf 	bl	801a2a4 <siprintf>
						break;
 8004926:	e09f      	b.n	8004a68 <TIM6_DAC_IRQHandler+0x334>
					case 3:
						sprintf((char*)debug, "P: %.2f I: %.2f D: %.4f Vel: %.2f VelR: %.2f W: %d\n", CP, CI, CD, VESCNav.c_vel, vesc_pulse, wheel);
 8004928:	4b31      	ldr	r3, [pc, #196]	; (80049f0 <TIM6_DAC_IRQHandler+0x2bc>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4618      	mov	r0, r3
 800492e:	f7fb fe0b 	bl	8000548 <__aeabi_f2d>
 8004932:	e9c7 0100 	strd	r0, r1, [r7]
 8004936:	4b2f      	ldr	r3, [pc, #188]	; (80049f4 <TIM6_DAC_IRQHandler+0x2c0>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f7fb fe04 	bl	8000548 <__aeabi_f2d>
 8004940:	4604      	mov	r4, r0
 8004942:	460d      	mov	r5, r1
 8004944:	4b2c      	ldr	r3, [pc, #176]	; (80049f8 <TIM6_DAC_IRQHandler+0x2c4>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4618      	mov	r0, r3
 800494a:	f7fb fdfd 	bl	8000548 <__aeabi_f2d>
 800494e:	4680      	mov	r8, r0
 8004950:	4689      	mov	r9, r1
 8004952:	4b21      	ldr	r3, [pc, #132]	; (80049d8 <TIM6_DAC_IRQHandler+0x2a4>)
 8004954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004958:	4618      	mov	r0, r3
 800495a:	f7fb fdf5 	bl	8000548 <__aeabi_f2d>
 800495e:	4682      	mov	sl, r0
 8004960:	468b      	mov	fp, r1
 8004962:	4b1e      	ldr	r3, [pc, #120]	; (80049dc <TIM6_DAC_IRQHandler+0x2a8>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4618      	mov	r0, r3
 8004968:	f7fb fdee 	bl	8000548 <__aeabi_f2d>
 800496c:	4602      	mov	r2, r0
 800496e:	460b      	mov	r3, r1
 8004970:	4915      	ldr	r1, [pc, #84]	; (80049c8 <TIM6_DAC_IRQHandler+0x294>)
 8004972:	6809      	ldr	r1, [r1, #0]
 8004974:	9108      	str	r1, [sp, #32]
 8004976:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800497a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800497e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004982:	e9cd 4500 	strd	r4, r5, [sp]
 8004986:	e9d7 2300 	ldrd	r2, r3, [r7]
 800498a:	4915      	ldr	r1, [pc, #84]	; (80049e0 <TIM6_DAC_IRQHandler+0x2ac>)
 800498c:	4807      	ldr	r0, [pc, #28]	; (80049ac <TIM6_DAC_IRQHandler+0x278>)
 800498e:	f015 fc89 	bl	801a2a4 <siprintf>
						break;
 8004992:	e069      	b.n	8004a68 <TIM6_DAC_IRQHandler+0x334>
 8004994:	2000a50c 	.word	0x2000a50c
 8004998:	200002c8 	.word	0x200002c8
 800499c:	40020814 	.word	0x40020814
 80049a0:	200090a8 	.word	0x200090a8
 80049a4:	20006c44 	.word	0x20006c44
 80049a8:	08020490 	.word	0x08020490
 80049ac:	200073e8 	.word	0x200073e8
 80049b0:	20009cbc 	.word	0x20009cbc
 80049b4:	20007664 	.word	0x20007664
 80049b8:	2000a188 	.word	0x2000a188
 80049bc:	200099c0 	.word	0x200099c0
 80049c0:	200076a4 	.word	0x200076a4
 80049c4:	080204c0 	.word	0x080204c0
 80049c8:	200064f8 	.word	0x200064f8
 80049cc:	2000a120 	.word	0x2000a120
 80049d0:	20007188 	.word	0x20007188
 80049d4:	2000a0fc 	.word	0x2000a0fc
 80049d8:	200092b4 	.word	0x200092b4
 80049dc:	2000a0c4 	.word	0x2000a0c4
 80049e0:	080204f0 	.word	0x080204f0
 80049e4:	200074b0 	.word	0x200074b0
 80049e8:	20009204 	.word	0x20009204
 80049ec:	20007184 	.word	0x20007184
 80049f0:	20009538 	.word	0x20009538
 80049f4:	200096a4 	.word	0x200096a4
 80049f8:	200064fc 	.word	0x200064fc
					case 4:
						sprintf((char*)debug, "P: %.2f I: %.2f D: %.4f Vel: %.2f VelR: %.2f W: %d\n", DP, DI, DD, VESCNav.d_vel, vesc_pulse, wheel);
 80049fc:	4b23      	ldr	r3, [pc, #140]	; (8004a8c <TIM6_DAC_IRQHandler+0x358>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fb fda1 	bl	8000548 <__aeabi_f2d>
 8004a06:	e9c7 0100 	strd	r0, r1, [r7]
 8004a0a:	4b21      	ldr	r3, [pc, #132]	; (8004a90 <TIM6_DAC_IRQHandler+0x35c>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fb fd9a 	bl	8000548 <__aeabi_f2d>
 8004a14:	4604      	mov	r4, r0
 8004a16:	460d      	mov	r5, r1
 8004a18:	4b1e      	ldr	r3, [pc, #120]	; (8004a94 <TIM6_DAC_IRQHandler+0x360>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7fb fd93 	bl	8000548 <__aeabi_f2d>
 8004a22:	4680      	mov	r8, r0
 8004a24:	4689      	mov	r9, r1
 8004a26:	4b1c      	ldr	r3, [pc, #112]	; (8004a98 <TIM6_DAC_IRQHandler+0x364>)
 8004a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fb fd8b 	bl	8000548 <__aeabi_f2d>
 8004a32:	4682      	mov	sl, r0
 8004a34:	468b      	mov	fp, r1
 8004a36:	4b19      	ldr	r3, [pc, #100]	; (8004a9c <TIM6_DAC_IRQHandler+0x368>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fb fd84 	bl	8000548 <__aeabi_f2d>
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4916      	ldr	r1, [pc, #88]	; (8004aa0 <TIM6_DAC_IRQHandler+0x36c>)
 8004a46:	6809      	ldr	r1, [r1, #0]
 8004a48:	9108      	str	r1, [sp, #32]
 8004a4a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004a4e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8004a52:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004a56:	e9cd 4500 	strd	r4, r5, [sp]
 8004a5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a5e:	4911      	ldr	r1, [pc, #68]	; (8004aa4 <TIM6_DAC_IRQHandler+0x370>)
 8004a60:	4811      	ldr	r0, [pc, #68]	; (8004aa8 <TIM6_DAC_IRQHandler+0x374>)
 8004a62:	f015 fc1f 	bl	801a2a4 <siprintf>
						break;
 8004a66:	bf00      	nop
				}
			break;
 8004a68:	e001      	b.n	8004a6e <TIM6_DAC_IRQHandler+0x33a>
		}
		//
		//	sprintf((char*)debug, "Err: %.2f Output: %.2f\n", fFLeftVelErr, fFLeftVelU);
		//	sprintf((char*)debug, "Yaw: %.2f\n", fyaw);
//		HAL_UART_Transmit(&huart3, debug, strlen((char*)debug), HAL_MAX_DELAY);
	}
 8004a6a:	bf00      	nop
 8004a6c:	e000      	b.n	8004a70 <TIM6_DAC_IRQHandler+0x33c>
			break;
 8004a6e:	bf00      	nop
	counter++;
 8004a70:	4b0e      	ldr	r3, [pc, #56]	; (8004aac <TIM6_DAC_IRQHandler+0x378>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3301      	adds	r3, #1
 8004a76:	4a0d      	ldr	r2, [pc, #52]	; (8004aac <TIM6_DAC_IRQHandler+0x378>)
 8004a78:	6013      	str	r3, [r2, #0]
	HAL_TIM_IRQHandler(&htim6);
 8004a7a:	480d      	ldr	r0, [pc, #52]	; (8004ab0 <TIM6_DAC_IRQHandler+0x37c>)
 8004a7c:	f00f f9f0 	bl	8013e60 <HAL_TIM_IRQHandler>
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20009bb0 	.word	0x20009bb0
 8004a90:	20006a1c 	.word	0x20006a1c
 8004a94:	2000988c 	.word	0x2000988c
 8004a98:	200092b4 	.word	0x200092b4
 8004a9c:	2000a0c4 	.word	0x2000a0c4
 8004aa0:	200064f8 	.word	0x200064f8
 8004aa4:	080204f0 	.word	0x080204f0
 8004aa8:	200073e8 	.word	0x200073e8
 8004aac:	200002c8 	.word	0x200002c8
 8004ab0:	20005f24 	.word	0x20005f24

08004ab4 <MainTask>:

void MainTask(void *argument)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
	RobotStart();
 8004abc:	f007 facc 	bl	800c058 <RobotStart>
	while(1)
	{
		switch(mode)
 8004ac0:	4b2d      	ldr	r3, [pc, #180]	; (8004b78 <MainTask+0xc4>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d03d      	beq.n	8004b44 <MainTask+0x90>
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	dc3f      	bgt.n	8004b4c <MainTask+0x98>
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d002      	beq.n	8004ad6 <MainTask+0x22>
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d034      	beq.n	8004b3e <MainTask+0x8a>
 8004ad4:	e03a      	b.n	8004b4c <MainTask+0x98>
		{
			case NORMAL:
//				NormalControl();
//				ROSTune();
				if(!PB1)
 8004ad6:	4b29      	ldr	r3, [pc, #164]	; (8004b7c <MainTask+0xc8>)
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10b      	bne.n	8004afc <MainTask+0x48>
				{
					while(!PB1);
 8004ae4:	bf00      	nop
 8004ae6:	4b25      	ldr	r3, [pc, #148]	; (8004b7c <MainTask+0xc8>)
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0f8      	beq.n	8004ae6 <MainTask+0x32>
					LidarSendIns(NEAR, &lidar);
 8004af4:	4922      	ldr	r1, [pc, #136]	; (8004b80 <MainTask+0xcc>)
 8004af6:	2001      	movs	r0, #1
 8004af8:	f009 fba0 	bl	800e23c <LidarSendIns>
				}

				if(!PB2)
 8004afc:	4b21      	ldr	r3, [pc, #132]	; (8004b84 <MainTask+0xd0>)
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10b      	bne.n	8004b22 <MainTask+0x6e>
				{
					while(!PB2);
 8004b0a:	bf00      	nop
 8004b0c:	4b1d      	ldr	r3, [pc, #116]	; (8004b84 <MainTask+0xd0>)
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d0f8      	beq.n	8004b0c <MainTask+0x58>
					LidarSendIns(FAR, &lidar);
 8004b1a:	4919      	ldr	r1, [pc, #100]	; (8004b80 <MainTask+0xcc>)
 8004b1c:	2000      	movs	r0, #0
 8004b1e:	f009 fb8d 	bl	800e23c <LidarSendIns>
				}

				if(lidar.start == 1)
 8004b22:	4b17      	ldr	r3, [pc, #92]	; (8004b80 <MainTask+0xcc>)
 8004b24:	f893 31e0 	ldrb.w	r3, [r3, #480]	; 0x1e0
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00b      	beq.n	8004b4a <MainTask+0x96>
					led3 = 1;
 8004b32:	4a15      	ldr	r2, [pc, #84]	; (8004b88 <MainTask+0xd4>)
 8004b34:	7853      	ldrb	r3, [r2, #1]
 8004b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b3a:	7053      	strb	r3, [r2, #1]
			break;
 8004b3c:	e005      	b.n	8004b4a <MainTask+0x96>

			case INITIALIZE:
				Init();
 8004b3e:	f007 fb57 	bl	800c1f0 <Init>
			break;
 8004b42:	e003      	b.n	8004b4c <MainTask+0x98>

			case TUNE_PID:
				PS4Tune();
 8004b44:	f007 fc64 	bl	800c410 <PS4Tune>
			break;
 8004b48:	e000      	b.n	8004b4c <MainTask+0x98>
			break;
 8004b4a:	bf00      	nop
		}

		if(ps4.button == SELECT)
 8004b4c:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <MainTask+0xd8>)
 8004b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d1b5      	bne.n	8004ac0 <MainTask+0xc>
		{
			while(ps4.button == SELECT);
 8004b54:	bf00      	nop
 8004b56:	4b0d      	ldr	r3, [pc, #52]	; (8004b8c <MainTask+0xd8>)
 8004b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d0fb      	beq.n	8004b56 <MainTask+0xa2>
			mode++;
 8004b5e:	4b06      	ldr	r3, [pc, #24]	; (8004b78 <MainTask+0xc4>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3301      	adds	r3, #1
 8004b64:	4a04      	ldr	r2, [pc, #16]	; (8004b78 <MainTask+0xc4>)
 8004b66:	6013      	str	r3, [r2, #0]
			if(mode > TUNE_PID) mode = NORMAL;
 8004b68:	4b03      	ldr	r3, [pc, #12]	; (8004b78 <MainTask+0xc4>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	dda7      	ble.n	8004ac0 <MainTask+0xc>
 8004b70:	4b01      	ldr	r3, [pc, #4]	; (8004b78 <MainTask+0xc4>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	601a      	str	r2, [r3, #0]
		switch(mode)
 8004b76:	e7a3      	b.n	8004ac0 <MainTask+0xc>
 8004b78:	200090a8 	.word	0x200090a8
 8004b7c:	40020410 	.word	0x40020410
 8004b80:	20008eb8 	.word	0x20008eb8
 8004b84:	40021010 	.word	0x40021010
 8004b88:	40020814 	.word	0x40020814
 8004b8c:	20009e30 	.word	0x20009e30

08004b90 <Calculation>:
		}
	}
}

void Calculation(void *argument)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
	while(1)
	{
		osSemaphoreAcquire(CalcSemaphore,osWaitForever);
 8004b98:	4b26      	ldr	r3, [pc, #152]	; (8004c34 <Calculation+0xa4>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f011 f921 	bl	8015de8 <osSemaphoreAcquire>

		if(!pp.pp_start)
 8004ba6:	4b24      	ldr	r3, [pc, #144]	; (8004c38 <Calculation+0xa8>)
 8004ba8:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d104      	bne.n	8004bc0 <Calculation+0x30>
			realMODN(&ps4, &rns);
 8004bb6:	4921      	ldr	r1, [pc, #132]	; (8004c3c <Calculation+0xac>)
 8004bb8:	4821      	ldr	r0, [pc, #132]	; (8004c40 <Calculation+0xb0>)
 8004bba:	f000 f931 	bl	8004e20 <realMODN>
 8004bbe:	e01b      	b.n	8004bf8 <Calculation+0x68>
		else
		{
			VESCPIDProcess(pp.v1, pp.v2, pp.v3, pp.v4);
 8004bc0:	4b1d      	ldr	r3, [pc, #116]	; (8004c38 <Calculation+0xa8>)
 8004bc2:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8004bc6:	4b1c      	ldr	r3, [pc, #112]	; (8004c38 <Calculation+0xa8>)
 8004bc8:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8004bcc:	4b1a      	ldr	r3, [pc, #104]	; (8004c38 <Calculation+0xa8>)
 8004bce:	edd3 6abc 	vldr	s13, [r3, #752]	; 0x2f0
 8004bd2:	4b19      	ldr	r3, [pc, #100]	; (8004c38 <Calculation+0xa8>)
 8004bd4:	ed93 6abd 	vldr	s12, [r3, #756]	; 0x2f4
 8004bd8:	eef0 1a46 	vmov.f32	s3, s12
 8004bdc:	eeb0 1a66 	vmov.f32	s2, s13
 8004be0:	eef0 0a47 	vmov.f32	s1, s14
 8004be4:	eeb0 0a67 	vmov.f32	s0, s15
 8004be8:	f009 f902 	bl	800ddf0 <VESCPIDProcess>
			hb_count = HAL_GetTick();
 8004bec:	f009 fda0 	bl	800e730 <HAL_GetTick>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	4b13      	ldr	r3, [pc, #76]	; (8004c44 <Calculation+0xb4>)
 8004bf6:	601a      	str	r2, [r3, #0]
		}

		VESCNav5ms();
 8004bf8:	f009 f9aa 	bl	800df50 <VESCNav5ms>

		if(flywheel)
 8004bfc:	4b12      	ldr	r3, [pc, #72]	; (8004c48 <Calculation+0xb8>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d010      	beq.n	8004c26 <Calculation+0x96>
		{
			VESCPDC(vesc_pdc, &flywheel1);
 8004c04:	4b11      	ldr	r3, [pc, #68]	; (8004c4c <Calculation+0xbc>)
 8004c06:	edd3 7a00 	vldr	s15, [r3]
 8004c0a:	4811      	ldr	r0, [pc, #68]	; (8004c50 <Calculation+0xc0>)
 8004c0c:	eeb0 0a67 	vmov.f32	s0, s15
 8004c10:	f009 fa4a 	bl	800e0a8 <VESCPDC>
			VESCPDC(vesc_pdc, &flywheel2);
 8004c14:	4b0d      	ldr	r3, [pc, #52]	; (8004c4c <Calculation+0xbc>)
 8004c16:	edd3 7a00 	vldr	s15, [r3]
 8004c1a:	480e      	ldr	r0, [pc, #56]	; (8004c54 <Calculation+0xc4>)
 8004c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8004c20:	f009 fa42 	bl	800e0a8 <VESCPDC>
 8004c24:	e7b8      	b.n	8004b98 <Calculation+0x8>
		}
		else
		{
			VESCStop(&flywheel1);
 8004c26:	480a      	ldr	r0, [pc, #40]	; (8004c50 <Calculation+0xc0>)
 8004c28:	f009 fa68 	bl	800e0fc <VESCStop>
			VESCStop(&flywheel2);
 8004c2c:	4809      	ldr	r0, [pc, #36]	; (8004c54 <Calculation+0xc4>)
 8004c2e:	f009 fa65 	bl	800e0fc <VESCStop>
		osSemaphoreAcquire(CalcSemaphore,osWaitForever);
 8004c32:	e7b1      	b.n	8004b98 <Calculation+0x8>
 8004c34:	2000a50c 	.word	0x2000a50c
 8004c38:	20006c44 	.word	0x20006c44
 8004c3c:	20008d88 	.word	0x20008d88
 8004c40:	20009e30 	.word	0x20009e30
 8004c44:	2000976c 	.word	0x2000976c
 8004c48:	2000972c 	.word	0x2000972c
 8004c4c:	200076a4 	.word	0x200076a4
 8004c50:	20006a9c 	.word	0x20006a9c
 8004c54:	200073c8 	.word	0x200073c8

08004c58 <EmergencyTask>:
		}
	}
}

void EmergencyTask(void *argument){
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b08c      	sub	sp, #48	; 0x30
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]

	while(1){

		if(ps4.button == TOUCH){
 8004c60:	4b18      	ldr	r3, [pc, #96]	; (8004cc4 <EmergencyTask+0x6c>)
 8004c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c68:	d1fa      	bne.n	8004c60 <EmergencyTask+0x8>
//			RNSStop(&rns);
			VESCNavStop();
 8004c6a:	f008 ff31 	bl	800dad0 <VESCNavStop>
			osThreadSuspend(FlywheelPitchPIDTaskHandle);
 8004c6e:	4b16      	ldr	r3, [pc, #88]	; (8004cc8 <EmergencyTask+0x70>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f010 ffc6 	bl	8015c04 <osThreadSuspend>
			osThreadSuspend(FlywheelYawPIDTaskHandle);
 8004c78:	4b14      	ldr	r3, [pc, #80]	; (8004ccc <EmergencyTask+0x74>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f010 ffc1 	bl	8015c04 <osThreadSuspend>
			osThreadTerminate(MainTaskHandle);
 8004c82:	4b13      	ldr	r3, [pc, #76]	; (8004cd0 <EmergencyTask+0x78>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f010 ffdd 	bl	8015c46 <osThreadTerminate>
			osDelay(5);
 8004c8c:	2005      	movs	r0, #5
 8004c8e:	f011 f807 	bl	8015ca0 <osDelay>

			const osThreadAttr_t MainTask_attributes = {
 8004c92:	f107 030c 	add.w	r3, r7, #12
 8004c96:	2224      	movs	r2, #36	; 0x24
 8004c98:	2100      	movs	r1, #0
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f014 fb46 	bl	801932c <memset>
 8004ca0:	4b0c      	ldr	r3, [pc, #48]	; (8004cd4 <EmergencyTask+0x7c>)
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ca8:	623b      	str	r3, [r7, #32]
 8004caa:	2318      	movs	r3, #24
 8004cac:	627b      	str	r3, [r7, #36]	; 0x24
					.name = "MainTask",
					.stack_size = 256 * 4,
					.priority = (osPriority_t) osPriorityNormal,
			};

			MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
 8004cae:	f107 030c 	add.w	r3, r7, #12
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	4808      	ldr	r0, [pc, #32]	; (8004cd8 <EmergencyTask+0x80>)
 8004cb8:	f010 ff12 	bl	8015ae0 <osThreadNew>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	4a04      	ldr	r2, [pc, #16]	; (8004cd0 <EmergencyTask+0x78>)
 8004cc0:	6013      	str	r3, [r2, #0]
		if(ps4.button == TOUCH){
 8004cc2:	e7cd      	b.n	8004c60 <EmergencyTask+0x8>
 8004cc4:	20009e30 	.word	0x20009e30
 8004cc8:	2000952c 	.word	0x2000952c
 8004ccc:	200071a0 	.word	0x200071a0
 8004cd0:	20007784 	.word	0x20007784
 8004cd4:	08020450 	.word	0x08020450
 8004cd8:	08004ab5 	.word	0x08004ab5

08004cdc <HAL_UART_RxCpltCallback>:
			tune_flag.editTerminated = 0;
		}
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
	if(huart == tuneUart)
 8004ce4:	4b12      	ldr	r3, [pc, #72]	; (8004d30 <HAL_UART_RxCpltCallback+0x54>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d104      	bne.n	8004cf8 <HAL_UART_RxCpltCallback+0x1c>
		osSemaphoreRelease(TuneSemaphore);
 8004cee:	4b11      	ldr	r3, [pc, #68]	; (8004d34 <HAL_UART_RxCpltCallback+0x58>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f011 f8ca 	bl	8015e8c <osSemaphoreRelease>

	if(huart == ROS_UART){
 8004cf8:	4b0f      	ldr	r3, [pc, #60]	; (8004d38 <HAL_UART_RxCpltCallback+0x5c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d101      	bne.n	8004d06 <HAL_UART_RxCpltCallback+0x2a>
		ROS_Handler();
 8004d02:	f004 ff6f 	bl	8009be4 <ROS_Handler>
//	if(huart == ROS_navi.Send_Pos)
//		ROS_Navi_Pos_Handler();
//	else if(huart == ROS_navi.Recv_Vel)
//		ROS_Navi_Vel_Handler();

	if(huart == lidar.lidar_UART)
 8004d06:	4b0d      	ldr	r3, [pc, #52]	; (8004d3c <HAL_UART_RxCpltCallback+0x60>)
 8004d08:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d102      	bne.n	8004d18 <HAL_UART_RxCpltCallback+0x3c>
	{
		ObstacleHandler(&lidar);
 8004d12:	480a      	ldr	r0, [pc, #40]	; (8004d3c <HAL_UART_RxCpltCallback+0x60>)
 8004d14:	f009 fabe 	bl	800e294 <ObstacleHandler>
	}

	if(huart == imu.huartx)
 8004d18:	4b09      	ldr	r3, [pc, #36]	; (8004d40 <HAL_UART_RxCpltCallback+0x64>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d102      	bne.n	8004d28 <HAL_UART_RxCpltCallback+0x4c>
	{
		R6091U_Handler(&imu);
 8004d22:	4807      	ldr	r0, [pc, #28]	; (8004d40 <HAL_UART_RxCpltCallback+0x64>)
 8004d24:	f004 fc26 	bl	8009574 <R6091U_Handler>
	}

//		else if(huart == ps4.huartps4){
//		PSx_HandlerUART(&ps4);
//	}
}
 8004d28:	bf00      	nop
 8004d2a:	3708      	adds	r7, #8
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	2000a1fc 	.word	0x2000a1fc
 8004d34:	20009ea8 	.word	0x20009ea8
 8004d38:	2000989c 	.word	0x2000989c
 8004d3c:	20008eb8 	.word	0x20008eb8
 8004d40:	20006a08 	.word	0x20006a08

08004d44 <Error_Handler>:

/**
 * @brief  This function is executed in case of errorYaw occurrence.
 */
void Error_Handler(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0


}
 8004d48:	bf00      	nop
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	0000      	movs	r0, r0
 8004d54:	0000      	movs	r0, r0
	...

08004d58 <MODNInit>:
 * 						  								gain added to four wheels based on the speed
 * Function Return		: NONE
 * Function Example		: void MODNInit(MODN_FWD_OMNI, 3.0, 0.5, 2.0, 0.1);
 */
void MODNInit(RobotBaseType_t base, MotorType_t motor, float speed, float turnSpeed, float angleTol, float imuGain)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	4603      	mov	r3, r0
 8004d60:	460a      	mov	r2, r1
 8004d62:	ed87 0a04 	vstr	s0, [r7, #16]
 8004d66:	edc7 0a03 	vstr	s1, [r7, #12]
 8004d6a:	ed87 1a02 	vstr	s2, [r7, #8]
 8004d6e:	edc7 1a01 	vstr	s3, [r7, #4]
 8004d72:	75fb      	strb	r3, [r7, #23]
 8004d74:	4613      	mov	r3, r2
 8004d76:	75bb      	strb	r3, [r7, #22]
	MODN.base = base;
 8004d78:	4a27      	ldr	r2, [pc, #156]	; (8004e18 <MODNInit+0xc0>)
 8004d7a:	7dfb      	ldrb	r3, [r7, #23]
 8004d7c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	MODN.motor = motor;
 8004d80:	4a25      	ldr	r2, [pc, #148]	; (8004e18 <MODNInit+0xc0>)
 8004d82:	7dbb      	ldrb	r3, [r7, #22]
 8004d84:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
	MODN.speed = speed;
 8004d88:	4a23      	ldr	r2, [pc, #140]	; (8004e18 <MODNInit+0xc0>)
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	61d3      	str	r3, [r2, #28]
	MODN.d	= turnSpeed;
 8004d8e:	4a22      	ldr	r2, [pc, #136]	; (8004e18 <MODNInit+0xc0>)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6213      	str	r3, [r2, #32]
	MODN.radTol = angleTol/180.0*3.14159265359;
 8004d94:	68b8      	ldr	r0, [r7, #8]
 8004d96:	f7fb fbd7 	bl	8000548 <__aeabi_f2d>
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	4b1f      	ldr	r3, [pc, #124]	; (8004e1c <MODNInit+0xc4>)
 8004da0:	f7fb fd54 	bl	800084c <__aeabi_ddiv>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4610      	mov	r0, r2
 8004daa:	4619      	mov	r1, r3
 8004dac:	a318      	add	r3, pc, #96	; (adr r3, 8004e10 <MODNInit+0xb8>)
 8004dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db2:	f7fb fc21 	bl	80005f8 <__aeabi_dmul>
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	4610      	mov	r0, r2
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	f7fb ff13 	bl	8000be8 <__aeabi_d2f>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	4a14      	ldr	r2, [pc, #80]	; (8004e18 <MODNInit+0xc0>)
 8004dc6:	62d3      	str	r3, [r2, #44]	; 0x2c
	MODN.imuGain = speed*imuGain/MODN.radTol;
 8004dc8:	ed97 7a04 	vldr	s14, [r7, #16]
 8004dcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8004dd0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004dd4:	4b10      	ldr	r3, [pc, #64]	; (8004e18 <MODNInit+0xc0>)
 8004dd6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dde:	4b0e      	ldr	r3, [pc, #56]	; (8004e18 <MODNInit+0xc0>)
 8004de0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	MODN.radTarget = 0.0;
 8004de4:	4b0c      	ldr	r3, [pc, #48]	; (8004e18 <MODNInit+0xc0>)
 8004de6:	f04f 0200 	mov.w	r2, #0
 8004dea:	63da      	str	r2, [r3, #60]	; 0x3c
	MODN.orientation = 0;
 8004dec:	4b0a      	ldr	r3, [pc, #40]	; (8004e18 <MODNInit+0xc0>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	645a      	str	r2, [r3, #68]	; 0x44
	MODN.turnState = NO_TURN;
 8004df2:	4b09      	ldr	r3, [pc, #36]	; (8004e18 <MODNInit+0xc0>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	MODN.angleErr = 0.0;
 8004dfa:	4b07      	ldr	r3, [pc, #28]	; (8004e18 <MODNInit+0xc0>)
 8004dfc:	f04f 0200 	mov.w	r2, #0
 8004e00:	631a      	str	r2, [r3, #48]	; 0x30
//	MODN.real_x_vel = &(MODN.x_vel);
//	MODN.real_y_vel = &(MODN.y_vel);
}
 8004e02:	bf00      	nop
 8004e04:	3718      	adds	r7, #24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	f3af 8000 	nop.w
 8004e10:	54442eea 	.word	0x54442eea
 8004e14:	400921fb 	.word	0x400921fb
 8004e18:	20006a2c 	.word	0x20006a2c
 8004e1c:	40668000 	.word	0x40668000

08004e20 <realMODN>:
 * Function Return		: NONE
 * Function Example		: realMODN(ps4, &rns);
 */

void realMODN(PSxBT_t *psx, RNS_interface_t* rns)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	ed2d 8b02 	vpush	{d8}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
	switch(MODN.orientation){
 8004e2e:	4b52      	ldr	r3, [pc, #328]	; (8004f78 <realMODN+0x158>)
 8004e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e32:	2b03      	cmp	r3, #3
 8004e34:	d86e      	bhi.n	8004f14 <realMODN+0xf4>
 8004e36:	a201      	add	r2, pc, #4	; (adr r2, 8004e3c <realMODN+0x1c>)
 8004e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3c:	08004e4d 	.word	0x08004e4d
 8004e40:	08004e7f 	.word	0x08004e7f
 8004e44:	08004ead 	.word	0x08004ead
 8004e48:	08004edf 	.word	0x08004edf
	case OPERATOR_TURNED_0_DEGREE:
		MODN.x_vel = -(psx->joyL_x) * MODN.speed;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004e52:	eeb1 7a67 	vneg.f32	s14, s15
 8004e56:	4b48      	ldr	r3, [pc, #288]	; (8004f78 <realMODN+0x158>)
 8004e58:	edd3 7a07 	vldr	s15, [r3, #28]
 8004e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e60:	4b45      	ldr	r3, [pc, #276]	; (8004f78 <realMODN+0x158>)
 8004e62:	edc3 7a00 	vstr	s15, [r3]
		MODN.y_vel =  (psx->joyL_y) * MODN.speed;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8004e6c:	4b42      	ldr	r3, [pc, #264]	; (8004f78 <realMODN+0x158>)
 8004e6e:	edd3 7a07 	vldr	s15, [r3, #28]
 8004e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e76:	4b40      	ldr	r3, [pc, #256]	; (8004f78 <realMODN+0x158>)
 8004e78:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 8004e7c:	e04a      	b.n	8004f14 <realMODN+0xf4>
	case OPERATOR_TURNED_90_DEGREES_CLOCKWISE:
		MODN.x_vel =  psx->joyL_y * MODN.speed;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8004e84:	4b3c      	ldr	r3, [pc, #240]	; (8004f78 <realMODN+0x158>)
 8004e86:	edd3 7a07 	vldr	s15, [r3, #28]
 8004e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e8e:	4b3a      	ldr	r3, [pc, #232]	; (8004f78 <realMODN+0x158>)
 8004e90:	edc3 7a00 	vstr	s15, [r3]
		MODN.y_vel =  psx->joyL_x * MODN.speed;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8004e9a:	4b37      	ldr	r3, [pc, #220]	; (8004f78 <realMODN+0x158>)
 8004e9c:	edd3 7a07 	vldr	s15, [r3, #28]
 8004ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ea4:	4b34      	ldr	r3, [pc, #208]	; (8004f78 <realMODN+0x158>)
 8004ea6:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 8004eaa:	e033      	b.n	8004f14 <realMODN+0xf4>
	case OPERATOR_TURNED_180_DEGREES:
		MODN.x_vel =  psx->joyL_x * MODN.speed;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8004eb2:	4b31      	ldr	r3, [pc, #196]	; (8004f78 <realMODN+0x158>)
 8004eb4:	edd3 7a07 	vldr	s15, [r3, #28]
 8004eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ebc:	4b2e      	ldr	r3, [pc, #184]	; (8004f78 <realMODN+0x158>)
 8004ebe:	edc3 7a00 	vstr	s15, [r3]
		MODN.y_vel = -psx->joyL_y * MODN.speed;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004ec8:	eeb1 7a67 	vneg.f32	s14, s15
 8004ecc:	4b2a      	ldr	r3, [pc, #168]	; (8004f78 <realMODN+0x158>)
 8004ece:	edd3 7a07 	vldr	s15, [r3, #28]
 8004ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ed6:	4b28      	ldr	r3, [pc, #160]	; (8004f78 <realMODN+0x158>)
 8004ed8:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 8004edc:	e01a      	b.n	8004f14 <realMODN+0xf4>
	case OPERATOR_TURNED_90_DEGREES_ANTICLOCKWISE:
		MODN.x_vel = -psx->joyL_y * MODN.speed;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004ee4:	eeb1 7a67 	vneg.f32	s14, s15
 8004ee8:	4b23      	ldr	r3, [pc, #140]	; (8004f78 <realMODN+0x158>)
 8004eea:	edd3 7a07 	vldr	s15, [r3, #28]
 8004eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ef2:	4b21      	ldr	r3, [pc, #132]	; (8004f78 <realMODN+0x158>)
 8004ef4:	edc3 7a00 	vstr	s15, [r3]
		MODN.y_vel = -psx->joyL_x * MODN.speed;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004efe:	eeb1 7a67 	vneg.f32	s14, s15
 8004f02:	4b1d      	ldr	r3, [pc, #116]	; (8004f78 <realMODN+0x158>)
 8004f04:	edd3 7a07 	vldr	s15, [r3, #28]
 8004f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f0c:	4b1a      	ldr	r3, [pc, #104]	; (8004f78 <realMODN+0x158>)
 8004f0e:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 8004f12:	bf00      	nop
	}
	MODN.w_vel = ((psx->joyR_2) - (psx->joyL_2))* MODN.speed;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004f20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004f24:	4b14      	ldr	r3, [pc, #80]	; (8004f78 <realMODN+0x158>)
 8004f26:	edd3 7a07 	vldr	s15, [r3, #28]
 8004f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f2e:	4b12      	ldr	r3, [pc, #72]	; (8004f78 <realMODN+0x158>)
 8004f30:	edc3 7a02 	vstr	s15, [r3, #8]

	if(MODN.motor == BRUSH)
 8004f34:	4b10      	ldr	r3, [pc, #64]	; (8004f78 <realMODN+0x158>)
 8004f36:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	f040 823f 	bne.w	80053be <realMODN+0x59e>
	{
		if(MODN.x_vel==0.0 && MODN.y_vel==0.0 && MODN.w_vel==0.0){
 8004f40:	4b0d      	ldr	r3, [pc, #52]	; (8004f78 <realMODN+0x158>)
 8004f42:	edd3 7a00 	vldr	s15, [r3]
 8004f46:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f4e:	d115      	bne.n	8004f7c <realMODN+0x15c>
 8004f50:	4b09      	ldr	r3, [pc, #36]	; (8004f78 <realMODN+0x158>)
 8004f52:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f56:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f5e:	d10d      	bne.n	8004f7c <realMODN+0x15c>
 8004f60:	4b05      	ldr	r3, [pc, #20]	; (8004f78 <realMODN+0x158>)
 8004f62:	edd3 7a02 	vldr	s15, [r3, #8]
 8004f66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f6e:	d105      	bne.n	8004f7c <realMODN+0x15c>
			RNSStop(rns);
 8004f70:	6838      	ldr	r0, [r7, #0]
 8004f72:	f004 fbc1 	bl	80096f8 <RNSStop>
 8004f76:	e222      	b.n	80053be <realMODN+0x59e>
 8004f78:	20006a2c 	.word	0x20006a2c
		}else{
			RNSEnquire(RNS_COORDINATE_X_Y_Z_Zrad, rns);
 8004f7c:	6839      	ldr	r1, [r7, #0]
 8004f7e:	205f      	movs	r0, #95	; 0x5f
 8004f80:	f004 fcd8 	bl	8009934 <RNSEnquire>
			float realZrad = rns->enq.enq_buffer[3].data;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f88:	60fb      	str	r3, [r7, #12]
			if(MODN.base == MODN_FWD_OMNI) {
 8004f8a:	4ba1      	ldr	r3, [pc, #644]	; (8005210 <realMODN+0x3f0>)
 8004f8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f040 813f 	bne.w	8005214 <realMODN+0x3f4>
				MODN.vel1 = MODN.x_vel*cosf(0.7854-realZrad) + MODN.y_vel*sinf(0.7854-realZrad) + MODN.w_vel*MODN.d;
 8004f96:	4b9e      	ldr	r3, [pc, #632]	; (8005210 <realMODN+0x3f0>)
 8004f98:	ed93 8a00 	vldr	s16, [r3]
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f7fb fad3 	bl	8000548 <__aeabi_f2d>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	a196      	add	r1, pc, #600	; (adr r1, 8005200 <realMODN+0x3e0>)
 8004fa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fac:	f7fb f96c 	bl	8000288 <__aeabi_dsub>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	f7fb fe16 	bl	8000be8 <__aeabi_d2f>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	ee00 3a10 	vmov	s0, r3
 8004fc2:	f019 f8cf 	bl	801e164 <cosf>
 8004fc6:	eef0 7a40 	vmov.f32	s15, s0
 8004fca:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004fce:	4b90      	ldr	r3, [pc, #576]	; (8005210 <realMODN+0x3f0>)
 8004fd0:	edd3 8a01 	vldr	s17, [r3, #4]
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f7fb fab7 	bl	8000548 <__aeabi_f2d>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	460b      	mov	r3, r1
 8004fde:	a188      	add	r1, pc, #544	; (adr r1, 8005200 <realMODN+0x3e0>)
 8004fe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fe4:	f7fb f950 	bl	8000288 <__aeabi_dsub>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	4610      	mov	r0, r2
 8004fee:	4619      	mov	r1, r3
 8004ff0:	f7fb fdfa 	bl	8000be8 <__aeabi_d2f>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	ee00 3a10 	vmov	s0, r3
 8004ffa:	f019 f8fb 	bl	801e1f4 <sinf>
 8004ffe:	eef0 7a40 	vmov.f32	s15, s0
 8005002:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8005006:	ee38 7a27 	vadd.f32	s14, s16, s15
 800500a:	4b81      	ldr	r3, [pc, #516]	; (8005210 <realMODN+0x3f0>)
 800500c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005010:	4b7f      	ldr	r3, [pc, #508]	; (8005210 <realMODN+0x3f0>)
 8005012:	edd3 7a08 	vldr	s15, [r3, #32]
 8005016:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800501a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800501e:	4b7c      	ldr	r3, [pc, #496]	; (8005210 <realMODN+0x3f0>)
 8005020:	edc3 7a03 	vstr	s15, [r3, #12]
				MODN.vel2 = MODN.x_vel*cosf(2.3562-realZrad) + MODN.y_vel*sinf(2.3562-realZrad) - MODN.w_vel*MODN.d;
 8005024:	4b7a      	ldr	r3, [pc, #488]	; (8005210 <realMODN+0x3f0>)
 8005026:	ed93 8a00 	vldr	s16, [r3]
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f7fb fa8c 	bl	8000548 <__aeabi_f2d>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	a174      	add	r1, pc, #464	; (adr r1, 8005208 <realMODN+0x3e8>)
 8005036:	e9d1 0100 	ldrd	r0, r1, [r1]
 800503a:	f7fb f925 	bl	8000288 <__aeabi_dsub>
 800503e:	4602      	mov	r2, r0
 8005040:	460b      	mov	r3, r1
 8005042:	4610      	mov	r0, r2
 8005044:	4619      	mov	r1, r3
 8005046:	f7fb fdcf 	bl	8000be8 <__aeabi_d2f>
 800504a:	4603      	mov	r3, r0
 800504c:	ee00 3a10 	vmov	s0, r3
 8005050:	f019 f888 	bl	801e164 <cosf>
 8005054:	eef0 7a40 	vmov.f32	s15, s0
 8005058:	ee28 8a27 	vmul.f32	s16, s16, s15
 800505c:	4b6c      	ldr	r3, [pc, #432]	; (8005210 <realMODN+0x3f0>)
 800505e:	edd3 8a01 	vldr	s17, [r3, #4]
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f7fb fa70 	bl	8000548 <__aeabi_f2d>
 8005068:	4602      	mov	r2, r0
 800506a:	460b      	mov	r3, r1
 800506c:	a166      	add	r1, pc, #408	; (adr r1, 8005208 <realMODN+0x3e8>)
 800506e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005072:	f7fb f909 	bl	8000288 <__aeabi_dsub>
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	4610      	mov	r0, r2
 800507c:	4619      	mov	r1, r3
 800507e:	f7fb fdb3 	bl	8000be8 <__aeabi_d2f>
 8005082:	4603      	mov	r3, r0
 8005084:	ee00 3a10 	vmov	s0, r3
 8005088:	f019 f8b4 	bl	801e1f4 <sinf>
 800508c:	eef0 7a40 	vmov.f32	s15, s0
 8005090:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8005094:	ee38 7a27 	vadd.f32	s14, s16, s15
 8005098:	4b5d      	ldr	r3, [pc, #372]	; (8005210 <realMODN+0x3f0>)
 800509a:	edd3 6a02 	vldr	s13, [r3, #8]
 800509e:	4b5c      	ldr	r3, [pc, #368]	; (8005210 <realMODN+0x3f0>)
 80050a0:	edd3 7a08 	vldr	s15, [r3, #32]
 80050a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050ac:	4b58      	ldr	r3, [pc, #352]	; (8005210 <realMODN+0x3f0>)
 80050ae:	edc3 7a04 	vstr	s15, [r3, #16]
				MODN.vel3 = MODN.x_vel*cosf(2.3562-realZrad) + MODN.y_vel*sinf(2.3562-realZrad) + MODN.w_vel*MODN.d;
 80050b2:	4b57      	ldr	r3, [pc, #348]	; (8005210 <realMODN+0x3f0>)
 80050b4:	ed93 8a00 	vldr	s16, [r3]
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f7fb fa45 	bl	8000548 <__aeabi_f2d>
 80050be:	4602      	mov	r2, r0
 80050c0:	460b      	mov	r3, r1
 80050c2:	a151      	add	r1, pc, #324	; (adr r1, 8005208 <realMODN+0x3e8>)
 80050c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050c8:	f7fb f8de 	bl	8000288 <__aeabi_dsub>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4610      	mov	r0, r2
 80050d2:	4619      	mov	r1, r3
 80050d4:	f7fb fd88 	bl	8000be8 <__aeabi_d2f>
 80050d8:	4603      	mov	r3, r0
 80050da:	ee00 3a10 	vmov	s0, r3
 80050de:	f019 f841 	bl	801e164 <cosf>
 80050e2:	eef0 7a40 	vmov.f32	s15, s0
 80050e6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80050ea:	4b49      	ldr	r3, [pc, #292]	; (8005210 <realMODN+0x3f0>)
 80050ec:	edd3 8a01 	vldr	s17, [r3, #4]
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f7fb fa29 	bl	8000548 <__aeabi_f2d>
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	a143      	add	r1, pc, #268	; (adr r1, 8005208 <realMODN+0x3e8>)
 80050fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005100:	f7fb f8c2 	bl	8000288 <__aeabi_dsub>
 8005104:	4602      	mov	r2, r0
 8005106:	460b      	mov	r3, r1
 8005108:	4610      	mov	r0, r2
 800510a:	4619      	mov	r1, r3
 800510c:	f7fb fd6c 	bl	8000be8 <__aeabi_d2f>
 8005110:	4603      	mov	r3, r0
 8005112:	ee00 3a10 	vmov	s0, r3
 8005116:	f019 f86d 	bl	801e1f4 <sinf>
 800511a:	eef0 7a40 	vmov.f32	s15, s0
 800511e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8005122:	ee38 7a27 	vadd.f32	s14, s16, s15
 8005126:	4b3a      	ldr	r3, [pc, #232]	; (8005210 <realMODN+0x3f0>)
 8005128:	edd3 6a02 	vldr	s13, [r3, #8]
 800512c:	4b38      	ldr	r3, [pc, #224]	; (8005210 <realMODN+0x3f0>)
 800512e:	edd3 7a08 	vldr	s15, [r3, #32]
 8005132:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005136:	ee77 7a27 	vadd.f32	s15, s14, s15
 800513a:	4b35      	ldr	r3, [pc, #212]	; (8005210 <realMODN+0x3f0>)
 800513c:	edc3 7a05 	vstr	s15, [r3, #20]
				MODN.vel4 = MODN.x_vel*cosf(0.7854-realZrad) + MODN.y_vel*sinf(0.7854-realZrad) - MODN.w_vel*MODN.d;
 8005140:	4b33      	ldr	r3, [pc, #204]	; (8005210 <realMODN+0x3f0>)
 8005142:	ed93 8a00 	vldr	s16, [r3]
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f7fb f9fe 	bl	8000548 <__aeabi_f2d>
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	a12b      	add	r1, pc, #172	; (adr r1, 8005200 <realMODN+0x3e0>)
 8005152:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005156:	f7fb f897 	bl	8000288 <__aeabi_dsub>
 800515a:	4602      	mov	r2, r0
 800515c:	460b      	mov	r3, r1
 800515e:	4610      	mov	r0, r2
 8005160:	4619      	mov	r1, r3
 8005162:	f7fb fd41 	bl	8000be8 <__aeabi_d2f>
 8005166:	4603      	mov	r3, r0
 8005168:	ee00 3a10 	vmov	s0, r3
 800516c:	f018 fffa 	bl	801e164 <cosf>
 8005170:	eef0 7a40 	vmov.f32	s15, s0
 8005174:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005178:	4b25      	ldr	r3, [pc, #148]	; (8005210 <realMODN+0x3f0>)
 800517a:	edd3 8a01 	vldr	s17, [r3, #4]
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f7fb f9e2 	bl	8000548 <__aeabi_f2d>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	a11d      	add	r1, pc, #116	; (adr r1, 8005200 <realMODN+0x3e0>)
 800518a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800518e:	f7fb f87b 	bl	8000288 <__aeabi_dsub>
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	4610      	mov	r0, r2
 8005198:	4619      	mov	r1, r3
 800519a:	f7fb fd25 	bl	8000be8 <__aeabi_d2f>
 800519e:	4603      	mov	r3, r0
 80051a0:	ee00 3a10 	vmov	s0, r3
 80051a4:	f019 f826 	bl	801e1f4 <sinf>
 80051a8:	eef0 7a40 	vmov.f32	s15, s0
 80051ac:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80051b0:	ee38 7a27 	vadd.f32	s14, s16, s15
 80051b4:	4b16      	ldr	r3, [pc, #88]	; (8005210 <realMODN+0x3f0>)
 80051b6:	edd3 6a02 	vldr	s13, [r3, #8]
 80051ba:	4b15      	ldr	r3, [pc, #84]	; (8005210 <realMODN+0x3f0>)
 80051bc:	edd3 7a08 	vldr	s15, [r3, #32]
 80051c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051c8:	4b11      	ldr	r3, [pc, #68]	; (8005210 <realMODN+0x3f0>)
 80051ca:	edc3 7a06 	vstr	s15, [r3, #24]
				RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, MODN.vel4, rns);
 80051ce:	4b10      	ldr	r3, [pc, #64]	; (8005210 <realMODN+0x3f0>)
 80051d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80051d4:	4b0e      	ldr	r3, [pc, #56]	; (8005210 <realMODN+0x3f0>)
 80051d6:	ed93 7a04 	vldr	s14, [r3, #16]
 80051da:	4b0d      	ldr	r3, [pc, #52]	; (8005210 <realMODN+0x3f0>)
 80051dc:	edd3 6a05 	vldr	s13, [r3, #20]
 80051e0:	4b0b      	ldr	r3, [pc, #44]	; (8005210 <realMODN+0x3f0>)
 80051e2:	ed93 6a06 	vldr	s12, [r3, #24]
 80051e6:	6838      	ldr	r0, [r7, #0]
 80051e8:	eef0 1a46 	vmov.f32	s3, s12
 80051ec:	eeb0 1a66 	vmov.f32	s2, s13
 80051f0:	eef0 0a47 	vmov.f32	s1, s14
 80051f4:	eeb0 0a67 	vmov.f32	s0, s15
 80051f8:	f004 fb02 	bl	8009800 <RNSVelocity>
 80051fc:	e0df      	b.n	80053be <realMODN+0x59e>
 80051fe:	bf00      	nop
 8005200:	2e48e8a7 	.word	0x2e48e8a7
 8005204:	3fe921ff 	.word	0x3fe921ff
 8005208:	62b6ae7d 	.word	0x62b6ae7d
 800520c:	4002d97f 	.word	0x4002d97f
 8005210:	20006a2c 	.word	0x20006a2c
			//		*(MODN.vel1) = *(MODN.y_vel)*(1.0) + *(MODN.x_vel)*(1.0)  + *(MODN.w_vel)/*(MODN.d + MODN.e)*/;
			//		*(MODN.vel2) = *(MODN.y_vel)*(1.0) + *(MODN.x_vel)*(-1.0) - *(MODN.w_vel)/*(MODN.d + MODN.e)*/;
			//		*(MODN.vel3) = *(MODN.y_vel)*(1.0) + *(MODN.x_vel)*(-1.0) + *(MODN.w_vel)/*(MODN.d + MODN.e)*/;
			//		*(MODN.vel4) = *(MODN.y_vel)*(1.0) + *(MODN.x_vel)*(1.0)  - *(MODN.w_vel)/*(MODN.d + MODN.e)*/;
			//	}
			else if (MODN.base == MODN_TRI_OMNI){
 8005214:	4b7e      	ldr	r3, [pc, #504]	; (8005410 <realMODN+0x5f0>)
 8005216:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800521a:	2b01      	cmp	r3, #1
 800521c:	f040 80cf 	bne.w	80053be <realMODN+0x59e>
				 *
				 * 		+		  +
				 * 		A\		 /B
				 * 		  -     -
				 */
				MODN.vel3 = MODN.y_vel*sinf(-realZrad) 		 + MODN.x_vel*cosf(-realZrad)  	    + MODN.w_vel*MODN.d;
 8005220:	4b7b      	ldr	r3, [pc, #492]	; (8005410 <realMODN+0x5f0>)
 8005222:	ed93 8a01 	vldr	s16, [r3, #4]
 8005226:	edd7 7a03 	vldr	s15, [r7, #12]
 800522a:	eef1 7a67 	vneg.f32	s15, s15
 800522e:	eeb0 0a67 	vmov.f32	s0, s15
 8005232:	f018 ffdf 	bl	801e1f4 <sinf>
 8005236:	eef0 7a40 	vmov.f32	s15, s0
 800523a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800523e:	4b74      	ldr	r3, [pc, #464]	; (8005410 <realMODN+0x5f0>)
 8005240:	edd3 8a00 	vldr	s17, [r3]
 8005244:	edd7 7a03 	vldr	s15, [r7, #12]
 8005248:	eef1 7a67 	vneg.f32	s15, s15
 800524c:	eeb0 0a67 	vmov.f32	s0, s15
 8005250:	f018 ff88 	bl	801e164 <cosf>
 8005254:	eef0 7a40 	vmov.f32	s15, s0
 8005258:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800525c:	ee38 7a27 	vadd.f32	s14, s16, s15
 8005260:	4b6b      	ldr	r3, [pc, #428]	; (8005410 <realMODN+0x5f0>)
 8005262:	edd3 6a02 	vldr	s13, [r3, #8]
 8005266:	4b6a      	ldr	r3, [pc, #424]	; (8005410 <realMODN+0x5f0>)
 8005268:	edd3 7a08 	vldr	s15, [r3, #32]
 800526c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005270:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005274:	4b66      	ldr	r3, [pc, #408]	; (8005410 <realMODN+0x5f0>)
 8005276:	edc3 7a05 	vstr	s15, [r3, #20]
				MODN.vel1 = MODN.y_vel*sinf(2.0944-realZrad) + MODN.x_vel*cosf(2.0944-realZrad) + MODN.w_vel*MODN.d;
 800527a:	4b65      	ldr	r3, [pc, #404]	; (8005410 <realMODN+0x5f0>)
 800527c:	ed93 8a01 	vldr	s16, [r3, #4]
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f7fb f961 	bl	8000548 <__aeabi_f2d>
 8005286:	4602      	mov	r2, r0
 8005288:	460b      	mov	r3, r1
 800528a:	a15d      	add	r1, pc, #372	; (adr r1, 8005400 <realMODN+0x5e0>)
 800528c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005290:	f7fa fffa 	bl	8000288 <__aeabi_dsub>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4610      	mov	r0, r2
 800529a:	4619      	mov	r1, r3
 800529c:	f7fb fca4 	bl	8000be8 <__aeabi_d2f>
 80052a0:	4603      	mov	r3, r0
 80052a2:	ee00 3a10 	vmov	s0, r3
 80052a6:	f018 ffa5 	bl	801e1f4 <sinf>
 80052aa:	eef0 7a40 	vmov.f32	s15, s0
 80052ae:	ee28 8a27 	vmul.f32	s16, s16, s15
 80052b2:	4b57      	ldr	r3, [pc, #348]	; (8005410 <realMODN+0x5f0>)
 80052b4:	edd3 8a00 	vldr	s17, [r3]
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f7fb f945 	bl	8000548 <__aeabi_f2d>
 80052be:	4602      	mov	r2, r0
 80052c0:	460b      	mov	r3, r1
 80052c2:	a14f      	add	r1, pc, #316	; (adr r1, 8005400 <realMODN+0x5e0>)
 80052c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052c8:	f7fa ffde 	bl	8000288 <__aeabi_dsub>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4610      	mov	r0, r2
 80052d2:	4619      	mov	r1, r3
 80052d4:	f7fb fc88 	bl	8000be8 <__aeabi_d2f>
 80052d8:	4603      	mov	r3, r0
 80052da:	ee00 3a10 	vmov	s0, r3
 80052de:	f018 ff41 	bl	801e164 <cosf>
 80052e2:	eef0 7a40 	vmov.f32	s15, s0
 80052e6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80052ea:	ee38 7a27 	vadd.f32	s14, s16, s15
 80052ee:	4b48      	ldr	r3, [pc, #288]	; (8005410 <realMODN+0x5f0>)
 80052f0:	edd3 6a02 	vldr	s13, [r3, #8]
 80052f4:	4b46      	ldr	r3, [pc, #280]	; (8005410 <realMODN+0x5f0>)
 80052f6:	edd3 7a08 	vldr	s15, [r3, #32]
 80052fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005302:	4b43      	ldr	r3, [pc, #268]	; (8005410 <realMODN+0x5f0>)
 8005304:	edc3 7a03 	vstr	s15, [r3, #12]
				MODN.vel2 = MODN.y_vel*sinf(1.0472-realZrad) + MODN.x_vel*cosf(1.0472-realZrad) - MODN.w_vel*MODN.d;
 8005308:	4b41      	ldr	r3, [pc, #260]	; (8005410 <realMODN+0x5f0>)
 800530a:	ed93 8a01 	vldr	s16, [r3, #4]
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f7fb f91a 	bl	8000548 <__aeabi_f2d>
 8005314:	4602      	mov	r2, r0
 8005316:	460b      	mov	r3, r1
 8005318:	a13b      	add	r1, pc, #236	; (adr r1, 8005408 <realMODN+0x5e8>)
 800531a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800531e:	f7fa ffb3 	bl	8000288 <__aeabi_dsub>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	4610      	mov	r0, r2
 8005328:	4619      	mov	r1, r3
 800532a:	f7fb fc5d 	bl	8000be8 <__aeabi_d2f>
 800532e:	4603      	mov	r3, r0
 8005330:	ee00 3a10 	vmov	s0, r3
 8005334:	f018 ff5e 	bl	801e1f4 <sinf>
 8005338:	eef0 7a40 	vmov.f32	s15, s0
 800533c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005340:	4b33      	ldr	r3, [pc, #204]	; (8005410 <realMODN+0x5f0>)
 8005342:	edd3 8a00 	vldr	s17, [r3]
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f7fb f8fe 	bl	8000548 <__aeabi_f2d>
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	a12d      	add	r1, pc, #180	; (adr r1, 8005408 <realMODN+0x5e8>)
 8005352:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005356:	f7fa ff97 	bl	8000288 <__aeabi_dsub>
 800535a:	4602      	mov	r2, r0
 800535c:	460b      	mov	r3, r1
 800535e:	4610      	mov	r0, r2
 8005360:	4619      	mov	r1, r3
 8005362:	f7fb fc41 	bl	8000be8 <__aeabi_d2f>
 8005366:	4603      	mov	r3, r0
 8005368:	ee00 3a10 	vmov	s0, r3
 800536c:	f018 fefa 	bl	801e164 <cosf>
 8005370:	eef0 7a40 	vmov.f32	s15, s0
 8005374:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8005378:	ee38 7a27 	vadd.f32	s14, s16, s15
 800537c:	4b24      	ldr	r3, [pc, #144]	; (8005410 <realMODN+0x5f0>)
 800537e:	edd3 6a02 	vldr	s13, [r3, #8]
 8005382:	4b23      	ldr	r3, [pc, #140]	; (8005410 <realMODN+0x5f0>)
 8005384:	edd3 7a08 	vldr	s15, [r3, #32]
 8005388:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800538c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005390:	4b1f      	ldr	r3, [pc, #124]	; (8005410 <realMODN+0x5f0>)
 8005392:	edc3 7a04 	vstr	s15, [r3, #16]
				RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
 8005396:	4b1e      	ldr	r3, [pc, #120]	; (8005410 <realMODN+0x5f0>)
 8005398:	edd3 7a03 	vldr	s15, [r3, #12]
 800539c:	4b1c      	ldr	r3, [pc, #112]	; (8005410 <realMODN+0x5f0>)
 800539e:	ed93 7a04 	vldr	s14, [r3, #16]
 80053a2:	4b1b      	ldr	r3, [pc, #108]	; (8005410 <realMODN+0x5f0>)
 80053a4:	edd3 6a05 	vldr	s13, [r3, #20]
 80053a8:	6838      	ldr	r0, [r7, #0]
 80053aa:	eddf 1a1a 	vldr	s3, [pc, #104]	; 8005414 <realMODN+0x5f4>
 80053ae:	eeb0 1a66 	vmov.f32	s2, s13
 80053b2:	eef0 0a47 	vmov.f32	s1, s14
 80053b6:	eeb0 0a67 	vmov.f32	s0, s15
 80053ba:	f004 fa21 	bl	8009800 <RNSVelocity>
			}
		}
	}
	if(MODN.motor == BRUSHLESS)// Brushless motor
 80053be:	4b14      	ldr	r3, [pc, #80]	; (8005410 <realMODN+0x5f0>)
 80053c0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f040 8264 	bne.w	8005892 <realMODN+0xa72>
	{
		if(MODN.x_vel==0.0 && MODN.y_vel==0.0 && MODN.w_vel==0.0)
 80053ca:	4b11      	ldr	r3, [pc, #68]	; (8005410 <realMODN+0x5f0>)
 80053cc:	edd3 7a00 	vldr	s15, [r3]
 80053d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80053d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d8:	d11e      	bne.n	8005418 <realMODN+0x5f8>
 80053da:	4b0d      	ldr	r3, [pc, #52]	; (8005410 <realMODN+0x5f0>)
 80053dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80053e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80053e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053e8:	d116      	bne.n	8005418 <realMODN+0x5f8>
 80053ea:	4b09      	ldr	r3, [pc, #36]	; (8005410 <realMODN+0x5f0>)
 80053ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80053f0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80053f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053f8:	d10e      	bne.n	8005418 <realMODN+0x5f8>
		{
			/*
			 * If using omni wheel, impossible to stop immediately
			 * maybe can let it turn opposite direction to stop it faster
			 */
			VESCNavStop();
 80053fa:	f008 fb69 	bl	800dad0 <VESCNavStop>
				VESCPIDProcess(MODN.vel1, MODN.vel2, MODN.vel3, MODN.vel4);
			}
		}
	}

}
 80053fe:	e248      	b.n	8005892 <realMODN+0xa72>
 8005400:	c985f06f 	.word	0xc985f06f
 8005404:	4000c154 	.word	0x4000c154
 8005408:	c985f06f 	.word	0xc985f06f
 800540c:	3ff0c154 	.word	0x3ff0c154
 8005410:	20006a2c 	.word	0x20006a2c
 8005414:	00000000 	.word	0x00000000
			float realZrad = pp.real_z_rad;
 8005418:	4baf      	ldr	r3, [pc, #700]	; (80056d8 <realMODN+0x8b8>)
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	60bb      	str	r3, [r7, #8]
			if(MODN.base == MODN_FWD_OMNI) {
 800541e:	4baf      	ldr	r3, [pc, #700]	; (80056dc <realMODN+0x8bc>)
 8005420:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005424:	2b00      	cmp	r3, #0
 8005426:	f040 815d 	bne.w	80056e4 <realMODN+0x8c4>
				MODN.vel1 = MODN.x_vel*cosf(0.7854-realZrad) + MODN.y_vel*sinf(0.7854-realZrad) + MODN.w_vel*MODN.d - MODN.imuFeedback;
 800542a:	4bac      	ldr	r3, [pc, #688]	; (80056dc <realMODN+0x8bc>)
 800542c:	ed93 8a00 	vldr	s16, [r3]
 8005430:	68b8      	ldr	r0, [r7, #8]
 8005432:	f7fb f889 	bl	8000548 <__aeabi_f2d>
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	a1a3      	add	r1, pc, #652	; (adr r1, 80056c8 <realMODN+0x8a8>)
 800543c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005440:	f7fa ff22 	bl	8000288 <__aeabi_dsub>
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	4610      	mov	r0, r2
 800544a:	4619      	mov	r1, r3
 800544c:	f7fb fbcc 	bl	8000be8 <__aeabi_d2f>
 8005450:	4603      	mov	r3, r0
 8005452:	ee00 3a10 	vmov	s0, r3
 8005456:	f018 fe85 	bl	801e164 <cosf>
 800545a:	eef0 7a40 	vmov.f32	s15, s0
 800545e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005462:	4b9e      	ldr	r3, [pc, #632]	; (80056dc <realMODN+0x8bc>)
 8005464:	edd3 8a01 	vldr	s17, [r3, #4]
 8005468:	68b8      	ldr	r0, [r7, #8]
 800546a:	f7fb f86d 	bl	8000548 <__aeabi_f2d>
 800546e:	4602      	mov	r2, r0
 8005470:	460b      	mov	r3, r1
 8005472:	a195      	add	r1, pc, #596	; (adr r1, 80056c8 <realMODN+0x8a8>)
 8005474:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005478:	f7fa ff06 	bl	8000288 <__aeabi_dsub>
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	4610      	mov	r0, r2
 8005482:	4619      	mov	r1, r3
 8005484:	f7fb fbb0 	bl	8000be8 <__aeabi_d2f>
 8005488:	4603      	mov	r3, r0
 800548a:	ee00 3a10 	vmov	s0, r3
 800548e:	f018 feb1 	bl	801e1f4 <sinf>
 8005492:	eef0 7a40 	vmov.f32	s15, s0
 8005496:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800549a:	ee38 7a27 	vadd.f32	s14, s16, s15
 800549e:	4b8f      	ldr	r3, [pc, #572]	; (80056dc <realMODN+0x8bc>)
 80054a0:	edd3 6a02 	vldr	s13, [r3, #8]
 80054a4:	4b8d      	ldr	r3, [pc, #564]	; (80056dc <realMODN+0x8bc>)
 80054a6:	edd3 7a08 	vldr	s15, [r3, #32]
 80054aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054b2:	4b8a      	ldr	r3, [pc, #552]	; (80056dc <realMODN+0x8bc>)
 80054b4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80054b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054bc:	4b87      	ldr	r3, [pc, #540]	; (80056dc <realMODN+0x8bc>)
 80054be:	edc3 7a03 	vstr	s15, [r3, #12]
				MODN.vel2 = MODN.x_vel*cosf(2.3562-realZrad) + MODN.y_vel*sinf(2.3562-realZrad) - MODN.w_vel*MODN.d + MODN.imuFeedback;
 80054c2:	4b86      	ldr	r3, [pc, #536]	; (80056dc <realMODN+0x8bc>)
 80054c4:	ed93 8a00 	vldr	s16, [r3]
 80054c8:	68b8      	ldr	r0, [r7, #8]
 80054ca:	f7fb f83d 	bl	8000548 <__aeabi_f2d>
 80054ce:	4602      	mov	r2, r0
 80054d0:	460b      	mov	r3, r1
 80054d2:	a17f      	add	r1, pc, #508	; (adr r1, 80056d0 <realMODN+0x8b0>)
 80054d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054d8:	f7fa fed6 	bl	8000288 <__aeabi_dsub>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4610      	mov	r0, r2
 80054e2:	4619      	mov	r1, r3
 80054e4:	f7fb fb80 	bl	8000be8 <__aeabi_d2f>
 80054e8:	4603      	mov	r3, r0
 80054ea:	ee00 3a10 	vmov	s0, r3
 80054ee:	f018 fe39 	bl	801e164 <cosf>
 80054f2:	eef0 7a40 	vmov.f32	s15, s0
 80054f6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80054fa:	4b78      	ldr	r3, [pc, #480]	; (80056dc <realMODN+0x8bc>)
 80054fc:	edd3 8a01 	vldr	s17, [r3, #4]
 8005500:	68b8      	ldr	r0, [r7, #8]
 8005502:	f7fb f821 	bl	8000548 <__aeabi_f2d>
 8005506:	4602      	mov	r2, r0
 8005508:	460b      	mov	r3, r1
 800550a:	a171      	add	r1, pc, #452	; (adr r1, 80056d0 <realMODN+0x8b0>)
 800550c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005510:	f7fa feba 	bl	8000288 <__aeabi_dsub>
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	4610      	mov	r0, r2
 800551a:	4619      	mov	r1, r3
 800551c:	f7fb fb64 	bl	8000be8 <__aeabi_d2f>
 8005520:	4603      	mov	r3, r0
 8005522:	ee00 3a10 	vmov	s0, r3
 8005526:	f018 fe65 	bl	801e1f4 <sinf>
 800552a:	eef0 7a40 	vmov.f32	s15, s0
 800552e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8005532:	ee38 7a27 	vadd.f32	s14, s16, s15
 8005536:	4b69      	ldr	r3, [pc, #420]	; (80056dc <realMODN+0x8bc>)
 8005538:	edd3 6a02 	vldr	s13, [r3, #8]
 800553c:	4b67      	ldr	r3, [pc, #412]	; (80056dc <realMODN+0x8bc>)
 800553e:	edd3 7a08 	vldr	s15, [r3, #32]
 8005542:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005546:	ee37 7a67 	vsub.f32	s14, s14, s15
 800554a:	4b64      	ldr	r3, [pc, #400]	; (80056dc <realMODN+0x8bc>)
 800554c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005550:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005554:	4b61      	ldr	r3, [pc, #388]	; (80056dc <realMODN+0x8bc>)
 8005556:	edc3 7a04 	vstr	s15, [r3, #16]
				MODN.vel3 = MODN.x_vel*cosf(2.3562-realZrad) + MODN.y_vel*sinf(2.3562-realZrad) + MODN.w_vel*MODN.d - MODN.imuFeedback;
 800555a:	4b60      	ldr	r3, [pc, #384]	; (80056dc <realMODN+0x8bc>)
 800555c:	ed93 8a00 	vldr	s16, [r3]
 8005560:	68b8      	ldr	r0, [r7, #8]
 8005562:	f7fa fff1 	bl	8000548 <__aeabi_f2d>
 8005566:	4602      	mov	r2, r0
 8005568:	460b      	mov	r3, r1
 800556a:	a159      	add	r1, pc, #356	; (adr r1, 80056d0 <realMODN+0x8b0>)
 800556c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005570:	f7fa fe8a 	bl	8000288 <__aeabi_dsub>
 8005574:	4602      	mov	r2, r0
 8005576:	460b      	mov	r3, r1
 8005578:	4610      	mov	r0, r2
 800557a:	4619      	mov	r1, r3
 800557c:	f7fb fb34 	bl	8000be8 <__aeabi_d2f>
 8005580:	4603      	mov	r3, r0
 8005582:	ee00 3a10 	vmov	s0, r3
 8005586:	f018 fded 	bl	801e164 <cosf>
 800558a:	eef0 7a40 	vmov.f32	s15, s0
 800558e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005592:	4b52      	ldr	r3, [pc, #328]	; (80056dc <realMODN+0x8bc>)
 8005594:	edd3 8a01 	vldr	s17, [r3, #4]
 8005598:	68b8      	ldr	r0, [r7, #8]
 800559a:	f7fa ffd5 	bl	8000548 <__aeabi_f2d>
 800559e:	4602      	mov	r2, r0
 80055a0:	460b      	mov	r3, r1
 80055a2:	a14b      	add	r1, pc, #300	; (adr r1, 80056d0 <realMODN+0x8b0>)
 80055a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055a8:	f7fa fe6e 	bl	8000288 <__aeabi_dsub>
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	4610      	mov	r0, r2
 80055b2:	4619      	mov	r1, r3
 80055b4:	f7fb fb18 	bl	8000be8 <__aeabi_d2f>
 80055b8:	4603      	mov	r3, r0
 80055ba:	ee00 3a10 	vmov	s0, r3
 80055be:	f018 fe19 	bl	801e1f4 <sinf>
 80055c2:	eef0 7a40 	vmov.f32	s15, s0
 80055c6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80055ca:	ee38 7a27 	vadd.f32	s14, s16, s15
 80055ce:	4b43      	ldr	r3, [pc, #268]	; (80056dc <realMODN+0x8bc>)
 80055d0:	edd3 6a02 	vldr	s13, [r3, #8]
 80055d4:	4b41      	ldr	r3, [pc, #260]	; (80056dc <realMODN+0x8bc>)
 80055d6:	edd3 7a08 	vldr	s15, [r3, #32]
 80055da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055e2:	4b3e      	ldr	r3, [pc, #248]	; (80056dc <realMODN+0x8bc>)
 80055e4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80055e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055ec:	4b3b      	ldr	r3, [pc, #236]	; (80056dc <realMODN+0x8bc>)
 80055ee:	edc3 7a05 	vstr	s15, [r3, #20]
				MODN.vel4 = MODN.x_vel*cosf(0.7854-realZrad) + MODN.y_vel*sinf(0.7854-realZrad) - MODN.w_vel*MODN.d + MODN.imuFeedback;
 80055f2:	4b3a      	ldr	r3, [pc, #232]	; (80056dc <realMODN+0x8bc>)
 80055f4:	ed93 8a00 	vldr	s16, [r3]
 80055f8:	68b8      	ldr	r0, [r7, #8]
 80055fa:	f7fa ffa5 	bl	8000548 <__aeabi_f2d>
 80055fe:	4602      	mov	r2, r0
 8005600:	460b      	mov	r3, r1
 8005602:	a131      	add	r1, pc, #196	; (adr r1, 80056c8 <realMODN+0x8a8>)
 8005604:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005608:	f7fa fe3e 	bl	8000288 <__aeabi_dsub>
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	4610      	mov	r0, r2
 8005612:	4619      	mov	r1, r3
 8005614:	f7fb fae8 	bl	8000be8 <__aeabi_d2f>
 8005618:	4603      	mov	r3, r0
 800561a:	ee00 3a10 	vmov	s0, r3
 800561e:	f018 fda1 	bl	801e164 <cosf>
 8005622:	eef0 7a40 	vmov.f32	s15, s0
 8005626:	ee28 8a27 	vmul.f32	s16, s16, s15
 800562a:	4b2c      	ldr	r3, [pc, #176]	; (80056dc <realMODN+0x8bc>)
 800562c:	edd3 8a01 	vldr	s17, [r3, #4]
 8005630:	68b8      	ldr	r0, [r7, #8]
 8005632:	f7fa ff89 	bl	8000548 <__aeabi_f2d>
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	a123      	add	r1, pc, #140	; (adr r1, 80056c8 <realMODN+0x8a8>)
 800563c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005640:	f7fa fe22 	bl	8000288 <__aeabi_dsub>
 8005644:	4602      	mov	r2, r0
 8005646:	460b      	mov	r3, r1
 8005648:	4610      	mov	r0, r2
 800564a:	4619      	mov	r1, r3
 800564c:	f7fb facc 	bl	8000be8 <__aeabi_d2f>
 8005650:	4603      	mov	r3, r0
 8005652:	ee00 3a10 	vmov	s0, r3
 8005656:	f018 fdcd 	bl	801e1f4 <sinf>
 800565a:	eef0 7a40 	vmov.f32	s15, s0
 800565e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8005662:	ee38 7a27 	vadd.f32	s14, s16, s15
 8005666:	4b1d      	ldr	r3, [pc, #116]	; (80056dc <realMODN+0x8bc>)
 8005668:	edd3 6a02 	vldr	s13, [r3, #8]
 800566c:	4b1b      	ldr	r3, [pc, #108]	; (80056dc <realMODN+0x8bc>)
 800566e:	edd3 7a08 	vldr	s15, [r3, #32]
 8005672:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005676:	ee37 7a67 	vsub.f32	s14, s14, s15
 800567a:	4b18      	ldr	r3, [pc, #96]	; (80056dc <realMODN+0x8bc>)
 800567c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005684:	4b15      	ldr	r3, [pc, #84]	; (80056dc <realMODN+0x8bc>)
 8005686:	edc3 7a06 	vstr	s15, [r3, #24]
				VESCPIDProcess(MODN.vel1, MODN.vel2, MODN.vel3, MODN.vel4);
 800568a:	4b14      	ldr	r3, [pc, #80]	; (80056dc <realMODN+0x8bc>)
 800568c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005690:	4b12      	ldr	r3, [pc, #72]	; (80056dc <realMODN+0x8bc>)
 8005692:	ed93 7a04 	vldr	s14, [r3, #16]
 8005696:	4b11      	ldr	r3, [pc, #68]	; (80056dc <realMODN+0x8bc>)
 8005698:	edd3 6a05 	vldr	s13, [r3, #20]
 800569c:	4b0f      	ldr	r3, [pc, #60]	; (80056dc <realMODN+0x8bc>)
 800569e:	ed93 6a06 	vldr	s12, [r3, #24]
 80056a2:	eef0 1a46 	vmov.f32	s3, s12
 80056a6:	eeb0 1a66 	vmov.f32	s2, s13
 80056aa:	eef0 0a47 	vmov.f32	s1, s14
 80056ae:	eeb0 0a67 	vmov.f32	s0, s15
 80056b2:	f008 fb9d 	bl	800ddf0 <VESCPIDProcess>
				hb_count = HAL_GetTick();
 80056b6:	f009 f83b 	bl	800e730 <HAL_GetTick>
 80056ba:	4603      	mov	r3, r0
 80056bc:	461a      	mov	r2, r3
 80056be:	4b08      	ldr	r3, [pc, #32]	; (80056e0 <realMODN+0x8c0>)
 80056c0:	601a      	str	r2, [r3, #0]
}
 80056c2:	e0e6      	b.n	8005892 <realMODN+0xa72>
 80056c4:	f3af 8000 	nop.w
 80056c8:	2e48e8a7 	.word	0x2e48e8a7
 80056cc:	3fe921ff 	.word	0x3fe921ff
 80056d0:	62b6ae7d 	.word	0x62b6ae7d
 80056d4:	4002d97f 	.word	0x4002d97f
 80056d8:	20006c44 	.word	0x20006c44
 80056dc:	20006a2c 	.word	0x20006a2c
 80056e0:	2000976c 	.word	0x2000976c
			else if (MODN.base == MODN_TRI_OMNI){
 80056e4:	4b72      	ldr	r3, [pc, #456]	; (80058b0 <realMODN+0xa90>)
 80056e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	f040 80d1 	bne.w	8005892 <realMODN+0xa72>
				MODN.vel3 = MODN.y_vel*sinf(-realZrad) 		 + MODN.x_vel*cosf(-realZrad)  	    + MODN.w_vel*MODN.d;
 80056f0:	4b6f      	ldr	r3, [pc, #444]	; (80058b0 <realMODN+0xa90>)
 80056f2:	ed93 8a01 	vldr	s16, [r3, #4]
 80056f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80056fa:	eef1 7a67 	vneg.f32	s15, s15
 80056fe:	eeb0 0a67 	vmov.f32	s0, s15
 8005702:	f018 fd77 	bl	801e1f4 <sinf>
 8005706:	eef0 7a40 	vmov.f32	s15, s0
 800570a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800570e:	4b68      	ldr	r3, [pc, #416]	; (80058b0 <realMODN+0xa90>)
 8005710:	edd3 8a00 	vldr	s17, [r3]
 8005714:	edd7 7a02 	vldr	s15, [r7, #8]
 8005718:	eef1 7a67 	vneg.f32	s15, s15
 800571c:	eeb0 0a67 	vmov.f32	s0, s15
 8005720:	f018 fd20 	bl	801e164 <cosf>
 8005724:	eef0 7a40 	vmov.f32	s15, s0
 8005728:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800572c:	ee38 7a27 	vadd.f32	s14, s16, s15
 8005730:	4b5f      	ldr	r3, [pc, #380]	; (80058b0 <realMODN+0xa90>)
 8005732:	edd3 6a02 	vldr	s13, [r3, #8]
 8005736:	4b5e      	ldr	r3, [pc, #376]	; (80058b0 <realMODN+0xa90>)
 8005738:	edd3 7a08 	vldr	s15, [r3, #32]
 800573c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005744:	4b5a      	ldr	r3, [pc, #360]	; (80058b0 <realMODN+0xa90>)
 8005746:	edc3 7a05 	vstr	s15, [r3, #20]
				MODN.vel1 = MODN.y_vel*sinf(2.0944-realZrad) + MODN.x_vel*cosf(2.0944-realZrad) + MODN.w_vel*MODN.d;
 800574a:	4b59      	ldr	r3, [pc, #356]	; (80058b0 <realMODN+0xa90>)
 800574c:	ed93 8a01 	vldr	s16, [r3, #4]
 8005750:	68b8      	ldr	r0, [r7, #8]
 8005752:	f7fa fef9 	bl	8000548 <__aeabi_f2d>
 8005756:	4602      	mov	r2, r0
 8005758:	460b      	mov	r3, r1
 800575a:	a151      	add	r1, pc, #324	; (adr r1, 80058a0 <realMODN+0xa80>)
 800575c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005760:	f7fa fd92 	bl	8000288 <__aeabi_dsub>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	4610      	mov	r0, r2
 800576a:	4619      	mov	r1, r3
 800576c:	f7fb fa3c 	bl	8000be8 <__aeabi_d2f>
 8005770:	4603      	mov	r3, r0
 8005772:	ee00 3a10 	vmov	s0, r3
 8005776:	f018 fd3d 	bl	801e1f4 <sinf>
 800577a:	eef0 7a40 	vmov.f32	s15, s0
 800577e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005782:	4b4b      	ldr	r3, [pc, #300]	; (80058b0 <realMODN+0xa90>)
 8005784:	edd3 8a00 	vldr	s17, [r3]
 8005788:	68b8      	ldr	r0, [r7, #8]
 800578a:	f7fa fedd 	bl	8000548 <__aeabi_f2d>
 800578e:	4602      	mov	r2, r0
 8005790:	460b      	mov	r3, r1
 8005792:	a143      	add	r1, pc, #268	; (adr r1, 80058a0 <realMODN+0xa80>)
 8005794:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005798:	f7fa fd76 	bl	8000288 <__aeabi_dsub>
 800579c:	4602      	mov	r2, r0
 800579e:	460b      	mov	r3, r1
 80057a0:	4610      	mov	r0, r2
 80057a2:	4619      	mov	r1, r3
 80057a4:	f7fb fa20 	bl	8000be8 <__aeabi_d2f>
 80057a8:	4603      	mov	r3, r0
 80057aa:	ee00 3a10 	vmov	s0, r3
 80057ae:	f018 fcd9 	bl	801e164 <cosf>
 80057b2:	eef0 7a40 	vmov.f32	s15, s0
 80057b6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80057ba:	ee38 7a27 	vadd.f32	s14, s16, s15
 80057be:	4b3c      	ldr	r3, [pc, #240]	; (80058b0 <realMODN+0xa90>)
 80057c0:	edd3 6a02 	vldr	s13, [r3, #8]
 80057c4:	4b3a      	ldr	r3, [pc, #232]	; (80058b0 <realMODN+0xa90>)
 80057c6:	edd3 7a08 	vldr	s15, [r3, #32]
 80057ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057d2:	4b37      	ldr	r3, [pc, #220]	; (80058b0 <realMODN+0xa90>)
 80057d4:	edc3 7a03 	vstr	s15, [r3, #12]
				MODN.vel2 = MODN.y_vel*sinf(1.0472-realZrad) + MODN.x_vel*cosf(1.0472-realZrad) - MODN.w_vel*MODN.d;
 80057d8:	4b35      	ldr	r3, [pc, #212]	; (80058b0 <realMODN+0xa90>)
 80057da:	ed93 8a01 	vldr	s16, [r3, #4]
 80057de:	68b8      	ldr	r0, [r7, #8]
 80057e0:	f7fa feb2 	bl	8000548 <__aeabi_f2d>
 80057e4:	4602      	mov	r2, r0
 80057e6:	460b      	mov	r3, r1
 80057e8:	a12f      	add	r1, pc, #188	; (adr r1, 80058a8 <realMODN+0xa88>)
 80057ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057ee:	f7fa fd4b 	bl	8000288 <__aeabi_dsub>
 80057f2:	4602      	mov	r2, r0
 80057f4:	460b      	mov	r3, r1
 80057f6:	4610      	mov	r0, r2
 80057f8:	4619      	mov	r1, r3
 80057fa:	f7fb f9f5 	bl	8000be8 <__aeabi_d2f>
 80057fe:	4603      	mov	r3, r0
 8005800:	ee00 3a10 	vmov	s0, r3
 8005804:	f018 fcf6 	bl	801e1f4 <sinf>
 8005808:	eef0 7a40 	vmov.f32	s15, s0
 800580c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005810:	4b27      	ldr	r3, [pc, #156]	; (80058b0 <realMODN+0xa90>)
 8005812:	edd3 8a00 	vldr	s17, [r3]
 8005816:	68b8      	ldr	r0, [r7, #8]
 8005818:	f7fa fe96 	bl	8000548 <__aeabi_f2d>
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	a121      	add	r1, pc, #132	; (adr r1, 80058a8 <realMODN+0xa88>)
 8005822:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005826:	f7fa fd2f 	bl	8000288 <__aeabi_dsub>
 800582a:	4602      	mov	r2, r0
 800582c:	460b      	mov	r3, r1
 800582e:	4610      	mov	r0, r2
 8005830:	4619      	mov	r1, r3
 8005832:	f7fb f9d9 	bl	8000be8 <__aeabi_d2f>
 8005836:	4603      	mov	r3, r0
 8005838:	ee00 3a10 	vmov	s0, r3
 800583c:	f018 fc92 	bl	801e164 <cosf>
 8005840:	eef0 7a40 	vmov.f32	s15, s0
 8005844:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8005848:	ee38 7a27 	vadd.f32	s14, s16, s15
 800584c:	4b18      	ldr	r3, [pc, #96]	; (80058b0 <realMODN+0xa90>)
 800584e:	edd3 6a02 	vldr	s13, [r3, #8]
 8005852:	4b17      	ldr	r3, [pc, #92]	; (80058b0 <realMODN+0xa90>)
 8005854:	edd3 7a08 	vldr	s15, [r3, #32]
 8005858:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800585c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005860:	4b13      	ldr	r3, [pc, #76]	; (80058b0 <realMODN+0xa90>)
 8005862:	edc3 7a04 	vstr	s15, [r3, #16]
				VESCPIDProcess(MODN.vel1, MODN.vel2, MODN.vel3, MODN.vel4);
 8005866:	4b12      	ldr	r3, [pc, #72]	; (80058b0 <realMODN+0xa90>)
 8005868:	edd3 7a03 	vldr	s15, [r3, #12]
 800586c:	4b10      	ldr	r3, [pc, #64]	; (80058b0 <realMODN+0xa90>)
 800586e:	ed93 7a04 	vldr	s14, [r3, #16]
 8005872:	4b0f      	ldr	r3, [pc, #60]	; (80058b0 <realMODN+0xa90>)
 8005874:	edd3 6a05 	vldr	s13, [r3, #20]
 8005878:	4b0d      	ldr	r3, [pc, #52]	; (80058b0 <realMODN+0xa90>)
 800587a:	ed93 6a06 	vldr	s12, [r3, #24]
 800587e:	eef0 1a46 	vmov.f32	s3, s12
 8005882:	eeb0 1a66 	vmov.f32	s2, s13
 8005886:	eef0 0a47 	vmov.f32	s1, s14
 800588a:	eeb0 0a67 	vmov.f32	s0, s15
 800588e:	f008 faaf 	bl	800ddf0 <VESCPIDProcess>
}
 8005892:	bf00      	nop
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	ecbd 8b02 	vpop	{d8}
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	c985f06f 	.word	0xc985f06f
 80058a4:	4000c154 	.word	0x4000c154
 80058a8:	c985f06f 	.word	0xc985f06f
 80058ac:	3ff0c154 	.word	0x3ff0c154
 80058b0:	20006a2c 	.word	0x20006a2c

080058b4 <PIDSourceInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void PIDSourceInit (float *in, float *out, PID_t *pid)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
	pid->error = in;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	605a      	str	r2, [r3, #4]
	pid->out_put = out;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	609a      	str	r2, [r3, #8]
}
 80058cc:	bf00      	nop
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <PIDGainInit>:

void PIDGainInit(float ts, float sat, float ke, float ku, float kp, float ki,
									float kd, float kn, PID_t *pid)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b08a      	sub	sp, #40	; 0x28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80058e2:	edc7 0a08 	vstr	s1, [r7, #32]
 80058e6:	ed87 1a07 	vstr	s2, [r7, #28]
 80058ea:	edc7 1a06 	vstr	s3, [r7, #24]
 80058ee:	ed87 2a05 	vstr	s4, [r7, #20]
 80058f2:	edc7 2a04 	vstr	s5, [r7, #16]
 80058f6:	ed87 3a03 	vstr	s6, [r7, #12]
 80058fa:	edc7 3a02 	vstr	s7, [r7, #8]
 80058fe:	6078      	str	r0, [r7, #4]
	pid->K[TS] = ts; // Sample Time
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005904:	60da      	str	r2, [r3, #12]
	pid->K[SAT] = sat; // Reached saturation or not
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a3a      	ldr	r2, [r7, #32]
 800590a:	611a      	str	r2, [r3, #16]
	pid->K[KE] = ke; // Error gain
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	69fa      	ldr	r2, [r7, #28]
 8005910:	615a      	str	r2, [r3, #20]
	pid->K[KU] = ku; // Output gain
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	619a      	str	r2, [r3, #24]
	pid->K[KP] = kp; // Proportional gain
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	61da      	str	r2, [r3, #28]
	pid->K[KI] = ki; // Integral gain
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	621a      	str	r2, [r3, #32]
	pid->K[KD] = kd; // Derivative gain
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	625a      	str	r2, [r3, #36]	; 0x24
	pid->K[KN] = kn; // Low pass filter
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	629a      	str	r2, [r3, #40]	; 0x28
	PIDCoeffCalc(pid);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f81b 	bl	800596c <PIDCoeffCalc>
//	pid->K[D_1] = (((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) / (pid->K[KN] * pid->K[TS] + 2);
//	} else {
//		pid->pd_flag = 0;
//		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0;
//	}
}
 8005936:	bf00      	nop
 8005938:	3728      	adds	r7, #40	; 0x28
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <PIDGainSet>:

void PIDGainSet (unsigned char a, float value, PID_t *pid)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b084      	sub	sp, #16
 8005942:	af00      	add	r7, sp, #0
 8005944:	4603      	mov	r3, r0
 8005946:	ed87 0a02 	vstr	s0, [r7, #8]
 800594a:	6079      	str	r1, [r7, #4]
 800594c:	73fb      	strb	r3, [r7, #15]
	pid->K[a] = value;
 800594e:	7bfb      	ldrb	r3, [r7, #15]
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	3302      	adds	r3, #2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	3304      	adds	r3, #4
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	601a      	str	r2, [r3, #0]
	PIDCoeffCalc(pid);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f804 	bl	800596c <PIDCoeffCalc>
}
 8005964:	bf00      	nop
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <PIDCoeffCalc>:

void PIDCoeffCalc (PID_t *pid)
{
 800596c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005970:	b082      	sub	sp, #8
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
	if (pid->K[KI] != 0){
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	edd3 7a08 	vldr	s15, [r3, #32]
 800597c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005984:	d013      	beq.n	80059ae <PIDCoeffCalc+0x42>
		pid->K[B_0] = (pid->K[TS] * pid->K[KI]) * 0.5;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	ed93 7a03 	vldr	s14, [r3, #12]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	edd3 7a08 	vldr	s15, [r3, #32]
 8005992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005996:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800599a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		pid->K[B_1] = pid->K[B_0];
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	631a      	str	r2, [r3, #48]	; 0x30
 80059ac:	e007      	b.n	80059be <PIDCoeffCalc+0x52>
	} else {
		pid->K[B_0] = pid->K[B_1] = 0;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f04f 0200 	mov.w	r2, #0
 80059b4:	631a      	str	r2, [r3, #48]	; 0x30
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	edd3 7a07 	vldr	s15, [r3, #28]
 80059c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80059c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059cc:	d108      	bne.n	80059e0 <PIDCoeffCalc+0x74>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80059d4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80059d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059dc:	f000 80ef 	beq.w	8005bbe <PIDCoeffCalc+0x252>
	pid->K[C_1] = -((pid->K[TS] * pid->K[KN] - 2.0) / (pid->K[TS] * pid->K[KN] + 2.0));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	ed93 7a03 	vldr	s14, [r3, #12]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80059ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059f0:	ee17 0a90 	vmov	r0, s15
 80059f4:	f7fa fda8 	bl	8000548 <__aeabi_f2d>
 80059f8:	f04f 0200 	mov.w	r2, #0
 80059fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a00:	f7fa fc42 	bl	8000288 <__aeabi_dsub>
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	4614      	mov	r4, r2
 8005a0a:	461d      	mov	r5, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	ed93 7a03 	vldr	s14, [r3, #12]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a1c:	ee17 0a90 	vmov	r0, s15
 8005a20:	f7fa fd92 	bl	8000548 <__aeabi_f2d>
 8005a24:	f04f 0200 	mov.w	r2, #0
 8005a28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a2c:	f7fa fc2e 	bl	800028c <__adddf3>
 8005a30:	4602      	mov	r2, r0
 8005a32:	460b      	mov	r3, r1
 8005a34:	4620      	mov	r0, r4
 8005a36:	4629      	mov	r1, r5
 8005a38:	f7fa ff08 	bl	800084c <__aeabi_ddiv>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	460b      	mov	r3, r1
 8005a40:	4610      	mov	r0, r2
 8005a42:	4619      	mov	r1, r3
 8005a44:	f7fb f8d0 	bl	8000be8 <__aeabi_d2f>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	ee07 3a90 	vmov	s15, r3
 8005a4e:	eef1 7a67 	vneg.f32	s15, s15
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid->K[D_0] = (pid->K[KP] + ((2.0 * pid->K[KD] * pid->K[KN]) / (pid->K[KN] * pid->K[TS] + 2.0)));
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fa fd73 	bl	8000548 <__aeabi_f2d>
 8005a62:	4604      	mov	r4, r0
 8005a64:	460d      	mov	r5, r1
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fa fd6c 	bl	8000548 <__aeabi_f2d>
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	f7fa fc0a 	bl	800028c <__adddf3>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4690      	mov	r8, r2
 8005a7e:	4699      	mov	r9, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7fa fd5f 	bl	8000548 <__aeabi_f2d>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	4640      	mov	r0, r8
 8005a90:	4649      	mov	r1, r9
 8005a92:	f7fa fdb1 	bl	80005f8 <__aeabi_dmul>
 8005a96:	4602      	mov	r2, r0
 8005a98:	460b      	mov	r3, r1
 8005a9a:	4690      	mov	r8, r2
 8005a9c:	4699      	mov	r9, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	edd3 7a03 	vldr	s15, [r3, #12]
 8005aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aae:	ee17 0a90 	vmov	r0, s15
 8005ab2:	f7fa fd49 	bl	8000548 <__aeabi_f2d>
 8005ab6:	f04f 0200 	mov.w	r2, #0
 8005aba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005abe:	f7fa fbe5 	bl	800028c <__adddf3>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	4640      	mov	r0, r8
 8005ac8:	4649      	mov	r1, r9
 8005aca:	f7fa febf 	bl	800084c <__aeabi_ddiv>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	4629      	mov	r1, r5
 8005ad6:	f7fa fbd9 	bl	800028c <__adddf3>
 8005ada:	4602      	mov	r2, r0
 8005adc:	460b      	mov	r3, r1
 8005ade:	4610      	mov	r0, r2
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	f7fb f881 	bl	8000be8 <__aeabi_d2f>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	639a      	str	r2, [r3, #56]	; 0x38
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	edd3 7a03 	vldr	s15, [r3, #12]
 8005af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005afc:	ee17 0a90 	vmov	r0, s15
 8005b00:	f7fa fd22 	bl	8000548 <__aeabi_f2d>
 8005b04:	f04f 0200 	mov.w	r2, #0
 8005b08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b0c:	f7fa fbbc 	bl	8000288 <__aeabi_dsub>
 8005b10:	4602      	mov	r2, r0
 8005b12:	460b      	mov	r3, r1
 8005b14:	4614      	mov	r4, r2
 8005b16:	461d      	mov	r5, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7fa fd13 	bl	8000548 <__aeabi_f2d>
 8005b22:	4602      	mov	r2, r0
 8005b24:	460b      	mov	r3, r1
 8005b26:	4620      	mov	r0, r4
 8005b28:	4629      	mov	r1, r5
 8005b2a:	f7fa fd65 	bl	80005f8 <__aeabi_dmul>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	4614      	mov	r4, r2
 8005b34:	461d      	mov	r5, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fa fd04 	bl	8000548 <__aeabi_f2d>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	f7fa fba2 	bl	800028c <__adddf3>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	4690      	mov	r8, r2
 8005b4e:	4699      	mov	r9, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fa fcf7 	bl	8000548 <__aeabi_f2d>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	4640      	mov	r0, r8
 8005b60:	4649      	mov	r1, r9
 8005b62:	f7fa fd49 	bl	80005f8 <__aeabi_dmul>
 8005b66:	4602      	mov	r2, r0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	4629      	mov	r1, r5
 8005b6e:	f7fa fb8b 	bl	8000288 <__aeabi_dsub>
 8005b72:	4602      	mov	r2, r0
 8005b74:	460b      	mov	r3, r1
 8005b76:	4614      	mov	r4, r2
 8005b78:	461d      	mov	r5, r3
					(pid->K[KN] * pid->K[TS] + 2.0));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	edd3 7a03 	vldr	s15, [r3, #12]
 8005b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b8a:	ee17 0a90 	vmov	r0, s15
 8005b8e:	f7fa fcdb 	bl	8000548 <__aeabi_f2d>
 8005b92:	f04f 0200 	mov.w	r2, #0
 8005b96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b9a:	f7fa fb77 	bl	800028c <__adddf3>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	4629      	mov	r1, r5
 8005ba6:	f7fa fe51 	bl	800084c <__aeabi_ddiv>
 8005baa:	4602      	mov	r2, r0
 8005bac:	460b      	mov	r3, r1
 8005bae:	4610      	mov	r0, r2
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	f7fb f819 	bl	8000be8 <__aeabi_d2f>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	63da      	str	r2, [r3, #60]	; 0x3c
 8005bbc:	e00c      	b.n	8005bd8 <PIDCoeffCalc+0x26c>
	} else {
		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0.0;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f04f 0200 	mov.w	r2, #0
 8005bc4:	63da      	str	r2, [r3, #60]	; 0x3c
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	639a      	str	r2, [r3, #56]	; 0x38
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8005bd6:	bf00      	nop
 8005bd8:	bf00      	nop
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08005be2 <PIDDelayInit>:

void PIDDelayInit (PID_t *pid)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b083      	sub	sp, #12
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
//	unsigned char i;
//	for(i = 0; i < 2; i++){
//		pid->i_delay[i] = 0;
//		pid->d_delay[i] = 0;
//	}
	pid->i_delay[0] = 0.0;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f04f 0200 	mov.w	r2, #0
 8005bf0:	641a      	str	r2, [r3, #64]	; 0x40
	pid->i_delay[1] = 0.0;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f04f 0200 	mov.w	r2, #0
 8005bf8:	645a      	str	r2, [r3, #68]	; 0x44
	pid->d_delay[0] = 0.0;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f04f 0200 	mov.w	r2, #0
 8005c00:	649a      	str	r2, [r3, #72]	; 0x48
	pid->d_delay[1] = 0.0;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f04f 0200 	mov.w	r2, #0
 8005c08:	64da      	str	r2, [r3, #76]	; 0x4c
	pid->s_delay = 0.0;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f04f 0200 	mov.w	r2, #0
 8005c10:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005c12:	bf00      	nop
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <PID>:
{
	return !pid->s_flag;	/* 1 is not saturated, 0 is saturated */
}

void PID (PID_t *pid)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b087      	sub	sp, #28
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
	/* Error ******************************************************************/
	float input_buffer, error;

	input_buffer = *pid->error;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	613b      	str	r3, [r7, #16]
	error = input_buffer * pid->K[KE];
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	edd3 7a05 	vldr	s15, [r3, #20]
 8005c34:	ed97 7a04 	vldr	s14, [r7, #16]
 8005c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c3c:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Reset previous sum *****************************************************/
	pid->s_delay = 0;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f04f 0200 	mov.w	r2, #0
 8005c46:	651a      	str	r2, [r3, #80]	; 0x50

	/* I algorithm ************************************************************/

	if (pid->K[KI] != 0){
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	edd3 7a08 	vldr	s15, [r3, #32]
 8005c4e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c56:	d033      	beq.n	8005cc0 <PID+0xa2>
		if (pid->s_flag){     //flag only, so 0 or 1...
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00a      	beq.n	8005c7c <PID+0x5e>
			pid->i_delay[1] = error + pid->i_delay[0];      //it is not saturated, so it will continue add error
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8005c6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 8005c7a:	e003      	b.n	8005c84 <PID+0x66>
		} else {
			pid->i_delay[1] = pid->i_delay[0];				//it is saturated already, so all pid->i_delay will be constant
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	645a      	str	r2, [r3, #68]	; 0x44
		}
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005c96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c9a:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ (pid->K[B_1] * pid->i_delay[0]);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005caa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cae:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		pid->i_delay[0] = pid->i_delay[1];
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	641a      	str	r2, [r3, #64]	; 0x40

// since final output is addition of 2 outputs, so pid->s_delay will combine with the equation in document..

	/* PD algorithm ***********************************************************/

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){       				// i has change behind KP to KD..
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	edd3 7a07 	vldr	s15, [r3, #28]
 8005cc6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cce:	d107      	bne.n	8005ce0 <PID+0xc2>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005cd6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cde:	d02c      	beq.n	8005d3a <PID+0x11c>
		pid->d_delay[1] = error + pid->K[C_1] * pid->d_delay[0];  		//pid->d_delay[0] is old value,pid->d_delay[1]is new value,so both are different values
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8005cec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005cf0:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8005d10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d14:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ pid->K[D_1] * pid->d_delay[0];
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8005d24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d28:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		pid->d_delay[0] = pid->d_delay[1];
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	649a      	str	r2, [r3, #72]	; 0x48
	}

	/* Saturation element *****************************************************/
	float output_buffer, output;

	output_buffer = pid->s_delay;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d3e:	60bb      	str	r3, [r7, #8]
	if (output_buffer > pid->K[SAT]){
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	edd3 7a04 	vldr	s15, [r3, #16]
 8005d46:	ed97 7a02 	vldr	s14, [r7, #8]
 8005d4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d52:	dd0f      	ble.n	8005d74 <PID+0x156>
		output = (pid->K[SAT] * pid->K[KU]);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	ed93 7a04 	vldr	s14, [r3, #16]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005d60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d64:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	7813      	ldrb	r3, [r2, #0]
 8005d6c:	f36f 0300 	bfc	r3, #0, #1
 8005d70:	7013      	strb	r3, [r2, #0]
 8005d72:	e02b      	b.n	8005dcc <PID+0x1ae>
	}else if (output_buffer < -(pid->K[SAT])){
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	edd3 7a04 	vldr	s15, [r3, #16]
 8005d7a:	eef1 7a67 	vneg.f32	s15, s15
 8005d7e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005d82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d8a:	d511      	bpl.n	8005db0 <PID+0x192>
		output = -(pid->K[SAT] * pid->K[KU]);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	ed93 7a04 	vldr	s14, [r3, #16]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	edd3 7a06 	vldr	s15, [r3, #24]
 8005d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d9c:	eef1 7a67 	vneg.f32	s15, s15
 8005da0:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	7813      	ldrb	r3, [r2, #0]
 8005da8:	f36f 0300 	bfc	r3, #0, #1
 8005dac:	7013      	strb	r3, [r2, #0]
 8005dae:	e00d      	b.n	8005dcc <PID+0x1ae>
	}else {
		output = (output_buffer * pid->K[KU]);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	edd3 7a06 	vldr	s15, [r3, #24]
 8005db6:	ed97 7a02 	vldr	s14, [r7, #8]
 8005dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dbe:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 1;							/* Not saturated */
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	7813      	ldrb	r3, [r2, #0]
 8005dc6:	f043 0301 	orr.w	r3, r3, #1
 8005dca:	7013      	strb	r3, [r2, #0]
	}

	/* Output *****************************************************************/
	*pid->out_put = output;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	601a      	str	r2, [r3, #0]
}
 8005dd4:	bf00      	nop
 8005dd6:	371c      	adds	r7, #28
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <PPInit>:
#include "../adapter.h"

void PPInit(uint8_t base,float *qeix, float *qeiy, float*imu,PathPlan_t *pp)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60b9      	str	r1, [r7, #8]
 8005de8:	607a      	str	r2, [r7, #4]
 8005dea:	603b      	str	r3, [r7, #0]
 8005dec:	4603      	mov	r3, r0
 8005dee:	73fb      	strb	r3, [r7, #15]
	pp->base_shape=base;
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	7bfa      	ldrb	r2, [r7, #15]
 8005df4:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
	pp->qeix = qeix;
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	601a      	str	r2, [r3, #0]
	pp->qeiy = qeiy;
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	605a      	str	r2, [r3, #4]
	pp->yaw = imu;
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	609a      	str	r2, [r3, #8]
	pp->point_start=1;
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8005e10:	f043 0302 	orr.w	r3, r3, #2
 8005e14:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538

	PIDSourceInit(&(pp->error_x), &(pp->outx), &(pp->x));
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	f503 702c 	add.w	r0, r3, #688	; 0x2b0
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	f503 712f 	add.w	r1, r3, #700	; 0x2bc
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	f7ff fd42 	bl	80058b4 <PIDSourceInit>
	PIDGainInit(0.005, 1.0, 1.0, 1.0, 1.0, 0.0, 0.4, 30.0, &(pp->x));
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005e36:	4618      	mov	r0, r3
 8005e38:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8005e3c:	ed9f 3a49 	vldr	s6, [pc, #292]	; 8005f64 <PPInit+0x184>
 8005e40:	eddf 2a49 	vldr	s5, [pc, #292]	; 8005f68 <PPInit+0x188>
 8005e44:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8005e48:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8005e4c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005e50:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005e54:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8005f6c <PPInit+0x18c>
 8005e58:	f7ff fd3e 	bl	80058d8 <PIDGainInit>
	PIDDelayInit(&(pp->x));
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7ff febd 	bl	8005be2 <PIDDelayInit>

	PIDSourceInit(&(pp->error_y), &(pp->outy), &(pp->y));
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	f7ff fd1a 	bl	80058b4 <PIDSourceInit>
	PIDGainInit(0.005, 1.0, 1.0, 1.0, 1.0, 0.0, 0.4, 30.0, &(pp->y));
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005e86:	4618      	mov	r0, r3
 8005e88:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8005e8c:	ed9f 3a35 	vldr	s6, [pc, #212]	; 8005f64 <PPInit+0x184>
 8005e90:	eddf 2a35 	vldr	s5, [pc, #212]	; 8005f68 <PPInit+0x188>
 8005e94:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8005e98:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8005e9c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005ea0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005ea4:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8005f6c <PPInit+0x18c>
 8005ea8:	f7ff fd16 	bl	80058d8 <PIDGainInit>
	PIDDelayInit(&(pp->y));
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7ff fe95 	bl	8005be2 <PIDDelayInit>

	PIDSourceInit(&(pp->error_z), &(pp->outz), &(pp->z));
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	f503 702e 	add.w	r0, r3, #696	; 0x2b8
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	f503 7131 	add.w	r1, r3, #708	; 0x2c4
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005eca:	461a      	mov	r2, r3
 8005ecc:	f7ff fcf2 	bl	80058b4 <PIDSourceInit>
	PIDGainInit(0.005, 1.0, (1.0 / 30.0), 0.5, 5.0, 0.2, 0.2, 30.0, &(pp->z));
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8005edc:	ed9f 3a24 	vldr	s6, [pc, #144]	; 8005f70 <PPInit+0x190>
 8005ee0:	eddf 2a23 	vldr	s5, [pc, #140]	; 8005f70 <PPInit+0x190>
 8005ee4:	eeb1 2a04 	vmov.f32	s4, #20	; 0x40a00000  5.0
 8005ee8:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8005eec:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8005f74 <PPInit+0x194>
 8005ef0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005ef4:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8005f6c <PPInit+0x18c>
 8005ef8:	f7ff fcee 	bl	80058d8 <PIDGainInit>
	PIDDelayInit(&(pp->z));
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7ff fe6d 	bl	8005be2 <PIDDelayInit>

	pp->tol_xy=0.20;
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	4a1b      	ldr	r2, [pc, #108]	; (8005f78 <PPInit+0x198>)
 8005f0c:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	pp->tol_z=2.0;
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005f16:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc

	pp->tol_xy_crv= 0.6;
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	4a17      	ldr	r2, [pc, #92]	; (8005f7c <PPInit+0x19c>)
 8005f1e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

	pp->f_tol_xy=0.06;
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	4a16      	ldr	r2, [pc, #88]	; (8005f80 <PPInit+0x1a0>)
 8005f26:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
	pp->f_tol_z=1.0;
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005f30:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	pp->yaw_offset=*(pp->yaw);
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	625a      	str	r2, [r3, #36]	; 0x24
	pp->prev_real_z = 0;
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	f04f 0200 	mov.w	r2, #0
 8005f44:	615a      	str	r2, [r3, #20]
	pp->real_z = 0;
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	f04f 0200 	mov.w	r2, #0
 8005f4c:	611a      	str	r2, [r3, #16]
	pp->rotate_only = 0;
 8005f4e:	69ba      	ldr	r2, [r7, #24]
 8005f50:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8005f54:	f36f 1304 	bfc	r3, #4, #1
 8005f58:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
}
 8005f5c:	bf00      	nop
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	3ecccccd 	.word	0x3ecccccd
 8005f68:	00000000 	.word	0x00000000
 8005f6c:	3ba3d70a 	.word	0x3ba3d70a
 8005f70:	3e4ccccd 	.word	0x3e4ccccd
 8005f74:	3d088889 	.word	0x3d088889
 8005f78:	3e4ccccd 	.word	0x3e4ccccd
 8005f7c:	3f19999a 	.word	0x3f19999a
 8005f80:	3d75c28f 	.word	0x3d75c28f

08005f84 <PP_PIDPathSet>:

void PP_PIDPathSet(float kp, float ki, float kd, PathPlan_t *pp)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	ed87 0a03 	vstr	s0, [r7, #12]
 8005f8e:	edc7 0a02 	vstr	s1, [r7, #8]
 8005f92:	ed87 1a01 	vstr	s2, [r7, #4]
 8005f96:	6038      	str	r0, [r7, #0]
	pp->kp[0]=kp;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	pp->ki[0]=ki;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	pp->kd[0]=kd;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c

	PIDGainSet(KP,kp,&(pp->x));
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	ed97 0a03 	vldr	s0, [r7, #12]
 8005fbc:	2004      	movs	r0, #4
 8005fbe:	f7ff fcbe 	bl	800593e <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->x));
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005fc8:	4619      	mov	r1, r3
 8005fca:	ed97 0a02 	vldr	s0, [r7, #8]
 8005fce:	2005      	movs	r0, #5
 8005fd0:	f7ff fcb5 	bl	800593e <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->x));
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005fda:	4619      	mov	r1, r3
 8005fdc:	ed97 0a01 	vldr	s0, [r7, #4]
 8005fe0:	2006      	movs	r0, #6
 8005fe2:	f7ff fcac 	bl	800593e <PIDGainSet>

	PIDGainSet(KP,kp,&(pp->y));
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005fec:	4619      	mov	r1, r3
 8005fee:	ed97 0a03 	vldr	s0, [r7, #12]
 8005ff2:	2004      	movs	r0, #4
 8005ff4:	f7ff fca3 	bl	800593e <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->y));
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005ffe:	4619      	mov	r1, r3
 8006000:	ed97 0a02 	vldr	s0, [r7, #8]
 8006004:	2005      	movs	r0, #5
 8006006:	f7ff fc9a 	bl	800593e <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->y));
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006010:	4619      	mov	r1, r3
 8006012:	ed97 0a01 	vldr	s0, [r7, #4]
 8006016:	2006      	movs	r0, #6
 8006018:	f7ff fc91 	bl	800593e <PIDGainSet>
}
 800601c:	bf00      	nop
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <PP_PIDZSet>:

void PP_PIDZSet(float kp, float ki, float kd, float ku, PathPlan_t *pp){
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	ed87 0a05 	vstr	s0, [r7, #20]
 800602e:	edc7 0a04 	vstr	s1, [r7, #16]
 8006032:	ed87 1a03 	vstr	s2, [r7, #12]
 8006036:	edc7 1a02 	vstr	s3, [r7, #8]
 800603a:	6078      	str	r0, [r7, #4]

	PIDGainSet(KP,kp,&(pp->z));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8006042:	4619      	mov	r1, r3
 8006044:	ed97 0a05 	vldr	s0, [r7, #20]
 8006048:	2004      	movs	r0, #4
 800604a:	f7ff fc78 	bl	800593e <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->z));
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8006054:	4619      	mov	r1, r3
 8006056:	ed97 0a04 	vldr	s0, [r7, #16]
 800605a:	2005      	movs	r0, #5
 800605c:	f7ff fc6f 	bl	800593e <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->z));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8006066:	4619      	mov	r1, r3
 8006068:	ed97 0a03 	vldr	s0, [r7, #12]
 800606c:	2006      	movs	r0, #6
 800606e:	f7ff fc66 	bl	800593e <PIDGainSet>
	PIDGainSet(KU,ku,&(pp->z));
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8006078:	4619      	mov	r1, r3
 800607a:	ed97 0a02 	vldr	s0, [r7, #8]
 800607e:	2003      	movs	r0, #3
 8006080:	f7ff fc5d 	bl	800593e <PIDGainSet>
	pp->pp_orgz_kp = kp;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	601a      	str	r2, [r3, #0]
}
 800608e:	bf00      	nop
 8006090:	3718      	adds	r7, #24
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <PP_PIDEndSet>:

void PP_PIDEndSet(float kp, float ki, float kd, PathPlan_t *pp)
{
 8006096:	b480      	push	{r7}
 8006098:	b085      	sub	sp, #20
 800609a:	af00      	add	r7, sp, #0
 800609c:	ed87 0a03 	vstr	s0, [r7, #12]
 80060a0:	edc7 0a02 	vstr	s1, [r7, #8]
 80060a4:	ed87 1a01 	vstr	s2, [r7, #4]
 80060a8:	6038      	str	r0, [r7, #0]
	pp->kp[1]=kp;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	pp->ki[1]=ki;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
	pp->kd[1]=kd;
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
}
 80060c2:	bf00      	nop
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <PP_SetCrv_Points>:
	//	pp->yaw_offset=*(pp->yaw);
	pp->prev_yaw=*(pp->yaw);
}

void PP_SetCrv_Points (int z,PathPlan_t *pp)
{
 80060ce:	b480      	push	{r7}
 80060d0:	b083      	sub	sp, #12
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
 80060d6:	6039      	str	r1, [r7, #0]
	pp->pp_no_crv_pts = z;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	0000      	movs	r0, r0
	...

080060f0 <PathPlan>:



void PathPlan (PathPlan_t *pp)
{
 80060f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80060f4:	ed2d 8b02 	vpush	{d8}
 80060f8:	b084      	sub	sp, #16
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
	// Called every 5ms
	if(pp->point_start) // The start of program
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	f000 8134 	beq.w	8006378 <PathPlan+0x288>
	{
		pp->pos_x=*(pp->qeix);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	62da      	str	r2, [r3, #44]	; 0x2c
		pp->pos_y=*(pp->qeiy);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	63da      	str	r2, [r3, #60]	; 0x3c

		if(*(pp->yaw) < 30.0){
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	edd3 7a00 	vldr	s15, [r3]
 800612c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8006130:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006138:	d516      	bpl.n	8006168 <PathPlan+0x78>
			if(pp->prev_yaw > 330.0){
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	edd3 7a03 	vldr	s15, [r3, #12]
 8006140:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8006164 <PathPlan+0x74>
 8006144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800614c:	dd2b      	ble.n	80061a6 <PathPlan+0xb6>
				pp->yaw_constant++;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006154:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006158:	ee77 7a87 	vadd.f32	s15, s15, s14
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 8006162:	e020      	b.n	80061a6 <PathPlan+0xb6>
 8006164:	43a50000 	.word	0x43a50000
			}
		}else if(*(pp->yaw) > 330.0){
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	edd3 7a00 	vldr	s15, [r3]
 8006170:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8006164 <PathPlan+0x74>
 8006174:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800617c:	dd13      	ble.n	80061a6 <PathPlan+0xb6>
			if(pp->prev_yaw < 30.0){
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	edd3 7a03 	vldr	s15, [r3, #12]
 8006184:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8006188:	eef4 7ac7 	vcmpe.f32	s15, s14
 800618c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006190:	d509      	bpl.n	80061a6 <PathPlan+0xb6>
				pp->yaw_constant--;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006198:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800619c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			}
		}

		pp->prev_yaw = *(pp->yaw);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	60da      	str	r2, [r3, #12]
		pp->real_z = *(pp->yaw) + (pp->yaw_constant)*360.0 - pp->yaw_offset+pp->setz;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fa f9c6 	bl	8000548 <__aeabi_f2d>
 80061bc:	4604      	mov	r4, r0
 80061be:	460d      	mov	r5, r1
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7fa f9bf 	bl	8000548 <__aeabi_f2d>
 80061ca:	f04f 0200 	mov.w	r2, #0
 80061ce:	4b68      	ldr	r3, [pc, #416]	; (8006370 <PathPlan+0x280>)
 80061d0:	f7fa fa12 	bl	80005f8 <__aeabi_dmul>
 80061d4:	4602      	mov	r2, r0
 80061d6:	460b      	mov	r3, r1
 80061d8:	4620      	mov	r0, r4
 80061da:	4629      	mov	r1, r5
 80061dc:	f7fa f856 	bl	800028c <__adddf3>
 80061e0:	4602      	mov	r2, r0
 80061e2:	460b      	mov	r3, r1
 80061e4:	4614      	mov	r4, r2
 80061e6:	461d      	mov	r5, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fa f9ab 	bl	8000548 <__aeabi_f2d>
 80061f2:	4602      	mov	r2, r0
 80061f4:	460b      	mov	r3, r1
 80061f6:	4620      	mov	r0, r4
 80061f8:	4629      	mov	r1, r5
 80061fa:	f7fa f845 	bl	8000288 <__aeabi_dsub>
 80061fe:	4602      	mov	r2, r0
 8006200:	460b      	mov	r3, r1
 8006202:	4614      	mov	r4, r2
 8006204:	461d      	mov	r5, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	4618      	mov	r0, r3
 800620c:	f7fa f99c 	bl	8000548 <__aeabi_f2d>
 8006210:	4602      	mov	r2, r0
 8006212:	460b      	mov	r3, r1
 8006214:	4620      	mov	r0, r4
 8006216:	4629      	mov	r1, r5
 8006218:	f7fa f838 	bl	800028c <__adddf3>
 800621c:	4602      	mov	r2, r0
 800621e:	460b      	mov	r3, r1
 8006220:	4610      	mov	r0, r2
 8006222:	4619      	mov	r1, r3
 8006224:	f7fa fce0 	bl	8000be8 <__aeabi_d2f>
 8006228:	4602      	mov	r2, r0
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	611a      	str	r2, [r3, #16]
		pp->real_z_rad = (pp->real_z / 180.0) * M_PI;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	4618      	mov	r0, r3
 8006234:	f7fa f988 	bl	8000548 <__aeabi_f2d>
 8006238:	f04f 0200 	mov.w	r2, #0
 800623c:	4b4d      	ldr	r3, [pc, #308]	; (8006374 <PathPlan+0x284>)
 800623e:	f7fa fb05 	bl	800084c <__aeabi_ddiv>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4610      	mov	r0, r2
 8006248:	4619      	mov	r1, r3
 800624a:	a347      	add	r3, pc, #284	; (adr r3, 8006368 <PathPlan+0x278>)
 800624c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006250:	f7fa f9d2 	bl	80005f8 <__aeabi_dmul>
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	4610      	mov	r0, r2
 800625a:	4619      	mov	r1, r3
 800625c:	f7fa fcc4 	bl	8000be8 <__aeabi_d2f>
 8006260:	4602      	mov	r2, r0
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	619a      	str	r2, [r3, #24]

		pp->del_pos_x =  (pp->pos_x - pp->prev_x) * cosf(pp->real_z_rad) +
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8006272:	ee37 8a67 	vsub.f32	s16, s14, s15
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	edd3 7a06 	vldr	s15, [r3, #24]
 800627c:	eeb0 0a67 	vmov.f32	s0, s15
 8006280:	f017 ff70 	bl	801e164 <cosf>
 8006284:	eef0 7a40 	vmov.f32	s15, s0
 8006288:	ee28 8a27 	vmul.f32	s16, s16, s15
				(pp->pos_y - pp->prev_y) * sinf(pp->real_z_rad);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006298:	ee77 8a67 	vsub.f32	s17, s14, s15
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	edd3 7a06 	vldr	s15, [r3, #24]
 80062a2:	eeb0 0a67 	vmov.f32	s0, s15
 80062a6:	f017 ffa5 	bl	801e1f4 <sinf>
 80062aa:	eef0 7a40 	vmov.f32	s15, s0
 80062ae:	ee68 7aa7 	vmul.f32	s15, s17, s15
		pp->del_pos_x =  (pp->pos_x - pp->prev_x) * cosf(pp->real_z_rad) +
 80062b2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		pp->del_pos_y = -(pp->pos_x - pp->prev_x) * sinf(pp->real_z_rad) +
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80062c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062cc:	eeb1 8a67 	vneg.f32	s16, s15
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	edd3 7a06 	vldr	s15, [r3, #24]
 80062d6:	eeb0 0a67 	vmov.f32	s0, s15
 80062da:	f017 ff8b 	bl	801e1f4 <sinf>
 80062de:	eef0 7a40 	vmov.f32	s15, s0
 80062e2:	ee28 8a27 	vmul.f32	s16, s16, s15
				(pp->pos_y - pp->prev_y) * cosf(pp->real_z_rad);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80062f2:	ee77 8a67 	vsub.f32	s17, s14, s15
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	edd3 7a06 	vldr	s15, [r3, #24]
 80062fc:	eeb0 0a67 	vmov.f32	s0, s15
 8006300:	f017 ff30 	bl	801e164 <cosf>
 8006304:	eef0 7a40 	vmov.f32	s15, s0
 8006308:	ee68 7aa7 	vmul.f32	s15, s17, s15
		pp->del_pos_y = -(pp->pos_x - pp->prev_x) * sinf(pp->real_z_rad) +
 800630c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

		pp->real_x = pp->real_x + pp->del_pos_x;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8006322:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		pp->real_y = pp->real_y + pp->del_pos_y;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8006338:	ee77 7a27 	vadd.f32	s15, s14, s15
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

		pp->prev_x = pp->pos_x;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	631a      	str	r2, [r3, #48]	; 0x30
		pp->prev_y = pp->pos_y;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	641a      	str	r2, [r3, #64]	; 0x40

		pp->prev_real_x = pp->real_x;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	639a      	str	r2, [r3, #56]	; 0x38
		pp->prev_real_y = pp->real_y;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	649a      	str	r2, [r3, #72]	; 0x48
 8006362:	e009      	b.n	8006378 <PathPlan+0x288>
 8006364:	f3af 8000 	nop.w
 8006368:	54442d18 	.word	0x54442d18
 800636c:	400921fb 	.word	0x400921fb
 8006370:	40768000 	.word	0x40768000
 8006374:	40668000 	.word	0x40668000
	}


	if(pp->point_start && pp->pp_start){ // If path plan started
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	b2db      	uxtb	r3, r3
 8006384:	2b00      	cmp	r3, #0
 8006386:	f002 85a0 	beq.w	8008eca <PathPlan+0x2dda>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	f002 8597 	beq.w	8008eca <PathPlan+0x2dda>

		if(pp->pp_crv_radius[pp->point_count]){
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	3304      	adds	r3, #4
 80063ae:	edd3 7a00 	vldr	s15, [r3]
 80063b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80063b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ba:	f001 838d 	beq.w	8007ad8 <PathPlan+0x19e8>


			if(!pp->pp_crv_calc){
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 3528 	ldr.w	r3, [r3, #1320]	; 0x528
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f040 8208 	bne.w	80067da <PathPlan+0x6ea>
				pp->pp_rad_ptx = ((pp->target_x[pp->point_count] - pp->real_x)/(float)2.0) + (pp->pp_crv_radius[pp->point_count] * sinf(atan2f(pp->target_y[pp->point_count] - pp->real_y, pp->target_x[pp->point_count] - pp->real_x)));
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	331a      	adds	r3, #26
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	ed93 7a00 	vldr	s14, [r3]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80063e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063e6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80063ea:	ee87 8a87 	vdiv.f32	s16, s15, s14
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4413      	add	r3, r2
 80063fe:	3304      	adds	r3, #4
 8006400:	edd3 8a00 	vldr	s17, [r3]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	3328      	adds	r3, #40	; 0x28
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4413      	add	r3, r2
 8006412:	3304      	adds	r3, #4
 8006414:	ed93 7a00 	vldr	s14, [r3]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800641e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	331a      	adds	r3, #26
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	ed93 7a00 	vldr	s14, [r3]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800643a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800643e:	eef0 0a67 	vmov.f32	s1, s15
 8006442:	eeb0 0a66 	vmov.f32	s0, s13
 8006446:	f017 fff9 	bl	801e43c <atan2f>
 800644a:	eef0 7a40 	vmov.f32	s15, s0
 800644e:	eeb0 0a67 	vmov.f32	s0, s15
 8006452:	f017 fecf 	bl	801e1f4 <sinf>
 8006456:	eef0 7a40 	vmov.f32	s15, s0
 800645a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800645e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 8006468:	edc3 7a00 	vstr	s15, [r3]
				pp->pp_rad_pty = ((pp->target_y[pp->point_count] - pp->real_y)/(float)2.0) - (pp->pp_crv_radius[pp->point_count] * cosf(atan2f(pp->target_y[pp->point_count] - pp->real_y, pp->target_x[pp->point_count] - pp->real_x)));
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	3328      	adds	r3, #40	; 0x28
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4413      	add	r3, r2
 800647a:	3304      	adds	r3, #4
 800647c:	ed93 7a00 	vldr	s14, [r3]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006486:	ee77 7a67 	vsub.f32	s15, s14, s15
 800648a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800648e:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	3304      	adds	r3, #4
 80064a4:	edd3 8a00 	vldr	s17, [r3]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	3328      	adds	r3, #40	; 0x28
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4413      	add	r3, r2
 80064b6:	3304      	adds	r3, #4
 80064b8:	ed93 7a00 	vldr	s14, [r3]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80064c2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	331a      	adds	r3, #26
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4413      	add	r3, r2
 80064d4:	ed93 7a00 	vldr	s14, [r3]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80064de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064e2:	eef0 0a67 	vmov.f32	s1, s15
 80064e6:	eeb0 0a66 	vmov.f32	s0, s13
 80064ea:	f017 ffa7 	bl	801e43c <atan2f>
 80064ee:	eef0 7a40 	vmov.f32	s15, s0
 80064f2:	eeb0 0a67 	vmov.f32	s0, s15
 80064f6:	f017 fe35 	bl	801e164 <cosf>
 80064fa:	eef0 7a40 	vmov.f32	s15, s0
 80064fe:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8006502:	ee78 7a67 	vsub.f32	s15, s16, s15
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 800650c:	edc3 7a00 	vstr	s15, [r3]
				pp->pp_crv_const[pp->point_count] = pp->target_z[pp->point_count]/pp->pp_no_crv_pts;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	3338      	adds	r3, #56	; 0x38
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	edd3 6a00 	vldr	s13, [r3]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006528:	ee07 3a90 	vmov	s15, r3
 800652c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006536:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4413      	add	r3, r2
 8006544:	edc3 7a00 	vstr	s15, [r3]

				float crvpath = (float)1.0/pp->pp_no_crv_pts;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 800654e:	ee07 3a90 	vmov	s15, r3
 8006552:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800655a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800655e:	edc7 7a03 	vstr	s15, [r7, #12]
				for(int i = 0;i<pp->pp_no_crv_pts;i++){
 8006562:	2300      	movs	r3, #0
 8006564:	60bb      	str	r3, [r7, #8]
 8006566:	e12d      	b.n	80067c4 <PathPlan+0x6d4>
					pp->pp_crv_x[i]= powf((1-crvpath),2) * pp->real_x + 2.0*(1-crvpath)*crvpath*pp->pp_rad_ptx + powf(crvpath,2) * pp->target_x[pp->point_count];
 8006568:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800656c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006570:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006574:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8006578:	eeb0 0a67 	vmov.f32	s0, s15
 800657c:	f017 ff60 	bl	801e440 <powf>
 8006580:	eeb0 7a40 	vmov.f32	s14, s0
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800658a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800658e:	ee17 0a90 	vmov	r0, s15
 8006592:	f7f9 ffd9 	bl	8000548 <__aeabi_f2d>
 8006596:	4604      	mov	r4, r0
 8006598:	460d      	mov	r5, r1
 800659a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800659e:	edd7 7a03 	vldr	s15, [r7, #12]
 80065a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065a6:	ee17 0a90 	vmov	r0, s15
 80065aa:	f7f9 ffcd 	bl	8000548 <__aeabi_f2d>
 80065ae:	4602      	mov	r2, r0
 80065b0:	460b      	mov	r3, r1
 80065b2:	f7f9 fe6b 	bl	800028c <__adddf3>
 80065b6:	4602      	mov	r2, r0
 80065b8:	460b      	mov	r3, r1
 80065ba:	4690      	mov	r8, r2
 80065bc:	4699      	mov	r9, r3
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f7f9 ffc2 	bl	8000548 <__aeabi_f2d>
 80065c4:	4602      	mov	r2, r0
 80065c6:	460b      	mov	r3, r1
 80065c8:	4640      	mov	r0, r8
 80065ca:	4649      	mov	r1, r9
 80065cc:	f7fa f814 	bl	80005f8 <__aeabi_dmul>
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	4690      	mov	r8, r2
 80065d6:	4699      	mov	r9, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7f9 ffb1 	bl	8000548 <__aeabi_f2d>
 80065e6:	4602      	mov	r2, r0
 80065e8:	460b      	mov	r3, r1
 80065ea:	4640      	mov	r0, r8
 80065ec:	4649      	mov	r1, r9
 80065ee:	f7fa f803 	bl	80005f8 <__aeabi_dmul>
 80065f2:	4602      	mov	r2, r0
 80065f4:	460b      	mov	r3, r1
 80065f6:	4620      	mov	r0, r4
 80065f8:	4629      	mov	r1, r5
 80065fa:	f7f9 fe47 	bl	800028c <__adddf3>
 80065fe:	4602      	mov	r2, r0
 8006600:	460b      	mov	r3, r1
 8006602:	4614      	mov	r4, r2
 8006604:	461d      	mov	r5, r3
 8006606:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800660a:	ed97 0a03 	vldr	s0, [r7, #12]
 800660e:	f017 ff17 	bl	801e440 <powf>
 8006612:	eeb0 7a40 	vmov.f32	s14, s0
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	331a      	adds	r3, #26
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	4413      	add	r3, r2
 8006624:	edd3 7a00 	vldr	s15, [r3]
 8006628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800662c:	ee17 0a90 	vmov	r0, s15
 8006630:	f7f9 ff8a 	bl	8000548 <__aeabi_f2d>
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	4620      	mov	r0, r4
 800663a:	4629      	mov	r1, r5
 800663c:	f7f9 fe26 	bl	800028c <__adddf3>
 8006640:	4602      	mov	r2, r0
 8006642:	460b      	mov	r3, r1
 8006644:	4610      	mov	r0, r2
 8006646:	4619      	mov	r1, r3
 8006648:	f7fa face 	bl	8000be8 <__aeabi_d2f>
 800664c:	4601      	mov	r1, r0
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	6019      	str	r1, [r3, #0]
					pp->pp_crv_y[i]= powf((1-crvpath),2) * pp->real_y + 2.0*(1-crvpath)*crvpath*pp->pp_rad_pty + powf(crvpath,2) * pp->target_y[pp->point_count];
 800665c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006660:	edd7 7a03 	vldr	s15, [r7, #12]
 8006664:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006668:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800666c:	eeb0 0a67 	vmov.f32	s0, s15
 8006670:	f017 fee6 	bl	801e440 <powf>
 8006674:	eeb0 7a40 	vmov.f32	s14, s0
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800667e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006682:	ee17 0a90 	vmov	r0, s15
 8006686:	f7f9 ff5f 	bl	8000548 <__aeabi_f2d>
 800668a:	4604      	mov	r4, r0
 800668c:	460d      	mov	r5, r1
 800668e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006692:	edd7 7a03 	vldr	s15, [r7, #12]
 8006696:	ee77 7a67 	vsub.f32	s15, s14, s15
 800669a:	ee17 0a90 	vmov	r0, s15
 800669e:	f7f9 ff53 	bl	8000548 <__aeabi_f2d>
 80066a2:	4602      	mov	r2, r0
 80066a4:	460b      	mov	r3, r1
 80066a6:	f7f9 fdf1 	bl	800028c <__adddf3>
 80066aa:	4602      	mov	r2, r0
 80066ac:	460b      	mov	r3, r1
 80066ae:	4690      	mov	r8, r2
 80066b0:	4699      	mov	r9, r3
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f7f9 ff48 	bl	8000548 <__aeabi_f2d>
 80066b8:	4602      	mov	r2, r0
 80066ba:	460b      	mov	r3, r1
 80066bc:	4640      	mov	r0, r8
 80066be:	4649      	mov	r1, r9
 80066c0:	f7f9 ff9a 	bl	80005f8 <__aeabi_dmul>
 80066c4:	4602      	mov	r2, r0
 80066c6:	460b      	mov	r3, r1
 80066c8:	4690      	mov	r8, r2
 80066ca:	4699      	mov	r9, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7f9 ff37 	bl	8000548 <__aeabi_f2d>
 80066da:	4602      	mov	r2, r0
 80066dc:	460b      	mov	r3, r1
 80066de:	4640      	mov	r0, r8
 80066e0:	4649      	mov	r1, r9
 80066e2:	f7f9 ff89 	bl	80005f8 <__aeabi_dmul>
 80066e6:	4602      	mov	r2, r0
 80066e8:	460b      	mov	r3, r1
 80066ea:	4620      	mov	r0, r4
 80066ec:	4629      	mov	r1, r5
 80066ee:	f7f9 fdcd 	bl	800028c <__adddf3>
 80066f2:	4602      	mov	r2, r0
 80066f4:	460b      	mov	r3, r1
 80066f6:	4614      	mov	r4, r2
 80066f8:	461d      	mov	r5, r3
 80066fa:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80066fe:	ed97 0a03 	vldr	s0, [r7, #12]
 8006702:	f017 fe9d 	bl	801e440 <powf>
 8006706:	eeb0 7a40 	vmov.f32	s14, s0
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	3328      	adds	r3, #40	; 0x28
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	3304      	adds	r3, #4
 800671a:	edd3 7a00 	vldr	s15, [r3]
 800671e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006722:	ee17 0a90 	vmov	r0, s15
 8006726:	f7f9 ff0f 	bl	8000548 <__aeabi_f2d>
 800672a:	4602      	mov	r2, r0
 800672c:	460b      	mov	r3, r1
 800672e:	4620      	mov	r0, r4
 8006730:	4629      	mov	r1, r5
 8006732:	f7f9 fdab 	bl	800028c <__adddf3>
 8006736:	4602      	mov	r2, r0
 8006738:	460b      	mov	r3, r1
 800673a:	4610      	mov	r0, r2
 800673c:	4619      	mov	r1, r3
 800673e:	f7fa fa53 	bl	8000be8 <__aeabi_d2f>
 8006742:	4601      	mov	r1, r0
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	6019      	str	r1, [r3, #0]
					pp->pp_crv_z[i] = pp->pp_crv_const[pp->point_count] + pp->pp_crv_const[pp->point_count]*i;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4413      	add	r3, r2
 8006762:	ed93 7a00 	vldr	s14, [r3]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	edd3 6a00 	vldr	s13, [r3]
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	ee07 3a90 	vmov	s15, r3
 8006780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006784:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006788:	ee77 7a27 	vadd.f32	s15, s14, s15
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	edc3 7a00 	vstr	s15, [r3]
					crvpath+=(float)1.0/pp->pp_no_crv_pts;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 80067a2:	ee07 3a90 	vmov	s15, r3
 80067a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80067b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067ba:	edc7 7a03 	vstr	s15, [r7, #12]
				for(int i = 0;i<pp->pp_no_crv_pts;i++){
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	3301      	adds	r3, #1
 80067c2:	60bb      	str	r3, [r7, #8]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	f6ff aecb 	blt.w	8006568 <PathPlan+0x478>
				}
				//				PIDGainSet(KP,(pp->target_vel[pp->point_count]/(float)4.0),&(pp->z));
				pp->pp_crv_calc = 1;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
			}

			pp->error_x = pp->pp_crv_x[pp->crnt_crv_pt] - pp->real_x;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	ed93 7a00 	vldr	s14, [r3]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80067f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
			pp->error_y = pp->pp_crv_y[pp->crnt_crv_pt] - pp->real_y;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4413      	add	r3, r2
 800680e:	ed93 7a00 	vldr	s14, [r3]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006818:	ee77 7a67 	vsub.f32	s15, s14, s15
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
			pp->error_z = pp->pp_crv_z[pp->crnt_crv_pt] - pp->real_z;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	ed93 7a00 	vldr	s14, [r3]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	edd3 7a04 	vldr	s15, [r3, #16]
 800683c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8


			if( pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && ((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006852:	3b01      	subs	r3, #1
 8006854:	429a      	cmp	r2, r3
 8006856:	d14a      	bne.n	80068ee <PathPlan+0x7fe>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 800685e:	eef0 7ae7 	vabs.f32	s15, s15
 8006862:	ee17 0a90 	vmov	r0, s15
 8006866:	f7f9 fe6f 	bl	8000548 <__aeabi_f2d>
 800686a:	4604      	mov	r4, r0
 800686c:	460d      	mov	r5, r1
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8006874:	eef0 7ae7 	vabs.f32	s15, s15
 8006878:	ee17 0a90 	vmov	r0, s15
 800687c:	f7f9 fe64 	bl	8000548 <__aeabi_f2d>
 8006880:	4602      	mov	r2, r0
 8006882:	460b      	mov	r3, r1
 8006884:	4620      	mov	r0, r4
 8006886:	4629      	mov	r1, r5
 8006888:	f7f9 fd00 	bl	800028c <__adddf3>
 800688c:	4602      	mov	r2, r0
 800688e:	460b      	mov	r3, r1
 8006890:	4610      	mov	r0, r2
 8006892:	4619      	mov	r1, r3
 8006894:	f04f 0200 	mov.w	r2, #0
 8006898:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800689c:	f7f9 ffd6 	bl	800084c <__aeabi_ddiv>
 80068a0:	4602      	mov	r2, r0
 80068a2:	460b      	mov	r3, r1
 80068a4:	4614      	mov	r4, r2
 80068a6:	461d      	mov	r5, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7f9 fe4a 	bl	8000548 <__aeabi_f2d>
 80068b4:	4602      	mov	r2, r0
 80068b6:	460b      	mov	r3, r1
 80068b8:	4620      	mov	r0, r4
 80068ba:	4629      	mov	r1, r5
 80068bc:	f7fa f90e 	bl	8000adc <__aeabi_dcmplt>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d013      	beq.n	80068ee <PathPlan+0x7fe>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 80068cc:	eeb0 7ae7 	vabs.f32	s14, s15
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 80068d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80068da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068de:	d506      	bpl.n	80068ee <PathPlan+0x7fe>
				pp->pp_lck = 1.0;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80068e6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80068ea:	601a      	str	r2, [r3, #0]
 80068ec:	e005      	b.n	80068fa <PathPlan+0x80a>
			else
				pp->pp_lck = 0.0;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80068f4:	f04f 0200 	mov.w	r2, #0
 80068f8:	601a      	str	r2, [r3, #0]

			pp->pp_lck_count = pp->pp_lck_count + 1.0;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8006900:	edd3 7a00 	vldr	s15, [r3]
 8006904:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006908:	ee77 7a87 	vadd.f32	s15, s15, s14
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8006912:	edc3 7a00 	vstr	s15, [r3]

			if(pp->pp_lck_count <= 60.0)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800691c:	edd3 7a00 	vldr	s15, [r3]
 8006920:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8006bb8 <PathPlan+0xac8>
 8006924:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800692c:	d811      	bhi.n	8006952 <PathPlan+0x862>
				pp->pp_lck_cal = pp->pp_lck_cal + pp->pp_lck;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8006934:	ed93 7a00 	vldr	s14, [r3]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800693e:	edd3 7a00 	vldr	s15, [r3]
 8006942:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800694c:	edc3 7a00 	vstr	s15, [r3]
 8006950:	e034      	b.n	80069bc <PathPlan+0x8cc>
			else{
				pp->pp_lck_final = (pp->pp_lck_cal) / (pp->pp_lck_count) ;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8006958:	edd3 6a00 	vldr	s13, [r3]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8006962:	ed93 7a00 	vldr	s14, [r3]
 8006966:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006970:	edc3 7a00 	vstr	s15, [r3]
				if(pp->pp_lck_final >= 0.95)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4618      	mov	r0, r3
 800697e:	f7f9 fde3 	bl	8000548 <__aeabi_f2d>
 8006982:	a38b      	add	r3, pc, #556	; (adr r3, 8006bb0 <PathPlan+0xac0>)
 8006984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006988:	f7fa f8bc 	bl	8000b04 <__aeabi_dcmpge>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d004      	beq.n	800699c <PathPlan+0x8ac>
					pp->pp_lck_enb = 1;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2201      	movs	r2, #1
 8006996:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 800699a:	e003      	b.n	80069a4 <PathPlan+0x8b4>
				else
					pp->pp_lck_enb = 0;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
				pp->pp_lck_count = 0.0;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80069aa:	f04f 0200 	mov.w	r2, #0
 80069ae:	601a      	str	r2, [r3, #0]
				pp->pp_lck_cal   = 0.0;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80069b6:	f04f 0200 	mov.w	r2, #0
 80069ba:	601a      	str	r2, [r3, #0]
			}


			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy_crv){
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 80069c2:	eef0 7ae7 	vabs.f32	s15, s15
 80069c6:	ee17 0a90 	vmov	r0, s15
 80069ca:	f7f9 fdbd 	bl	8000548 <__aeabi_f2d>
 80069ce:	4604      	mov	r4, r0
 80069d0:	460d      	mov	r5, r1
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 80069d8:	eef0 7ae7 	vabs.f32	s15, s15
 80069dc:	ee17 0a90 	vmov	r0, s15
 80069e0:	f7f9 fdb2 	bl	8000548 <__aeabi_f2d>
 80069e4:	4602      	mov	r2, r0
 80069e6:	460b      	mov	r3, r1
 80069e8:	4620      	mov	r0, r4
 80069ea:	4629      	mov	r1, r5
 80069ec:	f7f9 fc4e 	bl	800028c <__adddf3>
 80069f0:	4602      	mov	r2, r0
 80069f2:	460b      	mov	r3, r1
 80069f4:	4610      	mov	r0, r2
 80069f6:	4619      	mov	r1, r3
 80069f8:	f04f 0200 	mov.w	r2, #0
 80069fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a00:	f7f9 ff24 	bl	800084c <__aeabi_ddiv>
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	4614      	mov	r4, r2
 8006a0a:	461d      	mov	r5, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7f9 fd98 	bl	8000548 <__aeabi_f2d>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	4629      	mov	r1, r5
 8006a20:	f7fa f85c 	bl	8000adc <__aeabi_dcmplt>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 8466 	beq.w	80072f8 <PathPlan+0x1208>
				if(pp->crnt_crv_pt < pp->pp_no_crv_pts - 1){
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	f280 8135 	bge.w	8006caa <PathPlan+0xbba>
					PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8006a46:	edd3 7a00 	vldr	s15, [r3]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8006a50:	4619      	mov	r1, r3
 8006a52:	eeb0 0a67 	vmov.f32	s0, s15
 8006a56:	2004      	movs	r0, #4
 8006a58:	f7fe ff71 	bl	800593e <PIDGainSet>
					pp->crnt_crv_pt++;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006a62:	1c5a      	adds	r2, r3, #1
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
					pp->error_x = pp->pp_crv_x[pp->crnt_crv_pt] - pp->real_x;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	ed93 7a00 	vldr	s14, [r3]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
					pp->error_y = pp->pp_crv_y[pp->crnt_crv_pt] - pp->real_y;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4413      	add	r3, r2
 8006a9e:	ed93 7a00 	vldr	s14, [r3]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006aa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
					pp->error_z = pp->pp_crv_z[pp->crnt_crv_pt] - pp->real_z;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	ed93 7a00 	vldr	s14, [r3]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	edd3 7a04 	vldr	s15, [r3, #16]
 8006acc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8

					if(pp->target_x[pp->point_count]-pp->real_x){
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	331a      	adds	r3, #26
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	ed93 7a00 	vldr	s14, [r3]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006aee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006af2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006afa:	d01d      	beq.n	8006b38 <PathPlan+0xa48>
						PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	331a      	adds	r3, #26
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	4413      	add	r3, r2
 8006b0a:	ed93 7a00 	vldr	s14, [r3]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b18:	eef0 7ae7 	vabs.f32	s15, s15
 8006b1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	eeb0 0a47 	vmov.f32	s0, s14
 8006b30:	2002      	movs	r0, #2
 8006b32:	f7fe ff04 	bl	800593e <PIDGainSet>
 8006b36:	e008      	b.n	8006b4a <PathPlan+0xa5a>
					} else {
						PIDGainSet(KE,1.0,&(pp->x));
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006b3e:	4619      	mov	r1, r3
 8006b40:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006b44:	2002      	movs	r0, #2
 8006b46:	f7fe fefa 	bl	800593e <PIDGainSet>
					}
					if(pp->target_y[pp->point_count]-pp->real_y){
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	3328      	adds	r3, #40	; 0x28
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4413      	add	r3, r2
 8006b58:	3304      	adds	r3, #4
 8006b5a:	ed93 7a00 	vldr	s14, [r3]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006b64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b68:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b70:	d024      	beq.n	8006bbc <PathPlan+0xacc>
						PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	3328      	adds	r3, #40	; 0x28
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	3304      	adds	r3, #4
 8006b82:	ed93 7a00 	vldr	s14, [r3]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006b8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b90:	eef0 7ae7 	vabs.f32	s15, s15
 8006b94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	eeb0 0a47 	vmov.f32	s0, s14
 8006ba8:	2002      	movs	r0, #2
 8006baa:	f7fe fec8 	bl	800593e <PIDGainSet>
 8006bae:	e00e      	b.n	8006bce <PathPlan+0xade>
 8006bb0:	66666666 	.word	0x66666666
 8006bb4:	3fee6666 	.word	0x3fee6666
 8006bb8:	42700000 	.word	0x42700000
					} else {
						PIDGainSet(KE,1.0,&(pp->y));
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006bc8:	2002      	movs	r0, #2
 8006bca:	f7fe feb8 	bl	800593e <PIDGainSet>
					}
					PIDGainSet(KP,pp->kp[0],&(pp->x));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006bda:	4619      	mov	r1, r3
 8006bdc:	eeb0 0a67 	vmov.f32	s0, s15
 8006be0:	2004      	movs	r0, #4
 8006be2:	f7fe feac 	bl	800593e <PIDGainSet>
					PIDGainSet(KP,pp->kp[0],&(pp->y));
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	eeb0 0a67 	vmov.f32	s0, s15
 8006bf8:	2004      	movs	r0, #4
 8006bfa:	f7fe fea0 	bl	800593e <PIDGainSet>
					PIDGainSet(KI,pp->ki[0],&(pp->x));
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	eeb0 0a67 	vmov.f32	s0, s15
 8006c10:	2005      	movs	r0, #5
 8006c12:	f7fe fe94 	bl	800593e <PIDGainSet>
					PIDGainSet(KI,pp->ki[0],&(pp->y));
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006c22:	4619      	mov	r1, r3
 8006c24:	eeb0 0a67 	vmov.f32	s0, s15
 8006c28:	2005      	movs	r0, #5
 8006c2a:	f7fe fe88 	bl	800593e <PIDGainSet>
					PIDGainSet(KD,pp->kd[0],&(pp->x));
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	eeb0 0a67 	vmov.f32	s0, s15
 8006c40:	2006      	movs	r0, #6
 8006c42:	f7fe fe7c 	bl	800593e <PIDGainSet>
					PIDGainSet(KD,pp->kd[0],&(pp->y));
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006c52:	4619      	mov	r1, r3
 8006c54:	eeb0 0a67 	vmov.f32	s0, s15
 8006c58:	2006      	movs	r0, #6
 8006c5a:	f7fe fe70 	bl	800593e <PIDGainSet>
					PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	3384      	adds	r3, #132	; 0x84
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	3304      	adds	r3, #4
 8006c6e:	edd3 7a00 	vldr	s15, [r3]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006c78:	4619      	mov	r1, r3
 8006c7a:	eeb0 0a67 	vmov.f32	s0, s15
 8006c7e:	2003      	movs	r0, #3
 8006c80:	f7fe fe5d 	bl	800593e <PIDGainSet>
					PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	3394      	adds	r3, #148	; 0x94
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	edd3 7a00 	vldr	s15, [r3]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8006ca2:	2003      	movs	r0, #3
 8006ca4:	f7fe fe4b 	bl	800593e <PIDGainSet>
 8006ca8:	e326      	b.n	80072f8 <PathPlan+0x1208>


				}else if(pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && (pp->point_count < (pp->target_point - 1)) ){
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	f040 8252 	bne.w	8007162 <PathPlan+0x1072>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	f280 8248 	bge.w	8007162 <PathPlan+0x1072>
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8006cd8:	eef0 7ae7 	vabs.f32	s15, s15
 8006cdc:	ee17 0a90 	vmov	r0, s15
 8006ce0:	f7f9 fc32 	bl	8000548 <__aeabi_f2d>
 8006ce4:	4604      	mov	r4, r0
 8006ce6:	460d      	mov	r5, r1
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8006cee:	eef0 7ae7 	vabs.f32	s15, s15
 8006cf2:	ee17 0a90 	vmov	r0, s15
 8006cf6:	f7f9 fc27 	bl	8000548 <__aeabi_f2d>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	4620      	mov	r0, r4
 8006d00:	4629      	mov	r1, r5
 8006d02:	f7f9 fac3 	bl	800028c <__adddf3>
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	4610      	mov	r0, r2
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	f04f 0200 	mov.w	r2, #0
 8006d12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d16:	f7f9 fd99 	bl	800084c <__aeabi_ddiv>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	4614      	mov	r4, r2
 8006d20:	461d      	mov	r5, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7f9 fc0d 	bl	8000548 <__aeabi_f2d>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	460b      	mov	r3, r1
 8006d32:	4620      	mov	r0, r4
 8006d34:	4629      	mov	r1, r5
 8006d36:	f7f9 fed1 	bl	8000adc <__aeabi_dcmplt>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f000 82da 	beq.w	80072f6 <PathPlan+0x1206>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8006d48:	eeb0 7ae7 	vabs.f32	s14, s15
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 8006d52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d5a:	d400      	bmi.n	8006d5e <PathPlan+0xc6e>
 8006d5c:	e2cb      	b.n	80072f6 <PathPlan+0x1206>
						if(pp->target_accurate[pp->point_count] == 1.0){
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	3346      	adds	r3, #70	; 0x46
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	3304      	adds	r3, #4
 8006d6e:	edd3 7a00 	vldr	s15, [r3]
 8006d72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d76:	eef4 7a47 	vcmp.f32	s15, s14
 8006d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d7e:	f040 80fd 	bne.w	8006f7c <PathPlan+0xe8c>
							if(pp->pp_lck_enb == 1){
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	f040 82b4 	bne.w	80072f6 <PathPlan+0x1206>

								pp->point_count++;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006d94:	1c5a      	adds	r2, r3, #1
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
								if(pp->target_x[pp->point_count]-pp->real_x){
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	331a      	adds	r3, #26
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	4413      	add	r3, r2
 8006daa:	ed93 7a00 	vldr	s14, [r3]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006db4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006db8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dc0:	d01d      	beq.n	8006dfe <PathPlan+0xd0e>
									PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	331a      	adds	r3, #26
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4413      	add	r3, r2
 8006dd0:	ed93 7a00 	vldr	s14, [r3]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006dda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006dde:	eef0 7ae7 	vabs.f32	s15, s15
 8006de2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006df0:	4619      	mov	r1, r3
 8006df2:	eeb0 0a47 	vmov.f32	s0, s14
 8006df6:	2002      	movs	r0, #2
 8006df8:	f7fe fda1 	bl	800593e <PIDGainSet>
 8006dfc:	e008      	b.n	8006e10 <PathPlan+0xd20>
								} else {
									PIDGainSet(KE,1.0,&(pp->x));
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006e04:	4619      	mov	r1, r3
 8006e06:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006e0a:	2002      	movs	r0, #2
 8006e0c:	f7fe fd97 	bl	800593e <PIDGainSet>
								}
								if(pp->target_y[pp->point_count]-pp->real_y){
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	3328      	adds	r3, #40	; 0x28
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	3304      	adds	r3, #4
 8006e20:	ed93 7a00 	vldr	s14, [r3]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e2e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e36:	d01e      	beq.n	8006e76 <PathPlan+0xd86>
									PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	3328      	adds	r3, #40	; 0x28
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	3304      	adds	r3, #4
 8006e48:	ed93 7a00 	vldr	s14, [r3]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006e52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e56:	eef0 7ae7 	vabs.f32	s15, s15
 8006e5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006e68:	4619      	mov	r1, r3
 8006e6a:	eeb0 0a47 	vmov.f32	s0, s14
 8006e6e:	2002      	movs	r0, #2
 8006e70:	f7fe fd65 	bl	800593e <PIDGainSet>
 8006e74:	e008      	b.n	8006e88 <PathPlan+0xd98>
								} else {
									PIDGainSet(KE,1.0,&(pp->y));
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006e82:	2002      	movs	r0, #2
 8006e84:	f7fe fd5b 	bl	800593e <PIDGainSet>
								}
								PIDGainSet(KP,pp->kp[0],&(pp->x));
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006e94:	4619      	mov	r1, r3
 8006e96:	eeb0 0a67 	vmov.f32	s0, s15
 8006e9a:	2004      	movs	r0, #4
 8006e9c:	f7fe fd4f 	bl	800593e <PIDGainSet>
								PIDGainSet(KP,pp->kp[0],&(pp->y));
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006eac:	4619      	mov	r1, r3
 8006eae:	eeb0 0a67 	vmov.f32	s0, s15
 8006eb2:	2004      	movs	r0, #4
 8006eb4:	f7fe fd43 	bl	800593e <PIDGainSet>
								PIDGainSet(KI,pp->ki[0],&(pp->x));
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8006eca:	2005      	movs	r0, #5
 8006ecc:	f7fe fd37 	bl	800593e <PIDGainSet>
								PIDGainSet(KI,pp->ki[0],&(pp->y));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006edc:	4619      	mov	r1, r3
 8006ede:	eeb0 0a67 	vmov.f32	s0, s15
 8006ee2:	2005      	movs	r0, #5
 8006ee4:	f7fe fd2b 	bl	800593e <PIDGainSet>
								PIDGainSet(KD,pp->kd[0],&(pp->x));
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8006efa:	2006      	movs	r0, #6
 8006efc:	f7fe fd1f 	bl	800593e <PIDGainSet>
								PIDGainSet(KD,pp->kd[0],&(pp->y));
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8006f12:	2006      	movs	r0, #6
 8006f14:	f7fe fd13 	bl	800593e <PIDGainSet>
								PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	3384      	adds	r3, #132	; 0x84
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	4413      	add	r3, r2
 8006f26:	3304      	adds	r3, #4
 8006f28:	edd3 7a00 	vldr	s15, [r3]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006f32:	4619      	mov	r1, r3
 8006f34:	eeb0 0a67 	vmov.f32	s0, s15
 8006f38:	2003      	movs	r0, #3
 8006f3a:	f7fe fd00 	bl	800593e <PIDGainSet>
								PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	3394      	adds	r3, #148	; 0x94
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4413      	add	r3, r2
 8006f4c:	edd3 7a00 	vldr	s15, [r3]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006f56:	4619      	mov	r1, r3
 8006f58:	eeb0 0a67 	vmov.f32	s0, s15
 8006f5c:	2003      	movs	r0, #3
 8006f5e:	f7fe fcee 	bl	800593e <PIDGainSet>
								pp->crnt_crv_pt=0;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
								pp->pp_crv_calc = 0;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528

								pp->pp_lck_enb = 0;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8006f7a:	e1bc      	b.n	80072f6 <PathPlan+0x1206>

							}
						}else{
							pp->point_count++;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006f82:	1c5a      	adds	r2, r3, #1
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
							if(pp->target_x[pp->point_count]-pp->real_x){
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	331a      	adds	r3, #26
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	ed93 7a00 	vldr	s14, [r3]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006fa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006fa6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fae:	d01d      	beq.n	8006fec <PathPlan+0xefc>
								PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	331a      	adds	r3, #26
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	ed93 7a00 	vldr	s14, [r3]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006fc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006fcc:	eef0 7ae7 	vabs.f32	s15, s15
 8006fd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006fde:	4619      	mov	r1, r3
 8006fe0:	eeb0 0a47 	vmov.f32	s0, s14
 8006fe4:	2002      	movs	r0, #2
 8006fe6:	f7fe fcaa 	bl	800593e <PIDGainSet>
 8006fea:	e008      	b.n	8006ffe <PathPlan+0xf0e>
							} else {
								PIDGainSet(KE,1.0,&(pp->x));
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006ff8:	2002      	movs	r0, #2
 8006ffa:	f7fe fca0 	bl	800593e <PIDGainSet>
							}
							if(pp->target_y[pp->point_count]-pp->real_y){
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	3328      	adds	r3, #40	; 0x28
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4413      	add	r3, r2
 800700c:	3304      	adds	r3, #4
 800700e:	ed93 7a00 	vldr	s14, [r3]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007018:	ee77 7a67 	vsub.f32	s15, s14, s15
 800701c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007024:	d01e      	beq.n	8007064 <PathPlan+0xf74>
								PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	3328      	adds	r3, #40	; 0x28
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	3304      	adds	r3, #4
 8007036:	ed93 7a00 	vldr	s14, [r3]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007040:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007044:	eef0 7ae7 	vabs.f32	s15, s15
 8007048:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800704c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007056:	4619      	mov	r1, r3
 8007058:	eeb0 0a47 	vmov.f32	s0, s14
 800705c:	2002      	movs	r0, #2
 800705e:	f7fe fc6e 	bl	800593e <PIDGainSet>
 8007062:	e008      	b.n	8007076 <PathPlan+0xf86>
							} else {
								PIDGainSet(KE,1.0,&(pp->y));
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800706a:	4619      	mov	r1, r3
 800706c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007070:	2002      	movs	r0, #2
 8007072:	f7fe fc64 	bl	800593e <PIDGainSet>
							}
							PIDGainSet(KP,pp->kp[0],&(pp->x));
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007082:	4619      	mov	r1, r3
 8007084:	eeb0 0a67 	vmov.f32	s0, s15
 8007088:	2004      	movs	r0, #4
 800708a:	f7fe fc58 	bl	800593e <PIDGainSet>
							PIDGainSet(KP,pp->kp[0],&(pp->y));
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800709a:	4619      	mov	r1, r3
 800709c:	eeb0 0a67 	vmov.f32	s0, s15
 80070a0:	2004      	movs	r0, #4
 80070a2:	f7fe fc4c 	bl	800593e <PIDGainSet>
							PIDGainSet(KI,pp->ki[0],&(pp->x));
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80070b2:	4619      	mov	r1, r3
 80070b4:	eeb0 0a67 	vmov.f32	s0, s15
 80070b8:	2005      	movs	r0, #5
 80070ba:	f7fe fc40 	bl	800593e <PIDGainSet>
							PIDGainSet(KI,pp->ki[0],&(pp->y));
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80070ca:	4619      	mov	r1, r3
 80070cc:	eeb0 0a67 	vmov.f32	s0, s15
 80070d0:	2005      	movs	r0, #5
 80070d2:	f7fe fc34 	bl	800593e <PIDGainSet>
							PIDGainSet(KD,pp->kd[0],&(pp->x));
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80070e2:	4619      	mov	r1, r3
 80070e4:	eeb0 0a67 	vmov.f32	s0, s15
 80070e8:	2006      	movs	r0, #6
 80070ea:	f7fe fc28 	bl	800593e <PIDGainSet>
							PIDGainSet(KD,pp->kd[0],&(pp->y));
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80070fa:	4619      	mov	r1, r3
 80070fc:	eeb0 0a67 	vmov.f32	s0, s15
 8007100:	2006      	movs	r0, #6
 8007102:	f7fe fc1c 	bl	800593e <PIDGainSet>
							PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	3384      	adds	r3, #132	; 0x84
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4413      	add	r3, r2
 8007114:	3304      	adds	r3, #4
 8007116:	edd3 7a00 	vldr	s15, [r3]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007120:	4619      	mov	r1, r3
 8007122:	eeb0 0a67 	vmov.f32	s0, s15
 8007126:	2003      	movs	r0, #3
 8007128:	f7fe fc09 	bl	800593e <PIDGainSet>
							PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	3394      	adds	r3, #148	; 0x94
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	4413      	add	r3, r2
 800713a:	edd3 7a00 	vldr	s15, [r3]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007144:	4619      	mov	r1, r3
 8007146:	eeb0 0a67 	vmov.f32	s0, s15
 800714a:	2003      	movs	r0, #3
 800714c:	f7fe fbf7 	bl	800593e <PIDGainSet>
							pp->crnt_crv_pt=0;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
							pp->pp_crv_calc = 0;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8007160:	e0c9      	b.n	80072f6 <PathPlan+0x1206>
						}
					}

				}else if(pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && pp->point_count == (pp->target_point - 1) ){
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 800716e:	3b01      	subs	r3, #1
 8007170:	429a      	cmp	r2, r3
 8007172:	f040 80c1 	bne.w	80072f8 <PathPlan+0x1208>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007182:	3b01      	subs	r3, #1
 8007184:	429a      	cmp	r2, r3
 8007186:	f040 80b7 	bne.w	80072f8 <PathPlan+0x1208>

					if(fabs(pp->error_x)<pp->f_tol_xy && fabs(pp->error_y)<pp->f_tol_xy && (int)pp->error_z<=pp->f_tol_z){
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8007190:	eeb0 7ae7 	vabs.f32	s14, s15
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 800719a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800719e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071a2:	f140 80a9 	bpl.w	80072f8 <PathPlan+0x1208>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 80071ac:	eeb0 7ae7 	vabs.f32	s14, s15
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 80071b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80071ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071be:	f140 809b 	bpl.w	80072f8 <PathPlan+0x1208>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 80071c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	edd3 7ac1 	vldr	s15, [r3, #772]	; 0x304
 80071d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80071da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071de:	f200 808b 	bhi.w	80072f8 <PathPlan+0x1208>

						if(pp->target_accurate[pp->point_count] == 1.0){
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	3346      	adds	r3, #70	; 0x46
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4413      	add	r3, r2
 80071f0:	3304      	adds	r3, #4
 80071f2:	edd3 7a00 	vldr	s15, [r3]
 80071f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071fa:	eef4 7a47 	vcmp.f32	s15, s14
 80071fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007202:	d140      	bne.n	8007286 <PathPlan+0x1196>
							if(pp->pp_lck_enb == 1){
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 800720a:	2b01      	cmp	r3, #1
 800720c:	d174      	bne.n	80072f8 <PathPlan+0x1208>
								PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8007214:	edd3 7a00 	vldr	s15, [r3]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800721e:	4619      	mov	r1, r3
 8007220:	eeb0 0a67 	vmov.f32	s0, s15
 8007224:	2004      	movs	r0, #4
 8007226:	f7fe fb8a 	bl	800593e <PIDGainSet>
								//								APPStop();
								VESCNavStop();
 800722a:	f006 fc51 	bl	800dad0 <VESCNavStop>
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 800722e:	2201      	movs	r2, #1
 8007230:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007234:	487f      	ldr	r0, [pc, #508]	; (8007434 <PathPlan+0x1344>)
 8007236:	f009 fbff 	bl	8010a38 <HAL_GPIO_WritePin>
								//								LED4 = 1;
								PIDDelayInit(&(pp->x));
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007240:	4618      	mov	r0, r3
 8007242:	f7fe fcce 	bl	8005be2 <PIDDelayInit>
								PIDDelayInit(&(pp->y));
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800724c:	4618      	mov	r0, r3
 800724e:	f7fe fcc8 	bl	8005be2 <PIDDelayInit>
								PIDDelayInit(&(pp->z));
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8007258:	4618      	mov	r0, r3
 800725a:	f7fe fcc2 	bl	8005be2 <PIDDelayInit>
								pp->crnt_crv_pt=0;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
								pp->pp_crv_calc = 0;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
								pp->pp_start=0;
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8007274:	f36f 0300 	bfc	r3, #0, #1
 8007278:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
								pp->pp_lck_enb = 0;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8007284:	e038      	b.n	80072f8 <PathPlan+0x1208>
							}
						}else{
							PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 800728c:	edd3 7a00 	vldr	s15, [r3]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8007296:	4619      	mov	r1, r3
 8007298:	eeb0 0a67 	vmov.f32	s0, s15
 800729c:	2004      	movs	r0, #4
 800729e:	f7fe fb4e 	bl	800593e <PIDGainSet>
							VESCNavStop();
 80072a2:	f006 fc15 	bl	800dad0 <VESCNavStop>
							//							APPStop();
							//							LED4 = 1;
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 80072a6:	2201      	movs	r2, #1
 80072a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80072ac:	4861      	ldr	r0, [pc, #388]	; (8007434 <PathPlan+0x1344>)
 80072ae:	f009 fbc3 	bl	8010a38 <HAL_GPIO_WritePin>
							PIDDelayInit(&(pp->x));
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7fe fc92 	bl	8005be2 <PIDDelayInit>
							PIDDelayInit(&(pp->y));
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7fe fc8c 	bl	8005be2 <PIDDelayInit>
							PIDDelayInit(&(pp->z));
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7fe fc86 	bl	8005be2 <PIDDelayInit>
							pp->crnt_crv_pt=0;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
							pp->pp_crv_calc = 0;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
							pp->pp_start=0;
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 80072ec:	f36f 0300 	bfc	r3, #0, #1
 80072f0:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
 80072f4:	e000      	b.n	80072f8 <PathPlan+0x1208>
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 80072f6:	bf00      	nop

				}
			}


			if(pp->pp_start){
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 80072fe:	f003 0301 	and.w	r3, r3, #1
 8007302:	b2db      	uxtb	r3, r3
 8007304:	2b00      	cmp	r3, #0
 8007306:	f001 85e0 	beq.w	8008eca <PathPlan+0x2dda>

				pp->dx = pp->pp_crv_x[pp->crnt_crv_pt] - pp->prev_real_x;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4413      	add	r3, r2
 800731a:	ed93 7a00 	vldr	s14, [r3]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8007324:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
				pp->dy = pp->pp_crv_y[pp->crnt_crv_pt] - pp->prev_real_y;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	4413      	add	r3, r2
 800733e:	ed93 7a00 	vldr	s14, [r3]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8007348:	ee77 7a67 	vsub.f32	s15, s14, s15
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

				pp->rotate=0;
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8007358:	f36f 03c3 	bfc	r3, #3, #1
 800735c:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538

				if ((pp->dx != 0.0 || pp->dx != -0.0)&&(pp->dy != -0.0 || pp->dy != 0.0)){
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007366:	eef5 7a40 	vcmp.f32	s15, #0.0
 800736a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800736e:	d107      	bne.n	8007380 <PathPlan+0x1290>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007376:	eef5 7a40 	vcmp.f32	s15, #0.0
 800737a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800737e:	d021      	beq.n	80073c4 <PathPlan+0x12d4>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007386:	eef5 7a40 	vcmp.f32	s15, #0.0
 800738a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800738e:	d107      	bne.n	80073a0 <PathPlan+0x12b0>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007396:	eef5 7a40 	vcmp.f32	s15, #0.0
 800739a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800739e:	d011      	beq.n	80073c4 <PathPlan+0x12d4>
					pp->heading = atan2f(pp->dy, pp->dx);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80073ac:	eef0 0a47 	vmov.f32	s1, s14
 80073b0:	eeb0 0a67 	vmov.f32	s0, s15
 80073b4:	f017 f842 	bl	801e43c <atan2f>
 80073b8:	eef0 7a40 	vmov.f32	s15, s0
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
 80073c2:	e048      	b.n	8007456 <PathPlan+0x1366>
				} else {
					if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy < 0.0) {
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80073ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80073ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073d2:	d007      	beq.n	80073e4 <PathPlan+0x12f4>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80073da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80073de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073e2:	d10b      	bne.n	80073fc <PathPlan+0x130c>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80073ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80073ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f2:	d503      	bpl.n	80073fc <PathPlan+0x130c>
						pp->heading = 1.5708;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a10      	ldr	r2, [pc, #64]	; (8007438 <PathPlan+0x1348>)
 80073f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80073fa:	e02c      	b.n	8007456 <PathPlan+0x1366>
					} else if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy > 0.0) {
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007402:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800740a:	d007      	beq.n	800741c <PathPlan+0x132c>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007412:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800741a:	d111      	bne.n	8007440 <PathPlan+0x1350>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007422:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800742a:	dd09      	ble.n	8007440 <PathPlan+0x1350>
						pp->heading = -1.5708;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a03      	ldr	r2, [pc, #12]	; (800743c <PathPlan+0x134c>)
 8007430:	65da      	str	r2, [r3, #92]	; 0x5c
 8007432:	e010      	b.n	8007456 <PathPlan+0x1366>
 8007434:	40020800 	.word	0x40020800
 8007438:	3fc90ff9 	.word	0x3fc90ff9
 800743c:	bfc90ff9 	.word	0xbfc90ff9
					} else {
						pp->heading = 0.0;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f04f 0200 	mov.w	r2, #0
 8007446:	65da      	str	r2, [r3, #92]	; 0x5c
						pp->rotate = 1;
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 800744e:	f043 0308 	orr.w	r3, r3, #8
 8007452:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
					}
				}

				pp->vx  = pp->target_vel[pp->point_count] * cosf(pp->heading);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	3374      	adds	r3, #116	; 0x74
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	ed93 8a00 	vldr	s16, [r3]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800746e:	eeb0 0a67 	vmov.f32	s0, s15
 8007472:	f016 fe77 	bl	801e164 <cosf>
 8007476:	eef0 7a40 	vmov.f32	s15, s0
 800747a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
				pp->vy  = pp->target_vel[pp->point_count] * sinf(pp->heading);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	3374      	adds	r3, #116	; 0x74
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	ed93 8a00 	vldr	s16, [r3]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800749c:	eeb0 0a67 	vmov.f32	s0, s15
 80074a0:	f016 fea8 	bl	801e1f4 <sinf>
 80074a4:	eef0 7a40 	vmov.f32	s15, s0
 80074a8:	ee68 7a27 	vmul.f32	s15, s16, s15
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

				if(pp->rotate){
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 80074b8:	f003 0308 	and.w	r3, r3, #8
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d007      	beq.n	80074d2 <PathPlan+0x13e2>
					pp->vx = pp->vy = 0.0;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f04f 0200 	mov.w	r2, #0
 80074c8:	665a      	str	r2, [r3, #100]	; 0x64
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	661a      	str	r2, [r3, #96]	; 0x60
				}

				PID(&(pp->x));
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80074d8:	4618      	mov	r0, r3
 80074da:	f7fe fba0 	bl	8005c1e <PID>
				PID(&(pp->y));
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7fe fb9a 	bl	8005c1e <PID>
				PID(&(pp->z));
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7fe fb94 	bl	8005c1e <PID>

				pp->rux =   pp->outx*cosf(pp->real_z_rad) - pp->outy*sinf(pp->real_z_rad);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	edd3 7a06 	vldr	s15, [r3, #24]
 8007502:	eeb0 0a67 	vmov.f32	s0, s15
 8007506:	f016 fe2d 	bl	801e164 <cosf>
 800750a:	eef0 7a40 	vmov.f32	s15, s0
 800750e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	edd3 7a06 	vldr	s15, [r3, #24]
 800751e:	eeb0 0a67 	vmov.f32	s0, s15
 8007522:	f016 fe67 	bl	801e1f4 <sinf>
 8007526:	eef0 7a40 	vmov.f32	s15, s0
 800752a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800752e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
				pp->ruy =   pp->outx*sinf(pp->real_z_rad) + pp->outy*cosf(pp->real_z_rad);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	edd3 7a06 	vldr	s15, [r3, #24]
 8007544:	eeb0 0a67 	vmov.f32	s0, s15
 8007548:	f016 fe54 	bl	801e1f4 <sinf>
 800754c:	eef0 7a40 	vmov.f32	s15, s0
 8007550:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	edd3 7a06 	vldr	s15, [r3, #24]
 8007560:	eeb0 0a67 	vmov.f32	s0, s15
 8007564:	f016 fdfe 	bl	801e164 <cosf>
 8007568:	eef0 7a40 	vmov.f32	s15, s0
 800756c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8007570:	ee78 7a27 	vadd.f32	s15, s16, s15
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	edc3 7ab3 	vstr	s15, [r3, #716]	; 0x2cc
				pp->rvx =   pp->vx*cosf(pp->real_z_rad) - pp->vy*sinf(pp->real_z_rad);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	edd3 7a06 	vldr	s15, [r3, #24]
 8007586:	eeb0 0a67 	vmov.f32	s0, s15
 800758a:	f016 fdeb 	bl	801e164 <cosf>
 800758e:	eef0 7a40 	vmov.f32	s15, s0
 8007592:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	edd3 7a06 	vldr	s15, [r3, #24]
 80075a2:	eeb0 0a67 	vmov.f32	s0, s15
 80075a6:	f016 fe25 	bl	801e1f4 <sinf>
 80075aa:	eef0 7a40 	vmov.f32	s15, s0
 80075ae:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80075b2:	ee78 7a67 	vsub.f32	s15, s16, s15
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	edc3 7ab4 	vstr	s15, [r3, #720]	; 0x2d0
				pp->rvy =   pp->vx*sinf(pp->real_z_rad) + pp->vy*cosf(pp->real_z_rad);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	edd3 7a06 	vldr	s15, [r3, #24]
 80075c8:	eeb0 0a67 	vmov.f32	s0, s15
 80075cc:	f016 fe12 	bl	801e1f4 <sinf>
 80075d0:	eef0 7a40 	vmov.f32	s15, s0
 80075d4:	ee28 8a27 	vmul.f32	s16, s16, s15
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	edd3 7a06 	vldr	s15, [r3, #24]
 80075e4:	eeb0 0a67 	vmov.f32	s0, s15
 80075e8:	f016 fdbc 	bl	801e164 <cosf>
 80075ec:	eef0 7a40 	vmov.f32	s15, s0
 80075f0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80075f4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	edc3 7ab5 	vstr	s15, [r3, #724]	; 0x2d4

				if(pp->base_shape== 0){
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 8007604:	2b00      	cmp	r3, #0
 8007606:	f040 8161 	bne.w	80078cc <PathPlan+0x17dc>
					pp->u1 = 0.707107 * ( pp->ruy - pp->rux) - (pp->outz * 1.0);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8007616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800761a:	ee17 0a90 	vmov	r0, s15
 800761e:	f7f8 ff93 	bl	8000548 <__aeabi_f2d>
 8007622:	f20f 6338 	addw	r3, pc, #1592	; 0x638
 8007626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762a:	f7f8 ffe5 	bl	80005f8 <__aeabi_dmul>
 800762e:	4602      	mov	r2, r0
 8007630:	460b      	mov	r3, r1
 8007632:	4614      	mov	r4, r2
 8007634:	461d      	mov	r5, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800763c:	4618      	mov	r0, r3
 800763e:	f7f8 ff83 	bl	8000548 <__aeabi_f2d>
 8007642:	4602      	mov	r2, r0
 8007644:	460b      	mov	r3, r1
 8007646:	4620      	mov	r0, r4
 8007648:	4629      	mov	r1, r5
 800764a:	f7f8 fe1d 	bl	8000288 <__aeabi_dsub>
 800764e:	4602      	mov	r2, r0
 8007650:	460b      	mov	r3, r1
 8007652:	4610      	mov	r0, r2
 8007654:	4619      	mov	r1, r3
 8007656:	f7f9 fac7 	bl	8000be8 <__aeabi_d2f>
 800765a:	4602      	mov	r2, r0
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = 0.707107 * ( pp->ruy + pp->rux) + (pp->outz * 1.0);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 800766e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007672:	ee17 0a90 	vmov	r0, s15
 8007676:	f7f8 ff67 	bl	8000548 <__aeabi_f2d>
 800767a:	f20f 53e0 	addw	r3, pc, #1504	; 0x5e0
 800767e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007682:	f7f8 ffb9 	bl	80005f8 <__aeabi_dmul>
 8007686:	4602      	mov	r2, r0
 8007688:	460b      	mov	r3, r1
 800768a:	4614      	mov	r4, r2
 800768c:	461d      	mov	r5, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007694:	4618      	mov	r0, r3
 8007696:	f7f8 ff57 	bl	8000548 <__aeabi_f2d>
 800769a:	4602      	mov	r2, r0
 800769c:	460b      	mov	r3, r1
 800769e:	4620      	mov	r0, r4
 80076a0:	4629      	mov	r1, r5
 80076a2:	f7f8 fdf3 	bl	800028c <__adddf3>
 80076a6:	4602      	mov	r2, r0
 80076a8:	460b      	mov	r3, r1
 80076aa:	4610      	mov	r0, r2
 80076ac:	4619      	mov	r1, r3
 80076ae:	f7f9 fa9b 	bl	8000be8 <__aeabi_d2f>
 80076b2:	4602      	mov	r2, r0
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u3 = 0.707107 * ( pp->ruy - pp->rux) + (pp->outz * 1.0);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 80076c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076ca:	ee17 0a90 	vmov	r0, s15
 80076ce:	f7f8 ff3b 	bl	8000548 <__aeabi_f2d>
 80076d2:	f20f 5388 	addw	r3, pc, #1416	; 0x588
 80076d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076da:	f7f8 ff8d 	bl	80005f8 <__aeabi_dmul>
 80076de:	4602      	mov	r2, r0
 80076e0:	460b      	mov	r3, r1
 80076e2:	4614      	mov	r4, r2
 80076e4:	461d      	mov	r5, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7f8 ff2b 	bl	8000548 <__aeabi_f2d>
 80076f2:	4602      	mov	r2, r0
 80076f4:	460b      	mov	r3, r1
 80076f6:	4620      	mov	r0, r4
 80076f8:	4629      	mov	r1, r5
 80076fa:	f7f8 fdc7 	bl	800028c <__adddf3>
 80076fe:	4602      	mov	r2, r0
 8007700:	460b      	mov	r3, r1
 8007702:	4610      	mov	r0, r2
 8007704:	4619      	mov	r1, r3
 8007706:	f7f9 fa6f 	bl	8000be8 <__aeabi_d2f>
 800770a:	4602      	mov	r2, r0
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
					pp->u4 = 0.707107 * ( pp->ruy + pp->rux) - (pp->outz * 1.0);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 800771e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007722:	ee17 0a90 	vmov	r0, s15
 8007726:	f7f8 ff0f 	bl	8000548 <__aeabi_f2d>
 800772a:	f20f 5330 	addw	r3, pc, #1328	; 0x530
 800772e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007732:	f7f8 ff61 	bl	80005f8 <__aeabi_dmul>
 8007736:	4602      	mov	r2, r0
 8007738:	460b      	mov	r3, r1
 800773a:	4614      	mov	r4, r2
 800773c:	461d      	mov	r5, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007744:	4618      	mov	r0, r3
 8007746:	f7f8 feff 	bl	8000548 <__aeabi_f2d>
 800774a:	4602      	mov	r2, r0
 800774c:	460b      	mov	r3, r1
 800774e:	4620      	mov	r0, r4
 8007750:	4629      	mov	r1, r5
 8007752:	f7f8 fd99 	bl	8000288 <__aeabi_dsub>
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	4610      	mov	r0, r2
 800775c:	4619      	mov	r1, r3
 800775e:	f7f9 fa43 	bl	8000be8 <__aeabi_d2f>
 8007762:	4602      	mov	r2, r0
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4

					pp->v1 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u1;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8007776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800777a:	ee17 0a90 	vmov	r0, s15
 800777e:	f7f8 fee3 	bl	8000548 <__aeabi_f2d>
 8007782:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 8007786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778a:	f7f8 ff35 	bl	80005f8 <__aeabi_dmul>
 800778e:	4602      	mov	r2, r0
 8007790:	460b      	mov	r3, r1
 8007792:	4614      	mov	r4, r2
 8007794:	461d      	mov	r5, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800779c:	4618      	mov	r0, r3
 800779e:	f7f8 fed3 	bl	8000548 <__aeabi_f2d>
 80077a2:	4602      	mov	r2, r0
 80077a4:	460b      	mov	r3, r1
 80077a6:	4620      	mov	r0, r4
 80077a8:	4629      	mov	r1, r5
 80077aa:	f7f8 fd6f 	bl	800028c <__adddf3>
 80077ae:	4602      	mov	r2, r0
 80077b0:	460b      	mov	r3, r1
 80077b2:	4610      	mov	r0, r2
 80077b4:	4619      	mov	r1, r3
 80077b6:	f7f9 fa17 	bl	8000be8 <__aeabi_d2f>
 80077ba:	4602      	mov	r2, r0
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u2;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80077ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077d2:	ee17 0a90 	vmov	r0, s15
 80077d6:	f7f8 feb7 	bl	8000548 <__aeabi_f2d>
 80077da:	f20f 4380 	addw	r3, pc, #1152	; 0x480
 80077de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e2:	f7f8 ff09 	bl	80005f8 <__aeabi_dmul>
 80077e6:	4602      	mov	r2, r0
 80077e8:	460b      	mov	r3, r1
 80077ea:	4614      	mov	r4, r2
 80077ec:	461d      	mov	r5, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7f8 fea7 	bl	8000548 <__aeabi_f2d>
 80077fa:	4602      	mov	r2, r0
 80077fc:	460b      	mov	r3, r1
 80077fe:	4620      	mov	r0, r4
 8007800:	4629      	mov	r1, r5
 8007802:	f7f8 fd43 	bl	800028c <__adddf3>
 8007806:	4602      	mov	r2, r0
 8007808:	460b      	mov	r3, r1
 800780a:	4610      	mov	r0, r2
 800780c:	4619      	mov	r1, r3
 800780e:	f7f9 f9eb 	bl	8000be8 <__aeabi_d2f>
 8007812:	4602      	mov	r2, r0
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u3;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8007826:	ee77 7a67 	vsub.f32	s15, s14, s15
 800782a:	ee17 0a90 	vmov	r0, s15
 800782e:	f7f8 fe8b 	bl	8000548 <__aeabi_f2d>
 8007832:	f20f 4328 	addw	r3, pc, #1064	; 0x428
 8007836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783a:	f7f8 fedd 	bl	80005f8 <__aeabi_dmul>
 800783e:	4602      	mov	r2, r0
 8007840:	460b      	mov	r3, r1
 8007842:	4614      	mov	r4, r2
 8007844:	461d      	mov	r5, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 800784c:	4618      	mov	r0, r3
 800784e:	f7f8 fe7b 	bl	8000548 <__aeabi_f2d>
 8007852:	4602      	mov	r2, r0
 8007854:	460b      	mov	r3, r1
 8007856:	4620      	mov	r0, r4
 8007858:	4629      	mov	r1, r5
 800785a:	f7f8 fd17 	bl	800028c <__adddf3>
 800785e:	4602      	mov	r2, r0
 8007860:	460b      	mov	r3, r1
 8007862:	4610      	mov	r0, r2
 8007864:	4619      	mov	r1, r3
 8007866:	f7f9 f9bf 	bl	8000be8 <__aeabi_d2f>
 800786a:	4602      	mov	r2, r0
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
					pp->v4 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u4;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800787e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007882:	ee17 0a90 	vmov	r0, s15
 8007886:	f7f8 fe5f 	bl	8000548 <__aeabi_f2d>
 800788a:	a3f4      	add	r3, pc, #976	; (adr r3, 8007c5c <PathPlan+0x1b6c>)
 800788c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007890:	f7f8 feb2 	bl	80005f8 <__aeabi_dmul>
 8007894:	4602      	mov	r2, r0
 8007896:	460b      	mov	r3, r1
 8007898:	4614      	mov	r4, r2
 800789a:	461d      	mov	r5, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7f8 fe50 	bl	8000548 <__aeabi_f2d>
 80078a8:	4602      	mov	r2, r0
 80078aa:	460b      	mov	r3, r1
 80078ac:	4620      	mov	r0, r4
 80078ae:	4629      	mov	r1, r5
 80078b0:	f7f8 fcec 	bl	800028c <__adddf3>
 80078b4:	4602      	mov	r2, r0
 80078b6:	460b      	mov	r3, r1
 80078b8:	4610      	mov	r0, r2
 80078ba:	4619      	mov	r1, r3
 80078bc:	f7f9 f994 	bl	8000be8 <__aeabi_d2f>
 80078c0:	4602      	mov	r2, r0
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
//				hb_count = HAL_GetTick();

			}
		}
	}
}
 80078c8:	f001 baff 	b.w	8008eca <PathPlan+0x2dda>
				} else if(pp->base_shape==1){
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	f041 82f9 	bne.w	8008eca <PathPlan+0x2dda>
					pp->u1 = (0.866 * pp->ruy) - (0.5 * pp->rux) + (pp->outz * 1.0);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80078de:	4618      	mov	r0, r3
 80078e0:	f7f8 fe32 	bl	8000548 <__aeabi_f2d>
 80078e4:	a3d8      	add	r3, pc, #864	; (adr r3, 8007c48 <PathPlan+0x1b58>)
 80078e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ea:	f7f8 fe85 	bl	80005f8 <__aeabi_dmul>
 80078ee:	4602      	mov	r2, r0
 80078f0:	460b      	mov	r3, r1
 80078f2:	4614      	mov	r4, r2
 80078f4:	461d      	mov	r5, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7f8 fe23 	bl	8000548 <__aeabi_f2d>
 8007902:	f04f 0200 	mov.w	r2, #0
 8007906:	4bd2      	ldr	r3, [pc, #840]	; (8007c50 <PathPlan+0x1b60>)
 8007908:	f7f8 fe76 	bl	80005f8 <__aeabi_dmul>
 800790c:	4602      	mov	r2, r0
 800790e:	460b      	mov	r3, r1
 8007910:	4620      	mov	r0, r4
 8007912:	4629      	mov	r1, r5
 8007914:	f7f8 fcb8 	bl	8000288 <__aeabi_dsub>
 8007918:	4602      	mov	r2, r0
 800791a:	460b      	mov	r3, r1
 800791c:	4614      	mov	r4, r2
 800791e:	461d      	mov	r5, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007926:	4618      	mov	r0, r3
 8007928:	f7f8 fe0e 	bl	8000548 <__aeabi_f2d>
 800792c:	4602      	mov	r2, r0
 800792e:	460b      	mov	r3, r1
 8007930:	4620      	mov	r0, r4
 8007932:	4629      	mov	r1, r5
 8007934:	f7f8 fcaa 	bl	800028c <__adddf3>
 8007938:	4602      	mov	r2, r0
 800793a:	460b      	mov	r3, r1
 800793c:	4610      	mov	r0, r2
 800793e:	4619      	mov	r1, r3
 8007940:	f7f9 f952 	bl	8000be8 <__aeabi_d2f>
 8007944:	4602      	mov	r2, r0
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = (0.866 * pp->ruy) + (0.5 * pp->rux) - (pp->outz * 1.0);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007952:	4618      	mov	r0, r3
 8007954:	f7f8 fdf8 	bl	8000548 <__aeabi_f2d>
 8007958:	a3bb      	add	r3, pc, #748	; (adr r3, 8007c48 <PathPlan+0x1b58>)
 800795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795e:	f7f8 fe4b 	bl	80005f8 <__aeabi_dmul>
 8007962:	4602      	mov	r2, r0
 8007964:	460b      	mov	r3, r1
 8007966:	4614      	mov	r4, r2
 8007968:	461d      	mov	r5, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007970:	4618      	mov	r0, r3
 8007972:	f7f8 fde9 	bl	8000548 <__aeabi_f2d>
 8007976:	f04f 0200 	mov.w	r2, #0
 800797a:	4bb5      	ldr	r3, [pc, #724]	; (8007c50 <PathPlan+0x1b60>)
 800797c:	f7f8 fe3c 	bl	80005f8 <__aeabi_dmul>
 8007980:	4602      	mov	r2, r0
 8007982:	460b      	mov	r3, r1
 8007984:	4620      	mov	r0, r4
 8007986:	4629      	mov	r1, r5
 8007988:	f7f8 fc80 	bl	800028c <__adddf3>
 800798c:	4602      	mov	r2, r0
 800798e:	460b      	mov	r3, r1
 8007990:	4614      	mov	r4, r2
 8007992:	461d      	mov	r5, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800799a:	4618      	mov	r0, r3
 800799c:	f7f8 fdd4 	bl	8000548 <__aeabi_f2d>
 80079a0:	4602      	mov	r2, r0
 80079a2:	460b      	mov	r3, r1
 80079a4:	4620      	mov	r0, r4
 80079a6:	4629      	mov	r1, r5
 80079a8:	f7f8 fc6e 	bl	8000288 <__aeabi_dsub>
 80079ac:	4602      	mov	r2, r0
 80079ae:	460b      	mov	r3, r1
 80079b0:	4610      	mov	r0, r2
 80079b2:	4619      	mov	r1, r3
 80079b4:	f7f9 f918 	bl	8000be8 <__aeabi_d2f>
 80079b8:	4602      	mov	r2, r0
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u3 = 1.0 * pp->rux + (pp->outz * 1.0);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	ed93 7ab2 	vldr	s14, [r3, #712]	; 0x2c8
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80079cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	edc3 7ab8 	vstr	s15, [r3, #736]	; 0x2e0
					pp->v1 = (0.866 * pp->rvy) - (0.5 * pp->rvx) + pp->u1;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079dc:	4618      	mov	r0, r3
 80079de:	f7f8 fdb3 	bl	8000548 <__aeabi_f2d>
 80079e2:	a399      	add	r3, pc, #612	; (adr r3, 8007c48 <PathPlan+0x1b58>)
 80079e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e8:	f7f8 fe06 	bl	80005f8 <__aeabi_dmul>
 80079ec:	4602      	mov	r2, r0
 80079ee:	460b      	mov	r3, r1
 80079f0:	4614      	mov	r4, r2
 80079f2:	461d      	mov	r5, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7f8 fda4 	bl	8000548 <__aeabi_f2d>
 8007a00:	f04f 0200 	mov.w	r2, #0
 8007a04:	4b92      	ldr	r3, [pc, #584]	; (8007c50 <PathPlan+0x1b60>)
 8007a06:	f7f8 fdf7 	bl	80005f8 <__aeabi_dmul>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	4620      	mov	r0, r4
 8007a10:	4629      	mov	r1, r5
 8007a12:	f7f8 fc39 	bl	8000288 <__aeabi_dsub>
 8007a16:	4602      	mov	r2, r0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	4614      	mov	r4, r2
 8007a1c:	461d      	mov	r5, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7f8 fd8f 	bl	8000548 <__aeabi_f2d>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	4620      	mov	r0, r4
 8007a30:	4629      	mov	r1, r5
 8007a32:	f7f8 fc2b 	bl	800028c <__adddf3>
 8007a36:	4602      	mov	r2, r0
 8007a38:	460b      	mov	r3, r1
 8007a3a:	4610      	mov	r0, r2
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	f7f9 f8d3 	bl	8000be8 <__aeabi_d2f>
 8007a42:	4602      	mov	r2, r0
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = (0.866 * pp->rvy) + (0.5 * pp->rvx) + pp->u2;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7f8 fd79 	bl	8000548 <__aeabi_f2d>
 8007a56:	a37c      	add	r3, pc, #496	; (adr r3, 8007c48 <PathPlan+0x1b58>)
 8007a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5c:	f7f8 fdcc 	bl	80005f8 <__aeabi_dmul>
 8007a60:	4602      	mov	r2, r0
 8007a62:	460b      	mov	r3, r1
 8007a64:	4614      	mov	r4, r2
 8007a66:	461d      	mov	r5, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7f8 fd6a 	bl	8000548 <__aeabi_f2d>
 8007a74:	f04f 0200 	mov.w	r2, #0
 8007a78:	4b75      	ldr	r3, [pc, #468]	; (8007c50 <PathPlan+0x1b60>)
 8007a7a:	f7f8 fdbd 	bl	80005f8 <__aeabi_dmul>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	460b      	mov	r3, r1
 8007a82:	4620      	mov	r0, r4
 8007a84:	4629      	mov	r1, r5
 8007a86:	f7f8 fc01 	bl	800028c <__adddf3>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	4614      	mov	r4, r2
 8007a90:	461d      	mov	r5, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7f8 fd55 	bl	8000548 <__aeabi_f2d>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	f7f8 fbf1 	bl	800028c <__adddf3>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	460b      	mov	r3, r1
 8007aae:	4610      	mov	r0, r2
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	f7f9 f899 	bl	8000be8 <__aeabi_d2f>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 1.0 * pp->rvx + pp->u3;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	ed93 7ab4 	vldr	s14, [r3, #720]	; 0x2d0
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8007aca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	edc3 7abc 	vstr	s15, [r3, #752]	; 0x2f0
}
 8007ad4:	f001 b9f9 	b.w	8008eca <PathPlan+0x2dda>
			led3 = 1;
 8007ad8:	4a5e      	ldr	r2, [pc, #376]	; (8007c54 <PathPlan+0x1b64>)
 8007ada:	7853      	ldrb	r3, [r2, #1]
 8007adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ae0:	7053      	strb	r3, [r2, #1]
			pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	331a      	adds	r3, #26
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	4413      	add	r3, r2
 8007af0:	ed93 7a00 	vldr	s14, [r3]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007afa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
			pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	3328      	adds	r3, #40	; 0x28
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	4413      	add	r3, r2
 8007b12:	3304      	adds	r3, #4
 8007b14:	ed93 7a00 	vldr	s14, [r3]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007b1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
			pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	3338      	adds	r3, #56	; 0x38
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	4413      	add	r3, r2
 8007b36:	ed93 7a00 	vldr	s14, [r3]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	edd3 7a04 	vldr	s15, [r3, #16]
 8007b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8007b50:	eef0 7ae7 	vabs.f32	s15, s15
 8007b54:	ee17 0a90 	vmov	r0, s15
 8007b58:	f7f8 fcf6 	bl	8000548 <__aeabi_f2d>
 8007b5c:	4604      	mov	r4, r0
 8007b5e:	460d      	mov	r5, r1
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8007b66:	eef0 7ae7 	vabs.f32	s15, s15
 8007b6a:	ee17 0a90 	vmov	r0, s15
 8007b6e:	f7f8 fceb 	bl	8000548 <__aeabi_f2d>
 8007b72:	4602      	mov	r2, r0
 8007b74:	460b      	mov	r3, r1
 8007b76:	4620      	mov	r0, r4
 8007b78:	4629      	mov	r1, r5
 8007b7a:	f7f8 fb87 	bl	800028c <__adddf3>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	460b      	mov	r3, r1
 8007b82:	4610      	mov	r0, r2
 8007b84:	4619      	mov	r1, r3
 8007b86:	f04f 0200 	mov.w	r2, #0
 8007b8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b8e:	f7f8 fe5d 	bl	800084c <__aeabi_ddiv>
 8007b92:	4602      	mov	r2, r0
 8007b94:	460b      	mov	r3, r1
 8007b96:	4614      	mov	r4, r2
 8007b98:	461d      	mov	r5, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7f8 fcd1 	bl	8000548 <__aeabi_f2d>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	460b      	mov	r3, r1
 8007baa:	4620      	mov	r0, r4
 8007bac:	4629      	mov	r1, r5
 8007bae:	f7f8 ff95 	bl	8000adc <__aeabi_dcmplt>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d013      	beq.n	8007be0 <PathPlan+0x1af0>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8007bbe:	eeb0 7ae7 	vabs.f32	s14, s15
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 8007bc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bd0:	d506      	bpl.n	8007be0 <PathPlan+0x1af0>
				pp->pp_lck = 1.0;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007bd8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007bdc:	601a      	str	r2, [r3, #0]
 8007bde:	e005      	b.n	8007bec <PathPlan+0x1afc>
				pp->pp_lck = 0.0;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007be6:	f04f 0200 	mov.w	r2, #0
 8007bea:	601a      	str	r2, [r3, #0]
			pp->pp_lck_count = pp->pp_lck_count + 1.0;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007bf2:	edd3 7a00 	vldr	s15, [r3]
 8007bf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bfa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007c04:	edc3 7a00 	vstr	s15, [r3]
			if(pp->pp_lck_count <= 60.0)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007c0e:	edd3 7a00 	vldr	s15, [r3]
 8007c12:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8007c58 <PathPlan+0x1b68>
 8007c16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c1e:	d821      	bhi.n	8007c64 <PathPlan+0x1b74>
				pp->pp_lck_cal = pp->pp_lck_cal + pp->pp_lck;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8007c26:	ed93 7a00 	vldr	s14, [r3]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007c30:	edd3 7a00 	vldr	s15, [r3]
 8007c34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8007c3e:	edc3 7a00 	vstr	s15, [r3]
 8007c42:	e045      	b.n	8007cd0 <PathPlan+0x1be0>
 8007c44:	f3af 8000 	nop.w
 8007c48:	a1cac083 	.word	0xa1cac083
 8007c4c:	3febb645 	.word	0x3febb645
 8007c50:	3fe00000 	.word	0x3fe00000
 8007c54:	40020814 	.word	0x40020814
 8007c58:	42700000 	.word	0x42700000
 8007c5c:	dbf8b9bb 	.word	0xdbf8b9bb
 8007c60:	3fe6a09e 	.word	0x3fe6a09e
				pp->pp_lck_final = (pp->pp_lck_cal) / (pp->pp_lck_count) ;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8007c6a:	edd3 6a00 	vldr	s13, [r3]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007c74:	ed93 7a00 	vldr	s14, [r3]
 8007c78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8007c82:	edc3 7a00 	vstr	s15, [r3]
				if(pp->pp_lck_final >= 0.95)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7f8 fc5a 	bl	8000548 <__aeabi_f2d>
 8007c94:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 8007c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9c:	f7f8 ff32 	bl	8000b04 <__aeabi_dcmpge>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d004      	beq.n	8007cb0 <PathPlan+0x1bc0>
					pp->pp_lck_enb = 1;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8007cae:	e003      	b.n	8007cb8 <PathPlan+0x1bc8>
					pp->pp_lck_enb = 0;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
				pp->pp_lck_count = 0.0;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007cbe:	f04f 0200 	mov.w	r2, #0
 8007cc2:	601a      	str	r2, [r3, #0]
				pp->pp_lck_cal   = 0.0;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8007cca:	f04f 0200 	mov.w	r2, #0
 8007cce:	601a      	str	r2, [r3, #0]
			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){ // Already almost at destination
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8007cd6:	eef0 7ae7 	vabs.f32	s15, s15
 8007cda:	ee17 0a90 	vmov	r0, s15
 8007cde:	f7f8 fc33 	bl	8000548 <__aeabi_f2d>
 8007ce2:	4604      	mov	r4, r0
 8007ce4:	460d      	mov	r5, r1
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8007cec:	eef0 7ae7 	vabs.f32	s15, s15
 8007cf0:	ee17 0a90 	vmov	r0, s15
 8007cf4:	f7f8 fc28 	bl	8000548 <__aeabi_f2d>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	4629      	mov	r1, r5
 8007d00:	f7f8 fac4 	bl	800028c <__adddf3>
 8007d04:	4602      	mov	r2, r0
 8007d06:	460b      	mov	r3, r1
 8007d08:	4610      	mov	r0, r2
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	f04f 0200 	mov.w	r2, #0
 8007d10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d14:	f7f8 fd9a 	bl	800084c <__aeabi_ddiv>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	4614      	mov	r4, r2
 8007d1e:	461d      	mov	r5, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7f8 fc0e 	bl	8000548 <__aeabi_f2d>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	460b      	mov	r3, r1
 8007d30:	4620      	mov	r0, r4
 8007d32:	4629      	mov	r1, r5
 8007d34:	f7f8 fed2 	bl	8000adc <__aeabi_dcmplt>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f000 84aa 	beq.w	8008694 <PathPlan+0x25a4>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8007d46:	eeb0 7ae7 	vabs.f32	s14, s15
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 8007d50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d58:	f140 849c 	bpl.w	8008694 <PathPlan+0x25a4>
				if(pp->point_count < (pp->target_point - 2)){ // Checking is second last point or not
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007d68:	3b02      	subs	r3, #2
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	f280 8206 	bge.w	800817c <PathPlan+0x208c>
					if(pp->target_accurate[pp->point_count] == 1.0){ // point_lock enable
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	3346      	adds	r3, #70	; 0x46
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	4413      	add	r3, r2
 8007d7e:	3304      	adds	r3, #4
 8007d80:	edd3 7a00 	vldr	s15, [r3]
 8007d84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d88:	eef4 7a47 	vcmp.f32	s15, s14
 8007d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d90:	f040 813a 	bne.w	8008008 <PathPlan+0x1f18>
						if(pp->pp_lck_enb == 1){ // After < tol some time, lck_enb = 1
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	f040 847a 	bne.w	8008694 <PathPlan+0x25a4>
							pp->point_count++; // Showing reached previous destination
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007da6:	1c5a      	adds	r2, r3, #1
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
							pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	331a      	adds	r3, #26
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	4413      	add	r3, r2
 8007dbc:	ed93 7a00 	vldr	s14, [r3]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007dc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
							pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	3328      	adds	r3, #40	; 0x28
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4413      	add	r3, r2
 8007dde:	3304      	adds	r3, #4
 8007de0:	ed93 7a00 	vldr	s14, [r3]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007dea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
							pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	3338      	adds	r3, #56	; 0x38
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4413      	add	r3, r2
 8007e02:	ed93 7a00 	vldr	s14, [r3]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	edd3 7a04 	vldr	s15, [r3, #16]
 8007e0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
							if(pp->target_x[pp->point_count]-pp->real_x){
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	331a      	adds	r3, #26
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4413      	add	r3, r2
 8007e24:	ed93 7a00 	vldr	s14, [r3]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e32:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e3a:	d03d      	beq.n	8007eb8 <PathPlan+0x1dc8>
										1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	331a      	adds	r3, #26
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	4413      	add	r3, r2
 8007e4a:	ed93 7a00 	vldr	s14, [r3]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007e54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e58:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 8007e5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_x[pp->point_count],
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	3384      	adds	r3, #132	; 0x84
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	4413      	add	r3, r2
 8007e72:	3304      	adds	r3, #4
 8007e74:	edd3 7a00 	vldr	s15, [r3]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	edd3 6aa3 	vldr	s13, [r3, #652]	; 0x28c
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	ed93 6aa5 	vldr	s12, [r3, #660]	; 0x294
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	edd3 5aa7 	vldr	s11, [r3, #668]	; 0x29c
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007e90:	4618      	mov	r0, r3
 8007e92:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007e96:	eeb0 3a65 	vmov.f32	s6, s11
 8007e9a:	eef0 2a46 	vmov.f32	s5, s12
 8007e9e:	eeb0 2a66 	vmov.f32	s4, s13
 8007ea2:	eef0 1a67 	vmov.f32	s3, s15
 8007ea6:	eeb0 1a47 	vmov.f32	s2, s14
 8007eaa:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007eae:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8008178 <PathPlan+0x2088>
 8007eb2:	f7fd fd11 	bl	80058d8 <PIDGainInit>
 8007eb6:	e028      	b.n	8007f0a <PathPlan+0x1e1a>
										pp->ku_x[pp->point_count],
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	3384      	adds	r3, #132	; 0x84
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	4413      	add	r3, r2
 8007ec6:	3304      	adds	r3, #4
 8007ec8:	edd3 7a00 	vldr	s15, [r3]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	ed93 7aa3 	vldr	s14, [r3, #652]	; 0x28c
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	edd3 6aa5 	vldr	s13, [r3, #660]	; 0x294
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	ed93 6aa7 	vldr	s12, [r3, #668]	; 0x29c
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007eea:	eeb0 3a46 	vmov.f32	s6, s12
 8007eee:	eef0 2a66 	vmov.f32	s5, s13
 8007ef2:	eeb0 2a47 	vmov.f32	s4, s14
 8007ef6:	eef0 1a67 	vmov.f32	s3, s15
 8007efa:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8007efe:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007f02:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8008178 <PathPlan+0x2088>
 8007f06:	f7fd fce7 	bl	80058d8 <PIDGainInit>
							if(pp->target_y[pp->point_count]-pp->real_y){
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	3328      	adds	r3, #40	; 0x28
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	3304      	adds	r3, #4
 8007f1a:	ed93 7a00 	vldr	s14, [r3]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007f24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f28:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f30:	d03d      	beq.n	8007fae <PathPlan+0x1ebe>
										1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	3328      	adds	r3, #40	; 0x28
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	3304      	adds	r3, #4
 8007f42:	ed93 7a00 	vldr	s14, [r3]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007f4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f50:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 8007f54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_y[pp->point_count],
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	3394      	adds	r3, #148	; 0x94
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	4413      	add	r3, r2
 8007f6a:	edd3 7a00 	vldr	s15, [r3]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	edd3 6aa3 	vldr	s13, [r3, #652]	; 0x28c
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	ed93 6aa5 	vldr	s12, [r3, #660]	; 0x294
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	edd3 5aa7 	vldr	s11, [r3, #668]	; 0x29c
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007f86:	4618      	mov	r0, r3
 8007f88:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007f8c:	eeb0 3a65 	vmov.f32	s6, s11
 8007f90:	eef0 2a46 	vmov.f32	s5, s12
 8007f94:	eeb0 2a66 	vmov.f32	s4, s13
 8007f98:	eef0 1a67 	vmov.f32	s3, s15
 8007f9c:	eeb0 1a47 	vmov.f32	s2, s14
 8007fa0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007fa4:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8008178 <PathPlan+0x2088>
 8007fa8:	f7fd fc96 	bl	80058d8 <PIDGainInit>
 8007fac:	e027      	b.n	8007ffe <PathPlan+0x1f0e>
										pp->ku_y[pp->point_count],
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	3394      	adds	r3, #148	; 0x94
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4413      	add	r3, r2
 8007fbc:	edd3 7a00 	vldr	s15, [r3]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	ed93 7aa3 	vldr	s14, [r3, #652]	; 0x28c
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	edd3 6aa5 	vldr	s13, [r3, #660]	; 0x294
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	ed93 6aa7 	vldr	s12, [r3, #668]	; 0x29c
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007fd8:	4618      	mov	r0, r3
 8007fda:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007fde:	eeb0 3a46 	vmov.f32	s6, s12
 8007fe2:	eef0 2a66 	vmov.f32	s5, s13
 8007fe6:	eeb0 2a47 	vmov.f32	s4, s14
 8007fea:	eef0 1a67 	vmov.f32	s3, s15
 8007fee:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8007ff2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007ff6:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8008178 <PathPlan+0x2088>
 8007ffa:	f7fd fc6d 	bl	80058d8 <PIDGainInit>
							pp->pp_lck_enb = 0;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8008006:	e345      	b.n	8008694 <PathPlan+0x25a4>
						pp->point_count++; // Assuming reached previous point
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800800e:	1c5a      	adds	r2, r3, #1
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
						pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	331a      	adds	r3, #26
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	4413      	add	r3, r2
 8008024:	ed93 7a00 	vldr	s14, [r3]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800802e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
						pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	3328      	adds	r3, #40	; 0x28
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4413      	add	r3, r2
 8008046:	3304      	adds	r3, #4
 8008048:	ed93 7a00 	vldr	s14, [r3]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008052:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
						pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	3338      	adds	r3, #56	; 0x38
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4413      	add	r3, r2
 800806a:	ed93 7a00 	vldr	s14, [r3]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	edd3 7a04 	vldr	s15, [r3, #16]
 8008074:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
						if(pp->target_x[pp->point_count]-pp->real_x){
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	331a      	adds	r3, #26
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	4413      	add	r3, r2
 800808c:	ed93 7a00 	vldr	s14, [r3]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008096:	ee77 7a67 	vsub.f32	s15, s14, s15
 800809a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800809e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080a2:	d01d      	beq.n	80080e0 <PathPlan+0x1ff0>
							PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	331a      	adds	r3, #26
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	4413      	add	r3, r2
 80080b2:	ed93 7a00 	vldr	s14, [r3]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80080bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080c0:	eef0 7ae7 	vabs.f32	s15, s15
 80080c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80080d2:	4619      	mov	r1, r3
 80080d4:	eeb0 0a47 	vmov.f32	s0, s14
 80080d8:	2002      	movs	r0, #2
 80080da:	f7fd fc30 	bl	800593e <PIDGainSet>
 80080de:	e008      	b.n	80080f2 <PathPlan+0x2002>
							PIDGainSet(KE,1.0,&(pp->x));
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80080e6:	4619      	mov	r1, r3
 80080e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80080ec:	2002      	movs	r0, #2
 80080ee:	f7fd fc26 	bl	800593e <PIDGainSet>
						if(pp->target_y[pp->point_count]-pp->real_y){
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	3328      	adds	r3, #40	; 0x28
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4413      	add	r3, r2
 8008100:	3304      	adds	r3, #4
 8008102:	ed93 7a00 	vldr	s14, [r3]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800810c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008110:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008118:	d01e      	beq.n	8008158 <PathPlan+0x2068>
							PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	3328      	adds	r3, #40	; 0x28
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	4413      	add	r3, r2
 8008128:	3304      	adds	r3, #4
 800812a:	ed93 7a00 	vldr	s14, [r3]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008134:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008138:	eef0 7ae7 	vabs.f32	s15, s15
 800813c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008140:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800814a:	4619      	mov	r1, r3
 800814c:	eeb0 0a47 	vmov.f32	s0, s14
 8008150:	2002      	movs	r0, #2
 8008152:	f7fd fbf4 	bl	800593e <PIDGainSet>
 8008156:	e29d      	b.n	8008694 <PathPlan+0x25a4>
							PIDGainSet(KE,1.0,&(pp->y));
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800815e:	4619      	mov	r1, r3
 8008160:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008164:	2002      	movs	r0, #2
 8008166:	f7fd fbea 	bl	800593e <PIDGainSet>
 800816a:	e293      	b.n	8008694 <PathPlan+0x25a4>
 800816c:	f3af 8000 	nop.w
 8008170:	66666666 	.word	0x66666666
 8008174:	3fee6666 	.word	0x3fee6666
 8008178:	3ba3d70a 	.word	0x3ba3d70a
				} else if(pp->point_count == (pp->target_point - 2)){ // Reached second last going last point
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008188:	3b02      	subs	r3, #2
 800818a:	429a      	cmp	r2, r3
 800818c:	f040 81fe 	bne.w	800858c <PathPlan+0x249c>
					if(pp->target_accurate[pp->point_count] == 1.0){ // point_lock enable
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	3346      	adds	r3, #70	; 0x46
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4413      	add	r3, r2
 800819e:	3304      	adds	r3, #4
 80081a0:	edd3 7a00 	vldr	s15, [r3]
 80081a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081a8:	eef4 7a47 	vcmp.f32	s15, s14
 80081ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081b0:	f040 813a 	bne.w	8008428 <PathPlan+0x2338>
						if(pp->pp_lck_enb == 1){
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	f040 826a 	bne.w	8008694 <PathPlan+0x25a4>
							pp->point_count++;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80081c6:	1c5a      	adds	r2, r3, #1
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
							pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	331a      	adds	r3, #26
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	4413      	add	r3, r2
 80081dc:	ed93 7a00 	vldr	s14, [r3]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80081e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
							pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	3328      	adds	r3, #40	; 0x28
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	4413      	add	r3, r2
 80081fe:	3304      	adds	r3, #4
 8008200:	ed93 7a00 	vldr	s14, [r3]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800820a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
							pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	3338      	adds	r3, #56	; 0x38
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	4413      	add	r3, r2
 8008222:	ed93 7a00 	vldr	s14, [r3]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	edd3 7a04 	vldr	s15, [r3, #16]
 800822c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
							if(pp->target_x[pp->point_count]-pp->real_x){
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	331a      	adds	r3, #26
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	4413      	add	r3, r2
 8008244:	ed93 7a00 	vldr	s14, [r3]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800824e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008252:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800825a:	d03d      	beq.n	80082d8 <PathPlan+0x21e8>
										1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	331a      	adds	r3, #26
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4413      	add	r3, r2
 800826a:	ed93 7a00 	vldr	s14, [r3]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008274:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008278:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 800827c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008280:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_x[pp->point_count],
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	3384      	adds	r3, #132	; 0x84
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	4413      	add	r3, r2
 8008292:	3304      	adds	r3, #4
 8008294:	edd3 7a00 	vldr	s15, [r3]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	edd3 6aa4 	vldr	s13, [r3, #656]	; 0x290
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	ed93 6aa6 	vldr	s12, [r3, #664]	; 0x298
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	edd3 5aa8 	vldr	s11, [r3, #672]	; 0x2a0
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80082b0:	4618      	mov	r0, r3
 80082b2:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80082b6:	eeb0 3a65 	vmov.f32	s6, s11
 80082ba:	eef0 2a46 	vmov.f32	s5, s12
 80082be:	eeb0 2a66 	vmov.f32	s4, s13
 80082c2:	eef0 1a67 	vmov.f32	s3, s15
 80082c6:	eeb0 1a47 	vmov.f32	s2, s14
 80082ca:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80082ce:	ed1f 0a56 	vldr	s0, [pc, #-344]	; 8008178 <PathPlan+0x2088>
 80082d2:	f7fd fb01 	bl	80058d8 <PIDGainInit>
 80082d6:	e028      	b.n	800832a <PathPlan+0x223a>
										pp->ku_x[pp->point_count],
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	3384      	adds	r3, #132	; 0x84
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4413      	add	r3, r2
 80082e6:	3304      	adds	r3, #4
 80082e8:	edd3 7a00 	vldr	s15, [r3]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	ed93 7aa4 	vldr	s14, [r3, #656]	; 0x290
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	edd3 6aa6 	vldr	s13, [r3, #664]	; 0x298
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	ed93 6aa8 	vldr	s12, [r3, #672]	; 0x2a0
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8008304:	4618      	mov	r0, r3
 8008306:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 800830a:	eeb0 3a46 	vmov.f32	s6, s12
 800830e:	eef0 2a66 	vmov.f32	s5, s13
 8008312:	eeb0 2a47 	vmov.f32	s4, s14
 8008316:	eef0 1a67 	vmov.f32	s3, s15
 800831a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800831e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8008322:	ed1f 0a6b 	vldr	s0, [pc, #-428]	; 8008178 <PathPlan+0x2088>
 8008326:	f7fd fad7 	bl	80058d8 <PIDGainInit>
							if(pp->target_y[pp->point_count]-pp->real_y){
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	3328      	adds	r3, #40	; 0x28
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4413      	add	r3, r2
 8008338:	3304      	adds	r3, #4
 800833a:	ed93 7a00 	vldr	s14, [r3]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008344:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008348:	eef5 7a40 	vcmp.f32	s15, #0.0
 800834c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008350:	d03d      	beq.n	80083ce <PathPlan+0x22de>
										1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	3328      	adds	r3, #40	; 0x28
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	4413      	add	r3, r2
 8008360:	3304      	adds	r3, #4
 8008362:	ed93 7a00 	vldr	s14, [r3]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800836c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008370:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 8008374:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008378:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_y[pp->point_count],
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	3394      	adds	r3, #148	; 0x94
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4413      	add	r3, r2
 800838a:	edd3 7a00 	vldr	s15, [r3]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	edd3 6aa4 	vldr	s13, [r3, #656]	; 0x290
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	ed93 6aa6 	vldr	s12, [r3, #664]	; 0x298
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	edd3 5aa8 	vldr	s11, [r3, #672]	; 0x2a0
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80083a6:	4618      	mov	r0, r3
 80083a8:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80083ac:	eeb0 3a65 	vmov.f32	s6, s11
 80083b0:	eef0 2a46 	vmov.f32	s5, s12
 80083b4:	eeb0 2a66 	vmov.f32	s4, s13
 80083b8:	eef0 1a67 	vmov.f32	s3, s15
 80083bc:	eeb0 1a47 	vmov.f32	s2, s14
 80083c0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80083c4:	ed1f 0a94 	vldr	s0, [pc, #-592]	; 8008178 <PathPlan+0x2088>
 80083c8:	f7fd fa86 	bl	80058d8 <PIDGainInit>
 80083cc:	e027      	b.n	800841e <PathPlan+0x232e>
										pp->ku_y[pp->point_count],
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	3394      	adds	r3, #148	; 0x94
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	4413      	add	r3, r2
 80083dc:	edd3 7a00 	vldr	s15, [r3]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	ed93 7aa4 	vldr	s14, [r3, #656]	; 0x290
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	edd3 6aa6 	vldr	s13, [r3, #664]	; 0x298
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	ed93 6aa8 	vldr	s12, [r3, #672]	; 0x2a0
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80083f8:	4618      	mov	r0, r3
 80083fa:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80083fe:	eeb0 3a46 	vmov.f32	s6, s12
 8008402:	eef0 2a66 	vmov.f32	s5, s13
 8008406:	eeb0 2a47 	vmov.f32	s4, s14
 800840a:	eef0 1a67 	vmov.f32	s3, s15
 800840e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8008412:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8008416:	ed1f 0aa8 	vldr	s0, [pc, #-672]	; 8008178 <PathPlan+0x2088>
 800841a:	f7fd fa5d 	bl	80058d8 <PIDGainInit>
							pp->pp_lck_enb = 0;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8008426:	e135      	b.n	8008694 <PathPlan+0x25a4>
						pp->point_count++;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800842e:	1c5a      	adds	r2, r3, #1
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
						pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	331a      	adds	r3, #26
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4413      	add	r3, r2
 8008444:	ed93 7a00 	vldr	s14, [r3]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800844e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
						pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	3328      	adds	r3, #40	; 0x28
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	4413      	add	r3, r2
 8008466:	3304      	adds	r3, #4
 8008468:	ed93 7a00 	vldr	s14, [r3]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008472:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
						pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	3338      	adds	r3, #56	; 0x38
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	4413      	add	r3, r2
 800848a:	ed93 7a00 	vldr	s14, [r3]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	edd3 7a04 	vldr	s15, [r3, #16]
 8008494:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
						if(pp->target_x[pp->point_count]-pp->real_x){
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	331a      	adds	r3, #26
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	4413      	add	r3, r2
 80084ac:	ed93 7a00 	vldr	s14, [r3]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80084b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80084be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084c2:	d01d      	beq.n	8008500 <PathPlan+0x2410>
							PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	331a      	adds	r3, #26
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	4413      	add	r3, r2
 80084d2:	ed93 7a00 	vldr	s14, [r3]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80084dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084e0:	eef0 7ae7 	vabs.f32	s15, s15
 80084e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80084f2:	4619      	mov	r1, r3
 80084f4:	eeb0 0a47 	vmov.f32	s0, s14
 80084f8:	2002      	movs	r0, #2
 80084fa:	f7fd fa20 	bl	800593e <PIDGainSet>
 80084fe:	e008      	b.n	8008512 <PathPlan+0x2422>
							PIDGainSet(KE,1.0,&(pp->x));
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8008506:	4619      	mov	r1, r3
 8008508:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800850c:	2002      	movs	r0, #2
 800850e:	f7fd fa16 	bl	800593e <PIDGainSet>
						if(pp->target_y[pp->point_count]-pp->real_y){
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	3328      	adds	r3, #40	; 0x28
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	4413      	add	r3, r2
 8008520:	3304      	adds	r3, #4
 8008522:	ed93 7a00 	vldr	s14, [r3]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800852c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008530:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008538:	d01e      	beq.n	8008578 <PathPlan+0x2488>
							PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	3328      	adds	r3, #40	; 0x28
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	4413      	add	r3, r2
 8008548:	3304      	adds	r3, #4
 800854a:	ed93 7a00 	vldr	s14, [r3]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008554:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008558:	eef0 7ae7 	vabs.f32	s15, s15
 800855c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008560:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800856a:	4619      	mov	r1, r3
 800856c:	eeb0 0a47 	vmov.f32	s0, s14
 8008570:	2002      	movs	r0, #2
 8008572:	f7fd f9e4 	bl	800593e <PIDGainSet>
 8008576:	e08d      	b.n	8008694 <PathPlan+0x25a4>
							PIDGainSet(KE,1.0,&(pp->y));
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800857e:	4619      	mov	r1, r3
 8008580:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008584:	2002      	movs	r0, #2
 8008586:	f7fd f9da 	bl	800593e <PIDGainSet>
 800858a:	e083      	b.n	8008694 <PathPlan+0x25a4>
				}else if(fabs(pp->error_x)<pp->f_tol_xy && fabs(pp->error_y)<pp->f_tol_xy && (int)pp->error_z<=pp->f_tol_z){ // Reached last point
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8008592:	eeb0 7ae7 	vabs.f32	s14, s15
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 800859c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80085a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085a4:	d576      	bpl.n	8008694 <PathPlan+0x25a4>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 80085ac:	eeb0 7ae7 	vabs.f32	s14, s15
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 80085b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80085ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085be:	d569      	bpl.n	8008694 <PathPlan+0x25a4>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 80085c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	edd3 7ac1 	vldr	s15, [r3, #772]	; 0x304
 80085d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80085d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085dc:	d85a      	bhi.n	8008694 <PathPlan+0x25a4>
					if(pp->target_accurate[pp->point_count] == 1.0){
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	3346      	adds	r3, #70	; 0x46
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	4413      	add	r3, r2
 80085ec:	3304      	adds	r3, #4
 80085ee:	edd3 7a00 	vldr	s15, [r3]
 80085f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80085f6:	eef4 7a47 	vcmp.f32	s15, s14
 80085fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085fe:	d129      	bne.n	8008654 <PathPlan+0x2564>
						if(pp->pp_lck_enb == 1){
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8008606:	2b01      	cmp	r3, #1
 8008608:	d144      	bne.n	8008694 <PathPlan+0x25a4>
							VESCNavStop();
 800860a:	f005 fa61 	bl	800dad0 <VESCNavStop>
							led3 = 0;
 800860e:	4a7e      	ldr	r2, [pc, #504]	; (8008808 <PathPlan+0x2718>)
 8008610:	7853      	ldrb	r3, [r2, #1]
 8008612:	f36f 13c7 	bfc	r3, #7, #1
 8008616:	7053      	strb	r3, [r2, #1]
							PIDDelayInit(&(pp->x));
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800861e:	4618      	mov	r0, r3
 8008620:	f7fd fadf 	bl	8005be2 <PIDDelayInit>
							PIDDelayInit(&(pp->y));
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800862a:	4618      	mov	r0, r3
 800862c:	f7fd fad9 	bl	8005be2 <PIDDelayInit>
							PIDDelayInit(&(pp->z));
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8008636:	4618      	mov	r0, r3
 8008638:	f7fd fad3 	bl	8005be2 <PIDDelayInit>
							pp->pp_start=0;
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8008642:	f36f 0300 	bfc	r3, #0, #1
 8008646:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
							pp->pp_lck_enb = 0;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8008652:	e01f      	b.n	8008694 <PathPlan+0x25a4>
						led3 = 0;
 8008654:	4a6c      	ldr	r2, [pc, #432]	; (8008808 <PathPlan+0x2718>)
 8008656:	7853      	ldrb	r3, [r2, #1]
 8008658:	f36f 13c7 	bfc	r3, #7, #1
 800865c:	7053      	strb	r3, [r2, #1]
						VESCNavStop();
 800865e:	f005 fa37 	bl	800dad0 <VESCNavStop>
						PIDDelayInit(&(pp->x));
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8008668:	4618      	mov	r0, r3
 800866a:	f7fd faba 	bl	8005be2 <PIDDelayInit>
						PIDDelayInit(&(pp->y));
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8008674:	4618      	mov	r0, r3
 8008676:	f7fd fab4 	bl	8005be2 <PIDDelayInit>
						PIDDelayInit(&(pp->z));
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8008680:	4618      	mov	r0, r3
 8008682:	f7fd faae 	bl	8005be2 <PIDDelayInit>
						pp->pp_start=0;
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 800868c:	f36f 0300 	bfc	r3, #0, #1
 8008690:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
			if(pp->pp_start){
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800869a:	f003 0301 	and.w	r3, r3, #1
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f000 8412 	beq.w	8008eca <PathPlan+0x2dda>
				pp->dx = pp->target_x[pp->point_count] - pp->prev_real_x;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	331a      	adds	r3, #26
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	4413      	add	r3, r2
 80086b4:	ed93 7a00 	vldr	s14, [r3]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80086be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
				pp->dy = pp->target_y[pp->point_count] - pp->prev_real_y;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	3328      	adds	r3, #40	; 0x28
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	4413      	add	r3, r2
 80086d6:	3304      	adds	r3, #4
 80086d8:	ed93 7a00 	vldr	s14, [r3]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80086e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
				pp->rotate=0;
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 80086f2:	f36f 03c3 	bfc	r3, #3, #1
 80086f6:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
				if ((pp->dx != 0.0 || pp->dx != -0.0)&&(pp->dy != -0.0 || pp->dy != 0.0)){
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008700:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008708:	d107      	bne.n	800871a <PathPlan+0x262a>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008710:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008718:	d021      	beq.n	800875e <PathPlan+0x266e>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008720:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008728:	d107      	bne.n	800873a <PathPlan+0x264a>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008730:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008738:	d011      	beq.n	800875e <PathPlan+0x266e>
					pp->heading = atan2f(pp->dy, pp->dx);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8008746:	eef0 0a47 	vmov.f32	s1, s14
 800874a:	eeb0 0a67 	vmov.f32	s0, s15
 800874e:	f015 fe75 	bl	801e43c <atan2f>
 8008752:	eef0 7a40 	vmov.f32	s15, s0
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
 800875c:	e075      	b.n	800884a <PathPlan+0x275a>
					if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy < 0.0) { // Backward
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008764:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800876c:	d007      	beq.n	800877e <PathPlan+0x268e>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008774:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800877c:	d10b      	bne.n	8008796 <PathPlan+0x26a6>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008784:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800878c:	d503      	bpl.n	8008796 <PathPlan+0x26a6>
						pp->heading = -1.5708;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a1e      	ldr	r2, [pc, #120]	; (800880c <PathPlan+0x271c>)
 8008792:	65da      	str	r2, [r3, #92]	; 0x5c
 8008794:	e059      	b.n	800884a <PathPlan+0x275a>
					} else if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy > 0.0) { // Forward
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800879c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80087a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087a4:	d007      	beq.n	80087b6 <PathPlan+0x26c6>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80087ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80087b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087b4:	d10b      	bne.n	80087ce <PathPlan+0x26de>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80087bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80087c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087c4:	dd03      	ble.n	80087ce <PathPlan+0x26de>
						pp->heading = 1.5708;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a11      	ldr	r2, [pc, #68]	; (8008810 <PathPlan+0x2720>)
 80087ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80087cc:	e03d      	b.n	800884a <PathPlan+0x275a>
					} else if((pp->dy == 0.0 || pp->dy == -0.0) && pp->dx > 0){ // Right
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80087d4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80087d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087dc:	d007      	beq.n	80087ee <PathPlan+0x26fe>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80087e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80087e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ec:	d112      	bne.n	8008814 <PathPlan+0x2724>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80087f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80087f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087fc:	dd0a      	ble.n	8008814 <PathPlan+0x2724>
						pp->heading = 0.0;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f04f 0200 	mov.w	r2, #0
 8008804:	65da      	str	r2, [r3, #92]	; 0x5c
 8008806:	e020      	b.n	800884a <PathPlan+0x275a>
 8008808:	40020814 	.word	0x40020814
 800880c:	bfc90ff9 	.word	0xbfc90ff9
 8008810:	3fc90ff9 	.word	0x3fc90ff9
					else if((pp->dy == 0.0 || pp->dy == -0.0) && pp->dx < 0) // Left
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800881a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800881e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008822:	d007      	beq.n	8008834 <PathPlan+0x2744>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800882a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800882e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008832:	d10a      	bne.n	800884a <PathPlan+0x275a>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800883a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800883e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008842:	d502      	bpl.n	800884a <PathPlan+0x275a>
						pp->heading = M_PI;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	4ad8      	ldr	r2, [pc, #864]	; (8008ba8 <PathPlan+0x2ab8>)
 8008848:	65da      	str	r2, [r3, #92]	; 0x5c
				pp->vx  = pp->target_vel[pp->point_count] * cosf(pp->heading);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	3374      	adds	r3, #116	; 0x74
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	4413      	add	r3, r2
 8008858:	ed93 8a00 	vldr	s16, [r3]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8008862:	eeb0 0a67 	vmov.f32	s0, s15
 8008866:	f015 fc7d 	bl	801e164 <cosf>
 800886a:	eef0 7a40 	vmov.f32	s15, s0
 800886e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
				pp->vy  = pp->target_vel[pp->point_count] * sinf(pp->heading);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	3374      	adds	r3, #116	; 0x74
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	4413      	add	r3, r2
 8008886:	ed93 8a00 	vldr	s16, [r3]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8008890:	eeb0 0a67 	vmov.f32	s0, s15
 8008894:	f015 fcae 	bl	801e1f4 <sinf>
 8008898:	eef0 7a40 	vmov.f32	s15, s0
 800889c:	ee68 7a27 	vmul.f32	s15, s16, s15
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
				if(pp->rotate){
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 80088ac:	f003 0308 	and.w	r3, r3, #8
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d007      	beq.n	80088c6 <PathPlan+0x27d6>
					pp->vx = pp->vy = 0.0;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f04f 0200 	mov.w	r2, #0
 80088bc:	665a      	str	r2, [r3, #100]	; 0x64
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	661a      	str	r2, [r3, #96]	; 0x60
				PID(&(pp->x));
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fd f9a6 	bl	8005c1e <PID>
				PID(&(pp->y));
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80088d8:	4618      	mov	r0, r3
 80088da:	f7fd f9a0 	bl	8005c1e <PID>
				PID(&(pp->z));
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7fd f99a 	bl	8005c1e <PID>
				pp->rux =   pp->outx*cosf(pp->real_z_rad) - pp->outy*sinf(pp->real_z_rad);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	edd3 7a06 	vldr	s15, [r3, #24]
 80088f6:	eeb0 0a67 	vmov.f32	s0, s15
 80088fa:	f015 fc33 	bl	801e164 <cosf>
 80088fe:	eef0 7a40 	vmov.f32	s15, s0
 8008902:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	edd3 7a06 	vldr	s15, [r3, #24]
 8008912:	eeb0 0a67 	vmov.f32	s0, s15
 8008916:	f015 fc6d 	bl	801e1f4 <sinf>
 800891a:	eef0 7a40 	vmov.f32	s15, s0
 800891e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8008922:	ee78 7a67 	vsub.f32	s15, s16, s15
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
				pp->ruy =   pp->outx*sinf(pp->real_z_rad) + pp->outy*cosf(pp->real_z_rad);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	edd3 7a06 	vldr	s15, [r3, #24]
 8008938:	eeb0 0a67 	vmov.f32	s0, s15
 800893c:	f015 fc5a 	bl	801e1f4 <sinf>
 8008940:	eef0 7a40 	vmov.f32	s15, s0
 8008944:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	edd3 7a06 	vldr	s15, [r3, #24]
 8008954:	eeb0 0a67 	vmov.f32	s0, s15
 8008958:	f015 fc04 	bl	801e164 <cosf>
 800895c:	eef0 7a40 	vmov.f32	s15, s0
 8008960:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8008964:	ee78 7a27 	vadd.f32	s15, s16, s15
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	edc3 7ab3 	vstr	s15, [r3, #716]	; 0x2cc
				pp->rvx =   pp->vx*cosf(pp->real_z_rad) - pp->vy*sinf(pp->real_z_rad);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	edd3 7a06 	vldr	s15, [r3, #24]
 800897a:	eeb0 0a67 	vmov.f32	s0, s15
 800897e:	f015 fbf1 	bl	801e164 <cosf>
 8008982:	eef0 7a40 	vmov.f32	s15, s0
 8008986:	ee28 8a27 	vmul.f32	s16, s16, s15
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	edd3 7a06 	vldr	s15, [r3, #24]
 8008996:	eeb0 0a67 	vmov.f32	s0, s15
 800899a:	f015 fc2b 	bl	801e1f4 <sinf>
 800899e:	eef0 7a40 	vmov.f32	s15, s0
 80089a2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80089a6:	ee78 7a67 	vsub.f32	s15, s16, s15
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	edc3 7ab4 	vstr	s15, [r3, #720]	; 0x2d0
				pp->rvy =   pp->vx*sinf(pp->real_z_rad) + pp->vy*cosf(pp->real_z_rad);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	edd3 7a06 	vldr	s15, [r3, #24]
 80089bc:	eeb0 0a67 	vmov.f32	s0, s15
 80089c0:	f015 fc18 	bl	801e1f4 <sinf>
 80089c4:	eef0 7a40 	vmov.f32	s15, s0
 80089c8:	ee28 8a27 	vmul.f32	s16, s16, s15
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80089d8:	eeb0 0a67 	vmov.f32	s0, s15
 80089dc:	f015 fbc2 	bl	801e164 <cosf>
 80089e0:	eef0 7a40 	vmov.f32	s15, s0
 80089e4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80089e8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	edc3 7ab5 	vstr	s15, [r3, #724]	; 0x2d4
				if(pp->base_shape== 0){
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f040 8162 	bne.w	8008cc2 <PathPlan+0x2bd2>
					pp->u1 = 0.707107 * ( pp->ruy + pp->rux) + (pp->outz * 1.0);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8008a0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a0e:	ee17 0a90 	vmov	r0, s15
 8008a12:	f7f7 fd99 	bl	8000548 <__aeabi_f2d>
 8008a16:	a362      	add	r3, pc, #392	; (adr r3, 8008ba0 <PathPlan+0x2ab0>)
 8008a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1c:	f7f7 fdec 	bl	80005f8 <__aeabi_dmul>
 8008a20:	4602      	mov	r2, r0
 8008a22:	460b      	mov	r3, r1
 8008a24:	4614      	mov	r4, r2
 8008a26:	461d      	mov	r5, r3
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7f7 fd8a 	bl	8000548 <__aeabi_f2d>
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	4620      	mov	r0, r4
 8008a3a:	4629      	mov	r1, r5
 8008a3c:	f7f7 fc26 	bl	800028c <__adddf3>
 8008a40:	4602      	mov	r2, r0
 8008a42:	460b      	mov	r3, r1
 8008a44:	4610      	mov	r0, r2
 8008a46:	4619      	mov	r1, r3
 8008a48:	f7f8 f8ce 	bl	8000be8 <__aeabi_d2f>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = 0.707107 * ( pp->ruy - pp->rux) - (pp->outz * 1.0);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8008a60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a64:	ee17 0a90 	vmov	r0, s15
 8008a68:	f7f7 fd6e 	bl	8000548 <__aeabi_f2d>
 8008a6c:	a34c      	add	r3, pc, #304	; (adr r3, 8008ba0 <PathPlan+0x2ab0>)
 8008a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a72:	f7f7 fdc1 	bl	80005f8 <__aeabi_dmul>
 8008a76:	4602      	mov	r2, r0
 8008a78:	460b      	mov	r3, r1
 8008a7a:	4614      	mov	r4, r2
 8008a7c:	461d      	mov	r5, r3
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7f7 fd5f 	bl	8000548 <__aeabi_f2d>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	4620      	mov	r0, r4
 8008a90:	4629      	mov	r1, r5
 8008a92:	f7f7 fbf9 	bl	8000288 <__aeabi_dsub>
 8008a96:	4602      	mov	r2, r0
 8008a98:	460b      	mov	r3, r1
 8008a9a:	4610      	mov	r0, r2
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	f7f8 f8a3 	bl	8000be8 <__aeabi_d2f>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u3 = 0.707107 * ( pp->ruy - pp->rux) + (pp->outz * 1.0);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8008ab6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008aba:	ee17 0a90 	vmov	r0, s15
 8008abe:	f7f7 fd43 	bl	8000548 <__aeabi_f2d>
 8008ac2:	a337      	add	r3, pc, #220	; (adr r3, 8008ba0 <PathPlan+0x2ab0>)
 8008ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac8:	f7f7 fd96 	bl	80005f8 <__aeabi_dmul>
 8008acc:	4602      	mov	r2, r0
 8008ace:	460b      	mov	r3, r1
 8008ad0:	4614      	mov	r4, r2
 8008ad2:	461d      	mov	r5, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7f7 fd34 	bl	8000548 <__aeabi_f2d>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	4629      	mov	r1, r5
 8008ae8:	f7f7 fbd0 	bl	800028c <__adddf3>
 8008aec:	4602      	mov	r2, r0
 8008aee:	460b      	mov	r3, r1
 8008af0:	4610      	mov	r0, r2
 8008af2:	4619      	mov	r1, r3
 8008af4:	f7f8 f878 	bl	8000be8 <__aeabi_d2f>
 8008af8:	4602      	mov	r2, r0
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
					pp->u4 = 0.707107 * ( pp->ruy + pp->rux) - (pp->outz * 1.0);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8008b0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b10:	ee17 0a90 	vmov	r0, s15
 8008b14:	f7f7 fd18 	bl	8000548 <__aeabi_f2d>
 8008b18:	a321      	add	r3, pc, #132	; (adr r3, 8008ba0 <PathPlan+0x2ab0>)
 8008b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1e:	f7f7 fd6b 	bl	80005f8 <__aeabi_dmul>
 8008b22:	4602      	mov	r2, r0
 8008b24:	460b      	mov	r3, r1
 8008b26:	4614      	mov	r4, r2
 8008b28:	461d      	mov	r5, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7f7 fd09 	bl	8000548 <__aeabi_f2d>
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	4629      	mov	r1, r5
 8008b3e:	f7f7 fba3 	bl	8000288 <__aeabi_dsub>
 8008b42:	4602      	mov	r2, r0
 8008b44:	460b      	mov	r3, r1
 8008b46:	4610      	mov	r0, r2
 8008b48:	4619      	mov	r1, r3
 8008b4a:	f7f8 f84d 	bl	8000be8 <__aeabi_d2f>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
					pp->v1 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u1;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8008b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b66:	ee17 0a90 	vmov	r0, s15
 8008b6a:	f7f7 fced 	bl	8000548 <__aeabi_f2d>
 8008b6e:	a30c      	add	r3, pc, #48	; (adr r3, 8008ba0 <PathPlan+0x2ab0>)
 8008b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b74:	f7f7 fd40 	bl	80005f8 <__aeabi_dmul>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	4614      	mov	r4, r2
 8008b7e:	461d      	mov	r5, r3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7f7 fcde 	bl	8000548 <__aeabi_f2d>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	460b      	mov	r3, r1
 8008b90:	4620      	mov	r0, r4
 8008b92:	4629      	mov	r1, r5
 8008b94:	f7f7 fb7a 	bl	800028c <__adddf3>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	e007      	b.n	8008bac <PathPlan+0x2abc>
 8008b9c:	f3af 8000 	nop.w
 8008ba0:	dbf8b9bb 	.word	0xdbf8b9bb
 8008ba4:	3fe6a09e 	.word	0x3fe6a09e
 8008ba8:	40490fdb 	.word	0x40490fdb
 8008bac:	460b      	mov	r3, r1
 8008bae:	4610      	mov	r0, r2
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	f7f8 f819 	bl	8000be8 <__aeabi_d2f>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u2;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8008bca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008bce:	ee17 0a90 	vmov	r0, s15
 8008bd2:	f7f7 fcb9 	bl	8000548 <__aeabi_f2d>
 8008bd6:	a3c3      	add	r3, pc, #780	; (adr r3, 8008ee4 <PathPlan+0x2df4>)
 8008bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bdc:	f7f7 fd0c 	bl	80005f8 <__aeabi_dmul>
 8008be0:	4602      	mov	r2, r0
 8008be2:	460b      	mov	r3, r1
 8008be4:	4614      	mov	r4, r2
 8008be6:	461d      	mov	r5, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7f7 fcaa 	bl	8000548 <__aeabi_f2d>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	4629      	mov	r1, r5
 8008bfc:	f7f7 fb46 	bl	800028c <__adddf3>
 8008c00:	4602      	mov	r2, r0
 8008c02:	460b      	mov	r3, r1
 8008c04:	4610      	mov	r0, r2
 8008c06:	4619      	mov	r1, r3
 8008c08:	f7f7 ffee 	bl	8000be8 <__aeabi_d2f>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u3;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8008c20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c24:	ee17 0a90 	vmov	r0, s15
 8008c28:	f7f7 fc8e 	bl	8000548 <__aeabi_f2d>
 8008c2c:	a3ad      	add	r3, pc, #692	; (adr r3, 8008ee4 <PathPlan+0x2df4>)
 8008c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c32:	f7f7 fce1 	bl	80005f8 <__aeabi_dmul>
 8008c36:	4602      	mov	r2, r0
 8008c38:	460b      	mov	r3, r1
 8008c3a:	4614      	mov	r4, r2
 8008c3c:	461d      	mov	r5, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7f7 fc7f 	bl	8000548 <__aeabi_f2d>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	4620      	mov	r0, r4
 8008c50:	4629      	mov	r1, r5
 8008c52:	f7f7 fb1b 	bl	800028c <__adddf3>
 8008c56:	4602      	mov	r2, r0
 8008c58:	460b      	mov	r3, r1
 8008c5a:	4610      	mov	r0, r2
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	f7f7 ffc3 	bl	8000be8 <__aeabi_d2f>
 8008c62:	4602      	mov	r2, r0
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
					pp->v4 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u4;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8008c76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c7a:	ee17 0a90 	vmov	r0, s15
 8008c7e:	f7f7 fc63 	bl	8000548 <__aeabi_f2d>
 8008c82:	a398      	add	r3, pc, #608	; (adr r3, 8008ee4 <PathPlan+0x2df4>)
 8008c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c88:	f7f7 fcb6 	bl	80005f8 <__aeabi_dmul>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	460b      	mov	r3, r1
 8008c90:	4614      	mov	r4, r2
 8008c92:	461d      	mov	r5, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7f7 fc54 	bl	8000548 <__aeabi_f2d>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	4629      	mov	r1, r5
 8008ca8:	f7f7 faf0 	bl	800028c <__adddf3>
 8008cac:	4602      	mov	r2, r0
 8008cae:	460b      	mov	r3, r1
 8008cb0:	4610      	mov	r0, r2
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	f7f7 ff98 	bl	8000be8 <__aeabi_d2f>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
}
 8008cc0:	e103      	b.n	8008eca <PathPlan+0x2dda>
				} else if(pp->base_shape== 1){
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	f040 80fe 	bne.w	8008eca <PathPlan+0x2dda>
					pp->u1 = (0.866 * pp->ruy) - (0.5 * pp->rux) + (pp->outz * 1.0);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7f7 fc37 	bl	8000548 <__aeabi_f2d>
 8008cda:	a37f      	add	r3, pc, #508	; (adr r3, 8008ed8 <PathPlan+0x2de8>)
 8008cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce0:	f7f7 fc8a 	bl	80005f8 <__aeabi_dmul>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	4614      	mov	r4, r2
 8008cea:	461d      	mov	r5, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7f7 fc28 	bl	8000548 <__aeabi_f2d>
 8008cf8:	f04f 0200 	mov.w	r2, #0
 8008cfc:	4b78      	ldr	r3, [pc, #480]	; (8008ee0 <PathPlan+0x2df0>)
 8008cfe:	f7f7 fc7b 	bl	80005f8 <__aeabi_dmul>
 8008d02:	4602      	mov	r2, r0
 8008d04:	460b      	mov	r3, r1
 8008d06:	4620      	mov	r0, r4
 8008d08:	4629      	mov	r1, r5
 8008d0a:	f7f7 fabd 	bl	8000288 <__aeabi_dsub>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	460b      	mov	r3, r1
 8008d12:	4614      	mov	r4, r2
 8008d14:	461d      	mov	r5, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f7f7 fc13 	bl	8000548 <__aeabi_f2d>
 8008d22:	4602      	mov	r2, r0
 8008d24:	460b      	mov	r3, r1
 8008d26:	4620      	mov	r0, r4
 8008d28:	4629      	mov	r1, r5
 8008d2a:	f7f7 faaf 	bl	800028c <__adddf3>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	460b      	mov	r3, r1
 8008d32:	4610      	mov	r0, r2
 8008d34:	4619      	mov	r1, r3
 8008d36:	f7f7 ff57 	bl	8000be8 <__aeabi_d2f>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = (0.866 * pp->ruy) + (0.5 * pp->rux) - (pp->outz * 1.0);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7f7 fbfd 	bl	8000548 <__aeabi_f2d>
 8008d4e:	a362      	add	r3, pc, #392	; (adr r3, 8008ed8 <PathPlan+0x2de8>)
 8008d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d54:	f7f7 fc50 	bl	80005f8 <__aeabi_dmul>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	4614      	mov	r4, r2
 8008d5e:	461d      	mov	r5, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7f7 fbee 	bl	8000548 <__aeabi_f2d>
 8008d6c:	f04f 0200 	mov.w	r2, #0
 8008d70:	4b5b      	ldr	r3, [pc, #364]	; (8008ee0 <PathPlan+0x2df0>)
 8008d72:	f7f7 fc41 	bl	80005f8 <__aeabi_dmul>
 8008d76:	4602      	mov	r2, r0
 8008d78:	460b      	mov	r3, r1
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	4629      	mov	r1, r5
 8008d7e:	f7f7 fa85 	bl	800028c <__adddf3>
 8008d82:	4602      	mov	r2, r0
 8008d84:	460b      	mov	r3, r1
 8008d86:	4614      	mov	r4, r2
 8008d88:	461d      	mov	r5, r3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d90:	4618      	mov	r0, r3
 8008d92:	f7f7 fbd9 	bl	8000548 <__aeabi_f2d>
 8008d96:	4602      	mov	r2, r0
 8008d98:	460b      	mov	r3, r1
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	4629      	mov	r1, r5
 8008d9e:	f7f7 fa73 	bl	8000288 <__aeabi_dsub>
 8008da2:	4602      	mov	r2, r0
 8008da4:	460b      	mov	r3, r1
 8008da6:	4610      	mov	r0, r2
 8008da8:	4619      	mov	r1, r3
 8008daa:	f7f7 ff1d 	bl	8000be8 <__aeabi_d2f>
 8008dae:	4602      	mov	r2, r0
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u3 = 1.0 * pp->rux + (pp->outz * 1.0);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	ed93 7ab2 	vldr	s14, [r3, #712]	; 0x2c8
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8008dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	edc3 7ab8 	vstr	s15, [r3, #736]	; 0x2e0
					pp->v1 = (0.866 * pp->rvy) - (0.5 * pp->rvx) + pp->u1;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7f7 fbb8 	bl	8000548 <__aeabi_f2d>
 8008dd8:	a33f      	add	r3, pc, #252	; (adr r3, 8008ed8 <PathPlan+0x2de8>)
 8008dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dde:	f7f7 fc0b 	bl	80005f8 <__aeabi_dmul>
 8008de2:	4602      	mov	r2, r0
 8008de4:	460b      	mov	r3, r1
 8008de6:	4614      	mov	r4, r2
 8008de8:	461d      	mov	r5, r3
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7f7 fba9 	bl	8000548 <__aeabi_f2d>
 8008df6:	f04f 0200 	mov.w	r2, #0
 8008dfa:	4b39      	ldr	r3, [pc, #228]	; (8008ee0 <PathPlan+0x2df0>)
 8008dfc:	f7f7 fbfc 	bl	80005f8 <__aeabi_dmul>
 8008e00:	4602      	mov	r2, r0
 8008e02:	460b      	mov	r3, r1
 8008e04:	4620      	mov	r0, r4
 8008e06:	4629      	mov	r1, r5
 8008e08:	f7f7 fa3e 	bl	8000288 <__aeabi_dsub>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	460b      	mov	r3, r1
 8008e10:	4614      	mov	r4, r2
 8008e12:	461d      	mov	r5, r3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7f7 fb94 	bl	8000548 <__aeabi_f2d>
 8008e20:	4602      	mov	r2, r0
 8008e22:	460b      	mov	r3, r1
 8008e24:	4620      	mov	r0, r4
 8008e26:	4629      	mov	r1, r5
 8008e28:	f7f7 fa30 	bl	800028c <__adddf3>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	460b      	mov	r3, r1
 8008e30:	4610      	mov	r0, r2
 8008e32:	4619      	mov	r1, r3
 8008e34:	f7f7 fed8 	bl	8000be8 <__aeabi_d2f>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = (0.866 * pp->rvy) + (0.5 * pp->rvx) + pp->u2;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7f7 fb7e 	bl	8000548 <__aeabi_f2d>
 8008e4c:	a322      	add	r3, pc, #136	; (adr r3, 8008ed8 <PathPlan+0x2de8>)
 8008e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e52:	f7f7 fbd1 	bl	80005f8 <__aeabi_dmul>
 8008e56:	4602      	mov	r2, r0
 8008e58:	460b      	mov	r3, r1
 8008e5a:	4614      	mov	r4, r2
 8008e5c:	461d      	mov	r5, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8008e64:	4618      	mov	r0, r3
 8008e66:	f7f7 fb6f 	bl	8000548 <__aeabi_f2d>
 8008e6a:	f04f 0200 	mov.w	r2, #0
 8008e6e:	4b1c      	ldr	r3, [pc, #112]	; (8008ee0 <PathPlan+0x2df0>)
 8008e70:	f7f7 fbc2 	bl	80005f8 <__aeabi_dmul>
 8008e74:	4602      	mov	r2, r0
 8008e76:	460b      	mov	r3, r1
 8008e78:	4620      	mov	r0, r4
 8008e7a:	4629      	mov	r1, r5
 8008e7c:	f7f7 fa06 	bl	800028c <__adddf3>
 8008e80:	4602      	mov	r2, r0
 8008e82:	460b      	mov	r3, r1
 8008e84:	4614      	mov	r4, r2
 8008e86:	461d      	mov	r5, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7f7 fb5a 	bl	8000548 <__aeabi_f2d>
 8008e94:	4602      	mov	r2, r0
 8008e96:	460b      	mov	r3, r1
 8008e98:	4620      	mov	r0, r4
 8008e9a:	4629      	mov	r1, r5
 8008e9c:	f7f7 f9f6 	bl	800028c <__adddf3>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	4610      	mov	r0, r2
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	f7f7 fe9e 	bl	8000be8 <__aeabi_d2f>
 8008eac:	4602      	mov	r2, r0
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 1.0 * pp->rvx + pp->u3;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	ed93 7ab4 	vldr	s14, [r3, #720]	; 0x2d0
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8008ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	edc3 7abc 	vstr	s15, [r3, #752]	; 0x2f0
}
 8008eca:	bf00      	nop
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	ecbd 8b02 	vpop	{d8}
 8008ed4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008ed8:	a1cac083 	.word	0xa1cac083
 8008edc:	3febb645 	.word	0x3febb645
 8008ee0:	3fe00000 	.word	0x3fe00000
 8008ee4:	dbf8b9bb 	.word	0xdbf8b9bb
 8008ee8:	3fe6a09e 	.word	0x3fe6a09e

08008eec <PSxConnectDMA>:
 * Function Remarks		: Called in respective I2c interrupt
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSxConnectDMA(&ps4);
 */
void PSxConnectDMA(PSxBT_t* psxbt){
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 11);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	1c5a      	adds	r2, r3, #1
 8008efc:	230b      	movs	r3, #11
 8008efe:	2188      	movs	r1, #136	; 0x88
 8008f00:	f007 ff28 	bl	8010d54 <HAL_I2C_Master_Receive_DMA>
	PSx_HandlerI2C(psxbt);
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 f81e 	bl	8008f46 <PSx_HandlerI2C>
}
 8008f0a:	bf00      	nop
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <PSxInitDMA>:
 * Function Arguments	: *psxbt	, Pointer to structure PSxBT_t
 * 						   hi2cx    , Pointer to I2C handle
 * Function Return		: None
 * Function Example		: PSxInitDMA(&ps4,&hi2c1);
 */
void PSxInitDMA(PSxBT_t *psxbt,I2C_HandleTypeDef* hi2cx){
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b082      	sub	sp, #8
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
 8008f1a:	6039      	str	r1, [r7, #0]
	psxbt->hi2cps4 = hi2cx;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	683a      	ldr	r2, [r7, #0]
 8008f20:	665a      	str	r2, [r3, #100]	; 0x64
//	HAL_I2C_Slave_Receive_DMA(hi2cx, psxbt->ReceiveBuffer, 11);//GG
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 11);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	1c5a      	adds	r2, r3, #1
 8008f2a:	230b      	movs	r3, #11
 8008f2c:	2188      	movs	r1, #136	; 0x88
 8008f2e:	f007 ff11 	bl	8010d54 <HAL_I2C_Master_Receive_DMA>
	psxbt->initialized = 1;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2201      	movs	r2, #1
 8008f36:	701a      	strb	r2, [r3, #0]
	psxbt->disconnected = 0;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008f3e:	bf00      	nop
 8008f40:	3708      	adds	r7, #8
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <PSx_HandlerI2C>:
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSx_HandlerI2C(&ps4x);
 */

void PSx_HandlerI2C(PSxBT_t *psxbt){
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b082      	sub	sp, #8
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
	psxbt->buf1 = psxbt->ReceiveBuffer[1];
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	789a      	ldrb	r2, [r3, #2]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	psxbt->buf2 = psxbt->ReceiveBuffer[2];
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	78da      	ldrb	r2, [r3, #3]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	psxbt->leftjoy_x = psxbt->ReceiveBuffer[3];
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	791b      	ldrb	r3, [r3, #4]
 8008f66:	461a      	mov	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	635a      	str	r2, [r3, #52]	; 0x34
	psxbt->leftjoy_y = psxbt->ReceiveBuffer[4];
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	795b      	ldrb	r3, [r3, #5]
 8008f70:	461a      	mov	r2, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	639a      	str	r2, [r3, #56]	; 0x38
	psxbt->rightjoy_x = psxbt->ReceiveBuffer[5];
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	799b      	ldrb	r3, [r3, #6]
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	63da      	str	r2, [r3, #60]	; 0x3c
	psxbt->rightjoy_y = psxbt->ReceiveBuffer[6];
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	79db      	ldrb	r3, [r3, #7]
 8008f84:	461a      	mov	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	641a      	str	r2, [r3, #64]	; 0x40
	psxbt->an_L2 = psxbt->ReceiveBuffer[7];
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	7a1b      	ldrb	r3, [r3, #8]
 8008f8e:	461a      	mov	r2, r3
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	645a      	str	r2, [r3, #68]	; 0x44
	psxbt->an_R2 = psxbt->ReceiveBuffer[8];
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	7a5b      	ldrb	r3, [r3, #9]
 8008f98:	461a      	mov	r2, r3
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	649a      	str	r2, [r3, #72]	; 0x48
	psxbt->buf3 = psxbt->ReceiveBuffer[9];
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	7a9a      	ldrb	r2, [r3, #10]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	psxbt->state = psxbt->ReceiveBuffer[10];
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	7ada      	ldrb	r2, [r3, #11]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	PSxBTGetXY(psxbt);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f804 	bl	8008fc0 <PSxBTGetXY>
}
 8008fb8:	bf00      	nop
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <PSxBTGetXY>:
 * Function Return		: None
 * Function Example		: PSxBTGetXY(&ps3x);
 */

void PSxBTGetXY(PSxBT_t *psxbt)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
	if(joyR_up){
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fcc:	ee07 3a90 	vmov	s15, r3
 8008fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fd4:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 80092d8 <PSxBTGetXY+0x318>
 8008fd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fe0:	d53e      	bpl.n	8009060 <PSxBTGetXY+0xa0>
		psxbt->joyR_y  = ((psx_low_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe6:	ee07 3a90 	vmov	s15, r3
 8008fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fee:	ee17 0a90 	vmov	r0, s15
 8008ff2:	f7f7 faa9 	bl	8000548 <__aeabi_f2d>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	a1b5      	add	r1, pc, #724	; (adr r1, 80092d0 <PSxBTGetXY+0x310>)
 8008ffc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009000:	f7f7 f942 	bl	8000288 <__aeabi_dsub>
 8009004:	4602      	mov	r2, r0
 8009006:	460b      	mov	r3, r1
 8009008:	4610      	mov	r0, r2
 800900a:	4619      	mov	r1, r3
 800900c:	f04f 0200 	mov.w	r2, #0
 8009010:	4bb2      	ldr	r3, [pc, #712]	; (80092dc <PSxBTGetXY+0x31c>)
 8009012:	f7f7 fc1b 	bl	800084c <__aeabi_ddiv>
 8009016:	4602      	mov	r2, r0
 8009018:	460b      	mov	r3, r1
 800901a:	4610      	mov	r0, r2
 800901c:	4619      	mov	r1, r3
 800901e:	f7f7 fde3 	bl	8000be8 <__aeabi_d2f>
 8009022:	4602      	mov	r2, r0
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	64da      	str	r2, [r3, #76]	; 0x4c
		if(psxbt->joyR_y < 0.0){
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800902e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009036:	d504      	bpl.n	8009042 <PSxBTGetXY+0x82>
			psxbt->joyR_y = 0.0;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f04f 0200 	mov.w	r2, #0
 800903e:	64da      	str	r2, [r3, #76]	; 0x4c
 8009040:	e05d      	b.n	80090fe <PSxBTGetXY+0x13e>
		}else if(psxbt->joyR_y > 1.0){
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8009048:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800904c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009054:	dd53      	ble.n	80090fe <PSxBTGetXY+0x13e>
			psxbt->joyR_y = 1.0;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800905c:	64da      	str	r2, [r3, #76]	; 0x4c
 800905e:	e04e      	b.n	80090fe <PSxBTGetXY+0x13e>
		}
	}else if(joyR_down){
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009064:	ee07 3a90 	vmov	s15, r3
 8009068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800906c:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 80092e8 <PSxBTGetXY+0x328>
 8009070:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009078:	dd3d      	ble.n	80090f6 <PSxBTGetXY+0x136>
		psxbt->joyR_y = ((psx_high_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907e:	ee07 3a90 	vmov	s15, r3
 8009082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009086:	ee17 0a90 	vmov	r0, s15
 800908a:	f7f7 fa5d 	bl	8000548 <__aeabi_f2d>
 800908e:	4602      	mov	r2, r0
 8009090:	460b      	mov	r3, r1
 8009092:	f04f 0000 	mov.w	r0, #0
 8009096:	4992      	ldr	r1, [pc, #584]	; (80092e0 <PSxBTGetXY+0x320>)
 8009098:	f7f7 f8f6 	bl	8000288 <__aeabi_dsub>
 800909c:	4602      	mov	r2, r0
 800909e:	460b      	mov	r3, r1
 80090a0:	4610      	mov	r0, r2
 80090a2:	4619      	mov	r1, r3
 80090a4:	f04f 0200 	mov.w	r2, #0
 80090a8:	4b8c      	ldr	r3, [pc, #560]	; (80092dc <PSxBTGetXY+0x31c>)
 80090aa:	f7f7 fbcf 	bl	800084c <__aeabi_ddiv>
 80090ae:	4602      	mov	r2, r0
 80090b0:	460b      	mov	r3, r1
 80090b2:	4610      	mov	r0, r2
 80090b4:	4619      	mov	r1, r3
 80090b6:	f7f7 fd97 	bl	8000be8 <__aeabi_d2f>
 80090ba:	4602      	mov	r2, r0
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	64da      	str	r2, [r3, #76]	; 0x4c
		if(psxbt->joyR_y > 0.0){
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80090c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80090ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ce:	dd04      	ble.n	80090da <PSxBTGetXY+0x11a>
			psxbt->joyR_y = 0.0;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f04f 0200 	mov.w	r2, #0
 80090d6:	64da      	str	r2, [r3, #76]	; 0x4c
 80090d8:	e011      	b.n	80090fe <PSxBTGetXY+0x13e>
		}else if(psxbt->joyR_y < -1.0){
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80090e0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80090e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ec:	d507      	bpl.n	80090fe <PSxBTGetXY+0x13e>
			psxbt->joyR_y = -1.0;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4a7c      	ldr	r2, [pc, #496]	; (80092e4 <PSxBTGetXY+0x324>)
 80090f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80090f4:	e003      	b.n	80090fe <PSxBTGetXY+0x13e>
		}
	}else{
		psxbt->joyR_y = 0.0;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f04f 0200 	mov.w	r2, #0
 80090fc:	64da      	str	r2, [r3, #76]	; 0x4c
	}

	if(joyR_left){
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009102:	ee07 3a90 	vmov	s15, r3
 8009106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800910a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80092d8 <PSxBTGetXY+0x318>
 800910e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009116:	d53e      	bpl.n	8009196 <PSxBTGetXY+0x1d6>
		psxbt->joyR_x = ((psx_low_Rx - ((float)psxbt->rightjoy_x))/100.0)/1.00;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800911c:	ee07 3a90 	vmov	s15, r3
 8009120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009124:	ee17 0a90 	vmov	r0, s15
 8009128:	f7f7 fa0e 	bl	8000548 <__aeabi_f2d>
 800912c:	4602      	mov	r2, r0
 800912e:	460b      	mov	r3, r1
 8009130:	a167      	add	r1, pc, #412	; (adr r1, 80092d0 <PSxBTGetXY+0x310>)
 8009132:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009136:	f7f7 f8a7 	bl	8000288 <__aeabi_dsub>
 800913a:	4602      	mov	r2, r0
 800913c:	460b      	mov	r3, r1
 800913e:	4610      	mov	r0, r2
 8009140:	4619      	mov	r1, r3
 8009142:	f04f 0200 	mov.w	r2, #0
 8009146:	4b65      	ldr	r3, [pc, #404]	; (80092dc <PSxBTGetXY+0x31c>)
 8009148:	f7f7 fb80 	bl	800084c <__aeabi_ddiv>
 800914c:	4602      	mov	r2, r0
 800914e:	460b      	mov	r3, r1
 8009150:	4610      	mov	r0, r2
 8009152:	4619      	mov	r1, r3
 8009154:	f7f7 fd48 	bl	8000be8 <__aeabi_d2f>
 8009158:	4602      	mov	r2, r0
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	651a      	str	r2, [r3, #80]	; 0x50
		if(psxbt->joyR_x < 0.0){
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8009164:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800916c:	d504      	bpl.n	8009178 <PSxBTGetXY+0x1b8>
			psxbt->joyR_x = 0.0;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f04f 0200 	mov.w	r2, #0
 8009174:	651a      	str	r2, [r3, #80]	; 0x50
 8009176:	e05d      	b.n	8009234 <PSxBTGetXY+0x274>
		}else if(psxbt->joyR_x > 1.0){
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800917e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009182:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800918a:	dd53      	ble.n	8009234 <PSxBTGetXY+0x274>
			psxbt->joyR_x = 1.0;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009192:	651a      	str	r2, [r3, #80]	; 0x50
 8009194:	e04e      	b.n	8009234 <PSxBTGetXY+0x274>
		}
	}else if(joyR_right){
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800919a:	ee07 3a90 	vmov	s15, r3
 800919e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091a2:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80092e8 <PSxBTGetXY+0x328>
 80091a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091ae:	dd3d      	ble.n	800922c <PSxBTGetXY+0x26c>
		psxbt->joyR_x = ((psx_high_Rx - ((float)psxbt->rightjoy_x))/100.0)/1.00;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091b4:	ee07 3a90 	vmov	s15, r3
 80091b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091bc:	ee17 0a90 	vmov	r0, s15
 80091c0:	f7f7 f9c2 	bl	8000548 <__aeabi_f2d>
 80091c4:	4602      	mov	r2, r0
 80091c6:	460b      	mov	r3, r1
 80091c8:	f04f 0000 	mov.w	r0, #0
 80091cc:	4944      	ldr	r1, [pc, #272]	; (80092e0 <PSxBTGetXY+0x320>)
 80091ce:	f7f7 f85b 	bl	8000288 <__aeabi_dsub>
 80091d2:	4602      	mov	r2, r0
 80091d4:	460b      	mov	r3, r1
 80091d6:	4610      	mov	r0, r2
 80091d8:	4619      	mov	r1, r3
 80091da:	f04f 0200 	mov.w	r2, #0
 80091de:	4b3f      	ldr	r3, [pc, #252]	; (80092dc <PSxBTGetXY+0x31c>)
 80091e0:	f7f7 fb34 	bl	800084c <__aeabi_ddiv>
 80091e4:	4602      	mov	r2, r0
 80091e6:	460b      	mov	r3, r1
 80091e8:	4610      	mov	r0, r2
 80091ea:	4619      	mov	r1, r3
 80091ec:	f7f7 fcfc 	bl	8000be8 <__aeabi_d2f>
 80091f0:	4602      	mov	r2, r0
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	651a      	str	r2, [r3, #80]	; 0x50
		if(psxbt->joyR_x > 0.0){
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80091fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009204:	dd04      	ble.n	8009210 <PSxBTGetXY+0x250>
			psxbt->joyR_x = 0.0;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f04f 0200 	mov.w	r2, #0
 800920c:	651a      	str	r2, [r3, #80]	; 0x50
 800920e:	e011      	b.n	8009234 <PSxBTGetXY+0x274>
		}else if(psxbt->joyR_x < -1.0){
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8009216:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800921a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800921e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009222:	d507      	bpl.n	8009234 <PSxBTGetXY+0x274>
			psxbt->joyR_x = -1.0;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4a2f      	ldr	r2, [pc, #188]	; (80092e4 <PSxBTGetXY+0x324>)
 8009228:	651a      	str	r2, [r3, #80]	; 0x50
 800922a:	e003      	b.n	8009234 <PSxBTGetXY+0x274>
		}
	}else{
		psxbt->joyR_x = 0.0;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f04f 0200 	mov.w	r2, #0
 8009232:	651a      	str	r2, [r3, #80]	; 0x50
	}

	if(joyL_up){
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009238:	ee07 3a90 	vmov	s15, r3
 800923c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009240:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80092d8 <PSxBTGetXY+0x318>
 8009244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800924c:	d54e      	bpl.n	80092ec <PSxBTGetXY+0x32c>
		psxbt->joyL_y = ((psx_low_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009252:	ee07 3a90 	vmov	s15, r3
 8009256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800925a:	ee17 0a90 	vmov	r0, s15
 800925e:	f7f7 f973 	bl	8000548 <__aeabi_f2d>
 8009262:	4602      	mov	r2, r0
 8009264:	460b      	mov	r3, r1
 8009266:	a11a      	add	r1, pc, #104	; (adr r1, 80092d0 <PSxBTGetXY+0x310>)
 8009268:	e9d1 0100 	ldrd	r0, r1, [r1]
 800926c:	f7f7 f80c 	bl	8000288 <__aeabi_dsub>
 8009270:	4602      	mov	r2, r0
 8009272:	460b      	mov	r3, r1
 8009274:	4610      	mov	r0, r2
 8009276:	4619      	mov	r1, r3
 8009278:	f04f 0200 	mov.w	r2, #0
 800927c:	4b17      	ldr	r3, [pc, #92]	; (80092dc <PSxBTGetXY+0x31c>)
 800927e:	f7f7 fae5 	bl	800084c <__aeabi_ddiv>
 8009282:	4602      	mov	r2, r0
 8009284:	460b      	mov	r3, r1
 8009286:	4610      	mov	r0, r2
 8009288:	4619      	mov	r1, r3
 800928a:	f7f7 fcad 	bl	8000be8 <__aeabi_d2f>
 800928e:	4602      	mov	r2, r0
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	655a      	str	r2, [r3, #84]	; 0x54
		if(psxbt->joyL_y < 0.0){
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800929a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800929e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092a2:	d504      	bpl.n	80092ae <PSxBTGetXY+0x2ee>
			psxbt->joyL_y = 0.0;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f04f 0200 	mov.w	r2, #0
 80092aa:	655a      	str	r2, [r3, #84]	; 0x54
 80092ac:	e06d      	b.n	800938a <PSxBTGetXY+0x3ca>
		}else if(psxbt->joyL_y > 1.0){
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80092b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092c0:	dd63      	ble.n	800938a <PSxBTGetXY+0x3ca>
			psxbt->joyL_y = 1.0;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80092c8:	655a      	str	r2, [r3, #84]	; 0x54
 80092ca:	e05e      	b.n	800938a <PSxBTGetXY+0x3ca>
 80092cc:	f3af 8000 	nop.w
 80092d0:	00000000 	.word	0x00000000
 80092d4:	405cc000 	.word	0x405cc000
 80092d8:	42e60000 	.word	0x42e60000
 80092dc:	40590000 	.word	0x40590000
 80092e0:	40618000 	.word	0x40618000
 80092e4:	bf800000 	.word	0xbf800000
 80092e8:	430c0000 	.word	0x430c0000
		}
	}else if(joyL_down){
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f0:	ee07 3a90 	vmov	s15, r3
 80092f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f8:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 80092e8 <PSxBTGetXY+0x328>
 80092fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009304:	dd3d      	ble.n	8009382 <PSxBTGetXY+0x3c2>
		psxbt->joyL_y = ((psx_high_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800930a:	ee07 3a90 	vmov	s15, r3
 800930e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009312:	ee17 0a90 	vmov	r0, s15
 8009316:	f7f7 f917 	bl	8000548 <__aeabi_f2d>
 800931a:	4602      	mov	r2, r0
 800931c:	460b      	mov	r3, r1
 800931e:	f04f 0000 	mov.w	r0, #0
 8009322:	4981      	ldr	r1, [pc, #516]	; (8009528 <PSxBTGetXY+0x568>)
 8009324:	f7f6 ffb0 	bl	8000288 <__aeabi_dsub>
 8009328:	4602      	mov	r2, r0
 800932a:	460b      	mov	r3, r1
 800932c:	4610      	mov	r0, r2
 800932e:	4619      	mov	r1, r3
 8009330:	f04f 0200 	mov.w	r2, #0
 8009334:	4b7d      	ldr	r3, [pc, #500]	; (800952c <PSxBTGetXY+0x56c>)
 8009336:	f7f7 fa89 	bl	800084c <__aeabi_ddiv>
 800933a:	4602      	mov	r2, r0
 800933c:	460b      	mov	r3, r1
 800933e:	4610      	mov	r0, r2
 8009340:	4619      	mov	r1, r3
 8009342:	f7f7 fc51 	bl	8000be8 <__aeabi_d2f>
 8009346:	4602      	mov	r2, r0
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	655a      	str	r2, [r3, #84]	; 0x54
		if(psxbt->joyL_y > 0.0){
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009352:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800935a:	dd04      	ble.n	8009366 <PSxBTGetXY+0x3a6>
			psxbt->joyL_y = 0.0;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f04f 0200 	mov.w	r2, #0
 8009362:	655a      	str	r2, [r3, #84]	; 0x54
 8009364:	e011      	b.n	800938a <PSxBTGetXY+0x3ca>
		}else if(psxbt->joyL_y < -1.0){
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800936c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009378:	d507      	bpl.n	800938a <PSxBTGetXY+0x3ca>
			psxbt->joyL_y = -1.0;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4a6c      	ldr	r2, [pc, #432]	; (8009530 <PSxBTGetXY+0x570>)
 800937e:	655a      	str	r2, [r3, #84]	; 0x54
 8009380:	e003      	b.n	800938a <PSxBTGetXY+0x3ca>
		}
	}else{
		psxbt->joyL_y = 0.0;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f04f 0200 	mov.w	r2, #0
 8009388:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if(joyL_left){
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800938e:	ee07 3a90 	vmov	s15, r3
 8009392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009396:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8009534 <PSxBTGetXY+0x574>
 800939a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800939e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093a2:	d53e      	bpl.n	8009422 <PSxBTGetXY+0x462>
		psxbt->joyL_x = ((psx_low_Lx - ((float)psxbt->leftjoy_x))/100.0)/1.00;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093a8:	ee07 3a90 	vmov	s15, r3
 80093ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093b0:	ee17 0a90 	vmov	r0, s15
 80093b4:	f7f7 f8c8 	bl	8000548 <__aeabi_f2d>
 80093b8:	4602      	mov	r2, r0
 80093ba:	460b      	mov	r3, r1
 80093bc:	a156      	add	r1, pc, #344	; (adr r1, 8009518 <PSxBTGetXY+0x558>)
 80093be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093c2:	f7f6 ff61 	bl	8000288 <__aeabi_dsub>
 80093c6:	4602      	mov	r2, r0
 80093c8:	460b      	mov	r3, r1
 80093ca:	4610      	mov	r0, r2
 80093cc:	4619      	mov	r1, r3
 80093ce:	f04f 0200 	mov.w	r2, #0
 80093d2:	4b56      	ldr	r3, [pc, #344]	; (800952c <PSxBTGetXY+0x56c>)
 80093d4:	f7f7 fa3a 	bl	800084c <__aeabi_ddiv>
 80093d8:	4602      	mov	r2, r0
 80093da:	460b      	mov	r3, r1
 80093dc:	4610      	mov	r0, r2
 80093de:	4619      	mov	r1, r3
 80093e0:	f7f7 fc02 	bl	8000be8 <__aeabi_d2f>
 80093e4:	4602      	mov	r2, r0
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	659a      	str	r2, [r3, #88]	; 0x58
		if(psxbt->joyL_x < 0.0){
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80093f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80093f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093f8:	d504      	bpl.n	8009404 <PSxBTGetXY+0x444>
			psxbt->joyL_x = 0.0;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f04f 0200 	mov.w	r2, #0
 8009400:	659a      	str	r2, [r3, #88]	; 0x58
 8009402:	e05d      	b.n	80094c0 <PSxBTGetXY+0x500>
		}else if(psxbt->joyL_x > 1.0){
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800940a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800940e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009416:	dd53      	ble.n	80094c0 <PSxBTGetXY+0x500>
			psxbt->joyL_x = 1.0;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800941e:	659a      	str	r2, [r3, #88]	; 0x58
 8009420:	e04e      	b.n	80094c0 <PSxBTGetXY+0x500>
		}
	}else if(joyL_right){
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009426:	ee07 3a90 	vmov	s15, r3
 800942a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800942e:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8009538 <PSxBTGetXY+0x578>
 8009432:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800943a:	dd3d      	ble.n	80094b8 <PSxBTGetXY+0x4f8>
		psxbt->joyL_x = ((psx_high_Lx - ((float)psxbt->leftjoy_x))/100.0)/1.00;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009440:	ee07 3a90 	vmov	s15, r3
 8009444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009448:	ee17 0a90 	vmov	r0, s15
 800944c:	f7f7 f87c 	bl	8000548 <__aeabi_f2d>
 8009450:	4602      	mov	r2, r0
 8009452:	460b      	mov	r3, r1
 8009454:	f04f 0000 	mov.w	r0, #0
 8009458:	4933      	ldr	r1, [pc, #204]	; (8009528 <PSxBTGetXY+0x568>)
 800945a:	f7f6 ff15 	bl	8000288 <__aeabi_dsub>
 800945e:	4602      	mov	r2, r0
 8009460:	460b      	mov	r3, r1
 8009462:	4610      	mov	r0, r2
 8009464:	4619      	mov	r1, r3
 8009466:	f04f 0200 	mov.w	r2, #0
 800946a:	4b30      	ldr	r3, [pc, #192]	; (800952c <PSxBTGetXY+0x56c>)
 800946c:	f7f7 f9ee 	bl	800084c <__aeabi_ddiv>
 8009470:	4602      	mov	r2, r0
 8009472:	460b      	mov	r3, r1
 8009474:	4610      	mov	r0, r2
 8009476:	4619      	mov	r1, r3
 8009478:	f7f7 fbb6 	bl	8000be8 <__aeabi_d2f>
 800947c:	4602      	mov	r2, r0
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	659a      	str	r2, [r3, #88]	; 0x58
		if(psxbt->joyL_x > 0.0){
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8009488:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800948c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009490:	dd04      	ble.n	800949c <PSxBTGetXY+0x4dc>
			psxbt->joyL_x = 0.0;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f04f 0200 	mov.w	r2, #0
 8009498:	659a      	str	r2, [r3, #88]	; 0x58
 800949a:	e011      	b.n	80094c0 <PSxBTGetXY+0x500>
		}else if(psxbt->joyL_x < -1.0){
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80094a2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80094a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094ae:	d507      	bpl.n	80094c0 <PSxBTGetXY+0x500>
			psxbt->joyL_x = -1.0;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a1f      	ldr	r2, [pc, #124]	; (8009530 <PSxBTGetXY+0x570>)
 80094b4:	659a      	str	r2, [r3, #88]	; 0x58
 80094b6:	e003      	b.n	80094c0 <PSxBTGetXY+0x500>
		}
	}else{
		psxbt->joyL_x = 0.0;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f04f 0200 	mov.w	r2, #0
 80094be:	659a      	str	r2, [r3, #88]	; 0x58
	}

	psxbt->joyR_2 = (psxbt->an_R2/255.0);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7f7 f81d 	bl	8000504 <__aeabi_ui2d>
 80094ca:	a315      	add	r3, pc, #84	; (adr r3, 8009520 <PSxBTGetXY+0x560>)
 80094cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d0:	f7f7 f9bc 	bl	800084c <__aeabi_ddiv>
 80094d4:	4602      	mov	r2, r0
 80094d6:	460b      	mov	r3, r1
 80094d8:	4610      	mov	r0, r2
 80094da:	4619      	mov	r1, r3
 80094dc:	f7f7 fb84 	bl	8000be8 <__aeabi_d2f>
 80094e0:	4602      	mov	r2, r0
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	65da      	str	r2, [r3, #92]	; 0x5c
	psxbt->joyL_2 = (psxbt->an_L2/255.0);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7f7 f80a 	bl	8000504 <__aeabi_ui2d>
 80094f0:	a30b      	add	r3, pc, #44	; (adr r3, 8009520 <PSxBTGetXY+0x560>)
 80094f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f6:	f7f7 f9a9 	bl	800084c <__aeabi_ddiv>
 80094fa:	4602      	mov	r2, r0
 80094fc:	460b      	mov	r3, r1
 80094fe:	4610      	mov	r0, r2
 8009500:	4619      	mov	r1, r3
 8009502:	f7f7 fb71 	bl	8000be8 <__aeabi_d2f>
 8009506:	4602      	mov	r2, r0
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800950c:	bf00      	nop
 800950e:	3708      	adds	r7, #8
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}
 8009514:	f3af 8000 	nop.w
 8009518:	00000000 	.word	0x00000000
 800951c:	405cc000 	.word	0x405cc000
 8009520:	00000000 	.word	0x00000000
 8009524:	406fe000 	.word	0x406fe000
 8009528:	40618000 	.word	0x40618000
 800952c:	40590000 	.word	0x40590000
 8009530:	bf800000 	.word	0xbf800000
 8009534:	42e60000 	.word	0x42e60000
 8009538:	430c0000 	.word	0x430c0000

0800953c <R6091U_Init>:

#include "r6091u.h"
#include "../adapter.h"


void R6091U_Init(R6091U_t* IMU,UART_HandleTypeDef* huartx){
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
	testCounter2 = 0;
 8009546:	4b0a      	ldr	r3, [pc, #40]	; (8009570 <R6091U_Init+0x34>)
 8009548:	2200      	movs	r2, #0
 800954a:	601a      	str	r2, [r3, #0]
	IMU->huartx = huartx;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	683a      	ldr	r2, [r7, #0]
 8009550:	601a      	str	r2, [r3, #0]
	IMU->State = PENDING_SYNC;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	711a      	strb	r2, [r3, #4]
	HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6818      	ldr	r0, [r3, #0]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	3306      	adds	r3, #6
 8009560:	2201      	movs	r2, #1
 8009562:	4619      	mov	r1, r3
 8009564:	f00b fbbc 	bl	8014ce0 <HAL_UART_Receive_IT>

}
 8009568:	bf00      	nop
 800956a:	3708      	adds	r7, #8
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	20006758 	.word	0x20006758

08009574 <R6091U_Handler>:


void R6091U_Handler(R6091U_t* IMU){
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]

//	uint8_t checksum;

	switch(IMU->State){
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	791b      	ldrb	r3, [r3, #4]
 8009580:	2b02      	cmp	r3, #2
 8009582:	d033      	beq.n	80095ec <R6091U_Handler+0x78>
 8009584:	2b02      	cmp	r3, #2
 8009586:	f300 80aa 	bgt.w	80096de <R6091U_Handler+0x16a>
 800958a:	2b00      	cmp	r3, #0
 800958c:	d002      	beq.n	8009594 <R6091U_Handler+0x20>
 800958e:	2b01      	cmp	r3, #1
 8009590:	d010      	beq.n	80095b4 <R6091U_Handler+0x40>
		IMU->State = PENDING_SYNC;
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);

		break;
	}
}
 8009592:	e0a4      	b.n	80096de <R6091U_Handler+0x16a>
		if(IMU->Buffer[0] == 0xAA){
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	799b      	ldrb	r3, [r3, #6]
 8009598:	2baa      	cmp	r3, #170	; 0xaa
 800959a:	d102      	bne.n	80095a2 <R6091U_Handler+0x2e>
			IMU->State = CONFIRMING_SYNC;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	711a      	strb	r2, [r3, #4]
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6818      	ldr	r0, [r3, #0]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	3306      	adds	r3, #6
 80095aa:	2201      	movs	r2, #1
 80095ac:	4619      	mov	r1, r3
 80095ae:	f00b fb97 	bl	8014ce0 <HAL_UART_Receive_IT>
		break;
 80095b2:	e094      	b.n	80096de <R6091U_Handler+0x16a>
		if(IMU->Buffer[0] == 0x00){
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	799b      	ldrb	r3, [r3, #6]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d10b      	bne.n	80095d4 <R6091U_Handler+0x60>
			IMU->State = IN_SYNC;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2202      	movs	r2, #2
 80095c0:	711a      	strb	r2, [r3, #4]
			HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 13);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6818      	ldr	r0, [r3, #0]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	3306      	adds	r3, #6
 80095ca:	220d      	movs	r2, #13
 80095cc:	4619      	mov	r1, r3
 80095ce:	f00b fb87 	bl	8014ce0 <HAL_UART_Receive_IT>
		break;
 80095d2:	e084      	b.n	80096de <R6091U_Handler+0x16a>
			IMU->State = PENDING_SYNC;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	711a      	strb	r2, [r3, #4]
			HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6818      	ldr	r0, [r3, #0]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	3306      	adds	r3, #6
 80095e2:	2201      	movs	r2, #1
 80095e4:	4619      	mov	r1, r3
 80095e6:	f00b fb7b 	bl	8014ce0 <HAL_UART_Receive_IT>
		break;
 80095ea:	e078      	b.n	80096de <R6091U_Handler+0x16a>
		IMU->checksum = 0;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	715a      	strb	r2, [r3, #5]
		IMU->checksum = IMU->Buffer[0] + IMU->Buffer[1] + IMU->Buffer[2] + IMU->Buffer[3] + IMU->Buffer[4] + IMU->Buffer[5]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	799a      	ldrb	r2, [r3, #6]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	79db      	ldrb	r3, [r3, #7]
 80095fa:	4413      	add	r3, r2
 80095fc:	b2da      	uxtb	r2, r3
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	7a1b      	ldrb	r3, [r3, #8]
 8009602:	4413      	add	r3, r2
 8009604:	b2da      	uxtb	r2, r3
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	7a5b      	ldrb	r3, [r3, #9]
 800960a:	4413      	add	r3, r2
 800960c:	b2da      	uxtb	r2, r3
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	7a9b      	ldrb	r3, [r3, #10]
 8009612:	4413      	add	r3, r2
 8009614:	b2da      	uxtb	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	7adb      	ldrb	r3, [r3, #11]
 800961a:	4413      	add	r3, r2
 800961c:	b2da      	uxtb	r2, r3
						+ IMU->Buffer[6] + IMU->Buffer[7] + IMU->Buffer[8] + IMU->Buffer[9] + IMU->Buffer[10] + IMU->Buffer[11];
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	7b1b      	ldrb	r3, [r3, #12]
 8009622:	4413      	add	r3, r2
 8009624:	b2da      	uxtb	r2, r3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	7b5b      	ldrb	r3, [r3, #13]
 800962a:	4413      	add	r3, r2
 800962c:	b2da      	uxtb	r2, r3
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	7b9b      	ldrb	r3, [r3, #14]
 8009632:	4413      	add	r3, r2
 8009634:	b2da      	uxtb	r2, r3
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	7bdb      	ldrb	r3, [r3, #15]
 800963a:	4413      	add	r3, r2
 800963c:	b2da      	uxtb	r2, r3
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	7c1b      	ldrb	r3, [r3, #16]
 8009642:	4413      	add	r3, r2
 8009644:	b2da      	uxtb	r2, r3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	7c5b      	ldrb	r3, [r3, #17]
 800964a:	4413      	add	r3, r2
 800964c:	b2da      	uxtb	r2, r3
		IMU->checksum = IMU->Buffer[0] + IMU->Buffer[1] + IMU->Buffer[2] + IMU->Buffer[3] + IMU->Buffer[4] + IMU->Buffer[5]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	715a      	strb	r2, [r3, #5]
		if( IMU->checksum == IMU->Buffer[12]){
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	795a      	ldrb	r2, [r3, #5]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	7c9b      	ldrb	r3, [r3, #18]
 800965a:	429a      	cmp	r2, r3
 800965c:	d12c      	bne.n	80096b8 <R6091U_Handler+0x144>
			int16_t yaw = *((uint16_t*)&IMU->Buffer[1]);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	3307      	adds	r3, #7
 8009662:	881b      	ldrh	r3, [r3, #0]
 8009664:	81fb      	strh	r3, [r7, #14]
			fyaw = ((float)(yaw) / (float)100.0);
 8009666:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800966a:	ee07 3a90 	vmov	s15, r3
 800966e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009672:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80096e8 <R6091U_Handler+0x174>
 8009676:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800967a:	4b1c      	ldr	r3, [pc, #112]	; (80096ec <R6091U_Handler+0x178>)
 800967c:	edc3 7a00 	vstr	s15, [r3]
			if(testCounter2 >= 20){
 8009680:	4b1b      	ldr	r3, [pc, #108]	; (80096f0 <R6091U_Handler+0x17c>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2b13      	cmp	r3, #19
 8009686:	dd12      	ble.n	80096ae <R6091U_Handler+0x13a>
				led2 = !led2;
 8009688:	4b1a      	ldr	r3, [pc, #104]	; (80096f4 <R6091U_Handler+0x180>)
 800968a:	785b      	ldrb	r3, [r3, #1]
 800968c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009690:	b2db      	uxtb	r3, r3
 8009692:	4a18      	ldr	r2, [pc, #96]	; (80096f4 <R6091U_Handler+0x180>)
 8009694:	2b00      	cmp	r3, #0
 8009696:	bf0c      	ite	eq
 8009698:	2301      	moveq	r3, #1
 800969a:	2300      	movne	r3, #0
 800969c:	b2d9      	uxtb	r1, r3
 800969e:	7853      	ldrb	r3, [r2, #1]
 80096a0:	f361 1386 	bfi	r3, r1, #6, #1
 80096a4:	7053      	strb	r3, [r2, #1]
				testCounter2 = 0;
 80096a6:	4b12      	ldr	r3, [pc, #72]	; (80096f0 <R6091U_Handler+0x17c>)
 80096a8:	2200      	movs	r2, #0
 80096aa:	601a      	str	r2, [r3, #0]
 80096ac:	e004      	b.n	80096b8 <R6091U_Handler+0x144>
				testCounter2 ++;
 80096ae:	4b10      	ldr	r3, [pc, #64]	; (80096f0 <R6091U_Handler+0x17c>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	3301      	adds	r3, #1
 80096b4:	4a0e      	ldr	r2, [pc, #56]	; (80096f0 <R6091U_Handler+0x17c>)
 80096b6:	6013      	str	r3, [r2, #0]
		memset(IMU->Buffer, 0, 13);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	3306      	adds	r3, #6
 80096bc:	220d      	movs	r2, #13
 80096be:	2100      	movs	r1, #0
 80096c0:	4618      	mov	r0, r3
 80096c2:	f00f fe33 	bl	801932c <memset>
		IMU->State = PENDING_SYNC;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	711a      	strb	r2, [r3, #4]
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6818      	ldr	r0, [r3, #0]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	3306      	adds	r3, #6
 80096d4:	2201      	movs	r2, #1
 80096d6:	4619      	mov	r1, r3
 80096d8:	f00b fb02 	bl	8014ce0 <HAL_UART_Receive_IT>
		break;
 80096dc:	bf00      	nop
}
 80096de:	bf00      	nop
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	42c80000 	.word	0x42c80000
 80096ec:	20009730 	.word	0x20009730
 80096f0:	20006758 	.word	0x20006758
 80096f4:	40020814 	.word	0x40020814

080096f8 <RNSStop>:
 * Function Return		: None
 * Function Example		: RNSStop(&RNS);
 */

void RNSStop(RNS_interface_t* rns)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]


	rns->ins.instruction = RNS_STOP;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2203      	movs	r2, #3
 8009704:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = 0.0;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f04f 0200 	mov.w	r2, #0
 800970c:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = 0.0;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f04f 0200 	mov.w	r2, #0
 8009714:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = 0.0;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f04f 0200 	mov.w	r2, #0
 800971c:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = 0.0;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f04f 0200 	mov.w	r2, #0
 8009724:	615a      	str	r2, [r3, #20]

	//RNSSendIns(rns);
	rns->RNS_data.common_instruction = RNS_WAITING;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2202      	movs	r2, #2
 800972a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 800972e:	4b31      	ldr	r3, [pc, #196]	; (80097f4 <RNSStop+0xfc>)
 8009730:	2211      	movs	r2, #17
 8009732:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	791a      	ldrb	r2, [r3, #4]
 8009738:	4b2e      	ldr	r3, [pc, #184]	; (80097f4 <RNSStop+0xfc>)
 800973a:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6818      	ldr	r0, [r3, #0]
 8009740:	2302      	movs	r3, #2
 8009742:	4a2c      	ldr	r2, [pc, #176]	; (80097f4 <RNSStop+0xfc>)
 8009744:	2117      	movs	r1, #23
 8009746:	f7fa f987 	bl	8003a58 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0]),8);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6818      	ldr	r0, [r3, #0]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f103 0208 	add.w	r2, r3, #8
 8009754:	2308      	movs	r3, #8
 8009756:	2118      	movs	r1, #24
 8009758:	f7fa f97e 	bl	8003a58 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2]),8);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6818      	ldr	r0, [r3, #0]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f103 0210 	add.w	r2, r3, #16
 8009766:	2308      	movs	r3, #8
 8009768:	2119      	movs	r1, #25
 800976a:	f7fa f975 	bl	8003a58 <CAN_TxMsg>

	int wait = 0;
 800976e:	2300      	movs	r3, #0
 8009770:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 8009772:	e035      	b.n	80097e0 <RNSStop+0xe8>
	{
		if(wait >= 2000000)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	4a20      	ldr	r2, [pc, #128]	; (80097f8 <RNSStop+0x100>)
 8009778:	4293      	cmp	r3, r2
 800977a:	dd2e      	ble.n	80097da <RNSStop+0xe2>
		{
			insData_send[0] = 17;
 800977c:	4b1d      	ldr	r3, [pc, #116]	; (80097f4 <RNSStop+0xfc>)
 800977e:	2211      	movs	r2, #17
 8009780:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->ins.instruction;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	791a      	ldrb	r2, [r3, #4]
 8009786:	4b1b      	ldr	r3, [pc, #108]	; (80097f4 <RNSStop+0xfc>)
 8009788:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6818      	ldr	r0, [r3, #0]
 800978e:	2302      	movs	r3, #2
 8009790:	4a18      	ldr	r2, [pc, #96]	; (80097f4 <RNSStop+0xfc>)
 8009792:	2117      	movs	r1, #23
 8009794:	f7fa f960 	bl	8003a58 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0]),8);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6818      	ldr	r0, [r3, #0]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f103 0208 	add.w	r2, r3, #8
 80097a2:	2308      	movs	r3, #8
 80097a4:	2118      	movs	r1, #24
 80097a6:	f7fa f957 	bl	8003a58 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2]),8);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6818      	ldr	r0, [r3, #0]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f103 0210 	add.w	r2, r3, #16
 80097b4:	2308      	movs	r3, #8
 80097b6:	2119      	movs	r1, #25
 80097b8:	f7fa f94e 	bl	8003a58 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 80097bc:	4b0f      	ldr	r3, [pc, #60]	; (80097fc <RNSStop+0x104>)
 80097be:	785b      	ldrb	r3, [r3, #1]
 80097c0:	b25b      	sxtb	r3, r3
 80097c2:	4a0e      	ldr	r2, [pc, #56]	; (80097fc <RNSStop+0x104>)
 80097c4:	43db      	mvns	r3, r3
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	09db      	lsrs	r3, r3, #7
 80097ca:	b2d9      	uxtb	r1, r3
 80097cc:	7853      	ldrb	r3, [r2, #1]
 80097ce:	f361 13c7 	bfi	r3, r1, #7, #1
 80097d2:	7053      	strb	r3, [r2, #1]
			wait = 0;
 80097d4:	2300      	movs	r3, #0
 80097d6:	60fb      	str	r3, [r7, #12]
 80097d8:	e002      	b.n	80097e0 <RNSStop+0xe8>
		}
		else
			wait++;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	3301      	adds	r3, #1
 80097de:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80097e6:	2b02      	cmp	r3, #2
 80097e8:	d0c4      	beq.n	8009774 <RNSStop+0x7c>
	}


}
 80097ea:	bf00      	nop
 80097ec:	bf00      	nop
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	2000a510 	.word	0x2000a510
 80097f8:	001e847f 	.word	0x001e847f
 80097fc:	40020814 	.word	0x40020814

08009800 <RNSVelocity>:
 * Function Return		: None
 * Function Example		: RNSVelocity(1.0, 1.5 , 1.5 , 1.0, &RNS);
 */

void RNSVelocity(float fFLeftVelR, float fFRightVelR, float fBLeftVelR, float fBRightVelR, RNS_interface_t* rns)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b086      	sub	sp, #24
 8009804:	af00      	add	r7, sp, #0
 8009806:	ed87 0a05 	vstr	s0, [r7, #20]
 800980a:	edc7 0a04 	vstr	s1, [r7, #16]
 800980e:	ed87 1a03 	vstr	s2, [r7, #12]
 8009812:	edc7 1a02 	vstr	s3, [r7, #8]
 8009816:	6078      	str	r0, [r7, #4]

	rns->ins.instruction = RNS_VELOCITY;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2205      	movs	r2, #5
 800981c:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = fFLeftVelR;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	697a      	ldr	r2, [r7, #20]
 8009822:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = fFRightVelR;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	693a      	ldr	r2, [r7, #16]
 8009828:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = fBLeftVelR;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	68fa      	ldr	r2, [r7, #12]
 800982e:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = fBRightVelR;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	68ba      	ldr	r2, [r7, #8]
 8009834:	615a      	str	r2, [r3, #20]

	RNSSendIns(rns);
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 f804 	bl	8009844 <RNSSendIns>

}
 800983c:	bf00      	nop
 800983e:	3718      	adds	r7, #24
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <RNSSendIns>:
 * Function Return		: None
 * Function Example		: None
 */

void RNSSendIns(RNS_interface_t* rns)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
	while(rns->RNS_data.common_instruction == RNS_BUSY);
 800984c:	bf00      	nop
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009854:	2b01      	cmp	r3, #1
 8009856:	d0fa      	beq.n	800984e <RNSSendIns+0xa>
	rns->RNS_data.common_instruction = RNS_WAITING;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2202      	movs	r2, #2
 800985c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 8009860:	4b31      	ldr	r3, [pc, #196]	; (8009928 <RNSSendIns+0xe4>)
 8009862:	2211      	movs	r2, #17
 8009864:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	791a      	ldrb	r2, [r3, #4]
 800986a:	4b2f      	ldr	r3, [pc, #188]	; (8009928 <RNSSendIns+0xe4>)
 800986c:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS, insData_send,2);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6818      	ldr	r0, [r3, #0]
 8009872:	2302      	movs	r3, #2
 8009874:	4a2c      	ldr	r2, [pc, #176]	; (8009928 <RNSSendIns+0xe4>)
 8009876:	2117      	movs	r1, #23
 8009878:	f7fa f8ee 	bl	8003a58 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6818      	ldr	r0, [r3, #0]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f103 0208 	add.w	r2, r3, #8
 8009886:	2308      	movs	r3, #8
 8009888:	2118      	movs	r1, #24
 800988a:	f7fa f8e5 	bl	8003a58 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6818      	ldr	r0, [r3, #0]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f103 0210 	add.w	r2, r3, #16
 8009898:	2308      	movs	r3, #8
 800989a:	2119      	movs	r1, #25
 800989c:	f7fa f8dc 	bl	8003a58 <CAN_TxMsg>

	int wait = 0;
 80098a0:	2300      	movs	r3, #0
 80098a2:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 80098a4:	e035      	b.n	8009912 <RNSSendIns+0xce>
	{
		if(wait >= 2000000)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	4a20      	ldr	r2, [pc, #128]	; (800992c <RNSSendIns+0xe8>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	dd2e      	ble.n	800990c <RNSSendIns+0xc8>
		{
			insData_send[0] = 17;
 80098ae:	4b1e      	ldr	r3, [pc, #120]	; (8009928 <RNSSendIns+0xe4>)
 80098b0:	2211      	movs	r2, #17
 80098b2:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->ins.instruction;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	791a      	ldrb	r2, [r3, #4]
 80098b8:	4b1b      	ldr	r3, [pc, #108]	; (8009928 <RNSSendIns+0xe4>)
 80098ba:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS, insData_send,2);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6818      	ldr	r0, [r3, #0]
 80098c0:	2302      	movs	r3, #2
 80098c2:	4a19      	ldr	r2, [pc, #100]	; (8009928 <RNSSendIns+0xe4>)
 80098c4:	2117      	movs	r1, #23
 80098c6:	f7fa f8c7 	bl	8003a58 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6818      	ldr	r0, [r3, #0]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f103 0208 	add.w	r2, r3, #8
 80098d4:	2308      	movs	r3, #8
 80098d6:	2118      	movs	r1, #24
 80098d8:	f7fa f8be 	bl	8003a58 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6818      	ldr	r0, [r3, #0]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f103 0210 	add.w	r2, r3, #16
 80098e6:	2308      	movs	r3, #8
 80098e8:	2119      	movs	r1, #25
 80098ea:	f7fa f8b5 	bl	8003a58 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 80098ee:	4b10      	ldr	r3, [pc, #64]	; (8009930 <RNSSendIns+0xec>)
 80098f0:	785b      	ldrb	r3, [r3, #1]
 80098f2:	b25b      	sxtb	r3, r3
 80098f4:	4a0e      	ldr	r2, [pc, #56]	; (8009930 <RNSSendIns+0xec>)
 80098f6:	43db      	mvns	r3, r3
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	09db      	lsrs	r3, r3, #7
 80098fc:	b2d9      	uxtb	r1, r3
 80098fe:	7853      	ldrb	r3, [r2, #1]
 8009900:	f361 13c7 	bfi	r3, r1, #7, #1
 8009904:	7053      	strb	r3, [r2, #1]
			wait = 0;
 8009906:	2300      	movs	r3, #0
 8009908:	60fb      	str	r3, [r7, #12]
 800990a:	e002      	b.n	8009912 <RNSSendIns+0xce>
		}
		else
		{
			wait++;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	3301      	adds	r3, #1
 8009910:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009918:	2b02      	cmp	r3, #2
 800991a:	d0c4      	beq.n	80098a6 <RNSSendIns+0x62>
		}
	}

}
 800991c:	bf00      	nop
 800991e:	bf00      	nop
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	2000a510 	.word	0x2000a510
 800992c:	001e847f 	.word	0x001e847f
 8009930:	40020814 	.word	0x40020814

08009934 <RNSEnquire>:
 * Function Return		: None
 * Function Example		: RNSSet(&RNS, RNS_F_KCD_PTD, 0.9956, 0.01/2000);
 */

uint8_t RNSEnquire(unsigned char parameter, RNS_interface_t* rns)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	4603      	mov	r3, r0
 800993c:	6039      	str	r1, [r7, #0]
 800993e:	71fb      	strb	r3, [r7, #7]

	rns->ins.instruction = parameter;
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	79fa      	ldrb	r2, [r7, #7]
 8009944:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = 0.0;
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	f04f 0200 	mov.w	r2, #0
 800994c:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = 0.0;
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	f04f 0200 	mov.w	r2, #0
 8009954:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = 0.0;
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	f04f 0200 	mov.w	r2, #0
 800995c:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = 0.0;
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	f04f 0200 	mov.w	r2, #0
 8009964:	615a      	str	r2, [r3, #20]

//	RNSSendIns(rns);

	rns->RNS_data.common_instruction = RNS_WAITING;
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	2202      	movs	r2, #2
 800996a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 800996e:	4b3b      	ldr	r3, [pc, #236]	; (8009a5c <RNSEnquire+0x128>)
 8009970:	2211      	movs	r2, #17
 8009972:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	791a      	ldrb	r2, [r3, #4]
 8009978:	4b38      	ldr	r3, [pc, #224]	; (8009a5c <RNSEnquire+0x128>)
 800997a:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	6818      	ldr	r0, [r3, #0]
 8009980:	2302      	movs	r3, #2
 8009982:	4a36      	ldr	r2, [pc, #216]	; (8009a5c <RNSEnquire+0x128>)
 8009984:	2117      	movs	r1, #23
 8009986:	f7fa f867 	bl	8003a58 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	6818      	ldr	r0, [r3, #0]
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	f103 0208 	add.w	r2, r3, #8
 8009994:	2308      	movs	r3, #8
 8009996:	2118      	movs	r1, #24
 8009998:	f7fa f85e 	bl	8003a58 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	6818      	ldr	r0, [r3, #0]
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	f103 0210 	add.w	r2, r3, #16
 80099a6:	2308      	movs	r3, #8
 80099a8:	2119      	movs	r1, #25
 80099aa:	f7fa f855 	bl	8003a58 <CAN_TxMsg>

	int wait = 0;
 80099ae:	2300      	movs	r3, #0
 80099b0:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 80099b2:	e035      	b.n	8009a20 <RNSEnquire+0xec>
	{
		if(wait >= 2000000)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	4a2a      	ldr	r2, [pc, #168]	; (8009a60 <RNSEnquire+0x12c>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	dd2e      	ble.n	8009a1a <RNSEnquire+0xe6>
		{
			insData_send[0] = 17;
 80099bc:	4b27      	ldr	r3, [pc, #156]	; (8009a5c <RNSEnquire+0x128>)
 80099be:	2211      	movs	r2, #17
 80099c0:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->ins.instruction;
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	791a      	ldrb	r2, [r3, #4]
 80099c6:	4b25      	ldr	r3, [pc, #148]	; (8009a5c <RNSEnquire+0x128>)
 80099c8:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	6818      	ldr	r0, [r3, #0]
 80099ce:	2302      	movs	r3, #2
 80099d0:	4a22      	ldr	r2, [pc, #136]	; (8009a5c <RNSEnquire+0x128>)
 80099d2:	2117      	movs	r1, #23
 80099d4:	f7fa f840 	bl	8003a58 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	6818      	ldr	r0, [r3, #0]
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	f103 0208 	add.w	r2, r3, #8
 80099e2:	2308      	movs	r3, #8
 80099e4:	2118      	movs	r1, #24
 80099e6:	f7fa f837 	bl	8003a58 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	6818      	ldr	r0, [r3, #0]
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	f103 0210 	add.w	r2, r3, #16
 80099f4:	2308      	movs	r3, #8
 80099f6:	2119      	movs	r1, #25
 80099f8:	f7fa f82e 	bl	8003a58 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 80099fc:	4b19      	ldr	r3, [pc, #100]	; (8009a64 <RNSEnquire+0x130>)
 80099fe:	785b      	ldrb	r3, [r3, #1]
 8009a00:	b25b      	sxtb	r3, r3
 8009a02:	4a18      	ldr	r2, [pc, #96]	; (8009a64 <RNSEnquire+0x130>)
 8009a04:	43db      	mvns	r3, r3
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	09db      	lsrs	r3, r3, #7
 8009a0a:	b2d9      	uxtb	r1, r3
 8009a0c:	7853      	ldrb	r3, [r2, #1]
 8009a0e:	f361 13c7 	bfi	r3, r1, #7, #1
 8009a12:	7053      	strb	r3, [r2, #1]
			wait = 0;
 8009a14:	2300      	movs	r3, #0
 8009a16:	60fb      	str	r3, [r7, #12]
 8009a18:	e002      	b.n	8009a20 <RNSEnquire+0xec>
		}
		else wait++;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a26:	2b02      	cmp	r3, #2
 8009a28:	d0c4      	beq.n	80099b4 <RNSEnquire+0x80>

	}

	rns->enq.enquiry = parameter;
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	79fa      	ldrb	r2, [r7, #7]
 8009a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rns->enq.enq_buffer[0].data = rns->RNS_data.common_buffer[0].data;
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	641a      	str	r2, [r3, #64]	; 0x40
	rns->enq.enq_buffer[1].data = rns->RNS_data.common_buffer[1].data;
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	645a      	str	r2, [r3, #68]	; 0x44
	rns->enq.enq_buffer[2].data = rns->RNS_data.common_buffer[2].data;
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	649a      	str	r2, [r3, #72]	; 0x48
	rns->enq.enq_buffer[3].data = rns->RNS_data.common_buffer[3].data;
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	64da      	str	r2, [r3, #76]	; 0x4c


	return 1;
 8009a52:	2301      	movs	r3, #1
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3710      	adds	r7, #16
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	2000a510 	.word	0x2000a510
 8009a60:	001e847f 	.word	0x001e847f
 8009a64:	40020814 	.word	0x40020814

08009a68 <ROS_Init>:

/*
 * Call this function in set() as initialization
 */
void ROS_Init(UART_HandleTypeDef* huartx)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
	ROS_UART = huartx;
 8009a70:	4a08      	ldr	r2, [pc, #32]	; (8009a94 <ROS_Init+0x2c>)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6013      	str	r3, [r2, #0]
	path_num = 0;
 8009a76:	4b08      	ldr	r3, [pc, #32]	; (8009a98 <ROS_Init+0x30>)
 8009a78:	2200      	movs	r2, #0
 8009a7a:	601a      	str	r2, [r3, #0]
	ros_counter = 0;
 8009a7c:	4b07      	ldr	r3, [pc, #28]	; (8009a9c <ROS_Init+0x34>)
 8009a7e:	2200      	movs	r2, #0
 8009a80:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(huartx, ROS_buff, 7);
 8009a82:	2207      	movs	r2, #7
 8009a84:	4906      	ldr	r1, [pc, #24]	; (8009aa0 <ROS_Init+0x38>)
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f00b f92a 	bl	8014ce0 <HAL_UART_Receive_IT>
}
 8009a8c:	bf00      	nop
 8009a8e:	3708      	adds	r7, #8
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	2000989c 	.word	0x2000989c
 8009a98:	2000975c 	.word	0x2000975c
 8009a9c:	2000948c 	.word	0x2000948c
 8009aa0:	200077f8 	.word	0x200077f8

08009aa4 <ROS_Write_Flash>:
/*
 *  Write All the PP_Points into Flash
 *  Including different path
 */
uint32_t ROS_Write_Flash(void)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b088      	sub	sp, #32
 8009aa8:	af00      	add	r7, sp, #0
	uint32_t success = 0;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	61fb      	str	r3, [r7, #28]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	HAL_FLASH_Unlock();
 8009aae:	f006 fa9b 	bl	800ffe8 <HAL_FLASH_Unlock>

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8009ab2:	4b47      	ldr	r3, [pc, #284]	; (8009bd0 <ROS_Write_Flash+0x12c>)
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8009ab8:	4b45      	ldr	r3, [pc, #276]	; (8009bd0 <ROS_Write_Flash+0x12c>)
 8009aba:	2202      	movs	r2, #2
 8009abc:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = FLASH_SECTOR_8;
 8009abe:	4b44      	ldr	r3, [pc, #272]	; (8009bd0 <ROS_Write_Flash+0x12c>)
 8009ac0:	2208      	movs	r2, #8
 8009ac2:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors     = 1;
 8009ac4:	4b42      	ldr	r3, [pc, #264]	; (8009bd0 <ROS_Write_Flash+0x12c>)
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	60da      	str	r2, [r3, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8009aca:	1d3b      	adds	r3, r7, #4
 8009acc:	4619      	mov	r1, r3
 8009ace:	4840      	ldr	r0, [pc, #256]	; (8009bd0 <ROS_Write_Flash+0x12c>)
 8009ad0:	f006 fbf8 	bl	80102c4 <HAL_FLASHEx_Erase>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d003      	beq.n	8009ae2 <ROS_Write_Flash+0x3e>
	{
		return HAL_FLASH_GetError ();
 8009ada:	f006 fab7 	bl	801004c <HAL_FLASH_GetError>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	e072      	b.n	8009bc8 <ROS_Write_Flash+0x124>
	}

	uint32_t address = SECTOR8;
 8009ae2:	4b3c      	ldr	r3, [pc, #240]	; (8009bd4 <ROS_Write_Flash+0x130>)
 8009ae4:	61bb      	str	r3, [r7, #24]
 8009ae6:	4b3c      	ldr	r3, [pc, #240]	; (8009bd8 <ROS_Write_Flash+0x134>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
	uint32_t temp;

	memcpy(&temp, &path_num, 4);
 8009aea:	603b      	str	r3, [r7, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, temp);
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	461a      	mov	r2, r3
 8009af0:	f04f 0300 	mov.w	r3, #0
 8009af4:	69b9      	ldr	r1, [r7, #24]
 8009af6:	2002      	movs	r0, #2
 8009af8:	f006 fa22 	bl	800ff40 <HAL_FLASH_Program>
	address += 4;
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	3304      	adds	r3, #4
 8009b00:	61bb      	str	r3, [r7, #24]

	for(int i = 0; i < path_num; i++)
 8009b02:	2300      	movs	r3, #0
 8009b04:	617b      	str	r3, [r7, #20]
 8009b06:	e014      	b.n	8009b32 <ROS_Write_Flash+0x8e>
	{
		memcpy(&temp, &point_num[i], 4);
 8009b08:	4b34      	ldr	r3, [pc, #208]	; (8009bdc <ROS_Write_Flash+0x138>)
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	4413      	add	r3, r2
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	603b      	str	r3, [r7, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, temp);
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	461a      	mov	r2, r3
 8009b1a:	f04f 0300 	mov.w	r3, #0
 8009b1e:	69b9      	ldr	r1, [r7, #24]
 8009b20:	2002      	movs	r0, #2
 8009b22:	f006 fa0d 	bl	800ff40 <HAL_FLASH_Program>
		address += 4;
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	3304      	adds	r3, #4
 8009b2a:	61bb      	str	r3, [r7, #24]
	for(int i = 0; i < path_num; i++)
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	3301      	adds	r3, #1
 8009b30:	617b      	str	r3, [r7, #20]
 8009b32:	4b29      	ldr	r3, [pc, #164]	; (8009bd8 <ROS_Write_Flash+0x134>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	697a      	ldr	r2, [r7, #20]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	dbe5      	blt.n	8009b08 <ROS_Write_Flash+0x64>
	}

	for(int i = 0; i < path_num; i++) // Number of path
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	613b      	str	r3, [r7, #16]
 8009b40:	e03a      	b.n	8009bb8 <ROS_Write_Flash+0x114>
	{
		for(int j = 0; j < point_num[i]; j++) // Number of point at specific path
 8009b42:	2300      	movs	r3, #0
 8009b44:	60fb      	str	r3, [r7, #12]
 8009b46:	e02b      	b.n	8009ba0 <ROS_Write_Flash+0xfc>
		{
			for(int k = 0; k < 7; k++)
 8009b48:	2300      	movs	r3, #0
 8009b4a:	60bb      	str	r3, [r7, #8]
 8009b4c:	e022      	b.n	8009b94 <ROS_Write_Flash+0xf0>
			{
				memcpy(&temp, &PP_Points[i][j][k], 4);
 8009b4e:	4b24      	ldr	r3, [pc, #144]	; (8009be0 <ROS_Write_Flash+0x13c>)
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	4413      	add	r3, r2
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	4413      	add	r3, r2
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	4413      	add	r3, r2
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	603b      	str	r3, [r7, #0]
				if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, temp) == HAL_OK)
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	461a      	mov	r2, r3
 8009b70:	f04f 0300 	mov.w	r3, #0
 8009b74:	69b9      	ldr	r1, [r7, #24]
 8009b76:	2002      	movs	r0, #2
 8009b78:	f006 f9e2 	bl	800ff40 <HAL_FLASH_Program>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d102      	bne.n	8009b88 <ROS_Write_Flash+0xe4>
				{
					success++;
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	3301      	adds	r3, #1
 8009b86:	61fb      	str	r3, [r7, #28]
				}
				address += 4;
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	3304      	adds	r3, #4
 8009b8c:	61bb      	str	r3, [r7, #24]
			for(int k = 0; k < 7; k++)
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	3301      	adds	r3, #1
 8009b92:	60bb      	str	r3, [r7, #8]
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	2b06      	cmp	r3, #6
 8009b98:	ddd9      	ble.n	8009b4e <ROS_Write_Flash+0xaa>
		for(int j = 0; j < point_num[i]; j++) // Number of point at specific path
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	60fb      	str	r3, [r7, #12]
 8009ba0:	4b0e      	ldr	r3, [pc, #56]	; (8009bdc <ROS_Write_Flash+0x138>)
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	4413      	add	r3, r2
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	dbca      	blt.n	8009b48 <ROS_Write_Flash+0xa4>
	for(int i = 0; i < path_num; i++) // Number of path
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	613b      	str	r3, [r7, #16]
 8009bb8:	4b07      	ldr	r3, [pc, #28]	; (8009bd8 <ROS_Write_Flash+0x134>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	693a      	ldr	r2, [r7, #16]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	dbbf      	blt.n	8009b42 <ROS_Write_Flash+0x9e>
			}
		}
	}
	HAL_FLASH_Lock();
 8009bc2:	f006 fa33 	bl	801002c <HAL_FLASH_Lock>
	return success;
 8009bc6:	69fb      	ldr	r3, [r7, #28]
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3720      	adds	r7, #32
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	200002cc 	.word	0x200002cc
 8009bd4:	08080004 	.word	0x08080004
 8009bd8:	2000975c 	.word	0x2000975c
 8009bdc:	20009350 	.word	0x20009350
 8009be0:	20009200 	.word	0x20009200

08009be4 <ROS_Handler>:

/*
 * Call this function in the USART Receive CallBack
 */
void ROS_Handler(void)
{
 8009be4:	b590      	push	{r4, r7, lr}
 8009be6:	b08f      	sub	sp, #60	; 0x3c
 8009be8:	af00      	add	r7, sp, #0
	static uint8_t state = 0;
	switch(state)
 8009bea:	4ba1      	ldr	r3, [pc, #644]	; (8009e70 <ROS_Handler+0x28c>)
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	2b03      	cmp	r3, #3
 8009bf0:	f200 8343 	bhi.w	800a27a <ROS_Handler+0x696>
 8009bf4:	a201      	add	r2, pc, #4	; (adr r2, 8009bfc <ROS_Handler+0x18>)
 8009bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bfa:	bf00      	nop
 8009bfc:	08009c0d 	.word	0x08009c0d
 8009c00:	08009fd1 	.word	0x08009fd1
 8009c04:	0800a07f 	.word	0x0800a07f
 8009c08:	0800a177 	.word	0x0800a177
	{
	case 0:
		if(ROS_buff[0] == 0x01 && ROS_buff[1] == 0x02)
 8009c0c:	4b99      	ldr	r3, [pc, #612]	; (8009e74 <ROS_Handler+0x290>)
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	f040 81d3 	bne.w	8009fbc <ROS_Handler+0x3d8>
 8009c16:	4b97      	ldr	r3, [pc, #604]	; (8009e74 <ROS_Handler+0x290>)
 8009c18:	785b      	ldrb	r3, [r3, #1]
 8009c1a:	2b02      	cmp	r3, #2
 8009c1c:	f040 81ce 	bne.w	8009fbc <ROS_Handler+0x3d8>
 8009c20:	4b94      	ldr	r3, [pc, #592]	; (8009e74 <ROS_Handler+0x290>)
 8009c22:	789a      	ldrb	r2, [r3, #2]
		{
//			led2 = !led2;
			memcpy(&instruction, &ROS_buff[2], 1);
 8009c24:	4b94      	ldr	r3, [pc, #592]	; (8009e78 <ROS_Handler+0x294>)
 8009c26:	701a      	strb	r2, [r3, #0]
			if(instruction == TEST)
 8009c28:	4b93      	ldr	r3, [pc, #588]	; (8009e78 <ROS_Handler+0x294>)
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d13e      	bne.n	8009cae <ROS_Handler+0xca>
			{
				state = 1;
 8009c30:	4b8f      	ldr	r3, [pc, #572]	; (8009e70 <ROS_Handler+0x28c>)
 8009c32:	2201      	movs	r2, #1
 8009c34:	701a      	strb	r2, [r3, #0]
 8009c36:	4b8f      	ldr	r3, [pc, #572]	; (8009e74 <ROS_Handler+0x290>)
 8009c38:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8009c3c:	461a      	mov	r2, r3
				memcpy(&test_point_num, &ROS_buff[3], 4);
 8009c3e:	4b8f      	ldr	r3, [pc, #572]	; (8009e7c <ROS_Handler+0x298>)
 8009c40:	601a      	str	r2, [r3, #0]

				test_points = (float**)malloc(test_point_num * sizeof(float*));
 8009c42:	4b8e      	ldr	r3, [pc, #568]	; (8009e7c <ROS_Handler+0x298>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f00f fb51 	bl	80192f0 <malloc>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	461a      	mov	r2, r3
 8009c52:	4b8b      	ldr	r3, [pc, #556]	; (8009e80 <ROS_Handler+0x29c>)
 8009c54:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < test_point_num; i++)
 8009c56:	2300      	movs	r3, #0
 8009c58:	637b      	str	r3, [r7, #52]	; 0x34
 8009c5a:	e00c      	b.n	8009c76 <ROS_Handler+0x92>
					test_points[i] = (float*)malloc(7 * sizeof(float));
 8009c5c:	4b88      	ldr	r3, [pc, #544]	; (8009e80 <ROS_Handler+0x29c>)
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	18d4      	adds	r4, r2, r3
 8009c66:	201c      	movs	r0, #28
 8009c68:	f00f fb42 	bl	80192f0 <malloc>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	6023      	str	r3, [r4, #0]
				for(int i = 0; i < test_point_num; i++)
 8009c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c72:	3301      	adds	r3, #1
 8009c74:	637b      	str	r3, [r7, #52]	; 0x34
 8009c76:	4b81      	ldr	r3, [pc, #516]	; (8009e7c <ROS_Handler+0x298>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	dbed      	blt.n	8009c5c <ROS_Handler+0x78>

				HAL_UART_Transmit(ROS_UART, (uint8_t* )&test_point_num, 4, HAL_MAX_DELAY);
 8009c80:	4b80      	ldr	r3, [pc, #512]	; (8009e84 <ROS_Handler+0x2a0>)
 8009c82:	6818      	ldr	r0, [r3, #0]
 8009c84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c88:	2204      	movs	r2, #4
 8009c8a:	497c      	ldr	r1, [pc, #496]	; (8009e7c <ROS_Handler+0x298>)
 8009c8c:	f00a ff8f 	bl	8014bae <HAL_UART_Transmit>
				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 28 * test_point_num);
 8009c90:	4b7c      	ldr	r3, [pc, #496]	; (8009e84 <ROS_Handler+0x2a0>)
 8009c92:	6818      	ldr	r0, [r3, #0]
 8009c94:	4b79      	ldr	r3, [pc, #484]	; (8009e7c <ROS_Handler+0x298>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	00d2      	lsls	r2, r2, #3
 8009c9e:	1ad3      	subs	r3, r2, r3
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	4973      	ldr	r1, [pc, #460]	; (8009e74 <ROS_Handler+0x290>)
 8009ca8:	f00b f81a 	bl	8014ce0 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 8009cac:	e18e      	b.n	8009fcc <ROS_Handler+0x3e8>
			}

			else if(instruction == REGISTER)
 8009cae:	4b72      	ldr	r3, [pc, #456]	; (8009e78 <ROS_Handler+0x294>)
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d105      	bne.n	8009cc2 <ROS_Handler+0xde>
			{
				state = 0;
 8009cb6:	4b6e      	ldr	r3, [pc, #440]	; (8009e70 <ROS_Handler+0x28c>)
 8009cb8:	2200      	movs	r2, #0
 8009cba:	701a      	strb	r2, [r3, #0]
				ROS_Register();
 8009cbc:	f000 faf2 	bl	800a2a4 <ROS_Register>
			if(instruction == TEST)
 8009cc0:	e184      	b.n	8009fcc <ROS_Handler+0x3e8>
			}

			else if(instruction == WRITE)
 8009cc2:	4b6d      	ldr	r3, [pc, #436]	; (8009e78 <ROS_Handler+0x294>)
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	d14a      	bne.n	8009d60 <ROS_Handler+0x17c>
			{
				total_point_num = 0;
 8009cca:	4b6f      	ldr	r3, [pc, #444]	; (8009e88 <ROS_Handler+0x2a4>)
 8009ccc:	2200      	movs	r2, #0
 8009cce:	601a      	str	r2, [r3, #0]
				uint32_t write_success = 0;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	607b      	str	r3, [r7, #4]
				write_success += ROS_Write_Flash();
 8009cd4:	f7ff fee6 	bl	8009aa4 <ROS_Write_Flash>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4413      	add	r3, r2
 8009cde:	607b      	str	r3, [r7, #4]

				for(int i = 0; i < path_num; i++)
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	633b      	str	r3, [r7, #48]	; 0x30
 8009ce4:	e00d      	b.n	8009d02 <ROS_Handler+0x11e>
				{
					total_point_num += point_num[i];
 8009ce6:	4b69      	ldr	r3, [pc, #420]	; (8009e8c <ROS_Handler+0x2a8>)
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	4413      	add	r3, r2
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	4b65      	ldr	r3, [pc, #404]	; (8009e88 <ROS_Handler+0x2a4>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4413      	add	r3, r2
 8009cf8:	4a63      	ldr	r2, [pc, #396]	; (8009e88 <ROS_Handler+0x2a4>)
 8009cfa:	6013      	str	r3, [r2, #0]
				for(int i = 0; i < path_num; i++)
 8009cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfe:	3301      	adds	r3, #1
 8009d00:	633b      	str	r3, [r7, #48]	; 0x30
 8009d02:	4b63      	ldr	r3, [pc, #396]	; (8009e90 <ROS_Handler+0x2ac>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	dbec      	blt.n	8009ce6 <ROS_Handler+0x102>
				}

				if(write_success == total_point_num * 7)
 8009d0c:	4b5e      	ldr	r3, [pc, #376]	; (8009e88 <ROS_Handler+0x2a4>)
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	4613      	mov	r3, r2
 8009d12:	00db      	lsls	r3, r3, #3
 8009d14:	1a9a      	subs	r2, r3, r2
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d10b      	bne.n	8009d34 <ROS_Handler+0x150>
				{
					ack = 0x21;
 8009d1c:	4b5d      	ldr	r3, [pc, #372]	; (8009e94 <ROS_Handler+0x2b0>)
 8009d1e:	2221      	movs	r2, #33	; 0x21
 8009d20:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(ROS_UART, &ack, 1, HAL_MAX_DELAY);
 8009d22:	4b58      	ldr	r3, [pc, #352]	; (8009e84 <ROS_Handler+0x2a0>)
 8009d24:	6818      	ldr	r0, [r3, #0]
 8009d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	4959      	ldr	r1, [pc, #356]	; (8009e94 <ROS_Handler+0x2b0>)
 8009d2e:	f00a ff3e 	bl	8014bae <HAL_UART_Transmit>
 8009d32:	e00a      	b.n	8009d4a <ROS_Handler+0x166>
				}
				else
				{
					ack = 0x22;
 8009d34:	4b57      	ldr	r3, [pc, #348]	; (8009e94 <ROS_Handler+0x2b0>)
 8009d36:	2222      	movs	r2, #34	; 0x22
 8009d38:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(ROS_UART, &ack, 1, HAL_MAX_DELAY);
 8009d3a:	4b52      	ldr	r3, [pc, #328]	; (8009e84 <ROS_Handler+0x2a0>)
 8009d3c:	6818      	ldr	r0, [r3, #0]
 8009d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d42:	2201      	movs	r2, #1
 8009d44:	4953      	ldr	r1, [pc, #332]	; (8009e94 <ROS_Handler+0x2b0>)
 8009d46:	f00a ff32 	bl	8014bae <HAL_UART_Transmit>
				}

				state = 0;
 8009d4a:	4b49      	ldr	r3, [pc, #292]	; (8009e70 <ROS_Handler+0x28c>)
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 8009d50:	4b4c      	ldr	r3, [pc, #304]	; (8009e84 <ROS_Handler+0x2a0>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2207      	movs	r2, #7
 8009d56:	4947      	ldr	r1, [pc, #284]	; (8009e74 <ROS_Handler+0x290>)
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f00a ffc1 	bl	8014ce0 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 8009d5e:	e135      	b.n	8009fcc <ROS_Handler+0x3e8>
			}

			else if(instruction == DELETE)
 8009d60:	4b45      	ldr	r3, [pc, #276]	; (8009e78 <ROS_Handler+0x294>)
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	2b05      	cmp	r3, #5
 8009d66:	d10e      	bne.n	8009d86 <ROS_Handler+0x1a2>
			{
				state = 0;
 8009d68:	4b41      	ldr	r3, [pc, #260]	; (8009e70 <ROS_Handler+0x28c>)
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	701a      	strb	r2, [r3, #0]
 8009d6e:	4b41      	ldr	r3, [pc, #260]	; (8009e74 <ROS_Handler+0x290>)
 8009d70:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8009d74:	461a      	mov	r2, r3
				memcpy(&path_index, &ROS_buff[3], 4);
 8009d76:	4b48      	ldr	r3, [pc, #288]	; (8009e98 <ROS_Handler+0x2b4>)
 8009d78:	601a      	str	r2, [r3, #0]

				ROS_Delete(path_index);
 8009d7a:	4b47      	ldr	r3, [pc, #284]	; (8009e98 <ROS_Handler+0x2b4>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f000 fbaa 	bl	800a4d8 <ROS_Delete>
			if(instruction == TEST)
 8009d84:	e122      	b.n	8009fcc <ROS_Handler+0x3e8>
			}

			else if(instruction == READ)
 8009d86:	4b3c      	ldr	r3, [pc, #240]	; (8009e78 <ROS_Handler+0x294>)
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	2b08      	cmp	r3, #8
 8009d8c:	d144      	bne.n	8009e18 <ROS_Handler+0x234>
 8009d8e:	4b39      	ldr	r3, [pc, #228]	; (8009e74 <ROS_Handler+0x290>)
 8009d90:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8009d94:	461a      	mov	r2, r3
			{
				memcpy(&path_index, &ROS_buff[3], 4);
 8009d96:	4b40      	ldr	r3, [pc, #256]	; (8009e98 <ROS_Handler+0x2b4>)
 8009d98:	601a      	str	r2, [r3, #0]

				for(int i = 0; i < point_num[path_index - 1]; i++)
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d9e:	e023      	b.n	8009de8 <ROS_Handler+0x204>
				{
					for(int j = 0; j < 7; j++)
 8009da0:	2300      	movs	r3, #0
 8009da2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009da4:	e01a      	b.n	8009ddc <ROS_Handler+0x1f8>
					{
						HAL_UART_Transmit(ROS_UART, (uint8_t*)&PP_Points[path_index - 1][i][j], 4, HAL_MAX_DELAY);
 8009da6:	4b37      	ldr	r3, [pc, #220]	; (8009e84 <ROS_Handler+0x2a0>)
 8009da8:	6818      	ldr	r0, [r3, #0]
 8009daa:	4b3c      	ldr	r3, [pc, #240]	; (8009e9c <ROS_Handler+0x2b8>)
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	4b3a      	ldr	r3, [pc, #232]	; (8009e98 <ROS_Handler+0x2b4>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009db6:	3b01      	subs	r3, #1
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	4413      	add	r3, r2
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc0:	009b      	lsls	r3, r3, #2
 8009dc2:	4413      	add	r3, r2
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	18d1      	adds	r1, r2, r3
 8009dcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009dd0:	2204      	movs	r2, #4
 8009dd2:	f00a feec 	bl	8014bae <HAL_UART_Transmit>
					for(int j = 0; j < 7; j++)
 8009dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd8:	3301      	adds	r3, #1
 8009dda:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dde:	2b06      	cmp	r3, #6
 8009de0:	dde1      	ble.n	8009da6 <ROS_Handler+0x1c2>
				for(int i = 0; i < point_num[path_index - 1]; i++)
 8009de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de4:	3301      	adds	r3, #1
 8009de6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009de8:	4b28      	ldr	r3, [pc, #160]	; (8009e8c <ROS_Handler+0x2a8>)
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	4b2a      	ldr	r3, [pc, #168]	; (8009e98 <ROS_Handler+0x2b4>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009df4:	3b01      	subs	r3, #1
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	4413      	add	r3, r2
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	dbce      	blt.n	8009da0 <ROS_Handler+0x1bc>
					}
				}
				state = 0;
 8009e02:	4b1b      	ldr	r3, [pc, #108]	; (8009e70 <ROS_Handler+0x28c>)
 8009e04:	2200      	movs	r2, #0
 8009e06:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 8009e08:	4b1e      	ldr	r3, [pc, #120]	; (8009e84 <ROS_Handler+0x2a0>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2207      	movs	r2, #7
 8009e0e:	4919      	ldr	r1, [pc, #100]	; (8009e74 <ROS_Handler+0x290>)
 8009e10:	4618      	mov	r0, r3
 8009e12:	f00a ff65 	bl	8014ce0 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 8009e16:	e0d9      	b.n	8009fcc <ROS_Handler+0x3e8>
			}

			else if(instruction == DELETE_ALL)
 8009e18:	4b17      	ldr	r3, [pc, #92]	; (8009e78 <ROS_Handler+0x294>)
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	2b07      	cmp	r3, #7
 8009e1e:	d105      	bne.n	8009e2c <ROS_Handler+0x248>
			{
				state = 0;
 8009e20:	4b13      	ldr	r3, [pc, #76]	; (8009e70 <ROS_Handler+0x28c>)
 8009e22:	2200      	movs	r2, #0
 8009e24:	701a      	strb	r2, [r3, #0]
				ROS_DeleteAll();
 8009e26:	f000 fc15 	bl	800a654 <ROS_DeleteAll>
			if(instruction == TEST)
 8009e2a:	e0cf      	b.n	8009fcc <ROS_Handler+0x3e8>
			}

			else if(instruction == EDIT_PATH)
 8009e2c:	4b12      	ldr	r3, [pc, #72]	; (8009e78 <ROS_Handler+0x294>)
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	2b03      	cmp	r3, #3
 8009e32:	d105      	bne.n	8009e40 <ROS_Handler+0x25c>
			{
				state = 0;
 8009e34:	4b0e      	ldr	r3, [pc, #56]	; (8009e70 <ROS_Handler+0x28c>)
 8009e36:	2200      	movs	r2, #0
 8009e38:	701a      	strb	r2, [r3, #0]
				ROS_EditPath();
 8009e3a:	f000 fc65 	bl	800a708 <ROS_EditPath>
			if(instruction == TEST)
 8009e3e:	e0c5      	b.n	8009fcc <ROS_Handler+0x3e8>
			}

			else if(instruction == GET_COUNTER)
 8009e40:	4b0d      	ldr	r3, [pc, #52]	; (8009e78 <ROS_Handler+0x294>)
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	2b09      	cmp	r3, #9
 8009e46:	d12d      	bne.n	8009ea4 <ROS_Handler+0x2c0>
			{
				HAL_UART_Transmit(ROS_UART, (uint8_t*)&ros_counter, 4, HAL_MAX_DELAY);
 8009e48:	4b0e      	ldr	r3, [pc, #56]	; (8009e84 <ROS_Handler+0x2a0>)
 8009e4a:	6818      	ldr	r0, [r3, #0]
 8009e4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e50:	2204      	movs	r2, #4
 8009e52:	4913      	ldr	r1, [pc, #76]	; (8009ea0 <ROS_Handler+0x2bc>)
 8009e54:	f00a feab 	bl	8014bae <HAL_UART_Transmit>

				state = 0;
 8009e58:	4b05      	ldr	r3, [pc, #20]	; (8009e70 <ROS_Handler+0x28c>)
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 8009e5e:	4b09      	ldr	r3, [pc, #36]	; (8009e84 <ROS_Handler+0x2a0>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2207      	movs	r2, #7
 8009e64:	4903      	ldr	r1, [pc, #12]	; (8009e74 <ROS_Handler+0x290>)
 8009e66:	4618      	mov	r0, r3
 8009e68:	f00a ff3a 	bl	8014ce0 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 8009e6c:	e0ae      	b.n	8009fcc <ROS_Handler+0x3e8>
 8009e6e:	bf00      	nop
 8009e70:	200002e0 	.word	0x200002e0
 8009e74:	200077f8 	.word	0x200077f8
 8009e78:	20009208 	.word	0x20009208
 8009e7c:	200092b0 	.word	0x200092b0
 8009e80:	20009ba4 	.word	0x20009ba4
 8009e84:	2000989c 	.word	0x2000989c
 8009e88:	20009488 	.word	0x20009488
 8009e8c:	20009350 	.word	0x20009350
 8009e90:	2000975c 	.word	0x2000975c
 8009e94:	20006988 	.word	0x20006988
 8009e98:	20006a20 	.word	0x20006a20
 8009e9c:	20009200 	.word	0x20009200
 8009ea0:	2000948c 	.word	0x2000948c
			}

			else if(instruction == EDIT_POINT)
 8009ea4:	4b92      	ldr	r3, [pc, #584]	; (800a0f0 <ROS_Handler+0x50c>)
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	2b04      	cmp	r3, #4
 8009eaa:	d118      	bne.n	8009ede <ROS_Handler+0x2fa>
			{
				state = 2;
 8009eac:	4b91      	ldr	r3, [pc, #580]	; (800a0f4 <ROS_Handler+0x510>)
 8009eae:	2202      	movs	r2, #2
 8009eb0:	701a      	strb	r2, [r3, #0]
 8009eb2:	4b91      	ldr	r3, [pc, #580]	; (800a0f8 <ROS_Handler+0x514>)
 8009eb4:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8009eb8:	461a      	mov	r2, r3
				memcpy(&path_index, &ROS_buff[3], 4);
 8009eba:	4b90      	ldr	r3, [pc, #576]	; (800a0fc <ROS_Handler+0x518>)
 8009ebc:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(ROS_UART, (uint8_t*)&path_index, 4, HAL_MAX_DELAY);
 8009ebe:	4b90      	ldr	r3, [pc, #576]	; (800a100 <ROS_Handler+0x51c>)
 8009ec0:	6818      	ldr	r0, [r3, #0]
 8009ec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ec6:	2204      	movs	r2, #4
 8009ec8:	498c      	ldr	r1, [pc, #560]	; (800a0fc <ROS_Handler+0x518>)
 8009eca:	f00a fe70 	bl	8014bae <HAL_UART_Transmit>

				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 32); // 7 Data + 1 Point Index
 8009ece:	4b8c      	ldr	r3, [pc, #560]	; (800a100 <ROS_Handler+0x51c>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	2220      	movs	r2, #32
 8009ed4:	4988      	ldr	r1, [pc, #544]	; (800a0f8 <ROS_Handler+0x514>)
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f00a ff02 	bl	8014ce0 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 8009edc:	e076      	b.n	8009fcc <ROS_Handler+0x3e8>
			}

			else if(instruction == DELETE_POINT)
 8009ede:	4b84      	ldr	r3, [pc, #528]	; (800a0f0 <ROS_Handler+0x50c>)
 8009ee0:	781b      	ldrb	r3, [r3, #0]
 8009ee2:	2b06      	cmp	r3, #6
 8009ee4:	d118      	bne.n	8009f18 <ROS_Handler+0x334>
			{
				state = 3;
 8009ee6:	4b83      	ldr	r3, [pc, #524]	; (800a0f4 <ROS_Handler+0x510>)
 8009ee8:	2203      	movs	r2, #3
 8009eea:	701a      	strb	r2, [r3, #0]
 8009eec:	4b82      	ldr	r3, [pc, #520]	; (800a0f8 <ROS_Handler+0x514>)
 8009eee:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8009ef2:	461a      	mov	r2, r3
				memcpy(&path_index, &ROS_buff[3], 4);
 8009ef4:	4b81      	ldr	r3, [pc, #516]	; (800a0fc <ROS_Handler+0x518>)
 8009ef6:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(ROS_UART, (uint8_t*)&path_index, 4, HAL_MAX_DELAY);
 8009ef8:	4b81      	ldr	r3, [pc, #516]	; (800a100 <ROS_Handler+0x51c>)
 8009efa:	6818      	ldr	r0, [r3, #0]
 8009efc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f00:	2204      	movs	r2, #4
 8009f02:	497e      	ldr	r1, [pc, #504]	; (800a0fc <ROS_Handler+0x518>)
 8009f04:	f00a fe53 	bl	8014bae <HAL_UART_Transmit>

				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 4);
 8009f08:	4b7d      	ldr	r3, [pc, #500]	; (800a100 <ROS_Handler+0x51c>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2204      	movs	r2, #4
 8009f0e:	497a      	ldr	r1, [pc, #488]	; (800a0f8 <ROS_Handler+0x514>)
 8009f10:	4618      	mov	r0, r3
 8009f12:	f00a fee5 	bl	8014ce0 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 8009f16:	e059      	b.n	8009fcc <ROS_Handler+0x3e8>
			}

			else if(instruction == TEST_RUN)
 8009f18:	4b75      	ldr	r3, [pc, #468]	; (800a0f0 <ROS_Handler+0x50c>)
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	2b0a      	cmp	r3, #10
 8009f1e:	d113      	bne.n	8009f48 <ROS_Handler+0x364>
			{
				if(test_point_num)
 8009f20:	4b78      	ldr	r3, [pc, #480]	; (800a104 <ROS_Handler+0x520>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d004      	beq.n	8009f32 <ROS_Handler+0x34e>
				{
					sys.ros_test_start = 1;
 8009f28:	4a77      	ldr	r2, [pc, #476]	; (800a108 <ROS_Handler+0x524>)
 8009f2a:	7813      	ldrb	r3, [r2, #0]
 8009f2c:	f043 0320 	orr.w	r3, r3, #32
 8009f30:	7013      	strb	r3, [r2, #0]
				}

				state = 0;
 8009f32:	4b70      	ldr	r3, [pc, #448]	; (800a0f4 <ROS_Handler+0x510>)
 8009f34:	2200      	movs	r2, #0
 8009f36:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 8009f38:	4b71      	ldr	r3, [pc, #452]	; (800a100 <ROS_Handler+0x51c>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2207      	movs	r2, #7
 8009f3e:	496e      	ldr	r1, [pc, #440]	; (800a0f8 <ROS_Handler+0x514>)
 8009f40:	4618      	mov	r0, r3
 8009f42:	f00a fecd 	bl	8014ce0 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 8009f46:	e041      	b.n	8009fcc <ROS_Handler+0x3e8>
			}

			else if(instruction == RUN_PATH)
 8009f48:	4b69      	ldr	r3, [pc, #420]	; (800a0f0 <ROS_Handler+0x50c>)
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	2b0b      	cmp	r3, #11
 8009f4e:	d121      	bne.n	8009f94 <ROS_Handler+0x3b0>
 8009f50:	4b69      	ldr	r3, [pc, #420]	; (800a0f8 <ROS_Handler+0x514>)
 8009f52:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8009f56:	461a      	mov	r2, r3
			{
				memcpy(&path_index, &ROS_buff[3], 4);
 8009f58:	4b68      	ldr	r3, [pc, #416]	; (800a0fc <ROS_Handler+0x518>)
 8009f5a:	601a      	str	r2, [r3, #0]
				if(point_num[path_index - 1])
 8009f5c:	4b6b      	ldr	r3, [pc, #428]	; (800a10c <ROS_Handler+0x528>)
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	4b66      	ldr	r3, [pc, #408]	; (800a0fc <ROS_Handler+0x518>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	009b      	lsls	r3, r3, #2
 8009f6c:	4413      	add	r3, r2
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d004      	beq.n	8009f7e <ROS_Handler+0x39a>
				{
					sys.ros_path_start = 1;
 8009f74:	4a64      	ldr	r2, [pc, #400]	; (800a108 <ROS_Handler+0x524>)
 8009f76:	7813      	ldrb	r3, [r2, #0]
 8009f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f7c:	7013      	strb	r3, [r2, #0]
				}

				state = 0;
 8009f7e:	4b5d      	ldr	r3, [pc, #372]	; (800a0f4 <ROS_Handler+0x510>)
 8009f80:	2200      	movs	r2, #0
 8009f82:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 8009f84:	4b5e      	ldr	r3, [pc, #376]	; (800a100 <ROS_Handler+0x51c>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2207      	movs	r2, #7
 8009f8a:	495b      	ldr	r1, [pc, #364]	; (800a0f8 <ROS_Handler+0x514>)
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f00a fea7 	bl	8014ce0 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 8009f92:	e01b      	b.n	8009fcc <ROS_Handler+0x3e8>
			}

			else if(instruction == STOP_RUN)
 8009f94:	4b56      	ldr	r3, [pc, #344]	; (800a0f0 <ROS_Handler+0x50c>)
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	2b0c      	cmp	r3, #12
 8009f9a:	d117      	bne.n	8009fcc <ROS_Handler+0x3e8>
			{
				sys.ros_stop = 1;
 8009f9c:	4a5a      	ldr	r2, [pc, #360]	; (800a108 <ROS_Handler+0x524>)
 8009f9e:	7813      	ldrb	r3, [r2, #0]
 8009fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fa4:	7013      	strb	r3, [r2, #0]
				state = 0;
 8009fa6:	4b53      	ldr	r3, [pc, #332]	; (800a0f4 <ROS_Handler+0x510>)
 8009fa8:	2200      	movs	r2, #0
 8009faa:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 8009fac:	4b54      	ldr	r3, [pc, #336]	; (800a100 <ROS_Handler+0x51c>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2207      	movs	r2, #7
 8009fb2:	4951      	ldr	r1, [pc, #324]	; (800a0f8 <ROS_Handler+0x514>)
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f00a fe93 	bl	8014ce0 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 8009fba:	e007      	b.n	8009fcc <ROS_Handler+0x3e8>
			}
		}

		else
		{
			HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 8009fbc:	4b50      	ldr	r3, [pc, #320]	; (800a100 <ROS_Handler+0x51c>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	2207      	movs	r2, #7
 8009fc2:	494d      	ldr	r1, [pc, #308]	; (800a0f8 <ROS_Handler+0x514>)
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f00a fe8b 	bl	8014ce0 <HAL_UART_Receive_IT>
		}

		break;
 8009fca:	e156      	b.n	800a27a <ROS_Handler+0x696>
			if(instruction == TEST)
 8009fcc:	bf00      	nop
		break;
 8009fce:	e154      	b.n	800a27a <ROS_Handler+0x696>

	case 1:
		for(int i = 0; i < test_point_num; i++)
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8009fd4:	e01f      	b.n	800a016 <ROS_Handler+0x432>
		{
			for(int j = 0; j < 7; j++)
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	623b      	str	r3, [r7, #32]
 8009fda:	e016      	b.n	800a00a <ROS_Handler+0x426>
			{
				memcpy(&test_points[i][j], &ROS_buff[j * 4 + i * 28], 4);
 8009fdc:	4b4c      	ldr	r3, [pc, #304]	; (800a110 <ROS_Handler+0x52c>)
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	4413      	add	r3, r2
 8009fe6:	681a      	ldr	r2, [r3, #0]
 8009fe8:	6a3b      	ldr	r3, [r7, #32]
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	18d1      	adds	r1, r2, r3
 8009fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	00db      	lsls	r3, r3, #3
 8009ff4:	1a9a      	subs	r2, r3, r2
 8009ff6:	6a3b      	ldr	r3, [r7, #32]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	4a3e      	ldr	r2, [pc, #248]	; (800a0f8 <ROS_Handler+0x514>)
 8009ffe:	4413      	add	r3, r2
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	600b      	str	r3, [r1, #0]
			for(int j = 0; j < 7; j++)
 800a004:	6a3b      	ldr	r3, [r7, #32]
 800a006:	3301      	adds	r3, #1
 800a008:	623b      	str	r3, [r7, #32]
 800a00a:	6a3b      	ldr	r3, [r7, #32]
 800a00c:	2b06      	cmp	r3, #6
 800a00e:	dde5      	ble.n	8009fdc <ROS_Handler+0x3f8>
		for(int i = 0; i < test_point_num; i++)
 800a010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a012:	3301      	adds	r3, #1
 800a014:	627b      	str	r3, [r7, #36]	; 0x24
 800a016:	4b3b      	ldr	r3, [pc, #236]	; (800a104 <ROS_Handler+0x520>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a01c:	429a      	cmp	r2, r3
 800a01e:	dbda      	blt.n	8009fd6 <ROS_Handler+0x3f2>
			}
		}

		for(int i = 0; i < test_point_num; i++)
 800a020:	2300      	movs	r3, #0
 800a022:	61fb      	str	r3, [r7, #28]
 800a024:	e01b      	b.n	800a05e <ROS_Handler+0x47a>
		{
			for(int j = 0; j < 7; j++)
 800a026:	2300      	movs	r3, #0
 800a028:	61bb      	str	r3, [r7, #24]
 800a02a:	e012      	b.n	800a052 <ROS_Handler+0x46e>
			{
				HAL_UART_Transmit(ROS_UART, (uint8_t*)&test_points[i][j], 4, HAL_MAX_DELAY);
 800a02c:	4b34      	ldr	r3, [pc, #208]	; (800a100 <ROS_Handler+0x51c>)
 800a02e:	6818      	ldr	r0, [r3, #0]
 800a030:	4b37      	ldr	r3, [pc, #220]	; (800a110 <ROS_Handler+0x52c>)
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	69fb      	ldr	r3, [r7, #28]
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	4413      	add	r3, r2
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	69bb      	ldr	r3, [r7, #24]
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	18d1      	adds	r1, r2, r3
 800a042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a046:	2204      	movs	r2, #4
 800a048:	f00a fdb1 	bl	8014bae <HAL_UART_Transmit>
			for(int j = 0; j < 7; j++)
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	3301      	adds	r3, #1
 800a050:	61bb      	str	r3, [r7, #24]
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	2b06      	cmp	r3, #6
 800a056:	dde9      	ble.n	800a02c <ROS_Handler+0x448>
		for(int i = 0; i < test_point_num; i++)
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	3301      	adds	r3, #1
 800a05c:	61fb      	str	r3, [r7, #28]
 800a05e:	4b29      	ldr	r3, [pc, #164]	; (800a104 <ROS_Handler+0x520>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	69fa      	ldr	r2, [r7, #28]
 800a064:	429a      	cmp	r2, r3
 800a066:	dbde      	blt.n	800a026 <ROS_Handler+0x442>
			}
		}
		HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 800a068:	4b25      	ldr	r3, [pc, #148]	; (800a100 <ROS_Handler+0x51c>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	2207      	movs	r2, #7
 800a06e:	4922      	ldr	r1, [pc, #136]	; (800a0f8 <ROS_Handler+0x514>)
 800a070:	4618      	mov	r0, r3
 800a072:	f00a fe35 	bl	8014ce0 <HAL_UART_Receive_IT>
		state = 0;
 800a076:	4b1f      	ldr	r3, [pc, #124]	; (800a0f4 <ROS_Handler+0x510>)
 800a078:	2200      	movs	r2, #0
 800a07a:	701a      	strb	r2, [r3, #0]
		break;
 800a07c:	e0fd      	b.n	800a27a <ROS_Handler+0x696>

	case 2:
		point_buf = (float*)malloc(7 * sizeof(float));
 800a07e:	201c      	movs	r0, #28
 800a080:	f00f f936 	bl	80192f0 <malloc>
 800a084:	4603      	mov	r3, r0
 800a086:	461a      	mov	r2, r3
 800a088:	4b22      	ldr	r3, [pc, #136]	; (800a114 <ROS_Handler+0x530>)
 800a08a:	601a      	str	r2, [r3, #0]
 800a08c:	4b1a      	ldr	r3, [pc, #104]	; (800a0f8 <ROS_Handler+0x514>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	461a      	mov	r2, r3
		memcpy(&point_index, &ROS_buff[0], 4);
 800a092:	4b21      	ldr	r3, [pc, #132]	; (800a118 <ROS_Handler+0x534>)
 800a094:	601a      	str	r2, [r3, #0]

		for(int i = 0; i < 7; i++)
 800a096:	2300      	movs	r3, #0
 800a098:	617b      	str	r3, [r7, #20]
 800a09a:	e00e      	b.n	800a0ba <ROS_Handler+0x4d6>
		{
			memcpy(&point_buf[i], &ROS_buff[4 + i * 4], 4);
 800a09c:	4b1d      	ldr	r3, [pc, #116]	; (800a114 <ROS_Handler+0x530>)
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	4413      	add	r3, r2
 800a0a6:	697a      	ldr	r2, [r7, #20]
 800a0a8:	3201      	adds	r2, #1
 800a0aa:	0092      	lsls	r2, r2, #2
 800a0ac:	4912      	ldr	r1, [pc, #72]	; (800a0f8 <ROS_Handler+0x514>)
 800a0ae:	440a      	add	r2, r1
 800a0b0:	6812      	ldr	r2, [r2, #0]
 800a0b2:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < 7; i++)
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	617b      	str	r3, [r7, #20]
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	2b06      	cmp	r3, #6
 800a0be:	dded      	ble.n	800a09c <ROS_Handler+0x4b8>
		}

		for(int i = 0; i < 7; i++)
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	613b      	str	r3, [r7, #16]
 800a0c4:	e00e      	b.n	800a0e4 <ROS_Handler+0x500>
		{
			HAL_UART_Transmit(ROS_UART, (uint8_t*)&point_buf[i], 4, HAL_MAX_DELAY);
 800a0c6:	4b0e      	ldr	r3, [pc, #56]	; (800a100 <ROS_Handler+0x51c>)
 800a0c8:	6818      	ldr	r0, [r3, #0]
 800a0ca:	4b12      	ldr	r3, [pc, #72]	; (800a114 <ROS_Handler+0x530>)
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	18d1      	adds	r1, r2, r3
 800a0d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0d8:	2204      	movs	r2, #4
 800a0da:	f00a fd68 	bl	8014bae <HAL_UART_Transmit>
		for(int i = 0; i < 7; i++)
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	613b      	str	r3, [r7, #16]
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	2b06      	cmp	r3, #6
 800a0e8:	dded      	ble.n	800a0c6 <ROS_Handler+0x4e2>
		}

		for(int i = 0; i < 7; i++)
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	60fb      	str	r3, [r7, #12]
 800a0ee:	e034      	b.n	800a15a <ROS_Handler+0x576>
 800a0f0:	20009208 	.word	0x20009208
 800a0f4:	200002e0 	.word	0x200002e0
 800a0f8:	200077f8 	.word	0x200077f8
 800a0fc:	20006a20 	.word	0x20006a20
 800a100:	2000989c 	.word	0x2000989c
 800a104:	200092b0 	.word	0x200092b0
 800a108:	200071b8 	.word	0x200071b8
 800a10c:	20009350 	.word	0x20009350
 800a110:	20009ba4 	.word	0x20009ba4
 800a114:	20009240 	.word	0x20009240
 800a118:	20009720 	.word	0x20009720
		{
			PP_Points[path_index - 1][point_index - 1][i] = point_buf[i];
 800a11c:	4b59      	ldr	r3, [pc, #356]	; (800a284 <ROS_Handler+0x6a0>)
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	441a      	add	r2, r3
 800a126:	4b58      	ldr	r3, [pc, #352]	; (800a288 <ROS_Handler+0x6a4>)
 800a128:	6819      	ldr	r1, [r3, #0]
 800a12a:	4b58      	ldr	r3, [pc, #352]	; (800a28c <ROS_Handler+0x6a8>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a132:	3b01      	subs	r3, #1
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	440b      	add	r3, r1
 800a138:	6819      	ldr	r1, [r3, #0]
 800a13a:	4b55      	ldr	r3, [pc, #340]	; (800a290 <ROS_Handler+0x6ac>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a142:	3b01      	subs	r3, #1
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	440b      	add	r3, r1
 800a148:	6819      	ldr	r1, [r3, #0]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	009b      	lsls	r3, r3, #2
 800a14e:	440b      	add	r3, r1
 800a150:	6812      	ldr	r2, [r2, #0]
 800a152:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < 7; i++)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	3301      	adds	r3, #1
 800a158:	60fb      	str	r3, [r7, #12]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2b06      	cmp	r3, #6
 800a15e:	dddd      	ble.n	800a11c <ROS_Handler+0x538>
		}

		state = 0;
 800a160:	4b4c      	ldr	r3, [pc, #304]	; (800a294 <ROS_Handler+0x6b0>)
 800a162:	2200      	movs	r2, #0
 800a164:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 800a166:	4b4c      	ldr	r3, [pc, #304]	; (800a298 <ROS_Handler+0x6b4>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	2207      	movs	r2, #7
 800a16c:	494b      	ldr	r1, [pc, #300]	; (800a29c <ROS_Handler+0x6b8>)
 800a16e:	4618      	mov	r0, r3
 800a170:	f00a fdb6 	bl	8014ce0 <HAL_UART_Receive_IT>
		break;
 800a174:	e081      	b.n	800a27a <ROS_Handler+0x696>
 800a176:	4b49      	ldr	r3, [pc, #292]	; (800a29c <ROS_Handler+0x6b8>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	461a      	mov	r2, r3

	case 3:
		memcpy(&point_index, &ROS_buff, 4);
 800a17c:	4b44      	ldr	r3, [pc, #272]	; (800a290 <ROS_Handler+0x6ac>)
 800a17e:	601a      	str	r2, [r3, #0]

		if(point_num[path_index - 1] == 1)
 800a180:	4b47      	ldr	r3, [pc, #284]	; (800a2a0 <ROS_Handler+0x6bc>)
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	4b41      	ldr	r3, [pc, #260]	; (800a28c <ROS_Handler+0x6a8>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a18c:	3b01      	subs	r3, #1
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	4413      	add	r3, r2
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	2b01      	cmp	r3, #1
 800a196:	d105      	bne.n	800a1a4 <ROS_Handler+0x5c0>
		{
			ROS_Delete(path_index);
 800a198:	4b3c      	ldr	r3, [pc, #240]	; (800a28c <ROS_Handler+0x6a8>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4618      	mov	r0, r3
 800a19e:	f000 f99b 	bl	800a4d8 <ROS_Delete>
 800a1a2:	e05f      	b.n	800a264 <ROS_Handler+0x680>
		}
		else
		{
			point_num[path_index - 1]--;
 800a1a4:	4b3e      	ldr	r3, [pc, #248]	; (800a2a0 <ROS_Handler+0x6bc>)
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	4b38      	ldr	r3, [pc, #224]	; (800a28c <ROS_Handler+0x6a8>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	009b      	lsls	r3, r3, #2
 800a1b4:	4413      	add	r3, r2
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	3a01      	subs	r2, #1
 800a1ba:	601a      	str	r2, [r3, #0]

			for(int i = point_index - 1; i < point_num[path_index - 1]; i++)
 800a1bc:	4b34      	ldr	r3, [pc, #208]	; (800a290 <ROS_Handler+0x6ac>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	60bb      	str	r3, [r7, #8]
 800a1c4:	e01f      	b.n	800a206 <ROS_Handler+0x622>
			{
				PP_Points[path_index - 1][i] = PP_Points[path_index - 1][i + 1];
 800a1c6:	4b30      	ldr	r3, [pc, #192]	; (800a288 <ROS_Handler+0x6a4>)
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	4b30      	ldr	r3, [pc, #192]	; (800a28c <ROS_Handler+0x6a8>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	4413      	add	r3, r2
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	3301      	adds	r3, #1
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	441a      	add	r2, r3
 800a1e2:	4b29      	ldr	r3, [pc, #164]	; (800a288 <ROS_Handler+0x6a4>)
 800a1e4:	6819      	ldr	r1, [r3, #0]
 800a1e6:	4b29      	ldr	r3, [pc, #164]	; (800a28c <ROS_Handler+0x6a8>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a1ee:	3b01      	subs	r3, #1
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	440b      	add	r3, r1
 800a1f4:	6819      	ldr	r1, [r3, #0]
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	440b      	add	r3, r1
 800a1fc:	6812      	ldr	r2, [r2, #0]
 800a1fe:	601a      	str	r2, [r3, #0]
			for(int i = point_index - 1; i < point_num[path_index - 1]; i++)
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	3301      	adds	r3, #1
 800a204:	60bb      	str	r3, [r7, #8]
 800a206:	4b26      	ldr	r3, [pc, #152]	; (800a2a0 <ROS_Handler+0x6bc>)
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	4b20      	ldr	r3, [pc, #128]	; (800a28c <ROS_Handler+0x6a8>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a212:	3b01      	subs	r3, #1
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	4413      	add	r3, r2
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	68ba      	ldr	r2, [r7, #8]
 800a21c:	429a      	cmp	r2, r3
 800a21e:	dbd2      	blt.n	800a1c6 <ROS_Handler+0x5e2>
			}

			PP_Points[path_index - 1] = (float**)realloc(PP_Points[path_index - 1], point_num[path_index - 1] * sizeof(float*));
 800a220:	4b19      	ldr	r3, [pc, #100]	; (800a288 <ROS_Handler+0x6a4>)
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	4b19      	ldr	r3, [pc, #100]	; (800a28c <ROS_Handler+0x6a8>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a22c:	3b01      	subs	r3, #1
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	4413      	add	r3, r2
 800a232:	6818      	ldr	r0, [r3, #0]
 800a234:	4b1a      	ldr	r3, [pc, #104]	; (800a2a0 <ROS_Handler+0x6bc>)
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	4b14      	ldr	r3, [pc, #80]	; (800a28c <ROS_Handler+0x6a8>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a240:	3b01      	subs	r3, #1
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	4413      	add	r3, r2
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	0099      	lsls	r1, r3, #2
 800a24a:	4b0f      	ldr	r3, [pc, #60]	; (800a288 <ROS_Handler+0x6a4>)
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	4b0f      	ldr	r3, [pc, #60]	; (800a28c <ROS_Handler+0x6a8>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a256:	3b01      	subs	r3, #1
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	18d4      	adds	r4, r2, r3
 800a25c:	f00f ff92 	bl	801a184 <realloc>
 800a260:	4603      	mov	r3, r0
 800a262:	6023      	str	r3, [r4, #0]
		}

		state = 0;
 800a264:	4b0b      	ldr	r3, [pc, #44]	; (800a294 <ROS_Handler+0x6b0>)
 800a266:	2200      	movs	r2, #0
 800a268:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 800a26a:	4b0b      	ldr	r3, [pc, #44]	; (800a298 <ROS_Handler+0x6b4>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2207      	movs	r2, #7
 800a270:	490a      	ldr	r1, [pc, #40]	; (800a29c <ROS_Handler+0x6b8>)
 800a272:	4618      	mov	r0, r3
 800a274:	f00a fd34 	bl	8014ce0 <HAL_UART_Receive_IT>
		break;
 800a278:	bf00      	nop
	}

}
 800a27a:	bf00      	nop
 800a27c:	373c      	adds	r7, #60	; 0x3c
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd90      	pop	{r4, r7, pc}
 800a282:	bf00      	nop
 800a284:	20009240 	.word	0x20009240
 800a288:	20009200 	.word	0x20009200
 800a28c:	20006a20 	.word	0x20006a20
 800a290:	20009720 	.word	0x20009720
 800a294:	200002e0 	.word	0x200002e0
 800a298:	2000989c 	.word	0x2000989c
 800a29c:	200077f8 	.word	0x200077f8
 800a2a0:	20009350 	.word	0x20009350

0800a2a4 <ROS_Register>:
/*
 * Once the testing path is satisfied, calling this function will register the path in PP_Points
 * Only registered path can be run through RNSPPstart(PP_Points[counter])
 */
void ROS_Register(void)
{
 800a2a4:	b590      	push	{r4, r7, lr}
 800a2a6:	b087      	sub	sp, #28
 800a2a8:	af00      	add	r7, sp, #0
	path_num++;
 800a2aa:	4b84      	ldr	r3, [pc, #528]	; (800a4bc <ROS_Register+0x218>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	4a82      	ldr	r2, [pc, #520]	; (800a4bc <ROS_Register+0x218>)
 800a2b2:	6013      	str	r3, [r2, #0]
	if(path_num > 1)
 800a2b4:	4b81      	ldr	r3, [pc, #516]	; (800a4bc <ROS_Register+0x218>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	dd46      	ble.n	800a34a <ROS_Register+0xa6>
	{
		PP_Points = (float***)realloc(PP_Points, path_num * sizeof(float**));
 800a2bc:	4b80      	ldr	r3, [pc, #512]	; (800a4c0 <ROS_Register+0x21c>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a7e      	ldr	r2, [pc, #504]	; (800a4bc <ROS_Register+0x218>)
 800a2c2:	6812      	ldr	r2, [r2, #0]
 800a2c4:	0092      	lsls	r2, r2, #2
 800a2c6:	4611      	mov	r1, r2
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f00f ff5b 	bl	801a184 <realloc>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	4a7b      	ldr	r2, [pc, #492]	; (800a4c0 <ROS_Register+0x21c>)
 800a2d2:	6013      	str	r3, [r2, #0]
		point_num = (int*)realloc(point_num, path_num * sizeof(int));
 800a2d4:	4b7b      	ldr	r3, [pc, #492]	; (800a4c4 <ROS_Register+0x220>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a78      	ldr	r2, [pc, #480]	; (800a4bc <ROS_Register+0x218>)
 800a2da:	6812      	ldr	r2, [r2, #0]
 800a2dc:	0092      	lsls	r2, r2, #2
 800a2de:	4611      	mov	r1, r2
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f00f ff4f 	bl	801a184 <realloc>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	4a76      	ldr	r2, [pc, #472]	; (800a4c4 <ROS_Register+0x220>)
 800a2ea:	6013      	str	r3, [r2, #0]

		PP_Points[path_num - 1] = (float**)malloc(test_point_num * sizeof(float*));
 800a2ec:	4b76      	ldr	r3, [pc, #472]	; (800a4c8 <ROS_Register+0x224>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	0099      	lsls	r1, r3, #2
 800a2f2:	4b73      	ldr	r3, [pc, #460]	; (800a4c0 <ROS_Register+0x21c>)
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	4b71      	ldr	r3, [pc, #452]	; (800a4bc <ROS_Register+0x218>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a2fe:	3b01      	subs	r3, #1
 800a300:	009b      	lsls	r3, r3, #2
 800a302:	18d4      	adds	r4, r2, r3
 800a304:	4608      	mov	r0, r1
 800a306:	f00e fff3 	bl	80192f0 <malloc>
 800a30a:	4603      	mov	r3, r0
 800a30c:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < test_point_num; i++)
 800a30e:	2300      	movs	r3, #0
 800a310:	617b      	str	r3, [r7, #20]
 800a312:	e014      	b.n	800a33e <ROS_Register+0x9a>
		{
			PP_Points[path_num - 1][i] = (float*)malloc(7 * sizeof(float));
 800a314:	4b6a      	ldr	r3, [pc, #424]	; (800a4c0 <ROS_Register+0x21c>)
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	4b68      	ldr	r3, [pc, #416]	; (800a4bc <ROS_Register+0x218>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a320:	3b01      	subs	r3, #1
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	4413      	add	r3, r2
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	18d4      	adds	r4, r2, r3
 800a32e:	201c      	movs	r0, #28
 800a330:	f00e ffde 	bl	80192f0 <malloc>
 800a334:	4603      	mov	r3, r0
 800a336:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < test_point_num; i++)
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	3301      	adds	r3, #1
 800a33c:	617b      	str	r3, [r7, #20]
 800a33e:	4b62      	ldr	r3, [pc, #392]	; (800a4c8 <ROS_Register+0x224>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	697a      	ldr	r2, [r7, #20]
 800a344:	429a      	cmp	r2, r3
 800a346:	dbe5      	blt.n	800a314 <ROS_Register+0x70>
 800a348:	e045      	b.n	800a3d6 <ROS_Register+0x132>
		}
	}
	else if(path_num == 1)
 800a34a:	4b5c      	ldr	r3, [pc, #368]	; (800a4bc <ROS_Register+0x218>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d141      	bne.n	800a3d6 <ROS_Register+0x132>
	{
		PP_Points = (float***)malloc(path_num * sizeof(float**));
 800a352:	4b5a      	ldr	r3, [pc, #360]	; (800a4bc <ROS_Register+0x218>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	4618      	mov	r0, r3
 800a35a:	f00e ffc9 	bl	80192f0 <malloc>
 800a35e:	4603      	mov	r3, r0
 800a360:	461a      	mov	r2, r3
 800a362:	4b57      	ldr	r3, [pc, #348]	; (800a4c0 <ROS_Register+0x21c>)
 800a364:	601a      	str	r2, [r3, #0]
		point_num = (int*)malloc(path_num * sizeof(int));
 800a366:	4b55      	ldr	r3, [pc, #340]	; (800a4bc <ROS_Register+0x218>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	4618      	mov	r0, r3
 800a36e:	f00e ffbf 	bl	80192f0 <malloc>
 800a372:	4603      	mov	r3, r0
 800a374:	461a      	mov	r2, r3
 800a376:	4b53      	ldr	r3, [pc, #332]	; (800a4c4 <ROS_Register+0x220>)
 800a378:	601a      	str	r2, [r3, #0]

		PP_Points[path_num - 1] = (float**)malloc(test_point_num * sizeof(float*));
 800a37a:	4b53      	ldr	r3, [pc, #332]	; (800a4c8 <ROS_Register+0x224>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	0099      	lsls	r1, r3, #2
 800a380:	4b4f      	ldr	r3, [pc, #316]	; (800a4c0 <ROS_Register+0x21c>)
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	4b4d      	ldr	r3, [pc, #308]	; (800a4bc <ROS_Register+0x218>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a38c:	3b01      	subs	r3, #1
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	18d4      	adds	r4, r2, r3
 800a392:	4608      	mov	r0, r1
 800a394:	f00e ffac 	bl	80192f0 <malloc>
 800a398:	4603      	mov	r3, r0
 800a39a:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < test_point_num; i++)
 800a39c:	2300      	movs	r3, #0
 800a39e:	613b      	str	r3, [r7, #16]
 800a3a0:	e014      	b.n	800a3cc <ROS_Register+0x128>
		{
			PP_Points[path_num - 1][i] = (float*)malloc(7 * sizeof(float));
 800a3a2:	4b47      	ldr	r3, [pc, #284]	; (800a4c0 <ROS_Register+0x21c>)
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	4b45      	ldr	r3, [pc, #276]	; (800a4bc <ROS_Register+0x218>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a3ae:	3b01      	subs	r3, #1
 800a3b0:	009b      	lsls	r3, r3, #2
 800a3b2:	4413      	add	r3, r2
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	18d4      	adds	r4, r2, r3
 800a3bc:	201c      	movs	r0, #28
 800a3be:	f00e ff97 	bl	80192f0 <malloc>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < test_point_num; i++)
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	613b      	str	r3, [r7, #16]
 800a3cc:	4b3e      	ldr	r3, [pc, #248]	; (800a4c8 <ROS_Register+0x224>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	693a      	ldr	r2, [r7, #16]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	dbe5      	blt.n	800a3a2 <ROS_Register+0xfe>
		}
	}

	point_num[path_num - 1] = test_point_num;
 800a3d6:	4b3b      	ldr	r3, [pc, #236]	; (800a4c4 <ROS_Register+0x220>)
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	4b38      	ldr	r3, [pc, #224]	; (800a4bc <ROS_Register+0x218>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a3e2:	3b01      	subs	r3, #1
 800a3e4:	009b      	lsls	r3, r3, #2
 800a3e6:	4413      	add	r3, r2
 800a3e8:	4a37      	ldr	r2, [pc, #220]	; (800a4c8 <ROS_Register+0x224>)
 800a3ea:	6812      	ldr	r2, [r2, #0]
 800a3ec:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < test_point_num; i++)
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	60fb      	str	r3, [r7, #12]
 800a3f2:	e027      	b.n	800a444 <ROS_Register+0x1a0>
	{
		for(int j = 0; j < 7; j++)
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	60bb      	str	r3, [r7, #8]
 800a3f8:	e01e      	b.n	800a438 <ROS_Register+0x194>
		{
			PP_Points[path_num - 1][i][j] = test_points[i][j];
 800a3fa:	4b34      	ldr	r3, [pc, #208]	; (800a4cc <ROS_Register+0x228>)
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	009b      	lsls	r3, r3, #2
 800a402:	4413      	add	r3, r2
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	441a      	add	r2, r3
 800a40c:	4b2c      	ldr	r3, [pc, #176]	; (800a4c0 <ROS_Register+0x21c>)
 800a40e:	6819      	ldr	r1, [r3, #0]
 800a410:	4b2a      	ldr	r3, [pc, #168]	; (800a4bc <ROS_Register+0x218>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a418:	3b01      	subs	r3, #1
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	440b      	add	r3, r1
 800a41e:	6819      	ldr	r1, [r3, #0]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	440b      	add	r3, r1
 800a426:	6819      	ldr	r1, [r3, #0]
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	440b      	add	r3, r1
 800a42e:	6812      	ldr	r2, [r2, #0]
 800a430:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < 7; j++)
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	3301      	adds	r3, #1
 800a436:	60bb      	str	r3, [r7, #8]
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	2b06      	cmp	r3, #6
 800a43c:	dddd      	ble.n	800a3fa <ROS_Register+0x156>
	for(int i = 0; i < test_point_num; i++)
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	3301      	adds	r3, #1
 800a442:	60fb      	str	r3, [r7, #12]
 800a444:	4b20      	ldr	r3, [pc, #128]	; (800a4c8 <ROS_Register+0x224>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	68fa      	ldr	r2, [r7, #12]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	dbd2      	blt.n	800a3f4 <ROS_Register+0x150>
		}
	}

	for(int i = 0; i < test_point_num; i++)
 800a44e:	2300      	movs	r3, #0
 800a450:	607b      	str	r3, [r7, #4]
 800a452:	e023      	b.n	800a49c <ROS_Register+0x1f8>
	{
		for(int j = 0; j < 7; j++)
 800a454:	2300      	movs	r3, #0
 800a456:	603b      	str	r3, [r7, #0]
 800a458:	e01a      	b.n	800a490 <ROS_Register+0x1ec>
		{
			HAL_UART_Transmit(ROS_UART, (uint8_t*)&PP_Points[path_num - 1][i][j], 4, HAL_MAX_DELAY);
 800a45a:	4b1d      	ldr	r3, [pc, #116]	; (800a4d0 <ROS_Register+0x22c>)
 800a45c:	6818      	ldr	r0, [r3, #0]
 800a45e:	4b18      	ldr	r3, [pc, #96]	; (800a4c0 <ROS_Register+0x21c>)
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	4b16      	ldr	r3, [pc, #88]	; (800a4bc <ROS_Register+0x218>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a46a:	3b01      	subs	r3, #1
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	4413      	add	r3, r2
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	009b      	lsls	r3, r3, #2
 800a476:	4413      	add	r3, r2
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	18d1      	adds	r1, r2, r3
 800a480:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a484:	2204      	movs	r2, #4
 800a486:	f00a fb92 	bl	8014bae <HAL_UART_Transmit>
		for(int j = 0; j < 7; j++)
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	3301      	adds	r3, #1
 800a48e:	603b      	str	r3, [r7, #0]
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	2b06      	cmp	r3, #6
 800a494:	dde1      	ble.n	800a45a <ROS_Register+0x1b6>
	for(int i = 0; i < test_point_num; i++)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	3301      	adds	r3, #1
 800a49a:	607b      	str	r3, [r7, #4]
 800a49c:	4b0a      	ldr	r3, [pc, #40]	; (800a4c8 <ROS_Register+0x224>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	dbd6      	blt.n	800a454 <ROS_Register+0x1b0>
		}
	}

	HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 800a4a6:	4b0a      	ldr	r3, [pc, #40]	; (800a4d0 <ROS_Register+0x22c>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2207      	movs	r2, #7
 800a4ac:	4909      	ldr	r1, [pc, #36]	; (800a4d4 <ROS_Register+0x230>)
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f00a fc16 	bl	8014ce0 <HAL_UART_Receive_IT>
}
 800a4b4:	bf00      	nop
 800a4b6:	371c      	adds	r7, #28
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd90      	pop	{r4, r7, pc}
 800a4bc:	2000975c 	.word	0x2000975c
 800a4c0:	20009200 	.word	0x20009200
 800a4c4:	20009350 	.word	0x20009350
 800a4c8:	200092b0 	.word	0x200092b0
 800a4cc:	20009ba4 	.word	0x20009ba4
 800a4d0:	2000989c 	.word	0x2000989c
 800a4d4:	200077f8 	.word	0x200077f8

0800a4d8 <ROS_Delete>:
 * Delete specific path in PP_Points
 * User not able to run the path again
 * Can only delete registered path
 */
void ROS_Delete(int path_index)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b086      	sub	sp, #24
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
	path_num--;
 800a4e0:	4b56      	ldr	r3, [pc, #344]	; (800a63c <ROS_Delete+0x164>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	3b01      	subs	r3, #1
 800a4e6:	4a55      	ldr	r2, [pc, #340]	; (800a63c <ROS_Delete+0x164>)
 800a4e8:	6013      	str	r3, [r2, #0]
	if(path_index - 1 == path_num)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	1e5a      	subs	r2, r3, #1
 800a4ee:	4b53      	ldr	r3, [pc, #332]	; (800a63c <ROS_Delete+0x164>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d132      	bne.n	800a55c <ROS_Delete+0x84>
	{
		point_num = (int*)realloc(point_num, path_num * sizeof(int));
 800a4f6:	4b52      	ldr	r3, [pc, #328]	; (800a640 <ROS_Delete+0x168>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a50      	ldr	r2, [pc, #320]	; (800a63c <ROS_Delete+0x164>)
 800a4fc:	6812      	ldr	r2, [r2, #0]
 800a4fe:	0092      	lsls	r2, r2, #2
 800a500:	4611      	mov	r1, r2
 800a502:	4618      	mov	r0, r3
 800a504:	f00f fe3e 	bl	801a184 <realloc>
 800a508:	4603      	mov	r3, r0
 800a50a:	4a4d      	ldr	r2, [pc, #308]	; (800a640 <ROS_Delete+0x168>)
 800a50c:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < path_num; i++)
 800a50e:	2300      	movs	r3, #0
 800a510:	617b      	str	r3, [r7, #20]
 800a512:	e00d      	b.n	800a530 <ROS_Delete+0x58>
		{
			total_point_num += point_num[i];
 800a514:	4b4a      	ldr	r3, [pc, #296]	; (800a640 <ROS_Delete+0x168>)
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	4413      	add	r3, r2
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	4b48      	ldr	r3, [pc, #288]	; (800a644 <ROS_Delete+0x16c>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4413      	add	r3, r2
 800a526:	4a47      	ldr	r2, [pc, #284]	; (800a644 <ROS_Delete+0x16c>)
 800a528:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < path_num; i++)
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	3301      	adds	r3, #1
 800a52e:	617b      	str	r3, [r7, #20]
 800a530:	4b42      	ldr	r3, [pc, #264]	; (800a63c <ROS_Delete+0x164>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	697a      	ldr	r2, [r7, #20]
 800a536:	429a      	cmp	r2, r3
 800a538:	dbec      	blt.n	800a514 <ROS_Delete+0x3c>
		}
		PP_Points = (float***)realloc(PP_Points, total_point_num * 7 * sizeof(float));
 800a53a:	4b43      	ldr	r3, [pc, #268]	; (800a648 <ROS_Delete+0x170>)
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	4b41      	ldr	r3, [pc, #260]	; (800a644 <ROS_Delete+0x16c>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4619      	mov	r1, r3
 800a544:	460b      	mov	r3, r1
 800a546:	00db      	lsls	r3, r3, #3
 800a548:	1a5b      	subs	r3, r3, r1
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	4619      	mov	r1, r3
 800a54e:	4610      	mov	r0, r2
 800a550:	f00f fe18 	bl	801a184 <realloc>
 800a554:	4603      	mov	r3, r0
 800a556:	4a3c      	ldr	r2, [pc, #240]	; (800a648 <ROS_Delete+0x170>)
 800a558:	6013      	str	r3, [r2, #0]
 800a55a:	e063      	b.n	800a624 <ROS_Delete+0x14c>
//		HAL_UART_Transmit(&huart5, ROS_buff, 16, HAL_MAX_DELAY);
	}

	else
	{
		for(int i = path_index - 1; i < path_num; i++)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	3b01      	subs	r3, #1
 800a560:	613b      	str	r3, [r7, #16]
 800a562:	e00f      	b.n	800a584 <ROS_Delete+0xac>
		{
			point_num[i] = point_num[i + 1];
 800a564:	4b36      	ldr	r3, [pc, #216]	; (800a640 <ROS_Delete+0x168>)
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	3301      	adds	r3, #1
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	441a      	add	r2, r3
 800a570:	4b33      	ldr	r3, [pc, #204]	; (800a640 <ROS_Delete+0x168>)
 800a572:	6819      	ldr	r1, [r3, #0]
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	440b      	add	r3, r1
 800a57a:	6812      	ldr	r2, [r2, #0]
 800a57c:	601a      	str	r2, [r3, #0]
		for(int i = path_index - 1; i < path_num; i++)
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	3301      	adds	r3, #1
 800a582:	613b      	str	r3, [r7, #16]
 800a584:	4b2d      	ldr	r3, [pc, #180]	; (800a63c <ROS_Delete+0x164>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	693a      	ldr	r2, [r7, #16]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	dbea      	blt.n	800a564 <ROS_Delete+0x8c>
		}
		point_num = (int*)realloc(point_num, path_num * sizeof(int));
 800a58e:	4b2c      	ldr	r3, [pc, #176]	; (800a640 <ROS_Delete+0x168>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a2a      	ldr	r2, [pc, #168]	; (800a63c <ROS_Delete+0x164>)
 800a594:	6812      	ldr	r2, [r2, #0]
 800a596:	0092      	lsls	r2, r2, #2
 800a598:	4611      	mov	r1, r2
 800a59a:	4618      	mov	r0, r3
 800a59c:	f00f fdf2 	bl	801a184 <realloc>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	4a27      	ldr	r2, [pc, #156]	; (800a640 <ROS_Delete+0x168>)
 800a5a4:	6013      	str	r3, [r2, #0]

		for(int i = path_index - 1; i < path_num; i++)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	3b01      	subs	r3, #1
 800a5aa:	60fb      	str	r3, [r7, #12]
 800a5ac:	e00f      	b.n	800a5ce <ROS_Delete+0xf6>
		{
			PP_Points[i] = PP_Points[i + 1];
 800a5ae:	4b26      	ldr	r3, [pc, #152]	; (800a648 <ROS_Delete+0x170>)
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	441a      	add	r2, r3
 800a5ba:	4b23      	ldr	r3, [pc, #140]	; (800a648 <ROS_Delete+0x170>)
 800a5bc:	6819      	ldr	r1, [r3, #0]
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	440b      	add	r3, r1
 800a5c4:	6812      	ldr	r2, [r2, #0]
 800a5c6:	601a      	str	r2, [r3, #0]
		for(int i = path_index - 1; i < path_num; i++)
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	60fb      	str	r3, [r7, #12]
 800a5ce:	4b1b      	ldr	r3, [pc, #108]	; (800a63c <ROS_Delete+0x164>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	68fa      	ldr	r2, [r7, #12]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	dbea      	blt.n	800a5ae <ROS_Delete+0xd6>
		}

		for(int i = 0; i < path_num; i++)
 800a5d8:	2300      	movs	r3, #0
 800a5da:	60bb      	str	r3, [r7, #8]
 800a5dc:	e00d      	b.n	800a5fa <ROS_Delete+0x122>
		{
			total_point_num += point_num[i];
 800a5de:	4b18      	ldr	r3, [pc, #96]	; (800a640 <ROS_Delete+0x168>)
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	4413      	add	r3, r2
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	4b16      	ldr	r3, [pc, #88]	; (800a644 <ROS_Delete+0x16c>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4413      	add	r3, r2
 800a5f0:	4a14      	ldr	r2, [pc, #80]	; (800a644 <ROS_Delete+0x16c>)
 800a5f2:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < path_num; i++)
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	60bb      	str	r3, [r7, #8]
 800a5fa:	4b10      	ldr	r3, [pc, #64]	; (800a63c <ROS_Delete+0x164>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	68ba      	ldr	r2, [r7, #8]
 800a600:	429a      	cmp	r2, r3
 800a602:	dbec      	blt.n	800a5de <ROS_Delete+0x106>
		}

		PP_Points = (float***)realloc(PP_Points, total_point_num * 7 * sizeof(float));
 800a604:	4b10      	ldr	r3, [pc, #64]	; (800a648 <ROS_Delete+0x170>)
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	4b0e      	ldr	r3, [pc, #56]	; (800a644 <ROS_Delete+0x16c>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4619      	mov	r1, r3
 800a60e:	460b      	mov	r3, r1
 800a610:	00db      	lsls	r3, r3, #3
 800a612:	1a5b      	subs	r3, r3, r1
 800a614:	009b      	lsls	r3, r3, #2
 800a616:	4619      	mov	r1, r3
 800a618:	4610      	mov	r0, r2
 800a61a:	f00f fdb3 	bl	801a184 <realloc>
 800a61e:	4603      	mov	r3, r0
 800a620:	4a09      	ldr	r2, [pc, #36]	; (800a648 <ROS_Delete+0x170>)
 800a622:	6013      	str	r3, [r2, #0]
//		sprintf((char*)ROS_buff, "Path index is %d\n", path_index);
//		HAL_UART_Transmit(&huart5, ROS_buff, 16, HAL_MAX_DELAY);
	}

	HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 800a624:	4b09      	ldr	r3, [pc, #36]	; (800a64c <ROS_Delete+0x174>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2207      	movs	r2, #7
 800a62a:	4909      	ldr	r1, [pc, #36]	; (800a650 <ROS_Delete+0x178>)
 800a62c:	4618      	mov	r0, r3
 800a62e:	f00a fb57 	bl	8014ce0 <HAL_UART_Receive_IT>

}
 800a632:	bf00      	nop
 800a634:	3718      	adds	r7, #24
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	2000975c 	.word	0x2000975c
 800a640:	20009350 	.word	0x20009350
 800a644:	20009488 	.word	0x20009488
 800a648:	20009200 	.word	0x20009200
 800a64c:	2000989c 	.word	0x2000989c
 800a650:	200077f8 	.word	0x200077f8

0800a654 <ROS_DeleteAll>:
/*
 * Delete all existing registered path
 * Usually used to reset all path registered
 */
void ROS_DeleteAll(void)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
	for(int i = 0; i < path_num; i++)
 800a65a:	2300      	movs	r3, #0
 800a65c:	60fb      	str	r3, [r7, #12]
 800a65e:	e01e      	b.n	800a69e <ROS_DeleteAll+0x4a>
	{
		for(int j = 0; j < point_num[i]; j++)
 800a660:	2300      	movs	r3, #0
 800a662:	60bb      	str	r3, [r7, #8]
 800a664:	e00f      	b.n	800a686 <ROS_DeleteAll+0x32>
		{
			free(PP_Points[i][j]);
 800a666:	4b24      	ldr	r3, [pc, #144]	; (800a6f8 <ROS_DeleteAll+0xa4>)
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	009b      	lsls	r3, r3, #2
 800a66e:	4413      	add	r3, r2
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	4413      	add	r3, r2
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4618      	mov	r0, r3
 800a67c:	f00e fe40 	bl	8019300 <free>
		for(int j = 0; j < point_num[i]; j++)
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	3301      	adds	r3, #1
 800a684:	60bb      	str	r3, [r7, #8]
 800a686:	4b1d      	ldr	r3, [pc, #116]	; (800a6fc <ROS_DeleteAll+0xa8>)
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	4413      	add	r3, r2
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	68ba      	ldr	r2, [r7, #8]
 800a694:	429a      	cmp	r2, r3
 800a696:	dbe6      	blt.n	800a666 <ROS_DeleteAll+0x12>
	for(int i = 0; i < path_num; i++)
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	3301      	adds	r3, #1
 800a69c:	60fb      	str	r3, [r7, #12]
 800a69e:	4b18      	ldr	r3, [pc, #96]	; (800a700 <ROS_DeleteAll+0xac>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	68fa      	ldr	r2, [r7, #12]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	dbdb      	blt.n	800a660 <ROS_DeleteAll+0xc>
		}
	}

	for(int i = 0; i < path_num; i++)
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	607b      	str	r3, [r7, #4]
 800a6ac:	e00b      	b.n	800a6c6 <ROS_DeleteAll+0x72>
	{
		free(PP_Points[i]);
 800a6ae:	4b12      	ldr	r3, [pc, #72]	; (800a6f8 <ROS_DeleteAll+0xa4>)
 800a6b0:	681a      	ldr	r2, [r3, #0]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	4413      	add	r3, r2
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f00e fe20 	bl	8019300 <free>
	for(int i = 0; i < path_num; i++)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	607b      	str	r3, [r7, #4]
 800a6c6:	4b0e      	ldr	r3, [pc, #56]	; (800a700 <ROS_DeleteAll+0xac>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	dbee      	blt.n	800a6ae <ROS_DeleteAll+0x5a>
	}

	free(PP_Points);
 800a6d0:	4b09      	ldr	r3, [pc, #36]	; (800a6f8 <ROS_DeleteAll+0xa4>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f00e fe13 	bl	8019300 <free>
	free(point_num);
 800a6da:	4b08      	ldr	r3, [pc, #32]	; (800a6fc <ROS_DeleteAll+0xa8>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f00e fe0e 	bl	8019300 <free>

	ROS_Init(ROS_UART);
 800a6e4:	4b07      	ldr	r3, [pc, #28]	; (800a704 <ROS_DeleteAll+0xb0>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f7ff f9bd 	bl	8009a68 <ROS_Init>
}
 800a6ee:	bf00      	nop
 800a6f0:	3710      	adds	r7, #16
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	20009200 	.word	0x20009200
 800a6fc:	20009350 	.word	0x20009350
 800a700:	2000975c 	.word	0x2000975c
 800a704:	2000989c 	.word	0x2000989c

0800a708 <ROS_EditPath>:
 * Allow user to edit registered path with different number of points than original ones
 * After satisfied the testing path, it will overwrite the desired path in PP_Points
 * Call RNSPPStart(PP_Points[${editing_index}] to see changes
 */
void ROS_EditPath(void)
{
 800a708:	b590      	push	{r4, r7, lr}
 800a70a:	b095      	sub	sp, #84	; 0x54
 800a70c:	af00      	add	r7, sp, #0
	total_point_num = 0;
 800a70e:	4b99      	ldr	r3, [pc, #612]	; (800a974 <ROS_EditPath+0x26c>)
 800a710:	2200      	movs	r2, #0
 800a712:	601a      	str	r2, [r3, #0]
 800a714:	4b98      	ldr	r3, [pc, #608]	; (800a978 <ROS_EditPath+0x270>)
 800a716:	f8d3 3003 	ldr.w	r3, [r3, #3]
 800a71a:	461a      	mov	r2, r3
	memcpy(&edit_index, &ROS_buff[3], 4);
 800a71c:	4b97      	ldr	r3, [pc, #604]	; (800a97c <ROS_EditPath+0x274>)
 800a71e:	601a      	str	r2, [r3, #0]

	if(edit_index == path_num)
 800a720:	4b96      	ldr	r3, [pc, #600]	; (800a97c <ROS_EditPath+0x274>)
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	4b96      	ldr	r3, [pc, #600]	; (800a980 <ROS_EditPath+0x278>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	429a      	cmp	r2, r3
 800a72a:	d137      	bne.n	800a79c <ROS_EditPath+0x94>
	{
		/*
		 Just delete the last path and require user to register again
		 */
		path_num--;
 800a72c:	4b94      	ldr	r3, [pc, #592]	; (800a980 <ROS_EditPath+0x278>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	3b01      	subs	r3, #1
 800a732:	4a93      	ldr	r2, [pc, #588]	; (800a980 <ROS_EditPath+0x278>)
 800a734:	6013      	str	r3, [r2, #0]
		point_num = (int*)realloc(point_num, path_num * sizeof(int));
 800a736:	4b93      	ldr	r3, [pc, #588]	; (800a984 <ROS_EditPath+0x27c>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4a91      	ldr	r2, [pc, #580]	; (800a980 <ROS_EditPath+0x278>)
 800a73c:	6812      	ldr	r2, [r2, #0]
 800a73e:	0092      	lsls	r2, r2, #2
 800a740:	4611      	mov	r1, r2
 800a742:	4618      	mov	r0, r3
 800a744:	f00f fd1e 	bl	801a184 <realloc>
 800a748:	4603      	mov	r3, r0
 800a74a:	4a8e      	ldr	r2, [pc, #568]	; (800a984 <ROS_EditPath+0x27c>)
 800a74c:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < path_num; i++)
 800a74e:	2300      	movs	r3, #0
 800a750:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a752:	e00d      	b.n	800a770 <ROS_EditPath+0x68>
		{
			total_point_num += point_num[i];
 800a754:	4b8b      	ldr	r3, [pc, #556]	; (800a984 <ROS_EditPath+0x27c>)
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a75a:	009b      	lsls	r3, r3, #2
 800a75c:	4413      	add	r3, r2
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	4b84      	ldr	r3, [pc, #528]	; (800a974 <ROS_EditPath+0x26c>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4413      	add	r3, r2
 800a766:	4a83      	ldr	r2, [pc, #524]	; (800a974 <ROS_EditPath+0x26c>)
 800a768:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < path_num; i++)
 800a76a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a76c:	3301      	adds	r3, #1
 800a76e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a770:	4b83      	ldr	r3, [pc, #524]	; (800a980 <ROS_EditPath+0x278>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a776:	429a      	cmp	r2, r3
 800a778:	dbec      	blt.n	800a754 <ROS_EditPath+0x4c>
		}
		PP_Points = (float***)realloc(PP_Points, total_point_num * 7 * sizeof(float));
 800a77a:	4b83      	ldr	r3, [pc, #524]	; (800a988 <ROS_EditPath+0x280>)
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	4b7d      	ldr	r3, [pc, #500]	; (800a974 <ROS_EditPath+0x26c>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4619      	mov	r1, r3
 800a784:	460b      	mov	r3, r1
 800a786:	00db      	lsls	r3, r3, #3
 800a788:	1a5b      	subs	r3, r3, r1
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	4619      	mov	r1, r3
 800a78e:	4610      	mov	r0, r2
 800a790:	f00f fcf8 	bl	801a184 <realloc>
 800a794:	4603      	mov	r3, r0
 800a796:	4a7c      	ldr	r2, [pc, #496]	; (800a988 <ROS_EditPath+0x280>)
 800a798:	6013      	str	r3, [r2, #0]
//		}
//
//		free(Edit_Buff);
		HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
	}
}
 800a79a:	e21a      	b.n	800abd2 <ROS_EditPath+0x4ca>
		edit_offset = path_num - edit_index;
 800a79c:	4b78      	ldr	r3, [pc, #480]	; (800a980 <ROS_EditPath+0x278>)
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	4b76      	ldr	r3, [pc, #472]	; (800a97c <ROS_EditPath+0x274>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	1ad3      	subs	r3, r2, r3
 800a7a6:	4a79      	ldr	r2, [pc, #484]	; (800a98c <ROS_EditPath+0x284>)
 800a7a8:	6013      	str	r3, [r2, #0]
		Edit_Buff = (float***)malloc(edit_offset * sizeof(float**));
 800a7aa:	4b78      	ldr	r3, [pc, #480]	; (800a98c <ROS_EditPath+0x284>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f00e fd9d 	bl	80192f0 <malloc>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	4b75      	ldr	r3, [pc, #468]	; (800a990 <ROS_EditPath+0x288>)
 800a7bc:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < edit_offset ; i++)
 800a7be:	2300      	movs	r3, #0
 800a7c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7c2:	e016      	b.n	800a7f2 <ROS_EditPath+0xea>
			Edit_Buff[i] = (float**)malloc(point_num[edit_index + i] * sizeof(float*));
 800a7c4:	4b6f      	ldr	r3, [pc, #444]	; (800a984 <ROS_EditPath+0x27c>)
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	4b6c      	ldr	r3, [pc, #432]	; (800a97c <ROS_EditPath+0x274>)
 800a7ca:	6819      	ldr	r1, [r3, #0]
 800a7cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7ce:	440b      	add	r3, r1
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	4413      	add	r3, r2
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	0099      	lsls	r1, r3, #2
 800a7d8:	4b6d      	ldr	r3, [pc, #436]	; (800a990 <ROS_EditPath+0x288>)
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7de:	009b      	lsls	r3, r3, #2
 800a7e0:	18d4      	adds	r4, r2, r3
 800a7e2:	4608      	mov	r0, r1
 800a7e4:	f00e fd84 	bl	80192f0 <malloc>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < edit_offset ; i++)
 800a7ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7f2:	4b66      	ldr	r3, [pc, #408]	; (800a98c <ROS_EditPath+0x284>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	dbe3      	blt.n	800a7c4 <ROS_EditPath+0xbc>
		for(int i = 0; i < edit_offset; i++)
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	647b      	str	r3, [r7, #68]	; 0x44
 800a800:	e022      	b.n	800a848 <ROS_EditPath+0x140>
			for(int j = 0; j < point_num[edit_index + i]; j++)
 800a802:	2300      	movs	r3, #0
 800a804:	643b      	str	r3, [r7, #64]	; 0x40
 800a806:	e010      	b.n	800a82a <ROS_EditPath+0x122>
				Edit_Buff[i][j] = (float*)malloc(7 * sizeof(float));
 800a808:	4b61      	ldr	r3, [pc, #388]	; (800a990 <ROS_EditPath+0x288>)
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a80e:	009b      	lsls	r3, r3, #2
 800a810:	4413      	add	r3, r2
 800a812:	681a      	ldr	r2, [r3, #0]
 800a814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	18d4      	adds	r4, r2, r3
 800a81a:	201c      	movs	r0, #28
 800a81c:	f00e fd68 	bl	80192f0 <malloc>
 800a820:	4603      	mov	r3, r0
 800a822:	6023      	str	r3, [r4, #0]
			for(int j = 0; j < point_num[edit_index + i]; j++)
 800a824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a826:	3301      	adds	r3, #1
 800a828:	643b      	str	r3, [r7, #64]	; 0x40
 800a82a:	4b56      	ldr	r3, [pc, #344]	; (800a984 <ROS_EditPath+0x27c>)
 800a82c:	681a      	ldr	r2, [r3, #0]
 800a82e:	4b53      	ldr	r3, [pc, #332]	; (800a97c <ROS_EditPath+0x274>)
 800a830:	6819      	ldr	r1, [r3, #0]
 800a832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a834:	440b      	add	r3, r1
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	4413      	add	r3, r2
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a83e:	429a      	cmp	r2, r3
 800a840:	dbe2      	blt.n	800a808 <ROS_EditPath+0x100>
		for(int i = 0; i < edit_offset; i++)
 800a842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a844:	3301      	adds	r3, #1
 800a846:	647b      	str	r3, [r7, #68]	; 0x44
 800a848:	4b50      	ldr	r3, [pc, #320]	; (800a98c <ROS_EditPath+0x284>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a84e:	429a      	cmp	r2, r3
 800a850:	dbd7      	blt.n	800a802 <ROS_EditPath+0xfa>
		for(int i = 0; i < edit_offset; i++)
 800a852:	2300      	movs	r3, #0
 800a854:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a856:	e03c      	b.n	800a8d2 <ROS_EditPath+0x1ca>
			for(int j = 0; j < point_num[edit_index + i]; j++)
 800a858:	2300      	movs	r3, #0
 800a85a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a85c:	e02a      	b.n	800a8b4 <ROS_EditPath+0x1ac>
				for(int k = 0; k < 7; k++)
 800a85e:	2300      	movs	r3, #0
 800a860:	637b      	str	r3, [r7, #52]	; 0x34
 800a862:	e021      	b.n	800a8a8 <ROS_EditPath+0x1a0>
					Edit_Buff[i][j][k] = PP_Points[edit_index + i][j][k];
 800a864:	4b48      	ldr	r3, [pc, #288]	; (800a988 <ROS_EditPath+0x280>)
 800a866:	681a      	ldr	r2, [r3, #0]
 800a868:	4b44      	ldr	r3, [pc, #272]	; (800a97c <ROS_EditPath+0x274>)
 800a86a:	6819      	ldr	r1, [r3, #0]
 800a86c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a86e:	440b      	add	r3, r1
 800a870:	009b      	lsls	r3, r3, #2
 800a872:	4413      	add	r3, r2
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	4413      	add	r3, r2
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a880:	009b      	lsls	r3, r3, #2
 800a882:	441a      	add	r2, r3
 800a884:	4b42      	ldr	r3, [pc, #264]	; (800a990 <ROS_EditPath+0x288>)
 800a886:	6819      	ldr	r1, [r3, #0]
 800a888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	440b      	add	r3, r1
 800a88e:	6819      	ldr	r1, [r3, #0]
 800a890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a892:	009b      	lsls	r3, r3, #2
 800a894:	440b      	add	r3, r1
 800a896:	6819      	ldr	r1, [r3, #0]
 800a898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	440b      	add	r3, r1
 800a89e:	6812      	ldr	r2, [r2, #0]
 800a8a0:	601a      	str	r2, [r3, #0]
				for(int k = 0; k < 7; k++)
 800a8a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	637b      	str	r3, [r7, #52]	; 0x34
 800a8a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8aa:	2b06      	cmp	r3, #6
 800a8ac:	ddda      	ble.n	800a864 <ROS_EditPath+0x15c>
			for(int j = 0; j < point_num[edit_index + i]; j++)
 800a8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8b4:	4b33      	ldr	r3, [pc, #204]	; (800a984 <ROS_EditPath+0x27c>)
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	4b30      	ldr	r3, [pc, #192]	; (800a97c <ROS_EditPath+0x274>)
 800a8ba:	6819      	ldr	r1, [r3, #0]
 800a8bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8be:	440b      	add	r3, r1
 800a8c0:	009b      	lsls	r3, r3, #2
 800a8c2:	4413      	add	r3, r2
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	dbc8      	blt.n	800a85e <ROS_EditPath+0x156>
		for(int i = 0; i < edit_offset; i++)
 800a8cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8d2:	4b2e      	ldr	r3, [pc, #184]	; (800a98c <ROS_EditPath+0x284>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	dbbd      	blt.n	800a858 <ROS_EditPath+0x150>
		for(int i = 0; i < path_num; i++)
 800a8dc:	2300      	movs	r3, #0
 800a8de:	633b      	str	r3, [r7, #48]	; 0x30
 800a8e0:	e01f      	b.n	800a922 <ROS_EditPath+0x21a>
			if(i % edit_index == 0)
 800a8e2:	4b26      	ldr	r3, [pc, #152]	; (800a97c <ROS_EditPath+0x274>)
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e8:	fb93 f1f2 	sdiv	r1, r3, r2
 800a8ec:	fb02 f201 	mul.w	r2, r2, r1
 800a8f0:	1a9b      	subs	r3, r3, r2
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d107      	bne.n	800a906 <ROS_EditPath+0x1fe>
				total_point_num += test_point_num;
 800a8f6:	4b1f      	ldr	r3, [pc, #124]	; (800a974 <ROS_EditPath+0x26c>)
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	4b26      	ldr	r3, [pc, #152]	; (800a994 <ROS_EditPath+0x28c>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4413      	add	r3, r2
 800a900:	4a1c      	ldr	r2, [pc, #112]	; (800a974 <ROS_EditPath+0x26c>)
 800a902:	6013      	str	r3, [r2, #0]
 800a904:	e00a      	b.n	800a91c <ROS_EditPath+0x214>
				total_point_num += point_num[i];
 800a906:	4b1f      	ldr	r3, [pc, #124]	; (800a984 <ROS_EditPath+0x27c>)
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90c:	009b      	lsls	r3, r3, #2
 800a90e:	4413      	add	r3, r2
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	4b18      	ldr	r3, [pc, #96]	; (800a974 <ROS_EditPath+0x26c>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4413      	add	r3, r2
 800a918:	4a16      	ldr	r2, [pc, #88]	; (800a974 <ROS_EditPath+0x26c>)
 800a91a:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < path_num; i++)
 800a91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91e:	3301      	adds	r3, #1
 800a920:	633b      	str	r3, [r7, #48]	; 0x30
 800a922:	4b17      	ldr	r3, [pc, #92]	; (800a980 <ROS_EditPath+0x278>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a928:	429a      	cmp	r2, r3
 800a92a:	dbda      	blt.n	800a8e2 <ROS_EditPath+0x1da>
		PP_Points = (float***)realloc(PP_Points, total_point_num * 7 * sizeof(float));
 800a92c:	4b16      	ldr	r3, [pc, #88]	; (800a988 <ROS_EditPath+0x280>)
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	4b10      	ldr	r3, [pc, #64]	; (800a974 <ROS_EditPath+0x26c>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4619      	mov	r1, r3
 800a936:	460b      	mov	r3, r1
 800a938:	00db      	lsls	r3, r3, #3
 800a93a:	1a5b      	subs	r3, r3, r1
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	4619      	mov	r1, r3
 800a940:	4610      	mov	r0, r2
 800a942:	f00f fc1f 	bl	801a184 <realloc>
 800a946:	4603      	mov	r3, r0
 800a948:	4a0f      	ldr	r2, [pc, #60]	; (800a988 <ROS_EditPath+0x280>)
 800a94a:	6013      	str	r3, [r2, #0]
		PP_Points[edit_index - 1] = (float**)malloc(test_point_num * sizeof(float*));
 800a94c:	4b11      	ldr	r3, [pc, #68]	; (800a994 <ROS_EditPath+0x28c>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	0099      	lsls	r1, r3, #2
 800a952:	4b0d      	ldr	r3, [pc, #52]	; (800a988 <ROS_EditPath+0x280>)
 800a954:	681a      	ldr	r2, [r3, #0]
 800a956:	4b09      	ldr	r3, [pc, #36]	; (800a97c <ROS_EditPath+0x274>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a95e:	3b01      	subs	r3, #1
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	18d4      	adds	r4, r2, r3
 800a964:	4608      	mov	r0, r1
 800a966:	f00e fcc3 	bl	80192f0 <malloc>
 800a96a:	4603      	mov	r3, r0
 800a96c:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < test_point_num; i++)
 800a96e:	2300      	movs	r3, #0
 800a970:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a972:	e026      	b.n	800a9c2 <ROS_EditPath+0x2ba>
 800a974:	20009488 	.word	0x20009488
 800a978:	200077f8 	.word	0x200077f8
 800a97c:	200096b0 	.word	0x200096b0
 800a980:	2000975c 	.word	0x2000975c
 800a984:	20009350 	.word	0x20009350
 800a988:	20009200 	.word	0x20009200
 800a98c:	2000a500 	.word	0x2000a500
 800a990:	200064f0 	.word	0x200064f0
 800a994:	200092b0 	.word	0x200092b0
			PP_Points[edit_index - 1][i] = (float*)malloc(7 * sizeof(float));
 800a998:	4b90      	ldr	r3, [pc, #576]	; (800abdc <ROS_EditPath+0x4d4>)
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	4b90      	ldr	r3, [pc, #576]	; (800abe0 <ROS_EditPath+0x4d8>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a9a4:	3b01      	subs	r3, #1
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	4413      	add	r3, r2
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	18d4      	adds	r4, r2, r3
 800a9b2:	201c      	movs	r0, #28
 800a9b4:	f00e fc9c 	bl	80192f0 <malloc>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < test_point_num; i++)
 800a9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9be:	3301      	adds	r3, #1
 800a9c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a9c2:	4b88      	ldr	r3, [pc, #544]	; (800abe4 <ROS_EditPath+0x4dc>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	dbe5      	blt.n	800a998 <ROS_EditPath+0x290>
		for(int i = 0; i < test_point_num; i++)
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9d0:	e027      	b.n	800aa22 <ROS_EditPath+0x31a>
			for(int j = 0; j < 7; j++)
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	627b      	str	r3, [r7, #36]	; 0x24
 800a9d6:	e01e      	b.n	800aa16 <ROS_EditPath+0x30e>
				PP_Points[edit_index - 1][i][j] = test_points[i][j];
 800a9d8:	4b83      	ldr	r3, [pc, #524]	; (800abe8 <ROS_EditPath+0x4e0>)
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	4413      	add	r3, r2
 800a9e2:	681a      	ldr	r2, [r3, #0]
 800a9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	441a      	add	r2, r3
 800a9ea:	4b7c      	ldr	r3, [pc, #496]	; (800abdc <ROS_EditPath+0x4d4>)
 800a9ec:	6819      	ldr	r1, [r3, #0]
 800a9ee:	4b7c      	ldr	r3, [pc, #496]	; (800abe0 <ROS_EditPath+0x4d8>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a9f6:	3b01      	subs	r3, #1
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	440b      	add	r3, r1
 800a9fc:	6819      	ldr	r1, [r3, #0]
 800a9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	440b      	add	r3, r1
 800aa04:	6819      	ldr	r1, [r3, #0]
 800aa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa08:	009b      	lsls	r3, r3, #2
 800aa0a:	440b      	add	r3, r1
 800aa0c:	6812      	ldr	r2, [r2, #0]
 800aa0e:	601a      	str	r2, [r3, #0]
			for(int j = 0; j < 7; j++)
 800aa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa12:	3301      	adds	r3, #1
 800aa14:	627b      	str	r3, [r7, #36]	; 0x24
 800aa16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa18:	2b06      	cmp	r3, #6
 800aa1a:	dddd      	ble.n	800a9d8 <ROS_EditPath+0x2d0>
		for(int i = 0; i < test_point_num; i++)
 800aa1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa1e:	3301      	adds	r3, #1
 800aa20:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa22:	4b70      	ldr	r3, [pc, #448]	; (800abe4 <ROS_EditPath+0x4dc>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	dbd2      	blt.n	800a9d2 <ROS_EditPath+0x2ca>
		for(int i = 0; i < edit_offset; i++)
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	623b      	str	r3, [r7, #32]
 800aa30:	e018      	b.n	800aa64 <ROS_EditPath+0x35c>
			PP_Points[edit_index + i] = (float**)malloc(point_num[edit_index + i] * sizeof(float*));
 800aa32:	4b6e      	ldr	r3, [pc, #440]	; (800abec <ROS_EditPath+0x4e4>)
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	4b6a      	ldr	r3, [pc, #424]	; (800abe0 <ROS_EditPath+0x4d8>)
 800aa38:	6819      	ldr	r1, [r3, #0]
 800aa3a:	6a3b      	ldr	r3, [r7, #32]
 800aa3c:	440b      	add	r3, r1
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	4413      	add	r3, r2
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	0098      	lsls	r0, r3, #2
 800aa46:	4b65      	ldr	r3, [pc, #404]	; (800abdc <ROS_EditPath+0x4d4>)
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	4b65      	ldr	r3, [pc, #404]	; (800abe0 <ROS_EditPath+0x4d8>)
 800aa4c:	6819      	ldr	r1, [r3, #0]
 800aa4e:	6a3b      	ldr	r3, [r7, #32]
 800aa50:	440b      	add	r3, r1
 800aa52:	009b      	lsls	r3, r3, #2
 800aa54:	18d4      	adds	r4, r2, r3
 800aa56:	f00e fc4b 	bl	80192f0 <malloc>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < edit_offset; i++)
 800aa5e:	6a3b      	ldr	r3, [r7, #32]
 800aa60:	3301      	adds	r3, #1
 800aa62:	623b      	str	r3, [r7, #32]
 800aa64:	4b62      	ldr	r3, [pc, #392]	; (800abf0 <ROS_EditPath+0x4e8>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	6a3a      	ldr	r2, [r7, #32]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	dbe1      	blt.n	800aa32 <ROS_EditPath+0x32a>
		for(int i = 0; i < edit_offset; i++)
 800aa6e:	2300      	movs	r3, #0
 800aa70:	61fb      	str	r3, [r7, #28]
 800aa72:	e025      	b.n	800aac0 <ROS_EditPath+0x3b8>
			for(int j = 0; j < point_num[edit_index + i]; j++)
 800aa74:	2300      	movs	r3, #0
 800aa76:	61bb      	str	r3, [r7, #24]
 800aa78:	e013      	b.n	800aaa2 <ROS_EditPath+0x39a>
				PP_Points[edit_index + i][j] = (float*)malloc(7 * sizeof(float));
 800aa7a:	4b58      	ldr	r3, [pc, #352]	; (800abdc <ROS_EditPath+0x4d4>)
 800aa7c:	681a      	ldr	r2, [r3, #0]
 800aa7e:	4b58      	ldr	r3, [pc, #352]	; (800abe0 <ROS_EditPath+0x4d8>)
 800aa80:	6819      	ldr	r1, [r3, #0]
 800aa82:	69fb      	ldr	r3, [r7, #28]
 800aa84:	440b      	add	r3, r1
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	4413      	add	r3, r2
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	69bb      	ldr	r3, [r7, #24]
 800aa8e:	009b      	lsls	r3, r3, #2
 800aa90:	18d4      	adds	r4, r2, r3
 800aa92:	201c      	movs	r0, #28
 800aa94:	f00e fc2c 	bl	80192f0 <malloc>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	6023      	str	r3, [r4, #0]
			for(int j = 0; j < point_num[edit_index + i]; j++)
 800aa9c:	69bb      	ldr	r3, [r7, #24]
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	61bb      	str	r3, [r7, #24]
 800aaa2:	4b52      	ldr	r3, [pc, #328]	; (800abec <ROS_EditPath+0x4e4>)
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	4b4e      	ldr	r3, [pc, #312]	; (800abe0 <ROS_EditPath+0x4d8>)
 800aaa8:	6819      	ldr	r1, [r3, #0]
 800aaaa:	69fb      	ldr	r3, [r7, #28]
 800aaac:	440b      	add	r3, r1
 800aaae:	009b      	lsls	r3, r3, #2
 800aab0:	4413      	add	r3, r2
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	69ba      	ldr	r2, [r7, #24]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	dbdf      	blt.n	800aa7a <ROS_EditPath+0x372>
		for(int i = 0; i < edit_offset; i++)
 800aaba:	69fb      	ldr	r3, [r7, #28]
 800aabc:	3301      	adds	r3, #1
 800aabe:	61fb      	str	r3, [r7, #28]
 800aac0:	4b4b      	ldr	r3, [pc, #300]	; (800abf0 <ROS_EditPath+0x4e8>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	69fa      	ldr	r2, [r7, #28]
 800aac6:	429a      	cmp	r2, r3
 800aac8:	dbd4      	blt.n	800aa74 <ROS_EditPath+0x36c>
		for(int i = 0; i < edit_offset; i++)
 800aaca:	2300      	movs	r3, #0
 800aacc:	617b      	str	r3, [r7, #20]
 800aace:	e03c      	b.n	800ab4a <ROS_EditPath+0x442>
			for(int j = 0; j < point_num[edit_index + i]; j++)
 800aad0:	2300      	movs	r3, #0
 800aad2:	613b      	str	r3, [r7, #16]
 800aad4:	e02a      	b.n	800ab2c <ROS_EditPath+0x424>
				for(int k = 0; k < 7; k++)
 800aad6:	2300      	movs	r3, #0
 800aad8:	60fb      	str	r3, [r7, #12]
 800aada:	e021      	b.n	800ab20 <ROS_EditPath+0x418>
					PP_Points[edit_index + i][j][k] = Edit_Buff[i][j][k];
 800aadc:	4b45      	ldr	r3, [pc, #276]	; (800abf4 <ROS_EditPath+0x4ec>)
 800aade:	681a      	ldr	r2, [r3, #0]
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	4413      	add	r3, r2
 800aae6:	681a      	ldr	r2, [r3, #0]
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	009b      	lsls	r3, r3, #2
 800aaec:	4413      	add	r3, r2
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	009b      	lsls	r3, r3, #2
 800aaf4:	441a      	add	r2, r3
 800aaf6:	4b39      	ldr	r3, [pc, #228]	; (800abdc <ROS_EditPath+0x4d4>)
 800aaf8:	6819      	ldr	r1, [r3, #0]
 800aafa:	4b39      	ldr	r3, [pc, #228]	; (800abe0 <ROS_EditPath+0x4d8>)
 800aafc:	6818      	ldr	r0, [r3, #0]
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	4403      	add	r3, r0
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	440b      	add	r3, r1
 800ab06:	6819      	ldr	r1, [r3, #0]
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	440b      	add	r3, r1
 800ab0e:	6819      	ldr	r1, [r3, #0]
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	440b      	add	r3, r1
 800ab16:	6812      	ldr	r2, [r2, #0]
 800ab18:	601a      	str	r2, [r3, #0]
				for(int k = 0; k < 7; k++)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	60fb      	str	r3, [r7, #12]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2b06      	cmp	r3, #6
 800ab24:	ddda      	ble.n	800aadc <ROS_EditPath+0x3d4>
			for(int j = 0; j < point_num[edit_index + i]; j++)
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	3301      	adds	r3, #1
 800ab2a:	613b      	str	r3, [r7, #16]
 800ab2c:	4b2f      	ldr	r3, [pc, #188]	; (800abec <ROS_EditPath+0x4e4>)
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	4b2b      	ldr	r3, [pc, #172]	; (800abe0 <ROS_EditPath+0x4d8>)
 800ab32:	6819      	ldr	r1, [r3, #0]
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	440b      	add	r3, r1
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	4413      	add	r3, r2
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	693a      	ldr	r2, [r7, #16]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	dbc8      	blt.n	800aad6 <ROS_EditPath+0x3ce>
		for(int i = 0; i < edit_offset; i++)
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	3301      	adds	r3, #1
 800ab48:	617b      	str	r3, [r7, #20]
 800ab4a:	4b29      	ldr	r3, [pc, #164]	; (800abf0 <ROS_EditPath+0x4e8>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	697a      	ldr	r2, [r7, #20]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	dbbd      	blt.n	800aad0 <ROS_EditPath+0x3c8>
		point_num[edit_index - 1] = test_point_num;
 800ab54:	4b25      	ldr	r3, [pc, #148]	; (800abec <ROS_EditPath+0x4e4>)
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	4b21      	ldr	r3, [pc, #132]	; (800abe0 <ROS_EditPath+0x4d8>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ab60:	3b01      	subs	r3, #1
 800ab62:	009b      	lsls	r3, r3, #2
 800ab64:	4413      	add	r3, r2
 800ab66:	4a1f      	ldr	r2, [pc, #124]	; (800abe4 <ROS_EditPath+0x4dc>)
 800ab68:	6812      	ldr	r2, [r2, #0]
 800ab6a:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < test_point_num; i++)
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	60bb      	str	r3, [r7, #8]
 800ab70:	e023      	b.n	800abba <ROS_EditPath+0x4b2>
			for(int j = 0; j < 7; j++)
 800ab72:	2300      	movs	r3, #0
 800ab74:	607b      	str	r3, [r7, #4]
 800ab76:	e01a      	b.n	800abae <ROS_EditPath+0x4a6>
				HAL_UART_Transmit(ROS_UART, (uint8_t*)&PP_Points[edit_index - 1][i][j], 4, HAL_MAX_DELAY);
 800ab78:	4b1f      	ldr	r3, [pc, #124]	; (800abf8 <ROS_EditPath+0x4f0>)
 800ab7a:	6818      	ldr	r0, [r3, #0]
 800ab7c:	4b17      	ldr	r3, [pc, #92]	; (800abdc <ROS_EditPath+0x4d4>)
 800ab7e:	681a      	ldr	r2, [r3, #0]
 800ab80:	4b17      	ldr	r3, [pc, #92]	; (800abe0 <ROS_EditPath+0x4d8>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	009b      	lsls	r3, r3, #2
 800ab8c:	4413      	add	r3, r2
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	4413      	add	r3, r2
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	18d1      	adds	r1, r2, r3
 800ab9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aba2:	2204      	movs	r2, #4
 800aba4:	f00a f803 	bl	8014bae <HAL_UART_Transmit>
			for(int j = 0; j < 7; j++)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	3301      	adds	r3, #1
 800abac:	607b      	str	r3, [r7, #4]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2b06      	cmp	r3, #6
 800abb2:	dde1      	ble.n	800ab78 <ROS_EditPath+0x470>
		for(int i = 0; i < test_point_num; i++)
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	3301      	adds	r3, #1
 800abb8:	60bb      	str	r3, [r7, #8]
 800abba:	4b0a      	ldr	r3, [pc, #40]	; (800abe4 <ROS_EditPath+0x4dc>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	68ba      	ldr	r2, [r7, #8]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	dbd6      	blt.n	800ab72 <ROS_EditPath+0x46a>
		HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 800abc4:	4b0c      	ldr	r3, [pc, #48]	; (800abf8 <ROS_EditPath+0x4f0>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	2207      	movs	r2, #7
 800abca:	490c      	ldr	r1, [pc, #48]	; (800abfc <ROS_EditPath+0x4f4>)
 800abcc:	4618      	mov	r0, r3
 800abce:	f00a f887 	bl	8014ce0 <HAL_UART_Receive_IT>
}
 800abd2:	bf00      	nop
 800abd4:	3754      	adds	r7, #84	; 0x54
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd90      	pop	{r4, r7, pc}
 800abda:	bf00      	nop
 800abdc:	20009200 	.word	0x20009200
 800abe0:	200096b0 	.word	0x200096b0
 800abe4:	200092b0 	.word	0x200092b0
 800abe8:	20009ba4 	.word	0x20009ba4
 800abec:	20009350 	.word	0x20009350
 800abf0:	2000a500 	.word	0x2000a500
 800abf4:	200064f0 	.word	0x200064f0
 800abf8:	2000989c 	.word	0x2000989c
 800abfc:	200077f8 	.word	0x200077f8

0800ac00 <ServoxInit>:
 * 						  					TIM_CHANNEL_3
 * 						  					TIM_CHANNEL_4
 * Function Return		: None
 * Function Example		: ServoInit(&SERVO1, &htim3, GPIOA,GPIO_Pin_6, TIM_CHANNEL_1);
 */
void ServoxInit(SERVO_t* servo, TIM_HandleTypeDef* htimx, GPIO_TypeDef * SERVO_GPIOx,uint16_t SERVO_GPIO_Pin, uint32_t channel){
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b08a      	sub	sp, #40	; 0x28
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	607a      	str	r2, [r7, #4]
 800ac0c:	807b      	strh	r3, [r7, #2]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ac0e:	f107 0318 	add.w	r3, r7, #24
 800ac12:	2200      	movs	r2, #0
 800ac14:	601a      	str	r2, [r3, #0]
 800ac16:	605a      	str	r2, [r3, #4]
 800ac18:	609a      	str	r2, [r3, #8]
 800ac1a:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ac1c:	f107 0310 	add.w	r3, r7, #16
 800ac20:	2200      	movs	r2, #0
 800ac22:	601a      	str	r2, [r3, #0]
 800ac24:	605a      	str	r2, [r3, #4]


		if(htimx == &htim1){
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	4a69      	ldr	r2, [pc, #420]	; (800add0 <ServoxInit+0x1d0>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d106      	bne.n	800ac3c <ServoxInit+0x3c>
			htimx->Instance = TIM1;
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	4a68      	ldr	r2, [pc, #416]	; (800add4 <ServoxInit+0x1d4>)
 800ac32:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	22a7      	movs	r2, #167	; 0xa7
 800ac38:	605a      	str	r2, [r3, #4]
 800ac3a:	e078      	b.n	800ad2e <ServoxInit+0x12e>
		}
		else if(htimx == &htim2)	{
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	4a66      	ldr	r2, [pc, #408]	; (800add8 <ServoxInit+0x1d8>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d107      	bne.n	800ac54 <ServoxInit+0x54>
			htimx->Instance = TIM2;
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ac4a:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	2253      	movs	r2, #83	; 0x53
 800ac50:	605a      	str	r2, [r3, #4]
 800ac52:	e06c      	b.n	800ad2e <ServoxInit+0x12e>
		}
		else if(htimx == &htim3)	{
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	4a61      	ldr	r2, [pc, #388]	; (800addc <ServoxInit+0x1dc>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d106      	bne.n	800ac6a <ServoxInit+0x6a>
			htimx->Instance = TIM3;
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	4a60      	ldr	r2, [pc, #384]	; (800ade0 <ServoxInit+0x1e0>)
 800ac60:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	2253      	movs	r2, #83	; 0x53
 800ac66:	605a      	str	r2, [r3, #4]
 800ac68:	e061      	b.n	800ad2e <ServoxInit+0x12e>
		}
		else if(htimx == &htim4)	{
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	4a5d      	ldr	r2, [pc, #372]	; (800ade4 <ServoxInit+0x1e4>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d106      	bne.n	800ac80 <ServoxInit+0x80>
			htimx->Instance = TIM4;
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	4a5c      	ldr	r2, [pc, #368]	; (800ade8 <ServoxInit+0x1e8>)
 800ac76:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	2253      	movs	r2, #83	; 0x53
 800ac7c:	605a      	str	r2, [r3, #4]
 800ac7e:	e056      	b.n	800ad2e <ServoxInit+0x12e>
		}
		else if(htimx == &htim5)	{
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	4a5a      	ldr	r2, [pc, #360]	; (800adec <ServoxInit+0x1ec>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d106      	bne.n	800ac96 <ServoxInit+0x96>
			htimx->Instance = TIM5;
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	4a59      	ldr	r2, [pc, #356]	; (800adf0 <ServoxInit+0x1f0>)
 800ac8c:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	2253      	movs	r2, #83	; 0x53
 800ac92:	605a      	str	r2, [r3, #4]
 800ac94:	e04b      	b.n	800ad2e <ServoxInit+0x12e>
		}
		else if(htimx == &htim8)	{
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	4a56      	ldr	r2, [pc, #344]	; (800adf4 <ServoxInit+0x1f4>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d106      	bne.n	800acac <ServoxInit+0xac>
			htimx->Instance = TIM8;
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	4a55      	ldr	r2, [pc, #340]	; (800adf8 <ServoxInit+0x1f8>)
 800aca2:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	22a7      	movs	r2, #167	; 0xa7
 800aca8:	605a      	str	r2, [r3, #4]
 800acaa:	e040      	b.n	800ad2e <ServoxInit+0x12e>
		}
		else if(htimx == &htim9)	{
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	4a53      	ldr	r2, [pc, #332]	; (800adfc <ServoxInit+0x1fc>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d106      	bne.n	800acc2 <ServoxInit+0xc2>
			htimx->Instance = TIM9;
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	4a52      	ldr	r2, [pc, #328]	; (800ae00 <ServoxInit+0x200>)
 800acb8:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	22a7      	movs	r2, #167	; 0xa7
 800acbe:	605a      	str	r2, [r3, #4]
 800acc0:	e035      	b.n	800ad2e <ServoxInit+0x12e>
		}
		else if(htimx == &htim10)	{
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	4a4f      	ldr	r2, [pc, #316]	; (800ae04 <ServoxInit+0x204>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d106      	bne.n	800acd8 <ServoxInit+0xd8>
			htimx->Instance = TIM10;
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	4a4e      	ldr	r2, [pc, #312]	; (800ae08 <ServoxInit+0x208>)
 800acce:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	22a7      	movs	r2, #167	; 0xa7
 800acd4:	605a      	str	r2, [r3, #4]
 800acd6:	e02a      	b.n	800ad2e <ServoxInit+0x12e>
		}
		else if(htimx == &htim11)	{
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	4a4c      	ldr	r2, [pc, #304]	; (800ae0c <ServoxInit+0x20c>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d106      	bne.n	800acee <ServoxInit+0xee>
			htimx->Instance = TIM11;
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	4a4b      	ldr	r2, [pc, #300]	; (800ae10 <ServoxInit+0x210>)
 800ace4:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	22a7      	movs	r2, #167	; 0xa7
 800acea:	605a      	str	r2, [r3, #4]
 800acec:	e01f      	b.n	800ad2e <ServoxInit+0x12e>
		}
		else if(htimx == &htim12)	{
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	4a48      	ldr	r2, [pc, #288]	; (800ae14 <ServoxInit+0x214>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d106      	bne.n	800ad04 <ServoxInit+0x104>
			htimx->Instance = TIM12;
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	4a47      	ldr	r2, [pc, #284]	; (800ae18 <ServoxInit+0x218>)
 800acfa:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	2253      	movs	r2, #83	; 0x53
 800ad00:	605a      	str	r2, [r3, #4]
 800ad02:	e014      	b.n	800ad2e <ServoxInit+0x12e>
		}
		else if(htimx == &htim13)	{
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	4a45      	ldr	r2, [pc, #276]	; (800ae1c <ServoxInit+0x21c>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d106      	bne.n	800ad1a <ServoxInit+0x11a>
			htimx->Instance = TIM13;
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	4a44      	ldr	r2, [pc, #272]	; (800ae20 <ServoxInit+0x220>)
 800ad10:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	2253      	movs	r2, #83	; 0x53
 800ad16:	605a      	str	r2, [r3, #4]
 800ad18:	e009      	b.n	800ad2e <ServoxInit+0x12e>
			}
		else if(htimx == &htim14)	{
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	4a41      	ldr	r2, [pc, #260]	; (800ae24 <ServoxInit+0x224>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d105      	bne.n	800ad2e <ServoxInit+0x12e>
			htimx->Instance = TIM14;
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	4a40      	ldr	r2, [pc, #256]	; (800ae28 <ServoxInit+0x228>)
 800ad26:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	2253      	movs	r2, #83	; 0x53
 800ad2c:	605a      	str	r2, [r3, #4]
			}


		htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	2200      	movs	r2, #0
 800ad32:	609a      	str	r2, [r3, #8]
		htimx->Init.Period = 19999;
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800ad3a:	60da      	str	r2, [r3, #12]
		htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	611a      	str	r2, [r3, #16]
		htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	2280      	movs	r2, #128	; 0x80
 800ad46:	619a      	str	r2, [r3, #24]
		 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 800ad48:	68b8      	ldr	r0, [r7, #8]
 800ad4a:	f008 fee3 	bl	8013b14 <HAL_TIM_Base_Init>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d001      	beq.n	800ad58 <ServoxInit+0x158>
		  {
		    Error_Handler();
 800ad54:	f7f9 fff6 	bl	8004d44 <Error_Handler>
		  }
		  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ad58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad5c:	61bb      	str	r3, [r7, #24]
		  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 800ad5e:	f107 0318 	add.w	r3, r7, #24
 800ad62:	4619      	mov	r1, r3
 800ad64:	68b8      	ldr	r0, [r7, #8]
 800ad66:	f009 fa49 	bl	80141fc <HAL_TIM_ConfigClockSource>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d001      	beq.n	800ad74 <ServoxInit+0x174>
		  {
		    Error_Handler();
 800ad70:	f7f9 ffe8 	bl	8004d44 <Error_Handler>
		  }
		if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 800ad74:	68b8      	ldr	r0, [r7, #8]
 800ad76:	f008 ff40 	bl	8013bfa <HAL_TIM_PWM_Init>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d001      	beq.n	800ad84 <ServoxInit+0x184>
			{
				Error_Handler();
 800ad80:	f7f9 ffe0 	bl	8004d44 <Error_Handler>
			}

		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ad84:	2300      	movs	r3, #0
 800ad86:	613b      	str	r3, [r7, #16]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	617b      	str	r3, [r7, #20]
		if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 800ad8c:	f107 0310 	add.w	r3, r7, #16
 800ad90:	4619      	mov	r1, r3
 800ad92:	68b8      	ldr	r0, [r7, #8]
 800ad94:	f009 fe2e 	bl	80149f4 <HAL_TIMEx_MasterConfigSynchronization>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d001      	beq.n	800ada2 <ServoxInit+0x1a2>
		{
			Error_Handler();
 800ad9e:	f7f9 ffd1 	bl	8004d44 <Error_Handler>
		}


	    HAL_TIM_Base_Start(htimx);
 800ada2:	68b8      	ldr	r0, [r7, #8]
 800ada4:	f008 fee1 	bl	8013b6a <HAL_TIM_Base_Start>

//	GPIOPinsInit(SERVO_GPIOx, SERVO_GPIO_Pin, GPIO_MODE_AF_PP, GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);

	servo->htimx = htimx;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	68ba      	ldr	r2, [r7, #8]
 800adac:	601a      	str	r2, [r3, #0]
	servo->htimx_Channel = channel;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adb2:	605a      	str	r2, [r3, #4]

	PWMChannelConfig(htimx, channel , SERVO_GPIOx,SERVO_GPIO_Pin);
 800adb4:	887b      	ldrh	r3, [r7, #2]
 800adb6:	687a      	ldr	r2, [r7, #4]
 800adb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800adba:	68b8      	ldr	r0, [r7, #8]
 800adbc:	f7f6 fc9a 	bl	80016f4 <PWMChannelConfig>

	servo->currentPulse = 0;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2200      	movs	r2, #0
 800adc4:	621a      	str	r2, [r3, #32]
}
 800adc6:	bf00      	nop
 800adc8:	3728      	adds	r7, #40	; 0x28
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	20005f64 	.word	0x20005f64
 800add4:	40010000 	.word	0x40010000
 800add8:	20006068 	.word	0x20006068
 800addc:	20005d18 	.word	0x20005d18
 800ade0:	40000400 	.word	0x40000400
 800ade4:	20005b54 	.word	0x20005b54
 800ade8:	40000800 	.word	0x40000800
 800adec:	20005cd8 	.word	0x20005cd8
 800adf0:	40000c00 	.word	0x40000c00
 800adf4:	20005b14 	.word	0x20005b14
 800adf8:	40010400 	.word	0x40010400
 800adfc:	20005fa4 	.word	0x20005fa4
 800ae00:	40014000 	.word	0x40014000
 800ae04:	20005c34 	.word	0x20005c34
 800ae08:	40014400 	.word	0x40014400
 800ae0c:	20005e7c 	.word	0x20005e7c
 800ae10:	40014800 	.word	0x40014800
 800ae14:	20006188 	.word	0x20006188
 800ae18:	40001800 	.word	0x40001800
 800ae1c:	20005dfc 	.word	0x20005dfc
 800ae20:	40001c00 	.word	0x40001c00
 800ae24:	20006148 	.word	0x20006148
 800ae28:	40002000 	.word	0x40002000

0800ae2c <ServoSetPulse>:
 * 						  pulse		output compare pulse to be set
 * Function Return		: None
 * Function Example		: ServoSetPulse(&SERVO1, 1000);
 */

void ServoSetPulse(SERVO_t* servo, uint32_t pulse){
 800ae2c:	b480      	push	{r7}
 800ae2e:	b083      	sub	sp, #12
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
	if(pulse < servo->SERVO_pulseMinLimit){
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	695b      	ldr	r3, [r3, #20]
 800ae3a:	683a      	ldr	r2, [r7, #0]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d204      	bcs.n	800ae4a <ServoSetPulse+0x1e>
		servo->currentPulse = servo->SERVO_pulseMinLimit;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	695a      	ldr	r2, [r3, #20]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	621a      	str	r2, [r3, #32]
 800ae48:	e00c      	b.n	800ae64 <ServoSetPulse+0x38>
	}else if(pulse > servo->SERVO_pulseMaxLimit){
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	699b      	ldr	r3, [r3, #24]
 800ae4e:	683a      	ldr	r2, [r7, #0]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d904      	bls.n	800ae5e <ServoSetPulse+0x32>
		servo->currentPulse = servo->SERVO_pulseMaxLimit;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	699a      	ldr	r2, [r3, #24]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	621a      	str	r2, [r3, #32]
 800ae5c:	e002      	b.n	800ae64 <ServoSetPulse+0x38>
	}else{
		servo->currentPulse = pulse;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	683a      	ldr	r2, [r7, #0]
 800ae62:	621a      	str	r2, [r3, #32]
	}
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d106      	bne.n	800ae7a <ServoSetPulse+0x4e>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	6a12      	ldr	r2, [r2, #32]
 800ae76:	635a      	str	r2, [r3, #52]	; 0x34

}
 800ae78:	e01b      	b.n	800aeb2 <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	2b04      	cmp	r3, #4
 800ae80:	d106      	bne.n	800ae90 <ServoSetPulse+0x64>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6a1b      	ldr	r3, [r3, #32]
 800ae8c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800ae8e:	e010      	b.n	800aeb2 <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	2b08      	cmp	r3, #8
 800ae96:	d106      	bne.n	800aea6 <ServoSetPulse+0x7a>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	681a      	ldr	r2, [r3, #0]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6a1b      	ldr	r3, [r3, #32]
 800aea2:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800aea4:	e005      	b.n	800aeb2 <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6a1b      	ldr	r3, [r3, #32]
 800aeb0:	6413      	str	r3, [r2, #64]	; 0x40
}
 800aeb2:	bf00      	nop
 800aeb4:	370c      	adds	r7, #12
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr

0800aebe <ServoInitPulseLimit>:
	servo->TIMx_Compare = servo->SERVO_pulse0degree + (servo->SERVO_pulse1degree)*angle;
	servo->currentPulse = servo->TIMx_Compare;
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->TIMx_Compare);
}

void ServoInitPulseLimit(SERVO_t* servo, uint32_t MinPulse, uint32_t MaxPulse){
 800aebe:	b480      	push	{r7}
 800aec0:	b085      	sub	sp, #20
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	60f8      	str	r0, [r7, #12]
 800aec6:	60b9      	str	r1, [r7, #8]
 800aec8:	607a      	str	r2, [r7, #4]
	servo->SERVO_pulseMinLimit = MinPulse;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	68ba      	ldr	r2, [r7, #8]
 800aece:	615a      	str	r2, [r3, #20]
	servo->SERVO_pulseMaxLimit = MaxPulse;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	619a      	str	r2, [r3, #24]
}
 800aed6:	bf00      	nop
 800aed8:	3714      	adds	r7, #20
 800aeda:	46bd      	mov	sp, r7
 800aedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee0:	4770      	bx	lr

0800aee2 <ServoMovePulse>:
void ServoMovePulse(SERVO_t* servo, int pulse){
 800aee2:	b480      	push	{r7}
 800aee4:	b083      	sub	sp, #12
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]
 800aeea:	6039      	str	r1, [r7, #0]
	servo->currentPulse = servo->currentPulse + pulse;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6a1a      	ldr	r2, [r3, #32]
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	441a      	add	r2, r3
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	621a      	str	r2, [r3, #32]

	if(servo->currentPulse < servo->SERVO_pulseMinLimit){
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6a1a      	ldr	r2, [r3, #32]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	695b      	ldr	r3, [r3, #20]
 800af00:	429a      	cmp	r2, r3
 800af02:	d203      	bcs.n	800af0c <ServoMovePulse+0x2a>
		servo->currentPulse = servo->SERVO_pulseMinLimit;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	695a      	ldr	r2, [r3, #20]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	621a      	str	r2, [r3, #32]
	}
	if(servo->currentPulse > servo->SERVO_pulseMaxLimit){
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6a1a      	ldr	r2, [r3, #32]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	699b      	ldr	r3, [r3, #24]
 800af14:	429a      	cmp	r2, r3
 800af16:	d903      	bls.n	800af20 <ServoMovePulse+0x3e>
		servo->currentPulse = servo->SERVO_pulseMaxLimit;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	699a      	ldr	r2, [r3, #24]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	621a      	str	r2, [r3, #32]
	}
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d106      	bne.n	800af36 <ServoMovePulse+0x54>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	6a12      	ldr	r2, [r2, #32]
 800af32:	635a      	str	r2, [r3, #52]	; 0x34
}
 800af34:	e01b      	b.n	800af6e <ServoMovePulse+0x8c>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	2b04      	cmp	r3, #4
 800af3c:	d106      	bne.n	800af4c <ServoMovePulse+0x6a>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6a1b      	ldr	r3, [r3, #32]
 800af48:	6393      	str	r3, [r2, #56]	; 0x38
}
 800af4a:	e010      	b.n	800af6e <ServoMovePulse+0x8c>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	2b08      	cmp	r3, #8
 800af52:	d106      	bne.n	800af62 <ServoMovePulse+0x80>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	681a      	ldr	r2, [r3, #0]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6a1b      	ldr	r3, [r3, #32]
 800af5e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800af60:	e005      	b.n	800af6e <ServoMovePulse+0x8c>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	681a      	ldr	r2, [r3, #0]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6a1b      	ldr	r3, [r3, #32]
 800af6c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800af6e:	bf00      	nop
 800af70:	370c      	adds	r7, #12
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr
	...

0800af7c <SPIxInit>:
 *
 * Function Return		: None
 * Function Example		: IMU_SPI_Init(&hspix, GPIOB , GPIO_Pin_12, SPI_MODE_MASTER);
 *
 */
void SPIxInit(SPI_HandleTypeDef* hspix, GPIO_TypeDef* GPIOx_NSS, uint16_t GPIO_Pin_NSS,uint32_t Mode, int InterruptEnable){
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b088      	sub	sp, #32
 800af80:	af02      	add	r7, sp, #8
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	603b      	str	r3, [r7, #0]
 800af88:	4613      	mov	r3, r2
 800af8a:	80fb      	strh	r3, [r7, #6]

	IRQn_Type nvic;
	GPIOPinsInit(GPIOx_NSS, GPIO_Pin_NSS, GPIO_MODE_OUTPUT_PP, GPIO_PULLUP, GPIO_SPEED_FREQ_HIGH);
 800af8c:	88f9      	ldrh	r1, [r7, #6]
 800af8e:	2302      	movs	r3, #2
 800af90:	9300      	str	r3, [sp, #0]
 800af92:	2301      	movs	r3, #1
 800af94:	2201      	movs	r2, #1
 800af96:	68b8      	ldr	r0, [r7, #8]
 800af98:	f7f6 f9cc 	bl	8001334 <GPIOPinsInit>

	if(hspix == &hspi1){
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	4a2a      	ldr	r2, [pc, #168]	; (800b048 <SPIxInit+0xcc>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d105      	bne.n	800afb0 <SPIxInit+0x34>
		hspix->Instance = SPI1;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	4a29      	ldr	r2, [pc, #164]	; (800b04c <SPIxInit+0xd0>)
 800afa8:	601a      	str	r2, [r3, #0]
		nvic = SPI1_IRQn;
 800afaa:	2323      	movs	r3, #35	; 0x23
 800afac:	75fb      	strb	r3, [r7, #23]
 800afae:	e00e      	b.n	800afce <SPIxInit+0x52>
	}else if(hspix == &hspi2){
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	4a27      	ldr	r2, [pc, #156]	; (800b050 <SPIxInit+0xd4>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d105      	bne.n	800afc4 <SPIxInit+0x48>
		hspix->Instance = SPI2;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	4a26      	ldr	r2, [pc, #152]	; (800b054 <SPIxInit+0xd8>)
 800afbc:	601a      	str	r2, [r3, #0]
		nvic = SPI2_IRQn;
 800afbe:	2324      	movs	r3, #36	; 0x24
 800afc0:	75fb      	strb	r3, [r7, #23]
 800afc2:	e004      	b.n	800afce <SPIxInit+0x52>
	}
	else{
		hspix->Instance = SPI3;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	4a24      	ldr	r2, [pc, #144]	; (800b058 <SPIxInit+0xdc>)
 800afc8:	601a      	str	r2, [r3, #0]
		nvic = SPI3_IRQn;
 800afca:	2333      	movs	r3, #51	; 0x33
 800afcc:	75fb      	strb	r3, [r7, #23]
	}

	hspix->Init.Mode = Mode;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	683a      	ldr	r2, [r7, #0]
 800afd2:	605a      	str	r2, [r3, #4]
	hspix->Init.Direction = SPI_DIRECTION_2LINES;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2200      	movs	r2, #0
 800afd8:	609a      	str	r2, [r3, #8]
	hspix->Init.DataSize = SPI_DATASIZE_8BIT;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2200      	movs	r2, #0
 800afde:	60da      	str	r2, [r3, #12]
	hspix->Init.CLKPolarity = SPI_POLARITY_LOW;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2200      	movs	r2, #0
 800afe4:	611a      	str	r2, [r3, #16]
	hspix->Init.CLKPhase = SPI_PHASE_1EDGE;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2200      	movs	r2, #0
 800afea:	615a      	str	r2, [r3, #20]
//	hspix->Init.CLKPhase = SPI_PHASE_2EDGE;
	hspix->Init.NSS = SPI_NSS_SOFT ;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aff2:	619a      	str	r2, [r3, #24]
	hspix->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2200      	movs	r2, #0
 800aff8:	61da      	str	r2, [r3, #28]
//	hspix->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
	hspix->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2200      	movs	r2, #0
 800affe:	621a      	str	r2, [r3, #32]
	hspix->Init.TIMode = SPI_TIMODE_DISABLE;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2200      	movs	r2, #0
 800b004:	625a      	str	r2, [r3, #36]	; 0x24
	hspix->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2200      	movs	r2, #0
 800b00a:	629a      	str	r2, [r3, #40]	; 0x28
	hspix->Init.CRCPolynomial = 10;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	220a      	movs	r2, #10
 800b010:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800b012:	480d      	ldr	r0, [pc, #52]	; (800b048 <SPIxInit+0xcc>)
 800b014:	f008 fa1c 	bl	8013450 <HAL_SPI_Init>
 800b018:	4603      	mov	r3, r0
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d001      	beq.n	800b022 <SPIxInit+0xa6>
	{
		Error_Handler();
 800b01e:	f7f9 fe91 	bl	8004d44 <Error_Handler>
	}

	if(InterruptEnable){
 800b022:	6a3b      	ldr	r3, [r7, #32]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d00b      	beq.n	800b040 <SPIxInit+0xc4>
		HAL_NVIC_SetPriority(nvic, SPI1_RX_IRQ_PRIO, 0);
 800b028:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b02c:	2200      	movs	r2, #0
 800b02e:	210e      	movs	r1, #14
 800b030:	4618      	mov	r0, r3
 800b032:	f004 fb35 	bl	800f6a0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800b036:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b03a:	4618      	mov	r0, r3
 800b03c:	f004 fb4c 	bl	800f6d8 <HAL_NVIC_EnableIRQ>
	}

}
 800b040:	bf00      	nop
 800b042:	3718      	adds	r7, #24
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	200099f4 	.word	0x200099f4
 800b04c:	40013000 	.word	0x40013000
 800b050:	20006824 	.word	0x20006824
 800b054:	40003800 	.word	0x40003800
 800b058:	40003c00 	.word	0x40003c00

0800b05c <SPIx_DMA_TX_Init>:


void SPIx_DMA_TX_Init(SPI_HandleTypeDef* hspix, DMA_HandleTypeDef* hdma_spix,
		GPIO_TypeDef* GPIOx_NSS, uint16_t GPIO_Pin_NSS,uint32_t Mode){
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b088      	sub	sp, #32
 800b060:	af02      	add	r7, sp, #8
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	607a      	str	r2, [r7, #4]
 800b068:	807b      	strh	r3, [r7, #2]

	__HAL_RCC_DMA2_CLK_ENABLE();
 800b06a:	2300      	movs	r3, #0
 800b06c:	617b      	str	r3, [r7, #20]
 800b06e:	4b28      	ldr	r3, [pc, #160]	; (800b110 <SPIx_DMA_TX_Init+0xb4>)
 800b070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b072:	4a27      	ldr	r2, [pc, #156]	; (800b110 <SPIx_DMA_TX_Init+0xb4>)
 800b074:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b078:	6313      	str	r3, [r2, #48]	; 0x30
 800b07a:	4b25      	ldr	r3, [pc, #148]	; (800b110 <SPIx_DMA_TX_Init+0xb4>)
 800b07c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b07e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b082:	617b      	str	r3, [r7, #20]
 800b084:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, SPI1_TX_IRQ_PRIO, 0);
 800b086:	2200      	movs	r2, #0
 800b088:	210d      	movs	r1, #13
 800b08a:	2044      	movs	r0, #68	; 0x44
 800b08c:	f004 fb08 	bl	800f6a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_ClearPendingIRQ(DMA2_Stream5_IRQn);
 800b090:	2044      	movs	r0, #68	; 0x44
 800b092:	f004 fb3d 	bl	800f710 <HAL_NVIC_ClearPendingIRQ>
    HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800b096:	2044      	movs	r0, #68	; 0x44
 800b098:	f004 fb1e 	bl	800f6d8 <HAL_NVIC_EnableIRQ>

	SPIxInit(hspix, GPIOx_NSS, GPIO_Pin_NSS, Mode, DISABLE);
 800b09c:	887a      	ldrh	r2, [r7, #2]
 800b09e:	2300      	movs	r3, #0
 800b0a0:	9300      	str	r3, [sp, #0]
 800b0a2:	6a3b      	ldr	r3, [r7, #32]
 800b0a4:	6879      	ldr	r1, [r7, #4]
 800b0a6:	68f8      	ldr	r0, [r7, #12]
 800b0a8:	f7ff ff68 	bl	800af7c <SPIxInit>

    hdma_spix->Instance = DMA2_Stream5;
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	4a19      	ldr	r2, [pc, #100]	; (800b114 <SPIx_DMA_TX_Init+0xb8>)
 800b0b0:	601a      	str	r2, [r3, #0]
    hdma_spix->Init.Channel = DMA_CHANNEL_3;
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800b0b8:	605a      	str	r2, [r3, #4]
    hdma_spix->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	2240      	movs	r2, #64	; 0x40
 800b0be:	609a      	str	r2, [r3, #8]
    hdma_spix->Init.PeriphInc = DMA_PINC_DISABLE;
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	60da      	str	r2, [r3, #12]
    hdma_spix->Init.MemInc = DMA_MINC_ENABLE;
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b0cc:	611a      	str	r2, [r3, #16]
    hdma_spix->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	615a      	str	r2, [r3, #20]
    hdma_spix->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	619a      	str	r2, [r3, #24]
    hdma_spix->Init.Mode = DMA_NORMAL;
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	61da      	str	r2, [r3, #28]
    hdma_spix->Init.Priority = DMA_PRIORITY_LOW;
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	621a      	str	r2, [r3, #32]
    hdma_spix->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(hdma_spix) != HAL_OK)
 800b0ec:	68b8      	ldr	r0, [r7, #8]
 800b0ee:	f004 fb1d 	bl	800f72c <HAL_DMA_Init>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d001      	beq.n	800b0fc <SPIx_DMA_TX_Init+0xa0>
    {
      Error_Handler();
 800b0f8:	f7f9 fe24 	bl	8004d44 <Error_Handler>
    }

    __HAL_LINKDMA(hspix,hdmatx,*hdma_spix);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	68ba      	ldr	r2, [r7, #8]
 800b100:	649a      	str	r2, [r3, #72]	; 0x48
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	639a      	str	r2, [r3, #56]	; 0x38
}
 800b108:	bf00      	nop
 800b10a:	3718      	adds	r7, #24
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	40023800 	.word	0x40023800
 800b114:	40026488 	.word	0x40026488

0800b118 <SPI1_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI1_IRQHandler(void)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi1);
 800b11c:	4802      	ldr	r0, [pc, #8]	; (800b128 <SPI1_IRQHandler+0x10>)
 800b11e:	f008 fb2f 	bl	8013780 <HAL_SPI_IRQHandler>
}
 800b122:	bf00      	nop
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	200099f4 	.word	0x200099f4

0800b12c <SPI2_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI2_IRQHandler(void)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi2);
 800b130:	4802      	ldr	r0, [pc, #8]	; (800b13c <SPI2_IRQHandler+0x10>)
 800b132:	f008 fb25 	bl	8013780 <HAL_SPI_IRQHandler>
}
 800b136:	bf00      	nop
 800b138:	bd80      	pop	{r7, pc}
 800b13a:	bf00      	nop
 800b13c:	20006824 	.word	0x20006824

0800b140 <SPI3_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI3_IRQHandler(void)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi3);
 800b144:	4802      	ldr	r0, [pc, #8]	; (800b150 <SPI3_IRQHandler+0x10>)
 800b146:	f008 fb1b 	bl	8013780 <HAL_SPI_IRQHandler>
}
 800b14a:	bf00      	nop
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	200076a8 	.word	0x200076a8

0800b154 <Initialize>:
uint8_t mailbox = 0, buf2_flag = 0, buf2_flagC2 = 0;

/************************************************/
/*		 	 	Functions		       		  	*/
/************************************************/
void Initialize(){
 800b154:	b580      	push	{r7, lr}
 800b156:	b084      	sub	sp, #16
 800b158:	af04      	add	r7, sp, #16
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800b15a:	f003 fab3 	bl	800e6c4 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800b15e:	f7f8 f871 	bl	8003244 <SystemClock_Config>

	/* Initialize all configured peripherals */
	GPIOPinsInit (LED1_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800b162:	2301      	movs	r3, #1
 800b164:	9300      	str	r3, [sp, #0]
 800b166:	2302      	movs	r3, #2
 800b168:	2201      	movs	r2, #1
 800b16a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b16e:	48c7      	ldr	r0, [pc, #796]	; (800b48c <Initialize+0x338>)
 800b170:	f7f6 f8e0 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (LED2_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800b174:	2301      	movs	r3, #1
 800b176:	9300      	str	r3, [sp, #0]
 800b178:	2302      	movs	r3, #2
 800b17a:	2201      	movs	r2, #1
 800b17c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b180:	48c2      	ldr	r0, [pc, #776]	; (800b48c <Initialize+0x338>)
 800b182:	f7f6 f8d7 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (LED3_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800b186:	2301      	movs	r3, #1
 800b188:	9300      	str	r3, [sp, #0]
 800b18a:	2302      	movs	r3, #2
 800b18c:	2201      	movs	r2, #1
 800b18e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b192:	48be      	ldr	r0, [pc, #760]	; (800b48c <Initialize+0x338>)
 800b194:	f7f6 f8ce 	bl	8001334 <GPIOPinsInit>

	GPIOPinsInit (PB1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800b198:	2301      	movs	r3, #1
 800b19a:	9300      	str	r3, [sp, #0]
 800b19c:	2302      	movs	r3, #2
 800b19e:	2200      	movs	r2, #0
 800b1a0:	2180      	movs	r1, #128	; 0x80
 800b1a2:	48bb      	ldr	r0, [pc, #748]	; (800b490 <Initialize+0x33c>)
 800b1a4:	f7f6 f8c6 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (PB2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	9300      	str	r3, [sp, #0]
 800b1ac:	2302      	movs	r3, #2
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	2101      	movs	r1, #1
 800b1b2:	48b8      	ldr	r0, [pc, #736]	; (800b494 <Initialize+0x340>)
 800b1b4:	f7f6 f8be 	bl	8001334 <GPIOPinsInit>

	/*Normal IOs*/
	GPIOPinsInit (IP1_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLDOWN);
 800b1b8:	2302      	movs	r3, #2
 800b1ba:	9300      	str	r3, [sp, #0]
 800b1bc:	2301      	movs	r3, #1
 800b1be:	2201      	movs	r2, #1
 800b1c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b1c4:	48b3      	ldr	r0, [pc, #716]	; (800b494 <Initialize+0x340>)
 800b1c6:	f7f6 f8b5 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP2_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLDOWN);
 800b1ca:	2302      	movs	r3, #2
 800b1cc:	9300      	str	r3, [sp, #0]
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b1d6:	48af      	ldr	r0, [pc, #700]	; (800b494 <Initialize+0x340>)
 800b1d8:	f7f6 f8ac 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP3_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLDOWN);
 800b1dc:	2302      	movs	r3, #2
 800b1de:	9300      	str	r3, [sp, #0]
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b1e8:	48aa      	ldr	r0, [pc, #680]	; (800b494 <Initialize+0x340>)
 800b1ea:	f7f6 f8a3 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	9300      	str	r3, [sp, #0]
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b1fa:	48a6      	ldr	r0, [pc, #664]	; (800b494 <Initialize+0x340>)
 800b1fc:	f7f6 f89a 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b200:	2301      	movs	r3, #1
 800b202:	9300      	str	r3, [sp, #0]
 800b204:	2301      	movs	r3, #1
 800b206:	2200      	movs	r2, #0
 800b208:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b20c:	48a0      	ldr	r0, [pc, #640]	; (800b490 <Initialize+0x33c>)
 800b20e:	f7f6 f891 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP6_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLDOWN);
 800b212:	2302      	movs	r3, #2
 800b214:	9300      	str	r3, [sp, #0]
 800b216:	2301      	movs	r3, #1
 800b218:	2201      	movs	r2, #1
 800b21a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b21e:	489c      	ldr	r0, [pc, #624]	; (800b490 <Initialize+0x33c>)
 800b220:	f7f6 f888 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP7_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLDOWN);
 800b224:	2302      	movs	r3, #2
 800b226:	9300      	str	r3, [sp, #0]
 800b228:	2301      	movs	r3, #1
 800b22a:	2201      	movs	r2, #1
 800b22c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b230:	4899      	ldr	r0, [pc, #612]	; (800b498 <Initialize+0x344>)
 800b232:	f7f6 f87f 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP8_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLDOWN);
 800b236:	2302      	movs	r3, #2
 800b238:	9300      	str	r3, [sp, #0]
 800b23a:	2301      	movs	r3, #1
 800b23c:	2201      	movs	r2, #1
 800b23e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b242:	4895      	ldr	r0, [pc, #596]	; (800b498 <Initialize+0x344>)
 800b244:	f7f6 f876 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP9_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b248:	2301      	movs	r3, #1
 800b24a:	9300      	str	r3, [sp, #0]
 800b24c:	2301      	movs	r3, #1
 800b24e:	2200      	movs	r2, #0
 800b250:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b254:	488d      	ldr	r0, [pc, #564]	; (800b48c <Initialize+0x338>)
 800b256:	f7f6 f86d 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP10_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b25a:	2301      	movs	r3, #1
 800b25c:	9300      	str	r3, [sp, #0]
 800b25e:	2301      	movs	r3, #1
 800b260:	2200      	movs	r2, #0
 800b262:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b266:	488d      	ldr	r0, [pc, #564]	; (800b49c <Initialize+0x348>)
 800b268:	f7f6 f864 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP11_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b26c:	2301      	movs	r3, #1
 800b26e:	9300      	str	r3, [sp, #0]
 800b270:	2301      	movs	r3, #1
 800b272:	2200      	movs	r2, #0
 800b274:	2108      	movs	r1, #8
 800b276:	4888      	ldr	r0, [pc, #544]	; (800b498 <Initialize+0x344>)
 800b278:	f7f6 f85c 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP12_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b27c:	2301      	movs	r3, #1
 800b27e:	9300      	str	r3, [sp, #0]
 800b280:	2301      	movs	r3, #1
 800b282:	2200      	movs	r2, #0
 800b284:	2110      	movs	r1, #16
 800b286:	4884      	ldr	r0, [pc, #528]	; (800b498 <Initialize+0x344>)
 800b288:	f7f6 f854 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP13_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b28c:	2301      	movs	r3, #1
 800b28e:	9300      	str	r3, [sp, #0]
 800b290:	2301      	movs	r3, #1
 800b292:	2200      	movs	r2, #0
 800b294:	2180      	movs	r1, #128	; 0x80
 800b296:	4880      	ldr	r0, [pc, #512]	; (800b498 <Initialize+0x344>)
 800b298:	f7f6 f84c 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP14_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b29c:	2301      	movs	r3, #1
 800b29e:	9300      	str	r3, [sp, #0]
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	2120      	movs	r1, #32
 800b2a6:	487a      	ldr	r0, [pc, #488]	; (800b490 <Initialize+0x33c>)
 800b2a8:	f7f6 f844 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP15_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	9300      	str	r3, [sp, #0]
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	2140      	movs	r1, #64	; 0x40
 800b2b6:	4876      	ldr	r0, [pc, #472]	; (800b490 <Initialize+0x33c>)
 800b2b8:	f7f6 f83c 	bl	8001334 <GPIOPinsInit>

	GPIOPinsInit (IP16_Analog1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b2bc:	2301      	movs	r3, #1
 800b2be:	9300      	str	r3, [sp, #0]
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	2101      	movs	r1, #1
 800b2c6:	4871      	ldr	r0, [pc, #452]	; (800b48c <Initialize+0x338>)
 800b2c8:	f7f6 f834 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP17_Analog2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	9300      	str	r3, [sp, #0]
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	2102      	movs	r1, #2
 800b2d6:	486d      	ldr	r0, [pc, #436]	; (800b48c <Initialize+0x338>)
 800b2d8:	f7f6 f82c 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP18_Analog3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b2dc:	2301      	movs	r3, #1
 800b2de:	9300      	str	r3, [sp, #0]
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	2104      	movs	r1, #4
 800b2e6:	4869      	ldr	r0, [pc, #420]	; (800b48c <Initialize+0x338>)
 800b2e8:	f7f6 f824 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP19_Analog4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	9300      	str	r3, [sp, #0]
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	2108      	movs	r1, #8
 800b2f6:	4865      	ldr	r0, [pc, #404]	; (800b48c <Initialize+0x338>)
 800b2f8:	f7f6 f81c 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP20_Analog5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	9300      	str	r3, [sp, #0]
 800b300:	2301      	movs	r3, #1
 800b302:	2200      	movs	r2, #0
 800b304:	2110      	movs	r1, #16
 800b306:	4861      	ldr	r0, [pc, #388]	; (800b48c <Initialize+0x338>)
 800b308:	f7f6 f814 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit (IP21_Analog6_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b30c:	2301      	movs	r3, #1
 800b30e:	9300      	str	r3, [sp, #0]
 800b310:	2301      	movs	r3, #1
 800b312:	2200      	movs	r2, #0
 800b314:	2120      	movs	r1, #32
 800b316:	485d      	ldr	r0, [pc, #372]	; (800b48c <Initialize+0x338>)
 800b318:	f7f6 f80c 	bl	8001334 <GPIOPinsInit>

	GPIOPinsInit(GPIOB, GPIO_PIN_10, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b31c:	2301      	movs	r3, #1
 800b31e:	9300      	str	r3, [sp, #0]
 800b320:	2301      	movs	r3, #1
 800b322:	2200      	movs	r2, #0
 800b324:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b328:	4859      	ldr	r0, [pc, #356]	; (800b490 <Initialize+0x33c>)
 800b32a:	f7f6 f803 	bl	8001334 <GPIOPinsInit>
	GPIOPinsInit(GPIOB, GPIO_PIN_11, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b32e:	2301      	movs	r3, #1
 800b330:	9300      	str	r3, [sp, #0]
 800b332:	2301      	movs	r3, #1
 800b334:	2200      	movs	r2, #0
 800b336:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b33a:	4855      	ldr	r0, [pc, #340]	; (800b490 <Initialize+0x33c>)
 800b33c:	f7f5 fffa 	bl	8001334 <GPIOPinsInit>

	//Unused peripheral pins can be used as GPIO Input or Output
//	GPIOPinsInit (UART3_Rx, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);

//	MUXInit(&MUX, MUX1_INPUT_PIN, MUX1_S0_PIN, MUX1_S1_PIN, MUX1_S2_PIN);
	SHIFTREGInit (&SR, CASCADE_1, SR_SCK_PIN, SR_RCK_PIN, SR_SI_PIN);
 800b340:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b344:	9303      	str	r3, [sp, #12]
 800b346:	4b53      	ldr	r3, [pc, #332]	; (800b494 <Initialize+0x340>)
 800b348:	9302      	str	r3, [sp, #8]
 800b34a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b34e:	9301      	str	r3, [sp, #4]
 800b350:	4b50      	ldr	r3, [pc, #320]	; (800b494 <Initialize+0x340>)
 800b352:	9300      	str	r3, [sp, #0]
 800b354:	2380      	movs	r3, #128	; 0x80
 800b356:	4a4f      	ldr	r2, [pc, #316]	; (800b494 <Initialize+0x340>)
 800b358:	2101      	movs	r1, #1
 800b35a:	4851      	ldr	r0, [pc, #324]	; (800b4a0 <Initialize+0x34c>)
 800b35c:	f7f6 fe66 	bl	800202c <SHIFTREGInit>

	//https://stackoverflow.com/questions/50243996/what-are-valid-values-of-hal-nvic-setpriority-when-using-stm32-and-freertos
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b360:	2003      	movs	r0, #3
 800b362:	f004 f992 	bl	800f68a <HAL_NVIC_SetPriorityGrouping>


	/*************** Set Interrupt Priorities in BIOS/priorities.h ***************/

//	I2CxInit (&hi2c1,main_board_1, CLOCK_SPEED_400KHz,ENABLE);
	I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 800b366:	4b4f      	ldr	r3, [pc, #316]	; (800b4a4 <Initialize+0x350>)
 800b368:	2208      	movs	r2, #8
 800b36a:	494f      	ldr	r1, [pc, #316]	; (800b4a8 <Initialize+0x354>)
 800b36c:	484f      	ldr	r0, [pc, #316]	; (800b4ac <Initialize+0x358>)
 800b36e:	f7f8 fc1b 	bl	8003ba8 <I2CX_DMA_RX_Init>
//	I2CxInit (&hi2c3,main_board_1, CLOCK_SPEED_100KHz,DISABLE);
//	ServoDriverInit(&srv_drv,&hi2c3,0x40);

//	UARTx_DMA_Rx_Init(&huart2, &hdma_usart2_rx, 115200);//Bluebee Tuning
//	UARTx_DMA_Rx_Init(&huart4, &hdma_uart4_rx, 115200); //Jetson
	UARTInit(&huart3, 115200, ENABLE); // Debug
 800b372:	2201      	movs	r2, #1
 800b374:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800b378:	484d      	ldr	r0, [pc, #308]	; (800b4b0 <Initialize+0x35c>)
 800b37a:	f7f8 f969 	bl	8003650 <UARTInit>
	UARTInit(&huart4, 115200, ENABLE); // ROS UART
 800b37e:	2201      	movs	r2, #1
 800b380:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800b384:	484b      	ldr	r0, [pc, #300]	; (800b4b4 <Initialize+0x360>)
 800b386:	f7f8 f963 	bl	8003650 <UARTInit>
	UARTInit(&huart5, 115200, ENABLE); //
 800b38a:	2201      	movs	r2, #1
 800b38c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800b390:	4849      	ldr	r0, [pc, #292]	; (800b4b8 <Initialize+0x364>)
 800b392:	f7f8 f95d 	bl	8003650 <UARTInit>
	UARTInit(&huart2, 115200, ENABLE); //
 800b396:	2201      	movs	r2, #1
 800b398:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800b39c:	4847      	ldr	r0, [pc, #284]	; (800b4bc <Initialize+0x368>)
 800b39e:	f7f8 f957 	bl	8003650 <UARTInit>

	//	QEIInit(&htim8);

	CANxInit(&hcan1,4,CAN_FILTER_FIFO0,0,0,0,CAN_500KHz);
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	9302      	str	r3, [sp, #8]
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	9301      	str	r3, [sp, #4]
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	9300      	str	r3, [sp, #0]
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	2104      	movs	r1, #4
 800b3b4:	4842      	ldr	r0, [pc, #264]	; (800b4c0 <Initialize+0x36c>)
 800b3b6:	f7f8 fa8f 	bl	80038d8 <CANxInit>
	CANxInit(&hcan2,4,CAN_FILTER_FIFO1,0,0,14,CAN_500KHz);
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	9302      	str	r3, [sp, #8]
 800b3be:	230e      	movs	r3, #14
 800b3c0:	9301      	str	r3, [sp, #4]
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	9300      	str	r3, [sp, #0]
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	2104      	movs	r1, #4
 800b3cc:	483d      	ldr	r0, [pc, #244]	; (800b4c4 <Initialize+0x370>)
 800b3ce:	f7f8 fa83 	bl	80038d8 <CANxInit>

	PWMTimeBaseInit(&htim3, 19999, 83);
 800b3d2:	2253      	movs	r2, #83	; 0x53
 800b3d4:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800b3d8:	483b      	ldr	r0, [pc, #236]	; (800b4c8 <Initialize+0x374>)
 800b3da:	f7f6 f8a5 	bl	8001528 <PWMTimeBaseInit>
	PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 800b3de:	2301      	movs	r3, #1
 800b3e0:	4a2b      	ldr	r2, [pc, #172]	; (800b490 <Initialize+0x33c>)
 800b3e2:	2108      	movs	r1, #8
 800b3e4:	4838      	ldr	r0, [pc, #224]	; (800b4c8 <Initialize+0x374>)
 800b3e6:	f7f6 f985 	bl	80016f4 <PWMChannelConfig>
	PWMChannelConfig(&htim3, TIM_CHANNEL_4 , TIM3_CHANNEL4_PIN);
 800b3ea:	2302      	movs	r3, #2
 800b3ec:	4a28      	ldr	r2, [pc, #160]	; (800b490 <Initialize+0x33c>)
 800b3ee:	210c      	movs	r1, #12
 800b3f0:	4835      	ldr	r0, [pc, #212]	; (800b4c8 <Initialize+0x374>)
 800b3f2:	f7f6 f97f 	bl	80016f4 <PWMChannelConfig>

	PWMTimeBaseInit(&htim5, 19999, 83);
 800b3f6:	2253      	movs	r2, #83	; 0x53
 800b3f8:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800b3fc:	4833      	ldr	r0, [pc, #204]	; (800b4cc <Initialize+0x378>)
 800b3fe:	f7f6 f893 	bl	8001528 <PWMTimeBaseInit>
	PWMChannelConfig(&htim5, TIM_CHANNEL_1, TIM5_CHANNEL1_PIN);
 800b402:	2301      	movs	r3, #1
 800b404:	4a25      	ldr	r2, [pc, #148]	; (800b49c <Initialize+0x348>)
 800b406:	2100      	movs	r1, #0
 800b408:	4830      	ldr	r0, [pc, #192]	; (800b4cc <Initialize+0x378>)
 800b40a:	f7f6 f973 	bl	80016f4 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_2, TIM5_CHANNEL2_PIN);
 800b40e:	2302      	movs	r3, #2
 800b410:	4a22      	ldr	r2, [pc, #136]	; (800b49c <Initialize+0x348>)
 800b412:	2104      	movs	r1, #4
 800b414:	482d      	ldr	r0, [pc, #180]	; (800b4cc <Initialize+0x378>)
 800b416:	f7f6 f96d 	bl	80016f4 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_3, TIM5_CHANNEL3_PIN);
 800b41a:	2304      	movs	r3, #4
 800b41c:	4a1f      	ldr	r2, [pc, #124]	; (800b49c <Initialize+0x348>)
 800b41e:	2108      	movs	r1, #8
 800b420:	482a      	ldr	r0, [pc, #168]	; (800b4cc <Initialize+0x378>)
 800b422:	f7f6 f967 	bl	80016f4 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_4, TIM5_CHANNEL4_PIN);
 800b426:	2308      	movs	r3, #8
 800b428:	4a1c      	ldr	r2, [pc, #112]	; (800b49c <Initialize+0x348>)
 800b42a:	210c      	movs	r1, #12
 800b42c:	4827      	ldr	r0, [pc, #156]	; (800b4cc <Initialize+0x378>)
 800b42e:	f7f6 f961 	bl	80016f4 <PWMChannelConfig>

	PWMTimeBaseInit(&htim9, 19999, 167);
 800b432:	22a7      	movs	r2, #167	; 0xa7
 800b434:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800b438:	4825      	ldr	r0, [pc, #148]	; (800b4d0 <Initialize+0x37c>)
 800b43a:	f7f6 f875 	bl	8001528 <PWMTimeBaseInit>
	PWMChannelConfig(&htim9, TIM_CHANNEL_1, TIM9_CHANNEL1_PIN);
 800b43e:	2320      	movs	r3, #32
 800b440:	4a14      	ldr	r2, [pc, #80]	; (800b494 <Initialize+0x340>)
 800b442:	2100      	movs	r1, #0
 800b444:	4822      	ldr	r0, [pc, #136]	; (800b4d0 <Initialize+0x37c>)
 800b446:	f7f6 f955 	bl	80016f4 <PWMChannelConfig>
	PWMChannelConfig(&htim9, TIM_CHANNEL_2, TIM9_CHANNEL2_PIN);
 800b44a:	2340      	movs	r3, #64	; 0x40
 800b44c:	4a11      	ldr	r2, [pc, #68]	; (800b494 <Initialize+0x340>)
 800b44e:	2104      	movs	r1, #4
 800b450:	481f      	ldr	r0, [pc, #124]	; (800b4d0 <Initialize+0x37c>)
 800b452:	f7f6 f94f 	bl	80016f4 <PWMChannelConfig>


	BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7); // yaw_servo
 800b456:	2380      	movs	r3, #128	; 0x80
 800b458:	9302      	str	r3, [sp, #8]
 800b45a:	2340      	movs	r3, #64	; 0x40
 800b45c:	9301      	str	r3, [sp, #4]
 800b45e:	4b1d      	ldr	r3, [pc, #116]	; (800b4d4 <Initialize+0x380>)
 800b460:	9300      	str	r3, [sp, #0]
 800b462:	2300      	movs	r3, #0
 800b464:	220c      	movs	r2, #12
 800b466:	4918      	ldr	r1, [pc, #96]	; (800b4c8 <Initialize+0x374>)
 800b468:	481b      	ldr	r0, [pc, #108]	; (800b4d8 <Initialize+0x384>)
 800b46a:	f7f5 fed9 	bl	8001220 <BDCInit>
	BDCInit(&BDC2, &htim3, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[1]), Bit4, Bit5); // pitch servo
 800b46e:	2320      	movs	r3, #32
 800b470:	9302      	str	r3, [sp, #8]
 800b472:	2310      	movs	r3, #16
 800b474:	9301      	str	r3, [sp, #4]
 800b476:	4b17      	ldr	r3, [pc, #92]	; (800b4d4 <Initialize+0x380>)
 800b478:	9300      	str	r3, [sp, #0]
 800b47a:	2300      	movs	r3, #0
 800b47c:	2208      	movs	r2, #8
 800b47e:	4912      	ldr	r1, [pc, #72]	; (800b4c8 <Initialize+0x374>)
 800b480:	4816      	ldr	r0, [pc, #88]	; (800b4dc <Initialize+0x388>)
 800b482:	f7f5 fecd 	bl	8001220 <BDCInit>
	BDCInit(&BDC3, &htim9, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[1]), Bit2, Bit3); // pick servo
 800b486:	2308      	movs	r3, #8
 800b488:	9302      	str	r3, [sp, #8]
 800b48a:	e029      	b.n	800b4e0 <Initialize+0x38c>
 800b48c:	40020800 	.word	0x40020800
 800b490:	40020400 	.word	0x40020400
 800b494:	40021000 	.word	0x40021000
 800b498:	40020c00 	.word	0x40020c00
 800b49c:	40020000 	.word	0x40020000
 800b4a0:	20009490 	.word	0x20009490
 800b4a4:	00061a80 	.word	0x00061a80
 800b4a8:	20009dc4 	.word	0x20009dc4
 800b4ac:	20006b64 	.word	0x20006b64
 800b4b0:	20005bf4 	.word	0x20005bf4
 800b4b4:	20006028 	.word	0x20006028
 800b4b8:	20005d5c 	.word	0x20005d5c
 800b4bc:	200060a8 	.word	0x200060a8
 800b4c0:	20009d44 	.word	0x20009d44
 800b4c4:	20008e8c 	.word	0x20008e8c
 800b4c8:	20005d18 	.word	0x20005d18
 800b4cc:	20005cd8 	.word	0x20005cd8
 800b4d0:	20005fa4 	.word	0x20005fa4
 800b4d4:	200094ac 	.word	0x200094ac
 800b4d8:	2000a3b8 	.word	0x2000a3b8
 800b4dc:	20007608 	.word	0x20007608
 800b4e0:	2304      	movs	r3, #4
 800b4e2:	9301      	str	r3, [sp, #4]
 800b4e4:	4b47      	ldr	r3, [pc, #284]	; (800b604 <Initialize+0x4b0>)
 800b4e6:	9300      	str	r3, [sp, #0]
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	4946      	ldr	r1, [pc, #280]	; (800b608 <Initialize+0x4b4>)
 800b4ee:	4847      	ldr	r0, [pc, #284]	; (800b60c <Initialize+0x4b8>)
 800b4f0:	f7f5 fe96 	bl	8001220 <BDCInit>
	BDCInit(&BDC4, &htim9, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[1]), Bit0, Bit1); // load servo
 800b4f4:	2302      	movs	r3, #2
 800b4f6:	9302      	str	r3, [sp, #8]
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	9301      	str	r3, [sp, #4]
 800b4fc:	4b41      	ldr	r3, [pc, #260]	; (800b604 <Initialize+0x4b0>)
 800b4fe:	9300      	str	r3, [sp, #0]
 800b500:	2300      	movs	r3, #0
 800b502:	2204      	movs	r2, #4
 800b504:	4940      	ldr	r1, [pc, #256]	; (800b608 <Initialize+0x4b4>)
 800b506:	4842      	ldr	r0, [pc, #264]	; (800b610 <Initialize+0x4bc>)
 800b508:	f7f5 fe8a 	bl	8001220 <BDCInit>
	BDCInit(&BDC5, &htim5, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[0]), Bit6, Bit7); // shot valve
 800b50c:	2380      	movs	r3, #128	; 0x80
 800b50e:	9302      	str	r3, [sp, #8]
 800b510:	2340      	movs	r3, #64	; 0x40
 800b512:	9301      	str	r3, [sp, #4]
 800b514:	4b3f      	ldr	r3, [pc, #252]	; (800b614 <Initialize+0x4c0>)
 800b516:	9300      	str	r3, [sp, #0]
 800b518:	2300      	movs	r3, #0
 800b51a:	220c      	movs	r2, #12
 800b51c:	493e      	ldr	r1, [pc, #248]	; (800b618 <Initialize+0x4c4>)
 800b51e:	483f      	ldr	r0, [pc, #252]	; (800b61c <Initialize+0x4c8>)
 800b520:	f7f5 fe7e 	bl	8001220 <BDCInit>
	BDCInit(&BDC6, &htim5, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[0]), Bit4, Bit5); // enabling valve
 800b524:	2320      	movs	r3, #32
 800b526:	9302      	str	r3, [sp, #8]
 800b528:	2310      	movs	r3, #16
 800b52a:	9301      	str	r3, [sp, #4]
 800b52c:	4b39      	ldr	r3, [pc, #228]	; (800b614 <Initialize+0x4c0>)
 800b52e:	9300      	str	r3, [sp, #0]
 800b530:	2300      	movs	r3, #0
 800b532:	2208      	movs	r2, #8
 800b534:	4938      	ldr	r1, [pc, #224]	; (800b618 <Initialize+0x4c4>)
 800b536:	483a      	ldr	r0, [pc, #232]	; (800b620 <Initialize+0x4cc>)
 800b538:	f7f5 fe72 	bl	8001220 <BDCInit>
	BDCInit(&BDC7, &htim5, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[0]), Bit2, Bit3); // pick valve
 800b53c:	2308      	movs	r3, #8
 800b53e:	9302      	str	r3, [sp, #8]
 800b540:	2304      	movs	r3, #4
 800b542:	9301      	str	r3, [sp, #4]
 800b544:	4b33      	ldr	r3, [pc, #204]	; (800b614 <Initialize+0x4c0>)
 800b546:	9300      	str	r3, [sp, #0]
 800b548:	2300      	movs	r3, #0
 800b54a:	2204      	movs	r2, #4
 800b54c:	4932      	ldr	r1, [pc, #200]	; (800b618 <Initialize+0x4c4>)
 800b54e:	4835      	ldr	r0, [pc, #212]	; (800b624 <Initialize+0x4d0>)
 800b550:	f7f5 fe66 	bl	8001220 <BDCInit>
	BDCInit(&BDC8, &htim5, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[0]), Bit0, Bit1);
 800b554:	2302      	movs	r3, #2
 800b556:	9302      	str	r3, [sp, #8]
 800b558:	2301      	movs	r3, #1
 800b55a:	9301      	str	r3, [sp, #4]
 800b55c:	4b2d      	ldr	r3, [pc, #180]	; (800b614 <Initialize+0x4c0>)
 800b55e:	9300      	str	r3, [sp, #0]
 800b560:	2300      	movs	r3, #0
 800b562:	2200      	movs	r2, #0
 800b564:	492c      	ldr	r1, [pc, #176]	; (800b618 <Initialize+0x4c4>)
 800b566:	4830      	ldr	r0, [pc, #192]	; (800b628 <Initialize+0x4d4>)
 800b568:	f7f5 fe5a 	bl	8001220 <BDCInit>

	// Servo
	ServoxInit(&yaw_servo, &htim9, IP5_PIN, TIM_CHANNEL_1); // BDC3
 800b56c:	2300      	movs	r3, #0
 800b56e:	9300      	str	r3, [sp, #0]
 800b570:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b574:	4a2d      	ldr	r2, [pc, #180]	; (800b62c <Initialize+0x4d8>)
 800b576:	4924      	ldr	r1, [pc, #144]	; (800b608 <Initialize+0x4b4>)
 800b578:	482d      	ldr	r0, [pc, #180]	; (800b630 <Initialize+0x4dc>)
 800b57a:	f7ff fb41 	bl	800ac00 <ServoxInit>
	ServoInitPulseLimit(&yaw_servo, 500, 2500);
 800b57e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b582:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b586:	482a      	ldr	r0, [pc, #168]	; (800b630 <Initialize+0x4dc>)
 800b588:	f7ff fc99 	bl	800aebe <ServoInitPulseLimit>
//	ServoSetPulse(&yaw_servo, 1500);

	ServoxInit(&pitch, &htim3, IP6_PIN, TIM_CHANNEL_4); // BDC1
 800b58c:	230c      	movs	r3, #12
 800b58e:	9300      	str	r3, [sp, #0]
 800b590:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b594:	4a25      	ldr	r2, [pc, #148]	; (800b62c <Initialize+0x4d8>)
 800b596:	4927      	ldr	r1, [pc, #156]	; (800b634 <Initialize+0x4e0>)
 800b598:	4827      	ldr	r0, [pc, #156]	; (800b638 <Initialize+0x4e4>)
 800b59a:	f7ff fb31 	bl	800ac00 <ServoxInit>
	ServoInitPulseLimit(&pitch, 500, 2500);
 800b59e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b5a2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b5a6:	4824      	ldr	r0, [pc, #144]	; (800b638 <Initialize+0x4e4>)
 800b5a8:	f7ff fc89 	bl	800aebe <ServoInitPulseLimit>
//	ServoSetPulse(&pitch, 1500);

	ServoxInit(&pick, &htim9, IP2_PIN, TIM_CHANNEL_2); // BDC4
 800b5ac:	2304      	movs	r3, #4
 800b5ae:	9300      	str	r3, [sp, #0]
 800b5b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b5b4:	4a21      	ldr	r2, [pc, #132]	; (800b63c <Initialize+0x4e8>)
 800b5b6:	4914      	ldr	r1, [pc, #80]	; (800b608 <Initialize+0x4b4>)
 800b5b8:	4821      	ldr	r0, [pc, #132]	; (800b640 <Initialize+0x4ec>)
 800b5ba:	f7ff fb21 	bl	800ac00 <ServoxInit>
	ServoInitPulseLimit(&pick, 500, 2500);
 800b5be:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b5c2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b5c6:	481e      	ldr	r0, [pc, #120]	; (800b640 <Initialize+0x4ec>)
 800b5c8:	f7ff fc79 	bl	800aebe <ServoInitPulseLimit>
//	ServoSetPulse(&pick, 500);

	ServoxInit(&load, &htim3, IP3_PIN, TIM_CHANNEL_3); // BDC2
 800b5cc:	2308      	movs	r3, #8
 800b5ce:	9300      	str	r3, [sp, #0]
 800b5d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b5d4:	4a19      	ldr	r2, [pc, #100]	; (800b63c <Initialize+0x4e8>)
 800b5d6:	4917      	ldr	r1, [pc, #92]	; (800b634 <Initialize+0x4e0>)
 800b5d8:	481a      	ldr	r0, [pc, #104]	; (800b644 <Initialize+0x4f0>)
 800b5da:	f7ff fb11 	bl	800ac00 <ServoxInit>
	ServoInitPulseLimit(&load, 500, 2500);
 800b5de:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b5e2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b5e6:	4817      	ldr	r0, [pc, #92]	; (800b644 <Initialize+0x4f0>)
 800b5e8:	f7ff fc69 	bl	800aebe <ServoInitPulseLimit>
	//Laser
//	ADC_DMAxInit(&adc,&hadc2,&hdma_adc1,2);
//	ADC_Channel_Config(&adc,ADC_CHANNEL_10,IP16_Analog1_PIN);
//	ADC_Channel_Config(&adc,ADC_CHANNEL_11,IP17_Analog2_PIN);

	SPIx_DMA_TX_Init(&hspi1, &hdma_spi1_tx, SPI1_NSS_PIN, SPI_MODE_MASTER);
 800b5ec:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b5f0:	9300      	str	r3, [sp, #0]
 800b5f2:	2310      	movs	r3, #16
 800b5f4:	4a14      	ldr	r2, [pc, #80]	; (800b648 <Initialize+0x4f4>)
 800b5f6:	4915      	ldr	r1, [pc, #84]	; (800b64c <Initialize+0x4f8>)
 800b5f8:	4815      	ldr	r0, [pc, #84]	; (800b650 <Initialize+0x4fc>)
 800b5fa:	f7ff fd2f 	bl	800b05c <SPIx_DMA_TX_Init>
}
 800b5fe:	bf00      	nop
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}
 800b604:	200094ac 	.word	0x200094ac
 800b608:	20005fa4 	.word	0x20005fa4
 800b60c:	20006c20 	.word	0x20006c20
 800b610:	20009540 	.word	0x20009540
 800b614:	200094a8 	.word	0x200094a8
 800b618:	20005cd8 	.word	0x20005cd8
 800b61c:	2000a228 	.word	0x2000a228
 800b620:	2000959c 	.word	0x2000959c
 800b624:	200095c0 	.word	0x200095c0
 800b628:	20007220 	.word	0x20007220
 800b62c:	40020400 	.word	0x40020400
 800b630:	20007664 	.word	0x20007664
 800b634:	20005d18 	.word	0x20005d18
 800b638:	20009cbc 	.word	0x20009cbc
 800b63c:	40021000 	.word	0x40021000
 800b640:	200099c0 	.word	0x200099c0
 800b644:	2000a188 	.word	0x2000a188
 800b648:	40020000 	.word	0x40020000
 800b64c:	2000a128 	.word	0x2000a128
 800b650:	200099f4 	.word	0x200099f4

0800b654 <CAN1_RX0_IRQHandler>:



void CAN1_RX0_IRQHandler()
{
 800b654:	b580      	push	{r7, lr}
 800b656:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 800b658:	4802      	ldr	r0, [pc, #8]	; (800b664 <CAN1_RX0_IRQHandler+0x10>)
 800b65a:	f003 fd01 	bl	800f060 <HAL_CAN_IRQHandler>

}
 800b65e:	bf00      	nop
 800b660:	bd80      	pop	{r7, pc}
 800b662:	bf00      	nop
 800b664:	20009d44 	.word	0x20009d44

0800b668 <CAN2_RX1_IRQHandler>:

void CAN2_RX1_IRQHandler()
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan2);
 800b66c:	4802      	ldr	r0, [pc, #8]	; (800b678 <CAN2_RX1_IRQHandler+0x10>)
 800b66e:	f003 fcf7 	bl	800f060 <HAL_CAN_IRQHandler>

}
 800b672:	bf00      	nop
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	20008e8c 	.word	0x20008e8c

0800b67c <CAN_PROCESS>:


void CAN_PROCESS(PACKET_t packet_src){
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	4603      	mov	r3, r0
 800b684:	71fb      	strb	r3, [r7, #7]


	switch(packet_src){
 800b686:	79fb      	ldrb	r3, [r7, #7]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d004      	beq.n	800b696 <CAN_PROCESS+0x1a>
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d12f      	bne.n	800b6f0 <CAN_PROCESS+0x74>

	case VESC_PACKET:
		decode_VESC();
 800b690:	f002 f86e 	bl	800d770 <decode_VESC>
		break;
 800b694:	e02c      	b.n	800b6f0 <CAN_PROCESS+0x74>

	case RNS_PACKET:

		if(insData_receive[0] == 1){
 800b696:	4b18      	ldr	r3, [pc, #96]	; (800b6f8 <CAN_PROCESS+0x7c>)
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d107      	bne.n	800b6ae <CAN_PROCESS+0x32>
			rns.RNS_data.common_instruction = insData_receive[1];
 800b69e:	4b16      	ldr	r3, [pc, #88]	; (800b6f8 <CAN_PROCESS+0x7c>)
 800b6a0:	785a      	ldrb	r2, [r3, #1]
 800b6a2:	4b16      	ldr	r3, [pc, #88]	; (800b6fc <CAN_PROCESS+0x80>)
 800b6a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			insData_receive[0]=2;
 800b6a8:	4b13      	ldr	r3, [pc, #76]	; (800b6f8 <CAN_PROCESS+0x7c>)
 800b6aa:	2202      	movs	r2, #2
 800b6ac:	701a      	strb	r2, [r3, #0]
		}
		if(insData_receive[0] == 17){
 800b6ae:	4b12      	ldr	r3, [pc, #72]	; (800b6f8 <CAN_PROCESS+0x7c>)
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	2b11      	cmp	r3, #17
 800b6b4:	d11b      	bne.n	800b6ee <CAN_PROCESS+0x72>
			if(buf2_flag == 1){
 800b6b6:	4b12      	ldr	r3, [pc, #72]	; (800b700 <CAN_PROCESS+0x84>)
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d117      	bne.n	800b6ee <CAN_PROCESS+0x72>
				rns.RNS_data.common_instruction = insData_receive[1];
 800b6be:	4b0e      	ldr	r3, [pc, #56]	; (800b6f8 <CAN_PROCESS+0x7c>)
 800b6c0:	785a      	ldrb	r2, [r3, #1]
 800b6c2:	4b0e      	ldr	r3, [pc, #56]	; (800b6fc <CAN_PROCESS+0x80>)
 800b6c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				rns.RNS_data.common_buffer[0].data = buf1_receive[0].data;
 800b6c8:	4b0e      	ldr	r3, [pc, #56]	; (800b704 <CAN_PROCESS+0x88>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	4a0b      	ldr	r2, [pc, #44]	; (800b6fc <CAN_PROCESS+0x80>)
 800b6ce:	6553      	str	r3, [r2, #84]	; 0x54
				rns.RNS_data.common_buffer[1].data = buf1_receive[1].data;
 800b6d0:	4b0c      	ldr	r3, [pc, #48]	; (800b704 <CAN_PROCESS+0x88>)
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	4a09      	ldr	r2, [pc, #36]	; (800b6fc <CAN_PROCESS+0x80>)
 800b6d6:	6593      	str	r3, [r2, #88]	; 0x58
				rns.RNS_data.common_buffer[2].data = buf2_receive[0].data;
 800b6d8:	4b0b      	ldr	r3, [pc, #44]	; (800b708 <CAN_PROCESS+0x8c>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	4a07      	ldr	r2, [pc, #28]	; (800b6fc <CAN_PROCESS+0x80>)
 800b6de:	65d3      	str	r3, [r2, #92]	; 0x5c
				rns.RNS_data.common_buffer[3].data = buf2_receive[1].data;
 800b6e0:	4b09      	ldr	r3, [pc, #36]	; (800b708 <CAN_PROCESS+0x8c>)
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	4a05      	ldr	r2, [pc, #20]	; (800b6fc <CAN_PROCESS+0x80>)
 800b6e6:	6613      	str	r3, [r2, #96]	; 0x60
				insData_receive[0]=3;
 800b6e8:	4b03      	ldr	r3, [pc, #12]	; (800b6f8 <CAN_PROCESS+0x7c>)
 800b6ea:	2203      	movs	r2, #3
 800b6ec:	701a      	strb	r2, [r3, #0]
			}
		}

		break;
 800b6ee:	bf00      	nop

	}

}
 800b6f0:	bf00      	nop
 800b6f2:	3708      	adds	r7, #8
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	200069e4 	.word	0x200069e4
 800b6fc:	20008d88 	.word	0x20008d88
 800b700:	200002e1 	.word	0x200002e1
 800b704:	200099e4 	.word	0x200099e4
 800b708:	20009b3c 	.word	0x20009b3c

0800b70c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)

{
 800b70c:	b5b0      	push	{r4, r5, r7, lr}
 800b70e:	b086      	sub	sp, #24
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
	uint8_t aData[8];
	PACKET_t source;

	if(hcan == &hcan1){
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	4a80      	ldr	r2, [pc, #512]	; (800b918 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	f040 808f 	bne.w	800b83c <HAL_CAN_RxFifo0MsgPendingCallback+0x130>
//		led2 = !led2;
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN1RxMessage, aData);
 800b71e:	f107 030c 	add.w	r3, r7, #12
 800b722:	4a7e      	ldr	r2, [pc, #504]	; (800b91c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800b724:	2100      	movs	r1, #0
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f003 fb62 	bl	800edf0 <HAL_CAN_GetRxMessage>
		//	sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);

		if(CAN1RxMessage.IDE == CAN_ID_EXT)
 800b72c:	4b7b      	ldr	r3, [pc, #492]	; (800b91c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800b72e:	689b      	ldr	r3, [r3, #8]
 800b730:	2b04      	cmp	r3, #4
 800b732:	d117      	bne.n	800b764 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
		{
			vescmsg.Rxmsg = CAN1RxMessage;
 800b734:	4a7a      	ldr	r2, [pc, #488]	; (800b920 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800b736:	4b79      	ldr	r3, [pc, #484]	; (800b91c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800b738:	4614      	mov	r4, r2
 800b73a:	461d      	mov	r5, r3
 800b73c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b73e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b740:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b744:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800b748:	4b75      	ldr	r3, [pc, #468]	; (800b920 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800b74a:	331c      	adds	r3, #28
 800b74c:	f107 020c 	add.w	r2, r7, #12
 800b750:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b754:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800b758:	4871      	ldr	r0, [pc, #452]	; (800b920 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800b75a:	f002 f929 	bl	800d9b0 <set_rx_frames>
			source = VESC_PACKET;
 800b75e:	2301      	movs	r3, #1
 800b760:	75fb      	strb	r3, [r7, #23]
 800b762:	e062      	b.n	800b82a <HAL_CAN_RxFifo0MsgPendingCallback+0x11e>
		}else{
			source = RNS_PACKET;
 800b764:	2300      	movs	r3, #0
 800b766:	75fb      	strb	r3, [r7, #23]
			switch(CAN1RxMessage.StdId){
 800b768:	4b6c      	ldr	r3, [pc, #432]	; (800b91c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	2b1c      	cmp	r3, #28
 800b76e:	d819      	bhi.n	800b7a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
 800b770:	2b14      	cmp	r3, #20
 800b772:	d359      	bcc.n	800b828 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
 800b774:	3b14      	subs	r3, #20
 800b776:	2b08      	cmp	r3, #8
 800b778:	d856      	bhi.n	800b828 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
 800b77a:	a201      	add	r2, pc, #4	; (adr r2, 800b780 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800b77c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b780:	0800b7ad 	.word	0x0800b7ad
 800b784:	0800b7c5 	.word	0x0800b7c5
 800b788:	0800b7d7 	.word	0x0800b7d7
 800b78c:	0800b829 	.word	0x0800b829
 800b790:	0800b829 	.word	0x0800b829
 800b794:	0800b829 	.word	0x0800b829
 800b798:	0800b829 	.word	0x0800b829
 800b79c:	0800b829 	.word	0x0800b829
 800b7a0:	0800b829 	.word	0x0800b829
 800b7a4:	f5b3 6fea 	cmp.w	r3, #1872	; 0x750
 800b7a8:	d021      	beq.n	800b7ee <HAL_CAN_RxFifo0MsgPendingCallback+0xe2>
					faul_counter = 0;
				}else{
					faul_counter ++;
				}
			default:
				break;
 800b7aa:	e03d      	b.n	800b828 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
				memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 800b7ac:	4b5b      	ldr	r3, [pc, #364]	; (800b91c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800b7ae:	691a      	ldr	r2, [r3, #16]
 800b7b0:	f107 030c 	add.w	r3, r7, #12
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	485b      	ldr	r0, [pc, #364]	; (800b924 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 800b7b8:	f00d fdaa 	bl	8019310 <memcpy>
				buf2_flag = 0;
 800b7bc:	4b5a      	ldr	r3, [pc, #360]	; (800b928 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 800b7be:	2200      	movs	r2, #0
 800b7c0:	701a      	strb	r2, [r3, #0]
				break;
 800b7c2:	e032      	b.n	800b82a <HAL_CAN_RxFifo0MsgPendingCallback+0x11e>
				memcpy(&buf1_receive, &aData, CAN1RxMessage.DLC);
 800b7c4:	4b55      	ldr	r3, [pc, #340]	; (800b91c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800b7c6:	691a      	ldr	r2, [r3, #16]
 800b7c8:	f107 030c 	add.w	r3, r7, #12
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	4857      	ldr	r0, [pc, #348]	; (800b92c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800b7d0:	f00d fd9e 	bl	8019310 <memcpy>
				break;
 800b7d4:	e029      	b.n	800b82a <HAL_CAN_RxFifo0MsgPendingCallback+0x11e>
				memcpy(&buf2_receive, &aData, CAN1RxMessage.DLC);
 800b7d6:	4b51      	ldr	r3, [pc, #324]	; (800b91c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800b7d8:	691a      	ldr	r2, [r3, #16]
 800b7da:	f107 030c 	add.w	r3, r7, #12
 800b7de:	4619      	mov	r1, r3
 800b7e0:	4853      	ldr	r0, [pc, #332]	; (800b930 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 800b7e2:	f00d fd95 	bl	8019310 <memcpy>
				buf2_flag = 1;
 800b7e6:	4b50      	ldr	r3, [pc, #320]	; (800b928 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	701a      	strb	r2, [r3, #0]
				break;
 800b7ec:	e01d      	b.n	800b82a <HAL_CAN_RxFifo0MsgPendingCallback+0x11e>
				if(faul_counter >= 2000){
 800b7ee:	4b51      	ldr	r3, [pc, #324]	; (800b934 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b7f6:	d312      	bcc.n	800b81e <HAL_CAN_RxFifo0MsgPendingCallback+0x112>
					led2 = !led2;
 800b7f8:	4b4f      	ldr	r3, [pc, #316]	; (800b938 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 800b7fa:	785b      	ldrb	r3, [r3, #1]
 800b7fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b800:	b2db      	uxtb	r3, r3
 800b802:	4a4d      	ldr	r2, [pc, #308]	; (800b938 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 800b804:	2b00      	cmp	r3, #0
 800b806:	bf0c      	ite	eq
 800b808:	2301      	moveq	r3, #1
 800b80a:	2300      	movne	r3, #0
 800b80c:	b2d9      	uxtb	r1, r3
 800b80e:	7853      	ldrb	r3, [r2, #1]
 800b810:	f361 1386 	bfi	r3, r1, #6, #1
 800b814:	7053      	strb	r3, [r2, #1]
					faul_counter = 0;
 800b816:	4b47      	ldr	r3, [pc, #284]	; (800b934 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 800b818:	2200      	movs	r2, #0
 800b81a:	601a      	str	r2, [r3, #0]
				break;
 800b81c:	e004      	b.n	800b828 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
					faul_counter ++;
 800b81e:	4b45      	ldr	r3, [pc, #276]	; (800b934 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	3301      	adds	r3, #1
 800b824:	4a43      	ldr	r2, [pc, #268]	; (800b934 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 800b826:	6013      	str	r3, [r2, #0]
				break;
 800b828:	bf00      	nop
			}
		}
		CAN_PROCESS(source);
 800b82a:	7dfb      	ldrb	r3, [r7, #23]
 800b82c:	4618      	mov	r0, r3
 800b82e:	f7ff ff25 	bl	800b67c <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800b832:	2102      	movs	r1, #2
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f003 fbed 	bl	800f014 <HAL_CAN_ActivateNotification>
			}
		}
		CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
	}
}
 800b83a:	e069      	b.n	800b910 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN2RxMessage, aData);
 800b83c:	f107 030c 	add.w	r3, r7, #12
 800b840:	4a3e      	ldr	r2, [pc, #248]	; (800b93c <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800b842:	2100      	movs	r1, #0
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f003 fad3 	bl	800edf0 <HAL_CAN_GetRxMessage>
		if(CAN2RxMessage.IDE == CAN_ID_EXT)
 800b84a:	4b3c      	ldr	r3, [pc, #240]	; (800b93c <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800b84c:	689b      	ldr	r3, [r3, #8]
 800b84e:	2b04      	cmp	r3, #4
 800b850:	d117      	bne.n	800b882 <HAL_CAN_RxFifo0MsgPendingCallback+0x176>
			vescmsg.Rxmsg = CAN2RxMessage;
 800b852:	4a33      	ldr	r2, [pc, #204]	; (800b920 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800b854:	4b39      	ldr	r3, [pc, #228]	; (800b93c <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800b856:	4614      	mov	r4, r2
 800b858:	461d      	mov	r5, r3
 800b85a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b85c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b85e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b862:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800b866:	4b2e      	ldr	r3, [pc, #184]	; (800b920 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800b868:	331c      	adds	r3, #28
 800b86a:	f107 020c 	add.w	r2, r7, #12
 800b86e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b872:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800b876:	482a      	ldr	r0, [pc, #168]	; (800b920 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800b878:	f002 f89a 	bl	800d9b0 <set_rx_frames>
			source = VESC_PACKET;
 800b87c:	2301      	movs	r3, #1
 800b87e:	75fb      	strb	r3, [r7, #23]
 800b880:	e03e      	b.n	800b900 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>
			source = RNS_PACKET;
 800b882:	2300      	movs	r3, #0
 800b884:	75fb      	strb	r3, [r7, #23]
			switch(CAN1RxMessage.StdId){
 800b886:	4b25      	ldr	r3, [pc, #148]	; (800b91c <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	3b14      	subs	r3, #20
 800b88c:	2b08      	cmp	r3, #8
 800b88e:	d836      	bhi.n	800b8fe <HAL_CAN_RxFifo0MsgPendingCallback+0x1f2>
 800b890:	a201      	add	r2, pc, #4	; (adr r2, 800b898 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 800b892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b896:	bf00      	nop
 800b898:	0800b8bd 	.word	0x0800b8bd
 800b89c:	0800b8d5 	.word	0x0800b8d5
 800b8a0:	0800b8e7 	.word	0x0800b8e7
 800b8a4:	0800b8ff 	.word	0x0800b8ff
 800b8a8:	0800b8ff 	.word	0x0800b8ff
 800b8ac:	0800b8ff 	.word	0x0800b8ff
 800b8b0:	0800b8ff 	.word	0x0800b8ff
 800b8b4:	0800b8ff 	.word	0x0800b8ff
 800b8b8:	0800b8ff 	.word	0x0800b8ff
				memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 800b8bc:	4b1f      	ldr	r3, [pc, #124]	; (800b93c <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800b8be:	691a      	ldr	r2, [r3, #16]
 800b8c0:	f107 030c 	add.w	r3, r7, #12
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	4817      	ldr	r0, [pc, #92]	; (800b924 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 800b8c8:	f00d fd22 	bl	8019310 <memcpy>
				buf2_flag = 0;
 800b8cc:	4b16      	ldr	r3, [pc, #88]	; (800b928 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	701a      	strb	r2, [r3, #0]
				break;
 800b8d2:	e015      	b.n	800b900 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>
				memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 800b8d4:	4b19      	ldr	r3, [pc, #100]	; (800b93c <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800b8d6:	691a      	ldr	r2, [r3, #16]
 800b8d8:	f107 030c 	add.w	r3, r7, #12
 800b8dc:	4619      	mov	r1, r3
 800b8de:	4813      	ldr	r0, [pc, #76]	; (800b92c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800b8e0:	f00d fd16 	bl	8019310 <memcpy>
				break;
 800b8e4:	e00c      	b.n	800b900 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>
				memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 800b8e6:	4b15      	ldr	r3, [pc, #84]	; (800b93c <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800b8e8:	691a      	ldr	r2, [r3, #16]
 800b8ea:	f107 030c 	add.w	r3, r7, #12
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	480f      	ldr	r0, [pc, #60]	; (800b930 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 800b8f2:	f00d fd0d 	bl	8019310 <memcpy>
				buf2_flag = 1;
 800b8f6:	4b0c      	ldr	r3, [pc, #48]	; (800b928 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	701a      	strb	r2, [r3, #0]
				break;
 800b8fc:	e000      	b.n	800b900 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>
				break;
 800b8fe:	bf00      	nop
		CAN_PROCESS(source);
 800b900:	7dfb      	ldrb	r3, [r7, #23]
 800b902:	4618      	mov	r0, r3
 800b904:	f7ff feba 	bl	800b67c <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800b908:	2102      	movs	r1, #2
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f003 fb82 	bl	800f014 <HAL_CAN_ActivateNotification>
}
 800b910:	bf00      	nop
 800b912:	3718      	adds	r7, #24
 800b914:	46bd      	mov	sp, r7
 800b916:	bdb0      	pop	{r4, r5, r7, pc}
 800b918:	20009d44 	.word	0x20009d44
 800b91c:	2000a368 	.word	0x2000a368
 800b920:	2000956c 	.word	0x2000956c
 800b924:	200069e4 	.word	0x200069e4
 800b928:	200002e1 	.word	0x200002e1
 800b92c:	200099e4 	.word	0x200099e4
 800b930:	20009b3c 	.word	0x20009b3c
 800b934:	20009638 	.word	0x20009638
 800b938:	40020814 	.word	0x40020814
 800b93c:	20006a80 	.word	0x20006a80

0800b940 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)

{
 800b940:	b5b0      	push	{r4, r5, r7, lr}
 800b942:	b086      	sub	sp, #24
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
	uint8_t aData[8];
	PACKET_t source;

	if(hcan == &hcan1){
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	4a6d      	ldr	r2, [pc, #436]	; (800bb00 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c0>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d16a      	bne.n	800ba26 <HAL_CAN_RxFifo1MsgPendingCallback+0xe6>

		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN1RxMessage, aData);
 800b950:	f107 030c 	add.w	r3, r7, #12
 800b954:	4a6b      	ldr	r2, [pc, #428]	; (800bb04 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800b956:	2101      	movs	r1, #1
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f003 fa49 	bl	800edf0 <HAL_CAN_GetRxMessage>
		//sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);
		if(CAN1RxMessage.IDE == CAN_ID_EXT)
 800b95e:	4b69      	ldr	r3, [pc, #420]	; (800bb04 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800b960:	689b      	ldr	r3, [r3, #8]
 800b962:	2b04      	cmp	r3, #4
 800b964:	d117      	bne.n	800b996 <HAL_CAN_RxFifo1MsgPendingCallback+0x56>
		{
			vescmsg.Rxmsg = CAN1RxMessage;
 800b966:	4a68      	ldr	r2, [pc, #416]	; (800bb08 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800b968:	4b66      	ldr	r3, [pc, #408]	; (800bb04 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800b96a:	4614      	mov	r4, r2
 800b96c:	461d      	mov	r5, r3
 800b96e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b972:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b976:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800b97a:	4b63      	ldr	r3, [pc, #396]	; (800bb08 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800b97c:	331c      	adds	r3, #28
 800b97e:	f107 020c 	add.w	r2, r7, #12
 800b982:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b986:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800b98a:	485f      	ldr	r0, [pc, #380]	; (800bb08 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800b98c:	f002 f810 	bl	800d9b0 <set_rx_frames>
			source = VESC_PACKET;
 800b990:	2301      	movs	r3, #1
 800b992:	75fb      	strb	r3, [r7, #23]
 800b994:	e03e      	b.n	800ba14 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>

		}else{
			source = RNS_PACKET;
 800b996:	2300      	movs	r3, #0
 800b998:	75fb      	strb	r3, [r7, #23]
			switch(CAN2RxMessage.StdId){
 800b99a:	4b5c      	ldr	r3, [pc, #368]	; (800bb0c <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	3b14      	subs	r3, #20
 800b9a0:	2b08      	cmp	r3, #8
 800b9a2:	d836      	bhi.n	800ba12 <HAL_CAN_RxFifo1MsgPendingCallback+0xd2>
 800b9a4:	a201      	add	r2, pc, #4	; (adr r2, 800b9ac <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>)
 800b9a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9aa:	bf00      	nop
 800b9ac:	0800b9d1 	.word	0x0800b9d1
 800b9b0:	0800b9e9 	.word	0x0800b9e9
 800b9b4:	0800b9fb 	.word	0x0800b9fb
 800b9b8:	0800ba13 	.word	0x0800ba13
 800b9bc:	0800ba13 	.word	0x0800ba13
 800b9c0:	0800ba13 	.word	0x0800ba13
 800b9c4:	0800ba13 	.word	0x0800ba13
 800b9c8:	0800ba13 	.word	0x0800ba13
 800b9cc:	0800ba13 	.word	0x0800ba13
			case RNS_TO_mainboard:
				memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 800b9d0:	4b4c      	ldr	r3, [pc, #304]	; (800bb04 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800b9d2:	691a      	ldr	r2, [r3, #16]
 800b9d4:	f107 030c 	add.w	r3, r7, #12
 800b9d8:	4619      	mov	r1, r3
 800b9da:	484d      	ldr	r0, [pc, #308]	; (800bb10 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800b9dc:	f00d fc98 	bl	8019310 <memcpy>
				buf2_flag = 0;
 800b9e0:	4b4c      	ldr	r3, [pc, #304]	; (800bb14 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	701a      	strb	r2, [r3, #0]

				break;
 800b9e6:	e015      	b.n	800ba14 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>
			case RNS_TO_mainboard_buf1:
				memcpy(&buf1_receive, &aData, CAN1RxMessage.DLC);
 800b9e8:	4b46      	ldr	r3, [pc, #280]	; (800bb04 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800b9ea:	691a      	ldr	r2, [r3, #16]
 800b9ec:	f107 030c 	add.w	r3, r7, #12
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	4849      	ldr	r0, [pc, #292]	; (800bb18 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d8>)
 800b9f4:	f00d fc8c 	bl	8019310 <memcpy>

				break;
 800b9f8:	e00c      	b.n	800ba14 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>
			case RNS_TO_mainboard_buf2:
				memcpy(&buf2_receive, &aData, CAN1RxMessage.DLC);
 800b9fa:	4b42      	ldr	r3, [pc, #264]	; (800bb04 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800b9fc:	691a      	ldr	r2, [r3, #16]
 800b9fe:	f107 030c 	add.w	r3, r7, #12
 800ba02:	4619      	mov	r1, r3
 800ba04:	4845      	ldr	r0, [pc, #276]	; (800bb1c <HAL_CAN_RxFifo1MsgPendingCallback+0x1dc>)
 800ba06:	f00d fc83 	bl	8019310 <memcpy>
				buf2_flag = 1;
 800ba0a:	4b42      	ldr	r3, [pc, #264]	; (800bb14 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	701a      	strb	r2, [r3, #0]
				break;
 800ba10:	e000      	b.n	800ba14 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>
			case XY_feedback_state :
				break;
			default:
				break;
 800ba12:	bf00      	nop
			}
		}
		CAN_PROCESS(source);
 800ba14:	7dfb      	ldrb	r3, [r7, #23]
 800ba16:	4618      	mov	r0, r3
 800ba18:	f7ff fe30 	bl	800b67c <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800ba1c:	2102      	movs	r1, #2
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f003 faf8 	bl	800f014 <HAL_CAN_ActivateNotification>
		}
		CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
	}

}
 800ba24:	e068      	b.n	800baf8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1b8>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN2RxMessage, aData);
 800ba26:	f107 030c 	add.w	r3, r7, #12
 800ba2a:	4a38      	ldr	r2, [pc, #224]	; (800bb0c <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800ba2c:	2101      	movs	r1, #1
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f003 f9de 	bl	800edf0 <HAL_CAN_GetRxMessage>
		if(CAN2RxMessage.IDE == CAN_ID_EXT)
 800ba34:	4b35      	ldr	r3, [pc, #212]	; (800bb0c <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800ba36:	689b      	ldr	r3, [r3, #8]
 800ba38:	2b04      	cmp	r3, #4
 800ba3a:	d117      	bne.n	800ba6c <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>
			vescmsg.Rxmsg = CAN2RxMessage;
 800ba3c:	4a32      	ldr	r2, [pc, #200]	; (800bb08 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800ba3e:	4b33      	ldr	r3, [pc, #204]	; (800bb0c <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800ba40:	4614      	mov	r4, r2
 800ba42:	461d      	mov	r5, r3
 800ba44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ba4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800ba50:	4b2d      	ldr	r3, [pc, #180]	; (800bb08 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800ba52:	331c      	adds	r3, #28
 800ba54:	f107 020c 	add.w	r2, r7, #12
 800ba58:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ba5c:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800ba60:	4829      	ldr	r0, [pc, #164]	; (800bb08 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800ba62:	f001 ffa5 	bl	800d9b0 <set_rx_frames>
			source = VESC_PACKET;
 800ba66:	2301      	movs	r3, #1
 800ba68:	75fb      	strb	r3, [r7, #23]
 800ba6a:	e03d      	b.n	800bae8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>
			source = RNS_PACKET;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	75fb      	strb	r3, [r7, #23]
			switch(CAN2RxMessage.StdId){
 800ba70:	4b26      	ldr	r3, [pc, #152]	; (800bb0c <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	3b14      	subs	r3, #20
 800ba76:	2b08      	cmp	r3, #8
 800ba78:	d835      	bhi.n	800bae6 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a6>
 800ba7a:	a201      	add	r2, pc, #4	; (adr r2, 800ba80 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 800ba7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba80:	0800baa5 	.word	0x0800baa5
 800ba84:	0800babd 	.word	0x0800babd
 800ba88:	0800bacf 	.word	0x0800bacf
 800ba8c:	0800bae7 	.word	0x0800bae7
 800ba90:	0800bae7 	.word	0x0800bae7
 800ba94:	0800bae7 	.word	0x0800bae7
 800ba98:	0800bae7 	.word	0x0800bae7
 800ba9c:	0800bae7 	.word	0x0800bae7
 800baa0:	0800bae7 	.word	0x0800bae7
				memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 800baa4:	4b19      	ldr	r3, [pc, #100]	; (800bb0c <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800baa6:	691a      	ldr	r2, [r3, #16]
 800baa8:	f107 030c 	add.w	r3, r7, #12
 800baac:	4619      	mov	r1, r3
 800baae:	4818      	ldr	r0, [pc, #96]	; (800bb10 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800bab0:	f00d fc2e 	bl	8019310 <memcpy>
				buf2_flag = 0;
 800bab4:	4b17      	ldr	r3, [pc, #92]	; (800bb14 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 800bab6:	2200      	movs	r2, #0
 800bab8:	701a      	strb	r2, [r3, #0]
				break;
 800baba:	e015      	b.n	800bae8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>
				memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 800babc:	4b13      	ldr	r3, [pc, #76]	; (800bb0c <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800babe:	691a      	ldr	r2, [r3, #16]
 800bac0:	f107 030c 	add.w	r3, r7, #12
 800bac4:	4619      	mov	r1, r3
 800bac6:	4814      	ldr	r0, [pc, #80]	; (800bb18 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d8>)
 800bac8:	f00d fc22 	bl	8019310 <memcpy>
				break;
 800bacc:	e00c      	b.n	800bae8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>
				memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 800bace:	4b0f      	ldr	r3, [pc, #60]	; (800bb0c <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800bad0:	691a      	ldr	r2, [r3, #16]
 800bad2:	f107 030c 	add.w	r3, r7, #12
 800bad6:	4619      	mov	r1, r3
 800bad8:	4810      	ldr	r0, [pc, #64]	; (800bb1c <HAL_CAN_RxFifo1MsgPendingCallback+0x1dc>)
 800bada:	f00d fc19 	bl	8019310 <memcpy>
				buf2_flag = 1;
 800bade:	4b0d      	ldr	r3, [pc, #52]	; (800bb14 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 800bae0:	2201      	movs	r2, #1
 800bae2:	701a      	strb	r2, [r3, #0]
				break;
 800bae4:	e000      	b.n	800bae8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>
				break;
 800bae6:	bf00      	nop
		CAN_PROCESS(source);
 800bae8:	7dfb      	ldrb	r3, [r7, #23]
 800baea:	4618      	mov	r0, r3
 800baec:	f7ff fdc6 	bl	800b67c <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800baf0:	2110      	movs	r1, #16
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f003 fa8e 	bl	800f014 <HAL_CAN_ActivateNotification>
}
 800baf8:	bf00      	nop
 800bafa:	3718      	adds	r7, #24
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bdb0      	pop	{r4, r5, r7, pc}
 800bb00:	20009d44 	.word	0x20009d44
 800bb04:	2000a368 	.word	0x2000a368
 800bb08:	2000956c 	.word	0x2000956c
 800bb0c:	20006a80 	.word	0x20006a80
 800bb10:	200069e4 	.word	0x200069e4
 800bb14:	200002e1 	.word	0x200002e1
 800bb18:	200099e4 	.word	0x200099e4
 800bb1c:	20009b3c 	.word	0x20009b3c

0800bb20 <set>:
 * 4 servo used, 2 for ring picking, 2 to control shooting angle
 * 6 VESC used, 4 for navigation, 2 for flywheel
 * 3 cylinder used to push ring out
 */

void set(void) {
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b082      	sub	sp, #8
 800bb24:	af02      	add	r7, sp, #8

	Initialize();
 800bb26:	f7ff fb15 	bl	800b154 <Initialize>
//	ROS_Navi_Init(&huart4, &huart5);
//	ROS_Init(&huart4);
//	ROS_Read_Flash();
//	PSxInitDMA(&ps4,&hi2c1);
	LidarInit(&huart2, DISCONTINUOUS, 0.0, 0.0, 0.0, 0.0, &lidar);
 800bb2a:	4abf      	ldr	r2, [pc, #764]	; (800be28 <set+0x308>)
 800bb2c:	eddf 1abf 	vldr	s3, [pc, #764]	; 800be2c <set+0x30c>
 800bb30:	ed9f 1abe 	vldr	s2, [pc, #760]	; 800be2c <set+0x30c>
 800bb34:	eddf 0abd 	vldr	s1, [pc, #756]	; 800be2c <set+0x30c>
 800bb38:	ed9f 0abc 	vldr	s0, [pc, #752]	; 800be2c <set+0x30c>
 800bb3c:	2101      	movs	r1, #1
 800bb3e:	48bc      	ldr	r0, [pc, #752]	; (800be30 <set+0x310>)
 800bb40:	f002 fb27 	bl	800e192 <LidarInit>
	TIMxInit(&htim6, 5000, 84); // 5ms
 800bb44:	2254      	movs	r2, #84	; 0x54
 800bb46:	f241 3188 	movw	r1, #5000	; 0x1388
 800bb4a:	48ba      	ldr	r0, [pc, #744]	; (800be34 <set+0x314>)
 800bb4c:	f7f7 fbe6 	bl	800331c <TIMxInit>
//	tuneRegister(2, &huart2);
//	tuneRead();
//	RNS_config(&hcan1);
	MODNInit(MODN_FWD_OMNI, BRUSHLESS, 2.0 , 0.5, 5.0, 0.1);
 800bb50:	eddf 1ab9 	vldr	s3, [pc, #740]	; 800be38 <set+0x318>
 800bb54:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 800bb58:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800bb5c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800bb60:	2100      	movs	r1, #0
 800bb62:	2000      	movs	r0, #0
 800bb64:	f7f9 f8f8 	bl	8004d58 <MODNInit>
//	setOrientationMODN(OPERATOR_TURNED_90_DEGREES_ANTICLOCKWISE);
	VESCNavInit(35000, MCCONF_SI_MOTOR_POLES / 2, 0.05 / 4000.0 * 3.142, 0.05 / 4000.0 * 3.142, 0.1, 111, 112, 113, 114);
 800bb68:	2372      	movs	r3, #114	; 0x72
 800bb6a:	2271      	movs	r2, #113	; 0x71
 800bb6c:	2170      	movs	r1, #112	; 0x70
 800bb6e:	206f      	movs	r0, #111	; 0x6f
 800bb70:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 800be38 <set+0x318>
 800bb74:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800be3c <set+0x31c>
 800bb78:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800be3c <set+0x31c>
 800bb7c:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 800bb80:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 800be40 <set+0x320>
 800bb84:	f001 ff4a 	bl	800da1c <VESCNavInit>
	VESCInit(35000, MCCONF_SI_MOTOR_POLES / 2, 0.127, 115, &flywheel1);
 800bb88:	49ae      	ldr	r1, [pc, #696]	; (800be44 <set+0x324>)
 800bb8a:	2073      	movs	r0, #115	; 0x73
 800bb8c:	ed9f 1aae 	vldr	s2, [pc, #696]	; 800be48 <set+0x328>
 800bb90:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 800bb94:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 800be40 <set+0x320>
 800bb98:	f002 fa64 	bl	800e064 <VESCInit>
	VESCInit(35000, MCCONF_SI_MOTOR_POLES / 2, 0.127, 116, &flywheel2);
 800bb9c:	49ab      	ldr	r1, [pc, #684]	; (800be4c <set+0x32c>)
 800bb9e:	2074      	movs	r0, #116	; 0x74
 800bba0:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800be48 <set+0x328>
 800bba4:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 800bba8:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 800be40 <set+0x320>
 800bbac:	f002 fa5a 	bl	800e064 <VESCInit>

	//ROBOCONPID
	/* Left velocity PID*/
	PIDSourceInit(&fFLeftVelErr, &fFLeftVelU, &fleft_vel);
 800bbb0:	4aa7      	ldr	r2, [pc, #668]	; (800be50 <set+0x330>)
 800bbb2:	49a8      	ldr	r1, [pc, #672]	; (800be54 <set+0x334>)
 800bbb4:	48a8      	ldr	r0, [pc, #672]	; (800be58 <set+0x338>)
 800bbb6:	f7f9 fe7d 	bl	80058b4 <PIDSourceInit>
	PIDDelayInit(&fleft_vel);
 800bbba:	48a5      	ldr	r0, [pc, #660]	; (800be50 <set+0x330>)
 800bbbc:	f7fa f811 	bl	8005be2 <PIDDelayInit>
	PIDGainInit(SAMPLE_TIME, fFLeftVG[0], fFLeftVG[1], fFLeftVG[2], fFLeftVG[3], fFLeftVG[4], fFLeftVG[5], fFLeftVG[6], &fleft_vel);
 800bbc0:	4ba6      	ldr	r3, [pc, #664]	; (800be5c <set+0x33c>)
 800bbc2:	edd3 7a00 	vldr	s15, [r3]
 800bbc6:	4ba5      	ldr	r3, [pc, #660]	; (800be5c <set+0x33c>)
 800bbc8:	ed93 7a01 	vldr	s14, [r3, #4]
 800bbcc:	4ba3      	ldr	r3, [pc, #652]	; (800be5c <set+0x33c>)
 800bbce:	edd3 6a02 	vldr	s13, [r3, #8]
 800bbd2:	4ba2      	ldr	r3, [pc, #648]	; (800be5c <set+0x33c>)
 800bbd4:	ed93 6a03 	vldr	s12, [r3, #12]
 800bbd8:	4ba0      	ldr	r3, [pc, #640]	; (800be5c <set+0x33c>)
 800bbda:	edd3 5a04 	vldr	s11, [r3, #16]
 800bbde:	4b9f      	ldr	r3, [pc, #636]	; (800be5c <set+0x33c>)
 800bbe0:	ed93 5a05 	vldr	s10, [r3, #20]
 800bbe4:	4b9d      	ldr	r3, [pc, #628]	; (800be5c <set+0x33c>)
 800bbe6:	edd3 4a06 	vldr	s9, [r3, #24]
 800bbea:	4899      	ldr	r0, [pc, #612]	; (800be50 <set+0x330>)
 800bbec:	eef0 3a64 	vmov.f32	s7, s9
 800bbf0:	eeb0 3a45 	vmov.f32	s6, s10
 800bbf4:	eef0 2a65 	vmov.f32	s5, s11
 800bbf8:	eeb0 2a46 	vmov.f32	s4, s12
 800bbfc:	eef0 1a66 	vmov.f32	s3, s13
 800bc00:	eeb0 1a47 	vmov.f32	s2, s14
 800bc04:	eef0 0a67 	vmov.f32	s1, s15
 800bc08:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800be60 <set+0x340>
 800bc0c:	f7f9 fe64 	bl	80058d8 <PIDGainInit>

	PIDSourceInit(&fBLeftVelErr, &fBLeftVelU, &bleft_vel);
 800bc10:	4a94      	ldr	r2, [pc, #592]	; (800be64 <set+0x344>)
 800bc12:	4995      	ldr	r1, [pc, #596]	; (800be68 <set+0x348>)
 800bc14:	4895      	ldr	r0, [pc, #596]	; (800be6c <set+0x34c>)
 800bc16:	f7f9 fe4d 	bl	80058b4 <PIDSourceInit>
	PIDDelayInit(&bleft_vel);
 800bc1a:	4892      	ldr	r0, [pc, #584]	; (800be64 <set+0x344>)
 800bc1c:	f7f9 ffe1 	bl	8005be2 <PIDDelayInit>
	PIDGainInit(SAMPLE_TIME, fBLeftVG[0], fBLeftVG[1], fBLeftVG[2], fBLeftVG[3], fBLeftVG[4], fBLeftVG[5], fBLeftVG[6], &bleft_vel);
 800bc20:	4b93      	ldr	r3, [pc, #588]	; (800be70 <set+0x350>)
 800bc22:	edd3 7a00 	vldr	s15, [r3]
 800bc26:	4b92      	ldr	r3, [pc, #584]	; (800be70 <set+0x350>)
 800bc28:	ed93 7a01 	vldr	s14, [r3, #4]
 800bc2c:	4b90      	ldr	r3, [pc, #576]	; (800be70 <set+0x350>)
 800bc2e:	edd3 6a02 	vldr	s13, [r3, #8]
 800bc32:	4b8f      	ldr	r3, [pc, #572]	; (800be70 <set+0x350>)
 800bc34:	ed93 6a03 	vldr	s12, [r3, #12]
 800bc38:	4b8d      	ldr	r3, [pc, #564]	; (800be70 <set+0x350>)
 800bc3a:	edd3 5a04 	vldr	s11, [r3, #16]
 800bc3e:	4b8c      	ldr	r3, [pc, #560]	; (800be70 <set+0x350>)
 800bc40:	ed93 5a05 	vldr	s10, [r3, #20]
 800bc44:	4b8a      	ldr	r3, [pc, #552]	; (800be70 <set+0x350>)
 800bc46:	edd3 4a06 	vldr	s9, [r3, #24]
 800bc4a:	4886      	ldr	r0, [pc, #536]	; (800be64 <set+0x344>)
 800bc4c:	eef0 3a64 	vmov.f32	s7, s9
 800bc50:	eeb0 3a45 	vmov.f32	s6, s10
 800bc54:	eef0 2a65 	vmov.f32	s5, s11
 800bc58:	eeb0 2a46 	vmov.f32	s4, s12
 800bc5c:	eef0 1a66 	vmov.f32	s3, s13
 800bc60:	eeb0 1a47 	vmov.f32	s2, s14
 800bc64:	eef0 0a67 	vmov.f32	s1, s15
 800bc68:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800be60 <set+0x340>
 800bc6c:	f7f9 fe34 	bl	80058d8 <PIDGainInit>

	/* Right velocity PID*/
	PIDSourceInit(&fFRightVelErr, &fFRightVelU, &fright_vel);
 800bc70:	4a80      	ldr	r2, [pc, #512]	; (800be74 <set+0x354>)
 800bc72:	4981      	ldr	r1, [pc, #516]	; (800be78 <set+0x358>)
 800bc74:	4881      	ldr	r0, [pc, #516]	; (800be7c <set+0x35c>)
 800bc76:	f7f9 fe1d 	bl	80058b4 <PIDSourceInit>
	PIDDelayInit(&fright_vel);
 800bc7a:	487e      	ldr	r0, [pc, #504]	; (800be74 <set+0x354>)
 800bc7c:	f7f9 ffb1 	bl	8005be2 <PIDDelayInit>
	PIDGainInit(SAMPLE_TIME, fFRightVG[0], fFRightVG[1], fFRightVG[2], fFRightVG[3], fFRightVG[4], fFRightVG[5], fFRightVG[6], &fright_vel);
 800bc80:	4b7f      	ldr	r3, [pc, #508]	; (800be80 <set+0x360>)
 800bc82:	edd3 7a00 	vldr	s15, [r3]
 800bc86:	4b7e      	ldr	r3, [pc, #504]	; (800be80 <set+0x360>)
 800bc88:	ed93 7a01 	vldr	s14, [r3, #4]
 800bc8c:	4b7c      	ldr	r3, [pc, #496]	; (800be80 <set+0x360>)
 800bc8e:	edd3 6a02 	vldr	s13, [r3, #8]
 800bc92:	4b7b      	ldr	r3, [pc, #492]	; (800be80 <set+0x360>)
 800bc94:	ed93 6a03 	vldr	s12, [r3, #12]
 800bc98:	4b79      	ldr	r3, [pc, #484]	; (800be80 <set+0x360>)
 800bc9a:	edd3 5a04 	vldr	s11, [r3, #16]
 800bc9e:	4b78      	ldr	r3, [pc, #480]	; (800be80 <set+0x360>)
 800bca0:	ed93 5a05 	vldr	s10, [r3, #20]
 800bca4:	4b76      	ldr	r3, [pc, #472]	; (800be80 <set+0x360>)
 800bca6:	edd3 4a06 	vldr	s9, [r3, #24]
 800bcaa:	4872      	ldr	r0, [pc, #456]	; (800be74 <set+0x354>)
 800bcac:	eef0 3a64 	vmov.f32	s7, s9
 800bcb0:	eeb0 3a45 	vmov.f32	s6, s10
 800bcb4:	eef0 2a65 	vmov.f32	s5, s11
 800bcb8:	eeb0 2a46 	vmov.f32	s4, s12
 800bcbc:	eef0 1a66 	vmov.f32	s3, s13
 800bcc0:	eeb0 1a47 	vmov.f32	s2, s14
 800bcc4:	eef0 0a67 	vmov.f32	s1, s15
 800bcc8:	ed9f 0a65 	vldr	s0, [pc, #404]	; 800be60 <set+0x340>
 800bccc:	f7f9 fe04 	bl	80058d8 <PIDGainInit>

	PIDSourceInit(&fBRightVelErr, &fBRightVelU, &bright_vel);
 800bcd0:	4a6c      	ldr	r2, [pc, #432]	; (800be84 <set+0x364>)
 800bcd2:	496d      	ldr	r1, [pc, #436]	; (800be88 <set+0x368>)
 800bcd4:	486d      	ldr	r0, [pc, #436]	; (800be8c <set+0x36c>)
 800bcd6:	f7f9 fded 	bl	80058b4 <PIDSourceInit>
	PIDDelayInit(&bright_vel);
 800bcda:	486a      	ldr	r0, [pc, #424]	; (800be84 <set+0x364>)
 800bcdc:	f7f9 ff81 	bl	8005be2 <PIDDelayInit>
	PIDGainInit(SAMPLE_TIME, fBRightVG[0], fBRightVG[1], fBRightVG[2], fBRightVG[3], fBRightVG[4], fBRightVG[5], fBRightVG[6], &bright_vel);
 800bce0:	4b6b      	ldr	r3, [pc, #428]	; (800be90 <set+0x370>)
 800bce2:	edd3 7a00 	vldr	s15, [r3]
 800bce6:	4b6a      	ldr	r3, [pc, #424]	; (800be90 <set+0x370>)
 800bce8:	ed93 7a01 	vldr	s14, [r3, #4]
 800bcec:	4b68      	ldr	r3, [pc, #416]	; (800be90 <set+0x370>)
 800bcee:	edd3 6a02 	vldr	s13, [r3, #8]
 800bcf2:	4b67      	ldr	r3, [pc, #412]	; (800be90 <set+0x370>)
 800bcf4:	ed93 6a03 	vldr	s12, [r3, #12]
 800bcf8:	4b65      	ldr	r3, [pc, #404]	; (800be90 <set+0x370>)
 800bcfa:	edd3 5a04 	vldr	s11, [r3, #16]
 800bcfe:	4b64      	ldr	r3, [pc, #400]	; (800be90 <set+0x370>)
 800bd00:	ed93 5a05 	vldr	s10, [r3, #20]
 800bd04:	4b62      	ldr	r3, [pc, #392]	; (800be90 <set+0x370>)
 800bd06:	edd3 4a06 	vldr	s9, [r3, #24]
 800bd0a:	485e      	ldr	r0, [pc, #376]	; (800be84 <set+0x364>)
 800bd0c:	eef0 3a64 	vmov.f32	s7, s9
 800bd10:	eeb0 3a45 	vmov.f32	s6, s10
 800bd14:	eef0 2a65 	vmov.f32	s5, s11
 800bd18:	eeb0 2a46 	vmov.f32	s4, s12
 800bd1c:	eef0 1a66 	vmov.f32	s3, s13
 800bd20:	eeb0 1a47 	vmov.f32	s2, s14
 800bd24:	eef0 0a67 	vmov.f32	s1, s15
 800bd28:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800be60 <set+0x340>
 800bd2c:	f7f9 fdd4 	bl	80058d8 <PIDGainInit>
//	PIDSourceInit(&MODN.angleErr,&MODN.imuFeedback,&IMU_PID);
//	PIDGainInit(SAMPLE_TIME, 1.0 , 1/180.0, 1.0, 10.0, 16.0, 0.05, 60.0, &IMU_PID);
//	PIDDelayInit(&IMU_PID);

	/* X & Y position ABT */
	ABTInit(SAMPLE_TIME, fXPosGain[0], fXPosGain[1], fXPosGain[2], &fXEncData ,&fXPos, &fXVel, &fXAcc, &x_data);
 800bd30:	4b58      	ldr	r3, [pc, #352]	; (800be94 <set+0x374>)
 800bd32:	edd3 7a00 	vldr	s15, [r3]
 800bd36:	4b57      	ldr	r3, [pc, #348]	; (800be94 <set+0x374>)
 800bd38:	ed93 7a01 	vldr	s14, [r3, #4]
 800bd3c:	4b55      	ldr	r3, [pc, #340]	; (800be94 <set+0x374>)
 800bd3e:	edd3 6a02 	vldr	s13, [r3, #8]
 800bd42:	4b55      	ldr	r3, [pc, #340]	; (800be98 <set+0x378>)
 800bd44:	9300      	str	r3, [sp, #0]
 800bd46:	4b55      	ldr	r3, [pc, #340]	; (800be9c <set+0x37c>)
 800bd48:	4a55      	ldr	r2, [pc, #340]	; (800bea0 <set+0x380>)
 800bd4a:	4956      	ldr	r1, [pc, #344]	; (800bea4 <set+0x384>)
 800bd4c:	4856      	ldr	r0, [pc, #344]	; (800bea8 <set+0x388>)
 800bd4e:	eef0 1a66 	vmov.f32	s3, s13
 800bd52:	eeb0 1a47 	vmov.f32	s2, s14
 800bd56:	eef0 0a67 	vmov.f32	s1, s15
 800bd5a:	ed9f 0a41 	vldr	s0, [pc, #260]	; 800be60 <set+0x340>
 800bd5e:	f7f5 f945 	bl	8000fec <ABTInit>
	ABTEstimateInit(&x_data);
 800bd62:	484d      	ldr	r0, [pc, #308]	; (800be98 <set+0x378>)
 800bd64:	f7f5 f96f 	bl	8001046 <ABTEstimateInit>

	ABTInit(SAMPLE_TIME, fYPosGain[0], fYPosGain[1], fYPosGain[2], &fYEncData, &fYPos, &fYVel, &fYAcc, &y_data);
 800bd68:	4b50      	ldr	r3, [pc, #320]	; (800beac <set+0x38c>)
 800bd6a:	edd3 7a00 	vldr	s15, [r3]
 800bd6e:	4b4f      	ldr	r3, [pc, #316]	; (800beac <set+0x38c>)
 800bd70:	ed93 7a01 	vldr	s14, [r3, #4]
 800bd74:	4b4d      	ldr	r3, [pc, #308]	; (800beac <set+0x38c>)
 800bd76:	edd3 6a02 	vldr	s13, [r3, #8]
 800bd7a:	4b4d      	ldr	r3, [pc, #308]	; (800beb0 <set+0x390>)
 800bd7c:	9300      	str	r3, [sp, #0]
 800bd7e:	4b4d      	ldr	r3, [pc, #308]	; (800beb4 <set+0x394>)
 800bd80:	4a4d      	ldr	r2, [pc, #308]	; (800beb8 <set+0x398>)
 800bd82:	494e      	ldr	r1, [pc, #312]	; (800bebc <set+0x39c>)
 800bd84:	484e      	ldr	r0, [pc, #312]	; (800bec0 <set+0x3a0>)
 800bd86:	eef0 1a66 	vmov.f32	s3, s13
 800bd8a:	eeb0 1a47 	vmov.f32	s2, s14
 800bd8e:	eef0 0a67 	vmov.f32	s1, s15
 800bd92:	ed9f 0a33 	vldr	s0, [pc, #204]	; 800be60 <set+0x340>
 800bd96:	f7f5 f929 	bl	8000fec <ABTInit>
	ABTEstimateInit(&y_data);
 800bd9a:	4845      	ldr	r0, [pc, #276]	; (800beb0 <set+0x390>)
 800bd9c:	f7f5 f953 	bl	8001046 <ABTEstimateInit>

	// X, Y Encoder
	QEIInit(&htim1);
 800bda0:	4848      	ldr	r0, [pc, #288]	; (800bec4 <set+0x3a4>)
 800bda2:	f7f5 fe33 	bl	8001a0c <QEIInit>
	QEIInit(&htim4);
 800bda6:	4848      	ldr	r0, [pc, #288]	; (800bec8 <set+0x3a8>)
 800bda8:	f7f5 fe30 	bl	8001a0c <QEIInit>
	QEISwap(QEI4, QEI_Swap);
 800bdac:	2101      	movs	r1, #1
 800bdae:	2004      	movs	r0, #4
 800bdb0:	f7f5 ff92 	bl	8001cd8 <QEISwap>

	QEIWrite(QEI1, 500);
 800bdb4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800bdb8:	2001      	movs	r0, #1
 800bdba:	f7f5 ff25 	bl	8001c08 <QEIWrite>
	QEIWrite(QEI4, 500);
 800bdbe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800bdc2:	2004      	movs	r0, #4
 800bdc4:	f7f5 ff20 	bl	8001c08 <QEIWrite>

	PPInit(0, &fXPos, &fYPos, &fyaw, &pp);
 800bdc8:	4b40      	ldr	r3, [pc, #256]	; (800becc <set+0x3ac>)
 800bdca:	9300      	str	r3, [sp, #0]
 800bdcc:	4b40      	ldr	r3, [pc, #256]	; (800bed0 <set+0x3b0>)
 800bdce:	4a3b      	ldr	r2, [pc, #236]	; (800bebc <set+0x39c>)
 800bdd0:	4934      	ldr	r1, [pc, #208]	; (800bea4 <set+0x384>)
 800bdd2:	2000      	movs	r0, #0
 800bdd4:	f7fa f804 	bl	8005de0 <PPInit>
	PP_PIDPathSet(1.0, 0.5, 0.5, &pp);
 800bdd8:	483c      	ldr	r0, [pc, #240]	; (800becc <set+0x3ac>)
 800bdda:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800bdde:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800bde2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bde6:	f7fa f8cd 	bl	8005f84 <PP_PIDPathSet>
	PP_PIDEndSet(0.5, 0.1, 0.7, &pp);
 800bdea:	4838      	ldr	r0, [pc, #224]	; (800becc <set+0x3ac>)
 800bdec:	ed9f 1a39 	vldr	s2, [pc, #228]	; 800bed4 <set+0x3b4>
 800bdf0:	eddf 0a11 	vldr	s1, [pc, #68]	; 800be38 <set+0x318>
 800bdf4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800bdf8:	f7fa f94d 	bl	8006096 <PP_PIDEndSet>
	PP_PIDZSet(0.5, 0.05, 0.2, 3.5, &pp); // ku = 5.5
 800bdfc:	4833      	ldr	r0, [pc, #204]	; (800becc <set+0x3ac>)
 800bdfe:	eef0 1a0c 	vmov.f32	s3, #12	; 0x40600000  3.5
 800be02:	ed9f 1a35 	vldr	s2, [pc, #212]	; 800bed8 <set+0x3b8>
 800be06:	eddf 0a35 	vldr	s1, [pc, #212]	; 800bedc <set+0x3bc>
 800be0a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800be0e:	f7fa f909 	bl	8006024 <PP_PIDZSet>
	PP_SetCrv_Points(10, &pp);
 800be12:	492e      	ldr	r1, [pc, #184]	; (800becc <set+0x3ac>)
 800be14:	200a      	movs	r0, #10
 800be16:	f7fa f95a 	bl	80060ce <PP_SetCrv_Points>

	R6091U_Init(&imu, &huart5);
 800be1a:	4931      	ldr	r1, [pc, #196]	; (800bee0 <set+0x3c0>)
 800be1c:	4831      	ldr	r0, [pc, #196]	; (800bee4 <set+0x3c4>)
 800be1e:	f7fd fb8d 	bl	800953c <R6091U_Init>
}
 800be22:	bf00      	nop
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}
 800be28:	20008eb8 	.word	0x20008eb8
 800be2c:	00000000 	.word	0x00000000
 800be30:	200060a8 	.word	0x200060a8
 800be34:	20005f24 	.word	0x20005f24
 800be38:	3dcccccd 	.word	0x3dcccccd
 800be3c:	3824bb36 	.word	0x3824bb36
 800be40:	4708b800 	.word	0x4708b800
 800be44:	20006a9c 	.word	0x20006a9c
 800be48:	3e020c4a 	.word	0x3e020c4a
 800be4c:	200073c8 	.word	0x200073c8
 800be50:	2000772c 	.word	0x2000772c
 800be54:	20007728 	.word	0x20007728
 800be58:	20007700 	.word	0x20007700
 800be5c:	20000008 	.word	0x20000008
 800be60:	3ca3d70a 	.word	0x3ca3d70a
 800be64:	20006990 	.word	0x20006990
 800be68:	20006a7c 	.word	0x20006a7c
 800be6c:	20009b44 	.word	0x20009b44
 800be70:	20000040 	.word	0x20000040
 800be74:	20007274 	.word	0x20007274
 800be78:	20006814 	.word	0x20006814
 800be7c:	200090a0 	.word	0x200090a0
 800be80:	20000024 	.word	0x20000024
 800be84:	20009b4c 	.word	0x20009b4c
 800be88:	20006500 	.word	0x20006500
 800be8c:	20006810 	.word	0x20006810
 800be90:	2000005c 	.word	0x2000005c
 800be94:	20000078 	.word	0x20000078
 800be98:	2000a100 	.word	0x2000a100
 800be9c:	200065c8 	.word	0x200065c8
 800bea0:	200096b4 	.word	0x200096b4
 800bea4:	20009768 	.word	0x20009768
 800bea8:	20006884 	.word	0x20006884
 800beac:	20000084 	.word	0x20000084
 800beb0:	20007704 	.word	0x20007704
 800beb4:	2000718c 	.word	0x2000718c
 800beb8:	20006bbc 	.word	0x20006bbc
 800bebc:	200096a8 	.word	0x200096a8
 800bec0:	2000a124 	.word	0x2000a124
 800bec4:	20005f64 	.word	0x20005f64
 800bec8:	20005b54 	.word	0x20005b54
 800becc:	20006c44 	.word	0x20006c44
 800bed0:	20009730 	.word	0x20009730
 800bed4:	3f333333 	.word	0x3f333333
 800bed8:	3e4ccccd 	.word	0x3e4ccccd
 800bedc:	3d4ccccd 	.word	0x3d4ccccd
 800bee0:	20005d5c 	.word	0x20005d5c
 800bee4:	20006a08 	.word	0x20006a08

0800bee8 <CalcPoleDist>:

void CalcPoleDist(ENCPole_t* pole)
{
 800bee8:	b5b0      	push	{r4, r5, r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 6; i++)
 800bef0:	2300      	movs	r3, #0
 800bef2:	60fb      	str	r3, [r7, #12]
 800bef4:	e097      	b.n	800c026 <CalcPoleDist+0x13e>
	{
		pole_dist_x[i] -= pp.real_x;
 800bef6:	4a54      	ldr	r2, [pc, #336]	; (800c048 <CalcPoleDist+0x160>)
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	009b      	lsls	r3, r3, #2
 800befc:	4413      	add	r3, r2
 800befe:	ed93 7a00 	vldr	s14, [r3]
 800bf02:	4b52      	ldr	r3, [pc, #328]	; (800c04c <CalcPoleDist+0x164>)
 800bf04:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800bf08:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf0c:	4a4e      	ldr	r2, [pc, #312]	; (800c048 <CalcPoleDist+0x160>)
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	009b      	lsls	r3, r3, #2
 800bf12:	4413      	add	r3, r2
 800bf14:	edc3 7a00 	vstr	s15, [r3]
		pole_dist_y[i] -= pp.real_y;
 800bf18:	4a4d      	ldr	r2, [pc, #308]	; (800c050 <CalcPoleDist+0x168>)
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	009b      	lsls	r3, r3, #2
 800bf1e:	4413      	add	r3, r2
 800bf20:	ed93 7a00 	vldr	s14, [r3]
 800bf24:	4b49      	ldr	r3, [pc, #292]	; (800c04c <CalcPoleDist+0x164>)
 800bf26:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800bf2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf2e:	4a48      	ldr	r2, [pc, #288]	; (800c050 <CalcPoleDist+0x168>)
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	009b      	lsls	r3, r3, #2
 800bf34:	4413      	add	r3, r2
 800bf36:	edc3 7a00 	vstr	s15, [r3]

		pole->distance[i] = sqrt((pow(pole_dist_x[i], 2)) + (pow(pole_dist_y[i], 2)));
 800bf3a:	4a43      	ldr	r2, [pc, #268]	; (800c048 <CalcPoleDist+0x160>)
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	009b      	lsls	r3, r3, #2
 800bf40:	4413      	add	r3, r2
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4618      	mov	r0, r3
 800bf46:	f7f4 faff 	bl	8000548 <__aeabi_f2d>
 800bf4a:	4602      	mov	r2, r0
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	ed9f 1b3a 	vldr	d1, [pc, #232]	; 800c038 <CalcPoleDist+0x150>
 800bf52:	ec43 2b10 	vmov	d0, r2, r3
 800bf56:	f012 f98f 	bl	801e278 <pow>
 800bf5a:	ec55 4b10 	vmov	r4, r5, d0
 800bf5e:	4a3c      	ldr	r2, [pc, #240]	; (800c050 <CalcPoleDist+0x168>)
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	009b      	lsls	r3, r3, #2
 800bf64:	4413      	add	r3, r2
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f7f4 faed 	bl	8000548 <__aeabi_f2d>
 800bf6e:	4602      	mov	r2, r0
 800bf70:	460b      	mov	r3, r1
 800bf72:	ed9f 1b31 	vldr	d1, [pc, #196]	; 800c038 <CalcPoleDist+0x150>
 800bf76:	ec43 2b10 	vmov	d0, r2, r3
 800bf7a:	f012 f97d 	bl	801e278 <pow>
 800bf7e:	ec53 2b10 	vmov	r2, r3, d0
 800bf82:	4620      	mov	r0, r4
 800bf84:	4629      	mov	r1, r5
 800bf86:	f7f4 f981 	bl	800028c <__adddf3>
 800bf8a:	4602      	mov	r2, r0
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	ec43 2b17 	vmov	d7, r2, r3
 800bf92:	eeb0 0a47 	vmov.f32	s0, s14
 800bf96:	eef0 0a67 	vmov.f32	s1, s15
 800bf9a:	f012 fa1b 	bl	801e3d4 <sqrt>
 800bf9e:	ec53 2b10 	vmov	r2, r3, d0
 800bfa2:	4610      	mov	r0, r2
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	f7f4 fe1f 	bl	8000be8 <__aeabi_d2f>
 800bfaa:	4601      	mov	r1, r0
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	009b      	lsls	r3, r3, #2
 800bfb2:	4413      	add	r3, r2
 800bfb4:	6019      	str	r1, [r3, #0]
		pole->angle[i] = atan(pole_dist_y[i] / pole_dist_x[i]) * 180 / M_PI;
 800bfb6:	4a26      	ldr	r2, [pc, #152]	; (800c050 <CalcPoleDist+0x168>)
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	4413      	add	r3, r2
 800bfbe:	ed93 7a00 	vldr	s14, [r3]
 800bfc2:	4a21      	ldr	r2, [pc, #132]	; (800c048 <CalcPoleDist+0x160>)
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	4413      	add	r3, r2
 800bfca:	edd3 7a00 	vldr	s15, [r3]
 800bfce:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800bfd2:	ee16 0a90 	vmov	r0, s13
 800bfd6:	f7f4 fab7 	bl	8000548 <__aeabi_f2d>
 800bfda:	4602      	mov	r2, r0
 800bfdc:	460b      	mov	r3, r1
 800bfde:	ec43 2b10 	vmov	d0, r2, r3
 800bfe2:	f011 fe41 	bl	801dc68 <atan>
 800bfe6:	ec51 0b10 	vmov	r0, r1, d0
 800bfea:	f04f 0200 	mov.w	r2, #0
 800bfee:	4b19      	ldr	r3, [pc, #100]	; (800c054 <CalcPoleDist+0x16c>)
 800bff0:	f7f4 fb02 	bl	80005f8 <__aeabi_dmul>
 800bff4:	4602      	mov	r2, r0
 800bff6:	460b      	mov	r3, r1
 800bff8:	4610      	mov	r0, r2
 800bffa:	4619      	mov	r1, r3
 800bffc:	a310      	add	r3, pc, #64	; (adr r3, 800c040 <CalcPoleDist+0x158>)
 800bffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c002:	f7f4 fc23 	bl	800084c <__aeabi_ddiv>
 800c006:	4602      	mov	r2, r0
 800c008:	460b      	mov	r3, r1
 800c00a:	4610      	mov	r0, r2
 800c00c:	4619      	mov	r1, r3
 800c00e:	f7f4 fdeb 	bl	8000be8 <__aeabi_d2f>
 800c012:	4601      	mov	r1, r0
 800c014:	687a      	ldr	r2, [r7, #4]
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	3306      	adds	r3, #6
 800c01a:	009b      	lsls	r3, r3, #2
 800c01c:	4413      	add	r3, r2
 800c01e:	6019      	str	r1, [r3, #0]
	for(int i = 0; i < 6; i++)
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	3301      	adds	r3, #1
 800c024:	60fb      	str	r3, [r7, #12]
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2b05      	cmp	r3, #5
 800c02a:	f77f af64 	ble.w	800bef6 <CalcPoleDist+0xe>
	}
}
 800c02e:	bf00      	nop
 800c030:	bf00      	nop
 800c032:	3710      	adds	r7, #16
 800c034:	46bd      	mov	sp, r7
 800c036:	bdb0      	pop	{r4, r5, r7, pc}
 800c038:	00000000 	.word	0x00000000
 800c03c:	40000000 	.word	0x40000000
 800c040:	54442d18 	.word	0x54442d18
 800c044:	400921fb 	.word	0x400921fb
 800c048:	20000090 	.word	0x20000090
 800c04c:	20006c44 	.word	0x20006c44
 800c050:	200000a8 	.word	0x200000a8
 800c054:	40668000 	.word	0x40668000

0800c058 <RobotStart>:

void RobotStart()
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	af00      	add	r7, sp, #0
	// Tune PID
	tune_p = 0;
 800c05c:	4b3f      	ldr	r3, [pc, #252]	; (800c15c <RobotStart+0x104>)
 800c05e:	2200      	movs	r2, #0
 800c060:	601a      	str	r2, [r3, #0]
	tune_i = 0;
 800c062:	4b3f      	ldr	r3, [pc, #252]	; (800c160 <RobotStart+0x108>)
 800c064:	2200      	movs	r2, #0
 800c066:	601a      	str	r2, [r3, #0]
	tune_d = 0;
 800c068:	4b3e      	ldr	r3, [pc, #248]	; (800c164 <RobotStart+0x10c>)
 800c06a:	2200      	movs	r2, #0
 800c06c:	601a      	str	r2, [r3, #0]

	AP = 1.5;
 800c06e:	4b3e      	ldr	r3, [pc, #248]	; (800c168 <RobotStart+0x110>)
 800c070:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800c074:	601a      	str	r2, [r3, #0]
	AI = 1.5;
 800c076:	4b3d      	ldr	r3, [pc, #244]	; (800c16c <RobotStart+0x114>)
 800c078:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800c07c:	601a      	str	r2, [r3, #0]
	AD = 0.0;
 800c07e:	4b3c      	ldr	r3, [pc, #240]	; (800c170 <RobotStart+0x118>)
 800c080:	f04f 0200 	mov.w	r2, #0
 800c084:	601a      	str	r2, [r3, #0]

	BP = 1.0;
 800c086:	4b3b      	ldr	r3, [pc, #236]	; (800c174 <RobotStart+0x11c>)
 800c088:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c08c:	601a      	str	r2, [r3, #0]
	BI = 1.5;
 800c08e:	4b3a      	ldr	r3, [pc, #232]	; (800c178 <RobotStart+0x120>)
 800c090:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800c094:	601a      	str	r2, [r3, #0]
	BD = 0.0;
 800c096:	4b39      	ldr	r3, [pc, #228]	; (800c17c <RobotStart+0x124>)
 800c098:	f04f 0200 	mov.w	r2, #0
 800c09c:	601a      	str	r2, [r3, #0]

	CP = 1.0;
 800c09e:	4b38      	ldr	r3, [pc, #224]	; (800c180 <RobotStart+0x128>)
 800c0a0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c0a4:	601a      	str	r2, [r3, #0]
	CI = 1.5;
 800c0a6:	4b37      	ldr	r3, [pc, #220]	; (800c184 <RobotStart+0x12c>)
 800c0a8:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800c0ac:	601a      	str	r2, [r3, #0]
	CD = 0.0;
 800c0ae:	4b36      	ldr	r3, [pc, #216]	; (800c188 <RobotStart+0x130>)
 800c0b0:	f04f 0200 	mov.w	r2, #0
 800c0b4:	601a      	str	r2, [r3, #0]

	DP = 1.0;
 800c0b6:	4b35      	ldr	r3, [pc, #212]	; (800c18c <RobotStart+0x134>)
 800c0b8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c0bc:	601a      	str	r2, [r3, #0]
	DI = 1.5;
 800c0be:	4b34      	ldr	r3, [pc, #208]	; (800c190 <RobotStart+0x138>)
 800c0c0:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800c0c4:	601a      	str	r2, [r3, #0]
	DD = 0.0;
 800c0c6:	4b33      	ldr	r3, [pc, #204]	; (800c194 <RobotStart+0x13c>)
 800c0c8:	f04f 0200 	mov.w	r2, #0
 800c0cc:	601a      	str	r2, [r3, #0]

	wheel = 1;
 800c0ce:	4b32      	ldr	r3, [pc, #200]	; (800c198 <RobotStart+0x140>)
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	601a      	str	r2, [r3, #0]
	vesc_pulse = 1.4;
 800c0d4:	4b31      	ldr	r3, [pc, #196]	; (800c19c <RobotStart+0x144>)
 800c0d6:	4a32      	ldr	r2, [pc, #200]	; (800c1a0 <RobotStart+0x148>)
 800c0d8:	601a      	str	r2, [r3, #0]
	vesc_move_speed = 2;
 800c0da:	4b32      	ldr	r3, [pc, #200]	; (800c1a4 <RobotStart+0x14c>)
 800c0dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c0e0:	601a      	str	r2, [r3, #0]
	vesc_pdc = 0.5;
 800c0e2:	4b31      	ldr	r3, [pc, #196]	; (800c1a8 <RobotStart+0x150>)
 800c0e4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800c0e8:	601a      	str	r2, [r3, #0]

	mode = NORMAL;
 800c0ea:	4b30      	ldr	r3, [pc, #192]	; (800c1ac <RobotStart+0x154>)
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	601a      	str	r2, [r3, #0]

	// Servo Init
	pick_ori;
 800c0f0:	f240 21ee 	movw	r1, #750	; 0x2ee
 800c0f4:	482e      	ldr	r0, [pc, #184]	; (800c1b0 <RobotStart+0x158>)
 800c0f6:	f7fe fe99 	bl	800ae2c <ServoSetPulse>
	load_ori;
 800c0fa:	f44f 7116 	mov.w	r1, #600	; 0x258
 800c0fe:	482d      	ldr	r0, [pc, #180]	; (800c1b4 <RobotStart+0x15c>)
 800c100:	f7fe fe94 	bl	800ae2c <ServoSetPulse>
	yaw_ori;
 800c104:	f44f 7161 	mov.w	r1, #900	; 0x384
 800c108:	482b      	ldr	r0, [pc, #172]	; (800c1b8 <RobotStart+0x160>)
 800c10a:	f7fe fe8f 	bl	800ae2c <ServoSetPulse>
	pitch_ori;
 800c10e:	f240 610e 	movw	r1, #1550	; 0x60e
 800c112:	482a      	ldr	r0, [pc, #168]	; (800c1bc <RobotStart+0x164>)
 800c114:	f7fe fe8a 	bl	800ae2c <ServoSetPulse>

	// Cylinder Init
	retract;
 800c118:	4a29      	ldr	r2, [pc, #164]	; (800c1c0 <RobotStart+0x168>)
 800c11a:	7e13      	ldrb	r3, [r2, #24]
 800c11c:	f36f 0300 	bfc	r3, #0, #1
 800c120:	7613      	strb	r3, [r2, #24]
	enable_shot;
 800c122:	4a27      	ldr	r2, [pc, #156]	; (800c1c0 <RobotStart+0x168>)
 800c124:	7e13      	ldrb	r3, [r2, #24]
 800c126:	f36f 0341 	bfc	r3, #1, #1
 800c12a:	7613      	strb	r3, [r2, #24]
	stop_pick;
 800c12c:	4b25      	ldr	r3, [pc, #148]	; (800c1c4 <RobotStart+0x16c>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	2200      	movs	r2, #0
 800c132:	635a      	str	r2, [r3, #52]	; 0x34

	pick_delay = 500;
 800c134:	4b24      	ldr	r3, [pc, #144]	; (800c1c8 <RobotStart+0x170>)
 800c136:	4a25      	ldr	r2, [pc, #148]	; (800c1cc <RobotStart+0x174>)
 800c138:	601a      	str	r2, [r3, #0]
	load_delay = 1000;
 800c13a:	4b25      	ldr	r3, [pc, #148]	; (800c1d0 <RobotStart+0x178>)
 800c13c:	4a25      	ldr	r2, [pc, #148]	; (800c1d4 <RobotStart+0x17c>)
 800c13e:	601a      	str	r2, [r3, #0]
	retract_delay = 500;
 800c140:	4b25      	ldr	r3, [pc, #148]	; (800c1d8 <RobotStart+0x180>)
 800c142:	4a22      	ldr	r2, [pc, #136]	; (800c1cc <RobotStart+0x174>)
 800c144:	601a      	str	r2, [r3, #0]
	enable_delay = 500;
 800c146:	4b25      	ldr	r3, [pc, #148]	; (800c1dc <RobotStart+0x184>)
 800c148:	4a20      	ldr	r2, [pc, #128]	; (800c1cc <RobotStart+0x174>)
 800c14a:	601a      	str	r2, [r3, #0]

	ps4_yaw = 750;
 800c14c:	4b24      	ldr	r3, [pc, #144]	; (800c1e0 <RobotStart+0x188>)
 800c14e:	4a25      	ldr	r2, [pc, #148]	; (800c1e4 <RobotStart+0x18c>)
 800c150:	601a      	str	r2, [r3, #0]
	ps4_pitch = 1550;
 800c152:	4b25      	ldr	r3, [pc, #148]	; (800c1e8 <RobotStart+0x190>)
 800c154:	4a25      	ldr	r2, [pc, #148]	; (800c1ec <RobotStart+0x194>)
 800c156:	601a      	str	r2, [r3, #0]

}
 800c158:	bf00      	nop
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	20007270 	.word	0x20007270
 800c160:	20007190 	.word	0x20007190
 800c164:	200096ac 	.word	0x200096ac
 800c168:	2000a120 	.word	0x2000a120
 800c16c:	20007188 	.word	0x20007188
 800c170:	2000a0fc 	.word	0x2000a0fc
 800c174:	200074b0 	.word	0x200074b0
 800c178:	20009204 	.word	0x20009204
 800c17c:	20007184 	.word	0x20007184
 800c180:	20009538 	.word	0x20009538
 800c184:	200096a4 	.word	0x200096a4
 800c188:	200064fc 	.word	0x200064fc
 800c18c:	20009bb0 	.word	0x20009bb0
 800c190:	20006a1c 	.word	0x20006a1c
 800c194:	2000988c 	.word	0x2000988c
 800c198:	200064f8 	.word	0x200064f8
 800c19c:	2000a0c4 	.word	0x2000a0c4
 800c1a0:	3fb33333 	.word	0x3fb33333
 800c1a4:	2000934c 	.word	0x2000934c
 800c1a8:	200076a4 	.word	0x200076a4
 800c1ac:	200090a8 	.word	0x200090a8
 800c1b0:	200099c0 	.word	0x200099c0
 800c1b4:	2000a188 	.word	0x2000a188
 800c1b8:	20007664 	.word	0x20007664
 800c1bc:	20009cbc 	.word	0x20009cbc
 800c1c0:	20009490 	.word	0x20009490
 800c1c4:	20005cd8 	.word	0x20005cd8
 800c1c8:	20007244 	.word	0x20007244
 800c1cc:	43fa0000 	.word	0x43fa0000
 800c1d0:	20009754 	.word	0x20009754
 800c1d4:	447a0000 	.word	0x447a0000
 800c1d8:	2000765c 	.word	0x2000765c
 800c1dc:	20009dc0 	.word	0x20009dc0
 800c1e0:	20009ba8 	.word	0x20009ba8
 800c1e4:	443b8000 	.word	0x443b8000
 800c1e8:	20008e00 	.word	0x20008e00
 800c1ec:	44c1c000 	.word	0x44c1c000

0800c1f0 <Init>:
		vesc_pdc -= 0.1;
	}
}

void Init()
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	af00      	add	r7, sp, #0
//	realMODN(&ps4, &rns);

	// Picking Cylinder
	if(ps4.button == CIRCLE)
 800c1f4:	4b7a      	ldr	r3, [pc, #488]	; (800c3e0 <Init+0x1f0>)
 800c1f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1fc:	d11b      	bne.n	800c236 <Init+0x46>
	{
		while(ps4.button == CIRCLE);
 800c1fe:	bf00      	nop
 800c200:	4b77      	ldr	r3, [pc, #476]	; (800c3e0 <Init+0x1f0>)
 800c202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c208:	d0fa      	beq.n	800c200 <Init+0x10>
		static int count = 0;
		if(count == 0)
 800c20a:	4b76      	ldr	r3, [pc, #472]	; (800c3e4 <Init+0x1f4>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d10a      	bne.n	800c228 <Init+0x38>
		{
			start_pick;
 800c212:	4b75      	ldr	r3, [pc, #468]	; (800c3e8 <Init+0x1f8>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800c21a:	635a      	str	r2, [r3, #52]	; 0x34
			count++;
 800c21c:	4b71      	ldr	r3, [pc, #452]	; (800c3e4 <Init+0x1f4>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	3301      	adds	r3, #1
 800c222:	4a70      	ldr	r2, [pc, #448]	; (800c3e4 <Init+0x1f4>)
 800c224:	6013      	str	r3, [r2, #0]
 800c226:	e006      	b.n	800c236 <Init+0x46>
		}
		else
		{
			stop_pick;
 800c228:	4b6f      	ldr	r3, [pc, #444]	; (800c3e8 <Init+0x1f8>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	2200      	movs	r2, #0
 800c22e:	635a      	str	r2, [r3, #52]	; 0x34
			count = 0;
 800c230:	4b6c      	ldr	r3, [pc, #432]	; (800c3e4 <Init+0x1f4>)
 800c232:	2200      	movs	r2, #0
 800c234:	601a      	str	r2, [r3, #0]
		}
	}

	// Shot Cylinder
	if(ps4.button == CROSS)
 800c236:	4b6a      	ldr	r3, [pc, #424]	; (800c3e0 <Init+0x1f0>)
 800c238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c23a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c23e:	d11c      	bne.n	800c27a <Init+0x8a>
	{
		while(ps4.button == CROSS);
 800c240:	bf00      	nop
 800c242:	4b67      	ldr	r3, [pc, #412]	; (800c3e0 <Init+0x1f0>)
 800c244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c246:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c24a:	d0fa      	beq.n	800c242 <Init+0x52>
		static int count = 0;
		if(count == 0)
 800c24c:	4b67      	ldr	r3, [pc, #412]	; (800c3ec <Init+0x1fc>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d10a      	bne.n	800c26a <Init+0x7a>
		{
			shot;
 800c254:	4a66      	ldr	r2, [pc, #408]	; (800c3f0 <Init+0x200>)
 800c256:	7e13      	ldrb	r3, [r2, #24]
 800c258:	f043 0301 	orr.w	r3, r3, #1
 800c25c:	7613      	strb	r3, [r2, #24]
			count++;
 800c25e:	4b63      	ldr	r3, [pc, #396]	; (800c3ec <Init+0x1fc>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	3301      	adds	r3, #1
 800c264:	4a61      	ldr	r2, [pc, #388]	; (800c3ec <Init+0x1fc>)
 800c266:	6013      	str	r3, [r2, #0]
 800c268:	e007      	b.n	800c27a <Init+0x8a>
		}
		else
		{
			retract;
 800c26a:	4a61      	ldr	r2, [pc, #388]	; (800c3f0 <Init+0x200>)
 800c26c:	7e13      	ldrb	r3, [r2, #24]
 800c26e:	f36f 0300 	bfc	r3, #0, #1
 800c272:	7613      	strb	r3, [r2, #24]
			count = 0;
 800c274:	4b5d      	ldr	r3, [pc, #372]	; (800c3ec <Init+0x1fc>)
 800c276:	2200      	movs	r2, #0
 800c278:	601a      	str	r2, [r3, #0]
		}
	}

	// Enable Shot Cylinder
	if(ps4.button == TRIANGLE)
 800c27a:	4b59      	ldr	r3, [pc, #356]	; (800c3e0 <Init+0x1f0>)
 800c27c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c27e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c282:	d11c      	bne.n	800c2be <Init+0xce>
	{
		while(ps4.button == TRIANGLE);
 800c284:	bf00      	nop
 800c286:	4b56      	ldr	r3, [pc, #344]	; (800c3e0 <Init+0x1f0>)
 800c288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c28a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c28e:	d0fa      	beq.n	800c286 <Init+0x96>
		static int count = 0;
		if(count == 0)
 800c290:	4b58      	ldr	r3, [pc, #352]	; (800c3f4 <Init+0x204>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d10a      	bne.n	800c2ae <Init+0xbe>
		{
			disable_shot;
 800c298:	4a55      	ldr	r2, [pc, #340]	; (800c3f0 <Init+0x200>)
 800c29a:	7e13      	ldrb	r3, [r2, #24]
 800c29c:	f043 0302 	orr.w	r3, r3, #2
 800c2a0:	7613      	strb	r3, [r2, #24]
			count++;
 800c2a2:	4b54      	ldr	r3, [pc, #336]	; (800c3f4 <Init+0x204>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	4a52      	ldr	r2, [pc, #328]	; (800c3f4 <Init+0x204>)
 800c2aa:	6013      	str	r3, [r2, #0]
 800c2ac:	e007      	b.n	800c2be <Init+0xce>
		}
		else
		{
			enable_shot;
 800c2ae:	4a50      	ldr	r2, [pc, #320]	; (800c3f0 <Init+0x200>)
 800c2b0:	7e13      	ldrb	r3, [r2, #24]
 800c2b2:	f36f 0341 	bfc	r3, #1, #1
 800c2b6:	7613      	strb	r3, [r2, #24]
			count = 0;
 800c2b8:	4b4e      	ldr	r3, [pc, #312]	; (800c3f4 <Init+0x204>)
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	601a      	str	r2, [r3, #0]
		}
	}

	// Set Servo Range
	if(ps4.button == L1)
 800c2be:	4b48      	ldr	r3, [pc, #288]	; (800c3e0 <Init+0x1f0>)
 800c2c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2c6:	d109      	bne.n	800c2dc <Init+0xec>
	{
		while(ps4.button == L1);
 800c2c8:	bf00      	nop
 800c2ca:	4b45      	ldr	r3, [pc, #276]	; (800c3e0 <Init+0x1f0>)
 800c2cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2d2:	d0fa      	beq.n	800c2ca <Init+0xda>
		ServoMovePulse(&pitch, 50);
 800c2d4:	2132      	movs	r1, #50	; 0x32
 800c2d6:	4848      	ldr	r0, [pc, #288]	; (800c3f8 <Init+0x208>)
 800c2d8:	f7fe fe03 	bl	800aee2 <ServoMovePulse>
	}

	if(ps4.button == R1)
 800c2dc:	4b40      	ldr	r3, [pc, #256]	; (800c3e0 <Init+0x1f0>)
 800c2de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2e4:	d10a      	bne.n	800c2fc <Init+0x10c>
	{
		while(ps4.button == R1);
 800c2e6:	bf00      	nop
 800c2e8:	4b3d      	ldr	r3, [pc, #244]	; (800c3e0 <Init+0x1f0>)
 800c2ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2f0:	d0fa      	beq.n	800c2e8 <Init+0xf8>
		ServoMovePulse(&pitch, -50);
 800c2f2:	f06f 0131 	mvn.w	r1, #49	; 0x31
 800c2f6:	4840      	ldr	r0, [pc, #256]	; (800c3f8 <Init+0x208>)
 800c2f8:	f7fe fdf3 	bl	800aee2 <ServoMovePulse>
	}

	if(ps4.button == UP)
 800c2fc:	4b38      	ldr	r3, [pc, #224]	; (800c3e0 <Init+0x1f0>)
 800c2fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c300:	2b10      	cmp	r3, #16
 800c302:	d108      	bne.n	800c316 <Init+0x126>
	{
		while(ps4.button == UP);
 800c304:	bf00      	nop
 800c306:	4b36      	ldr	r3, [pc, #216]	; (800c3e0 <Init+0x1f0>)
 800c308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c30a:	2b10      	cmp	r3, #16
 800c30c:	d0fb      	beq.n	800c306 <Init+0x116>
		ServoMovePulse(&pick, 50);
 800c30e:	2132      	movs	r1, #50	; 0x32
 800c310:	483a      	ldr	r0, [pc, #232]	; (800c3fc <Init+0x20c>)
 800c312:	f7fe fde6 	bl	800aee2 <ServoMovePulse>
	}

	if(ps4.button == DOWN)
 800c316:	4b32      	ldr	r3, [pc, #200]	; (800c3e0 <Init+0x1f0>)
 800c318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c31a:	2b40      	cmp	r3, #64	; 0x40
 800c31c:	d109      	bne.n	800c332 <Init+0x142>
	{
		while(ps4.button == DOWN);
 800c31e:	bf00      	nop
 800c320:	4b2f      	ldr	r3, [pc, #188]	; (800c3e0 <Init+0x1f0>)
 800c322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c324:	2b40      	cmp	r3, #64	; 0x40
 800c326:	d0fb      	beq.n	800c320 <Init+0x130>
		ServoMovePulse(&pick, -50);
 800c328:	f06f 0131 	mvn.w	r1, #49	; 0x31
 800c32c:	4833      	ldr	r0, [pc, #204]	; (800c3fc <Init+0x20c>)
 800c32e:	f7fe fdd8 	bl	800aee2 <ServoMovePulse>
	}

	if(ps4.button == LEFT)
 800c332:	4b2b      	ldr	r3, [pc, #172]	; (800c3e0 <Init+0x1f0>)
 800c334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c336:	2b80      	cmp	r3, #128	; 0x80
 800c338:	d108      	bne.n	800c34c <Init+0x15c>
	{
		while(ps4.button == LEFT);
 800c33a:	bf00      	nop
 800c33c:	4b28      	ldr	r3, [pc, #160]	; (800c3e0 <Init+0x1f0>)
 800c33e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c340:	2b80      	cmp	r3, #128	; 0x80
 800c342:	d0fb      	beq.n	800c33c <Init+0x14c>
		ServoMovePulse(&load, 50);
 800c344:	2132      	movs	r1, #50	; 0x32
 800c346:	482e      	ldr	r0, [pc, #184]	; (800c400 <Init+0x210>)
 800c348:	f7fe fdcb 	bl	800aee2 <ServoMovePulse>
	}

	if(ps4.button == RIGHT)
 800c34c:	4b24      	ldr	r3, [pc, #144]	; (800c3e0 <Init+0x1f0>)
 800c34e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c350:	2b20      	cmp	r3, #32
 800c352:	d109      	bne.n	800c368 <Init+0x178>
	{
		while(ps4.button == RIGHT);
 800c354:	bf00      	nop
 800c356:	4b22      	ldr	r3, [pc, #136]	; (800c3e0 <Init+0x1f0>)
 800c358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c35a:	2b20      	cmp	r3, #32
 800c35c:	d0fb      	beq.n	800c356 <Init+0x166>
		ServoMovePulse(&load, -50);
 800c35e:	f06f 0131 	mvn.w	r1, #49	; 0x31
 800c362:	4827      	ldr	r0, [pc, #156]	; (800c400 <Init+0x210>)
 800c364:	f7fe fdbd 	bl	800aee2 <ServoMovePulse>
	}

	if(ps4.button == SQUARE)
 800c368:	4b1d      	ldr	r3, [pc, #116]	; (800c3e0 <Init+0x1f0>)
 800c36a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c36c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c370:	d109      	bne.n	800c386 <Init+0x196>
	{
		while(ps4.button == SQUARE);
 800c372:	bf00      	nop
 800c374:	4b1a      	ldr	r3, [pc, #104]	; (800c3e0 <Init+0x1f0>)
 800c376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c37c:	d0fa      	beq.n	800c374 <Init+0x184>
		ServoMovePulse(&yaw_servo, 50);
 800c37e:	2132      	movs	r1, #50	; 0x32
 800c380:	4820      	ldr	r0, [pc, #128]	; (800c404 <Init+0x214>)
 800c382:	f7fe fdae 	bl	800aee2 <ServoMovePulse>
	}

	if(ps4.button == OPTION)
 800c386:	4b16      	ldr	r3, [pc, #88]	; (800c3e0 <Init+0x1f0>)
 800c388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c38a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c38e:	d10a      	bne.n	800c3a6 <Init+0x1b6>
	{
		while(ps4.button == OPTION);
 800c390:	bf00      	nop
 800c392:	4b13      	ldr	r3, [pc, #76]	; (800c3e0 <Init+0x1f0>)
 800c394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c39a:	d0fa      	beq.n	800c392 <Init+0x1a2>
		ServoMovePulse(&yaw_servo, -50);
 800c39c:	f06f 0131 	mvn.w	r1, #49	; 0x31
 800c3a0:	4818      	ldr	r0, [pc, #96]	; (800c404 <Init+0x214>)
 800c3a2:	f7fe fd9e 	bl	800aee2 <ServoMovePulse>
	}

	if(HAL_GetTick() - before >= InitMode)
 800c3a6:	f002 f9c3 	bl	800e730 <HAL_GetTick>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	4a16      	ldr	r2, [pc, #88]	; (800c408 <Init+0x218>)
 800c3ae:	6812      	ldr	r2, [r2, #0]
 800c3b0:	1a9b      	subs	r3, r3, r2
 800c3b2:	f5b3 7f67 	cmp.w	r3, #924	; 0x39c
 800c3b6:	d911      	bls.n	800c3dc <Init+0x1ec>
	{
		led3 = !led3;
 800c3b8:	4b14      	ldr	r3, [pc, #80]	; (800c40c <Init+0x21c>)
 800c3ba:	785b      	ldrb	r3, [r3, #1]
 800c3bc:	b25b      	sxtb	r3, r3
 800c3be:	4a13      	ldr	r2, [pc, #76]	; (800c40c <Init+0x21c>)
 800c3c0:	43db      	mvns	r3, r3
 800c3c2:	b2db      	uxtb	r3, r3
 800c3c4:	09db      	lsrs	r3, r3, #7
 800c3c6:	b2d9      	uxtb	r1, r3
 800c3c8:	7853      	ldrb	r3, [r2, #1]
 800c3ca:	f361 13c7 	bfi	r3, r1, #7, #1
 800c3ce:	7053      	strb	r3, [r2, #1]
		before = HAL_GetTick();
 800c3d0:	f002 f9ae 	bl	800e730 <HAL_GetTick>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	4b0b      	ldr	r3, [pc, #44]	; (800c408 <Init+0x218>)
 800c3da:	601a      	str	r2, [r3, #0]
	}
}
 800c3dc:	bf00      	nop
 800c3de:	bd80      	pop	{r7, pc}
 800c3e0:	20009e30 	.word	0x20009e30
 800c3e4:	20000304 	.word	0x20000304
 800c3e8:	20005cd8 	.word	0x20005cd8
 800c3ec:	20000308 	.word	0x20000308
 800c3f0:	20009490 	.word	0x20009490
 800c3f4:	2000030c 	.word	0x2000030c
 800c3f8:	20009cbc 	.word	0x20009cbc
 800c3fc:	200099c0 	.word	0x200099c0
 800c400:	2000a188 	.word	0x2000a188
 800c404:	20007664 	.word	0x20007664
 800c408:	200071a4 	.word	0x200071a4
 800c40c:	40020814 	.word	0x40020814

0800c410 <PS4Tune>:

void PS4Tune()
{
 800c410:	b5b0      	push	{r4, r5, r7, lr}
 800c412:	af00      	add	r7, sp, #0

	static int run = 0;
	if(ps4.button == CIRCLE)
 800c414:	4ba8      	ldr	r3, [pc, #672]	; (800c6b8 <PS4Tune+0x2a8>)
 800c416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c41c:	d118      	bne.n	800c450 <PS4Tune+0x40>
	{
		while(ps4.button == CIRCLE);
 800c41e:	bf00      	nop
 800c420:	4ba5      	ldr	r3, [pc, #660]	; (800c6b8 <PS4Tune+0x2a8>)
 800c422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c428:	d0fa      	beq.n	800c420 <PS4Tune+0x10>
		static int count = 0;
		if(count == 0)
 800c42a:	4ba4      	ldr	r3, [pc, #656]	; (800c6bc <PS4Tune+0x2ac>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d108      	bne.n	800c444 <PS4Tune+0x34>
		{
			run = 1;
 800c432:	4ba3      	ldr	r3, [pc, #652]	; (800c6c0 <PS4Tune+0x2b0>)
 800c434:	2201      	movs	r2, #1
 800c436:	601a      	str	r2, [r3, #0]
			count++;
 800c438:	4ba0      	ldr	r3, [pc, #640]	; (800c6bc <PS4Tune+0x2ac>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	3301      	adds	r3, #1
 800c43e:	4a9f      	ldr	r2, [pc, #636]	; (800c6bc <PS4Tune+0x2ac>)
 800c440:	6013      	str	r3, [r2, #0]
 800c442:	e005      	b.n	800c450 <PS4Tune+0x40>
		}
		else
		{
			run = 0;
 800c444:	4b9e      	ldr	r3, [pc, #632]	; (800c6c0 <PS4Tune+0x2b0>)
 800c446:	2200      	movs	r2, #0
 800c448:	601a      	str	r2, [r3, #0]
			count = 0;
 800c44a:	4b9c      	ldr	r3, [pc, #624]	; (800c6bc <PS4Tune+0x2ac>)
 800c44c:	2200      	movs	r2, #0
 800c44e:	601a      	str	r2, [r3, #0]
		}
	}

	if(run)
 800c450:	4b9b      	ldr	r3, [pc, #620]	; (800c6c0 <PS4Tune+0x2b0>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d01a      	beq.n	800c48e <PS4Tune+0x7e>
	{
		sys.navi_vel = 1;
 800c458:	4a9a      	ldr	r2, [pc, #616]	; (800c6c4 <PS4Tune+0x2b4>)
 800c45a:	7853      	ldrb	r3, [r2, #1]
 800c45c:	f043 0304 	orr.w	r3, r3, #4
 800c460:	7053      	strb	r3, [r2, #1]
		VESCPIDProcess(vesc_pulse, vesc_pulse, vesc_pulse, vesc_pulse);
 800c462:	4b99      	ldr	r3, [pc, #612]	; (800c6c8 <PS4Tune+0x2b8>)
 800c464:	edd3 7a00 	vldr	s15, [r3]
 800c468:	4b97      	ldr	r3, [pc, #604]	; (800c6c8 <PS4Tune+0x2b8>)
 800c46a:	ed93 7a00 	vldr	s14, [r3]
 800c46e:	4b96      	ldr	r3, [pc, #600]	; (800c6c8 <PS4Tune+0x2b8>)
 800c470:	edd3 6a00 	vldr	s13, [r3]
 800c474:	4b94      	ldr	r3, [pc, #592]	; (800c6c8 <PS4Tune+0x2b8>)
 800c476:	ed93 6a00 	vldr	s12, [r3]
 800c47a:	eef0 1a46 	vmov.f32	s3, s12
 800c47e:	eeb0 1a66 	vmov.f32	s2, s13
 800c482:	eef0 0a47 	vmov.f32	s1, s14
 800c486:	eeb0 0a67 	vmov.f32	s0, s15
 800c48a:	f001 fcb1 	bl	800ddf0 <VESCPIDProcess>
	}
//	else
//		realMODN(&ps4, &rns);

	if(ps4.button == L1)
 800c48e:	4b8a      	ldr	r3, [pc, #552]	; (800c6b8 <PS4Tune+0x2a8>)
 800c490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c496:	d11c      	bne.n	800c4d2 <PS4Tune+0xc2>
	{
		while(ps4.button == L1);
 800c498:	bf00      	nop
 800c49a:	4b87      	ldr	r3, [pc, #540]	; (800c6b8 <PS4Tune+0x2a8>)
 800c49c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c49e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c4a2:	d0fa      	beq.n	800c49a <PS4Tune+0x8a>
		vesc_pulse++;
 800c4a4:	4b88      	ldr	r3, [pc, #544]	; (800c6c8 <PS4Tune+0x2b8>)
 800c4a6:	edd3 7a00 	vldr	s15, [r3]
 800c4aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c4b2:	4b85      	ldr	r3, [pc, #532]	; (800c6c8 <PS4Tune+0x2b8>)
 800c4b4:	edc3 7a00 	vstr	s15, [r3]
		if(vesc_pulse >= 5) vesc_pulse = 5;
 800c4b8:	4b83      	ldr	r3, [pc, #524]	; (800c6c8 <PS4Tune+0x2b8>)
 800c4ba:	edd3 7a00 	vldr	s15, [r3]
 800c4be:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800c4c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4ca:	db02      	blt.n	800c4d2 <PS4Tune+0xc2>
 800c4cc:	4b7e      	ldr	r3, [pc, #504]	; (800c6c8 <PS4Tune+0x2b8>)
 800c4ce:	4a7f      	ldr	r2, [pc, #508]	; (800c6cc <PS4Tune+0x2bc>)
 800c4d0:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == R1)
 800c4d2:	4b79      	ldr	r3, [pc, #484]	; (800c6b8 <PS4Tune+0x2a8>)
 800c4d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c4da:	d11b      	bne.n	800c514 <PS4Tune+0x104>
	{
		while(ps4.button == R1);
 800c4dc:	bf00      	nop
 800c4de:	4b76      	ldr	r3, [pc, #472]	; (800c6b8 <PS4Tune+0x2a8>)
 800c4e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c4e6:	d0fa      	beq.n	800c4de <PS4Tune+0xce>
		vesc_pulse--;
 800c4e8:	4b77      	ldr	r3, [pc, #476]	; (800c6c8 <PS4Tune+0x2b8>)
 800c4ea:	edd3 7a00 	vldr	s15, [r3]
 800c4ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c4f6:	4b74      	ldr	r3, [pc, #464]	; (800c6c8 <PS4Tune+0x2b8>)
 800c4f8:	edc3 7a00 	vstr	s15, [r3]
		if(vesc_pulse <= 0) vesc_pulse = 0;
 800c4fc:	4b72      	ldr	r3, [pc, #456]	; (800c6c8 <PS4Tune+0x2b8>)
 800c4fe:	edd3 7a00 	vldr	s15, [r3]
 800c502:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c50a:	d803      	bhi.n	800c514 <PS4Tune+0x104>
 800c50c:	4b6e      	ldr	r3, [pc, #440]	; (800c6c8 <PS4Tune+0x2b8>)
 800c50e:	f04f 0200 	mov.w	r2, #0
 800c512:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == UP)
 800c514:	4b68      	ldr	r3, [pc, #416]	; (800c6b8 <PS4Tune+0x2a8>)
 800c516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c518:	2b10      	cmp	r3, #16
 800c51a:	d10d      	bne.n	800c538 <PS4Tune+0x128>
	{
		while(ps4.button == UP);
 800c51c:	bf00      	nop
 800c51e:	4b66      	ldr	r3, [pc, #408]	; (800c6b8 <PS4Tune+0x2a8>)
 800c520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c522:	2b10      	cmp	r3, #16
 800c524:	d0fb      	beq.n	800c51e <PS4Tune+0x10e>
		tune_p = 1;
 800c526:	4b6a      	ldr	r3, [pc, #424]	; (800c6d0 <PS4Tune+0x2c0>)
 800c528:	2201      	movs	r2, #1
 800c52a:	601a      	str	r2, [r3, #0]
		tune_i = 0;
 800c52c:	4b69      	ldr	r3, [pc, #420]	; (800c6d4 <PS4Tune+0x2c4>)
 800c52e:	2200      	movs	r2, #0
 800c530:	601a      	str	r2, [r3, #0]
		tune_d = 0;
 800c532:	4b69      	ldr	r3, [pc, #420]	; (800c6d8 <PS4Tune+0x2c8>)
 800c534:	2200      	movs	r2, #0
 800c536:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == DOWN)
 800c538:	4b5f      	ldr	r3, [pc, #380]	; (800c6b8 <PS4Tune+0x2a8>)
 800c53a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c53c:	2b40      	cmp	r3, #64	; 0x40
 800c53e:	d10d      	bne.n	800c55c <PS4Tune+0x14c>
	{
		while(ps4.button == DOWN);
 800c540:	bf00      	nop
 800c542:	4b5d      	ldr	r3, [pc, #372]	; (800c6b8 <PS4Tune+0x2a8>)
 800c544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c546:	2b40      	cmp	r3, #64	; 0x40
 800c548:	d0fb      	beq.n	800c542 <PS4Tune+0x132>
		tune_p = 0;
 800c54a:	4b61      	ldr	r3, [pc, #388]	; (800c6d0 <PS4Tune+0x2c0>)
 800c54c:	2200      	movs	r2, #0
 800c54e:	601a      	str	r2, [r3, #0]
		tune_i = 1;
 800c550:	4b60      	ldr	r3, [pc, #384]	; (800c6d4 <PS4Tune+0x2c4>)
 800c552:	2201      	movs	r2, #1
 800c554:	601a      	str	r2, [r3, #0]
		tune_d = 0;
 800c556:	4b60      	ldr	r3, [pc, #384]	; (800c6d8 <PS4Tune+0x2c8>)
 800c558:	2200      	movs	r2, #0
 800c55a:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == LEFT)
 800c55c:	4b56      	ldr	r3, [pc, #344]	; (800c6b8 <PS4Tune+0x2a8>)
 800c55e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c560:	2b80      	cmp	r3, #128	; 0x80
 800c562:	d10d      	bne.n	800c580 <PS4Tune+0x170>
	{
		while(ps4.button == LEFT);
 800c564:	bf00      	nop
 800c566:	4b54      	ldr	r3, [pc, #336]	; (800c6b8 <PS4Tune+0x2a8>)
 800c568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c56a:	2b80      	cmp	r3, #128	; 0x80
 800c56c:	d0fb      	beq.n	800c566 <PS4Tune+0x156>
		tune_p = 0;
 800c56e:	4b58      	ldr	r3, [pc, #352]	; (800c6d0 <PS4Tune+0x2c0>)
 800c570:	2200      	movs	r2, #0
 800c572:	601a      	str	r2, [r3, #0]
		tune_i = 0;
 800c574:	4b57      	ldr	r3, [pc, #348]	; (800c6d4 <PS4Tune+0x2c4>)
 800c576:	2200      	movs	r2, #0
 800c578:	601a      	str	r2, [r3, #0]
		tune_d = 1;
 800c57a:	4b57      	ldr	r3, [pc, #348]	; (800c6d8 <PS4Tune+0x2c8>)
 800c57c:	2201      	movs	r2, #1
 800c57e:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == RIGHT)
 800c580:	4b4d      	ldr	r3, [pc, #308]	; (800c6b8 <PS4Tune+0x2a8>)
 800c582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c584:	2b20      	cmp	r3, #32
 800c586:	d110      	bne.n	800c5aa <PS4Tune+0x19a>
	{
		while(ps4.button == RIGHT);
 800c588:	bf00      	nop
 800c58a:	4b4b      	ldr	r3, [pc, #300]	; (800c6b8 <PS4Tune+0x2a8>)
 800c58c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c58e:	2b20      	cmp	r3, #32
 800c590:	d0fb      	beq.n	800c58a <PS4Tune+0x17a>
		wheel++;
 800c592:	4b52      	ldr	r3, [pc, #328]	; (800c6dc <PS4Tune+0x2cc>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	3301      	adds	r3, #1
 800c598:	4a50      	ldr	r2, [pc, #320]	; (800c6dc <PS4Tune+0x2cc>)
 800c59a:	6013      	str	r3, [r2, #0]
		if(wheel > 5)
 800c59c:	4b4f      	ldr	r3, [pc, #316]	; (800c6dc <PS4Tune+0x2cc>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	2b05      	cmp	r3, #5
 800c5a2:	dd02      	ble.n	800c5aa <PS4Tune+0x19a>
			wheel = 1;
 800c5a4:	4b4d      	ldr	r3, [pc, #308]	; (800c6dc <PS4Tune+0x2cc>)
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	601a      	str	r2, [r3, #0]
	}

	if(tune_p)
 800c5aa:	4b49      	ldr	r3, [pc, #292]	; (800c6d0 <PS4Tune+0x2c0>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	f000 80bf 	beq.w	800c732 <PS4Tune+0x322>
	{
		switch(wheel)
 800c5b4:	4b49      	ldr	r3, [pc, #292]	; (800c6dc <PS4Tune+0x2cc>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	3b01      	subs	r3, #1
 800c5ba:	2b03      	cmp	r3, #3
 800c5bc:	f200 8219 	bhi.w	800c9f2 <PS4Tune+0x5e2>
 800c5c0:	a201      	add	r2, pc, #4	; (adr r2, 800c5c8 <PS4Tune+0x1b8>)
 800c5c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c6:	bf00      	nop
 800c5c8:	0800c5d9 	.word	0x0800c5d9
 800c5cc:	0800c61f 	.word	0x0800c61f
 800c5d0:	0800c665 	.word	0x0800c665
 800c5d4:	0800c6ed 	.word	0x0800c6ed
		{
		case 1:
			AP += ps4.joyR_y * 0.0001;
 800c5d8:	4b37      	ldr	r3, [pc, #220]	; (800c6b8 <PS4Tune+0x2a8>)
 800c5da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7f3 ffb3 	bl	8000548 <__aeabi_f2d>
 800c5e2:	a333      	add	r3, pc, #204	; (adr r3, 800c6b0 <PS4Tune+0x2a0>)
 800c5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e8:	f7f4 f806 	bl	80005f8 <__aeabi_dmul>
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	460b      	mov	r3, r1
 800c5f0:	4614      	mov	r4, r2
 800c5f2:	461d      	mov	r5, r3
 800c5f4:	4b3a      	ldr	r3, [pc, #232]	; (800c6e0 <PS4Tune+0x2d0>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f7f3 ffa5 	bl	8000548 <__aeabi_f2d>
 800c5fe:	4602      	mov	r2, r0
 800c600:	460b      	mov	r3, r1
 800c602:	4620      	mov	r0, r4
 800c604:	4629      	mov	r1, r5
 800c606:	f7f3 fe41 	bl	800028c <__adddf3>
 800c60a:	4602      	mov	r2, r0
 800c60c:	460b      	mov	r3, r1
 800c60e:	4610      	mov	r0, r2
 800c610:	4619      	mov	r1, r3
 800c612:	f7f4 fae9 	bl	8000be8 <__aeabi_d2f>
 800c616:	4603      	mov	r3, r0
 800c618:	4a31      	ldr	r2, [pc, #196]	; (800c6e0 <PS4Tune+0x2d0>)
 800c61a:	6013      	str	r3, [r2, #0]
			break;
 800c61c:	e1e9      	b.n	800c9f2 <PS4Tune+0x5e2>
		case 2:
			BP += ps4.joyR_y * 0.0001;
 800c61e:	4b26      	ldr	r3, [pc, #152]	; (800c6b8 <PS4Tune+0x2a8>)
 800c620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c622:	4618      	mov	r0, r3
 800c624:	f7f3 ff90 	bl	8000548 <__aeabi_f2d>
 800c628:	a321      	add	r3, pc, #132	; (adr r3, 800c6b0 <PS4Tune+0x2a0>)
 800c62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c62e:	f7f3 ffe3 	bl	80005f8 <__aeabi_dmul>
 800c632:	4602      	mov	r2, r0
 800c634:	460b      	mov	r3, r1
 800c636:	4614      	mov	r4, r2
 800c638:	461d      	mov	r5, r3
 800c63a:	4b2a      	ldr	r3, [pc, #168]	; (800c6e4 <PS4Tune+0x2d4>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	4618      	mov	r0, r3
 800c640:	f7f3 ff82 	bl	8000548 <__aeabi_f2d>
 800c644:	4602      	mov	r2, r0
 800c646:	460b      	mov	r3, r1
 800c648:	4620      	mov	r0, r4
 800c64a:	4629      	mov	r1, r5
 800c64c:	f7f3 fe1e 	bl	800028c <__adddf3>
 800c650:	4602      	mov	r2, r0
 800c652:	460b      	mov	r3, r1
 800c654:	4610      	mov	r0, r2
 800c656:	4619      	mov	r1, r3
 800c658:	f7f4 fac6 	bl	8000be8 <__aeabi_d2f>
 800c65c:	4603      	mov	r3, r0
 800c65e:	4a21      	ldr	r2, [pc, #132]	; (800c6e4 <PS4Tune+0x2d4>)
 800c660:	6013      	str	r3, [r2, #0]
			break;
 800c662:	e1c6      	b.n	800c9f2 <PS4Tune+0x5e2>
		case 3:
			CP += ps4.joyR_y * 0.0001;
 800c664:	4b14      	ldr	r3, [pc, #80]	; (800c6b8 <PS4Tune+0x2a8>)
 800c666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c668:	4618      	mov	r0, r3
 800c66a:	f7f3 ff6d 	bl	8000548 <__aeabi_f2d>
 800c66e:	a310      	add	r3, pc, #64	; (adr r3, 800c6b0 <PS4Tune+0x2a0>)
 800c670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c674:	f7f3 ffc0 	bl	80005f8 <__aeabi_dmul>
 800c678:	4602      	mov	r2, r0
 800c67a:	460b      	mov	r3, r1
 800c67c:	4614      	mov	r4, r2
 800c67e:	461d      	mov	r5, r3
 800c680:	4b19      	ldr	r3, [pc, #100]	; (800c6e8 <PS4Tune+0x2d8>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4618      	mov	r0, r3
 800c686:	f7f3 ff5f 	bl	8000548 <__aeabi_f2d>
 800c68a:	4602      	mov	r2, r0
 800c68c:	460b      	mov	r3, r1
 800c68e:	4620      	mov	r0, r4
 800c690:	4629      	mov	r1, r5
 800c692:	f7f3 fdfb 	bl	800028c <__adddf3>
 800c696:	4602      	mov	r2, r0
 800c698:	460b      	mov	r3, r1
 800c69a:	4610      	mov	r0, r2
 800c69c:	4619      	mov	r1, r3
 800c69e:	f7f4 faa3 	bl	8000be8 <__aeabi_d2f>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	4a10      	ldr	r2, [pc, #64]	; (800c6e8 <PS4Tune+0x2d8>)
 800c6a6:	6013      	str	r3, [r2, #0]
			break;
 800c6a8:	e1a3      	b.n	800c9f2 <PS4Tune+0x5e2>
 800c6aa:	bf00      	nop
 800c6ac:	f3af 8000 	nop.w
 800c6b0:	eb1c432d 	.word	0xeb1c432d
 800c6b4:	3f1a36e2 	.word	0x3f1a36e2
 800c6b8:	20009e30 	.word	0x20009e30
 800c6bc:	20000310 	.word	0x20000310
 800c6c0:	20000314 	.word	0x20000314
 800c6c4:	200071b8 	.word	0x200071b8
 800c6c8:	2000a0c4 	.word	0x2000a0c4
 800c6cc:	40a00000 	.word	0x40a00000
 800c6d0:	20007270 	.word	0x20007270
 800c6d4:	20007190 	.word	0x20007190
 800c6d8:	200096ac 	.word	0x200096ac
 800c6dc:	200064f8 	.word	0x200064f8
 800c6e0:	2000a120 	.word	0x2000a120
 800c6e4:	200074b0 	.word	0x200074b0
 800c6e8:	20009538 	.word	0x20009538
		case 4:
			DP += ps4.joyR_y * 0.0001;
 800c6ec:	4ba4      	ldr	r3, [pc, #656]	; (800c980 <PS4Tune+0x570>)
 800c6ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f7f3 ff29 	bl	8000548 <__aeabi_f2d>
 800c6f6:	a39e      	add	r3, pc, #632	; (adr r3, 800c970 <PS4Tune+0x560>)
 800c6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6fc:	f7f3 ff7c 	bl	80005f8 <__aeabi_dmul>
 800c700:	4602      	mov	r2, r0
 800c702:	460b      	mov	r3, r1
 800c704:	4614      	mov	r4, r2
 800c706:	461d      	mov	r5, r3
 800c708:	4b9e      	ldr	r3, [pc, #632]	; (800c984 <PS4Tune+0x574>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	4618      	mov	r0, r3
 800c70e:	f7f3 ff1b 	bl	8000548 <__aeabi_f2d>
 800c712:	4602      	mov	r2, r0
 800c714:	460b      	mov	r3, r1
 800c716:	4620      	mov	r0, r4
 800c718:	4629      	mov	r1, r5
 800c71a:	f7f3 fdb7 	bl	800028c <__adddf3>
 800c71e:	4602      	mov	r2, r0
 800c720:	460b      	mov	r3, r1
 800c722:	4610      	mov	r0, r2
 800c724:	4619      	mov	r1, r3
 800c726:	f7f4 fa5f 	bl	8000be8 <__aeabi_d2f>
 800c72a:	4603      	mov	r3, r0
 800c72c:	4a95      	ldr	r2, [pc, #596]	; (800c984 <PS4Tune+0x574>)
 800c72e:	6013      	str	r3, [r2, #0]
			break;
 800c730:	e15f      	b.n	800c9f2 <PS4Tune+0x5e2>
		}
	}
	else if(tune_i)
 800c732:	4b95      	ldr	r3, [pc, #596]	; (800c988 <PS4Tune+0x578>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	2b00      	cmp	r3, #0
 800c738:	f000 809e 	beq.w	800c878 <PS4Tune+0x468>
	{
		switch(wheel)
 800c73c:	4b93      	ldr	r3, [pc, #588]	; (800c98c <PS4Tune+0x57c>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	3b01      	subs	r3, #1
 800c742:	2b03      	cmp	r3, #3
 800c744:	f200 8155 	bhi.w	800c9f2 <PS4Tune+0x5e2>
 800c748:	a201      	add	r2, pc, #4	; (adr r2, 800c750 <PS4Tune+0x340>)
 800c74a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c74e:	bf00      	nop
 800c750:	0800c761 	.word	0x0800c761
 800c754:	0800c7a7 	.word	0x0800c7a7
 800c758:	0800c7ed 	.word	0x0800c7ed
 800c75c:	0800c833 	.word	0x0800c833
		{
		case 1:
			AI += ps4.joyR_y * 0.0001;
 800c760:	4b87      	ldr	r3, [pc, #540]	; (800c980 <PS4Tune+0x570>)
 800c762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c764:	4618      	mov	r0, r3
 800c766:	f7f3 feef 	bl	8000548 <__aeabi_f2d>
 800c76a:	a381      	add	r3, pc, #516	; (adr r3, 800c970 <PS4Tune+0x560>)
 800c76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c770:	f7f3 ff42 	bl	80005f8 <__aeabi_dmul>
 800c774:	4602      	mov	r2, r0
 800c776:	460b      	mov	r3, r1
 800c778:	4614      	mov	r4, r2
 800c77a:	461d      	mov	r5, r3
 800c77c:	4b84      	ldr	r3, [pc, #528]	; (800c990 <PS4Tune+0x580>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4618      	mov	r0, r3
 800c782:	f7f3 fee1 	bl	8000548 <__aeabi_f2d>
 800c786:	4602      	mov	r2, r0
 800c788:	460b      	mov	r3, r1
 800c78a:	4620      	mov	r0, r4
 800c78c:	4629      	mov	r1, r5
 800c78e:	f7f3 fd7d 	bl	800028c <__adddf3>
 800c792:	4602      	mov	r2, r0
 800c794:	460b      	mov	r3, r1
 800c796:	4610      	mov	r0, r2
 800c798:	4619      	mov	r1, r3
 800c79a:	f7f4 fa25 	bl	8000be8 <__aeabi_d2f>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	4a7b      	ldr	r2, [pc, #492]	; (800c990 <PS4Tune+0x580>)
 800c7a2:	6013      	str	r3, [r2, #0]
			break;
 800c7a4:	e125      	b.n	800c9f2 <PS4Tune+0x5e2>
		case 2:
			BI += ps4.joyR_y * 0.0001;
 800c7a6:	4b76      	ldr	r3, [pc, #472]	; (800c980 <PS4Tune+0x570>)
 800c7a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7f3 fecc 	bl	8000548 <__aeabi_f2d>
 800c7b0:	a36f      	add	r3, pc, #444	; (adr r3, 800c970 <PS4Tune+0x560>)
 800c7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b6:	f7f3 ff1f 	bl	80005f8 <__aeabi_dmul>
 800c7ba:	4602      	mov	r2, r0
 800c7bc:	460b      	mov	r3, r1
 800c7be:	4614      	mov	r4, r2
 800c7c0:	461d      	mov	r5, r3
 800c7c2:	4b74      	ldr	r3, [pc, #464]	; (800c994 <PS4Tune+0x584>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f7f3 febe 	bl	8000548 <__aeabi_f2d>
 800c7cc:	4602      	mov	r2, r0
 800c7ce:	460b      	mov	r3, r1
 800c7d0:	4620      	mov	r0, r4
 800c7d2:	4629      	mov	r1, r5
 800c7d4:	f7f3 fd5a 	bl	800028c <__adddf3>
 800c7d8:	4602      	mov	r2, r0
 800c7da:	460b      	mov	r3, r1
 800c7dc:	4610      	mov	r0, r2
 800c7de:	4619      	mov	r1, r3
 800c7e0:	f7f4 fa02 	bl	8000be8 <__aeabi_d2f>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	4a6b      	ldr	r2, [pc, #428]	; (800c994 <PS4Tune+0x584>)
 800c7e8:	6013      	str	r3, [r2, #0]
			break;
 800c7ea:	e102      	b.n	800c9f2 <PS4Tune+0x5e2>
		case 3:
			CI += ps4.joyR_y * 0.0001;
 800c7ec:	4b64      	ldr	r3, [pc, #400]	; (800c980 <PS4Tune+0x570>)
 800c7ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7f3 fea9 	bl	8000548 <__aeabi_f2d>
 800c7f6:	a35e      	add	r3, pc, #376	; (adr r3, 800c970 <PS4Tune+0x560>)
 800c7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fc:	f7f3 fefc 	bl	80005f8 <__aeabi_dmul>
 800c800:	4602      	mov	r2, r0
 800c802:	460b      	mov	r3, r1
 800c804:	4614      	mov	r4, r2
 800c806:	461d      	mov	r5, r3
 800c808:	4b63      	ldr	r3, [pc, #396]	; (800c998 <PS4Tune+0x588>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4618      	mov	r0, r3
 800c80e:	f7f3 fe9b 	bl	8000548 <__aeabi_f2d>
 800c812:	4602      	mov	r2, r0
 800c814:	460b      	mov	r3, r1
 800c816:	4620      	mov	r0, r4
 800c818:	4629      	mov	r1, r5
 800c81a:	f7f3 fd37 	bl	800028c <__adddf3>
 800c81e:	4602      	mov	r2, r0
 800c820:	460b      	mov	r3, r1
 800c822:	4610      	mov	r0, r2
 800c824:	4619      	mov	r1, r3
 800c826:	f7f4 f9df 	bl	8000be8 <__aeabi_d2f>
 800c82a:	4603      	mov	r3, r0
 800c82c:	4a5a      	ldr	r2, [pc, #360]	; (800c998 <PS4Tune+0x588>)
 800c82e:	6013      	str	r3, [r2, #0]
			break;
 800c830:	e0df      	b.n	800c9f2 <PS4Tune+0x5e2>
		case 4:
			DI += ps4.joyR_y * 0.0001;
 800c832:	4b53      	ldr	r3, [pc, #332]	; (800c980 <PS4Tune+0x570>)
 800c834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c836:	4618      	mov	r0, r3
 800c838:	f7f3 fe86 	bl	8000548 <__aeabi_f2d>
 800c83c:	a34c      	add	r3, pc, #304	; (adr r3, 800c970 <PS4Tune+0x560>)
 800c83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c842:	f7f3 fed9 	bl	80005f8 <__aeabi_dmul>
 800c846:	4602      	mov	r2, r0
 800c848:	460b      	mov	r3, r1
 800c84a:	4614      	mov	r4, r2
 800c84c:	461d      	mov	r5, r3
 800c84e:	4b53      	ldr	r3, [pc, #332]	; (800c99c <PS4Tune+0x58c>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	4618      	mov	r0, r3
 800c854:	f7f3 fe78 	bl	8000548 <__aeabi_f2d>
 800c858:	4602      	mov	r2, r0
 800c85a:	460b      	mov	r3, r1
 800c85c:	4620      	mov	r0, r4
 800c85e:	4629      	mov	r1, r5
 800c860:	f7f3 fd14 	bl	800028c <__adddf3>
 800c864:	4602      	mov	r2, r0
 800c866:	460b      	mov	r3, r1
 800c868:	4610      	mov	r0, r2
 800c86a:	4619      	mov	r1, r3
 800c86c:	f7f4 f9bc 	bl	8000be8 <__aeabi_d2f>
 800c870:	4603      	mov	r3, r0
 800c872:	4a4a      	ldr	r2, [pc, #296]	; (800c99c <PS4Tune+0x58c>)
 800c874:	6013      	str	r3, [r2, #0]
			break;
 800c876:	e0bc      	b.n	800c9f2 <PS4Tune+0x5e2>
		}
	}
	else
	{
		switch(wheel)
 800c878:	4b44      	ldr	r3, [pc, #272]	; (800c98c <PS4Tune+0x57c>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	3b01      	subs	r3, #1
 800c87e:	2b03      	cmp	r3, #3
 800c880:	f200 80b7 	bhi.w	800c9f2 <PS4Tune+0x5e2>
 800c884:	a201      	add	r2, pc, #4	; (adr r2, 800c88c <PS4Tune+0x47c>)
 800c886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c88a:	bf00      	nop
 800c88c:	0800c89d 	.word	0x0800c89d
 800c890:	0800c8e3 	.word	0x0800c8e3
 800c894:	0800c929 	.word	0x0800c929
 800c898:	0800c9ad 	.word	0x0800c9ad
		{
		case 1:
			AD += ps4.joyR_y * 0.00001;
 800c89c:	4b38      	ldr	r3, [pc, #224]	; (800c980 <PS4Tune+0x570>)
 800c89e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f7f3 fe51 	bl	8000548 <__aeabi_f2d>
 800c8a6:	a334      	add	r3, pc, #208	; (adr r3, 800c978 <PS4Tune+0x568>)
 800c8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ac:	f7f3 fea4 	bl	80005f8 <__aeabi_dmul>
 800c8b0:	4602      	mov	r2, r0
 800c8b2:	460b      	mov	r3, r1
 800c8b4:	4614      	mov	r4, r2
 800c8b6:	461d      	mov	r5, r3
 800c8b8:	4b39      	ldr	r3, [pc, #228]	; (800c9a0 <PS4Tune+0x590>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f7f3 fe43 	bl	8000548 <__aeabi_f2d>
 800c8c2:	4602      	mov	r2, r0
 800c8c4:	460b      	mov	r3, r1
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	4629      	mov	r1, r5
 800c8ca:	f7f3 fcdf 	bl	800028c <__adddf3>
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	460b      	mov	r3, r1
 800c8d2:	4610      	mov	r0, r2
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	f7f4 f987 	bl	8000be8 <__aeabi_d2f>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	4a30      	ldr	r2, [pc, #192]	; (800c9a0 <PS4Tune+0x590>)
 800c8de:	6013      	str	r3, [r2, #0]
			break;
 800c8e0:	e087      	b.n	800c9f2 <PS4Tune+0x5e2>
		case 2:
			BD += ps4.joyR_y * 0.00001;
 800c8e2:	4b27      	ldr	r3, [pc, #156]	; (800c980 <PS4Tune+0x570>)
 800c8e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7f3 fe2e 	bl	8000548 <__aeabi_f2d>
 800c8ec:	a322      	add	r3, pc, #136	; (adr r3, 800c978 <PS4Tune+0x568>)
 800c8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f2:	f7f3 fe81 	bl	80005f8 <__aeabi_dmul>
 800c8f6:	4602      	mov	r2, r0
 800c8f8:	460b      	mov	r3, r1
 800c8fa:	4614      	mov	r4, r2
 800c8fc:	461d      	mov	r5, r3
 800c8fe:	4b29      	ldr	r3, [pc, #164]	; (800c9a4 <PS4Tune+0x594>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	4618      	mov	r0, r3
 800c904:	f7f3 fe20 	bl	8000548 <__aeabi_f2d>
 800c908:	4602      	mov	r2, r0
 800c90a:	460b      	mov	r3, r1
 800c90c:	4620      	mov	r0, r4
 800c90e:	4629      	mov	r1, r5
 800c910:	f7f3 fcbc 	bl	800028c <__adddf3>
 800c914:	4602      	mov	r2, r0
 800c916:	460b      	mov	r3, r1
 800c918:	4610      	mov	r0, r2
 800c91a:	4619      	mov	r1, r3
 800c91c:	f7f4 f964 	bl	8000be8 <__aeabi_d2f>
 800c920:	4603      	mov	r3, r0
 800c922:	4a20      	ldr	r2, [pc, #128]	; (800c9a4 <PS4Tune+0x594>)
 800c924:	6013      	str	r3, [r2, #0]
			break;
 800c926:	e064      	b.n	800c9f2 <PS4Tune+0x5e2>
		case 3:
			CD += ps4.joyR_y * 0.00001;
 800c928:	4b15      	ldr	r3, [pc, #84]	; (800c980 <PS4Tune+0x570>)
 800c92a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c92c:	4618      	mov	r0, r3
 800c92e:	f7f3 fe0b 	bl	8000548 <__aeabi_f2d>
 800c932:	a311      	add	r3, pc, #68	; (adr r3, 800c978 <PS4Tune+0x568>)
 800c934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c938:	f7f3 fe5e 	bl	80005f8 <__aeabi_dmul>
 800c93c:	4602      	mov	r2, r0
 800c93e:	460b      	mov	r3, r1
 800c940:	4614      	mov	r4, r2
 800c942:	461d      	mov	r5, r3
 800c944:	4b18      	ldr	r3, [pc, #96]	; (800c9a8 <PS4Tune+0x598>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4618      	mov	r0, r3
 800c94a:	f7f3 fdfd 	bl	8000548 <__aeabi_f2d>
 800c94e:	4602      	mov	r2, r0
 800c950:	460b      	mov	r3, r1
 800c952:	4620      	mov	r0, r4
 800c954:	4629      	mov	r1, r5
 800c956:	f7f3 fc99 	bl	800028c <__adddf3>
 800c95a:	4602      	mov	r2, r0
 800c95c:	460b      	mov	r3, r1
 800c95e:	4610      	mov	r0, r2
 800c960:	4619      	mov	r1, r3
 800c962:	f7f4 f941 	bl	8000be8 <__aeabi_d2f>
 800c966:	4603      	mov	r3, r0
 800c968:	4a0f      	ldr	r2, [pc, #60]	; (800c9a8 <PS4Tune+0x598>)
 800c96a:	6013      	str	r3, [r2, #0]
			break;
 800c96c:	e041      	b.n	800c9f2 <PS4Tune+0x5e2>
 800c96e:	bf00      	nop
 800c970:	eb1c432d 	.word	0xeb1c432d
 800c974:	3f1a36e2 	.word	0x3f1a36e2
 800c978:	88e368f1 	.word	0x88e368f1
 800c97c:	3ee4f8b5 	.word	0x3ee4f8b5
 800c980:	20009e30 	.word	0x20009e30
 800c984:	20009bb0 	.word	0x20009bb0
 800c988:	20007190 	.word	0x20007190
 800c98c:	200064f8 	.word	0x200064f8
 800c990:	20007188 	.word	0x20007188
 800c994:	20009204 	.word	0x20009204
 800c998:	200096a4 	.word	0x200096a4
 800c99c:	20006a1c 	.word	0x20006a1c
 800c9a0:	2000a0fc 	.word	0x2000a0fc
 800c9a4:	20007184 	.word	0x20007184
 800c9a8:	200064fc 	.word	0x200064fc
		case 4:
			DD += ps4.joyR_y * 0.00001;
 800c9ac:	4b80      	ldr	r3, [pc, #512]	; (800cbb0 <PS4Tune+0x7a0>)
 800c9ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f7f3 fdc9 	bl	8000548 <__aeabi_f2d>
 800c9b6:	a37c      	add	r3, pc, #496	; (adr r3, 800cba8 <PS4Tune+0x798>)
 800c9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9bc:	f7f3 fe1c 	bl	80005f8 <__aeabi_dmul>
 800c9c0:	4602      	mov	r2, r0
 800c9c2:	460b      	mov	r3, r1
 800c9c4:	4614      	mov	r4, r2
 800c9c6:	461d      	mov	r5, r3
 800c9c8:	4b7a      	ldr	r3, [pc, #488]	; (800cbb4 <PS4Tune+0x7a4>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f7f3 fdbb 	bl	8000548 <__aeabi_f2d>
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	460b      	mov	r3, r1
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	4629      	mov	r1, r5
 800c9da:	f7f3 fc57 	bl	800028c <__adddf3>
 800c9de:	4602      	mov	r2, r0
 800c9e0:	460b      	mov	r3, r1
 800c9e2:	4610      	mov	r0, r2
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	f7f4 f8ff 	bl	8000be8 <__aeabi_d2f>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	4a71      	ldr	r2, [pc, #452]	; (800cbb4 <PS4Tune+0x7a4>)
 800c9ee:	6013      	str	r3, [r2, #0]
			break;
 800c9f0:	bf00      	nop
		}
	}

	if(ps4.button == OPTION)
 800c9f2:	4b6f      	ldr	r3, [pc, #444]	; (800cbb0 <PS4Tune+0x7a0>)
 800c9f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9fa:	f040 80b7 	bne.w	800cb6c <PS4Tune+0x75c>
	{
		while(ps4.button == OPTION);
 800c9fe:	bf00      	nop
 800ca00:	4b6b      	ldr	r3, [pc, #428]	; (800cbb0 <PS4Tune+0x7a0>)
 800ca02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca08:	d0fa      	beq.n	800ca00 <PS4Tune+0x5f0>
		switch(wheel)
 800ca0a:	4b6b      	ldr	r3, [pc, #428]	; (800cbb8 <PS4Tune+0x7a8>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	3b01      	subs	r3, #1
 800ca10:	2b03      	cmp	r3, #3
 800ca12:	f200 80ac 	bhi.w	800cb6e <PS4Tune+0x75e>
 800ca16:	a201      	add	r2, pc, #4	; (adr r2, 800ca1c <PS4Tune+0x60c>)
 800ca18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca1c:	0800ca2d 	.word	0x0800ca2d
 800ca20:	0800ca7d 	.word	0x0800ca7d
 800ca24:	0800cacd 	.word	0x0800cacd
 800ca28:	0800cb1d 	.word	0x0800cb1d
		{
		case 1:
			fFLeftVG[3] = AP;
 800ca2c:	4b63      	ldr	r3, [pc, #396]	; (800cbbc <PS4Tune+0x7ac>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	4a63      	ldr	r2, [pc, #396]	; (800cbc0 <PS4Tune+0x7b0>)
 800ca32:	60d3      	str	r3, [r2, #12]
			fFLeftVG[4] = AI;
 800ca34:	4b63      	ldr	r3, [pc, #396]	; (800cbc4 <PS4Tune+0x7b4>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	4a61      	ldr	r2, [pc, #388]	; (800cbc0 <PS4Tune+0x7b0>)
 800ca3a:	6113      	str	r3, [r2, #16]
			fFLeftVG[5] = AD;
 800ca3c:	4b62      	ldr	r3, [pc, #392]	; (800cbc8 <PS4Tune+0x7b8>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4a5f      	ldr	r2, [pc, #380]	; (800cbc0 <PS4Tune+0x7b0>)
 800ca42:	6153      	str	r3, [r2, #20]
			PIDGainSet(KP, AP, &fleft_vel);
 800ca44:	4b5d      	ldr	r3, [pc, #372]	; (800cbbc <PS4Tune+0x7ac>)
 800ca46:	edd3 7a00 	vldr	s15, [r3]
 800ca4a:	4960      	ldr	r1, [pc, #384]	; (800cbcc <PS4Tune+0x7bc>)
 800ca4c:	eeb0 0a67 	vmov.f32	s0, s15
 800ca50:	2004      	movs	r0, #4
 800ca52:	f7f8 ff74 	bl	800593e <PIDGainSet>
			PIDGainSet(KI, AI, &fleft_vel);
 800ca56:	4b5b      	ldr	r3, [pc, #364]	; (800cbc4 <PS4Tune+0x7b4>)
 800ca58:	edd3 7a00 	vldr	s15, [r3]
 800ca5c:	495b      	ldr	r1, [pc, #364]	; (800cbcc <PS4Tune+0x7bc>)
 800ca5e:	eeb0 0a67 	vmov.f32	s0, s15
 800ca62:	2005      	movs	r0, #5
 800ca64:	f7f8 ff6b 	bl	800593e <PIDGainSet>
			PIDGainSet(KD, AD, &fleft_vel);
 800ca68:	4b57      	ldr	r3, [pc, #348]	; (800cbc8 <PS4Tune+0x7b8>)
 800ca6a:	edd3 7a00 	vldr	s15, [r3]
 800ca6e:	4957      	ldr	r1, [pc, #348]	; (800cbcc <PS4Tune+0x7bc>)
 800ca70:	eeb0 0a67 	vmov.f32	s0, s15
 800ca74:	2006      	movs	r0, #6
 800ca76:	f7f8 ff62 	bl	800593e <PIDGainSet>
			break;
 800ca7a:	e078      	b.n	800cb6e <PS4Tune+0x75e>

		case 2:
			fFRightVG[3] = BP;
 800ca7c:	4b54      	ldr	r3, [pc, #336]	; (800cbd0 <PS4Tune+0x7c0>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4a54      	ldr	r2, [pc, #336]	; (800cbd4 <PS4Tune+0x7c4>)
 800ca82:	60d3      	str	r3, [r2, #12]
			fFRightVG[4] = BI;
 800ca84:	4b54      	ldr	r3, [pc, #336]	; (800cbd8 <PS4Tune+0x7c8>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	4a52      	ldr	r2, [pc, #328]	; (800cbd4 <PS4Tune+0x7c4>)
 800ca8a:	6113      	str	r3, [r2, #16]
			fFRightVG[5] = BD;
 800ca8c:	4b53      	ldr	r3, [pc, #332]	; (800cbdc <PS4Tune+0x7cc>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	4a50      	ldr	r2, [pc, #320]	; (800cbd4 <PS4Tune+0x7c4>)
 800ca92:	6153      	str	r3, [r2, #20]
			PIDGainSet(KP, BP, &fright_vel);
 800ca94:	4b4e      	ldr	r3, [pc, #312]	; (800cbd0 <PS4Tune+0x7c0>)
 800ca96:	edd3 7a00 	vldr	s15, [r3]
 800ca9a:	4951      	ldr	r1, [pc, #324]	; (800cbe0 <PS4Tune+0x7d0>)
 800ca9c:	eeb0 0a67 	vmov.f32	s0, s15
 800caa0:	2004      	movs	r0, #4
 800caa2:	f7f8 ff4c 	bl	800593e <PIDGainSet>
			PIDGainSet(KI, BI, &fright_vel);
 800caa6:	4b4c      	ldr	r3, [pc, #304]	; (800cbd8 <PS4Tune+0x7c8>)
 800caa8:	edd3 7a00 	vldr	s15, [r3]
 800caac:	494c      	ldr	r1, [pc, #304]	; (800cbe0 <PS4Tune+0x7d0>)
 800caae:	eeb0 0a67 	vmov.f32	s0, s15
 800cab2:	2005      	movs	r0, #5
 800cab4:	f7f8 ff43 	bl	800593e <PIDGainSet>
			PIDGainSet(KD, BD, &fright_vel);
 800cab8:	4b48      	ldr	r3, [pc, #288]	; (800cbdc <PS4Tune+0x7cc>)
 800caba:	edd3 7a00 	vldr	s15, [r3]
 800cabe:	4948      	ldr	r1, [pc, #288]	; (800cbe0 <PS4Tune+0x7d0>)
 800cac0:	eeb0 0a67 	vmov.f32	s0, s15
 800cac4:	2006      	movs	r0, #6
 800cac6:	f7f8 ff3a 	bl	800593e <PIDGainSet>
			break;
 800caca:	e050      	b.n	800cb6e <PS4Tune+0x75e>

		case 3:
			fBLeftVG[3] = CP;
 800cacc:	4b45      	ldr	r3, [pc, #276]	; (800cbe4 <PS4Tune+0x7d4>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a45      	ldr	r2, [pc, #276]	; (800cbe8 <PS4Tune+0x7d8>)
 800cad2:	60d3      	str	r3, [r2, #12]
			fBLeftVG[4] = CI;
 800cad4:	4b45      	ldr	r3, [pc, #276]	; (800cbec <PS4Tune+0x7dc>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4a43      	ldr	r2, [pc, #268]	; (800cbe8 <PS4Tune+0x7d8>)
 800cada:	6113      	str	r3, [r2, #16]
			fBLeftVG[5] = CD;
 800cadc:	4b44      	ldr	r3, [pc, #272]	; (800cbf0 <PS4Tune+0x7e0>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4a41      	ldr	r2, [pc, #260]	; (800cbe8 <PS4Tune+0x7d8>)
 800cae2:	6153      	str	r3, [r2, #20]
			PIDGainSet(KP, CP, &bleft_vel);
 800cae4:	4b3f      	ldr	r3, [pc, #252]	; (800cbe4 <PS4Tune+0x7d4>)
 800cae6:	edd3 7a00 	vldr	s15, [r3]
 800caea:	4942      	ldr	r1, [pc, #264]	; (800cbf4 <PS4Tune+0x7e4>)
 800caec:	eeb0 0a67 	vmov.f32	s0, s15
 800caf0:	2004      	movs	r0, #4
 800caf2:	f7f8 ff24 	bl	800593e <PIDGainSet>
			PIDGainSet(KI, CI, &bleft_vel);
 800caf6:	4b3d      	ldr	r3, [pc, #244]	; (800cbec <PS4Tune+0x7dc>)
 800caf8:	edd3 7a00 	vldr	s15, [r3]
 800cafc:	493d      	ldr	r1, [pc, #244]	; (800cbf4 <PS4Tune+0x7e4>)
 800cafe:	eeb0 0a67 	vmov.f32	s0, s15
 800cb02:	2005      	movs	r0, #5
 800cb04:	f7f8 ff1b 	bl	800593e <PIDGainSet>
			PIDGainSet(KD, CD, &bleft_vel);
 800cb08:	4b39      	ldr	r3, [pc, #228]	; (800cbf0 <PS4Tune+0x7e0>)
 800cb0a:	edd3 7a00 	vldr	s15, [r3]
 800cb0e:	4939      	ldr	r1, [pc, #228]	; (800cbf4 <PS4Tune+0x7e4>)
 800cb10:	eeb0 0a67 	vmov.f32	s0, s15
 800cb14:	2006      	movs	r0, #6
 800cb16:	f7f8 ff12 	bl	800593e <PIDGainSet>
			break;
 800cb1a:	e028      	b.n	800cb6e <PS4Tune+0x75e>

		case 4:
			fBRightVG[3] = DP;
 800cb1c:	4b36      	ldr	r3, [pc, #216]	; (800cbf8 <PS4Tune+0x7e8>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	4a36      	ldr	r2, [pc, #216]	; (800cbfc <PS4Tune+0x7ec>)
 800cb22:	60d3      	str	r3, [r2, #12]
			fBRightVG[4] = DI;
 800cb24:	4b36      	ldr	r3, [pc, #216]	; (800cc00 <PS4Tune+0x7f0>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	4a34      	ldr	r2, [pc, #208]	; (800cbfc <PS4Tune+0x7ec>)
 800cb2a:	6113      	str	r3, [r2, #16]
			fBRightVG[5] = DD;
 800cb2c:	4b21      	ldr	r3, [pc, #132]	; (800cbb4 <PS4Tune+0x7a4>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4a32      	ldr	r2, [pc, #200]	; (800cbfc <PS4Tune+0x7ec>)
 800cb32:	6153      	str	r3, [r2, #20]
			PIDGainSet(KP, DP, &bright_vel);
 800cb34:	4b30      	ldr	r3, [pc, #192]	; (800cbf8 <PS4Tune+0x7e8>)
 800cb36:	edd3 7a00 	vldr	s15, [r3]
 800cb3a:	4932      	ldr	r1, [pc, #200]	; (800cc04 <PS4Tune+0x7f4>)
 800cb3c:	eeb0 0a67 	vmov.f32	s0, s15
 800cb40:	2004      	movs	r0, #4
 800cb42:	f7f8 fefc 	bl	800593e <PIDGainSet>
			PIDGainSet(KI, DI, &bright_vel);
 800cb46:	4b2e      	ldr	r3, [pc, #184]	; (800cc00 <PS4Tune+0x7f0>)
 800cb48:	edd3 7a00 	vldr	s15, [r3]
 800cb4c:	492d      	ldr	r1, [pc, #180]	; (800cc04 <PS4Tune+0x7f4>)
 800cb4e:	eeb0 0a67 	vmov.f32	s0, s15
 800cb52:	2005      	movs	r0, #5
 800cb54:	f7f8 fef3 	bl	800593e <PIDGainSet>
			PIDGainSet(KD, DD, &bright_vel);
 800cb58:	4b16      	ldr	r3, [pc, #88]	; (800cbb4 <PS4Tune+0x7a4>)
 800cb5a:	edd3 7a00 	vldr	s15, [r3]
 800cb5e:	4929      	ldr	r1, [pc, #164]	; (800cc04 <PS4Tune+0x7f4>)
 800cb60:	eeb0 0a67 	vmov.f32	s0, s15
 800cb64:	2006      	movs	r0, #6
 800cb66:	f7f8 feea 	bl	800593e <PIDGainSet>
			break;
 800cb6a:	e000      	b.n	800cb6e <PS4Tune+0x75e>
		}
	}
 800cb6c:	bf00      	nop

	if(HAL_GetTick() - before >= TunePIDMode)
 800cb6e:	f001 fddf 	bl	800e730 <HAL_GetTick>
 800cb72:	4603      	mov	r3, r0
 800cb74:	4a24      	ldr	r2, [pc, #144]	; (800cc08 <PS4Tune+0x7f8>)
 800cb76:	6812      	ldr	r2, [r2, #0]
 800cb78:	1a9b      	subs	r3, r3, r2
 800cb7a:	2b7c      	cmp	r3, #124	; 0x7c
 800cb7c:	d911      	bls.n	800cba2 <PS4Tune+0x792>
	{
		led3 = !led3;
 800cb7e:	4b23      	ldr	r3, [pc, #140]	; (800cc0c <PS4Tune+0x7fc>)
 800cb80:	785b      	ldrb	r3, [r3, #1]
 800cb82:	b25b      	sxtb	r3, r3
 800cb84:	4a21      	ldr	r2, [pc, #132]	; (800cc0c <PS4Tune+0x7fc>)
 800cb86:	43db      	mvns	r3, r3
 800cb88:	b2db      	uxtb	r3, r3
 800cb8a:	09db      	lsrs	r3, r3, #7
 800cb8c:	b2d9      	uxtb	r1, r3
 800cb8e:	7853      	ldrb	r3, [r2, #1]
 800cb90:	f361 13c7 	bfi	r3, r1, #7, #1
 800cb94:	7053      	strb	r3, [r2, #1]
		before = HAL_GetTick();
 800cb96:	f001 fdcb 	bl	800e730 <HAL_GetTick>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	461a      	mov	r2, r3
 800cb9e:	4b1a      	ldr	r3, [pc, #104]	; (800cc08 <PS4Tune+0x7f8>)
 800cba0:	601a      	str	r2, [r3, #0]
	}
}
 800cba2:	bf00      	nop
 800cba4:	bdb0      	pop	{r4, r5, r7, pc}
 800cba6:	bf00      	nop
 800cba8:	88e368f1 	.word	0x88e368f1
 800cbac:	3ee4f8b5 	.word	0x3ee4f8b5
 800cbb0:	20009e30 	.word	0x20009e30
 800cbb4:	2000988c 	.word	0x2000988c
 800cbb8:	200064f8 	.word	0x200064f8
 800cbbc:	2000a120 	.word	0x2000a120
 800cbc0:	20000008 	.word	0x20000008
 800cbc4:	20007188 	.word	0x20007188
 800cbc8:	2000a0fc 	.word	0x2000a0fc
 800cbcc:	2000772c 	.word	0x2000772c
 800cbd0:	200074b0 	.word	0x200074b0
 800cbd4:	20000024 	.word	0x20000024
 800cbd8:	20009204 	.word	0x20009204
 800cbdc:	20007184 	.word	0x20007184
 800cbe0:	20007274 	.word	0x20007274
 800cbe4:	20009538 	.word	0x20009538
 800cbe8:	20000040 	.word	0x20000040
 800cbec:	200096a4 	.word	0x200096a4
 800cbf0:	200064fc 	.word	0x200064fc
 800cbf4:	20006990 	.word	0x20006990
 800cbf8:	20009bb0 	.word	0x20009bb0
 800cbfc:	2000005c 	.word	0x2000005c
 800cc00:	20006a1c 	.word	0x20006a1c
 800cc04:	20009b4c 	.word	0x20009b4c
 800cc08:	200071a4 	.word	0x200071a4
 800cc0c:	40020814 	.word	0x40020814

0800cc10 <ILI9341_Init_List>:
Tune_Float_t lcdFloatList[NUM_FLOAT_UPDATE]={
//		varF(ps4.joyR_x, 0, 0),
};


void ILI9341_Init_List(void){
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b084      	sub	sp, #16
 800cc14:	af02      	add	r7, sp, #8
	ILI9341row = 5;
 800cc16:	4b23      	ldr	r3, [pc, #140]	; (800cca4 <ILI9341_Init_List+0x94>)
 800cc18:	2205      	movs	r2, #5
 800cc1a:	601a      	str	r2, [r3, #0]

	for(int i=0; i<NUM_INT_UPDATE; i++){
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	607b      	str	r3, [r7, #4]
 800cc20:	e018      	b.n	800cc54 <ILI9341_Init_List+0x44>
		ILI9341_Draw_String(5, ILI9341row, WHITE, BLACK, lcdIntList[i].varName, 2);
 800cc22:	4b20      	ldr	r3, [pc, #128]	; (800cca4 <ILI9341_Init_List+0x94>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	4619      	mov	r1, r3
 800cc28:	4a1f      	ldr	r2, [pc, #124]	; (800cca8 <ILI9341_Init_List+0x98>)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	011b      	lsls	r3, r3, #4
 800cc2e:	4413      	add	r3, r2
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	2202      	movs	r2, #2
 800cc34:	9201      	str	r2, [sp, #4]
 800cc36:	9300      	str	r3, [sp, #0]
 800cc38:	2300      	movs	r3, #0
 800cc3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc3e:	2005      	movs	r0, #5
 800cc40:	f7f7 fad4 	bl	80041ec <ILI9341_Draw_String>
		ILI9341row += 15;
 800cc44:	4b17      	ldr	r3, [pc, #92]	; (800cca4 <ILI9341_Init_List+0x94>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	330f      	adds	r3, #15
 800cc4a:	4a16      	ldr	r2, [pc, #88]	; (800cca4 <ILI9341_Init_List+0x94>)
 800cc4c:	6013      	str	r3, [r2, #0]
	for(int i=0; i<NUM_INT_UPDATE; i++){
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	3301      	adds	r3, #1
 800cc52:	607b      	str	r3, [r7, #4]
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	dde3      	ble.n	800cc22 <ILI9341_Init_List+0x12>
	}

	for(int i=0; i<NUM_FLOAT_UPDATE; i++){
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	603b      	str	r3, [r7, #0]
 800cc5e:	e018      	b.n	800cc92 <ILI9341_Init_List+0x82>
		ILI9341_Draw_String(5, ILI9341row, WHITE, BLACK, lcdFloatList[i].varName, 2);
 800cc60:	4b10      	ldr	r3, [pc, #64]	; (800cca4 <ILI9341_Init_List+0x94>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	4619      	mov	r1, r3
 800cc66:	4a11      	ldr	r2, [pc, #68]	; (800ccac <ILI9341_Init_List+0x9c>)
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	011b      	lsls	r3, r3, #4
 800cc6c:	4413      	add	r3, r2
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	2202      	movs	r2, #2
 800cc72:	9201      	str	r2, [sp, #4]
 800cc74:	9300      	str	r3, [sp, #0]
 800cc76:	2300      	movs	r3, #0
 800cc78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc7c:	2005      	movs	r0, #5
 800cc7e:	f7f7 fab5 	bl	80041ec <ILI9341_Draw_String>
		ILI9341row += 15;
 800cc82:	4b08      	ldr	r3, [pc, #32]	; (800cca4 <ILI9341_Init_List+0x94>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	330f      	adds	r3, #15
 800cc88:	4a06      	ldr	r2, [pc, #24]	; (800cca4 <ILI9341_Init_List+0x94>)
 800cc8a:	6013      	str	r3, [r2, #0]
	for(int i=0; i<NUM_FLOAT_UPDATE; i++){
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	3301      	adds	r3, #1
 800cc90:	603b      	str	r3, [r7, #0]
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	dde3      	ble.n	800cc60 <ILI9341_Init_List+0x50>
	}
}
 800cc98:	bf00      	nop
 800cc9a:	bf00      	nop
 800cc9c:	3708      	adds	r7, #8
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	2000675c 	.word	0x2000675c
 800cca8:	200002e4 	.word	0x200002e4
 800ccac:	200002f4 	.word	0x200002f4

0800ccb0 <DMA1_Stream0_IRQHandler>:
#include "dma.h"

/*I2C*/

void DMA1_Stream0_IRQHandler(void)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
 800ccb4:	4802      	ldr	r0, [pc, #8]	; (800ccc0 <DMA1_Stream0_IRQHandler+0x10>)
 800ccb6:	f002 febf 	bl	800fa38 <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_uart5_rx);

}
 800ccba:	bf00      	nop
 800ccbc:	bd80      	pop	{r7, pc}
 800ccbe:	bf00      	nop
 800ccc0:	20009dc4 	.word	0x20009dc4

0800ccc4 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hdma_usart3_rx);
	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
 800ccc8:	4802      	ldr	r0, [pc, #8]	; (800ccd4 <DMA1_Stream3_IRQHandler+0x10>)
 800ccca:	f002 feb5 	bl	800fa38 <HAL_DMA_IRQHandler>
}
 800ccce:	bf00      	nop
 800ccd0:	bd80      	pop	{r7, pc}
 800ccd2:	bf00      	nop
 800ccd4:	20006560 	.word	0x20006560

0800ccd8 <DMA1_Stream2_IRQHandler>:

void DMA1_Stream2_IRQHandler(void)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800ccdc:	4802      	ldr	r0, [pc, #8]	; (800cce8 <DMA1_Stream2_IRQHandler+0x10>)
 800ccde:	f002 feab 	bl	800fa38 <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
//	HAL_DMA_IRQHandler(&hi2c3_rx_dma);
}
 800cce2:	bf00      	nop
 800cce4:	bd80      	pop	{r7, pc}
 800cce6:	bf00      	nop
 800cce8:	20005a50 	.word	0x20005a50

0800ccec <DMA1_Stream1_IRQHandler>:

/*UART*/
void DMA1_Stream1_IRQHandler(void)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800ccf0:	4802      	ldr	r0, [pc, #8]	; (800ccfc <DMA1_Stream1_IRQHandler+0x10>)
 800ccf2:	f002 fea1 	bl	800fa38 <HAL_DMA_IRQHandler>
}
 800ccf6:	bf00      	nop
 800ccf8:	bd80      	pop	{r7, pc}
 800ccfa:	bf00      	nop
 800ccfc:	20005b94 	.word	0x20005b94

0800cd00 <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800cd04:	4802      	ldr	r0, [pc, #8]	; (800cd10 <DMA1_Stream4_IRQHandler+0x10>)
 800cd06:	f002 fe97 	bl	800fa38 <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_usart3_tx);
//	HAL_DMA_IRQHandler(&hi2c3_tx_dma);
}
 800cd0a:	bf00      	nop
 800cd0c:	bd80      	pop	{r7, pc}
 800cd0e:	bf00      	nop
 800cd10:	20006208 	.word	0x20006208

0800cd14 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800cd18:	4802      	ldr	r0, [pc, #8]	; (800cd24 <DMA1_Stream5_IRQHandler+0x10>)
 800cd1a:	f002 fe8d 	bl	800fa38 <HAL_DMA_IRQHandler>
}
 800cd1e:	bf00      	nop
 800cd20:	bd80      	pop	{r7, pc}
 800cd22:	bf00      	nop
 800cd24:	20005ab0 	.word	0x20005ab0

0800cd28 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	af00      	add	r7, sp, #0

//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800cd2c:	4802      	ldr	r0, [pc, #8]	; (800cd38 <DMA1_Stream6_IRQHandler+0x10>)
 800cd2e:	f002 fe83 	bl	800fa38 <HAL_DMA_IRQHandler>
}
 800cd32:	bf00      	nop
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	bf00      	nop
 800cd38:	20005d9c 	.word	0x20005d9c

0800cd3c <DMA1_Stream7_IRQHandler>:

void DMA1_Stream7_IRQHandler(void){
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
//	HAL_DMA_IRQHandler(&hi2c2_tx_dma);
	HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800cd40:	4802      	ldr	r0, [pc, #8]	; (800cd4c <DMA1_Stream7_IRQHandler+0x10>)
 800cd42:	f002 fe79 	bl	800fa38 <HAL_DMA_IRQHandler>
}
 800cd46:	bf00      	nop
 800cd48:	bd80      	pop	{r7, pc}
 800cd4a:	bf00      	nop
 800cd4c:	20006268 	.word	0x20006268

0800cd50 <DMA2_Stream0_IRQHandler>:


void DMA2_Stream0_IRQHandler(void)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc1);
 800cd54:	4802      	ldr	r0, [pc, #8]	; (800cd60 <DMA2_Stream0_IRQHandler+0x10>)
 800cd56:	f002 fe6f 	bl	800fa38 <HAL_DMA_IRQHandler>
}
 800cd5a:	bf00      	nop
 800cd5c:	bd80      	pop	{r7, pc}
 800cd5e:	bf00      	nop
 800cd60:	20006400 	.word	0x20006400

0800cd64 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc3);
 800cd68:	4802      	ldr	r0, [pc, #8]	; (800cd74 <DMA2_Stream1_IRQHandler+0x10>)
 800cd6a:	f002 fe65 	bl	800fa38 <HAL_DMA_IRQHandler>
}
 800cd6e:	bf00      	nop
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	20006310 	.word	0x20006310

0800cd78 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800cd7c:	4802      	ldr	r0, [pc, #8]	; (800cd88 <DMA2_Stream2_IRQHandler+0x10>)
 800cd7e:	f002 fe5b 	bl	800fa38 <HAL_DMA_IRQHandler>
}
 800cd82:	bf00      	nop
 800cd84:	bd80      	pop	{r7, pc}
 800cd86:	bf00      	nop
 800cd88:	20009ce4 	.word	0x20009ce4

0800cd8c <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc2);
 800cd90:	4802      	ldr	r0, [pc, #8]	; (800cd9c <DMA2_Stream3_IRQHandler+0x10>)
 800cd92:	f002 fe51 	bl	800fa38 <HAL_DMA_IRQHandler>
}
 800cd96:	bf00      	nop
 800cd98:	bd80      	pop	{r7, pc}
 800cd9a:	bf00      	nop
 800cd9c:	20006460 	.word	0x20006460

0800cda0 <DMA2_Stream5_IRQHandler>:

void DMA2_Stream5_IRQHandler(void)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800cda4:	4802      	ldr	r0, [pc, #8]	; (800cdb0 <DMA2_Stream5_IRQHandler+0x10>)
 800cda6:	f002 fe47 	bl	800fa38 <HAL_DMA_IRQHandler>
}
 800cdaa:	bf00      	nop
 800cdac:	bd80      	pop	{r7, pc}
 800cdae:	bf00      	nop
 800cdb0:	2000a128 	.word	0x2000a128

0800cdb4 <NMI_Handler>:
int _counter = 0;
/**
 * * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	af00      	add	r7, sp, #0

}
 800cdb8:	bf00      	nop
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr

0800cdc2 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800cdc2:	b480      	push	{r7}
 800cdc4:	af00      	add	r7, sp, #0

}
 800cdc6:	bf00      	nop
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr

0800cdd0 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	af00      	add	r7, sp, #0

	while(1){
 800cdd4:	e7fe      	b.n	800cdd4 <MemManage_Handler+0x4>

0800cdd6 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800cdd6:	b480      	push	{r7}
 800cdd8:	af00      	add	r7, sp, #0

}
 800cdda:	bf00      	nop
 800cddc:	46bd      	mov	sp, r7
 800cdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde2:	4770      	bx	lr

0800cde4 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800cde4:	b480      	push	{r7}
 800cde6:	af00      	add	r7, sp, #0

}
 800cde8:	bf00      	nop
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr

0800cdf2 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800cdf2:	b480      	push	{r7}
 800cdf4:	af00      	add	r7, sp, #0

}
 800cdf6:	bf00      	nop
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr

0800ce00 <TIM1_UP_TIM10_IRQHandler>:
//
//}


void TIM1_UP_TIM10_IRQHandler(void)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	af00      	add	r7, sp, #0
#ifdef USED_QEI1
	if (htim1.Instance -> CR1 == 129)
 800ce04:	4b12      	ldr	r3, [pc, #72]	; (800ce50 <TIM1_UP_TIM10_IRQHandler+0x50>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	2b81      	cmp	r3, #129	; 0x81
 800ce0c:	d109      	bne.n	800ce22 <TIM1_UP_TIM10_IRQHandler+0x22>
	{
		BIOS_QEI1.signbit += 1;
 800ce0e:	4b11      	ldr	r3, [pc, #68]	; (800ce54 <TIM1_UP_TIM10_IRQHandler+0x54>)
 800ce10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ce14:	b29b      	uxth	r3, r3
 800ce16:	3301      	adds	r3, #1
 800ce18:	b29b      	uxth	r3, r3
 800ce1a:	b21a      	sxth	r2, r3
 800ce1c:	4b0d      	ldr	r3, [pc, #52]	; (800ce54 <TIM1_UP_TIM10_IRQHandler+0x54>)
 800ce1e:	805a      	strh	r2, [r3, #2]
 800ce20:	e00d      	b.n	800ce3e <TIM1_UP_TIM10_IRQHandler+0x3e>
	}
	else if (htim1.Instance ->CR1 == 145)
 800ce22:	4b0b      	ldr	r3, [pc, #44]	; (800ce50 <TIM1_UP_TIM10_IRQHandler+0x50>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	2b91      	cmp	r3, #145	; 0x91
 800ce2a:	d108      	bne.n	800ce3e <TIM1_UP_TIM10_IRQHandler+0x3e>
	{
		BIOS_QEI1.signbit -= 1;
 800ce2c:	4b09      	ldr	r3, [pc, #36]	; (800ce54 <TIM1_UP_TIM10_IRQHandler+0x54>)
 800ce2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ce32:	b29b      	uxth	r3, r3
 800ce34:	3b01      	subs	r3, #1
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	b21a      	sxth	r2, r3
 800ce3a:	4b06      	ldr	r3, [pc, #24]	; (800ce54 <TIM1_UP_TIM10_IRQHandler+0x54>)
 800ce3c:	805a      	strh	r2, [r3, #2]
	}
	htim1.Instance -> SR = 0;
 800ce3e:	4b04      	ldr	r3, [pc, #16]	; (800ce50 <TIM1_UP_TIM10_IRQHandler+0x50>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	2200      	movs	r2, #0
 800ce44:	611a      	str	r2, [r3, #16]
	QEIDelay(100);
 800ce46:	2064      	movs	r0, #100	; 0x64
 800ce48:	f7f5 f866 	bl	8001f18 <QEIDelay>
#else
	HAL_TIM_IRQHandler(&htim1);
#endif
}
 800ce4c:	bf00      	nop
 800ce4e:	bd80      	pop	{r7, pc}
 800ce50:	20005f64 	.word	0x20005f64
 800ce54:	200064c4 	.word	0x200064c4

0800ce58 <TIM4_IRQHandler>:



void TIM4_IRQHandler(void)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	af00      	add	r7, sp, #0

#ifdef USED_QEI4
	if (htim4.Instance -> CR1 == 129)
 800ce5c:	4b12      	ldr	r3, [pc, #72]	; (800cea8 <TIM4_IRQHandler+0x50>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	2b81      	cmp	r3, #129	; 0x81
 800ce64:	d109      	bne.n	800ce7a <TIM4_IRQHandler+0x22>
	{
		BIOS_QEI4.signbit += 1;
 800ce66:	4b11      	ldr	r3, [pc, #68]	; (800ceac <TIM4_IRQHandler+0x54>)
 800ce68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ce6c:	b29b      	uxth	r3, r3
 800ce6e:	3301      	adds	r3, #1
 800ce70:	b29b      	uxth	r3, r3
 800ce72:	b21a      	sxth	r2, r3
 800ce74:	4b0d      	ldr	r3, [pc, #52]	; (800ceac <TIM4_IRQHandler+0x54>)
 800ce76:	805a      	strh	r2, [r3, #2]
 800ce78:	e00d      	b.n	800ce96 <TIM4_IRQHandler+0x3e>
	}
	else if (htim4.Instance ->CR1 == 145)
 800ce7a:	4b0b      	ldr	r3, [pc, #44]	; (800cea8 <TIM4_IRQHandler+0x50>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	2b91      	cmp	r3, #145	; 0x91
 800ce82:	d108      	bne.n	800ce96 <TIM4_IRQHandler+0x3e>
	{
		BIOS_QEI4.signbit -= 1;
 800ce84:	4b09      	ldr	r3, [pc, #36]	; (800ceac <TIM4_IRQHandler+0x54>)
 800ce86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ce8a:	b29b      	uxth	r3, r3
 800ce8c:	3b01      	subs	r3, #1
 800ce8e:	b29b      	uxth	r3, r3
 800ce90:	b21a      	sxth	r2, r3
 800ce92:	4b06      	ldr	r3, [pc, #24]	; (800ceac <TIM4_IRQHandler+0x54>)
 800ce94:	805a      	strh	r2, [r3, #2]
	}
	htim4.Instance -> SR = 0;
 800ce96:	4b04      	ldr	r3, [pc, #16]	; (800cea8 <TIM4_IRQHandler+0x50>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	611a      	str	r2, [r3, #16]
	QEIDelay(100);
 800ce9e:	2064      	movs	r0, #100	; 0x64
 800cea0:	f7f5 f83a 	bl	8001f18 <QEIDelay>
	HAL_TIM_IRQHandler(&htim4);

	return;
#endif

}
 800cea4:	bf00      	nop
 800cea6:	bd80      	pop	{r7, pc}
 800cea8:	20005b54 	.word	0x20005b54
 800ceac:	200064e8 	.word	0x200064e8

0800ceb0 <TIM8_UP_TIM13_IRQHandler>:



void TIM8_UP_TIM13_IRQHandler(void)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	af00      	add	r7, sp, #0
		BIOS_QEI6.signbit -= 1;
	}
	htim8.Instance -> SR = 0;
	QEIDelay(200);
#else
	HAL_TIM_IRQHandler(&htim8);
 800ceb4:	4803      	ldr	r0, [pc, #12]	; (800cec4 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800ceb6:	f006 ffd3 	bl	8013e60 <HAL_TIM_IRQHandler>
#endif
	HAL_TIM_IRQHandler(&htim13);
 800ceba:	4803      	ldr	r0, [pc, #12]	; (800cec8 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800cebc:	f006 ffd0 	bl	8013e60 <HAL_TIM_IRQHandler>
	return;
 800cec0:	bf00      	nop
}
 800cec2:	bd80      	pop	{r7, pc}
 800cec4:	20005b14 	.word	0x20005b14
 800cec8:	20005dfc 	.word	0x20005dfc

0800cecc <TIM2_IRQHandler>:



void TIM2_IRQHandler(void)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 800ced0:	4802      	ldr	r0, [pc, #8]	; (800cedc <TIM2_IRQHandler+0x10>)
 800ced2:	f006 ffc5 	bl	8013e60 <HAL_TIM_IRQHandler>
}
 800ced6:	bf00      	nop
 800ced8:	bd80      	pop	{r7, pc}
 800ceda:	bf00      	nop
 800cedc:	20006068 	.word	0x20006068

0800cee0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b082      	sub	sp, #8
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cef0:	d109      	bne.n	800cf06 <HAL_TIM_PeriodElapsedCallback+0x26>
		HAL_IncTick();
 800cef2:	f001 fc09 	bl	800e708 <HAL_IncTick>
		//		MUXUpdate(&MUX);
		SHIFTREGShift(&SR);
 800cef6:	4806      	ldr	r0, [pc, #24]	; (800cf10 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800cef8:	f7f5 f8d9 	bl	80020ae <SHIFTREGShift>
		counter++;
 800cefc:	4b05      	ldr	r3, [pc, #20]	; (800cf14 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	3301      	adds	r3, #1
 800cf02:	4a04      	ldr	r2, [pc, #16]	; (800cf14 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800cf04:	6013      	str	r3, [r2, #0]
	}
}
 800cf06:	bf00      	nop
 800cf08:	3708      	adds	r7, #8
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
 800cf0e:	bf00      	nop
 800cf10:	20009490 	.word	0x20009490
 800cf14:	20009598 	.word	0x20009598

0800cf18 <HAL_I2C_MasterRxCpltCallback>:


//Callback for I2C RXBuffer
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b082      	sub	sp, #8
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
	if(hi2c == ps4.hi2cps4){
 800cf20:	4b05      	ldr	r3, [pc, #20]	; (800cf38 <HAL_I2C_MasterRxCpltCallback+0x20>)
 800cf22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf24:	687a      	ldr	r2, [r7, #4]
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d102      	bne.n	800cf30 <HAL_I2C_MasterRxCpltCallback+0x18>
		PSxConnectDMA(&ps4);
 800cf2a:	4803      	ldr	r0, [pc, #12]	; (800cf38 <HAL_I2C_MasterRxCpltCallback+0x20>)
 800cf2c:	f7fb ffde 	bl	8008eec <PSxConnectDMA>
	}
}
 800cf30:	bf00      	nop
 800cf32:	3708      	adds	r7, #8
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}
 800cf38:	20009e30 	.word	0x20009e30

0800cf3c <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void){
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	af00      	add	r7, sp, #0
	HAL_I2C_EV_IRQHandler(&hi2c1);
 800cf40:	4802      	ldr	r0, [pc, #8]	; (800cf4c <I2C1_EV_IRQHandler+0x10>)
 800cf42:	f004 f81d 	bl	8010f80 <HAL_I2C_EV_IRQHandler>

}
 800cf46:	bf00      	nop
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	bf00      	nop
 800cf4c:	20006b64 	.word	0x20006b64

0800cf50 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void){
 800cf50:	b580      	push	{r7, lr}
 800cf52:	af00      	add	r7, sp, #0
	HAL_I2C_ER_IRQHandler(&hi2c1);
 800cf54:	480a      	ldr	r0, [pc, #40]	; (800cf80 <I2C1_ER_IRQHandler+0x30>)
 800cf56:	f004 f980 	bl	801125a <HAL_I2C_ER_IRQHandler>
	HAL_DMA_DeInit(&hi2c1_rx_dma);
 800cf5a:	480a      	ldr	r0, [pc, #40]	; (800cf84 <I2C1_ER_IRQHandler+0x34>)
 800cf5c:	f002 fc94 	bl	800f888 <HAL_DMA_DeInit>
	HAL_I2C_DeInit(&hi2c1);
 800cf60:	4807      	ldr	r0, [pc, #28]	; (800cf80 <I2C1_ER_IRQHandler+0x30>)
 800cf62:	f003 fec7 	bl	8010cf4 <HAL_I2C_DeInit>

	I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 800cf66:	4b08      	ldr	r3, [pc, #32]	; (800cf88 <I2C1_ER_IRQHandler+0x38>)
 800cf68:	2208      	movs	r2, #8
 800cf6a:	4906      	ldr	r1, [pc, #24]	; (800cf84 <I2C1_ER_IRQHandler+0x34>)
 800cf6c:	4804      	ldr	r0, [pc, #16]	; (800cf80 <I2C1_ER_IRQHandler+0x30>)
 800cf6e:	f7f6 fe1b 	bl	8003ba8 <I2CX_DMA_RX_Init>
//
//
//
	PSxInitDMA(&ps4, &hi2c1);
 800cf72:	4903      	ldr	r1, [pc, #12]	; (800cf80 <I2C1_ER_IRQHandler+0x30>)
 800cf74:	4805      	ldr	r0, [pc, #20]	; (800cf8c <I2C1_ER_IRQHandler+0x3c>)
 800cf76:	f7fb ffcc 	bl	8008f12 <PSxInitDMA>

}
 800cf7a:	bf00      	nop
 800cf7c:	bd80      	pop	{r7, pc}
 800cf7e:	bf00      	nop
 800cf80:	20006b64 	.word	0x20006b64
 800cf84:	20009dc4 	.word	0x20009dc4
 800cf88:	00061a80 	.word	0x00061a80
 800cf8c:	20009e30 	.word	0x20009e30

0800cf90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b08c      	sub	sp, #48	; 0x30
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	6879      	ldr	r1, [r7, #4]
 800cfa4:	201c      	movs	r0, #28
 800cfa6:	f002 fb7b 	bl	800f6a0 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800cfaa:	201c      	movs	r0, #28
 800cfac:	f002 fb94 	bl	800f6d8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	60fb      	str	r3, [r7, #12]
 800cfb4:	4b20      	ldr	r3, [pc, #128]	; (800d038 <HAL_InitTick+0xa8>)
 800cfb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfb8:	4a1f      	ldr	r2, [pc, #124]	; (800d038 <HAL_InitTick+0xa8>)
 800cfba:	f043 0301 	orr.w	r3, r3, #1
 800cfbe:	6413      	str	r3, [r2, #64]	; 0x40
 800cfc0:	4b1d      	ldr	r3, [pc, #116]	; (800d038 <HAL_InitTick+0xa8>)
 800cfc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfc4:	f003 0301 	and.w	r3, r3, #1
 800cfc8:	60fb      	str	r3, [r7, #12]
 800cfca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800cfcc:	f107 0210 	add.w	r2, r7, #16
 800cfd0:	f107 0314 	add.w	r3, r7, #20
 800cfd4:	4611      	mov	r1, r2
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f006 fa08 	bl	80133ec <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800cfdc:	f006 f9de 	bl	801339c <HAL_RCC_GetPCLK1Freq>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	005b      	lsls	r3, r3, #1
 800cfe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800cfe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe8:	4a14      	ldr	r2, [pc, #80]	; (800d03c <HAL_InitTick+0xac>)
 800cfea:	fba2 2303 	umull	r2, r3, r2, r3
 800cfee:	0c9b      	lsrs	r3, r3, #18
 800cff0:	3b01      	subs	r3, #1
 800cff2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800cff4:	4b12      	ldr	r3, [pc, #72]	; (800d040 <HAL_InitTick+0xb0>)
 800cff6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cffa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800cffc:	4b10      	ldr	r3, [pc, #64]	; (800d040 <HAL_InitTick+0xb0>)
 800cffe:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d002:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800d004:	4a0e      	ldr	r2, [pc, #56]	; (800d040 <HAL_InitTick+0xb0>)
 800d006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d008:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800d00a:	4b0d      	ldr	r3, [pc, #52]	; (800d040 <HAL_InitTick+0xb0>)
 800d00c:	2200      	movs	r2, #0
 800d00e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d010:	4b0b      	ldr	r3, [pc, #44]	; (800d040 <HAL_InitTick+0xb0>)
 800d012:	2200      	movs	r2, #0
 800d014:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800d016:	480a      	ldr	r0, [pc, #40]	; (800d040 <HAL_InitTick+0xb0>)
 800d018:	f006 fd7c 	bl	8013b14 <HAL_TIM_Base_Init>
 800d01c:	4603      	mov	r3, r0
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d104      	bne.n	800d02c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800d022:	4807      	ldr	r0, [pc, #28]	; (800d040 <HAL_InitTick+0xb0>)
 800d024:	f006 fdc5 	bl	8013bb2 <HAL_TIM_Base_Start_IT>
 800d028:	4603      	mov	r3, r0
 800d02a:	e000      	b.n	800d02e <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800d02c:	2301      	movs	r3, #1
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3730      	adds	r7, #48	; 0x30
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
 800d036:	bf00      	nop
 800d038:	40023800 	.word	0x40023800
 800d03c:	431bde83 	.word	0x431bde83
 800d040:	20006068 	.word	0x20006068

0800d044 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800d044:	b480      	push	{r7}
 800d046:	af00      	add	r7, sp, #0
	return 1;
 800d048:	2301      	movs	r3, #1
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr

0800d054 <_kill>:

int _kill(int pid, int sig)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b082      	sub	sp, #8
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800d05e:	f00c f91d 	bl	801929c <__errno>
 800d062:	4603      	mov	r3, r0
 800d064:	2216      	movs	r2, #22
 800d066:	601a      	str	r2, [r3, #0]
	return -1;
 800d068:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3708      	adds	r7, #8
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <_exit>:

void _exit (int status)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b082      	sub	sp, #8
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800d07c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f7ff ffe7 	bl	800d054 <_kill>
	while (1) {}		/* Make sure we hang here */
 800d086:	e7fe      	b.n	800d086 <_exit+0x12>

0800d088 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b086      	sub	sp, #24
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	60f8      	str	r0, [r7, #12]
 800d090:	60b9      	str	r1, [r7, #8]
 800d092:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d094:	2300      	movs	r3, #0
 800d096:	617b      	str	r3, [r7, #20]
 800d098:	e00a      	b.n	800d0b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800d09a:	f3af 8000 	nop.w
 800d09e:	4601      	mov	r1, r0
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	1c5a      	adds	r2, r3, #1
 800d0a4:	60ba      	str	r2, [r7, #8]
 800d0a6:	b2ca      	uxtb	r2, r1
 800d0a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	3301      	adds	r3, #1
 800d0ae:	617b      	str	r3, [r7, #20]
 800d0b0:	697a      	ldr	r2, [r7, #20]
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	dbf0      	blt.n	800d09a <_read+0x12>
	}

return len;
 800d0b8:	687b      	ldr	r3, [r7, #4]
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3718      	adds	r7, #24
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}

0800d0c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800d0c2:	b580      	push	{r7, lr}
 800d0c4:	b086      	sub	sp, #24
 800d0c6:	af00      	add	r7, sp, #0
 800d0c8:	60f8      	str	r0, [r7, #12]
 800d0ca:	60b9      	str	r1, [r7, #8]
 800d0cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	617b      	str	r3, [r7, #20]
 800d0d2:	e009      	b.n	800d0e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	1c5a      	adds	r2, r3, #1
 800d0d8:	60ba      	str	r2, [r7, #8]
 800d0da:	781b      	ldrb	r3, [r3, #0]
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	3301      	adds	r3, #1
 800d0e6:	617b      	str	r3, [r7, #20]
 800d0e8:	697a      	ldr	r2, [r7, #20]
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	dbf1      	blt.n	800d0d4 <_write+0x12>
	}
	return len;
 800d0f0:	687b      	ldr	r3, [r7, #4]
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3718      	adds	r7, #24
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}

0800d0fa <_close>:

int _close(int file)
{
 800d0fa:	b480      	push	{r7}
 800d0fc:	b083      	sub	sp, #12
 800d0fe:	af00      	add	r7, sp, #0
 800d100:	6078      	str	r0, [r7, #4]
	return -1;
 800d102:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d106:	4618      	mov	r0, r3
 800d108:	370c      	adds	r7, #12
 800d10a:	46bd      	mov	sp, r7
 800d10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d110:	4770      	bx	lr

0800d112 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800d112:	b480      	push	{r7}
 800d114:	b083      	sub	sp, #12
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
 800d11a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d122:	605a      	str	r2, [r3, #4]
	return 0;
 800d124:	2300      	movs	r3, #0
}
 800d126:	4618      	mov	r0, r3
 800d128:	370c      	adds	r7, #12
 800d12a:	46bd      	mov	sp, r7
 800d12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d130:	4770      	bx	lr

0800d132 <_isatty>:

int _isatty(int file)
{
 800d132:	b480      	push	{r7}
 800d134:	b083      	sub	sp, #12
 800d136:	af00      	add	r7, sp, #0
 800d138:	6078      	str	r0, [r7, #4]
	return 1;
 800d13a:	2301      	movs	r3, #1
}
 800d13c:	4618      	mov	r0, r3
 800d13e:	370c      	adds	r7, #12
 800d140:	46bd      	mov	sp, r7
 800d142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d146:	4770      	bx	lr

0800d148 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800d148:	b480      	push	{r7}
 800d14a:	b085      	sub	sp, #20
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	60f8      	str	r0, [r7, #12]
 800d150:	60b9      	str	r1, [r7, #8]
 800d152:	607a      	str	r2, [r7, #4]
	return 0;
 800d154:	2300      	movs	r3, #0
}
 800d156:	4618      	mov	r0, r3
 800d158:	3714      	adds	r7, #20
 800d15a:	46bd      	mov	sp, r7
 800d15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d160:	4770      	bx	lr
	...

0800d164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b086      	sub	sp, #24
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d16c:	4a14      	ldr	r2, [pc, #80]	; (800d1c0 <_sbrk+0x5c>)
 800d16e:	4b15      	ldr	r3, [pc, #84]	; (800d1c4 <_sbrk+0x60>)
 800d170:	1ad3      	subs	r3, r2, r3
 800d172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d178:	4b13      	ldr	r3, [pc, #76]	; (800d1c8 <_sbrk+0x64>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d102      	bne.n	800d186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d180:	4b11      	ldr	r3, [pc, #68]	; (800d1c8 <_sbrk+0x64>)
 800d182:	4a12      	ldr	r2, [pc, #72]	; (800d1cc <_sbrk+0x68>)
 800d184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d186:	4b10      	ldr	r3, [pc, #64]	; (800d1c8 <_sbrk+0x64>)
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	4413      	add	r3, r2
 800d18e:	693a      	ldr	r2, [r7, #16]
 800d190:	429a      	cmp	r2, r3
 800d192:	d207      	bcs.n	800d1a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d194:	f00c f882 	bl	801929c <__errno>
 800d198:	4603      	mov	r3, r0
 800d19a:	220c      	movs	r2, #12
 800d19c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d19e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d1a2:	e009      	b.n	800d1b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d1a4:	4b08      	ldr	r3, [pc, #32]	; (800d1c8 <_sbrk+0x64>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d1aa:	4b07      	ldr	r3, [pc, #28]	; (800d1c8 <_sbrk+0x64>)
 800d1ac:	681a      	ldr	r2, [r3, #0]
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	4413      	add	r3, r2
 800d1b2:	4a05      	ldr	r2, [pc, #20]	; (800d1c8 <_sbrk+0x64>)
 800d1b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3718      	adds	r7, #24
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}
 800d1c0:	20020000 	.word	0x20020000
 800d1c4:	00000400 	.word	0x00000400
 800d1c8:	20000318 	.word	0x20000318
 800d1cc:	2000a588 	.word	0x2000a588

0800d1d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d1d4:	4b08      	ldr	r3, [pc, #32]	; (800d1f8 <SystemInit+0x28>)
 800d1d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1da:	4a07      	ldr	r2, [pc, #28]	; (800d1f8 <SystemInit+0x28>)
 800d1dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d1e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d1e4:	4b04      	ldr	r3, [pc, #16]	; (800d1f8 <SystemInit+0x28>)
 800d1e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d1ea:	609a      	str	r2, [r3, #8]
#endif
}
 800d1ec:	bf00      	nop
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f4:	4770      	bx	lr
 800d1f6:	bf00      	nop
 800d1f8:	e000ed00 	.word	0xe000ed00

0800d1fc <bldc_interface_init>:
static void(*rx_mcconf_received_func)(void) = 0;
static void(*rx_appconf_received_func)(void) = 0;
static void(*motor_control_set_func)(uint32_t controller_id, motor_control_mode mode, float value) = 0;
static void(*values_requested_func)(uint32_t controller_id) = 0;

void bldc_interface_init(void(*func)(uint32_t controller_id, unsigned char *data, unsigned int len)) {
 800d1fc:	b480      	push	{r7}
 800d1fe:	b083      	sub	sp, #12
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
	send_func = func;
 800d204:	4a04      	ldr	r2, [pc, #16]	; (800d218 <bldc_interface_init+0x1c>)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6013      	str	r3, [r2, #0]
}
 800d20a:	bf00      	nop
 800d20c:	370c      	adds	r7, #12
 800d20e:	46bd      	mov	sp, r7
 800d210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d214:	4770      	bx	lr
 800d216:	bf00      	nop
 800d218:	2000031c 	.word	0x2000031c

0800d21c <buffer_append_int32>:
void buffer_append_uint16(uint8_t* buffer, uint16_t number, int32_t *index) {
	buffer[(*index)++] = number >> 8;
	buffer[(*index)++] = number;
}

void buffer_append_int32(uint8_t* buffer, int32_t number, int32_t *index) {
 800d21c:	b480      	push	{r7}
 800d21e:	b085      	sub	sp, #20
 800d220:	af00      	add	r7, sp, #0
 800d222:	60f8      	str	r0, [r7, #12]
 800d224:	60b9      	str	r1, [r7, #8]
 800d226:	607a      	str	r2, [r7, #4]
	buffer[(*index)++] = number >> 24;
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	1618      	asrs	r0, r3, #24
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	1c59      	adds	r1, r3, #1
 800d232:	687a      	ldr	r2, [r7, #4]
 800d234:	6011      	str	r1, [r2, #0]
 800d236:	461a      	mov	r2, r3
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	4413      	add	r3, r2
 800d23c:	b2c2      	uxtb	r2, r0
 800d23e:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 16;
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	1418      	asrs	r0, r3, #16
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	1c59      	adds	r1, r3, #1
 800d24a:	687a      	ldr	r2, [r7, #4]
 800d24c:	6011      	str	r1, [r2, #0]
 800d24e:	461a      	mov	r2, r3
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	4413      	add	r3, r2
 800d254:	b2c2      	uxtb	r2, r0
 800d256:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 8;
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	1218      	asrs	r0, r3, #8
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	1c59      	adds	r1, r3, #1
 800d262:	687a      	ldr	r2, [r7, #4]
 800d264:	6011      	str	r1, [r2, #0]
 800d266:	461a      	mov	r2, r3
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	4413      	add	r3, r2
 800d26c:	b2c2      	uxtb	r2, r0
 800d26e:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	1c59      	adds	r1, r3, #1
 800d276:	687a      	ldr	r2, [r7, #4]
 800d278:	6011      	str	r1, [r2, #0]
 800d27a:	461a      	mov	r2, r3
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	4413      	add	r3, r2
 800d280:	68ba      	ldr	r2, [r7, #8]
 800d282:	b2d2      	uxtb	r2, r2
 800d284:	701a      	strb	r2, [r3, #0]
}
 800d286:	bf00      	nop
 800d288:	3714      	adds	r7, #20
 800d28a:	46bd      	mov	sp, r7
 800d28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d290:	4770      	bx	lr

0800d292 <buffer_get_int16>:
	}

	buffer_append_uint32(buffer, res, index);
}

int16_t buffer_get_int16(const uint8_t *buffer, int32_t *index) {
 800d292:	b480      	push	{r7}
 800d294:	b085      	sub	sp, #20
 800d296:	af00      	add	r7, sp, #0
 800d298:	6078      	str	r0, [r7, #4]
 800d29a:	6039      	str	r1, [r7, #0]
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	461a      	mov	r2, r3
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	4413      	add	r3, r2
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	021b      	lsls	r3, r3, #8
 800d2aa:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	3301      	adds	r3, #1
 800d2b2:	6879      	ldr	r1, [r7, #4]
 800d2b4:	440b      	add	r3, r1
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	b21b      	sxth	r3, r3
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 800d2ba:	4313      	orrs	r3, r2
 800d2bc:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	1c9a      	adds	r2, r3, #2
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	601a      	str	r2, [r3, #0]
	return res;
 800d2c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3714      	adds	r7, #20
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr

0800d2d8 <buffer_get_int32>:
					((uint16_t) buffer[*index + 1]);
	*index += 2;
	return res;
}

int32_t buffer_get_int32(const uint8_t *buffer, int32_t *index) {
 800d2d8:	b480      	push	{r7}
 800d2da:	b085      	sub	sp, #20
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	6039      	str	r1, [r7, #0]
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	4413      	add	r3, r2
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	3301      	adds	r3, #1
 800d2f6:	6879      	ldr	r1, [r7, #4]
 800d2f8:	440b      	add	r3, r1
 800d2fa:	781b      	ldrb	r3, [r3, #0]
 800d2fc:	041b      	lsls	r3, r3, #16
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800d2fe:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	3302      	adds	r3, #2
 800d306:	6879      	ldr	r1, [r7, #4]
 800d308:	440b      	add	r3, r1
 800d30a:	781b      	ldrb	r3, [r3, #0]
 800d30c:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 800d30e:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 800d310:	683a      	ldr	r2, [r7, #0]
 800d312:	6812      	ldr	r2, [r2, #0]
 800d314:	3203      	adds	r2, #3
 800d316:	6879      	ldr	r1, [r7, #4]
 800d318:	440a      	add	r2, r1
 800d31a:	7812      	ldrb	r2, [r2, #0]
					((uint32_t) buffer[*index + 2]) << 8 |
 800d31c:	4313      	orrs	r3, r2
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800d31e:	60fb      	str	r3, [r7, #12]
	*index += 4;
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	1d1a      	adds	r2, r3, #4
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	601a      	str	r2, [r3, #0]
	return res;
 800d32a:	68fb      	ldr	r3, [r7, #12]
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3714      	adds	r7, #20
 800d330:	46bd      	mov	sp, r7
 800d332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d336:	4770      	bx	lr

0800d338 <buffer_get_float16>:
					((uint64_t) buffer[*index + 7]);
	*index += 8;
	return res;
}

float buffer_get_float16(const uint8_t *buffer, float scale, int32_t *index) {
 800d338:	b580      	push	{r7, lr}
 800d33a:	b084      	sub	sp, #16
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	60f8      	str	r0, [r7, #12]
 800d340:	ed87 0a02 	vstr	s0, [r7, #8]
 800d344:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int16(buffer, index) / scale;
 800d346:	6879      	ldr	r1, [r7, #4]
 800d348:	68f8      	ldr	r0, [r7, #12]
 800d34a:	f7ff ffa2 	bl	800d292 <buffer_get_int16>
 800d34e:	4603      	mov	r3, r0
 800d350:	ee07 3a90 	vmov	s15, r3
 800d354:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d358:	edd7 7a02 	vldr	s15, [r7, #8]
 800d35c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d360:	eef0 7a66 	vmov.f32	s15, s13
}
 800d364:	eeb0 0a67 	vmov.f32	s0, s15
 800d368:	3710      	adds	r7, #16
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}

0800d36e <buffer_get_float32>:

float buffer_get_float32(const uint8_t *buffer, float scale, int32_t *index) {
 800d36e:	b580      	push	{r7, lr}
 800d370:	b084      	sub	sp, #16
 800d372:	af00      	add	r7, sp, #0
 800d374:	60f8      	str	r0, [r7, #12]
 800d376:	ed87 0a02 	vstr	s0, [r7, #8]
 800d37a:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int32(buffer, index) / scale;
 800d37c:	6879      	ldr	r1, [r7, #4]
 800d37e:	68f8      	ldr	r0, [r7, #12]
 800d380:	f7ff ffaa 	bl	800d2d8 <buffer_get_int32>
 800d384:	ee07 0a90 	vmov	s15, r0
 800d388:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d38c:	edd7 7a02 	vldr	s15, [r7, #8]
 800d390:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d394:	eef0 7a66 	vmov.f32	s15, s13
}
 800d398:	eeb0 0a67 	vmov.f32	s0, s15
 800d39c:	3710      	adds	r7, #16
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}
	...

0800d3a4 <crc16>:
		0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
		0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
 800d3a4:	b480      	push	{r7}
 800d3a6:	b085      	sub	sp, #20
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
 800d3ac:	6039      	str	r1, [r7, #0]
	unsigned int i;
	unsigned short cksum = 0;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	60fb      	str	r3, [r7, #12]
 800d3b6:	e016      	b.n	800d3e6 <crc16+0x42>
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 800d3b8:	897b      	ldrh	r3, [r7, #10]
 800d3ba:	0a1b      	lsrs	r3, r3, #8
 800d3bc:	b29b      	uxth	r3, r3
 800d3be:	4619      	mov	r1, r3
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	1c5a      	adds	r2, r3, #1
 800d3c4:	607a      	str	r2, [r7, #4]
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	404b      	eors	r3, r1
 800d3ca:	b2db      	uxtb	r3, r3
 800d3cc:	4a0b      	ldr	r2, [pc, #44]	; (800d3fc <crc16+0x58>)
 800d3ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3d2:	b21a      	sxth	r2, r3
 800d3d4:	897b      	ldrh	r3, [r7, #10]
 800d3d6:	021b      	lsls	r3, r3, #8
 800d3d8:	b21b      	sxth	r3, r3
 800d3da:	4053      	eors	r3, r2
 800d3dc:	b21b      	sxth	r3, r3
 800d3de:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	60fb      	str	r3, [r7, #12]
 800d3e6:	68fa      	ldr	r2, [r7, #12]
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	429a      	cmp	r2, r3
 800d3ec:	d3e4      	bcc.n	800d3b8 <crc16+0x14>
	}
	return cksum;
 800d3ee:	897b      	ldrh	r3, [r7, #10]
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3714      	adds	r7, #20
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fa:	4770      	bx	lr
 800d3fc:	08020e40 	.word	0x08020e40

0800d400 <comm_can_send_buffer>:
 * 0: Packet goes to commands_process_packet of receiver
 * 1: Packet goes to commands_send_packet of receiver --> can use to send to other board?
 * 2: Packet goes to commands_process and send function is set to null
 *    so that no reply is sent back.
 */
void comm_can_send_buffer(uint8_t controller_id, uint8_t *data, unsigned int len, uint8_t send) {
 800d400:	b580      	push	{r7, lr}
 800d402:	b08e      	sub	sp, #56	; 0x38
 800d404:	af00      	add	r7, sp, #0
 800d406:	60b9      	str	r1, [r7, #8]
 800d408:	607a      	str	r2, [r7, #4]
 800d40a:	461a      	mov	r2, r3
 800d40c:	4603      	mov	r3, r0
 800d40e:	73fb      	strb	r3, [r7, #15]
 800d410:	4613      	mov	r3, r2
 800d412:	73bb      	strb	r3, [r7, #14]
	uint8_t send_buffer[8];

	if (len <= 6) {
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2b06      	cmp	r3, #6
 800d418:	d82b      	bhi.n	800d472 <comm_can_send_buffer+0x72>
		uint32_t ind = 0;
 800d41a:	2300      	movs	r3, #0
 800d41c:	61bb      	str	r3, [r7, #24]
		send_buffer[ind++] = (uint8_t)mainboard_TO_VESC;
 800d41e:	69bb      	ldr	r3, [r7, #24]
 800d420:	1c5a      	adds	r2, r3, #1
 800d422:	61ba      	str	r2, [r7, #24]
 800d424:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d428:	4413      	add	r3, r2
 800d42a:	221d      	movs	r2, #29
 800d42c:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = send;
 800d430:	69bb      	ldr	r3, [r7, #24]
 800d432:	1c5a      	adds	r2, r3, #1
 800d434:	61ba      	str	r2, [r7, #24]
 800d436:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d43a:	4413      	add	r3, r2
 800d43c:	7bba      	ldrb	r2, [r7, #14]
 800d43e:	f803 2c28 	strb.w	r2, [r3, #-40]
		memcpy(send_buffer + ind, data, len);
 800d442:	f107 0210 	add.w	r2, r7, #16
 800d446:	69bb      	ldr	r3, [r7, #24]
 800d448:	4413      	add	r3, r2
 800d44a:	687a      	ldr	r2, [r7, #4]
 800d44c:	68b9      	ldr	r1, [r7, #8]
 800d44e:	4618      	mov	r0, r3
 800d450:	f00b ff5e 	bl	8019310 <memcpy>
		ind += len;
 800d454:	69ba      	ldr	r2, [r7, #24]
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	4413      	add	r3, r2
 800d45a:	61bb      	str	r3, [r7, #24]
#if defined USED_CAN1
			CAN_TxMsgEID(&hcan1, controller_id |
 800d45c:	7bfb      	ldrb	r3, [r7, #15]
 800d45e:	f443 6100 	orr.w	r1, r3, #2048	; 0x800
 800d462:	69bb      	ldr	r3, [r7, #24]
 800d464:	b2db      	uxtb	r3, r3
 800d466:	f107 0210 	add.w	r2, r7, #16
 800d46a:	4872      	ldr	r0, [pc, #456]	; (800d634 <comm_can_send_buffer+0x234>)
 800d46c:	f7f6 fb3e 	bl	8003aec <CAN_TxMsgEID>
#elif defined USED_CAN2
			CAN_TxMsgEID(&hcan2, controller_id |
								((uint32_t)CAN_PACKET_PROCESS_RX_BUFFER << 8), send_buffer, ind++);
#endif
	}
}
 800d470:	e0dc      	b.n	800d62c <comm_can_send_buffer+0x22c>
		unsigned int end_a = 0;
 800d472:	2300      	movs	r3, #0
 800d474:	637b      	str	r3, [r7, #52]	; 0x34
		for (unsigned int i = 0;i < len;i += 7) {
 800d476:	2300      	movs	r3, #0
 800d478:	633b      	str	r3, [r7, #48]	; 0x30
 800d47a:	e03d      	b.n	800d4f8 <comm_can_send_buffer+0xf8>
			if (i > 255) {
 800d47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d47e:	2bff      	cmp	r3, #255	; 0xff
 800d480:	d83f      	bhi.n	800d502 <comm_can_send_buffer+0x102>
			end_a = i + 7;
 800d482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d484:	3307      	adds	r3, #7
 800d486:	637b      	str	r3, [r7, #52]	; 0x34
			uint8_t send_len = 7;
 800d488:	2307      	movs	r3, #7
 800d48a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			send_buffer[0] = i;
 800d48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d490:	b2db      	uxtb	r3, r3
 800d492:	743b      	strb	r3, [r7, #16]
			if ((i + 7) <= len) {
 800d494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d496:	3307      	adds	r3, #7
 800d498:	687a      	ldr	r2, [r7, #4]
 800d49a:	429a      	cmp	r2, r3
 800d49c:	d30b      	bcc.n	800d4b6 <comm_can_send_buffer+0xb6>
				memcpy(send_buffer + 1, data + i, send_len);
 800d49e:	f107 0310 	add.w	r3, r7, #16
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	68b9      	ldr	r1, [r7, #8]
 800d4a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4a8:	4411      	add	r1, r2
 800d4aa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f00b ff2e 	bl	8019310 <memcpy>
 800d4b4:	e011      	b.n	800d4da <comm_can_send_buffer+0xda>
				send_len = len - i;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	b2da      	uxtb	r2, r3
 800d4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4bc:	b2db      	uxtb	r3, r3
 800d4be:	1ad3      	subs	r3, r2, r3
 800d4c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				memcpy(send_buffer + 1, data + i, send_len);
 800d4c4:	f107 0310 	add.w	r3, r7, #16
 800d4c8:	3301      	adds	r3, #1
 800d4ca:	68b9      	ldr	r1, [r7, #8]
 800d4cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4ce:	4411      	add	r1, r2
 800d4d0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f00b ff1b 	bl	8019310 <memcpy>
			CAN_TxMsgEID(&hcan1, controller_id |
 800d4da:	7bfb      	ldrb	r3, [r7, #15]
 800d4dc:	f443 61a0 	orr.w	r1, r3, #1280	; 0x500
 800d4e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d4e4:	3301      	adds	r3, #1
 800d4e6:	b2db      	uxtb	r3, r3
 800d4e8:	f107 0210 	add.w	r2, r7, #16
 800d4ec:	4851      	ldr	r0, [pc, #324]	; (800d634 <comm_can_send_buffer+0x234>)
 800d4ee:	f7f6 fafd 	bl	8003aec <CAN_TxMsgEID>
		for (unsigned int i = 0;i < len;i += 7) {
 800d4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f4:	3307      	adds	r3, #7
 800d4f6:	633b      	str	r3, [r7, #48]	; 0x30
 800d4f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d3bd      	bcc.n	800d47c <comm_can_send_buffer+0x7c>
 800d500:	e000      	b.n	800d504 <comm_can_send_buffer+0x104>
				break;
 800d502:	bf00      	nop
		for (unsigned int i = end_a;i < len;i += 6) {
 800d504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d506:	62bb      	str	r3, [r7, #40]	; 0x28
 800d508:	e03b      	b.n	800d582 <comm_can_send_buffer+0x182>
			uint8_t send_len = 6;
 800d50a:	2306      	movs	r3, #6
 800d50c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			send_buffer[0] = i >> 8;
 800d510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d512:	0a1b      	lsrs	r3, r3, #8
 800d514:	b2db      	uxtb	r3, r3
 800d516:	743b      	strb	r3, [r7, #16]
			send_buffer[1] = i & 0xFF;
 800d518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d51a:	b2db      	uxtb	r3, r3
 800d51c:	747b      	strb	r3, [r7, #17]
			if ((i + 6) <= len) {
 800d51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d520:	3306      	adds	r3, #6
 800d522:	687a      	ldr	r2, [r7, #4]
 800d524:	429a      	cmp	r2, r3
 800d526:	d30b      	bcc.n	800d540 <comm_can_send_buffer+0x140>
				memcpy(send_buffer + 2, data + i, send_len);
 800d528:	f107 0310 	add.w	r3, r7, #16
 800d52c:	3302      	adds	r3, #2
 800d52e:	68b9      	ldr	r1, [r7, #8]
 800d530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d532:	4411      	add	r1, r2
 800d534:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d538:	4618      	mov	r0, r3
 800d53a:	f00b fee9 	bl	8019310 <memcpy>
 800d53e:	e011      	b.n	800d564 <comm_can_send_buffer+0x164>
				send_len = len - i;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	b2da      	uxtb	r2, r3
 800d544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d546:	b2db      	uxtb	r3, r3
 800d548:	1ad3      	subs	r3, r2, r3
 800d54a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				memcpy(send_buffer + 2, data + i, send_len);
 800d54e:	f107 0310 	add.w	r3, r7, #16
 800d552:	3302      	adds	r3, #2
 800d554:	68b9      	ldr	r1, [r7, #8]
 800d556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d558:	4411      	add	r1, r2
 800d55a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d55e:	4618      	mov	r0, r3
 800d560:	f00b fed6 	bl	8019310 <memcpy>
			CAN_TxMsgEID(&hcan1, controller_id |
 800d564:	7bfb      	ldrb	r3, [r7, #15]
 800d566:	f443 61c0 	orr.w	r1, r3, #1536	; 0x600
 800d56a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d56e:	3302      	adds	r3, #2
 800d570:	b2db      	uxtb	r3, r3
 800d572:	f107 0210 	add.w	r2, r7, #16
 800d576:	482f      	ldr	r0, [pc, #188]	; (800d634 <comm_can_send_buffer+0x234>)
 800d578:	f7f6 fab8 	bl	8003aec <CAN_TxMsgEID>
		for (unsigned int i = end_a;i < len;i += 6) {
 800d57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d57e:	3306      	adds	r3, #6
 800d580:	62bb      	str	r3, [r7, #40]	; 0x28
 800d582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	429a      	cmp	r2, r3
 800d588:	d3bf      	bcc.n	800d50a <comm_can_send_buffer+0x10a>
		uint32_t ind = 0;
 800d58a:	2300      	movs	r3, #0
 800d58c:	623b      	str	r3, [r7, #32]
		send_buffer[ind++] = (uint8_t)RNS_TO_VESC;
 800d58e:	6a3b      	ldr	r3, [r7, #32]
 800d590:	1c5a      	adds	r2, r3, #1
 800d592:	623a      	str	r2, [r7, #32]
 800d594:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d598:	4413      	add	r3, r2
 800d59a:	221e      	movs	r2, #30
 800d59c:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = send;
 800d5a0:	6a3b      	ldr	r3, [r7, #32]
 800d5a2:	1c5a      	adds	r2, r3, #1
 800d5a4:	623a      	str	r2, [r7, #32]
 800d5a6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d5aa:	4413      	add	r3, r2
 800d5ac:	7bba      	ldrb	r2, [r7, #14]
 800d5ae:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = len >> 8;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	0a19      	lsrs	r1, r3, #8
 800d5b6:	6a3b      	ldr	r3, [r7, #32]
 800d5b8:	1c5a      	adds	r2, r3, #1
 800d5ba:	623a      	str	r2, [r7, #32]
 800d5bc:	b2ca      	uxtb	r2, r1
 800d5be:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d5c2:	440b      	add	r3, r1
 800d5c4:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = len & 0xFF;
 800d5c8:	6a3b      	ldr	r3, [r7, #32]
 800d5ca:	1c5a      	adds	r2, r3, #1
 800d5cc:	623a      	str	r2, [r7, #32]
 800d5ce:	687a      	ldr	r2, [r7, #4]
 800d5d0:	b2d2      	uxtb	r2, r2
 800d5d2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d5d6:	440b      	add	r3, r1
 800d5d8:	f803 2c28 	strb.w	r2, [r3, #-40]
		unsigned short crc = crc16(data, len);
 800d5dc:	6879      	ldr	r1, [r7, #4]
 800d5de:	68b8      	ldr	r0, [r7, #8]
 800d5e0:	f7ff fee0 	bl	800d3a4 <crc16>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	83fb      	strh	r3, [r7, #30]
		send_buffer[ind++] = (uint8_t)(crc >> 8);
 800d5e8:	8bfb      	ldrh	r3, [r7, #30]
 800d5ea:	0a1b      	lsrs	r3, r3, #8
 800d5ec:	b299      	uxth	r1, r3
 800d5ee:	6a3b      	ldr	r3, [r7, #32]
 800d5f0:	1c5a      	adds	r2, r3, #1
 800d5f2:	623a      	str	r2, [r7, #32]
 800d5f4:	b2ca      	uxtb	r2, r1
 800d5f6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d5fa:	440b      	add	r3, r1
 800d5fc:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = (uint8_t)(crc & 0xFF);
 800d600:	6a3b      	ldr	r3, [r7, #32]
 800d602:	1c5a      	adds	r2, r3, #1
 800d604:	623a      	str	r2, [r7, #32]
 800d606:	8bfa      	ldrh	r2, [r7, #30]
 800d608:	b2d2      	uxtb	r2, r2
 800d60a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d60e:	440b      	add	r3, r1
 800d610:	f803 2c28 	strb.w	r2, [r3, #-40]
			CAN_TxMsgEID(&hcan1, controller_id |
 800d614:	7bfb      	ldrb	r3, [r7, #15]
 800d616:	f443 61e0 	orr.w	r1, r3, #1792	; 0x700
					((uint32_t)CAN_PACKET_PROCESS_RX_BUFFER << 8), send_buffer, ind++);
 800d61a:	6a3b      	ldr	r3, [r7, #32]
 800d61c:	1c5a      	adds	r2, r3, #1
 800d61e:	623a      	str	r2, [r7, #32]
			CAN_TxMsgEID(&hcan1, controller_id |
 800d620:	b2db      	uxtb	r3, r3
 800d622:	f107 0210 	add.w	r2, r7, #16
 800d626:	4803      	ldr	r0, [pc, #12]	; (800d634 <comm_can_send_buffer+0x234>)
 800d628:	f7f6 fa60 	bl	8003aec <CAN_TxMsgEID>
}
 800d62c:	bf00      	nop
 800d62e:	3738      	adds	r7, #56	; 0x38
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}
 800d634:	20009d44 	.word	0x20009d44

0800d638 <comm_can_set_duty>:

void comm_can_set_duty(uint8_t controller_id, float duty) {
 800d638:	b580      	push	{r7, lr}
 800d63a:	b084      	sub	sp, #16
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	4603      	mov	r3, r0
 800d640:	ed87 0a00 	vstr	s0, [r7]
 800d644:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800d646:	2300      	movs	r3, #0
 800d648:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)(duty * 100000.0), &send_index);
 800d64a:	6838      	ldr	r0, [r7, #0]
 800d64c:	f7f2 ff7c 	bl	8000548 <__aeabi_f2d>
 800d650:	a319      	add	r3, pc, #100	; (adr r3, 800d6b8 <comm_can_set_duty+0x80>)
 800d652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d656:	f7f2 ffcf 	bl	80005f8 <__aeabi_dmul>
 800d65a:	4602      	mov	r2, r0
 800d65c:	460b      	mov	r3, r1
 800d65e:	4610      	mov	r0, r2
 800d660:	4619      	mov	r1, r3
 800d662:	f7f3 fa79 	bl	8000b58 <__aeabi_d2iz>
 800d666:	4601      	mov	r1, r0
 800d668:	f107 020c 	add.w	r2, r7, #12
 800d66c:	f107 0308 	add.w	r3, r7, #8
 800d670:	4618      	mov	r0, r3
 800d672:	f7ff fdd3 	bl	800d21c <buffer_append_int32>
#if defined USED_CAN1
	if(controller_id == 115 || controller_id == 116)
 800d676:	79fb      	ldrb	r3, [r7, #7]
 800d678:	2b73      	cmp	r3, #115	; 0x73
 800d67a:	d002      	beq.n	800d682 <comm_can_set_duty+0x4a>
 800d67c:	79fb      	ldrb	r3, [r7, #7]
 800d67e:	2b74      	cmp	r3, #116	; 0x74
 800d680:	d108      	bne.n	800d694 <comm_can_set_duty+0x5c>
	{
		CAN_TxMsgEID(&hcan1, controller_id |
 800d682:	79f9      	ldrb	r1, [r7, #7]
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	b2db      	uxtb	r3, r3
 800d688:	f107 0208 	add.w	r2, r7, #8
 800d68c:	4808      	ldr	r0, [pc, #32]	; (800d6b0 <comm_can_set_duty+0x78>)
 800d68e:	f7f6 fa2d 	bl	8003aec <CAN_TxMsgEID>
 800d692:	e008      	b.n	800d6a6 <comm_can_set_duty+0x6e>
				((uint32_t)CAN_PACKET_SET_DUTY << 8), buffer, send_index);
	}
	else
	{
		CAN_TxMsgEID(&hcan2, controller_id |
 800d694:	79f9      	ldrb	r1, [r7, #7]
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	b2db      	uxtb	r3, r3
 800d69a:	f107 0208 	add.w	r2, r7, #8
 800d69e:	4805      	ldr	r0, [pc, #20]	; (800d6b4 <comm_can_set_duty+0x7c>)
 800d6a0:	f7f6 fa24 	bl	8003aec <CAN_TxMsgEID>

#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
				((uint32_t)CAN_PACKET_SET_DUTY << 8), buffer, send_index);
#endif
}
 800d6a4:	bf00      	nop
 800d6a6:	bf00      	nop
 800d6a8:	3710      	adds	r7, #16
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}
 800d6ae:	bf00      	nop
 800d6b0:	20009d44 	.word	0x20009d44
 800d6b4:	20008e8c 	.word	0x20008e8c
 800d6b8:	00000000 	.word	0x00000000
 800d6bc:	40f86a00 	.word	0x40f86a00

0800d6c0 <comm_can_set_current>:
	buffer_append_int32(buffer, (int32_t)(duty * 100000.0), &send_index);
	CAN_TxMsgEID(&hcan2, controller_id |
			((uint32_t)CAN_PACKET_SET_DUTY << 8), buffer, send_index);
}

void comm_can_set_current(uint8_t controller_id, float current) {
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b084      	sub	sp, #16
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	ed87 0a00 	vstr	s0, [r7]
 800d6cc:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)(current * 1000.0), &send_index);
 800d6d2:	6838      	ldr	r0, [r7, #0]
 800d6d4:	f7f2 ff38 	bl	8000548 <__aeabi_f2d>
 800d6d8:	f04f 0200 	mov.w	r2, #0
 800d6dc:	4b0f      	ldr	r3, [pc, #60]	; (800d71c <comm_can_set_current+0x5c>)
 800d6de:	f7f2 ff8b 	bl	80005f8 <__aeabi_dmul>
 800d6e2:	4602      	mov	r2, r0
 800d6e4:	460b      	mov	r3, r1
 800d6e6:	4610      	mov	r0, r2
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	f7f3 fa35 	bl	8000b58 <__aeabi_d2iz>
 800d6ee:	4601      	mov	r1, r0
 800d6f0:	f107 020c 	add.w	r2, r7, #12
 800d6f4:	f107 0308 	add.w	r3, r7, #8
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7ff fd8f 	bl	800d21c <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
 800d6fe:	79fb      	ldrb	r3, [r7, #7]
 800d700:	f443 7180 	orr.w	r1, r3, #256	; 0x100
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	b2db      	uxtb	r3, r3
 800d708:	f107 0208 	add.w	r2, r7, #8
 800d70c:	4804      	ldr	r0, [pc, #16]	; (800d720 <comm_can_set_current+0x60>)
 800d70e:	f7f6 f9ed 	bl	8003aec <CAN_TxMsgEID>
			((uint32_t)CAN_PACKET_SET_CURRENT << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
				((uint32_t)CAN_PACKET_SET_CURRENT << 8), buffer, send_index);
#endif
}
 800d712:	bf00      	nop
 800d714:	3710      	adds	r7, #16
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}
 800d71a:	bf00      	nop
 800d71c:	408f4000 	.word	0x408f4000
 800d720:	20009d44 	.word	0x20009d44

0800d724 <comm_can_set_rpm>:
				((uint32_t)CAN_PACKET_SET_CURRENT_BRAKE << 8), buffer, send_index);
#endif

}

void comm_can_set_rpm(uint8_t controller_id, float rpm) {
 800d724:	b580      	push	{r7, lr}
 800d726:	b084      	sub	sp, #16
 800d728:	af00      	add	r7, sp, #0
 800d72a:	4603      	mov	r3, r0
 800d72c:	ed87 0a00 	vstr	s0, [r7]
 800d730:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800d732:	2300      	movs	r3, #0
 800d734:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)rpm, &send_index);
 800d736:	edd7 7a00 	vldr	s15, [r7]
 800d73a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d73e:	f107 020c 	add.w	r2, r7, #12
 800d742:	f107 0308 	add.w	r3, r7, #8
 800d746:	ee17 1a90 	vmov	r1, s15
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7ff fd66 	bl	800d21c <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
 800d750:	79fb      	ldrb	r3, [r7, #7]
 800d752:	f443 7140 	orr.w	r1, r3, #768	; 0x300
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	b2db      	uxtb	r3, r3
 800d75a:	f107 0208 	add.w	r2, r7, #8
 800d75e:	4803      	ldr	r0, [pc, #12]	; (800d76c <comm_can_set_rpm+0x48>)
 800d760:	f7f6 f9c4 	bl	8003aec <CAN_TxMsgEID>
			((uint32_t)CAN_PACKET_SET_RPM << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
				((uint32_t)CAN_PACKET_SET_RPM << 8), buffer, send_index);
#endif
}
 800d764:	bf00      	nop
 800d766:	3710      	adds	r7, #16
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}
 800d76c:	20009d44 	.word	0x20009d44

0800d770 <decode_VESC>:
	CAN_TxMsgEID(&hcan2, controller_id |
				((uint32_t)CAN_PACKET_UPDATE_PID_POS_OFFSET << 8), buffer, send_index);
#endif
}

void decode_VESC(void){
 800d770:	b580      	push	{r7, lr}
 800d772:	b084      	sub	sp, #16
 800d774:	af00      	add	r7, sp, #0
	int32_t ind = 0;
 800d776:	2300      	movs	r3, #0
 800d778:	607b      	str	r3, [r7, #4]
//
//	Vescmsg *rxmsg_tmp;
//	while ((rxmsg_tmp = get_rx_frame()) != 0) {
//		Vescmsg rxmsg = *rxmsg_tmp;

		if (vescmsg.Rxmsg.IDE == CAN_ID_EXT) {
 800d77a:	4b88      	ldr	r3, [pc, #544]	; (800d99c <decode_VESC+0x22c>)
 800d77c:	689b      	ldr	r3, [r3, #8]
 800d77e:	2b04      	cmp	r3, #4
 800d780:	f040 8108 	bne.w	800d994 <decode_VESC+0x224>
			uint8_t id = vescmsg.Rxmsg.ExtId & 0xFF;
 800d784:	4b85      	ldr	r3, [pc, #532]	; (800d99c <decode_VESC+0x22c>)
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	73fb      	strb	r3, [r7, #15]
			CAN_PACKET_ID cmd = vescmsg.Rxmsg.ExtId >> 8;
 800d78a:	4b84      	ldr	r3, [pc, #528]	; (800d99c <decode_VESC+0x22c>)
 800d78c:	685b      	ldr	r3, [r3, #4]
 800d78e:	0a1b      	lsrs	r3, r3, #8
 800d790:	60bb      	str	r3, [r7, #8]
//
//				default:
//					break;
//				}
//			}
			if(cmd == CAN_PACKET_STATUS)
 800d792:	68bb      	ldr	r3, [r7, #8]
 800d794:	2b09      	cmp	r3, #9
 800d796:	f040 80fd 	bne.w	800d994 <decode_VESC+0x224>
			{
				if(id == VESCNav.a.Instance)
 800d79a:	7bfb      	ldrb	r3, [r7, #15]
 800d79c:	b29a      	uxth	r2, r3
 800d79e:	4b80      	ldr	r3, [pc, #512]	; (800d9a0 <decode_VESC+0x230>)
 800d7a0:	899b      	ldrh	r3, [r3, #12]
 800d7a2:	429a      	cmp	r2, r3
 800d7a4:	d124      	bne.n	800d7f0 <decode_VESC+0x80>
				{
					VESCNav.a.info.rpm = buffer_get_float32((uint8_t*)&vescmsg.Data, 1.0, &ind);
 800d7a6:	1d3b      	adds	r3, r7, #4
 800d7a8:	4619      	mov	r1, r3
 800d7aa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d7ae:	487d      	ldr	r0, [pc, #500]	; (800d9a4 <decode_VESC+0x234>)
 800d7b0:	f7ff fddd 	bl	800d36e <buffer_get_float32>
 800d7b4:	eef0 7a40 	vmov.f32	s15, s0
 800d7b8:	4b79      	ldr	r3, [pc, #484]	; (800d9a0 <decode_VESC+0x230>)
 800d7ba:	edc3 7a04 	vstr	s15, [r3, #16]
					VESCNav.a.info.current = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d7be:	1d3b      	adds	r3, r7, #4
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d7c6:	4877      	ldr	r0, [pc, #476]	; (800d9a4 <decode_VESC+0x234>)
 800d7c8:	f7ff fdb6 	bl	800d338 <buffer_get_float16>
 800d7cc:	eef0 7a40 	vmov.f32	s15, s0
 800d7d0:	4b73      	ldr	r3, [pc, #460]	; (800d9a0 <decode_VESC+0x230>)
 800d7d2:	edc3 7a06 	vstr	s15, [r3, #24]
					VESCNav.a.info.duty = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d7d6:	1d3b      	adds	r3, r7, #4
 800d7d8:	4619      	mov	r1, r3
 800d7da:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d7de:	4871      	ldr	r0, [pc, #452]	; (800d9a4 <decode_VESC+0x234>)
 800d7e0:	f7ff fdaa 	bl	800d338 <buffer_get_float16>
 800d7e4:	eef0 7a40 	vmov.f32	s15, s0
 800d7e8:	4b6d      	ldr	r3, [pc, #436]	; (800d9a0 <decode_VESC+0x230>)
 800d7ea:	edc3 7a05 	vstr	s15, [r3, #20]
					flywheel2.info.current = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
					flywheel2.info.duty = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
				}
			}
		}
	}
 800d7ee:	e0d1      	b.n	800d994 <decode_VESC+0x224>
				else if(id == VESCNav.b.Instance)
 800d7f0:	7bfb      	ldrb	r3, [r7, #15]
 800d7f2:	b29a      	uxth	r2, r3
 800d7f4:	4b6a      	ldr	r3, [pc, #424]	; (800d9a0 <decode_VESC+0x230>)
 800d7f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	d124      	bne.n	800d846 <decode_VESC+0xd6>
					VESCNav.b.info.rpm = buffer_get_float32((uint8_t*)&vescmsg.Data, 1.0, &ind);
 800d7fc:	1d3b      	adds	r3, r7, #4
 800d7fe:	4619      	mov	r1, r3
 800d800:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d804:	4867      	ldr	r0, [pc, #412]	; (800d9a4 <decode_VESC+0x234>)
 800d806:	f7ff fdb2 	bl	800d36e <buffer_get_float32>
 800d80a:	eef0 7a40 	vmov.f32	s15, s0
 800d80e:	4b64      	ldr	r3, [pc, #400]	; (800d9a0 <decode_VESC+0x230>)
 800d810:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
					VESCNav.b.info.current = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d814:	1d3b      	adds	r3, r7, #4
 800d816:	4619      	mov	r1, r3
 800d818:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d81c:	4861      	ldr	r0, [pc, #388]	; (800d9a4 <decode_VESC+0x234>)
 800d81e:	f7ff fd8b 	bl	800d338 <buffer_get_float16>
 800d822:	eef0 7a40 	vmov.f32	s15, s0
 800d826:	4b5e      	ldr	r3, [pc, #376]	; (800d9a0 <decode_VESC+0x230>)
 800d828:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
					VESCNav.b.info.duty = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d82c:	1d3b      	adds	r3, r7, #4
 800d82e:	4619      	mov	r1, r3
 800d830:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d834:	485b      	ldr	r0, [pc, #364]	; (800d9a4 <decode_VESC+0x234>)
 800d836:	f7ff fd7f 	bl	800d338 <buffer_get_float16>
 800d83a:	eef0 7a40 	vmov.f32	s15, s0
 800d83e:	4b58      	ldr	r3, [pc, #352]	; (800d9a0 <decode_VESC+0x230>)
 800d840:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	}
 800d844:	e0a6      	b.n	800d994 <decode_VESC+0x224>
				else if(id == VESCNav.c.Instance)
 800d846:	7bfb      	ldrb	r3, [r7, #15]
 800d848:	b29a      	uxth	r2, r3
 800d84a:	4b55      	ldr	r3, [pc, #340]	; (800d9a0 <decode_VESC+0x230>)
 800d84c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800d850:	429a      	cmp	r2, r3
 800d852:	d124      	bne.n	800d89e <decode_VESC+0x12e>
					VESCNav.c.info.rpm = buffer_get_float32((uint8_t*)&vescmsg.Data, 1.0, &ind);
 800d854:	1d3b      	adds	r3, r7, #4
 800d856:	4619      	mov	r1, r3
 800d858:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d85c:	4851      	ldr	r0, [pc, #324]	; (800d9a4 <decode_VESC+0x234>)
 800d85e:	f7ff fd86 	bl	800d36e <buffer_get_float32>
 800d862:	eef0 7a40 	vmov.f32	s15, s0
 800d866:	4b4e      	ldr	r3, [pc, #312]	; (800d9a0 <decode_VESC+0x230>)
 800d868:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
					VESCNav.c.info.current = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d86c:	1d3b      	adds	r3, r7, #4
 800d86e:	4619      	mov	r1, r3
 800d870:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d874:	484b      	ldr	r0, [pc, #300]	; (800d9a4 <decode_VESC+0x234>)
 800d876:	f7ff fd5f 	bl	800d338 <buffer_get_float16>
 800d87a:	eef0 7a40 	vmov.f32	s15, s0
 800d87e:	4b48      	ldr	r3, [pc, #288]	; (800d9a0 <decode_VESC+0x230>)
 800d880:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
					VESCNav.c.info.duty = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d884:	1d3b      	adds	r3, r7, #4
 800d886:	4619      	mov	r1, r3
 800d888:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d88c:	4845      	ldr	r0, [pc, #276]	; (800d9a4 <decode_VESC+0x234>)
 800d88e:	f7ff fd53 	bl	800d338 <buffer_get_float16>
 800d892:	eef0 7a40 	vmov.f32	s15, s0
 800d896:	4b42      	ldr	r3, [pc, #264]	; (800d9a0 <decode_VESC+0x230>)
 800d898:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	}
 800d89c:	e07a      	b.n	800d994 <decode_VESC+0x224>
				else if(id == VESCNav.d.Instance)
 800d89e:	7bfb      	ldrb	r3, [r7, #15]
 800d8a0:	b29a      	uxth	r2, r3
 800d8a2:	4b3f      	ldr	r3, [pc, #252]	; (800d9a0 <decode_VESC+0x230>)
 800d8a4:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d124      	bne.n	800d8f6 <decode_VESC+0x186>
					VESCNav.d.info.rpm = buffer_get_float32((uint8_t*)&vescmsg.Data, 1.0, &ind);
 800d8ac:	1d3b      	adds	r3, r7, #4
 800d8ae:	4619      	mov	r1, r3
 800d8b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d8b4:	483b      	ldr	r0, [pc, #236]	; (800d9a4 <decode_VESC+0x234>)
 800d8b6:	f7ff fd5a 	bl	800d36e <buffer_get_float32>
 800d8ba:	eef0 7a40 	vmov.f32	s15, s0
 800d8be:	4b38      	ldr	r3, [pc, #224]	; (800d9a0 <decode_VESC+0x230>)
 800d8c0:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
					VESCNav.d.info.current = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d8c4:	1d3b      	adds	r3, r7, #4
 800d8c6:	4619      	mov	r1, r3
 800d8c8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d8cc:	4835      	ldr	r0, [pc, #212]	; (800d9a4 <decode_VESC+0x234>)
 800d8ce:	f7ff fd33 	bl	800d338 <buffer_get_float16>
 800d8d2:	eef0 7a40 	vmov.f32	s15, s0
 800d8d6:	4b32      	ldr	r3, [pc, #200]	; (800d9a0 <decode_VESC+0x230>)
 800d8d8:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
					VESCNav.d.info.duty = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d8dc:	1d3b      	adds	r3, r7, #4
 800d8de:	4619      	mov	r1, r3
 800d8e0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d8e4:	482f      	ldr	r0, [pc, #188]	; (800d9a4 <decode_VESC+0x234>)
 800d8e6:	f7ff fd27 	bl	800d338 <buffer_get_float16>
 800d8ea:	eef0 7a40 	vmov.f32	s15, s0
 800d8ee:	4b2c      	ldr	r3, [pc, #176]	; (800d9a0 <decode_VESC+0x230>)
 800d8f0:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	}
 800d8f4:	e04e      	b.n	800d994 <decode_VESC+0x224>
				else if(id == 115)
 800d8f6:	7bfb      	ldrb	r3, [r7, #15]
 800d8f8:	2b73      	cmp	r3, #115	; 0x73
 800d8fa:	d124      	bne.n	800d946 <decode_VESC+0x1d6>
					flywheel1.info.rpm = buffer_get_float32((uint8_t*)&vescmsg.Data, 1.0, &ind);
 800d8fc:	1d3b      	adds	r3, r7, #4
 800d8fe:	4619      	mov	r1, r3
 800d900:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d904:	4827      	ldr	r0, [pc, #156]	; (800d9a4 <decode_VESC+0x234>)
 800d906:	f7ff fd32 	bl	800d36e <buffer_get_float32>
 800d90a:	eef0 7a40 	vmov.f32	s15, s0
 800d90e:	4b26      	ldr	r3, [pc, #152]	; (800d9a8 <decode_VESC+0x238>)
 800d910:	edc3 7a04 	vstr	s15, [r3, #16]
					flywheel1.info.current = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d914:	1d3b      	adds	r3, r7, #4
 800d916:	4619      	mov	r1, r3
 800d918:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d91c:	4821      	ldr	r0, [pc, #132]	; (800d9a4 <decode_VESC+0x234>)
 800d91e:	f7ff fd0b 	bl	800d338 <buffer_get_float16>
 800d922:	eef0 7a40 	vmov.f32	s15, s0
 800d926:	4b20      	ldr	r3, [pc, #128]	; (800d9a8 <decode_VESC+0x238>)
 800d928:	edc3 7a06 	vstr	s15, [r3, #24]
					flywheel1.info.duty = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d92c:	1d3b      	adds	r3, r7, #4
 800d92e:	4619      	mov	r1, r3
 800d930:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d934:	481b      	ldr	r0, [pc, #108]	; (800d9a4 <decode_VESC+0x234>)
 800d936:	f7ff fcff 	bl	800d338 <buffer_get_float16>
 800d93a:	eef0 7a40 	vmov.f32	s15, s0
 800d93e:	4b1a      	ldr	r3, [pc, #104]	; (800d9a8 <decode_VESC+0x238>)
 800d940:	edc3 7a05 	vstr	s15, [r3, #20]
	}
 800d944:	e026      	b.n	800d994 <decode_VESC+0x224>
				else if(id == 116)
 800d946:	7bfb      	ldrb	r3, [r7, #15]
 800d948:	2b74      	cmp	r3, #116	; 0x74
 800d94a:	d123      	bne.n	800d994 <decode_VESC+0x224>
					flywheel2.info.rpm = buffer_get_float32((uint8_t*)&vescmsg.Data, 1.0, &ind);
 800d94c:	1d3b      	adds	r3, r7, #4
 800d94e:	4619      	mov	r1, r3
 800d950:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d954:	4813      	ldr	r0, [pc, #76]	; (800d9a4 <decode_VESC+0x234>)
 800d956:	f7ff fd0a 	bl	800d36e <buffer_get_float32>
 800d95a:	eef0 7a40 	vmov.f32	s15, s0
 800d95e:	4b13      	ldr	r3, [pc, #76]	; (800d9ac <decode_VESC+0x23c>)
 800d960:	edc3 7a04 	vstr	s15, [r3, #16]
					flywheel2.info.current = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d964:	1d3b      	adds	r3, r7, #4
 800d966:	4619      	mov	r1, r3
 800d968:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d96c:	480d      	ldr	r0, [pc, #52]	; (800d9a4 <decode_VESC+0x234>)
 800d96e:	f7ff fce3 	bl	800d338 <buffer_get_float16>
 800d972:	eef0 7a40 	vmov.f32	s15, s0
 800d976:	4b0d      	ldr	r3, [pc, #52]	; (800d9ac <decode_VESC+0x23c>)
 800d978:	edc3 7a06 	vstr	s15, [r3, #24]
					flywheel2.info.duty = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d97c:	1d3b      	adds	r3, r7, #4
 800d97e:	4619      	mov	r1, r3
 800d980:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d984:	4807      	ldr	r0, [pc, #28]	; (800d9a4 <decode_VESC+0x234>)
 800d986:	f7ff fcd7 	bl	800d338 <buffer_get_float16>
 800d98a:	eef0 7a40 	vmov.f32	s15, s0
 800d98e:	4b07      	ldr	r3, [pc, #28]	; (800d9ac <decode_VESC+0x23c>)
 800d990:	edc3 7a05 	vstr	s15, [r3, #20]
	}
 800d994:	bf00      	nop
 800d996:	3710      	adds	r7, #16
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}
 800d99c:	2000956c 	.word	0x2000956c
 800d9a0:	200092b4 	.word	0x200092b4
 800d9a4:	20009588 	.word	0x20009588
 800d9a8:	20006a9c 	.word	0x20006a9c
 800d9ac:	200073c8 	.word	0x200073c8

0800d9b0 <set_rx_frames>:
		return res;
	} else
		return 0;
}

uint8_t set_rx_frames(Vescmsg* CANRxFrame) {
 800d9b0:	b4b0      	push	{r4, r5, r7}
 800d9b2:	b085      	sub	sp, #20
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
	uint32_t cmd;

	rx_frames[rx_frame_write++] = *CANRxFrame;
 800d9b8:	4b16      	ldr	r3, [pc, #88]	; (800da14 <set_rx_frames+0x64>)
 800d9ba:	681a      	ldr	r2, [r3, #0]
 800d9bc:	1c53      	adds	r3, r2, #1
 800d9be:	4915      	ldr	r1, [pc, #84]	; (800da14 <set_rx_frames+0x64>)
 800d9c0:	600b      	str	r3, [r1, #0]
 800d9c2:	4915      	ldr	r1, [pc, #84]	; (800da18 <set_rx_frames+0x68>)
 800d9c4:	4613      	mov	r3, r2
 800d9c6:	00db      	lsls	r3, r3, #3
 800d9c8:	4413      	add	r3, r2
 800d9ca:	009b      	lsls	r3, r3, #2
 800d9cc:	18ca      	adds	r2, r1, r3
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	4614      	mov	r4, r2
 800d9d2:	461d      	mov	r5, r3
 800d9d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d9d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d9d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d9da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d9dc:	682b      	ldr	r3, [r5, #0]
 800d9de:	6023      	str	r3, [r4, #0]
	if (rx_frame_write == RX_FRAMES_SIZE) {
 800d9e0:	4b0c      	ldr	r3, [pc, #48]	; (800da14 <set_rx_frames+0x64>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	2b64      	cmp	r3, #100	; 0x64
 800d9e6:	d102      	bne.n	800d9ee <set_rx_frames+0x3e>
		rx_frame_write = 0;
 800d9e8:	4b0a      	ldr	r3, [pc, #40]	; (800da14 <set_rx_frames+0x64>)
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	601a      	str	r2, [r3, #0]
	}

	cmd = CANRxFrame->Rxmsg.ExtId >> 8;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	685b      	ldr	r3, [r3, #4]
 800d9f2:	0a1b      	lsrs	r3, r3, #8
 800d9f4:	60fb      	str	r3, [r7, #12]
	if(cmd == (uint32_t)CAN_PACKET_PROCESS_RX_BUFFER || cmd == (uint32_t)CAN_PACKET_PROCESS_SHORT_BUFFER)
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	2b07      	cmp	r3, #7
 800d9fa:	d002      	beq.n	800da02 <set_rx_frames+0x52>
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	2b08      	cmp	r3, #8
 800da00:	d101      	bne.n	800da06 <set_rx_frames+0x56>
		return 112;
 800da02:	2370      	movs	r3, #112	; 0x70
 800da04:	e000      	b.n	800da08 <set_rx_frames+0x58>
	else
		return 0;
 800da06:	2300      	movs	r3, #0
}
 800da08:	4618      	mov	r0, r3
 800da0a:	3714      	adds	r7, #20
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bcb0      	pop	{r4, r5, r7}
 800da10:	4770      	bx	lr
 800da12:	bf00      	nop
 800da14:	20001130 	.word	0x20001130
 800da18:	20000320 	.word	0x20000320

0800da1c <VESCNavInit>:
/*\
 * Assume same type of motor used in navigation
 * Init all motor at once with different CAN_ID
 */
void VESCNavInit(float max_rpm, float pole_pairs, float xPtd, float yPtd, float wheel_diameter, uint16_t Instance1, uint16_t Instance2, uint16_t Instance3, uint16_t Instance4)
{
 800da1c:	b590      	push	{r4, r7, lr}
 800da1e:	b089      	sub	sp, #36	; 0x24
 800da20:	af00      	add	r7, sp, #0
 800da22:	ed87 0a07 	vstr	s0, [r7, #28]
 800da26:	edc7 0a06 	vstr	s1, [r7, #24]
 800da2a:	ed87 1a05 	vstr	s2, [r7, #20]
 800da2e:	edc7 1a04 	vstr	s3, [r7, #16]
 800da32:	ed87 2a03 	vstr	s4, [r7, #12]
 800da36:	4604      	mov	r4, r0
 800da38:	4608      	mov	r0, r1
 800da3a:	4611      	mov	r1, r2
 800da3c:	461a      	mov	r2, r3
 800da3e:	4623      	mov	r3, r4
 800da40:	817b      	strh	r3, [r7, #10]
 800da42:	4603      	mov	r3, r0
 800da44:	813b      	strh	r3, [r7, #8]
 800da46:	460b      	mov	r3, r1
 800da48:	80fb      	strh	r3, [r7, #6]
 800da4a:	4613      	mov	r3, r2
 800da4c:	80bb      	strh	r3, [r7, #4]
	VESCInit(max_rpm, pole_pairs, wheel_diameter, Instance1, &VESCNav.a);
 800da4e:	897b      	ldrh	r3, [r7, #10]
 800da50:	491b      	ldr	r1, [pc, #108]	; (800dac0 <VESCNavInit+0xa4>)
 800da52:	4618      	mov	r0, r3
 800da54:	ed97 1a03 	vldr	s2, [r7, #12]
 800da58:	edd7 0a06 	vldr	s1, [r7, #24]
 800da5c:	ed97 0a07 	vldr	s0, [r7, #28]
 800da60:	f000 fb00 	bl	800e064 <VESCInit>
	VESCInit(max_rpm, pole_pairs, wheel_diameter, Instance2, &VESCNav.b);
 800da64:	893b      	ldrh	r3, [r7, #8]
 800da66:	4917      	ldr	r1, [pc, #92]	; (800dac4 <VESCNavInit+0xa8>)
 800da68:	4618      	mov	r0, r3
 800da6a:	ed97 1a03 	vldr	s2, [r7, #12]
 800da6e:	edd7 0a06 	vldr	s1, [r7, #24]
 800da72:	ed97 0a07 	vldr	s0, [r7, #28]
 800da76:	f000 faf5 	bl	800e064 <VESCInit>
	VESCInit(max_rpm, pole_pairs, wheel_diameter, Instance3, &VESCNav.c);
 800da7a:	88fb      	ldrh	r3, [r7, #6]
 800da7c:	4912      	ldr	r1, [pc, #72]	; (800dac8 <VESCNavInit+0xac>)
 800da7e:	4618      	mov	r0, r3
 800da80:	ed97 1a03 	vldr	s2, [r7, #12]
 800da84:	edd7 0a06 	vldr	s1, [r7, #24]
 800da88:	ed97 0a07 	vldr	s0, [r7, #28]
 800da8c:	f000 faea 	bl	800e064 <VESCInit>
	VESCInit(max_rpm, pole_pairs, wheel_diameter, Instance4, &VESCNav.d);
 800da90:	88bb      	ldrh	r3, [r7, #4]
 800da92:	490e      	ldr	r1, [pc, #56]	; (800dacc <VESCNavInit+0xb0>)
 800da94:	4618      	mov	r0, r3
 800da96:	ed97 1a03 	vldr	s2, [r7, #12]
 800da9a:	edd7 0a06 	vldr	s1, [r7, #24]
 800da9e:	ed97 0a07 	vldr	s0, [r7, #28]
 800daa2:	f000 fadf 	bl	800e064 <VESCInit>
	VESCNav.xPtd = xPtd;
 800daa6:	4a06      	ldr	r2, [pc, #24]	; (800dac0 <VESCNavInit+0xa4>)
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	VESCNav.yPtd = yPtd;
 800daae:	4a04      	ldr	r2, [pc, #16]	; (800dac0 <VESCNavInit+0xa4>)
 800dab0:	693b      	ldr	r3, [r7, #16]
 800dab2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800dab6:	bf00      	nop
 800dab8:	3724      	adds	r7, #36	; 0x24
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd90      	pop	{r4, r7, pc}
 800dabe:	bf00      	nop
 800dac0:	200092b4 	.word	0x200092b4
 800dac4:	200092d4 	.word	0x200092d4
 800dac8:	200092f4 	.word	0x200092f4
 800dacc:	20009314 	.word	0x20009314

0800dad0 <VESCNavStop>:

/*
 * Stop all motor at once
 */
void VESCNavStop()
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	ed2d 8b04 	vpush	{d8-d9}
 800dad6:	af00      	add	r7, sp, #0
	if((VESCNav.a_vel || VESCNav.b_vel || VESCNav.c_vel || VESCNav.d_vel) && HAL_GetTick() - hb_count > HandBrake)
 800dad8:	4b67      	ldr	r3, [pc, #412]	; (800dc78 <VESCNavStop+0x1a8>)
 800dada:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800dade:	eef5 7a40 	vcmp.f32	s15, #0.0
 800dae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dae6:	d117      	bne.n	800db18 <VESCNavStop+0x48>
 800dae8:	4b63      	ldr	r3, [pc, #396]	; (800dc78 <VESCNavStop+0x1a8>)
 800daea:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800daee:	eef5 7a40 	vcmp.f32	s15, #0.0
 800daf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daf6:	d10f      	bne.n	800db18 <VESCNavStop+0x48>
 800daf8:	4b5f      	ldr	r3, [pc, #380]	; (800dc78 <VESCNavStop+0x1a8>)
 800dafa:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800dafe:	eef5 7a40 	vcmp.f32	s15, #0.0
 800db02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db06:	d107      	bne.n	800db18 <VESCNavStop+0x48>
 800db08:	4b5b      	ldr	r3, [pc, #364]	; (800dc78 <VESCNavStop+0x1a8>)
 800db0a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800db0e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800db12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db16:	d076      	beq.n	800dc06 <VESCNavStop+0x136>
 800db18:	f000 fe0a 	bl	800e730 <HAL_GetTick>
 800db1c:	4603      	mov	r3, r0
 800db1e:	4a57      	ldr	r2, [pc, #348]	; (800dc7c <VESCNavStop+0x1ac>)
 800db20:	6812      	ldr	r2, [r2, #0]
 800db22:	1a9b      	subs	r3, r3, r2
 800db24:	2b64      	cmp	r3, #100	; 0x64
 800db26:	d96e      	bls.n	800dc06 <VESCNavStop+0x136>
	{
		VESCPIDProcess(-pow(VESCNav.a_vel, 2), -pow(VESCNav.b_vel, 2), -pow(VESCNav.c_vel, 2), -pow(VESCNav.d_vel, 2));
 800db28:	4b53      	ldr	r3, [pc, #332]	; (800dc78 <VESCNavStop+0x1a8>)
 800db2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db2e:	4618      	mov	r0, r3
 800db30:	f7f2 fd0a 	bl	8000548 <__aeabi_f2d>
 800db34:	4602      	mov	r2, r0
 800db36:	460b      	mov	r3, r1
 800db38:	ed9f 1b4d 	vldr	d1, [pc, #308]	; 800dc70 <VESCNavStop+0x1a0>
 800db3c:	ec43 2b10 	vmov	d0, r2, r3
 800db40:	f010 fb9a 	bl	801e278 <pow>
 800db44:	ec53 2b10 	vmov	r2, r3, d0
 800db48:	4610      	mov	r0, r2
 800db4a:	4619      	mov	r1, r3
 800db4c:	f7f3 f84c 	bl	8000be8 <__aeabi_d2f>
 800db50:	4603      	mov	r3, r0
 800db52:	ee07 3a90 	vmov	s15, r3
 800db56:	eeb1 8a67 	vneg.f32	s16, s15
 800db5a:	4b47      	ldr	r3, [pc, #284]	; (800dc78 <VESCNavStop+0x1a8>)
 800db5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db60:	4618      	mov	r0, r3
 800db62:	f7f2 fcf1 	bl	8000548 <__aeabi_f2d>
 800db66:	4602      	mov	r2, r0
 800db68:	460b      	mov	r3, r1
 800db6a:	ed9f 1b41 	vldr	d1, [pc, #260]	; 800dc70 <VESCNavStop+0x1a0>
 800db6e:	ec43 2b10 	vmov	d0, r2, r3
 800db72:	f010 fb81 	bl	801e278 <pow>
 800db76:	ec53 2b10 	vmov	r2, r3, d0
 800db7a:	4610      	mov	r0, r2
 800db7c:	4619      	mov	r1, r3
 800db7e:	f7f3 f833 	bl	8000be8 <__aeabi_d2f>
 800db82:	4603      	mov	r3, r0
 800db84:	ee07 3a90 	vmov	s15, r3
 800db88:	eef1 8a67 	vneg.f32	s17, s15
 800db8c:	4b3a      	ldr	r3, [pc, #232]	; (800dc78 <VESCNavStop+0x1a8>)
 800db8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db92:	4618      	mov	r0, r3
 800db94:	f7f2 fcd8 	bl	8000548 <__aeabi_f2d>
 800db98:	4602      	mov	r2, r0
 800db9a:	460b      	mov	r3, r1
 800db9c:	ed9f 1b34 	vldr	d1, [pc, #208]	; 800dc70 <VESCNavStop+0x1a0>
 800dba0:	ec43 2b10 	vmov	d0, r2, r3
 800dba4:	f010 fb68 	bl	801e278 <pow>
 800dba8:	ec53 2b10 	vmov	r2, r3, d0
 800dbac:	4610      	mov	r0, r2
 800dbae:	4619      	mov	r1, r3
 800dbb0:	f7f3 f81a 	bl	8000be8 <__aeabi_d2f>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	ee07 3a90 	vmov	s15, r3
 800dbba:	eeb1 9a67 	vneg.f32	s18, s15
 800dbbe:	4b2e      	ldr	r3, [pc, #184]	; (800dc78 <VESCNavStop+0x1a8>)
 800dbc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7f2 fcbf 	bl	8000548 <__aeabi_f2d>
 800dbca:	4602      	mov	r2, r0
 800dbcc:	460b      	mov	r3, r1
 800dbce:	ed9f 1b28 	vldr	d1, [pc, #160]	; 800dc70 <VESCNavStop+0x1a0>
 800dbd2:	ec43 2b10 	vmov	d0, r2, r3
 800dbd6:	f010 fb4f 	bl	801e278 <pow>
 800dbda:	ec53 2b10 	vmov	r2, r3, d0
 800dbde:	4610      	mov	r0, r2
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	f7f3 f801 	bl	8000be8 <__aeabi_d2f>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	ee07 3a90 	vmov	s15, r3
 800dbec:	eef1 7a67 	vneg.f32	s15, s15
 800dbf0:	eef0 1a67 	vmov.f32	s3, s15
 800dbf4:	eeb0 1a49 	vmov.f32	s2, s18
 800dbf8:	eef0 0a68 	vmov.f32	s1, s17
 800dbfc:	eeb0 0a48 	vmov.f32	s0, s16
 800dc00:	f000 f8f6 	bl	800ddf0 <VESCPIDProcess>
 800dc04:	e02d      	b.n	800dc62 <VESCNavStop+0x192>
	}
	else
	{
		sys.navi_vel = 0;
 800dc06:	4a1e      	ldr	r2, [pc, #120]	; (800dc80 <VESCNavStop+0x1b0>)
 800dc08:	7853      	ldrb	r3, [r2, #1]
 800dc0a:	f36f 0382 	bfc	r3, #2, #1
 800dc0e:	7053      	strb	r3, [r2, #1]

		PIDDelayInit(&fright_vel);
 800dc10:	481c      	ldr	r0, [pc, #112]	; (800dc84 <VESCNavStop+0x1b4>)
 800dc12:	f7f7 ffe6 	bl	8005be2 <PIDDelayInit>
		PIDDelayInit(&fleft_vel);
 800dc16:	481c      	ldr	r0, [pc, #112]	; (800dc88 <VESCNavStop+0x1b8>)
 800dc18:	f7f7 ffe3 	bl	8005be2 <PIDDelayInit>
		PIDDelayInit(&bleft_vel);
 800dc1c:	481b      	ldr	r0, [pc, #108]	; (800dc8c <VESCNavStop+0x1bc>)
 800dc1e:	f7f7 ffe0 	bl	8005be2 <PIDDelayInit>
		PIDDelayInit(&bright_vel);
 800dc22:	481b      	ldr	r0, [pc, #108]	; (800dc90 <VESCNavStop+0x1c0>)
 800dc24:	f7f7 ffdd 	bl	8005be2 <PIDDelayInit>

		fFLeftVelU = 0.0;
 800dc28:	4b1a      	ldr	r3, [pc, #104]	; (800dc94 <VESCNavStop+0x1c4>)
 800dc2a:	f04f 0200 	mov.w	r2, #0
 800dc2e:	601a      	str	r2, [r3, #0]
		fFRightVelU = 0.0;
 800dc30:	4b19      	ldr	r3, [pc, #100]	; (800dc98 <VESCNavStop+0x1c8>)
 800dc32:	f04f 0200 	mov.w	r2, #0
 800dc36:	601a      	str	r2, [r3, #0]
		fBLeftVelU = 0.0;
 800dc38:	4b18      	ldr	r3, [pc, #96]	; (800dc9c <VESCNavStop+0x1cc>)
 800dc3a:	f04f 0200 	mov.w	r2, #0
 800dc3e:	601a      	str	r2, [r3, #0]
		fBRightVelU = 0.0;
 800dc40:	4b17      	ldr	r3, [pc, #92]	; (800dca0 <VESCNavStop+0x1d0>)
 800dc42:	f04f 0200 	mov.w	r2, #0
 800dc46:	601a      	str	r2, [r3, #0]

		VESCStop(&VESCNav.a);
 800dc48:	480b      	ldr	r0, [pc, #44]	; (800dc78 <VESCNavStop+0x1a8>)
 800dc4a:	f000 fa57 	bl	800e0fc <VESCStop>
		VESCStop(&VESCNav.b);
 800dc4e:	4815      	ldr	r0, [pc, #84]	; (800dca4 <VESCNavStop+0x1d4>)
 800dc50:	f000 fa54 	bl	800e0fc <VESCStop>
		VESCStop(&VESCNav.c);
 800dc54:	4814      	ldr	r0, [pc, #80]	; (800dca8 <VESCNavStop+0x1d8>)
 800dc56:	f000 fa51 	bl	800e0fc <VESCStop>
		VESCStop(&VESCNav.d);
 800dc5a:	4814      	ldr	r0, [pc, #80]	; (800dcac <VESCNavStop+0x1dc>)
 800dc5c:	f000 fa4e 	bl	800e0fc <VESCStop>
	}
}
 800dc60:	bf00      	nop
 800dc62:	bf00      	nop
 800dc64:	46bd      	mov	sp, r7
 800dc66:	ecbd 8b04 	vpop	{d8-d9}
 800dc6a:	bd80      	pop	{r7, pc}
 800dc6c:	f3af 8000 	nop.w
 800dc70:	00000000 	.word	0x00000000
 800dc74:	40000000 	.word	0x40000000
 800dc78:	200092b4 	.word	0x200092b4
 800dc7c:	2000976c 	.word	0x2000976c
 800dc80:	200071b8 	.word	0x200071b8
 800dc84:	20007274 	.word	0x20007274
 800dc88:	2000772c 	.word	0x2000772c
 800dc8c:	20006990 	.word	0x20006990
 800dc90:	20009b4c 	.word	0x20009b4c
 800dc94:	20007728 	.word	0x20007728
 800dc98:	20006814 	.word	0x20006814
 800dc9c:	20006a7c 	.word	0x20006a7c
 800dca0:	20006500 	.word	0x20006500
 800dca4:	200092d4 	.word	0x200092d4
 800dca8:	200092f4 	.word	0x200092f4
 800dcac:	20009314 	.word	0x20009314

0800dcb0 <VESCNavCalVel>:
	VESCHandBrake(&VESCNav.c, c);
	VESCHandBrake(&VESCNav.d, d);
}

void VESCNavCalVel(float rpmA, float rpmB, float rpmC, float rpmD)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b084      	sub	sp, #16
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	ed87 0a03 	vstr	s0, [r7, #12]
 800dcba:	edc7 0a02 	vstr	s1, [r7, #8]
 800dcbe:	ed87 1a01 	vstr	s2, [r7, #4]
 800dcc2:	edc7 1a00 	vstr	s3, [r7]
//	rpmA *= (MCCONF_SI_MOTOR_POLES / 2);
//	rpmB *= (MCCONF_SI_MOTOR_POLES / 2);
//	rpmC *= (MCCONF_SI_MOTOR_POLES / 2);
//	rpmD *= (MCCONF_SI_MOTOR_POLES / 2);

	VESCNav.a_vel = (((rpmA / (MCCONF_SI_MOTOR_POLES / 2)) / MCCONF_SI_GEAR_RATIO) * (M_PI * MCCONF_SI_WHEEL_DIAMETER)) / 60;
 800dcc6:	edd7 7a03 	vldr	s15, [r7, #12]
 800dcca:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800dcce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dcd2:	ee16 0a90 	vmov	r0, s13
 800dcd6:	f7f2 fc37 	bl	8000548 <__aeabi_f2d>
 800dcda:	a341      	add	r3, pc, #260	; (adr r3, 800dde0 <VESCNavCalVel+0x130>)
 800dcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce0:	f7f2 fc8a 	bl	80005f8 <__aeabi_dmul>
 800dce4:	4602      	mov	r2, r0
 800dce6:	460b      	mov	r3, r1
 800dce8:	4610      	mov	r0, r2
 800dcea:	4619      	mov	r1, r3
 800dcec:	f04f 0200 	mov.w	r2, #0
 800dcf0:	4b3d      	ldr	r3, [pc, #244]	; (800dde8 <VESCNavCalVel+0x138>)
 800dcf2:	f7f2 fdab 	bl	800084c <__aeabi_ddiv>
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	4610      	mov	r0, r2
 800dcfc:	4619      	mov	r1, r3
 800dcfe:	f7f2 ff73 	bl	8000be8 <__aeabi_d2f>
 800dd02:	4603      	mov	r3, r0
 800dd04:	4a39      	ldr	r2, [pc, #228]	; (800ddec <VESCNavCalVel+0x13c>)
 800dd06:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	VESCNav.b_vel = (((rpmB / (MCCONF_SI_MOTOR_POLES / 2)) / MCCONF_SI_GEAR_RATIO) * (M_PI * MCCONF_SI_WHEEL_DIAMETER)) / 60;
 800dd0a:	edd7 7a02 	vldr	s15, [r7, #8]
 800dd0e:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800dd12:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dd16:	ee16 0a90 	vmov	r0, s13
 800dd1a:	f7f2 fc15 	bl	8000548 <__aeabi_f2d>
 800dd1e:	a330      	add	r3, pc, #192	; (adr r3, 800dde0 <VESCNavCalVel+0x130>)
 800dd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd24:	f7f2 fc68 	bl	80005f8 <__aeabi_dmul>
 800dd28:	4602      	mov	r2, r0
 800dd2a:	460b      	mov	r3, r1
 800dd2c:	4610      	mov	r0, r2
 800dd2e:	4619      	mov	r1, r3
 800dd30:	f04f 0200 	mov.w	r2, #0
 800dd34:	4b2c      	ldr	r3, [pc, #176]	; (800dde8 <VESCNavCalVel+0x138>)
 800dd36:	f7f2 fd89 	bl	800084c <__aeabi_ddiv>
 800dd3a:	4602      	mov	r2, r0
 800dd3c:	460b      	mov	r3, r1
 800dd3e:	4610      	mov	r0, r2
 800dd40:	4619      	mov	r1, r3
 800dd42:	f7f2 ff51 	bl	8000be8 <__aeabi_d2f>
 800dd46:	4603      	mov	r3, r0
 800dd48:	4a28      	ldr	r2, [pc, #160]	; (800ddec <VESCNavCalVel+0x13c>)
 800dd4a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	VESCNav.c_vel = (((rpmC / (MCCONF_SI_MOTOR_POLES / 2)) / MCCONF_SI_GEAR_RATIO) * (M_PI * MCCONF_SI_WHEEL_DIAMETER)) / 60;
 800dd4e:	edd7 7a01 	vldr	s15, [r7, #4]
 800dd52:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800dd56:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dd5a:	ee16 0a90 	vmov	r0, s13
 800dd5e:	f7f2 fbf3 	bl	8000548 <__aeabi_f2d>
 800dd62:	a31f      	add	r3, pc, #124	; (adr r3, 800dde0 <VESCNavCalVel+0x130>)
 800dd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd68:	f7f2 fc46 	bl	80005f8 <__aeabi_dmul>
 800dd6c:	4602      	mov	r2, r0
 800dd6e:	460b      	mov	r3, r1
 800dd70:	4610      	mov	r0, r2
 800dd72:	4619      	mov	r1, r3
 800dd74:	f04f 0200 	mov.w	r2, #0
 800dd78:	4b1b      	ldr	r3, [pc, #108]	; (800dde8 <VESCNavCalVel+0x138>)
 800dd7a:	f7f2 fd67 	bl	800084c <__aeabi_ddiv>
 800dd7e:	4602      	mov	r2, r0
 800dd80:	460b      	mov	r3, r1
 800dd82:	4610      	mov	r0, r2
 800dd84:	4619      	mov	r1, r3
 800dd86:	f7f2 ff2f 	bl	8000be8 <__aeabi_d2f>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	4a17      	ldr	r2, [pc, #92]	; (800ddec <VESCNavCalVel+0x13c>)
 800dd8e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	VESCNav.d_vel = (((rpmD / (MCCONF_SI_MOTOR_POLES / 2)) / MCCONF_SI_GEAR_RATIO) * (M_PI * MCCONF_SI_WHEEL_DIAMETER)) / 60;
 800dd92:	edd7 7a00 	vldr	s15, [r7]
 800dd96:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800dd9a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dd9e:	ee16 0a90 	vmov	r0, s13
 800dda2:	f7f2 fbd1 	bl	8000548 <__aeabi_f2d>
 800dda6:	a30e      	add	r3, pc, #56	; (adr r3, 800dde0 <VESCNavCalVel+0x130>)
 800dda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddac:	f7f2 fc24 	bl	80005f8 <__aeabi_dmul>
 800ddb0:	4602      	mov	r2, r0
 800ddb2:	460b      	mov	r3, r1
 800ddb4:	4610      	mov	r0, r2
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	f04f 0200 	mov.w	r2, #0
 800ddbc:	4b0a      	ldr	r3, [pc, #40]	; (800dde8 <VESCNavCalVel+0x138>)
 800ddbe:	f7f2 fd45 	bl	800084c <__aeabi_ddiv>
 800ddc2:	4602      	mov	r2, r0
 800ddc4:	460b      	mov	r3, r1
 800ddc6:	4610      	mov	r0, r2
 800ddc8:	4619      	mov	r1, r3
 800ddca:	f7f2 ff0d 	bl	8000be8 <__aeabi_d2f>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	4a06      	ldr	r2, [pc, #24]	; (800ddec <VESCNavCalVel+0x13c>)
 800ddd2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 800ddd6:	bf00      	nop
 800ddd8:	3710      	adds	r7, #16
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}
 800ddde:	bf00      	nop
 800dde0:	769cf0e0 	.word	0x769cf0e0
 800dde4:	3fd41b2f 	.word	0x3fd41b2f
 800dde8:	404e0000 	.word	0x404e0000
 800ddec:	200092b4 	.word	0x200092b4

0800ddf0 <VESCPIDProcess>:
 * Keep calculating error from feedback of motor
 * Should be called in Calculation task
 * Recommend to use this function for robot navigation rather than VESCVelocity
 */
void VESCPIDProcess(float a, float b, float c, float d)
{
 800ddf0:	b480      	push	{r7}
 800ddf2:	b085      	sub	sp, #20
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	ed87 0a03 	vstr	s0, [r7, #12]
 800ddfa:	edc7 0a02 	vstr	s1, [r7, #8]
 800ddfe:	ed87 1a01 	vstr	s2, [r7, #4]
 800de02:	edc7 1a00 	vstr	s3, [r7]
	fFLeftVelErr = a - VESCNav.a_vel;
 800de06:	4b19      	ldr	r3, [pc, #100]	; (800de6c <VESCPIDProcess+0x7c>)
 800de08:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800de0c:	ed97 7a03 	vldr	s14, [r7, #12]
 800de10:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de14:	4b16      	ldr	r3, [pc, #88]	; (800de70 <VESCPIDProcess+0x80>)
 800de16:	edc3 7a00 	vstr	s15, [r3]
	fFRightVelErr = b - VESCNav.b_vel;
 800de1a:	4b14      	ldr	r3, [pc, #80]	; (800de6c <VESCPIDProcess+0x7c>)
 800de1c:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800de20:	ed97 7a02 	vldr	s14, [r7, #8]
 800de24:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de28:	4b12      	ldr	r3, [pc, #72]	; (800de74 <VESCPIDProcess+0x84>)
 800de2a:	edc3 7a00 	vstr	s15, [r3]
	fBLeftVelErr = c - VESCNav.c_vel;
 800de2e:	4b0f      	ldr	r3, [pc, #60]	; (800de6c <VESCPIDProcess+0x7c>)
 800de30:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800de34:	ed97 7a01 	vldr	s14, [r7, #4]
 800de38:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de3c:	4b0e      	ldr	r3, [pc, #56]	; (800de78 <VESCPIDProcess+0x88>)
 800de3e:	edc3 7a00 	vstr	s15, [r3]
	fBRightVelErr = d - VESCNav.d_vel;
 800de42:	4b0a      	ldr	r3, [pc, #40]	; (800de6c <VESCPIDProcess+0x7c>)
 800de44:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800de48:	ed97 7a00 	vldr	s14, [r7]
 800de4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de50:	4b0a      	ldr	r3, [pc, #40]	; (800de7c <VESCPIDProcess+0x8c>)
 800de52:	edc3 7a00 	vstr	s15, [r3]

	sys.navi_vel = 1;
 800de56:	4a0a      	ldr	r2, [pc, #40]	; (800de80 <VESCPIDProcess+0x90>)
 800de58:	7853      	ldrb	r3, [r2, #1]
 800de5a:	f043 0304 	orr.w	r3, r3, #4
 800de5e:	7053      	strb	r3, [r2, #1]
}
 800de60:	bf00      	nop
 800de62:	3714      	adds	r7, #20
 800de64:	46bd      	mov	sp, r7
 800de66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6a:	4770      	bx	lr
 800de6c:	200092b4 	.word	0x200092b4
 800de70:	20007700 	.word	0x20007700
 800de74:	200090a0 	.word	0x200090a0
 800de78:	20009b44 	.word	0x20009b44
 800de7c:	20006810 	.word	0x20006810
 800de80:	200071b8 	.word	0x200071b8

0800de84 <VESCPIDAct>:

/*
 * Implement the PID output for robot navigation
 */
void VESCPIDAct(void)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	af00      	add	r7, sp, #0
	if(sys.navi_vel)
 800de88:	4b22      	ldr	r3, [pc, #136]	; (800df14 <VESCPIDAct+0x90>)
 800de8a:	785b      	ldrb	r3, [r3, #1]
 800de8c:	f003 0304 	and.w	r3, r3, #4
 800de90:	b2db      	uxtb	r3, r3
 800de92:	2b00      	cmp	r3, #0
 800de94:	d00b      	beq.n	800deae <VESCPIDAct+0x2a>
	{
		PID(&fleft_vel);
 800de96:	4820      	ldr	r0, [pc, #128]	; (800df18 <VESCPIDAct+0x94>)
 800de98:	f7f7 fec1 	bl	8005c1e <PID>
		PID(&fright_vel);
 800de9c:	481f      	ldr	r0, [pc, #124]	; (800df1c <VESCPIDAct+0x98>)
 800de9e:	f7f7 febe 	bl	8005c1e <PID>
		PID(&bleft_vel);
 800dea2:	481f      	ldr	r0, [pc, #124]	; (800df20 <VESCPIDAct+0x9c>)
 800dea4:	f7f7 febb 	bl	8005c1e <PID>
		PID(&bright_vel);
 800dea8:	481e      	ldr	r0, [pc, #120]	; (800df24 <VESCPIDAct+0xa0>)
 800deaa:	f7f7 feb8 	bl	8005c1e <PID>
	}
	VESCPDC(fFLeftVelU / 19999.00, &VESCNav.a);
 800deae:	4b1e      	ldr	r3, [pc, #120]	; (800df28 <VESCPIDAct+0xa4>)
 800deb0:	edd3 7a00 	vldr	s15, [r3]
 800deb4:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800df2c <VESCPIDAct+0xa8>
 800deb8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800debc:	481c      	ldr	r0, [pc, #112]	; (800df30 <VESCPIDAct+0xac>)
 800debe:	eeb0 0a47 	vmov.f32	s0, s14
 800dec2:	f000 f8f1 	bl	800e0a8 <VESCPDC>
	VESCPDC(fFRightVelU / 19999.00, &VESCNav.b);
 800dec6:	4b1b      	ldr	r3, [pc, #108]	; (800df34 <VESCPIDAct+0xb0>)
 800dec8:	edd3 7a00 	vldr	s15, [r3]
 800decc:	eddf 6a17 	vldr	s13, [pc, #92]	; 800df2c <VESCPIDAct+0xa8>
 800ded0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ded4:	4818      	ldr	r0, [pc, #96]	; (800df38 <VESCPIDAct+0xb4>)
 800ded6:	eeb0 0a47 	vmov.f32	s0, s14
 800deda:	f000 f8e5 	bl	800e0a8 <VESCPDC>
	VESCPDC(fBLeftVelU / 19999.00, &VESCNav.c);
 800dede:	4b17      	ldr	r3, [pc, #92]	; (800df3c <VESCPIDAct+0xb8>)
 800dee0:	edd3 7a00 	vldr	s15, [r3]
 800dee4:	eddf 6a11 	vldr	s13, [pc, #68]	; 800df2c <VESCPIDAct+0xa8>
 800dee8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800deec:	4814      	ldr	r0, [pc, #80]	; (800df40 <VESCPIDAct+0xbc>)
 800deee:	eeb0 0a47 	vmov.f32	s0, s14
 800def2:	f000 f8d9 	bl	800e0a8 <VESCPDC>
	VESCPDC(fBRightVelU / 19999.00, &VESCNav.d);
 800def6:	4b13      	ldr	r3, [pc, #76]	; (800df44 <VESCPIDAct+0xc0>)
 800def8:	edd3 7a00 	vldr	s15, [r3]
 800defc:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800df2c <VESCPIDAct+0xa8>
 800df00:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800df04:	4810      	ldr	r0, [pc, #64]	; (800df48 <VESCPIDAct+0xc4>)
 800df06:	eeb0 0a47 	vmov.f32	s0, s14
 800df0a:	f000 f8cd 	bl	800e0a8 <VESCPDC>
}
 800df0e:	bf00      	nop
 800df10:	bd80      	pop	{r7, pc}
 800df12:	bf00      	nop
 800df14:	200071b8 	.word	0x200071b8
 800df18:	2000772c 	.word	0x2000772c
 800df1c:	20007274 	.word	0x20007274
 800df20:	20006990 	.word	0x20006990
 800df24:	20009b4c 	.word	0x20009b4c
 800df28:	20007728 	.word	0x20007728
 800df2c:	469c3e00 	.word	0x469c3e00
 800df30:	200092b4 	.word	0x200092b4
 800df34:	20006814 	.word	0x20006814
 800df38:	200092d4 	.word	0x200092d4
 800df3c:	20006a7c 	.word	0x20006a7c
 800df40:	200092f4 	.word	0x200092f4
 800df44:	20006500 	.word	0x20006500
 800df48:	20009314 	.word	0x20009314
 800df4c:	00000000 	.word	0x00000000

0800df50 <VESCNav5ms>:

/*
 * System 5ms
 */
void VESCNav5ms()
{
 800df50:	b580      	push	{r7, lr}
 800df52:	af00      	add	r7, sp, #0
	fXEncData = 0.05 / 4000.0 * 3.142 * (QEIRead(QEI1) - 500);
 800df54:	2001      	movs	r0, #1
 800df56:	f7f3 fffb 	bl	8001f50 <QEIRead>
 800df5a:	4603      	mov	r3, r0
 800df5c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800df60:	4618      	mov	r0, r3
 800df62:	f7f2 fadf 	bl	8000524 <__aeabi_i2d>
 800df66:	a334      	add	r3, pc, #208	; (adr r3, 800e038 <VESCNav5ms+0xe8>)
 800df68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df6c:	f7f2 fb44 	bl	80005f8 <__aeabi_dmul>
 800df70:	4602      	mov	r2, r0
 800df72:	460b      	mov	r3, r1
 800df74:	4610      	mov	r0, r2
 800df76:	4619      	mov	r1, r3
 800df78:	f7f2 fe36 	bl	8000be8 <__aeabi_d2f>
 800df7c:	4603      	mov	r3, r0
 800df7e:	4a30      	ldr	r2, [pc, #192]	; (800e040 <VESCNav5ms+0xf0>)
 800df80:	6013      	str	r3, [r2, #0]
	fYEncData = 0.05 / 4000.0 * 3.142 * (QEIRead(QEI4) - 500);
 800df82:	2004      	movs	r0, #4
 800df84:	f7f3 ffe4 	bl	8001f50 <QEIRead>
 800df88:	4603      	mov	r3, r0
 800df8a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800df8e:	4618      	mov	r0, r3
 800df90:	f7f2 fac8 	bl	8000524 <__aeabi_i2d>
 800df94:	a328      	add	r3, pc, #160	; (adr r3, 800e038 <VESCNav5ms+0xe8>)
 800df96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df9a:	f7f2 fb2d 	bl	80005f8 <__aeabi_dmul>
 800df9e:	4602      	mov	r2, r0
 800dfa0:	460b      	mov	r3, r1
 800dfa2:	4610      	mov	r0, r2
 800dfa4:	4619      	mov	r1, r3
 800dfa6:	f7f2 fe1f 	bl	8000be8 <__aeabi_d2f>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	4a25      	ldr	r2, [pc, #148]	; (800e044 <VESCNav5ms+0xf4>)
 800dfae:	6013      	str	r3, [r2, #0]

	ABT(&x_data);
 800dfb0:	4825      	ldr	r0, [pc, #148]	; (800e048 <VESCNav5ms+0xf8>)
 800dfb2:	f7f3 f861 	bl	8001078 <ABT>
	ABT(&y_data);
 800dfb6:	4825      	ldr	r0, [pc, #148]	; (800e04c <VESCNav5ms+0xfc>)
 800dfb8:	f7f3 f85e 	bl	8001078 <ABT>
	fyaw = (fyaw >= 0.0) ? fyaw : 360.0 + fyaw;
 800dfbc:	4b24      	ldr	r3, [pc, #144]	; (800e050 <VESCNav5ms+0x100>)
 800dfbe:	edd3 7a00 	vldr	s15, [r3]
 800dfc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dfc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfca:	db02      	blt.n	800dfd2 <VESCNav5ms+0x82>
 800dfcc:	4b20      	ldr	r3, [pc, #128]	; (800e050 <VESCNav5ms+0x100>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	e010      	b.n	800dff4 <VESCNav5ms+0xa4>
 800dfd2:	4b1f      	ldr	r3, [pc, #124]	; (800e050 <VESCNav5ms+0x100>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f7f2 fab6 	bl	8000548 <__aeabi_f2d>
 800dfdc:	f04f 0200 	mov.w	r2, #0
 800dfe0:	4b1c      	ldr	r3, [pc, #112]	; (800e054 <VESCNav5ms+0x104>)
 800dfe2:	f7f2 f953 	bl	800028c <__adddf3>
 800dfe6:	4602      	mov	r2, r0
 800dfe8:	460b      	mov	r3, r1
 800dfea:	4610      	mov	r0, r2
 800dfec:	4619      	mov	r1, r3
 800dfee:	f7f2 fdfb 	bl	8000be8 <__aeabi_d2f>
 800dff2:	4603      	mov	r3, r0
 800dff4:	4a16      	ldr	r2, [pc, #88]	; (800e050 <VESCNav5ms+0x100>)
 800dff6:	6013      	str	r3, [r2, #0]

	PathPlan(&pp);
 800dff8:	4817      	ldr	r0, [pc, #92]	; (800e058 <VESCNav5ms+0x108>)
 800dffa:	f7f8 f879 	bl	80060f0 <PathPlan>
	VESCNavCalVel(VESCNav.a.info.rpm, VESCNav.b.info.rpm, VESCNav.c.info.rpm, VESCNav.d.info.rpm);
 800dffe:	4b17      	ldr	r3, [pc, #92]	; (800e05c <VESCNav5ms+0x10c>)
 800e000:	edd3 7a04 	vldr	s15, [r3, #16]
 800e004:	4b15      	ldr	r3, [pc, #84]	; (800e05c <VESCNav5ms+0x10c>)
 800e006:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800e00a:	4b14      	ldr	r3, [pc, #80]	; (800e05c <VESCNav5ms+0x10c>)
 800e00c:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 800e010:	4b12      	ldr	r3, [pc, #72]	; (800e05c <VESCNav5ms+0x10c>)
 800e012:	ed93 6a1c 	vldr	s12, [r3, #112]	; 0x70
 800e016:	eef0 1a46 	vmov.f32	s3, s12
 800e01a:	eeb0 1a66 	vmov.f32	s2, s13
 800e01e:	eef0 0a47 	vmov.f32	s1, s14
 800e022:	eeb0 0a67 	vmov.f32	s0, s15
 800e026:	f7ff fe43 	bl	800dcb0 <VESCNavCalVel>
	CalcPoleDist(&EncPole);
 800e02a:	480d      	ldr	r0, [pc, #52]	; (800e060 <VESCNav5ms+0x110>)
 800e02c:	f7fd ff5c 	bl	800bee8 <CalcPoleDist>
	VESCPIDAct();
 800e030:	f7ff ff28 	bl	800de84 <VESCPIDAct>
}
 800e034:	bf00      	nop
 800e036:	bd80      	pop	{r7, pc}
 800e038:	b9727cf5 	.word	0xb9727cf5
 800e03c:	3f049766 	.word	0x3f049766
 800e040:	20006884 	.word	0x20006884
 800e044:	2000a124 	.word	0x2000a124
 800e048:	2000a100 	.word	0x2000a100
 800e04c:	20007704 	.word	0x20007704
 800e050:	20009730 	.word	0x20009730
 800e054:	40768000 	.word	0x40768000
 800e058:	20006c44 	.word	0x20006c44
 800e05c:	200092b4 	.word	0x200092b4
 800e060:	20009458 	.word	0x20009458

0800e064 <VESCInit>:
 * 						  wheel_diameter 	wheel diameter
 * 						  vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCInit(40000,1,0.0037,&csev);
 */
void VESCInit(float max_rpm, float pole_pairs, float wheel_diameter,uint16_t Instance, VESC_t* vesc){
 800e064:	b580      	push	{r7, lr}
 800e066:	b086      	sub	sp, #24
 800e068:	af00      	add	r7, sp, #0
 800e06a:	ed87 0a05 	vstr	s0, [r7, #20]
 800e06e:	edc7 0a04 	vstr	s1, [r7, #16]
 800e072:	ed87 1a03 	vstr	s2, [r7, #12]
 800e076:	4603      	mov	r3, r0
 800e078:	6079      	str	r1, [r7, #4]
 800e07a:	817b      	strh	r3, [r7, #10]
	bldc_interface_init(bldc_send_packet);
 800e07c:	4809      	ldr	r0, [pc, #36]	; (800e0a4 <VESCInit+0x40>)
 800e07e:	f7ff f8bd 	bl	800d1fc <bldc_interface_init>
//	bldc_interface_set_rx_value_selective_func(bldc_val_selective_received_cb);

	vesc->max_rpm = max_rpm;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	697a      	ldr	r2, [r7, #20]
 800e086:	601a      	str	r2, [r3, #0]
	vesc->pole_pairs = pole_pairs;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	693a      	ldr	r2, [r7, #16]
 800e08c:	605a      	str	r2, [r3, #4]
	vesc->wheel_diameter = wheel_diameter;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	68fa      	ldr	r2, [r7, #12]
 800e092:	609a      	str	r2, [r3, #8]
	vesc->Instance = Instance;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	897a      	ldrh	r2, [r7, #10]
 800e098:	819a      	strh	r2, [r3, #12]
}
 800e09a:	bf00      	nop
 800e09c:	3718      	adds	r7, #24
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd80      	pop	{r7, pc}
 800e0a2:	bf00      	nop
 800e0a4:	0800e171 	.word	0x0800e171

0800e0a8 <VESCPDC>:
 * 						  BRightPDC		duty cycle of back right motor
 * 						  vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCPDC(0.5, 0.5, 0.5, 0.5);
 */
void VESCPDC(float Duty, VESC_t* vesc) {
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b082      	sub	sp, #8
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	ed87 0a01 	vstr	s0, [r7, #4]
 800e0b2:	6038      	str	r0, [r7, #0]

	if(Duty > 0.9){
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f7f2 fa47 	bl	8000548 <__aeabi_f2d>
 800e0ba:	a30e      	add	r3, pc, #56	; (adr r3, 800e0f4 <VESCPDC+0x4c>)
 800e0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c0:	f7f2 fd2a 	bl	8000b18 <__aeabi_dcmpgt>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d001      	beq.n	800e0ce <VESCPDC+0x26>
		Duty = 0.9;
 800e0ca:	4b09      	ldr	r3, [pc, #36]	; (800e0f0 <VESCPDC+0x48>)
 800e0cc:	607b      	str	r3, [r7, #4]
	}

	comm_can_set_duty(vesc->Instance, Duty);
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	899b      	ldrh	r3, [r3, #12]
 800e0d2:	b2db      	uxtb	r3, r3
 800e0d4:	ed97 0a01 	vldr	s0, [r7, #4]
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f7ff faad 	bl	800d638 <comm_can_set_duty>

	vesc->pdc_flag = 1;
 800e0de:	683a      	ldr	r2, [r7, #0]
 800e0e0:	7f13      	ldrb	r3, [r2, #28]
 800e0e2:	f043 0304 	orr.w	r3, r3, #4
 800e0e6:	7713      	strb	r3, [r2, #28]
}
 800e0e8:	bf00      	nop
 800e0ea:	3708      	adds	r7, #8
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}
 800e0f0:	3f666666 	.word	0x3f666666
 800e0f4:	cccccccd 	.word	0xcccccccd
 800e0f8:	3feccccc 	.word	0x3feccccc

0800e0fc <VESCStop>:
 * Function Remarks		: NONE
 * Function Arguments	: vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCStop(&csev);
 */
void VESCStop(VESC_t* vesc) {
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b082      	sub	sp, #8
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]

	if(vesc->pdc_flag) {
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	7f1b      	ldrb	r3, [r3, #28]
 800e108:	f003 0304 	and.w	r3, r3, #4
 800e10c:	b2db      	uxtb	r3, r3
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d007      	beq.n	800e122 <VESCStop+0x26>
		comm_can_set_duty(vesc->Instance, 0.0);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	899b      	ldrh	r3, [r3, #12]
 800e116:	b2db      	uxtb	r3, r3
 800e118:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800e16c <VESCStop+0x70>
 800e11c:	4618      	mov	r0, r3
 800e11e:	f7ff fa8b 	bl	800d638 <comm_can_set_duty>
	}

	if(vesc->rpm_flag) {
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	7f1b      	ldrb	r3, [r3, #28]
 800e126:	f003 0302 	and.w	r3, r3, #2
 800e12a:	b2db      	uxtb	r3, r3
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d007      	beq.n	800e140 <VESCStop+0x44>
		comm_can_set_rpm(vesc->Instance, 0.0);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	899b      	ldrh	r3, [r3, #12]
 800e134:	b2db      	uxtb	r3, r3
 800e136:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800e16c <VESCStop+0x70>
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7ff faf2 	bl	800d724 <comm_can_set_rpm>
	}

	if(vesc->current_flag){
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	7f1b      	ldrb	r3, [r3, #28]
 800e144:	f003 0301 	and.w	r3, r3, #1
 800e148:	b2db      	uxtb	r3, r3
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d007      	beq.n	800e15e <VESCStop+0x62>
		comm_can_set_current(vesc->Instance, 0.0);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	899b      	ldrh	r3, [r3, #12]
 800e152:	b2db      	uxtb	r3, r3
 800e154:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800e16c <VESCStop+0x70>
 800e158:	4618      	mov	r0, r3
 800e15a:	f7ff fab1 	bl	800d6c0 <comm_can_set_current>
	}

	vesc->flags = 0;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2200      	movs	r2, #0
 800e162:	771a      	strb	r2, [r3, #28]
}
 800e164:	bf00      	nop
 800e166:	3708      	adds	r7, #8
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}
 800e16c:	00000000 	.word	0x00000000

0800e170 <bldc_send_packet>:
//	rx_value_complete = false;
	return rx_value_buf;
}

/*	Private Function	*/
void bldc_send_packet(uint8_t controller_id, uint8_t *data, unsigned int len) {
 800e170:	b580      	push	{r7, lr}
 800e172:	b084      	sub	sp, #16
 800e174:	af00      	add	r7, sp, #0
 800e176:	4603      	mov	r3, r0
 800e178:	60b9      	str	r1, [r7, #8]
 800e17a:	607a      	str	r2, [r7, #4]
 800e17c:	73fb      	strb	r3, [r7, #15]
	comm_can_send_buffer(controller_id, data, len, 0);
 800e17e:	7bf8      	ldrb	r0, [r7, #15]
 800e180:	2300      	movs	r3, #0
 800e182:	687a      	ldr	r2, [r7, #4]
 800e184:	68b9      	ldr	r1, [r7, #8]
 800e186:	f7ff f93b 	bl	800d400 <comm_can_send_buffer>
}
 800e18a:	bf00      	nop
 800e18c:	3710      	adds	r7, #16
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}

0800e192 <LidarInit>:
#include "obstacle_detect.h"

void LidarInit(UART_HandleTypeDef* lidarUART, MODE_t mode, float lidar_offset_x, float lidar_offset_y,
		float pole_offset_x, float pole_offset_y, Lidar_t* lidar)
{
 800e192:	b580      	push	{r7, lr}
 800e194:	b088      	sub	sp, #32
 800e196:	af00      	add	r7, sp, #0
 800e198:	61f8      	str	r0, [r7, #28]
 800e19a:	460b      	mov	r3, r1
 800e19c:	ed87 0a05 	vstr	s0, [r7, #20]
 800e1a0:	edc7 0a04 	vstr	s1, [r7, #16]
 800e1a4:	ed87 1a03 	vstr	s2, [r7, #12]
 800e1a8:	edc7 1a02 	vstr	s3, [r7, #8]
 800e1ac:	607a      	str	r2, [r7, #4]
 800e1ae:	76fb      	strb	r3, [r7, #27]
	lidar->lidar_UART = lidarUART;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	69fa      	ldr	r2, [r7, #28]
 800e1b4:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	lidar->mode = mode;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	7efa      	ldrb	r2, [r7, #27]
 800e1bc:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
	lidar->start = 0;
 800e1c0:	687a      	ldr	r2, [r7, #4]
 800e1c2:	f892 31e0 	ldrb.w	r3, [r2, #480]	; 0x1e0
 800e1c6:	f36f 0382 	bfc	r3, #2, #1
 800e1ca:	f882 31e0 	strb.w	r3, [r2, #480]	; 0x1e0
	lidar->lidar_offset_x = lidar_offset_x;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	697a      	ldr	r2, [r7, #20]
 800e1d2:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	lidar->lidar_offset_y = lidar_offset_y;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	693a      	ldr	r2, [r7, #16]
 800e1da:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
	lidar->pole_offset_x = pole_offset_x;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	68fa      	ldr	r2, [r7, #12]
 800e1e2:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	lidar->pole_offset_y = pole_offset_y;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	68ba      	ldr	r2, [r7, #8]
 800e1ea:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc

	if(lidar->mode == CONTINUOUS)
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d110      	bne.n	800e21a <LidarInit+0x88>
	{
		HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 5);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	33c9      	adds	r3, #201	; 0xc9
 800e202:	2205      	movs	r2, #5
 800e204:	4619      	mov	r1, r3
 800e206:	f006 fd6b 	bl	8014ce0 <HAL_UART_Receive_IT>
		lidar->new = 0;
 800e20a:	687a      	ldr	r2, [r7, #4]
 800e20c:	f892 31e0 	ldrb.w	r3, [r2, #480]	; 0x1e0
 800e210:	f36f 0300 	bfc	r3, #0, #1
 800e214:	f882 31e0 	strb.w	r3, [r2, #480]	; 0x1e0
	else
	{
		lidar->response = NO;
		HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 2);
	}
}
 800e218:	e00c      	b.n	800e234 <LidarInit+0xa2>
		lidar->response = NO;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2201      	movs	r2, #1
 800e21e:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
		HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 2);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	33c9      	adds	r3, #201	; 0xc9
 800e22c:	2202      	movs	r2, #2
 800e22e:	4619      	mov	r1, r3
 800e230:	f006 fd56 	bl	8014ce0 <HAL_UART_Receive_IT>
}
 800e234:	bf00      	nop
 800e236:	3720      	adds	r7, #32
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}

0800e23c <LidarSendIns>:

// Send Instruction to pi/pc
void LidarSendIns(Instruction_t ins, Lidar_t* lidar)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b082      	sub	sp, #8
 800e240:	af00      	add	r7, sp, #0
 800e242:	4603      	mov	r3, r0
 800e244:	6039      	str	r1, [r7, #0]
 800e246:	71fb      	strb	r3, [r7, #7]
	lidar->inst = ins;
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	79fa      	ldrb	r2, [r7, #7]
 800e24c:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	lidar->obstacle_send[0] = 0x01;
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	2201      	movs	r2, #1
 800e254:	705a      	strb	r2, [r3, #1]
	memcpy(&lidar->obstacle_send[1], &lidar->inst, 1);
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	3302      	adds	r3, #2
 800e25a:	683a      	ldr	r2, [r7, #0]
 800e25c:	f502 72cc 	add.w	r2, r2, #408	; 0x198
 800e260:	7812      	ldrb	r2, [r2, #0]
 800e262:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(lidar->lidar_UART, lidar->obstacle_send, 2, HAL_MAX_DELAY);
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	1c59      	adds	r1, r3, #1
 800e26e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e272:	2202      	movs	r2, #2
 800e274:	f006 fc9b 	bl	8014bae <HAL_UART_Transmit>
	HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 25);
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	33c9      	adds	r3, #201	; 0xc9
 800e282:	2219      	movs	r2, #25
 800e284:	4619      	mov	r1, r3
 800e286:	f006 fd2b 	bl	8014ce0 <HAL_UART_Receive_IT>
}
 800e28a:	bf00      	nop
 800e28c:	3708      	adds	r7, #8
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}
	...

0800e294 <ObstacleHandler>:
	}
}

// Call this in UART Callback
void ObstacleHandler(Lidar_t* lidar)
{
 800e294:	b5b0      	push	{r4, r5, r7, lr}
 800e296:	b084      	sub	sp, #16
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
	if(lidar->mode == CONTINUOUS)
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	f040 8115 	bne.w	800e4d2 <ObstacleHandler+0x23e>
	{
		static int mode = 0;
		switch(mode)
 800e2a8:	4baa      	ldr	r3, [pc, #680]	; (800e554 <ObstacleHandler+0x2c0>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d002      	beq.n	800e2b6 <ObstacleHandler+0x22>
 800e2b0:	2b01      	cmp	r3, #1
 800e2b2:	d061      	beq.n	800e378 <ObstacleHandler+0xe4>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.y, 8, HAL_MAX_DELAY);
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.distance, 8, HAL_MAX_DELAY);

		}
	}
}
 800e2b4:	e1d7      	b.n	800e666 <ObstacleHandler+0x3d2>
				if(lidar->obstacle_receive[0] == 0x01)
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800e2bc:	2b01      	cmp	r3, #1
 800e2be:	f040 81d1 	bne.w	800e664 <ObstacleHandler+0x3d0>
					memcpy(&lidar->obstacle_count, &lidar->obstacle_receive[1], 4);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800e2c8:	687a      	ldr	r2, [r7, #4]
 800e2ca:	32ca      	adds	r2, #202	; 0xca
 800e2cc:	6812      	ldr	r2, [r2, #0]
 800e2ce:	601a      	str	r2, [r3, #0]
					if(lidar->new == 0)
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f893 31e0 	ldrb.w	r3, [r3, #480]	; 0x1e0
 800e2d6:	f003 0301 	and.w	r3, r3, #1
 800e2da:	b2db      	uxtb	r3, r3
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d110      	bne.n	800e302 <ObstacleHandler+0x6e>
							lidar->Polelist = (Pole*)malloc(lidar->obstacle_count * 3 * sizeof(float));
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800e2e6:	461a      	mov	r2, r3
 800e2e8:	4613      	mov	r3, r2
 800e2ea:	005b      	lsls	r3, r3, #1
 800e2ec:	4413      	add	r3, r2
 800e2ee:	009b      	lsls	r3, r3, #2
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f00a fffd 	bl	80192f0 <malloc>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	461a      	mov	r2, r3
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
 800e300:	e012      	b.n	800e328 <ObstacleHandler+0x94>
							lidar->Polelist = (Pole*)realloc(lidar->Polelist, lidar->obstacle_count * 3 * sizeof(float));
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800e30e:	4619      	mov	r1, r3
 800e310:	460b      	mov	r3, r1
 800e312:	005b      	lsls	r3, r3, #1
 800e314:	440b      	add	r3, r1
 800e316:	009b      	lsls	r3, r3, #2
 800e318:	4619      	mov	r1, r3
 800e31a:	4610      	mov	r0, r2
 800e31c:	f00b ff32 	bl	801a184 <realloc>
 800e320:	4602      	mov	r2, r0
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->obstacle_count, 4, HAL_MAX_DELAY);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f503 71ca 	add.w	r1, r3, #404	; 0x194
 800e334:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e338:	2204      	movs	r2, #4
 800e33a:	f006 fc38 	bl	8014bae <HAL_UART_Transmit>
					HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, lidar->obstacle_count * 3 * 4);
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f103 01c9 	add.w	r1, r3, #201	; 0xc9
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800e350:	b29b      	uxth	r3, r3
 800e352:	461a      	mov	r2, r3
 800e354:	0052      	lsls	r2, r2, #1
 800e356:	4413      	add	r3, r2
 800e358:	009b      	lsls	r3, r3, #2
 800e35a:	b29b      	uxth	r3, r3
 800e35c:	461a      	mov	r2, r3
 800e35e:	f006 fcbf 	bl	8014ce0 <HAL_UART_Receive_IT>
					mode = 1;
 800e362:	4b7c      	ldr	r3, [pc, #496]	; (800e554 <ObstacleHandler+0x2c0>)
 800e364:	2201      	movs	r2, #1
 800e366:	601a      	str	r2, [r3, #0]
					lidar->new = 1;
 800e368:	687a      	ldr	r2, [r7, #4]
 800e36a:	f892 31e0 	ldrb.w	r3, [r2, #480]	; 0x1e0
 800e36e:	f043 0301 	orr.w	r3, r3, #1
 800e372:	f882 31e0 	strb.w	r3, [r2, #480]	; 0x1e0
				break;
 800e376:	e175      	b.n	800e664 <ObstacleHandler+0x3d0>
				for(int i = 0; i < lidar->obstacle_count; i++)
 800e378:	2300      	movs	r3, #0
 800e37a:	60fb      	str	r3, [r7, #12]
 800e37c:	e05b      	b.n	800e436 <ObstacleHandler+0x1a2>
					memcpy(&lidar->pole.x, &lidar->obstacle_receive[i * 12], 4);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f503 71d4 	add.w	r1, r3, #424	; 0x1a8
 800e384:	68fa      	ldr	r2, [r7, #12]
 800e386:	4613      	mov	r3, r2
 800e388:	005b      	lsls	r3, r3, #1
 800e38a:	4413      	add	r3, r2
 800e38c:	009b      	lsls	r3, r3, #2
 800e38e:	33c8      	adds	r3, #200	; 0xc8
 800e390:	687a      	ldr	r2, [r7, #4]
 800e392:	4413      	add	r3, r2
 800e394:	3301      	adds	r3, #1
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	600b      	str	r3, [r1, #0]
					memcpy(&lidar->pole.y, &lidar->obstacle_receive[i * 12 + 4], 4);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f503 71d8 	add.w	r1, r3, #432	; 0x1b0
 800e3a0:	68fa      	ldr	r2, [r7, #12]
 800e3a2:	4613      	mov	r3, r2
 800e3a4:	005b      	lsls	r3, r3, #1
 800e3a6:	4413      	add	r3, r2
 800e3a8:	009b      	lsls	r3, r3, #2
 800e3aa:	3304      	adds	r3, #4
 800e3ac:	33c8      	adds	r3, #200	; 0xc8
 800e3ae:	687a      	ldr	r2, [r7, #4]
 800e3b0:	4413      	add	r3, r2
 800e3b2:	3301      	adds	r3, #1
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	600b      	str	r3, [r1, #0]
					memcpy(&lidar->pole.distance, &lidar->obstacle_receive[i * 12 + 8], 4);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f503 71dc 	add.w	r1, r3, #440	; 0x1b8
 800e3be:	68fa      	ldr	r2, [r7, #12]
 800e3c0:	4613      	mov	r3, r2
 800e3c2:	005b      	lsls	r3, r3, #1
 800e3c4:	4413      	add	r3, r2
 800e3c6:	009b      	lsls	r3, r3, #2
 800e3c8:	3308      	adds	r3, #8
 800e3ca:	33c8      	adds	r3, #200	; 0xc8
 800e3cc:	687a      	ldr	r2, [r7, #4]
 800e3ce:	4413      	add	r3, r2
 800e3d0:	3301      	adds	r3, #1
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	600b      	str	r3, [r1, #0]
					lidar->pole.angle = atanf(lidar->pole.y / lidar->pole.x);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	e9d3 016c 	ldrd	r0, r1, [r3, #432]	; 0x1b0
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 800e3e2:	f7f2 fa33 	bl	800084c <__aeabi_ddiv>
 800e3e6:	4602      	mov	r2, r0
 800e3e8:	460b      	mov	r3, r1
 800e3ea:	4610      	mov	r0, r2
 800e3ec:	4619      	mov	r1, r3
 800e3ee:	f7f2 fbfb 	bl	8000be8 <__aeabi_d2f>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	ee00 3a10 	vmov	s0, r3
 800e3f8:	f00f fde0 	bl	801dfbc <atanf>
 800e3fc:	ee10 3a10 	vmov	r3, s0
 800e400:	4618      	mov	r0, r3
 800e402:	f7f2 f8a1 	bl	8000548 <__aeabi_f2d>
 800e406:	4602      	mov	r2, r0
 800e408:	460b      	mov	r3, r1
 800e40a:	6879      	ldr	r1, [r7, #4]
 800e40c:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
					lidar->Polelist[i] = lidar->pole;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	015b      	lsls	r3, r3, #5
 800e41a:	441a      	add	r2, r3
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	4615      	mov	r5, r2
 800e420:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 800e424:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e426:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e428:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e42c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
				for(int i = 0; i < lidar->obstacle_count; i++)
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	3301      	adds	r3, #1
 800e434:	60fb      	str	r3, [r7, #12]
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800e43c:	68fa      	ldr	r2, [r7, #12]
 800e43e:	429a      	cmp	r2, r3
 800e440:	db9d      	blt.n	800e37e <ObstacleHandler+0xea>
				for(int i = 0; i < lidar->obstacle_count; i++)
 800e442:	2300      	movs	r3, #0
 800e444:	60bb      	str	r3, [r7, #8]
 800e446:	e031      	b.n	800e4ac <ObstacleHandler+0x218>
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->Polelist[i].x, 4, HAL_MAX_DELAY);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 800e454:	68bb      	ldr	r3, [r7, #8]
 800e456:	015b      	lsls	r3, r3, #5
 800e458:	4413      	add	r3, r2
 800e45a:	4619      	mov	r1, r3
 800e45c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e460:	2204      	movs	r2, #4
 800e462:	f006 fba4 	bl	8014bae <HAL_UART_Transmit>
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->Polelist[i].y, 4, HAL_MAX_DELAY);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	015b      	lsls	r3, r3, #5
 800e476:	4413      	add	r3, r2
 800e478:	f103 0108 	add.w	r1, r3, #8
 800e47c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e480:	2204      	movs	r2, #4
 800e482:	f006 fb94 	bl	8014bae <HAL_UART_Transmit>
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->Polelist[i].distance, 4, HAL_MAX_DELAY);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 800e492:	68bb      	ldr	r3, [r7, #8]
 800e494:	015b      	lsls	r3, r3, #5
 800e496:	4413      	add	r3, r2
 800e498:	f103 0110 	add.w	r1, r3, #16
 800e49c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e4a0:	2204      	movs	r2, #4
 800e4a2:	f006 fb84 	bl	8014bae <HAL_UART_Transmit>
				for(int i = 0; i < lidar->obstacle_count; i++)
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	3301      	adds	r3, #1
 800e4aa:	60bb      	str	r3, [r7, #8]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800e4b2:	68ba      	ldr	r2, [r7, #8]
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	dbc7      	blt.n	800e448 <ObstacleHandler+0x1b4>
				mode = 0;
 800e4b8:	4b26      	ldr	r3, [pc, #152]	; (800e554 <ObstacleHandler+0x2c0>)
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	601a      	str	r2, [r3, #0]
				HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 5);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	33c9      	adds	r3, #201	; 0xc9
 800e4c8:	2205      	movs	r2, #5
 800e4ca:	4619      	mov	r1, r3
 800e4cc:	f006 fc08 	bl	8014ce0 <HAL_UART_Receive_IT>
				break;
 800e4d0:	e0c9      	b.n	800e666 <ObstacleHandler+0x3d2>
		if(lidar->start == 0)
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f893 31e0 	ldrb.w	r3, [r3, #480]	; 0x1e0
 800e4d8:	f003 0304 	and.w	r3, r3, #4
 800e4dc:	b2db      	uxtb	r3, r3
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d13a      	bne.n	800e558 <ObstacleHandler+0x2c4>
			if(lidar->obstacle_receive[0] == 0x01)
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800e4e8:	2b01      	cmp	r3, #1
 800e4ea:	f040 80bc 	bne.w	800e666 <ObstacleHandler+0x3d2>
				memcpy(&lidar->res, &lidar->obstacle_receive[1], 1);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f203 1399 	addw	r3, r3, #409	; 0x199
 800e4f4:	687a      	ldr	r2, [r7, #4]
 800e4f6:	32ca      	adds	r2, #202	; 0xca
 800e4f8:	7812      	ldrb	r2, [r2, #0]
 800e4fa:	701a      	strb	r2, [r3, #0]
				lidar->response = lidar->res;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f893 2199 	ldrb.w	r2, [r3, #409]	; 0x199
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
				if(lidar->response == OK)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800e50e:	2b00      	cmp	r3, #0
 800e510:	f040 80a9 	bne.w	800e666 <ObstacleHandler+0x3d2>
					HAL_UART_Transmit(lidar->lidar_UART, &lidar->res, 1, HAL_MAX_DELAY);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f203 1199 	addw	r1, r3, #409	; 0x199
 800e520:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e524:	2201      	movs	r2, #1
 800e526:	f006 fb42 	bl	8014bae <HAL_UART_Transmit>
					lidar->start = 1;
 800e52a:	687a      	ldr	r2, [r7, #4]
 800e52c:	f892 31e0 	ldrb.w	r3, [r2, #480]	; 0x1e0
 800e530:	f043 0304 	orr.w	r3, r3, #4
 800e534:	f882 31e0 	strb.w	r3, [r2, #480]	; 0x1e0
					lidar->response = NO;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2201      	movs	r2, #1
 800e53c:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
					HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 25);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	33c9      	adds	r3, #201	; 0xc9
 800e54a:	2219      	movs	r2, #25
 800e54c:	4619      	mov	r1, r3
 800e54e:	f006 fbc7 	bl	8014ce0 <HAL_UART_Receive_IT>
}
 800e552:	e088      	b.n	800e666 <ObstacleHandler+0x3d2>
 800e554:	20001134 	.word	0x20001134
			memcpy(&lidar->res, &lidar->obstacle_receive[0], 1);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f203 1399 	addw	r3, r3, #409	; 0x199
 800e55e:	687a      	ldr	r2, [r7, #4]
 800e560:	32c9      	adds	r2, #201	; 0xc9
 800e562:	7812      	ldrb	r2, [r2, #0]
 800e564:	701a      	strb	r2, [r3, #0]
			lidar->response = lidar->res;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f893 2199 	ldrb.w	r2, [r3, #409]	; 0x199
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
			if(lidar->response == OK)
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d138      	bne.n	800e5ee <ObstacleHandler+0x35a>
				memcpy(&lidar->pole.x, &lidar->obstacle_receive[1], 8);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	f503 70d4 	add.w	r0, r3, #424	; 0x1a8
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	33ca      	adds	r3, #202	; 0xca
 800e586:	2208      	movs	r2, #8
 800e588:	4619      	mov	r1, r3
 800e58a:	f00a fec1 	bl	8019310 <memcpy>
				memcpy(&lidar->pole.y, &lidar->obstacle_receive[9], 8);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	33d2      	adds	r3, #210	; 0xd2
 800e598:	2208      	movs	r2, #8
 800e59a:	4619      	mov	r1, r3
 800e59c:	f00a feb8 	bl	8019310 <memcpy>
				memcpy(&lidar->pole.distance, &lidar->obstacle_receive[17], 8);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f503 70dc 	add.w	r0, r3, #440	; 0x1b8
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	33da      	adds	r3, #218	; 0xda
 800e5aa:	2208      	movs	r2, #8
 800e5ac:	4619      	mov	r1, r3
 800e5ae:	f00a feaf 	bl	8019310 <memcpy>
				lidar->pole.angle = atanf(lidar->pole.y / lidar->pole.x);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	e9d3 016c 	ldrd	r0, r1, [r3, #432]	; 0x1b0
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 800e5be:	f7f2 f945 	bl	800084c <__aeabi_ddiv>
 800e5c2:	4602      	mov	r2, r0
 800e5c4:	460b      	mov	r3, r1
 800e5c6:	4610      	mov	r0, r2
 800e5c8:	4619      	mov	r1, r3
 800e5ca:	f7f2 fb0d 	bl	8000be8 <__aeabi_d2f>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	ee00 3a10 	vmov	s0, r3
 800e5d4:	f00f fcf2 	bl	801dfbc <atanf>
 800e5d8:	ee10 3a10 	vmov	r3, s0
 800e5dc:	4618      	mov	r0, r3
 800e5de:	f7f1 ffb3 	bl	8000548 <__aeabi_f2d>
 800e5e2:	4602      	mov	r2, r0
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	6879      	ldr	r1, [r7, #4]
 800e5e8:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
 800e5ec:	e00d      	b.n	800e60a <ObstacleHandler+0x376>
				lidar->reject = 1;
 800e5ee:	687a      	ldr	r2, [r7, #4]
 800e5f0:	f892 31e0 	ldrb.w	r3, [r2, #480]	; 0x1e0
 800e5f4:	f043 0302 	orr.w	r3, r3, #2
 800e5f8:	f882 31e0 	strb.w	r3, [r2, #480]	; 0x1e0
				LidarSendIns(lidar->inst, lidar);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 800e602:	6879      	ldr	r1, [r7, #4]
 800e604:	4618      	mov	r0, r3
 800e606:	f7ff fe19 	bl	800e23c <LidarSendIns>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->res, 1, HAL_MAX_DELAY);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	f203 1199 	addw	r1, r3, #409	; 0x199
 800e616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e61a:	2201      	movs	r2, #1
 800e61c:	f006 fac7 	bl	8014bae <HAL_UART_Transmit>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.x, 8, HAL_MAX_DELAY);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	f503 71d4 	add.w	r1, r3, #424	; 0x1a8
 800e62c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e630:	2208      	movs	r2, #8
 800e632:	f006 fabc 	bl	8014bae <HAL_UART_Transmit>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.y, 8, HAL_MAX_DELAY);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f503 71d8 	add.w	r1, r3, #432	; 0x1b0
 800e642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e646:	2208      	movs	r2, #8
 800e648:	f006 fab1 	bl	8014bae <HAL_UART_Transmit>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.distance, 8, HAL_MAX_DELAY);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f503 71dc 	add.w	r1, r3, #440	; 0x1b8
 800e658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e65c:	2208      	movs	r2, #8
 800e65e:	f006 faa6 	bl	8014bae <HAL_UART_Transmit>
}
 800e662:	e000      	b.n	800e666 <ObstacleHandler+0x3d2>
				break;
 800e664:	bf00      	nop
}
 800e666:	bf00      	nop
 800e668:	3710      	adds	r7, #16
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bdb0      	pop	{r4, r5, r7, pc}
 800e66e:	bf00      	nop

0800e670 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800e670:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e6a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800e674:	480d      	ldr	r0, [pc, #52]	; (800e6ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800e676:	490e      	ldr	r1, [pc, #56]	; (800e6b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800e678:	4a0e      	ldr	r2, [pc, #56]	; (800e6b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800e67a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e67c:	e002      	b.n	800e684 <LoopCopyDataInit>

0800e67e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e67e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e682:	3304      	adds	r3, #4

0800e684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e688:	d3f9      	bcc.n	800e67e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e68a:	4a0b      	ldr	r2, [pc, #44]	; (800e6b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800e68c:	4c0b      	ldr	r4, [pc, #44]	; (800e6bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800e68e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e690:	e001      	b.n	800e696 <LoopFillZerobss>

0800e692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e694:	3204      	adds	r2, #4

0800e696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e698:	d3fb      	bcc.n	800e692 <FillZerobss>


/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800e69a:	f7fe fd99 	bl	800d1d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e69e:	f00a fe03 	bl	80192a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e6a2:	f7f5 ffbb 	bl	800461c <main>
  bx  lr    
 800e6a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800e6a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800e6ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e6b0:	200002a8 	.word	0x200002a8
  ldr r2, =_sidata
 800e6b4:	080219b8 	.word	0x080219b8
  ldr r2, =_sbss
 800e6b8:	200002a8 	.word	0x200002a8
  ldr r4, =_ebss
 800e6bc:	2000a588 	.word	0x2000a588

0800e6c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e6c0:	e7fe      	b.n	800e6c0 <ADC_IRQHandler>
	...

0800e6c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e6c8:	4b0e      	ldr	r3, [pc, #56]	; (800e704 <HAL_Init+0x40>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	4a0d      	ldr	r2, [pc, #52]	; (800e704 <HAL_Init+0x40>)
 800e6ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e6d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800e6d4:	4b0b      	ldr	r3, [pc, #44]	; (800e704 <HAL_Init+0x40>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	4a0a      	ldr	r2, [pc, #40]	; (800e704 <HAL_Init+0x40>)
 800e6da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e6de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e6e0:	4b08      	ldr	r3, [pc, #32]	; (800e704 <HAL_Init+0x40>)
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	4a07      	ldr	r2, [pc, #28]	; (800e704 <HAL_Init+0x40>)
 800e6e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e6ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e6ec:	2003      	movs	r0, #3
 800e6ee:	f000 ffcc 	bl	800f68a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800e6f2:	2000      	movs	r0, #0
 800e6f4:	f7fe fc4c 	bl	800cf90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800e6f8:	f7f3 fd40 	bl	800217c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800e6fc:	2300      	movs	r3, #0
}
 800e6fe:	4618      	mov	r0, r3
 800e700:	bd80      	pop	{r7, pc}
 800e702:	bf00      	nop
 800e704:	40023c00 	.word	0x40023c00

0800e708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e708:	b480      	push	{r7}
 800e70a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e70c:	4b06      	ldr	r3, [pc, #24]	; (800e728 <HAL_IncTick+0x20>)
 800e70e:	781b      	ldrb	r3, [r3, #0]
 800e710:	461a      	mov	r2, r3
 800e712:	4b06      	ldr	r3, [pc, #24]	; (800e72c <HAL_IncTick+0x24>)
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	4413      	add	r3, r2
 800e718:	4a04      	ldr	r2, [pc, #16]	; (800e72c <HAL_IncTick+0x24>)
 800e71a:	6013      	str	r3, [r2, #0]
}
 800e71c:	bf00      	nop
 800e71e:	46bd      	mov	sp, r7
 800e720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e724:	4770      	bx	lr
 800e726:	bf00      	nop
 800e728:	200000c8 	.word	0x200000c8
 800e72c:	2000a514 	.word	0x2000a514

0800e730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e730:	b480      	push	{r7}
 800e732:	af00      	add	r7, sp, #0
  return uwTick;
 800e734:	4b03      	ldr	r3, [pc, #12]	; (800e744 <HAL_GetTick+0x14>)
 800e736:	681b      	ldr	r3, [r3, #0]
}
 800e738:	4618      	mov	r0, r3
 800e73a:	46bd      	mov	sp, r7
 800e73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e740:	4770      	bx	lr
 800e742:	bf00      	nop
 800e744:	2000a514 	.word	0x2000a514

0800e748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b084      	sub	sp, #16
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e750:	f7ff ffee 	bl	800e730 <HAL_GetTick>
 800e754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e760:	d005      	beq.n	800e76e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e762:	4b0a      	ldr	r3, [pc, #40]	; (800e78c <HAL_Delay+0x44>)
 800e764:	781b      	ldrb	r3, [r3, #0]
 800e766:	461a      	mov	r2, r3
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	4413      	add	r3, r2
 800e76c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800e76e:	bf00      	nop
 800e770:	f7ff ffde 	bl	800e730 <HAL_GetTick>
 800e774:	4602      	mov	r2, r0
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	1ad3      	subs	r3, r2, r3
 800e77a:	68fa      	ldr	r2, [r7, #12]
 800e77c:	429a      	cmp	r2, r3
 800e77e:	d8f7      	bhi.n	800e770 <HAL_Delay+0x28>
  {
  }
}
 800e780:	bf00      	nop
 800e782:	bf00      	nop
 800e784:	3710      	adds	r7, #16
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}
 800e78a:	bf00      	nop
 800e78c:	200000c8 	.word	0x200000c8

0800e790 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b084      	sub	sp, #16
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d101      	bne.n	800e7a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800e79e:	2301      	movs	r3, #1
 800e7a0:	e0ed      	b.n	800e97e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e7a8:	b2db      	uxtb	r3, r3
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d102      	bne.n	800e7b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f7f3 fd10 	bl	80021d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	681a      	ldr	r2, [r3, #0]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	f022 0202 	bic.w	r2, r2, #2
 800e7c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e7c4:	f7ff ffb4 	bl	800e730 <HAL_GetTick>
 800e7c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800e7ca:	e012      	b.n	800e7f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800e7cc:	f7ff ffb0 	bl	800e730 <HAL_GetTick>
 800e7d0:	4602      	mov	r2, r0
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	1ad3      	subs	r3, r2, r3
 800e7d6:	2b0a      	cmp	r3, #10
 800e7d8:	d90b      	bls.n	800e7f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	2205      	movs	r2, #5
 800e7ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	e0c5      	b.n	800e97e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	685b      	ldr	r3, [r3, #4]
 800e7f8:	f003 0302 	and.w	r3, r3, #2
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d1e5      	bne.n	800e7cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	681a      	ldr	r2, [r3, #0]
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	f042 0201 	orr.w	r2, r2, #1
 800e80e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e810:	f7ff ff8e 	bl	800e730 <HAL_GetTick>
 800e814:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800e816:	e012      	b.n	800e83e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800e818:	f7ff ff8a 	bl	800e730 <HAL_GetTick>
 800e81c:	4602      	mov	r2, r0
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	1ad3      	subs	r3, r2, r3
 800e822:	2b0a      	cmp	r3, #10
 800e824:	d90b      	bls.n	800e83e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e82a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2205      	movs	r2, #5
 800e836:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800e83a:	2301      	movs	r3, #1
 800e83c:	e09f      	b.n	800e97e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	685b      	ldr	r3, [r3, #4]
 800e844:	f003 0301 	and.w	r3, r3, #1
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d0e5      	beq.n	800e818 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	7e1b      	ldrb	r3, [r3, #24]
 800e850:	2b01      	cmp	r3, #1
 800e852:	d108      	bne.n	800e866 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	681a      	ldr	r2, [r3, #0]
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e862:	601a      	str	r2, [r3, #0]
 800e864:	e007      	b.n	800e876 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	681a      	ldr	r2, [r3, #0]
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e874:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	7e5b      	ldrb	r3, [r3, #25]
 800e87a:	2b01      	cmp	r3, #1
 800e87c:	d108      	bne.n	800e890 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	681a      	ldr	r2, [r3, #0]
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e88c:	601a      	str	r2, [r3, #0]
 800e88e:	e007      	b.n	800e8a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	681a      	ldr	r2, [r3, #0]
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e89e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	7e9b      	ldrb	r3, [r3, #26]
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	d108      	bne.n	800e8ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	681a      	ldr	r2, [r3, #0]
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f042 0220 	orr.w	r2, r2, #32
 800e8b6:	601a      	str	r2, [r3, #0]
 800e8b8:	e007      	b.n	800e8ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	681a      	ldr	r2, [r3, #0]
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	f022 0220 	bic.w	r2, r2, #32
 800e8c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	7edb      	ldrb	r3, [r3, #27]
 800e8ce:	2b01      	cmp	r3, #1
 800e8d0:	d108      	bne.n	800e8e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	681a      	ldr	r2, [r3, #0]
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	f022 0210 	bic.w	r2, r2, #16
 800e8e0:	601a      	str	r2, [r3, #0]
 800e8e2:	e007      	b.n	800e8f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	681a      	ldr	r2, [r3, #0]
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	f042 0210 	orr.w	r2, r2, #16
 800e8f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	7f1b      	ldrb	r3, [r3, #28]
 800e8f8:	2b01      	cmp	r3, #1
 800e8fa:	d108      	bne.n	800e90e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	681a      	ldr	r2, [r3, #0]
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	f042 0208 	orr.w	r2, r2, #8
 800e90a:	601a      	str	r2, [r3, #0]
 800e90c:	e007      	b.n	800e91e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	681a      	ldr	r2, [r3, #0]
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	f022 0208 	bic.w	r2, r2, #8
 800e91c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	7f5b      	ldrb	r3, [r3, #29]
 800e922:	2b01      	cmp	r3, #1
 800e924:	d108      	bne.n	800e938 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	681a      	ldr	r2, [r3, #0]
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	f042 0204 	orr.w	r2, r2, #4
 800e934:	601a      	str	r2, [r3, #0]
 800e936:	e007      	b.n	800e948 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	681a      	ldr	r2, [r3, #0]
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	f022 0204 	bic.w	r2, r2, #4
 800e946:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	689a      	ldr	r2, [r3, #8]
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	68db      	ldr	r3, [r3, #12]
 800e950:	431a      	orrs	r2, r3
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	691b      	ldr	r3, [r3, #16]
 800e956:	431a      	orrs	r2, r3
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	695b      	ldr	r3, [r3, #20]
 800e95c:	ea42 0103 	orr.w	r1, r2, r3
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	685b      	ldr	r3, [r3, #4]
 800e964:	1e5a      	subs	r2, r3, #1
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	430a      	orrs	r2, r1
 800e96c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2200      	movs	r2, #0
 800e972:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2201      	movs	r2, #1
 800e978:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800e97c:	2300      	movs	r3, #0
}
 800e97e:	4618      	mov	r0, r3
 800e980:	3710      	adds	r7, #16
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}
	...

0800e988 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800e988:	b480      	push	{r7}
 800e98a:	b087      	sub	sp, #28
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
 800e990:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e99e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800e9a0:	7cfb      	ldrb	r3, [r7, #19]
 800e9a2:	2b01      	cmp	r3, #1
 800e9a4:	d003      	beq.n	800e9ae <HAL_CAN_ConfigFilter+0x26>
 800e9a6:	7cfb      	ldrb	r3, [r7, #19]
 800e9a8:	2b02      	cmp	r3, #2
 800e9aa:	f040 80be 	bne.w	800eb2a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800e9ae:	4b65      	ldr	r3, [pc, #404]	; (800eb44 <HAL_CAN_ConfigFilter+0x1bc>)
 800e9b0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e9b8:	f043 0201 	orr.w	r2, r3, #1
 800e9bc:	697b      	ldr	r3, [r7, #20]
 800e9be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e9c8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800e9cc:	697b      	ldr	r3, [r7, #20]
 800e9ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9dc:	021b      	lsls	r3, r3, #8
 800e9de:	431a      	orrs	r2, r3
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	695b      	ldr	r3, [r3, #20]
 800e9ea:	f003 031f 	and.w	r3, r3, #31
 800e9ee:	2201      	movs	r2, #1
 800e9f0:	fa02 f303 	lsl.w	r3, r2, r3
 800e9f4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	43db      	mvns	r3, r3
 800ea00:	401a      	ands	r2, r3
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	69db      	ldr	r3, [r3, #28]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d123      	bne.n	800ea58 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	43db      	mvns	r3, r3
 800ea1a:	401a      	ands	r2, r3
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	68db      	ldr	r3, [r3, #12]
 800ea26:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	685b      	ldr	r3, [r3, #4]
 800ea2c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800ea2e:	683a      	ldr	r2, [r7, #0]
 800ea30:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800ea32:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	3248      	adds	r2, #72	; 0x48
 800ea38:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	689b      	ldr	r3, [r3, #8]
 800ea40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800ea4c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800ea4e:	6979      	ldr	r1, [r7, #20]
 800ea50:	3348      	adds	r3, #72	; 0x48
 800ea52:	00db      	lsls	r3, r3, #3
 800ea54:	440b      	add	r3, r1
 800ea56:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	69db      	ldr	r3, [r3, #28]
 800ea5c:	2b01      	cmp	r3, #1
 800ea5e:	d122      	bne.n	800eaa6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800ea60:	697b      	ldr	r3, [r7, #20]
 800ea62:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	431a      	orrs	r2, r3
 800ea6a:	697b      	ldr	r3, [r7, #20]
 800ea6c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	685b      	ldr	r3, [r3, #4]
 800ea7a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800ea7c:	683a      	ldr	r2, [r7, #0]
 800ea7e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800ea80:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800ea82:	697b      	ldr	r3, [r7, #20]
 800ea84:	3248      	adds	r2, #72	; 0x48
 800ea86:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	689b      	ldr	r3, [r3, #8]
 800ea8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	68db      	ldr	r3, [r3, #12]
 800ea94:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800ea9a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800ea9c:	6979      	ldr	r1, [r7, #20]
 800ea9e:	3348      	adds	r3, #72	; 0x48
 800eaa0:	00db      	lsls	r3, r3, #3
 800eaa2:	440b      	add	r3, r1
 800eaa4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	699b      	ldr	r3, [r3, #24]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d109      	bne.n	800eac2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	43db      	mvns	r3, r3
 800eab8:	401a      	ands	r2, r3
 800eaba:	697b      	ldr	r3, [r7, #20]
 800eabc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800eac0:	e007      	b.n	800ead2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800eac2:	697b      	ldr	r3, [r7, #20]
 800eac4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	431a      	orrs	r2, r3
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	691b      	ldr	r3, [r3, #16]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d109      	bne.n	800eaee <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800eada:	697b      	ldr	r3, [r7, #20]
 800eadc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	43db      	mvns	r3, r3
 800eae4:	401a      	ands	r2, r3
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800eaec:	e007      	b.n	800eafe <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800eaee:	697b      	ldr	r3, [r7, #20]
 800eaf0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	431a      	orrs	r2, r3
 800eaf8:	697b      	ldr	r3, [r7, #20]
 800eafa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	6a1b      	ldr	r3, [r3, #32]
 800eb02:	2b01      	cmp	r3, #1
 800eb04:	d107      	bne.n	800eb16 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800eb06:	697b      	ldr	r3, [r7, #20]
 800eb08:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	431a      	orrs	r2, r3
 800eb10:	697b      	ldr	r3, [r7, #20]
 800eb12:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800eb16:	697b      	ldr	r3, [r7, #20]
 800eb18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800eb1c:	f023 0201 	bic.w	r2, r3, #1
 800eb20:	697b      	ldr	r3, [r7, #20]
 800eb22:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800eb26:	2300      	movs	r3, #0
 800eb28:	e006      	b.n	800eb38 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb2e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800eb36:	2301      	movs	r3, #1
  }
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	371c      	adds	r7, #28
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb42:	4770      	bx	lr
 800eb44:	40006400 	.word	0x40006400

0800eb48 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b084      	sub	sp, #16
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f893 3020 	ldrb.w	r3, [r3, #32]
 800eb56:	b2db      	uxtb	r3, r3
 800eb58:	2b01      	cmp	r3, #1
 800eb5a:	d12e      	bne.n	800ebba <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2202      	movs	r2, #2
 800eb60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	681a      	ldr	r2, [r3, #0]
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	f022 0201 	bic.w	r2, r2, #1
 800eb72:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800eb74:	f7ff fddc 	bl	800e730 <HAL_GetTick>
 800eb78:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800eb7a:	e012      	b.n	800eba2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800eb7c:	f7ff fdd8 	bl	800e730 <HAL_GetTick>
 800eb80:	4602      	mov	r2, r0
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	1ad3      	subs	r3, r2, r3
 800eb86:	2b0a      	cmp	r3, #10
 800eb88:	d90b      	bls.n	800eba2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2205      	movs	r2, #5
 800eb9a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800eb9e:	2301      	movs	r3, #1
 800eba0:	e012      	b.n	800ebc8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	685b      	ldr	r3, [r3, #4]
 800eba8:	f003 0301 	and.w	r3, r3, #1
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d1e5      	bne.n	800eb7c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	e006      	b.n	800ebc8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebbe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800ebc6:	2301      	movs	r3, #1
  }
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	3710      	adds	r7, #16
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}

0800ebd0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800ebd0:	b480      	push	{r7}
 800ebd2:	b089      	sub	sp, #36	; 0x24
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	60f8      	str	r0, [r7, #12]
 800ebd8:	60b9      	str	r1, [r7, #8]
 800ebda:	607a      	str	r2, [r7, #4]
 800ebdc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ebe4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	689b      	ldr	r3, [r3, #8]
 800ebec:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800ebee:	7ffb      	ldrb	r3, [r7, #31]
 800ebf0:	2b01      	cmp	r3, #1
 800ebf2:	d003      	beq.n	800ebfc <HAL_CAN_AddTxMessage+0x2c>
 800ebf4:	7ffb      	ldrb	r3, [r7, #31]
 800ebf6:	2b02      	cmp	r3, #2
 800ebf8:	f040 80b8 	bne.w	800ed6c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800ebfc:	69bb      	ldr	r3, [r7, #24]
 800ebfe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d10a      	bne.n	800ec1c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800ec06:	69bb      	ldr	r3, [r7, #24]
 800ec08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d105      	bne.n	800ec1c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800ec10:	69bb      	ldr	r3, [r7, #24]
 800ec12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	f000 80a0 	beq.w	800ed5c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800ec1c:	69bb      	ldr	r3, [r7, #24]
 800ec1e:	0e1b      	lsrs	r3, r3, #24
 800ec20:	f003 0303 	and.w	r3, r3, #3
 800ec24:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	2b02      	cmp	r3, #2
 800ec2a:	d907      	bls.n	800ec3c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec30:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800ec38:	2301      	movs	r3, #1
 800ec3a:	e09e      	b.n	800ed7a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800ec3c:	2201      	movs	r2, #1
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	409a      	lsls	r2, r3
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	689b      	ldr	r3, [r3, #8]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d10d      	bne.n	800ec6a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800ec58:	68f9      	ldr	r1, [r7, #12]
 800ec5a:	6809      	ldr	r1, [r1, #0]
 800ec5c:	431a      	orrs	r2, r3
 800ec5e:	697b      	ldr	r3, [r7, #20]
 800ec60:	3318      	adds	r3, #24
 800ec62:	011b      	lsls	r3, r3, #4
 800ec64:	440b      	add	r3, r1
 800ec66:	601a      	str	r2, [r3, #0]
 800ec68:	e00f      	b.n	800ec8a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	685b      	ldr	r3, [r3, #4]
 800ec6e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800ec74:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800ec7a:	68f9      	ldr	r1, [r7, #12]
 800ec7c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800ec7e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	3318      	adds	r3, #24
 800ec84:	011b      	lsls	r3, r3, #4
 800ec86:	440b      	add	r3, r1
 800ec88:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	6819      	ldr	r1, [r3, #0]
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	691a      	ldr	r2, [r3, #16]
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	3318      	adds	r3, #24
 800ec96:	011b      	lsls	r3, r3, #4
 800ec98:	440b      	add	r3, r1
 800ec9a:	3304      	adds	r3, #4
 800ec9c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	7d1b      	ldrb	r3, [r3, #20]
 800eca2:	2b01      	cmp	r3, #1
 800eca4:	d111      	bne.n	800ecca <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	681a      	ldr	r2, [r3, #0]
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	3318      	adds	r3, #24
 800ecae:	011b      	lsls	r3, r3, #4
 800ecb0:	4413      	add	r3, r2
 800ecb2:	3304      	adds	r3, #4
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	68fa      	ldr	r2, [r7, #12]
 800ecb8:	6811      	ldr	r1, [r2, #0]
 800ecba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	3318      	adds	r3, #24
 800ecc2:	011b      	lsls	r3, r3, #4
 800ecc4:	440b      	add	r3, r1
 800ecc6:	3304      	adds	r3, #4
 800ecc8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	3307      	adds	r3, #7
 800ecce:	781b      	ldrb	r3, [r3, #0]
 800ecd0:	061a      	lsls	r2, r3, #24
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	3306      	adds	r3, #6
 800ecd6:	781b      	ldrb	r3, [r3, #0]
 800ecd8:	041b      	lsls	r3, r3, #16
 800ecda:	431a      	orrs	r2, r3
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	3305      	adds	r3, #5
 800ece0:	781b      	ldrb	r3, [r3, #0]
 800ece2:	021b      	lsls	r3, r3, #8
 800ece4:	4313      	orrs	r3, r2
 800ece6:	687a      	ldr	r2, [r7, #4]
 800ece8:	3204      	adds	r2, #4
 800ecea:	7812      	ldrb	r2, [r2, #0]
 800ecec:	4610      	mov	r0, r2
 800ecee:	68fa      	ldr	r2, [r7, #12]
 800ecf0:	6811      	ldr	r1, [r2, #0]
 800ecf2:	ea43 0200 	orr.w	r2, r3, r0
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	011b      	lsls	r3, r3, #4
 800ecfa:	440b      	add	r3, r1
 800ecfc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800ed00:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	3303      	adds	r3, #3
 800ed06:	781b      	ldrb	r3, [r3, #0]
 800ed08:	061a      	lsls	r2, r3, #24
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	3302      	adds	r3, #2
 800ed0e:	781b      	ldrb	r3, [r3, #0]
 800ed10:	041b      	lsls	r3, r3, #16
 800ed12:	431a      	orrs	r2, r3
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	3301      	adds	r3, #1
 800ed18:	781b      	ldrb	r3, [r3, #0]
 800ed1a:	021b      	lsls	r3, r3, #8
 800ed1c:	4313      	orrs	r3, r2
 800ed1e:	687a      	ldr	r2, [r7, #4]
 800ed20:	7812      	ldrb	r2, [r2, #0]
 800ed22:	4610      	mov	r0, r2
 800ed24:	68fa      	ldr	r2, [r7, #12]
 800ed26:	6811      	ldr	r1, [r2, #0]
 800ed28:	ea43 0200 	orr.w	r2, r3, r0
 800ed2c:	697b      	ldr	r3, [r7, #20]
 800ed2e:	011b      	lsls	r3, r3, #4
 800ed30:	440b      	add	r3, r1
 800ed32:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800ed36:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	681a      	ldr	r2, [r3, #0]
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	3318      	adds	r3, #24
 800ed40:	011b      	lsls	r3, r3, #4
 800ed42:	4413      	add	r3, r2
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	68fa      	ldr	r2, [r7, #12]
 800ed48:	6811      	ldr	r1, [r2, #0]
 800ed4a:	f043 0201 	orr.w	r2, r3, #1
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	3318      	adds	r3, #24
 800ed52:	011b      	lsls	r3, r3, #4
 800ed54:	440b      	add	r3, r1
 800ed56:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800ed58:	2300      	movs	r3, #0
 800ed5a:	e00e      	b.n	800ed7a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed60:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800ed68:	2301      	movs	r3, #1
 800ed6a:	e006      	b.n	800ed7a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed70:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800ed78:	2301      	movs	r3, #1
  }
}
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	3724      	adds	r7, #36	; 0x24
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed84:	4770      	bx	lr

0800ed86 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800ed86:	b480      	push	{r7}
 800ed88:	b085      	sub	sp, #20
 800ed8a:	af00      	add	r7, sp, #0
 800ed8c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800ed8e:	2300      	movs	r3, #0
 800ed90:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ed98:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800ed9a:	7afb      	ldrb	r3, [r7, #11]
 800ed9c:	2b01      	cmp	r3, #1
 800ed9e:	d002      	beq.n	800eda6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800eda0:	7afb      	ldrb	r3, [r7, #11]
 800eda2:	2b02      	cmp	r3, #2
 800eda4:	d11d      	bne.n	800ede2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	689b      	ldr	r3, [r3, #8]
 800edac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d002      	beq.n	800edba <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	3301      	adds	r3, #1
 800edb8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	689b      	ldr	r3, [r3, #8]
 800edc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d002      	beq.n	800edce <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	3301      	adds	r3, #1
 800edcc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	689b      	ldr	r3, [r3, #8]
 800edd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d002      	beq.n	800ede2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	3301      	adds	r3, #1
 800ede0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800ede2:	68fb      	ldr	r3, [r7, #12]
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3714      	adds	r7, #20
 800ede8:	46bd      	mov	sp, r7
 800edea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edee:	4770      	bx	lr

0800edf0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800edf0:	b480      	push	{r7}
 800edf2:	b087      	sub	sp, #28
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	60f8      	str	r0, [r7, #12]
 800edf8:	60b9      	str	r1, [r7, #8]
 800edfa:	607a      	str	r2, [r7, #4]
 800edfc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ee04:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800ee06:	7dfb      	ldrb	r3, [r7, #23]
 800ee08:	2b01      	cmp	r3, #1
 800ee0a:	d003      	beq.n	800ee14 <HAL_CAN_GetRxMessage+0x24>
 800ee0c:	7dfb      	ldrb	r3, [r7, #23]
 800ee0e:	2b02      	cmp	r3, #2
 800ee10:	f040 80f3 	bne.w	800effa <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d10e      	bne.n	800ee38 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	68db      	ldr	r3, [r3, #12]
 800ee20:	f003 0303 	and.w	r3, r3, #3
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d116      	bne.n	800ee56 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800ee34:	2301      	movs	r3, #1
 800ee36:	e0e7      	b.n	800f008 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	691b      	ldr	r3, [r3, #16]
 800ee3e:	f003 0303 	and.w	r3, r3, #3
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d107      	bne.n	800ee56 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800ee52:	2301      	movs	r3, #1
 800ee54:	e0d8      	b.n	800f008 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	681a      	ldr	r2, [r3, #0]
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	331b      	adds	r3, #27
 800ee5e:	011b      	lsls	r3, r3, #4
 800ee60:	4413      	add	r3, r2
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	f003 0204 	and.w	r2, r3, #4
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	689b      	ldr	r3, [r3, #8]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d10c      	bne.n	800ee8e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	681a      	ldr	r2, [r3, #0]
 800ee78:	68bb      	ldr	r3, [r7, #8]
 800ee7a:	331b      	adds	r3, #27
 800ee7c:	011b      	lsls	r3, r3, #4
 800ee7e:	4413      	add	r3, r2
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	0d5b      	lsrs	r3, r3, #21
 800ee84:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	601a      	str	r2, [r3, #0]
 800ee8c:	e00b      	b.n	800eea6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	681a      	ldr	r2, [r3, #0]
 800ee92:	68bb      	ldr	r3, [r7, #8]
 800ee94:	331b      	adds	r3, #27
 800ee96:	011b      	lsls	r3, r3, #4
 800ee98:	4413      	add	r3, r2
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	08db      	lsrs	r3, r3, #3
 800ee9e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	681a      	ldr	r2, [r3, #0]
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	331b      	adds	r3, #27
 800eeae:	011b      	lsls	r3, r3, #4
 800eeb0:	4413      	add	r3, r2
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	f003 0202 	and.w	r2, r3, #2
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	681a      	ldr	r2, [r3, #0]
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	331b      	adds	r3, #27
 800eec4:	011b      	lsls	r3, r3, #4
 800eec6:	4413      	add	r3, r2
 800eec8:	3304      	adds	r3, #4
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	f003 020f 	and.w	r2, r3, #15
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	681a      	ldr	r2, [r3, #0]
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	331b      	adds	r3, #27
 800eedc:	011b      	lsls	r3, r3, #4
 800eede:	4413      	add	r3, r2
 800eee0:	3304      	adds	r3, #4
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	0a1b      	lsrs	r3, r3, #8
 800eee6:	b2da      	uxtb	r2, r3
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	681a      	ldr	r2, [r3, #0]
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	331b      	adds	r3, #27
 800eef4:	011b      	lsls	r3, r3, #4
 800eef6:	4413      	add	r3, r2
 800eef8:	3304      	adds	r3, #4
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	0c1b      	lsrs	r3, r3, #16
 800eefe:	b29a      	uxth	r2, r3
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	681a      	ldr	r2, [r3, #0]
 800ef08:	68bb      	ldr	r3, [r7, #8]
 800ef0a:	011b      	lsls	r3, r3, #4
 800ef0c:	4413      	add	r3, r2
 800ef0e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	b2da      	uxtb	r2, r3
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	681a      	ldr	r2, [r3, #0]
 800ef1e:	68bb      	ldr	r3, [r7, #8]
 800ef20:	011b      	lsls	r3, r3, #4
 800ef22:	4413      	add	r3, r2
 800ef24:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	0a1a      	lsrs	r2, r3, #8
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	3301      	adds	r3, #1
 800ef30:	b2d2      	uxtb	r2, r2
 800ef32:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	681a      	ldr	r2, [r3, #0]
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	011b      	lsls	r3, r3, #4
 800ef3c:	4413      	add	r3, r2
 800ef3e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	0c1a      	lsrs	r2, r3, #16
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	3302      	adds	r3, #2
 800ef4a:	b2d2      	uxtb	r2, r2
 800ef4c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	681a      	ldr	r2, [r3, #0]
 800ef52:	68bb      	ldr	r3, [r7, #8]
 800ef54:	011b      	lsls	r3, r3, #4
 800ef56:	4413      	add	r3, r2
 800ef58:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	0e1a      	lsrs	r2, r3, #24
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	3303      	adds	r3, #3
 800ef64:	b2d2      	uxtb	r2, r2
 800ef66:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	681a      	ldr	r2, [r3, #0]
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	011b      	lsls	r3, r3, #4
 800ef70:	4413      	add	r3, r2
 800ef72:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800ef76:	681a      	ldr	r2, [r3, #0]
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	3304      	adds	r3, #4
 800ef7c:	b2d2      	uxtb	r2, r2
 800ef7e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	681a      	ldr	r2, [r3, #0]
 800ef84:	68bb      	ldr	r3, [r7, #8]
 800ef86:	011b      	lsls	r3, r3, #4
 800ef88:	4413      	add	r3, r2
 800ef8a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	0a1a      	lsrs	r2, r3, #8
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	3305      	adds	r3, #5
 800ef96:	b2d2      	uxtb	r2, r2
 800ef98:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	681a      	ldr	r2, [r3, #0]
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	011b      	lsls	r3, r3, #4
 800efa2:	4413      	add	r3, r2
 800efa4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	0c1a      	lsrs	r2, r3, #16
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	3306      	adds	r3, #6
 800efb0:	b2d2      	uxtb	r2, r2
 800efb2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	681a      	ldr	r2, [r3, #0]
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	011b      	lsls	r3, r3, #4
 800efbc:	4413      	add	r3, r2
 800efbe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	0e1a      	lsrs	r2, r3, #24
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	3307      	adds	r3, #7
 800efca:	b2d2      	uxtb	r2, r2
 800efcc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800efce:	68bb      	ldr	r3, [r7, #8]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d108      	bne.n	800efe6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	68da      	ldr	r2, [r3, #12]
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	f042 0220 	orr.w	r2, r2, #32
 800efe2:	60da      	str	r2, [r3, #12]
 800efe4:	e007      	b.n	800eff6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	691a      	ldr	r2, [r3, #16]
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	f042 0220 	orr.w	r2, r2, #32
 800eff4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800eff6:	2300      	movs	r3, #0
 800eff8:	e006      	b.n	800f008 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800effe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800f006:	2301      	movs	r3, #1
  }
}
 800f008:	4618      	mov	r0, r3
 800f00a:	371c      	adds	r7, #28
 800f00c:	46bd      	mov	sp, r7
 800f00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f012:	4770      	bx	lr

0800f014 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800f014:	b480      	push	{r7}
 800f016:	b085      	sub	sp, #20
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
 800f01c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f024:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800f026:	7bfb      	ldrb	r3, [r7, #15]
 800f028:	2b01      	cmp	r3, #1
 800f02a:	d002      	beq.n	800f032 <HAL_CAN_ActivateNotification+0x1e>
 800f02c:	7bfb      	ldrb	r3, [r7, #15]
 800f02e:	2b02      	cmp	r3, #2
 800f030:	d109      	bne.n	800f046 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	6959      	ldr	r1, [r3, #20]
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	683a      	ldr	r2, [r7, #0]
 800f03e:	430a      	orrs	r2, r1
 800f040:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800f042:	2300      	movs	r3, #0
 800f044:	e006      	b.n	800f054 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f04a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800f052:	2301      	movs	r3, #1
  }
}
 800f054:	4618      	mov	r0, r3
 800f056:	3714      	adds	r7, #20
 800f058:	46bd      	mov	sp, r7
 800f05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05e:	4770      	bx	lr

0800f060 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b08a      	sub	sp, #40	; 0x28
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800f068:	2300      	movs	r3, #0
 800f06a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	695b      	ldr	r3, [r3, #20]
 800f072:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	685b      	ldr	r3, [r3, #4]
 800f07a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	689b      	ldr	r3, [r3, #8]
 800f082:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	68db      	ldr	r3, [r3, #12]
 800f08a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	691b      	ldr	r3, [r3, #16]
 800f092:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	699b      	ldr	r3, [r3, #24]
 800f09a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800f09c:	6a3b      	ldr	r3, [r7, #32]
 800f09e:	f003 0301 	and.w	r3, r3, #1
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d07c      	beq.n	800f1a0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800f0a6:	69bb      	ldr	r3, [r7, #24]
 800f0a8:	f003 0301 	and.w	r3, r3, #1
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d023      	beq.n	800f0f8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	2201      	movs	r2, #1
 800f0b6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800f0b8:	69bb      	ldr	r3, [r7, #24]
 800f0ba:	f003 0302 	and.w	r3, r3, #2
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d003      	beq.n	800f0ca <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800f0c2:	6878      	ldr	r0, [r7, #4]
 800f0c4:	f000 f983 	bl	800f3ce <HAL_CAN_TxMailbox0CompleteCallback>
 800f0c8:	e016      	b.n	800f0f8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800f0ca:	69bb      	ldr	r3, [r7, #24]
 800f0cc:	f003 0304 	and.w	r3, r3, #4
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d004      	beq.n	800f0de <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800f0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f0da:	627b      	str	r3, [r7, #36]	; 0x24
 800f0dc:	e00c      	b.n	800f0f8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800f0de:	69bb      	ldr	r3, [r7, #24]
 800f0e0:	f003 0308 	and.w	r3, r3, #8
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d004      	beq.n	800f0f2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800f0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f0ee:	627b      	str	r3, [r7, #36]	; 0x24
 800f0f0:	e002      	b.n	800f0f8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f000 f989 	bl	800f40a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800f0f8:	69bb      	ldr	r3, [r7, #24]
 800f0fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d024      	beq.n	800f14c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f10a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800f10c:	69bb      	ldr	r3, [r7, #24]
 800f10e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f112:	2b00      	cmp	r3, #0
 800f114:	d003      	beq.n	800f11e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800f116:	6878      	ldr	r0, [r7, #4]
 800f118:	f000 f963 	bl	800f3e2 <HAL_CAN_TxMailbox1CompleteCallback>
 800f11c:	e016      	b.n	800f14c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800f11e:	69bb      	ldr	r3, [r7, #24]
 800f120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f124:	2b00      	cmp	r3, #0
 800f126:	d004      	beq.n	800f132 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800f128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f12a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f12e:	627b      	str	r3, [r7, #36]	; 0x24
 800f130:	e00c      	b.n	800f14c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800f132:	69bb      	ldr	r3, [r7, #24]
 800f134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d004      	beq.n	800f146 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800f13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f13e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f142:	627b      	str	r3, [r7, #36]	; 0x24
 800f144:	e002      	b.n	800f14c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f000 f969 	bl	800f41e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800f14c:	69bb      	ldr	r3, [r7, #24]
 800f14e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f152:	2b00      	cmp	r3, #0
 800f154:	d024      	beq.n	800f1a0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f15e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800f160:	69bb      	ldr	r3, [r7, #24]
 800f162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f166:	2b00      	cmp	r3, #0
 800f168:	d003      	beq.n	800f172 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	f000 f943 	bl	800f3f6 <HAL_CAN_TxMailbox2CompleteCallback>
 800f170:	e016      	b.n	800f1a0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800f172:	69bb      	ldr	r3, [r7, #24]
 800f174:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d004      	beq.n	800f186 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800f17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f17e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f182:	627b      	str	r3, [r7, #36]	; 0x24
 800f184:	e00c      	b.n	800f1a0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800f186:	69bb      	ldr	r3, [r7, #24]
 800f188:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d004      	beq.n	800f19a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800f190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f196:	627b      	str	r3, [r7, #36]	; 0x24
 800f198:	e002      	b.n	800f1a0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f000 f949 	bl	800f432 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800f1a0:	6a3b      	ldr	r3, [r7, #32]
 800f1a2:	f003 0308 	and.w	r3, r3, #8
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d00c      	beq.n	800f1c4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	f003 0310 	and.w	r3, r3, #16
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d007      	beq.n	800f1c4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800f1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f1ba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	2210      	movs	r2, #16
 800f1c2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800f1c4:	6a3b      	ldr	r3, [r7, #32]
 800f1c6:	f003 0304 	and.w	r3, r3, #4
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d00b      	beq.n	800f1e6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800f1ce:	697b      	ldr	r3, [r7, #20]
 800f1d0:	f003 0308 	and.w	r3, r3, #8
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d006      	beq.n	800f1e6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	2208      	movs	r2, #8
 800f1de:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	f000 f930 	bl	800f446 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800f1e6:	6a3b      	ldr	r3, [r7, #32]
 800f1e8:	f003 0302 	and.w	r3, r3, #2
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d009      	beq.n	800f204 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	68db      	ldr	r3, [r3, #12]
 800f1f6:	f003 0303 	and.w	r3, r3, #3
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d002      	beq.n	800f204 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800f1fe:	6878      	ldr	r0, [r7, #4]
 800f200:	f7fc fa84 	bl	800b70c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800f204:	6a3b      	ldr	r3, [r7, #32]
 800f206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d00c      	beq.n	800f228 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800f20e:	693b      	ldr	r3, [r7, #16]
 800f210:	f003 0310 	and.w	r3, r3, #16
 800f214:	2b00      	cmp	r3, #0
 800f216:	d007      	beq.n	800f228 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800f218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f21a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f21e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	2210      	movs	r2, #16
 800f226:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800f228:	6a3b      	ldr	r3, [r7, #32]
 800f22a:	f003 0320 	and.w	r3, r3, #32
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d00b      	beq.n	800f24a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800f232:	693b      	ldr	r3, [r7, #16]
 800f234:	f003 0308 	and.w	r3, r3, #8
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d006      	beq.n	800f24a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	2208      	movs	r2, #8
 800f242:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f000 f908 	bl	800f45a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800f24a:	6a3b      	ldr	r3, [r7, #32]
 800f24c:	f003 0310 	and.w	r3, r3, #16
 800f250:	2b00      	cmp	r3, #0
 800f252:	d009      	beq.n	800f268 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	691b      	ldr	r3, [r3, #16]
 800f25a:	f003 0303 	and.w	r3, r3, #3
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d002      	beq.n	800f268 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f7fc fb6c 	bl	800b940 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800f268:	6a3b      	ldr	r3, [r7, #32]
 800f26a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d00b      	beq.n	800f28a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800f272:	69fb      	ldr	r3, [r7, #28]
 800f274:	f003 0310 	and.w	r3, r3, #16
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d006      	beq.n	800f28a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	2210      	movs	r2, #16
 800f282:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f000 f8f2 	bl	800f46e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800f28a:	6a3b      	ldr	r3, [r7, #32]
 800f28c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f290:	2b00      	cmp	r3, #0
 800f292:	d00b      	beq.n	800f2ac <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800f294:	69fb      	ldr	r3, [r7, #28]
 800f296:	f003 0308 	and.w	r3, r3, #8
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d006      	beq.n	800f2ac <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	2208      	movs	r2, #8
 800f2a4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800f2a6:	6878      	ldr	r0, [r7, #4]
 800f2a8:	f000 f8eb 	bl	800f482 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800f2ac:	6a3b      	ldr	r3, [r7, #32]
 800f2ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d07b      	beq.n	800f3ae <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800f2b6:	69fb      	ldr	r3, [r7, #28]
 800f2b8:	f003 0304 	and.w	r3, r3, #4
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d072      	beq.n	800f3a6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800f2c0:	6a3b      	ldr	r3, [r7, #32]
 800f2c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d008      	beq.n	800f2dc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d003      	beq.n	800f2dc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800f2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d6:	f043 0301 	orr.w	r3, r3, #1
 800f2da:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800f2dc:	6a3b      	ldr	r3, [r7, #32]
 800f2de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d008      	beq.n	800f2f8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d003      	beq.n	800f2f8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800f2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2f2:	f043 0302 	orr.w	r3, r3, #2
 800f2f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800f2f8:	6a3b      	ldr	r3, [r7, #32]
 800f2fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d008      	beq.n	800f314 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d003      	beq.n	800f314 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800f30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f30e:	f043 0304 	orr.w	r3, r3, #4
 800f312:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800f314:	6a3b      	ldr	r3, [r7, #32]
 800f316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d043      	beq.n	800f3a6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800f324:	2b00      	cmp	r3, #0
 800f326:	d03e      	beq.n	800f3a6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f32e:	2b60      	cmp	r3, #96	; 0x60
 800f330:	d02b      	beq.n	800f38a <HAL_CAN_IRQHandler+0x32a>
 800f332:	2b60      	cmp	r3, #96	; 0x60
 800f334:	d82e      	bhi.n	800f394 <HAL_CAN_IRQHandler+0x334>
 800f336:	2b50      	cmp	r3, #80	; 0x50
 800f338:	d022      	beq.n	800f380 <HAL_CAN_IRQHandler+0x320>
 800f33a:	2b50      	cmp	r3, #80	; 0x50
 800f33c:	d82a      	bhi.n	800f394 <HAL_CAN_IRQHandler+0x334>
 800f33e:	2b40      	cmp	r3, #64	; 0x40
 800f340:	d019      	beq.n	800f376 <HAL_CAN_IRQHandler+0x316>
 800f342:	2b40      	cmp	r3, #64	; 0x40
 800f344:	d826      	bhi.n	800f394 <HAL_CAN_IRQHandler+0x334>
 800f346:	2b30      	cmp	r3, #48	; 0x30
 800f348:	d010      	beq.n	800f36c <HAL_CAN_IRQHandler+0x30c>
 800f34a:	2b30      	cmp	r3, #48	; 0x30
 800f34c:	d822      	bhi.n	800f394 <HAL_CAN_IRQHandler+0x334>
 800f34e:	2b10      	cmp	r3, #16
 800f350:	d002      	beq.n	800f358 <HAL_CAN_IRQHandler+0x2f8>
 800f352:	2b20      	cmp	r3, #32
 800f354:	d005      	beq.n	800f362 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800f356:	e01d      	b.n	800f394 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800f358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f35a:	f043 0308 	orr.w	r3, r3, #8
 800f35e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f360:	e019      	b.n	800f396 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800f362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f364:	f043 0310 	orr.w	r3, r3, #16
 800f368:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f36a:	e014      	b.n	800f396 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800f36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f36e:	f043 0320 	orr.w	r3, r3, #32
 800f372:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f374:	e00f      	b.n	800f396 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800f376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f37c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f37e:	e00a      	b.n	800f396 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800f380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f386:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f388:	e005      	b.n	800f396 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800f38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f38c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f390:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f392:	e000      	b.n	800f396 <HAL_CAN_IRQHandler+0x336>
            break;
 800f394:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	699a      	ldr	r2, [r3, #24]
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800f3a4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	2204      	movs	r2, #4
 800f3ac:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800f3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d008      	beq.n	800f3c6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ba:	431a      	orrs	r2, r3
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f000 f868 	bl	800f496 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800f3c6:	bf00      	nop
 800f3c8:	3728      	adds	r7, #40	; 0x28
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	bd80      	pop	{r7, pc}

0800f3ce <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800f3ce:	b480      	push	{r7}
 800f3d0:	b083      	sub	sp, #12
 800f3d2:	af00      	add	r7, sp, #0
 800f3d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800f3d6:	bf00      	nop
 800f3d8:	370c      	adds	r7, #12
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e0:	4770      	bx	lr

0800f3e2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800f3e2:	b480      	push	{r7}
 800f3e4:	b083      	sub	sp, #12
 800f3e6:	af00      	add	r7, sp, #0
 800f3e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800f3ea:	bf00      	nop
 800f3ec:	370c      	adds	r7, #12
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f4:	4770      	bx	lr

0800f3f6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800f3f6:	b480      	push	{r7}
 800f3f8:	b083      	sub	sp, #12
 800f3fa:	af00      	add	r7, sp, #0
 800f3fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800f3fe:	bf00      	nop
 800f400:	370c      	adds	r7, #12
 800f402:	46bd      	mov	sp, r7
 800f404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f408:	4770      	bx	lr

0800f40a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800f40a:	b480      	push	{r7}
 800f40c:	b083      	sub	sp, #12
 800f40e:	af00      	add	r7, sp, #0
 800f410:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800f412:	bf00      	nop
 800f414:	370c      	adds	r7, #12
 800f416:	46bd      	mov	sp, r7
 800f418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41c:	4770      	bx	lr

0800f41e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800f41e:	b480      	push	{r7}
 800f420:	b083      	sub	sp, #12
 800f422:	af00      	add	r7, sp, #0
 800f424:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800f426:	bf00      	nop
 800f428:	370c      	adds	r7, #12
 800f42a:	46bd      	mov	sp, r7
 800f42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f430:	4770      	bx	lr

0800f432 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800f432:	b480      	push	{r7}
 800f434:	b083      	sub	sp, #12
 800f436:	af00      	add	r7, sp, #0
 800f438:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800f43a:	bf00      	nop
 800f43c:	370c      	adds	r7, #12
 800f43e:	46bd      	mov	sp, r7
 800f440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f444:	4770      	bx	lr

0800f446 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800f446:	b480      	push	{r7}
 800f448:	b083      	sub	sp, #12
 800f44a:	af00      	add	r7, sp, #0
 800f44c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800f44e:	bf00      	nop
 800f450:	370c      	adds	r7, #12
 800f452:	46bd      	mov	sp, r7
 800f454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f458:	4770      	bx	lr

0800f45a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800f45a:	b480      	push	{r7}
 800f45c:	b083      	sub	sp, #12
 800f45e:	af00      	add	r7, sp, #0
 800f460:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800f462:	bf00      	nop
 800f464:	370c      	adds	r7, #12
 800f466:	46bd      	mov	sp, r7
 800f468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46c:	4770      	bx	lr

0800f46e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800f46e:	b480      	push	{r7}
 800f470:	b083      	sub	sp, #12
 800f472:	af00      	add	r7, sp, #0
 800f474:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800f476:	bf00      	nop
 800f478:	370c      	adds	r7, #12
 800f47a:	46bd      	mov	sp, r7
 800f47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f480:	4770      	bx	lr

0800f482 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800f482:	b480      	push	{r7}
 800f484:	b083      	sub	sp, #12
 800f486:	af00      	add	r7, sp, #0
 800f488:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800f48a:	bf00      	nop
 800f48c:	370c      	adds	r7, #12
 800f48e:	46bd      	mov	sp, r7
 800f490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f494:	4770      	bx	lr

0800f496 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800f496:	b480      	push	{r7}
 800f498:	b083      	sub	sp, #12
 800f49a:	af00      	add	r7, sp, #0
 800f49c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800f49e:	bf00      	nop
 800f4a0:	370c      	adds	r7, #12
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a8:	4770      	bx	lr
	...

0800f4ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f4ac:	b480      	push	{r7}
 800f4ae:	b085      	sub	sp, #20
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f003 0307 	and.w	r3, r3, #7
 800f4ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f4bc:	4b0c      	ldr	r3, [pc, #48]	; (800f4f0 <__NVIC_SetPriorityGrouping+0x44>)
 800f4be:	68db      	ldr	r3, [r3, #12]
 800f4c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f4c2:	68ba      	ldr	r2, [r7, #8]
 800f4c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800f4c8:	4013      	ands	r3, r2
 800f4ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800f4d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800f4d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f4dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800f4de:	4a04      	ldr	r2, [pc, #16]	; (800f4f0 <__NVIC_SetPriorityGrouping+0x44>)
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	60d3      	str	r3, [r2, #12]
}
 800f4e4:	bf00      	nop
 800f4e6:	3714      	adds	r7, #20
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ee:	4770      	bx	lr
 800f4f0:	e000ed00 	.word	0xe000ed00

0800f4f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800f4f4:	b480      	push	{r7}
 800f4f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f4f8:	4b04      	ldr	r3, [pc, #16]	; (800f50c <__NVIC_GetPriorityGrouping+0x18>)
 800f4fa:	68db      	ldr	r3, [r3, #12]
 800f4fc:	0a1b      	lsrs	r3, r3, #8
 800f4fe:	f003 0307 	and.w	r3, r3, #7
}
 800f502:	4618      	mov	r0, r3
 800f504:	46bd      	mov	sp, r7
 800f506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50a:	4770      	bx	lr
 800f50c:	e000ed00 	.word	0xe000ed00

0800f510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f510:	b480      	push	{r7}
 800f512:	b083      	sub	sp, #12
 800f514:	af00      	add	r7, sp, #0
 800f516:	4603      	mov	r3, r0
 800f518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f51a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	db0b      	blt.n	800f53a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f522:	79fb      	ldrb	r3, [r7, #7]
 800f524:	f003 021f 	and.w	r2, r3, #31
 800f528:	4907      	ldr	r1, [pc, #28]	; (800f548 <__NVIC_EnableIRQ+0x38>)
 800f52a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f52e:	095b      	lsrs	r3, r3, #5
 800f530:	2001      	movs	r0, #1
 800f532:	fa00 f202 	lsl.w	r2, r0, r2
 800f536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800f53a:	bf00      	nop
 800f53c:	370c      	adds	r7, #12
 800f53e:	46bd      	mov	sp, r7
 800f540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f544:	4770      	bx	lr
 800f546:	bf00      	nop
 800f548:	e000e100 	.word	0xe000e100

0800f54c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800f54c:	b480      	push	{r7}
 800f54e:	b083      	sub	sp, #12
 800f550:	af00      	add	r7, sp, #0
 800f552:	4603      	mov	r3, r0
 800f554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	db12      	blt.n	800f584 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f55e:	79fb      	ldrb	r3, [r7, #7]
 800f560:	f003 021f 	and.w	r2, r3, #31
 800f564:	490a      	ldr	r1, [pc, #40]	; (800f590 <__NVIC_DisableIRQ+0x44>)
 800f566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f56a:	095b      	lsrs	r3, r3, #5
 800f56c:	2001      	movs	r0, #1
 800f56e:	fa00 f202 	lsl.w	r2, r0, r2
 800f572:	3320      	adds	r3, #32
 800f574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800f578:	f3bf 8f4f 	dsb	sy
}
 800f57c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800f57e:	f3bf 8f6f 	isb	sy
}
 800f582:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800f584:	bf00      	nop
 800f586:	370c      	adds	r7, #12
 800f588:	46bd      	mov	sp, r7
 800f58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58e:	4770      	bx	lr
 800f590:	e000e100 	.word	0xe000e100

0800f594 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800f594:	b480      	push	{r7}
 800f596:	b083      	sub	sp, #12
 800f598:	af00      	add	r7, sp, #0
 800f59a:	4603      	mov	r3, r0
 800f59c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f59e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	db0c      	blt.n	800f5c0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f5a6:	79fb      	ldrb	r3, [r7, #7]
 800f5a8:	f003 021f 	and.w	r2, r3, #31
 800f5ac:	4907      	ldr	r1, [pc, #28]	; (800f5cc <__NVIC_ClearPendingIRQ+0x38>)
 800f5ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f5b2:	095b      	lsrs	r3, r3, #5
 800f5b4:	2001      	movs	r0, #1
 800f5b6:	fa00 f202 	lsl.w	r2, r0, r2
 800f5ba:	3360      	adds	r3, #96	; 0x60
 800f5bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800f5c0:	bf00      	nop
 800f5c2:	370c      	adds	r7, #12
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ca:	4770      	bx	lr
 800f5cc:	e000e100 	.word	0xe000e100

0800f5d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f5d0:	b480      	push	{r7}
 800f5d2:	b083      	sub	sp, #12
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	6039      	str	r1, [r7, #0]
 800f5da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f5dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	db0a      	blt.n	800f5fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	b2da      	uxtb	r2, r3
 800f5e8:	490c      	ldr	r1, [pc, #48]	; (800f61c <__NVIC_SetPriority+0x4c>)
 800f5ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f5ee:	0112      	lsls	r2, r2, #4
 800f5f0:	b2d2      	uxtb	r2, r2
 800f5f2:	440b      	add	r3, r1
 800f5f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800f5f8:	e00a      	b.n	800f610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	b2da      	uxtb	r2, r3
 800f5fe:	4908      	ldr	r1, [pc, #32]	; (800f620 <__NVIC_SetPriority+0x50>)
 800f600:	79fb      	ldrb	r3, [r7, #7]
 800f602:	f003 030f 	and.w	r3, r3, #15
 800f606:	3b04      	subs	r3, #4
 800f608:	0112      	lsls	r2, r2, #4
 800f60a:	b2d2      	uxtb	r2, r2
 800f60c:	440b      	add	r3, r1
 800f60e:	761a      	strb	r2, [r3, #24]
}
 800f610:	bf00      	nop
 800f612:	370c      	adds	r7, #12
 800f614:	46bd      	mov	sp, r7
 800f616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61a:	4770      	bx	lr
 800f61c:	e000e100 	.word	0xe000e100
 800f620:	e000ed00 	.word	0xe000ed00

0800f624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800f624:	b480      	push	{r7}
 800f626:	b089      	sub	sp, #36	; 0x24
 800f628:	af00      	add	r7, sp, #0
 800f62a:	60f8      	str	r0, [r7, #12]
 800f62c:	60b9      	str	r1, [r7, #8]
 800f62e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	f003 0307 	and.w	r3, r3, #7
 800f636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f638:	69fb      	ldr	r3, [r7, #28]
 800f63a:	f1c3 0307 	rsb	r3, r3, #7
 800f63e:	2b04      	cmp	r3, #4
 800f640:	bf28      	it	cs
 800f642:	2304      	movcs	r3, #4
 800f644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f646:	69fb      	ldr	r3, [r7, #28]
 800f648:	3304      	adds	r3, #4
 800f64a:	2b06      	cmp	r3, #6
 800f64c:	d902      	bls.n	800f654 <NVIC_EncodePriority+0x30>
 800f64e:	69fb      	ldr	r3, [r7, #28]
 800f650:	3b03      	subs	r3, #3
 800f652:	e000      	b.n	800f656 <NVIC_EncodePriority+0x32>
 800f654:	2300      	movs	r3, #0
 800f656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f658:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f65c:	69bb      	ldr	r3, [r7, #24]
 800f65e:	fa02 f303 	lsl.w	r3, r2, r3
 800f662:	43da      	mvns	r2, r3
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	401a      	ands	r2, r3
 800f668:	697b      	ldr	r3, [r7, #20]
 800f66a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800f66c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	fa01 f303 	lsl.w	r3, r1, r3
 800f676:	43d9      	mvns	r1, r3
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f67c:	4313      	orrs	r3, r2
         );
}
 800f67e:	4618      	mov	r0, r3
 800f680:	3724      	adds	r7, #36	; 0x24
 800f682:	46bd      	mov	sp, r7
 800f684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f688:	4770      	bx	lr

0800f68a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f68a:	b580      	push	{r7, lr}
 800f68c:	b082      	sub	sp, #8
 800f68e:	af00      	add	r7, sp, #0
 800f690:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800f692:	6878      	ldr	r0, [r7, #4]
 800f694:	f7ff ff0a 	bl	800f4ac <__NVIC_SetPriorityGrouping>
}
 800f698:	bf00      	nop
 800f69a:	3708      	adds	r7, #8
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}

0800f6a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b086      	sub	sp, #24
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	60b9      	str	r1, [r7, #8]
 800f6aa:	607a      	str	r2, [r7, #4]
 800f6ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800f6b2:	f7ff ff1f 	bl	800f4f4 <__NVIC_GetPriorityGrouping>
 800f6b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800f6b8:	687a      	ldr	r2, [r7, #4]
 800f6ba:	68b9      	ldr	r1, [r7, #8]
 800f6bc:	6978      	ldr	r0, [r7, #20]
 800f6be:	f7ff ffb1 	bl	800f624 <NVIC_EncodePriority>
 800f6c2:	4602      	mov	r2, r0
 800f6c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6c8:	4611      	mov	r1, r2
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f7ff ff80 	bl	800f5d0 <__NVIC_SetPriority>
}
 800f6d0:	bf00      	nop
 800f6d2:	3718      	adds	r7, #24
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	bd80      	pop	{r7, pc}

0800f6d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b082      	sub	sp, #8
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	4603      	mov	r3, r0
 800f6e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f6e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	f7ff ff12 	bl	800f510 <__NVIC_EnableIRQ>
}
 800f6ec:	bf00      	nop
 800f6ee:	3708      	adds	r7, #8
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bd80      	pop	{r7, pc}

0800f6f4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b082      	sub	sp, #8
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800f6fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f702:	4618      	mov	r0, r3
 800f704:	f7ff ff22 	bl	800f54c <__NVIC_DisableIRQ>
}
 800f708:	bf00      	nop
 800f70a:	3708      	adds	r7, #8
 800f70c:	46bd      	mov	sp, r7
 800f70e:	bd80      	pop	{r7, pc}

0800f710 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b082      	sub	sp, #8
 800f714:	af00      	add	r7, sp, #0
 800f716:	4603      	mov	r3, r0
 800f718:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800f71a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f71e:	4618      	mov	r0, r3
 800f720:	f7ff ff38 	bl	800f594 <__NVIC_ClearPendingIRQ>
}
 800f724:	bf00      	nop
 800f726:	3708      	adds	r7, #8
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}

0800f72c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b086      	sub	sp, #24
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800f734:	2300      	movs	r3, #0
 800f736:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800f738:	f7fe fffa 	bl	800e730 <HAL_GetTick>
 800f73c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d101      	bne.n	800f748 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800f744:	2301      	movs	r3, #1
 800f746:	e099      	b.n	800f87c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2200      	movs	r2, #0
 800f74c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	2202      	movs	r2, #2
 800f754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	681a      	ldr	r2, [r3, #0]
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	f022 0201 	bic.w	r2, r2, #1
 800f766:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f768:	e00f      	b.n	800f78a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f76a:	f7fe ffe1 	bl	800e730 <HAL_GetTick>
 800f76e:	4602      	mov	r2, r0
 800f770:	693b      	ldr	r3, [r7, #16]
 800f772:	1ad3      	subs	r3, r2, r3
 800f774:	2b05      	cmp	r3, #5
 800f776:	d908      	bls.n	800f78a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2220      	movs	r2, #32
 800f77c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	2203      	movs	r2, #3
 800f782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800f786:	2303      	movs	r3, #3
 800f788:	e078      	b.n	800f87c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	f003 0301 	and.w	r3, r3, #1
 800f794:	2b00      	cmp	r3, #0
 800f796:	d1e8      	bne.n	800f76a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800f7a0:	697a      	ldr	r2, [r7, #20]
 800f7a2:	4b38      	ldr	r3, [pc, #224]	; (800f884 <HAL_DMA_Init+0x158>)
 800f7a4:	4013      	ands	r3, r2
 800f7a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	685a      	ldr	r2, [r3, #4]
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	689b      	ldr	r3, [r3, #8]
 800f7b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f7b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	691b      	ldr	r3, [r3, #16]
 800f7bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f7c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	699b      	ldr	r3, [r3, #24]
 800f7c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f7ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	6a1b      	ldr	r3, [r3, #32]
 800f7d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f7d6:	697a      	ldr	r2, [r7, #20]
 800f7d8:	4313      	orrs	r3, r2
 800f7da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7e0:	2b04      	cmp	r3, #4
 800f7e2:	d107      	bne.n	800f7f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7ec:	4313      	orrs	r3, r2
 800f7ee:	697a      	ldr	r2, [r7, #20]
 800f7f0:	4313      	orrs	r3, r2
 800f7f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	697a      	ldr	r2, [r7, #20]
 800f7fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	695b      	ldr	r3, [r3, #20]
 800f802:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800f804:	697b      	ldr	r3, [r7, #20]
 800f806:	f023 0307 	bic.w	r3, r3, #7
 800f80a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f810:	697a      	ldr	r2, [r7, #20]
 800f812:	4313      	orrs	r3, r2
 800f814:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f81a:	2b04      	cmp	r3, #4
 800f81c:	d117      	bne.n	800f84e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f822:	697a      	ldr	r2, [r7, #20]
 800f824:	4313      	orrs	r3, r2
 800f826:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d00e      	beq.n	800f84e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800f830:	6878      	ldr	r0, [r7, #4]
 800f832:	f000 fb09 	bl	800fe48 <DMA_CheckFifoParam>
 800f836:	4603      	mov	r3, r0
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d008      	beq.n	800f84e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2240      	movs	r2, #64	; 0x40
 800f840:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	2201      	movs	r2, #1
 800f846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800f84a:	2301      	movs	r3, #1
 800f84c:	e016      	b.n	800f87c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	697a      	ldr	r2, [r7, #20]
 800f854:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f000 fac0 	bl	800fddc <DMA_CalcBaseAndBitshift>
 800f85c:	4603      	mov	r3, r0
 800f85e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f864:	223f      	movs	r2, #63	; 0x3f
 800f866:	409a      	lsls	r2, r3
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2200      	movs	r2, #0
 800f870:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	2201      	movs	r2, #1
 800f876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800f87a:	2300      	movs	r3, #0
}
 800f87c:	4618      	mov	r0, r3
 800f87e:	3718      	adds	r7, #24
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}
 800f884:	f010803f 	.word	0xf010803f

0800f888 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b084      	sub	sp, #16
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d101      	bne.n	800f89a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800f896:	2301      	movs	r3, #1
 800f898:	e050      	b.n	800f93c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f8a0:	b2db      	uxtb	r3, r3
 800f8a2:	2b02      	cmp	r3, #2
 800f8a4:	d101      	bne.n	800f8aa <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800f8a6:	2302      	movs	r3, #2
 800f8a8:	e048      	b.n	800f93c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	681a      	ldr	r2, [r3, #0]
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	f022 0201 	bic.w	r2, r2, #1
 800f8b8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	2200      	movs	r2, #0
 800f8c0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	2200      	movs	r2, #0
 800f8e0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	2221      	movs	r2, #33	; 0x21
 800f8e8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800f8ea:	6878      	ldr	r0, [r7, #4]
 800f8ec:	f000 fa76 	bl	800fddc <DMA_CalcBaseAndBitshift>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2200      	movs	r2, #0
 800f904:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	2200      	movs	r2, #0
 800f90a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	2200      	movs	r2, #0
 800f910:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2200      	movs	r2, #0
 800f916:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f91c:	223f      	movs	r2, #63	; 0x3f
 800f91e:	409a      	lsls	r2, r3
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	2200      	movs	r2, #0
 800f928:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	2200      	movs	r2, #0
 800f92e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	2200      	movs	r2, #0
 800f936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800f93a:	2300      	movs	r3, #0
}
 800f93c:	4618      	mov	r0, r3
 800f93e:	3710      	adds	r7, #16
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}

0800f944 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b086      	sub	sp, #24
 800f948:	af00      	add	r7, sp, #0
 800f94a:	60f8      	str	r0, [r7, #12]
 800f94c:	60b9      	str	r1, [r7, #8]
 800f94e:	607a      	str	r2, [r7, #4]
 800f950:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f952:	2300      	movs	r3, #0
 800f954:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f95a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f962:	2b01      	cmp	r3, #1
 800f964:	d101      	bne.n	800f96a <HAL_DMA_Start_IT+0x26>
 800f966:	2302      	movs	r3, #2
 800f968:	e040      	b.n	800f9ec <HAL_DMA_Start_IT+0xa8>
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	2201      	movs	r2, #1
 800f96e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  

  if(HAL_DMA_STATE_READY == hdma->State)
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f978:	b2db      	uxtb	r3, r3
 800f97a:	2b01      	cmp	r3, #1
 800f97c:	d12f      	bne.n	800f9de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	2202      	movs	r2, #2
 800f982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	2200      	movs	r2, #0
 800f98a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	687a      	ldr	r2, [r7, #4]
 800f990:	68b9      	ldr	r1, [r7, #8]
 800f992:	68f8      	ldr	r0, [r7, #12]
 800f994:	f000 f9f4 	bl	800fd80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f99c:	223f      	movs	r2, #63	; 0x3f
 800f99e:	409a      	lsls	r2, r3
 800f9a0:	693b      	ldr	r3, [r7, #16]
 800f9a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	681a      	ldr	r2, [r3, #0]
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	f042 0216 	orr.w	r2, r2, #22
 800f9b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d007      	beq.n	800f9cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	681a      	ldr	r2, [r3, #0]
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	f042 0208 	orr.w	r2, r2, #8
 800f9ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	681a      	ldr	r2, [r3, #0]
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	f042 0201 	orr.w	r2, r2, #1
 800f9da:	601a      	str	r2, [r3, #0]
 800f9dc:	e005      	b.n	800f9ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 800f9e6:	2302      	movs	r3, #2
 800f9e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800f9ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3718      	adds	r7, #24
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}

0800f9f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800f9f4:	b480      	push	{r7}
 800f9f6:	b083      	sub	sp, #12
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800fa02:	b2db      	uxtb	r3, r3
 800fa04:	2b02      	cmp	r3, #2
 800fa06:	d004      	beq.n	800fa12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	2280      	movs	r2, #128	; 0x80
 800fa0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800fa0e:	2301      	movs	r3, #1
 800fa10:	e00c      	b.n	800fa2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	2205      	movs	r2, #5
 800fa16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	681a      	ldr	r2, [r3, #0]
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	f022 0201 	bic.w	r2, r2, #1
 800fa28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800fa2a:	2300      	movs	r3, #0
}
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	370c      	adds	r7, #12
 800fa30:	46bd      	mov	sp, r7
 800fa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa36:	4770      	bx	lr

0800fa38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b086      	sub	sp, #24
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800fa40:	2300      	movs	r3, #0
 800fa42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800fa44:	4b92      	ldr	r3, [pc, #584]	; (800fc90 <HAL_DMA_IRQHandler+0x258>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	4a92      	ldr	r2, [pc, #584]	; (800fc94 <HAL_DMA_IRQHandler+0x25c>)
 800fa4a:	fba2 2303 	umull	r2, r3, r2, r3
 800fa4e:	0a9b      	lsrs	r3, r3, #10
 800fa50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800fa58:	693b      	ldr	r3, [r7, #16]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fa62:	2208      	movs	r2, #8
 800fa64:	409a      	lsls	r2, r3
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	4013      	ands	r3, r2
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d01a      	beq.n	800faa4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	f003 0304 	and.w	r3, r3, #4
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d013      	beq.n	800faa4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	681a      	ldr	r2, [r3, #0]
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	f022 0204 	bic.w	r2, r2, #4
 800fa8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fa90:	2208      	movs	r2, #8
 800fa92:	409a      	lsls	r2, r3
 800fa94:	693b      	ldr	r3, [r7, #16]
 800fa96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa9c:	f043 0201 	orr.w	r2, r3, #1
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800faa8:	2201      	movs	r2, #1
 800faaa:	409a      	lsls	r2, r3
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	4013      	ands	r3, r2
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d012      	beq.n	800fada <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	695b      	ldr	r3, [r3, #20]
 800faba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d00b      	beq.n	800fada <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fac6:	2201      	movs	r2, #1
 800fac8:	409a      	lsls	r2, r3
 800faca:	693b      	ldr	r3, [r7, #16]
 800facc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fad2:	f043 0202 	orr.w	r2, r3, #2
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fade:	2204      	movs	r2, #4
 800fae0:	409a      	lsls	r2, r3
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	4013      	ands	r3, r2
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d012      	beq.n	800fb10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	f003 0302 	and.w	r3, r3, #2
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d00b      	beq.n	800fb10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fafc:	2204      	movs	r2, #4
 800fafe:	409a      	lsls	r2, r3
 800fb00:	693b      	ldr	r3, [r7, #16]
 800fb02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb08:	f043 0204 	orr.w	r2, r3, #4
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fb14:	2210      	movs	r2, #16
 800fb16:	409a      	lsls	r2, r3
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	4013      	ands	r3, r2
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d043      	beq.n	800fba8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	f003 0308 	and.w	r3, r3, #8
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d03c      	beq.n	800fba8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fb32:	2210      	movs	r2, #16
 800fb34:	409a      	lsls	r2, r3
 800fb36:	693b      	ldr	r3, [r7, #16]
 800fb38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d018      	beq.n	800fb7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d108      	bne.n	800fb68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d024      	beq.n	800fba8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	4798      	blx	r3
 800fb66:	e01f      	b.n	800fba8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d01b      	beq.n	800fba8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb74:	6878      	ldr	r0, [r7, #4]
 800fb76:	4798      	blx	r3
 800fb78:	e016      	b.n	800fba8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d107      	bne.n	800fb98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	681a      	ldr	r2, [r3, #0]
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	f022 0208 	bic.w	r2, r2, #8
 800fb96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d003      	beq.n	800fba8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fba4:	6878      	ldr	r0, [r7, #4]
 800fba6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fbac:	2220      	movs	r2, #32
 800fbae:	409a      	lsls	r2, r3
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	4013      	ands	r3, r2
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	f000 808e 	beq.w	800fcd6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	f003 0310 	and.w	r3, r3, #16
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	f000 8086 	beq.w	800fcd6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fbce:	2220      	movs	r2, #32
 800fbd0:	409a      	lsls	r2, r3
 800fbd2:	693b      	ldr	r3, [r7, #16]
 800fbd4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800fbdc:	b2db      	uxtb	r3, r3
 800fbde:	2b05      	cmp	r3, #5
 800fbe0:	d136      	bne.n	800fc50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	681a      	ldr	r2, [r3, #0]
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	f022 0216 	bic.w	r2, r2, #22
 800fbf0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	695a      	ldr	r2, [r3, #20]
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fc00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d103      	bne.n	800fc12 <HAL_DMA_IRQHandler+0x1da>
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d007      	beq.n	800fc22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	681a      	ldr	r2, [r3, #0]
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	f022 0208 	bic.w	r2, r2, #8
 800fc20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc26:	223f      	movs	r2, #63	; 0x3f
 800fc28:	409a      	lsls	r2, r3
 800fc2a:	693b      	ldr	r3, [r7, #16]
 800fc2c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	2200      	movs	r2, #0
 800fc32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	2201      	movs	r2, #1
 800fc3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d07d      	beq.n	800fd42 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	4798      	blx	r3
        }
        return;
 800fc4e:	e078      	b.n	800fd42 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d01c      	beq.n	800fc98 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d108      	bne.n	800fc7e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d030      	beq.n	800fcd6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc78:	6878      	ldr	r0, [r7, #4]
 800fc7a:	4798      	blx	r3
 800fc7c:	e02b      	b.n	800fcd6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d027      	beq.n	800fcd6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	4798      	blx	r3
 800fc8e:	e022      	b.n	800fcd6 <HAL_DMA_IRQHandler+0x29e>
 800fc90:	200000c0 	.word	0x200000c0
 800fc94:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d10f      	bne.n	800fcc6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	681a      	ldr	r2, [r3, #0]
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	f022 0210 	bic.w	r2, r2, #16
 800fcb4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	2200      	movs	r2, #0
 800fcba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	2201      	movs	r2, #1
 800fcc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d003      	beq.n	800fcd6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d032      	beq.n	800fd44 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fce2:	f003 0301 	and.w	r3, r3, #1
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d022      	beq.n	800fd30 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	2205      	movs	r2, #5
 800fcee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	681a      	ldr	r2, [r3, #0]
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	f022 0201 	bic.w	r2, r2, #1
 800fd00:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	3301      	adds	r3, #1
 800fd06:	60bb      	str	r3, [r7, #8]
 800fd08:	697a      	ldr	r2, [r7, #20]
 800fd0a:	429a      	cmp	r2, r3
 800fd0c:	d307      	bcc.n	800fd1e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	f003 0301 	and.w	r3, r3, #1
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d1f2      	bne.n	800fd02 <HAL_DMA_IRQHandler+0x2ca>
 800fd1c:	e000      	b.n	800fd20 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800fd1e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	2200      	movs	r2, #0
 800fd24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2201      	movs	r2, #1
 800fd2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d005      	beq.n	800fd44 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	4798      	blx	r3
 800fd40:	e000      	b.n	800fd44 <HAL_DMA_IRQHandler+0x30c>
        return;
 800fd42:	bf00      	nop
    }
  }
}
 800fd44:	3718      	adds	r7, #24
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd80      	pop	{r7, pc}
 800fd4a:	bf00      	nop

0800fd4c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800fd4c:	b480      	push	{r7}
 800fd4e:	b083      	sub	sp, #12
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800fd5a:	b2db      	uxtb	r3, r3
}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	370c      	adds	r7, #12
 800fd60:	46bd      	mov	sp, r7
 800fd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd66:	4770      	bx	lr

0800fd68 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800fd68:	b480      	push	{r7}
 800fd6a:	b083      	sub	sp, #12
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800fd74:	4618      	mov	r0, r3
 800fd76:	370c      	adds	r7, #12
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7e:	4770      	bx	lr

0800fd80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800fd80:	b480      	push	{r7}
 800fd82:	b085      	sub	sp, #20
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	60f8      	str	r0, [r7, #12]
 800fd88:	60b9      	str	r1, [r7, #8]
 800fd8a:	607a      	str	r2, [r7, #4]
 800fd8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	681a      	ldr	r2, [r3, #0]
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800fd9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	683a      	ldr	r2, [r7, #0]
 800fda4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	689b      	ldr	r3, [r3, #8]
 800fdaa:	2b40      	cmp	r3, #64	; 0x40
 800fdac:	d108      	bne.n	800fdc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	687a      	ldr	r2, [r7, #4]
 800fdb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	68ba      	ldr	r2, [r7, #8]
 800fdbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800fdbe:	e007      	b.n	800fdd0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	68ba      	ldr	r2, [r7, #8]
 800fdc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	687a      	ldr	r2, [r7, #4]
 800fdce:	60da      	str	r2, [r3, #12]
}
 800fdd0:	bf00      	nop
 800fdd2:	3714      	adds	r7, #20
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdda:	4770      	bx	lr

0800fddc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800fddc:	b480      	push	{r7}
 800fdde:	b085      	sub	sp, #20
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	b2db      	uxtb	r3, r3
 800fdea:	3b10      	subs	r3, #16
 800fdec:	4a14      	ldr	r2, [pc, #80]	; (800fe40 <DMA_CalcBaseAndBitshift+0x64>)
 800fdee:	fba2 2303 	umull	r2, r3, r2, r3
 800fdf2:	091b      	lsrs	r3, r3, #4
 800fdf4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800fdf6:	4a13      	ldr	r2, [pc, #76]	; (800fe44 <DMA_CalcBaseAndBitshift+0x68>)
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	4413      	add	r3, r2
 800fdfc:	781b      	ldrb	r3, [r3, #0]
 800fdfe:	461a      	mov	r2, r3
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	2b03      	cmp	r3, #3
 800fe08:	d909      	bls.n	800fe1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800fe12:	f023 0303 	bic.w	r3, r3, #3
 800fe16:	1d1a      	adds	r2, r3, #4
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	659a      	str	r2, [r3, #88]	; 0x58
 800fe1c:	e007      	b.n	800fe2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800fe26:	f023 0303 	bic.w	r3, r3, #3
 800fe2a:	687a      	ldr	r2, [r7, #4]
 800fe2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800fe32:	4618      	mov	r0, r3
 800fe34:	3714      	adds	r7, #20
 800fe36:	46bd      	mov	sp, r7
 800fe38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3c:	4770      	bx	lr
 800fe3e:	bf00      	nop
 800fe40:	aaaaaaab 	.word	0xaaaaaaab
 800fe44:	08021040 	.word	0x08021040

0800fe48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800fe48:	b480      	push	{r7}
 800fe4a:	b085      	sub	sp, #20
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fe50:	2300      	movs	r3, #0
 800fe52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	699b      	ldr	r3, [r3, #24]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d11f      	bne.n	800fea2 <DMA_CheckFifoParam+0x5a>
 800fe62:	68bb      	ldr	r3, [r7, #8]
 800fe64:	2b03      	cmp	r3, #3
 800fe66:	d856      	bhi.n	800ff16 <DMA_CheckFifoParam+0xce>
 800fe68:	a201      	add	r2, pc, #4	; (adr r2, 800fe70 <DMA_CheckFifoParam+0x28>)
 800fe6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe6e:	bf00      	nop
 800fe70:	0800fe81 	.word	0x0800fe81
 800fe74:	0800fe93 	.word	0x0800fe93
 800fe78:	0800fe81 	.word	0x0800fe81
 800fe7c:	0800ff17 	.word	0x0800ff17
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d046      	beq.n	800ff1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fe90:	e043      	b.n	800ff1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800fe9a:	d140      	bne.n	800ff1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fea0:	e03d      	b.n	800ff1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	699b      	ldr	r3, [r3, #24]
 800fea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800feaa:	d121      	bne.n	800fef0 <DMA_CheckFifoParam+0xa8>
 800feac:	68bb      	ldr	r3, [r7, #8]
 800feae:	2b03      	cmp	r3, #3
 800feb0:	d837      	bhi.n	800ff22 <DMA_CheckFifoParam+0xda>
 800feb2:	a201      	add	r2, pc, #4	; (adr r2, 800feb8 <DMA_CheckFifoParam+0x70>)
 800feb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800feb8:	0800fec9 	.word	0x0800fec9
 800febc:	0800fecf 	.word	0x0800fecf
 800fec0:	0800fec9 	.word	0x0800fec9
 800fec4:	0800fee1 	.word	0x0800fee1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800fec8:	2301      	movs	r3, #1
 800feca:	73fb      	strb	r3, [r7, #15]
      break;
 800fecc:	e030      	b.n	800ff30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fed2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d025      	beq.n	800ff26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800feda:	2301      	movs	r3, #1
 800fedc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fede:	e022      	b.n	800ff26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fee4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800fee8:	d11f      	bne.n	800ff2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800feea:	2301      	movs	r3, #1
 800feec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800feee:	e01c      	b.n	800ff2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800fef0:	68bb      	ldr	r3, [r7, #8]
 800fef2:	2b02      	cmp	r3, #2
 800fef4:	d903      	bls.n	800fefe <DMA_CheckFifoParam+0xb6>
 800fef6:	68bb      	ldr	r3, [r7, #8]
 800fef8:	2b03      	cmp	r3, #3
 800fefa:	d003      	beq.n	800ff04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800fefc:	e018      	b.n	800ff30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800fefe:	2301      	movs	r3, #1
 800ff00:	73fb      	strb	r3, [r7, #15]
      break;
 800ff02:	e015      	b.n	800ff30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d00e      	beq.n	800ff2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800ff10:	2301      	movs	r3, #1
 800ff12:	73fb      	strb	r3, [r7, #15]
      break;
 800ff14:	e00b      	b.n	800ff2e <DMA_CheckFifoParam+0xe6>
      break;
 800ff16:	bf00      	nop
 800ff18:	e00a      	b.n	800ff30 <DMA_CheckFifoParam+0xe8>
      break;
 800ff1a:	bf00      	nop
 800ff1c:	e008      	b.n	800ff30 <DMA_CheckFifoParam+0xe8>
      break;
 800ff1e:	bf00      	nop
 800ff20:	e006      	b.n	800ff30 <DMA_CheckFifoParam+0xe8>
      break;
 800ff22:	bf00      	nop
 800ff24:	e004      	b.n	800ff30 <DMA_CheckFifoParam+0xe8>
      break;
 800ff26:	bf00      	nop
 800ff28:	e002      	b.n	800ff30 <DMA_CheckFifoParam+0xe8>
      break;   
 800ff2a:	bf00      	nop
 800ff2c:	e000      	b.n	800ff30 <DMA_CheckFifoParam+0xe8>
      break;
 800ff2e:	bf00      	nop
    }
  } 
  
  return status; 
 800ff30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff32:	4618      	mov	r0, r3
 800ff34:	3714      	adds	r7, #20
 800ff36:	46bd      	mov	sp, r7
 800ff38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3c:	4770      	bx	lr
 800ff3e:	bf00      	nop

0800ff40 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b086      	sub	sp, #24
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	60f8      	str	r0, [r7, #12]
 800ff48:	60b9      	str	r1, [r7, #8]
 800ff4a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ff4e:	2301      	movs	r3, #1
 800ff50:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ff52:	4b23      	ldr	r3, [pc, #140]	; (800ffe0 <HAL_FLASH_Program+0xa0>)
 800ff54:	7e1b      	ldrb	r3, [r3, #24]
 800ff56:	2b01      	cmp	r3, #1
 800ff58:	d101      	bne.n	800ff5e <HAL_FLASH_Program+0x1e>
 800ff5a:	2302      	movs	r3, #2
 800ff5c:	e03b      	b.n	800ffd6 <HAL_FLASH_Program+0x96>
 800ff5e:	4b20      	ldr	r3, [pc, #128]	; (800ffe0 <HAL_FLASH_Program+0xa0>)
 800ff60:	2201      	movs	r2, #1
 800ff62:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ff64:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ff68:	f000 f87c 	bl	8010064 <FLASH_WaitForLastOperation>
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800ff70:	7dfb      	ldrb	r3, [r7, #23]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d12b      	bne.n	800ffce <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d105      	bne.n	800ff88 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800ff7c:	783b      	ldrb	r3, [r7, #0]
 800ff7e:	4619      	mov	r1, r3
 800ff80:	68b8      	ldr	r0, [r7, #8]
 800ff82:	f000 f927 	bl	80101d4 <FLASH_Program_Byte>
 800ff86:	e016      	b.n	800ffb6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	2b01      	cmp	r3, #1
 800ff8c:	d105      	bne.n	800ff9a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800ff8e:	883b      	ldrh	r3, [r7, #0]
 800ff90:	4619      	mov	r1, r3
 800ff92:	68b8      	ldr	r0, [r7, #8]
 800ff94:	f000 f8fa 	bl	801018c <FLASH_Program_HalfWord>
 800ff98:	e00d      	b.n	800ffb6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	2b02      	cmp	r3, #2
 800ff9e:	d105      	bne.n	800ffac <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	4619      	mov	r1, r3
 800ffa4:	68b8      	ldr	r0, [r7, #8]
 800ffa6:	f000 f8cf 	bl	8010148 <FLASH_Program_Word>
 800ffaa:	e004      	b.n	800ffb6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800ffac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ffb0:	68b8      	ldr	r0, [r7, #8]
 800ffb2:	f000 f897 	bl	80100e4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ffb6:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ffba:	f000 f853 	bl	8010064 <FLASH_WaitForLastOperation>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800ffc2:	4b08      	ldr	r3, [pc, #32]	; (800ffe4 <HAL_FLASH_Program+0xa4>)
 800ffc4:	691b      	ldr	r3, [r3, #16]
 800ffc6:	4a07      	ldr	r2, [pc, #28]	; (800ffe4 <HAL_FLASH_Program+0xa4>)
 800ffc8:	f023 0301 	bic.w	r3, r3, #1
 800ffcc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ffce:	4b04      	ldr	r3, [pc, #16]	; (800ffe0 <HAL_FLASH_Program+0xa0>)
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	761a      	strb	r2, [r3, #24]
  
  return status;
 800ffd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	3718      	adds	r7, #24
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	bd80      	pop	{r7, pc}
 800ffde:	bf00      	nop
 800ffe0:	2000a518 	.word	0x2000a518
 800ffe4:	40023c00 	.word	0x40023c00

0800ffe8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800ffe8:	b480      	push	{r7}
 800ffea:	b083      	sub	sp, #12
 800ffec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800ffee:	2300      	movs	r3, #0
 800fff0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800fff2:	4b0b      	ldr	r3, [pc, #44]	; (8010020 <HAL_FLASH_Unlock+0x38>)
 800fff4:	691b      	ldr	r3, [r3, #16]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	da0b      	bge.n	8010012 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800fffa:	4b09      	ldr	r3, [pc, #36]	; (8010020 <HAL_FLASH_Unlock+0x38>)
 800fffc:	4a09      	ldr	r2, [pc, #36]	; (8010024 <HAL_FLASH_Unlock+0x3c>)
 800fffe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8010000:	4b07      	ldr	r3, [pc, #28]	; (8010020 <HAL_FLASH_Unlock+0x38>)
 8010002:	4a09      	ldr	r2, [pc, #36]	; (8010028 <HAL_FLASH_Unlock+0x40>)
 8010004:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8010006:	4b06      	ldr	r3, [pc, #24]	; (8010020 <HAL_FLASH_Unlock+0x38>)
 8010008:	691b      	ldr	r3, [r3, #16]
 801000a:	2b00      	cmp	r3, #0
 801000c:	da01      	bge.n	8010012 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801000e:	2301      	movs	r3, #1
 8010010:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8010012:	79fb      	ldrb	r3, [r7, #7]
}
 8010014:	4618      	mov	r0, r3
 8010016:	370c      	adds	r7, #12
 8010018:	46bd      	mov	sp, r7
 801001a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001e:	4770      	bx	lr
 8010020:	40023c00 	.word	0x40023c00
 8010024:	45670123 	.word	0x45670123
 8010028:	cdef89ab 	.word	0xcdef89ab

0801002c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801002c:	b480      	push	{r7}
 801002e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8010030:	4b05      	ldr	r3, [pc, #20]	; (8010048 <HAL_FLASH_Lock+0x1c>)
 8010032:	691b      	ldr	r3, [r3, #16]
 8010034:	4a04      	ldr	r2, [pc, #16]	; (8010048 <HAL_FLASH_Lock+0x1c>)
 8010036:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801003a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 801003c:	2300      	movs	r3, #0
}
 801003e:	4618      	mov	r0, r3
 8010040:	46bd      	mov	sp, r7
 8010042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010046:	4770      	bx	lr
 8010048:	40023c00 	.word	0x40023c00

0801004c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 801004c:	b480      	push	{r7}
 801004e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8010050:	4b03      	ldr	r3, [pc, #12]	; (8010060 <HAL_FLASH_GetError+0x14>)
 8010052:	69db      	ldr	r3, [r3, #28]
}  
 8010054:	4618      	mov	r0, r3
 8010056:	46bd      	mov	sp, r7
 8010058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005c:	4770      	bx	lr
 801005e:	bf00      	nop
 8010060:	2000a518 	.word	0x2000a518

08010064 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8010064:	b580      	push	{r7, lr}
 8010066:	b084      	sub	sp, #16
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801006c:	2300      	movs	r3, #0
 801006e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010070:	4b1a      	ldr	r3, [pc, #104]	; (80100dc <FLASH_WaitForLastOperation+0x78>)
 8010072:	2200      	movs	r2, #0
 8010074:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8010076:	f7fe fb5b 	bl	800e730 <HAL_GetTick>
 801007a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 801007c:	e010      	b.n	80100a0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010084:	d00c      	beq.n	80100a0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d007      	beq.n	801009c <FLASH_WaitForLastOperation+0x38>
 801008c:	f7fe fb50 	bl	800e730 <HAL_GetTick>
 8010090:	4602      	mov	r2, r0
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	1ad3      	subs	r3, r2, r3
 8010096:	687a      	ldr	r2, [r7, #4]
 8010098:	429a      	cmp	r2, r3
 801009a:	d201      	bcs.n	80100a0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 801009c:	2303      	movs	r3, #3
 801009e:	e019      	b.n	80100d4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80100a0:	4b0f      	ldr	r3, [pc, #60]	; (80100e0 <FLASH_WaitForLastOperation+0x7c>)
 80100a2:	68db      	ldr	r3, [r3, #12]
 80100a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d1e8      	bne.n	801007e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80100ac:	4b0c      	ldr	r3, [pc, #48]	; (80100e0 <FLASH_WaitForLastOperation+0x7c>)
 80100ae:	68db      	ldr	r3, [r3, #12]
 80100b0:	f003 0301 	and.w	r3, r3, #1
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d002      	beq.n	80100be <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80100b8:	4b09      	ldr	r3, [pc, #36]	; (80100e0 <FLASH_WaitForLastOperation+0x7c>)
 80100ba:	2201      	movs	r2, #1
 80100bc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80100be:	4b08      	ldr	r3, [pc, #32]	; (80100e0 <FLASH_WaitForLastOperation+0x7c>)
 80100c0:	68db      	ldr	r3, [r3, #12]
 80100c2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d003      	beq.n	80100d2 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80100ca:	f000 f8a5 	bl	8010218 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80100ce:	2301      	movs	r3, #1
 80100d0:	e000      	b.n	80100d4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80100d2:	2300      	movs	r3, #0
  
}  
 80100d4:	4618      	mov	r0, r3
 80100d6:	3710      	adds	r7, #16
 80100d8:	46bd      	mov	sp, r7
 80100da:	bd80      	pop	{r7, pc}
 80100dc:	2000a518 	.word	0x2000a518
 80100e0:	40023c00 	.word	0x40023c00

080100e4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80100e4:	b480      	push	{r7}
 80100e6:	b085      	sub	sp, #20
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	60f8      	str	r0, [r7, #12]
 80100ec:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80100f0:	4b14      	ldr	r3, [pc, #80]	; (8010144 <FLASH_Program_DoubleWord+0x60>)
 80100f2:	691b      	ldr	r3, [r3, #16]
 80100f4:	4a13      	ldr	r2, [pc, #76]	; (8010144 <FLASH_Program_DoubleWord+0x60>)
 80100f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80100fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80100fc:	4b11      	ldr	r3, [pc, #68]	; (8010144 <FLASH_Program_DoubleWord+0x60>)
 80100fe:	691b      	ldr	r3, [r3, #16]
 8010100:	4a10      	ldr	r2, [pc, #64]	; (8010144 <FLASH_Program_DoubleWord+0x60>)
 8010102:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8010106:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8010108:	4b0e      	ldr	r3, [pc, #56]	; (8010144 <FLASH_Program_DoubleWord+0x60>)
 801010a:	691b      	ldr	r3, [r3, #16]
 801010c:	4a0d      	ldr	r2, [pc, #52]	; (8010144 <FLASH_Program_DoubleWord+0x60>)
 801010e:	f043 0301 	orr.w	r3, r3, #1
 8010112:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	683a      	ldr	r2, [r7, #0]
 8010118:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 801011a:	f3bf 8f6f 	isb	sy
}
 801011e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8010120:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010124:	f04f 0200 	mov.w	r2, #0
 8010128:	f04f 0300 	mov.w	r3, #0
 801012c:	000a      	movs	r2, r1
 801012e:	2300      	movs	r3, #0
 8010130:	68f9      	ldr	r1, [r7, #12]
 8010132:	3104      	adds	r1, #4
 8010134:	4613      	mov	r3, r2
 8010136:	600b      	str	r3, [r1, #0]
}
 8010138:	bf00      	nop
 801013a:	3714      	adds	r7, #20
 801013c:	46bd      	mov	sp, r7
 801013e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010142:	4770      	bx	lr
 8010144:	40023c00 	.word	0x40023c00

08010148 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8010148:	b480      	push	{r7}
 801014a:	b083      	sub	sp, #12
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
 8010150:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8010152:	4b0d      	ldr	r3, [pc, #52]	; (8010188 <FLASH_Program_Word+0x40>)
 8010154:	691b      	ldr	r3, [r3, #16]
 8010156:	4a0c      	ldr	r2, [pc, #48]	; (8010188 <FLASH_Program_Word+0x40>)
 8010158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801015c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 801015e:	4b0a      	ldr	r3, [pc, #40]	; (8010188 <FLASH_Program_Word+0x40>)
 8010160:	691b      	ldr	r3, [r3, #16]
 8010162:	4a09      	ldr	r2, [pc, #36]	; (8010188 <FLASH_Program_Word+0x40>)
 8010164:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010168:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801016a:	4b07      	ldr	r3, [pc, #28]	; (8010188 <FLASH_Program_Word+0x40>)
 801016c:	691b      	ldr	r3, [r3, #16]
 801016e:	4a06      	ldr	r2, [pc, #24]	; (8010188 <FLASH_Program_Word+0x40>)
 8010170:	f043 0301 	orr.w	r3, r3, #1
 8010174:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	683a      	ldr	r2, [r7, #0]
 801017a:	601a      	str	r2, [r3, #0]
}
 801017c:	bf00      	nop
 801017e:	370c      	adds	r7, #12
 8010180:	46bd      	mov	sp, r7
 8010182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010186:	4770      	bx	lr
 8010188:	40023c00 	.word	0x40023c00

0801018c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 801018c:	b480      	push	{r7}
 801018e:	b083      	sub	sp, #12
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
 8010194:	460b      	mov	r3, r1
 8010196:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8010198:	4b0d      	ldr	r3, [pc, #52]	; (80101d0 <FLASH_Program_HalfWord+0x44>)
 801019a:	691b      	ldr	r3, [r3, #16]
 801019c:	4a0c      	ldr	r2, [pc, #48]	; (80101d0 <FLASH_Program_HalfWord+0x44>)
 801019e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80101a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80101a4:	4b0a      	ldr	r3, [pc, #40]	; (80101d0 <FLASH_Program_HalfWord+0x44>)
 80101a6:	691b      	ldr	r3, [r3, #16]
 80101a8:	4a09      	ldr	r2, [pc, #36]	; (80101d0 <FLASH_Program_HalfWord+0x44>)
 80101aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80101ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80101b0:	4b07      	ldr	r3, [pc, #28]	; (80101d0 <FLASH_Program_HalfWord+0x44>)
 80101b2:	691b      	ldr	r3, [r3, #16]
 80101b4:	4a06      	ldr	r2, [pc, #24]	; (80101d0 <FLASH_Program_HalfWord+0x44>)
 80101b6:	f043 0301 	orr.w	r3, r3, #1
 80101ba:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	887a      	ldrh	r2, [r7, #2]
 80101c0:	801a      	strh	r2, [r3, #0]
}
 80101c2:	bf00      	nop
 80101c4:	370c      	adds	r7, #12
 80101c6:	46bd      	mov	sp, r7
 80101c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101cc:	4770      	bx	lr
 80101ce:	bf00      	nop
 80101d0:	40023c00 	.word	0x40023c00

080101d4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80101d4:	b480      	push	{r7}
 80101d6:	b083      	sub	sp, #12
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
 80101dc:	460b      	mov	r3, r1
 80101de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80101e0:	4b0c      	ldr	r3, [pc, #48]	; (8010214 <FLASH_Program_Byte+0x40>)
 80101e2:	691b      	ldr	r3, [r3, #16]
 80101e4:	4a0b      	ldr	r2, [pc, #44]	; (8010214 <FLASH_Program_Byte+0x40>)
 80101e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80101ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80101ec:	4b09      	ldr	r3, [pc, #36]	; (8010214 <FLASH_Program_Byte+0x40>)
 80101ee:	4a09      	ldr	r2, [pc, #36]	; (8010214 <FLASH_Program_Byte+0x40>)
 80101f0:	691b      	ldr	r3, [r3, #16]
 80101f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80101f4:	4b07      	ldr	r3, [pc, #28]	; (8010214 <FLASH_Program_Byte+0x40>)
 80101f6:	691b      	ldr	r3, [r3, #16]
 80101f8:	4a06      	ldr	r2, [pc, #24]	; (8010214 <FLASH_Program_Byte+0x40>)
 80101fa:	f043 0301 	orr.w	r3, r3, #1
 80101fe:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	78fa      	ldrb	r2, [r7, #3]
 8010204:	701a      	strb	r2, [r3, #0]
}
 8010206:	bf00      	nop
 8010208:	370c      	adds	r7, #12
 801020a:	46bd      	mov	sp, r7
 801020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010210:	4770      	bx	lr
 8010212:	bf00      	nop
 8010214:	40023c00 	.word	0x40023c00

08010218 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8010218:	b480      	push	{r7}
 801021a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 801021c:	4b27      	ldr	r3, [pc, #156]	; (80102bc <FLASH_SetErrorCode+0xa4>)
 801021e:	68db      	ldr	r3, [r3, #12]
 8010220:	f003 0310 	and.w	r3, r3, #16
 8010224:	2b00      	cmp	r3, #0
 8010226:	d008      	beq.n	801023a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8010228:	4b25      	ldr	r3, [pc, #148]	; (80102c0 <FLASH_SetErrorCode+0xa8>)
 801022a:	69db      	ldr	r3, [r3, #28]
 801022c:	f043 0310 	orr.w	r3, r3, #16
 8010230:	4a23      	ldr	r2, [pc, #140]	; (80102c0 <FLASH_SetErrorCode+0xa8>)
 8010232:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8010234:	4b21      	ldr	r3, [pc, #132]	; (80102bc <FLASH_SetErrorCode+0xa4>)
 8010236:	2210      	movs	r2, #16
 8010238:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 801023a:	4b20      	ldr	r3, [pc, #128]	; (80102bc <FLASH_SetErrorCode+0xa4>)
 801023c:	68db      	ldr	r3, [r3, #12]
 801023e:	f003 0320 	and.w	r3, r3, #32
 8010242:	2b00      	cmp	r3, #0
 8010244:	d008      	beq.n	8010258 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8010246:	4b1e      	ldr	r3, [pc, #120]	; (80102c0 <FLASH_SetErrorCode+0xa8>)
 8010248:	69db      	ldr	r3, [r3, #28]
 801024a:	f043 0308 	orr.w	r3, r3, #8
 801024e:	4a1c      	ldr	r2, [pc, #112]	; (80102c0 <FLASH_SetErrorCode+0xa8>)
 8010250:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8010252:	4b1a      	ldr	r3, [pc, #104]	; (80102bc <FLASH_SetErrorCode+0xa4>)
 8010254:	2220      	movs	r2, #32
 8010256:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8010258:	4b18      	ldr	r3, [pc, #96]	; (80102bc <FLASH_SetErrorCode+0xa4>)
 801025a:	68db      	ldr	r3, [r3, #12]
 801025c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010260:	2b00      	cmp	r3, #0
 8010262:	d008      	beq.n	8010276 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8010264:	4b16      	ldr	r3, [pc, #88]	; (80102c0 <FLASH_SetErrorCode+0xa8>)
 8010266:	69db      	ldr	r3, [r3, #28]
 8010268:	f043 0304 	orr.w	r3, r3, #4
 801026c:	4a14      	ldr	r2, [pc, #80]	; (80102c0 <FLASH_SetErrorCode+0xa8>)
 801026e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8010270:	4b12      	ldr	r3, [pc, #72]	; (80102bc <FLASH_SetErrorCode+0xa4>)
 8010272:	2240      	movs	r2, #64	; 0x40
 8010274:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8010276:	4b11      	ldr	r3, [pc, #68]	; (80102bc <FLASH_SetErrorCode+0xa4>)
 8010278:	68db      	ldr	r3, [r3, #12]
 801027a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801027e:	2b00      	cmp	r3, #0
 8010280:	d008      	beq.n	8010294 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8010282:	4b0f      	ldr	r3, [pc, #60]	; (80102c0 <FLASH_SetErrorCode+0xa8>)
 8010284:	69db      	ldr	r3, [r3, #28]
 8010286:	f043 0302 	orr.w	r3, r3, #2
 801028a:	4a0d      	ldr	r2, [pc, #52]	; (80102c0 <FLASH_SetErrorCode+0xa8>)
 801028c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 801028e:	4b0b      	ldr	r3, [pc, #44]	; (80102bc <FLASH_SetErrorCode+0xa4>)
 8010290:	2280      	movs	r2, #128	; 0x80
 8010292:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8010294:	4b09      	ldr	r3, [pc, #36]	; (80102bc <FLASH_SetErrorCode+0xa4>)
 8010296:	68db      	ldr	r3, [r3, #12]
 8010298:	f003 0302 	and.w	r3, r3, #2
 801029c:	2b00      	cmp	r3, #0
 801029e:	d008      	beq.n	80102b2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80102a0:	4b07      	ldr	r3, [pc, #28]	; (80102c0 <FLASH_SetErrorCode+0xa8>)
 80102a2:	69db      	ldr	r3, [r3, #28]
 80102a4:	f043 0320 	orr.w	r3, r3, #32
 80102a8:	4a05      	ldr	r2, [pc, #20]	; (80102c0 <FLASH_SetErrorCode+0xa8>)
 80102aa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80102ac:	4b03      	ldr	r3, [pc, #12]	; (80102bc <FLASH_SetErrorCode+0xa4>)
 80102ae:	2202      	movs	r2, #2
 80102b0:	60da      	str	r2, [r3, #12]
  }
}
 80102b2:	bf00      	nop
 80102b4:	46bd      	mov	sp, r7
 80102b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ba:	4770      	bx	lr
 80102bc:	40023c00 	.word	0x40023c00
 80102c0:	2000a518 	.word	0x2000a518

080102c4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b084      	sub	sp, #16
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
 80102cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80102ce:	2301      	movs	r3, #1
 80102d0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80102d2:	2300      	movs	r3, #0
 80102d4:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80102d6:	4b31      	ldr	r3, [pc, #196]	; (801039c <HAL_FLASHEx_Erase+0xd8>)
 80102d8:	7e1b      	ldrb	r3, [r3, #24]
 80102da:	2b01      	cmp	r3, #1
 80102dc:	d101      	bne.n	80102e2 <HAL_FLASHEx_Erase+0x1e>
 80102de:	2302      	movs	r3, #2
 80102e0:	e058      	b.n	8010394 <HAL_FLASHEx_Erase+0xd0>
 80102e2:	4b2e      	ldr	r3, [pc, #184]	; (801039c <HAL_FLASHEx_Erase+0xd8>)
 80102e4:	2201      	movs	r2, #1
 80102e6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80102e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80102ec:	f7ff feba 	bl	8010064 <FLASH_WaitForLastOperation>
 80102f0:	4603      	mov	r3, r0
 80102f2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80102f4:	7bfb      	ldrb	r3, [r7, #15]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d148      	bne.n	801038c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010300:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	2b01      	cmp	r3, #1
 8010308:	d115      	bne.n	8010336 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	691b      	ldr	r3, [r3, #16]
 801030e:	b2da      	uxtb	r2, r3
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	685b      	ldr	r3, [r3, #4]
 8010314:	4619      	mov	r1, r3
 8010316:	4610      	mov	r0, r2
 8010318:	f000 f844 	bl	80103a4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801031c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010320:	f7ff fea0 	bl	8010064 <FLASH_WaitForLastOperation>
 8010324:	4603      	mov	r3, r0
 8010326:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8010328:	4b1d      	ldr	r3, [pc, #116]	; (80103a0 <HAL_FLASHEx_Erase+0xdc>)
 801032a:	691b      	ldr	r3, [r3, #16]
 801032c:	4a1c      	ldr	r2, [pc, #112]	; (80103a0 <HAL_FLASHEx_Erase+0xdc>)
 801032e:	f023 0304 	bic.w	r3, r3, #4
 8010332:	6113      	str	r3, [r2, #16]
 8010334:	e028      	b.n	8010388 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	689b      	ldr	r3, [r3, #8]
 801033a:	60bb      	str	r3, [r7, #8]
 801033c:	e01c      	b.n	8010378 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	691b      	ldr	r3, [r3, #16]
 8010342:	b2db      	uxtb	r3, r3
 8010344:	4619      	mov	r1, r3
 8010346:	68b8      	ldr	r0, [r7, #8]
 8010348:	f000 f850 	bl	80103ec <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801034c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010350:	f7ff fe88 	bl	8010064 <FLASH_WaitForLastOperation>
 8010354:	4603      	mov	r3, r0
 8010356:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8010358:	4b11      	ldr	r3, [pc, #68]	; (80103a0 <HAL_FLASHEx_Erase+0xdc>)
 801035a:	691b      	ldr	r3, [r3, #16]
 801035c:	4a10      	ldr	r2, [pc, #64]	; (80103a0 <HAL_FLASHEx_Erase+0xdc>)
 801035e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8010362:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8010364:	7bfb      	ldrb	r3, [r7, #15]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d003      	beq.n	8010372 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	68ba      	ldr	r2, [r7, #8]
 801036e:	601a      	str	r2, [r3, #0]
          break;
 8010370:	e00a      	b.n	8010388 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	3301      	adds	r3, #1
 8010376:	60bb      	str	r3, [r7, #8]
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	68da      	ldr	r2, [r3, #12]
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	689b      	ldr	r3, [r3, #8]
 8010380:	4413      	add	r3, r2
 8010382:	68ba      	ldr	r2, [r7, #8]
 8010384:	429a      	cmp	r2, r3
 8010386:	d3da      	bcc.n	801033e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8010388:	f000 f878 	bl	801047c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801038c:	4b03      	ldr	r3, [pc, #12]	; (801039c <HAL_FLASHEx_Erase+0xd8>)
 801038e:	2200      	movs	r2, #0
 8010390:	761a      	strb	r2, [r3, #24]

  return status;
 8010392:	7bfb      	ldrb	r3, [r7, #15]
}
 8010394:	4618      	mov	r0, r3
 8010396:	3710      	adds	r7, #16
 8010398:	46bd      	mov	sp, r7
 801039a:	bd80      	pop	{r7, pc}
 801039c:	2000a518 	.word	0x2000a518
 80103a0:	40023c00 	.word	0x40023c00

080103a4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80103a4:	b480      	push	{r7}
 80103a6:	b083      	sub	sp, #12
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	4603      	mov	r3, r0
 80103ac:	6039      	str	r1, [r7, #0]
 80103ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80103b0:	4b0d      	ldr	r3, [pc, #52]	; (80103e8 <FLASH_MassErase+0x44>)
 80103b2:	691b      	ldr	r3, [r3, #16]
 80103b4:	4a0c      	ldr	r2, [pc, #48]	; (80103e8 <FLASH_MassErase+0x44>)
 80103b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80103ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80103bc:	4b0a      	ldr	r3, [pc, #40]	; (80103e8 <FLASH_MassErase+0x44>)
 80103be:	691b      	ldr	r3, [r3, #16]
 80103c0:	4a09      	ldr	r2, [pc, #36]	; (80103e8 <FLASH_MassErase+0x44>)
 80103c2:	f043 0304 	orr.w	r3, r3, #4
 80103c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80103c8:	4b07      	ldr	r3, [pc, #28]	; (80103e8 <FLASH_MassErase+0x44>)
 80103ca:	691a      	ldr	r2, [r3, #16]
 80103cc:	79fb      	ldrb	r3, [r7, #7]
 80103ce:	021b      	lsls	r3, r3, #8
 80103d0:	4313      	orrs	r3, r2
 80103d2:	4a05      	ldr	r2, [pc, #20]	; (80103e8 <FLASH_MassErase+0x44>)
 80103d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80103d8:	6113      	str	r3, [r2, #16]
}
 80103da:	bf00      	nop
 80103dc:	370c      	adds	r7, #12
 80103de:	46bd      	mov	sp, r7
 80103e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e4:	4770      	bx	lr
 80103e6:	bf00      	nop
 80103e8:	40023c00 	.word	0x40023c00

080103ec <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80103ec:	b480      	push	{r7}
 80103ee:	b085      	sub	sp, #20
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
 80103f4:	460b      	mov	r3, r1
 80103f6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80103f8:	2300      	movs	r3, #0
 80103fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80103fc:	78fb      	ldrb	r3, [r7, #3]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d102      	bne.n	8010408 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8010402:	2300      	movs	r3, #0
 8010404:	60fb      	str	r3, [r7, #12]
 8010406:	e010      	b.n	801042a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8010408:	78fb      	ldrb	r3, [r7, #3]
 801040a:	2b01      	cmp	r3, #1
 801040c:	d103      	bne.n	8010416 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 801040e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010412:	60fb      	str	r3, [r7, #12]
 8010414:	e009      	b.n	801042a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8010416:	78fb      	ldrb	r3, [r7, #3]
 8010418:	2b02      	cmp	r3, #2
 801041a:	d103      	bne.n	8010424 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 801041c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010420:	60fb      	str	r3, [r7, #12]
 8010422:	e002      	b.n	801042a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8010424:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010428:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801042a:	4b13      	ldr	r3, [pc, #76]	; (8010478 <FLASH_Erase_Sector+0x8c>)
 801042c:	691b      	ldr	r3, [r3, #16]
 801042e:	4a12      	ldr	r2, [pc, #72]	; (8010478 <FLASH_Erase_Sector+0x8c>)
 8010430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010434:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8010436:	4b10      	ldr	r3, [pc, #64]	; (8010478 <FLASH_Erase_Sector+0x8c>)
 8010438:	691a      	ldr	r2, [r3, #16]
 801043a:	490f      	ldr	r1, [pc, #60]	; (8010478 <FLASH_Erase_Sector+0x8c>)
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	4313      	orrs	r3, r2
 8010440:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8010442:	4b0d      	ldr	r3, [pc, #52]	; (8010478 <FLASH_Erase_Sector+0x8c>)
 8010444:	691b      	ldr	r3, [r3, #16]
 8010446:	4a0c      	ldr	r2, [pc, #48]	; (8010478 <FLASH_Erase_Sector+0x8c>)
 8010448:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 801044c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 801044e:	4b0a      	ldr	r3, [pc, #40]	; (8010478 <FLASH_Erase_Sector+0x8c>)
 8010450:	691a      	ldr	r2, [r3, #16]
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	00db      	lsls	r3, r3, #3
 8010456:	4313      	orrs	r3, r2
 8010458:	4a07      	ldr	r2, [pc, #28]	; (8010478 <FLASH_Erase_Sector+0x8c>)
 801045a:	f043 0302 	orr.w	r3, r3, #2
 801045e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8010460:	4b05      	ldr	r3, [pc, #20]	; (8010478 <FLASH_Erase_Sector+0x8c>)
 8010462:	691b      	ldr	r3, [r3, #16]
 8010464:	4a04      	ldr	r2, [pc, #16]	; (8010478 <FLASH_Erase_Sector+0x8c>)
 8010466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801046a:	6113      	str	r3, [r2, #16]
}
 801046c:	bf00      	nop
 801046e:	3714      	adds	r7, #20
 8010470:	46bd      	mov	sp, r7
 8010472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010476:	4770      	bx	lr
 8010478:	40023c00 	.word	0x40023c00

0801047c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 801047c:	b480      	push	{r7}
 801047e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8010480:	4b20      	ldr	r3, [pc, #128]	; (8010504 <FLASH_FlushCaches+0x88>)
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010488:	2b00      	cmp	r3, #0
 801048a:	d017      	beq.n	80104bc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 801048c:	4b1d      	ldr	r3, [pc, #116]	; (8010504 <FLASH_FlushCaches+0x88>)
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	4a1c      	ldr	r2, [pc, #112]	; (8010504 <FLASH_FlushCaches+0x88>)
 8010492:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010496:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8010498:	4b1a      	ldr	r3, [pc, #104]	; (8010504 <FLASH_FlushCaches+0x88>)
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	4a19      	ldr	r2, [pc, #100]	; (8010504 <FLASH_FlushCaches+0x88>)
 801049e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80104a2:	6013      	str	r3, [r2, #0]
 80104a4:	4b17      	ldr	r3, [pc, #92]	; (8010504 <FLASH_FlushCaches+0x88>)
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	4a16      	ldr	r2, [pc, #88]	; (8010504 <FLASH_FlushCaches+0x88>)
 80104aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80104ae:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80104b0:	4b14      	ldr	r3, [pc, #80]	; (8010504 <FLASH_FlushCaches+0x88>)
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	4a13      	ldr	r2, [pc, #76]	; (8010504 <FLASH_FlushCaches+0x88>)
 80104b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80104ba:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80104bc:	4b11      	ldr	r3, [pc, #68]	; (8010504 <FLASH_FlushCaches+0x88>)
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d017      	beq.n	80104f8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80104c8:	4b0e      	ldr	r3, [pc, #56]	; (8010504 <FLASH_FlushCaches+0x88>)
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	4a0d      	ldr	r2, [pc, #52]	; (8010504 <FLASH_FlushCaches+0x88>)
 80104ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80104d2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80104d4:	4b0b      	ldr	r3, [pc, #44]	; (8010504 <FLASH_FlushCaches+0x88>)
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	4a0a      	ldr	r2, [pc, #40]	; (8010504 <FLASH_FlushCaches+0x88>)
 80104da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80104de:	6013      	str	r3, [r2, #0]
 80104e0:	4b08      	ldr	r3, [pc, #32]	; (8010504 <FLASH_FlushCaches+0x88>)
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	4a07      	ldr	r2, [pc, #28]	; (8010504 <FLASH_FlushCaches+0x88>)
 80104e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80104ea:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80104ec:	4b05      	ldr	r3, [pc, #20]	; (8010504 <FLASH_FlushCaches+0x88>)
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	4a04      	ldr	r2, [pc, #16]	; (8010504 <FLASH_FlushCaches+0x88>)
 80104f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80104f6:	6013      	str	r3, [r2, #0]
  }
}
 80104f8:	bf00      	nop
 80104fa:	46bd      	mov	sp, r7
 80104fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010500:	4770      	bx	lr
 8010502:	bf00      	nop
 8010504:	40023c00 	.word	0x40023c00

08010508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010508:	b480      	push	{r7}
 801050a:	b089      	sub	sp, #36	; 0x24
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8010512:	2300      	movs	r3, #0
 8010514:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8010516:	2300      	movs	r3, #0
 8010518:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801051a:	2300      	movs	r3, #0
 801051c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801051e:	2300      	movs	r3, #0
 8010520:	61fb      	str	r3, [r7, #28]
 8010522:	e16b      	b.n	80107fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8010524:	2201      	movs	r2, #1
 8010526:	69fb      	ldr	r3, [r7, #28]
 8010528:	fa02 f303 	lsl.w	r3, r2, r3
 801052c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	697a      	ldr	r2, [r7, #20]
 8010534:	4013      	ands	r3, r2
 8010536:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8010538:	693a      	ldr	r2, [r7, #16]
 801053a:	697b      	ldr	r3, [r7, #20]
 801053c:	429a      	cmp	r2, r3
 801053e:	f040 815a 	bne.w	80107f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	685b      	ldr	r3, [r3, #4]
 8010546:	2b01      	cmp	r3, #1
 8010548:	d00b      	beq.n	8010562 <HAL_GPIO_Init+0x5a>
 801054a:	683b      	ldr	r3, [r7, #0]
 801054c:	685b      	ldr	r3, [r3, #4]
 801054e:	2b02      	cmp	r3, #2
 8010550:	d007      	beq.n	8010562 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010556:	2b11      	cmp	r3, #17
 8010558:	d003      	beq.n	8010562 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	685b      	ldr	r3, [r3, #4]
 801055e:	2b12      	cmp	r3, #18
 8010560:	d130      	bne.n	80105c4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	689b      	ldr	r3, [r3, #8]
 8010566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8010568:	69fb      	ldr	r3, [r7, #28]
 801056a:	005b      	lsls	r3, r3, #1
 801056c:	2203      	movs	r2, #3
 801056e:	fa02 f303 	lsl.w	r3, r2, r3
 8010572:	43db      	mvns	r3, r3
 8010574:	69ba      	ldr	r2, [r7, #24]
 8010576:	4013      	ands	r3, r2
 8010578:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801057a:	683b      	ldr	r3, [r7, #0]
 801057c:	68da      	ldr	r2, [r3, #12]
 801057e:	69fb      	ldr	r3, [r7, #28]
 8010580:	005b      	lsls	r3, r3, #1
 8010582:	fa02 f303 	lsl.w	r3, r2, r3
 8010586:	69ba      	ldr	r2, [r7, #24]
 8010588:	4313      	orrs	r3, r2
 801058a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	69ba      	ldr	r2, [r7, #24]
 8010590:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	685b      	ldr	r3, [r3, #4]
 8010596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010598:	2201      	movs	r2, #1
 801059a:	69fb      	ldr	r3, [r7, #28]
 801059c:	fa02 f303 	lsl.w	r3, r2, r3
 80105a0:	43db      	mvns	r3, r3
 80105a2:	69ba      	ldr	r2, [r7, #24]
 80105a4:	4013      	ands	r3, r2
 80105a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80105a8:	683b      	ldr	r3, [r7, #0]
 80105aa:	685b      	ldr	r3, [r3, #4]
 80105ac:	091b      	lsrs	r3, r3, #4
 80105ae:	f003 0201 	and.w	r2, r3, #1
 80105b2:	69fb      	ldr	r3, [r7, #28]
 80105b4:	fa02 f303 	lsl.w	r3, r2, r3
 80105b8:	69ba      	ldr	r2, [r7, #24]
 80105ba:	4313      	orrs	r3, r2
 80105bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	69ba      	ldr	r2, [r7, #24]
 80105c2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	68db      	ldr	r3, [r3, #12]
 80105c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80105ca:	69fb      	ldr	r3, [r7, #28]
 80105cc:	005b      	lsls	r3, r3, #1
 80105ce:	2203      	movs	r2, #3
 80105d0:	fa02 f303 	lsl.w	r3, r2, r3
 80105d4:	43db      	mvns	r3, r3
 80105d6:	69ba      	ldr	r2, [r7, #24]
 80105d8:	4013      	ands	r3, r2
 80105da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	689a      	ldr	r2, [r3, #8]
 80105e0:	69fb      	ldr	r3, [r7, #28]
 80105e2:	005b      	lsls	r3, r3, #1
 80105e4:	fa02 f303 	lsl.w	r3, r2, r3
 80105e8:	69ba      	ldr	r2, [r7, #24]
 80105ea:	4313      	orrs	r3, r2
 80105ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	69ba      	ldr	r2, [r7, #24]
 80105f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	685b      	ldr	r3, [r3, #4]
 80105f8:	2b02      	cmp	r3, #2
 80105fa:	d003      	beq.n	8010604 <HAL_GPIO_Init+0xfc>
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	685b      	ldr	r3, [r3, #4]
 8010600:	2b12      	cmp	r3, #18
 8010602:	d123      	bne.n	801064c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8010604:	69fb      	ldr	r3, [r7, #28]
 8010606:	08da      	lsrs	r2, r3, #3
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	3208      	adds	r2, #8
 801060c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010610:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8010612:	69fb      	ldr	r3, [r7, #28]
 8010614:	f003 0307 	and.w	r3, r3, #7
 8010618:	009b      	lsls	r3, r3, #2
 801061a:	220f      	movs	r2, #15
 801061c:	fa02 f303 	lsl.w	r3, r2, r3
 8010620:	43db      	mvns	r3, r3
 8010622:	69ba      	ldr	r2, [r7, #24]
 8010624:	4013      	ands	r3, r2
 8010626:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8010628:	683b      	ldr	r3, [r7, #0]
 801062a:	691a      	ldr	r2, [r3, #16]
 801062c:	69fb      	ldr	r3, [r7, #28]
 801062e:	f003 0307 	and.w	r3, r3, #7
 8010632:	009b      	lsls	r3, r3, #2
 8010634:	fa02 f303 	lsl.w	r3, r2, r3
 8010638:	69ba      	ldr	r2, [r7, #24]
 801063a:	4313      	orrs	r3, r2
 801063c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801063e:	69fb      	ldr	r3, [r7, #28]
 8010640:	08da      	lsrs	r2, r3, #3
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	3208      	adds	r2, #8
 8010646:	69b9      	ldr	r1, [r7, #24]
 8010648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8010652:	69fb      	ldr	r3, [r7, #28]
 8010654:	005b      	lsls	r3, r3, #1
 8010656:	2203      	movs	r2, #3
 8010658:	fa02 f303 	lsl.w	r3, r2, r3
 801065c:	43db      	mvns	r3, r3
 801065e:	69ba      	ldr	r2, [r7, #24]
 8010660:	4013      	ands	r3, r2
 8010662:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	685b      	ldr	r3, [r3, #4]
 8010668:	f003 0203 	and.w	r2, r3, #3
 801066c:	69fb      	ldr	r3, [r7, #28]
 801066e:	005b      	lsls	r3, r3, #1
 8010670:	fa02 f303 	lsl.w	r3, r2, r3
 8010674:	69ba      	ldr	r2, [r7, #24]
 8010676:	4313      	orrs	r3, r2
 8010678:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	69ba      	ldr	r2, [r7, #24]
 801067e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	685b      	ldr	r3, [r3, #4]
 8010684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010688:	2b00      	cmp	r3, #0
 801068a:	f000 80b4 	beq.w	80107f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801068e:	2300      	movs	r3, #0
 8010690:	60fb      	str	r3, [r7, #12]
 8010692:	4b60      	ldr	r3, [pc, #384]	; (8010814 <HAL_GPIO_Init+0x30c>)
 8010694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010696:	4a5f      	ldr	r2, [pc, #380]	; (8010814 <HAL_GPIO_Init+0x30c>)
 8010698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801069c:	6453      	str	r3, [r2, #68]	; 0x44
 801069e:	4b5d      	ldr	r3, [pc, #372]	; (8010814 <HAL_GPIO_Init+0x30c>)
 80106a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80106a6:	60fb      	str	r3, [r7, #12]
 80106a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80106aa:	4a5b      	ldr	r2, [pc, #364]	; (8010818 <HAL_GPIO_Init+0x310>)
 80106ac:	69fb      	ldr	r3, [r7, #28]
 80106ae:	089b      	lsrs	r3, r3, #2
 80106b0:	3302      	adds	r3, #2
 80106b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80106b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80106b8:	69fb      	ldr	r3, [r7, #28]
 80106ba:	f003 0303 	and.w	r3, r3, #3
 80106be:	009b      	lsls	r3, r3, #2
 80106c0:	220f      	movs	r2, #15
 80106c2:	fa02 f303 	lsl.w	r3, r2, r3
 80106c6:	43db      	mvns	r3, r3
 80106c8:	69ba      	ldr	r2, [r7, #24]
 80106ca:	4013      	ands	r3, r2
 80106cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	4a52      	ldr	r2, [pc, #328]	; (801081c <HAL_GPIO_Init+0x314>)
 80106d2:	4293      	cmp	r3, r2
 80106d4:	d02b      	beq.n	801072e <HAL_GPIO_Init+0x226>
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	4a51      	ldr	r2, [pc, #324]	; (8010820 <HAL_GPIO_Init+0x318>)
 80106da:	4293      	cmp	r3, r2
 80106dc:	d025      	beq.n	801072a <HAL_GPIO_Init+0x222>
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	4a50      	ldr	r2, [pc, #320]	; (8010824 <HAL_GPIO_Init+0x31c>)
 80106e2:	4293      	cmp	r3, r2
 80106e4:	d01f      	beq.n	8010726 <HAL_GPIO_Init+0x21e>
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	4a4f      	ldr	r2, [pc, #316]	; (8010828 <HAL_GPIO_Init+0x320>)
 80106ea:	4293      	cmp	r3, r2
 80106ec:	d019      	beq.n	8010722 <HAL_GPIO_Init+0x21a>
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	4a4e      	ldr	r2, [pc, #312]	; (801082c <HAL_GPIO_Init+0x324>)
 80106f2:	4293      	cmp	r3, r2
 80106f4:	d013      	beq.n	801071e <HAL_GPIO_Init+0x216>
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	4a4d      	ldr	r2, [pc, #308]	; (8010830 <HAL_GPIO_Init+0x328>)
 80106fa:	4293      	cmp	r3, r2
 80106fc:	d00d      	beq.n	801071a <HAL_GPIO_Init+0x212>
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	4a4c      	ldr	r2, [pc, #304]	; (8010834 <HAL_GPIO_Init+0x32c>)
 8010702:	4293      	cmp	r3, r2
 8010704:	d007      	beq.n	8010716 <HAL_GPIO_Init+0x20e>
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	4a4b      	ldr	r2, [pc, #300]	; (8010838 <HAL_GPIO_Init+0x330>)
 801070a:	4293      	cmp	r3, r2
 801070c:	d101      	bne.n	8010712 <HAL_GPIO_Init+0x20a>
 801070e:	2307      	movs	r3, #7
 8010710:	e00e      	b.n	8010730 <HAL_GPIO_Init+0x228>
 8010712:	2308      	movs	r3, #8
 8010714:	e00c      	b.n	8010730 <HAL_GPIO_Init+0x228>
 8010716:	2306      	movs	r3, #6
 8010718:	e00a      	b.n	8010730 <HAL_GPIO_Init+0x228>
 801071a:	2305      	movs	r3, #5
 801071c:	e008      	b.n	8010730 <HAL_GPIO_Init+0x228>
 801071e:	2304      	movs	r3, #4
 8010720:	e006      	b.n	8010730 <HAL_GPIO_Init+0x228>
 8010722:	2303      	movs	r3, #3
 8010724:	e004      	b.n	8010730 <HAL_GPIO_Init+0x228>
 8010726:	2302      	movs	r3, #2
 8010728:	e002      	b.n	8010730 <HAL_GPIO_Init+0x228>
 801072a:	2301      	movs	r3, #1
 801072c:	e000      	b.n	8010730 <HAL_GPIO_Init+0x228>
 801072e:	2300      	movs	r3, #0
 8010730:	69fa      	ldr	r2, [r7, #28]
 8010732:	f002 0203 	and.w	r2, r2, #3
 8010736:	0092      	lsls	r2, r2, #2
 8010738:	4093      	lsls	r3, r2
 801073a:	69ba      	ldr	r2, [r7, #24]
 801073c:	4313      	orrs	r3, r2
 801073e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010740:	4935      	ldr	r1, [pc, #212]	; (8010818 <HAL_GPIO_Init+0x310>)
 8010742:	69fb      	ldr	r3, [r7, #28]
 8010744:	089b      	lsrs	r3, r3, #2
 8010746:	3302      	adds	r3, #2
 8010748:	69ba      	ldr	r2, [r7, #24]
 801074a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801074e:	4b3b      	ldr	r3, [pc, #236]	; (801083c <HAL_GPIO_Init+0x334>)
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010754:	693b      	ldr	r3, [r7, #16]
 8010756:	43db      	mvns	r3, r3
 8010758:	69ba      	ldr	r2, [r7, #24]
 801075a:	4013      	ands	r3, r2
 801075c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	685b      	ldr	r3, [r3, #4]
 8010762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010766:	2b00      	cmp	r3, #0
 8010768:	d003      	beq.n	8010772 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 801076a:	69ba      	ldr	r2, [r7, #24]
 801076c:	693b      	ldr	r3, [r7, #16]
 801076e:	4313      	orrs	r3, r2
 8010770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8010772:	4a32      	ldr	r2, [pc, #200]	; (801083c <HAL_GPIO_Init+0x334>)
 8010774:	69bb      	ldr	r3, [r7, #24]
 8010776:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8010778:	4b30      	ldr	r3, [pc, #192]	; (801083c <HAL_GPIO_Init+0x334>)
 801077a:	685b      	ldr	r3, [r3, #4]
 801077c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801077e:	693b      	ldr	r3, [r7, #16]
 8010780:	43db      	mvns	r3, r3
 8010782:	69ba      	ldr	r2, [r7, #24]
 8010784:	4013      	ands	r3, r2
 8010786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	685b      	ldr	r3, [r3, #4]
 801078c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010790:	2b00      	cmp	r3, #0
 8010792:	d003      	beq.n	801079c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8010794:	69ba      	ldr	r2, [r7, #24]
 8010796:	693b      	ldr	r3, [r7, #16]
 8010798:	4313      	orrs	r3, r2
 801079a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801079c:	4a27      	ldr	r2, [pc, #156]	; (801083c <HAL_GPIO_Init+0x334>)
 801079e:	69bb      	ldr	r3, [r7, #24]
 80107a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80107a2:	4b26      	ldr	r3, [pc, #152]	; (801083c <HAL_GPIO_Init+0x334>)
 80107a4:	689b      	ldr	r3, [r3, #8]
 80107a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80107a8:	693b      	ldr	r3, [r7, #16]
 80107aa:	43db      	mvns	r3, r3
 80107ac:	69ba      	ldr	r2, [r7, #24]
 80107ae:	4013      	ands	r3, r2
 80107b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	685b      	ldr	r3, [r3, #4]
 80107b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d003      	beq.n	80107c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80107be:	69ba      	ldr	r2, [r7, #24]
 80107c0:	693b      	ldr	r3, [r7, #16]
 80107c2:	4313      	orrs	r3, r2
 80107c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80107c6:	4a1d      	ldr	r2, [pc, #116]	; (801083c <HAL_GPIO_Init+0x334>)
 80107c8:	69bb      	ldr	r3, [r7, #24]
 80107ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80107cc:	4b1b      	ldr	r3, [pc, #108]	; (801083c <HAL_GPIO_Init+0x334>)
 80107ce:	68db      	ldr	r3, [r3, #12]
 80107d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80107d2:	693b      	ldr	r3, [r7, #16]
 80107d4:	43db      	mvns	r3, r3
 80107d6:	69ba      	ldr	r2, [r7, #24]
 80107d8:	4013      	ands	r3, r2
 80107da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	685b      	ldr	r3, [r3, #4]
 80107e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d003      	beq.n	80107f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80107e8:	69ba      	ldr	r2, [r7, #24]
 80107ea:	693b      	ldr	r3, [r7, #16]
 80107ec:	4313      	orrs	r3, r2
 80107ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80107f0:	4a12      	ldr	r2, [pc, #72]	; (801083c <HAL_GPIO_Init+0x334>)
 80107f2:	69bb      	ldr	r3, [r7, #24]
 80107f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80107f6:	69fb      	ldr	r3, [r7, #28]
 80107f8:	3301      	adds	r3, #1
 80107fa:	61fb      	str	r3, [r7, #28]
 80107fc:	69fb      	ldr	r3, [r7, #28]
 80107fe:	2b0f      	cmp	r3, #15
 8010800:	f67f ae90 	bls.w	8010524 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8010804:	bf00      	nop
 8010806:	bf00      	nop
 8010808:	3724      	adds	r7, #36	; 0x24
 801080a:	46bd      	mov	sp, r7
 801080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010810:	4770      	bx	lr
 8010812:	bf00      	nop
 8010814:	40023800 	.word	0x40023800
 8010818:	40013800 	.word	0x40013800
 801081c:	40020000 	.word	0x40020000
 8010820:	40020400 	.word	0x40020400
 8010824:	40020800 	.word	0x40020800
 8010828:	40020c00 	.word	0x40020c00
 801082c:	40021000 	.word	0x40021000
 8010830:	40021400 	.word	0x40021400
 8010834:	40021800 	.word	0x40021800
 8010838:	40021c00 	.word	0x40021c00
 801083c:	40013c00 	.word	0x40013c00

08010840 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8010840:	b480      	push	{r7}
 8010842:	b087      	sub	sp, #28
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
 8010848:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801084a:	2300      	movs	r3, #0
 801084c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 801084e:	2300      	movs	r3, #0
 8010850:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8010852:	2300      	movs	r3, #0
 8010854:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010856:	2300      	movs	r3, #0
 8010858:	617b      	str	r3, [r7, #20]
 801085a:	e0cd      	b.n	80109f8 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801085c:	2201      	movs	r2, #1
 801085e:	697b      	ldr	r3, [r7, #20]
 8010860:	fa02 f303 	lsl.w	r3, r2, r3
 8010864:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8010866:	683a      	ldr	r2, [r7, #0]
 8010868:	693b      	ldr	r3, [r7, #16]
 801086a:	4013      	ands	r3, r2
 801086c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 801086e:	68fa      	ldr	r2, [r7, #12]
 8010870:	693b      	ldr	r3, [r7, #16]
 8010872:	429a      	cmp	r2, r3
 8010874:	f040 80bd 	bne.w	80109f2 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8010878:	4a65      	ldr	r2, [pc, #404]	; (8010a10 <HAL_GPIO_DeInit+0x1d0>)
 801087a:	697b      	ldr	r3, [r7, #20]
 801087c:	089b      	lsrs	r3, r3, #2
 801087e:	3302      	adds	r3, #2
 8010880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010884:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8010886:	697b      	ldr	r3, [r7, #20]
 8010888:	f003 0303 	and.w	r3, r3, #3
 801088c:	009b      	lsls	r3, r3, #2
 801088e:	220f      	movs	r2, #15
 8010890:	fa02 f303 	lsl.w	r3, r2, r3
 8010894:	68ba      	ldr	r2, [r7, #8]
 8010896:	4013      	ands	r3, r2
 8010898:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	4a5d      	ldr	r2, [pc, #372]	; (8010a14 <HAL_GPIO_DeInit+0x1d4>)
 801089e:	4293      	cmp	r3, r2
 80108a0:	d02b      	beq.n	80108fa <HAL_GPIO_DeInit+0xba>
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	4a5c      	ldr	r2, [pc, #368]	; (8010a18 <HAL_GPIO_DeInit+0x1d8>)
 80108a6:	4293      	cmp	r3, r2
 80108a8:	d025      	beq.n	80108f6 <HAL_GPIO_DeInit+0xb6>
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	4a5b      	ldr	r2, [pc, #364]	; (8010a1c <HAL_GPIO_DeInit+0x1dc>)
 80108ae:	4293      	cmp	r3, r2
 80108b0:	d01f      	beq.n	80108f2 <HAL_GPIO_DeInit+0xb2>
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	4a5a      	ldr	r2, [pc, #360]	; (8010a20 <HAL_GPIO_DeInit+0x1e0>)
 80108b6:	4293      	cmp	r3, r2
 80108b8:	d019      	beq.n	80108ee <HAL_GPIO_DeInit+0xae>
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	4a59      	ldr	r2, [pc, #356]	; (8010a24 <HAL_GPIO_DeInit+0x1e4>)
 80108be:	4293      	cmp	r3, r2
 80108c0:	d013      	beq.n	80108ea <HAL_GPIO_DeInit+0xaa>
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	4a58      	ldr	r2, [pc, #352]	; (8010a28 <HAL_GPIO_DeInit+0x1e8>)
 80108c6:	4293      	cmp	r3, r2
 80108c8:	d00d      	beq.n	80108e6 <HAL_GPIO_DeInit+0xa6>
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	4a57      	ldr	r2, [pc, #348]	; (8010a2c <HAL_GPIO_DeInit+0x1ec>)
 80108ce:	4293      	cmp	r3, r2
 80108d0:	d007      	beq.n	80108e2 <HAL_GPIO_DeInit+0xa2>
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	4a56      	ldr	r2, [pc, #344]	; (8010a30 <HAL_GPIO_DeInit+0x1f0>)
 80108d6:	4293      	cmp	r3, r2
 80108d8:	d101      	bne.n	80108de <HAL_GPIO_DeInit+0x9e>
 80108da:	2307      	movs	r3, #7
 80108dc:	e00e      	b.n	80108fc <HAL_GPIO_DeInit+0xbc>
 80108de:	2308      	movs	r3, #8
 80108e0:	e00c      	b.n	80108fc <HAL_GPIO_DeInit+0xbc>
 80108e2:	2306      	movs	r3, #6
 80108e4:	e00a      	b.n	80108fc <HAL_GPIO_DeInit+0xbc>
 80108e6:	2305      	movs	r3, #5
 80108e8:	e008      	b.n	80108fc <HAL_GPIO_DeInit+0xbc>
 80108ea:	2304      	movs	r3, #4
 80108ec:	e006      	b.n	80108fc <HAL_GPIO_DeInit+0xbc>
 80108ee:	2303      	movs	r3, #3
 80108f0:	e004      	b.n	80108fc <HAL_GPIO_DeInit+0xbc>
 80108f2:	2302      	movs	r3, #2
 80108f4:	e002      	b.n	80108fc <HAL_GPIO_DeInit+0xbc>
 80108f6:	2301      	movs	r3, #1
 80108f8:	e000      	b.n	80108fc <HAL_GPIO_DeInit+0xbc>
 80108fa:	2300      	movs	r3, #0
 80108fc:	697a      	ldr	r2, [r7, #20]
 80108fe:	f002 0203 	and.w	r2, r2, #3
 8010902:	0092      	lsls	r2, r2, #2
 8010904:	4093      	lsls	r3, r2
 8010906:	68ba      	ldr	r2, [r7, #8]
 8010908:	429a      	cmp	r2, r3
 801090a:	d132      	bne.n	8010972 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 801090c:	4b49      	ldr	r3, [pc, #292]	; (8010a34 <HAL_GPIO_DeInit+0x1f4>)
 801090e:	681a      	ldr	r2, [r3, #0]
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	43db      	mvns	r3, r3
 8010914:	4947      	ldr	r1, [pc, #284]	; (8010a34 <HAL_GPIO_DeInit+0x1f4>)
 8010916:	4013      	ands	r3, r2
 8010918:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 801091a:	4b46      	ldr	r3, [pc, #280]	; (8010a34 <HAL_GPIO_DeInit+0x1f4>)
 801091c:	685a      	ldr	r2, [r3, #4]
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	43db      	mvns	r3, r3
 8010922:	4944      	ldr	r1, [pc, #272]	; (8010a34 <HAL_GPIO_DeInit+0x1f4>)
 8010924:	4013      	ands	r3, r2
 8010926:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8010928:	4b42      	ldr	r3, [pc, #264]	; (8010a34 <HAL_GPIO_DeInit+0x1f4>)
 801092a:	689a      	ldr	r2, [r3, #8]
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	43db      	mvns	r3, r3
 8010930:	4940      	ldr	r1, [pc, #256]	; (8010a34 <HAL_GPIO_DeInit+0x1f4>)
 8010932:	4013      	ands	r3, r2
 8010934:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8010936:	4b3f      	ldr	r3, [pc, #252]	; (8010a34 <HAL_GPIO_DeInit+0x1f4>)
 8010938:	68da      	ldr	r2, [r3, #12]
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	43db      	mvns	r3, r3
 801093e:	493d      	ldr	r1, [pc, #244]	; (8010a34 <HAL_GPIO_DeInit+0x1f4>)
 8010940:	4013      	ands	r3, r2
 8010942:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8010944:	697b      	ldr	r3, [r7, #20]
 8010946:	f003 0303 	and.w	r3, r3, #3
 801094a:	009b      	lsls	r3, r3, #2
 801094c:	220f      	movs	r2, #15
 801094e:	fa02 f303 	lsl.w	r3, r2, r3
 8010952:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8010954:	4a2e      	ldr	r2, [pc, #184]	; (8010a10 <HAL_GPIO_DeInit+0x1d0>)
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	089b      	lsrs	r3, r3, #2
 801095a:	3302      	adds	r3, #2
 801095c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	43da      	mvns	r2, r3
 8010964:	482a      	ldr	r0, [pc, #168]	; (8010a10 <HAL_GPIO_DeInit+0x1d0>)
 8010966:	697b      	ldr	r3, [r7, #20]
 8010968:	089b      	lsrs	r3, r3, #2
 801096a:	400a      	ands	r2, r1
 801096c:	3302      	adds	r3, #2
 801096e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681a      	ldr	r2, [r3, #0]
 8010976:	697b      	ldr	r3, [r7, #20]
 8010978:	005b      	lsls	r3, r3, #1
 801097a:	2103      	movs	r1, #3
 801097c:	fa01 f303 	lsl.w	r3, r1, r3
 8010980:	43db      	mvns	r3, r3
 8010982:	401a      	ands	r2, r3
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8010988:	697b      	ldr	r3, [r7, #20]
 801098a:	08da      	lsrs	r2, r3, #3
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	3208      	adds	r2, #8
 8010990:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010994:	697b      	ldr	r3, [r7, #20]
 8010996:	f003 0307 	and.w	r3, r3, #7
 801099a:	009b      	lsls	r3, r3, #2
 801099c:	220f      	movs	r2, #15
 801099e:	fa02 f303 	lsl.w	r3, r2, r3
 80109a2:	43db      	mvns	r3, r3
 80109a4:	697a      	ldr	r2, [r7, #20]
 80109a6:	08d2      	lsrs	r2, r2, #3
 80109a8:	4019      	ands	r1, r3
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	3208      	adds	r2, #8
 80109ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	68da      	ldr	r2, [r3, #12]
 80109b6:	697b      	ldr	r3, [r7, #20]
 80109b8:	005b      	lsls	r3, r3, #1
 80109ba:	2103      	movs	r1, #3
 80109bc:	fa01 f303 	lsl.w	r3, r1, r3
 80109c0:	43db      	mvns	r3, r3
 80109c2:	401a      	ands	r2, r3
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	685a      	ldr	r2, [r3, #4]
 80109cc:	2101      	movs	r1, #1
 80109ce:	697b      	ldr	r3, [r7, #20]
 80109d0:	fa01 f303 	lsl.w	r3, r1, r3
 80109d4:	43db      	mvns	r3, r3
 80109d6:	401a      	ands	r2, r3
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	689a      	ldr	r2, [r3, #8]
 80109e0:	697b      	ldr	r3, [r7, #20]
 80109e2:	005b      	lsls	r3, r3, #1
 80109e4:	2103      	movs	r1, #3
 80109e6:	fa01 f303 	lsl.w	r3, r1, r3
 80109ea:	43db      	mvns	r3, r3
 80109ec:	401a      	ands	r2, r3
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80109f2:	697b      	ldr	r3, [r7, #20]
 80109f4:	3301      	adds	r3, #1
 80109f6:	617b      	str	r3, [r7, #20]
 80109f8:	697b      	ldr	r3, [r7, #20]
 80109fa:	2b0f      	cmp	r3, #15
 80109fc:	f67f af2e 	bls.w	801085c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8010a00:	bf00      	nop
 8010a02:	bf00      	nop
 8010a04:	371c      	adds	r7, #28
 8010a06:	46bd      	mov	sp, r7
 8010a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0c:	4770      	bx	lr
 8010a0e:	bf00      	nop
 8010a10:	40013800 	.word	0x40013800
 8010a14:	40020000 	.word	0x40020000
 8010a18:	40020400 	.word	0x40020400
 8010a1c:	40020800 	.word	0x40020800
 8010a20:	40020c00 	.word	0x40020c00
 8010a24:	40021000 	.word	0x40021000
 8010a28:	40021400 	.word	0x40021400
 8010a2c:	40021800 	.word	0x40021800
 8010a30:	40021c00 	.word	0x40021c00
 8010a34:	40013c00 	.word	0x40013c00

08010a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010a38:	b480      	push	{r7}
 8010a3a:	b083      	sub	sp, #12
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
 8010a40:	460b      	mov	r3, r1
 8010a42:	807b      	strh	r3, [r7, #2]
 8010a44:	4613      	mov	r3, r2
 8010a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8010a48:	787b      	ldrb	r3, [r7, #1]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d003      	beq.n	8010a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8010a4e:	887a      	ldrh	r2, [r7, #2]
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8010a54:	e003      	b.n	8010a5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8010a56:	887b      	ldrh	r3, [r7, #2]
 8010a58:	041a      	lsls	r2, r3, #16
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	619a      	str	r2, [r3, #24]
}
 8010a5e:	bf00      	nop
 8010a60:	370c      	adds	r7, #12
 8010a62:	46bd      	mov	sp, r7
 8010a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a68:	4770      	bx	lr
	...

08010a6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b084      	sub	sp, #16
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d101      	bne.n	8010a7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8010a7a:	2301      	movs	r3, #1
 8010a7c:	e12b      	b.n	8010cd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010a84:	b2db      	uxtb	r3, r3
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d106      	bne.n	8010a98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8010a92:	6878      	ldr	r0, [r7, #4]
 8010a94:	f7f1 fc3e 	bl	8002314 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	2224      	movs	r2, #36	; 0x24
 8010a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	681a      	ldr	r2, [r3, #0]
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	f022 0201 	bic.w	r2, r2, #1
 8010aae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	681a      	ldr	r2, [r3, #0]
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010abe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	681a      	ldr	r2, [r3, #0]
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010ace:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8010ad0:	f002 fc64 	bl	801339c <HAL_RCC_GetPCLK1Freq>
 8010ad4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	685b      	ldr	r3, [r3, #4]
 8010ada:	4a81      	ldr	r2, [pc, #516]	; (8010ce0 <HAL_I2C_Init+0x274>)
 8010adc:	4293      	cmp	r3, r2
 8010ade:	d807      	bhi.n	8010af0 <HAL_I2C_Init+0x84>
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	4a80      	ldr	r2, [pc, #512]	; (8010ce4 <HAL_I2C_Init+0x278>)
 8010ae4:	4293      	cmp	r3, r2
 8010ae6:	bf94      	ite	ls
 8010ae8:	2301      	movls	r3, #1
 8010aea:	2300      	movhi	r3, #0
 8010aec:	b2db      	uxtb	r3, r3
 8010aee:	e006      	b.n	8010afe <HAL_I2C_Init+0x92>
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	4a7d      	ldr	r2, [pc, #500]	; (8010ce8 <HAL_I2C_Init+0x27c>)
 8010af4:	4293      	cmp	r3, r2
 8010af6:	bf94      	ite	ls
 8010af8:	2301      	movls	r3, #1
 8010afa:	2300      	movhi	r3, #0
 8010afc:	b2db      	uxtb	r3, r3
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d001      	beq.n	8010b06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8010b02:	2301      	movs	r3, #1
 8010b04:	e0e7      	b.n	8010cd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	4a78      	ldr	r2, [pc, #480]	; (8010cec <HAL_I2C_Init+0x280>)
 8010b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8010b0e:	0c9b      	lsrs	r3, r3, #18
 8010b10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	685b      	ldr	r3, [r3, #4]
 8010b18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	68ba      	ldr	r2, [r7, #8]
 8010b22:	430a      	orrs	r2, r1
 8010b24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	6a1b      	ldr	r3, [r3, #32]
 8010b2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	685b      	ldr	r3, [r3, #4]
 8010b34:	4a6a      	ldr	r2, [pc, #424]	; (8010ce0 <HAL_I2C_Init+0x274>)
 8010b36:	4293      	cmp	r3, r2
 8010b38:	d802      	bhi.n	8010b40 <HAL_I2C_Init+0xd4>
 8010b3a:	68bb      	ldr	r3, [r7, #8]
 8010b3c:	3301      	adds	r3, #1
 8010b3e:	e009      	b.n	8010b54 <HAL_I2C_Init+0xe8>
 8010b40:	68bb      	ldr	r3, [r7, #8]
 8010b42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8010b46:	fb02 f303 	mul.w	r3, r2, r3
 8010b4a:	4a69      	ldr	r2, [pc, #420]	; (8010cf0 <HAL_I2C_Init+0x284>)
 8010b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8010b50:	099b      	lsrs	r3, r3, #6
 8010b52:	3301      	adds	r3, #1
 8010b54:	687a      	ldr	r2, [r7, #4]
 8010b56:	6812      	ldr	r2, [r2, #0]
 8010b58:	430b      	orrs	r3, r1
 8010b5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	69db      	ldr	r3, [r3, #28]
 8010b62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8010b66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	685b      	ldr	r3, [r3, #4]
 8010b6e:	495c      	ldr	r1, [pc, #368]	; (8010ce0 <HAL_I2C_Init+0x274>)
 8010b70:	428b      	cmp	r3, r1
 8010b72:	d819      	bhi.n	8010ba8 <HAL_I2C_Init+0x13c>
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	1e59      	subs	r1, r3, #1
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	685b      	ldr	r3, [r3, #4]
 8010b7c:	005b      	lsls	r3, r3, #1
 8010b7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8010b82:	1c59      	adds	r1, r3, #1
 8010b84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8010b88:	400b      	ands	r3, r1
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d00a      	beq.n	8010ba4 <HAL_I2C_Init+0x138>
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	1e59      	subs	r1, r3, #1
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	685b      	ldr	r3, [r3, #4]
 8010b96:	005b      	lsls	r3, r3, #1
 8010b98:	fbb1 f3f3 	udiv	r3, r1, r3
 8010b9c:	3301      	adds	r3, #1
 8010b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010ba2:	e051      	b.n	8010c48 <HAL_I2C_Init+0x1dc>
 8010ba4:	2304      	movs	r3, #4
 8010ba6:	e04f      	b.n	8010c48 <HAL_I2C_Init+0x1dc>
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	689b      	ldr	r3, [r3, #8]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d111      	bne.n	8010bd4 <HAL_I2C_Init+0x168>
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	1e58      	subs	r0, r3, #1
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	6859      	ldr	r1, [r3, #4]
 8010bb8:	460b      	mov	r3, r1
 8010bba:	005b      	lsls	r3, r3, #1
 8010bbc:	440b      	add	r3, r1
 8010bbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8010bc2:	3301      	adds	r3, #1
 8010bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	bf0c      	ite	eq
 8010bcc:	2301      	moveq	r3, #1
 8010bce:	2300      	movne	r3, #0
 8010bd0:	b2db      	uxtb	r3, r3
 8010bd2:	e012      	b.n	8010bfa <HAL_I2C_Init+0x18e>
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	1e58      	subs	r0, r3, #1
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	6859      	ldr	r1, [r3, #4]
 8010bdc:	460b      	mov	r3, r1
 8010bde:	009b      	lsls	r3, r3, #2
 8010be0:	440b      	add	r3, r1
 8010be2:	0099      	lsls	r1, r3, #2
 8010be4:	440b      	add	r3, r1
 8010be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8010bea:	3301      	adds	r3, #1
 8010bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	bf0c      	ite	eq
 8010bf4:	2301      	moveq	r3, #1
 8010bf6:	2300      	movne	r3, #0
 8010bf8:	b2db      	uxtb	r3, r3
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d001      	beq.n	8010c02 <HAL_I2C_Init+0x196>
 8010bfe:	2301      	movs	r3, #1
 8010c00:	e022      	b.n	8010c48 <HAL_I2C_Init+0x1dc>
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	689b      	ldr	r3, [r3, #8]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d10e      	bne.n	8010c28 <HAL_I2C_Init+0x1bc>
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	1e58      	subs	r0, r3, #1
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	6859      	ldr	r1, [r3, #4]
 8010c12:	460b      	mov	r3, r1
 8010c14:	005b      	lsls	r3, r3, #1
 8010c16:	440b      	add	r3, r1
 8010c18:	fbb0 f3f3 	udiv	r3, r0, r3
 8010c1c:	3301      	adds	r3, #1
 8010c1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010c26:	e00f      	b.n	8010c48 <HAL_I2C_Init+0x1dc>
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	1e58      	subs	r0, r3, #1
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	6859      	ldr	r1, [r3, #4]
 8010c30:	460b      	mov	r3, r1
 8010c32:	009b      	lsls	r3, r3, #2
 8010c34:	440b      	add	r3, r1
 8010c36:	0099      	lsls	r1, r3, #2
 8010c38:	440b      	add	r3, r1
 8010c3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8010c3e:	3301      	adds	r3, #1
 8010c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010c44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010c48:	6879      	ldr	r1, [r7, #4]
 8010c4a:	6809      	ldr	r1, [r1, #0]
 8010c4c:	4313      	orrs	r3, r2
 8010c4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	69da      	ldr	r2, [r3, #28]
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	6a1b      	ldr	r3, [r3, #32]
 8010c62:	431a      	orrs	r2, r3
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	430a      	orrs	r2, r1
 8010c6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	689b      	ldr	r3, [r3, #8]
 8010c72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8010c76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010c7a:	687a      	ldr	r2, [r7, #4]
 8010c7c:	6911      	ldr	r1, [r2, #16]
 8010c7e:	687a      	ldr	r2, [r7, #4]
 8010c80:	68d2      	ldr	r2, [r2, #12]
 8010c82:	4311      	orrs	r1, r2
 8010c84:	687a      	ldr	r2, [r7, #4]
 8010c86:	6812      	ldr	r2, [r2, #0]
 8010c88:	430b      	orrs	r3, r1
 8010c8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	68db      	ldr	r3, [r3, #12]
 8010c92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	695a      	ldr	r2, [r3, #20]
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	699b      	ldr	r3, [r3, #24]
 8010c9e:	431a      	orrs	r2, r3
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	430a      	orrs	r2, r1
 8010ca6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	681a      	ldr	r2, [r3, #0]
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	f042 0201 	orr.w	r2, r2, #1
 8010cb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2200      	movs	r2, #0
 8010cbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	2220      	movs	r2, #32
 8010cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	2200      	movs	r2, #0
 8010cca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	2200      	movs	r2, #0
 8010cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8010cd4:	2300      	movs	r3, #0
}
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	3710      	adds	r7, #16
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	bd80      	pop	{r7, pc}
 8010cde:	bf00      	nop
 8010ce0:	000186a0 	.word	0x000186a0
 8010ce4:	001e847f 	.word	0x001e847f
 8010ce8:	003d08ff 	.word	0x003d08ff
 8010cec:	431bde83 	.word	0x431bde83
 8010cf0:	10624dd3 	.word	0x10624dd3

08010cf4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b082      	sub	sp, #8
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d101      	bne.n	8010d06 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8010d02:	2301      	movs	r3, #1
 8010d04:	e021      	b.n	8010d4a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	2224      	movs	r2, #36	; 0x24
 8010d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	681a      	ldr	r2, [r3, #0]
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	f022 0201 	bic.w	r2, r2, #1
 8010d1c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8010d1e:	6878      	ldr	r0, [r7, #4]
 8010d20:	f7f1 fbce 	bl	80024c0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	2200      	movs	r2, #0
 8010d28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	2200      	movs	r2, #0
 8010d36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	2200      	movs	r2, #0
 8010d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010d48:	2300      	movs	r3, #0
}
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	3708      	adds	r7, #8
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	bd80      	pop	{r7, pc}
	...

08010d54 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b086      	sub	sp, #24
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	60f8      	str	r0, [r7, #12]
 8010d5c:	607a      	str	r2, [r7, #4]
 8010d5e:	461a      	mov	r2, r3
 8010d60:	460b      	mov	r3, r1
 8010d62:	817b      	strh	r3, [r7, #10]
 8010d64:	4613      	mov	r3, r2
 8010d66:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8010d68:	2300      	movs	r3, #0
 8010d6a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010d72:	b2db      	uxtb	r3, r3
 8010d74:	2b20      	cmp	r3, #32
 8010d76:	f040 80f4 	bne.w	8010f62 <HAL_I2C_Master_Receive_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8010d7a:	4b7c      	ldr	r3, [pc, #496]	; (8010f6c <HAL_I2C_Master_Receive_DMA+0x218>)
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	08db      	lsrs	r3, r3, #3
 8010d80:	4a7b      	ldr	r2, [pc, #492]	; (8010f70 <HAL_I2C_Master_Receive_DMA+0x21c>)
 8010d82:	fba2 2303 	umull	r2, r3, r2, r3
 8010d86:	0a1a      	lsrs	r2, r3, #8
 8010d88:	4613      	mov	r3, r2
 8010d8a:	009b      	lsls	r3, r3, #2
 8010d8c:	4413      	add	r3, r2
 8010d8e:	009a      	lsls	r2, r3, #2
 8010d90:	4413      	add	r3, r2
 8010d92:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8010d94:	693b      	ldr	r3, [r7, #16]
 8010d96:	3b01      	subs	r3, #1
 8010d98:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8010d9a:	693b      	ldr	r3, [r7, #16]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d116      	bne.n	8010dce <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	2200      	movs	r2, #0
 8010da4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	2220      	movs	r2, #32
 8010daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	2200      	movs	r2, #0
 8010db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dba:	f043 0220 	orr.w	r2, r3, #32
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8010dca:	2301      	movs	r3, #1
 8010dcc:	e0ca      	b.n	8010f64 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	699b      	ldr	r3, [r3, #24]
 8010dd4:	f003 0302 	and.w	r3, r3, #2
 8010dd8:	2b02      	cmp	r3, #2
 8010dda:	d0db      	beq.n	8010d94 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010de2:	2b01      	cmp	r3, #1
 8010de4:	d101      	bne.n	8010dea <HAL_I2C_Master_Receive_DMA+0x96>
 8010de6:	2302      	movs	r3, #2
 8010de8:	e0bc      	b.n	8010f64 <HAL_I2C_Master_Receive_DMA+0x210>
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	2201      	movs	r2, #1
 8010dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	f003 0301 	and.w	r3, r3, #1
 8010dfc:	2b01      	cmp	r3, #1
 8010dfe:	d007      	beq.n	8010e10 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	681a      	ldr	r2, [r3, #0]
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	f042 0201 	orr.w	r2, r2, #1
 8010e0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	681a      	ldr	r2, [r3, #0]
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010e1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	2222      	movs	r2, #34	; 0x22
 8010e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	2210      	movs	r2, #16
 8010e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	2200      	movs	r2, #0
 8010e34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	687a      	ldr	r2, [r7, #4]
 8010e3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	893a      	ldrh	r2, [r7, #8]
 8010e40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010e46:	b29a      	uxth	r2, r3
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	4a49      	ldr	r2, [pc, #292]	; (8010f74 <HAL_I2C_Master_Receive_DMA+0x220>)
 8010e50:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8010e52:	897a      	ldrh	r2, [r7, #10]
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d062      	beq.n	8010f26 <HAL_I2C_Master_Receive_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e64:	4a44      	ldr	r2, [pc, #272]	; (8010f78 <HAL_I2C_Master_Receive_DMA+0x224>)
 8010e66:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e6c:	4a43      	ldr	r2, [pc, #268]	; (8010f7c <HAL_I2C_Master_Receive_DMA+0x228>)
 8010e6e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e74:	2200      	movs	r2, #0
 8010e76:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e7c:	2200      	movs	r2, #0
 8010e7e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e84:	2200      	movs	r2, #0
 8010e86:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e8c:	2200      	movs	r2, #0
 8010e8e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	3310      	adds	r3, #16
 8010e9a:	4619      	mov	r1, r3
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ea0:	461a      	mov	r2, r3
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010ea6:	f7fe fd4d 	bl	800f944 <HAL_DMA_Start_IT>
 8010eaa:	4603      	mov	r3, r0
 8010eac:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 8010eae:	7dfb      	ldrb	r3, [r7, #23]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d124      	bne.n	8010efe <HAL_I2C_Master_Receive_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	681a      	ldr	r2, [r3, #0]
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010ec2:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	681a      	ldr	r2, [r3, #0]
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010ed2:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	685a      	ldr	r2, [r3, #4]
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8010eea:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	685a      	ldr	r2, [r3, #4]
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010efa:	605a      	str	r2, [r3, #4]
 8010efc:	e02f      	b.n	8010f5e <HAL_I2C_Master_Receive_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	2220      	movs	r2, #32
 8010f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	2200      	movs	r2, #0
 8010f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f12:	f043 0210 	orr.w	r2, r3, #16
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8010f22:	2301      	movs	r3, #1
 8010f24:	e01e      	b.n	8010f64 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	681a      	ldr	r2, [r3, #0]
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010f34:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	681a      	ldr	r2, [r3, #0]
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010f44:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	2200      	movs	r2, #0
 8010f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	685a      	ldr	r2, [r3, #4]
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8010f5c:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8010f5e:	2300      	movs	r3, #0
 8010f60:	e000      	b.n	8010f64 <HAL_I2C_Master_Receive_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 8010f62:	2302      	movs	r3, #2
  }
}
 8010f64:	4618      	mov	r0, r3
 8010f66:	3718      	adds	r7, #24
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	bd80      	pop	{r7, pc}
 8010f6c:	200000c0 	.word	0x200000c0
 8010f70:	14f8b589 	.word	0x14f8b589
 8010f74:	ffff0000 	.word	0xffff0000
 8010f78:	080126ed 	.word	0x080126ed
 8010f7c:	08012897 	.word	0x08012897

08010f80 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b088      	sub	sp, #32
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8010f88:	2300      	movs	r3, #0
 8010f8a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	685b      	ldr	r3, [r3, #4]
 8010f92:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f98:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010fa0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010fa8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8010faa:	7bfb      	ldrb	r3, [r7, #15]
 8010fac:	2b10      	cmp	r3, #16
 8010fae:	d003      	beq.n	8010fb8 <HAL_I2C_EV_IRQHandler+0x38>
 8010fb0:	7bfb      	ldrb	r3, [r7, #15]
 8010fb2:	2b40      	cmp	r3, #64	; 0x40
 8010fb4:	f040 80bd 	bne.w	8011132 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	699b      	ldr	r3, [r3, #24]
 8010fbe:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	695b      	ldr	r3, [r3, #20]
 8010fc6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8010fc8:	69fb      	ldr	r3, [r7, #28]
 8010fca:	f003 0301 	and.w	r3, r3, #1
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d10d      	bne.n	8010fee <HAL_I2C_EV_IRQHandler+0x6e>
 8010fd2:	693b      	ldr	r3, [r7, #16]
 8010fd4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8010fd8:	d003      	beq.n	8010fe2 <HAL_I2C_EV_IRQHandler+0x62>
 8010fda:	693b      	ldr	r3, [r7, #16]
 8010fdc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8010fe0:	d101      	bne.n	8010fe6 <HAL_I2C_EV_IRQHandler+0x66>
 8010fe2:	2301      	movs	r3, #1
 8010fe4:	e000      	b.n	8010fe8 <HAL_I2C_EV_IRQHandler+0x68>
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	2b01      	cmp	r3, #1
 8010fea:	f000 812e 	beq.w	801124a <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010fee:	69fb      	ldr	r3, [r7, #28]
 8010ff0:	f003 0301 	and.w	r3, r3, #1
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d00c      	beq.n	8011012 <HAL_I2C_EV_IRQHandler+0x92>
 8010ff8:	697b      	ldr	r3, [r7, #20]
 8010ffa:	0a5b      	lsrs	r3, r3, #9
 8010ffc:	f003 0301 	and.w	r3, r3, #1
 8011000:	2b00      	cmp	r3, #0
 8011002:	d006      	beq.n	8011012 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8011004:	6878      	ldr	r0, [r7, #4]
 8011006:	f001 fd5d 	bl	8012ac4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 801100a:	6878      	ldr	r0, [r7, #4]
 801100c:	f000 fd58 	bl	8011ac0 <I2C_Master_SB>
 8011010:	e08e      	b.n	8011130 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8011012:	69fb      	ldr	r3, [r7, #28]
 8011014:	08db      	lsrs	r3, r3, #3
 8011016:	f003 0301 	and.w	r3, r3, #1
 801101a:	2b00      	cmp	r3, #0
 801101c:	d009      	beq.n	8011032 <HAL_I2C_EV_IRQHandler+0xb2>
 801101e:	697b      	ldr	r3, [r7, #20]
 8011020:	0a5b      	lsrs	r3, r3, #9
 8011022:	f003 0301 	and.w	r3, r3, #1
 8011026:	2b00      	cmp	r3, #0
 8011028:	d003      	beq.n	8011032 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 801102a:	6878      	ldr	r0, [r7, #4]
 801102c:	f000 fdce 	bl	8011bcc <I2C_Master_ADD10>
 8011030:	e07e      	b.n	8011130 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8011032:	69fb      	ldr	r3, [r7, #28]
 8011034:	085b      	lsrs	r3, r3, #1
 8011036:	f003 0301 	and.w	r3, r3, #1
 801103a:	2b00      	cmp	r3, #0
 801103c:	d009      	beq.n	8011052 <HAL_I2C_EV_IRQHandler+0xd2>
 801103e:	697b      	ldr	r3, [r7, #20]
 8011040:	0a5b      	lsrs	r3, r3, #9
 8011042:	f003 0301 	and.w	r3, r3, #1
 8011046:	2b00      	cmp	r3, #0
 8011048:	d003      	beq.n	8011052 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f000 fde8 	bl	8011c20 <I2C_Master_ADDR>
 8011050:	e06e      	b.n	8011130 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8011052:	69bb      	ldr	r3, [r7, #24]
 8011054:	089b      	lsrs	r3, r3, #2
 8011056:	f003 0301 	and.w	r3, r3, #1
 801105a:	2b00      	cmp	r3, #0
 801105c:	d037      	beq.n	80110ce <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	685b      	ldr	r3, [r3, #4]
 8011064:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011068:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801106c:	f000 80ef 	beq.w	801124e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8011070:	69fb      	ldr	r3, [r7, #28]
 8011072:	09db      	lsrs	r3, r3, #7
 8011074:	f003 0301 	and.w	r3, r3, #1
 8011078:	2b00      	cmp	r3, #0
 801107a:	d00f      	beq.n	801109c <HAL_I2C_EV_IRQHandler+0x11c>
 801107c:	697b      	ldr	r3, [r7, #20]
 801107e:	0a9b      	lsrs	r3, r3, #10
 8011080:	f003 0301 	and.w	r3, r3, #1
 8011084:	2b00      	cmp	r3, #0
 8011086:	d009      	beq.n	801109c <HAL_I2C_EV_IRQHandler+0x11c>
 8011088:	69fb      	ldr	r3, [r7, #28]
 801108a:	089b      	lsrs	r3, r3, #2
 801108c:	f003 0301 	and.w	r3, r3, #1
 8011090:	2b00      	cmp	r3, #0
 8011092:	d103      	bne.n	801109c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8011094:	6878      	ldr	r0, [r7, #4]
 8011096:	f000 f9e5 	bl	8011464 <I2C_MasterTransmit_TXE>
 801109a:	e049      	b.n	8011130 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801109c:	69fb      	ldr	r3, [r7, #28]
 801109e:	089b      	lsrs	r3, r3, #2
 80110a0:	f003 0301 	and.w	r3, r3, #1
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	f000 80d2 	beq.w	801124e <HAL_I2C_EV_IRQHandler+0x2ce>
 80110aa:	697b      	ldr	r3, [r7, #20]
 80110ac:	0a5b      	lsrs	r3, r3, #9
 80110ae:	f003 0301 	and.w	r3, r3, #1
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	f000 80cb 	beq.w	801124e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80110b8:	7bfb      	ldrb	r3, [r7, #15]
 80110ba:	2b10      	cmp	r3, #16
 80110bc:	d103      	bne.n	80110c6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80110be:	6878      	ldr	r0, [r7, #4]
 80110c0:	f000 fa6c 	bl	801159c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80110c4:	e0c3      	b.n	801124e <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80110c6:	6878      	ldr	r0, [r7, #4]
 80110c8:	f000 fad0 	bl	801166c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80110cc:	e0bf      	b.n	801124e <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	685b      	ldr	r3, [r3, #4]
 80110d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80110d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80110dc:	f000 80b7 	beq.w	801124e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80110e0:	69fb      	ldr	r3, [r7, #28]
 80110e2:	099b      	lsrs	r3, r3, #6
 80110e4:	f003 0301 	and.w	r3, r3, #1
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d00f      	beq.n	801110c <HAL_I2C_EV_IRQHandler+0x18c>
 80110ec:	697b      	ldr	r3, [r7, #20]
 80110ee:	0a9b      	lsrs	r3, r3, #10
 80110f0:	f003 0301 	and.w	r3, r3, #1
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d009      	beq.n	801110c <HAL_I2C_EV_IRQHandler+0x18c>
 80110f8:	69fb      	ldr	r3, [r7, #28]
 80110fa:	089b      	lsrs	r3, r3, #2
 80110fc:	f003 0301 	and.w	r3, r3, #1
 8011100:	2b00      	cmp	r3, #0
 8011102:	d103      	bne.n	801110c <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8011104:	6878      	ldr	r0, [r7, #4]
 8011106:	f000 fb40 	bl	801178a <I2C_MasterReceive_RXNE>
 801110a:	e011      	b.n	8011130 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801110c:	69fb      	ldr	r3, [r7, #28]
 801110e:	089b      	lsrs	r3, r3, #2
 8011110:	f003 0301 	and.w	r3, r3, #1
 8011114:	2b00      	cmp	r3, #0
 8011116:	f000 809a 	beq.w	801124e <HAL_I2C_EV_IRQHandler+0x2ce>
 801111a:	697b      	ldr	r3, [r7, #20]
 801111c:	0a5b      	lsrs	r3, r3, #9
 801111e:	f003 0301 	and.w	r3, r3, #1
 8011122:	2b00      	cmp	r3, #0
 8011124:	f000 8093 	beq.w	801124e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8011128:	6878      	ldr	r0, [r7, #4]
 801112a:	f000 fbdf 	bl	80118ec <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801112e:	e08e      	b.n	801124e <HAL_I2C_EV_IRQHandler+0x2ce>
 8011130:	e08d      	b.n	801124e <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011136:	2b00      	cmp	r3, #0
 8011138:	d004      	beq.n	8011144 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	695b      	ldr	r3, [r3, #20]
 8011140:	61fb      	str	r3, [r7, #28]
 8011142:	e007      	b.n	8011154 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	699b      	ldr	r3, [r3, #24]
 801114a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	695b      	ldr	r3, [r3, #20]
 8011152:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8011154:	69fb      	ldr	r3, [r7, #28]
 8011156:	085b      	lsrs	r3, r3, #1
 8011158:	f003 0301 	and.w	r3, r3, #1
 801115c:	2b00      	cmp	r3, #0
 801115e:	d012      	beq.n	8011186 <HAL_I2C_EV_IRQHandler+0x206>
 8011160:	697b      	ldr	r3, [r7, #20]
 8011162:	0a5b      	lsrs	r3, r3, #9
 8011164:	f003 0301 	and.w	r3, r3, #1
 8011168:	2b00      	cmp	r3, #0
 801116a:	d00c      	beq.n	8011186 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011170:	2b00      	cmp	r3, #0
 8011172:	d003      	beq.n	801117c <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	699b      	ldr	r3, [r3, #24]
 801117a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 801117c:	69b9      	ldr	r1, [r7, #24]
 801117e:	6878      	ldr	r0, [r7, #4]
 8011180:	f000 ff9d 	bl	80120be <I2C_Slave_ADDR>
 8011184:	e066      	b.n	8011254 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8011186:	69fb      	ldr	r3, [r7, #28]
 8011188:	091b      	lsrs	r3, r3, #4
 801118a:	f003 0301 	and.w	r3, r3, #1
 801118e:	2b00      	cmp	r3, #0
 8011190:	d009      	beq.n	80111a6 <HAL_I2C_EV_IRQHandler+0x226>
 8011192:	697b      	ldr	r3, [r7, #20]
 8011194:	0a5b      	lsrs	r3, r3, #9
 8011196:	f003 0301 	and.w	r3, r3, #1
 801119a:	2b00      	cmp	r3, #0
 801119c:	d003      	beq.n	80111a6 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 801119e:	6878      	ldr	r0, [r7, #4]
 80111a0:	f000 ffd2 	bl	8012148 <I2C_Slave_STOPF>
 80111a4:	e056      	b.n	8011254 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80111a6:	7bbb      	ldrb	r3, [r7, #14]
 80111a8:	2b21      	cmp	r3, #33	; 0x21
 80111aa:	d002      	beq.n	80111b2 <HAL_I2C_EV_IRQHandler+0x232>
 80111ac:	7bbb      	ldrb	r3, [r7, #14]
 80111ae:	2b29      	cmp	r3, #41	; 0x29
 80111b0:	d125      	bne.n	80111fe <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80111b2:	69fb      	ldr	r3, [r7, #28]
 80111b4:	09db      	lsrs	r3, r3, #7
 80111b6:	f003 0301 	and.w	r3, r3, #1
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d00f      	beq.n	80111de <HAL_I2C_EV_IRQHandler+0x25e>
 80111be:	697b      	ldr	r3, [r7, #20]
 80111c0:	0a9b      	lsrs	r3, r3, #10
 80111c2:	f003 0301 	and.w	r3, r3, #1
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d009      	beq.n	80111de <HAL_I2C_EV_IRQHandler+0x25e>
 80111ca:	69fb      	ldr	r3, [r7, #28]
 80111cc:	089b      	lsrs	r3, r3, #2
 80111ce:	f003 0301 	and.w	r3, r3, #1
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d103      	bne.n	80111de <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80111d6:	6878      	ldr	r0, [r7, #4]
 80111d8:	f000 feb3 	bl	8011f42 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80111dc:	e039      	b.n	8011252 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80111de:	69fb      	ldr	r3, [r7, #28]
 80111e0:	089b      	lsrs	r3, r3, #2
 80111e2:	f003 0301 	and.w	r3, r3, #1
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d033      	beq.n	8011252 <HAL_I2C_EV_IRQHandler+0x2d2>
 80111ea:	697b      	ldr	r3, [r7, #20]
 80111ec:	0a5b      	lsrs	r3, r3, #9
 80111ee:	f003 0301 	and.w	r3, r3, #1
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d02d      	beq.n	8011252 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80111f6:	6878      	ldr	r0, [r7, #4]
 80111f8:	f000 fee0 	bl	8011fbc <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80111fc:	e029      	b.n	8011252 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80111fe:	69fb      	ldr	r3, [r7, #28]
 8011200:	099b      	lsrs	r3, r3, #6
 8011202:	f003 0301 	and.w	r3, r3, #1
 8011206:	2b00      	cmp	r3, #0
 8011208:	d00f      	beq.n	801122a <HAL_I2C_EV_IRQHandler+0x2aa>
 801120a:	697b      	ldr	r3, [r7, #20]
 801120c:	0a9b      	lsrs	r3, r3, #10
 801120e:	f003 0301 	and.w	r3, r3, #1
 8011212:	2b00      	cmp	r3, #0
 8011214:	d009      	beq.n	801122a <HAL_I2C_EV_IRQHandler+0x2aa>
 8011216:	69fb      	ldr	r3, [r7, #28]
 8011218:	089b      	lsrs	r3, r3, #2
 801121a:	f003 0301 	and.w	r3, r3, #1
 801121e:	2b00      	cmp	r3, #0
 8011220:	d103      	bne.n	801122a <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8011222:	6878      	ldr	r0, [r7, #4]
 8011224:	f000 feeb 	bl	8011ffe <I2C_SlaveReceive_RXNE>
 8011228:	e014      	b.n	8011254 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801122a:	69fb      	ldr	r3, [r7, #28]
 801122c:	089b      	lsrs	r3, r3, #2
 801122e:	f003 0301 	and.w	r3, r3, #1
 8011232:	2b00      	cmp	r3, #0
 8011234:	d00e      	beq.n	8011254 <HAL_I2C_EV_IRQHandler+0x2d4>
 8011236:	697b      	ldr	r3, [r7, #20]
 8011238:	0a5b      	lsrs	r3, r3, #9
 801123a:	f003 0301 	and.w	r3, r3, #1
 801123e:	2b00      	cmp	r3, #0
 8011240:	d008      	beq.n	8011254 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8011242:	6878      	ldr	r0, [r7, #4]
 8011244:	f000 ff19 	bl	801207a <I2C_SlaveReceive_BTF>
 8011248:	e004      	b.n	8011254 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 801124a:	bf00      	nop
 801124c:	e002      	b.n	8011254 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801124e:	bf00      	nop
 8011250:	e000      	b.n	8011254 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8011252:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8011254:	3720      	adds	r7, #32
 8011256:	46bd      	mov	sp, r7
 8011258:	bd80      	pop	{r7, pc}

0801125a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801125a:	b580      	push	{r7, lr}
 801125c:	b08a      	sub	sp, #40	; 0x28
 801125e:	af00      	add	r7, sp, #0
 8011260:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	695b      	ldr	r3, [r3, #20]
 8011268:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	685b      	ldr	r3, [r3, #4]
 8011270:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8011272:	2300      	movs	r3, #0
 8011274:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801127c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801127e:	6a3b      	ldr	r3, [r7, #32]
 8011280:	0a1b      	lsrs	r3, r3, #8
 8011282:	f003 0301 	and.w	r3, r3, #1
 8011286:	2b00      	cmp	r3, #0
 8011288:	d00e      	beq.n	80112a8 <HAL_I2C_ER_IRQHandler+0x4e>
 801128a:	69fb      	ldr	r3, [r7, #28]
 801128c:	0a1b      	lsrs	r3, r3, #8
 801128e:	f003 0301 	and.w	r3, r3, #1
 8011292:	2b00      	cmp	r3, #0
 8011294:	d008      	beq.n	80112a8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8011296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011298:	f043 0301 	orr.w	r3, r3, #1
 801129c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80112a6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80112a8:	6a3b      	ldr	r3, [r7, #32]
 80112aa:	0a5b      	lsrs	r3, r3, #9
 80112ac:	f003 0301 	and.w	r3, r3, #1
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d00e      	beq.n	80112d2 <HAL_I2C_ER_IRQHandler+0x78>
 80112b4:	69fb      	ldr	r3, [r7, #28]
 80112b6:	0a1b      	lsrs	r3, r3, #8
 80112b8:	f003 0301 	and.w	r3, r3, #1
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d008      	beq.n	80112d2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80112c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c2:	f043 0302 	orr.w	r3, r3, #2
 80112c6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80112d0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80112d2:	6a3b      	ldr	r3, [r7, #32]
 80112d4:	0a9b      	lsrs	r3, r3, #10
 80112d6:	f003 0301 	and.w	r3, r3, #1
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d03f      	beq.n	801135e <HAL_I2C_ER_IRQHandler+0x104>
 80112de:	69fb      	ldr	r3, [r7, #28]
 80112e0:	0a1b      	lsrs	r3, r3, #8
 80112e2:	f003 0301 	and.w	r3, r3, #1
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d039      	beq.n	801135e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80112ea:	7efb      	ldrb	r3, [r7, #27]
 80112ec:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80112f2:	b29b      	uxth	r3, r3
 80112f4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80112fc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011302:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8011304:	7ebb      	ldrb	r3, [r7, #26]
 8011306:	2b20      	cmp	r3, #32
 8011308:	d112      	bne.n	8011330 <HAL_I2C_ER_IRQHandler+0xd6>
 801130a:	697b      	ldr	r3, [r7, #20]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d10f      	bne.n	8011330 <HAL_I2C_ER_IRQHandler+0xd6>
 8011310:	7cfb      	ldrb	r3, [r7, #19]
 8011312:	2b21      	cmp	r3, #33	; 0x21
 8011314:	d008      	beq.n	8011328 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8011316:	7cfb      	ldrb	r3, [r7, #19]
 8011318:	2b29      	cmp	r3, #41	; 0x29
 801131a:	d005      	beq.n	8011328 <HAL_I2C_ER_IRQHandler+0xce>
 801131c:	7cfb      	ldrb	r3, [r7, #19]
 801131e:	2b28      	cmp	r3, #40	; 0x28
 8011320:	d106      	bne.n	8011330 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	2b21      	cmp	r3, #33	; 0x21
 8011326:	d103      	bne.n	8011330 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8011328:	6878      	ldr	r0, [r7, #4]
 801132a:	f001 f83d 	bl	80123a8 <I2C_Slave_AF>
 801132e:	e016      	b.n	801135e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8011338:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 801133a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801133c:	f043 0304 	orr.w	r3, r3, #4
 8011340:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8011342:	7efb      	ldrb	r3, [r7, #27]
 8011344:	2b10      	cmp	r3, #16
 8011346:	d002      	beq.n	801134e <HAL_I2C_ER_IRQHandler+0xf4>
 8011348:	7efb      	ldrb	r3, [r7, #27]
 801134a:	2b40      	cmp	r3, #64	; 0x40
 801134c:	d107      	bne.n	801135e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	681a      	ldr	r2, [r3, #0]
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801135c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801135e:	6a3b      	ldr	r3, [r7, #32]
 8011360:	0adb      	lsrs	r3, r3, #11
 8011362:	f003 0301 	and.w	r3, r3, #1
 8011366:	2b00      	cmp	r3, #0
 8011368:	d00e      	beq.n	8011388 <HAL_I2C_ER_IRQHandler+0x12e>
 801136a:	69fb      	ldr	r3, [r7, #28]
 801136c:	0a1b      	lsrs	r3, r3, #8
 801136e:	f003 0301 	and.w	r3, r3, #1
 8011372:	2b00      	cmp	r3, #0
 8011374:	d008      	beq.n	8011388 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8011376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011378:	f043 0308 	orr.w	r3, r3, #8
 801137c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8011386:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8011388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801138a:	2b00      	cmp	r3, #0
 801138c:	d008      	beq.n	80113a0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011394:	431a      	orrs	r2, r3
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 801139a:	6878      	ldr	r0, [r7, #4]
 801139c:	f001 f874 	bl	8012488 <I2C_ITError>
  }
}
 80113a0:	bf00      	nop
 80113a2:	3728      	adds	r7, #40	; 0x28
 80113a4:	46bd      	mov	sp, r7
 80113a6:	bd80      	pop	{r7, pc}

080113a8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80113a8:	b480      	push	{r7}
 80113aa:	b083      	sub	sp, #12
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80113b0:	bf00      	nop
 80113b2:	370c      	adds	r7, #12
 80113b4:	46bd      	mov	sp, r7
 80113b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ba:	4770      	bx	lr

080113bc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80113bc:	b480      	push	{r7}
 80113be:	b083      	sub	sp, #12
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80113c4:	bf00      	nop
 80113c6:	370c      	adds	r7, #12
 80113c8:	46bd      	mov	sp, r7
 80113ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ce:	4770      	bx	lr

080113d0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80113d0:	b480      	push	{r7}
 80113d2:	b083      	sub	sp, #12
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80113d8:	bf00      	nop
 80113da:	370c      	adds	r7, #12
 80113dc:	46bd      	mov	sp, r7
 80113de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e2:	4770      	bx	lr

080113e4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80113e4:	b480      	push	{r7}
 80113e6:	b083      	sub	sp, #12
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]
 80113ec:	460b      	mov	r3, r1
 80113ee:	70fb      	strb	r3, [r7, #3]
 80113f0:	4613      	mov	r3, r2
 80113f2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80113f4:	bf00      	nop
 80113f6:	370c      	adds	r7, #12
 80113f8:	46bd      	mov	sp, r7
 80113fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fe:	4770      	bx	lr

08011400 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011400:	b480      	push	{r7}
 8011402:	b083      	sub	sp, #12
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8011408:	bf00      	nop
 801140a:	370c      	adds	r7, #12
 801140c:	46bd      	mov	sp, r7
 801140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011412:	4770      	bx	lr

08011414 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011414:	b480      	push	{r7}
 8011416:	b083      	sub	sp, #12
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 801141c:	bf00      	nop
 801141e:	370c      	adds	r7, #12
 8011420:	46bd      	mov	sp, r7
 8011422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011426:	4770      	bx	lr

08011428 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011428:	b480      	push	{r7}
 801142a:	b083      	sub	sp, #12
 801142c:	af00      	add	r7, sp, #0
 801142e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8011430:	bf00      	nop
 8011432:	370c      	adds	r7, #12
 8011434:	46bd      	mov	sp, r7
 8011436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143a:	4770      	bx	lr

0801143c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801143c:	b480      	push	{r7}
 801143e:	b083      	sub	sp, #12
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8011444:	bf00      	nop
 8011446:	370c      	adds	r7, #12
 8011448:	46bd      	mov	sp, r7
 801144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801144e:	4770      	bx	lr

08011450 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011450:	b480      	push	{r7}
 8011452:	b083      	sub	sp, #12
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8011458:	bf00      	nop
 801145a:	370c      	adds	r7, #12
 801145c:	46bd      	mov	sp, r7
 801145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011462:	4770      	bx	lr

08011464 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b084      	sub	sp, #16
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011472:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801147a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011480:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011486:	2b00      	cmp	r3, #0
 8011488:	d150      	bne.n	801152c <I2C_MasterTransmit_TXE+0xc8>
 801148a:	7bfb      	ldrb	r3, [r7, #15]
 801148c:	2b21      	cmp	r3, #33	; 0x21
 801148e:	d14d      	bne.n	801152c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	2b08      	cmp	r3, #8
 8011494:	d01d      	beq.n	80114d2 <I2C_MasterTransmit_TXE+0x6e>
 8011496:	68bb      	ldr	r3, [r7, #8]
 8011498:	2b20      	cmp	r3, #32
 801149a:	d01a      	beq.n	80114d2 <I2C_MasterTransmit_TXE+0x6e>
 801149c:	68bb      	ldr	r3, [r7, #8]
 801149e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80114a2:	d016      	beq.n	80114d2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	685a      	ldr	r2, [r3, #4]
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80114b2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	2211      	movs	r2, #17
 80114b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	2200      	movs	r2, #0
 80114be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	2220      	movs	r2, #32
 80114c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80114ca:	6878      	ldr	r0, [r7, #4]
 80114cc:	f7ff ff6c 	bl	80113a8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80114d0:	e060      	b.n	8011594 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	685a      	ldr	r2, [r3, #4]
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80114e0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	681a      	ldr	r2, [r3, #0]
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80114f0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	2200      	movs	r2, #0
 80114f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	2220      	movs	r2, #32
 80114fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011506:	b2db      	uxtb	r3, r3
 8011508:	2b40      	cmp	r3, #64	; 0x40
 801150a:	d107      	bne.n	801151c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	2200      	movs	r2, #0
 8011510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8011514:	6878      	ldr	r0, [r7, #4]
 8011516:	f7ff ff7d 	bl	8011414 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801151a:	e03b      	b.n	8011594 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	2200      	movs	r2, #0
 8011520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8011524:	6878      	ldr	r0, [r7, #4]
 8011526:	f7ff ff3f 	bl	80113a8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801152a:	e033      	b.n	8011594 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 801152c:	7bfb      	ldrb	r3, [r7, #15]
 801152e:	2b21      	cmp	r3, #33	; 0x21
 8011530:	d005      	beq.n	801153e <I2C_MasterTransmit_TXE+0xda>
 8011532:	7bbb      	ldrb	r3, [r7, #14]
 8011534:	2b40      	cmp	r3, #64	; 0x40
 8011536:	d12d      	bne.n	8011594 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8011538:	7bfb      	ldrb	r3, [r7, #15]
 801153a:	2b22      	cmp	r3, #34	; 0x22
 801153c:	d12a      	bne.n	8011594 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011542:	b29b      	uxth	r3, r3
 8011544:	2b00      	cmp	r3, #0
 8011546:	d108      	bne.n	801155a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	685a      	ldr	r2, [r3, #4]
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011556:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8011558:	e01c      	b.n	8011594 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011560:	b2db      	uxtb	r3, r3
 8011562:	2b40      	cmp	r3, #64	; 0x40
 8011564:	d103      	bne.n	801156e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8011566:	6878      	ldr	r0, [r7, #4]
 8011568:	f000 f880 	bl	801166c <I2C_MemoryTransmit_TXE_BTF>
}
 801156c:	e012      	b.n	8011594 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011572:	781a      	ldrb	r2, [r3, #0]
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801157e:	1c5a      	adds	r2, r3, #1
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011588:	b29b      	uxth	r3, r3
 801158a:	3b01      	subs	r3, #1
 801158c:	b29a      	uxth	r2, r3
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8011592:	e7ff      	b.n	8011594 <I2C_MasterTransmit_TXE+0x130>
 8011594:	bf00      	nop
 8011596:	3710      	adds	r7, #16
 8011598:	46bd      	mov	sp, r7
 801159a:	bd80      	pop	{r7, pc}

0801159c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801159c:	b580      	push	{r7, lr}
 801159e:	b084      	sub	sp, #16
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115a8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80115b0:	b2db      	uxtb	r3, r3
 80115b2:	2b21      	cmp	r3, #33	; 0x21
 80115b4:	d156      	bne.n	8011664 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80115ba:	b29b      	uxth	r3, r3
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d012      	beq.n	80115e6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115c4:	781a      	ldrb	r2, [r3, #0]
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115d0:	1c5a      	adds	r2, r3, #1
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80115da:	b29b      	uxth	r3, r3
 80115dc:	3b01      	subs	r3, #1
 80115de:	b29a      	uxth	r2, r3
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80115e4:	e03e      	b.n	8011664 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	2b08      	cmp	r3, #8
 80115ea:	d01d      	beq.n	8011628 <I2C_MasterTransmit_BTF+0x8c>
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	2b20      	cmp	r3, #32
 80115f0:	d01a      	beq.n	8011628 <I2C_MasterTransmit_BTF+0x8c>
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80115f8:	d016      	beq.n	8011628 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	685a      	ldr	r2, [r3, #4]
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8011608:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	2211      	movs	r2, #17
 801160e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	2200      	movs	r2, #0
 8011614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	2220      	movs	r2, #32
 801161c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8011620:	6878      	ldr	r0, [r7, #4]
 8011622:	f7ff fec1 	bl	80113a8 <HAL_I2C_MasterTxCpltCallback>
}
 8011626:	e01d      	b.n	8011664 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	685a      	ldr	r2, [r3, #4]
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8011636:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	681a      	ldr	r2, [r3, #0]
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011646:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	2200      	movs	r2, #0
 801164c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	2220      	movs	r2, #32
 8011652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	2200      	movs	r2, #0
 801165a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 801165e:	6878      	ldr	r0, [r7, #4]
 8011660:	f7ff fea2 	bl	80113a8 <HAL_I2C_MasterTxCpltCallback>
}
 8011664:	bf00      	nop
 8011666:	3710      	adds	r7, #16
 8011668:	46bd      	mov	sp, r7
 801166a:	bd80      	pop	{r7, pc}

0801166c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 801166c:	b580      	push	{r7, lr}
 801166e:	b084      	sub	sp, #16
 8011670:	af00      	add	r7, sp, #0
 8011672:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801167a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011680:	2b00      	cmp	r3, #0
 8011682:	d11d      	bne.n	80116c0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011688:	2b01      	cmp	r3, #1
 801168a:	d10b      	bne.n	80116a4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011690:	b2da      	uxtb	r2, r3
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801169c:	1c9a      	adds	r2, r3, #2
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80116a2:	e06e      	b.n	8011782 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80116a8:	b29b      	uxth	r3, r3
 80116aa:	121b      	asrs	r3, r3, #8
 80116ac:	b2da      	uxtb	r2, r3
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80116b8:	1c5a      	adds	r2, r3, #1
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80116be:	e060      	b.n	8011782 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80116c4:	2b01      	cmp	r3, #1
 80116c6:	d10b      	bne.n	80116e0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80116cc:	b2da      	uxtb	r2, r3
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80116d8:	1c5a      	adds	r2, r3, #1
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80116de:	e050      	b.n	8011782 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80116e4:	2b02      	cmp	r3, #2
 80116e6:	d14c      	bne.n	8011782 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80116e8:	7bfb      	ldrb	r3, [r7, #15]
 80116ea:	2b22      	cmp	r3, #34	; 0x22
 80116ec:	d108      	bne.n	8011700 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	681a      	ldr	r2, [r3, #0]
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80116fc:	601a      	str	r2, [r3, #0]
}
 80116fe:	e040      	b.n	8011782 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011704:	b29b      	uxth	r3, r3
 8011706:	2b00      	cmp	r3, #0
 8011708:	d015      	beq.n	8011736 <I2C_MemoryTransmit_TXE_BTF+0xca>
 801170a:	7bfb      	ldrb	r3, [r7, #15]
 801170c:	2b21      	cmp	r3, #33	; 0x21
 801170e:	d112      	bne.n	8011736 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011714:	781a      	ldrb	r2, [r3, #0]
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011720:	1c5a      	adds	r2, r3, #1
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801172a:	b29b      	uxth	r3, r3
 801172c:	3b01      	subs	r3, #1
 801172e:	b29a      	uxth	r2, r3
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8011734:	e025      	b.n	8011782 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801173a:	b29b      	uxth	r3, r3
 801173c:	2b00      	cmp	r3, #0
 801173e:	d120      	bne.n	8011782 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8011740:	7bfb      	ldrb	r3, [r7, #15]
 8011742:	2b21      	cmp	r3, #33	; 0x21
 8011744:	d11d      	bne.n	8011782 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	685a      	ldr	r2, [r3, #4]
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8011754:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	681a      	ldr	r2, [r3, #0]
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011764:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	2200      	movs	r2, #0
 801176a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	2220      	movs	r2, #32
 8011770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	2200      	movs	r2, #0
 8011778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 801177c:	6878      	ldr	r0, [r7, #4]
 801177e:	f7ff fe49 	bl	8011414 <HAL_I2C_MemTxCpltCallback>
}
 8011782:	bf00      	nop
 8011784:	3710      	adds	r7, #16
 8011786:	46bd      	mov	sp, r7
 8011788:	bd80      	pop	{r7, pc}

0801178a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801178a:	b580      	push	{r7, lr}
 801178c:	b084      	sub	sp, #16
 801178e:	af00      	add	r7, sp, #0
 8011790:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011798:	b2db      	uxtb	r3, r3
 801179a:	2b22      	cmp	r3, #34	; 0x22
 801179c:	f040 80a2 	bne.w	80118e4 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80117a4:	b29b      	uxth	r3, r3
 80117a6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	2b03      	cmp	r3, #3
 80117ac:	d921      	bls.n	80117f2 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	691a      	ldr	r2, [r3, #16]
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117b8:	b2d2      	uxtb	r2, r2
 80117ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117c0:	1c5a      	adds	r2, r3, #1
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80117ca:	b29b      	uxth	r3, r3
 80117cc:	3b01      	subs	r3, #1
 80117ce:	b29a      	uxth	r2, r3
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80117d8:	b29b      	uxth	r3, r3
 80117da:	2b03      	cmp	r3, #3
 80117dc:	f040 8082 	bne.w	80118e4 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	685a      	ldr	r2, [r3, #4]
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80117ee:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80117f0:	e078      	b.n	80118e4 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117f6:	2b02      	cmp	r3, #2
 80117f8:	d074      	beq.n	80118e4 <I2C_MasterReceive_RXNE+0x15a>
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	2b01      	cmp	r3, #1
 80117fe:	d002      	beq.n	8011806 <I2C_MasterReceive_RXNE+0x7c>
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d16e      	bne.n	80118e4 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8011806:	6878      	ldr	r0, [r7, #4]
 8011808:	f001 f92a 	bl	8012a60 <I2C_WaitOnSTOPRequestThroughIT>
 801180c:	4603      	mov	r3, r0
 801180e:	2b00      	cmp	r3, #0
 8011810:	d142      	bne.n	8011898 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	681a      	ldr	r2, [r3, #0]
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011820:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	685a      	ldr	r2, [r3, #4]
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8011830:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	691a      	ldr	r2, [r3, #16]
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801183c:	b2d2      	uxtb	r2, r2
 801183e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011844:	1c5a      	adds	r2, r3, #1
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801184e:	b29b      	uxth	r3, r3
 8011850:	3b01      	subs	r3, #1
 8011852:	b29a      	uxth	r2, r3
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	2220      	movs	r2, #32
 801185c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011866:	b2db      	uxtb	r3, r3
 8011868:	2b40      	cmp	r3, #64	; 0x40
 801186a:	d10a      	bne.n	8011882 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	2200      	movs	r2, #0
 8011870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	2200      	movs	r2, #0
 8011878:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 801187a:	6878      	ldr	r0, [r7, #4]
 801187c:	f7ff fdd4 	bl	8011428 <HAL_I2C_MemRxCpltCallback>
}
 8011880:	e030      	b.n	80118e4 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	2200      	movs	r2, #0
 8011886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	2212      	movs	r2, #18
 801188e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8011890:	6878      	ldr	r0, [r7, #4]
 8011892:	f7fb fb41 	bl	800cf18 <HAL_I2C_MasterRxCpltCallback>
}
 8011896:	e025      	b.n	80118e4 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	685a      	ldr	r2, [r3, #4]
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80118a6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	691a      	ldr	r2, [r3, #16]
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118b2:	b2d2      	uxtb	r2, r2
 80118b4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118ba:	1c5a      	adds	r2, r3, #1
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80118c4:	b29b      	uxth	r3, r3
 80118c6:	3b01      	subs	r3, #1
 80118c8:	b29a      	uxth	r2, r3
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	2220      	movs	r2, #32
 80118d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	2200      	movs	r2, #0
 80118da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80118de:	6878      	ldr	r0, [r7, #4]
 80118e0:	f7ff fdac 	bl	801143c <HAL_I2C_ErrorCallback>
}
 80118e4:	bf00      	nop
 80118e6:	3710      	adds	r7, #16
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd80      	pop	{r7, pc}

080118ec <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b084      	sub	sp, #16
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118f8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80118fe:	b29b      	uxth	r3, r3
 8011900:	2b04      	cmp	r3, #4
 8011902:	d11b      	bne.n	801193c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	685a      	ldr	r2, [r3, #4]
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011912:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	691a      	ldr	r2, [r3, #16]
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801191e:	b2d2      	uxtb	r2, r2
 8011920:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011926:	1c5a      	adds	r2, r3, #1
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011930:	b29b      	uxth	r3, r3
 8011932:	3b01      	subs	r3, #1
 8011934:	b29a      	uxth	r2, r3
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 801193a:	e0bd      	b.n	8011ab8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011940:	b29b      	uxth	r3, r3
 8011942:	2b03      	cmp	r3, #3
 8011944:	d129      	bne.n	801199a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	685a      	ldr	r2, [r3, #4]
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011954:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	2b04      	cmp	r3, #4
 801195a:	d00a      	beq.n	8011972 <I2C_MasterReceive_BTF+0x86>
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	2b02      	cmp	r3, #2
 8011960:	d007      	beq.n	8011972 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	681a      	ldr	r2, [r3, #0]
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011970:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	691a      	ldr	r2, [r3, #16]
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801197c:	b2d2      	uxtb	r2, r2
 801197e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011984:	1c5a      	adds	r2, r3, #1
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801198e:	b29b      	uxth	r3, r3
 8011990:	3b01      	subs	r3, #1
 8011992:	b29a      	uxth	r2, r3
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8011998:	e08e      	b.n	8011ab8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801199e:	b29b      	uxth	r3, r3
 80119a0:	2b02      	cmp	r3, #2
 80119a2:	d176      	bne.n	8011a92 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	2b01      	cmp	r3, #1
 80119a8:	d002      	beq.n	80119b0 <I2C_MasterReceive_BTF+0xc4>
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	2b10      	cmp	r3, #16
 80119ae:	d108      	bne.n	80119c2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	681a      	ldr	r2, [r3, #0]
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80119be:	601a      	str	r2, [r3, #0]
 80119c0:	e019      	b.n	80119f6 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	2b04      	cmp	r3, #4
 80119c6:	d002      	beq.n	80119ce <I2C_MasterReceive_BTF+0xe2>
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	2b02      	cmp	r3, #2
 80119cc:	d108      	bne.n	80119e0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	681a      	ldr	r2, [r3, #0]
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80119dc:	601a      	str	r2, [r3, #0]
 80119de:	e00a      	b.n	80119f6 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	2b10      	cmp	r3, #16
 80119e4:	d007      	beq.n	80119f6 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	681a      	ldr	r2, [r3, #0]
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80119f4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	691a      	ldr	r2, [r3, #16]
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a00:	b2d2      	uxtb	r2, r2
 8011a02:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a08:	1c5a      	adds	r2, r3, #1
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011a12:	b29b      	uxth	r3, r3
 8011a14:	3b01      	subs	r3, #1
 8011a16:	b29a      	uxth	r2, r3
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	691a      	ldr	r2, [r3, #16]
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a26:	b2d2      	uxtb	r2, r2
 8011a28:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a2e:	1c5a      	adds	r2, r3, #1
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011a38:	b29b      	uxth	r3, r3
 8011a3a:	3b01      	subs	r3, #1
 8011a3c:	b29a      	uxth	r2, r3
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	685a      	ldr	r2, [r3, #4]
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8011a50:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	2220      	movs	r2, #32
 8011a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011a60:	b2db      	uxtb	r3, r3
 8011a62:	2b40      	cmp	r3, #64	; 0x40
 8011a64:	d10a      	bne.n	8011a7c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	2200      	movs	r2, #0
 8011a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	2200      	movs	r2, #0
 8011a72:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8011a74:	6878      	ldr	r0, [r7, #4]
 8011a76:	f7ff fcd7 	bl	8011428 <HAL_I2C_MemRxCpltCallback>
}
 8011a7a:	e01d      	b.n	8011ab8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	2200      	movs	r2, #0
 8011a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	2212      	movs	r2, #18
 8011a88:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8011a8a:	6878      	ldr	r0, [r7, #4]
 8011a8c:	f7fb fa44 	bl	800cf18 <HAL_I2C_MasterRxCpltCallback>
}
 8011a90:	e012      	b.n	8011ab8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	691a      	ldr	r2, [r3, #16]
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a9c:	b2d2      	uxtb	r2, r2
 8011a9e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011aa4:	1c5a      	adds	r2, r3, #1
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011aae:	b29b      	uxth	r3, r3
 8011ab0:	3b01      	subs	r3, #1
 8011ab2:	b29a      	uxth	r2, r3
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8011ab8:	bf00      	nop
 8011aba:	3710      	adds	r7, #16
 8011abc:	46bd      	mov	sp, r7
 8011abe:	bd80      	pop	{r7, pc}

08011ac0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8011ac0:	b480      	push	{r7}
 8011ac2:	b083      	sub	sp, #12
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011ace:	b2db      	uxtb	r3, r3
 8011ad0:	2b40      	cmp	r3, #64	; 0x40
 8011ad2:	d117      	bne.n	8011b04 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d109      	bne.n	8011af0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ae0:	b2db      	uxtb	r3, r3
 8011ae2:	461a      	mov	r2, r3
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8011aec:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8011aee:	e067      	b.n	8011bc0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011af4:	b2db      	uxtb	r3, r3
 8011af6:	f043 0301 	orr.w	r3, r3, #1
 8011afa:	b2da      	uxtb	r2, r3
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	611a      	str	r2, [r3, #16]
}
 8011b02:	e05d      	b.n	8011bc0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	691b      	ldr	r3, [r3, #16]
 8011b08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011b0c:	d133      	bne.n	8011b76 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011b14:	b2db      	uxtb	r3, r3
 8011b16:	2b21      	cmp	r3, #33	; 0x21
 8011b18:	d109      	bne.n	8011b2e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b1e:	b2db      	uxtb	r3, r3
 8011b20:	461a      	mov	r2, r3
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8011b2a:	611a      	str	r2, [r3, #16]
 8011b2c:	e008      	b.n	8011b40 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b32:	b2db      	uxtb	r3, r3
 8011b34:	f043 0301 	orr.w	r3, r3, #1
 8011b38:	b2da      	uxtb	r2, r3
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d004      	beq.n	8011b52 <I2C_Master_SB+0x92>
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d108      	bne.n	8011b64 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d032      	beq.n	8011bc0 <I2C_Master_SB+0x100>
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d02d      	beq.n	8011bc0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	685a      	ldr	r2, [r3, #4]
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011b72:	605a      	str	r2, [r3, #4]
}
 8011b74:	e024      	b.n	8011bc0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d10e      	bne.n	8011b9c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b82:	b29b      	uxth	r3, r3
 8011b84:	11db      	asrs	r3, r3, #7
 8011b86:	b2db      	uxtb	r3, r3
 8011b88:	f003 0306 	and.w	r3, r3, #6
 8011b8c:	b2db      	uxtb	r3, r3
 8011b8e:	f063 030f 	orn	r3, r3, #15
 8011b92:	b2da      	uxtb	r2, r3
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	611a      	str	r2, [r3, #16]
}
 8011b9a:	e011      	b.n	8011bc0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ba0:	2b01      	cmp	r3, #1
 8011ba2:	d10d      	bne.n	8011bc0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ba8:	b29b      	uxth	r3, r3
 8011baa:	11db      	asrs	r3, r3, #7
 8011bac:	b2db      	uxtb	r3, r3
 8011bae:	f003 0306 	and.w	r3, r3, #6
 8011bb2:	b2db      	uxtb	r3, r3
 8011bb4:	f063 030e 	orn	r3, r3, #14
 8011bb8:	b2da      	uxtb	r2, r3
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	611a      	str	r2, [r3, #16]
}
 8011bc0:	bf00      	nop
 8011bc2:	370c      	adds	r7, #12
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bca:	4770      	bx	lr

08011bcc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8011bcc:	b480      	push	{r7}
 8011bce:	b083      	sub	sp, #12
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011bd8:	b2da      	uxtb	r2, r3
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d103      	bne.n	8011bf0 <I2C_Master_ADD10+0x24>
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d011      	beq.n	8011c14 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d104      	bne.n	8011c04 <I2C_Master_ADD10+0x38>
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d007      	beq.n	8011c14 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	685a      	ldr	r2, [r3, #4]
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011c12:	605a      	str	r2, [r3, #4]
    }
  }
}
 8011c14:	bf00      	nop
 8011c16:	370c      	adds	r7, #12
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1e:	4770      	bx	lr

08011c20 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8011c20:	b480      	push	{r7}
 8011c22:	b091      	sub	sp, #68	; 0x44
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011c2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c36:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c3c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011c44:	b2db      	uxtb	r3, r3
 8011c46:	2b22      	cmp	r3, #34	; 0x22
 8011c48:	f040 8169 	bne.w	8011f1e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d10f      	bne.n	8011c74 <I2C_Master_ADDR+0x54>
 8011c54:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011c58:	2b40      	cmp	r3, #64	; 0x40
 8011c5a:	d10b      	bne.n	8011c74 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	633b      	str	r3, [r7, #48]	; 0x30
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	695b      	ldr	r3, [r3, #20]
 8011c66:	633b      	str	r3, [r7, #48]	; 0x30
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	699b      	ldr	r3, [r3, #24]
 8011c6e:	633b      	str	r3, [r7, #48]	; 0x30
 8011c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c72:	e160      	b.n	8011f36 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d11d      	bne.n	8011cb8 <I2C_Master_ADDR+0x98>
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	691b      	ldr	r3, [r3, #16]
 8011c80:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8011c84:	d118      	bne.n	8011cb8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011c86:	2300      	movs	r3, #0
 8011c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	695b      	ldr	r3, [r3, #20]
 8011c90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	699b      	ldr	r3, [r3, #24]
 8011c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	681a      	ldr	r2, [r3, #0]
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011caa:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011cb0:	1c5a      	adds	r2, r3, #1
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	651a      	str	r2, [r3, #80]	; 0x50
 8011cb6:	e13e      	b.n	8011f36 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011cbc:	b29b      	uxth	r3, r3
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d113      	bne.n	8011cea <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	695b      	ldr	r3, [r3, #20]
 8011ccc:	62bb      	str	r3, [r7, #40]	; 0x28
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	699b      	ldr	r3, [r3, #24]
 8011cd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8011cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	681a      	ldr	r2, [r3, #0]
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011ce6:	601a      	str	r2, [r3, #0]
 8011ce8:	e115      	b.n	8011f16 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011cee:	b29b      	uxth	r3, r3
 8011cf0:	2b01      	cmp	r3, #1
 8011cf2:	f040 808a 	bne.w	8011e0a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8011cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cf8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8011cfc:	d137      	bne.n	8011d6e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	681a      	ldr	r2, [r3, #0]
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011d0c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	685b      	ldr	r3, [r3, #4]
 8011d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011d18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011d1c:	d113      	bne.n	8011d46 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	681a      	ldr	r2, [r3, #0]
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011d2c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011d2e:	2300      	movs	r3, #0
 8011d30:	627b      	str	r3, [r7, #36]	; 0x24
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	695b      	ldr	r3, [r3, #20]
 8011d38:	627b      	str	r3, [r7, #36]	; 0x24
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	699b      	ldr	r3, [r3, #24]
 8011d40:	627b      	str	r3, [r7, #36]	; 0x24
 8011d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d44:	e0e7      	b.n	8011f16 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011d46:	2300      	movs	r3, #0
 8011d48:	623b      	str	r3, [r7, #32]
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	695b      	ldr	r3, [r3, #20]
 8011d50:	623b      	str	r3, [r7, #32]
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	699b      	ldr	r3, [r3, #24]
 8011d58:	623b      	str	r3, [r7, #32]
 8011d5a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	681a      	ldr	r2, [r3, #0]
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011d6a:	601a      	str	r2, [r3, #0]
 8011d6c:	e0d3      	b.n	8011f16 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8011d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d70:	2b08      	cmp	r3, #8
 8011d72:	d02e      	beq.n	8011dd2 <I2C_Master_ADDR+0x1b2>
 8011d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d76:	2b20      	cmp	r3, #32
 8011d78:	d02b      	beq.n	8011dd2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8011d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d7c:	2b12      	cmp	r3, #18
 8011d7e:	d102      	bne.n	8011d86 <I2C_Master_ADDR+0x166>
 8011d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d82:	2b01      	cmp	r3, #1
 8011d84:	d125      	bne.n	8011dd2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8011d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d88:	2b04      	cmp	r3, #4
 8011d8a:	d00e      	beq.n	8011daa <I2C_Master_ADDR+0x18a>
 8011d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d8e:	2b02      	cmp	r3, #2
 8011d90:	d00b      	beq.n	8011daa <I2C_Master_ADDR+0x18a>
 8011d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d94:	2b10      	cmp	r3, #16
 8011d96:	d008      	beq.n	8011daa <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	681a      	ldr	r2, [r3, #0]
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011da6:	601a      	str	r2, [r3, #0]
 8011da8:	e007      	b.n	8011dba <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	681a      	ldr	r2, [r3, #0]
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011db8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011dba:	2300      	movs	r3, #0
 8011dbc:	61fb      	str	r3, [r7, #28]
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	695b      	ldr	r3, [r3, #20]
 8011dc4:	61fb      	str	r3, [r7, #28]
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	699b      	ldr	r3, [r3, #24]
 8011dcc:	61fb      	str	r3, [r7, #28]
 8011dce:	69fb      	ldr	r3, [r7, #28]
 8011dd0:	e0a1      	b.n	8011f16 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	681a      	ldr	r2, [r3, #0]
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011de0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011de2:	2300      	movs	r3, #0
 8011de4:	61bb      	str	r3, [r7, #24]
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	695b      	ldr	r3, [r3, #20]
 8011dec:	61bb      	str	r3, [r7, #24]
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	699b      	ldr	r3, [r3, #24]
 8011df4:	61bb      	str	r3, [r7, #24]
 8011df6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	681a      	ldr	r2, [r3, #0]
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011e06:	601a      	str	r2, [r3, #0]
 8011e08:	e085      	b.n	8011f16 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011e0e:	b29b      	uxth	r3, r3
 8011e10:	2b02      	cmp	r3, #2
 8011e12:	d14d      	bne.n	8011eb0 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8011e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e16:	2b04      	cmp	r3, #4
 8011e18:	d016      	beq.n	8011e48 <I2C_Master_ADDR+0x228>
 8011e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e1c:	2b02      	cmp	r3, #2
 8011e1e:	d013      	beq.n	8011e48 <I2C_Master_ADDR+0x228>
 8011e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e22:	2b10      	cmp	r3, #16
 8011e24:	d010      	beq.n	8011e48 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	681a      	ldr	r2, [r3, #0]
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011e34:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	681a      	ldr	r2, [r3, #0]
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011e44:	601a      	str	r2, [r3, #0]
 8011e46:	e007      	b.n	8011e58 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	681a      	ldr	r2, [r3, #0]
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011e56:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	685b      	ldr	r3, [r3, #4]
 8011e5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011e62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011e66:	d117      	bne.n	8011e98 <I2C_Master_ADDR+0x278>
 8011e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e6a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8011e6e:	d00b      	beq.n	8011e88 <I2C_Master_ADDR+0x268>
 8011e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e72:	2b01      	cmp	r3, #1
 8011e74:	d008      	beq.n	8011e88 <I2C_Master_ADDR+0x268>
 8011e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e78:	2b08      	cmp	r3, #8
 8011e7a:	d005      	beq.n	8011e88 <I2C_Master_ADDR+0x268>
 8011e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e7e:	2b10      	cmp	r3, #16
 8011e80:	d002      	beq.n	8011e88 <I2C_Master_ADDR+0x268>
 8011e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e84:	2b20      	cmp	r3, #32
 8011e86:	d107      	bne.n	8011e98 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	685a      	ldr	r2, [r3, #4]
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011e96:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011e98:	2300      	movs	r3, #0
 8011e9a:	617b      	str	r3, [r7, #20]
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	695b      	ldr	r3, [r3, #20]
 8011ea2:	617b      	str	r3, [r7, #20]
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	699b      	ldr	r3, [r3, #24]
 8011eaa:	617b      	str	r3, [r7, #20]
 8011eac:	697b      	ldr	r3, [r7, #20]
 8011eae:	e032      	b.n	8011f16 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	681a      	ldr	r2, [r3, #0]
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011ebe:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	685b      	ldr	r3, [r3, #4]
 8011ec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011eca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011ece:	d117      	bne.n	8011f00 <I2C_Master_ADDR+0x2e0>
 8011ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ed2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8011ed6:	d00b      	beq.n	8011ef0 <I2C_Master_ADDR+0x2d0>
 8011ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eda:	2b01      	cmp	r3, #1
 8011edc:	d008      	beq.n	8011ef0 <I2C_Master_ADDR+0x2d0>
 8011ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ee0:	2b08      	cmp	r3, #8
 8011ee2:	d005      	beq.n	8011ef0 <I2C_Master_ADDR+0x2d0>
 8011ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ee6:	2b10      	cmp	r3, #16
 8011ee8:	d002      	beq.n	8011ef0 <I2C_Master_ADDR+0x2d0>
 8011eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eec:	2b20      	cmp	r3, #32
 8011eee:	d107      	bne.n	8011f00 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	685a      	ldr	r2, [r3, #4]
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011efe:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011f00:	2300      	movs	r3, #0
 8011f02:	613b      	str	r3, [r7, #16]
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	695b      	ldr	r3, [r3, #20]
 8011f0a:	613b      	str	r3, [r7, #16]
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	699b      	ldr	r3, [r3, #24]
 8011f12:	613b      	str	r3, [r7, #16]
 8011f14:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	2200      	movs	r2, #0
 8011f1a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8011f1c:	e00b      	b.n	8011f36 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011f1e:	2300      	movs	r3, #0
 8011f20:	60fb      	str	r3, [r7, #12]
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	695b      	ldr	r3, [r3, #20]
 8011f28:	60fb      	str	r3, [r7, #12]
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	699b      	ldr	r3, [r3, #24]
 8011f30:	60fb      	str	r3, [r7, #12]
 8011f32:	68fb      	ldr	r3, [r7, #12]
}
 8011f34:	e7ff      	b.n	8011f36 <I2C_Master_ADDR+0x316>
 8011f36:	bf00      	nop
 8011f38:	3744      	adds	r7, #68	; 0x44
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f40:	4770      	bx	lr

08011f42 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8011f42:	b580      	push	{r7, lr}
 8011f44:	b084      	sub	sp, #16
 8011f46:	af00      	add	r7, sp, #0
 8011f48:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011f50:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011f56:	b29b      	uxth	r3, r3
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d02b      	beq.n	8011fb4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f60:	781a      	ldrb	r2, [r3, #0]
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f6c:	1c5a      	adds	r2, r3, #1
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011f76:	b29b      	uxth	r3, r3
 8011f78:	3b01      	subs	r3, #1
 8011f7a:	b29a      	uxth	r2, r3
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011f84:	b29b      	uxth	r3, r3
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d114      	bne.n	8011fb4 <I2C_SlaveTransmit_TXE+0x72>
 8011f8a:	7bfb      	ldrb	r3, [r7, #15]
 8011f8c:	2b29      	cmp	r3, #41	; 0x29
 8011f8e:	d111      	bne.n	8011fb4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	685a      	ldr	r2, [r3, #4]
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011f9e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	2221      	movs	r2, #33	; 0x21
 8011fa4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	2228      	movs	r2, #40	; 0x28
 8011faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011fae:	6878      	ldr	r0, [r7, #4]
 8011fb0:	f7ff fa04 	bl	80113bc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8011fb4:	bf00      	nop
 8011fb6:	3710      	adds	r7, #16
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	bd80      	pop	{r7, pc}

08011fbc <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8011fbc:	b480      	push	{r7}
 8011fbe:	b083      	sub	sp, #12
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011fc8:	b29b      	uxth	r3, r3
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d011      	beq.n	8011ff2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fd2:	781a      	ldrb	r2, [r3, #0]
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fde:	1c5a      	adds	r2, r3, #1
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011fe8:	b29b      	uxth	r3, r3
 8011fea:	3b01      	subs	r3, #1
 8011fec:	b29a      	uxth	r2, r3
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8011ff2:	bf00      	nop
 8011ff4:	370c      	adds	r7, #12
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffc:	4770      	bx	lr

08011ffe <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8011ffe:	b580      	push	{r7, lr}
 8012000:	b084      	sub	sp, #16
 8012002:	af00      	add	r7, sp, #0
 8012004:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801200c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012012:	b29b      	uxth	r3, r3
 8012014:	2b00      	cmp	r3, #0
 8012016:	d02c      	beq.n	8012072 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	691a      	ldr	r2, [r3, #16]
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012022:	b2d2      	uxtb	r2, r2
 8012024:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801202a:	1c5a      	adds	r2, r3, #1
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012034:	b29b      	uxth	r3, r3
 8012036:	3b01      	subs	r3, #1
 8012038:	b29a      	uxth	r2, r3
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012042:	b29b      	uxth	r3, r3
 8012044:	2b00      	cmp	r3, #0
 8012046:	d114      	bne.n	8012072 <I2C_SlaveReceive_RXNE+0x74>
 8012048:	7bfb      	ldrb	r3, [r7, #15]
 801204a:	2b2a      	cmp	r3, #42	; 0x2a
 801204c:	d111      	bne.n	8012072 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	685a      	ldr	r2, [r3, #4]
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801205c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	2222      	movs	r2, #34	; 0x22
 8012062:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	2228      	movs	r2, #40	; 0x28
 8012068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801206c:	6878      	ldr	r0, [r7, #4]
 801206e:	f7ff f9af 	bl	80113d0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8012072:	bf00      	nop
 8012074:	3710      	adds	r7, #16
 8012076:	46bd      	mov	sp, r7
 8012078:	bd80      	pop	{r7, pc}

0801207a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 801207a:	b480      	push	{r7}
 801207c:	b083      	sub	sp, #12
 801207e:	af00      	add	r7, sp, #0
 8012080:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012086:	b29b      	uxth	r3, r3
 8012088:	2b00      	cmp	r3, #0
 801208a:	d012      	beq.n	80120b2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	691a      	ldr	r2, [r3, #16]
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012096:	b2d2      	uxtb	r2, r2
 8012098:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801209e:	1c5a      	adds	r2, r3, #1
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80120a8:	b29b      	uxth	r3, r3
 80120aa:	3b01      	subs	r3, #1
 80120ac:	b29a      	uxth	r2, r3
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80120b2:	bf00      	nop
 80120b4:	370c      	adds	r7, #12
 80120b6:	46bd      	mov	sp, r7
 80120b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120bc:	4770      	bx	lr

080120be <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80120be:	b580      	push	{r7, lr}
 80120c0:	b084      	sub	sp, #16
 80120c2:	af00      	add	r7, sp, #0
 80120c4:	6078      	str	r0, [r7, #4]
 80120c6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80120c8:	2300      	movs	r3, #0
 80120ca:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80120d2:	b2db      	uxtb	r3, r3
 80120d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80120d8:	2b28      	cmp	r3, #40	; 0x28
 80120da:	d127      	bne.n	801212c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	685a      	ldr	r2, [r3, #4]
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80120ea:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80120ec:	683b      	ldr	r3, [r7, #0]
 80120ee:	089b      	lsrs	r3, r3, #2
 80120f0:	f003 0301 	and.w	r3, r3, #1
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d101      	bne.n	80120fc <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80120f8:	2301      	movs	r3, #1
 80120fa:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	09db      	lsrs	r3, r3, #7
 8012100:	f003 0301 	and.w	r3, r3, #1
 8012104:	2b00      	cmp	r3, #0
 8012106:	d103      	bne.n	8012110 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	68db      	ldr	r3, [r3, #12]
 801210c:	81bb      	strh	r3, [r7, #12]
 801210e:	e002      	b.n	8012116 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	699b      	ldr	r3, [r3, #24]
 8012114:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	2200      	movs	r2, #0
 801211a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 801211e:	89ba      	ldrh	r2, [r7, #12]
 8012120:	7bfb      	ldrb	r3, [r7, #15]
 8012122:	4619      	mov	r1, r3
 8012124:	6878      	ldr	r0, [r7, #4]
 8012126:	f7ff f95d 	bl	80113e4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 801212a:	e008      	b.n	801213e <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	f06f 0202 	mvn.w	r2, #2
 8012134:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	2200      	movs	r2, #0
 801213a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 801213e:	bf00      	nop
 8012140:	3710      	adds	r7, #16
 8012142:	46bd      	mov	sp, r7
 8012144:	bd80      	pop	{r7, pc}
	...

08012148 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b084      	sub	sp, #16
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012156:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	685a      	ldr	r2, [r3, #4]
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8012166:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8012168:	2300      	movs	r3, #0
 801216a:	60bb      	str	r3, [r7, #8]
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	695b      	ldr	r3, [r3, #20]
 8012172:	60bb      	str	r3, [r7, #8]
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	681a      	ldr	r2, [r3, #0]
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	f042 0201 	orr.w	r2, r2, #1
 8012182:	601a      	str	r2, [r3, #0]
 8012184:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	681a      	ldr	r2, [r3, #0]
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012194:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	685b      	ldr	r3, [r3, #4]
 801219c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80121a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80121a4:	d172      	bne.n	801228c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80121a6:	7bfb      	ldrb	r3, [r7, #15]
 80121a8:	2b22      	cmp	r3, #34	; 0x22
 80121aa:	d002      	beq.n	80121b2 <I2C_Slave_STOPF+0x6a>
 80121ac:	7bfb      	ldrb	r3, [r7, #15]
 80121ae:	2b2a      	cmp	r3, #42	; 0x2a
 80121b0:	d135      	bne.n	801221e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	685b      	ldr	r3, [r3, #4]
 80121ba:	b29a      	uxth	r2, r3
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80121c4:	b29b      	uxth	r3, r3
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d005      	beq.n	80121d6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121ce:	f043 0204 	orr.w	r2, r3, #4
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	685a      	ldr	r2, [r3, #4]
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80121e4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121ea:	4618      	mov	r0, r3
 80121ec:	f7fd fdae 	bl	800fd4c <HAL_DMA_GetState>
 80121f0:	4603      	mov	r3, r0
 80121f2:	2b01      	cmp	r3, #1
 80121f4:	d049      	beq.n	801228a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121fa:	4a69      	ldr	r2, [pc, #420]	; (80123a0 <I2C_Slave_STOPF+0x258>)
 80121fc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012202:	4618      	mov	r0, r3
 8012204:	f7fd fbf6 	bl	800f9f4 <HAL_DMA_Abort_IT>
 8012208:	4603      	mov	r3, r0
 801220a:	2b00      	cmp	r3, #0
 801220c:	d03d      	beq.n	801228a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012214:	687a      	ldr	r2, [r7, #4]
 8012216:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8012218:	4610      	mov	r0, r2
 801221a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801221c:	e035      	b.n	801228a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	685b      	ldr	r3, [r3, #4]
 8012226:	b29a      	uxth	r2, r3
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012230:	b29b      	uxth	r3, r3
 8012232:	2b00      	cmp	r3, #0
 8012234:	d005      	beq.n	8012242 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801223a:	f043 0204 	orr.w	r2, r3, #4
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	685a      	ldr	r2, [r3, #4]
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012250:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012256:	4618      	mov	r0, r3
 8012258:	f7fd fd78 	bl	800fd4c <HAL_DMA_GetState>
 801225c:	4603      	mov	r3, r0
 801225e:	2b01      	cmp	r3, #1
 8012260:	d014      	beq.n	801228c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012266:	4a4e      	ldr	r2, [pc, #312]	; (80123a0 <I2C_Slave_STOPF+0x258>)
 8012268:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801226e:	4618      	mov	r0, r3
 8012270:	f7fd fbc0 	bl	800f9f4 <HAL_DMA_Abort_IT>
 8012274:	4603      	mov	r3, r0
 8012276:	2b00      	cmp	r3, #0
 8012278:	d008      	beq.n	801228c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801227e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012280:	687a      	ldr	r2, [r7, #4]
 8012282:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8012284:	4610      	mov	r0, r2
 8012286:	4798      	blx	r3
 8012288:	e000      	b.n	801228c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801228a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012290:	b29b      	uxth	r3, r3
 8012292:	2b00      	cmp	r3, #0
 8012294:	d03e      	beq.n	8012314 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	695b      	ldr	r3, [r3, #20]
 801229c:	f003 0304 	and.w	r3, r3, #4
 80122a0:	2b04      	cmp	r3, #4
 80122a2:	d112      	bne.n	80122ca <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	691a      	ldr	r2, [r3, #16]
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122ae:	b2d2      	uxtb	r2, r2
 80122b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122b6:	1c5a      	adds	r2, r3, #1
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80122c0:	b29b      	uxth	r3, r3
 80122c2:	3b01      	subs	r3, #1
 80122c4:	b29a      	uxth	r2, r3
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	695b      	ldr	r3, [r3, #20]
 80122d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122d4:	2b40      	cmp	r3, #64	; 0x40
 80122d6:	d112      	bne.n	80122fe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	691a      	ldr	r2, [r3, #16]
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122e2:	b2d2      	uxtb	r2, r2
 80122e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122ea:	1c5a      	adds	r2, r3, #1
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80122f4:	b29b      	uxth	r3, r3
 80122f6:	3b01      	subs	r3, #1
 80122f8:	b29a      	uxth	r2, r3
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012302:	b29b      	uxth	r3, r3
 8012304:	2b00      	cmp	r3, #0
 8012306:	d005      	beq.n	8012314 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801230c:	f043 0204 	orr.w	r2, r3, #4
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012318:	2b00      	cmp	r3, #0
 801231a:	d003      	beq.n	8012324 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 801231c:	6878      	ldr	r0, [r7, #4]
 801231e:	f000 f8b3 	bl	8012488 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8012322:	e039      	b.n	8012398 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8012324:	7bfb      	ldrb	r3, [r7, #15]
 8012326:	2b2a      	cmp	r3, #42	; 0x2a
 8012328:	d109      	bne.n	801233e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	2200      	movs	r2, #0
 801232e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	2228      	movs	r2, #40	; 0x28
 8012334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8012338:	6878      	ldr	r0, [r7, #4]
 801233a:	f7ff f849 	bl	80113d0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012344:	b2db      	uxtb	r3, r3
 8012346:	2b28      	cmp	r3, #40	; 0x28
 8012348:	d111      	bne.n	801236e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	4a15      	ldr	r2, [pc, #84]	; (80123a4 <I2C_Slave_STOPF+0x25c>)
 801234e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	2200      	movs	r2, #0
 8012354:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	2220      	movs	r2, #32
 801235a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	2200      	movs	r2, #0
 8012362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8012366:	6878      	ldr	r0, [r7, #4]
 8012368:	f7ff f84a 	bl	8011400 <HAL_I2C_ListenCpltCallback>
}
 801236c:	e014      	b.n	8012398 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012372:	2b22      	cmp	r3, #34	; 0x22
 8012374:	d002      	beq.n	801237c <I2C_Slave_STOPF+0x234>
 8012376:	7bfb      	ldrb	r3, [r7, #15]
 8012378:	2b22      	cmp	r3, #34	; 0x22
 801237a:	d10d      	bne.n	8012398 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	2200      	movs	r2, #0
 8012380:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	2220      	movs	r2, #32
 8012386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	2200      	movs	r2, #0
 801238e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8012392:	6878      	ldr	r0, [r7, #4]
 8012394:	f7ff f81c 	bl	80113d0 <HAL_I2C_SlaveRxCpltCallback>
}
 8012398:	bf00      	nop
 801239a:	3710      	adds	r7, #16
 801239c:	46bd      	mov	sp, r7
 801239e:	bd80      	pop	{r7, pc}
 80123a0:	08012911 	.word	0x08012911
 80123a4:	ffff0000 	.word	0xffff0000

080123a8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b084      	sub	sp, #16
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80123b6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123bc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80123be:	68bb      	ldr	r3, [r7, #8]
 80123c0:	2b08      	cmp	r3, #8
 80123c2:	d002      	beq.n	80123ca <I2C_Slave_AF+0x22>
 80123c4:	68bb      	ldr	r3, [r7, #8]
 80123c6:	2b20      	cmp	r3, #32
 80123c8:	d129      	bne.n	801241e <I2C_Slave_AF+0x76>
 80123ca:	7bfb      	ldrb	r3, [r7, #15]
 80123cc:	2b28      	cmp	r3, #40	; 0x28
 80123ce:	d126      	bne.n	801241e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	4a2c      	ldr	r2, [pc, #176]	; (8012484 <I2C_Slave_AF+0xdc>)
 80123d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	685a      	ldr	r2, [r3, #4]
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80123e4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80123ee:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	681a      	ldr	r2, [r3, #0]
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80123fe:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	2200      	movs	r2, #0
 8012404:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	2220      	movs	r2, #32
 801240a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	2200      	movs	r2, #0
 8012412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8012416:	6878      	ldr	r0, [r7, #4]
 8012418:	f7fe fff2 	bl	8011400 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 801241c:	e02e      	b.n	801247c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801241e:	7bfb      	ldrb	r3, [r7, #15]
 8012420:	2b21      	cmp	r3, #33	; 0x21
 8012422:	d126      	bne.n	8012472 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	4a17      	ldr	r2, [pc, #92]	; (8012484 <I2C_Slave_AF+0xdc>)
 8012428:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	2221      	movs	r2, #33	; 0x21
 801242e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	2220      	movs	r2, #32
 8012434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	2200      	movs	r2, #0
 801243c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	685a      	ldr	r2, [r3, #4]
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801244e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8012458:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	681a      	ldr	r2, [r3, #0]
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012468:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801246a:	6878      	ldr	r0, [r7, #4]
 801246c:	f7fe ffa6 	bl	80113bc <HAL_I2C_SlaveTxCpltCallback>
}
 8012470:	e004      	b.n	801247c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801247a:	615a      	str	r2, [r3, #20]
}
 801247c:	bf00      	nop
 801247e:	3710      	adds	r7, #16
 8012480:	46bd      	mov	sp, r7
 8012482:	bd80      	pop	{r7, pc}
 8012484:	ffff0000 	.word	0xffff0000

08012488 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8012488:	b580      	push	{r7, lr}
 801248a:	b084      	sub	sp, #16
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012496:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801249e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80124a0:	7bbb      	ldrb	r3, [r7, #14]
 80124a2:	2b10      	cmp	r3, #16
 80124a4:	d002      	beq.n	80124ac <I2C_ITError+0x24>
 80124a6:	7bbb      	ldrb	r3, [r7, #14]
 80124a8:	2b40      	cmp	r3, #64	; 0x40
 80124aa:	d10a      	bne.n	80124c2 <I2C_ITError+0x3a>
 80124ac:	7bfb      	ldrb	r3, [r7, #15]
 80124ae:	2b22      	cmp	r3, #34	; 0x22
 80124b0:	d107      	bne.n	80124c2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	681a      	ldr	r2, [r3, #0]
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80124c0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80124c2:	7bfb      	ldrb	r3, [r7, #15]
 80124c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80124c8:	2b28      	cmp	r3, #40	; 0x28
 80124ca:	d107      	bne.n	80124dc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	2200      	movs	r2, #0
 80124d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	2228      	movs	r2, #40	; 0x28
 80124d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80124da:	e015      	b.n	8012508 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	685b      	ldr	r3, [r3, #4]
 80124e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80124e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80124ea:	d00a      	beq.n	8012502 <I2C_ITError+0x7a>
 80124ec:	7bfb      	ldrb	r3, [r7, #15]
 80124ee:	2b60      	cmp	r3, #96	; 0x60
 80124f0:	d007      	beq.n	8012502 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	2220      	movs	r2, #32
 80124f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	2200      	movs	r2, #0
 80124fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	2200      	movs	r2, #0
 8012506:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	685b      	ldr	r3, [r3, #4]
 801250e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012512:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012516:	d162      	bne.n	80125de <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	685a      	ldr	r2, [r3, #4]
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012526:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801252c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012530:	b2db      	uxtb	r3, r3
 8012532:	2b01      	cmp	r3, #1
 8012534:	d020      	beq.n	8012578 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801253a:	4a6a      	ldr	r2, [pc, #424]	; (80126e4 <I2C_ITError+0x25c>)
 801253c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012542:	4618      	mov	r0, r3
 8012544:	f7fd fa56 	bl	800f9f4 <HAL_DMA_Abort_IT>
 8012548:	4603      	mov	r3, r0
 801254a:	2b00      	cmp	r3, #0
 801254c:	f000 8089 	beq.w	8012662 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	681a      	ldr	r2, [r3, #0]
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	f022 0201 	bic.w	r2, r2, #1
 801255e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	2220      	movs	r2, #32
 8012564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801256c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801256e:	687a      	ldr	r2, [r7, #4]
 8012570:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8012572:	4610      	mov	r0, r2
 8012574:	4798      	blx	r3
 8012576:	e074      	b.n	8012662 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801257c:	4a59      	ldr	r2, [pc, #356]	; (80126e4 <I2C_ITError+0x25c>)
 801257e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012584:	4618      	mov	r0, r3
 8012586:	f7fd fa35 	bl	800f9f4 <HAL_DMA_Abort_IT>
 801258a:	4603      	mov	r3, r0
 801258c:	2b00      	cmp	r3, #0
 801258e:	d068      	beq.n	8012662 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	695b      	ldr	r3, [r3, #20]
 8012596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801259a:	2b40      	cmp	r3, #64	; 0x40
 801259c:	d10b      	bne.n	80125b6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	691a      	ldr	r2, [r3, #16]
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125a8:	b2d2      	uxtb	r2, r2
 80125aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125b0:	1c5a      	adds	r2, r3, #1
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	681a      	ldr	r2, [r3, #0]
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	f022 0201 	bic.w	r2, r2, #1
 80125c4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	2220      	movs	r2, #32
 80125ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80125d4:	687a      	ldr	r2, [r7, #4]
 80125d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80125d8:	4610      	mov	r0, r2
 80125da:	4798      	blx	r3
 80125dc:	e041      	b.n	8012662 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80125e4:	b2db      	uxtb	r3, r3
 80125e6:	2b60      	cmp	r3, #96	; 0x60
 80125e8:	d125      	bne.n	8012636 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	2220      	movs	r2, #32
 80125ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	2200      	movs	r2, #0
 80125f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	695b      	ldr	r3, [r3, #20]
 80125fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012602:	2b40      	cmp	r3, #64	; 0x40
 8012604:	d10b      	bne.n	801261e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	691a      	ldr	r2, [r3, #16]
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012610:	b2d2      	uxtb	r2, r2
 8012612:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012618:	1c5a      	adds	r2, r3, #1
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	681a      	ldr	r2, [r3, #0]
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	f022 0201 	bic.w	r2, r2, #1
 801262c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801262e:	6878      	ldr	r0, [r7, #4]
 8012630:	f7fe ff0e 	bl	8011450 <HAL_I2C_AbortCpltCallback>
 8012634:	e015      	b.n	8012662 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	695b      	ldr	r3, [r3, #20]
 801263c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012640:	2b40      	cmp	r3, #64	; 0x40
 8012642:	d10b      	bne.n	801265c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	691a      	ldr	r2, [r3, #16]
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801264e:	b2d2      	uxtb	r2, r2
 8012650:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012656:	1c5a      	adds	r2, r3, #1
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 801265c:	6878      	ldr	r0, [r7, #4]
 801265e:	f7fe feed 	bl	801143c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012666:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8012668:	68bb      	ldr	r3, [r7, #8]
 801266a:	f003 0301 	and.w	r3, r3, #1
 801266e:	2b00      	cmp	r3, #0
 8012670:	d10e      	bne.n	8012690 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8012672:	68bb      	ldr	r3, [r7, #8]
 8012674:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8012678:	2b00      	cmp	r3, #0
 801267a:	d109      	bne.n	8012690 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801267c:	68bb      	ldr	r3, [r7, #8]
 801267e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8012682:	2b00      	cmp	r3, #0
 8012684:	d104      	bne.n	8012690 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8012686:	68bb      	ldr	r3, [r7, #8]
 8012688:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801268c:	2b00      	cmp	r3, #0
 801268e:	d007      	beq.n	80126a0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	685a      	ldr	r2, [r3, #4]
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801269e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80126a6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126ac:	f003 0304 	and.w	r3, r3, #4
 80126b0:	2b04      	cmp	r3, #4
 80126b2:	d113      	bne.n	80126dc <I2C_ITError+0x254>
 80126b4:	7bfb      	ldrb	r3, [r7, #15]
 80126b6:	2b28      	cmp	r3, #40	; 0x28
 80126b8:	d110      	bne.n	80126dc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	4a0a      	ldr	r2, [pc, #40]	; (80126e8 <I2C_ITError+0x260>)
 80126be:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	2200      	movs	r2, #0
 80126c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	2220      	movs	r2, #32
 80126ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	2200      	movs	r2, #0
 80126d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80126d6:	6878      	ldr	r0, [r7, #4]
 80126d8:	f7fe fe92 	bl	8011400 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80126dc:	bf00      	nop
 80126de:	3710      	adds	r7, #16
 80126e0:	46bd      	mov	sp, r7
 80126e2:	bd80      	pop	{r7, pc}
 80126e4:	08012911 	.word	0x08012911
 80126e8:	ffff0000 	.word	0xffff0000

080126ec <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b086      	sub	sp, #24
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126f8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80126fa:	697b      	ldr	r3, [r7, #20]
 80126fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012700:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8012702:	697b      	ldr	r3, [r7, #20]
 8012704:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012708:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801270a:	697b      	ldr	r3, [r7, #20]
 801270c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801270e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8012710:	697b      	ldr	r3, [r7, #20]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	685a      	ldr	r2, [r3, #4]
 8012716:	697b      	ldr	r3, [r7, #20]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801271e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8012720:	697b      	ldr	r3, [r7, #20]
 8012722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012724:	2b00      	cmp	r3, #0
 8012726:	d003      	beq.n	8012730 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8012728:	697b      	ldr	r3, [r7, #20]
 801272a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801272c:	2200      	movs	r2, #0
 801272e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8012730:	697b      	ldr	r3, [r7, #20]
 8012732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012734:	2b00      	cmp	r3, #0
 8012736:	d003      	beq.n	8012740 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8012738:	697b      	ldr	r3, [r7, #20]
 801273a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801273c:	2200      	movs	r2, #0
 801273e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8012740:	7cfb      	ldrb	r3, [r7, #19]
 8012742:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8012746:	2b21      	cmp	r3, #33	; 0x21
 8012748:	d007      	beq.n	801275a <I2C_DMAXferCplt+0x6e>
 801274a:	7cfb      	ldrb	r3, [r7, #19]
 801274c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8012750:	2b22      	cmp	r3, #34	; 0x22
 8012752:	d131      	bne.n	80127b8 <I2C_DMAXferCplt+0xcc>
 8012754:	7cbb      	ldrb	r3, [r7, #18]
 8012756:	2b20      	cmp	r3, #32
 8012758:	d12e      	bne.n	80127b8 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801275a:	697b      	ldr	r3, [r7, #20]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	685a      	ldr	r2, [r3, #4]
 8012760:	697b      	ldr	r3, [r7, #20]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012768:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 801276a:	697b      	ldr	r3, [r7, #20]
 801276c:	2200      	movs	r2, #0
 801276e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8012770:	7cfb      	ldrb	r3, [r7, #19]
 8012772:	2b29      	cmp	r3, #41	; 0x29
 8012774:	d10a      	bne.n	801278c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8012776:	697b      	ldr	r3, [r7, #20]
 8012778:	2221      	movs	r2, #33	; 0x21
 801277a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801277c:	697b      	ldr	r3, [r7, #20]
 801277e:	2228      	movs	r2, #40	; 0x28
 8012780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8012784:	6978      	ldr	r0, [r7, #20]
 8012786:	f7fe fe19 	bl	80113bc <HAL_I2C_SlaveTxCpltCallback>
 801278a:	e00c      	b.n	80127a6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801278c:	7cfb      	ldrb	r3, [r7, #19]
 801278e:	2b2a      	cmp	r3, #42	; 0x2a
 8012790:	d109      	bne.n	80127a6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8012792:	697b      	ldr	r3, [r7, #20]
 8012794:	2222      	movs	r2, #34	; 0x22
 8012796:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8012798:	697b      	ldr	r3, [r7, #20]
 801279a:	2228      	movs	r2, #40	; 0x28
 801279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80127a0:	6978      	ldr	r0, [r7, #20]
 80127a2:	f7fe fe15 	bl	80113d0 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80127a6:	697b      	ldr	r3, [r7, #20]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	685a      	ldr	r2, [r3, #4]
 80127ac:	697b      	ldr	r3, [r7, #20]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80127b4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80127b6:	e06a      	b.n	801288e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80127b8:	697b      	ldr	r3, [r7, #20]
 80127ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80127be:	b2db      	uxtb	r3, r3
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d064      	beq.n	801288e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80127c4:	697b      	ldr	r3, [r7, #20]
 80127c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80127c8:	b29b      	uxth	r3, r3
 80127ca:	2b01      	cmp	r3, #1
 80127cc:	d107      	bne.n	80127de <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80127ce:	697b      	ldr	r3, [r7, #20]
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	681a      	ldr	r2, [r3, #0]
 80127d4:	697b      	ldr	r3, [r7, #20]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80127dc:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80127de:	697b      	ldr	r3, [r7, #20]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	685a      	ldr	r2, [r3, #4]
 80127e4:	697b      	ldr	r3, [r7, #20]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80127ec:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80127f4:	d009      	beq.n	801280a <I2C_DMAXferCplt+0x11e>
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	2b08      	cmp	r3, #8
 80127fa:	d006      	beq.n	801280a <I2C_DMAXferCplt+0x11e>
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8012802:	d002      	beq.n	801280a <I2C_DMAXferCplt+0x11e>
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	2b20      	cmp	r3, #32
 8012808:	d107      	bne.n	801281a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801280a:	697b      	ldr	r3, [r7, #20]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	681a      	ldr	r2, [r3, #0]
 8012810:	697b      	ldr	r3, [r7, #20]
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012818:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801281a:	697b      	ldr	r3, [r7, #20]
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	685a      	ldr	r2, [r3, #4]
 8012820:	697b      	ldr	r3, [r7, #20]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8012828:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801282a:	697b      	ldr	r3, [r7, #20]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	685a      	ldr	r2, [r3, #4]
 8012830:	697b      	ldr	r3, [r7, #20]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012838:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 801283a:	697b      	ldr	r3, [r7, #20]
 801283c:	2200      	movs	r2, #0
 801283e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8012840:	697b      	ldr	r3, [r7, #20]
 8012842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012844:	2b00      	cmp	r3, #0
 8012846:	d003      	beq.n	8012850 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8012848:	6978      	ldr	r0, [r7, #20]
 801284a:	f7fe fdf7 	bl	801143c <HAL_I2C_ErrorCallback>
}
 801284e:	e01e      	b.n	801288e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8012850:	697b      	ldr	r3, [r7, #20]
 8012852:	2220      	movs	r2, #32
 8012854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8012858:	697b      	ldr	r3, [r7, #20]
 801285a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801285e:	b2db      	uxtb	r3, r3
 8012860:	2b40      	cmp	r3, #64	; 0x40
 8012862:	d10a      	bne.n	801287a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012864:	697b      	ldr	r3, [r7, #20]
 8012866:	2200      	movs	r2, #0
 8012868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 801286c:	697b      	ldr	r3, [r7, #20]
 801286e:	2200      	movs	r2, #0
 8012870:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8012872:	6978      	ldr	r0, [r7, #20]
 8012874:	f7fe fdd8 	bl	8011428 <HAL_I2C_MemRxCpltCallback>
}
 8012878:	e009      	b.n	801288e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801287a:	697b      	ldr	r3, [r7, #20]
 801287c:	2200      	movs	r2, #0
 801287e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8012882:	697b      	ldr	r3, [r7, #20]
 8012884:	2212      	movs	r2, #18
 8012886:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8012888:	6978      	ldr	r0, [r7, #20]
 801288a:	f7fa fb45 	bl	800cf18 <HAL_I2C_MasterRxCpltCallback>
}
 801288e:	bf00      	nop
 8012890:	3718      	adds	r7, #24
 8012892:	46bd      	mov	sp, r7
 8012894:	bd80      	pop	{r7, pc}

08012896 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8012896:	b580      	push	{r7, lr}
 8012898:	b084      	sub	sp, #16
 801289a:	af00      	add	r7, sp, #0
 801289c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128a2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d003      	beq.n	80128b4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128b0:	2200      	movs	r2, #0
 80128b2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d003      	beq.n	80128c4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128c0:	2200      	movs	r2, #0
 80128c2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80128c4:	6878      	ldr	r0, [r7, #4]
 80128c6:	f7fd fa4f 	bl	800fd68 <HAL_DMA_GetError>
 80128ca:	4603      	mov	r3, r0
 80128cc:	2b02      	cmp	r3, #2
 80128ce:	d01b      	beq.n	8012908 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	681a      	ldr	r2, [r3, #0]
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80128de:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	2200      	movs	r2, #0
 80128e4:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	2220      	movs	r2, #32
 80128ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	2200      	movs	r2, #0
 80128f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128fa:	f043 0210 	orr.w	r2, r3, #16
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8012902:	68f8      	ldr	r0, [r7, #12]
 8012904:	f7fe fd9a 	bl	801143c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8012908:	bf00      	nop
 801290a:	3710      	adds	r7, #16
 801290c:	46bd      	mov	sp, r7
 801290e:	bd80      	pop	{r7, pc}

08012910 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b086      	sub	sp, #24
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012918:	2300      	movs	r3, #0
 801291a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012920:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8012922:	697b      	ldr	r3, [r7, #20]
 8012924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012928:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 801292a:	4b4b      	ldr	r3, [pc, #300]	; (8012a58 <I2C_DMAAbort+0x148>)
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	08db      	lsrs	r3, r3, #3
 8012930:	4a4a      	ldr	r2, [pc, #296]	; (8012a5c <I2C_DMAAbort+0x14c>)
 8012932:	fba2 2303 	umull	r2, r3, r2, r3
 8012936:	0a1a      	lsrs	r2, r3, #8
 8012938:	4613      	mov	r3, r2
 801293a:	009b      	lsls	r3, r3, #2
 801293c:	4413      	add	r3, r2
 801293e:	00da      	lsls	r2, r3, #3
 8012940:	1ad3      	subs	r3, r2, r3
 8012942:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d106      	bne.n	8012958 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801294a:	697b      	ldr	r3, [r7, #20]
 801294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801294e:	f043 0220 	orr.w	r2, r3, #32
 8012952:	697b      	ldr	r3, [r7, #20]
 8012954:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8012956:	e00a      	b.n	801296e <I2C_DMAAbort+0x5e>
    }
    count--;
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	3b01      	subs	r3, #1
 801295c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801295e:	697b      	ldr	r3, [r7, #20]
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801296c:	d0ea      	beq.n	8012944 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801296e:	697b      	ldr	r3, [r7, #20]
 8012970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012972:	2b00      	cmp	r3, #0
 8012974:	d003      	beq.n	801297e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8012976:	697b      	ldr	r3, [r7, #20]
 8012978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801297a:	2200      	movs	r2, #0
 801297c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801297e:	697b      	ldr	r3, [r7, #20]
 8012980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012982:	2b00      	cmp	r3, #0
 8012984:	d003      	beq.n	801298e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8012986:	697b      	ldr	r3, [r7, #20]
 8012988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801298a:	2200      	movs	r2, #0
 801298c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801298e:	697b      	ldr	r3, [r7, #20]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	681a      	ldr	r2, [r3, #0]
 8012994:	697b      	ldr	r3, [r7, #20]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801299c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 801299e:	697b      	ldr	r3, [r7, #20]
 80129a0:	2200      	movs	r2, #0
 80129a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80129a4:	697b      	ldr	r3, [r7, #20]
 80129a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d003      	beq.n	80129b4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80129ac:	697b      	ldr	r3, [r7, #20]
 80129ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129b0:	2200      	movs	r2, #0
 80129b2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80129b4:	697b      	ldr	r3, [r7, #20]
 80129b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d003      	beq.n	80129c4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80129bc:	697b      	ldr	r3, [r7, #20]
 80129be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129c0:	2200      	movs	r2, #0
 80129c2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80129c4:	697b      	ldr	r3, [r7, #20]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	681a      	ldr	r2, [r3, #0]
 80129ca:	697b      	ldr	r3, [r7, #20]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	f022 0201 	bic.w	r2, r2, #1
 80129d2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80129d4:	697b      	ldr	r3, [r7, #20]
 80129d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80129da:	b2db      	uxtb	r3, r3
 80129dc:	2b60      	cmp	r3, #96	; 0x60
 80129de:	d10e      	bne.n	80129fe <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80129e0:	697b      	ldr	r3, [r7, #20]
 80129e2:	2220      	movs	r2, #32
 80129e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80129e8:	697b      	ldr	r3, [r7, #20]
 80129ea:	2200      	movs	r2, #0
 80129ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80129f0:	697b      	ldr	r3, [r7, #20]
 80129f2:	2200      	movs	r2, #0
 80129f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80129f6:	6978      	ldr	r0, [r7, #20]
 80129f8:	f7fe fd2a 	bl	8011450 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80129fc:	e027      	b.n	8012a4e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80129fe:	7cfb      	ldrb	r3, [r7, #19]
 8012a00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8012a04:	2b28      	cmp	r3, #40	; 0x28
 8012a06:	d117      	bne.n	8012a38 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8012a08:	697b      	ldr	r3, [r7, #20]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	681a      	ldr	r2, [r3, #0]
 8012a0e:	697b      	ldr	r3, [r7, #20]
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	f042 0201 	orr.w	r2, r2, #1
 8012a16:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012a18:	697b      	ldr	r3, [r7, #20]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	681a      	ldr	r2, [r3, #0]
 8012a1e:	697b      	ldr	r3, [r7, #20]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012a26:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8012a28:	697b      	ldr	r3, [r7, #20]
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8012a2e:	697b      	ldr	r3, [r7, #20]
 8012a30:	2228      	movs	r2, #40	; 0x28
 8012a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8012a36:	e007      	b.n	8012a48 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8012a38:	697b      	ldr	r3, [r7, #20]
 8012a3a:	2220      	movs	r2, #32
 8012a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8012a40:	697b      	ldr	r3, [r7, #20]
 8012a42:	2200      	movs	r2, #0
 8012a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8012a48:	6978      	ldr	r0, [r7, #20]
 8012a4a:	f7fe fcf7 	bl	801143c <HAL_I2C_ErrorCallback>
}
 8012a4e:	bf00      	nop
 8012a50:	3718      	adds	r7, #24
 8012a52:	46bd      	mov	sp, r7
 8012a54:	bd80      	pop	{r7, pc}
 8012a56:	bf00      	nop
 8012a58:	200000c0 	.word	0x200000c0
 8012a5c:	14f8b589 	.word	0x14f8b589

08012a60 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8012a60:	b480      	push	{r7}
 8012a62:	b085      	sub	sp, #20
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012a68:	2300      	movs	r3, #0
 8012a6a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8012a6c:	4b13      	ldr	r3, [pc, #76]	; (8012abc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	08db      	lsrs	r3, r3, #3
 8012a72:	4a13      	ldr	r2, [pc, #76]	; (8012ac0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8012a74:	fba2 2303 	umull	r2, r3, r2, r3
 8012a78:	0a1a      	lsrs	r2, r3, #8
 8012a7a:	4613      	mov	r3, r2
 8012a7c:	009b      	lsls	r3, r3, #2
 8012a7e:	4413      	add	r3, r2
 8012a80:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	3b01      	subs	r3, #1
 8012a86:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d107      	bne.n	8012a9e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a92:	f043 0220 	orr.w	r2, r3, #32
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8012a9a:	2301      	movs	r3, #1
 8012a9c:	e008      	b.n	8012ab0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012aac:	d0e9      	beq.n	8012a82 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8012aae:	2300      	movs	r3, #0
}
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	3714      	adds	r7, #20
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aba:	4770      	bx	lr
 8012abc:	200000c0 	.word	0x200000c0
 8012ac0:	14f8b589 	.word	0x14f8b589

08012ac4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8012ac4:	b480      	push	{r7}
 8012ac6:	b083      	sub	sp, #12
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ad0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8012ad4:	d103      	bne.n	8012ade <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	2201      	movs	r2, #1
 8012ada:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8012adc:	e007      	b.n	8012aee <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ae2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8012ae6:	d102      	bne.n	8012aee <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	2208      	movs	r2, #8
 8012aec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8012aee:	bf00      	nop
 8012af0:	370c      	adds	r7, #12
 8012af2:	46bd      	mov	sp, r7
 8012af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af8:	4770      	bx	lr
	...

08012afc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b086      	sub	sp, #24
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d101      	bne.n	8012b0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8012b0a:	2301      	movs	r3, #1
 8012b0c:	e25b      	b.n	8012fc6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	f003 0301 	and.w	r3, r3, #1
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d075      	beq.n	8012c06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012b1a:	4ba3      	ldr	r3, [pc, #652]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012b1c:	689b      	ldr	r3, [r3, #8]
 8012b1e:	f003 030c 	and.w	r3, r3, #12
 8012b22:	2b04      	cmp	r3, #4
 8012b24:	d00c      	beq.n	8012b40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012b26:	4ba0      	ldr	r3, [pc, #640]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012b28:	689b      	ldr	r3, [r3, #8]
 8012b2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012b2e:	2b08      	cmp	r3, #8
 8012b30:	d112      	bne.n	8012b58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012b32:	4b9d      	ldr	r3, [pc, #628]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012b34:	685b      	ldr	r3, [r3, #4]
 8012b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012b3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012b3e:	d10b      	bne.n	8012b58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012b40:	4b99      	ldr	r3, [pc, #612]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d05b      	beq.n	8012c04 <HAL_RCC_OscConfig+0x108>
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	685b      	ldr	r3, [r3, #4]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d157      	bne.n	8012c04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8012b54:	2301      	movs	r3, #1
 8012b56:	e236      	b.n	8012fc6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	685b      	ldr	r3, [r3, #4]
 8012b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012b60:	d106      	bne.n	8012b70 <HAL_RCC_OscConfig+0x74>
 8012b62:	4b91      	ldr	r3, [pc, #580]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	4a90      	ldr	r2, [pc, #576]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012b6c:	6013      	str	r3, [r2, #0]
 8012b6e:	e01d      	b.n	8012bac <HAL_RCC_OscConfig+0xb0>
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	685b      	ldr	r3, [r3, #4]
 8012b74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012b78:	d10c      	bne.n	8012b94 <HAL_RCC_OscConfig+0x98>
 8012b7a:	4b8b      	ldr	r3, [pc, #556]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	4a8a      	ldr	r2, [pc, #552]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012b84:	6013      	str	r3, [r2, #0]
 8012b86:	4b88      	ldr	r3, [pc, #544]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	4a87      	ldr	r2, [pc, #540]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012b90:	6013      	str	r3, [r2, #0]
 8012b92:	e00b      	b.n	8012bac <HAL_RCC_OscConfig+0xb0>
 8012b94:	4b84      	ldr	r3, [pc, #528]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	4a83      	ldr	r2, [pc, #524]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012b9e:	6013      	str	r3, [r2, #0]
 8012ba0:	4b81      	ldr	r3, [pc, #516]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	4a80      	ldr	r2, [pc, #512]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012baa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	685b      	ldr	r3, [r3, #4]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d013      	beq.n	8012bdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012bb4:	f7fb fdbc 	bl	800e730 <HAL_GetTick>
 8012bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012bba:	e008      	b.n	8012bce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012bbc:	f7fb fdb8 	bl	800e730 <HAL_GetTick>
 8012bc0:	4602      	mov	r2, r0
 8012bc2:	693b      	ldr	r3, [r7, #16]
 8012bc4:	1ad3      	subs	r3, r2, r3
 8012bc6:	2b64      	cmp	r3, #100	; 0x64
 8012bc8:	d901      	bls.n	8012bce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8012bca:	2303      	movs	r3, #3
 8012bcc:	e1fb      	b.n	8012fc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012bce:	4b76      	ldr	r3, [pc, #472]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d0f0      	beq.n	8012bbc <HAL_RCC_OscConfig+0xc0>
 8012bda:	e014      	b.n	8012c06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012bdc:	f7fb fda8 	bl	800e730 <HAL_GetTick>
 8012be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012be2:	e008      	b.n	8012bf6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012be4:	f7fb fda4 	bl	800e730 <HAL_GetTick>
 8012be8:	4602      	mov	r2, r0
 8012bea:	693b      	ldr	r3, [r7, #16]
 8012bec:	1ad3      	subs	r3, r2, r3
 8012bee:	2b64      	cmp	r3, #100	; 0x64
 8012bf0:	d901      	bls.n	8012bf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8012bf2:	2303      	movs	r3, #3
 8012bf4:	e1e7      	b.n	8012fc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012bf6:	4b6c      	ldr	r3, [pc, #432]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d1f0      	bne.n	8012be4 <HAL_RCC_OscConfig+0xe8>
 8012c02:	e000      	b.n	8012c06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	f003 0302 	and.w	r3, r3, #2
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d063      	beq.n	8012cda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012c12:	4b65      	ldr	r3, [pc, #404]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012c14:	689b      	ldr	r3, [r3, #8]
 8012c16:	f003 030c 	and.w	r3, r3, #12
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d00b      	beq.n	8012c36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012c1e:	4b62      	ldr	r3, [pc, #392]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012c20:	689b      	ldr	r3, [r3, #8]
 8012c22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012c26:	2b08      	cmp	r3, #8
 8012c28:	d11c      	bne.n	8012c64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012c2a:	4b5f      	ldr	r3, [pc, #380]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012c2c:	685b      	ldr	r3, [r3, #4]
 8012c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d116      	bne.n	8012c64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012c36:	4b5c      	ldr	r3, [pc, #368]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	f003 0302 	and.w	r3, r3, #2
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d005      	beq.n	8012c4e <HAL_RCC_OscConfig+0x152>
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	68db      	ldr	r3, [r3, #12]
 8012c46:	2b01      	cmp	r3, #1
 8012c48:	d001      	beq.n	8012c4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8012c4a:	2301      	movs	r3, #1
 8012c4c:	e1bb      	b.n	8012fc6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012c4e:	4b56      	ldr	r3, [pc, #344]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	691b      	ldr	r3, [r3, #16]
 8012c5a:	00db      	lsls	r3, r3, #3
 8012c5c:	4952      	ldr	r1, [pc, #328]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012c5e:	4313      	orrs	r3, r2
 8012c60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012c62:	e03a      	b.n	8012cda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	68db      	ldr	r3, [r3, #12]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d020      	beq.n	8012cae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8012c6c:	4b4f      	ldr	r3, [pc, #316]	; (8012dac <HAL_RCC_OscConfig+0x2b0>)
 8012c6e:	2201      	movs	r2, #1
 8012c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012c72:	f7fb fd5d 	bl	800e730 <HAL_GetTick>
 8012c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012c78:	e008      	b.n	8012c8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012c7a:	f7fb fd59 	bl	800e730 <HAL_GetTick>
 8012c7e:	4602      	mov	r2, r0
 8012c80:	693b      	ldr	r3, [r7, #16]
 8012c82:	1ad3      	subs	r3, r2, r3
 8012c84:	2b02      	cmp	r3, #2
 8012c86:	d901      	bls.n	8012c8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8012c88:	2303      	movs	r3, #3
 8012c8a:	e19c      	b.n	8012fc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012c8c:	4b46      	ldr	r3, [pc, #280]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	f003 0302 	and.w	r3, r3, #2
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d0f0      	beq.n	8012c7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012c98:	4b43      	ldr	r3, [pc, #268]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	691b      	ldr	r3, [r3, #16]
 8012ca4:	00db      	lsls	r3, r3, #3
 8012ca6:	4940      	ldr	r1, [pc, #256]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012ca8:	4313      	orrs	r3, r2
 8012caa:	600b      	str	r3, [r1, #0]
 8012cac:	e015      	b.n	8012cda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012cae:	4b3f      	ldr	r3, [pc, #252]	; (8012dac <HAL_RCC_OscConfig+0x2b0>)
 8012cb0:	2200      	movs	r2, #0
 8012cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012cb4:	f7fb fd3c 	bl	800e730 <HAL_GetTick>
 8012cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012cba:	e008      	b.n	8012cce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012cbc:	f7fb fd38 	bl	800e730 <HAL_GetTick>
 8012cc0:	4602      	mov	r2, r0
 8012cc2:	693b      	ldr	r3, [r7, #16]
 8012cc4:	1ad3      	subs	r3, r2, r3
 8012cc6:	2b02      	cmp	r3, #2
 8012cc8:	d901      	bls.n	8012cce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8012cca:	2303      	movs	r3, #3
 8012ccc:	e17b      	b.n	8012fc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012cce:	4b36      	ldr	r3, [pc, #216]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	f003 0302 	and.w	r3, r3, #2
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d1f0      	bne.n	8012cbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	f003 0308 	and.w	r3, r3, #8
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d030      	beq.n	8012d48 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	695b      	ldr	r3, [r3, #20]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d016      	beq.n	8012d1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012cee:	4b30      	ldr	r3, [pc, #192]	; (8012db0 <HAL_RCC_OscConfig+0x2b4>)
 8012cf0:	2201      	movs	r2, #1
 8012cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012cf4:	f7fb fd1c 	bl	800e730 <HAL_GetTick>
 8012cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012cfa:	e008      	b.n	8012d0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012cfc:	f7fb fd18 	bl	800e730 <HAL_GetTick>
 8012d00:	4602      	mov	r2, r0
 8012d02:	693b      	ldr	r3, [r7, #16]
 8012d04:	1ad3      	subs	r3, r2, r3
 8012d06:	2b02      	cmp	r3, #2
 8012d08:	d901      	bls.n	8012d0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8012d0a:	2303      	movs	r3, #3
 8012d0c:	e15b      	b.n	8012fc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012d0e:	4b26      	ldr	r3, [pc, #152]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012d12:	f003 0302 	and.w	r3, r3, #2
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d0f0      	beq.n	8012cfc <HAL_RCC_OscConfig+0x200>
 8012d1a:	e015      	b.n	8012d48 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012d1c:	4b24      	ldr	r3, [pc, #144]	; (8012db0 <HAL_RCC_OscConfig+0x2b4>)
 8012d1e:	2200      	movs	r2, #0
 8012d20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012d22:	f7fb fd05 	bl	800e730 <HAL_GetTick>
 8012d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012d28:	e008      	b.n	8012d3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012d2a:	f7fb fd01 	bl	800e730 <HAL_GetTick>
 8012d2e:	4602      	mov	r2, r0
 8012d30:	693b      	ldr	r3, [r7, #16]
 8012d32:	1ad3      	subs	r3, r2, r3
 8012d34:	2b02      	cmp	r3, #2
 8012d36:	d901      	bls.n	8012d3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8012d38:	2303      	movs	r3, #3
 8012d3a:	e144      	b.n	8012fc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012d3c:	4b1a      	ldr	r3, [pc, #104]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012d40:	f003 0302 	and.w	r3, r3, #2
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d1f0      	bne.n	8012d2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	f003 0304 	and.w	r3, r3, #4
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	f000 80a0 	beq.w	8012e96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012d56:	2300      	movs	r3, #0
 8012d58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012d5a:	4b13      	ldr	r3, [pc, #76]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d10f      	bne.n	8012d86 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012d66:	2300      	movs	r3, #0
 8012d68:	60bb      	str	r3, [r7, #8]
 8012d6a:	4b0f      	ldr	r3, [pc, #60]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d6e:	4a0e      	ldr	r2, [pc, #56]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012d74:	6413      	str	r3, [r2, #64]	; 0x40
 8012d76:	4b0c      	ldr	r3, [pc, #48]	; (8012da8 <HAL_RCC_OscConfig+0x2ac>)
 8012d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012d7e:	60bb      	str	r3, [r7, #8]
 8012d80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012d82:	2301      	movs	r3, #1
 8012d84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012d86:	4b0b      	ldr	r3, [pc, #44]	; (8012db4 <HAL_RCC_OscConfig+0x2b8>)
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d121      	bne.n	8012dd6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012d92:	4b08      	ldr	r3, [pc, #32]	; (8012db4 <HAL_RCC_OscConfig+0x2b8>)
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	4a07      	ldr	r2, [pc, #28]	; (8012db4 <HAL_RCC_OscConfig+0x2b8>)
 8012d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012d9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012d9e:	f7fb fcc7 	bl	800e730 <HAL_GetTick>
 8012da2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012da4:	e011      	b.n	8012dca <HAL_RCC_OscConfig+0x2ce>
 8012da6:	bf00      	nop
 8012da8:	40023800 	.word	0x40023800
 8012dac:	42470000 	.word	0x42470000
 8012db0:	42470e80 	.word	0x42470e80
 8012db4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012db8:	f7fb fcba 	bl	800e730 <HAL_GetTick>
 8012dbc:	4602      	mov	r2, r0
 8012dbe:	693b      	ldr	r3, [r7, #16]
 8012dc0:	1ad3      	subs	r3, r2, r3
 8012dc2:	2b02      	cmp	r3, #2
 8012dc4:	d901      	bls.n	8012dca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8012dc6:	2303      	movs	r3, #3
 8012dc8:	e0fd      	b.n	8012fc6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012dca:	4b81      	ldr	r3, [pc, #516]	; (8012fd0 <HAL_RCC_OscConfig+0x4d4>)
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d0f0      	beq.n	8012db8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	689b      	ldr	r3, [r3, #8]
 8012dda:	2b01      	cmp	r3, #1
 8012ddc:	d106      	bne.n	8012dec <HAL_RCC_OscConfig+0x2f0>
 8012dde:	4b7d      	ldr	r3, [pc, #500]	; (8012fd4 <HAL_RCC_OscConfig+0x4d8>)
 8012de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012de2:	4a7c      	ldr	r2, [pc, #496]	; (8012fd4 <HAL_RCC_OscConfig+0x4d8>)
 8012de4:	f043 0301 	orr.w	r3, r3, #1
 8012de8:	6713      	str	r3, [r2, #112]	; 0x70
 8012dea:	e01c      	b.n	8012e26 <HAL_RCC_OscConfig+0x32a>
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	689b      	ldr	r3, [r3, #8]
 8012df0:	2b05      	cmp	r3, #5
 8012df2:	d10c      	bne.n	8012e0e <HAL_RCC_OscConfig+0x312>
 8012df4:	4b77      	ldr	r3, [pc, #476]	; (8012fd4 <HAL_RCC_OscConfig+0x4d8>)
 8012df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012df8:	4a76      	ldr	r2, [pc, #472]	; (8012fd4 <HAL_RCC_OscConfig+0x4d8>)
 8012dfa:	f043 0304 	orr.w	r3, r3, #4
 8012dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8012e00:	4b74      	ldr	r3, [pc, #464]	; (8012fd4 <HAL_RCC_OscConfig+0x4d8>)
 8012e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e04:	4a73      	ldr	r2, [pc, #460]	; (8012fd4 <HAL_RCC_OscConfig+0x4d8>)
 8012e06:	f043 0301 	orr.w	r3, r3, #1
 8012e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8012e0c:	e00b      	b.n	8012e26 <HAL_RCC_OscConfig+0x32a>
 8012e0e:	4b71      	ldr	r3, [pc, #452]	; (8012fd4 <HAL_RCC_OscConfig+0x4d8>)
 8012e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e12:	4a70      	ldr	r2, [pc, #448]	; (8012fd4 <HAL_RCC_OscConfig+0x4d8>)
 8012e14:	f023 0301 	bic.w	r3, r3, #1
 8012e18:	6713      	str	r3, [r2, #112]	; 0x70
 8012e1a:	4b6e      	ldr	r3, [pc, #440]	; (8012fd4 <HAL_RCC_OscConfig+0x4d8>)
 8012e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e1e:	4a6d      	ldr	r2, [pc, #436]	; (8012fd4 <HAL_RCC_OscConfig+0x4d8>)
 8012e20:	f023 0304 	bic.w	r3, r3, #4
 8012e24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	689b      	ldr	r3, [r3, #8]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d015      	beq.n	8012e5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012e2e:	f7fb fc7f 	bl	800e730 <HAL_GetTick>
 8012e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012e34:	e00a      	b.n	8012e4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012e36:	f7fb fc7b 	bl	800e730 <HAL_GetTick>
 8012e3a:	4602      	mov	r2, r0
 8012e3c:	693b      	ldr	r3, [r7, #16]
 8012e3e:	1ad3      	subs	r3, r2, r3
 8012e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e44:	4293      	cmp	r3, r2
 8012e46:	d901      	bls.n	8012e4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8012e48:	2303      	movs	r3, #3
 8012e4a:	e0bc      	b.n	8012fc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012e4c:	4b61      	ldr	r3, [pc, #388]	; (8012fd4 <HAL_RCC_OscConfig+0x4d8>)
 8012e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e50:	f003 0302 	and.w	r3, r3, #2
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d0ee      	beq.n	8012e36 <HAL_RCC_OscConfig+0x33a>
 8012e58:	e014      	b.n	8012e84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012e5a:	f7fb fc69 	bl	800e730 <HAL_GetTick>
 8012e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012e60:	e00a      	b.n	8012e78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012e62:	f7fb fc65 	bl	800e730 <HAL_GetTick>
 8012e66:	4602      	mov	r2, r0
 8012e68:	693b      	ldr	r3, [r7, #16]
 8012e6a:	1ad3      	subs	r3, r2, r3
 8012e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e70:	4293      	cmp	r3, r2
 8012e72:	d901      	bls.n	8012e78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8012e74:	2303      	movs	r3, #3
 8012e76:	e0a6      	b.n	8012fc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012e78:	4b56      	ldr	r3, [pc, #344]	; (8012fd4 <HAL_RCC_OscConfig+0x4d8>)
 8012e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e7c:	f003 0302 	and.w	r3, r3, #2
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d1ee      	bne.n	8012e62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8012e84:	7dfb      	ldrb	r3, [r7, #23]
 8012e86:	2b01      	cmp	r3, #1
 8012e88:	d105      	bne.n	8012e96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8012e8a:	4b52      	ldr	r3, [pc, #328]	; (8012fd4 <HAL_RCC_OscConfig+0x4d8>)
 8012e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e8e:	4a51      	ldr	r2, [pc, #324]	; (8012fd4 <HAL_RCC_OscConfig+0x4d8>)
 8012e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012e94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	699b      	ldr	r3, [r3, #24]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	f000 8092 	beq.w	8012fc4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8012ea0:	4b4c      	ldr	r3, [pc, #304]	; (8012fd4 <HAL_RCC_OscConfig+0x4d8>)
 8012ea2:	689b      	ldr	r3, [r3, #8]
 8012ea4:	f003 030c 	and.w	r3, r3, #12
 8012ea8:	2b08      	cmp	r3, #8
 8012eaa:	d05c      	beq.n	8012f66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	699b      	ldr	r3, [r3, #24]
 8012eb0:	2b02      	cmp	r3, #2
 8012eb2:	d141      	bne.n	8012f38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012eb4:	4b48      	ldr	r3, [pc, #288]	; (8012fd8 <HAL_RCC_OscConfig+0x4dc>)
 8012eb6:	2200      	movs	r2, #0
 8012eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012eba:	f7fb fc39 	bl	800e730 <HAL_GetTick>
 8012ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012ec0:	e008      	b.n	8012ed4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012ec2:	f7fb fc35 	bl	800e730 <HAL_GetTick>
 8012ec6:	4602      	mov	r2, r0
 8012ec8:	693b      	ldr	r3, [r7, #16]
 8012eca:	1ad3      	subs	r3, r2, r3
 8012ecc:	2b02      	cmp	r3, #2
 8012ece:	d901      	bls.n	8012ed4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8012ed0:	2303      	movs	r3, #3
 8012ed2:	e078      	b.n	8012fc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012ed4:	4b3f      	ldr	r3, [pc, #252]	; (8012fd4 <HAL_RCC_OscConfig+0x4d8>)
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d1f0      	bne.n	8012ec2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	69da      	ldr	r2, [r3, #28]
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	6a1b      	ldr	r3, [r3, #32]
 8012ee8:	431a      	orrs	r2, r3
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012eee:	019b      	lsls	r3, r3, #6
 8012ef0:	431a      	orrs	r2, r3
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ef6:	085b      	lsrs	r3, r3, #1
 8012ef8:	3b01      	subs	r3, #1
 8012efa:	041b      	lsls	r3, r3, #16
 8012efc:	431a      	orrs	r2, r3
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f02:	061b      	lsls	r3, r3, #24
 8012f04:	4933      	ldr	r1, [pc, #204]	; (8012fd4 <HAL_RCC_OscConfig+0x4d8>)
 8012f06:	4313      	orrs	r3, r2
 8012f08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8012f0a:	4b33      	ldr	r3, [pc, #204]	; (8012fd8 <HAL_RCC_OscConfig+0x4dc>)
 8012f0c:	2201      	movs	r2, #1
 8012f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012f10:	f7fb fc0e 	bl	800e730 <HAL_GetTick>
 8012f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012f16:	e008      	b.n	8012f2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012f18:	f7fb fc0a 	bl	800e730 <HAL_GetTick>
 8012f1c:	4602      	mov	r2, r0
 8012f1e:	693b      	ldr	r3, [r7, #16]
 8012f20:	1ad3      	subs	r3, r2, r3
 8012f22:	2b02      	cmp	r3, #2
 8012f24:	d901      	bls.n	8012f2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8012f26:	2303      	movs	r3, #3
 8012f28:	e04d      	b.n	8012fc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012f2a:	4b2a      	ldr	r3, [pc, #168]	; (8012fd4 <HAL_RCC_OscConfig+0x4d8>)
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d0f0      	beq.n	8012f18 <HAL_RCC_OscConfig+0x41c>
 8012f36:	e045      	b.n	8012fc4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012f38:	4b27      	ldr	r3, [pc, #156]	; (8012fd8 <HAL_RCC_OscConfig+0x4dc>)
 8012f3a:	2200      	movs	r2, #0
 8012f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012f3e:	f7fb fbf7 	bl	800e730 <HAL_GetTick>
 8012f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012f44:	e008      	b.n	8012f58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012f46:	f7fb fbf3 	bl	800e730 <HAL_GetTick>
 8012f4a:	4602      	mov	r2, r0
 8012f4c:	693b      	ldr	r3, [r7, #16]
 8012f4e:	1ad3      	subs	r3, r2, r3
 8012f50:	2b02      	cmp	r3, #2
 8012f52:	d901      	bls.n	8012f58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8012f54:	2303      	movs	r3, #3
 8012f56:	e036      	b.n	8012fc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012f58:	4b1e      	ldr	r3, [pc, #120]	; (8012fd4 <HAL_RCC_OscConfig+0x4d8>)
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d1f0      	bne.n	8012f46 <HAL_RCC_OscConfig+0x44a>
 8012f64:	e02e      	b.n	8012fc4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	699b      	ldr	r3, [r3, #24]
 8012f6a:	2b01      	cmp	r3, #1
 8012f6c:	d101      	bne.n	8012f72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8012f6e:	2301      	movs	r3, #1
 8012f70:	e029      	b.n	8012fc6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8012f72:	4b18      	ldr	r3, [pc, #96]	; (8012fd4 <HAL_RCC_OscConfig+0x4d8>)
 8012f74:	685b      	ldr	r3, [r3, #4]
 8012f76:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	69db      	ldr	r3, [r3, #28]
 8012f82:	429a      	cmp	r2, r3
 8012f84:	d11c      	bne.n	8012fc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012f90:	429a      	cmp	r2, r3
 8012f92:	d115      	bne.n	8012fc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8012f94:	68fa      	ldr	r2, [r7, #12]
 8012f96:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8012f9a:	4013      	ands	r3, r2
 8012f9c:	687a      	ldr	r2, [r7, #4]
 8012f9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8012fa0:	4293      	cmp	r3, r2
 8012fa2:	d10d      	bne.n	8012fc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8012fae:	429a      	cmp	r2, r3
 8012fb0:	d106      	bne.n	8012fc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8012fbc:	429a      	cmp	r2, r3
 8012fbe:	d001      	beq.n	8012fc4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8012fc0:	2301      	movs	r3, #1
 8012fc2:	e000      	b.n	8012fc6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8012fc4:	2300      	movs	r3, #0
}
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	3718      	adds	r7, #24
 8012fca:	46bd      	mov	sp, r7
 8012fcc:	bd80      	pop	{r7, pc}
 8012fce:	bf00      	nop
 8012fd0:	40007000 	.word	0x40007000
 8012fd4:	40023800 	.word	0x40023800
 8012fd8:	42470060 	.word	0x42470060

08012fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	b084      	sub	sp, #16
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	6078      	str	r0, [r7, #4]
 8012fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d101      	bne.n	8012ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8012fec:	2301      	movs	r3, #1
 8012fee:	e0cc      	b.n	801318a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8012ff0:	4b68      	ldr	r3, [pc, #416]	; (8013194 <HAL_RCC_ClockConfig+0x1b8>)
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	f003 030f 	and.w	r3, r3, #15
 8012ff8:	683a      	ldr	r2, [r7, #0]
 8012ffa:	429a      	cmp	r2, r3
 8012ffc:	d90c      	bls.n	8013018 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012ffe:	4b65      	ldr	r3, [pc, #404]	; (8013194 <HAL_RCC_ClockConfig+0x1b8>)
 8013000:	683a      	ldr	r2, [r7, #0]
 8013002:	b2d2      	uxtb	r2, r2
 8013004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013006:	4b63      	ldr	r3, [pc, #396]	; (8013194 <HAL_RCC_ClockConfig+0x1b8>)
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	f003 030f 	and.w	r3, r3, #15
 801300e:	683a      	ldr	r2, [r7, #0]
 8013010:	429a      	cmp	r2, r3
 8013012:	d001      	beq.n	8013018 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8013014:	2301      	movs	r3, #1
 8013016:	e0b8      	b.n	801318a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	f003 0302 	and.w	r3, r3, #2
 8013020:	2b00      	cmp	r3, #0
 8013022:	d020      	beq.n	8013066 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	f003 0304 	and.w	r3, r3, #4
 801302c:	2b00      	cmp	r3, #0
 801302e:	d005      	beq.n	801303c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8013030:	4b59      	ldr	r3, [pc, #356]	; (8013198 <HAL_RCC_ClockConfig+0x1bc>)
 8013032:	689b      	ldr	r3, [r3, #8]
 8013034:	4a58      	ldr	r2, [pc, #352]	; (8013198 <HAL_RCC_ClockConfig+0x1bc>)
 8013036:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801303a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	f003 0308 	and.w	r3, r3, #8
 8013044:	2b00      	cmp	r3, #0
 8013046:	d005      	beq.n	8013054 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8013048:	4b53      	ldr	r3, [pc, #332]	; (8013198 <HAL_RCC_ClockConfig+0x1bc>)
 801304a:	689b      	ldr	r3, [r3, #8]
 801304c:	4a52      	ldr	r2, [pc, #328]	; (8013198 <HAL_RCC_ClockConfig+0x1bc>)
 801304e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8013052:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013054:	4b50      	ldr	r3, [pc, #320]	; (8013198 <HAL_RCC_ClockConfig+0x1bc>)
 8013056:	689b      	ldr	r3, [r3, #8]
 8013058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	689b      	ldr	r3, [r3, #8]
 8013060:	494d      	ldr	r1, [pc, #308]	; (8013198 <HAL_RCC_ClockConfig+0x1bc>)
 8013062:	4313      	orrs	r3, r2
 8013064:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	f003 0301 	and.w	r3, r3, #1
 801306e:	2b00      	cmp	r3, #0
 8013070:	d044      	beq.n	80130fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	685b      	ldr	r3, [r3, #4]
 8013076:	2b01      	cmp	r3, #1
 8013078:	d107      	bne.n	801308a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801307a:	4b47      	ldr	r3, [pc, #284]	; (8013198 <HAL_RCC_ClockConfig+0x1bc>)
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013082:	2b00      	cmp	r3, #0
 8013084:	d119      	bne.n	80130ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013086:	2301      	movs	r3, #1
 8013088:	e07f      	b.n	801318a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	685b      	ldr	r3, [r3, #4]
 801308e:	2b02      	cmp	r3, #2
 8013090:	d003      	beq.n	801309a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013096:	2b03      	cmp	r3, #3
 8013098:	d107      	bne.n	80130aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801309a:	4b3f      	ldr	r3, [pc, #252]	; (8013198 <HAL_RCC_ClockConfig+0x1bc>)
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d109      	bne.n	80130ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80130a6:	2301      	movs	r3, #1
 80130a8:	e06f      	b.n	801318a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80130aa:	4b3b      	ldr	r3, [pc, #236]	; (8013198 <HAL_RCC_ClockConfig+0x1bc>)
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	f003 0302 	and.w	r3, r3, #2
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d101      	bne.n	80130ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80130b6:	2301      	movs	r3, #1
 80130b8:	e067      	b.n	801318a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80130ba:	4b37      	ldr	r3, [pc, #220]	; (8013198 <HAL_RCC_ClockConfig+0x1bc>)
 80130bc:	689b      	ldr	r3, [r3, #8]
 80130be:	f023 0203 	bic.w	r2, r3, #3
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	685b      	ldr	r3, [r3, #4]
 80130c6:	4934      	ldr	r1, [pc, #208]	; (8013198 <HAL_RCC_ClockConfig+0x1bc>)
 80130c8:	4313      	orrs	r3, r2
 80130ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80130cc:	f7fb fb30 	bl	800e730 <HAL_GetTick>
 80130d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80130d2:	e00a      	b.n	80130ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80130d4:	f7fb fb2c 	bl	800e730 <HAL_GetTick>
 80130d8:	4602      	mov	r2, r0
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	1ad3      	subs	r3, r2, r3
 80130de:	f241 3288 	movw	r2, #5000	; 0x1388
 80130e2:	4293      	cmp	r3, r2
 80130e4:	d901      	bls.n	80130ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80130e6:	2303      	movs	r3, #3
 80130e8:	e04f      	b.n	801318a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80130ea:	4b2b      	ldr	r3, [pc, #172]	; (8013198 <HAL_RCC_ClockConfig+0x1bc>)
 80130ec:	689b      	ldr	r3, [r3, #8]
 80130ee:	f003 020c 	and.w	r2, r3, #12
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	685b      	ldr	r3, [r3, #4]
 80130f6:	009b      	lsls	r3, r3, #2
 80130f8:	429a      	cmp	r2, r3
 80130fa:	d1eb      	bne.n	80130d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80130fc:	4b25      	ldr	r3, [pc, #148]	; (8013194 <HAL_RCC_ClockConfig+0x1b8>)
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	f003 030f 	and.w	r3, r3, #15
 8013104:	683a      	ldr	r2, [r7, #0]
 8013106:	429a      	cmp	r2, r3
 8013108:	d20c      	bcs.n	8013124 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801310a:	4b22      	ldr	r3, [pc, #136]	; (8013194 <HAL_RCC_ClockConfig+0x1b8>)
 801310c:	683a      	ldr	r2, [r7, #0]
 801310e:	b2d2      	uxtb	r2, r2
 8013110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013112:	4b20      	ldr	r3, [pc, #128]	; (8013194 <HAL_RCC_ClockConfig+0x1b8>)
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	f003 030f 	and.w	r3, r3, #15
 801311a:	683a      	ldr	r2, [r7, #0]
 801311c:	429a      	cmp	r2, r3
 801311e:	d001      	beq.n	8013124 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8013120:	2301      	movs	r3, #1
 8013122:	e032      	b.n	801318a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	f003 0304 	and.w	r3, r3, #4
 801312c:	2b00      	cmp	r3, #0
 801312e:	d008      	beq.n	8013142 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013130:	4b19      	ldr	r3, [pc, #100]	; (8013198 <HAL_RCC_ClockConfig+0x1bc>)
 8013132:	689b      	ldr	r3, [r3, #8]
 8013134:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	68db      	ldr	r3, [r3, #12]
 801313c:	4916      	ldr	r1, [pc, #88]	; (8013198 <HAL_RCC_ClockConfig+0x1bc>)
 801313e:	4313      	orrs	r3, r2
 8013140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	f003 0308 	and.w	r3, r3, #8
 801314a:	2b00      	cmp	r3, #0
 801314c:	d009      	beq.n	8013162 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801314e:	4b12      	ldr	r3, [pc, #72]	; (8013198 <HAL_RCC_ClockConfig+0x1bc>)
 8013150:	689b      	ldr	r3, [r3, #8]
 8013152:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	691b      	ldr	r3, [r3, #16]
 801315a:	00db      	lsls	r3, r3, #3
 801315c:	490e      	ldr	r1, [pc, #56]	; (8013198 <HAL_RCC_ClockConfig+0x1bc>)
 801315e:	4313      	orrs	r3, r2
 8013160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8013162:	f000 f82d 	bl	80131c0 <HAL_RCC_GetSysClockFreq>
 8013166:	4602      	mov	r2, r0
 8013168:	4b0b      	ldr	r3, [pc, #44]	; (8013198 <HAL_RCC_ClockConfig+0x1bc>)
 801316a:	689b      	ldr	r3, [r3, #8]
 801316c:	091b      	lsrs	r3, r3, #4
 801316e:	f003 030f 	and.w	r3, r3, #15
 8013172:	490a      	ldr	r1, [pc, #40]	; (801319c <HAL_RCC_ClockConfig+0x1c0>)
 8013174:	5ccb      	ldrb	r3, [r1, r3]
 8013176:	fa22 f303 	lsr.w	r3, r2, r3
 801317a:	4a09      	ldr	r2, [pc, #36]	; (80131a0 <HAL_RCC_ClockConfig+0x1c4>)
 801317c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801317e:	4b09      	ldr	r3, [pc, #36]	; (80131a4 <HAL_RCC_ClockConfig+0x1c8>)
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	4618      	mov	r0, r3
 8013184:	f7f9 ff04 	bl	800cf90 <HAL_InitTick>

  return HAL_OK;
 8013188:	2300      	movs	r3, #0
}
 801318a:	4618      	mov	r0, r3
 801318c:	3710      	adds	r7, #16
 801318e:	46bd      	mov	sp, r7
 8013190:	bd80      	pop	{r7, pc}
 8013192:	bf00      	nop
 8013194:	40023c00 	.word	0x40023c00
 8013198:	40023800 	.word	0x40023800
 801319c:	08020e28 	.word	0x08020e28
 80131a0:	200000c0 	.word	0x200000c0
 80131a4:	200000c4 	.word	0x200000c4

080131a8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80131a8:	b480      	push	{r7}
 80131aa:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80131ac:	4b03      	ldr	r3, [pc, #12]	; (80131bc <HAL_RCC_EnableCSS+0x14>)
 80131ae:	2201      	movs	r2, #1
 80131b0:	601a      	str	r2, [r3, #0]
}
 80131b2:	bf00      	nop
 80131b4:	46bd      	mov	sp, r7
 80131b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ba:	4770      	bx	lr
 80131bc:	4247004c 	.word	0x4247004c

080131c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80131c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80131c4:	b084      	sub	sp, #16
 80131c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80131c8:	2300      	movs	r3, #0
 80131ca:	607b      	str	r3, [r7, #4]
 80131cc:	2300      	movs	r3, #0
 80131ce:	60fb      	str	r3, [r7, #12]
 80131d0:	2300      	movs	r3, #0
 80131d2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80131d4:	2300      	movs	r3, #0
 80131d6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80131d8:	4b67      	ldr	r3, [pc, #412]	; (8013378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80131da:	689b      	ldr	r3, [r3, #8]
 80131dc:	f003 030c 	and.w	r3, r3, #12
 80131e0:	2b08      	cmp	r3, #8
 80131e2:	d00d      	beq.n	8013200 <HAL_RCC_GetSysClockFreq+0x40>
 80131e4:	2b08      	cmp	r3, #8
 80131e6:	f200 80bd 	bhi.w	8013364 <HAL_RCC_GetSysClockFreq+0x1a4>
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d002      	beq.n	80131f4 <HAL_RCC_GetSysClockFreq+0x34>
 80131ee:	2b04      	cmp	r3, #4
 80131f0:	d003      	beq.n	80131fa <HAL_RCC_GetSysClockFreq+0x3a>
 80131f2:	e0b7      	b.n	8013364 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80131f4:	4b61      	ldr	r3, [pc, #388]	; (801337c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80131f6:	60bb      	str	r3, [r7, #8]
       break;
 80131f8:	e0b7      	b.n	801336a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80131fa:	4b61      	ldr	r3, [pc, #388]	; (8013380 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80131fc:	60bb      	str	r3, [r7, #8]
      break;
 80131fe:	e0b4      	b.n	801336a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8013200:	4b5d      	ldr	r3, [pc, #372]	; (8013378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013202:	685b      	ldr	r3, [r3, #4]
 8013204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013208:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801320a:	4b5b      	ldr	r3, [pc, #364]	; (8013378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801320c:	685b      	ldr	r3, [r3, #4]
 801320e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013212:	2b00      	cmp	r3, #0
 8013214:	d04d      	beq.n	80132b2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013216:	4b58      	ldr	r3, [pc, #352]	; (8013378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013218:	685b      	ldr	r3, [r3, #4]
 801321a:	099b      	lsrs	r3, r3, #6
 801321c:	461a      	mov	r2, r3
 801321e:	f04f 0300 	mov.w	r3, #0
 8013222:	f240 10ff 	movw	r0, #511	; 0x1ff
 8013226:	f04f 0100 	mov.w	r1, #0
 801322a:	ea02 0800 	and.w	r8, r2, r0
 801322e:	ea03 0901 	and.w	r9, r3, r1
 8013232:	4640      	mov	r0, r8
 8013234:	4649      	mov	r1, r9
 8013236:	f04f 0200 	mov.w	r2, #0
 801323a:	f04f 0300 	mov.w	r3, #0
 801323e:	014b      	lsls	r3, r1, #5
 8013240:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8013244:	0142      	lsls	r2, r0, #5
 8013246:	4610      	mov	r0, r2
 8013248:	4619      	mov	r1, r3
 801324a:	ebb0 0008 	subs.w	r0, r0, r8
 801324e:	eb61 0109 	sbc.w	r1, r1, r9
 8013252:	f04f 0200 	mov.w	r2, #0
 8013256:	f04f 0300 	mov.w	r3, #0
 801325a:	018b      	lsls	r3, r1, #6
 801325c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8013260:	0182      	lsls	r2, r0, #6
 8013262:	1a12      	subs	r2, r2, r0
 8013264:	eb63 0301 	sbc.w	r3, r3, r1
 8013268:	f04f 0000 	mov.w	r0, #0
 801326c:	f04f 0100 	mov.w	r1, #0
 8013270:	00d9      	lsls	r1, r3, #3
 8013272:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8013276:	00d0      	lsls	r0, r2, #3
 8013278:	4602      	mov	r2, r0
 801327a:	460b      	mov	r3, r1
 801327c:	eb12 0208 	adds.w	r2, r2, r8
 8013280:	eb43 0309 	adc.w	r3, r3, r9
 8013284:	f04f 0000 	mov.w	r0, #0
 8013288:	f04f 0100 	mov.w	r1, #0
 801328c:	0259      	lsls	r1, r3, #9
 801328e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8013292:	0250      	lsls	r0, r2, #9
 8013294:	4602      	mov	r2, r0
 8013296:	460b      	mov	r3, r1
 8013298:	4610      	mov	r0, r2
 801329a:	4619      	mov	r1, r3
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	461a      	mov	r2, r3
 80132a0:	f04f 0300 	mov.w	r3, #0
 80132a4:	f7ed fcf0 	bl	8000c88 <__aeabi_uldivmod>
 80132a8:	4602      	mov	r2, r0
 80132aa:	460b      	mov	r3, r1
 80132ac:	4613      	mov	r3, r2
 80132ae:	60fb      	str	r3, [r7, #12]
 80132b0:	e04a      	b.n	8013348 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80132b2:	4b31      	ldr	r3, [pc, #196]	; (8013378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80132b4:	685b      	ldr	r3, [r3, #4]
 80132b6:	099b      	lsrs	r3, r3, #6
 80132b8:	461a      	mov	r2, r3
 80132ba:	f04f 0300 	mov.w	r3, #0
 80132be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80132c2:	f04f 0100 	mov.w	r1, #0
 80132c6:	ea02 0400 	and.w	r4, r2, r0
 80132ca:	ea03 0501 	and.w	r5, r3, r1
 80132ce:	4620      	mov	r0, r4
 80132d0:	4629      	mov	r1, r5
 80132d2:	f04f 0200 	mov.w	r2, #0
 80132d6:	f04f 0300 	mov.w	r3, #0
 80132da:	014b      	lsls	r3, r1, #5
 80132dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80132e0:	0142      	lsls	r2, r0, #5
 80132e2:	4610      	mov	r0, r2
 80132e4:	4619      	mov	r1, r3
 80132e6:	1b00      	subs	r0, r0, r4
 80132e8:	eb61 0105 	sbc.w	r1, r1, r5
 80132ec:	f04f 0200 	mov.w	r2, #0
 80132f0:	f04f 0300 	mov.w	r3, #0
 80132f4:	018b      	lsls	r3, r1, #6
 80132f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80132fa:	0182      	lsls	r2, r0, #6
 80132fc:	1a12      	subs	r2, r2, r0
 80132fe:	eb63 0301 	sbc.w	r3, r3, r1
 8013302:	f04f 0000 	mov.w	r0, #0
 8013306:	f04f 0100 	mov.w	r1, #0
 801330a:	00d9      	lsls	r1, r3, #3
 801330c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8013310:	00d0      	lsls	r0, r2, #3
 8013312:	4602      	mov	r2, r0
 8013314:	460b      	mov	r3, r1
 8013316:	1912      	adds	r2, r2, r4
 8013318:	eb45 0303 	adc.w	r3, r5, r3
 801331c:	f04f 0000 	mov.w	r0, #0
 8013320:	f04f 0100 	mov.w	r1, #0
 8013324:	0299      	lsls	r1, r3, #10
 8013326:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801332a:	0290      	lsls	r0, r2, #10
 801332c:	4602      	mov	r2, r0
 801332e:	460b      	mov	r3, r1
 8013330:	4610      	mov	r0, r2
 8013332:	4619      	mov	r1, r3
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	461a      	mov	r2, r3
 8013338:	f04f 0300 	mov.w	r3, #0
 801333c:	f7ed fca4 	bl	8000c88 <__aeabi_uldivmod>
 8013340:	4602      	mov	r2, r0
 8013342:	460b      	mov	r3, r1
 8013344:	4613      	mov	r3, r2
 8013346:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8013348:	4b0b      	ldr	r3, [pc, #44]	; (8013378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801334a:	685b      	ldr	r3, [r3, #4]
 801334c:	0c1b      	lsrs	r3, r3, #16
 801334e:	f003 0303 	and.w	r3, r3, #3
 8013352:	3301      	adds	r3, #1
 8013354:	005b      	lsls	r3, r3, #1
 8013356:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8013358:	68fa      	ldr	r2, [r7, #12]
 801335a:	683b      	ldr	r3, [r7, #0]
 801335c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013360:	60bb      	str	r3, [r7, #8]
      break;
 8013362:	e002      	b.n	801336a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8013364:	4b05      	ldr	r3, [pc, #20]	; (801337c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8013366:	60bb      	str	r3, [r7, #8]
      break;
 8013368:	bf00      	nop
    }
  }
  return sysclockfreq;
 801336a:	68bb      	ldr	r3, [r7, #8]
}
 801336c:	4618      	mov	r0, r3
 801336e:	3710      	adds	r7, #16
 8013370:	46bd      	mov	sp, r7
 8013372:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8013376:	bf00      	nop
 8013378:	40023800 	.word	0x40023800
 801337c:	00f42400 	.word	0x00f42400
 8013380:	007a1200 	.word	0x007a1200

08013384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013384:	b480      	push	{r7}
 8013386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8013388:	4b03      	ldr	r3, [pc, #12]	; (8013398 <HAL_RCC_GetHCLKFreq+0x14>)
 801338a:	681b      	ldr	r3, [r3, #0]
}
 801338c:	4618      	mov	r0, r3
 801338e:	46bd      	mov	sp, r7
 8013390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013394:	4770      	bx	lr
 8013396:	bf00      	nop
 8013398:	200000c0 	.word	0x200000c0

0801339c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801339c:	b580      	push	{r7, lr}
 801339e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80133a0:	f7ff fff0 	bl	8013384 <HAL_RCC_GetHCLKFreq>
 80133a4:	4602      	mov	r2, r0
 80133a6:	4b05      	ldr	r3, [pc, #20]	; (80133bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80133a8:	689b      	ldr	r3, [r3, #8]
 80133aa:	0a9b      	lsrs	r3, r3, #10
 80133ac:	f003 0307 	and.w	r3, r3, #7
 80133b0:	4903      	ldr	r1, [pc, #12]	; (80133c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80133b2:	5ccb      	ldrb	r3, [r1, r3]
 80133b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80133b8:	4618      	mov	r0, r3
 80133ba:	bd80      	pop	{r7, pc}
 80133bc:	40023800 	.word	0x40023800
 80133c0:	08020e38 	.word	0x08020e38

080133c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80133c8:	f7ff ffdc 	bl	8013384 <HAL_RCC_GetHCLKFreq>
 80133cc:	4602      	mov	r2, r0
 80133ce:	4b05      	ldr	r3, [pc, #20]	; (80133e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80133d0:	689b      	ldr	r3, [r3, #8]
 80133d2:	0b5b      	lsrs	r3, r3, #13
 80133d4:	f003 0307 	and.w	r3, r3, #7
 80133d8:	4903      	ldr	r1, [pc, #12]	; (80133e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80133da:	5ccb      	ldrb	r3, [r1, r3]
 80133dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80133e0:	4618      	mov	r0, r3
 80133e2:	bd80      	pop	{r7, pc}
 80133e4:	40023800 	.word	0x40023800
 80133e8:	08020e38 	.word	0x08020e38

080133ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80133ec:	b480      	push	{r7}
 80133ee:	b083      	sub	sp, #12
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	6078      	str	r0, [r7, #4]
 80133f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	220f      	movs	r2, #15
 80133fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80133fc:	4b12      	ldr	r3, [pc, #72]	; (8013448 <HAL_RCC_GetClockConfig+0x5c>)
 80133fe:	689b      	ldr	r3, [r3, #8]
 8013400:	f003 0203 	and.w	r2, r3, #3
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8013408:	4b0f      	ldr	r3, [pc, #60]	; (8013448 <HAL_RCC_GetClockConfig+0x5c>)
 801340a:	689b      	ldr	r3, [r3, #8]
 801340c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8013414:	4b0c      	ldr	r3, [pc, #48]	; (8013448 <HAL_RCC_GetClockConfig+0x5c>)
 8013416:	689b      	ldr	r3, [r3, #8]
 8013418:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8013420:	4b09      	ldr	r3, [pc, #36]	; (8013448 <HAL_RCC_GetClockConfig+0x5c>)
 8013422:	689b      	ldr	r3, [r3, #8]
 8013424:	08db      	lsrs	r3, r3, #3
 8013426:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801342e:	4b07      	ldr	r3, [pc, #28]	; (801344c <HAL_RCC_GetClockConfig+0x60>)
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	f003 020f 	and.w	r2, r3, #15
 8013436:	683b      	ldr	r3, [r7, #0]
 8013438:	601a      	str	r2, [r3, #0]
}
 801343a:	bf00      	nop
 801343c:	370c      	adds	r7, #12
 801343e:	46bd      	mov	sp, r7
 8013440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013444:	4770      	bx	lr
 8013446:	bf00      	nop
 8013448:	40023800 	.word	0x40023800
 801344c:	40023c00 	.word	0x40023c00

08013450 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8013450:	b580      	push	{r7, lr}
 8013452:	b082      	sub	sp, #8
 8013454:	af00      	add	r7, sp, #0
 8013456:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d101      	bne.n	8013462 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801345e:	2301      	movs	r3, #1
 8013460:	e056      	b.n	8013510 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	2200      	movs	r2, #0
 8013466:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801346e:	b2db      	uxtb	r3, r3
 8013470:	2b00      	cmp	r3, #0
 8013472:	d106      	bne.n	8013482 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	2200      	movs	r2, #0
 8013478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801347c:	6878      	ldr	r0, [r7, #4]
 801347e:	f7ef fdf1 	bl	8003064 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	2202      	movs	r2, #2
 8013486:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	681a      	ldr	r2, [r3, #0]
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013498:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	685a      	ldr	r2, [r3, #4]
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	689b      	ldr	r3, [r3, #8]
 80134a2:	431a      	orrs	r2, r3
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	68db      	ldr	r3, [r3, #12]
 80134a8:	431a      	orrs	r2, r3
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	691b      	ldr	r3, [r3, #16]
 80134ae:	431a      	orrs	r2, r3
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	695b      	ldr	r3, [r3, #20]
 80134b4:	431a      	orrs	r2, r3
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	699b      	ldr	r3, [r3, #24]
 80134ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80134be:	431a      	orrs	r2, r3
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	69db      	ldr	r3, [r3, #28]
 80134c4:	431a      	orrs	r2, r3
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	6a1b      	ldr	r3, [r3, #32]
 80134ca:	ea42 0103 	orr.w	r1, r2, r3
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	430a      	orrs	r2, r1
 80134d8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	699b      	ldr	r3, [r3, #24]
 80134de:	0c1b      	lsrs	r3, r3, #16
 80134e0:	f003 0104 	and.w	r1, r3, #4
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	430a      	orrs	r2, r1
 80134ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	69da      	ldr	r2, [r3, #28]
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80134fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	2200      	movs	r2, #0
 8013504:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	2201      	movs	r2, #1
 801350a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 801350e:	2300      	movs	r3, #0
}
 8013510:	4618      	mov	r0, r3
 8013512:	3708      	adds	r7, #8
 8013514:	46bd      	mov	sp, r7
 8013516:	bd80      	pop	{r7, pc}

08013518 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013518:	b580      	push	{r7, lr}
 801351a:	b088      	sub	sp, #32
 801351c:	af00      	add	r7, sp, #0
 801351e:	60f8      	str	r0, [r7, #12]
 8013520:	60b9      	str	r1, [r7, #8]
 8013522:	603b      	str	r3, [r7, #0]
 8013524:	4613      	mov	r3, r2
 8013526:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013528:	2300      	movs	r3, #0
 801352a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013532:	2b01      	cmp	r3, #1
 8013534:	d101      	bne.n	801353a <HAL_SPI_Transmit+0x22>
 8013536:	2302      	movs	r3, #2
 8013538:	e11e      	b.n	8013778 <HAL_SPI_Transmit+0x260>
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	2201      	movs	r2, #1
 801353e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013542:	f7fb f8f5 	bl	800e730 <HAL_GetTick>
 8013546:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8013548:	88fb      	ldrh	r3, [r7, #6]
 801354a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013552:	b2db      	uxtb	r3, r3
 8013554:	2b01      	cmp	r3, #1
 8013556:	d002      	beq.n	801355e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8013558:	2302      	movs	r3, #2
 801355a:	77fb      	strb	r3, [r7, #31]
    goto error;
 801355c:	e103      	b.n	8013766 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 801355e:	68bb      	ldr	r3, [r7, #8]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d002      	beq.n	801356a <HAL_SPI_Transmit+0x52>
 8013564:	88fb      	ldrh	r3, [r7, #6]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d102      	bne.n	8013570 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801356a:	2301      	movs	r3, #1
 801356c:	77fb      	strb	r3, [r7, #31]
    goto error;
 801356e:	e0fa      	b.n	8013766 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	2203      	movs	r2, #3
 8013574:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	2200      	movs	r2, #0
 801357c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	68ba      	ldr	r2, [r7, #8]
 8013582:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	88fa      	ldrh	r2, [r7, #6]
 8013588:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	88fa      	ldrh	r2, [r7, #6]
 801358e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	2200      	movs	r2, #0
 8013594:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	2200      	movs	r2, #0
 801359a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	2200      	movs	r2, #0
 80135a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	2200      	movs	r2, #0
 80135a6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	2200      	movs	r2, #0
 80135ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	689b      	ldr	r3, [r3, #8]
 80135b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80135b6:	d107      	bne.n	80135c8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	681a      	ldr	r2, [r3, #0]
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80135c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80135d2:	2b40      	cmp	r3, #64	; 0x40
 80135d4:	d007      	beq.n	80135e6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	681a      	ldr	r2, [r3, #0]
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80135e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	68db      	ldr	r3, [r3, #12]
 80135ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80135ee:	d14b      	bne.n	8013688 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	685b      	ldr	r3, [r3, #4]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d002      	beq.n	80135fe <HAL_SPI_Transmit+0xe6>
 80135f8:	8afb      	ldrh	r3, [r7, #22]
 80135fa:	2b01      	cmp	r3, #1
 80135fc:	d13e      	bne.n	801367c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013602:	881a      	ldrh	r2, [r3, #0]
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801360e:	1c9a      	adds	r2, r3, #2
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013618:	b29b      	uxth	r3, r3
 801361a:	3b01      	subs	r3, #1
 801361c:	b29a      	uxth	r2, r3
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8013622:	e02b      	b.n	801367c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	689b      	ldr	r3, [r3, #8]
 801362a:	f003 0302 	and.w	r3, r3, #2
 801362e:	2b02      	cmp	r3, #2
 8013630:	d112      	bne.n	8013658 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013636:	881a      	ldrh	r2, [r3, #0]
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013642:	1c9a      	adds	r2, r3, #2
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801364c:	b29b      	uxth	r3, r3
 801364e:	3b01      	subs	r3, #1
 8013650:	b29a      	uxth	r2, r3
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	86da      	strh	r2, [r3, #54]	; 0x36
 8013656:	e011      	b.n	801367c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013658:	f7fb f86a 	bl	800e730 <HAL_GetTick>
 801365c:	4602      	mov	r2, r0
 801365e:	69bb      	ldr	r3, [r7, #24]
 8013660:	1ad3      	subs	r3, r2, r3
 8013662:	683a      	ldr	r2, [r7, #0]
 8013664:	429a      	cmp	r2, r3
 8013666:	d803      	bhi.n	8013670 <HAL_SPI_Transmit+0x158>
 8013668:	683b      	ldr	r3, [r7, #0]
 801366a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801366e:	d102      	bne.n	8013676 <HAL_SPI_Transmit+0x15e>
 8013670:	683b      	ldr	r3, [r7, #0]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d102      	bne.n	801367c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8013676:	2303      	movs	r3, #3
 8013678:	77fb      	strb	r3, [r7, #31]
          goto error;
 801367a:	e074      	b.n	8013766 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013680:	b29b      	uxth	r3, r3
 8013682:	2b00      	cmp	r3, #0
 8013684:	d1ce      	bne.n	8013624 <HAL_SPI_Transmit+0x10c>
 8013686:	e04c      	b.n	8013722 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	685b      	ldr	r3, [r3, #4]
 801368c:	2b00      	cmp	r3, #0
 801368e:	d002      	beq.n	8013696 <HAL_SPI_Transmit+0x17e>
 8013690:	8afb      	ldrh	r3, [r7, #22]
 8013692:	2b01      	cmp	r3, #1
 8013694:	d140      	bne.n	8013718 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	330c      	adds	r3, #12
 80136a0:	7812      	ldrb	r2, [r2, #0]
 80136a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136a8:	1c5a      	adds	r2, r3, #1
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80136b2:	b29b      	uxth	r3, r3
 80136b4:	3b01      	subs	r3, #1
 80136b6:	b29a      	uxth	r2, r3
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80136bc:	e02c      	b.n	8013718 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	689b      	ldr	r3, [r3, #8]
 80136c4:	f003 0302 	and.w	r3, r3, #2
 80136c8:	2b02      	cmp	r3, #2
 80136ca:	d113      	bne.n	80136f4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	330c      	adds	r3, #12
 80136d6:	7812      	ldrb	r2, [r2, #0]
 80136d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136de:	1c5a      	adds	r2, r3, #1
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80136e8:	b29b      	uxth	r3, r3
 80136ea:	3b01      	subs	r3, #1
 80136ec:	b29a      	uxth	r2, r3
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80136f2:	e011      	b.n	8013718 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80136f4:	f7fb f81c 	bl	800e730 <HAL_GetTick>
 80136f8:	4602      	mov	r2, r0
 80136fa:	69bb      	ldr	r3, [r7, #24]
 80136fc:	1ad3      	subs	r3, r2, r3
 80136fe:	683a      	ldr	r2, [r7, #0]
 8013700:	429a      	cmp	r2, r3
 8013702:	d803      	bhi.n	801370c <HAL_SPI_Transmit+0x1f4>
 8013704:	683b      	ldr	r3, [r7, #0]
 8013706:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801370a:	d102      	bne.n	8013712 <HAL_SPI_Transmit+0x1fa>
 801370c:	683b      	ldr	r3, [r7, #0]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d102      	bne.n	8013718 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8013712:	2303      	movs	r3, #3
 8013714:	77fb      	strb	r3, [r7, #31]
          goto error;
 8013716:	e026      	b.n	8013766 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801371c:	b29b      	uxth	r3, r3
 801371e:	2b00      	cmp	r3, #0
 8013720:	d1cd      	bne.n	80136be <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013722:	69ba      	ldr	r2, [r7, #24]
 8013724:	6839      	ldr	r1, [r7, #0]
 8013726:	68f8      	ldr	r0, [r7, #12]
 8013728:	f000 f9b2 	bl	8013a90 <SPI_EndRxTxTransaction>
 801372c:	4603      	mov	r3, r0
 801372e:	2b00      	cmp	r3, #0
 8013730:	d002      	beq.n	8013738 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	2220      	movs	r2, #32
 8013736:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	689b      	ldr	r3, [r3, #8]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d10a      	bne.n	8013756 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013740:	2300      	movs	r3, #0
 8013742:	613b      	str	r3, [r7, #16]
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	68db      	ldr	r3, [r3, #12]
 801374a:	613b      	str	r3, [r7, #16]
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	689b      	ldr	r3, [r3, #8]
 8013752:	613b      	str	r3, [r7, #16]
 8013754:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801375a:	2b00      	cmp	r3, #0
 801375c:	d002      	beq.n	8013764 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 801375e:	2301      	movs	r3, #1
 8013760:	77fb      	strb	r3, [r7, #31]
 8013762:	e000      	b.n	8013766 <HAL_SPI_Transmit+0x24e>
  }

error:
 8013764:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	2201      	movs	r2, #1
 801376a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	2200      	movs	r2, #0
 8013772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013776:	7ffb      	ldrb	r3, [r7, #31]
}
 8013778:	4618      	mov	r0, r3
 801377a:	3720      	adds	r7, #32
 801377c:	46bd      	mov	sp, r7
 801377e:	bd80      	pop	{r7, pc}

08013780 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8013780:	b580      	push	{r7, lr}
 8013782:	b088      	sub	sp, #32
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	685b      	ldr	r3, [r3, #4]
 801378e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	689b      	ldr	r3, [r3, #8]
 8013796:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8013798:	69bb      	ldr	r3, [r7, #24]
 801379a:	099b      	lsrs	r3, r3, #6
 801379c:	f003 0301 	and.w	r3, r3, #1
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d10f      	bne.n	80137c4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80137a4:	69bb      	ldr	r3, [r7, #24]
 80137a6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d00a      	beq.n	80137c4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80137ae:	69fb      	ldr	r3, [r7, #28]
 80137b0:	099b      	lsrs	r3, r3, #6
 80137b2:	f003 0301 	and.w	r3, r3, #1
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d004      	beq.n	80137c4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137be:	6878      	ldr	r0, [r7, #4]
 80137c0:	4798      	blx	r3
    return;
 80137c2:	e0d7      	b.n	8013974 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80137c4:	69bb      	ldr	r3, [r7, #24]
 80137c6:	085b      	lsrs	r3, r3, #1
 80137c8:	f003 0301 	and.w	r3, r3, #1
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d00a      	beq.n	80137e6 <HAL_SPI_IRQHandler+0x66>
 80137d0:	69fb      	ldr	r3, [r7, #28]
 80137d2:	09db      	lsrs	r3, r3, #7
 80137d4:	f003 0301 	and.w	r3, r3, #1
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d004      	beq.n	80137e6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80137e0:	6878      	ldr	r0, [r7, #4]
 80137e2:	4798      	blx	r3
    return;
 80137e4:	e0c6      	b.n	8013974 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80137e6:	69bb      	ldr	r3, [r7, #24]
 80137e8:	095b      	lsrs	r3, r3, #5
 80137ea:	f003 0301 	and.w	r3, r3, #1
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d10c      	bne.n	801380c <HAL_SPI_IRQHandler+0x8c>
 80137f2:	69bb      	ldr	r3, [r7, #24]
 80137f4:	099b      	lsrs	r3, r3, #6
 80137f6:	f003 0301 	and.w	r3, r3, #1
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d106      	bne.n	801380c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80137fe:	69bb      	ldr	r3, [r7, #24]
 8013800:	0a1b      	lsrs	r3, r3, #8
 8013802:	f003 0301 	and.w	r3, r3, #1
 8013806:	2b00      	cmp	r3, #0
 8013808:	f000 80b4 	beq.w	8013974 <HAL_SPI_IRQHandler+0x1f4>
 801380c:	69fb      	ldr	r3, [r7, #28]
 801380e:	095b      	lsrs	r3, r3, #5
 8013810:	f003 0301 	and.w	r3, r3, #1
 8013814:	2b00      	cmp	r3, #0
 8013816:	f000 80ad 	beq.w	8013974 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801381a:	69bb      	ldr	r3, [r7, #24]
 801381c:	099b      	lsrs	r3, r3, #6
 801381e:	f003 0301 	and.w	r3, r3, #1
 8013822:	2b00      	cmp	r3, #0
 8013824:	d023      	beq.n	801386e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801382c:	b2db      	uxtb	r3, r3
 801382e:	2b03      	cmp	r3, #3
 8013830:	d011      	beq.n	8013856 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013836:	f043 0204 	orr.w	r2, r3, #4
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801383e:	2300      	movs	r3, #0
 8013840:	617b      	str	r3, [r7, #20]
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	68db      	ldr	r3, [r3, #12]
 8013848:	617b      	str	r3, [r7, #20]
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	689b      	ldr	r3, [r3, #8]
 8013850:	617b      	str	r3, [r7, #20]
 8013852:	697b      	ldr	r3, [r7, #20]
 8013854:	e00b      	b.n	801386e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013856:	2300      	movs	r3, #0
 8013858:	613b      	str	r3, [r7, #16]
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	68db      	ldr	r3, [r3, #12]
 8013860:	613b      	str	r3, [r7, #16]
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	689b      	ldr	r3, [r3, #8]
 8013868:	613b      	str	r3, [r7, #16]
 801386a:	693b      	ldr	r3, [r7, #16]
        return;
 801386c:	e082      	b.n	8013974 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801386e:	69bb      	ldr	r3, [r7, #24]
 8013870:	095b      	lsrs	r3, r3, #5
 8013872:	f003 0301 	and.w	r3, r3, #1
 8013876:	2b00      	cmp	r3, #0
 8013878:	d014      	beq.n	80138a4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801387e:	f043 0201 	orr.w	r2, r3, #1
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8013886:	2300      	movs	r3, #0
 8013888:	60fb      	str	r3, [r7, #12]
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	689b      	ldr	r3, [r3, #8]
 8013890:	60fb      	str	r3, [r7, #12]
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	681a      	ldr	r2, [r3, #0]
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80138a0:	601a      	str	r2, [r3, #0]
 80138a2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80138a4:	69bb      	ldr	r3, [r7, #24]
 80138a6:	0a1b      	lsrs	r3, r3, #8
 80138a8:	f003 0301 	and.w	r3, r3, #1
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d00c      	beq.n	80138ca <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80138b4:	f043 0208 	orr.w	r2, r3, #8
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80138bc:	2300      	movs	r3, #0
 80138be:	60bb      	str	r3, [r7, #8]
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	689b      	ldr	r3, [r3, #8]
 80138c6:	60bb      	str	r3, [r7, #8]
 80138c8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d04f      	beq.n	8013972 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	685a      	ldr	r2, [r3, #4]
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80138e0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	2201      	movs	r2, #1
 80138e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80138ea:	69fb      	ldr	r3, [r7, #28]
 80138ec:	f003 0302 	and.w	r3, r3, #2
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d104      	bne.n	80138fe <HAL_SPI_IRQHandler+0x17e>
 80138f4:	69fb      	ldr	r3, [r7, #28]
 80138f6:	f003 0301 	and.w	r3, r3, #1
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d034      	beq.n	8013968 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	685a      	ldr	r2, [r3, #4]
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	f022 0203 	bic.w	r2, r2, #3
 801390c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013912:	2b00      	cmp	r3, #0
 8013914:	d011      	beq.n	801393a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801391a:	4a18      	ldr	r2, [pc, #96]	; (801397c <HAL_SPI_IRQHandler+0x1fc>)
 801391c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013922:	4618      	mov	r0, r3
 8013924:	f7fc f866 	bl	800f9f4 <HAL_DMA_Abort_IT>
 8013928:	4603      	mov	r3, r0
 801392a:	2b00      	cmp	r3, #0
 801392c:	d005      	beq.n	801393a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013932:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801393e:	2b00      	cmp	r3, #0
 8013940:	d016      	beq.n	8013970 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013946:	4a0d      	ldr	r2, [pc, #52]	; (801397c <HAL_SPI_IRQHandler+0x1fc>)
 8013948:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801394e:	4618      	mov	r0, r3
 8013950:	f7fc f850 	bl	800f9f4 <HAL_DMA_Abort_IT>
 8013954:	4603      	mov	r3, r0
 8013956:	2b00      	cmp	r3, #0
 8013958:	d00a      	beq.n	8013970 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801395e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8013966:	e003      	b.n	8013970 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8013968:	6878      	ldr	r0, [r7, #4]
 801396a:	f000 f809 	bl	8013980 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801396e:	e000      	b.n	8013972 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8013970:	bf00      	nop
    return;
 8013972:	bf00      	nop
  }
}
 8013974:	3720      	adds	r7, #32
 8013976:	46bd      	mov	sp, r7
 8013978:	bd80      	pop	{r7, pc}
 801397a:	bf00      	nop
 801397c:	08013995 	.word	0x08013995

08013980 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8013980:	b480      	push	{r7}
 8013982:	b083      	sub	sp, #12
 8013984:	af00      	add	r7, sp, #0
 8013986:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8013988:	bf00      	nop
 801398a:	370c      	adds	r7, #12
 801398c:	46bd      	mov	sp, r7
 801398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013992:	4770      	bx	lr

08013994 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013994:	b580      	push	{r7, lr}
 8013996:	b084      	sub	sp, #16
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139a0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	2200      	movs	r2, #0
 80139a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	2200      	movs	r2, #0
 80139ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80139ae:	68f8      	ldr	r0, [r7, #12]
 80139b0:	f7ff ffe6 	bl	8013980 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80139b4:	bf00      	nop
 80139b6:	3710      	adds	r7, #16
 80139b8:	46bd      	mov	sp, r7
 80139ba:	bd80      	pop	{r7, pc}

080139bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80139bc:	b580      	push	{r7, lr}
 80139be:	b084      	sub	sp, #16
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	60f8      	str	r0, [r7, #12]
 80139c4:	60b9      	str	r1, [r7, #8]
 80139c6:	603b      	str	r3, [r7, #0]
 80139c8:	4613      	mov	r3, r2
 80139ca:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80139cc:	e04c      	b.n	8013a68 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80139ce:	683b      	ldr	r3, [r7, #0]
 80139d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80139d4:	d048      	beq.n	8013a68 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80139d6:	f7fa feab 	bl	800e730 <HAL_GetTick>
 80139da:	4602      	mov	r2, r0
 80139dc:	69bb      	ldr	r3, [r7, #24]
 80139de:	1ad3      	subs	r3, r2, r3
 80139e0:	683a      	ldr	r2, [r7, #0]
 80139e2:	429a      	cmp	r2, r3
 80139e4:	d902      	bls.n	80139ec <SPI_WaitFlagStateUntilTimeout+0x30>
 80139e6:	683b      	ldr	r3, [r7, #0]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d13d      	bne.n	8013a68 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	685a      	ldr	r2, [r3, #4]
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80139fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	685b      	ldr	r3, [r3, #4]
 8013a00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013a04:	d111      	bne.n	8013a2a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	689b      	ldr	r3, [r3, #8]
 8013a0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013a0e:	d004      	beq.n	8013a1a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	689b      	ldr	r3, [r3, #8]
 8013a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013a18:	d107      	bne.n	8013a2a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	681a      	ldr	r2, [r3, #0]
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013a28:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013a32:	d10f      	bne.n	8013a54 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	681a      	ldr	r2, [r3, #0]
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013a42:	601a      	str	r2, [r3, #0]
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	681a      	ldr	r2, [r3, #0]
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013a52:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	2201      	movs	r2, #1
 8013a58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	2200      	movs	r2, #0
 8013a60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8013a64:	2303      	movs	r3, #3
 8013a66:	e00f      	b.n	8013a88 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	689a      	ldr	r2, [r3, #8]
 8013a6e:	68bb      	ldr	r3, [r7, #8]
 8013a70:	4013      	ands	r3, r2
 8013a72:	68ba      	ldr	r2, [r7, #8]
 8013a74:	429a      	cmp	r2, r3
 8013a76:	bf0c      	ite	eq
 8013a78:	2301      	moveq	r3, #1
 8013a7a:	2300      	movne	r3, #0
 8013a7c:	b2db      	uxtb	r3, r3
 8013a7e:	461a      	mov	r2, r3
 8013a80:	79fb      	ldrb	r3, [r7, #7]
 8013a82:	429a      	cmp	r2, r3
 8013a84:	d1a3      	bne.n	80139ce <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8013a86:	2300      	movs	r3, #0
}
 8013a88:	4618      	mov	r0, r3
 8013a8a:	3710      	adds	r7, #16
 8013a8c:	46bd      	mov	sp, r7
 8013a8e:	bd80      	pop	{r7, pc}

08013a90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b088      	sub	sp, #32
 8013a94:	af02      	add	r7, sp, #8
 8013a96:	60f8      	str	r0, [r7, #12]
 8013a98:	60b9      	str	r1, [r7, #8]
 8013a9a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8013a9c:	4b1b      	ldr	r3, [pc, #108]	; (8013b0c <SPI_EndRxTxTransaction+0x7c>)
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	4a1b      	ldr	r2, [pc, #108]	; (8013b10 <SPI_EndRxTxTransaction+0x80>)
 8013aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8013aa6:	0d5b      	lsrs	r3, r3, #21
 8013aa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013aac:	fb02 f303 	mul.w	r3, r2, r3
 8013ab0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	685b      	ldr	r3, [r3, #4]
 8013ab6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013aba:	d112      	bne.n	8013ae2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	9300      	str	r3, [sp, #0]
 8013ac0:	68bb      	ldr	r3, [r7, #8]
 8013ac2:	2200      	movs	r2, #0
 8013ac4:	2180      	movs	r1, #128	; 0x80
 8013ac6:	68f8      	ldr	r0, [r7, #12]
 8013ac8:	f7ff ff78 	bl	80139bc <SPI_WaitFlagStateUntilTimeout>
 8013acc:	4603      	mov	r3, r0
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d016      	beq.n	8013b00 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013ad6:	f043 0220 	orr.w	r2, r3, #32
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8013ade:	2303      	movs	r3, #3
 8013ae0:	e00f      	b.n	8013b02 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8013ae2:	697b      	ldr	r3, [r7, #20]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d00a      	beq.n	8013afe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8013ae8:	697b      	ldr	r3, [r7, #20]
 8013aea:	3b01      	subs	r3, #1
 8013aec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	689b      	ldr	r3, [r3, #8]
 8013af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013af8:	2b80      	cmp	r3, #128	; 0x80
 8013afa:	d0f2      	beq.n	8013ae2 <SPI_EndRxTxTransaction+0x52>
 8013afc:	e000      	b.n	8013b00 <SPI_EndRxTxTransaction+0x70>
        break;
 8013afe:	bf00      	nop
  }

  return HAL_OK;
 8013b00:	2300      	movs	r3, #0
}
 8013b02:	4618      	mov	r0, r3
 8013b04:	3718      	adds	r7, #24
 8013b06:	46bd      	mov	sp, r7
 8013b08:	bd80      	pop	{r7, pc}
 8013b0a:	bf00      	nop
 8013b0c:	200000c0 	.word	0x200000c0
 8013b10:	165e9f81 	.word	0x165e9f81

08013b14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013b14:	b580      	push	{r7, lr}
 8013b16:	b082      	sub	sp, #8
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d101      	bne.n	8013b26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013b22:	2301      	movs	r3, #1
 8013b24:	e01d      	b.n	8013b62 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013b2c:	b2db      	uxtb	r3, r3
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d106      	bne.n	8013b40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	2200      	movs	r2, #0
 8013b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8013b3a:	6878      	ldr	r0, [r7, #4]
 8013b3c:	f7ee fe68 	bl	8002810 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	2202      	movs	r2, #2
 8013b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	681a      	ldr	r2, [r3, #0]
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	3304      	adds	r3, #4
 8013b50:	4619      	mov	r1, r3
 8013b52:	4610      	mov	r0, r2
 8013b54:	f000 fc3e 	bl	80143d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	2201      	movs	r2, #1
 8013b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013b60:	2300      	movs	r3, #0
}
 8013b62:	4618      	mov	r0, r3
 8013b64:	3708      	adds	r7, #8
 8013b66:	46bd      	mov	sp, r7
 8013b68:	bd80      	pop	{r7, pc}

08013b6a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8013b6a:	b480      	push	{r7}
 8013b6c:	b085      	sub	sp, #20
 8013b6e:	af00      	add	r7, sp, #0
 8013b70:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	2202      	movs	r2, #2
 8013b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	689b      	ldr	r3, [r3, #8]
 8013b80:	f003 0307 	and.w	r3, r3, #7
 8013b84:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	2b06      	cmp	r3, #6
 8013b8a:	d007      	beq.n	8013b9c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	681a      	ldr	r2, [r3, #0]
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	f042 0201 	orr.w	r2, r2, #1
 8013b9a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	2201      	movs	r2, #1
 8013ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8013ba4:	2300      	movs	r3, #0
}
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	3714      	adds	r7, #20
 8013baa:	46bd      	mov	sp, r7
 8013bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb0:	4770      	bx	lr

08013bb2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8013bb2:	b480      	push	{r7}
 8013bb4:	b085      	sub	sp, #20
 8013bb6:	af00      	add	r7, sp, #0
 8013bb8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	68da      	ldr	r2, [r3, #12]
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	f042 0201 	orr.w	r2, r2, #1
 8013bc8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	689b      	ldr	r3, [r3, #8]
 8013bd0:	f003 0307 	and.w	r3, r3, #7
 8013bd4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	2b06      	cmp	r3, #6
 8013bda:	d007      	beq.n	8013bec <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	681a      	ldr	r2, [r3, #0]
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	f042 0201 	orr.w	r2, r2, #1
 8013bea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013bec:	2300      	movs	r3, #0
}
 8013bee:	4618      	mov	r0, r3
 8013bf0:	3714      	adds	r7, #20
 8013bf2:	46bd      	mov	sp, r7
 8013bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf8:	4770      	bx	lr

08013bfa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8013bfa:	b580      	push	{r7, lr}
 8013bfc:	b082      	sub	sp, #8
 8013bfe:	af00      	add	r7, sp, #0
 8013c00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d101      	bne.n	8013c0c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8013c08:	2301      	movs	r3, #1
 8013c0a:	e01d      	b.n	8013c48 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013c12:	b2db      	uxtb	r3, r3
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d106      	bne.n	8013c26 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	2200      	movs	r2, #0
 8013c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8013c20:	6878      	ldr	r0, [r7, #4]
 8013c22:	f7ee fcb7 	bl	8002594 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	2202      	movs	r2, #2
 8013c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	681a      	ldr	r2, [r3, #0]
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	3304      	adds	r3, #4
 8013c36:	4619      	mov	r1, r3
 8013c38:	4610      	mov	r0, r2
 8013c3a:	f000 fbcb 	bl	80143d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	2201      	movs	r2, #1
 8013c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013c46:	2300      	movs	r3, #0
}
 8013c48:	4618      	mov	r0, r3
 8013c4a:	3708      	adds	r7, #8
 8013c4c:	46bd      	mov	sp, r7
 8013c4e:	bd80      	pop	{r7, pc}

08013c50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013c50:	b580      	push	{r7, lr}
 8013c52:	b084      	sub	sp, #16
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	6078      	str	r0, [r7, #4]
 8013c58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	2201      	movs	r2, #1
 8013c60:	6839      	ldr	r1, [r7, #0]
 8013c62:	4618      	mov	r0, r3
 8013c64:	f000 fea0 	bl	80149a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	4a15      	ldr	r2, [pc, #84]	; (8013cc4 <HAL_TIM_PWM_Start+0x74>)
 8013c6e:	4293      	cmp	r3, r2
 8013c70:	d004      	beq.n	8013c7c <HAL_TIM_PWM_Start+0x2c>
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	4a14      	ldr	r2, [pc, #80]	; (8013cc8 <HAL_TIM_PWM_Start+0x78>)
 8013c78:	4293      	cmp	r3, r2
 8013c7a:	d101      	bne.n	8013c80 <HAL_TIM_PWM_Start+0x30>
 8013c7c:	2301      	movs	r3, #1
 8013c7e:	e000      	b.n	8013c82 <HAL_TIM_PWM_Start+0x32>
 8013c80:	2300      	movs	r3, #0
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d007      	beq.n	8013c96 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013c94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	689b      	ldr	r3, [r3, #8]
 8013c9c:	f003 0307 	and.w	r3, r3, #7
 8013ca0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	2b06      	cmp	r3, #6
 8013ca6:	d007      	beq.n	8013cb8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	681a      	ldr	r2, [r3, #0]
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	f042 0201 	orr.w	r2, r2, #1
 8013cb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013cb8:	2300      	movs	r3, #0
}
 8013cba:	4618      	mov	r0, r3
 8013cbc:	3710      	adds	r7, #16
 8013cbe:	46bd      	mov	sp, r7
 8013cc0:	bd80      	pop	{r7, pc}
 8013cc2:	bf00      	nop
 8013cc4:	40010000 	.word	0x40010000
 8013cc8:	40010400 	.word	0x40010400

08013ccc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8013ccc:	b580      	push	{r7, lr}
 8013cce:	b086      	sub	sp, #24
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	6078      	str	r0, [r7, #4]
 8013cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d101      	bne.n	8013ce0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8013cdc:	2301      	movs	r3, #1
 8013cde:	e083      	b.n	8013de8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013ce6:	b2db      	uxtb	r3, r3
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d106      	bne.n	8013cfa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	2200      	movs	r2, #0
 8013cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8013cf4:	6878      	ldr	r0, [r7, #4]
 8013cf6:	f7ef f83f 	bl	8002d78 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	2202      	movs	r2, #2
 8013cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	689b      	ldr	r3, [r3, #8]
 8013d08:	687a      	ldr	r2, [r7, #4]
 8013d0a:	6812      	ldr	r2, [r2, #0]
 8013d0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013d10:	f023 0307 	bic.w	r3, r3, #7
 8013d14:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	681a      	ldr	r2, [r3, #0]
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	3304      	adds	r3, #4
 8013d1e:	4619      	mov	r1, r3
 8013d20:	4610      	mov	r0, r2
 8013d22:	f000 fb57 	bl	80143d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	689b      	ldr	r3, [r3, #8]
 8013d2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	699b      	ldr	r3, [r3, #24]
 8013d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	6a1b      	ldr	r3, [r3, #32]
 8013d3c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8013d3e:	683b      	ldr	r3, [r7, #0]
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	697a      	ldr	r2, [r7, #20]
 8013d44:	4313      	orrs	r3, r2
 8013d46:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8013d48:	693b      	ldr	r3, [r7, #16]
 8013d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013d4e:	f023 0303 	bic.w	r3, r3, #3
 8013d52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8013d54:	683b      	ldr	r3, [r7, #0]
 8013d56:	689a      	ldr	r2, [r3, #8]
 8013d58:	683b      	ldr	r3, [r7, #0]
 8013d5a:	699b      	ldr	r3, [r3, #24]
 8013d5c:	021b      	lsls	r3, r3, #8
 8013d5e:	4313      	orrs	r3, r2
 8013d60:	693a      	ldr	r2, [r7, #16]
 8013d62:	4313      	orrs	r3, r2
 8013d64:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8013d66:	693b      	ldr	r3, [r7, #16]
 8013d68:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8013d6c:	f023 030c 	bic.w	r3, r3, #12
 8013d70:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8013d72:	693b      	ldr	r3, [r7, #16]
 8013d74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8013d78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013d7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8013d7e:	683b      	ldr	r3, [r7, #0]
 8013d80:	68da      	ldr	r2, [r3, #12]
 8013d82:	683b      	ldr	r3, [r7, #0]
 8013d84:	69db      	ldr	r3, [r3, #28]
 8013d86:	021b      	lsls	r3, r3, #8
 8013d88:	4313      	orrs	r3, r2
 8013d8a:	693a      	ldr	r2, [r7, #16]
 8013d8c:	4313      	orrs	r3, r2
 8013d8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8013d90:	683b      	ldr	r3, [r7, #0]
 8013d92:	691b      	ldr	r3, [r3, #16]
 8013d94:	011a      	lsls	r2, r3, #4
 8013d96:	683b      	ldr	r3, [r7, #0]
 8013d98:	6a1b      	ldr	r3, [r3, #32]
 8013d9a:	031b      	lsls	r3, r3, #12
 8013d9c:	4313      	orrs	r3, r2
 8013d9e:	693a      	ldr	r2, [r7, #16]
 8013da0:	4313      	orrs	r3, r2
 8013da2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8013daa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8013db2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8013db4:	683b      	ldr	r3, [r7, #0]
 8013db6:	685a      	ldr	r2, [r3, #4]
 8013db8:	683b      	ldr	r3, [r7, #0]
 8013dba:	695b      	ldr	r3, [r3, #20]
 8013dbc:	011b      	lsls	r3, r3, #4
 8013dbe:	4313      	orrs	r3, r2
 8013dc0:	68fa      	ldr	r2, [r7, #12]
 8013dc2:	4313      	orrs	r3, r2
 8013dc4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	697a      	ldr	r2, [r7, #20]
 8013dcc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	693a      	ldr	r2, [r7, #16]
 8013dd4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	68fa      	ldr	r2, [r7, #12]
 8013ddc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	2201      	movs	r2, #1
 8013de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013de6:	2300      	movs	r3, #0
}
 8013de8:	4618      	mov	r0, r3
 8013dea:	3718      	adds	r7, #24
 8013dec:	46bd      	mov	sp, r7
 8013dee:	bd80      	pop	{r7, pc}

08013df0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013df0:	b580      	push	{r7, lr}
 8013df2:	b082      	sub	sp, #8
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	6078      	str	r0, [r7, #4]
 8013df8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8013dfa:	683b      	ldr	r3, [r7, #0]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d003      	beq.n	8013e08 <HAL_TIM_Encoder_Start+0x18>
 8013e00:	683b      	ldr	r3, [r7, #0]
 8013e02:	2b04      	cmp	r3, #4
 8013e04:	d008      	beq.n	8013e18 <HAL_TIM_Encoder_Start+0x28>
 8013e06:	e00f      	b.n	8013e28 <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	2201      	movs	r2, #1
 8013e0e:	2100      	movs	r1, #0
 8013e10:	4618      	mov	r0, r3
 8013e12:	f000 fdc9 	bl	80149a8 <TIM_CCxChannelCmd>
      break;
 8013e16:	e016      	b.n	8013e46 <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	2201      	movs	r2, #1
 8013e1e:	2104      	movs	r1, #4
 8013e20:	4618      	mov	r0, r3
 8013e22:	f000 fdc1 	bl	80149a8 <TIM_CCxChannelCmd>
      break;
 8013e26:	e00e      	b.n	8013e46 <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	2201      	movs	r2, #1
 8013e2e:	2100      	movs	r1, #0
 8013e30:	4618      	mov	r0, r3
 8013e32:	f000 fdb9 	bl	80149a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	2201      	movs	r2, #1
 8013e3c:	2104      	movs	r1, #4
 8013e3e:	4618      	mov	r0, r3
 8013e40:	f000 fdb2 	bl	80149a8 <TIM_CCxChannelCmd>
      break;
 8013e44:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	681a      	ldr	r2, [r3, #0]
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	f042 0201 	orr.w	r2, r2, #1
 8013e54:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8013e56:	2300      	movs	r3, #0
}
 8013e58:	4618      	mov	r0, r3
 8013e5a:	3708      	adds	r7, #8
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	bd80      	pop	{r7, pc}

08013e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8013e60:	b580      	push	{r7, lr}
 8013e62:	b082      	sub	sp, #8
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	691b      	ldr	r3, [r3, #16]
 8013e6e:	f003 0302 	and.w	r3, r3, #2
 8013e72:	2b02      	cmp	r3, #2
 8013e74:	d122      	bne.n	8013ebc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	68db      	ldr	r3, [r3, #12]
 8013e7c:	f003 0302 	and.w	r3, r3, #2
 8013e80:	2b02      	cmp	r3, #2
 8013e82:	d11b      	bne.n	8013ebc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	f06f 0202 	mvn.w	r2, #2
 8013e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	2201      	movs	r2, #1
 8013e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	699b      	ldr	r3, [r3, #24]
 8013e9a:	f003 0303 	and.w	r3, r3, #3
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d003      	beq.n	8013eaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8013ea2:	6878      	ldr	r0, [r7, #4]
 8013ea4:	f000 fa78 	bl	8014398 <HAL_TIM_IC_CaptureCallback>
 8013ea8:	e005      	b.n	8013eb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8013eaa:	6878      	ldr	r0, [r7, #4]
 8013eac:	f000 fa6a 	bl	8014384 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013eb0:	6878      	ldr	r0, [r7, #4]
 8013eb2:	f000 fa7b 	bl	80143ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	2200      	movs	r2, #0
 8013eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	691b      	ldr	r3, [r3, #16]
 8013ec2:	f003 0304 	and.w	r3, r3, #4
 8013ec6:	2b04      	cmp	r3, #4
 8013ec8:	d122      	bne.n	8013f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	68db      	ldr	r3, [r3, #12]
 8013ed0:	f003 0304 	and.w	r3, r3, #4
 8013ed4:	2b04      	cmp	r3, #4
 8013ed6:	d11b      	bne.n	8013f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	f06f 0204 	mvn.w	r2, #4
 8013ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	2202      	movs	r2, #2
 8013ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	699b      	ldr	r3, [r3, #24]
 8013eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d003      	beq.n	8013efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013ef6:	6878      	ldr	r0, [r7, #4]
 8013ef8:	f000 fa4e 	bl	8014398 <HAL_TIM_IC_CaptureCallback>
 8013efc:	e005      	b.n	8013f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013efe:	6878      	ldr	r0, [r7, #4]
 8013f00:	f000 fa40 	bl	8014384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013f04:	6878      	ldr	r0, [r7, #4]
 8013f06:	f000 fa51 	bl	80143ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	2200      	movs	r2, #0
 8013f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	691b      	ldr	r3, [r3, #16]
 8013f16:	f003 0308 	and.w	r3, r3, #8
 8013f1a:	2b08      	cmp	r3, #8
 8013f1c:	d122      	bne.n	8013f64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	68db      	ldr	r3, [r3, #12]
 8013f24:	f003 0308 	and.w	r3, r3, #8
 8013f28:	2b08      	cmp	r3, #8
 8013f2a:	d11b      	bne.n	8013f64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	f06f 0208 	mvn.w	r2, #8
 8013f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	2204      	movs	r2, #4
 8013f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	69db      	ldr	r3, [r3, #28]
 8013f42:	f003 0303 	and.w	r3, r3, #3
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d003      	beq.n	8013f52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013f4a:	6878      	ldr	r0, [r7, #4]
 8013f4c:	f000 fa24 	bl	8014398 <HAL_TIM_IC_CaptureCallback>
 8013f50:	e005      	b.n	8013f5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013f52:	6878      	ldr	r0, [r7, #4]
 8013f54:	f000 fa16 	bl	8014384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013f58:	6878      	ldr	r0, [r7, #4]
 8013f5a:	f000 fa27 	bl	80143ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	2200      	movs	r2, #0
 8013f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	691b      	ldr	r3, [r3, #16]
 8013f6a:	f003 0310 	and.w	r3, r3, #16
 8013f6e:	2b10      	cmp	r3, #16
 8013f70:	d122      	bne.n	8013fb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	68db      	ldr	r3, [r3, #12]
 8013f78:	f003 0310 	and.w	r3, r3, #16
 8013f7c:	2b10      	cmp	r3, #16
 8013f7e:	d11b      	bne.n	8013fb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	f06f 0210 	mvn.w	r2, #16
 8013f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	2208      	movs	r2, #8
 8013f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	69db      	ldr	r3, [r3, #28]
 8013f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d003      	beq.n	8013fa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013f9e:	6878      	ldr	r0, [r7, #4]
 8013fa0:	f000 f9fa 	bl	8014398 <HAL_TIM_IC_CaptureCallback>
 8013fa4:	e005      	b.n	8013fb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013fa6:	6878      	ldr	r0, [r7, #4]
 8013fa8:	f000 f9ec 	bl	8014384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013fac:	6878      	ldr	r0, [r7, #4]
 8013fae:	f000 f9fd 	bl	80143ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	2200      	movs	r2, #0
 8013fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	691b      	ldr	r3, [r3, #16]
 8013fbe:	f003 0301 	and.w	r3, r3, #1
 8013fc2:	2b01      	cmp	r3, #1
 8013fc4:	d10e      	bne.n	8013fe4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	68db      	ldr	r3, [r3, #12]
 8013fcc:	f003 0301 	and.w	r3, r3, #1
 8013fd0:	2b01      	cmp	r3, #1
 8013fd2:	d107      	bne.n	8013fe4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	f06f 0201 	mvn.w	r2, #1
 8013fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8013fde:	6878      	ldr	r0, [r7, #4]
 8013fe0:	f7f8 ff7e 	bl	800cee0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	691b      	ldr	r3, [r3, #16]
 8013fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013fee:	2b80      	cmp	r3, #128	; 0x80
 8013ff0:	d10e      	bne.n	8014010 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	68db      	ldr	r3, [r3, #12]
 8013ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013ffc:	2b80      	cmp	r3, #128	; 0x80
 8013ffe:	d107      	bne.n	8014010 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8014008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801400a:	6878      	ldr	r0, [r7, #4]
 801400c:	f000 fd78 	bl	8014b00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	691b      	ldr	r3, [r3, #16]
 8014016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801401a:	2b40      	cmp	r3, #64	; 0x40
 801401c:	d10e      	bne.n	801403c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	68db      	ldr	r3, [r3, #12]
 8014024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014028:	2b40      	cmp	r3, #64	; 0x40
 801402a:	d107      	bne.n	801403c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8014034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8014036:	6878      	ldr	r0, [r7, #4]
 8014038:	f000 f9c2 	bl	80143c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	691b      	ldr	r3, [r3, #16]
 8014042:	f003 0320 	and.w	r3, r3, #32
 8014046:	2b20      	cmp	r3, #32
 8014048:	d10e      	bne.n	8014068 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	68db      	ldr	r3, [r3, #12]
 8014050:	f003 0320 	and.w	r3, r3, #32
 8014054:	2b20      	cmp	r3, #32
 8014056:	d107      	bne.n	8014068 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	f06f 0220 	mvn.w	r2, #32
 8014060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8014062:	6878      	ldr	r0, [r7, #4]
 8014064:	f000 fd42 	bl	8014aec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8014068:	bf00      	nop
 801406a:	3708      	adds	r7, #8
 801406c:	46bd      	mov	sp, r7
 801406e:	bd80      	pop	{r7, pc}

08014070 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8014070:	b580      	push	{r7, lr}
 8014072:	b084      	sub	sp, #16
 8014074:	af00      	add	r7, sp, #0
 8014076:	60f8      	str	r0, [r7, #12]
 8014078:	60b9      	str	r1, [r7, #8]
 801407a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014082:	2b01      	cmp	r3, #1
 8014084:	d101      	bne.n	801408a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8014086:	2302      	movs	r3, #2
 8014088:	e0b4      	b.n	80141f4 <HAL_TIM_PWM_ConfigChannel+0x184>
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	2201      	movs	r2, #1
 801408e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	2202      	movs	r2, #2
 8014096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	2b0c      	cmp	r3, #12
 801409e:	f200 809f 	bhi.w	80141e0 <HAL_TIM_PWM_ConfigChannel+0x170>
 80140a2:	a201      	add	r2, pc, #4	; (adr r2, 80140a8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80140a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140a8:	080140dd 	.word	0x080140dd
 80140ac:	080141e1 	.word	0x080141e1
 80140b0:	080141e1 	.word	0x080141e1
 80140b4:	080141e1 	.word	0x080141e1
 80140b8:	0801411d 	.word	0x0801411d
 80140bc:	080141e1 	.word	0x080141e1
 80140c0:	080141e1 	.word	0x080141e1
 80140c4:	080141e1 	.word	0x080141e1
 80140c8:	0801415f 	.word	0x0801415f
 80140cc:	080141e1 	.word	0x080141e1
 80140d0:	080141e1 	.word	0x080141e1
 80140d4:	080141e1 	.word	0x080141e1
 80140d8:	0801419f 	.word	0x0801419f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	68b9      	ldr	r1, [r7, #8]
 80140e2:	4618      	mov	r0, r3
 80140e4:	f000 fa16 	bl	8014514 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	699a      	ldr	r2, [r3, #24]
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	f042 0208 	orr.w	r2, r2, #8
 80140f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	699a      	ldr	r2, [r3, #24]
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	f022 0204 	bic.w	r2, r2, #4
 8014106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	6999      	ldr	r1, [r3, #24]
 801410e:	68bb      	ldr	r3, [r7, #8]
 8014110:	691a      	ldr	r2, [r3, #16]
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	430a      	orrs	r2, r1
 8014118:	619a      	str	r2, [r3, #24]
      break;
 801411a:	e062      	b.n	80141e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	68b9      	ldr	r1, [r7, #8]
 8014122:	4618      	mov	r0, r3
 8014124:	f000 fa66 	bl	80145f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	699a      	ldr	r2, [r3, #24]
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014136:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	699a      	ldr	r2, [r3, #24]
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014146:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	6999      	ldr	r1, [r3, #24]
 801414e:	68bb      	ldr	r3, [r7, #8]
 8014150:	691b      	ldr	r3, [r3, #16]
 8014152:	021a      	lsls	r2, r3, #8
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	430a      	orrs	r2, r1
 801415a:	619a      	str	r2, [r3, #24]
      break;
 801415c:	e041      	b.n	80141e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	68b9      	ldr	r1, [r7, #8]
 8014164:	4618      	mov	r0, r3
 8014166:	f000 fabb 	bl	80146e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	69da      	ldr	r2, [r3, #28]
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	f042 0208 	orr.w	r2, r2, #8
 8014178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	69da      	ldr	r2, [r3, #28]
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	f022 0204 	bic.w	r2, r2, #4
 8014188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	69d9      	ldr	r1, [r3, #28]
 8014190:	68bb      	ldr	r3, [r7, #8]
 8014192:	691a      	ldr	r2, [r3, #16]
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	430a      	orrs	r2, r1
 801419a:	61da      	str	r2, [r3, #28]
      break;
 801419c:	e021      	b.n	80141e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	68b9      	ldr	r1, [r7, #8]
 80141a4:	4618      	mov	r0, r3
 80141a6:	f000 fb0f 	bl	80147c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	69da      	ldr	r2, [r3, #28]
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80141b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	69da      	ldr	r2, [r3, #28]
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80141c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	69d9      	ldr	r1, [r3, #28]
 80141d0:	68bb      	ldr	r3, [r7, #8]
 80141d2:	691b      	ldr	r3, [r3, #16]
 80141d4:	021a      	lsls	r2, r3, #8
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	430a      	orrs	r2, r1
 80141dc:	61da      	str	r2, [r3, #28]
      break;
 80141de:	e000      	b.n	80141e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80141e0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	2201      	movs	r2, #1
 80141e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	2200      	movs	r2, #0
 80141ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80141f2:	2300      	movs	r3, #0
}
 80141f4:	4618      	mov	r0, r3
 80141f6:	3710      	adds	r7, #16
 80141f8:	46bd      	mov	sp, r7
 80141fa:	bd80      	pop	{r7, pc}

080141fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80141fc:	b580      	push	{r7, lr}
 80141fe:	b084      	sub	sp, #16
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
 8014204:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801420c:	2b01      	cmp	r3, #1
 801420e:	d101      	bne.n	8014214 <HAL_TIM_ConfigClockSource+0x18>
 8014210:	2302      	movs	r3, #2
 8014212:	e0b3      	b.n	801437c <HAL_TIM_ConfigClockSource+0x180>
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	2201      	movs	r2, #1
 8014218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	2202      	movs	r2, #2
 8014220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	689b      	ldr	r3, [r3, #8]
 801422a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8014232:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801423a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	68fa      	ldr	r2, [r7, #12]
 8014242:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8014244:	683b      	ldr	r3, [r7, #0]
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801424c:	d03e      	beq.n	80142cc <HAL_TIM_ConfigClockSource+0xd0>
 801424e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014252:	f200 8087 	bhi.w	8014364 <HAL_TIM_ConfigClockSource+0x168>
 8014256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801425a:	f000 8085 	beq.w	8014368 <HAL_TIM_ConfigClockSource+0x16c>
 801425e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014262:	d87f      	bhi.n	8014364 <HAL_TIM_ConfigClockSource+0x168>
 8014264:	2b70      	cmp	r3, #112	; 0x70
 8014266:	d01a      	beq.n	801429e <HAL_TIM_ConfigClockSource+0xa2>
 8014268:	2b70      	cmp	r3, #112	; 0x70
 801426a:	d87b      	bhi.n	8014364 <HAL_TIM_ConfigClockSource+0x168>
 801426c:	2b60      	cmp	r3, #96	; 0x60
 801426e:	d050      	beq.n	8014312 <HAL_TIM_ConfigClockSource+0x116>
 8014270:	2b60      	cmp	r3, #96	; 0x60
 8014272:	d877      	bhi.n	8014364 <HAL_TIM_ConfigClockSource+0x168>
 8014274:	2b50      	cmp	r3, #80	; 0x50
 8014276:	d03c      	beq.n	80142f2 <HAL_TIM_ConfigClockSource+0xf6>
 8014278:	2b50      	cmp	r3, #80	; 0x50
 801427a:	d873      	bhi.n	8014364 <HAL_TIM_ConfigClockSource+0x168>
 801427c:	2b40      	cmp	r3, #64	; 0x40
 801427e:	d058      	beq.n	8014332 <HAL_TIM_ConfigClockSource+0x136>
 8014280:	2b40      	cmp	r3, #64	; 0x40
 8014282:	d86f      	bhi.n	8014364 <HAL_TIM_ConfigClockSource+0x168>
 8014284:	2b30      	cmp	r3, #48	; 0x30
 8014286:	d064      	beq.n	8014352 <HAL_TIM_ConfigClockSource+0x156>
 8014288:	2b30      	cmp	r3, #48	; 0x30
 801428a:	d86b      	bhi.n	8014364 <HAL_TIM_ConfigClockSource+0x168>
 801428c:	2b20      	cmp	r3, #32
 801428e:	d060      	beq.n	8014352 <HAL_TIM_ConfigClockSource+0x156>
 8014290:	2b20      	cmp	r3, #32
 8014292:	d867      	bhi.n	8014364 <HAL_TIM_ConfigClockSource+0x168>
 8014294:	2b00      	cmp	r3, #0
 8014296:	d05c      	beq.n	8014352 <HAL_TIM_ConfigClockSource+0x156>
 8014298:	2b10      	cmp	r3, #16
 801429a:	d05a      	beq.n	8014352 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 801429c:	e062      	b.n	8014364 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	6818      	ldr	r0, [r3, #0]
 80142a2:	683b      	ldr	r3, [r7, #0]
 80142a4:	6899      	ldr	r1, [r3, #8]
 80142a6:	683b      	ldr	r3, [r7, #0]
 80142a8:	685a      	ldr	r2, [r3, #4]
 80142aa:	683b      	ldr	r3, [r7, #0]
 80142ac:	68db      	ldr	r3, [r3, #12]
 80142ae:	f000 fb5b 	bl	8014968 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	689b      	ldr	r3, [r3, #8]
 80142b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80142c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	68fa      	ldr	r2, [r7, #12]
 80142c8:	609a      	str	r2, [r3, #8]
      break;
 80142ca:	e04e      	b.n	801436a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	6818      	ldr	r0, [r3, #0]
 80142d0:	683b      	ldr	r3, [r7, #0]
 80142d2:	6899      	ldr	r1, [r3, #8]
 80142d4:	683b      	ldr	r3, [r7, #0]
 80142d6:	685a      	ldr	r2, [r3, #4]
 80142d8:	683b      	ldr	r3, [r7, #0]
 80142da:	68db      	ldr	r3, [r3, #12]
 80142dc:	f000 fb44 	bl	8014968 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	689a      	ldr	r2, [r3, #8]
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80142ee:	609a      	str	r2, [r3, #8]
      break;
 80142f0:	e03b      	b.n	801436a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	6818      	ldr	r0, [r3, #0]
 80142f6:	683b      	ldr	r3, [r7, #0]
 80142f8:	6859      	ldr	r1, [r3, #4]
 80142fa:	683b      	ldr	r3, [r7, #0]
 80142fc:	68db      	ldr	r3, [r3, #12]
 80142fe:	461a      	mov	r2, r3
 8014300:	f000 fab8 	bl	8014874 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	2150      	movs	r1, #80	; 0x50
 801430a:	4618      	mov	r0, r3
 801430c:	f000 fb11 	bl	8014932 <TIM_ITRx_SetConfig>
      break;
 8014310:	e02b      	b.n	801436a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	6818      	ldr	r0, [r3, #0]
 8014316:	683b      	ldr	r3, [r7, #0]
 8014318:	6859      	ldr	r1, [r3, #4]
 801431a:	683b      	ldr	r3, [r7, #0]
 801431c:	68db      	ldr	r3, [r3, #12]
 801431e:	461a      	mov	r2, r3
 8014320:	f000 fad7 	bl	80148d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	2160      	movs	r1, #96	; 0x60
 801432a:	4618      	mov	r0, r3
 801432c:	f000 fb01 	bl	8014932 <TIM_ITRx_SetConfig>
      break;
 8014330:	e01b      	b.n	801436a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	6818      	ldr	r0, [r3, #0]
 8014336:	683b      	ldr	r3, [r7, #0]
 8014338:	6859      	ldr	r1, [r3, #4]
 801433a:	683b      	ldr	r3, [r7, #0]
 801433c:	68db      	ldr	r3, [r3, #12]
 801433e:	461a      	mov	r2, r3
 8014340:	f000 fa98 	bl	8014874 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	2140      	movs	r1, #64	; 0x40
 801434a:	4618      	mov	r0, r3
 801434c:	f000 faf1 	bl	8014932 <TIM_ITRx_SetConfig>
      break;
 8014350:	e00b      	b.n	801436a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	681a      	ldr	r2, [r3, #0]
 8014356:	683b      	ldr	r3, [r7, #0]
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	4619      	mov	r1, r3
 801435c:	4610      	mov	r0, r2
 801435e:	f000 fae8 	bl	8014932 <TIM_ITRx_SetConfig>
      break;
 8014362:	e002      	b.n	801436a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8014364:	bf00      	nop
 8014366:	e000      	b.n	801436a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8014368:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	2201      	movs	r2, #1
 801436e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	2200      	movs	r2, #0
 8014376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801437a:	2300      	movs	r3, #0
}
 801437c:	4618      	mov	r0, r3
 801437e:	3710      	adds	r7, #16
 8014380:	46bd      	mov	sp, r7
 8014382:	bd80      	pop	{r7, pc}

08014384 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8014384:	b480      	push	{r7}
 8014386:	b083      	sub	sp, #12
 8014388:	af00      	add	r7, sp, #0
 801438a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801438c:	bf00      	nop
 801438e:	370c      	adds	r7, #12
 8014390:	46bd      	mov	sp, r7
 8014392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014396:	4770      	bx	lr

08014398 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8014398:	b480      	push	{r7}
 801439a:	b083      	sub	sp, #12
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80143a0:	bf00      	nop
 80143a2:	370c      	adds	r7, #12
 80143a4:	46bd      	mov	sp, r7
 80143a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143aa:	4770      	bx	lr

080143ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80143ac:	b480      	push	{r7}
 80143ae:	b083      	sub	sp, #12
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80143b4:	bf00      	nop
 80143b6:	370c      	adds	r7, #12
 80143b8:	46bd      	mov	sp, r7
 80143ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143be:	4770      	bx	lr

080143c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80143c0:	b480      	push	{r7}
 80143c2:	b083      	sub	sp, #12
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80143c8:	bf00      	nop
 80143ca:	370c      	adds	r7, #12
 80143cc:	46bd      	mov	sp, r7
 80143ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d2:	4770      	bx	lr

080143d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80143d4:	b480      	push	{r7}
 80143d6:	b085      	sub	sp, #20
 80143d8:	af00      	add	r7, sp, #0
 80143da:	6078      	str	r0, [r7, #4]
 80143dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	4a40      	ldr	r2, [pc, #256]	; (80144e8 <TIM_Base_SetConfig+0x114>)
 80143e8:	4293      	cmp	r3, r2
 80143ea:	d013      	beq.n	8014414 <TIM_Base_SetConfig+0x40>
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80143f2:	d00f      	beq.n	8014414 <TIM_Base_SetConfig+0x40>
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	4a3d      	ldr	r2, [pc, #244]	; (80144ec <TIM_Base_SetConfig+0x118>)
 80143f8:	4293      	cmp	r3, r2
 80143fa:	d00b      	beq.n	8014414 <TIM_Base_SetConfig+0x40>
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	4a3c      	ldr	r2, [pc, #240]	; (80144f0 <TIM_Base_SetConfig+0x11c>)
 8014400:	4293      	cmp	r3, r2
 8014402:	d007      	beq.n	8014414 <TIM_Base_SetConfig+0x40>
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	4a3b      	ldr	r2, [pc, #236]	; (80144f4 <TIM_Base_SetConfig+0x120>)
 8014408:	4293      	cmp	r3, r2
 801440a:	d003      	beq.n	8014414 <TIM_Base_SetConfig+0x40>
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	4a3a      	ldr	r2, [pc, #232]	; (80144f8 <TIM_Base_SetConfig+0x124>)
 8014410:	4293      	cmp	r3, r2
 8014412:	d108      	bne.n	8014426 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801441a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801441c:	683b      	ldr	r3, [r7, #0]
 801441e:	685b      	ldr	r3, [r3, #4]
 8014420:	68fa      	ldr	r2, [r7, #12]
 8014422:	4313      	orrs	r3, r2
 8014424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	4a2f      	ldr	r2, [pc, #188]	; (80144e8 <TIM_Base_SetConfig+0x114>)
 801442a:	4293      	cmp	r3, r2
 801442c:	d02b      	beq.n	8014486 <TIM_Base_SetConfig+0xb2>
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014434:	d027      	beq.n	8014486 <TIM_Base_SetConfig+0xb2>
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	4a2c      	ldr	r2, [pc, #176]	; (80144ec <TIM_Base_SetConfig+0x118>)
 801443a:	4293      	cmp	r3, r2
 801443c:	d023      	beq.n	8014486 <TIM_Base_SetConfig+0xb2>
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	4a2b      	ldr	r2, [pc, #172]	; (80144f0 <TIM_Base_SetConfig+0x11c>)
 8014442:	4293      	cmp	r3, r2
 8014444:	d01f      	beq.n	8014486 <TIM_Base_SetConfig+0xb2>
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	4a2a      	ldr	r2, [pc, #168]	; (80144f4 <TIM_Base_SetConfig+0x120>)
 801444a:	4293      	cmp	r3, r2
 801444c:	d01b      	beq.n	8014486 <TIM_Base_SetConfig+0xb2>
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	4a29      	ldr	r2, [pc, #164]	; (80144f8 <TIM_Base_SetConfig+0x124>)
 8014452:	4293      	cmp	r3, r2
 8014454:	d017      	beq.n	8014486 <TIM_Base_SetConfig+0xb2>
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	4a28      	ldr	r2, [pc, #160]	; (80144fc <TIM_Base_SetConfig+0x128>)
 801445a:	4293      	cmp	r3, r2
 801445c:	d013      	beq.n	8014486 <TIM_Base_SetConfig+0xb2>
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	4a27      	ldr	r2, [pc, #156]	; (8014500 <TIM_Base_SetConfig+0x12c>)
 8014462:	4293      	cmp	r3, r2
 8014464:	d00f      	beq.n	8014486 <TIM_Base_SetConfig+0xb2>
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	4a26      	ldr	r2, [pc, #152]	; (8014504 <TIM_Base_SetConfig+0x130>)
 801446a:	4293      	cmp	r3, r2
 801446c:	d00b      	beq.n	8014486 <TIM_Base_SetConfig+0xb2>
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	4a25      	ldr	r2, [pc, #148]	; (8014508 <TIM_Base_SetConfig+0x134>)
 8014472:	4293      	cmp	r3, r2
 8014474:	d007      	beq.n	8014486 <TIM_Base_SetConfig+0xb2>
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	4a24      	ldr	r2, [pc, #144]	; (801450c <TIM_Base_SetConfig+0x138>)
 801447a:	4293      	cmp	r3, r2
 801447c:	d003      	beq.n	8014486 <TIM_Base_SetConfig+0xb2>
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	4a23      	ldr	r2, [pc, #140]	; (8014510 <TIM_Base_SetConfig+0x13c>)
 8014482:	4293      	cmp	r3, r2
 8014484:	d108      	bne.n	8014498 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801448c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801448e:	683b      	ldr	r3, [r7, #0]
 8014490:	68db      	ldr	r3, [r3, #12]
 8014492:	68fa      	ldr	r2, [r7, #12]
 8014494:	4313      	orrs	r3, r2
 8014496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801449e:	683b      	ldr	r3, [r7, #0]
 80144a0:	695b      	ldr	r3, [r3, #20]
 80144a2:	4313      	orrs	r3, r2
 80144a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	68fa      	ldr	r2, [r7, #12]
 80144aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80144ac:	683b      	ldr	r3, [r7, #0]
 80144ae:	689a      	ldr	r2, [r3, #8]
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80144b4:	683b      	ldr	r3, [r7, #0]
 80144b6:	681a      	ldr	r2, [r3, #0]
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	4a0a      	ldr	r2, [pc, #40]	; (80144e8 <TIM_Base_SetConfig+0x114>)
 80144c0:	4293      	cmp	r3, r2
 80144c2:	d003      	beq.n	80144cc <TIM_Base_SetConfig+0xf8>
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	4a0c      	ldr	r2, [pc, #48]	; (80144f8 <TIM_Base_SetConfig+0x124>)
 80144c8:	4293      	cmp	r3, r2
 80144ca:	d103      	bne.n	80144d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80144cc:	683b      	ldr	r3, [r7, #0]
 80144ce:	691a      	ldr	r2, [r3, #16]
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	2201      	movs	r2, #1
 80144d8:	615a      	str	r2, [r3, #20]
}
 80144da:	bf00      	nop
 80144dc:	3714      	adds	r7, #20
 80144de:	46bd      	mov	sp, r7
 80144e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e4:	4770      	bx	lr
 80144e6:	bf00      	nop
 80144e8:	40010000 	.word	0x40010000
 80144ec:	40000400 	.word	0x40000400
 80144f0:	40000800 	.word	0x40000800
 80144f4:	40000c00 	.word	0x40000c00
 80144f8:	40010400 	.word	0x40010400
 80144fc:	40014000 	.word	0x40014000
 8014500:	40014400 	.word	0x40014400
 8014504:	40014800 	.word	0x40014800
 8014508:	40001800 	.word	0x40001800
 801450c:	40001c00 	.word	0x40001c00
 8014510:	40002000 	.word	0x40002000

08014514 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014514:	b480      	push	{r7}
 8014516:	b087      	sub	sp, #28
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
 801451c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	6a1b      	ldr	r3, [r3, #32]
 8014522:	f023 0201 	bic.w	r2, r3, #1
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	6a1b      	ldr	r3, [r3, #32]
 801452e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	685b      	ldr	r3, [r3, #4]
 8014534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	699b      	ldr	r3, [r3, #24]
 801453a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	f023 0303 	bic.w	r3, r3, #3
 801454a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801454c:	683b      	ldr	r3, [r7, #0]
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	68fa      	ldr	r2, [r7, #12]
 8014552:	4313      	orrs	r3, r2
 8014554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8014556:	697b      	ldr	r3, [r7, #20]
 8014558:	f023 0302 	bic.w	r3, r3, #2
 801455c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801455e:	683b      	ldr	r3, [r7, #0]
 8014560:	689b      	ldr	r3, [r3, #8]
 8014562:	697a      	ldr	r2, [r7, #20]
 8014564:	4313      	orrs	r3, r2
 8014566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	4a20      	ldr	r2, [pc, #128]	; (80145ec <TIM_OC1_SetConfig+0xd8>)
 801456c:	4293      	cmp	r3, r2
 801456e:	d003      	beq.n	8014578 <TIM_OC1_SetConfig+0x64>
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	4a1f      	ldr	r2, [pc, #124]	; (80145f0 <TIM_OC1_SetConfig+0xdc>)
 8014574:	4293      	cmp	r3, r2
 8014576:	d10c      	bne.n	8014592 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8014578:	697b      	ldr	r3, [r7, #20]
 801457a:	f023 0308 	bic.w	r3, r3, #8
 801457e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8014580:	683b      	ldr	r3, [r7, #0]
 8014582:	68db      	ldr	r3, [r3, #12]
 8014584:	697a      	ldr	r2, [r7, #20]
 8014586:	4313      	orrs	r3, r2
 8014588:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801458a:	697b      	ldr	r3, [r7, #20]
 801458c:	f023 0304 	bic.w	r3, r3, #4
 8014590:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	4a15      	ldr	r2, [pc, #84]	; (80145ec <TIM_OC1_SetConfig+0xd8>)
 8014596:	4293      	cmp	r3, r2
 8014598:	d003      	beq.n	80145a2 <TIM_OC1_SetConfig+0x8e>
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	4a14      	ldr	r2, [pc, #80]	; (80145f0 <TIM_OC1_SetConfig+0xdc>)
 801459e:	4293      	cmp	r3, r2
 80145a0:	d111      	bne.n	80145c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80145a2:	693b      	ldr	r3, [r7, #16]
 80145a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80145a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80145aa:	693b      	ldr	r3, [r7, #16]
 80145ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80145b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80145b2:	683b      	ldr	r3, [r7, #0]
 80145b4:	695b      	ldr	r3, [r3, #20]
 80145b6:	693a      	ldr	r2, [r7, #16]
 80145b8:	4313      	orrs	r3, r2
 80145ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80145bc:	683b      	ldr	r3, [r7, #0]
 80145be:	699b      	ldr	r3, [r3, #24]
 80145c0:	693a      	ldr	r2, [r7, #16]
 80145c2:	4313      	orrs	r3, r2
 80145c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	693a      	ldr	r2, [r7, #16]
 80145ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	68fa      	ldr	r2, [r7, #12]
 80145d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80145d2:	683b      	ldr	r3, [r7, #0]
 80145d4:	685a      	ldr	r2, [r3, #4]
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	697a      	ldr	r2, [r7, #20]
 80145de:	621a      	str	r2, [r3, #32]
}
 80145e0:	bf00      	nop
 80145e2:	371c      	adds	r7, #28
 80145e4:	46bd      	mov	sp, r7
 80145e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ea:	4770      	bx	lr
 80145ec:	40010000 	.word	0x40010000
 80145f0:	40010400 	.word	0x40010400

080145f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80145f4:	b480      	push	{r7}
 80145f6:	b087      	sub	sp, #28
 80145f8:	af00      	add	r7, sp, #0
 80145fa:	6078      	str	r0, [r7, #4]
 80145fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	6a1b      	ldr	r3, [r3, #32]
 8014602:	f023 0210 	bic.w	r2, r3, #16
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	6a1b      	ldr	r3, [r3, #32]
 801460e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	685b      	ldr	r3, [r3, #4]
 8014614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	699b      	ldr	r3, [r3, #24]
 801461a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801462a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801462c:	683b      	ldr	r3, [r7, #0]
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	021b      	lsls	r3, r3, #8
 8014632:	68fa      	ldr	r2, [r7, #12]
 8014634:	4313      	orrs	r3, r2
 8014636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8014638:	697b      	ldr	r3, [r7, #20]
 801463a:	f023 0320 	bic.w	r3, r3, #32
 801463e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014640:	683b      	ldr	r3, [r7, #0]
 8014642:	689b      	ldr	r3, [r3, #8]
 8014644:	011b      	lsls	r3, r3, #4
 8014646:	697a      	ldr	r2, [r7, #20]
 8014648:	4313      	orrs	r3, r2
 801464a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	4a22      	ldr	r2, [pc, #136]	; (80146d8 <TIM_OC2_SetConfig+0xe4>)
 8014650:	4293      	cmp	r3, r2
 8014652:	d003      	beq.n	801465c <TIM_OC2_SetConfig+0x68>
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	4a21      	ldr	r2, [pc, #132]	; (80146dc <TIM_OC2_SetConfig+0xe8>)
 8014658:	4293      	cmp	r3, r2
 801465a:	d10d      	bne.n	8014678 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801465c:	697b      	ldr	r3, [r7, #20]
 801465e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014664:	683b      	ldr	r3, [r7, #0]
 8014666:	68db      	ldr	r3, [r3, #12]
 8014668:	011b      	lsls	r3, r3, #4
 801466a:	697a      	ldr	r2, [r7, #20]
 801466c:	4313      	orrs	r3, r2
 801466e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8014670:	697b      	ldr	r3, [r7, #20]
 8014672:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014676:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	4a17      	ldr	r2, [pc, #92]	; (80146d8 <TIM_OC2_SetConfig+0xe4>)
 801467c:	4293      	cmp	r3, r2
 801467e:	d003      	beq.n	8014688 <TIM_OC2_SetConfig+0x94>
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	4a16      	ldr	r2, [pc, #88]	; (80146dc <TIM_OC2_SetConfig+0xe8>)
 8014684:	4293      	cmp	r3, r2
 8014686:	d113      	bne.n	80146b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8014688:	693b      	ldr	r3, [r7, #16]
 801468a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801468e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8014690:	693b      	ldr	r3, [r7, #16]
 8014692:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014696:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8014698:	683b      	ldr	r3, [r7, #0]
 801469a:	695b      	ldr	r3, [r3, #20]
 801469c:	009b      	lsls	r3, r3, #2
 801469e:	693a      	ldr	r2, [r7, #16]
 80146a0:	4313      	orrs	r3, r2
 80146a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80146a4:	683b      	ldr	r3, [r7, #0]
 80146a6:	699b      	ldr	r3, [r3, #24]
 80146a8:	009b      	lsls	r3, r3, #2
 80146aa:	693a      	ldr	r2, [r7, #16]
 80146ac:	4313      	orrs	r3, r2
 80146ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	693a      	ldr	r2, [r7, #16]
 80146b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	68fa      	ldr	r2, [r7, #12]
 80146ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80146bc:	683b      	ldr	r3, [r7, #0]
 80146be:	685a      	ldr	r2, [r3, #4]
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	697a      	ldr	r2, [r7, #20]
 80146c8:	621a      	str	r2, [r3, #32]
}
 80146ca:	bf00      	nop
 80146cc:	371c      	adds	r7, #28
 80146ce:	46bd      	mov	sp, r7
 80146d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d4:	4770      	bx	lr
 80146d6:	bf00      	nop
 80146d8:	40010000 	.word	0x40010000
 80146dc:	40010400 	.word	0x40010400

080146e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80146e0:	b480      	push	{r7}
 80146e2:	b087      	sub	sp, #28
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	6078      	str	r0, [r7, #4]
 80146e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	6a1b      	ldr	r3, [r3, #32]
 80146ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	6a1b      	ldr	r3, [r3, #32]
 80146fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	685b      	ldr	r3, [r3, #4]
 8014700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	69db      	ldr	r3, [r3, #28]
 8014706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801470e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	f023 0303 	bic.w	r3, r3, #3
 8014716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014718:	683b      	ldr	r3, [r7, #0]
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	68fa      	ldr	r2, [r7, #12]
 801471e:	4313      	orrs	r3, r2
 8014720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8014722:	697b      	ldr	r3, [r7, #20]
 8014724:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801472a:	683b      	ldr	r3, [r7, #0]
 801472c:	689b      	ldr	r3, [r3, #8]
 801472e:	021b      	lsls	r3, r3, #8
 8014730:	697a      	ldr	r2, [r7, #20]
 8014732:	4313      	orrs	r3, r2
 8014734:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	4a21      	ldr	r2, [pc, #132]	; (80147c0 <TIM_OC3_SetConfig+0xe0>)
 801473a:	4293      	cmp	r3, r2
 801473c:	d003      	beq.n	8014746 <TIM_OC3_SetConfig+0x66>
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	4a20      	ldr	r2, [pc, #128]	; (80147c4 <TIM_OC3_SetConfig+0xe4>)
 8014742:	4293      	cmp	r3, r2
 8014744:	d10d      	bne.n	8014762 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8014746:	697b      	ldr	r3, [r7, #20]
 8014748:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801474c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801474e:	683b      	ldr	r3, [r7, #0]
 8014750:	68db      	ldr	r3, [r3, #12]
 8014752:	021b      	lsls	r3, r3, #8
 8014754:	697a      	ldr	r2, [r7, #20]
 8014756:	4313      	orrs	r3, r2
 8014758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801475a:	697b      	ldr	r3, [r7, #20]
 801475c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	4a16      	ldr	r2, [pc, #88]	; (80147c0 <TIM_OC3_SetConfig+0xe0>)
 8014766:	4293      	cmp	r3, r2
 8014768:	d003      	beq.n	8014772 <TIM_OC3_SetConfig+0x92>
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	4a15      	ldr	r2, [pc, #84]	; (80147c4 <TIM_OC3_SetConfig+0xe4>)
 801476e:	4293      	cmp	r3, r2
 8014770:	d113      	bne.n	801479a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8014772:	693b      	ldr	r3, [r7, #16]
 8014774:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014778:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801477a:	693b      	ldr	r3, [r7, #16]
 801477c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014780:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8014782:	683b      	ldr	r3, [r7, #0]
 8014784:	695b      	ldr	r3, [r3, #20]
 8014786:	011b      	lsls	r3, r3, #4
 8014788:	693a      	ldr	r2, [r7, #16]
 801478a:	4313      	orrs	r3, r2
 801478c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801478e:	683b      	ldr	r3, [r7, #0]
 8014790:	699b      	ldr	r3, [r3, #24]
 8014792:	011b      	lsls	r3, r3, #4
 8014794:	693a      	ldr	r2, [r7, #16]
 8014796:	4313      	orrs	r3, r2
 8014798:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	693a      	ldr	r2, [r7, #16]
 801479e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	68fa      	ldr	r2, [r7, #12]
 80147a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80147a6:	683b      	ldr	r3, [r7, #0]
 80147a8:	685a      	ldr	r2, [r3, #4]
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	697a      	ldr	r2, [r7, #20]
 80147b2:	621a      	str	r2, [r3, #32]
}
 80147b4:	bf00      	nop
 80147b6:	371c      	adds	r7, #28
 80147b8:	46bd      	mov	sp, r7
 80147ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147be:	4770      	bx	lr
 80147c0:	40010000 	.word	0x40010000
 80147c4:	40010400 	.word	0x40010400

080147c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80147c8:	b480      	push	{r7}
 80147ca:	b087      	sub	sp, #28
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	6078      	str	r0, [r7, #4]
 80147d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	6a1b      	ldr	r3, [r3, #32]
 80147d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	6a1b      	ldr	r3, [r3, #32]
 80147e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	685b      	ldr	r3, [r3, #4]
 80147e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	69db      	ldr	r3, [r3, #28]
 80147ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80147f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80147fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014800:	683b      	ldr	r3, [r7, #0]
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	021b      	lsls	r3, r3, #8
 8014806:	68fa      	ldr	r2, [r7, #12]
 8014808:	4313      	orrs	r3, r2
 801480a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801480c:	693b      	ldr	r3, [r7, #16]
 801480e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014812:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8014814:	683b      	ldr	r3, [r7, #0]
 8014816:	689b      	ldr	r3, [r3, #8]
 8014818:	031b      	lsls	r3, r3, #12
 801481a:	693a      	ldr	r2, [r7, #16]
 801481c:	4313      	orrs	r3, r2
 801481e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	4a12      	ldr	r2, [pc, #72]	; (801486c <TIM_OC4_SetConfig+0xa4>)
 8014824:	4293      	cmp	r3, r2
 8014826:	d003      	beq.n	8014830 <TIM_OC4_SetConfig+0x68>
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	4a11      	ldr	r2, [pc, #68]	; (8014870 <TIM_OC4_SetConfig+0xa8>)
 801482c:	4293      	cmp	r3, r2
 801482e:	d109      	bne.n	8014844 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014830:	697b      	ldr	r3, [r7, #20]
 8014832:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014836:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014838:	683b      	ldr	r3, [r7, #0]
 801483a:	695b      	ldr	r3, [r3, #20]
 801483c:	019b      	lsls	r3, r3, #6
 801483e:	697a      	ldr	r2, [r7, #20]
 8014840:	4313      	orrs	r3, r2
 8014842:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	697a      	ldr	r2, [r7, #20]
 8014848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	68fa      	ldr	r2, [r7, #12]
 801484e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8014850:	683b      	ldr	r3, [r7, #0]
 8014852:	685a      	ldr	r2, [r3, #4]
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	693a      	ldr	r2, [r7, #16]
 801485c:	621a      	str	r2, [r3, #32]
}
 801485e:	bf00      	nop
 8014860:	371c      	adds	r7, #28
 8014862:	46bd      	mov	sp, r7
 8014864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014868:	4770      	bx	lr
 801486a:	bf00      	nop
 801486c:	40010000 	.word	0x40010000
 8014870:	40010400 	.word	0x40010400

08014874 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014874:	b480      	push	{r7}
 8014876:	b087      	sub	sp, #28
 8014878:	af00      	add	r7, sp, #0
 801487a:	60f8      	str	r0, [r7, #12]
 801487c:	60b9      	str	r1, [r7, #8]
 801487e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	6a1b      	ldr	r3, [r3, #32]
 8014884:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	6a1b      	ldr	r3, [r3, #32]
 801488a:	f023 0201 	bic.w	r2, r3, #1
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	699b      	ldr	r3, [r3, #24]
 8014896:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8014898:	693b      	ldr	r3, [r7, #16]
 801489a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801489e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	011b      	lsls	r3, r3, #4
 80148a4:	693a      	ldr	r2, [r7, #16]
 80148a6:	4313      	orrs	r3, r2
 80148a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80148aa:	697b      	ldr	r3, [r7, #20]
 80148ac:	f023 030a 	bic.w	r3, r3, #10
 80148b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80148b2:	697a      	ldr	r2, [r7, #20]
 80148b4:	68bb      	ldr	r3, [r7, #8]
 80148b6:	4313      	orrs	r3, r2
 80148b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	693a      	ldr	r2, [r7, #16]
 80148be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	697a      	ldr	r2, [r7, #20]
 80148c4:	621a      	str	r2, [r3, #32]
}
 80148c6:	bf00      	nop
 80148c8:	371c      	adds	r7, #28
 80148ca:	46bd      	mov	sp, r7
 80148cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d0:	4770      	bx	lr

080148d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80148d2:	b480      	push	{r7}
 80148d4:	b087      	sub	sp, #28
 80148d6:	af00      	add	r7, sp, #0
 80148d8:	60f8      	str	r0, [r7, #12]
 80148da:	60b9      	str	r1, [r7, #8]
 80148dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	6a1b      	ldr	r3, [r3, #32]
 80148e2:	f023 0210 	bic.w	r2, r3, #16
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	699b      	ldr	r3, [r3, #24]
 80148ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	6a1b      	ldr	r3, [r3, #32]
 80148f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80148f6:	697b      	ldr	r3, [r7, #20]
 80148f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80148fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	031b      	lsls	r3, r3, #12
 8014902:	697a      	ldr	r2, [r7, #20]
 8014904:	4313      	orrs	r3, r2
 8014906:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8014908:	693b      	ldr	r3, [r7, #16]
 801490a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801490e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8014910:	68bb      	ldr	r3, [r7, #8]
 8014912:	011b      	lsls	r3, r3, #4
 8014914:	693a      	ldr	r2, [r7, #16]
 8014916:	4313      	orrs	r3, r2
 8014918:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	697a      	ldr	r2, [r7, #20]
 801491e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	693a      	ldr	r2, [r7, #16]
 8014924:	621a      	str	r2, [r3, #32]
}
 8014926:	bf00      	nop
 8014928:	371c      	adds	r7, #28
 801492a:	46bd      	mov	sp, r7
 801492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014930:	4770      	bx	lr

08014932 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8014932:	b480      	push	{r7}
 8014934:	b085      	sub	sp, #20
 8014936:	af00      	add	r7, sp, #0
 8014938:	6078      	str	r0, [r7, #4]
 801493a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	689b      	ldr	r3, [r3, #8]
 8014940:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014948:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801494a:	683a      	ldr	r2, [r7, #0]
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	4313      	orrs	r3, r2
 8014950:	f043 0307 	orr.w	r3, r3, #7
 8014954:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	68fa      	ldr	r2, [r7, #12]
 801495a:	609a      	str	r2, [r3, #8]
}
 801495c:	bf00      	nop
 801495e:	3714      	adds	r7, #20
 8014960:	46bd      	mov	sp, r7
 8014962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014966:	4770      	bx	lr

08014968 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8014968:	b480      	push	{r7}
 801496a:	b087      	sub	sp, #28
 801496c:	af00      	add	r7, sp, #0
 801496e:	60f8      	str	r0, [r7, #12]
 8014970:	60b9      	str	r1, [r7, #8]
 8014972:	607a      	str	r2, [r7, #4]
 8014974:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	689b      	ldr	r3, [r3, #8]
 801497a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801497c:	697b      	ldr	r3, [r7, #20]
 801497e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014982:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8014984:	683b      	ldr	r3, [r7, #0]
 8014986:	021a      	lsls	r2, r3, #8
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	431a      	orrs	r2, r3
 801498c:	68bb      	ldr	r3, [r7, #8]
 801498e:	4313      	orrs	r3, r2
 8014990:	697a      	ldr	r2, [r7, #20]
 8014992:	4313      	orrs	r3, r2
 8014994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	697a      	ldr	r2, [r7, #20]
 801499a:	609a      	str	r2, [r3, #8]
}
 801499c:	bf00      	nop
 801499e:	371c      	adds	r7, #28
 80149a0:	46bd      	mov	sp, r7
 80149a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a6:	4770      	bx	lr

080149a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80149a8:	b480      	push	{r7}
 80149aa:	b087      	sub	sp, #28
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	60f8      	str	r0, [r7, #12]
 80149b0:	60b9      	str	r1, [r7, #8]
 80149b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80149b4:	68bb      	ldr	r3, [r7, #8]
 80149b6:	f003 031f 	and.w	r3, r3, #31
 80149ba:	2201      	movs	r2, #1
 80149bc:	fa02 f303 	lsl.w	r3, r2, r3
 80149c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	6a1a      	ldr	r2, [r3, #32]
 80149c6:	697b      	ldr	r3, [r7, #20]
 80149c8:	43db      	mvns	r3, r3
 80149ca:	401a      	ands	r2, r3
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	6a1a      	ldr	r2, [r3, #32]
 80149d4:	68bb      	ldr	r3, [r7, #8]
 80149d6:	f003 031f 	and.w	r3, r3, #31
 80149da:	6879      	ldr	r1, [r7, #4]
 80149dc:	fa01 f303 	lsl.w	r3, r1, r3
 80149e0:	431a      	orrs	r2, r3
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	621a      	str	r2, [r3, #32]
}
 80149e6:	bf00      	nop
 80149e8:	371c      	adds	r7, #28
 80149ea:	46bd      	mov	sp, r7
 80149ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f0:	4770      	bx	lr
	...

080149f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80149f4:	b480      	push	{r7}
 80149f6:	b085      	sub	sp, #20
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	6078      	str	r0, [r7, #4]
 80149fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014a04:	2b01      	cmp	r3, #1
 8014a06:	d101      	bne.n	8014a0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8014a08:	2302      	movs	r3, #2
 8014a0a:	e05a      	b.n	8014ac2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	2201      	movs	r2, #1
 8014a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	2202      	movs	r2, #2
 8014a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	685b      	ldr	r3, [r3, #4]
 8014a22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	689b      	ldr	r3, [r3, #8]
 8014a2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014a32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8014a34:	683b      	ldr	r3, [r7, #0]
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	68fa      	ldr	r2, [r7, #12]
 8014a3a:	4313      	orrs	r3, r2
 8014a3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	68fa      	ldr	r2, [r7, #12]
 8014a44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	4a21      	ldr	r2, [pc, #132]	; (8014ad0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8014a4c:	4293      	cmp	r3, r2
 8014a4e:	d022      	beq.n	8014a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014a58:	d01d      	beq.n	8014a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	4a1d      	ldr	r2, [pc, #116]	; (8014ad4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8014a60:	4293      	cmp	r3, r2
 8014a62:	d018      	beq.n	8014a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	4a1b      	ldr	r2, [pc, #108]	; (8014ad8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8014a6a:	4293      	cmp	r3, r2
 8014a6c:	d013      	beq.n	8014a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	4a1a      	ldr	r2, [pc, #104]	; (8014adc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8014a74:	4293      	cmp	r3, r2
 8014a76:	d00e      	beq.n	8014a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	4a18      	ldr	r2, [pc, #96]	; (8014ae0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8014a7e:	4293      	cmp	r3, r2
 8014a80:	d009      	beq.n	8014a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	4a17      	ldr	r2, [pc, #92]	; (8014ae4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8014a88:	4293      	cmp	r3, r2
 8014a8a:	d004      	beq.n	8014a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	4a15      	ldr	r2, [pc, #84]	; (8014ae8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8014a92:	4293      	cmp	r3, r2
 8014a94:	d10c      	bne.n	8014ab0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8014a96:	68bb      	ldr	r3, [r7, #8]
 8014a98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014a9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8014a9e:	683b      	ldr	r3, [r7, #0]
 8014aa0:	685b      	ldr	r3, [r3, #4]
 8014aa2:	68ba      	ldr	r2, [r7, #8]
 8014aa4:	4313      	orrs	r3, r2
 8014aa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	68ba      	ldr	r2, [r7, #8]
 8014aae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	2201      	movs	r2, #1
 8014ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	2200      	movs	r2, #0
 8014abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014ac0:	2300      	movs	r3, #0
}
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	3714      	adds	r7, #20
 8014ac6:	46bd      	mov	sp, r7
 8014ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014acc:	4770      	bx	lr
 8014ace:	bf00      	nop
 8014ad0:	40010000 	.word	0x40010000
 8014ad4:	40000400 	.word	0x40000400
 8014ad8:	40000800 	.word	0x40000800
 8014adc:	40000c00 	.word	0x40000c00
 8014ae0:	40010400 	.word	0x40010400
 8014ae4:	40014000 	.word	0x40014000
 8014ae8:	40001800 	.word	0x40001800

08014aec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014aec:	b480      	push	{r7}
 8014aee:	b083      	sub	sp, #12
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014af4:	bf00      	nop
 8014af6:	370c      	adds	r7, #12
 8014af8:	46bd      	mov	sp, r7
 8014afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014afe:	4770      	bx	lr

08014b00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014b00:	b480      	push	{r7}
 8014b02:	b083      	sub	sp, #12
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014b08:	bf00      	nop
 8014b0a:	370c      	adds	r7, #12
 8014b0c:	46bd      	mov	sp, r7
 8014b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b12:	4770      	bx	lr

08014b14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014b14:	b580      	push	{r7, lr}
 8014b16:	b082      	sub	sp, #8
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d101      	bne.n	8014b26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8014b22:	2301      	movs	r3, #1
 8014b24:	e03f      	b.n	8014ba6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014b2c:	b2db      	uxtb	r3, r3
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d106      	bne.n	8014b40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	2200      	movs	r2, #0
 8014b36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014b3a:	6878      	ldr	r0, [r7, #4]
 8014b3c:	f7ed ffa6 	bl	8002a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	2224      	movs	r2, #36	; 0x24
 8014b44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	68da      	ldr	r2, [r3, #12]
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014b56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8014b58:	6878      	ldr	r0, [r7, #4]
 8014b5a:	f000 fb97 	bl	801528c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	691a      	ldr	r2, [r3, #16]
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8014b6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	695a      	ldr	r2, [r3, #20]
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8014b7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	68da      	ldr	r2, [r3, #12]
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014b8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	2200      	movs	r2, #0
 8014b92:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	2220      	movs	r2, #32
 8014b98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	2220      	movs	r2, #32
 8014ba0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8014ba4:	2300      	movs	r3, #0
}
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	3708      	adds	r7, #8
 8014baa:	46bd      	mov	sp, r7
 8014bac:	bd80      	pop	{r7, pc}

08014bae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014bae:	b580      	push	{r7, lr}
 8014bb0:	b088      	sub	sp, #32
 8014bb2:	af02      	add	r7, sp, #8
 8014bb4:	60f8      	str	r0, [r7, #12]
 8014bb6:	60b9      	str	r1, [r7, #8]
 8014bb8:	603b      	str	r3, [r7, #0]
 8014bba:	4613      	mov	r3, r2
 8014bbc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014bc8:	b2db      	uxtb	r3, r3
 8014bca:	2b20      	cmp	r3, #32
 8014bcc:	f040 8083 	bne.w	8014cd6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8014bd0:	68bb      	ldr	r3, [r7, #8]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d002      	beq.n	8014bdc <HAL_UART_Transmit+0x2e>
 8014bd6:	88fb      	ldrh	r3, [r7, #6]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d101      	bne.n	8014be0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8014bdc:	2301      	movs	r3, #1
 8014bde:	e07b      	b.n	8014cd8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014be6:	2b01      	cmp	r3, #1
 8014be8:	d101      	bne.n	8014bee <HAL_UART_Transmit+0x40>
 8014bea:	2302      	movs	r3, #2
 8014bec:	e074      	b.n	8014cd8 <HAL_UART_Transmit+0x12a>
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	2201      	movs	r2, #1
 8014bf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	2200      	movs	r2, #0
 8014bfa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	2221      	movs	r2, #33	; 0x21
 8014c00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8014c04:	f7f9 fd94 	bl	800e730 <HAL_GetTick>
 8014c08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	88fa      	ldrh	r2, [r7, #6]
 8014c0e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	88fa      	ldrh	r2, [r7, #6]
 8014c14:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	2200      	movs	r2, #0
 8014c1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8014c1e:	e042      	b.n	8014ca6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014c24:	b29b      	uxth	r3, r3
 8014c26:	3b01      	subs	r3, #1
 8014c28:	b29a      	uxth	r2, r3
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	689b      	ldr	r3, [r3, #8]
 8014c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014c36:	d122      	bne.n	8014c7e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8014c38:	683b      	ldr	r3, [r7, #0]
 8014c3a:	9300      	str	r3, [sp, #0]
 8014c3c:	697b      	ldr	r3, [r7, #20]
 8014c3e:	2200      	movs	r2, #0
 8014c40:	2180      	movs	r1, #128	; 0x80
 8014c42:	68f8      	ldr	r0, [r7, #12]
 8014c44:	f000 f9b6 	bl	8014fb4 <UART_WaitOnFlagUntilTimeout>
 8014c48:	4603      	mov	r3, r0
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d001      	beq.n	8014c52 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8014c4e:	2303      	movs	r3, #3
 8014c50:	e042      	b.n	8014cd8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8014c52:	68bb      	ldr	r3, [r7, #8]
 8014c54:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8014c56:	693b      	ldr	r3, [r7, #16]
 8014c58:	881b      	ldrh	r3, [r3, #0]
 8014c5a:	461a      	mov	r2, r3
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014c64:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	691b      	ldr	r3, [r3, #16]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d103      	bne.n	8014c76 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8014c6e:	68bb      	ldr	r3, [r7, #8]
 8014c70:	3302      	adds	r3, #2
 8014c72:	60bb      	str	r3, [r7, #8]
 8014c74:	e017      	b.n	8014ca6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8014c76:	68bb      	ldr	r3, [r7, #8]
 8014c78:	3301      	adds	r3, #1
 8014c7a:	60bb      	str	r3, [r7, #8]
 8014c7c:	e013      	b.n	8014ca6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8014c7e:	683b      	ldr	r3, [r7, #0]
 8014c80:	9300      	str	r3, [sp, #0]
 8014c82:	697b      	ldr	r3, [r7, #20]
 8014c84:	2200      	movs	r2, #0
 8014c86:	2180      	movs	r1, #128	; 0x80
 8014c88:	68f8      	ldr	r0, [r7, #12]
 8014c8a:	f000 f993 	bl	8014fb4 <UART_WaitOnFlagUntilTimeout>
 8014c8e:	4603      	mov	r3, r0
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d001      	beq.n	8014c98 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8014c94:	2303      	movs	r3, #3
 8014c96:	e01f      	b.n	8014cd8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8014c98:	68bb      	ldr	r3, [r7, #8]
 8014c9a:	1c5a      	adds	r2, r3, #1
 8014c9c:	60ba      	str	r2, [r7, #8]
 8014c9e:	781a      	ldrb	r2, [r3, #0]
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014caa:	b29b      	uxth	r3, r3
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d1b7      	bne.n	8014c20 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8014cb0:	683b      	ldr	r3, [r7, #0]
 8014cb2:	9300      	str	r3, [sp, #0]
 8014cb4:	697b      	ldr	r3, [r7, #20]
 8014cb6:	2200      	movs	r2, #0
 8014cb8:	2140      	movs	r1, #64	; 0x40
 8014cba:	68f8      	ldr	r0, [r7, #12]
 8014cbc:	f000 f97a 	bl	8014fb4 <UART_WaitOnFlagUntilTimeout>
 8014cc0:	4603      	mov	r3, r0
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d001      	beq.n	8014cca <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8014cc6:	2303      	movs	r3, #3
 8014cc8:	e006      	b.n	8014cd8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	2220      	movs	r2, #32
 8014cce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8014cd2:	2300      	movs	r3, #0
 8014cd4:	e000      	b.n	8014cd8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8014cd6:	2302      	movs	r3, #2
  }
}
 8014cd8:	4618      	mov	r0, r3
 8014cda:	3718      	adds	r7, #24
 8014cdc:	46bd      	mov	sp, r7
 8014cde:	bd80      	pop	{r7, pc}

08014ce0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014ce0:	b480      	push	{r7}
 8014ce2:	b085      	sub	sp, #20
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	60f8      	str	r0, [r7, #12]
 8014ce8:	60b9      	str	r1, [r7, #8]
 8014cea:	4613      	mov	r3, r2
 8014cec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8014cf4:	b2db      	uxtb	r3, r3
 8014cf6:	2b20      	cmp	r3, #32
 8014cf8:	d140      	bne.n	8014d7c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8014cfa:	68bb      	ldr	r3, [r7, #8]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d002      	beq.n	8014d06 <HAL_UART_Receive_IT+0x26>
 8014d00:	88fb      	ldrh	r3, [r7, #6]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d101      	bne.n	8014d0a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8014d06:	2301      	movs	r3, #1
 8014d08:	e039      	b.n	8014d7e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014d10:	2b01      	cmp	r3, #1
 8014d12:	d101      	bne.n	8014d18 <HAL_UART_Receive_IT+0x38>
 8014d14:	2302      	movs	r3, #2
 8014d16:	e032      	b.n	8014d7e <HAL_UART_Receive_IT+0x9e>
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	2201      	movs	r2, #1
 8014d1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	68ba      	ldr	r2, [r7, #8]
 8014d24:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	88fa      	ldrh	r2, [r7, #6]
 8014d2a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	88fa      	ldrh	r2, [r7, #6]
 8014d30:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	2200      	movs	r2, #0
 8014d36:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	2222      	movs	r2, #34	; 0x22
 8014d3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	2200      	movs	r2, #0
 8014d44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	68da      	ldr	r2, [r3, #12]
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014d56:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	695a      	ldr	r2, [r3, #20]
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	f042 0201 	orr.w	r2, r2, #1
 8014d66:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	68da      	ldr	r2, [r3, #12]
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	f042 0220 	orr.w	r2, r2, #32
 8014d76:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8014d78:	2300      	movs	r3, #0
 8014d7a:	e000      	b.n	8014d7e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8014d7c:	2302      	movs	r3, #2
  }
}
 8014d7e:	4618      	mov	r0, r3
 8014d80:	3714      	adds	r7, #20
 8014d82:	46bd      	mov	sp, r7
 8014d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d88:	4770      	bx	lr
	...

08014d8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b088      	sub	sp, #32
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	681b      	ldr	r3, [r3, #0]
 8014da0:	68db      	ldr	r3, [r3, #12]
 8014da2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	695b      	ldr	r3, [r3, #20]
 8014daa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8014dac:	2300      	movs	r3, #0
 8014dae:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8014db0:	2300      	movs	r3, #0
 8014db2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8014db4:	69fb      	ldr	r3, [r7, #28]
 8014db6:	f003 030f 	and.w	r3, r3, #15
 8014dba:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8014dbc:	693b      	ldr	r3, [r7, #16]
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d10d      	bne.n	8014dde <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8014dc2:	69fb      	ldr	r3, [r7, #28]
 8014dc4:	f003 0320 	and.w	r3, r3, #32
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d008      	beq.n	8014dde <HAL_UART_IRQHandler+0x52>
 8014dcc:	69bb      	ldr	r3, [r7, #24]
 8014dce:	f003 0320 	and.w	r3, r3, #32
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d003      	beq.n	8014dde <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8014dd6:	6878      	ldr	r0, [r7, #4]
 8014dd8:	f000 f9d6 	bl	8015188 <UART_Receive_IT>
      return;
 8014ddc:	e0d0      	b.n	8014f80 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8014dde:	693b      	ldr	r3, [r7, #16]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	f000 80b0 	beq.w	8014f46 <HAL_UART_IRQHandler+0x1ba>
 8014de6:	697b      	ldr	r3, [r7, #20]
 8014de8:	f003 0301 	and.w	r3, r3, #1
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d105      	bne.n	8014dfc <HAL_UART_IRQHandler+0x70>
 8014df0:	69bb      	ldr	r3, [r7, #24]
 8014df2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	f000 80a5 	beq.w	8014f46 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8014dfc:	69fb      	ldr	r3, [r7, #28]
 8014dfe:	f003 0301 	and.w	r3, r3, #1
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d00a      	beq.n	8014e1c <HAL_UART_IRQHandler+0x90>
 8014e06:	69bb      	ldr	r3, [r7, #24]
 8014e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d005      	beq.n	8014e1c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014e14:	f043 0201 	orr.w	r2, r3, #1
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8014e1c:	69fb      	ldr	r3, [r7, #28]
 8014e1e:	f003 0304 	and.w	r3, r3, #4
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d00a      	beq.n	8014e3c <HAL_UART_IRQHandler+0xb0>
 8014e26:	697b      	ldr	r3, [r7, #20]
 8014e28:	f003 0301 	and.w	r3, r3, #1
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d005      	beq.n	8014e3c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014e34:	f043 0202 	orr.w	r2, r3, #2
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8014e3c:	69fb      	ldr	r3, [r7, #28]
 8014e3e:	f003 0302 	and.w	r3, r3, #2
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d00a      	beq.n	8014e5c <HAL_UART_IRQHandler+0xd0>
 8014e46:	697b      	ldr	r3, [r7, #20]
 8014e48:	f003 0301 	and.w	r3, r3, #1
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d005      	beq.n	8014e5c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014e54:	f043 0204 	orr.w	r2, r3, #4
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8014e5c:	69fb      	ldr	r3, [r7, #28]
 8014e5e:	f003 0308 	and.w	r3, r3, #8
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d00f      	beq.n	8014e86 <HAL_UART_IRQHandler+0xfa>
 8014e66:	69bb      	ldr	r3, [r7, #24]
 8014e68:	f003 0320 	and.w	r3, r3, #32
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d104      	bne.n	8014e7a <HAL_UART_IRQHandler+0xee>
 8014e70:	697b      	ldr	r3, [r7, #20]
 8014e72:	f003 0301 	and.w	r3, r3, #1
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d005      	beq.n	8014e86 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014e7e:	f043 0208 	orr.w	r2, r3, #8
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d077      	beq.n	8014f7e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8014e8e:	69fb      	ldr	r3, [r7, #28]
 8014e90:	f003 0320 	and.w	r3, r3, #32
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d007      	beq.n	8014ea8 <HAL_UART_IRQHandler+0x11c>
 8014e98:	69bb      	ldr	r3, [r7, #24]
 8014e9a:	f003 0320 	and.w	r3, r3, #32
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d002      	beq.n	8014ea8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8014ea2:	6878      	ldr	r0, [r7, #4]
 8014ea4:	f000 f970 	bl	8015188 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	695b      	ldr	r3, [r3, #20]
 8014eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014eb2:	2b40      	cmp	r3, #64	; 0x40
 8014eb4:	bf0c      	ite	eq
 8014eb6:	2301      	moveq	r3, #1
 8014eb8:	2300      	movne	r3, #0
 8014eba:	b2db      	uxtb	r3, r3
 8014ebc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014ec2:	f003 0308 	and.w	r3, r3, #8
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d102      	bne.n	8014ed0 <HAL_UART_IRQHandler+0x144>
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d031      	beq.n	8014f34 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8014ed0:	6878      	ldr	r0, [r7, #4]
 8014ed2:	f000 f8b9 	bl	8015048 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	695b      	ldr	r3, [r3, #20]
 8014edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014ee0:	2b40      	cmp	r3, #64	; 0x40
 8014ee2:	d123      	bne.n	8014f2c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	695a      	ldr	r2, [r3, #20]
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014ef2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d013      	beq.n	8014f24 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f00:	4a21      	ldr	r2, [pc, #132]	; (8014f88 <HAL_UART_IRQHandler+0x1fc>)
 8014f02:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f08:	4618      	mov	r0, r3
 8014f0a:	f7fa fd73 	bl	800f9f4 <HAL_DMA_Abort_IT>
 8014f0e:	4603      	mov	r3, r0
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d016      	beq.n	8014f42 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f1a:	687a      	ldr	r2, [r7, #4]
 8014f1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8014f1e:	4610      	mov	r0, r2
 8014f20:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014f22:	e00e      	b.n	8014f42 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8014f24:	6878      	ldr	r0, [r7, #4]
 8014f26:	f000 f83b 	bl	8014fa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014f2a:	e00a      	b.n	8014f42 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014f2c:	6878      	ldr	r0, [r7, #4]
 8014f2e:	f000 f837 	bl	8014fa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014f32:	e006      	b.n	8014f42 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8014f34:	6878      	ldr	r0, [r7, #4]
 8014f36:	f000 f833 	bl	8014fa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	2200      	movs	r2, #0
 8014f3e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8014f40:	e01d      	b.n	8014f7e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014f42:	bf00      	nop
    return;
 8014f44:	e01b      	b.n	8014f7e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8014f46:	69fb      	ldr	r3, [r7, #28]
 8014f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d008      	beq.n	8014f62 <HAL_UART_IRQHandler+0x1d6>
 8014f50:	69bb      	ldr	r3, [r7, #24]
 8014f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d003      	beq.n	8014f62 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8014f5a:	6878      	ldr	r0, [r7, #4]
 8014f5c:	f000 f8a6 	bl	80150ac <UART_Transmit_IT>
    return;
 8014f60:	e00e      	b.n	8014f80 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8014f62:	69fb      	ldr	r3, [r7, #28]
 8014f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d009      	beq.n	8014f80 <HAL_UART_IRQHandler+0x1f4>
 8014f6c:	69bb      	ldr	r3, [r7, #24]
 8014f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d004      	beq.n	8014f80 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8014f76:	6878      	ldr	r0, [r7, #4]
 8014f78:	f000 f8ee 	bl	8015158 <UART_EndTransmit_IT>
    return;
 8014f7c:	e000      	b.n	8014f80 <HAL_UART_IRQHandler+0x1f4>
    return;
 8014f7e:	bf00      	nop
  }
}
 8014f80:	3720      	adds	r7, #32
 8014f82:	46bd      	mov	sp, r7
 8014f84:	bd80      	pop	{r7, pc}
 8014f86:	bf00      	nop
 8014f88:	08015085 	.word	0x08015085

08014f8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8014f8c:	b480      	push	{r7}
 8014f8e:	b083      	sub	sp, #12
 8014f90:	af00      	add	r7, sp, #0
 8014f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8014f94:	bf00      	nop
 8014f96:	370c      	adds	r7, #12
 8014f98:	46bd      	mov	sp, r7
 8014f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f9e:	4770      	bx	lr

08014fa0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014fa0:	b480      	push	{r7}
 8014fa2:	b083      	sub	sp, #12
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8014fa8:	bf00      	nop
 8014faa:	370c      	adds	r7, #12
 8014fac:	46bd      	mov	sp, r7
 8014fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb2:	4770      	bx	lr

08014fb4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	b084      	sub	sp, #16
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	60f8      	str	r0, [r7, #12]
 8014fbc:	60b9      	str	r1, [r7, #8]
 8014fbe:	603b      	str	r3, [r7, #0]
 8014fc0:	4613      	mov	r3, r2
 8014fc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014fc4:	e02c      	b.n	8015020 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014fc6:	69bb      	ldr	r3, [r7, #24]
 8014fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014fcc:	d028      	beq.n	8015020 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8014fce:	69bb      	ldr	r3, [r7, #24]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d007      	beq.n	8014fe4 <UART_WaitOnFlagUntilTimeout+0x30>
 8014fd4:	f7f9 fbac 	bl	800e730 <HAL_GetTick>
 8014fd8:	4602      	mov	r2, r0
 8014fda:	683b      	ldr	r3, [r7, #0]
 8014fdc:	1ad3      	subs	r3, r2, r3
 8014fde:	69ba      	ldr	r2, [r7, #24]
 8014fe0:	429a      	cmp	r2, r3
 8014fe2:	d21d      	bcs.n	8015020 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	681b      	ldr	r3, [r3, #0]
 8014fe8:	68da      	ldr	r2, [r3, #12]
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8014ff2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	695a      	ldr	r2, [r3, #20]
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	f022 0201 	bic.w	r2, r2, #1
 8015002:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	2220      	movs	r2, #32
 8015008:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	2220      	movs	r2, #32
 8015010:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	2200      	movs	r2, #0
 8015018:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 801501c:	2303      	movs	r3, #3
 801501e:	e00f      	b.n	8015040 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	681a      	ldr	r2, [r3, #0]
 8015026:	68bb      	ldr	r3, [r7, #8]
 8015028:	4013      	ands	r3, r2
 801502a:	68ba      	ldr	r2, [r7, #8]
 801502c:	429a      	cmp	r2, r3
 801502e:	bf0c      	ite	eq
 8015030:	2301      	moveq	r3, #1
 8015032:	2300      	movne	r3, #0
 8015034:	b2db      	uxtb	r3, r3
 8015036:	461a      	mov	r2, r3
 8015038:	79fb      	ldrb	r3, [r7, #7]
 801503a:	429a      	cmp	r2, r3
 801503c:	d0c3      	beq.n	8014fc6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801503e:	2300      	movs	r3, #0
}
 8015040:	4618      	mov	r0, r3
 8015042:	3710      	adds	r7, #16
 8015044:	46bd      	mov	sp, r7
 8015046:	bd80      	pop	{r7, pc}

08015048 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015048:	b480      	push	{r7}
 801504a:	b083      	sub	sp, #12
 801504c:	af00      	add	r7, sp, #0
 801504e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	68da      	ldr	r2, [r3, #12]
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801505e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	695a      	ldr	r2, [r3, #20]
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	f022 0201 	bic.w	r2, r2, #1
 801506e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	2220      	movs	r2, #32
 8015074:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8015078:	bf00      	nop
 801507a:	370c      	adds	r7, #12
 801507c:	46bd      	mov	sp, r7
 801507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015082:	4770      	bx	lr

08015084 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015084:	b580      	push	{r7, lr}
 8015086:	b084      	sub	sp, #16
 8015088:	af00      	add	r7, sp, #0
 801508a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015090:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	2200      	movs	r2, #0
 8015096:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	2200      	movs	r2, #0
 801509c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801509e:	68f8      	ldr	r0, [r7, #12]
 80150a0:	f7ff ff7e 	bl	8014fa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80150a4:	bf00      	nop
 80150a6:	3710      	adds	r7, #16
 80150a8:	46bd      	mov	sp, r7
 80150aa:	bd80      	pop	{r7, pc}

080150ac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80150ac:	b480      	push	{r7}
 80150ae:	b085      	sub	sp, #20
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80150ba:	b2db      	uxtb	r3, r3
 80150bc:	2b21      	cmp	r3, #33	; 0x21
 80150be:	d144      	bne.n	801514a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	689b      	ldr	r3, [r3, #8]
 80150c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80150c8:	d11a      	bne.n	8015100 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	6a1b      	ldr	r3, [r3, #32]
 80150ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	881b      	ldrh	r3, [r3, #0]
 80150d4:	461a      	mov	r2, r3
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80150de:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	691b      	ldr	r3, [r3, #16]
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d105      	bne.n	80150f4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	6a1b      	ldr	r3, [r3, #32]
 80150ec:	1c9a      	adds	r2, r3, #2
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	621a      	str	r2, [r3, #32]
 80150f2:	e00e      	b.n	8015112 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	6a1b      	ldr	r3, [r3, #32]
 80150f8:	1c5a      	adds	r2, r3, #1
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	621a      	str	r2, [r3, #32]
 80150fe:	e008      	b.n	8015112 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	6a1b      	ldr	r3, [r3, #32]
 8015104:	1c59      	adds	r1, r3, #1
 8015106:	687a      	ldr	r2, [r7, #4]
 8015108:	6211      	str	r1, [r2, #32]
 801510a:	781a      	ldrb	r2, [r3, #0]
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015116:	b29b      	uxth	r3, r3
 8015118:	3b01      	subs	r3, #1
 801511a:	b29b      	uxth	r3, r3
 801511c:	687a      	ldr	r2, [r7, #4]
 801511e:	4619      	mov	r1, r3
 8015120:	84d1      	strh	r1, [r2, #38]	; 0x26
 8015122:	2b00      	cmp	r3, #0
 8015124:	d10f      	bne.n	8015146 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	68da      	ldr	r2, [r3, #12]
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015134:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	68da      	ldr	r2, [r3, #12]
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015144:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8015146:	2300      	movs	r3, #0
 8015148:	e000      	b.n	801514c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801514a:	2302      	movs	r3, #2
  }
}
 801514c:	4618      	mov	r0, r3
 801514e:	3714      	adds	r7, #20
 8015150:	46bd      	mov	sp, r7
 8015152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015156:	4770      	bx	lr

08015158 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8015158:	b580      	push	{r7, lr}
 801515a:	b082      	sub	sp, #8
 801515c:	af00      	add	r7, sp, #0
 801515e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	68da      	ldr	r2, [r3, #12]
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801516e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	2220      	movs	r2, #32
 8015174:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8015178:	6878      	ldr	r0, [r7, #4]
 801517a:	f7ff ff07 	bl	8014f8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801517e:	2300      	movs	r3, #0
}
 8015180:	4618      	mov	r0, r3
 8015182:	3708      	adds	r7, #8
 8015184:	46bd      	mov	sp, r7
 8015186:	bd80      	pop	{r7, pc}

08015188 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8015188:	b580      	push	{r7, lr}
 801518a:	b084      	sub	sp, #16
 801518c:	af00      	add	r7, sp, #0
 801518e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8015196:	b2db      	uxtb	r3, r3
 8015198:	2b22      	cmp	r3, #34	; 0x22
 801519a:	d171      	bne.n	8015280 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	689b      	ldr	r3, [r3, #8]
 80151a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80151a4:	d123      	bne.n	80151ee <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80151aa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	691b      	ldr	r3, [r3, #16]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d10e      	bne.n	80151d2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	685b      	ldr	r3, [r3, #4]
 80151ba:	b29b      	uxth	r3, r3
 80151bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80151c0:	b29a      	uxth	r2, r3
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80151ca:	1c9a      	adds	r2, r3, #2
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	629a      	str	r2, [r3, #40]	; 0x28
 80151d0:	e029      	b.n	8015226 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	685b      	ldr	r3, [r3, #4]
 80151d8:	b29b      	uxth	r3, r3
 80151da:	b2db      	uxtb	r3, r3
 80151dc:	b29a      	uxth	r2, r3
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80151e6:	1c5a      	adds	r2, r3, #1
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	629a      	str	r2, [r3, #40]	; 0x28
 80151ec:	e01b      	b.n	8015226 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	691b      	ldr	r3, [r3, #16]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d10a      	bne.n	801520c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	681b      	ldr	r3, [r3, #0]
 80151fa:	6858      	ldr	r0, [r3, #4]
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015200:	1c59      	adds	r1, r3, #1
 8015202:	687a      	ldr	r2, [r7, #4]
 8015204:	6291      	str	r1, [r2, #40]	; 0x28
 8015206:	b2c2      	uxtb	r2, r0
 8015208:	701a      	strb	r2, [r3, #0]
 801520a:	e00c      	b.n	8015226 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	685b      	ldr	r3, [r3, #4]
 8015212:	b2da      	uxtb	r2, r3
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015218:	1c58      	adds	r0, r3, #1
 801521a:	6879      	ldr	r1, [r7, #4]
 801521c:	6288      	str	r0, [r1, #40]	; 0x28
 801521e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8015222:	b2d2      	uxtb	r2, r2
 8015224:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801522a:	b29b      	uxth	r3, r3
 801522c:	3b01      	subs	r3, #1
 801522e:	b29b      	uxth	r3, r3
 8015230:	687a      	ldr	r2, [r7, #4]
 8015232:	4619      	mov	r1, r3
 8015234:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8015236:	2b00      	cmp	r3, #0
 8015238:	d120      	bne.n	801527c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	68da      	ldr	r2, [r3, #12]
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	f022 0220 	bic.w	r2, r2, #32
 8015248:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	681b      	ldr	r3, [r3, #0]
 801524e:	68da      	ldr	r2, [r3, #12]
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8015258:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	695a      	ldr	r2, [r3, #20]
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	f022 0201 	bic.w	r2, r2, #1
 8015268:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	2220      	movs	r2, #32
 801526e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8015272:	6878      	ldr	r0, [r7, #4]
 8015274:	f7ef fd32 	bl	8004cdc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8015278:	2300      	movs	r3, #0
 801527a:	e002      	b.n	8015282 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 801527c:	2300      	movs	r3, #0
 801527e:	e000      	b.n	8015282 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8015280:	2302      	movs	r3, #2
  }
}
 8015282:	4618      	mov	r0, r3
 8015284:	3710      	adds	r7, #16
 8015286:	46bd      	mov	sp, r7
 8015288:	bd80      	pop	{r7, pc}
	...

0801528c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801528c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015290:	b0bd      	sub	sp, #244	; 0xf4
 8015292:	af00      	add	r7, sp, #0
 8015294:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	691b      	ldr	r3, [r3, #16]
 80152a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80152a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80152a8:	68d9      	ldr	r1, [r3, #12]
 80152aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80152ae:	681a      	ldr	r2, [r3, #0]
 80152b0:	ea40 0301 	orr.w	r3, r0, r1
 80152b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80152b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80152ba:	689a      	ldr	r2, [r3, #8]
 80152bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80152c0:	691b      	ldr	r3, [r3, #16]
 80152c2:	431a      	orrs	r2, r3
 80152c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80152c8:	695b      	ldr	r3, [r3, #20]
 80152ca:	431a      	orrs	r2, r3
 80152cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80152d0:	69db      	ldr	r3, [r3, #28]
 80152d2:	4313      	orrs	r3, r2
 80152d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80152d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	68db      	ldr	r3, [r3, #12]
 80152e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80152e4:	f021 010c 	bic.w	r1, r1, #12
 80152e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80152ec:	681a      	ldr	r2, [r3, #0]
 80152ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80152f2:	430b      	orrs	r3, r1
 80152f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80152f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	695b      	ldr	r3, [r3, #20]
 80152fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8015302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015306:	6999      	ldr	r1, [r3, #24]
 8015308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801530c:	681a      	ldr	r2, [r3, #0]
 801530e:	ea40 0301 	orr.w	r3, r0, r1
 8015312:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015318:	69db      	ldr	r3, [r3, #28]
 801531a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801531e:	f040 81a5 	bne.w	801566c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8015322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015326:	681a      	ldr	r2, [r3, #0]
 8015328:	4bcd      	ldr	r3, [pc, #820]	; (8015660 <UART_SetConfig+0x3d4>)
 801532a:	429a      	cmp	r2, r3
 801532c:	d006      	beq.n	801533c <UART_SetConfig+0xb0>
 801532e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015332:	681a      	ldr	r2, [r3, #0]
 8015334:	4bcb      	ldr	r3, [pc, #812]	; (8015664 <UART_SetConfig+0x3d8>)
 8015336:	429a      	cmp	r2, r3
 8015338:	f040 80cb 	bne.w	80154d2 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801533c:	f7fe f842 	bl	80133c4 <HAL_RCC_GetPCLK2Freq>
 8015340:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8015344:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015348:	461c      	mov	r4, r3
 801534a:	f04f 0500 	mov.w	r5, #0
 801534e:	4622      	mov	r2, r4
 8015350:	462b      	mov	r3, r5
 8015352:	1891      	adds	r1, r2, r2
 8015354:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8015358:	415b      	adcs	r3, r3
 801535a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801535e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8015362:	1912      	adds	r2, r2, r4
 8015364:	eb45 0303 	adc.w	r3, r5, r3
 8015368:	f04f 0000 	mov.w	r0, #0
 801536c:	f04f 0100 	mov.w	r1, #0
 8015370:	00d9      	lsls	r1, r3, #3
 8015372:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8015376:	00d0      	lsls	r0, r2, #3
 8015378:	4602      	mov	r2, r0
 801537a:	460b      	mov	r3, r1
 801537c:	1911      	adds	r1, r2, r4
 801537e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8015382:	416b      	adcs	r3, r5
 8015384:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8015388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801538c:	685b      	ldr	r3, [r3, #4]
 801538e:	461a      	mov	r2, r3
 8015390:	f04f 0300 	mov.w	r3, #0
 8015394:	1891      	adds	r1, r2, r2
 8015396:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 801539a:	415b      	adcs	r3, r3
 801539c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80153a0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80153a4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80153a8:	f7eb fc6e 	bl	8000c88 <__aeabi_uldivmod>
 80153ac:	4602      	mov	r2, r0
 80153ae:	460b      	mov	r3, r1
 80153b0:	4bad      	ldr	r3, [pc, #692]	; (8015668 <UART_SetConfig+0x3dc>)
 80153b2:	fba3 2302 	umull	r2, r3, r3, r2
 80153b6:	095b      	lsrs	r3, r3, #5
 80153b8:	011e      	lsls	r6, r3, #4
 80153ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80153be:	461c      	mov	r4, r3
 80153c0:	f04f 0500 	mov.w	r5, #0
 80153c4:	4622      	mov	r2, r4
 80153c6:	462b      	mov	r3, r5
 80153c8:	1891      	adds	r1, r2, r2
 80153ca:	67b9      	str	r1, [r7, #120]	; 0x78
 80153cc:	415b      	adcs	r3, r3
 80153ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80153d0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80153d4:	1912      	adds	r2, r2, r4
 80153d6:	eb45 0303 	adc.w	r3, r5, r3
 80153da:	f04f 0000 	mov.w	r0, #0
 80153de:	f04f 0100 	mov.w	r1, #0
 80153e2:	00d9      	lsls	r1, r3, #3
 80153e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80153e8:	00d0      	lsls	r0, r2, #3
 80153ea:	4602      	mov	r2, r0
 80153ec:	460b      	mov	r3, r1
 80153ee:	1911      	adds	r1, r2, r4
 80153f0:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80153f4:	416b      	adcs	r3, r5
 80153f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80153fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80153fe:	685b      	ldr	r3, [r3, #4]
 8015400:	461a      	mov	r2, r3
 8015402:	f04f 0300 	mov.w	r3, #0
 8015406:	1891      	adds	r1, r2, r2
 8015408:	6739      	str	r1, [r7, #112]	; 0x70
 801540a:	415b      	adcs	r3, r3
 801540c:	677b      	str	r3, [r7, #116]	; 0x74
 801540e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8015412:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8015416:	f7eb fc37 	bl	8000c88 <__aeabi_uldivmod>
 801541a:	4602      	mov	r2, r0
 801541c:	460b      	mov	r3, r1
 801541e:	4b92      	ldr	r3, [pc, #584]	; (8015668 <UART_SetConfig+0x3dc>)
 8015420:	fba3 1302 	umull	r1, r3, r3, r2
 8015424:	095b      	lsrs	r3, r3, #5
 8015426:	2164      	movs	r1, #100	; 0x64
 8015428:	fb01 f303 	mul.w	r3, r1, r3
 801542c:	1ad3      	subs	r3, r2, r3
 801542e:	00db      	lsls	r3, r3, #3
 8015430:	3332      	adds	r3, #50	; 0x32
 8015432:	4a8d      	ldr	r2, [pc, #564]	; (8015668 <UART_SetConfig+0x3dc>)
 8015434:	fba2 2303 	umull	r2, r3, r2, r3
 8015438:	095b      	lsrs	r3, r3, #5
 801543a:	005b      	lsls	r3, r3, #1
 801543c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8015440:	441e      	add	r6, r3
 8015442:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015446:	4618      	mov	r0, r3
 8015448:	f04f 0100 	mov.w	r1, #0
 801544c:	4602      	mov	r2, r0
 801544e:	460b      	mov	r3, r1
 8015450:	1894      	adds	r4, r2, r2
 8015452:	66bc      	str	r4, [r7, #104]	; 0x68
 8015454:	415b      	adcs	r3, r3
 8015456:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015458:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801545c:	1812      	adds	r2, r2, r0
 801545e:	eb41 0303 	adc.w	r3, r1, r3
 8015462:	f04f 0400 	mov.w	r4, #0
 8015466:	f04f 0500 	mov.w	r5, #0
 801546a:	00dd      	lsls	r5, r3, #3
 801546c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8015470:	00d4      	lsls	r4, r2, #3
 8015472:	4622      	mov	r2, r4
 8015474:	462b      	mov	r3, r5
 8015476:	1814      	adds	r4, r2, r0
 8015478:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 801547c:	414b      	adcs	r3, r1
 801547e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8015482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015486:	685b      	ldr	r3, [r3, #4]
 8015488:	461a      	mov	r2, r3
 801548a:	f04f 0300 	mov.w	r3, #0
 801548e:	1891      	adds	r1, r2, r2
 8015490:	6639      	str	r1, [r7, #96]	; 0x60
 8015492:	415b      	adcs	r3, r3
 8015494:	667b      	str	r3, [r7, #100]	; 0x64
 8015496:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801549a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801549e:	f7eb fbf3 	bl	8000c88 <__aeabi_uldivmod>
 80154a2:	4602      	mov	r2, r0
 80154a4:	460b      	mov	r3, r1
 80154a6:	4b70      	ldr	r3, [pc, #448]	; (8015668 <UART_SetConfig+0x3dc>)
 80154a8:	fba3 1302 	umull	r1, r3, r3, r2
 80154ac:	095b      	lsrs	r3, r3, #5
 80154ae:	2164      	movs	r1, #100	; 0x64
 80154b0:	fb01 f303 	mul.w	r3, r1, r3
 80154b4:	1ad3      	subs	r3, r2, r3
 80154b6:	00db      	lsls	r3, r3, #3
 80154b8:	3332      	adds	r3, #50	; 0x32
 80154ba:	4a6b      	ldr	r2, [pc, #428]	; (8015668 <UART_SetConfig+0x3dc>)
 80154bc:	fba2 2303 	umull	r2, r3, r2, r3
 80154c0:	095b      	lsrs	r3, r3, #5
 80154c2:	f003 0207 	and.w	r2, r3, #7
 80154c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	4432      	add	r2, r6
 80154ce:	609a      	str	r2, [r3, #8]
 80154d0:	e26d      	b.n	80159ae <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80154d2:	f7fd ff63 	bl	801339c <HAL_RCC_GetPCLK1Freq>
 80154d6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80154da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80154de:	461c      	mov	r4, r3
 80154e0:	f04f 0500 	mov.w	r5, #0
 80154e4:	4622      	mov	r2, r4
 80154e6:	462b      	mov	r3, r5
 80154e8:	1891      	adds	r1, r2, r2
 80154ea:	65b9      	str	r1, [r7, #88]	; 0x58
 80154ec:	415b      	adcs	r3, r3
 80154ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80154f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80154f4:	1912      	adds	r2, r2, r4
 80154f6:	eb45 0303 	adc.w	r3, r5, r3
 80154fa:	f04f 0000 	mov.w	r0, #0
 80154fe:	f04f 0100 	mov.w	r1, #0
 8015502:	00d9      	lsls	r1, r3, #3
 8015504:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8015508:	00d0      	lsls	r0, r2, #3
 801550a:	4602      	mov	r2, r0
 801550c:	460b      	mov	r3, r1
 801550e:	1911      	adds	r1, r2, r4
 8015510:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8015514:	416b      	adcs	r3, r5
 8015516:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801551a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801551e:	685b      	ldr	r3, [r3, #4]
 8015520:	461a      	mov	r2, r3
 8015522:	f04f 0300 	mov.w	r3, #0
 8015526:	1891      	adds	r1, r2, r2
 8015528:	6539      	str	r1, [r7, #80]	; 0x50
 801552a:	415b      	adcs	r3, r3
 801552c:	657b      	str	r3, [r7, #84]	; 0x54
 801552e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8015532:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8015536:	f7eb fba7 	bl	8000c88 <__aeabi_uldivmod>
 801553a:	4602      	mov	r2, r0
 801553c:	460b      	mov	r3, r1
 801553e:	4b4a      	ldr	r3, [pc, #296]	; (8015668 <UART_SetConfig+0x3dc>)
 8015540:	fba3 2302 	umull	r2, r3, r3, r2
 8015544:	095b      	lsrs	r3, r3, #5
 8015546:	011e      	lsls	r6, r3, #4
 8015548:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801554c:	461c      	mov	r4, r3
 801554e:	f04f 0500 	mov.w	r5, #0
 8015552:	4622      	mov	r2, r4
 8015554:	462b      	mov	r3, r5
 8015556:	1891      	adds	r1, r2, r2
 8015558:	64b9      	str	r1, [r7, #72]	; 0x48
 801555a:	415b      	adcs	r3, r3
 801555c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801555e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8015562:	1912      	adds	r2, r2, r4
 8015564:	eb45 0303 	adc.w	r3, r5, r3
 8015568:	f04f 0000 	mov.w	r0, #0
 801556c:	f04f 0100 	mov.w	r1, #0
 8015570:	00d9      	lsls	r1, r3, #3
 8015572:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8015576:	00d0      	lsls	r0, r2, #3
 8015578:	4602      	mov	r2, r0
 801557a:	460b      	mov	r3, r1
 801557c:	1911      	adds	r1, r2, r4
 801557e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8015582:	416b      	adcs	r3, r5
 8015584:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8015588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801558c:	685b      	ldr	r3, [r3, #4]
 801558e:	461a      	mov	r2, r3
 8015590:	f04f 0300 	mov.w	r3, #0
 8015594:	1891      	adds	r1, r2, r2
 8015596:	6439      	str	r1, [r7, #64]	; 0x40
 8015598:	415b      	adcs	r3, r3
 801559a:	647b      	str	r3, [r7, #68]	; 0x44
 801559c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80155a0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80155a4:	f7eb fb70 	bl	8000c88 <__aeabi_uldivmod>
 80155a8:	4602      	mov	r2, r0
 80155aa:	460b      	mov	r3, r1
 80155ac:	4b2e      	ldr	r3, [pc, #184]	; (8015668 <UART_SetConfig+0x3dc>)
 80155ae:	fba3 1302 	umull	r1, r3, r3, r2
 80155b2:	095b      	lsrs	r3, r3, #5
 80155b4:	2164      	movs	r1, #100	; 0x64
 80155b6:	fb01 f303 	mul.w	r3, r1, r3
 80155ba:	1ad3      	subs	r3, r2, r3
 80155bc:	00db      	lsls	r3, r3, #3
 80155be:	3332      	adds	r3, #50	; 0x32
 80155c0:	4a29      	ldr	r2, [pc, #164]	; (8015668 <UART_SetConfig+0x3dc>)
 80155c2:	fba2 2303 	umull	r2, r3, r2, r3
 80155c6:	095b      	lsrs	r3, r3, #5
 80155c8:	005b      	lsls	r3, r3, #1
 80155ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80155ce:	441e      	add	r6, r3
 80155d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80155d4:	4618      	mov	r0, r3
 80155d6:	f04f 0100 	mov.w	r1, #0
 80155da:	4602      	mov	r2, r0
 80155dc:	460b      	mov	r3, r1
 80155de:	1894      	adds	r4, r2, r2
 80155e0:	63bc      	str	r4, [r7, #56]	; 0x38
 80155e2:	415b      	adcs	r3, r3
 80155e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80155e6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80155ea:	1812      	adds	r2, r2, r0
 80155ec:	eb41 0303 	adc.w	r3, r1, r3
 80155f0:	f04f 0400 	mov.w	r4, #0
 80155f4:	f04f 0500 	mov.w	r5, #0
 80155f8:	00dd      	lsls	r5, r3, #3
 80155fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80155fe:	00d4      	lsls	r4, r2, #3
 8015600:	4622      	mov	r2, r4
 8015602:	462b      	mov	r3, r5
 8015604:	1814      	adds	r4, r2, r0
 8015606:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 801560a:	414b      	adcs	r3, r1
 801560c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8015610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015614:	685b      	ldr	r3, [r3, #4]
 8015616:	461a      	mov	r2, r3
 8015618:	f04f 0300 	mov.w	r3, #0
 801561c:	1891      	adds	r1, r2, r2
 801561e:	6339      	str	r1, [r7, #48]	; 0x30
 8015620:	415b      	adcs	r3, r3
 8015622:	637b      	str	r3, [r7, #52]	; 0x34
 8015624:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8015628:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801562c:	f7eb fb2c 	bl	8000c88 <__aeabi_uldivmod>
 8015630:	4602      	mov	r2, r0
 8015632:	460b      	mov	r3, r1
 8015634:	4b0c      	ldr	r3, [pc, #48]	; (8015668 <UART_SetConfig+0x3dc>)
 8015636:	fba3 1302 	umull	r1, r3, r3, r2
 801563a:	095b      	lsrs	r3, r3, #5
 801563c:	2164      	movs	r1, #100	; 0x64
 801563e:	fb01 f303 	mul.w	r3, r1, r3
 8015642:	1ad3      	subs	r3, r2, r3
 8015644:	00db      	lsls	r3, r3, #3
 8015646:	3332      	adds	r3, #50	; 0x32
 8015648:	4a07      	ldr	r2, [pc, #28]	; (8015668 <UART_SetConfig+0x3dc>)
 801564a:	fba2 2303 	umull	r2, r3, r2, r3
 801564e:	095b      	lsrs	r3, r3, #5
 8015650:	f003 0207 	and.w	r2, r3, #7
 8015654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	4432      	add	r2, r6
 801565c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 801565e:	e1a6      	b.n	80159ae <UART_SetConfig+0x722>
 8015660:	40011000 	.word	0x40011000
 8015664:	40011400 	.word	0x40011400
 8015668:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801566c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015670:	681a      	ldr	r2, [r3, #0]
 8015672:	4bd1      	ldr	r3, [pc, #836]	; (80159b8 <UART_SetConfig+0x72c>)
 8015674:	429a      	cmp	r2, r3
 8015676:	d006      	beq.n	8015686 <UART_SetConfig+0x3fa>
 8015678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801567c:	681a      	ldr	r2, [r3, #0]
 801567e:	4bcf      	ldr	r3, [pc, #828]	; (80159bc <UART_SetConfig+0x730>)
 8015680:	429a      	cmp	r2, r3
 8015682:	f040 80ca 	bne.w	801581a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8015686:	f7fd fe9d 	bl	80133c4 <HAL_RCC_GetPCLK2Freq>
 801568a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801568e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015692:	461c      	mov	r4, r3
 8015694:	f04f 0500 	mov.w	r5, #0
 8015698:	4622      	mov	r2, r4
 801569a:	462b      	mov	r3, r5
 801569c:	1891      	adds	r1, r2, r2
 801569e:	62b9      	str	r1, [r7, #40]	; 0x28
 80156a0:	415b      	adcs	r3, r3
 80156a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80156a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80156a8:	1912      	adds	r2, r2, r4
 80156aa:	eb45 0303 	adc.w	r3, r5, r3
 80156ae:	f04f 0000 	mov.w	r0, #0
 80156b2:	f04f 0100 	mov.w	r1, #0
 80156b6:	00d9      	lsls	r1, r3, #3
 80156b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80156bc:	00d0      	lsls	r0, r2, #3
 80156be:	4602      	mov	r2, r0
 80156c0:	460b      	mov	r3, r1
 80156c2:	eb12 0a04 	adds.w	sl, r2, r4
 80156c6:	eb43 0b05 	adc.w	fp, r3, r5
 80156ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80156ce:	685b      	ldr	r3, [r3, #4]
 80156d0:	4618      	mov	r0, r3
 80156d2:	f04f 0100 	mov.w	r1, #0
 80156d6:	f04f 0200 	mov.w	r2, #0
 80156da:	f04f 0300 	mov.w	r3, #0
 80156de:	008b      	lsls	r3, r1, #2
 80156e0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80156e4:	0082      	lsls	r2, r0, #2
 80156e6:	4650      	mov	r0, sl
 80156e8:	4659      	mov	r1, fp
 80156ea:	f7eb facd 	bl	8000c88 <__aeabi_uldivmod>
 80156ee:	4602      	mov	r2, r0
 80156f0:	460b      	mov	r3, r1
 80156f2:	4bb3      	ldr	r3, [pc, #716]	; (80159c0 <UART_SetConfig+0x734>)
 80156f4:	fba3 2302 	umull	r2, r3, r3, r2
 80156f8:	095b      	lsrs	r3, r3, #5
 80156fa:	011e      	lsls	r6, r3, #4
 80156fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015700:	4618      	mov	r0, r3
 8015702:	f04f 0100 	mov.w	r1, #0
 8015706:	4602      	mov	r2, r0
 8015708:	460b      	mov	r3, r1
 801570a:	1894      	adds	r4, r2, r2
 801570c:	623c      	str	r4, [r7, #32]
 801570e:	415b      	adcs	r3, r3
 8015710:	627b      	str	r3, [r7, #36]	; 0x24
 8015712:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8015716:	1812      	adds	r2, r2, r0
 8015718:	eb41 0303 	adc.w	r3, r1, r3
 801571c:	f04f 0400 	mov.w	r4, #0
 8015720:	f04f 0500 	mov.w	r5, #0
 8015724:	00dd      	lsls	r5, r3, #3
 8015726:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801572a:	00d4      	lsls	r4, r2, #3
 801572c:	4622      	mov	r2, r4
 801572e:	462b      	mov	r3, r5
 8015730:	1814      	adds	r4, r2, r0
 8015732:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8015736:	414b      	adcs	r3, r1
 8015738:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801573c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015740:	685b      	ldr	r3, [r3, #4]
 8015742:	4618      	mov	r0, r3
 8015744:	f04f 0100 	mov.w	r1, #0
 8015748:	f04f 0200 	mov.w	r2, #0
 801574c:	f04f 0300 	mov.w	r3, #0
 8015750:	008b      	lsls	r3, r1, #2
 8015752:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8015756:	0082      	lsls	r2, r0, #2
 8015758:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 801575c:	f7eb fa94 	bl	8000c88 <__aeabi_uldivmod>
 8015760:	4602      	mov	r2, r0
 8015762:	460b      	mov	r3, r1
 8015764:	4b96      	ldr	r3, [pc, #600]	; (80159c0 <UART_SetConfig+0x734>)
 8015766:	fba3 1302 	umull	r1, r3, r3, r2
 801576a:	095b      	lsrs	r3, r3, #5
 801576c:	2164      	movs	r1, #100	; 0x64
 801576e:	fb01 f303 	mul.w	r3, r1, r3
 8015772:	1ad3      	subs	r3, r2, r3
 8015774:	011b      	lsls	r3, r3, #4
 8015776:	3332      	adds	r3, #50	; 0x32
 8015778:	4a91      	ldr	r2, [pc, #580]	; (80159c0 <UART_SetConfig+0x734>)
 801577a:	fba2 2303 	umull	r2, r3, r2, r3
 801577e:	095b      	lsrs	r3, r3, #5
 8015780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015784:	441e      	add	r6, r3
 8015786:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801578a:	4618      	mov	r0, r3
 801578c:	f04f 0100 	mov.w	r1, #0
 8015790:	4602      	mov	r2, r0
 8015792:	460b      	mov	r3, r1
 8015794:	1894      	adds	r4, r2, r2
 8015796:	61bc      	str	r4, [r7, #24]
 8015798:	415b      	adcs	r3, r3
 801579a:	61fb      	str	r3, [r7, #28]
 801579c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80157a0:	1812      	adds	r2, r2, r0
 80157a2:	eb41 0303 	adc.w	r3, r1, r3
 80157a6:	f04f 0400 	mov.w	r4, #0
 80157aa:	f04f 0500 	mov.w	r5, #0
 80157ae:	00dd      	lsls	r5, r3, #3
 80157b0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80157b4:	00d4      	lsls	r4, r2, #3
 80157b6:	4622      	mov	r2, r4
 80157b8:	462b      	mov	r3, r5
 80157ba:	1814      	adds	r4, r2, r0
 80157bc:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80157c0:	414b      	adcs	r3, r1
 80157c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80157c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80157ca:	685b      	ldr	r3, [r3, #4]
 80157cc:	4618      	mov	r0, r3
 80157ce:	f04f 0100 	mov.w	r1, #0
 80157d2:	f04f 0200 	mov.w	r2, #0
 80157d6:	f04f 0300 	mov.w	r3, #0
 80157da:	008b      	lsls	r3, r1, #2
 80157dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80157e0:	0082      	lsls	r2, r0, #2
 80157e2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80157e6:	f7eb fa4f 	bl	8000c88 <__aeabi_uldivmod>
 80157ea:	4602      	mov	r2, r0
 80157ec:	460b      	mov	r3, r1
 80157ee:	4b74      	ldr	r3, [pc, #464]	; (80159c0 <UART_SetConfig+0x734>)
 80157f0:	fba3 1302 	umull	r1, r3, r3, r2
 80157f4:	095b      	lsrs	r3, r3, #5
 80157f6:	2164      	movs	r1, #100	; 0x64
 80157f8:	fb01 f303 	mul.w	r3, r1, r3
 80157fc:	1ad3      	subs	r3, r2, r3
 80157fe:	011b      	lsls	r3, r3, #4
 8015800:	3332      	adds	r3, #50	; 0x32
 8015802:	4a6f      	ldr	r2, [pc, #444]	; (80159c0 <UART_SetConfig+0x734>)
 8015804:	fba2 2303 	umull	r2, r3, r2, r3
 8015808:	095b      	lsrs	r3, r3, #5
 801580a:	f003 020f 	and.w	r2, r3, #15
 801580e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	4432      	add	r2, r6
 8015816:	609a      	str	r2, [r3, #8]
 8015818:	e0c9      	b.n	80159ae <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 801581a:	f7fd fdbf 	bl	801339c <HAL_RCC_GetPCLK1Freq>
 801581e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8015822:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015826:	461c      	mov	r4, r3
 8015828:	f04f 0500 	mov.w	r5, #0
 801582c:	4622      	mov	r2, r4
 801582e:	462b      	mov	r3, r5
 8015830:	1891      	adds	r1, r2, r2
 8015832:	6139      	str	r1, [r7, #16]
 8015834:	415b      	adcs	r3, r3
 8015836:	617b      	str	r3, [r7, #20]
 8015838:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801583c:	1912      	adds	r2, r2, r4
 801583e:	eb45 0303 	adc.w	r3, r5, r3
 8015842:	f04f 0000 	mov.w	r0, #0
 8015846:	f04f 0100 	mov.w	r1, #0
 801584a:	00d9      	lsls	r1, r3, #3
 801584c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8015850:	00d0      	lsls	r0, r2, #3
 8015852:	4602      	mov	r2, r0
 8015854:	460b      	mov	r3, r1
 8015856:	eb12 0804 	adds.w	r8, r2, r4
 801585a:	eb43 0905 	adc.w	r9, r3, r5
 801585e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015862:	685b      	ldr	r3, [r3, #4]
 8015864:	4618      	mov	r0, r3
 8015866:	f04f 0100 	mov.w	r1, #0
 801586a:	f04f 0200 	mov.w	r2, #0
 801586e:	f04f 0300 	mov.w	r3, #0
 8015872:	008b      	lsls	r3, r1, #2
 8015874:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8015878:	0082      	lsls	r2, r0, #2
 801587a:	4640      	mov	r0, r8
 801587c:	4649      	mov	r1, r9
 801587e:	f7eb fa03 	bl	8000c88 <__aeabi_uldivmod>
 8015882:	4602      	mov	r2, r0
 8015884:	460b      	mov	r3, r1
 8015886:	4b4e      	ldr	r3, [pc, #312]	; (80159c0 <UART_SetConfig+0x734>)
 8015888:	fba3 2302 	umull	r2, r3, r3, r2
 801588c:	095b      	lsrs	r3, r3, #5
 801588e:	011e      	lsls	r6, r3, #4
 8015890:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015894:	4618      	mov	r0, r3
 8015896:	f04f 0100 	mov.w	r1, #0
 801589a:	4602      	mov	r2, r0
 801589c:	460b      	mov	r3, r1
 801589e:	1894      	adds	r4, r2, r2
 80158a0:	60bc      	str	r4, [r7, #8]
 80158a2:	415b      	adcs	r3, r3
 80158a4:	60fb      	str	r3, [r7, #12]
 80158a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80158aa:	1812      	adds	r2, r2, r0
 80158ac:	eb41 0303 	adc.w	r3, r1, r3
 80158b0:	f04f 0400 	mov.w	r4, #0
 80158b4:	f04f 0500 	mov.w	r5, #0
 80158b8:	00dd      	lsls	r5, r3, #3
 80158ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80158be:	00d4      	lsls	r4, r2, #3
 80158c0:	4622      	mov	r2, r4
 80158c2:	462b      	mov	r3, r5
 80158c4:	1814      	adds	r4, r2, r0
 80158c6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80158ca:	414b      	adcs	r3, r1
 80158cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80158d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80158d4:	685b      	ldr	r3, [r3, #4]
 80158d6:	4618      	mov	r0, r3
 80158d8:	f04f 0100 	mov.w	r1, #0
 80158dc:	f04f 0200 	mov.w	r2, #0
 80158e0:	f04f 0300 	mov.w	r3, #0
 80158e4:	008b      	lsls	r3, r1, #2
 80158e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80158ea:	0082      	lsls	r2, r0, #2
 80158ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80158f0:	f7eb f9ca 	bl	8000c88 <__aeabi_uldivmod>
 80158f4:	4602      	mov	r2, r0
 80158f6:	460b      	mov	r3, r1
 80158f8:	4b31      	ldr	r3, [pc, #196]	; (80159c0 <UART_SetConfig+0x734>)
 80158fa:	fba3 1302 	umull	r1, r3, r3, r2
 80158fe:	095b      	lsrs	r3, r3, #5
 8015900:	2164      	movs	r1, #100	; 0x64
 8015902:	fb01 f303 	mul.w	r3, r1, r3
 8015906:	1ad3      	subs	r3, r2, r3
 8015908:	011b      	lsls	r3, r3, #4
 801590a:	3332      	adds	r3, #50	; 0x32
 801590c:	4a2c      	ldr	r2, [pc, #176]	; (80159c0 <UART_SetConfig+0x734>)
 801590e:	fba2 2303 	umull	r2, r3, r2, r3
 8015912:	095b      	lsrs	r3, r3, #5
 8015914:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015918:	441e      	add	r6, r3
 801591a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801591e:	4618      	mov	r0, r3
 8015920:	f04f 0100 	mov.w	r1, #0
 8015924:	4602      	mov	r2, r0
 8015926:	460b      	mov	r3, r1
 8015928:	1894      	adds	r4, r2, r2
 801592a:	603c      	str	r4, [r7, #0]
 801592c:	415b      	adcs	r3, r3
 801592e:	607b      	str	r3, [r7, #4]
 8015930:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015934:	1812      	adds	r2, r2, r0
 8015936:	eb41 0303 	adc.w	r3, r1, r3
 801593a:	f04f 0400 	mov.w	r4, #0
 801593e:	f04f 0500 	mov.w	r5, #0
 8015942:	00dd      	lsls	r5, r3, #3
 8015944:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8015948:	00d4      	lsls	r4, r2, #3
 801594a:	4622      	mov	r2, r4
 801594c:	462b      	mov	r3, r5
 801594e:	1814      	adds	r4, r2, r0
 8015950:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8015954:	414b      	adcs	r3, r1
 8015956:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801595a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801595e:	685b      	ldr	r3, [r3, #4]
 8015960:	4618      	mov	r0, r3
 8015962:	f04f 0100 	mov.w	r1, #0
 8015966:	f04f 0200 	mov.w	r2, #0
 801596a:	f04f 0300 	mov.w	r3, #0
 801596e:	008b      	lsls	r3, r1, #2
 8015970:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8015974:	0082      	lsls	r2, r0, #2
 8015976:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 801597a:	f7eb f985 	bl	8000c88 <__aeabi_uldivmod>
 801597e:	4602      	mov	r2, r0
 8015980:	460b      	mov	r3, r1
 8015982:	4b0f      	ldr	r3, [pc, #60]	; (80159c0 <UART_SetConfig+0x734>)
 8015984:	fba3 1302 	umull	r1, r3, r3, r2
 8015988:	095b      	lsrs	r3, r3, #5
 801598a:	2164      	movs	r1, #100	; 0x64
 801598c:	fb01 f303 	mul.w	r3, r1, r3
 8015990:	1ad3      	subs	r3, r2, r3
 8015992:	011b      	lsls	r3, r3, #4
 8015994:	3332      	adds	r3, #50	; 0x32
 8015996:	4a0a      	ldr	r2, [pc, #40]	; (80159c0 <UART_SetConfig+0x734>)
 8015998:	fba2 2303 	umull	r2, r3, r2, r3
 801599c:	095b      	lsrs	r3, r3, #5
 801599e:	f003 020f 	and.w	r2, r3, #15
 80159a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	4432      	add	r2, r6
 80159aa:	609a      	str	r2, [r3, #8]
}
 80159ac:	e7ff      	b.n	80159ae <UART_SetConfig+0x722>
 80159ae:	bf00      	nop
 80159b0:	37f4      	adds	r7, #244	; 0xf4
 80159b2:	46bd      	mov	sp, r7
 80159b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159b8:	40011000 	.word	0x40011000
 80159bc:	40011400 	.word	0x40011400
 80159c0:	51eb851f 	.word	0x51eb851f

080159c4 <__NVIC_SetPriority>:
{
 80159c4:	b480      	push	{r7}
 80159c6:	b083      	sub	sp, #12
 80159c8:	af00      	add	r7, sp, #0
 80159ca:	4603      	mov	r3, r0
 80159cc:	6039      	str	r1, [r7, #0]
 80159ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80159d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	db0a      	blt.n	80159ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80159d8:	683b      	ldr	r3, [r7, #0]
 80159da:	b2da      	uxtb	r2, r3
 80159dc:	490c      	ldr	r1, [pc, #48]	; (8015a10 <__NVIC_SetPriority+0x4c>)
 80159de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80159e2:	0112      	lsls	r2, r2, #4
 80159e4:	b2d2      	uxtb	r2, r2
 80159e6:	440b      	add	r3, r1
 80159e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80159ec:	e00a      	b.n	8015a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80159ee:	683b      	ldr	r3, [r7, #0]
 80159f0:	b2da      	uxtb	r2, r3
 80159f2:	4908      	ldr	r1, [pc, #32]	; (8015a14 <__NVIC_SetPriority+0x50>)
 80159f4:	79fb      	ldrb	r3, [r7, #7]
 80159f6:	f003 030f 	and.w	r3, r3, #15
 80159fa:	3b04      	subs	r3, #4
 80159fc:	0112      	lsls	r2, r2, #4
 80159fe:	b2d2      	uxtb	r2, r2
 8015a00:	440b      	add	r3, r1
 8015a02:	761a      	strb	r2, [r3, #24]
}
 8015a04:	bf00      	nop
 8015a06:	370c      	adds	r7, #12
 8015a08:	46bd      	mov	sp, r7
 8015a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a0e:	4770      	bx	lr
 8015a10:	e000e100 	.word	0xe000e100
 8015a14:	e000ed00 	.word	0xe000ed00

08015a18 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8015a1c:	4b05      	ldr	r3, [pc, #20]	; (8015a34 <SysTick_Handler+0x1c>)
 8015a1e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8015a20:	f002 fada 	bl	8017fd8 <xTaskGetSchedulerState>
 8015a24:	4603      	mov	r3, r0
 8015a26:	2b01      	cmp	r3, #1
 8015a28:	d001      	beq.n	8015a2e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8015a2a:	f003 f9bd 	bl	8018da8 <xPortSysTickHandler>
  }
}
 8015a2e:	bf00      	nop
 8015a30:	bd80      	pop	{r7, pc}
 8015a32:	bf00      	nop
 8015a34:	e000e010 	.word	0xe000e010

08015a38 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8015a38:	b580      	push	{r7, lr}
 8015a3a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8015a3c:	2100      	movs	r1, #0
 8015a3e:	f06f 0004 	mvn.w	r0, #4
 8015a42:	f7ff ffbf 	bl	80159c4 <__NVIC_SetPriority>
#endif
}
 8015a46:	bf00      	nop
 8015a48:	bd80      	pop	{r7, pc}
	...

08015a4c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8015a4c:	b480      	push	{r7}
 8015a4e:	b083      	sub	sp, #12
 8015a50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015a52:	f3ef 8305 	mrs	r3, IPSR
 8015a56:	603b      	str	r3, [r7, #0]
  return(result);
 8015a58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d003      	beq.n	8015a66 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8015a5e:	f06f 0305 	mvn.w	r3, #5
 8015a62:	607b      	str	r3, [r7, #4]
 8015a64:	e00c      	b.n	8015a80 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8015a66:	4b0a      	ldr	r3, [pc, #40]	; (8015a90 <osKernelInitialize+0x44>)
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d105      	bne.n	8015a7a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8015a6e:	4b08      	ldr	r3, [pc, #32]	; (8015a90 <osKernelInitialize+0x44>)
 8015a70:	2201      	movs	r2, #1
 8015a72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8015a74:	2300      	movs	r3, #0
 8015a76:	607b      	str	r3, [r7, #4]
 8015a78:	e002      	b.n	8015a80 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8015a7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015a7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015a80:	687b      	ldr	r3, [r7, #4]
}
 8015a82:	4618      	mov	r0, r3
 8015a84:	370c      	adds	r7, #12
 8015a86:	46bd      	mov	sp, r7
 8015a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a8c:	4770      	bx	lr
 8015a8e:	bf00      	nop
 8015a90:	20001138 	.word	0x20001138

08015a94 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8015a94:	b580      	push	{r7, lr}
 8015a96:	b082      	sub	sp, #8
 8015a98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015a9a:	f3ef 8305 	mrs	r3, IPSR
 8015a9e:	603b      	str	r3, [r7, #0]
  return(result);
 8015aa0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d003      	beq.n	8015aae <osKernelStart+0x1a>
    stat = osErrorISR;
 8015aa6:	f06f 0305 	mvn.w	r3, #5
 8015aaa:	607b      	str	r3, [r7, #4]
 8015aac:	e010      	b.n	8015ad0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8015aae:	4b0b      	ldr	r3, [pc, #44]	; (8015adc <osKernelStart+0x48>)
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	2b01      	cmp	r3, #1
 8015ab4:	d109      	bne.n	8015aca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8015ab6:	f7ff ffbf 	bl	8015a38 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8015aba:	4b08      	ldr	r3, [pc, #32]	; (8015adc <osKernelStart+0x48>)
 8015abc:	2202      	movs	r2, #2
 8015abe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8015ac0:	f001 fe42 	bl	8017748 <vTaskStartScheduler>
      stat = osOK;
 8015ac4:	2300      	movs	r3, #0
 8015ac6:	607b      	str	r3, [r7, #4]
 8015ac8:	e002      	b.n	8015ad0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8015aca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015ace:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015ad0:	687b      	ldr	r3, [r7, #4]
}
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	3708      	adds	r7, #8
 8015ad6:	46bd      	mov	sp, r7
 8015ad8:	bd80      	pop	{r7, pc}
 8015ada:	bf00      	nop
 8015adc:	20001138 	.word	0x20001138

08015ae0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8015ae0:	b580      	push	{r7, lr}
 8015ae2:	b08e      	sub	sp, #56	; 0x38
 8015ae4:	af04      	add	r7, sp, #16
 8015ae6:	60f8      	str	r0, [r7, #12]
 8015ae8:	60b9      	str	r1, [r7, #8]
 8015aea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8015aec:	2300      	movs	r3, #0
 8015aee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015af0:	f3ef 8305 	mrs	r3, IPSR
 8015af4:	617b      	str	r3, [r7, #20]
  return(result);
 8015af6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d17e      	bne.n	8015bfa <osThreadNew+0x11a>
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d07b      	beq.n	8015bfa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8015b02:	2380      	movs	r3, #128	; 0x80
 8015b04:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8015b06:	2318      	movs	r3, #24
 8015b08:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8015b0a:	2300      	movs	r3, #0
 8015b0c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8015b0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015b12:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d045      	beq.n	8015ba6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d002      	beq.n	8015b28 <osThreadNew+0x48>
        name = attr->name;
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	699b      	ldr	r3, [r3, #24]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d002      	beq.n	8015b36 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	699b      	ldr	r3, [r3, #24]
 8015b34:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8015b36:	69fb      	ldr	r3, [r7, #28]
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d008      	beq.n	8015b4e <osThreadNew+0x6e>
 8015b3c:	69fb      	ldr	r3, [r7, #28]
 8015b3e:	2b38      	cmp	r3, #56	; 0x38
 8015b40:	d805      	bhi.n	8015b4e <osThreadNew+0x6e>
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	685b      	ldr	r3, [r3, #4]
 8015b46:	f003 0301 	and.w	r3, r3, #1
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d001      	beq.n	8015b52 <osThreadNew+0x72>
        return (NULL);
 8015b4e:	2300      	movs	r3, #0
 8015b50:	e054      	b.n	8015bfc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	695b      	ldr	r3, [r3, #20]
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d003      	beq.n	8015b62 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	695b      	ldr	r3, [r3, #20]
 8015b5e:	089b      	lsrs	r3, r3, #2
 8015b60:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	689b      	ldr	r3, [r3, #8]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d00e      	beq.n	8015b88 <osThreadNew+0xa8>
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	68db      	ldr	r3, [r3, #12]
 8015b6e:	2b5b      	cmp	r3, #91	; 0x5b
 8015b70:	d90a      	bls.n	8015b88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d006      	beq.n	8015b88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	695b      	ldr	r3, [r3, #20]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d002      	beq.n	8015b88 <osThreadNew+0xa8>
        mem = 1;
 8015b82:	2301      	movs	r3, #1
 8015b84:	61bb      	str	r3, [r7, #24]
 8015b86:	e010      	b.n	8015baa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	689b      	ldr	r3, [r3, #8]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d10c      	bne.n	8015baa <osThreadNew+0xca>
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	68db      	ldr	r3, [r3, #12]
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d108      	bne.n	8015baa <osThreadNew+0xca>
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	691b      	ldr	r3, [r3, #16]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d104      	bne.n	8015baa <osThreadNew+0xca>
          mem = 0;
 8015ba0:	2300      	movs	r3, #0
 8015ba2:	61bb      	str	r3, [r7, #24]
 8015ba4:	e001      	b.n	8015baa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8015ba6:	2300      	movs	r3, #0
 8015ba8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8015baa:	69bb      	ldr	r3, [r7, #24]
 8015bac:	2b01      	cmp	r3, #1
 8015bae:	d110      	bne.n	8015bd2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8015bb4:	687a      	ldr	r2, [r7, #4]
 8015bb6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015bb8:	9202      	str	r2, [sp, #8]
 8015bba:	9301      	str	r3, [sp, #4]
 8015bbc:	69fb      	ldr	r3, [r7, #28]
 8015bbe:	9300      	str	r3, [sp, #0]
 8015bc0:	68bb      	ldr	r3, [r7, #8]
 8015bc2:	6a3a      	ldr	r2, [r7, #32]
 8015bc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015bc6:	68f8      	ldr	r0, [r7, #12]
 8015bc8:	f001 fa9a 	bl	8017100 <xTaskCreateStatic>
 8015bcc:	4603      	mov	r3, r0
 8015bce:	613b      	str	r3, [r7, #16]
 8015bd0:	e013      	b.n	8015bfa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8015bd2:	69bb      	ldr	r3, [r7, #24]
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d110      	bne.n	8015bfa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8015bd8:	6a3b      	ldr	r3, [r7, #32]
 8015bda:	b29a      	uxth	r2, r3
 8015bdc:	f107 0310 	add.w	r3, r7, #16
 8015be0:	9301      	str	r3, [sp, #4]
 8015be2:	69fb      	ldr	r3, [r7, #28]
 8015be4:	9300      	str	r3, [sp, #0]
 8015be6:	68bb      	ldr	r3, [r7, #8]
 8015be8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015bea:	68f8      	ldr	r0, [r7, #12]
 8015bec:	f001 fae5 	bl	80171ba <xTaskCreate>
 8015bf0:	4603      	mov	r3, r0
 8015bf2:	2b01      	cmp	r3, #1
 8015bf4:	d001      	beq.n	8015bfa <osThreadNew+0x11a>
            hTask = NULL;
 8015bf6:	2300      	movs	r3, #0
 8015bf8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8015bfa:	693b      	ldr	r3, [r7, #16]
}
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	3728      	adds	r7, #40	; 0x28
 8015c00:	46bd      	mov	sp, r7
 8015c02:	bd80      	pop	{r7, pc}

08015c04 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8015c04:	b580      	push	{r7, lr}
 8015c06:	b086      	sub	sp, #24
 8015c08:	af00      	add	r7, sp, #0
 8015c0a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015c10:	f3ef 8305 	mrs	r3, IPSR
 8015c14:	60fb      	str	r3, [r7, #12]
  return(result);
 8015c16:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d003      	beq.n	8015c24 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8015c1c:	f06f 0305 	mvn.w	r3, #5
 8015c20:	617b      	str	r3, [r7, #20]
 8015c22:	e00b      	b.n	8015c3c <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8015c24:	693b      	ldr	r3, [r7, #16]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d103      	bne.n	8015c32 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8015c2a:	f06f 0303 	mvn.w	r3, #3
 8015c2e:	617b      	str	r3, [r7, #20]
 8015c30:	e004      	b.n	8015c3c <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8015c32:	2300      	movs	r3, #0
 8015c34:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8015c36:	6938      	ldr	r0, [r7, #16]
 8015c38:	f001 fd10 	bl	801765c <vTaskSuspend>
  }

  return (stat);
 8015c3c:	697b      	ldr	r3, [r7, #20]
}
 8015c3e:	4618      	mov	r0, r3
 8015c40:	3718      	adds	r7, #24
 8015c42:	46bd      	mov	sp, r7
 8015c44:	bd80      	pop	{r7, pc}

08015c46 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8015c46:	b580      	push	{r7, lr}
 8015c48:	b086      	sub	sp, #24
 8015c4a:	af00      	add	r7, sp, #0
 8015c4c:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015c52:	f3ef 8305 	mrs	r3, IPSR
 8015c56:	60bb      	str	r3, [r7, #8]
  return(result);
 8015c58:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d003      	beq.n	8015c66 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8015c5e:	f06f 0305 	mvn.w	r3, #5
 8015c62:	617b      	str	r3, [r7, #20]
 8015c64:	e017      	b.n	8015c96 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8015c66:	693b      	ldr	r3, [r7, #16]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d103      	bne.n	8015c74 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8015c6c:	f06f 0303 	mvn.w	r3, #3
 8015c70:	617b      	str	r3, [r7, #20]
 8015c72:	e010      	b.n	8015c96 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8015c74:	6938      	ldr	r0, [r7, #16]
 8015c76:	f001 fc8b 	bl	8017590 <eTaskGetState>
 8015c7a:	4603      	mov	r3, r0
 8015c7c:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8015c7e:	7bfb      	ldrb	r3, [r7, #15]
 8015c80:	2b04      	cmp	r3, #4
 8015c82:	d005      	beq.n	8015c90 <osThreadTerminate+0x4a>
      stat = osOK;
 8015c84:	2300      	movs	r3, #0
 8015c86:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8015c88:	6938      	ldr	r0, [r7, #16]
 8015c8a:	f001 fbdb 	bl	8017444 <vTaskDelete>
 8015c8e:	e002      	b.n	8015c96 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8015c90:	f06f 0302 	mvn.w	r3, #2
 8015c94:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8015c96:	697b      	ldr	r3, [r7, #20]
}
 8015c98:	4618      	mov	r0, r3
 8015c9a:	3718      	adds	r7, #24
 8015c9c:	46bd      	mov	sp, r7
 8015c9e:	bd80      	pop	{r7, pc}

08015ca0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8015ca0:	b580      	push	{r7, lr}
 8015ca2:	b084      	sub	sp, #16
 8015ca4:	af00      	add	r7, sp, #0
 8015ca6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015ca8:	f3ef 8305 	mrs	r3, IPSR
 8015cac:	60bb      	str	r3, [r7, #8]
  return(result);
 8015cae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d003      	beq.n	8015cbc <osDelay+0x1c>
    stat = osErrorISR;
 8015cb4:	f06f 0305 	mvn.w	r3, #5
 8015cb8:	60fb      	str	r3, [r7, #12]
 8015cba:	e007      	b.n	8015ccc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d002      	beq.n	8015ccc <osDelay+0x2c>
      vTaskDelay(ticks);
 8015cc6:	6878      	ldr	r0, [r7, #4]
 8015cc8:	f001 fc2e 	bl	8017528 <vTaskDelay>
    }
  }

  return (stat);
 8015ccc:	68fb      	ldr	r3, [r7, #12]
}
 8015cce:	4618      	mov	r0, r3
 8015cd0:	3710      	adds	r7, #16
 8015cd2:	46bd      	mov	sp, r7
 8015cd4:	bd80      	pop	{r7, pc}

08015cd6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8015cd6:	b580      	push	{r7, lr}
 8015cd8:	b08a      	sub	sp, #40	; 0x28
 8015cda:	af02      	add	r7, sp, #8
 8015cdc:	60f8      	str	r0, [r7, #12]
 8015cde:	60b9      	str	r1, [r7, #8]
 8015ce0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015ce6:	f3ef 8305 	mrs	r3, IPSR
 8015cea:	613b      	str	r3, [r7, #16]
  return(result);
 8015cec:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d175      	bne.n	8015dde <osSemaphoreNew+0x108>
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d072      	beq.n	8015dde <osSemaphoreNew+0x108>
 8015cf8:	68ba      	ldr	r2, [r7, #8]
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	429a      	cmp	r2, r3
 8015cfe:	d86e      	bhi.n	8015dde <osSemaphoreNew+0x108>
    mem = -1;
 8015d00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d04:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d015      	beq.n	8015d38 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	689b      	ldr	r3, [r3, #8]
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d006      	beq.n	8015d22 <osSemaphoreNew+0x4c>
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	68db      	ldr	r3, [r3, #12]
 8015d18:	2b4f      	cmp	r3, #79	; 0x4f
 8015d1a:	d902      	bls.n	8015d22 <osSemaphoreNew+0x4c>
        mem = 1;
 8015d1c:	2301      	movs	r3, #1
 8015d1e:	61bb      	str	r3, [r7, #24]
 8015d20:	e00c      	b.n	8015d3c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	689b      	ldr	r3, [r3, #8]
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d108      	bne.n	8015d3c <osSemaphoreNew+0x66>
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	68db      	ldr	r3, [r3, #12]
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d104      	bne.n	8015d3c <osSemaphoreNew+0x66>
          mem = 0;
 8015d32:	2300      	movs	r3, #0
 8015d34:	61bb      	str	r3, [r7, #24]
 8015d36:	e001      	b.n	8015d3c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8015d38:	2300      	movs	r3, #0
 8015d3a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8015d3c:	69bb      	ldr	r3, [r7, #24]
 8015d3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015d42:	d04c      	beq.n	8015dde <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8015d44:	68fb      	ldr	r3, [r7, #12]
 8015d46:	2b01      	cmp	r3, #1
 8015d48:	d128      	bne.n	8015d9c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8015d4a:	69bb      	ldr	r3, [r7, #24]
 8015d4c:	2b01      	cmp	r3, #1
 8015d4e:	d10a      	bne.n	8015d66 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	689b      	ldr	r3, [r3, #8]
 8015d54:	2203      	movs	r2, #3
 8015d56:	9200      	str	r2, [sp, #0]
 8015d58:	2200      	movs	r2, #0
 8015d5a:	2100      	movs	r1, #0
 8015d5c:	2001      	movs	r0, #1
 8015d5e:	f000 fa29 	bl	80161b4 <xQueueGenericCreateStatic>
 8015d62:	61f8      	str	r0, [r7, #28]
 8015d64:	e005      	b.n	8015d72 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8015d66:	2203      	movs	r2, #3
 8015d68:	2100      	movs	r1, #0
 8015d6a:	2001      	movs	r0, #1
 8015d6c:	f000 fa9a 	bl	80162a4 <xQueueGenericCreate>
 8015d70:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8015d72:	69fb      	ldr	r3, [r7, #28]
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d022      	beq.n	8015dbe <osSemaphoreNew+0xe8>
 8015d78:	68bb      	ldr	r3, [r7, #8]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d01f      	beq.n	8015dbe <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015d7e:	2300      	movs	r3, #0
 8015d80:	2200      	movs	r2, #0
 8015d82:	2100      	movs	r1, #0
 8015d84:	69f8      	ldr	r0, [r7, #28]
 8015d86:	f000 fb55 	bl	8016434 <xQueueGenericSend>
 8015d8a:	4603      	mov	r3, r0
 8015d8c:	2b01      	cmp	r3, #1
 8015d8e:	d016      	beq.n	8015dbe <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8015d90:	69f8      	ldr	r0, [r7, #28]
 8015d92:	f000 ffe1 	bl	8016d58 <vQueueDelete>
            hSemaphore = NULL;
 8015d96:	2300      	movs	r3, #0
 8015d98:	61fb      	str	r3, [r7, #28]
 8015d9a:	e010      	b.n	8015dbe <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8015d9c:	69bb      	ldr	r3, [r7, #24]
 8015d9e:	2b01      	cmp	r3, #1
 8015da0:	d108      	bne.n	8015db4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	689b      	ldr	r3, [r3, #8]
 8015da6:	461a      	mov	r2, r3
 8015da8:	68b9      	ldr	r1, [r7, #8]
 8015daa:	68f8      	ldr	r0, [r7, #12]
 8015dac:	f000 fad7 	bl	801635e <xQueueCreateCountingSemaphoreStatic>
 8015db0:	61f8      	str	r0, [r7, #28]
 8015db2:	e004      	b.n	8015dbe <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8015db4:	68b9      	ldr	r1, [r7, #8]
 8015db6:	68f8      	ldr	r0, [r7, #12]
 8015db8:	f000 fb08 	bl	80163cc <xQueueCreateCountingSemaphore>
 8015dbc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8015dbe:	69fb      	ldr	r3, [r7, #28]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d00c      	beq.n	8015dde <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d003      	beq.n	8015dd2 <osSemaphoreNew+0xfc>
          name = attr->name;
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	681b      	ldr	r3, [r3, #0]
 8015dce:	617b      	str	r3, [r7, #20]
 8015dd0:	e001      	b.n	8015dd6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8015dd2:	2300      	movs	r3, #0
 8015dd4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8015dd6:	6979      	ldr	r1, [r7, #20]
 8015dd8:	69f8      	ldr	r0, [r7, #28]
 8015dda:	f001 f909 	bl	8016ff0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8015dde:	69fb      	ldr	r3, [r7, #28]
}
 8015de0:	4618      	mov	r0, r3
 8015de2:	3720      	adds	r7, #32
 8015de4:	46bd      	mov	sp, r7
 8015de6:	bd80      	pop	{r7, pc}

08015de8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8015de8:	b580      	push	{r7, lr}
 8015dea:	b086      	sub	sp, #24
 8015dec:	af00      	add	r7, sp, #0
 8015dee:	6078      	str	r0, [r7, #4]
 8015df0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8015df6:	2300      	movs	r3, #0
 8015df8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8015dfa:	693b      	ldr	r3, [r7, #16]
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d103      	bne.n	8015e08 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8015e00:	f06f 0303 	mvn.w	r3, #3
 8015e04:	617b      	str	r3, [r7, #20]
 8015e06:	e039      	b.n	8015e7c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015e08:	f3ef 8305 	mrs	r3, IPSR
 8015e0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8015e0e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d022      	beq.n	8015e5a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8015e14:	683b      	ldr	r3, [r7, #0]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d003      	beq.n	8015e22 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8015e1a:	f06f 0303 	mvn.w	r3, #3
 8015e1e:	617b      	str	r3, [r7, #20]
 8015e20:	e02c      	b.n	8015e7c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8015e22:	2300      	movs	r3, #0
 8015e24:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8015e26:	f107 0308 	add.w	r3, r7, #8
 8015e2a:	461a      	mov	r2, r3
 8015e2c:	2100      	movs	r1, #0
 8015e2e:	6938      	ldr	r0, [r7, #16]
 8015e30:	f000 ff12 	bl	8016c58 <xQueueReceiveFromISR>
 8015e34:	4603      	mov	r3, r0
 8015e36:	2b01      	cmp	r3, #1
 8015e38:	d003      	beq.n	8015e42 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8015e3a:	f06f 0302 	mvn.w	r3, #2
 8015e3e:	617b      	str	r3, [r7, #20]
 8015e40:	e01c      	b.n	8015e7c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8015e42:	68bb      	ldr	r3, [r7, #8]
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d019      	beq.n	8015e7c <osSemaphoreAcquire+0x94>
 8015e48:	4b0f      	ldr	r3, [pc, #60]	; (8015e88 <osSemaphoreAcquire+0xa0>)
 8015e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e4e:	601a      	str	r2, [r3, #0]
 8015e50:	f3bf 8f4f 	dsb	sy
 8015e54:	f3bf 8f6f 	isb	sy
 8015e58:	e010      	b.n	8015e7c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8015e5a:	6839      	ldr	r1, [r7, #0]
 8015e5c:	6938      	ldr	r0, [r7, #16]
 8015e5e:	f000 fdef 	bl	8016a40 <xQueueSemaphoreTake>
 8015e62:	4603      	mov	r3, r0
 8015e64:	2b01      	cmp	r3, #1
 8015e66:	d009      	beq.n	8015e7c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8015e68:	683b      	ldr	r3, [r7, #0]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d003      	beq.n	8015e76 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8015e6e:	f06f 0301 	mvn.w	r3, #1
 8015e72:	617b      	str	r3, [r7, #20]
 8015e74:	e002      	b.n	8015e7c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8015e76:	f06f 0302 	mvn.w	r3, #2
 8015e7a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8015e7c:	697b      	ldr	r3, [r7, #20]
}
 8015e7e:	4618      	mov	r0, r3
 8015e80:	3718      	adds	r7, #24
 8015e82:	46bd      	mov	sp, r7
 8015e84:	bd80      	pop	{r7, pc}
 8015e86:	bf00      	nop
 8015e88:	e000ed04 	.word	0xe000ed04

08015e8c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8015e8c:	b580      	push	{r7, lr}
 8015e8e:	b086      	sub	sp, #24
 8015e90:	af00      	add	r7, sp, #0
 8015e92:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8015e98:	2300      	movs	r3, #0
 8015e9a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8015e9c:	693b      	ldr	r3, [r7, #16]
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d103      	bne.n	8015eaa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8015ea2:	f06f 0303 	mvn.w	r3, #3
 8015ea6:	617b      	str	r3, [r7, #20]
 8015ea8:	e02c      	b.n	8015f04 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015eaa:	f3ef 8305 	mrs	r3, IPSR
 8015eae:	60fb      	str	r3, [r7, #12]
  return(result);
 8015eb0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d01a      	beq.n	8015eec <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8015eb6:	2300      	movs	r3, #0
 8015eb8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8015eba:	f107 0308 	add.w	r3, r7, #8
 8015ebe:	4619      	mov	r1, r3
 8015ec0:	6938      	ldr	r0, [r7, #16]
 8015ec2:	f000 fc50 	bl	8016766 <xQueueGiveFromISR>
 8015ec6:	4603      	mov	r3, r0
 8015ec8:	2b01      	cmp	r3, #1
 8015eca:	d003      	beq.n	8015ed4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8015ecc:	f06f 0302 	mvn.w	r3, #2
 8015ed0:	617b      	str	r3, [r7, #20]
 8015ed2:	e017      	b.n	8015f04 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8015ed4:	68bb      	ldr	r3, [r7, #8]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d014      	beq.n	8015f04 <osSemaphoreRelease+0x78>
 8015eda:	4b0d      	ldr	r3, [pc, #52]	; (8015f10 <osSemaphoreRelease+0x84>)
 8015edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ee0:	601a      	str	r2, [r3, #0]
 8015ee2:	f3bf 8f4f 	dsb	sy
 8015ee6:	f3bf 8f6f 	isb	sy
 8015eea:	e00b      	b.n	8015f04 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015eec:	2300      	movs	r3, #0
 8015eee:	2200      	movs	r2, #0
 8015ef0:	2100      	movs	r1, #0
 8015ef2:	6938      	ldr	r0, [r7, #16]
 8015ef4:	f000 fa9e 	bl	8016434 <xQueueGenericSend>
 8015ef8:	4603      	mov	r3, r0
 8015efa:	2b01      	cmp	r3, #1
 8015efc:	d002      	beq.n	8015f04 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8015efe:	f06f 0302 	mvn.w	r3, #2
 8015f02:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8015f04:	697b      	ldr	r3, [r7, #20]
}
 8015f06:	4618      	mov	r0, r3
 8015f08:	3718      	adds	r7, #24
 8015f0a:	46bd      	mov	sp, r7
 8015f0c:	bd80      	pop	{r7, pc}
 8015f0e:	bf00      	nop
 8015f10:	e000ed04 	.word	0xe000ed04

08015f14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8015f14:	b480      	push	{r7}
 8015f16:	b085      	sub	sp, #20
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	60f8      	str	r0, [r7, #12]
 8015f1c:	60b9      	str	r1, [r7, #8]
 8015f1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	4a07      	ldr	r2, [pc, #28]	; (8015f40 <vApplicationGetIdleTaskMemory+0x2c>)
 8015f24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8015f26:	68bb      	ldr	r3, [r7, #8]
 8015f28:	4a06      	ldr	r2, [pc, #24]	; (8015f44 <vApplicationGetIdleTaskMemory+0x30>)
 8015f2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	2280      	movs	r2, #128	; 0x80
 8015f30:	601a      	str	r2, [r3, #0]
}
 8015f32:	bf00      	nop
 8015f34:	3714      	adds	r7, #20
 8015f36:	46bd      	mov	sp, r7
 8015f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f3c:	4770      	bx	lr
 8015f3e:	bf00      	nop
 8015f40:	2000113c 	.word	0x2000113c
 8015f44:	20001198 	.word	0x20001198

08015f48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8015f48:	b480      	push	{r7}
 8015f4a:	b085      	sub	sp, #20
 8015f4c:	af00      	add	r7, sp, #0
 8015f4e:	60f8      	str	r0, [r7, #12]
 8015f50:	60b9      	str	r1, [r7, #8]
 8015f52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	4a07      	ldr	r2, [pc, #28]	; (8015f74 <vApplicationGetTimerTaskMemory+0x2c>)
 8015f58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8015f5a:	68bb      	ldr	r3, [r7, #8]
 8015f5c:	4a06      	ldr	r2, [pc, #24]	; (8015f78 <vApplicationGetTimerTaskMemory+0x30>)
 8015f5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015f66:	601a      	str	r2, [r3, #0]
}
 8015f68:	bf00      	nop
 8015f6a:	3714      	adds	r7, #20
 8015f6c:	46bd      	mov	sp, r7
 8015f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f72:	4770      	bx	lr
 8015f74:	20001398 	.word	0x20001398
 8015f78:	200013f4 	.word	0x200013f4

08015f7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015f7c:	b480      	push	{r7}
 8015f7e:	b083      	sub	sp, #12
 8015f80:	af00      	add	r7, sp, #0
 8015f82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	f103 0208 	add.w	r2, r3, #8
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015f94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	f103 0208 	add.w	r2, r3, #8
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	f103 0208 	add.w	r2, r3, #8
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	2200      	movs	r2, #0
 8015fae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015fb0:	bf00      	nop
 8015fb2:	370c      	adds	r7, #12
 8015fb4:	46bd      	mov	sp, r7
 8015fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fba:	4770      	bx	lr

08015fbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015fbc:	b480      	push	{r7}
 8015fbe:	b083      	sub	sp, #12
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	2200      	movs	r2, #0
 8015fc8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8015fca:	bf00      	nop
 8015fcc:	370c      	adds	r7, #12
 8015fce:	46bd      	mov	sp, r7
 8015fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd4:	4770      	bx	lr

08015fd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015fd6:	b480      	push	{r7}
 8015fd8:	b085      	sub	sp, #20
 8015fda:	af00      	add	r7, sp, #0
 8015fdc:	6078      	str	r0, [r7, #4]
 8015fde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	685b      	ldr	r3, [r3, #4]
 8015fe4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015fe6:	683b      	ldr	r3, [r7, #0]
 8015fe8:	68fa      	ldr	r2, [r7, #12]
 8015fea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	689a      	ldr	r2, [r3, #8]
 8015ff0:	683b      	ldr	r3, [r7, #0]
 8015ff2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	689b      	ldr	r3, [r3, #8]
 8015ff8:	683a      	ldr	r2, [r7, #0]
 8015ffa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	683a      	ldr	r2, [r7, #0]
 8016000:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8016002:	683b      	ldr	r3, [r7, #0]
 8016004:	687a      	ldr	r2, [r7, #4]
 8016006:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	1c5a      	adds	r2, r3, #1
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	601a      	str	r2, [r3, #0]
}
 8016012:	bf00      	nop
 8016014:	3714      	adds	r7, #20
 8016016:	46bd      	mov	sp, r7
 8016018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801601c:	4770      	bx	lr

0801601e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801601e:	b480      	push	{r7}
 8016020:	b085      	sub	sp, #20
 8016022:	af00      	add	r7, sp, #0
 8016024:	6078      	str	r0, [r7, #4]
 8016026:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016028:	683b      	ldr	r3, [r7, #0]
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801602e:	68bb      	ldr	r3, [r7, #8]
 8016030:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016034:	d103      	bne.n	801603e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	691b      	ldr	r3, [r3, #16]
 801603a:	60fb      	str	r3, [r7, #12]
 801603c:	e00c      	b.n	8016058 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	3308      	adds	r3, #8
 8016042:	60fb      	str	r3, [r7, #12]
 8016044:	e002      	b.n	801604c <vListInsert+0x2e>
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	685b      	ldr	r3, [r3, #4]
 801604a:	60fb      	str	r3, [r7, #12]
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	685b      	ldr	r3, [r3, #4]
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	68ba      	ldr	r2, [r7, #8]
 8016054:	429a      	cmp	r2, r3
 8016056:	d2f6      	bcs.n	8016046 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	685a      	ldr	r2, [r3, #4]
 801605c:	683b      	ldr	r3, [r7, #0]
 801605e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016060:	683b      	ldr	r3, [r7, #0]
 8016062:	685b      	ldr	r3, [r3, #4]
 8016064:	683a      	ldr	r2, [r7, #0]
 8016066:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8016068:	683b      	ldr	r3, [r7, #0]
 801606a:	68fa      	ldr	r2, [r7, #12]
 801606c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	683a      	ldr	r2, [r7, #0]
 8016072:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8016074:	683b      	ldr	r3, [r7, #0]
 8016076:	687a      	ldr	r2, [r7, #4]
 8016078:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	1c5a      	adds	r2, r3, #1
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	601a      	str	r2, [r3, #0]
}
 8016084:	bf00      	nop
 8016086:	3714      	adds	r7, #20
 8016088:	46bd      	mov	sp, r7
 801608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801608e:	4770      	bx	lr

08016090 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8016090:	b480      	push	{r7}
 8016092:	b085      	sub	sp, #20
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	691b      	ldr	r3, [r3, #16]
 801609c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	685b      	ldr	r3, [r3, #4]
 80160a2:	687a      	ldr	r2, [r7, #4]
 80160a4:	6892      	ldr	r2, [r2, #8]
 80160a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	689b      	ldr	r3, [r3, #8]
 80160ac:	687a      	ldr	r2, [r7, #4]
 80160ae:	6852      	ldr	r2, [r2, #4]
 80160b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	685b      	ldr	r3, [r3, #4]
 80160b6:	687a      	ldr	r2, [r7, #4]
 80160b8:	429a      	cmp	r2, r3
 80160ba:	d103      	bne.n	80160c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	689a      	ldr	r2, [r3, #8]
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	2200      	movs	r2, #0
 80160c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	1e5a      	subs	r2, r3, #1
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	681b      	ldr	r3, [r3, #0]
}
 80160d8:	4618      	mov	r0, r3
 80160da:	3714      	adds	r7, #20
 80160dc:	46bd      	mov	sp, r7
 80160de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160e2:	4770      	bx	lr

080160e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80160e4:	b580      	push	{r7, lr}
 80160e6:	b084      	sub	sp, #16
 80160e8:	af00      	add	r7, sp, #0
 80160ea:	6078      	str	r0, [r7, #4]
 80160ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d10a      	bne.n	801610e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80160f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160fc:	f383 8811 	msr	BASEPRI, r3
 8016100:	f3bf 8f6f 	isb	sy
 8016104:	f3bf 8f4f 	dsb	sy
 8016108:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801610a:	bf00      	nop
 801610c:	e7fe      	b.n	801610c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801610e:	f002 fdb9 	bl	8018c84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	681a      	ldr	r2, [r3, #0]
 8016116:	68fb      	ldr	r3, [r7, #12]
 8016118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801611a:	68f9      	ldr	r1, [r7, #12]
 801611c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801611e:	fb01 f303 	mul.w	r3, r1, r3
 8016122:	441a      	add	r2, r3
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	2200      	movs	r2, #0
 801612c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	681a      	ldr	r2, [r3, #0]
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	681a      	ldr	r2, [r3, #0]
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801613e:	3b01      	subs	r3, #1
 8016140:	68f9      	ldr	r1, [r7, #12]
 8016142:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016144:	fb01 f303 	mul.w	r3, r1, r3
 8016148:	441a      	add	r2, r3
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	22ff      	movs	r2, #255	; 0xff
 8016152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	22ff      	movs	r2, #255	; 0xff
 801615a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801615e:	683b      	ldr	r3, [r7, #0]
 8016160:	2b00      	cmp	r3, #0
 8016162:	d114      	bne.n	801618e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	691b      	ldr	r3, [r3, #16]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d01a      	beq.n	80161a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	3310      	adds	r3, #16
 8016170:	4618      	mov	r0, r3
 8016172:	f001 fd73 	bl	8017c5c <xTaskRemoveFromEventList>
 8016176:	4603      	mov	r3, r0
 8016178:	2b00      	cmp	r3, #0
 801617a:	d012      	beq.n	80161a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801617c:	4b0c      	ldr	r3, [pc, #48]	; (80161b0 <xQueueGenericReset+0xcc>)
 801617e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016182:	601a      	str	r2, [r3, #0]
 8016184:	f3bf 8f4f 	dsb	sy
 8016188:	f3bf 8f6f 	isb	sy
 801618c:	e009      	b.n	80161a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	3310      	adds	r3, #16
 8016192:	4618      	mov	r0, r3
 8016194:	f7ff fef2 	bl	8015f7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	3324      	adds	r3, #36	; 0x24
 801619c:	4618      	mov	r0, r3
 801619e:	f7ff feed 	bl	8015f7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80161a2:	f002 fd9f 	bl	8018ce4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80161a6:	2301      	movs	r3, #1
}
 80161a8:	4618      	mov	r0, r3
 80161aa:	3710      	adds	r7, #16
 80161ac:	46bd      	mov	sp, r7
 80161ae:	bd80      	pop	{r7, pc}
 80161b0:	e000ed04 	.word	0xe000ed04

080161b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80161b4:	b580      	push	{r7, lr}
 80161b6:	b08e      	sub	sp, #56	; 0x38
 80161b8:	af02      	add	r7, sp, #8
 80161ba:	60f8      	str	r0, [r7, #12]
 80161bc:	60b9      	str	r1, [r7, #8]
 80161be:	607a      	str	r2, [r7, #4]
 80161c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d10a      	bne.n	80161de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80161c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161cc:	f383 8811 	msr	BASEPRI, r3
 80161d0:	f3bf 8f6f 	isb	sy
 80161d4:	f3bf 8f4f 	dsb	sy
 80161d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80161da:	bf00      	nop
 80161dc:	e7fe      	b.n	80161dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80161de:	683b      	ldr	r3, [r7, #0]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d10a      	bne.n	80161fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80161e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161e8:	f383 8811 	msr	BASEPRI, r3
 80161ec:	f3bf 8f6f 	isb	sy
 80161f0:	f3bf 8f4f 	dsb	sy
 80161f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80161f6:	bf00      	nop
 80161f8:	e7fe      	b.n	80161f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d002      	beq.n	8016206 <xQueueGenericCreateStatic+0x52>
 8016200:	68bb      	ldr	r3, [r7, #8]
 8016202:	2b00      	cmp	r3, #0
 8016204:	d001      	beq.n	801620a <xQueueGenericCreateStatic+0x56>
 8016206:	2301      	movs	r3, #1
 8016208:	e000      	b.n	801620c <xQueueGenericCreateStatic+0x58>
 801620a:	2300      	movs	r3, #0
 801620c:	2b00      	cmp	r3, #0
 801620e:	d10a      	bne.n	8016226 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8016210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016214:	f383 8811 	msr	BASEPRI, r3
 8016218:	f3bf 8f6f 	isb	sy
 801621c:	f3bf 8f4f 	dsb	sy
 8016220:	623b      	str	r3, [r7, #32]
}
 8016222:	bf00      	nop
 8016224:	e7fe      	b.n	8016224 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	2b00      	cmp	r3, #0
 801622a:	d102      	bne.n	8016232 <xQueueGenericCreateStatic+0x7e>
 801622c:	68bb      	ldr	r3, [r7, #8]
 801622e:	2b00      	cmp	r3, #0
 8016230:	d101      	bne.n	8016236 <xQueueGenericCreateStatic+0x82>
 8016232:	2301      	movs	r3, #1
 8016234:	e000      	b.n	8016238 <xQueueGenericCreateStatic+0x84>
 8016236:	2300      	movs	r3, #0
 8016238:	2b00      	cmp	r3, #0
 801623a:	d10a      	bne.n	8016252 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801623c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016240:	f383 8811 	msr	BASEPRI, r3
 8016244:	f3bf 8f6f 	isb	sy
 8016248:	f3bf 8f4f 	dsb	sy
 801624c:	61fb      	str	r3, [r7, #28]
}
 801624e:	bf00      	nop
 8016250:	e7fe      	b.n	8016250 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016252:	2350      	movs	r3, #80	; 0x50
 8016254:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8016256:	697b      	ldr	r3, [r7, #20]
 8016258:	2b50      	cmp	r3, #80	; 0x50
 801625a:	d00a      	beq.n	8016272 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801625c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016260:	f383 8811 	msr	BASEPRI, r3
 8016264:	f3bf 8f6f 	isb	sy
 8016268:	f3bf 8f4f 	dsb	sy
 801626c:	61bb      	str	r3, [r7, #24]
}
 801626e:	bf00      	nop
 8016270:	e7fe      	b.n	8016270 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016272:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016274:	683b      	ldr	r3, [r7, #0]
 8016276:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8016278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801627a:	2b00      	cmp	r3, #0
 801627c:	d00d      	beq.n	801629a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801627e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016280:	2201      	movs	r2, #1
 8016282:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016286:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801628a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801628c:	9300      	str	r3, [sp, #0]
 801628e:	4613      	mov	r3, r2
 8016290:	687a      	ldr	r2, [r7, #4]
 8016292:	68b9      	ldr	r1, [r7, #8]
 8016294:	68f8      	ldr	r0, [r7, #12]
 8016296:	f000 f83f 	bl	8016318 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801629a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801629c:	4618      	mov	r0, r3
 801629e:	3730      	adds	r7, #48	; 0x30
 80162a0:	46bd      	mov	sp, r7
 80162a2:	bd80      	pop	{r7, pc}

080162a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80162a4:	b580      	push	{r7, lr}
 80162a6:	b08a      	sub	sp, #40	; 0x28
 80162a8:	af02      	add	r7, sp, #8
 80162aa:	60f8      	str	r0, [r7, #12]
 80162ac:	60b9      	str	r1, [r7, #8]
 80162ae:	4613      	mov	r3, r2
 80162b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d10a      	bne.n	80162ce <xQueueGenericCreate+0x2a>
	__asm volatile
 80162b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162bc:	f383 8811 	msr	BASEPRI, r3
 80162c0:	f3bf 8f6f 	isb	sy
 80162c4:	f3bf 8f4f 	dsb	sy
 80162c8:	613b      	str	r3, [r7, #16]
}
 80162ca:	bf00      	nop
 80162cc:	e7fe      	b.n	80162cc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80162ce:	68fb      	ldr	r3, [r7, #12]
 80162d0:	68ba      	ldr	r2, [r7, #8]
 80162d2:	fb02 f303 	mul.w	r3, r2, r3
 80162d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80162d8:	69fb      	ldr	r3, [r7, #28]
 80162da:	3350      	adds	r3, #80	; 0x50
 80162dc:	4618      	mov	r0, r3
 80162de:	f002 fdf3 	bl	8018ec8 <pvPortMalloc>
 80162e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80162e4:	69bb      	ldr	r3, [r7, #24]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d011      	beq.n	801630e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80162ea:	69bb      	ldr	r3, [r7, #24]
 80162ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80162ee:	697b      	ldr	r3, [r7, #20]
 80162f0:	3350      	adds	r3, #80	; 0x50
 80162f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80162f4:	69bb      	ldr	r3, [r7, #24]
 80162f6:	2200      	movs	r2, #0
 80162f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80162fc:	79fa      	ldrb	r2, [r7, #7]
 80162fe:	69bb      	ldr	r3, [r7, #24]
 8016300:	9300      	str	r3, [sp, #0]
 8016302:	4613      	mov	r3, r2
 8016304:	697a      	ldr	r2, [r7, #20]
 8016306:	68b9      	ldr	r1, [r7, #8]
 8016308:	68f8      	ldr	r0, [r7, #12]
 801630a:	f000 f805 	bl	8016318 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801630e:	69bb      	ldr	r3, [r7, #24]
	}
 8016310:	4618      	mov	r0, r3
 8016312:	3720      	adds	r7, #32
 8016314:	46bd      	mov	sp, r7
 8016316:	bd80      	pop	{r7, pc}

08016318 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016318:	b580      	push	{r7, lr}
 801631a:	b084      	sub	sp, #16
 801631c:	af00      	add	r7, sp, #0
 801631e:	60f8      	str	r0, [r7, #12]
 8016320:	60b9      	str	r1, [r7, #8]
 8016322:	607a      	str	r2, [r7, #4]
 8016324:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016326:	68bb      	ldr	r3, [r7, #8]
 8016328:	2b00      	cmp	r3, #0
 801632a:	d103      	bne.n	8016334 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801632c:	69bb      	ldr	r3, [r7, #24]
 801632e:	69ba      	ldr	r2, [r7, #24]
 8016330:	601a      	str	r2, [r3, #0]
 8016332:	e002      	b.n	801633a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016334:	69bb      	ldr	r3, [r7, #24]
 8016336:	687a      	ldr	r2, [r7, #4]
 8016338:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801633a:	69bb      	ldr	r3, [r7, #24]
 801633c:	68fa      	ldr	r2, [r7, #12]
 801633e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016340:	69bb      	ldr	r3, [r7, #24]
 8016342:	68ba      	ldr	r2, [r7, #8]
 8016344:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016346:	2101      	movs	r1, #1
 8016348:	69b8      	ldr	r0, [r7, #24]
 801634a:	f7ff fecb 	bl	80160e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801634e:	69bb      	ldr	r3, [r7, #24]
 8016350:	78fa      	ldrb	r2, [r7, #3]
 8016352:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8016356:	bf00      	nop
 8016358:	3710      	adds	r7, #16
 801635a:	46bd      	mov	sp, r7
 801635c:	bd80      	pop	{r7, pc}

0801635e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801635e:	b580      	push	{r7, lr}
 8016360:	b08a      	sub	sp, #40	; 0x28
 8016362:	af02      	add	r7, sp, #8
 8016364:	60f8      	str	r0, [r7, #12]
 8016366:	60b9      	str	r1, [r7, #8]
 8016368:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801636a:	68fb      	ldr	r3, [r7, #12]
 801636c:	2b00      	cmp	r3, #0
 801636e:	d10a      	bne.n	8016386 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8016370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016374:	f383 8811 	msr	BASEPRI, r3
 8016378:	f3bf 8f6f 	isb	sy
 801637c:	f3bf 8f4f 	dsb	sy
 8016380:	61bb      	str	r3, [r7, #24]
}
 8016382:	bf00      	nop
 8016384:	e7fe      	b.n	8016384 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8016386:	68ba      	ldr	r2, [r7, #8]
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	429a      	cmp	r2, r3
 801638c:	d90a      	bls.n	80163a4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 801638e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016392:	f383 8811 	msr	BASEPRI, r3
 8016396:	f3bf 8f6f 	isb	sy
 801639a:	f3bf 8f4f 	dsb	sy
 801639e:	617b      	str	r3, [r7, #20]
}
 80163a0:	bf00      	nop
 80163a2:	e7fe      	b.n	80163a2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80163a4:	2302      	movs	r3, #2
 80163a6:	9300      	str	r3, [sp, #0]
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	2200      	movs	r2, #0
 80163ac:	2100      	movs	r1, #0
 80163ae:	68f8      	ldr	r0, [r7, #12]
 80163b0:	f7ff ff00 	bl	80161b4 <xQueueGenericCreateStatic>
 80163b4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80163b6:	69fb      	ldr	r3, [r7, #28]
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d002      	beq.n	80163c2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80163bc:	69fb      	ldr	r3, [r7, #28]
 80163be:	68ba      	ldr	r2, [r7, #8]
 80163c0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80163c2:	69fb      	ldr	r3, [r7, #28]
	}
 80163c4:	4618      	mov	r0, r3
 80163c6:	3720      	adds	r7, #32
 80163c8:	46bd      	mov	sp, r7
 80163ca:	bd80      	pop	{r7, pc}

080163cc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80163cc:	b580      	push	{r7, lr}
 80163ce:	b086      	sub	sp, #24
 80163d0:	af00      	add	r7, sp, #0
 80163d2:	6078      	str	r0, [r7, #4]
 80163d4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d10a      	bne.n	80163f2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80163dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163e0:	f383 8811 	msr	BASEPRI, r3
 80163e4:	f3bf 8f6f 	isb	sy
 80163e8:	f3bf 8f4f 	dsb	sy
 80163ec:	613b      	str	r3, [r7, #16]
}
 80163ee:	bf00      	nop
 80163f0:	e7fe      	b.n	80163f0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80163f2:	683a      	ldr	r2, [r7, #0]
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	429a      	cmp	r2, r3
 80163f8:	d90a      	bls.n	8016410 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80163fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163fe:	f383 8811 	msr	BASEPRI, r3
 8016402:	f3bf 8f6f 	isb	sy
 8016406:	f3bf 8f4f 	dsb	sy
 801640a:	60fb      	str	r3, [r7, #12]
}
 801640c:	bf00      	nop
 801640e:	e7fe      	b.n	801640e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016410:	2202      	movs	r2, #2
 8016412:	2100      	movs	r1, #0
 8016414:	6878      	ldr	r0, [r7, #4]
 8016416:	f7ff ff45 	bl	80162a4 <xQueueGenericCreate>
 801641a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801641c:	697b      	ldr	r3, [r7, #20]
 801641e:	2b00      	cmp	r3, #0
 8016420:	d002      	beq.n	8016428 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016422:	697b      	ldr	r3, [r7, #20]
 8016424:	683a      	ldr	r2, [r7, #0]
 8016426:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8016428:	697b      	ldr	r3, [r7, #20]
	}
 801642a:	4618      	mov	r0, r3
 801642c:	3718      	adds	r7, #24
 801642e:	46bd      	mov	sp, r7
 8016430:	bd80      	pop	{r7, pc}
	...

08016434 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016434:	b580      	push	{r7, lr}
 8016436:	b08e      	sub	sp, #56	; 0x38
 8016438:	af00      	add	r7, sp, #0
 801643a:	60f8      	str	r0, [r7, #12]
 801643c:	60b9      	str	r1, [r7, #8]
 801643e:	607a      	str	r2, [r7, #4]
 8016440:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016442:	2300      	movs	r3, #0
 8016444:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801644c:	2b00      	cmp	r3, #0
 801644e:	d10a      	bne.n	8016466 <xQueueGenericSend+0x32>
	__asm volatile
 8016450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016454:	f383 8811 	msr	BASEPRI, r3
 8016458:	f3bf 8f6f 	isb	sy
 801645c:	f3bf 8f4f 	dsb	sy
 8016460:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016462:	bf00      	nop
 8016464:	e7fe      	b.n	8016464 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016466:	68bb      	ldr	r3, [r7, #8]
 8016468:	2b00      	cmp	r3, #0
 801646a:	d103      	bne.n	8016474 <xQueueGenericSend+0x40>
 801646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801646e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016470:	2b00      	cmp	r3, #0
 8016472:	d101      	bne.n	8016478 <xQueueGenericSend+0x44>
 8016474:	2301      	movs	r3, #1
 8016476:	e000      	b.n	801647a <xQueueGenericSend+0x46>
 8016478:	2300      	movs	r3, #0
 801647a:	2b00      	cmp	r3, #0
 801647c:	d10a      	bne.n	8016494 <xQueueGenericSend+0x60>
	__asm volatile
 801647e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016482:	f383 8811 	msr	BASEPRI, r3
 8016486:	f3bf 8f6f 	isb	sy
 801648a:	f3bf 8f4f 	dsb	sy
 801648e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016490:	bf00      	nop
 8016492:	e7fe      	b.n	8016492 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016494:	683b      	ldr	r3, [r7, #0]
 8016496:	2b02      	cmp	r3, #2
 8016498:	d103      	bne.n	80164a2 <xQueueGenericSend+0x6e>
 801649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801649c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801649e:	2b01      	cmp	r3, #1
 80164a0:	d101      	bne.n	80164a6 <xQueueGenericSend+0x72>
 80164a2:	2301      	movs	r3, #1
 80164a4:	e000      	b.n	80164a8 <xQueueGenericSend+0x74>
 80164a6:	2300      	movs	r3, #0
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d10a      	bne.n	80164c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80164ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164b0:	f383 8811 	msr	BASEPRI, r3
 80164b4:	f3bf 8f6f 	isb	sy
 80164b8:	f3bf 8f4f 	dsb	sy
 80164bc:	623b      	str	r3, [r7, #32]
}
 80164be:	bf00      	nop
 80164c0:	e7fe      	b.n	80164c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80164c2:	f001 fd89 	bl	8017fd8 <xTaskGetSchedulerState>
 80164c6:	4603      	mov	r3, r0
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d102      	bne.n	80164d2 <xQueueGenericSend+0x9e>
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d101      	bne.n	80164d6 <xQueueGenericSend+0xa2>
 80164d2:	2301      	movs	r3, #1
 80164d4:	e000      	b.n	80164d8 <xQueueGenericSend+0xa4>
 80164d6:	2300      	movs	r3, #0
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d10a      	bne.n	80164f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80164dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164e0:	f383 8811 	msr	BASEPRI, r3
 80164e4:	f3bf 8f6f 	isb	sy
 80164e8:	f3bf 8f4f 	dsb	sy
 80164ec:	61fb      	str	r3, [r7, #28]
}
 80164ee:	bf00      	nop
 80164f0:	e7fe      	b.n	80164f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80164f2:	f002 fbc7 	bl	8018c84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80164f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80164fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80164fe:	429a      	cmp	r2, r3
 8016500:	d302      	bcc.n	8016508 <xQueueGenericSend+0xd4>
 8016502:	683b      	ldr	r3, [r7, #0]
 8016504:	2b02      	cmp	r3, #2
 8016506:	d129      	bne.n	801655c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016508:	683a      	ldr	r2, [r7, #0]
 801650a:	68b9      	ldr	r1, [r7, #8]
 801650c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801650e:	f000 fc5e 	bl	8016dce <prvCopyDataToQueue>
 8016512:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016518:	2b00      	cmp	r3, #0
 801651a:	d010      	beq.n	801653e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801651c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801651e:	3324      	adds	r3, #36	; 0x24
 8016520:	4618      	mov	r0, r3
 8016522:	f001 fb9b 	bl	8017c5c <xTaskRemoveFromEventList>
 8016526:	4603      	mov	r3, r0
 8016528:	2b00      	cmp	r3, #0
 801652a:	d013      	beq.n	8016554 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801652c:	4b3f      	ldr	r3, [pc, #252]	; (801662c <xQueueGenericSend+0x1f8>)
 801652e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016532:	601a      	str	r2, [r3, #0]
 8016534:	f3bf 8f4f 	dsb	sy
 8016538:	f3bf 8f6f 	isb	sy
 801653c:	e00a      	b.n	8016554 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801653e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016540:	2b00      	cmp	r3, #0
 8016542:	d007      	beq.n	8016554 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8016544:	4b39      	ldr	r3, [pc, #228]	; (801662c <xQueueGenericSend+0x1f8>)
 8016546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801654a:	601a      	str	r2, [r3, #0]
 801654c:	f3bf 8f4f 	dsb	sy
 8016550:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8016554:	f002 fbc6 	bl	8018ce4 <vPortExitCritical>
				return pdPASS;
 8016558:	2301      	movs	r3, #1
 801655a:	e063      	b.n	8016624 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	2b00      	cmp	r3, #0
 8016560:	d103      	bne.n	801656a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016562:	f002 fbbf 	bl	8018ce4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8016566:	2300      	movs	r3, #0
 8016568:	e05c      	b.n	8016624 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801656a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801656c:	2b00      	cmp	r3, #0
 801656e:	d106      	bne.n	801657e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016570:	f107 0314 	add.w	r3, r7, #20
 8016574:	4618      	mov	r0, r3
 8016576:	f001 fbd5 	bl	8017d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801657a:	2301      	movs	r3, #1
 801657c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801657e:	f002 fbb1 	bl	8018ce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016582:	f001 f947 	bl	8017814 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016586:	f002 fb7d 	bl	8018c84 <vPortEnterCritical>
 801658a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801658c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016590:	b25b      	sxtb	r3, r3
 8016592:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016596:	d103      	bne.n	80165a0 <xQueueGenericSend+0x16c>
 8016598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801659a:	2200      	movs	r2, #0
 801659c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80165a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80165a6:	b25b      	sxtb	r3, r3
 80165a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80165ac:	d103      	bne.n	80165b6 <xQueueGenericSend+0x182>
 80165ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165b0:	2200      	movs	r2, #0
 80165b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80165b6:	f002 fb95 	bl	8018ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80165ba:	1d3a      	adds	r2, r7, #4
 80165bc:	f107 0314 	add.w	r3, r7, #20
 80165c0:	4611      	mov	r1, r2
 80165c2:	4618      	mov	r0, r3
 80165c4:	f001 fbc4 	bl	8017d50 <xTaskCheckForTimeOut>
 80165c8:	4603      	mov	r3, r0
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d124      	bne.n	8016618 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80165ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80165d0:	f000 fcf5 	bl	8016fbe <prvIsQueueFull>
 80165d4:	4603      	mov	r3, r0
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d018      	beq.n	801660c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80165da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165dc:	3310      	adds	r3, #16
 80165de:	687a      	ldr	r2, [r7, #4]
 80165e0:	4611      	mov	r1, r2
 80165e2:	4618      	mov	r0, r3
 80165e4:	f001 faea 	bl	8017bbc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80165e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80165ea:	f000 fc80 	bl	8016eee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80165ee:	f001 f91f 	bl	8017830 <xTaskResumeAll>
 80165f2:	4603      	mov	r3, r0
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	f47f af7c 	bne.w	80164f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80165fa:	4b0c      	ldr	r3, [pc, #48]	; (801662c <xQueueGenericSend+0x1f8>)
 80165fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016600:	601a      	str	r2, [r3, #0]
 8016602:	f3bf 8f4f 	dsb	sy
 8016606:	f3bf 8f6f 	isb	sy
 801660a:	e772      	b.n	80164f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801660c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801660e:	f000 fc6e 	bl	8016eee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016612:	f001 f90d 	bl	8017830 <xTaskResumeAll>
 8016616:	e76c      	b.n	80164f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016618:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801661a:	f000 fc68 	bl	8016eee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801661e:	f001 f907 	bl	8017830 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8016622:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8016624:	4618      	mov	r0, r3
 8016626:	3738      	adds	r7, #56	; 0x38
 8016628:	46bd      	mov	sp, r7
 801662a:	bd80      	pop	{r7, pc}
 801662c:	e000ed04 	.word	0xe000ed04

08016630 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8016630:	b580      	push	{r7, lr}
 8016632:	b090      	sub	sp, #64	; 0x40
 8016634:	af00      	add	r7, sp, #0
 8016636:	60f8      	str	r0, [r7, #12]
 8016638:	60b9      	str	r1, [r7, #8]
 801663a:	607a      	str	r2, [r7, #4]
 801663c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801663e:	68fb      	ldr	r3, [r7, #12]
 8016640:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8016642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016644:	2b00      	cmp	r3, #0
 8016646:	d10a      	bne.n	801665e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8016648:	f04f 0350 	mov.w	r3, #80	; 0x50
 801664c:	f383 8811 	msr	BASEPRI, r3
 8016650:	f3bf 8f6f 	isb	sy
 8016654:	f3bf 8f4f 	dsb	sy
 8016658:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801665a:	bf00      	nop
 801665c:	e7fe      	b.n	801665c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801665e:	68bb      	ldr	r3, [r7, #8]
 8016660:	2b00      	cmp	r3, #0
 8016662:	d103      	bne.n	801666c <xQueueGenericSendFromISR+0x3c>
 8016664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016668:	2b00      	cmp	r3, #0
 801666a:	d101      	bne.n	8016670 <xQueueGenericSendFromISR+0x40>
 801666c:	2301      	movs	r3, #1
 801666e:	e000      	b.n	8016672 <xQueueGenericSendFromISR+0x42>
 8016670:	2300      	movs	r3, #0
 8016672:	2b00      	cmp	r3, #0
 8016674:	d10a      	bne.n	801668c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8016676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801667a:	f383 8811 	msr	BASEPRI, r3
 801667e:	f3bf 8f6f 	isb	sy
 8016682:	f3bf 8f4f 	dsb	sy
 8016686:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016688:	bf00      	nop
 801668a:	e7fe      	b.n	801668a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801668c:	683b      	ldr	r3, [r7, #0]
 801668e:	2b02      	cmp	r3, #2
 8016690:	d103      	bne.n	801669a <xQueueGenericSendFromISR+0x6a>
 8016692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016696:	2b01      	cmp	r3, #1
 8016698:	d101      	bne.n	801669e <xQueueGenericSendFromISR+0x6e>
 801669a:	2301      	movs	r3, #1
 801669c:	e000      	b.n	80166a0 <xQueueGenericSendFromISR+0x70>
 801669e:	2300      	movs	r3, #0
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d10a      	bne.n	80166ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80166a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166a8:	f383 8811 	msr	BASEPRI, r3
 80166ac:	f3bf 8f6f 	isb	sy
 80166b0:	f3bf 8f4f 	dsb	sy
 80166b4:	623b      	str	r3, [r7, #32]
}
 80166b6:	bf00      	nop
 80166b8:	e7fe      	b.n	80166b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80166ba:	f002 fbc5 	bl	8018e48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80166be:	f3ef 8211 	mrs	r2, BASEPRI
 80166c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166c6:	f383 8811 	msr	BASEPRI, r3
 80166ca:	f3bf 8f6f 	isb	sy
 80166ce:	f3bf 8f4f 	dsb	sy
 80166d2:	61fa      	str	r2, [r7, #28]
 80166d4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80166d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80166d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80166da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80166de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80166e2:	429a      	cmp	r2, r3
 80166e4:	d302      	bcc.n	80166ec <xQueueGenericSendFromISR+0xbc>
 80166e6:	683b      	ldr	r3, [r7, #0]
 80166e8:	2b02      	cmp	r3, #2
 80166ea:	d12f      	bne.n	801674c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80166ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80166f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80166f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80166fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80166fc:	683a      	ldr	r2, [r7, #0]
 80166fe:	68b9      	ldr	r1, [r7, #8]
 8016700:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016702:	f000 fb64 	bl	8016dce <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016706:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801670a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801670e:	d112      	bne.n	8016736 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016714:	2b00      	cmp	r3, #0
 8016716:	d016      	beq.n	8016746 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801671a:	3324      	adds	r3, #36	; 0x24
 801671c:	4618      	mov	r0, r3
 801671e:	f001 fa9d 	bl	8017c5c <xTaskRemoveFromEventList>
 8016722:	4603      	mov	r3, r0
 8016724:	2b00      	cmp	r3, #0
 8016726:	d00e      	beq.n	8016746 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	2b00      	cmp	r3, #0
 801672c:	d00b      	beq.n	8016746 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	2201      	movs	r2, #1
 8016732:	601a      	str	r2, [r3, #0]
 8016734:	e007      	b.n	8016746 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016736:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801673a:	3301      	adds	r3, #1
 801673c:	b2db      	uxtb	r3, r3
 801673e:	b25a      	sxtb	r2, r3
 8016740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016746:	2301      	movs	r3, #1
 8016748:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801674a:	e001      	b.n	8016750 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801674c:	2300      	movs	r3, #0
 801674e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016752:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8016754:	697b      	ldr	r3, [r7, #20]
 8016756:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801675a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801675c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801675e:	4618      	mov	r0, r3
 8016760:	3740      	adds	r7, #64	; 0x40
 8016762:	46bd      	mov	sp, r7
 8016764:	bd80      	pop	{r7, pc}

08016766 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016766:	b580      	push	{r7, lr}
 8016768:	b08e      	sub	sp, #56	; 0x38
 801676a:	af00      	add	r7, sp, #0
 801676c:	6078      	str	r0, [r7, #4]
 801676e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8016774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016776:	2b00      	cmp	r3, #0
 8016778:	d10a      	bne.n	8016790 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801677a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801677e:	f383 8811 	msr	BASEPRI, r3
 8016782:	f3bf 8f6f 	isb	sy
 8016786:	f3bf 8f4f 	dsb	sy
 801678a:	623b      	str	r3, [r7, #32]
}
 801678c:	bf00      	nop
 801678e:	e7fe      	b.n	801678e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016794:	2b00      	cmp	r3, #0
 8016796:	d00a      	beq.n	80167ae <xQueueGiveFromISR+0x48>
	__asm volatile
 8016798:	f04f 0350 	mov.w	r3, #80	; 0x50
 801679c:	f383 8811 	msr	BASEPRI, r3
 80167a0:	f3bf 8f6f 	isb	sy
 80167a4:	f3bf 8f4f 	dsb	sy
 80167a8:	61fb      	str	r3, [r7, #28]
}
 80167aa:	bf00      	nop
 80167ac:	e7fe      	b.n	80167ac <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80167ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d103      	bne.n	80167be <xQueueGiveFromISR+0x58>
 80167b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167b8:	689b      	ldr	r3, [r3, #8]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d101      	bne.n	80167c2 <xQueueGiveFromISR+0x5c>
 80167be:	2301      	movs	r3, #1
 80167c0:	e000      	b.n	80167c4 <xQueueGiveFromISR+0x5e>
 80167c2:	2300      	movs	r3, #0
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d10a      	bne.n	80167de <xQueueGiveFromISR+0x78>
	__asm volatile
 80167c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167cc:	f383 8811 	msr	BASEPRI, r3
 80167d0:	f3bf 8f6f 	isb	sy
 80167d4:	f3bf 8f4f 	dsb	sy
 80167d8:	61bb      	str	r3, [r7, #24]
}
 80167da:	bf00      	nop
 80167dc:	e7fe      	b.n	80167dc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80167de:	f002 fb33 	bl	8018e48 <vPortValidateInterruptPriority>
	__asm volatile
 80167e2:	f3ef 8211 	mrs	r2, BASEPRI
 80167e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167ea:	f383 8811 	msr	BASEPRI, r3
 80167ee:	f3bf 8f6f 	isb	sy
 80167f2:	f3bf 8f4f 	dsb	sy
 80167f6:	617a      	str	r2, [r7, #20]
 80167f8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80167fa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80167fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80167fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016802:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8016804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801680a:	429a      	cmp	r2, r3
 801680c:	d22b      	bcs.n	8016866 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801680e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016810:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801681a:	1c5a      	adds	r2, r3, #1
 801681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801681e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016820:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016824:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016828:	d112      	bne.n	8016850 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801682a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801682c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801682e:	2b00      	cmp	r3, #0
 8016830:	d016      	beq.n	8016860 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016834:	3324      	adds	r3, #36	; 0x24
 8016836:	4618      	mov	r0, r3
 8016838:	f001 fa10 	bl	8017c5c <xTaskRemoveFromEventList>
 801683c:	4603      	mov	r3, r0
 801683e:	2b00      	cmp	r3, #0
 8016840:	d00e      	beq.n	8016860 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016842:	683b      	ldr	r3, [r7, #0]
 8016844:	2b00      	cmp	r3, #0
 8016846:	d00b      	beq.n	8016860 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016848:	683b      	ldr	r3, [r7, #0]
 801684a:	2201      	movs	r2, #1
 801684c:	601a      	str	r2, [r3, #0]
 801684e:	e007      	b.n	8016860 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016850:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016854:	3301      	adds	r3, #1
 8016856:	b2db      	uxtb	r3, r3
 8016858:	b25a      	sxtb	r2, r3
 801685a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801685c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016860:	2301      	movs	r3, #1
 8016862:	637b      	str	r3, [r7, #52]	; 0x34
 8016864:	e001      	b.n	801686a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016866:	2300      	movs	r3, #0
 8016868:	637b      	str	r3, [r7, #52]	; 0x34
 801686a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801686c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	f383 8811 	msr	BASEPRI, r3
}
 8016874:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016878:	4618      	mov	r0, r3
 801687a:	3738      	adds	r7, #56	; 0x38
 801687c:	46bd      	mov	sp, r7
 801687e:	bd80      	pop	{r7, pc}

08016880 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016880:	b580      	push	{r7, lr}
 8016882:	b08c      	sub	sp, #48	; 0x30
 8016884:	af00      	add	r7, sp, #0
 8016886:	60f8      	str	r0, [r7, #12]
 8016888:	60b9      	str	r1, [r7, #8]
 801688a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801688c:	2300      	movs	r3, #0
 801688e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016896:	2b00      	cmp	r3, #0
 8016898:	d10a      	bne.n	80168b0 <xQueueReceive+0x30>
	__asm volatile
 801689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801689e:	f383 8811 	msr	BASEPRI, r3
 80168a2:	f3bf 8f6f 	isb	sy
 80168a6:	f3bf 8f4f 	dsb	sy
 80168aa:	623b      	str	r3, [r7, #32]
}
 80168ac:	bf00      	nop
 80168ae:	e7fe      	b.n	80168ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80168b0:	68bb      	ldr	r3, [r7, #8]
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d103      	bne.n	80168be <xQueueReceive+0x3e>
 80168b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d101      	bne.n	80168c2 <xQueueReceive+0x42>
 80168be:	2301      	movs	r3, #1
 80168c0:	e000      	b.n	80168c4 <xQueueReceive+0x44>
 80168c2:	2300      	movs	r3, #0
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d10a      	bne.n	80168de <xQueueReceive+0x5e>
	__asm volatile
 80168c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168cc:	f383 8811 	msr	BASEPRI, r3
 80168d0:	f3bf 8f6f 	isb	sy
 80168d4:	f3bf 8f4f 	dsb	sy
 80168d8:	61fb      	str	r3, [r7, #28]
}
 80168da:	bf00      	nop
 80168dc:	e7fe      	b.n	80168dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80168de:	f001 fb7b 	bl	8017fd8 <xTaskGetSchedulerState>
 80168e2:	4603      	mov	r3, r0
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d102      	bne.n	80168ee <xQueueReceive+0x6e>
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d101      	bne.n	80168f2 <xQueueReceive+0x72>
 80168ee:	2301      	movs	r3, #1
 80168f0:	e000      	b.n	80168f4 <xQueueReceive+0x74>
 80168f2:	2300      	movs	r3, #0
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d10a      	bne.n	801690e <xQueueReceive+0x8e>
	__asm volatile
 80168f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168fc:	f383 8811 	msr	BASEPRI, r3
 8016900:	f3bf 8f6f 	isb	sy
 8016904:	f3bf 8f4f 	dsb	sy
 8016908:	61bb      	str	r3, [r7, #24]
}
 801690a:	bf00      	nop
 801690c:	e7fe      	b.n	801690c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801690e:	f002 f9b9 	bl	8018c84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016916:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801691a:	2b00      	cmp	r3, #0
 801691c:	d01f      	beq.n	801695e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801691e:	68b9      	ldr	r1, [r7, #8]
 8016920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016922:	f000 fabe 	bl	8016ea2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016928:	1e5a      	subs	r2, r3, #1
 801692a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801692c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801692e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016930:	691b      	ldr	r3, [r3, #16]
 8016932:	2b00      	cmp	r3, #0
 8016934:	d00f      	beq.n	8016956 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016938:	3310      	adds	r3, #16
 801693a:	4618      	mov	r0, r3
 801693c:	f001 f98e 	bl	8017c5c <xTaskRemoveFromEventList>
 8016940:	4603      	mov	r3, r0
 8016942:	2b00      	cmp	r3, #0
 8016944:	d007      	beq.n	8016956 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016946:	4b3d      	ldr	r3, [pc, #244]	; (8016a3c <xQueueReceive+0x1bc>)
 8016948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801694c:	601a      	str	r2, [r3, #0]
 801694e:	f3bf 8f4f 	dsb	sy
 8016952:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016956:	f002 f9c5 	bl	8018ce4 <vPortExitCritical>
				return pdPASS;
 801695a:	2301      	movs	r3, #1
 801695c:	e069      	b.n	8016a32 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	2b00      	cmp	r3, #0
 8016962:	d103      	bne.n	801696c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016964:	f002 f9be 	bl	8018ce4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016968:	2300      	movs	r3, #0
 801696a:	e062      	b.n	8016a32 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801696c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801696e:	2b00      	cmp	r3, #0
 8016970:	d106      	bne.n	8016980 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016972:	f107 0310 	add.w	r3, r7, #16
 8016976:	4618      	mov	r0, r3
 8016978:	f001 f9d4 	bl	8017d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801697c:	2301      	movs	r3, #1
 801697e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016980:	f002 f9b0 	bl	8018ce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016984:	f000 ff46 	bl	8017814 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016988:	f002 f97c 	bl	8018c84 <vPortEnterCritical>
 801698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801698e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016992:	b25b      	sxtb	r3, r3
 8016994:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016998:	d103      	bne.n	80169a2 <xQueueReceive+0x122>
 801699a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801699c:	2200      	movs	r2, #0
 801699e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80169a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80169a8:	b25b      	sxtb	r3, r3
 80169aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80169ae:	d103      	bne.n	80169b8 <xQueueReceive+0x138>
 80169b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169b2:	2200      	movs	r2, #0
 80169b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80169b8:	f002 f994 	bl	8018ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80169bc:	1d3a      	adds	r2, r7, #4
 80169be:	f107 0310 	add.w	r3, r7, #16
 80169c2:	4611      	mov	r1, r2
 80169c4:	4618      	mov	r0, r3
 80169c6:	f001 f9c3 	bl	8017d50 <xTaskCheckForTimeOut>
 80169ca:	4603      	mov	r3, r0
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d123      	bne.n	8016a18 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80169d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80169d2:	f000 fade 	bl	8016f92 <prvIsQueueEmpty>
 80169d6:	4603      	mov	r3, r0
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d017      	beq.n	8016a0c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80169dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169de:	3324      	adds	r3, #36	; 0x24
 80169e0:	687a      	ldr	r2, [r7, #4]
 80169e2:	4611      	mov	r1, r2
 80169e4:	4618      	mov	r0, r3
 80169e6:	f001 f8e9 	bl	8017bbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80169ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80169ec:	f000 fa7f 	bl	8016eee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80169f0:	f000 ff1e 	bl	8017830 <xTaskResumeAll>
 80169f4:	4603      	mov	r3, r0
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d189      	bne.n	801690e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80169fa:	4b10      	ldr	r3, [pc, #64]	; (8016a3c <xQueueReceive+0x1bc>)
 80169fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016a00:	601a      	str	r2, [r3, #0]
 8016a02:	f3bf 8f4f 	dsb	sy
 8016a06:	f3bf 8f6f 	isb	sy
 8016a0a:	e780      	b.n	801690e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016a0e:	f000 fa6e 	bl	8016eee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016a12:	f000 ff0d 	bl	8017830 <xTaskResumeAll>
 8016a16:	e77a      	b.n	801690e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8016a18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016a1a:	f000 fa68 	bl	8016eee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016a1e:	f000 ff07 	bl	8017830 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016a22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016a24:	f000 fab5 	bl	8016f92 <prvIsQueueEmpty>
 8016a28:	4603      	mov	r3, r0
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	f43f af6f 	beq.w	801690e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016a30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016a32:	4618      	mov	r0, r3
 8016a34:	3730      	adds	r7, #48	; 0x30
 8016a36:	46bd      	mov	sp, r7
 8016a38:	bd80      	pop	{r7, pc}
 8016a3a:	bf00      	nop
 8016a3c:	e000ed04 	.word	0xe000ed04

08016a40 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8016a40:	b580      	push	{r7, lr}
 8016a42:	b08e      	sub	sp, #56	; 0x38
 8016a44:	af00      	add	r7, sp, #0
 8016a46:	6078      	str	r0, [r7, #4]
 8016a48:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8016a4a:	2300      	movs	r3, #0
 8016a4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8016a52:	2300      	movs	r3, #0
 8016a54:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d10a      	bne.n	8016a72 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8016a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a60:	f383 8811 	msr	BASEPRI, r3
 8016a64:	f3bf 8f6f 	isb	sy
 8016a68:	f3bf 8f4f 	dsb	sy
 8016a6c:	623b      	str	r3, [r7, #32]
}
 8016a6e:	bf00      	nop
 8016a70:	e7fe      	b.n	8016a70 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d00a      	beq.n	8016a90 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8016a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a7e:	f383 8811 	msr	BASEPRI, r3
 8016a82:	f3bf 8f6f 	isb	sy
 8016a86:	f3bf 8f4f 	dsb	sy
 8016a8a:	61fb      	str	r3, [r7, #28]
}
 8016a8c:	bf00      	nop
 8016a8e:	e7fe      	b.n	8016a8e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016a90:	f001 faa2 	bl	8017fd8 <xTaskGetSchedulerState>
 8016a94:	4603      	mov	r3, r0
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d102      	bne.n	8016aa0 <xQueueSemaphoreTake+0x60>
 8016a9a:	683b      	ldr	r3, [r7, #0]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d101      	bne.n	8016aa4 <xQueueSemaphoreTake+0x64>
 8016aa0:	2301      	movs	r3, #1
 8016aa2:	e000      	b.n	8016aa6 <xQueueSemaphoreTake+0x66>
 8016aa4:	2300      	movs	r3, #0
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	d10a      	bne.n	8016ac0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8016aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016aae:	f383 8811 	msr	BASEPRI, r3
 8016ab2:	f3bf 8f6f 	isb	sy
 8016ab6:	f3bf 8f4f 	dsb	sy
 8016aba:	61bb      	str	r3, [r7, #24]
}
 8016abc:	bf00      	nop
 8016abe:	e7fe      	b.n	8016abe <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016ac0:	f002 f8e0 	bl	8018c84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8016ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016ac8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8016aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d024      	beq.n	8016b1a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8016ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ad2:	1e5a      	subs	r2, r3, #1
 8016ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ad6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d104      	bne.n	8016aea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8016ae0:	f001 fbf0 	bl	80182c4 <pvTaskIncrementMutexHeldCount>
 8016ae4:	4602      	mov	r2, r0
 8016ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ae8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016aec:	691b      	ldr	r3, [r3, #16]
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d00f      	beq.n	8016b12 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016af4:	3310      	adds	r3, #16
 8016af6:	4618      	mov	r0, r3
 8016af8:	f001 f8b0 	bl	8017c5c <xTaskRemoveFromEventList>
 8016afc:	4603      	mov	r3, r0
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d007      	beq.n	8016b12 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016b02:	4b54      	ldr	r3, [pc, #336]	; (8016c54 <xQueueSemaphoreTake+0x214>)
 8016b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016b08:	601a      	str	r2, [r3, #0]
 8016b0a:	f3bf 8f4f 	dsb	sy
 8016b0e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016b12:	f002 f8e7 	bl	8018ce4 <vPortExitCritical>
				return pdPASS;
 8016b16:	2301      	movs	r3, #1
 8016b18:	e097      	b.n	8016c4a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016b1a:	683b      	ldr	r3, [r7, #0]
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d111      	bne.n	8016b44 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8016b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d00a      	beq.n	8016b3c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8016b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b2a:	f383 8811 	msr	BASEPRI, r3
 8016b2e:	f3bf 8f6f 	isb	sy
 8016b32:	f3bf 8f4f 	dsb	sy
 8016b36:	617b      	str	r3, [r7, #20]
}
 8016b38:	bf00      	nop
 8016b3a:	e7fe      	b.n	8016b3a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8016b3c:	f002 f8d2 	bl	8018ce4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016b40:	2300      	movs	r3, #0
 8016b42:	e082      	b.n	8016c4a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d106      	bne.n	8016b58 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016b4a:	f107 030c 	add.w	r3, r7, #12
 8016b4e:	4618      	mov	r0, r3
 8016b50:	f001 f8e8 	bl	8017d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016b54:	2301      	movs	r3, #1
 8016b56:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016b58:	f002 f8c4 	bl	8018ce4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016b5c:	f000 fe5a 	bl	8017814 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016b60:	f002 f890 	bl	8018c84 <vPortEnterCritical>
 8016b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016b6a:	b25b      	sxtb	r3, r3
 8016b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016b70:	d103      	bne.n	8016b7a <xQueueSemaphoreTake+0x13a>
 8016b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b74:	2200      	movs	r2, #0
 8016b76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016b80:	b25b      	sxtb	r3, r3
 8016b82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016b86:	d103      	bne.n	8016b90 <xQueueSemaphoreTake+0x150>
 8016b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b8a:	2200      	movs	r2, #0
 8016b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016b90:	f002 f8a8 	bl	8018ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016b94:	463a      	mov	r2, r7
 8016b96:	f107 030c 	add.w	r3, r7, #12
 8016b9a:	4611      	mov	r1, r2
 8016b9c:	4618      	mov	r0, r3
 8016b9e:	f001 f8d7 	bl	8017d50 <xTaskCheckForTimeOut>
 8016ba2:	4603      	mov	r3, r0
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d132      	bne.n	8016c0e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016ba8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016baa:	f000 f9f2 	bl	8016f92 <prvIsQueueEmpty>
 8016bae:	4603      	mov	r3, r0
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d026      	beq.n	8016c02 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d109      	bne.n	8016bd0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8016bbc:	f002 f862 	bl	8018c84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bc2:	689b      	ldr	r3, [r3, #8]
 8016bc4:	4618      	mov	r0, r3
 8016bc6:	f001 fa25 	bl	8018014 <xTaskPriorityInherit>
 8016bca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8016bcc:	f002 f88a 	bl	8018ce4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bd2:	3324      	adds	r3, #36	; 0x24
 8016bd4:	683a      	ldr	r2, [r7, #0]
 8016bd6:	4611      	mov	r1, r2
 8016bd8:	4618      	mov	r0, r3
 8016bda:	f000 ffef 	bl	8017bbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016bde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016be0:	f000 f985 	bl	8016eee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016be4:	f000 fe24 	bl	8017830 <xTaskResumeAll>
 8016be8:	4603      	mov	r3, r0
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	f47f af68 	bne.w	8016ac0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8016bf0:	4b18      	ldr	r3, [pc, #96]	; (8016c54 <xQueueSemaphoreTake+0x214>)
 8016bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016bf6:	601a      	str	r2, [r3, #0]
 8016bf8:	f3bf 8f4f 	dsb	sy
 8016bfc:	f3bf 8f6f 	isb	sy
 8016c00:	e75e      	b.n	8016ac0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8016c02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016c04:	f000 f973 	bl	8016eee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016c08:	f000 fe12 	bl	8017830 <xTaskResumeAll>
 8016c0c:	e758      	b.n	8016ac0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8016c0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016c10:	f000 f96d 	bl	8016eee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016c14:	f000 fe0c 	bl	8017830 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016c18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016c1a:	f000 f9ba 	bl	8016f92 <prvIsQueueEmpty>
 8016c1e:	4603      	mov	r3, r0
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	f43f af4d 	beq.w	8016ac0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8016c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d00d      	beq.n	8016c48 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8016c2c:	f002 f82a 	bl	8018c84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8016c30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016c32:	f000 f8b4 	bl	8016d9e <prvGetDisinheritPriorityAfterTimeout>
 8016c36:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8016c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c3a:	689b      	ldr	r3, [r3, #8]
 8016c3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016c3e:	4618      	mov	r0, r3
 8016c40:	f001 fabe 	bl	80181c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8016c44:	f002 f84e 	bl	8018ce4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016c48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	3738      	adds	r7, #56	; 0x38
 8016c4e:	46bd      	mov	sp, r7
 8016c50:	bd80      	pop	{r7, pc}
 8016c52:	bf00      	nop
 8016c54:	e000ed04 	.word	0xe000ed04

08016c58 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016c58:	b580      	push	{r7, lr}
 8016c5a:	b08e      	sub	sp, #56	; 0x38
 8016c5c:	af00      	add	r7, sp, #0
 8016c5e:	60f8      	str	r0, [r7, #12]
 8016c60:	60b9      	str	r1, [r7, #8]
 8016c62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016c64:	68fb      	ldr	r3, [r7, #12]
 8016c66:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d10a      	bne.n	8016c84 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8016c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c72:	f383 8811 	msr	BASEPRI, r3
 8016c76:	f3bf 8f6f 	isb	sy
 8016c7a:	f3bf 8f4f 	dsb	sy
 8016c7e:	623b      	str	r3, [r7, #32]
}
 8016c80:	bf00      	nop
 8016c82:	e7fe      	b.n	8016c82 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016c84:	68bb      	ldr	r3, [r7, #8]
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d103      	bne.n	8016c92 <xQueueReceiveFromISR+0x3a>
 8016c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d101      	bne.n	8016c96 <xQueueReceiveFromISR+0x3e>
 8016c92:	2301      	movs	r3, #1
 8016c94:	e000      	b.n	8016c98 <xQueueReceiveFromISR+0x40>
 8016c96:	2300      	movs	r3, #0
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d10a      	bne.n	8016cb2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8016c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ca0:	f383 8811 	msr	BASEPRI, r3
 8016ca4:	f3bf 8f6f 	isb	sy
 8016ca8:	f3bf 8f4f 	dsb	sy
 8016cac:	61fb      	str	r3, [r7, #28]
}
 8016cae:	bf00      	nop
 8016cb0:	e7fe      	b.n	8016cb0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016cb2:	f002 f8c9 	bl	8018e48 <vPortValidateInterruptPriority>
	__asm volatile
 8016cb6:	f3ef 8211 	mrs	r2, BASEPRI
 8016cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cbe:	f383 8811 	msr	BASEPRI, r3
 8016cc2:	f3bf 8f6f 	isb	sy
 8016cc6:	f3bf 8f4f 	dsb	sy
 8016cca:	61ba      	str	r2, [r7, #24]
 8016ccc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8016cce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016cd6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d02f      	beq.n	8016d3e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8016cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ce0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016ce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016ce8:	68b9      	ldr	r1, [r7, #8]
 8016cea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016cec:	f000 f8d9 	bl	8016ea2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cf2:	1e5a      	subs	r2, r3, #1
 8016cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cf6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8016cf8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016d00:	d112      	bne.n	8016d28 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d04:	691b      	ldr	r3, [r3, #16]
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d016      	beq.n	8016d38 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d0c:	3310      	adds	r3, #16
 8016d0e:	4618      	mov	r0, r3
 8016d10:	f000 ffa4 	bl	8017c5c <xTaskRemoveFromEventList>
 8016d14:	4603      	mov	r3, r0
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d00e      	beq.n	8016d38 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d00b      	beq.n	8016d38 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	2201      	movs	r2, #1
 8016d24:	601a      	str	r2, [r3, #0]
 8016d26:	e007      	b.n	8016d38 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8016d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d2c:	3301      	adds	r3, #1
 8016d2e:	b2db      	uxtb	r3, r3
 8016d30:	b25a      	sxtb	r2, r3
 8016d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8016d38:	2301      	movs	r3, #1
 8016d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8016d3c:	e001      	b.n	8016d42 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8016d3e:	2300      	movs	r3, #0
 8016d40:	637b      	str	r3, [r7, #52]	; 0x34
 8016d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d44:	613b      	str	r3, [r7, #16]
	__asm volatile
 8016d46:	693b      	ldr	r3, [r7, #16]
 8016d48:	f383 8811 	msr	BASEPRI, r3
}
 8016d4c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016d50:	4618      	mov	r0, r3
 8016d52:	3738      	adds	r7, #56	; 0x38
 8016d54:	46bd      	mov	sp, r7
 8016d56:	bd80      	pop	{r7, pc}

08016d58 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8016d58:	b580      	push	{r7, lr}
 8016d5a:	b084      	sub	sp, #16
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016d64:	68fb      	ldr	r3, [r7, #12]
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d10a      	bne.n	8016d80 <vQueueDelete+0x28>
	__asm volatile
 8016d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d6e:	f383 8811 	msr	BASEPRI, r3
 8016d72:	f3bf 8f6f 	isb	sy
 8016d76:	f3bf 8f4f 	dsb	sy
 8016d7a:	60bb      	str	r3, [r7, #8]
}
 8016d7c:	bf00      	nop
 8016d7e:	e7fe      	b.n	8016d7e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8016d80:	68f8      	ldr	r0, [r7, #12]
 8016d82:	f000 f95f 	bl	8017044 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d102      	bne.n	8016d96 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8016d90:	68f8      	ldr	r0, [r7, #12]
 8016d92:	f002 f965 	bl	8019060 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8016d96:	bf00      	nop
 8016d98:	3710      	adds	r7, #16
 8016d9a:	46bd      	mov	sp, r7
 8016d9c:	bd80      	pop	{r7, pc}

08016d9e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8016d9e:	b480      	push	{r7}
 8016da0:	b085      	sub	sp, #20
 8016da2:	af00      	add	r7, sp, #0
 8016da4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d006      	beq.n	8016dbc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016db2:	681b      	ldr	r3, [r3, #0]
 8016db4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8016db8:	60fb      	str	r3, [r7, #12]
 8016dba:	e001      	b.n	8016dc0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8016dbc:	2300      	movs	r3, #0
 8016dbe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8016dc0:	68fb      	ldr	r3, [r7, #12]
	}
 8016dc2:	4618      	mov	r0, r3
 8016dc4:	3714      	adds	r7, #20
 8016dc6:	46bd      	mov	sp, r7
 8016dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dcc:	4770      	bx	lr

08016dce <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8016dce:	b580      	push	{r7, lr}
 8016dd0:	b086      	sub	sp, #24
 8016dd2:	af00      	add	r7, sp, #0
 8016dd4:	60f8      	str	r0, [r7, #12]
 8016dd6:	60b9      	str	r1, [r7, #8]
 8016dd8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8016dda:	2300      	movs	r3, #0
 8016ddc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016dde:	68fb      	ldr	r3, [r7, #12]
 8016de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016de2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d10d      	bne.n	8016e08 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d14d      	bne.n	8016e90 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	689b      	ldr	r3, [r3, #8]
 8016df8:	4618      	mov	r0, r3
 8016dfa:	f001 f973 	bl	80180e4 <xTaskPriorityDisinherit>
 8016dfe:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8016e00:	68fb      	ldr	r3, [r7, #12]
 8016e02:	2200      	movs	r2, #0
 8016e04:	609a      	str	r2, [r3, #8]
 8016e06:	e043      	b.n	8016e90 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d119      	bne.n	8016e42 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016e0e:	68fb      	ldr	r3, [r7, #12]
 8016e10:	6858      	ldr	r0, [r3, #4]
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e16:	461a      	mov	r2, r3
 8016e18:	68b9      	ldr	r1, [r7, #8]
 8016e1a:	f002 fa79 	bl	8019310 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	685a      	ldr	r2, [r3, #4]
 8016e22:	68fb      	ldr	r3, [r7, #12]
 8016e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e26:	441a      	add	r2, r3
 8016e28:	68fb      	ldr	r3, [r7, #12]
 8016e2a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	685a      	ldr	r2, [r3, #4]
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	689b      	ldr	r3, [r3, #8]
 8016e34:	429a      	cmp	r2, r3
 8016e36:	d32b      	bcc.n	8016e90 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	681a      	ldr	r2, [r3, #0]
 8016e3c:	68fb      	ldr	r3, [r7, #12]
 8016e3e:	605a      	str	r2, [r3, #4]
 8016e40:	e026      	b.n	8016e90 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016e42:	68fb      	ldr	r3, [r7, #12]
 8016e44:	68d8      	ldr	r0, [r3, #12]
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e4a:	461a      	mov	r2, r3
 8016e4c:	68b9      	ldr	r1, [r7, #8]
 8016e4e:	f002 fa5f 	bl	8019310 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016e52:	68fb      	ldr	r3, [r7, #12]
 8016e54:	68da      	ldr	r2, [r3, #12]
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e5a:	425b      	negs	r3, r3
 8016e5c:	441a      	add	r2, r3
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016e62:	68fb      	ldr	r3, [r7, #12]
 8016e64:	68da      	ldr	r2, [r3, #12]
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	429a      	cmp	r2, r3
 8016e6c:	d207      	bcs.n	8016e7e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	689a      	ldr	r2, [r3, #8]
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e76:	425b      	negs	r3, r3
 8016e78:	441a      	add	r2, r3
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	2b02      	cmp	r3, #2
 8016e82:	d105      	bne.n	8016e90 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016e84:	693b      	ldr	r3, [r7, #16]
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d002      	beq.n	8016e90 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8016e8a:	693b      	ldr	r3, [r7, #16]
 8016e8c:	3b01      	subs	r3, #1
 8016e8e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016e90:	693b      	ldr	r3, [r7, #16]
 8016e92:	1c5a      	adds	r2, r3, #1
 8016e94:	68fb      	ldr	r3, [r7, #12]
 8016e96:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8016e98:	697b      	ldr	r3, [r7, #20]
}
 8016e9a:	4618      	mov	r0, r3
 8016e9c:	3718      	adds	r7, #24
 8016e9e:	46bd      	mov	sp, r7
 8016ea0:	bd80      	pop	{r7, pc}

08016ea2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8016ea2:	b580      	push	{r7, lr}
 8016ea4:	b082      	sub	sp, #8
 8016ea6:	af00      	add	r7, sp, #0
 8016ea8:	6078      	str	r0, [r7, #4]
 8016eaa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d018      	beq.n	8016ee6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	68da      	ldr	r2, [r3, #12]
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ebc:	441a      	add	r2, r3
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	68da      	ldr	r2, [r3, #12]
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	689b      	ldr	r3, [r3, #8]
 8016eca:	429a      	cmp	r2, r3
 8016ecc:	d303      	bcc.n	8016ed6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	681a      	ldr	r2, [r3, #0]
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	68d9      	ldr	r1, [r3, #12]
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ede:	461a      	mov	r2, r3
 8016ee0:	6838      	ldr	r0, [r7, #0]
 8016ee2:	f002 fa15 	bl	8019310 <memcpy>
	}
}
 8016ee6:	bf00      	nop
 8016ee8:	3708      	adds	r7, #8
 8016eea:	46bd      	mov	sp, r7
 8016eec:	bd80      	pop	{r7, pc}

08016eee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8016eee:	b580      	push	{r7, lr}
 8016ef0:	b084      	sub	sp, #16
 8016ef2:	af00      	add	r7, sp, #0
 8016ef4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8016ef6:	f001 fec5 	bl	8018c84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016f00:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016f02:	e011      	b.n	8016f28 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d012      	beq.n	8016f32 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	3324      	adds	r3, #36	; 0x24
 8016f10:	4618      	mov	r0, r3
 8016f12:	f000 fea3 	bl	8017c5c <xTaskRemoveFromEventList>
 8016f16:	4603      	mov	r3, r0
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	d001      	beq.n	8016f20 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8016f1c:	f000 ff7a 	bl	8017e14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8016f20:	7bfb      	ldrb	r3, [r7, #15]
 8016f22:	3b01      	subs	r3, #1
 8016f24:	b2db      	uxtb	r3, r3
 8016f26:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016f28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	dce9      	bgt.n	8016f04 <prvUnlockQueue+0x16>
 8016f30:	e000      	b.n	8016f34 <prvUnlockQueue+0x46>
					break;
 8016f32:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	22ff      	movs	r2, #255	; 0xff
 8016f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8016f3c:	f001 fed2 	bl	8018ce4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016f40:	f001 fea0 	bl	8018c84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016f4a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016f4c:	e011      	b.n	8016f72 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	691b      	ldr	r3, [r3, #16]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d012      	beq.n	8016f7c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	3310      	adds	r3, #16
 8016f5a:	4618      	mov	r0, r3
 8016f5c:	f000 fe7e 	bl	8017c5c <xTaskRemoveFromEventList>
 8016f60:	4603      	mov	r3, r0
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d001      	beq.n	8016f6a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8016f66:	f000 ff55 	bl	8017e14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8016f6a:	7bbb      	ldrb	r3, [r7, #14]
 8016f6c:	3b01      	subs	r3, #1
 8016f6e:	b2db      	uxtb	r3, r3
 8016f70:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016f72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	dce9      	bgt.n	8016f4e <prvUnlockQueue+0x60>
 8016f7a:	e000      	b.n	8016f7e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8016f7c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	22ff      	movs	r2, #255	; 0xff
 8016f82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8016f86:	f001 fead 	bl	8018ce4 <vPortExitCritical>
}
 8016f8a:	bf00      	nop
 8016f8c:	3710      	adds	r7, #16
 8016f8e:	46bd      	mov	sp, r7
 8016f90:	bd80      	pop	{r7, pc}

08016f92 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016f92:	b580      	push	{r7, lr}
 8016f94:	b084      	sub	sp, #16
 8016f96:	af00      	add	r7, sp, #0
 8016f98:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016f9a:	f001 fe73 	bl	8018c84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d102      	bne.n	8016fac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8016fa6:	2301      	movs	r3, #1
 8016fa8:	60fb      	str	r3, [r7, #12]
 8016faa:	e001      	b.n	8016fb0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8016fac:	2300      	movs	r3, #0
 8016fae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016fb0:	f001 fe98 	bl	8018ce4 <vPortExitCritical>

	return xReturn;
 8016fb4:	68fb      	ldr	r3, [r7, #12]
}
 8016fb6:	4618      	mov	r0, r3
 8016fb8:	3710      	adds	r7, #16
 8016fba:	46bd      	mov	sp, r7
 8016fbc:	bd80      	pop	{r7, pc}

08016fbe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8016fbe:	b580      	push	{r7, lr}
 8016fc0:	b084      	sub	sp, #16
 8016fc2:	af00      	add	r7, sp, #0
 8016fc4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016fc6:	f001 fe5d 	bl	8018c84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016fd2:	429a      	cmp	r2, r3
 8016fd4:	d102      	bne.n	8016fdc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8016fd6:	2301      	movs	r3, #1
 8016fd8:	60fb      	str	r3, [r7, #12]
 8016fda:	e001      	b.n	8016fe0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8016fdc:	2300      	movs	r3, #0
 8016fde:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016fe0:	f001 fe80 	bl	8018ce4 <vPortExitCritical>

	return xReturn;
 8016fe4:	68fb      	ldr	r3, [r7, #12]
}
 8016fe6:	4618      	mov	r0, r3
 8016fe8:	3710      	adds	r7, #16
 8016fea:	46bd      	mov	sp, r7
 8016fec:	bd80      	pop	{r7, pc}
	...

08016ff0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016ff0:	b480      	push	{r7}
 8016ff2:	b085      	sub	sp, #20
 8016ff4:	af00      	add	r7, sp, #0
 8016ff6:	6078      	str	r0, [r7, #4]
 8016ff8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016ffa:	2300      	movs	r3, #0
 8016ffc:	60fb      	str	r3, [r7, #12]
 8016ffe:	e014      	b.n	801702a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017000:	4a0f      	ldr	r2, [pc, #60]	; (8017040 <vQueueAddToRegistry+0x50>)
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017008:	2b00      	cmp	r3, #0
 801700a:	d10b      	bne.n	8017024 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801700c:	490c      	ldr	r1, [pc, #48]	; (8017040 <vQueueAddToRegistry+0x50>)
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	683a      	ldr	r2, [r7, #0]
 8017012:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017016:	4a0a      	ldr	r2, [pc, #40]	; (8017040 <vQueueAddToRegistry+0x50>)
 8017018:	68fb      	ldr	r3, [r7, #12]
 801701a:	00db      	lsls	r3, r3, #3
 801701c:	4413      	add	r3, r2
 801701e:	687a      	ldr	r2, [r7, #4]
 8017020:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8017022:	e006      	b.n	8017032 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017024:	68fb      	ldr	r3, [r7, #12]
 8017026:	3301      	adds	r3, #1
 8017028:	60fb      	str	r3, [r7, #12]
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	2b07      	cmp	r3, #7
 801702e:	d9e7      	bls.n	8017000 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017030:	bf00      	nop
 8017032:	bf00      	nop
 8017034:	3714      	adds	r7, #20
 8017036:	46bd      	mov	sp, r7
 8017038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801703c:	4770      	bx	lr
 801703e:	bf00      	nop
 8017040:	2000a538 	.word	0x2000a538

08017044 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8017044:	b480      	push	{r7}
 8017046:	b085      	sub	sp, #20
 8017048:	af00      	add	r7, sp, #0
 801704a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801704c:	2300      	movs	r3, #0
 801704e:	60fb      	str	r3, [r7, #12]
 8017050:	e016      	b.n	8017080 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8017052:	4a10      	ldr	r2, [pc, #64]	; (8017094 <vQueueUnregisterQueue+0x50>)
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	00db      	lsls	r3, r3, #3
 8017058:	4413      	add	r3, r2
 801705a:	685b      	ldr	r3, [r3, #4]
 801705c:	687a      	ldr	r2, [r7, #4]
 801705e:	429a      	cmp	r2, r3
 8017060:	d10b      	bne.n	801707a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8017062:	4a0c      	ldr	r2, [pc, #48]	; (8017094 <vQueueUnregisterQueue+0x50>)
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	2100      	movs	r1, #0
 8017068:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801706c:	4a09      	ldr	r2, [pc, #36]	; (8017094 <vQueueUnregisterQueue+0x50>)
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	00db      	lsls	r3, r3, #3
 8017072:	4413      	add	r3, r2
 8017074:	2200      	movs	r2, #0
 8017076:	605a      	str	r2, [r3, #4]
				break;
 8017078:	e006      	b.n	8017088 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801707a:	68fb      	ldr	r3, [r7, #12]
 801707c:	3301      	adds	r3, #1
 801707e:	60fb      	str	r3, [r7, #12]
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	2b07      	cmp	r3, #7
 8017084:	d9e5      	bls.n	8017052 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8017086:	bf00      	nop
 8017088:	bf00      	nop
 801708a:	3714      	adds	r7, #20
 801708c:	46bd      	mov	sp, r7
 801708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017092:	4770      	bx	lr
 8017094:	2000a538 	.word	0x2000a538

08017098 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017098:	b580      	push	{r7, lr}
 801709a:	b086      	sub	sp, #24
 801709c:	af00      	add	r7, sp, #0
 801709e:	60f8      	str	r0, [r7, #12]
 80170a0:	60b9      	str	r1, [r7, #8]
 80170a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80170a8:	f001 fdec 	bl	8018c84 <vPortEnterCritical>
 80170ac:	697b      	ldr	r3, [r7, #20]
 80170ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80170b2:	b25b      	sxtb	r3, r3
 80170b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80170b8:	d103      	bne.n	80170c2 <vQueueWaitForMessageRestricted+0x2a>
 80170ba:	697b      	ldr	r3, [r7, #20]
 80170bc:	2200      	movs	r2, #0
 80170be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80170c2:	697b      	ldr	r3, [r7, #20]
 80170c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80170c8:	b25b      	sxtb	r3, r3
 80170ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80170ce:	d103      	bne.n	80170d8 <vQueueWaitForMessageRestricted+0x40>
 80170d0:	697b      	ldr	r3, [r7, #20]
 80170d2:	2200      	movs	r2, #0
 80170d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80170d8:	f001 fe04 	bl	8018ce4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80170dc:	697b      	ldr	r3, [r7, #20]
 80170de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d106      	bne.n	80170f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80170e4:	697b      	ldr	r3, [r7, #20]
 80170e6:	3324      	adds	r3, #36	; 0x24
 80170e8:	687a      	ldr	r2, [r7, #4]
 80170ea:	68b9      	ldr	r1, [r7, #8]
 80170ec:	4618      	mov	r0, r3
 80170ee:	f000 fd89 	bl	8017c04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80170f2:	6978      	ldr	r0, [r7, #20]
 80170f4:	f7ff fefb 	bl	8016eee <prvUnlockQueue>
	}
 80170f8:	bf00      	nop
 80170fa:	3718      	adds	r7, #24
 80170fc:	46bd      	mov	sp, r7
 80170fe:	bd80      	pop	{r7, pc}

08017100 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017100:	b580      	push	{r7, lr}
 8017102:	b08e      	sub	sp, #56	; 0x38
 8017104:	af04      	add	r7, sp, #16
 8017106:	60f8      	str	r0, [r7, #12]
 8017108:	60b9      	str	r1, [r7, #8]
 801710a:	607a      	str	r2, [r7, #4]
 801710c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801710e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017110:	2b00      	cmp	r3, #0
 8017112:	d10a      	bne.n	801712a <xTaskCreateStatic+0x2a>
	__asm volatile
 8017114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017118:	f383 8811 	msr	BASEPRI, r3
 801711c:	f3bf 8f6f 	isb	sy
 8017120:	f3bf 8f4f 	dsb	sy
 8017124:	623b      	str	r3, [r7, #32]
}
 8017126:	bf00      	nop
 8017128:	e7fe      	b.n	8017128 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801712a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801712c:	2b00      	cmp	r3, #0
 801712e:	d10a      	bne.n	8017146 <xTaskCreateStatic+0x46>
	__asm volatile
 8017130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017134:	f383 8811 	msr	BASEPRI, r3
 8017138:	f3bf 8f6f 	isb	sy
 801713c:	f3bf 8f4f 	dsb	sy
 8017140:	61fb      	str	r3, [r7, #28]
}
 8017142:	bf00      	nop
 8017144:	e7fe      	b.n	8017144 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017146:	235c      	movs	r3, #92	; 0x5c
 8017148:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801714a:	693b      	ldr	r3, [r7, #16]
 801714c:	2b5c      	cmp	r3, #92	; 0x5c
 801714e:	d00a      	beq.n	8017166 <xTaskCreateStatic+0x66>
	__asm volatile
 8017150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017154:	f383 8811 	msr	BASEPRI, r3
 8017158:	f3bf 8f6f 	isb	sy
 801715c:	f3bf 8f4f 	dsb	sy
 8017160:	61bb      	str	r3, [r7, #24]
}
 8017162:	bf00      	nop
 8017164:	e7fe      	b.n	8017164 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017166:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801716a:	2b00      	cmp	r3, #0
 801716c:	d01e      	beq.n	80171ac <xTaskCreateStatic+0xac>
 801716e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017170:	2b00      	cmp	r3, #0
 8017172:	d01b      	beq.n	80171ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017176:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801717a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801717c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801717e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017180:	2202      	movs	r2, #2
 8017182:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017186:	2300      	movs	r3, #0
 8017188:	9303      	str	r3, [sp, #12]
 801718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801718c:	9302      	str	r3, [sp, #8]
 801718e:	f107 0314 	add.w	r3, r7, #20
 8017192:	9301      	str	r3, [sp, #4]
 8017194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017196:	9300      	str	r3, [sp, #0]
 8017198:	683b      	ldr	r3, [r7, #0]
 801719a:	687a      	ldr	r2, [r7, #4]
 801719c:	68b9      	ldr	r1, [r7, #8]
 801719e:	68f8      	ldr	r0, [r7, #12]
 80171a0:	f000 f850 	bl	8017244 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80171a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80171a6:	f000 f8dd 	bl	8017364 <prvAddNewTaskToReadyList>
 80171aa:	e001      	b.n	80171b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80171ac:	2300      	movs	r3, #0
 80171ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80171b0:	697b      	ldr	r3, [r7, #20]
	}
 80171b2:	4618      	mov	r0, r3
 80171b4:	3728      	adds	r7, #40	; 0x28
 80171b6:	46bd      	mov	sp, r7
 80171b8:	bd80      	pop	{r7, pc}

080171ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80171ba:	b580      	push	{r7, lr}
 80171bc:	b08c      	sub	sp, #48	; 0x30
 80171be:	af04      	add	r7, sp, #16
 80171c0:	60f8      	str	r0, [r7, #12]
 80171c2:	60b9      	str	r1, [r7, #8]
 80171c4:	603b      	str	r3, [r7, #0]
 80171c6:	4613      	mov	r3, r2
 80171c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80171ca:	88fb      	ldrh	r3, [r7, #6]
 80171cc:	009b      	lsls	r3, r3, #2
 80171ce:	4618      	mov	r0, r3
 80171d0:	f001 fe7a 	bl	8018ec8 <pvPortMalloc>
 80171d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80171d6:	697b      	ldr	r3, [r7, #20]
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d00e      	beq.n	80171fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80171dc:	205c      	movs	r0, #92	; 0x5c
 80171de:	f001 fe73 	bl	8018ec8 <pvPortMalloc>
 80171e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80171e4:	69fb      	ldr	r3, [r7, #28]
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d003      	beq.n	80171f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80171ea:	69fb      	ldr	r3, [r7, #28]
 80171ec:	697a      	ldr	r2, [r7, #20]
 80171ee:	631a      	str	r2, [r3, #48]	; 0x30
 80171f0:	e005      	b.n	80171fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80171f2:	6978      	ldr	r0, [r7, #20]
 80171f4:	f001 ff34 	bl	8019060 <vPortFree>
 80171f8:	e001      	b.n	80171fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80171fa:	2300      	movs	r3, #0
 80171fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80171fe:	69fb      	ldr	r3, [r7, #28]
 8017200:	2b00      	cmp	r3, #0
 8017202:	d017      	beq.n	8017234 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017204:	69fb      	ldr	r3, [r7, #28]
 8017206:	2200      	movs	r2, #0
 8017208:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801720c:	88fa      	ldrh	r2, [r7, #6]
 801720e:	2300      	movs	r3, #0
 8017210:	9303      	str	r3, [sp, #12]
 8017212:	69fb      	ldr	r3, [r7, #28]
 8017214:	9302      	str	r3, [sp, #8]
 8017216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017218:	9301      	str	r3, [sp, #4]
 801721a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801721c:	9300      	str	r3, [sp, #0]
 801721e:	683b      	ldr	r3, [r7, #0]
 8017220:	68b9      	ldr	r1, [r7, #8]
 8017222:	68f8      	ldr	r0, [r7, #12]
 8017224:	f000 f80e 	bl	8017244 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017228:	69f8      	ldr	r0, [r7, #28]
 801722a:	f000 f89b 	bl	8017364 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801722e:	2301      	movs	r3, #1
 8017230:	61bb      	str	r3, [r7, #24]
 8017232:	e002      	b.n	801723a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017238:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801723a:	69bb      	ldr	r3, [r7, #24]
	}
 801723c:	4618      	mov	r0, r3
 801723e:	3720      	adds	r7, #32
 8017240:	46bd      	mov	sp, r7
 8017242:	bd80      	pop	{r7, pc}

08017244 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017244:	b580      	push	{r7, lr}
 8017246:	b088      	sub	sp, #32
 8017248:	af00      	add	r7, sp, #0
 801724a:	60f8      	str	r0, [r7, #12]
 801724c:	60b9      	str	r1, [r7, #8]
 801724e:	607a      	str	r2, [r7, #4]
 8017250:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017254:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	009b      	lsls	r3, r3, #2
 801725a:	461a      	mov	r2, r3
 801725c:	21a5      	movs	r1, #165	; 0xa5
 801725e:	f002 f865 	bl	801932c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801726c:	3b01      	subs	r3, #1
 801726e:	009b      	lsls	r3, r3, #2
 8017270:	4413      	add	r3, r2
 8017272:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017274:	69bb      	ldr	r3, [r7, #24]
 8017276:	f023 0307 	bic.w	r3, r3, #7
 801727a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801727c:	69bb      	ldr	r3, [r7, #24]
 801727e:	f003 0307 	and.w	r3, r3, #7
 8017282:	2b00      	cmp	r3, #0
 8017284:	d00a      	beq.n	801729c <prvInitialiseNewTask+0x58>
	__asm volatile
 8017286:	f04f 0350 	mov.w	r3, #80	; 0x50
 801728a:	f383 8811 	msr	BASEPRI, r3
 801728e:	f3bf 8f6f 	isb	sy
 8017292:	f3bf 8f4f 	dsb	sy
 8017296:	617b      	str	r3, [r7, #20]
}
 8017298:	bf00      	nop
 801729a:	e7fe      	b.n	801729a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801729c:	68bb      	ldr	r3, [r7, #8]
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d01f      	beq.n	80172e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80172a2:	2300      	movs	r3, #0
 80172a4:	61fb      	str	r3, [r7, #28]
 80172a6:	e012      	b.n	80172ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80172a8:	68ba      	ldr	r2, [r7, #8]
 80172aa:	69fb      	ldr	r3, [r7, #28]
 80172ac:	4413      	add	r3, r2
 80172ae:	7819      	ldrb	r1, [r3, #0]
 80172b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80172b2:	69fb      	ldr	r3, [r7, #28]
 80172b4:	4413      	add	r3, r2
 80172b6:	3334      	adds	r3, #52	; 0x34
 80172b8:	460a      	mov	r2, r1
 80172ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80172bc:	68ba      	ldr	r2, [r7, #8]
 80172be:	69fb      	ldr	r3, [r7, #28]
 80172c0:	4413      	add	r3, r2
 80172c2:	781b      	ldrb	r3, [r3, #0]
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d006      	beq.n	80172d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80172c8:	69fb      	ldr	r3, [r7, #28]
 80172ca:	3301      	adds	r3, #1
 80172cc:	61fb      	str	r3, [r7, #28]
 80172ce:	69fb      	ldr	r3, [r7, #28]
 80172d0:	2b0f      	cmp	r3, #15
 80172d2:	d9e9      	bls.n	80172a8 <prvInitialiseNewTask+0x64>
 80172d4:	e000      	b.n	80172d8 <prvInitialiseNewTask+0x94>
			{
				break;
 80172d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80172d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172da:	2200      	movs	r2, #0
 80172dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80172e0:	e003      	b.n	80172ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80172e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172e4:	2200      	movs	r2, #0
 80172e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80172ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172ec:	2b37      	cmp	r3, #55	; 0x37
 80172ee:	d901      	bls.n	80172f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80172f0:	2337      	movs	r3, #55	; 0x37
 80172f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80172f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80172f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80172fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80172fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8017300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017302:	2200      	movs	r2, #0
 8017304:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017308:	3304      	adds	r3, #4
 801730a:	4618      	mov	r0, r3
 801730c:	f7fe fe56 	bl	8015fbc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017312:	3318      	adds	r3, #24
 8017314:	4618      	mov	r0, r3
 8017316:	f7fe fe51 	bl	8015fbc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801731a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801731c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801731e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017322:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017328:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801732a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801732c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801732e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017332:	2200      	movs	r2, #0
 8017334:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017338:	2200      	movs	r2, #0
 801733a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801733e:	683a      	ldr	r2, [r7, #0]
 8017340:	68f9      	ldr	r1, [r7, #12]
 8017342:	69b8      	ldr	r0, [r7, #24]
 8017344:	f001 fb74 	bl	8018a30 <pxPortInitialiseStack>
 8017348:	4602      	mov	r2, r0
 801734a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801734c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801734e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017350:	2b00      	cmp	r3, #0
 8017352:	d002      	beq.n	801735a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017356:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017358:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801735a:	bf00      	nop
 801735c:	3720      	adds	r7, #32
 801735e:	46bd      	mov	sp, r7
 8017360:	bd80      	pop	{r7, pc}
	...

08017364 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017364:	b580      	push	{r7, lr}
 8017366:	b082      	sub	sp, #8
 8017368:	af00      	add	r7, sp, #0
 801736a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801736c:	f001 fc8a 	bl	8018c84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017370:	4b2d      	ldr	r3, [pc, #180]	; (8017428 <prvAddNewTaskToReadyList+0xc4>)
 8017372:	681b      	ldr	r3, [r3, #0]
 8017374:	3301      	adds	r3, #1
 8017376:	4a2c      	ldr	r2, [pc, #176]	; (8017428 <prvAddNewTaskToReadyList+0xc4>)
 8017378:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801737a:	4b2c      	ldr	r3, [pc, #176]	; (801742c <prvAddNewTaskToReadyList+0xc8>)
 801737c:	681b      	ldr	r3, [r3, #0]
 801737e:	2b00      	cmp	r3, #0
 8017380:	d109      	bne.n	8017396 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017382:	4a2a      	ldr	r2, [pc, #168]	; (801742c <prvAddNewTaskToReadyList+0xc8>)
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017388:	4b27      	ldr	r3, [pc, #156]	; (8017428 <prvAddNewTaskToReadyList+0xc4>)
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	2b01      	cmp	r3, #1
 801738e:	d110      	bne.n	80173b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017390:	f000 fd64 	bl	8017e5c <prvInitialiseTaskLists>
 8017394:	e00d      	b.n	80173b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8017396:	4b26      	ldr	r3, [pc, #152]	; (8017430 <prvAddNewTaskToReadyList+0xcc>)
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	2b00      	cmp	r3, #0
 801739c:	d109      	bne.n	80173b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801739e:	4b23      	ldr	r3, [pc, #140]	; (801742c <prvAddNewTaskToReadyList+0xc8>)
 80173a0:	681b      	ldr	r3, [r3, #0]
 80173a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173a8:	429a      	cmp	r2, r3
 80173aa:	d802      	bhi.n	80173b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80173ac:	4a1f      	ldr	r2, [pc, #124]	; (801742c <prvAddNewTaskToReadyList+0xc8>)
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80173b2:	4b20      	ldr	r3, [pc, #128]	; (8017434 <prvAddNewTaskToReadyList+0xd0>)
 80173b4:	681b      	ldr	r3, [r3, #0]
 80173b6:	3301      	adds	r3, #1
 80173b8:	4a1e      	ldr	r2, [pc, #120]	; (8017434 <prvAddNewTaskToReadyList+0xd0>)
 80173ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80173bc:	4b1d      	ldr	r3, [pc, #116]	; (8017434 <prvAddNewTaskToReadyList+0xd0>)
 80173be:	681a      	ldr	r2, [r3, #0]
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173c8:	4b1b      	ldr	r3, [pc, #108]	; (8017438 <prvAddNewTaskToReadyList+0xd4>)
 80173ca:	681b      	ldr	r3, [r3, #0]
 80173cc:	429a      	cmp	r2, r3
 80173ce:	d903      	bls.n	80173d8 <prvAddNewTaskToReadyList+0x74>
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173d4:	4a18      	ldr	r2, [pc, #96]	; (8017438 <prvAddNewTaskToReadyList+0xd4>)
 80173d6:	6013      	str	r3, [r2, #0]
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173dc:	4613      	mov	r3, r2
 80173de:	009b      	lsls	r3, r3, #2
 80173e0:	4413      	add	r3, r2
 80173e2:	009b      	lsls	r3, r3, #2
 80173e4:	4a15      	ldr	r2, [pc, #84]	; (801743c <prvAddNewTaskToReadyList+0xd8>)
 80173e6:	441a      	add	r2, r3
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	3304      	adds	r3, #4
 80173ec:	4619      	mov	r1, r3
 80173ee:	4610      	mov	r0, r2
 80173f0:	f7fe fdf1 	bl	8015fd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80173f4:	f001 fc76 	bl	8018ce4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80173f8:	4b0d      	ldr	r3, [pc, #52]	; (8017430 <prvAddNewTaskToReadyList+0xcc>)
 80173fa:	681b      	ldr	r3, [r3, #0]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d00e      	beq.n	801741e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017400:	4b0a      	ldr	r3, [pc, #40]	; (801742c <prvAddNewTaskToReadyList+0xc8>)
 8017402:	681b      	ldr	r3, [r3, #0]
 8017404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801740a:	429a      	cmp	r2, r3
 801740c:	d207      	bcs.n	801741e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801740e:	4b0c      	ldr	r3, [pc, #48]	; (8017440 <prvAddNewTaskToReadyList+0xdc>)
 8017410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017414:	601a      	str	r2, [r3, #0]
 8017416:	f3bf 8f4f 	dsb	sy
 801741a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801741e:	bf00      	nop
 8017420:	3708      	adds	r7, #8
 8017422:	46bd      	mov	sp, r7
 8017424:	bd80      	pop	{r7, pc}
 8017426:	bf00      	nop
 8017428:	20001cc8 	.word	0x20001cc8
 801742c:	200017f4 	.word	0x200017f4
 8017430:	20001cd4 	.word	0x20001cd4
 8017434:	20001ce4 	.word	0x20001ce4
 8017438:	20001cd0 	.word	0x20001cd0
 801743c:	200017f8 	.word	0x200017f8
 8017440:	e000ed04 	.word	0xe000ed04

08017444 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8017444:	b580      	push	{r7, lr}
 8017446:	b084      	sub	sp, #16
 8017448:	af00      	add	r7, sp, #0
 801744a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801744c:	f001 fc1a 	bl	8018c84 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	2b00      	cmp	r3, #0
 8017454:	d102      	bne.n	801745c <vTaskDelete+0x18>
 8017456:	4b2c      	ldr	r3, [pc, #176]	; (8017508 <vTaskDelete+0xc4>)
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	e000      	b.n	801745e <vTaskDelete+0x1a>
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	3304      	adds	r3, #4
 8017464:	4618      	mov	r0, r3
 8017466:	f7fe fe13 	bl	8016090 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801746a:	68fb      	ldr	r3, [r7, #12]
 801746c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801746e:	2b00      	cmp	r3, #0
 8017470:	d004      	beq.n	801747c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017472:	68fb      	ldr	r3, [r7, #12]
 8017474:	3318      	adds	r3, #24
 8017476:	4618      	mov	r0, r3
 8017478:	f7fe fe0a 	bl	8016090 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 801747c:	4b23      	ldr	r3, [pc, #140]	; (801750c <vTaskDelete+0xc8>)
 801747e:	681b      	ldr	r3, [r3, #0]
 8017480:	3301      	adds	r3, #1
 8017482:	4a22      	ldr	r2, [pc, #136]	; (801750c <vTaskDelete+0xc8>)
 8017484:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8017486:	4b20      	ldr	r3, [pc, #128]	; (8017508 <vTaskDelete+0xc4>)
 8017488:	681b      	ldr	r3, [r3, #0]
 801748a:	68fa      	ldr	r2, [r7, #12]
 801748c:	429a      	cmp	r2, r3
 801748e:	d10b      	bne.n	80174a8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	3304      	adds	r3, #4
 8017494:	4619      	mov	r1, r3
 8017496:	481e      	ldr	r0, [pc, #120]	; (8017510 <vTaskDelete+0xcc>)
 8017498:	f7fe fd9d 	bl	8015fd6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 801749c:	4b1d      	ldr	r3, [pc, #116]	; (8017514 <vTaskDelete+0xd0>)
 801749e:	681b      	ldr	r3, [r3, #0]
 80174a0:	3301      	adds	r3, #1
 80174a2:	4a1c      	ldr	r2, [pc, #112]	; (8017514 <vTaskDelete+0xd0>)
 80174a4:	6013      	str	r3, [r2, #0]
 80174a6:	e009      	b.n	80174bc <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80174a8:	4b1b      	ldr	r3, [pc, #108]	; (8017518 <vTaskDelete+0xd4>)
 80174aa:	681b      	ldr	r3, [r3, #0]
 80174ac:	3b01      	subs	r3, #1
 80174ae:	4a1a      	ldr	r2, [pc, #104]	; (8017518 <vTaskDelete+0xd4>)
 80174b0:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80174b2:	68f8      	ldr	r0, [r7, #12]
 80174b4:	f000 fd40 	bl	8017f38 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80174b8:	f000 fd6e 	bl	8017f98 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80174bc:	f001 fc12 	bl	8018ce4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80174c0:	4b16      	ldr	r3, [pc, #88]	; (801751c <vTaskDelete+0xd8>)
 80174c2:	681b      	ldr	r3, [r3, #0]
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d01b      	beq.n	8017500 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80174c8:	4b0f      	ldr	r3, [pc, #60]	; (8017508 <vTaskDelete+0xc4>)
 80174ca:	681b      	ldr	r3, [r3, #0]
 80174cc:	68fa      	ldr	r2, [r7, #12]
 80174ce:	429a      	cmp	r2, r3
 80174d0:	d116      	bne.n	8017500 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80174d2:	4b13      	ldr	r3, [pc, #76]	; (8017520 <vTaskDelete+0xdc>)
 80174d4:	681b      	ldr	r3, [r3, #0]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d00a      	beq.n	80174f0 <vTaskDelete+0xac>
	__asm volatile
 80174da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174de:	f383 8811 	msr	BASEPRI, r3
 80174e2:	f3bf 8f6f 	isb	sy
 80174e6:	f3bf 8f4f 	dsb	sy
 80174ea:	60bb      	str	r3, [r7, #8]
}
 80174ec:	bf00      	nop
 80174ee:	e7fe      	b.n	80174ee <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80174f0:	4b0c      	ldr	r3, [pc, #48]	; (8017524 <vTaskDelete+0xe0>)
 80174f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80174f6:	601a      	str	r2, [r3, #0]
 80174f8:	f3bf 8f4f 	dsb	sy
 80174fc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017500:	bf00      	nop
 8017502:	3710      	adds	r7, #16
 8017504:	46bd      	mov	sp, r7
 8017506:	bd80      	pop	{r7, pc}
 8017508:	200017f4 	.word	0x200017f4
 801750c:	20001ce4 	.word	0x20001ce4
 8017510:	20001c9c 	.word	0x20001c9c
 8017514:	20001cb0 	.word	0x20001cb0
 8017518:	20001cc8 	.word	0x20001cc8
 801751c:	20001cd4 	.word	0x20001cd4
 8017520:	20001cf0 	.word	0x20001cf0
 8017524:	e000ed04 	.word	0xe000ed04

08017528 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017528:	b580      	push	{r7, lr}
 801752a:	b084      	sub	sp, #16
 801752c:	af00      	add	r7, sp, #0
 801752e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017530:	2300      	movs	r3, #0
 8017532:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	2b00      	cmp	r3, #0
 8017538:	d017      	beq.n	801756a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801753a:	4b13      	ldr	r3, [pc, #76]	; (8017588 <vTaskDelay+0x60>)
 801753c:	681b      	ldr	r3, [r3, #0]
 801753e:	2b00      	cmp	r3, #0
 8017540:	d00a      	beq.n	8017558 <vTaskDelay+0x30>
	__asm volatile
 8017542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017546:	f383 8811 	msr	BASEPRI, r3
 801754a:	f3bf 8f6f 	isb	sy
 801754e:	f3bf 8f4f 	dsb	sy
 8017552:	60bb      	str	r3, [r7, #8]
}
 8017554:	bf00      	nop
 8017556:	e7fe      	b.n	8017556 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8017558:	f000 f95c 	bl	8017814 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801755c:	2100      	movs	r1, #0
 801755e:	6878      	ldr	r0, [r7, #4]
 8017560:	f000 fec4 	bl	80182ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8017564:	f000 f964 	bl	8017830 <xTaskResumeAll>
 8017568:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801756a:	68fb      	ldr	r3, [r7, #12]
 801756c:	2b00      	cmp	r3, #0
 801756e:	d107      	bne.n	8017580 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8017570:	4b06      	ldr	r3, [pc, #24]	; (801758c <vTaskDelay+0x64>)
 8017572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017576:	601a      	str	r2, [r3, #0]
 8017578:	f3bf 8f4f 	dsb	sy
 801757c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017580:	bf00      	nop
 8017582:	3710      	adds	r7, #16
 8017584:	46bd      	mov	sp, r7
 8017586:	bd80      	pop	{r7, pc}
 8017588:	20001cf0 	.word	0x20001cf0
 801758c:	e000ed04 	.word	0xe000ed04

08017590 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8017590:	b580      	push	{r7, lr}
 8017592:	b088      	sub	sp, #32
 8017594:	af00      	add	r7, sp, #0
 8017596:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 801759c:	69bb      	ldr	r3, [r7, #24]
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d10a      	bne.n	80175b8 <eTaskGetState+0x28>
	__asm volatile
 80175a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175a6:	f383 8811 	msr	BASEPRI, r3
 80175aa:	f3bf 8f6f 	isb	sy
 80175ae:	f3bf 8f4f 	dsb	sy
 80175b2:	60bb      	str	r3, [r7, #8]
}
 80175b4:	bf00      	nop
 80175b6:	e7fe      	b.n	80175b6 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80175b8:	4b23      	ldr	r3, [pc, #140]	; (8017648 <eTaskGetState+0xb8>)
 80175ba:	681b      	ldr	r3, [r3, #0]
 80175bc:	69ba      	ldr	r2, [r7, #24]
 80175be:	429a      	cmp	r2, r3
 80175c0:	d102      	bne.n	80175c8 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80175c2:	2300      	movs	r3, #0
 80175c4:	77fb      	strb	r3, [r7, #31]
 80175c6:	e03a      	b.n	801763e <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 80175c8:	f001 fb5c 	bl	8018c84 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80175cc:	69bb      	ldr	r3, [r7, #24]
 80175ce:	695b      	ldr	r3, [r3, #20]
 80175d0:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80175d2:	4b1e      	ldr	r3, [pc, #120]	; (801764c <eTaskGetState+0xbc>)
 80175d4:	681b      	ldr	r3, [r3, #0]
 80175d6:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80175d8:	4b1d      	ldr	r3, [pc, #116]	; (8017650 <eTaskGetState+0xc0>)
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80175de:	f001 fb81 	bl	8018ce4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80175e2:	697a      	ldr	r2, [r7, #20]
 80175e4:	693b      	ldr	r3, [r7, #16]
 80175e6:	429a      	cmp	r2, r3
 80175e8:	d003      	beq.n	80175f2 <eTaskGetState+0x62>
 80175ea:	697a      	ldr	r2, [r7, #20]
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	429a      	cmp	r2, r3
 80175f0:	d102      	bne.n	80175f8 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80175f2:	2302      	movs	r3, #2
 80175f4:	77fb      	strb	r3, [r7, #31]
 80175f6:	e022      	b.n	801763e <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80175f8:	697b      	ldr	r3, [r7, #20]
 80175fa:	4a16      	ldr	r2, [pc, #88]	; (8017654 <eTaskGetState+0xc4>)
 80175fc:	4293      	cmp	r3, r2
 80175fe:	d112      	bne.n	8017626 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8017600:	69bb      	ldr	r3, [r7, #24]
 8017602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017604:	2b00      	cmp	r3, #0
 8017606:	d10b      	bne.n	8017620 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8017608:	69bb      	ldr	r3, [r7, #24]
 801760a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801760e:	b2db      	uxtb	r3, r3
 8017610:	2b01      	cmp	r3, #1
 8017612:	d102      	bne.n	801761a <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8017614:	2302      	movs	r3, #2
 8017616:	77fb      	strb	r3, [r7, #31]
 8017618:	e011      	b.n	801763e <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 801761a:	2303      	movs	r3, #3
 801761c:	77fb      	strb	r3, [r7, #31]
 801761e:	e00e      	b.n	801763e <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8017620:	2302      	movs	r3, #2
 8017622:	77fb      	strb	r3, [r7, #31]
 8017624:	e00b      	b.n	801763e <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8017626:	697b      	ldr	r3, [r7, #20]
 8017628:	4a0b      	ldr	r2, [pc, #44]	; (8017658 <eTaskGetState+0xc8>)
 801762a:	4293      	cmp	r3, r2
 801762c:	d002      	beq.n	8017634 <eTaskGetState+0xa4>
 801762e:	697b      	ldr	r3, [r7, #20]
 8017630:	2b00      	cmp	r3, #0
 8017632:	d102      	bne.n	801763a <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8017634:	2304      	movs	r3, #4
 8017636:	77fb      	strb	r3, [r7, #31]
 8017638:	e001      	b.n	801763e <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 801763a:	2301      	movs	r3, #1
 801763c:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 801763e:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8017640:	4618      	mov	r0, r3
 8017642:	3720      	adds	r7, #32
 8017644:	46bd      	mov	sp, r7
 8017646:	bd80      	pop	{r7, pc}
 8017648:	200017f4 	.word	0x200017f4
 801764c:	20001c80 	.word	0x20001c80
 8017650:	20001c84 	.word	0x20001c84
 8017654:	20001cb4 	.word	0x20001cb4
 8017658:	20001c9c 	.word	0x20001c9c

0801765c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 801765c:	b580      	push	{r7, lr}
 801765e:	b084      	sub	sp, #16
 8017660:	af00      	add	r7, sp, #0
 8017662:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8017664:	f001 fb0e 	bl	8018c84 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	2b00      	cmp	r3, #0
 801766c:	d102      	bne.n	8017674 <vTaskSuspend+0x18>
 801766e:	4b30      	ldr	r3, [pc, #192]	; (8017730 <vTaskSuspend+0xd4>)
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	e000      	b.n	8017676 <vTaskSuspend+0x1a>
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	3304      	adds	r3, #4
 801767c:	4618      	mov	r0, r3
 801767e:	f7fe fd07 	bl	8016090 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017686:	2b00      	cmp	r3, #0
 8017688:	d004      	beq.n	8017694 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801768a:	68fb      	ldr	r3, [r7, #12]
 801768c:	3318      	adds	r3, #24
 801768e:	4618      	mov	r0, r3
 8017690:	f7fe fcfe 	bl	8016090 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	3304      	adds	r3, #4
 8017698:	4619      	mov	r1, r3
 801769a:	4826      	ldr	r0, [pc, #152]	; (8017734 <vTaskSuspend+0xd8>)
 801769c:	f7fe fc9b 	bl	8015fd6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80176a0:	68fb      	ldr	r3, [r7, #12]
 80176a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80176a6:	b2db      	uxtb	r3, r3
 80176a8:	2b01      	cmp	r3, #1
 80176aa:	d103      	bne.n	80176b4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	2200      	movs	r2, #0
 80176b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80176b4:	f001 fb16 	bl	8018ce4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80176b8:	4b1f      	ldr	r3, [pc, #124]	; (8017738 <vTaskSuspend+0xdc>)
 80176ba:	681b      	ldr	r3, [r3, #0]
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d005      	beq.n	80176cc <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80176c0:	f001 fae0 	bl	8018c84 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80176c4:	f000 fc68 	bl	8017f98 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80176c8:	f001 fb0c 	bl	8018ce4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80176cc:	4b18      	ldr	r3, [pc, #96]	; (8017730 <vTaskSuspend+0xd4>)
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	68fa      	ldr	r2, [r7, #12]
 80176d2:	429a      	cmp	r2, r3
 80176d4:	d127      	bne.n	8017726 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80176d6:	4b18      	ldr	r3, [pc, #96]	; (8017738 <vTaskSuspend+0xdc>)
 80176d8:	681b      	ldr	r3, [r3, #0]
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d017      	beq.n	801770e <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80176de:	4b17      	ldr	r3, [pc, #92]	; (801773c <vTaskSuspend+0xe0>)
 80176e0:	681b      	ldr	r3, [r3, #0]
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d00a      	beq.n	80176fc <vTaskSuspend+0xa0>
	__asm volatile
 80176e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176ea:	f383 8811 	msr	BASEPRI, r3
 80176ee:	f3bf 8f6f 	isb	sy
 80176f2:	f3bf 8f4f 	dsb	sy
 80176f6:	60bb      	str	r3, [r7, #8]
}
 80176f8:	bf00      	nop
 80176fa:	e7fe      	b.n	80176fa <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80176fc:	4b10      	ldr	r3, [pc, #64]	; (8017740 <vTaskSuspend+0xe4>)
 80176fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017702:	601a      	str	r2, [r3, #0]
 8017704:	f3bf 8f4f 	dsb	sy
 8017708:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801770c:	e00b      	b.n	8017726 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 801770e:	4b09      	ldr	r3, [pc, #36]	; (8017734 <vTaskSuspend+0xd8>)
 8017710:	681a      	ldr	r2, [r3, #0]
 8017712:	4b0c      	ldr	r3, [pc, #48]	; (8017744 <vTaskSuspend+0xe8>)
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	429a      	cmp	r2, r3
 8017718:	d103      	bne.n	8017722 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 801771a:	4b05      	ldr	r3, [pc, #20]	; (8017730 <vTaskSuspend+0xd4>)
 801771c:	2200      	movs	r2, #0
 801771e:	601a      	str	r2, [r3, #0]
	}
 8017720:	e001      	b.n	8017726 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8017722:	f000 f9ed 	bl	8017b00 <vTaskSwitchContext>
	}
 8017726:	bf00      	nop
 8017728:	3710      	adds	r7, #16
 801772a:	46bd      	mov	sp, r7
 801772c:	bd80      	pop	{r7, pc}
 801772e:	bf00      	nop
 8017730:	200017f4 	.word	0x200017f4
 8017734:	20001cb4 	.word	0x20001cb4
 8017738:	20001cd4 	.word	0x20001cd4
 801773c:	20001cf0 	.word	0x20001cf0
 8017740:	e000ed04 	.word	0xe000ed04
 8017744:	20001cc8 	.word	0x20001cc8

08017748 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017748:	b580      	push	{r7, lr}
 801774a:	b08a      	sub	sp, #40	; 0x28
 801774c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801774e:	2300      	movs	r3, #0
 8017750:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017752:	2300      	movs	r3, #0
 8017754:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017756:	463a      	mov	r2, r7
 8017758:	1d39      	adds	r1, r7, #4
 801775a:	f107 0308 	add.w	r3, r7, #8
 801775e:	4618      	mov	r0, r3
 8017760:	f7fe fbd8 	bl	8015f14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017764:	6839      	ldr	r1, [r7, #0]
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	68ba      	ldr	r2, [r7, #8]
 801776a:	9202      	str	r2, [sp, #8]
 801776c:	9301      	str	r3, [sp, #4]
 801776e:	2300      	movs	r3, #0
 8017770:	9300      	str	r3, [sp, #0]
 8017772:	2300      	movs	r3, #0
 8017774:	460a      	mov	r2, r1
 8017776:	4921      	ldr	r1, [pc, #132]	; (80177fc <vTaskStartScheduler+0xb4>)
 8017778:	4821      	ldr	r0, [pc, #132]	; (8017800 <vTaskStartScheduler+0xb8>)
 801777a:	f7ff fcc1 	bl	8017100 <xTaskCreateStatic>
 801777e:	4603      	mov	r3, r0
 8017780:	4a20      	ldr	r2, [pc, #128]	; (8017804 <vTaskStartScheduler+0xbc>)
 8017782:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8017784:	4b1f      	ldr	r3, [pc, #124]	; (8017804 <vTaskStartScheduler+0xbc>)
 8017786:	681b      	ldr	r3, [r3, #0]
 8017788:	2b00      	cmp	r3, #0
 801778a:	d002      	beq.n	8017792 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801778c:	2301      	movs	r3, #1
 801778e:	617b      	str	r3, [r7, #20]
 8017790:	e001      	b.n	8017796 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8017792:	2300      	movs	r3, #0
 8017794:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8017796:	697b      	ldr	r3, [r7, #20]
 8017798:	2b01      	cmp	r3, #1
 801779a:	d102      	bne.n	80177a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801779c:	f000 fdfa 	bl	8018394 <xTimerCreateTimerTask>
 80177a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80177a2:	697b      	ldr	r3, [r7, #20]
 80177a4:	2b01      	cmp	r3, #1
 80177a6:	d116      	bne.n	80177d6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80177a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177ac:	f383 8811 	msr	BASEPRI, r3
 80177b0:	f3bf 8f6f 	isb	sy
 80177b4:	f3bf 8f4f 	dsb	sy
 80177b8:	613b      	str	r3, [r7, #16]
}
 80177ba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80177bc:	4b12      	ldr	r3, [pc, #72]	; (8017808 <vTaskStartScheduler+0xc0>)
 80177be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80177c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80177c4:	4b11      	ldr	r3, [pc, #68]	; (801780c <vTaskStartScheduler+0xc4>)
 80177c6:	2201      	movs	r2, #1
 80177c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80177ca:	4b11      	ldr	r3, [pc, #68]	; (8017810 <vTaskStartScheduler+0xc8>)
 80177cc:	2200      	movs	r2, #0
 80177ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80177d0:	f001 f9b6 	bl	8018b40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80177d4:	e00e      	b.n	80177f4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80177d6:	697b      	ldr	r3, [r7, #20]
 80177d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80177dc:	d10a      	bne.n	80177f4 <vTaskStartScheduler+0xac>
	__asm volatile
 80177de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177e2:	f383 8811 	msr	BASEPRI, r3
 80177e6:	f3bf 8f6f 	isb	sy
 80177ea:	f3bf 8f4f 	dsb	sy
 80177ee:	60fb      	str	r3, [r7, #12]
}
 80177f0:	bf00      	nop
 80177f2:	e7fe      	b.n	80177f2 <vTaskStartScheduler+0xaa>
}
 80177f4:	bf00      	nop
 80177f6:	3718      	adds	r7, #24
 80177f8:	46bd      	mov	sp, r7
 80177fa:	bd80      	pop	{r7, pc}
 80177fc:	08020548 	.word	0x08020548
 8017800:	08017e2d 	.word	0x08017e2d
 8017804:	20001cec 	.word	0x20001cec
 8017808:	20001ce8 	.word	0x20001ce8
 801780c:	20001cd4 	.word	0x20001cd4
 8017810:	20001ccc 	.word	0x20001ccc

08017814 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017814:	b480      	push	{r7}
 8017816:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8017818:	4b04      	ldr	r3, [pc, #16]	; (801782c <vTaskSuspendAll+0x18>)
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	3301      	adds	r3, #1
 801781e:	4a03      	ldr	r2, [pc, #12]	; (801782c <vTaskSuspendAll+0x18>)
 8017820:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8017822:	bf00      	nop
 8017824:	46bd      	mov	sp, r7
 8017826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801782a:	4770      	bx	lr
 801782c:	20001cf0 	.word	0x20001cf0

08017830 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017830:	b580      	push	{r7, lr}
 8017832:	b084      	sub	sp, #16
 8017834:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8017836:	2300      	movs	r3, #0
 8017838:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801783a:	2300      	movs	r3, #0
 801783c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801783e:	4b42      	ldr	r3, [pc, #264]	; (8017948 <xTaskResumeAll+0x118>)
 8017840:	681b      	ldr	r3, [r3, #0]
 8017842:	2b00      	cmp	r3, #0
 8017844:	d10a      	bne.n	801785c <xTaskResumeAll+0x2c>
	__asm volatile
 8017846:	f04f 0350 	mov.w	r3, #80	; 0x50
 801784a:	f383 8811 	msr	BASEPRI, r3
 801784e:	f3bf 8f6f 	isb	sy
 8017852:	f3bf 8f4f 	dsb	sy
 8017856:	603b      	str	r3, [r7, #0]
}
 8017858:	bf00      	nop
 801785a:	e7fe      	b.n	801785a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801785c:	f001 fa12 	bl	8018c84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8017860:	4b39      	ldr	r3, [pc, #228]	; (8017948 <xTaskResumeAll+0x118>)
 8017862:	681b      	ldr	r3, [r3, #0]
 8017864:	3b01      	subs	r3, #1
 8017866:	4a38      	ldr	r2, [pc, #224]	; (8017948 <xTaskResumeAll+0x118>)
 8017868:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801786a:	4b37      	ldr	r3, [pc, #220]	; (8017948 <xTaskResumeAll+0x118>)
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	2b00      	cmp	r3, #0
 8017870:	d162      	bne.n	8017938 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017872:	4b36      	ldr	r3, [pc, #216]	; (801794c <xTaskResumeAll+0x11c>)
 8017874:	681b      	ldr	r3, [r3, #0]
 8017876:	2b00      	cmp	r3, #0
 8017878:	d05e      	beq.n	8017938 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801787a:	e02f      	b.n	80178dc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801787c:	4b34      	ldr	r3, [pc, #208]	; (8017950 <xTaskResumeAll+0x120>)
 801787e:	68db      	ldr	r3, [r3, #12]
 8017880:	68db      	ldr	r3, [r3, #12]
 8017882:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	3318      	adds	r3, #24
 8017888:	4618      	mov	r0, r3
 801788a:	f7fe fc01 	bl	8016090 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801788e:	68fb      	ldr	r3, [r7, #12]
 8017890:	3304      	adds	r3, #4
 8017892:	4618      	mov	r0, r3
 8017894:	f7fe fbfc 	bl	8016090 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017898:	68fb      	ldr	r3, [r7, #12]
 801789a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801789c:	4b2d      	ldr	r3, [pc, #180]	; (8017954 <xTaskResumeAll+0x124>)
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	429a      	cmp	r2, r3
 80178a2:	d903      	bls.n	80178ac <xTaskResumeAll+0x7c>
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80178a8:	4a2a      	ldr	r2, [pc, #168]	; (8017954 <xTaskResumeAll+0x124>)
 80178aa:	6013      	str	r3, [r2, #0]
 80178ac:	68fb      	ldr	r3, [r7, #12]
 80178ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80178b0:	4613      	mov	r3, r2
 80178b2:	009b      	lsls	r3, r3, #2
 80178b4:	4413      	add	r3, r2
 80178b6:	009b      	lsls	r3, r3, #2
 80178b8:	4a27      	ldr	r2, [pc, #156]	; (8017958 <xTaskResumeAll+0x128>)
 80178ba:	441a      	add	r2, r3
 80178bc:	68fb      	ldr	r3, [r7, #12]
 80178be:	3304      	adds	r3, #4
 80178c0:	4619      	mov	r1, r3
 80178c2:	4610      	mov	r0, r2
 80178c4:	f7fe fb87 	bl	8015fd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80178c8:	68fb      	ldr	r3, [r7, #12]
 80178ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80178cc:	4b23      	ldr	r3, [pc, #140]	; (801795c <xTaskResumeAll+0x12c>)
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80178d2:	429a      	cmp	r2, r3
 80178d4:	d302      	bcc.n	80178dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80178d6:	4b22      	ldr	r3, [pc, #136]	; (8017960 <xTaskResumeAll+0x130>)
 80178d8:	2201      	movs	r2, #1
 80178da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80178dc:	4b1c      	ldr	r3, [pc, #112]	; (8017950 <xTaskResumeAll+0x120>)
 80178de:	681b      	ldr	r3, [r3, #0]
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d1cb      	bne.n	801787c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d001      	beq.n	80178ee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80178ea:	f000 fb55 	bl	8017f98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80178ee:	4b1d      	ldr	r3, [pc, #116]	; (8017964 <xTaskResumeAll+0x134>)
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	d010      	beq.n	801791c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80178fa:	f000 f847 	bl	801798c <xTaskIncrementTick>
 80178fe:	4603      	mov	r3, r0
 8017900:	2b00      	cmp	r3, #0
 8017902:	d002      	beq.n	801790a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8017904:	4b16      	ldr	r3, [pc, #88]	; (8017960 <xTaskResumeAll+0x130>)
 8017906:	2201      	movs	r2, #1
 8017908:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	3b01      	subs	r3, #1
 801790e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	2b00      	cmp	r3, #0
 8017914:	d1f1      	bne.n	80178fa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8017916:	4b13      	ldr	r3, [pc, #76]	; (8017964 <xTaskResumeAll+0x134>)
 8017918:	2200      	movs	r2, #0
 801791a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801791c:	4b10      	ldr	r3, [pc, #64]	; (8017960 <xTaskResumeAll+0x130>)
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	2b00      	cmp	r3, #0
 8017922:	d009      	beq.n	8017938 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017924:	2301      	movs	r3, #1
 8017926:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017928:	4b0f      	ldr	r3, [pc, #60]	; (8017968 <xTaskResumeAll+0x138>)
 801792a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801792e:	601a      	str	r2, [r3, #0]
 8017930:	f3bf 8f4f 	dsb	sy
 8017934:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017938:	f001 f9d4 	bl	8018ce4 <vPortExitCritical>

	return xAlreadyYielded;
 801793c:	68bb      	ldr	r3, [r7, #8]
}
 801793e:	4618      	mov	r0, r3
 8017940:	3710      	adds	r7, #16
 8017942:	46bd      	mov	sp, r7
 8017944:	bd80      	pop	{r7, pc}
 8017946:	bf00      	nop
 8017948:	20001cf0 	.word	0x20001cf0
 801794c:	20001cc8 	.word	0x20001cc8
 8017950:	20001c88 	.word	0x20001c88
 8017954:	20001cd0 	.word	0x20001cd0
 8017958:	200017f8 	.word	0x200017f8
 801795c:	200017f4 	.word	0x200017f4
 8017960:	20001cdc 	.word	0x20001cdc
 8017964:	20001cd8 	.word	0x20001cd8
 8017968:	e000ed04 	.word	0xe000ed04

0801796c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801796c:	b480      	push	{r7}
 801796e:	b083      	sub	sp, #12
 8017970:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8017972:	4b05      	ldr	r3, [pc, #20]	; (8017988 <xTaskGetTickCount+0x1c>)
 8017974:	681b      	ldr	r3, [r3, #0]
 8017976:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017978:	687b      	ldr	r3, [r7, #4]
}
 801797a:	4618      	mov	r0, r3
 801797c:	370c      	adds	r7, #12
 801797e:	46bd      	mov	sp, r7
 8017980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017984:	4770      	bx	lr
 8017986:	bf00      	nop
 8017988:	20001ccc 	.word	0x20001ccc

0801798c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801798c:	b580      	push	{r7, lr}
 801798e:	b086      	sub	sp, #24
 8017990:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8017992:	2300      	movs	r3, #0
 8017994:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017996:	4b4f      	ldr	r3, [pc, #316]	; (8017ad4 <xTaskIncrementTick+0x148>)
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	2b00      	cmp	r3, #0
 801799c:	f040 808f 	bne.w	8017abe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80179a0:	4b4d      	ldr	r3, [pc, #308]	; (8017ad8 <xTaskIncrementTick+0x14c>)
 80179a2:	681b      	ldr	r3, [r3, #0]
 80179a4:	3301      	adds	r3, #1
 80179a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80179a8:	4a4b      	ldr	r2, [pc, #300]	; (8017ad8 <xTaskIncrementTick+0x14c>)
 80179aa:	693b      	ldr	r3, [r7, #16]
 80179ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80179ae:	693b      	ldr	r3, [r7, #16]
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	d120      	bne.n	80179f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80179b4:	4b49      	ldr	r3, [pc, #292]	; (8017adc <xTaskIncrementTick+0x150>)
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d00a      	beq.n	80179d4 <xTaskIncrementTick+0x48>
	__asm volatile
 80179be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179c2:	f383 8811 	msr	BASEPRI, r3
 80179c6:	f3bf 8f6f 	isb	sy
 80179ca:	f3bf 8f4f 	dsb	sy
 80179ce:	603b      	str	r3, [r7, #0]
}
 80179d0:	bf00      	nop
 80179d2:	e7fe      	b.n	80179d2 <xTaskIncrementTick+0x46>
 80179d4:	4b41      	ldr	r3, [pc, #260]	; (8017adc <xTaskIncrementTick+0x150>)
 80179d6:	681b      	ldr	r3, [r3, #0]
 80179d8:	60fb      	str	r3, [r7, #12]
 80179da:	4b41      	ldr	r3, [pc, #260]	; (8017ae0 <xTaskIncrementTick+0x154>)
 80179dc:	681b      	ldr	r3, [r3, #0]
 80179de:	4a3f      	ldr	r2, [pc, #252]	; (8017adc <xTaskIncrementTick+0x150>)
 80179e0:	6013      	str	r3, [r2, #0]
 80179e2:	4a3f      	ldr	r2, [pc, #252]	; (8017ae0 <xTaskIncrementTick+0x154>)
 80179e4:	68fb      	ldr	r3, [r7, #12]
 80179e6:	6013      	str	r3, [r2, #0]
 80179e8:	4b3e      	ldr	r3, [pc, #248]	; (8017ae4 <xTaskIncrementTick+0x158>)
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	3301      	adds	r3, #1
 80179ee:	4a3d      	ldr	r2, [pc, #244]	; (8017ae4 <xTaskIncrementTick+0x158>)
 80179f0:	6013      	str	r3, [r2, #0]
 80179f2:	f000 fad1 	bl	8017f98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80179f6:	4b3c      	ldr	r3, [pc, #240]	; (8017ae8 <xTaskIncrementTick+0x15c>)
 80179f8:	681b      	ldr	r3, [r3, #0]
 80179fa:	693a      	ldr	r2, [r7, #16]
 80179fc:	429a      	cmp	r2, r3
 80179fe:	d349      	bcc.n	8017a94 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017a00:	4b36      	ldr	r3, [pc, #216]	; (8017adc <xTaskIncrementTick+0x150>)
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d104      	bne.n	8017a14 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017a0a:	4b37      	ldr	r3, [pc, #220]	; (8017ae8 <xTaskIncrementTick+0x15c>)
 8017a0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017a10:	601a      	str	r2, [r3, #0]
					break;
 8017a12:	e03f      	b.n	8017a94 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017a14:	4b31      	ldr	r3, [pc, #196]	; (8017adc <xTaskIncrementTick+0x150>)
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	68db      	ldr	r3, [r3, #12]
 8017a1a:	68db      	ldr	r3, [r3, #12]
 8017a1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017a1e:	68bb      	ldr	r3, [r7, #8]
 8017a20:	685b      	ldr	r3, [r3, #4]
 8017a22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017a24:	693a      	ldr	r2, [r7, #16]
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	429a      	cmp	r2, r3
 8017a2a:	d203      	bcs.n	8017a34 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017a2c:	4a2e      	ldr	r2, [pc, #184]	; (8017ae8 <xTaskIncrementTick+0x15c>)
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017a32:	e02f      	b.n	8017a94 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017a34:	68bb      	ldr	r3, [r7, #8]
 8017a36:	3304      	adds	r3, #4
 8017a38:	4618      	mov	r0, r3
 8017a3a:	f7fe fb29 	bl	8016090 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017a3e:	68bb      	ldr	r3, [r7, #8]
 8017a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d004      	beq.n	8017a50 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017a46:	68bb      	ldr	r3, [r7, #8]
 8017a48:	3318      	adds	r3, #24
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	f7fe fb20 	bl	8016090 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017a50:	68bb      	ldr	r3, [r7, #8]
 8017a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a54:	4b25      	ldr	r3, [pc, #148]	; (8017aec <xTaskIncrementTick+0x160>)
 8017a56:	681b      	ldr	r3, [r3, #0]
 8017a58:	429a      	cmp	r2, r3
 8017a5a:	d903      	bls.n	8017a64 <xTaskIncrementTick+0xd8>
 8017a5c:	68bb      	ldr	r3, [r7, #8]
 8017a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a60:	4a22      	ldr	r2, [pc, #136]	; (8017aec <xTaskIncrementTick+0x160>)
 8017a62:	6013      	str	r3, [r2, #0]
 8017a64:	68bb      	ldr	r3, [r7, #8]
 8017a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a68:	4613      	mov	r3, r2
 8017a6a:	009b      	lsls	r3, r3, #2
 8017a6c:	4413      	add	r3, r2
 8017a6e:	009b      	lsls	r3, r3, #2
 8017a70:	4a1f      	ldr	r2, [pc, #124]	; (8017af0 <xTaskIncrementTick+0x164>)
 8017a72:	441a      	add	r2, r3
 8017a74:	68bb      	ldr	r3, [r7, #8]
 8017a76:	3304      	adds	r3, #4
 8017a78:	4619      	mov	r1, r3
 8017a7a:	4610      	mov	r0, r2
 8017a7c:	f7fe faab 	bl	8015fd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017a80:	68bb      	ldr	r3, [r7, #8]
 8017a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a84:	4b1b      	ldr	r3, [pc, #108]	; (8017af4 <xTaskIncrementTick+0x168>)
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a8a:	429a      	cmp	r2, r3
 8017a8c:	d3b8      	bcc.n	8017a00 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8017a8e:	2301      	movs	r3, #1
 8017a90:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017a92:	e7b5      	b.n	8017a00 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017a94:	4b17      	ldr	r3, [pc, #92]	; (8017af4 <xTaskIncrementTick+0x168>)
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a9a:	4915      	ldr	r1, [pc, #84]	; (8017af0 <xTaskIncrementTick+0x164>)
 8017a9c:	4613      	mov	r3, r2
 8017a9e:	009b      	lsls	r3, r3, #2
 8017aa0:	4413      	add	r3, r2
 8017aa2:	009b      	lsls	r3, r3, #2
 8017aa4:	440b      	add	r3, r1
 8017aa6:	681b      	ldr	r3, [r3, #0]
 8017aa8:	2b01      	cmp	r3, #1
 8017aaa:	d901      	bls.n	8017ab0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8017aac:	2301      	movs	r3, #1
 8017aae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8017ab0:	4b11      	ldr	r3, [pc, #68]	; (8017af8 <xTaskIncrementTick+0x16c>)
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d007      	beq.n	8017ac8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8017ab8:	2301      	movs	r3, #1
 8017aba:	617b      	str	r3, [r7, #20]
 8017abc:	e004      	b.n	8017ac8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8017abe:	4b0f      	ldr	r3, [pc, #60]	; (8017afc <xTaskIncrementTick+0x170>)
 8017ac0:	681b      	ldr	r3, [r3, #0]
 8017ac2:	3301      	adds	r3, #1
 8017ac4:	4a0d      	ldr	r2, [pc, #52]	; (8017afc <xTaskIncrementTick+0x170>)
 8017ac6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8017ac8:	697b      	ldr	r3, [r7, #20]
}
 8017aca:	4618      	mov	r0, r3
 8017acc:	3718      	adds	r7, #24
 8017ace:	46bd      	mov	sp, r7
 8017ad0:	bd80      	pop	{r7, pc}
 8017ad2:	bf00      	nop
 8017ad4:	20001cf0 	.word	0x20001cf0
 8017ad8:	20001ccc 	.word	0x20001ccc
 8017adc:	20001c80 	.word	0x20001c80
 8017ae0:	20001c84 	.word	0x20001c84
 8017ae4:	20001ce0 	.word	0x20001ce0
 8017ae8:	20001ce8 	.word	0x20001ce8
 8017aec:	20001cd0 	.word	0x20001cd0
 8017af0:	200017f8 	.word	0x200017f8
 8017af4:	200017f4 	.word	0x200017f4
 8017af8:	20001cdc 	.word	0x20001cdc
 8017afc:	20001cd8 	.word	0x20001cd8

08017b00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017b00:	b480      	push	{r7}
 8017b02:	b085      	sub	sp, #20
 8017b04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017b06:	4b28      	ldr	r3, [pc, #160]	; (8017ba8 <vTaskSwitchContext+0xa8>)
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	d003      	beq.n	8017b16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017b0e:	4b27      	ldr	r3, [pc, #156]	; (8017bac <vTaskSwitchContext+0xac>)
 8017b10:	2201      	movs	r2, #1
 8017b12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017b14:	e041      	b.n	8017b9a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8017b16:	4b25      	ldr	r3, [pc, #148]	; (8017bac <vTaskSwitchContext+0xac>)
 8017b18:	2200      	movs	r2, #0
 8017b1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017b1c:	4b24      	ldr	r3, [pc, #144]	; (8017bb0 <vTaskSwitchContext+0xb0>)
 8017b1e:	681b      	ldr	r3, [r3, #0]
 8017b20:	60fb      	str	r3, [r7, #12]
 8017b22:	e010      	b.n	8017b46 <vTaskSwitchContext+0x46>
 8017b24:	68fb      	ldr	r3, [r7, #12]
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d10a      	bne.n	8017b40 <vTaskSwitchContext+0x40>
	__asm volatile
 8017b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b2e:	f383 8811 	msr	BASEPRI, r3
 8017b32:	f3bf 8f6f 	isb	sy
 8017b36:	f3bf 8f4f 	dsb	sy
 8017b3a:	607b      	str	r3, [r7, #4]
}
 8017b3c:	bf00      	nop
 8017b3e:	e7fe      	b.n	8017b3e <vTaskSwitchContext+0x3e>
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	3b01      	subs	r3, #1
 8017b44:	60fb      	str	r3, [r7, #12]
 8017b46:	491b      	ldr	r1, [pc, #108]	; (8017bb4 <vTaskSwitchContext+0xb4>)
 8017b48:	68fa      	ldr	r2, [r7, #12]
 8017b4a:	4613      	mov	r3, r2
 8017b4c:	009b      	lsls	r3, r3, #2
 8017b4e:	4413      	add	r3, r2
 8017b50:	009b      	lsls	r3, r3, #2
 8017b52:	440b      	add	r3, r1
 8017b54:	681b      	ldr	r3, [r3, #0]
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d0e4      	beq.n	8017b24 <vTaskSwitchContext+0x24>
 8017b5a:	68fa      	ldr	r2, [r7, #12]
 8017b5c:	4613      	mov	r3, r2
 8017b5e:	009b      	lsls	r3, r3, #2
 8017b60:	4413      	add	r3, r2
 8017b62:	009b      	lsls	r3, r3, #2
 8017b64:	4a13      	ldr	r2, [pc, #76]	; (8017bb4 <vTaskSwitchContext+0xb4>)
 8017b66:	4413      	add	r3, r2
 8017b68:	60bb      	str	r3, [r7, #8]
 8017b6a:	68bb      	ldr	r3, [r7, #8]
 8017b6c:	685b      	ldr	r3, [r3, #4]
 8017b6e:	685a      	ldr	r2, [r3, #4]
 8017b70:	68bb      	ldr	r3, [r7, #8]
 8017b72:	605a      	str	r2, [r3, #4]
 8017b74:	68bb      	ldr	r3, [r7, #8]
 8017b76:	685a      	ldr	r2, [r3, #4]
 8017b78:	68bb      	ldr	r3, [r7, #8]
 8017b7a:	3308      	adds	r3, #8
 8017b7c:	429a      	cmp	r2, r3
 8017b7e:	d104      	bne.n	8017b8a <vTaskSwitchContext+0x8a>
 8017b80:	68bb      	ldr	r3, [r7, #8]
 8017b82:	685b      	ldr	r3, [r3, #4]
 8017b84:	685a      	ldr	r2, [r3, #4]
 8017b86:	68bb      	ldr	r3, [r7, #8]
 8017b88:	605a      	str	r2, [r3, #4]
 8017b8a:	68bb      	ldr	r3, [r7, #8]
 8017b8c:	685b      	ldr	r3, [r3, #4]
 8017b8e:	68db      	ldr	r3, [r3, #12]
 8017b90:	4a09      	ldr	r2, [pc, #36]	; (8017bb8 <vTaskSwitchContext+0xb8>)
 8017b92:	6013      	str	r3, [r2, #0]
 8017b94:	4a06      	ldr	r2, [pc, #24]	; (8017bb0 <vTaskSwitchContext+0xb0>)
 8017b96:	68fb      	ldr	r3, [r7, #12]
 8017b98:	6013      	str	r3, [r2, #0]
}
 8017b9a:	bf00      	nop
 8017b9c:	3714      	adds	r7, #20
 8017b9e:	46bd      	mov	sp, r7
 8017ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ba4:	4770      	bx	lr
 8017ba6:	bf00      	nop
 8017ba8:	20001cf0 	.word	0x20001cf0
 8017bac:	20001cdc 	.word	0x20001cdc
 8017bb0:	20001cd0 	.word	0x20001cd0
 8017bb4:	200017f8 	.word	0x200017f8
 8017bb8:	200017f4 	.word	0x200017f4

08017bbc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017bbc:	b580      	push	{r7, lr}
 8017bbe:	b084      	sub	sp, #16
 8017bc0:	af00      	add	r7, sp, #0
 8017bc2:	6078      	str	r0, [r7, #4]
 8017bc4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d10a      	bne.n	8017be2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8017bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bd0:	f383 8811 	msr	BASEPRI, r3
 8017bd4:	f3bf 8f6f 	isb	sy
 8017bd8:	f3bf 8f4f 	dsb	sy
 8017bdc:	60fb      	str	r3, [r7, #12]
}
 8017bde:	bf00      	nop
 8017be0:	e7fe      	b.n	8017be0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017be2:	4b07      	ldr	r3, [pc, #28]	; (8017c00 <vTaskPlaceOnEventList+0x44>)
 8017be4:	681b      	ldr	r3, [r3, #0]
 8017be6:	3318      	adds	r3, #24
 8017be8:	4619      	mov	r1, r3
 8017bea:	6878      	ldr	r0, [r7, #4]
 8017bec:	f7fe fa17 	bl	801601e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017bf0:	2101      	movs	r1, #1
 8017bf2:	6838      	ldr	r0, [r7, #0]
 8017bf4:	f000 fb7a 	bl	80182ec <prvAddCurrentTaskToDelayedList>
}
 8017bf8:	bf00      	nop
 8017bfa:	3710      	adds	r7, #16
 8017bfc:	46bd      	mov	sp, r7
 8017bfe:	bd80      	pop	{r7, pc}
 8017c00:	200017f4 	.word	0x200017f4

08017c04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017c04:	b580      	push	{r7, lr}
 8017c06:	b086      	sub	sp, #24
 8017c08:	af00      	add	r7, sp, #0
 8017c0a:	60f8      	str	r0, [r7, #12]
 8017c0c:	60b9      	str	r1, [r7, #8]
 8017c0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017c10:	68fb      	ldr	r3, [r7, #12]
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d10a      	bne.n	8017c2c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8017c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c1a:	f383 8811 	msr	BASEPRI, r3
 8017c1e:	f3bf 8f6f 	isb	sy
 8017c22:	f3bf 8f4f 	dsb	sy
 8017c26:	617b      	str	r3, [r7, #20]
}
 8017c28:	bf00      	nop
 8017c2a:	e7fe      	b.n	8017c2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017c2c:	4b0a      	ldr	r3, [pc, #40]	; (8017c58 <vTaskPlaceOnEventListRestricted+0x54>)
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	3318      	adds	r3, #24
 8017c32:	4619      	mov	r1, r3
 8017c34:	68f8      	ldr	r0, [r7, #12]
 8017c36:	f7fe f9ce 	bl	8015fd6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d002      	beq.n	8017c46 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8017c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017c44:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017c46:	6879      	ldr	r1, [r7, #4]
 8017c48:	68b8      	ldr	r0, [r7, #8]
 8017c4a:	f000 fb4f 	bl	80182ec <prvAddCurrentTaskToDelayedList>
	}
 8017c4e:	bf00      	nop
 8017c50:	3718      	adds	r7, #24
 8017c52:	46bd      	mov	sp, r7
 8017c54:	bd80      	pop	{r7, pc}
 8017c56:	bf00      	nop
 8017c58:	200017f4 	.word	0x200017f4

08017c5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017c5c:	b580      	push	{r7, lr}
 8017c5e:	b086      	sub	sp, #24
 8017c60:	af00      	add	r7, sp, #0
 8017c62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	68db      	ldr	r3, [r3, #12]
 8017c68:	68db      	ldr	r3, [r3, #12]
 8017c6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017c6c:	693b      	ldr	r3, [r7, #16]
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d10a      	bne.n	8017c88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8017c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c76:	f383 8811 	msr	BASEPRI, r3
 8017c7a:	f3bf 8f6f 	isb	sy
 8017c7e:	f3bf 8f4f 	dsb	sy
 8017c82:	60fb      	str	r3, [r7, #12]
}
 8017c84:	bf00      	nop
 8017c86:	e7fe      	b.n	8017c86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017c88:	693b      	ldr	r3, [r7, #16]
 8017c8a:	3318      	adds	r3, #24
 8017c8c:	4618      	mov	r0, r3
 8017c8e:	f7fe f9ff 	bl	8016090 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017c92:	4b1e      	ldr	r3, [pc, #120]	; (8017d0c <xTaskRemoveFromEventList+0xb0>)
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d11d      	bne.n	8017cd6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017c9a:	693b      	ldr	r3, [r7, #16]
 8017c9c:	3304      	adds	r3, #4
 8017c9e:	4618      	mov	r0, r3
 8017ca0:	f7fe f9f6 	bl	8016090 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017ca4:	693b      	ldr	r3, [r7, #16]
 8017ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ca8:	4b19      	ldr	r3, [pc, #100]	; (8017d10 <xTaskRemoveFromEventList+0xb4>)
 8017caa:	681b      	ldr	r3, [r3, #0]
 8017cac:	429a      	cmp	r2, r3
 8017cae:	d903      	bls.n	8017cb8 <xTaskRemoveFromEventList+0x5c>
 8017cb0:	693b      	ldr	r3, [r7, #16]
 8017cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017cb4:	4a16      	ldr	r2, [pc, #88]	; (8017d10 <xTaskRemoveFromEventList+0xb4>)
 8017cb6:	6013      	str	r3, [r2, #0]
 8017cb8:	693b      	ldr	r3, [r7, #16]
 8017cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017cbc:	4613      	mov	r3, r2
 8017cbe:	009b      	lsls	r3, r3, #2
 8017cc0:	4413      	add	r3, r2
 8017cc2:	009b      	lsls	r3, r3, #2
 8017cc4:	4a13      	ldr	r2, [pc, #76]	; (8017d14 <xTaskRemoveFromEventList+0xb8>)
 8017cc6:	441a      	add	r2, r3
 8017cc8:	693b      	ldr	r3, [r7, #16]
 8017cca:	3304      	adds	r3, #4
 8017ccc:	4619      	mov	r1, r3
 8017cce:	4610      	mov	r0, r2
 8017cd0:	f7fe f981 	bl	8015fd6 <vListInsertEnd>
 8017cd4:	e005      	b.n	8017ce2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017cd6:	693b      	ldr	r3, [r7, #16]
 8017cd8:	3318      	adds	r3, #24
 8017cda:	4619      	mov	r1, r3
 8017cdc:	480e      	ldr	r0, [pc, #56]	; (8017d18 <xTaskRemoveFromEventList+0xbc>)
 8017cde:	f7fe f97a 	bl	8015fd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017ce2:	693b      	ldr	r3, [r7, #16]
 8017ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ce6:	4b0d      	ldr	r3, [pc, #52]	; (8017d1c <xTaskRemoveFromEventList+0xc0>)
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017cec:	429a      	cmp	r2, r3
 8017cee:	d905      	bls.n	8017cfc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8017cf0:	2301      	movs	r3, #1
 8017cf2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8017cf4:	4b0a      	ldr	r3, [pc, #40]	; (8017d20 <xTaskRemoveFromEventList+0xc4>)
 8017cf6:	2201      	movs	r2, #1
 8017cf8:	601a      	str	r2, [r3, #0]
 8017cfa:	e001      	b.n	8017d00 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8017cfc:	2300      	movs	r3, #0
 8017cfe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8017d00:	697b      	ldr	r3, [r7, #20]
}
 8017d02:	4618      	mov	r0, r3
 8017d04:	3718      	adds	r7, #24
 8017d06:	46bd      	mov	sp, r7
 8017d08:	bd80      	pop	{r7, pc}
 8017d0a:	bf00      	nop
 8017d0c:	20001cf0 	.word	0x20001cf0
 8017d10:	20001cd0 	.word	0x20001cd0
 8017d14:	200017f8 	.word	0x200017f8
 8017d18:	20001c88 	.word	0x20001c88
 8017d1c:	200017f4 	.word	0x200017f4
 8017d20:	20001cdc 	.word	0x20001cdc

08017d24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017d24:	b480      	push	{r7}
 8017d26:	b083      	sub	sp, #12
 8017d28:	af00      	add	r7, sp, #0
 8017d2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017d2c:	4b06      	ldr	r3, [pc, #24]	; (8017d48 <vTaskInternalSetTimeOutState+0x24>)
 8017d2e:	681a      	ldr	r2, [r3, #0]
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017d34:	4b05      	ldr	r3, [pc, #20]	; (8017d4c <vTaskInternalSetTimeOutState+0x28>)
 8017d36:	681a      	ldr	r2, [r3, #0]
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	605a      	str	r2, [r3, #4]
}
 8017d3c:	bf00      	nop
 8017d3e:	370c      	adds	r7, #12
 8017d40:	46bd      	mov	sp, r7
 8017d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d46:	4770      	bx	lr
 8017d48:	20001ce0 	.word	0x20001ce0
 8017d4c:	20001ccc 	.word	0x20001ccc

08017d50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017d50:	b580      	push	{r7, lr}
 8017d52:	b088      	sub	sp, #32
 8017d54:	af00      	add	r7, sp, #0
 8017d56:	6078      	str	r0, [r7, #4]
 8017d58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d10a      	bne.n	8017d76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8017d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d64:	f383 8811 	msr	BASEPRI, r3
 8017d68:	f3bf 8f6f 	isb	sy
 8017d6c:	f3bf 8f4f 	dsb	sy
 8017d70:	613b      	str	r3, [r7, #16]
}
 8017d72:	bf00      	nop
 8017d74:	e7fe      	b.n	8017d74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8017d76:	683b      	ldr	r3, [r7, #0]
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d10a      	bne.n	8017d92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8017d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d80:	f383 8811 	msr	BASEPRI, r3
 8017d84:	f3bf 8f6f 	isb	sy
 8017d88:	f3bf 8f4f 	dsb	sy
 8017d8c:	60fb      	str	r3, [r7, #12]
}
 8017d8e:	bf00      	nop
 8017d90:	e7fe      	b.n	8017d90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8017d92:	f000 ff77 	bl	8018c84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8017d96:	4b1d      	ldr	r3, [pc, #116]	; (8017e0c <xTaskCheckForTimeOut+0xbc>)
 8017d98:	681b      	ldr	r3, [r3, #0]
 8017d9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	685b      	ldr	r3, [r3, #4]
 8017da0:	69ba      	ldr	r2, [r7, #24]
 8017da2:	1ad3      	subs	r3, r2, r3
 8017da4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8017da6:	683b      	ldr	r3, [r7, #0]
 8017da8:	681b      	ldr	r3, [r3, #0]
 8017daa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017dae:	d102      	bne.n	8017db6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017db0:	2300      	movs	r3, #0
 8017db2:	61fb      	str	r3, [r7, #28]
 8017db4:	e023      	b.n	8017dfe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	681a      	ldr	r2, [r3, #0]
 8017dba:	4b15      	ldr	r3, [pc, #84]	; (8017e10 <xTaskCheckForTimeOut+0xc0>)
 8017dbc:	681b      	ldr	r3, [r3, #0]
 8017dbe:	429a      	cmp	r2, r3
 8017dc0:	d007      	beq.n	8017dd2 <xTaskCheckForTimeOut+0x82>
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	685b      	ldr	r3, [r3, #4]
 8017dc6:	69ba      	ldr	r2, [r7, #24]
 8017dc8:	429a      	cmp	r2, r3
 8017dca:	d302      	bcc.n	8017dd2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017dcc:	2301      	movs	r3, #1
 8017dce:	61fb      	str	r3, [r7, #28]
 8017dd0:	e015      	b.n	8017dfe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017dd2:	683b      	ldr	r3, [r7, #0]
 8017dd4:	681b      	ldr	r3, [r3, #0]
 8017dd6:	697a      	ldr	r2, [r7, #20]
 8017dd8:	429a      	cmp	r2, r3
 8017dda:	d20b      	bcs.n	8017df4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017ddc:	683b      	ldr	r3, [r7, #0]
 8017dde:	681a      	ldr	r2, [r3, #0]
 8017de0:	697b      	ldr	r3, [r7, #20]
 8017de2:	1ad2      	subs	r2, r2, r3
 8017de4:	683b      	ldr	r3, [r7, #0]
 8017de6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8017de8:	6878      	ldr	r0, [r7, #4]
 8017dea:	f7ff ff9b 	bl	8017d24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8017dee:	2300      	movs	r3, #0
 8017df0:	61fb      	str	r3, [r7, #28]
 8017df2:	e004      	b.n	8017dfe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8017df4:	683b      	ldr	r3, [r7, #0]
 8017df6:	2200      	movs	r2, #0
 8017df8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8017dfa:	2301      	movs	r3, #1
 8017dfc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8017dfe:	f000 ff71 	bl	8018ce4 <vPortExitCritical>

	return xReturn;
 8017e02:	69fb      	ldr	r3, [r7, #28]
}
 8017e04:	4618      	mov	r0, r3
 8017e06:	3720      	adds	r7, #32
 8017e08:	46bd      	mov	sp, r7
 8017e0a:	bd80      	pop	{r7, pc}
 8017e0c:	20001ccc 	.word	0x20001ccc
 8017e10:	20001ce0 	.word	0x20001ce0

08017e14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017e14:	b480      	push	{r7}
 8017e16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8017e18:	4b03      	ldr	r3, [pc, #12]	; (8017e28 <vTaskMissedYield+0x14>)
 8017e1a:	2201      	movs	r2, #1
 8017e1c:	601a      	str	r2, [r3, #0]
}
 8017e1e:	bf00      	nop
 8017e20:	46bd      	mov	sp, r7
 8017e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e26:	4770      	bx	lr
 8017e28:	20001cdc 	.word	0x20001cdc

08017e2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017e2c:	b580      	push	{r7, lr}
 8017e2e:	b082      	sub	sp, #8
 8017e30:	af00      	add	r7, sp, #0
 8017e32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017e34:	f000 f852 	bl	8017edc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017e38:	4b06      	ldr	r3, [pc, #24]	; (8017e54 <prvIdleTask+0x28>)
 8017e3a:	681b      	ldr	r3, [r3, #0]
 8017e3c:	2b01      	cmp	r3, #1
 8017e3e:	d9f9      	bls.n	8017e34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8017e40:	4b05      	ldr	r3, [pc, #20]	; (8017e58 <prvIdleTask+0x2c>)
 8017e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017e46:	601a      	str	r2, [r3, #0]
 8017e48:	f3bf 8f4f 	dsb	sy
 8017e4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8017e50:	e7f0      	b.n	8017e34 <prvIdleTask+0x8>
 8017e52:	bf00      	nop
 8017e54:	200017f8 	.word	0x200017f8
 8017e58:	e000ed04 	.word	0xe000ed04

08017e5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017e5c:	b580      	push	{r7, lr}
 8017e5e:	b082      	sub	sp, #8
 8017e60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017e62:	2300      	movs	r3, #0
 8017e64:	607b      	str	r3, [r7, #4]
 8017e66:	e00c      	b.n	8017e82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017e68:	687a      	ldr	r2, [r7, #4]
 8017e6a:	4613      	mov	r3, r2
 8017e6c:	009b      	lsls	r3, r3, #2
 8017e6e:	4413      	add	r3, r2
 8017e70:	009b      	lsls	r3, r3, #2
 8017e72:	4a12      	ldr	r2, [pc, #72]	; (8017ebc <prvInitialiseTaskLists+0x60>)
 8017e74:	4413      	add	r3, r2
 8017e76:	4618      	mov	r0, r3
 8017e78:	f7fe f880 	bl	8015f7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	3301      	adds	r3, #1
 8017e80:	607b      	str	r3, [r7, #4]
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	2b37      	cmp	r3, #55	; 0x37
 8017e86:	d9ef      	bls.n	8017e68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017e88:	480d      	ldr	r0, [pc, #52]	; (8017ec0 <prvInitialiseTaskLists+0x64>)
 8017e8a:	f7fe f877 	bl	8015f7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017e8e:	480d      	ldr	r0, [pc, #52]	; (8017ec4 <prvInitialiseTaskLists+0x68>)
 8017e90:	f7fe f874 	bl	8015f7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017e94:	480c      	ldr	r0, [pc, #48]	; (8017ec8 <prvInitialiseTaskLists+0x6c>)
 8017e96:	f7fe f871 	bl	8015f7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8017e9a:	480c      	ldr	r0, [pc, #48]	; (8017ecc <prvInitialiseTaskLists+0x70>)
 8017e9c:	f7fe f86e 	bl	8015f7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017ea0:	480b      	ldr	r0, [pc, #44]	; (8017ed0 <prvInitialiseTaskLists+0x74>)
 8017ea2:	f7fe f86b 	bl	8015f7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8017ea6:	4b0b      	ldr	r3, [pc, #44]	; (8017ed4 <prvInitialiseTaskLists+0x78>)
 8017ea8:	4a05      	ldr	r2, [pc, #20]	; (8017ec0 <prvInitialiseTaskLists+0x64>)
 8017eaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017eac:	4b0a      	ldr	r3, [pc, #40]	; (8017ed8 <prvInitialiseTaskLists+0x7c>)
 8017eae:	4a05      	ldr	r2, [pc, #20]	; (8017ec4 <prvInitialiseTaskLists+0x68>)
 8017eb0:	601a      	str	r2, [r3, #0]
}
 8017eb2:	bf00      	nop
 8017eb4:	3708      	adds	r7, #8
 8017eb6:	46bd      	mov	sp, r7
 8017eb8:	bd80      	pop	{r7, pc}
 8017eba:	bf00      	nop
 8017ebc:	200017f8 	.word	0x200017f8
 8017ec0:	20001c58 	.word	0x20001c58
 8017ec4:	20001c6c 	.word	0x20001c6c
 8017ec8:	20001c88 	.word	0x20001c88
 8017ecc:	20001c9c 	.word	0x20001c9c
 8017ed0:	20001cb4 	.word	0x20001cb4
 8017ed4:	20001c80 	.word	0x20001c80
 8017ed8:	20001c84 	.word	0x20001c84

08017edc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017edc:	b580      	push	{r7, lr}
 8017ede:	b082      	sub	sp, #8
 8017ee0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017ee2:	e019      	b.n	8017f18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8017ee4:	f000 fece 	bl	8018c84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017ee8:	4b10      	ldr	r3, [pc, #64]	; (8017f2c <prvCheckTasksWaitingTermination+0x50>)
 8017eea:	68db      	ldr	r3, [r3, #12]
 8017eec:	68db      	ldr	r3, [r3, #12]
 8017eee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	3304      	adds	r3, #4
 8017ef4:	4618      	mov	r0, r3
 8017ef6:	f7fe f8cb 	bl	8016090 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8017efa:	4b0d      	ldr	r3, [pc, #52]	; (8017f30 <prvCheckTasksWaitingTermination+0x54>)
 8017efc:	681b      	ldr	r3, [r3, #0]
 8017efe:	3b01      	subs	r3, #1
 8017f00:	4a0b      	ldr	r2, [pc, #44]	; (8017f30 <prvCheckTasksWaitingTermination+0x54>)
 8017f02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017f04:	4b0b      	ldr	r3, [pc, #44]	; (8017f34 <prvCheckTasksWaitingTermination+0x58>)
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	3b01      	subs	r3, #1
 8017f0a:	4a0a      	ldr	r2, [pc, #40]	; (8017f34 <prvCheckTasksWaitingTermination+0x58>)
 8017f0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017f0e:	f000 fee9 	bl	8018ce4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017f12:	6878      	ldr	r0, [r7, #4]
 8017f14:	f000 f810 	bl	8017f38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017f18:	4b06      	ldr	r3, [pc, #24]	; (8017f34 <prvCheckTasksWaitingTermination+0x58>)
 8017f1a:	681b      	ldr	r3, [r3, #0]
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d1e1      	bne.n	8017ee4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017f20:	bf00      	nop
 8017f22:	bf00      	nop
 8017f24:	3708      	adds	r7, #8
 8017f26:	46bd      	mov	sp, r7
 8017f28:	bd80      	pop	{r7, pc}
 8017f2a:	bf00      	nop
 8017f2c:	20001c9c 	.word	0x20001c9c
 8017f30:	20001cc8 	.word	0x20001cc8
 8017f34:	20001cb0 	.word	0x20001cb0

08017f38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017f38:	b580      	push	{r7, lr}
 8017f3a:	b084      	sub	sp, #16
 8017f3c:	af00      	add	r7, sp, #0
 8017f3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d108      	bne.n	8017f5c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f4e:	4618      	mov	r0, r3
 8017f50:	f001 f886 	bl	8019060 <vPortFree>
				vPortFree( pxTCB );
 8017f54:	6878      	ldr	r0, [r7, #4]
 8017f56:	f001 f883 	bl	8019060 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8017f5a:	e018      	b.n	8017f8e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8017f62:	2b01      	cmp	r3, #1
 8017f64:	d103      	bne.n	8017f6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8017f66:	6878      	ldr	r0, [r7, #4]
 8017f68:	f001 f87a 	bl	8019060 <vPortFree>
	}
 8017f6c:	e00f      	b.n	8017f8e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8017f74:	2b02      	cmp	r3, #2
 8017f76:	d00a      	beq.n	8017f8e <prvDeleteTCB+0x56>
	__asm volatile
 8017f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f7c:	f383 8811 	msr	BASEPRI, r3
 8017f80:	f3bf 8f6f 	isb	sy
 8017f84:	f3bf 8f4f 	dsb	sy
 8017f88:	60fb      	str	r3, [r7, #12]
}
 8017f8a:	bf00      	nop
 8017f8c:	e7fe      	b.n	8017f8c <prvDeleteTCB+0x54>
	}
 8017f8e:	bf00      	nop
 8017f90:	3710      	adds	r7, #16
 8017f92:	46bd      	mov	sp, r7
 8017f94:	bd80      	pop	{r7, pc}
	...

08017f98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017f98:	b480      	push	{r7}
 8017f9a:	b083      	sub	sp, #12
 8017f9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017f9e:	4b0c      	ldr	r3, [pc, #48]	; (8017fd0 <prvResetNextTaskUnblockTime+0x38>)
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	681b      	ldr	r3, [r3, #0]
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d104      	bne.n	8017fb2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017fa8:	4b0a      	ldr	r3, [pc, #40]	; (8017fd4 <prvResetNextTaskUnblockTime+0x3c>)
 8017faa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017fae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8017fb0:	e008      	b.n	8017fc4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017fb2:	4b07      	ldr	r3, [pc, #28]	; (8017fd0 <prvResetNextTaskUnblockTime+0x38>)
 8017fb4:	681b      	ldr	r3, [r3, #0]
 8017fb6:	68db      	ldr	r3, [r3, #12]
 8017fb8:	68db      	ldr	r3, [r3, #12]
 8017fba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	685b      	ldr	r3, [r3, #4]
 8017fc0:	4a04      	ldr	r2, [pc, #16]	; (8017fd4 <prvResetNextTaskUnblockTime+0x3c>)
 8017fc2:	6013      	str	r3, [r2, #0]
}
 8017fc4:	bf00      	nop
 8017fc6:	370c      	adds	r7, #12
 8017fc8:	46bd      	mov	sp, r7
 8017fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fce:	4770      	bx	lr
 8017fd0:	20001c80 	.word	0x20001c80
 8017fd4:	20001ce8 	.word	0x20001ce8

08017fd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017fd8:	b480      	push	{r7}
 8017fda:	b083      	sub	sp, #12
 8017fdc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8017fde:	4b0b      	ldr	r3, [pc, #44]	; (801800c <xTaskGetSchedulerState+0x34>)
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d102      	bne.n	8017fec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8017fe6:	2301      	movs	r3, #1
 8017fe8:	607b      	str	r3, [r7, #4]
 8017fea:	e008      	b.n	8017ffe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017fec:	4b08      	ldr	r3, [pc, #32]	; (8018010 <xTaskGetSchedulerState+0x38>)
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d102      	bne.n	8017ffa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017ff4:	2302      	movs	r3, #2
 8017ff6:	607b      	str	r3, [r7, #4]
 8017ff8:	e001      	b.n	8017ffe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017ffa:	2300      	movs	r3, #0
 8017ffc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8017ffe:	687b      	ldr	r3, [r7, #4]
	}
 8018000:	4618      	mov	r0, r3
 8018002:	370c      	adds	r7, #12
 8018004:	46bd      	mov	sp, r7
 8018006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801800a:	4770      	bx	lr
 801800c:	20001cd4 	.word	0x20001cd4
 8018010:	20001cf0 	.word	0x20001cf0

08018014 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8018014:	b580      	push	{r7, lr}
 8018016:	b084      	sub	sp, #16
 8018018:	af00      	add	r7, sp, #0
 801801a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8018020:	2300      	movs	r3, #0
 8018022:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	2b00      	cmp	r3, #0
 8018028:	d051      	beq.n	80180ce <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801802a:	68bb      	ldr	r3, [r7, #8]
 801802c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801802e:	4b2a      	ldr	r3, [pc, #168]	; (80180d8 <xTaskPriorityInherit+0xc4>)
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018034:	429a      	cmp	r2, r3
 8018036:	d241      	bcs.n	80180bc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018038:	68bb      	ldr	r3, [r7, #8]
 801803a:	699b      	ldr	r3, [r3, #24]
 801803c:	2b00      	cmp	r3, #0
 801803e:	db06      	blt.n	801804e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018040:	4b25      	ldr	r3, [pc, #148]	; (80180d8 <xTaskPriorityInherit+0xc4>)
 8018042:	681b      	ldr	r3, [r3, #0]
 8018044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018046:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801804a:	68bb      	ldr	r3, [r7, #8]
 801804c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801804e:	68bb      	ldr	r3, [r7, #8]
 8018050:	6959      	ldr	r1, [r3, #20]
 8018052:	68bb      	ldr	r3, [r7, #8]
 8018054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018056:	4613      	mov	r3, r2
 8018058:	009b      	lsls	r3, r3, #2
 801805a:	4413      	add	r3, r2
 801805c:	009b      	lsls	r3, r3, #2
 801805e:	4a1f      	ldr	r2, [pc, #124]	; (80180dc <xTaskPriorityInherit+0xc8>)
 8018060:	4413      	add	r3, r2
 8018062:	4299      	cmp	r1, r3
 8018064:	d122      	bne.n	80180ac <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018066:	68bb      	ldr	r3, [r7, #8]
 8018068:	3304      	adds	r3, #4
 801806a:	4618      	mov	r0, r3
 801806c:	f7fe f810 	bl	8016090 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018070:	4b19      	ldr	r3, [pc, #100]	; (80180d8 <xTaskPriorityInherit+0xc4>)
 8018072:	681b      	ldr	r3, [r3, #0]
 8018074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018076:	68bb      	ldr	r3, [r7, #8]
 8018078:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801807a:	68bb      	ldr	r3, [r7, #8]
 801807c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801807e:	4b18      	ldr	r3, [pc, #96]	; (80180e0 <xTaskPriorityInherit+0xcc>)
 8018080:	681b      	ldr	r3, [r3, #0]
 8018082:	429a      	cmp	r2, r3
 8018084:	d903      	bls.n	801808e <xTaskPriorityInherit+0x7a>
 8018086:	68bb      	ldr	r3, [r7, #8]
 8018088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801808a:	4a15      	ldr	r2, [pc, #84]	; (80180e0 <xTaskPriorityInherit+0xcc>)
 801808c:	6013      	str	r3, [r2, #0]
 801808e:	68bb      	ldr	r3, [r7, #8]
 8018090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018092:	4613      	mov	r3, r2
 8018094:	009b      	lsls	r3, r3, #2
 8018096:	4413      	add	r3, r2
 8018098:	009b      	lsls	r3, r3, #2
 801809a:	4a10      	ldr	r2, [pc, #64]	; (80180dc <xTaskPriorityInherit+0xc8>)
 801809c:	441a      	add	r2, r3
 801809e:	68bb      	ldr	r3, [r7, #8]
 80180a0:	3304      	adds	r3, #4
 80180a2:	4619      	mov	r1, r3
 80180a4:	4610      	mov	r0, r2
 80180a6:	f7fd ff96 	bl	8015fd6 <vListInsertEnd>
 80180aa:	e004      	b.n	80180b6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80180ac:	4b0a      	ldr	r3, [pc, #40]	; (80180d8 <xTaskPriorityInherit+0xc4>)
 80180ae:	681b      	ldr	r3, [r3, #0]
 80180b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80180b2:	68bb      	ldr	r3, [r7, #8]
 80180b4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80180b6:	2301      	movs	r3, #1
 80180b8:	60fb      	str	r3, [r7, #12]
 80180ba:	e008      	b.n	80180ce <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80180bc:	68bb      	ldr	r3, [r7, #8]
 80180be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80180c0:	4b05      	ldr	r3, [pc, #20]	; (80180d8 <xTaskPriorityInherit+0xc4>)
 80180c2:	681b      	ldr	r3, [r3, #0]
 80180c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180c6:	429a      	cmp	r2, r3
 80180c8:	d201      	bcs.n	80180ce <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80180ca:	2301      	movs	r3, #1
 80180cc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80180ce:	68fb      	ldr	r3, [r7, #12]
	}
 80180d0:	4618      	mov	r0, r3
 80180d2:	3710      	adds	r7, #16
 80180d4:	46bd      	mov	sp, r7
 80180d6:	bd80      	pop	{r7, pc}
 80180d8:	200017f4 	.word	0x200017f4
 80180dc:	200017f8 	.word	0x200017f8
 80180e0:	20001cd0 	.word	0x20001cd0

080180e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80180e4:	b580      	push	{r7, lr}
 80180e6:	b086      	sub	sp, #24
 80180e8:	af00      	add	r7, sp, #0
 80180ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80180f0:	2300      	movs	r3, #0
 80180f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	d056      	beq.n	80181a8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80180fa:	4b2e      	ldr	r3, [pc, #184]	; (80181b4 <xTaskPriorityDisinherit+0xd0>)
 80180fc:	681b      	ldr	r3, [r3, #0]
 80180fe:	693a      	ldr	r2, [r7, #16]
 8018100:	429a      	cmp	r2, r3
 8018102:	d00a      	beq.n	801811a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8018104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018108:	f383 8811 	msr	BASEPRI, r3
 801810c:	f3bf 8f6f 	isb	sy
 8018110:	f3bf 8f4f 	dsb	sy
 8018114:	60fb      	str	r3, [r7, #12]
}
 8018116:	bf00      	nop
 8018118:	e7fe      	b.n	8018118 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801811a:	693b      	ldr	r3, [r7, #16]
 801811c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801811e:	2b00      	cmp	r3, #0
 8018120:	d10a      	bne.n	8018138 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8018122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018126:	f383 8811 	msr	BASEPRI, r3
 801812a:	f3bf 8f6f 	isb	sy
 801812e:	f3bf 8f4f 	dsb	sy
 8018132:	60bb      	str	r3, [r7, #8]
}
 8018134:	bf00      	nop
 8018136:	e7fe      	b.n	8018136 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8018138:	693b      	ldr	r3, [r7, #16]
 801813a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801813c:	1e5a      	subs	r2, r3, #1
 801813e:	693b      	ldr	r3, [r7, #16]
 8018140:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018142:	693b      	ldr	r3, [r7, #16]
 8018144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018146:	693b      	ldr	r3, [r7, #16]
 8018148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801814a:	429a      	cmp	r2, r3
 801814c:	d02c      	beq.n	80181a8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801814e:	693b      	ldr	r3, [r7, #16]
 8018150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018152:	2b00      	cmp	r3, #0
 8018154:	d128      	bne.n	80181a8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018156:	693b      	ldr	r3, [r7, #16]
 8018158:	3304      	adds	r3, #4
 801815a:	4618      	mov	r0, r3
 801815c:	f7fd ff98 	bl	8016090 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018160:	693b      	ldr	r3, [r7, #16]
 8018162:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018164:	693b      	ldr	r3, [r7, #16]
 8018166:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018168:	693b      	ldr	r3, [r7, #16]
 801816a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801816c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018170:	693b      	ldr	r3, [r7, #16]
 8018172:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018174:	693b      	ldr	r3, [r7, #16]
 8018176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018178:	4b0f      	ldr	r3, [pc, #60]	; (80181b8 <xTaskPriorityDisinherit+0xd4>)
 801817a:	681b      	ldr	r3, [r3, #0]
 801817c:	429a      	cmp	r2, r3
 801817e:	d903      	bls.n	8018188 <xTaskPriorityDisinherit+0xa4>
 8018180:	693b      	ldr	r3, [r7, #16]
 8018182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018184:	4a0c      	ldr	r2, [pc, #48]	; (80181b8 <xTaskPriorityDisinherit+0xd4>)
 8018186:	6013      	str	r3, [r2, #0]
 8018188:	693b      	ldr	r3, [r7, #16]
 801818a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801818c:	4613      	mov	r3, r2
 801818e:	009b      	lsls	r3, r3, #2
 8018190:	4413      	add	r3, r2
 8018192:	009b      	lsls	r3, r3, #2
 8018194:	4a09      	ldr	r2, [pc, #36]	; (80181bc <xTaskPriorityDisinherit+0xd8>)
 8018196:	441a      	add	r2, r3
 8018198:	693b      	ldr	r3, [r7, #16]
 801819a:	3304      	adds	r3, #4
 801819c:	4619      	mov	r1, r3
 801819e:	4610      	mov	r0, r2
 80181a0:	f7fd ff19 	bl	8015fd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80181a4:	2301      	movs	r3, #1
 80181a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80181a8:	697b      	ldr	r3, [r7, #20]
	}
 80181aa:	4618      	mov	r0, r3
 80181ac:	3718      	adds	r7, #24
 80181ae:	46bd      	mov	sp, r7
 80181b0:	bd80      	pop	{r7, pc}
 80181b2:	bf00      	nop
 80181b4:	200017f4 	.word	0x200017f4
 80181b8:	20001cd0 	.word	0x20001cd0
 80181bc:	200017f8 	.word	0x200017f8

080181c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80181c0:	b580      	push	{r7, lr}
 80181c2:	b088      	sub	sp, #32
 80181c4:	af00      	add	r7, sp, #0
 80181c6:	6078      	str	r0, [r7, #4]
 80181c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80181ce:	2301      	movs	r3, #1
 80181d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80181d2:	687b      	ldr	r3, [r7, #4]
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d06a      	beq.n	80182ae <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80181d8:	69bb      	ldr	r3, [r7, #24]
 80181da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d10a      	bne.n	80181f6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80181e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181e4:	f383 8811 	msr	BASEPRI, r3
 80181e8:	f3bf 8f6f 	isb	sy
 80181ec:	f3bf 8f4f 	dsb	sy
 80181f0:	60fb      	str	r3, [r7, #12]
}
 80181f2:	bf00      	nop
 80181f4:	e7fe      	b.n	80181f4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80181f6:	69bb      	ldr	r3, [r7, #24]
 80181f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80181fa:	683a      	ldr	r2, [r7, #0]
 80181fc:	429a      	cmp	r2, r3
 80181fe:	d902      	bls.n	8018206 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8018200:	683b      	ldr	r3, [r7, #0]
 8018202:	61fb      	str	r3, [r7, #28]
 8018204:	e002      	b.n	801820c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8018206:	69bb      	ldr	r3, [r7, #24]
 8018208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801820a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801820c:	69bb      	ldr	r3, [r7, #24]
 801820e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018210:	69fa      	ldr	r2, [r7, #28]
 8018212:	429a      	cmp	r2, r3
 8018214:	d04b      	beq.n	80182ae <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8018216:	69bb      	ldr	r3, [r7, #24]
 8018218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801821a:	697a      	ldr	r2, [r7, #20]
 801821c:	429a      	cmp	r2, r3
 801821e:	d146      	bne.n	80182ae <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8018220:	4b25      	ldr	r3, [pc, #148]	; (80182b8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	69ba      	ldr	r2, [r7, #24]
 8018226:	429a      	cmp	r2, r3
 8018228:	d10a      	bne.n	8018240 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801822a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801822e:	f383 8811 	msr	BASEPRI, r3
 8018232:	f3bf 8f6f 	isb	sy
 8018236:	f3bf 8f4f 	dsb	sy
 801823a:	60bb      	str	r3, [r7, #8]
}
 801823c:	bf00      	nop
 801823e:	e7fe      	b.n	801823e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8018240:	69bb      	ldr	r3, [r7, #24]
 8018242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018244:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8018246:	69bb      	ldr	r3, [r7, #24]
 8018248:	69fa      	ldr	r2, [r7, #28]
 801824a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801824c:	69bb      	ldr	r3, [r7, #24]
 801824e:	699b      	ldr	r3, [r3, #24]
 8018250:	2b00      	cmp	r3, #0
 8018252:	db04      	blt.n	801825e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018254:	69fb      	ldr	r3, [r7, #28]
 8018256:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801825a:	69bb      	ldr	r3, [r7, #24]
 801825c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801825e:	69bb      	ldr	r3, [r7, #24]
 8018260:	6959      	ldr	r1, [r3, #20]
 8018262:	693a      	ldr	r2, [r7, #16]
 8018264:	4613      	mov	r3, r2
 8018266:	009b      	lsls	r3, r3, #2
 8018268:	4413      	add	r3, r2
 801826a:	009b      	lsls	r3, r3, #2
 801826c:	4a13      	ldr	r2, [pc, #76]	; (80182bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801826e:	4413      	add	r3, r2
 8018270:	4299      	cmp	r1, r3
 8018272:	d11c      	bne.n	80182ae <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018274:	69bb      	ldr	r3, [r7, #24]
 8018276:	3304      	adds	r3, #4
 8018278:	4618      	mov	r0, r3
 801827a:	f7fd ff09 	bl	8016090 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801827e:	69bb      	ldr	r3, [r7, #24]
 8018280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018282:	4b0f      	ldr	r3, [pc, #60]	; (80182c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	429a      	cmp	r2, r3
 8018288:	d903      	bls.n	8018292 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801828a:	69bb      	ldr	r3, [r7, #24]
 801828c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801828e:	4a0c      	ldr	r2, [pc, #48]	; (80182c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8018290:	6013      	str	r3, [r2, #0]
 8018292:	69bb      	ldr	r3, [r7, #24]
 8018294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018296:	4613      	mov	r3, r2
 8018298:	009b      	lsls	r3, r3, #2
 801829a:	4413      	add	r3, r2
 801829c:	009b      	lsls	r3, r3, #2
 801829e:	4a07      	ldr	r2, [pc, #28]	; (80182bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80182a0:	441a      	add	r2, r3
 80182a2:	69bb      	ldr	r3, [r7, #24]
 80182a4:	3304      	adds	r3, #4
 80182a6:	4619      	mov	r1, r3
 80182a8:	4610      	mov	r0, r2
 80182aa:	f7fd fe94 	bl	8015fd6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80182ae:	bf00      	nop
 80182b0:	3720      	adds	r7, #32
 80182b2:	46bd      	mov	sp, r7
 80182b4:	bd80      	pop	{r7, pc}
 80182b6:	bf00      	nop
 80182b8:	200017f4 	.word	0x200017f4
 80182bc:	200017f8 	.word	0x200017f8
 80182c0:	20001cd0 	.word	0x20001cd0

080182c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80182c4:	b480      	push	{r7}
 80182c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80182c8:	4b07      	ldr	r3, [pc, #28]	; (80182e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80182ca:	681b      	ldr	r3, [r3, #0]
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d004      	beq.n	80182da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80182d0:	4b05      	ldr	r3, [pc, #20]	; (80182e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80182d6:	3201      	adds	r2, #1
 80182d8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80182da:	4b03      	ldr	r3, [pc, #12]	; (80182e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80182dc:	681b      	ldr	r3, [r3, #0]
	}
 80182de:	4618      	mov	r0, r3
 80182e0:	46bd      	mov	sp, r7
 80182e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182e6:	4770      	bx	lr
 80182e8:	200017f4 	.word	0x200017f4

080182ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80182ec:	b580      	push	{r7, lr}
 80182ee:	b084      	sub	sp, #16
 80182f0:	af00      	add	r7, sp, #0
 80182f2:	6078      	str	r0, [r7, #4]
 80182f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80182f6:	4b21      	ldr	r3, [pc, #132]	; (801837c <prvAddCurrentTaskToDelayedList+0x90>)
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80182fc:	4b20      	ldr	r3, [pc, #128]	; (8018380 <prvAddCurrentTaskToDelayedList+0x94>)
 80182fe:	681b      	ldr	r3, [r3, #0]
 8018300:	3304      	adds	r3, #4
 8018302:	4618      	mov	r0, r3
 8018304:	f7fd fec4 	bl	8016090 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801830e:	d10a      	bne.n	8018326 <prvAddCurrentTaskToDelayedList+0x3a>
 8018310:	683b      	ldr	r3, [r7, #0]
 8018312:	2b00      	cmp	r3, #0
 8018314:	d007      	beq.n	8018326 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018316:	4b1a      	ldr	r3, [pc, #104]	; (8018380 <prvAddCurrentTaskToDelayedList+0x94>)
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	3304      	adds	r3, #4
 801831c:	4619      	mov	r1, r3
 801831e:	4819      	ldr	r0, [pc, #100]	; (8018384 <prvAddCurrentTaskToDelayedList+0x98>)
 8018320:	f7fd fe59 	bl	8015fd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018324:	e026      	b.n	8018374 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018326:	68fa      	ldr	r2, [r7, #12]
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	4413      	add	r3, r2
 801832c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801832e:	4b14      	ldr	r3, [pc, #80]	; (8018380 <prvAddCurrentTaskToDelayedList+0x94>)
 8018330:	681b      	ldr	r3, [r3, #0]
 8018332:	68ba      	ldr	r2, [r7, #8]
 8018334:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018336:	68ba      	ldr	r2, [r7, #8]
 8018338:	68fb      	ldr	r3, [r7, #12]
 801833a:	429a      	cmp	r2, r3
 801833c:	d209      	bcs.n	8018352 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801833e:	4b12      	ldr	r3, [pc, #72]	; (8018388 <prvAddCurrentTaskToDelayedList+0x9c>)
 8018340:	681a      	ldr	r2, [r3, #0]
 8018342:	4b0f      	ldr	r3, [pc, #60]	; (8018380 <prvAddCurrentTaskToDelayedList+0x94>)
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	3304      	adds	r3, #4
 8018348:	4619      	mov	r1, r3
 801834a:	4610      	mov	r0, r2
 801834c:	f7fd fe67 	bl	801601e <vListInsert>
}
 8018350:	e010      	b.n	8018374 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018352:	4b0e      	ldr	r3, [pc, #56]	; (801838c <prvAddCurrentTaskToDelayedList+0xa0>)
 8018354:	681a      	ldr	r2, [r3, #0]
 8018356:	4b0a      	ldr	r3, [pc, #40]	; (8018380 <prvAddCurrentTaskToDelayedList+0x94>)
 8018358:	681b      	ldr	r3, [r3, #0]
 801835a:	3304      	adds	r3, #4
 801835c:	4619      	mov	r1, r3
 801835e:	4610      	mov	r0, r2
 8018360:	f7fd fe5d 	bl	801601e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018364:	4b0a      	ldr	r3, [pc, #40]	; (8018390 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018366:	681b      	ldr	r3, [r3, #0]
 8018368:	68ba      	ldr	r2, [r7, #8]
 801836a:	429a      	cmp	r2, r3
 801836c:	d202      	bcs.n	8018374 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801836e:	4a08      	ldr	r2, [pc, #32]	; (8018390 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018370:	68bb      	ldr	r3, [r7, #8]
 8018372:	6013      	str	r3, [r2, #0]
}
 8018374:	bf00      	nop
 8018376:	3710      	adds	r7, #16
 8018378:	46bd      	mov	sp, r7
 801837a:	bd80      	pop	{r7, pc}
 801837c:	20001ccc 	.word	0x20001ccc
 8018380:	200017f4 	.word	0x200017f4
 8018384:	20001cb4 	.word	0x20001cb4
 8018388:	20001c84 	.word	0x20001c84
 801838c:	20001c80 	.word	0x20001c80
 8018390:	20001ce8 	.word	0x20001ce8

08018394 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018394:	b580      	push	{r7, lr}
 8018396:	b08a      	sub	sp, #40	; 0x28
 8018398:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801839a:	2300      	movs	r3, #0
 801839c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801839e:	f000 fb07 	bl	80189b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80183a2:	4b1c      	ldr	r3, [pc, #112]	; (8018414 <xTimerCreateTimerTask+0x80>)
 80183a4:	681b      	ldr	r3, [r3, #0]
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d021      	beq.n	80183ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80183aa:	2300      	movs	r3, #0
 80183ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80183ae:	2300      	movs	r3, #0
 80183b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80183b2:	1d3a      	adds	r2, r7, #4
 80183b4:	f107 0108 	add.w	r1, r7, #8
 80183b8:	f107 030c 	add.w	r3, r7, #12
 80183bc:	4618      	mov	r0, r3
 80183be:	f7fd fdc3 	bl	8015f48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80183c2:	6879      	ldr	r1, [r7, #4]
 80183c4:	68bb      	ldr	r3, [r7, #8]
 80183c6:	68fa      	ldr	r2, [r7, #12]
 80183c8:	9202      	str	r2, [sp, #8]
 80183ca:	9301      	str	r3, [sp, #4]
 80183cc:	2302      	movs	r3, #2
 80183ce:	9300      	str	r3, [sp, #0]
 80183d0:	2300      	movs	r3, #0
 80183d2:	460a      	mov	r2, r1
 80183d4:	4910      	ldr	r1, [pc, #64]	; (8018418 <xTimerCreateTimerTask+0x84>)
 80183d6:	4811      	ldr	r0, [pc, #68]	; (801841c <xTimerCreateTimerTask+0x88>)
 80183d8:	f7fe fe92 	bl	8017100 <xTaskCreateStatic>
 80183dc:	4603      	mov	r3, r0
 80183de:	4a10      	ldr	r2, [pc, #64]	; (8018420 <xTimerCreateTimerTask+0x8c>)
 80183e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80183e2:	4b0f      	ldr	r3, [pc, #60]	; (8018420 <xTimerCreateTimerTask+0x8c>)
 80183e4:	681b      	ldr	r3, [r3, #0]
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d001      	beq.n	80183ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80183ea:	2301      	movs	r3, #1
 80183ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80183ee:	697b      	ldr	r3, [r7, #20]
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	d10a      	bne.n	801840a <xTimerCreateTimerTask+0x76>
	__asm volatile
 80183f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183f8:	f383 8811 	msr	BASEPRI, r3
 80183fc:	f3bf 8f6f 	isb	sy
 8018400:	f3bf 8f4f 	dsb	sy
 8018404:	613b      	str	r3, [r7, #16]
}
 8018406:	bf00      	nop
 8018408:	e7fe      	b.n	8018408 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801840a:	697b      	ldr	r3, [r7, #20]
}
 801840c:	4618      	mov	r0, r3
 801840e:	3718      	adds	r7, #24
 8018410:	46bd      	mov	sp, r7
 8018412:	bd80      	pop	{r7, pc}
 8018414:	20001d24 	.word	0x20001d24
 8018418:	08020550 	.word	0x08020550
 801841c:	08018559 	.word	0x08018559
 8018420:	20001d28 	.word	0x20001d28

08018424 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018424:	b580      	push	{r7, lr}
 8018426:	b08a      	sub	sp, #40	; 0x28
 8018428:	af00      	add	r7, sp, #0
 801842a:	60f8      	str	r0, [r7, #12]
 801842c:	60b9      	str	r1, [r7, #8]
 801842e:	607a      	str	r2, [r7, #4]
 8018430:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018432:	2300      	movs	r3, #0
 8018434:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018436:	68fb      	ldr	r3, [r7, #12]
 8018438:	2b00      	cmp	r3, #0
 801843a:	d10a      	bne.n	8018452 <xTimerGenericCommand+0x2e>
	__asm volatile
 801843c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018440:	f383 8811 	msr	BASEPRI, r3
 8018444:	f3bf 8f6f 	isb	sy
 8018448:	f3bf 8f4f 	dsb	sy
 801844c:	623b      	str	r3, [r7, #32]
}
 801844e:	bf00      	nop
 8018450:	e7fe      	b.n	8018450 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018452:	4b1a      	ldr	r3, [pc, #104]	; (80184bc <xTimerGenericCommand+0x98>)
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	2b00      	cmp	r3, #0
 8018458:	d02a      	beq.n	80184b0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801845a:	68bb      	ldr	r3, [r7, #8]
 801845c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018462:	68fb      	ldr	r3, [r7, #12]
 8018464:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018466:	68bb      	ldr	r3, [r7, #8]
 8018468:	2b05      	cmp	r3, #5
 801846a:	dc18      	bgt.n	801849e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801846c:	f7ff fdb4 	bl	8017fd8 <xTaskGetSchedulerState>
 8018470:	4603      	mov	r3, r0
 8018472:	2b02      	cmp	r3, #2
 8018474:	d109      	bne.n	801848a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018476:	4b11      	ldr	r3, [pc, #68]	; (80184bc <xTimerGenericCommand+0x98>)
 8018478:	6818      	ldr	r0, [r3, #0]
 801847a:	f107 0110 	add.w	r1, r7, #16
 801847e:	2300      	movs	r3, #0
 8018480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018482:	f7fd ffd7 	bl	8016434 <xQueueGenericSend>
 8018486:	6278      	str	r0, [r7, #36]	; 0x24
 8018488:	e012      	b.n	80184b0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801848a:	4b0c      	ldr	r3, [pc, #48]	; (80184bc <xTimerGenericCommand+0x98>)
 801848c:	6818      	ldr	r0, [r3, #0]
 801848e:	f107 0110 	add.w	r1, r7, #16
 8018492:	2300      	movs	r3, #0
 8018494:	2200      	movs	r2, #0
 8018496:	f7fd ffcd 	bl	8016434 <xQueueGenericSend>
 801849a:	6278      	str	r0, [r7, #36]	; 0x24
 801849c:	e008      	b.n	80184b0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801849e:	4b07      	ldr	r3, [pc, #28]	; (80184bc <xTimerGenericCommand+0x98>)
 80184a0:	6818      	ldr	r0, [r3, #0]
 80184a2:	f107 0110 	add.w	r1, r7, #16
 80184a6:	2300      	movs	r3, #0
 80184a8:	683a      	ldr	r2, [r7, #0]
 80184aa:	f7fe f8c1 	bl	8016630 <xQueueGenericSendFromISR>
 80184ae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80184b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80184b2:	4618      	mov	r0, r3
 80184b4:	3728      	adds	r7, #40	; 0x28
 80184b6:	46bd      	mov	sp, r7
 80184b8:	bd80      	pop	{r7, pc}
 80184ba:	bf00      	nop
 80184bc:	20001d24 	.word	0x20001d24

080184c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80184c0:	b580      	push	{r7, lr}
 80184c2:	b088      	sub	sp, #32
 80184c4:	af02      	add	r7, sp, #8
 80184c6:	6078      	str	r0, [r7, #4]
 80184c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80184ca:	4b22      	ldr	r3, [pc, #136]	; (8018554 <prvProcessExpiredTimer+0x94>)
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	68db      	ldr	r3, [r3, #12]
 80184d0:	68db      	ldr	r3, [r3, #12]
 80184d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80184d4:	697b      	ldr	r3, [r7, #20]
 80184d6:	3304      	adds	r3, #4
 80184d8:	4618      	mov	r0, r3
 80184da:	f7fd fdd9 	bl	8016090 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80184de:	697b      	ldr	r3, [r7, #20]
 80184e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80184e4:	f003 0304 	and.w	r3, r3, #4
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	d022      	beq.n	8018532 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80184ec:	697b      	ldr	r3, [r7, #20]
 80184ee:	699a      	ldr	r2, [r3, #24]
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	18d1      	adds	r1, r2, r3
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	683a      	ldr	r2, [r7, #0]
 80184f8:	6978      	ldr	r0, [r7, #20]
 80184fa:	f000 f8d1 	bl	80186a0 <prvInsertTimerInActiveList>
 80184fe:	4603      	mov	r3, r0
 8018500:	2b00      	cmp	r3, #0
 8018502:	d01f      	beq.n	8018544 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018504:	2300      	movs	r3, #0
 8018506:	9300      	str	r3, [sp, #0]
 8018508:	2300      	movs	r3, #0
 801850a:	687a      	ldr	r2, [r7, #4]
 801850c:	2100      	movs	r1, #0
 801850e:	6978      	ldr	r0, [r7, #20]
 8018510:	f7ff ff88 	bl	8018424 <xTimerGenericCommand>
 8018514:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018516:	693b      	ldr	r3, [r7, #16]
 8018518:	2b00      	cmp	r3, #0
 801851a:	d113      	bne.n	8018544 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801851c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018520:	f383 8811 	msr	BASEPRI, r3
 8018524:	f3bf 8f6f 	isb	sy
 8018528:	f3bf 8f4f 	dsb	sy
 801852c:	60fb      	str	r3, [r7, #12]
}
 801852e:	bf00      	nop
 8018530:	e7fe      	b.n	8018530 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018532:	697b      	ldr	r3, [r7, #20]
 8018534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018538:	f023 0301 	bic.w	r3, r3, #1
 801853c:	b2da      	uxtb	r2, r3
 801853e:	697b      	ldr	r3, [r7, #20]
 8018540:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018544:	697b      	ldr	r3, [r7, #20]
 8018546:	6a1b      	ldr	r3, [r3, #32]
 8018548:	6978      	ldr	r0, [r7, #20]
 801854a:	4798      	blx	r3
}
 801854c:	bf00      	nop
 801854e:	3718      	adds	r7, #24
 8018550:	46bd      	mov	sp, r7
 8018552:	bd80      	pop	{r7, pc}
 8018554:	20001d1c 	.word	0x20001d1c

08018558 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018558:	b580      	push	{r7, lr}
 801855a:	b084      	sub	sp, #16
 801855c:	af00      	add	r7, sp, #0
 801855e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018560:	f107 0308 	add.w	r3, r7, #8
 8018564:	4618      	mov	r0, r3
 8018566:	f000 f857 	bl	8018618 <prvGetNextExpireTime>
 801856a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801856c:	68bb      	ldr	r3, [r7, #8]
 801856e:	4619      	mov	r1, r3
 8018570:	68f8      	ldr	r0, [r7, #12]
 8018572:	f000 f803 	bl	801857c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8018576:	f000 f8d5 	bl	8018724 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801857a:	e7f1      	b.n	8018560 <prvTimerTask+0x8>

0801857c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801857c:	b580      	push	{r7, lr}
 801857e:	b084      	sub	sp, #16
 8018580:	af00      	add	r7, sp, #0
 8018582:	6078      	str	r0, [r7, #4]
 8018584:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8018586:	f7ff f945 	bl	8017814 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801858a:	f107 0308 	add.w	r3, r7, #8
 801858e:	4618      	mov	r0, r3
 8018590:	f000 f866 	bl	8018660 <prvSampleTimeNow>
 8018594:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8018596:	68bb      	ldr	r3, [r7, #8]
 8018598:	2b00      	cmp	r3, #0
 801859a:	d130      	bne.n	80185fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801859c:	683b      	ldr	r3, [r7, #0]
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d10a      	bne.n	80185b8 <prvProcessTimerOrBlockTask+0x3c>
 80185a2:	687a      	ldr	r2, [r7, #4]
 80185a4:	68fb      	ldr	r3, [r7, #12]
 80185a6:	429a      	cmp	r2, r3
 80185a8:	d806      	bhi.n	80185b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80185aa:	f7ff f941 	bl	8017830 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80185ae:	68f9      	ldr	r1, [r7, #12]
 80185b0:	6878      	ldr	r0, [r7, #4]
 80185b2:	f7ff ff85 	bl	80184c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80185b6:	e024      	b.n	8018602 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80185b8:	683b      	ldr	r3, [r7, #0]
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d008      	beq.n	80185d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80185be:	4b13      	ldr	r3, [pc, #76]	; (801860c <prvProcessTimerOrBlockTask+0x90>)
 80185c0:	681b      	ldr	r3, [r3, #0]
 80185c2:	681b      	ldr	r3, [r3, #0]
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	d101      	bne.n	80185cc <prvProcessTimerOrBlockTask+0x50>
 80185c8:	2301      	movs	r3, #1
 80185ca:	e000      	b.n	80185ce <prvProcessTimerOrBlockTask+0x52>
 80185cc:	2300      	movs	r3, #0
 80185ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80185d0:	4b0f      	ldr	r3, [pc, #60]	; (8018610 <prvProcessTimerOrBlockTask+0x94>)
 80185d2:	6818      	ldr	r0, [r3, #0]
 80185d4:	687a      	ldr	r2, [r7, #4]
 80185d6:	68fb      	ldr	r3, [r7, #12]
 80185d8:	1ad3      	subs	r3, r2, r3
 80185da:	683a      	ldr	r2, [r7, #0]
 80185dc:	4619      	mov	r1, r3
 80185de:	f7fe fd5b 	bl	8017098 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80185e2:	f7ff f925 	bl	8017830 <xTaskResumeAll>
 80185e6:	4603      	mov	r3, r0
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	d10a      	bne.n	8018602 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80185ec:	4b09      	ldr	r3, [pc, #36]	; (8018614 <prvProcessTimerOrBlockTask+0x98>)
 80185ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80185f2:	601a      	str	r2, [r3, #0]
 80185f4:	f3bf 8f4f 	dsb	sy
 80185f8:	f3bf 8f6f 	isb	sy
}
 80185fc:	e001      	b.n	8018602 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80185fe:	f7ff f917 	bl	8017830 <xTaskResumeAll>
}
 8018602:	bf00      	nop
 8018604:	3710      	adds	r7, #16
 8018606:	46bd      	mov	sp, r7
 8018608:	bd80      	pop	{r7, pc}
 801860a:	bf00      	nop
 801860c:	20001d20 	.word	0x20001d20
 8018610:	20001d24 	.word	0x20001d24
 8018614:	e000ed04 	.word	0xe000ed04

08018618 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018618:	b480      	push	{r7}
 801861a:	b085      	sub	sp, #20
 801861c:	af00      	add	r7, sp, #0
 801861e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018620:	4b0e      	ldr	r3, [pc, #56]	; (801865c <prvGetNextExpireTime+0x44>)
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	681b      	ldr	r3, [r3, #0]
 8018626:	2b00      	cmp	r3, #0
 8018628:	d101      	bne.n	801862e <prvGetNextExpireTime+0x16>
 801862a:	2201      	movs	r2, #1
 801862c:	e000      	b.n	8018630 <prvGetNextExpireTime+0x18>
 801862e:	2200      	movs	r2, #0
 8018630:	687b      	ldr	r3, [r7, #4]
 8018632:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	681b      	ldr	r3, [r3, #0]
 8018638:	2b00      	cmp	r3, #0
 801863a:	d105      	bne.n	8018648 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801863c:	4b07      	ldr	r3, [pc, #28]	; (801865c <prvGetNextExpireTime+0x44>)
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	68db      	ldr	r3, [r3, #12]
 8018642:	681b      	ldr	r3, [r3, #0]
 8018644:	60fb      	str	r3, [r7, #12]
 8018646:	e001      	b.n	801864c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018648:	2300      	movs	r3, #0
 801864a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801864c:	68fb      	ldr	r3, [r7, #12]
}
 801864e:	4618      	mov	r0, r3
 8018650:	3714      	adds	r7, #20
 8018652:	46bd      	mov	sp, r7
 8018654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018658:	4770      	bx	lr
 801865a:	bf00      	nop
 801865c:	20001d1c 	.word	0x20001d1c

08018660 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8018660:	b580      	push	{r7, lr}
 8018662:	b084      	sub	sp, #16
 8018664:	af00      	add	r7, sp, #0
 8018666:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018668:	f7ff f980 	bl	801796c <xTaskGetTickCount>
 801866c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801866e:	4b0b      	ldr	r3, [pc, #44]	; (801869c <prvSampleTimeNow+0x3c>)
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	68fa      	ldr	r2, [r7, #12]
 8018674:	429a      	cmp	r2, r3
 8018676:	d205      	bcs.n	8018684 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018678:	f000 f936 	bl	80188e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	2201      	movs	r2, #1
 8018680:	601a      	str	r2, [r3, #0]
 8018682:	e002      	b.n	801868a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	2200      	movs	r2, #0
 8018688:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801868a:	4a04      	ldr	r2, [pc, #16]	; (801869c <prvSampleTimeNow+0x3c>)
 801868c:	68fb      	ldr	r3, [r7, #12]
 801868e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8018690:	68fb      	ldr	r3, [r7, #12]
}
 8018692:	4618      	mov	r0, r3
 8018694:	3710      	adds	r7, #16
 8018696:	46bd      	mov	sp, r7
 8018698:	bd80      	pop	{r7, pc}
 801869a:	bf00      	nop
 801869c:	20001d2c 	.word	0x20001d2c

080186a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80186a0:	b580      	push	{r7, lr}
 80186a2:	b086      	sub	sp, #24
 80186a4:	af00      	add	r7, sp, #0
 80186a6:	60f8      	str	r0, [r7, #12]
 80186a8:	60b9      	str	r1, [r7, #8]
 80186aa:	607a      	str	r2, [r7, #4]
 80186ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80186ae:	2300      	movs	r3, #0
 80186b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80186b2:	68fb      	ldr	r3, [r7, #12]
 80186b4:	68ba      	ldr	r2, [r7, #8]
 80186b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80186b8:	68fb      	ldr	r3, [r7, #12]
 80186ba:	68fa      	ldr	r2, [r7, #12]
 80186bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80186be:	68ba      	ldr	r2, [r7, #8]
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	429a      	cmp	r2, r3
 80186c4:	d812      	bhi.n	80186ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80186c6:	687a      	ldr	r2, [r7, #4]
 80186c8:	683b      	ldr	r3, [r7, #0]
 80186ca:	1ad2      	subs	r2, r2, r3
 80186cc:	68fb      	ldr	r3, [r7, #12]
 80186ce:	699b      	ldr	r3, [r3, #24]
 80186d0:	429a      	cmp	r2, r3
 80186d2:	d302      	bcc.n	80186da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80186d4:	2301      	movs	r3, #1
 80186d6:	617b      	str	r3, [r7, #20]
 80186d8:	e01b      	b.n	8018712 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80186da:	4b10      	ldr	r3, [pc, #64]	; (801871c <prvInsertTimerInActiveList+0x7c>)
 80186dc:	681a      	ldr	r2, [r3, #0]
 80186de:	68fb      	ldr	r3, [r7, #12]
 80186e0:	3304      	adds	r3, #4
 80186e2:	4619      	mov	r1, r3
 80186e4:	4610      	mov	r0, r2
 80186e6:	f7fd fc9a 	bl	801601e <vListInsert>
 80186ea:	e012      	b.n	8018712 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80186ec:	687a      	ldr	r2, [r7, #4]
 80186ee:	683b      	ldr	r3, [r7, #0]
 80186f0:	429a      	cmp	r2, r3
 80186f2:	d206      	bcs.n	8018702 <prvInsertTimerInActiveList+0x62>
 80186f4:	68ba      	ldr	r2, [r7, #8]
 80186f6:	683b      	ldr	r3, [r7, #0]
 80186f8:	429a      	cmp	r2, r3
 80186fa:	d302      	bcc.n	8018702 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80186fc:	2301      	movs	r3, #1
 80186fe:	617b      	str	r3, [r7, #20]
 8018700:	e007      	b.n	8018712 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018702:	4b07      	ldr	r3, [pc, #28]	; (8018720 <prvInsertTimerInActiveList+0x80>)
 8018704:	681a      	ldr	r2, [r3, #0]
 8018706:	68fb      	ldr	r3, [r7, #12]
 8018708:	3304      	adds	r3, #4
 801870a:	4619      	mov	r1, r3
 801870c:	4610      	mov	r0, r2
 801870e:	f7fd fc86 	bl	801601e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8018712:	697b      	ldr	r3, [r7, #20]
}
 8018714:	4618      	mov	r0, r3
 8018716:	3718      	adds	r7, #24
 8018718:	46bd      	mov	sp, r7
 801871a:	bd80      	pop	{r7, pc}
 801871c:	20001d20 	.word	0x20001d20
 8018720:	20001d1c 	.word	0x20001d1c

08018724 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018724:	b580      	push	{r7, lr}
 8018726:	b08e      	sub	sp, #56	; 0x38
 8018728:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801872a:	e0ca      	b.n	80188c2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	2b00      	cmp	r3, #0
 8018730:	da18      	bge.n	8018764 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8018732:	1d3b      	adds	r3, r7, #4
 8018734:	3304      	adds	r3, #4
 8018736:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8018738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801873a:	2b00      	cmp	r3, #0
 801873c:	d10a      	bne.n	8018754 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801873e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018742:	f383 8811 	msr	BASEPRI, r3
 8018746:	f3bf 8f6f 	isb	sy
 801874a:	f3bf 8f4f 	dsb	sy
 801874e:	61fb      	str	r3, [r7, #28]
}
 8018750:	bf00      	nop
 8018752:	e7fe      	b.n	8018752 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018756:	681b      	ldr	r3, [r3, #0]
 8018758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801875a:	6850      	ldr	r0, [r2, #4]
 801875c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801875e:	6892      	ldr	r2, [r2, #8]
 8018760:	4611      	mov	r1, r2
 8018762:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	2b00      	cmp	r3, #0
 8018768:	f2c0 80aa 	blt.w	80188c0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801876c:	68fb      	ldr	r3, [r7, #12]
 801876e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8018770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018772:	695b      	ldr	r3, [r3, #20]
 8018774:	2b00      	cmp	r3, #0
 8018776:	d004      	beq.n	8018782 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801877a:	3304      	adds	r3, #4
 801877c:	4618      	mov	r0, r3
 801877e:	f7fd fc87 	bl	8016090 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018782:	463b      	mov	r3, r7
 8018784:	4618      	mov	r0, r3
 8018786:	f7ff ff6b 	bl	8018660 <prvSampleTimeNow>
 801878a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	2b09      	cmp	r3, #9
 8018790:	f200 8097 	bhi.w	80188c2 <prvProcessReceivedCommands+0x19e>
 8018794:	a201      	add	r2, pc, #4	; (adr r2, 801879c <prvProcessReceivedCommands+0x78>)
 8018796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801879a:	bf00      	nop
 801879c:	080187c5 	.word	0x080187c5
 80187a0:	080187c5 	.word	0x080187c5
 80187a4:	080187c5 	.word	0x080187c5
 80187a8:	08018839 	.word	0x08018839
 80187ac:	0801884d 	.word	0x0801884d
 80187b0:	08018897 	.word	0x08018897
 80187b4:	080187c5 	.word	0x080187c5
 80187b8:	080187c5 	.word	0x080187c5
 80187bc:	08018839 	.word	0x08018839
 80187c0:	0801884d 	.word	0x0801884d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80187c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80187ca:	f043 0301 	orr.w	r3, r3, #1
 80187ce:	b2da      	uxtb	r2, r3
 80187d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80187d6:	68ba      	ldr	r2, [r7, #8]
 80187d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187da:	699b      	ldr	r3, [r3, #24]
 80187dc:	18d1      	adds	r1, r2, r3
 80187de:	68bb      	ldr	r3, [r7, #8]
 80187e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80187e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80187e4:	f7ff ff5c 	bl	80186a0 <prvInsertTimerInActiveList>
 80187e8:	4603      	mov	r3, r0
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d069      	beq.n	80188c2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80187ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187f0:	6a1b      	ldr	r3, [r3, #32]
 80187f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80187f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80187f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80187fc:	f003 0304 	and.w	r3, r3, #4
 8018800:	2b00      	cmp	r3, #0
 8018802:	d05e      	beq.n	80188c2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018804:	68ba      	ldr	r2, [r7, #8]
 8018806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018808:	699b      	ldr	r3, [r3, #24]
 801880a:	441a      	add	r2, r3
 801880c:	2300      	movs	r3, #0
 801880e:	9300      	str	r3, [sp, #0]
 8018810:	2300      	movs	r3, #0
 8018812:	2100      	movs	r1, #0
 8018814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018816:	f7ff fe05 	bl	8018424 <xTimerGenericCommand>
 801881a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801881c:	6a3b      	ldr	r3, [r7, #32]
 801881e:	2b00      	cmp	r3, #0
 8018820:	d14f      	bne.n	80188c2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8018822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018826:	f383 8811 	msr	BASEPRI, r3
 801882a:	f3bf 8f6f 	isb	sy
 801882e:	f3bf 8f4f 	dsb	sy
 8018832:	61bb      	str	r3, [r7, #24]
}
 8018834:	bf00      	nop
 8018836:	e7fe      	b.n	8018836 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801883a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801883e:	f023 0301 	bic.w	r3, r3, #1
 8018842:	b2da      	uxtb	r2, r3
 8018844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018846:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801884a:	e03a      	b.n	80188c2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801884c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801884e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018852:	f043 0301 	orr.w	r3, r3, #1
 8018856:	b2da      	uxtb	r2, r3
 8018858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801885a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801885e:	68ba      	ldr	r2, [r7, #8]
 8018860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018862:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018866:	699b      	ldr	r3, [r3, #24]
 8018868:	2b00      	cmp	r3, #0
 801886a:	d10a      	bne.n	8018882 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801886c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018870:	f383 8811 	msr	BASEPRI, r3
 8018874:	f3bf 8f6f 	isb	sy
 8018878:	f3bf 8f4f 	dsb	sy
 801887c:	617b      	str	r3, [r7, #20]
}
 801887e:	bf00      	nop
 8018880:	e7fe      	b.n	8018880 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8018882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018884:	699a      	ldr	r2, [r3, #24]
 8018886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018888:	18d1      	adds	r1, r2, r3
 801888a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801888c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801888e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018890:	f7ff ff06 	bl	80186a0 <prvInsertTimerInActiveList>
					break;
 8018894:	e015      	b.n	80188c2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8018896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018898:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801889c:	f003 0302 	and.w	r3, r3, #2
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	d103      	bne.n	80188ac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80188a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80188a6:	f000 fbdb 	bl	8019060 <vPortFree>
 80188aa:	e00a      	b.n	80188c2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80188ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80188b2:	f023 0301 	bic.w	r3, r3, #1
 80188b6:	b2da      	uxtb	r2, r3
 80188b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80188be:	e000      	b.n	80188c2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80188c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80188c2:	4b08      	ldr	r3, [pc, #32]	; (80188e4 <prvProcessReceivedCommands+0x1c0>)
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	1d39      	adds	r1, r7, #4
 80188c8:	2200      	movs	r2, #0
 80188ca:	4618      	mov	r0, r3
 80188cc:	f7fd ffd8 	bl	8016880 <xQueueReceive>
 80188d0:	4603      	mov	r3, r0
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	f47f af2a 	bne.w	801872c <prvProcessReceivedCommands+0x8>
	}
}
 80188d8:	bf00      	nop
 80188da:	bf00      	nop
 80188dc:	3730      	adds	r7, #48	; 0x30
 80188de:	46bd      	mov	sp, r7
 80188e0:	bd80      	pop	{r7, pc}
 80188e2:	bf00      	nop
 80188e4:	20001d24 	.word	0x20001d24

080188e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80188e8:	b580      	push	{r7, lr}
 80188ea:	b088      	sub	sp, #32
 80188ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80188ee:	e048      	b.n	8018982 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80188f0:	4b2d      	ldr	r3, [pc, #180]	; (80189a8 <prvSwitchTimerLists+0xc0>)
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	68db      	ldr	r3, [r3, #12]
 80188f6:	681b      	ldr	r3, [r3, #0]
 80188f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80188fa:	4b2b      	ldr	r3, [pc, #172]	; (80189a8 <prvSwitchTimerLists+0xc0>)
 80188fc:	681b      	ldr	r3, [r3, #0]
 80188fe:	68db      	ldr	r3, [r3, #12]
 8018900:	68db      	ldr	r3, [r3, #12]
 8018902:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018904:	68fb      	ldr	r3, [r7, #12]
 8018906:	3304      	adds	r3, #4
 8018908:	4618      	mov	r0, r3
 801890a:	f7fd fbc1 	bl	8016090 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801890e:	68fb      	ldr	r3, [r7, #12]
 8018910:	6a1b      	ldr	r3, [r3, #32]
 8018912:	68f8      	ldr	r0, [r7, #12]
 8018914:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018916:	68fb      	ldr	r3, [r7, #12]
 8018918:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801891c:	f003 0304 	and.w	r3, r3, #4
 8018920:	2b00      	cmp	r3, #0
 8018922:	d02e      	beq.n	8018982 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018924:	68fb      	ldr	r3, [r7, #12]
 8018926:	699b      	ldr	r3, [r3, #24]
 8018928:	693a      	ldr	r2, [r7, #16]
 801892a:	4413      	add	r3, r2
 801892c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801892e:	68ba      	ldr	r2, [r7, #8]
 8018930:	693b      	ldr	r3, [r7, #16]
 8018932:	429a      	cmp	r2, r3
 8018934:	d90e      	bls.n	8018954 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8018936:	68fb      	ldr	r3, [r7, #12]
 8018938:	68ba      	ldr	r2, [r7, #8]
 801893a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	68fa      	ldr	r2, [r7, #12]
 8018940:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018942:	4b19      	ldr	r3, [pc, #100]	; (80189a8 <prvSwitchTimerLists+0xc0>)
 8018944:	681a      	ldr	r2, [r3, #0]
 8018946:	68fb      	ldr	r3, [r7, #12]
 8018948:	3304      	adds	r3, #4
 801894a:	4619      	mov	r1, r3
 801894c:	4610      	mov	r0, r2
 801894e:	f7fd fb66 	bl	801601e <vListInsert>
 8018952:	e016      	b.n	8018982 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018954:	2300      	movs	r3, #0
 8018956:	9300      	str	r3, [sp, #0]
 8018958:	2300      	movs	r3, #0
 801895a:	693a      	ldr	r2, [r7, #16]
 801895c:	2100      	movs	r1, #0
 801895e:	68f8      	ldr	r0, [r7, #12]
 8018960:	f7ff fd60 	bl	8018424 <xTimerGenericCommand>
 8018964:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	2b00      	cmp	r3, #0
 801896a:	d10a      	bne.n	8018982 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801896c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018970:	f383 8811 	msr	BASEPRI, r3
 8018974:	f3bf 8f6f 	isb	sy
 8018978:	f3bf 8f4f 	dsb	sy
 801897c:	603b      	str	r3, [r7, #0]
}
 801897e:	bf00      	nop
 8018980:	e7fe      	b.n	8018980 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018982:	4b09      	ldr	r3, [pc, #36]	; (80189a8 <prvSwitchTimerLists+0xc0>)
 8018984:	681b      	ldr	r3, [r3, #0]
 8018986:	681b      	ldr	r3, [r3, #0]
 8018988:	2b00      	cmp	r3, #0
 801898a:	d1b1      	bne.n	80188f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801898c:	4b06      	ldr	r3, [pc, #24]	; (80189a8 <prvSwitchTimerLists+0xc0>)
 801898e:	681b      	ldr	r3, [r3, #0]
 8018990:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8018992:	4b06      	ldr	r3, [pc, #24]	; (80189ac <prvSwitchTimerLists+0xc4>)
 8018994:	681b      	ldr	r3, [r3, #0]
 8018996:	4a04      	ldr	r2, [pc, #16]	; (80189a8 <prvSwitchTimerLists+0xc0>)
 8018998:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801899a:	4a04      	ldr	r2, [pc, #16]	; (80189ac <prvSwitchTimerLists+0xc4>)
 801899c:	697b      	ldr	r3, [r7, #20]
 801899e:	6013      	str	r3, [r2, #0]
}
 80189a0:	bf00      	nop
 80189a2:	3718      	adds	r7, #24
 80189a4:	46bd      	mov	sp, r7
 80189a6:	bd80      	pop	{r7, pc}
 80189a8:	20001d1c 	.word	0x20001d1c
 80189ac:	20001d20 	.word	0x20001d20

080189b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80189b0:	b580      	push	{r7, lr}
 80189b2:	b082      	sub	sp, #8
 80189b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80189b6:	f000 f965 	bl	8018c84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80189ba:	4b15      	ldr	r3, [pc, #84]	; (8018a10 <prvCheckForValidListAndQueue+0x60>)
 80189bc:	681b      	ldr	r3, [r3, #0]
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d120      	bne.n	8018a04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80189c2:	4814      	ldr	r0, [pc, #80]	; (8018a14 <prvCheckForValidListAndQueue+0x64>)
 80189c4:	f7fd fada 	bl	8015f7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80189c8:	4813      	ldr	r0, [pc, #76]	; (8018a18 <prvCheckForValidListAndQueue+0x68>)
 80189ca:	f7fd fad7 	bl	8015f7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80189ce:	4b13      	ldr	r3, [pc, #76]	; (8018a1c <prvCheckForValidListAndQueue+0x6c>)
 80189d0:	4a10      	ldr	r2, [pc, #64]	; (8018a14 <prvCheckForValidListAndQueue+0x64>)
 80189d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80189d4:	4b12      	ldr	r3, [pc, #72]	; (8018a20 <prvCheckForValidListAndQueue+0x70>)
 80189d6:	4a10      	ldr	r2, [pc, #64]	; (8018a18 <prvCheckForValidListAndQueue+0x68>)
 80189d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80189da:	2300      	movs	r3, #0
 80189dc:	9300      	str	r3, [sp, #0]
 80189de:	4b11      	ldr	r3, [pc, #68]	; (8018a24 <prvCheckForValidListAndQueue+0x74>)
 80189e0:	4a11      	ldr	r2, [pc, #68]	; (8018a28 <prvCheckForValidListAndQueue+0x78>)
 80189e2:	2110      	movs	r1, #16
 80189e4:	200a      	movs	r0, #10
 80189e6:	f7fd fbe5 	bl	80161b4 <xQueueGenericCreateStatic>
 80189ea:	4603      	mov	r3, r0
 80189ec:	4a08      	ldr	r2, [pc, #32]	; (8018a10 <prvCheckForValidListAndQueue+0x60>)
 80189ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80189f0:	4b07      	ldr	r3, [pc, #28]	; (8018a10 <prvCheckForValidListAndQueue+0x60>)
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d005      	beq.n	8018a04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80189f8:	4b05      	ldr	r3, [pc, #20]	; (8018a10 <prvCheckForValidListAndQueue+0x60>)
 80189fa:	681b      	ldr	r3, [r3, #0]
 80189fc:	490b      	ldr	r1, [pc, #44]	; (8018a2c <prvCheckForValidListAndQueue+0x7c>)
 80189fe:	4618      	mov	r0, r3
 8018a00:	f7fe faf6 	bl	8016ff0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018a04:	f000 f96e 	bl	8018ce4 <vPortExitCritical>
}
 8018a08:	bf00      	nop
 8018a0a:	46bd      	mov	sp, r7
 8018a0c:	bd80      	pop	{r7, pc}
 8018a0e:	bf00      	nop
 8018a10:	20001d24 	.word	0x20001d24
 8018a14:	20001cf4 	.word	0x20001cf4
 8018a18:	20001d08 	.word	0x20001d08
 8018a1c:	20001d1c 	.word	0x20001d1c
 8018a20:	20001d20 	.word	0x20001d20
 8018a24:	20001dd0 	.word	0x20001dd0
 8018a28:	20001d30 	.word	0x20001d30
 8018a2c:	08020558 	.word	0x08020558

08018a30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018a30:	b480      	push	{r7}
 8018a32:	b085      	sub	sp, #20
 8018a34:	af00      	add	r7, sp, #0
 8018a36:	60f8      	str	r0, [r7, #12]
 8018a38:	60b9      	str	r1, [r7, #8]
 8018a3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018a3c:	68fb      	ldr	r3, [r7, #12]
 8018a3e:	3b04      	subs	r3, #4
 8018a40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018a42:	68fb      	ldr	r3, [r7, #12]
 8018a44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8018a48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018a4a:	68fb      	ldr	r3, [r7, #12]
 8018a4c:	3b04      	subs	r3, #4
 8018a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018a50:	68bb      	ldr	r3, [r7, #8]
 8018a52:	f023 0201 	bic.w	r2, r3, #1
 8018a56:	68fb      	ldr	r3, [r7, #12]
 8018a58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018a5a:	68fb      	ldr	r3, [r7, #12]
 8018a5c:	3b04      	subs	r3, #4
 8018a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018a60:	4a0c      	ldr	r2, [pc, #48]	; (8018a94 <pxPortInitialiseStack+0x64>)
 8018a62:	68fb      	ldr	r3, [r7, #12]
 8018a64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8018a66:	68fb      	ldr	r3, [r7, #12]
 8018a68:	3b14      	subs	r3, #20
 8018a6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018a6c:	687a      	ldr	r2, [r7, #4]
 8018a6e:	68fb      	ldr	r3, [r7, #12]
 8018a70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8018a72:	68fb      	ldr	r3, [r7, #12]
 8018a74:	3b04      	subs	r3, #4
 8018a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018a78:	68fb      	ldr	r3, [r7, #12]
 8018a7a:	f06f 0202 	mvn.w	r2, #2
 8018a7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8018a80:	68fb      	ldr	r3, [r7, #12]
 8018a82:	3b20      	subs	r3, #32
 8018a84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8018a86:	68fb      	ldr	r3, [r7, #12]
}
 8018a88:	4618      	mov	r0, r3
 8018a8a:	3714      	adds	r7, #20
 8018a8c:	46bd      	mov	sp, r7
 8018a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a92:	4770      	bx	lr
 8018a94:	08018a99 	.word	0x08018a99

08018a98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018a98:	b480      	push	{r7}
 8018a9a:	b085      	sub	sp, #20
 8018a9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018a9e:	2300      	movs	r3, #0
 8018aa0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8018aa2:	4b12      	ldr	r3, [pc, #72]	; (8018aec <prvTaskExitError+0x54>)
 8018aa4:	681b      	ldr	r3, [r3, #0]
 8018aa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018aaa:	d00a      	beq.n	8018ac2 <prvTaskExitError+0x2a>
	__asm volatile
 8018aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ab0:	f383 8811 	msr	BASEPRI, r3
 8018ab4:	f3bf 8f6f 	isb	sy
 8018ab8:	f3bf 8f4f 	dsb	sy
 8018abc:	60fb      	str	r3, [r7, #12]
}
 8018abe:	bf00      	nop
 8018ac0:	e7fe      	b.n	8018ac0 <prvTaskExitError+0x28>
	__asm volatile
 8018ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ac6:	f383 8811 	msr	BASEPRI, r3
 8018aca:	f3bf 8f6f 	isb	sy
 8018ace:	f3bf 8f4f 	dsb	sy
 8018ad2:	60bb      	str	r3, [r7, #8]
}
 8018ad4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018ad6:	bf00      	nop
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	d0fc      	beq.n	8018ad8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018ade:	bf00      	nop
 8018ae0:	bf00      	nop
 8018ae2:	3714      	adds	r7, #20
 8018ae4:	46bd      	mov	sp, r7
 8018ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aea:	4770      	bx	lr
 8018aec:	200000cc 	.word	0x200000cc

08018af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018af0:	4b07      	ldr	r3, [pc, #28]	; (8018b10 <pxCurrentTCBConst2>)
 8018af2:	6819      	ldr	r1, [r3, #0]
 8018af4:	6808      	ldr	r0, [r1, #0]
 8018af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018afa:	f380 8809 	msr	PSP, r0
 8018afe:	f3bf 8f6f 	isb	sy
 8018b02:	f04f 0000 	mov.w	r0, #0
 8018b06:	f380 8811 	msr	BASEPRI, r0
 8018b0a:	4770      	bx	lr
 8018b0c:	f3af 8000 	nop.w

08018b10 <pxCurrentTCBConst2>:
 8018b10:	200017f4 	.word	0x200017f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018b14:	bf00      	nop
 8018b16:	bf00      	nop

08018b18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018b18:	4808      	ldr	r0, [pc, #32]	; (8018b3c <prvPortStartFirstTask+0x24>)
 8018b1a:	6800      	ldr	r0, [r0, #0]
 8018b1c:	6800      	ldr	r0, [r0, #0]
 8018b1e:	f380 8808 	msr	MSP, r0
 8018b22:	f04f 0000 	mov.w	r0, #0
 8018b26:	f380 8814 	msr	CONTROL, r0
 8018b2a:	b662      	cpsie	i
 8018b2c:	b661      	cpsie	f
 8018b2e:	f3bf 8f4f 	dsb	sy
 8018b32:	f3bf 8f6f 	isb	sy
 8018b36:	df00      	svc	0
 8018b38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8018b3a:	bf00      	nop
 8018b3c:	e000ed08 	.word	0xe000ed08

08018b40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018b40:	b580      	push	{r7, lr}
 8018b42:	b086      	sub	sp, #24
 8018b44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018b46:	4b46      	ldr	r3, [pc, #280]	; (8018c60 <xPortStartScheduler+0x120>)
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	4a46      	ldr	r2, [pc, #280]	; (8018c64 <xPortStartScheduler+0x124>)
 8018b4c:	4293      	cmp	r3, r2
 8018b4e:	d10a      	bne.n	8018b66 <xPortStartScheduler+0x26>
	__asm volatile
 8018b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b54:	f383 8811 	msr	BASEPRI, r3
 8018b58:	f3bf 8f6f 	isb	sy
 8018b5c:	f3bf 8f4f 	dsb	sy
 8018b60:	613b      	str	r3, [r7, #16]
}
 8018b62:	bf00      	nop
 8018b64:	e7fe      	b.n	8018b64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018b66:	4b3e      	ldr	r3, [pc, #248]	; (8018c60 <xPortStartScheduler+0x120>)
 8018b68:	681b      	ldr	r3, [r3, #0]
 8018b6a:	4a3f      	ldr	r2, [pc, #252]	; (8018c68 <xPortStartScheduler+0x128>)
 8018b6c:	4293      	cmp	r3, r2
 8018b6e:	d10a      	bne.n	8018b86 <xPortStartScheduler+0x46>
	__asm volatile
 8018b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b74:	f383 8811 	msr	BASEPRI, r3
 8018b78:	f3bf 8f6f 	isb	sy
 8018b7c:	f3bf 8f4f 	dsb	sy
 8018b80:	60fb      	str	r3, [r7, #12]
}
 8018b82:	bf00      	nop
 8018b84:	e7fe      	b.n	8018b84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018b86:	4b39      	ldr	r3, [pc, #228]	; (8018c6c <xPortStartScheduler+0x12c>)
 8018b88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018b8a:	697b      	ldr	r3, [r7, #20]
 8018b8c:	781b      	ldrb	r3, [r3, #0]
 8018b8e:	b2db      	uxtb	r3, r3
 8018b90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018b92:	697b      	ldr	r3, [r7, #20]
 8018b94:	22ff      	movs	r2, #255	; 0xff
 8018b96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018b98:	697b      	ldr	r3, [r7, #20]
 8018b9a:	781b      	ldrb	r3, [r3, #0]
 8018b9c:	b2db      	uxtb	r3, r3
 8018b9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018ba0:	78fb      	ldrb	r3, [r7, #3]
 8018ba2:	b2db      	uxtb	r3, r3
 8018ba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8018ba8:	b2da      	uxtb	r2, r3
 8018baa:	4b31      	ldr	r3, [pc, #196]	; (8018c70 <xPortStartScheduler+0x130>)
 8018bac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018bae:	4b31      	ldr	r3, [pc, #196]	; (8018c74 <xPortStartScheduler+0x134>)
 8018bb0:	2207      	movs	r2, #7
 8018bb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018bb4:	e009      	b.n	8018bca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8018bb6:	4b2f      	ldr	r3, [pc, #188]	; (8018c74 <xPortStartScheduler+0x134>)
 8018bb8:	681b      	ldr	r3, [r3, #0]
 8018bba:	3b01      	subs	r3, #1
 8018bbc:	4a2d      	ldr	r2, [pc, #180]	; (8018c74 <xPortStartScheduler+0x134>)
 8018bbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018bc0:	78fb      	ldrb	r3, [r7, #3]
 8018bc2:	b2db      	uxtb	r3, r3
 8018bc4:	005b      	lsls	r3, r3, #1
 8018bc6:	b2db      	uxtb	r3, r3
 8018bc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018bca:	78fb      	ldrb	r3, [r7, #3]
 8018bcc:	b2db      	uxtb	r3, r3
 8018bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018bd2:	2b80      	cmp	r3, #128	; 0x80
 8018bd4:	d0ef      	beq.n	8018bb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018bd6:	4b27      	ldr	r3, [pc, #156]	; (8018c74 <xPortStartScheduler+0x134>)
 8018bd8:	681b      	ldr	r3, [r3, #0]
 8018bda:	f1c3 0307 	rsb	r3, r3, #7
 8018bde:	2b04      	cmp	r3, #4
 8018be0:	d00a      	beq.n	8018bf8 <xPortStartScheduler+0xb8>
	__asm volatile
 8018be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018be6:	f383 8811 	msr	BASEPRI, r3
 8018bea:	f3bf 8f6f 	isb	sy
 8018bee:	f3bf 8f4f 	dsb	sy
 8018bf2:	60bb      	str	r3, [r7, #8]
}
 8018bf4:	bf00      	nop
 8018bf6:	e7fe      	b.n	8018bf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018bf8:	4b1e      	ldr	r3, [pc, #120]	; (8018c74 <xPortStartScheduler+0x134>)
 8018bfa:	681b      	ldr	r3, [r3, #0]
 8018bfc:	021b      	lsls	r3, r3, #8
 8018bfe:	4a1d      	ldr	r2, [pc, #116]	; (8018c74 <xPortStartScheduler+0x134>)
 8018c00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018c02:	4b1c      	ldr	r3, [pc, #112]	; (8018c74 <xPortStartScheduler+0x134>)
 8018c04:	681b      	ldr	r3, [r3, #0]
 8018c06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8018c0a:	4a1a      	ldr	r2, [pc, #104]	; (8018c74 <xPortStartScheduler+0x134>)
 8018c0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	b2da      	uxtb	r2, r3
 8018c12:	697b      	ldr	r3, [r7, #20]
 8018c14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018c16:	4b18      	ldr	r3, [pc, #96]	; (8018c78 <xPortStartScheduler+0x138>)
 8018c18:	681b      	ldr	r3, [r3, #0]
 8018c1a:	4a17      	ldr	r2, [pc, #92]	; (8018c78 <xPortStartScheduler+0x138>)
 8018c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018c20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018c22:	4b15      	ldr	r3, [pc, #84]	; (8018c78 <xPortStartScheduler+0x138>)
 8018c24:	681b      	ldr	r3, [r3, #0]
 8018c26:	4a14      	ldr	r2, [pc, #80]	; (8018c78 <xPortStartScheduler+0x138>)
 8018c28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8018c2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8018c2e:	f000 f8dd 	bl	8018dec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018c32:	4b12      	ldr	r3, [pc, #72]	; (8018c7c <xPortStartScheduler+0x13c>)
 8018c34:	2200      	movs	r2, #0
 8018c36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018c38:	f000 f8fc 	bl	8018e34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018c3c:	4b10      	ldr	r3, [pc, #64]	; (8018c80 <xPortStartScheduler+0x140>)
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	4a0f      	ldr	r2, [pc, #60]	; (8018c80 <xPortStartScheduler+0x140>)
 8018c42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8018c46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8018c48:	f7ff ff66 	bl	8018b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8018c4c:	f7fe ff58 	bl	8017b00 <vTaskSwitchContext>
	prvTaskExitError();
 8018c50:	f7ff ff22 	bl	8018a98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8018c54:	2300      	movs	r3, #0
}
 8018c56:	4618      	mov	r0, r3
 8018c58:	3718      	adds	r7, #24
 8018c5a:	46bd      	mov	sp, r7
 8018c5c:	bd80      	pop	{r7, pc}
 8018c5e:	bf00      	nop
 8018c60:	e000ed00 	.word	0xe000ed00
 8018c64:	410fc271 	.word	0x410fc271
 8018c68:	410fc270 	.word	0x410fc270
 8018c6c:	e000e400 	.word	0xe000e400
 8018c70:	20001e20 	.word	0x20001e20
 8018c74:	20001e24 	.word	0x20001e24
 8018c78:	e000ed20 	.word	0xe000ed20
 8018c7c:	200000cc 	.word	0x200000cc
 8018c80:	e000ef34 	.word	0xe000ef34

08018c84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8018c84:	b480      	push	{r7}
 8018c86:	b083      	sub	sp, #12
 8018c88:	af00      	add	r7, sp, #0
	__asm volatile
 8018c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c8e:	f383 8811 	msr	BASEPRI, r3
 8018c92:	f3bf 8f6f 	isb	sy
 8018c96:	f3bf 8f4f 	dsb	sy
 8018c9a:	607b      	str	r3, [r7, #4]
}
 8018c9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8018c9e:	4b0f      	ldr	r3, [pc, #60]	; (8018cdc <vPortEnterCritical+0x58>)
 8018ca0:	681b      	ldr	r3, [r3, #0]
 8018ca2:	3301      	adds	r3, #1
 8018ca4:	4a0d      	ldr	r2, [pc, #52]	; (8018cdc <vPortEnterCritical+0x58>)
 8018ca6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8018ca8:	4b0c      	ldr	r3, [pc, #48]	; (8018cdc <vPortEnterCritical+0x58>)
 8018caa:	681b      	ldr	r3, [r3, #0]
 8018cac:	2b01      	cmp	r3, #1
 8018cae:	d10f      	bne.n	8018cd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018cb0:	4b0b      	ldr	r3, [pc, #44]	; (8018ce0 <vPortEnterCritical+0x5c>)
 8018cb2:	681b      	ldr	r3, [r3, #0]
 8018cb4:	b2db      	uxtb	r3, r3
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	d00a      	beq.n	8018cd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8018cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cbe:	f383 8811 	msr	BASEPRI, r3
 8018cc2:	f3bf 8f6f 	isb	sy
 8018cc6:	f3bf 8f4f 	dsb	sy
 8018cca:	603b      	str	r3, [r7, #0]
}
 8018ccc:	bf00      	nop
 8018cce:	e7fe      	b.n	8018cce <vPortEnterCritical+0x4a>
	}
}
 8018cd0:	bf00      	nop
 8018cd2:	370c      	adds	r7, #12
 8018cd4:	46bd      	mov	sp, r7
 8018cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cda:	4770      	bx	lr
 8018cdc:	200000cc 	.word	0x200000cc
 8018ce0:	e000ed04 	.word	0xe000ed04

08018ce4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018ce4:	b480      	push	{r7}
 8018ce6:	b083      	sub	sp, #12
 8018ce8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8018cea:	4b12      	ldr	r3, [pc, #72]	; (8018d34 <vPortExitCritical+0x50>)
 8018cec:	681b      	ldr	r3, [r3, #0]
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d10a      	bne.n	8018d08 <vPortExitCritical+0x24>
	__asm volatile
 8018cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cf6:	f383 8811 	msr	BASEPRI, r3
 8018cfa:	f3bf 8f6f 	isb	sy
 8018cfe:	f3bf 8f4f 	dsb	sy
 8018d02:	607b      	str	r3, [r7, #4]
}
 8018d04:	bf00      	nop
 8018d06:	e7fe      	b.n	8018d06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8018d08:	4b0a      	ldr	r3, [pc, #40]	; (8018d34 <vPortExitCritical+0x50>)
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	3b01      	subs	r3, #1
 8018d0e:	4a09      	ldr	r2, [pc, #36]	; (8018d34 <vPortExitCritical+0x50>)
 8018d10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018d12:	4b08      	ldr	r3, [pc, #32]	; (8018d34 <vPortExitCritical+0x50>)
 8018d14:	681b      	ldr	r3, [r3, #0]
 8018d16:	2b00      	cmp	r3, #0
 8018d18:	d105      	bne.n	8018d26 <vPortExitCritical+0x42>
 8018d1a:	2300      	movs	r3, #0
 8018d1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018d1e:	683b      	ldr	r3, [r7, #0]
 8018d20:	f383 8811 	msr	BASEPRI, r3
}
 8018d24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8018d26:	bf00      	nop
 8018d28:	370c      	adds	r7, #12
 8018d2a:	46bd      	mov	sp, r7
 8018d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d30:	4770      	bx	lr
 8018d32:	bf00      	nop
 8018d34:	200000cc 	.word	0x200000cc
	...

08018d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018d40:	f3ef 8009 	mrs	r0, PSP
 8018d44:	f3bf 8f6f 	isb	sy
 8018d48:	4b15      	ldr	r3, [pc, #84]	; (8018da0 <pxCurrentTCBConst>)
 8018d4a:	681a      	ldr	r2, [r3, #0]
 8018d4c:	f01e 0f10 	tst.w	lr, #16
 8018d50:	bf08      	it	eq
 8018d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d5a:	6010      	str	r0, [r2, #0]
 8018d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018d60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8018d64:	f380 8811 	msr	BASEPRI, r0
 8018d68:	f3bf 8f4f 	dsb	sy
 8018d6c:	f3bf 8f6f 	isb	sy
 8018d70:	f7fe fec6 	bl	8017b00 <vTaskSwitchContext>
 8018d74:	f04f 0000 	mov.w	r0, #0
 8018d78:	f380 8811 	msr	BASEPRI, r0
 8018d7c:	bc09      	pop	{r0, r3}
 8018d7e:	6819      	ldr	r1, [r3, #0]
 8018d80:	6808      	ldr	r0, [r1, #0]
 8018d82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d86:	f01e 0f10 	tst.w	lr, #16
 8018d8a:	bf08      	it	eq
 8018d8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018d90:	f380 8809 	msr	PSP, r0
 8018d94:	f3bf 8f6f 	isb	sy
 8018d98:	4770      	bx	lr
 8018d9a:	bf00      	nop
 8018d9c:	f3af 8000 	nop.w

08018da0 <pxCurrentTCBConst>:
 8018da0:	200017f4 	.word	0x200017f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018da4:	bf00      	nop
 8018da6:	bf00      	nop

08018da8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018da8:	b580      	push	{r7, lr}
 8018daa:	b082      	sub	sp, #8
 8018dac:	af00      	add	r7, sp, #0
	__asm volatile
 8018dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018db2:	f383 8811 	msr	BASEPRI, r3
 8018db6:	f3bf 8f6f 	isb	sy
 8018dba:	f3bf 8f4f 	dsb	sy
 8018dbe:	607b      	str	r3, [r7, #4]
}
 8018dc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018dc2:	f7fe fde3 	bl	801798c <xTaskIncrementTick>
 8018dc6:	4603      	mov	r3, r0
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	d003      	beq.n	8018dd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8018dcc:	4b06      	ldr	r3, [pc, #24]	; (8018de8 <xPortSysTickHandler+0x40>)
 8018dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018dd2:	601a      	str	r2, [r3, #0]
 8018dd4:	2300      	movs	r3, #0
 8018dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018dd8:	683b      	ldr	r3, [r7, #0]
 8018dda:	f383 8811 	msr	BASEPRI, r3
}
 8018dde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018de0:	bf00      	nop
 8018de2:	3708      	adds	r7, #8
 8018de4:	46bd      	mov	sp, r7
 8018de6:	bd80      	pop	{r7, pc}
 8018de8:	e000ed04 	.word	0xe000ed04

08018dec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8018dec:	b480      	push	{r7}
 8018dee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018df0:	4b0b      	ldr	r3, [pc, #44]	; (8018e20 <vPortSetupTimerInterrupt+0x34>)
 8018df2:	2200      	movs	r2, #0
 8018df4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018df6:	4b0b      	ldr	r3, [pc, #44]	; (8018e24 <vPortSetupTimerInterrupt+0x38>)
 8018df8:	2200      	movs	r2, #0
 8018dfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018dfc:	4b0a      	ldr	r3, [pc, #40]	; (8018e28 <vPortSetupTimerInterrupt+0x3c>)
 8018dfe:	681b      	ldr	r3, [r3, #0]
 8018e00:	4a0a      	ldr	r2, [pc, #40]	; (8018e2c <vPortSetupTimerInterrupt+0x40>)
 8018e02:	fba2 2303 	umull	r2, r3, r2, r3
 8018e06:	099b      	lsrs	r3, r3, #6
 8018e08:	4a09      	ldr	r2, [pc, #36]	; (8018e30 <vPortSetupTimerInterrupt+0x44>)
 8018e0a:	3b01      	subs	r3, #1
 8018e0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018e0e:	4b04      	ldr	r3, [pc, #16]	; (8018e20 <vPortSetupTimerInterrupt+0x34>)
 8018e10:	2207      	movs	r2, #7
 8018e12:	601a      	str	r2, [r3, #0]
}
 8018e14:	bf00      	nop
 8018e16:	46bd      	mov	sp, r7
 8018e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e1c:	4770      	bx	lr
 8018e1e:	bf00      	nop
 8018e20:	e000e010 	.word	0xe000e010
 8018e24:	e000e018 	.word	0xe000e018
 8018e28:	200000c0 	.word	0x200000c0
 8018e2c:	10624dd3 	.word	0x10624dd3
 8018e30:	e000e014 	.word	0xe000e014

08018e34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018e34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018e44 <vPortEnableVFP+0x10>
 8018e38:	6801      	ldr	r1, [r0, #0]
 8018e3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8018e3e:	6001      	str	r1, [r0, #0]
 8018e40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018e42:	bf00      	nop
 8018e44:	e000ed88 	.word	0xe000ed88

08018e48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018e48:	b480      	push	{r7}
 8018e4a:	b085      	sub	sp, #20
 8018e4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8018e4e:	f3ef 8305 	mrs	r3, IPSR
 8018e52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018e54:	68fb      	ldr	r3, [r7, #12]
 8018e56:	2b0f      	cmp	r3, #15
 8018e58:	d914      	bls.n	8018e84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018e5a:	4a17      	ldr	r2, [pc, #92]	; (8018eb8 <vPortValidateInterruptPriority+0x70>)
 8018e5c:	68fb      	ldr	r3, [r7, #12]
 8018e5e:	4413      	add	r3, r2
 8018e60:	781b      	ldrb	r3, [r3, #0]
 8018e62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018e64:	4b15      	ldr	r3, [pc, #84]	; (8018ebc <vPortValidateInterruptPriority+0x74>)
 8018e66:	781b      	ldrb	r3, [r3, #0]
 8018e68:	7afa      	ldrb	r2, [r7, #11]
 8018e6a:	429a      	cmp	r2, r3
 8018e6c:	d20a      	bcs.n	8018e84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8018e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e72:	f383 8811 	msr	BASEPRI, r3
 8018e76:	f3bf 8f6f 	isb	sy
 8018e7a:	f3bf 8f4f 	dsb	sy
 8018e7e:	607b      	str	r3, [r7, #4]
}
 8018e80:	bf00      	nop
 8018e82:	e7fe      	b.n	8018e82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018e84:	4b0e      	ldr	r3, [pc, #56]	; (8018ec0 <vPortValidateInterruptPriority+0x78>)
 8018e86:	681b      	ldr	r3, [r3, #0]
 8018e88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8018e8c:	4b0d      	ldr	r3, [pc, #52]	; (8018ec4 <vPortValidateInterruptPriority+0x7c>)
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	429a      	cmp	r2, r3
 8018e92:	d90a      	bls.n	8018eaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8018e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e98:	f383 8811 	msr	BASEPRI, r3
 8018e9c:	f3bf 8f6f 	isb	sy
 8018ea0:	f3bf 8f4f 	dsb	sy
 8018ea4:	603b      	str	r3, [r7, #0]
}
 8018ea6:	bf00      	nop
 8018ea8:	e7fe      	b.n	8018ea8 <vPortValidateInterruptPriority+0x60>
	}
 8018eaa:	bf00      	nop
 8018eac:	3714      	adds	r7, #20
 8018eae:	46bd      	mov	sp, r7
 8018eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eb4:	4770      	bx	lr
 8018eb6:	bf00      	nop
 8018eb8:	e000e3f0 	.word	0xe000e3f0
 8018ebc:	20001e20 	.word	0x20001e20
 8018ec0:	e000ed0c 	.word	0xe000ed0c
 8018ec4:	20001e24 	.word	0x20001e24

08018ec8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018ec8:	b580      	push	{r7, lr}
 8018eca:	b08a      	sub	sp, #40	; 0x28
 8018ecc:	af00      	add	r7, sp, #0
 8018ece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018ed0:	2300      	movs	r3, #0
 8018ed2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018ed4:	f7fe fc9e 	bl	8017814 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018ed8:	4b5b      	ldr	r3, [pc, #364]	; (8019048 <pvPortMalloc+0x180>)
 8018eda:	681b      	ldr	r3, [r3, #0]
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	d101      	bne.n	8018ee4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018ee0:	f000 f920 	bl	8019124 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018ee4:	4b59      	ldr	r3, [pc, #356]	; (801904c <pvPortMalloc+0x184>)
 8018ee6:	681a      	ldr	r2, [r3, #0]
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	4013      	ands	r3, r2
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	f040 8093 	bne.w	8019018 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	d01d      	beq.n	8018f34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8018ef8:	2208      	movs	r2, #8
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	4413      	add	r3, r2
 8018efe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018f00:	687b      	ldr	r3, [r7, #4]
 8018f02:	f003 0307 	and.w	r3, r3, #7
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	d014      	beq.n	8018f34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	f023 0307 	bic.w	r3, r3, #7
 8018f10:	3308      	adds	r3, #8
 8018f12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	f003 0307 	and.w	r3, r3, #7
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	d00a      	beq.n	8018f34 <pvPortMalloc+0x6c>
	__asm volatile
 8018f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f22:	f383 8811 	msr	BASEPRI, r3
 8018f26:	f3bf 8f6f 	isb	sy
 8018f2a:	f3bf 8f4f 	dsb	sy
 8018f2e:	617b      	str	r3, [r7, #20]
}
 8018f30:	bf00      	nop
 8018f32:	e7fe      	b.n	8018f32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	d06e      	beq.n	8019018 <pvPortMalloc+0x150>
 8018f3a:	4b45      	ldr	r3, [pc, #276]	; (8019050 <pvPortMalloc+0x188>)
 8018f3c:	681b      	ldr	r3, [r3, #0]
 8018f3e:	687a      	ldr	r2, [r7, #4]
 8018f40:	429a      	cmp	r2, r3
 8018f42:	d869      	bhi.n	8019018 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8018f44:	4b43      	ldr	r3, [pc, #268]	; (8019054 <pvPortMalloc+0x18c>)
 8018f46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8018f48:	4b42      	ldr	r3, [pc, #264]	; (8019054 <pvPortMalloc+0x18c>)
 8018f4a:	681b      	ldr	r3, [r3, #0]
 8018f4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018f4e:	e004      	b.n	8018f5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8018f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8018f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f56:	681b      	ldr	r3, [r3, #0]
 8018f58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f5c:	685b      	ldr	r3, [r3, #4]
 8018f5e:	687a      	ldr	r2, [r7, #4]
 8018f60:	429a      	cmp	r2, r3
 8018f62:	d903      	bls.n	8018f6c <pvPortMalloc+0xa4>
 8018f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f66:	681b      	ldr	r3, [r3, #0]
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d1f1      	bne.n	8018f50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8018f6c:	4b36      	ldr	r3, [pc, #216]	; (8019048 <pvPortMalloc+0x180>)
 8018f6e:	681b      	ldr	r3, [r3, #0]
 8018f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018f72:	429a      	cmp	r2, r3
 8018f74:	d050      	beq.n	8019018 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8018f76:	6a3b      	ldr	r3, [r7, #32]
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	2208      	movs	r2, #8
 8018f7c:	4413      	add	r3, r2
 8018f7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f82:	681a      	ldr	r2, [r3, #0]
 8018f84:	6a3b      	ldr	r3, [r7, #32]
 8018f86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f8a:	685a      	ldr	r2, [r3, #4]
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	1ad2      	subs	r2, r2, r3
 8018f90:	2308      	movs	r3, #8
 8018f92:	005b      	lsls	r3, r3, #1
 8018f94:	429a      	cmp	r2, r3
 8018f96:	d91f      	bls.n	8018fd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	4413      	add	r3, r2
 8018f9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018fa0:	69bb      	ldr	r3, [r7, #24]
 8018fa2:	f003 0307 	and.w	r3, r3, #7
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d00a      	beq.n	8018fc0 <pvPortMalloc+0xf8>
	__asm volatile
 8018faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fae:	f383 8811 	msr	BASEPRI, r3
 8018fb2:	f3bf 8f6f 	isb	sy
 8018fb6:	f3bf 8f4f 	dsb	sy
 8018fba:	613b      	str	r3, [r7, #16]
}
 8018fbc:	bf00      	nop
 8018fbe:	e7fe      	b.n	8018fbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fc2:	685a      	ldr	r2, [r3, #4]
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	1ad2      	subs	r2, r2, r3
 8018fc8:	69bb      	ldr	r3, [r7, #24]
 8018fca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8018fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fce:	687a      	ldr	r2, [r7, #4]
 8018fd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018fd2:	69b8      	ldr	r0, [r7, #24]
 8018fd4:	f000 f908 	bl	80191e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018fd8:	4b1d      	ldr	r3, [pc, #116]	; (8019050 <pvPortMalloc+0x188>)
 8018fda:	681a      	ldr	r2, [r3, #0]
 8018fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fde:	685b      	ldr	r3, [r3, #4]
 8018fe0:	1ad3      	subs	r3, r2, r3
 8018fe2:	4a1b      	ldr	r2, [pc, #108]	; (8019050 <pvPortMalloc+0x188>)
 8018fe4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018fe6:	4b1a      	ldr	r3, [pc, #104]	; (8019050 <pvPortMalloc+0x188>)
 8018fe8:	681a      	ldr	r2, [r3, #0]
 8018fea:	4b1b      	ldr	r3, [pc, #108]	; (8019058 <pvPortMalloc+0x190>)
 8018fec:	681b      	ldr	r3, [r3, #0]
 8018fee:	429a      	cmp	r2, r3
 8018ff0:	d203      	bcs.n	8018ffa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018ff2:	4b17      	ldr	r3, [pc, #92]	; (8019050 <pvPortMalloc+0x188>)
 8018ff4:	681b      	ldr	r3, [r3, #0]
 8018ff6:	4a18      	ldr	r2, [pc, #96]	; (8019058 <pvPortMalloc+0x190>)
 8018ff8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8018ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ffc:	685a      	ldr	r2, [r3, #4]
 8018ffe:	4b13      	ldr	r3, [pc, #76]	; (801904c <pvPortMalloc+0x184>)
 8019000:	681b      	ldr	r3, [r3, #0]
 8019002:	431a      	orrs	r2, r3
 8019004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019006:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801900a:	2200      	movs	r2, #0
 801900c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801900e:	4b13      	ldr	r3, [pc, #76]	; (801905c <pvPortMalloc+0x194>)
 8019010:	681b      	ldr	r3, [r3, #0]
 8019012:	3301      	adds	r3, #1
 8019014:	4a11      	ldr	r2, [pc, #68]	; (801905c <pvPortMalloc+0x194>)
 8019016:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019018:	f7fe fc0a 	bl	8017830 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801901c:	69fb      	ldr	r3, [r7, #28]
 801901e:	f003 0307 	and.w	r3, r3, #7
 8019022:	2b00      	cmp	r3, #0
 8019024:	d00a      	beq.n	801903c <pvPortMalloc+0x174>
	__asm volatile
 8019026:	f04f 0350 	mov.w	r3, #80	; 0x50
 801902a:	f383 8811 	msr	BASEPRI, r3
 801902e:	f3bf 8f6f 	isb	sy
 8019032:	f3bf 8f4f 	dsb	sy
 8019036:	60fb      	str	r3, [r7, #12]
}
 8019038:	bf00      	nop
 801903a:	e7fe      	b.n	801903a <pvPortMalloc+0x172>
	return pvReturn;
 801903c:	69fb      	ldr	r3, [r7, #28]
}
 801903e:	4618      	mov	r0, r3
 8019040:	3728      	adds	r7, #40	; 0x28
 8019042:	46bd      	mov	sp, r7
 8019044:	bd80      	pop	{r7, pc}
 8019046:	bf00      	nop
 8019048:	20005a30 	.word	0x20005a30
 801904c:	20005a44 	.word	0x20005a44
 8019050:	20005a34 	.word	0x20005a34
 8019054:	20005a28 	.word	0x20005a28
 8019058:	20005a38 	.word	0x20005a38
 801905c:	20005a3c 	.word	0x20005a3c

08019060 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019060:	b580      	push	{r7, lr}
 8019062:	b086      	sub	sp, #24
 8019064:	af00      	add	r7, sp, #0
 8019066:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	2b00      	cmp	r3, #0
 8019070:	d04d      	beq.n	801910e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8019072:	2308      	movs	r3, #8
 8019074:	425b      	negs	r3, r3
 8019076:	697a      	ldr	r2, [r7, #20]
 8019078:	4413      	add	r3, r2
 801907a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801907c:	697b      	ldr	r3, [r7, #20]
 801907e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019080:	693b      	ldr	r3, [r7, #16]
 8019082:	685a      	ldr	r2, [r3, #4]
 8019084:	4b24      	ldr	r3, [pc, #144]	; (8019118 <vPortFree+0xb8>)
 8019086:	681b      	ldr	r3, [r3, #0]
 8019088:	4013      	ands	r3, r2
 801908a:	2b00      	cmp	r3, #0
 801908c:	d10a      	bne.n	80190a4 <vPortFree+0x44>
	__asm volatile
 801908e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019092:	f383 8811 	msr	BASEPRI, r3
 8019096:	f3bf 8f6f 	isb	sy
 801909a:	f3bf 8f4f 	dsb	sy
 801909e:	60fb      	str	r3, [r7, #12]
}
 80190a0:	bf00      	nop
 80190a2:	e7fe      	b.n	80190a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80190a4:	693b      	ldr	r3, [r7, #16]
 80190a6:	681b      	ldr	r3, [r3, #0]
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	d00a      	beq.n	80190c2 <vPortFree+0x62>
	__asm volatile
 80190ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190b0:	f383 8811 	msr	BASEPRI, r3
 80190b4:	f3bf 8f6f 	isb	sy
 80190b8:	f3bf 8f4f 	dsb	sy
 80190bc:	60bb      	str	r3, [r7, #8]
}
 80190be:	bf00      	nop
 80190c0:	e7fe      	b.n	80190c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80190c2:	693b      	ldr	r3, [r7, #16]
 80190c4:	685a      	ldr	r2, [r3, #4]
 80190c6:	4b14      	ldr	r3, [pc, #80]	; (8019118 <vPortFree+0xb8>)
 80190c8:	681b      	ldr	r3, [r3, #0]
 80190ca:	4013      	ands	r3, r2
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d01e      	beq.n	801910e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80190d0:	693b      	ldr	r3, [r7, #16]
 80190d2:	681b      	ldr	r3, [r3, #0]
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d11a      	bne.n	801910e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80190d8:	693b      	ldr	r3, [r7, #16]
 80190da:	685a      	ldr	r2, [r3, #4]
 80190dc:	4b0e      	ldr	r3, [pc, #56]	; (8019118 <vPortFree+0xb8>)
 80190de:	681b      	ldr	r3, [r3, #0]
 80190e0:	43db      	mvns	r3, r3
 80190e2:	401a      	ands	r2, r3
 80190e4:	693b      	ldr	r3, [r7, #16]
 80190e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80190e8:	f7fe fb94 	bl	8017814 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80190ec:	693b      	ldr	r3, [r7, #16]
 80190ee:	685a      	ldr	r2, [r3, #4]
 80190f0:	4b0a      	ldr	r3, [pc, #40]	; (801911c <vPortFree+0xbc>)
 80190f2:	681b      	ldr	r3, [r3, #0]
 80190f4:	4413      	add	r3, r2
 80190f6:	4a09      	ldr	r2, [pc, #36]	; (801911c <vPortFree+0xbc>)
 80190f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80190fa:	6938      	ldr	r0, [r7, #16]
 80190fc:	f000 f874 	bl	80191e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019100:	4b07      	ldr	r3, [pc, #28]	; (8019120 <vPortFree+0xc0>)
 8019102:	681b      	ldr	r3, [r3, #0]
 8019104:	3301      	adds	r3, #1
 8019106:	4a06      	ldr	r2, [pc, #24]	; (8019120 <vPortFree+0xc0>)
 8019108:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801910a:	f7fe fb91 	bl	8017830 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801910e:	bf00      	nop
 8019110:	3718      	adds	r7, #24
 8019112:	46bd      	mov	sp, r7
 8019114:	bd80      	pop	{r7, pc}
 8019116:	bf00      	nop
 8019118:	20005a44 	.word	0x20005a44
 801911c:	20005a34 	.word	0x20005a34
 8019120:	20005a40 	.word	0x20005a40

08019124 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019124:	b480      	push	{r7}
 8019126:	b085      	sub	sp, #20
 8019128:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801912a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801912e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019130:	4b27      	ldr	r3, [pc, #156]	; (80191d0 <prvHeapInit+0xac>)
 8019132:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019134:	68fb      	ldr	r3, [r7, #12]
 8019136:	f003 0307 	and.w	r3, r3, #7
 801913a:	2b00      	cmp	r3, #0
 801913c:	d00c      	beq.n	8019158 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801913e:	68fb      	ldr	r3, [r7, #12]
 8019140:	3307      	adds	r3, #7
 8019142:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019144:	68fb      	ldr	r3, [r7, #12]
 8019146:	f023 0307 	bic.w	r3, r3, #7
 801914a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801914c:	68ba      	ldr	r2, [r7, #8]
 801914e:	68fb      	ldr	r3, [r7, #12]
 8019150:	1ad3      	subs	r3, r2, r3
 8019152:	4a1f      	ldr	r2, [pc, #124]	; (80191d0 <prvHeapInit+0xac>)
 8019154:	4413      	add	r3, r2
 8019156:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019158:	68fb      	ldr	r3, [r7, #12]
 801915a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801915c:	4a1d      	ldr	r2, [pc, #116]	; (80191d4 <prvHeapInit+0xb0>)
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8019162:	4b1c      	ldr	r3, [pc, #112]	; (80191d4 <prvHeapInit+0xb0>)
 8019164:	2200      	movs	r2, #0
 8019166:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	68ba      	ldr	r2, [r7, #8]
 801916c:	4413      	add	r3, r2
 801916e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019170:	2208      	movs	r2, #8
 8019172:	68fb      	ldr	r3, [r7, #12]
 8019174:	1a9b      	subs	r3, r3, r2
 8019176:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019178:	68fb      	ldr	r3, [r7, #12]
 801917a:	f023 0307 	bic.w	r3, r3, #7
 801917e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019180:	68fb      	ldr	r3, [r7, #12]
 8019182:	4a15      	ldr	r2, [pc, #84]	; (80191d8 <prvHeapInit+0xb4>)
 8019184:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019186:	4b14      	ldr	r3, [pc, #80]	; (80191d8 <prvHeapInit+0xb4>)
 8019188:	681b      	ldr	r3, [r3, #0]
 801918a:	2200      	movs	r2, #0
 801918c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801918e:	4b12      	ldr	r3, [pc, #72]	; (80191d8 <prvHeapInit+0xb4>)
 8019190:	681b      	ldr	r3, [r3, #0]
 8019192:	2200      	movs	r2, #0
 8019194:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801919a:	683b      	ldr	r3, [r7, #0]
 801919c:	68fa      	ldr	r2, [r7, #12]
 801919e:	1ad2      	subs	r2, r2, r3
 80191a0:	683b      	ldr	r3, [r7, #0]
 80191a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80191a4:	4b0c      	ldr	r3, [pc, #48]	; (80191d8 <prvHeapInit+0xb4>)
 80191a6:	681a      	ldr	r2, [r3, #0]
 80191a8:	683b      	ldr	r3, [r7, #0]
 80191aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80191ac:	683b      	ldr	r3, [r7, #0]
 80191ae:	685b      	ldr	r3, [r3, #4]
 80191b0:	4a0a      	ldr	r2, [pc, #40]	; (80191dc <prvHeapInit+0xb8>)
 80191b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80191b4:	683b      	ldr	r3, [r7, #0]
 80191b6:	685b      	ldr	r3, [r3, #4]
 80191b8:	4a09      	ldr	r2, [pc, #36]	; (80191e0 <prvHeapInit+0xbc>)
 80191ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80191bc:	4b09      	ldr	r3, [pc, #36]	; (80191e4 <prvHeapInit+0xc0>)
 80191be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80191c2:	601a      	str	r2, [r3, #0]
}
 80191c4:	bf00      	nop
 80191c6:	3714      	adds	r7, #20
 80191c8:	46bd      	mov	sp, r7
 80191ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ce:	4770      	bx	lr
 80191d0:	20001e28 	.word	0x20001e28
 80191d4:	20005a28 	.word	0x20005a28
 80191d8:	20005a30 	.word	0x20005a30
 80191dc:	20005a38 	.word	0x20005a38
 80191e0:	20005a34 	.word	0x20005a34
 80191e4:	20005a44 	.word	0x20005a44

080191e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80191e8:	b480      	push	{r7}
 80191ea:	b085      	sub	sp, #20
 80191ec:	af00      	add	r7, sp, #0
 80191ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80191f0:	4b28      	ldr	r3, [pc, #160]	; (8019294 <prvInsertBlockIntoFreeList+0xac>)
 80191f2:	60fb      	str	r3, [r7, #12]
 80191f4:	e002      	b.n	80191fc <prvInsertBlockIntoFreeList+0x14>
 80191f6:	68fb      	ldr	r3, [r7, #12]
 80191f8:	681b      	ldr	r3, [r3, #0]
 80191fa:	60fb      	str	r3, [r7, #12]
 80191fc:	68fb      	ldr	r3, [r7, #12]
 80191fe:	681b      	ldr	r3, [r3, #0]
 8019200:	687a      	ldr	r2, [r7, #4]
 8019202:	429a      	cmp	r2, r3
 8019204:	d8f7      	bhi.n	80191f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019206:	68fb      	ldr	r3, [r7, #12]
 8019208:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801920a:	68fb      	ldr	r3, [r7, #12]
 801920c:	685b      	ldr	r3, [r3, #4]
 801920e:	68ba      	ldr	r2, [r7, #8]
 8019210:	4413      	add	r3, r2
 8019212:	687a      	ldr	r2, [r7, #4]
 8019214:	429a      	cmp	r2, r3
 8019216:	d108      	bne.n	801922a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019218:	68fb      	ldr	r3, [r7, #12]
 801921a:	685a      	ldr	r2, [r3, #4]
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	685b      	ldr	r3, [r3, #4]
 8019220:	441a      	add	r2, r3
 8019222:	68fb      	ldr	r3, [r7, #12]
 8019224:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019226:	68fb      	ldr	r3, [r7, #12]
 8019228:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	685b      	ldr	r3, [r3, #4]
 8019232:	68ba      	ldr	r2, [r7, #8]
 8019234:	441a      	add	r2, r3
 8019236:	68fb      	ldr	r3, [r7, #12]
 8019238:	681b      	ldr	r3, [r3, #0]
 801923a:	429a      	cmp	r2, r3
 801923c:	d118      	bne.n	8019270 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801923e:	68fb      	ldr	r3, [r7, #12]
 8019240:	681a      	ldr	r2, [r3, #0]
 8019242:	4b15      	ldr	r3, [pc, #84]	; (8019298 <prvInsertBlockIntoFreeList+0xb0>)
 8019244:	681b      	ldr	r3, [r3, #0]
 8019246:	429a      	cmp	r2, r3
 8019248:	d00d      	beq.n	8019266 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	685a      	ldr	r2, [r3, #4]
 801924e:	68fb      	ldr	r3, [r7, #12]
 8019250:	681b      	ldr	r3, [r3, #0]
 8019252:	685b      	ldr	r3, [r3, #4]
 8019254:	441a      	add	r2, r3
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801925a:	68fb      	ldr	r3, [r7, #12]
 801925c:	681b      	ldr	r3, [r3, #0]
 801925e:	681a      	ldr	r2, [r3, #0]
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	601a      	str	r2, [r3, #0]
 8019264:	e008      	b.n	8019278 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019266:	4b0c      	ldr	r3, [pc, #48]	; (8019298 <prvInsertBlockIntoFreeList+0xb0>)
 8019268:	681a      	ldr	r2, [r3, #0]
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	601a      	str	r2, [r3, #0]
 801926e:	e003      	b.n	8019278 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019270:	68fb      	ldr	r3, [r7, #12]
 8019272:	681a      	ldr	r2, [r3, #0]
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019278:	68fa      	ldr	r2, [r7, #12]
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	429a      	cmp	r2, r3
 801927e:	d002      	beq.n	8019286 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019280:	68fb      	ldr	r3, [r7, #12]
 8019282:	687a      	ldr	r2, [r7, #4]
 8019284:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019286:	bf00      	nop
 8019288:	3714      	adds	r7, #20
 801928a:	46bd      	mov	sp, r7
 801928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019290:	4770      	bx	lr
 8019292:	bf00      	nop
 8019294:	20005a28 	.word	0x20005a28
 8019298:	20005a30 	.word	0x20005a30

0801929c <__errno>:
 801929c:	4b01      	ldr	r3, [pc, #4]	; (80192a4 <__errno+0x8>)
 801929e:	6818      	ldr	r0, [r3, #0]
 80192a0:	4770      	bx	lr
 80192a2:	bf00      	nop
 80192a4:	200000d0 	.word	0x200000d0

080192a8 <__libc_init_array>:
 80192a8:	b570      	push	{r4, r5, r6, lr}
 80192aa:	4d0d      	ldr	r5, [pc, #52]	; (80192e0 <__libc_init_array+0x38>)
 80192ac:	4c0d      	ldr	r4, [pc, #52]	; (80192e4 <__libc_init_array+0x3c>)
 80192ae:	1b64      	subs	r4, r4, r5
 80192b0:	10a4      	asrs	r4, r4, #2
 80192b2:	2600      	movs	r6, #0
 80192b4:	42a6      	cmp	r6, r4
 80192b6:	d109      	bne.n	80192cc <__libc_init_array+0x24>
 80192b8:	4d0b      	ldr	r5, [pc, #44]	; (80192e8 <__libc_init_array+0x40>)
 80192ba:	4c0c      	ldr	r4, [pc, #48]	; (80192ec <__libc_init_array+0x44>)
 80192bc:	f007 f8bc 	bl	8020438 <_init>
 80192c0:	1b64      	subs	r4, r4, r5
 80192c2:	10a4      	asrs	r4, r4, #2
 80192c4:	2600      	movs	r6, #0
 80192c6:	42a6      	cmp	r6, r4
 80192c8:	d105      	bne.n	80192d6 <__libc_init_array+0x2e>
 80192ca:	bd70      	pop	{r4, r5, r6, pc}
 80192cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80192d0:	4798      	blx	r3
 80192d2:	3601      	adds	r6, #1
 80192d4:	e7ee      	b.n	80192b4 <__libc_init_array+0xc>
 80192d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80192da:	4798      	blx	r3
 80192dc:	3601      	adds	r6, #1
 80192de:	e7f2      	b.n	80192c6 <__libc_init_array+0x1e>
 80192e0:	080219b0 	.word	0x080219b0
 80192e4:	080219b0 	.word	0x080219b0
 80192e8:	080219b0 	.word	0x080219b0
 80192ec:	080219b4 	.word	0x080219b4

080192f0 <malloc>:
 80192f0:	4b02      	ldr	r3, [pc, #8]	; (80192fc <malloc+0xc>)
 80192f2:	4601      	mov	r1, r0
 80192f4:	6818      	ldr	r0, [r3, #0]
 80192f6:	f000 b871 	b.w	80193dc <_malloc_r>
 80192fa:	bf00      	nop
 80192fc:	200000d0 	.word	0x200000d0

08019300 <free>:
 8019300:	4b02      	ldr	r3, [pc, #8]	; (801930c <free+0xc>)
 8019302:	4601      	mov	r1, r0
 8019304:	6818      	ldr	r0, [r3, #0]
 8019306:	f000 b819 	b.w	801933c <_free_r>
 801930a:	bf00      	nop
 801930c:	200000d0 	.word	0x200000d0

08019310 <memcpy>:
 8019310:	440a      	add	r2, r1
 8019312:	4291      	cmp	r1, r2
 8019314:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019318:	d100      	bne.n	801931c <memcpy+0xc>
 801931a:	4770      	bx	lr
 801931c:	b510      	push	{r4, lr}
 801931e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019322:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019326:	4291      	cmp	r1, r2
 8019328:	d1f9      	bne.n	801931e <memcpy+0xe>
 801932a:	bd10      	pop	{r4, pc}

0801932c <memset>:
 801932c:	4402      	add	r2, r0
 801932e:	4603      	mov	r3, r0
 8019330:	4293      	cmp	r3, r2
 8019332:	d100      	bne.n	8019336 <memset+0xa>
 8019334:	4770      	bx	lr
 8019336:	f803 1b01 	strb.w	r1, [r3], #1
 801933a:	e7f9      	b.n	8019330 <memset+0x4>

0801933c <_free_r>:
 801933c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801933e:	2900      	cmp	r1, #0
 8019340:	d048      	beq.n	80193d4 <_free_r+0x98>
 8019342:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019346:	9001      	str	r0, [sp, #4]
 8019348:	2b00      	cmp	r3, #0
 801934a:	f1a1 0404 	sub.w	r4, r1, #4
 801934e:	bfb8      	it	lt
 8019350:	18e4      	addlt	r4, r4, r3
 8019352:	f003 f8f1 	bl	801c538 <__malloc_lock>
 8019356:	4a20      	ldr	r2, [pc, #128]	; (80193d8 <_free_r+0x9c>)
 8019358:	9801      	ldr	r0, [sp, #4]
 801935a:	6813      	ldr	r3, [r2, #0]
 801935c:	4615      	mov	r5, r2
 801935e:	b933      	cbnz	r3, 801936e <_free_r+0x32>
 8019360:	6063      	str	r3, [r4, #4]
 8019362:	6014      	str	r4, [r2, #0]
 8019364:	b003      	add	sp, #12
 8019366:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801936a:	f003 b8eb 	b.w	801c544 <__malloc_unlock>
 801936e:	42a3      	cmp	r3, r4
 8019370:	d90b      	bls.n	801938a <_free_r+0x4e>
 8019372:	6821      	ldr	r1, [r4, #0]
 8019374:	1862      	adds	r2, r4, r1
 8019376:	4293      	cmp	r3, r2
 8019378:	bf04      	itt	eq
 801937a:	681a      	ldreq	r2, [r3, #0]
 801937c:	685b      	ldreq	r3, [r3, #4]
 801937e:	6063      	str	r3, [r4, #4]
 8019380:	bf04      	itt	eq
 8019382:	1852      	addeq	r2, r2, r1
 8019384:	6022      	streq	r2, [r4, #0]
 8019386:	602c      	str	r4, [r5, #0]
 8019388:	e7ec      	b.n	8019364 <_free_r+0x28>
 801938a:	461a      	mov	r2, r3
 801938c:	685b      	ldr	r3, [r3, #4]
 801938e:	b10b      	cbz	r3, 8019394 <_free_r+0x58>
 8019390:	42a3      	cmp	r3, r4
 8019392:	d9fa      	bls.n	801938a <_free_r+0x4e>
 8019394:	6811      	ldr	r1, [r2, #0]
 8019396:	1855      	adds	r5, r2, r1
 8019398:	42a5      	cmp	r5, r4
 801939a:	d10b      	bne.n	80193b4 <_free_r+0x78>
 801939c:	6824      	ldr	r4, [r4, #0]
 801939e:	4421      	add	r1, r4
 80193a0:	1854      	adds	r4, r2, r1
 80193a2:	42a3      	cmp	r3, r4
 80193a4:	6011      	str	r1, [r2, #0]
 80193a6:	d1dd      	bne.n	8019364 <_free_r+0x28>
 80193a8:	681c      	ldr	r4, [r3, #0]
 80193aa:	685b      	ldr	r3, [r3, #4]
 80193ac:	6053      	str	r3, [r2, #4]
 80193ae:	4421      	add	r1, r4
 80193b0:	6011      	str	r1, [r2, #0]
 80193b2:	e7d7      	b.n	8019364 <_free_r+0x28>
 80193b4:	d902      	bls.n	80193bc <_free_r+0x80>
 80193b6:	230c      	movs	r3, #12
 80193b8:	6003      	str	r3, [r0, #0]
 80193ba:	e7d3      	b.n	8019364 <_free_r+0x28>
 80193bc:	6825      	ldr	r5, [r4, #0]
 80193be:	1961      	adds	r1, r4, r5
 80193c0:	428b      	cmp	r3, r1
 80193c2:	bf04      	itt	eq
 80193c4:	6819      	ldreq	r1, [r3, #0]
 80193c6:	685b      	ldreq	r3, [r3, #4]
 80193c8:	6063      	str	r3, [r4, #4]
 80193ca:	bf04      	itt	eq
 80193cc:	1949      	addeq	r1, r1, r5
 80193ce:	6021      	streq	r1, [r4, #0]
 80193d0:	6054      	str	r4, [r2, #4]
 80193d2:	e7c7      	b.n	8019364 <_free_r+0x28>
 80193d4:	b003      	add	sp, #12
 80193d6:	bd30      	pop	{r4, r5, pc}
 80193d8:	20005a48 	.word	0x20005a48

080193dc <_malloc_r>:
 80193dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193de:	1ccd      	adds	r5, r1, #3
 80193e0:	f025 0503 	bic.w	r5, r5, #3
 80193e4:	3508      	adds	r5, #8
 80193e6:	2d0c      	cmp	r5, #12
 80193e8:	bf38      	it	cc
 80193ea:	250c      	movcc	r5, #12
 80193ec:	2d00      	cmp	r5, #0
 80193ee:	4606      	mov	r6, r0
 80193f0:	db01      	blt.n	80193f6 <_malloc_r+0x1a>
 80193f2:	42a9      	cmp	r1, r5
 80193f4:	d903      	bls.n	80193fe <_malloc_r+0x22>
 80193f6:	230c      	movs	r3, #12
 80193f8:	6033      	str	r3, [r6, #0]
 80193fa:	2000      	movs	r0, #0
 80193fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80193fe:	f003 f89b 	bl	801c538 <__malloc_lock>
 8019402:	4921      	ldr	r1, [pc, #132]	; (8019488 <_malloc_r+0xac>)
 8019404:	680a      	ldr	r2, [r1, #0]
 8019406:	4614      	mov	r4, r2
 8019408:	b99c      	cbnz	r4, 8019432 <_malloc_r+0x56>
 801940a:	4f20      	ldr	r7, [pc, #128]	; (801948c <_malloc_r+0xb0>)
 801940c:	683b      	ldr	r3, [r7, #0]
 801940e:	b923      	cbnz	r3, 801941a <_malloc_r+0x3e>
 8019410:	4621      	mov	r1, r4
 8019412:	4630      	mov	r0, r6
 8019414:	f000 febe 	bl	801a194 <_sbrk_r>
 8019418:	6038      	str	r0, [r7, #0]
 801941a:	4629      	mov	r1, r5
 801941c:	4630      	mov	r0, r6
 801941e:	f000 feb9 	bl	801a194 <_sbrk_r>
 8019422:	1c43      	adds	r3, r0, #1
 8019424:	d123      	bne.n	801946e <_malloc_r+0x92>
 8019426:	230c      	movs	r3, #12
 8019428:	6033      	str	r3, [r6, #0]
 801942a:	4630      	mov	r0, r6
 801942c:	f003 f88a 	bl	801c544 <__malloc_unlock>
 8019430:	e7e3      	b.n	80193fa <_malloc_r+0x1e>
 8019432:	6823      	ldr	r3, [r4, #0]
 8019434:	1b5b      	subs	r3, r3, r5
 8019436:	d417      	bmi.n	8019468 <_malloc_r+0x8c>
 8019438:	2b0b      	cmp	r3, #11
 801943a:	d903      	bls.n	8019444 <_malloc_r+0x68>
 801943c:	6023      	str	r3, [r4, #0]
 801943e:	441c      	add	r4, r3
 8019440:	6025      	str	r5, [r4, #0]
 8019442:	e004      	b.n	801944e <_malloc_r+0x72>
 8019444:	6863      	ldr	r3, [r4, #4]
 8019446:	42a2      	cmp	r2, r4
 8019448:	bf0c      	ite	eq
 801944a:	600b      	streq	r3, [r1, #0]
 801944c:	6053      	strne	r3, [r2, #4]
 801944e:	4630      	mov	r0, r6
 8019450:	f003 f878 	bl	801c544 <__malloc_unlock>
 8019454:	f104 000b 	add.w	r0, r4, #11
 8019458:	1d23      	adds	r3, r4, #4
 801945a:	f020 0007 	bic.w	r0, r0, #7
 801945e:	1ac2      	subs	r2, r0, r3
 8019460:	d0cc      	beq.n	80193fc <_malloc_r+0x20>
 8019462:	1a1b      	subs	r3, r3, r0
 8019464:	50a3      	str	r3, [r4, r2]
 8019466:	e7c9      	b.n	80193fc <_malloc_r+0x20>
 8019468:	4622      	mov	r2, r4
 801946a:	6864      	ldr	r4, [r4, #4]
 801946c:	e7cc      	b.n	8019408 <_malloc_r+0x2c>
 801946e:	1cc4      	adds	r4, r0, #3
 8019470:	f024 0403 	bic.w	r4, r4, #3
 8019474:	42a0      	cmp	r0, r4
 8019476:	d0e3      	beq.n	8019440 <_malloc_r+0x64>
 8019478:	1a21      	subs	r1, r4, r0
 801947a:	4630      	mov	r0, r6
 801947c:	f000 fe8a 	bl	801a194 <_sbrk_r>
 8019480:	3001      	adds	r0, #1
 8019482:	d1dd      	bne.n	8019440 <_malloc_r+0x64>
 8019484:	e7cf      	b.n	8019426 <_malloc_r+0x4a>
 8019486:	bf00      	nop
 8019488:	20005a48 	.word	0x20005a48
 801948c:	20005a4c 	.word	0x20005a4c

08019490 <__cvt>:
 8019490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019494:	ec55 4b10 	vmov	r4, r5, d0
 8019498:	2d00      	cmp	r5, #0
 801949a:	460e      	mov	r6, r1
 801949c:	4619      	mov	r1, r3
 801949e:	462b      	mov	r3, r5
 80194a0:	bfbb      	ittet	lt
 80194a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80194a6:	461d      	movlt	r5, r3
 80194a8:	2300      	movge	r3, #0
 80194aa:	232d      	movlt	r3, #45	; 0x2d
 80194ac:	700b      	strb	r3, [r1, #0]
 80194ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80194b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80194b4:	4691      	mov	r9, r2
 80194b6:	f023 0820 	bic.w	r8, r3, #32
 80194ba:	bfbc      	itt	lt
 80194bc:	4622      	movlt	r2, r4
 80194be:	4614      	movlt	r4, r2
 80194c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80194c4:	d005      	beq.n	80194d2 <__cvt+0x42>
 80194c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80194ca:	d100      	bne.n	80194ce <__cvt+0x3e>
 80194cc:	3601      	adds	r6, #1
 80194ce:	2102      	movs	r1, #2
 80194d0:	e000      	b.n	80194d4 <__cvt+0x44>
 80194d2:	2103      	movs	r1, #3
 80194d4:	ab03      	add	r3, sp, #12
 80194d6:	9301      	str	r3, [sp, #4]
 80194d8:	ab02      	add	r3, sp, #8
 80194da:	9300      	str	r3, [sp, #0]
 80194dc:	ec45 4b10 	vmov	d0, r4, r5
 80194e0:	4653      	mov	r3, sl
 80194e2:	4632      	mov	r2, r6
 80194e4:	f001 fea4 	bl	801b230 <_dtoa_r>
 80194e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80194ec:	4607      	mov	r7, r0
 80194ee:	d102      	bne.n	80194f6 <__cvt+0x66>
 80194f0:	f019 0f01 	tst.w	r9, #1
 80194f4:	d022      	beq.n	801953c <__cvt+0xac>
 80194f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80194fa:	eb07 0906 	add.w	r9, r7, r6
 80194fe:	d110      	bne.n	8019522 <__cvt+0x92>
 8019500:	783b      	ldrb	r3, [r7, #0]
 8019502:	2b30      	cmp	r3, #48	; 0x30
 8019504:	d10a      	bne.n	801951c <__cvt+0x8c>
 8019506:	2200      	movs	r2, #0
 8019508:	2300      	movs	r3, #0
 801950a:	4620      	mov	r0, r4
 801950c:	4629      	mov	r1, r5
 801950e:	f7e7 fadb 	bl	8000ac8 <__aeabi_dcmpeq>
 8019512:	b918      	cbnz	r0, 801951c <__cvt+0x8c>
 8019514:	f1c6 0601 	rsb	r6, r6, #1
 8019518:	f8ca 6000 	str.w	r6, [sl]
 801951c:	f8da 3000 	ldr.w	r3, [sl]
 8019520:	4499      	add	r9, r3
 8019522:	2200      	movs	r2, #0
 8019524:	2300      	movs	r3, #0
 8019526:	4620      	mov	r0, r4
 8019528:	4629      	mov	r1, r5
 801952a:	f7e7 facd 	bl	8000ac8 <__aeabi_dcmpeq>
 801952e:	b108      	cbz	r0, 8019534 <__cvt+0xa4>
 8019530:	f8cd 900c 	str.w	r9, [sp, #12]
 8019534:	2230      	movs	r2, #48	; 0x30
 8019536:	9b03      	ldr	r3, [sp, #12]
 8019538:	454b      	cmp	r3, r9
 801953a:	d307      	bcc.n	801954c <__cvt+0xbc>
 801953c:	9b03      	ldr	r3, [sp, #12]
 801953e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019540:	1bdb      	subs	r3, r3, r7
 8019542:	4638      	mov	r0, r7
 8019544:	6013      	str	r3, [r2, #0]
 8019546:	b004      	add	sp, #16
 8019548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801954c:	1c59      	adds	r1, r3, #1
 801954e:	9103      	str	r1, [sp, #12]
 8019550:	701a      	strb	r2, [r3, #0]
 8019552:	e7f0      	b.n	8019536 <__cvt+0xa6>

08019554 <__exponent>:
 8019554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019556:	4603      	mov	r3, r0
 8019558:	2900      	cmp	r1, #0
 801955a:	bfb8      	it	lt
 801955c:	4249      	neglt	r1, r1
 801955e:	f803 2b02 	strb.w	r2, [r3], #2
 8019562:	bfb4      	ite	lt
 8019564:	222d      	movlt	r2, #45	; 0x2d
 8019566:	222b      	movge	r2, #43	; 0x2b
 8019568:	2909      	cmp	r1, #9
 801956a:	7042      	strb	r2, [r0, #1]
 801956c:	dd2a      	ble.n	80195c4 <__exponent+0x70>
 801956e:	f10d 0407 	add.w	r4, sp, #7
 8019572:	46a4      	mov	ip, r4
 8019574:	270a      	movs	r7, #10
 8019576:	46a6      	mov	lr, r4
 8019578:	460a      	mov	r2, r1
 801957a:	fb91 f6f7 	sdiv	r6, r1, r7
 801957e:	fb07 1516 	mls	r5, r7, r6, r1
 8019582:	3530      	adds	r5, #48	; 0x30
 8019584:	2a63      	cmp	r2, #99	; 0x63
 8019586:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801958a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801958e:	4631      	mov	r1, r6
 8019590:	dcf1      	bgt.n	8019576 <__exponent+0x22>
 8019592:	3130      	adds	r1, #48	; 0x30
 8019594:	f1ae 0502 	sub.w	r5, lr, #2
 8019598:	f804 1c01 	strb.w	r1, [r4, #-1]
 801959c:	1c44      	adds	r4, r0, #1
 801959e:	4629      	mov	r1, r5
 80195a0:	4561      	cmp	r1, ip
 80195a2:	d30a      	bcc.n	80195ba <__exponent+0x66>
 80195a4:	f10d 0209 	add.w	r2, sp, #9
 80195a8:	eba2 020e 	sub.w	r2, r2, lr
 80195ac:	4565      	cmp	r5, ip
 80195ae:	bf88      	it	hi
 80195b0:	2200      	movhi	r2, #0
 80195b2:	4413      	add	r3, r2
 80195b4:	1a18      	subs	r0, r3, r0
 80195b6:	b003      	add	sp, #12
 80195b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80195ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80195be:	f804 2f01 	strb.w	r2, [r4, #1]!
 80195c2:	e7ed      	b.n	80195a0 <__exponent+0x4c>
 80195c4:	2330      	movs	r3, #48	; 0x30
 80195c6:	3130      	adds	r1, #48	; 0x30
 80195c8:	7083      	strb	r3, [r0, #2]
 80195ca:	70c1      	strb	r1, [r0, #3]
 80195cc:	1d03      	adds	r3, r0, #4
 80195ce:	e7f1      	b.n	80195b4 <__exponent+0x60>

080195d0 <_printf_float>:
 80195d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195d4:	ed2d 8b02 	vpush	{d8}
 80195d8:	b08d      	sub	sp, #52	; 0x34
 80195da:	460c      	mov	r4, r1
 80195dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80195e0:	4616      	mov	r6, r2
 80195e2:	461f      	mov	r7, r3
 80195e4:	4605      	mov	r5, r0
 80195e6:	f002 ff7f 	bl	801c4e8 <_localeconv_r>
 80195ea:	f8d0 a000 	ldr.w	sl, [r0]
 80195ee:	4650      	mov	r0, sl
 80195f0:	f7e6 fdee 	bl	80001d0 <strlen>
 80195f4:	2300      	movs	r3, #0
 80195f6:	930a      	str	r3, [sp, #40]	; 0x28
 80195f8:	6823      	ldr	r3, [r4, #0]
 80195fa:	9305      	str	r3, [sp, #20]
 80195fc:	f8d8 3000 	ldr.w	r3, [r8]
 8019600:	f894 b018 	ldrb.w	fp, [r4, #24]
 8019604:	3307      	adds	r3, #7
 8019606:	f023 0307 	bic.w	r3, r3, #7
 801960a:	f103 0208 	add.w	r2, r3, #8
 801960e:	f8c8 2000 	str.w	r2, [r8]
 8019612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019616:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801961a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801961e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019622:	9307      	str	r3, [sp, #28]
 8019624:	f8cd 8018 	str.w	r8, [sp, #24]
 8019628:	ee08 0a10 	vmov	s16, r0
 801962c:	4b9f      	ldr	r3, [pc, #636]	; (80198ac <_printf_float+0x2dc>)
 801962e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019632:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019636:	f7e7 fa79 	bl	8000b2c <__aeabi_dcmpun>
 801963a:	bb88      	cbnz	r0, 80196a0 <_printf_float+0xd0>
 801963c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019640:	4b9a      	ldr	r3, [pc, #616]	; (80198ac <_printf_float+0x2dc>)
 8019642:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019646:	f7e7 fa53 	bl	8000af0 <__aeabi_dcmple>
 801964a:	bb48      	cbnz	r0, 80196a0 <_printf_float+0xd0>
 801964c:	2200      	movs	r2, #0
 801964e:	2300      	movs	r3, #0
 8019650:	4640      	mov	r0, r8
 8019652:	4649      	mov	r1, r9
 8019654:	f7e7 fa42 	bl	8000adc <__aeabi_dcmplt>
 8019658:	b110      	cbz	r0, 8019660 <_printf_float+0x90>
 801965a:	232d      	movs	r3, #45	; 0x2d
 801965c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019660:	4b93      	ldr	r3, [pc, #588]	; (80198b0 <_printf_float+0x2e0>)
 8019662:	4894      	ldr	r0, [pc, #592]	; (80198b4 <_printf_float+0x2e4>)
 8019664:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8019668:	bf94      	ite	ls
 801966a:	4698      	movls	r8, r3
 801966c:	4680      	movhi	r8, r0
 801966e:	2303      	movs	r3, #3
 8019670:	6123      	str	r3, [r4, #16]
 8019672:	9b05      	ldr	r3, [sp, #20]
 8019674:	f023 0204 	bic.w	r2, r3, #4
 8019678:	6022      	str	r2, [r4, #0]
 801967a:	f04f 0900 	mov.w	r9, #0
 801967e:	9700      	str	r7, [sp, #0]
 8019680:	4633      	mov	r3, r6
 8019682:	aa0b      	add	r2, sp, #44	; 0x2c
 8019684:	4621      	mov	r1, r4
 8019686:	4628      	mov	r0, r5
 8019688:	f000 f9d8 	bl	8019a3c <_printf_common>
 801968c:	3001      	adds	r0, #1
 801968e:	f040 8090 	bne.w	80197b2 <_printf_float+0x1e2>
 8019692:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019696:	b00d      	add	sp, #52	; 0x34
 8019698:	ecbd 8b02 	vpop	{d8}
 801969c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196a0:	4642      	mov	r2, r8
 80196a2:	464b      	mov	r3, r9
 80196a4:	4640      	mov	r0, r8
 80196a6:	4649      	mov	r1, r9
 80196a8:	f7e7 fa40 	bl	8000b2c <__aeabi_dcmpun>
 80196ac:	b140      	cbz	r0, 80196c0 <_printf_float+0xf0>
 80196ae:	464b      	mov	r3, r9
 80196b0:	2b00      	cmp	r3, #0
 80196b2:	bfbc      	itt	lt
 80196b4:	232d      	movlt	r3, #45	; 0x2d
 80196b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80196ba:	487f      	ldr	r0, [pc, #508]	; (80198b8 <_printf_float+0x2e8>)
 80196bc:	4b7f      	ldr	r3, [pc, #508]	; (80198bc <_printf_float+0x2ec>)
 80196be:	e7d1      	b.n	8019664 <_printf_float+0x94>
 80196c0:	6863      	ldr	r3, [r4, #4]
 80196c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80196c6:	9206      	str	r2, [sp, #24]
 80196c8:	1c5a      	adds	r2, r3, #1
 80196ca:	d13f      	bne.n	801974c <_printf_float+0x17c>
 80196cc:	2306      	movs	r3, #6
 80196ce:	6063      	str	r3, [r4, #4]
 80196d0:	9b05      	ldr	r3, [sp, #20]
 80196d2:	6861      	ldr	r1, [r4, #4]
 80196d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80196d8:	2300      	movs	r3, #0
 80196da:	9303      	str	r3, [sp, #12]
 80196dc:	ab0a      	add	r3, sp, #40	; 0x28
 80196de:	e9cd b301 	strd	fp, r3, [sp, #4]
 80196e2:	ab09      	add	r3, sp, #36	; 0x24
 80196e4:	ec49 8b10 	vmov	d0, r8, r9
 80196e8:	9300      	str	r3, [sp, #0]
 80196ea:	6022      	str	r2, [r4, #0]
 80196ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80196f0:	4628      	mov	r0, r5
 80196f2:	f7ff fecd 	bl	8019490 <__cvt>
 80196f6:	9b06      	ldr	r3, [sp, #24]
 80196f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80196fa:	2b47      	cmp	r3, #71	; 0x47
 80196fc:	4680      	mov	r8, r0
 80196fe:	d108      	bne.n	8019712 <_printf_float+0x142>
 8019700:	1cc8      	adds	r0, r1, #3
 8019702:	db02      	blt.n	801970a <_printf_float+0x13a>
 8019704:	6863      	ldr	r3, [r4, #4]
 8019706:	4299      	cmp	r1, r3
 8019708:	dd41      	ble.n	801978e <_printf_float+0x1be>
 801970a:	f1ab 0b02 	sub.w	fp, fp, #2
 801970e:	fa5f fb8b 	uxtb.w	fp, fp
 8019712:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019716:	d820      	bhi.n	801975a <_printf_float+0x18a>
 8019718:	3901      	subs	r1, #1
 801971a:	465a      	mov	r2, fp
 801971c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019720:	9109      	str	r1, [sp, #36]	; 0x24
 8019722:	f7ff ff17 	bl	8019554 <__exponent>
 8019726:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019728:	1813      	adds	r3, r2, r0
 801972a:	2a01      	cmp	r2, #1
 801972c:	4681      	mov	r9, r0
 801972e:	6123      	str	r3, [r4, #16]
 8019730:	dc02      	bgt.n	8019738 <_printf_float+0x168>
 8019732:	6822      	ldr	r2, [r4, #0]
 8019734:	07d2      	lsls	r2, r2, #31
 8019736:	d501      	bpl.n	801973c <_printf_float+0x16c>
 8019738:	3301      	adds	r3, #1
 801973a:	6123      	str	r3, [r4, #16]
 801973c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8019740:	2b00      	cmp	r3, #0
 8019742:	d09c      	beq.n	801967e <_printf_float+0xae>
 8019744:	232d      	movs	r3, #45	; 0x2d
 8019746:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801974a:	e798      	b.n	801967e <_printf_float+0xae>
 801974c:	9a06      	ldr	r2, [sp, #24]
 801974e:	2a47      	cmp	r2, #71	; 0x47
 8019750:	d1be      	bne.n	80196d0 <_printf_float+0x100>
 8019752:	2b00      	cmp	r3, #0
 8019754:	d1bc      	bne.n	80196d0 <_printf_float+0x100>
 8019756:	2301      	movs	r3, #1
 8019758:	e7b9      	b.n	80196ce <_printf_float+0xfe>
 801975a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801975e:	d118      	bne.n	8019792 <_printf_float+0x1c2>
 8019760:	2900      	cmp	r1, #0
 8019762:	6863      	ldr	r3, [r4, #4]
 8019764:	dd0b      	ble.n	801977e <_printf_float+0x1ae>
 8019766:	6121      	str	r1, [r4, #16]
 8019768:	b913      	cbnz	r3, 8019770 <_printf_float+0x1a0>
 801976a:	6822      	ldr	r2, [r4, #0]
 801976c:	07d0      	lsls	r0, r2, #31
 801976e:	d502      	bpl.n	8019776 <_printf_float+0x1a6>
 8019770:	3301      	adds	r3, #1
 8019772:	440b      	add	r3, r1
 8019774:	6123      	str	r3, [r4, #16]
 8019776:	65a1      	str	r1, [r4, #88]	; 0x58
 8019778:	f04f 0900 	mov.w	r9, #0
 801977c:	e7de      	b.n	801973c <_printf_float+0x16c>
 801977e:	b913      	cbnz	r3, 8019786 <_printf_float+0x1b6>
 8019780:	6822      	ldr	r2, [r4, #0]
 8019782:	07d2      	lsls	r2, r2, #31
 8019784:	d501      	bpl.n	801978a <_printf_float+0x1ba>
 8019786:	3302      	adds	r3, #2
 8019788:	e7f4      	b.n	8019774 <_printf_float+0x1a4>
 801978a:	2301      	movs	r3, #1
 801978c:	e7f2      	b.n	8019774 <_printf_float+0x1a4>
 801978e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8019792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019794:	4299      	cmp	r1, r3
 8019796:	db05      	blt.n	80197a4 <_printf_float+0x1d4>
 8019798:	6823      	ldr	r3, [r4, #0]
 801979a:	6121      	str	r1, [r4, #16]
 801979c:	07d8      	lsls	r0, r3, #31
 801979e:	d5ea      	bpl.n	8019776 <_printf_float+0x1a6>
 80197a0:	1c4b      	adds	r3, r1, #1
 80197a2:	e7e7      	b.n	8019774 <_printf_float+0x1a4>
 80197a4:	2900      	cmp	r1, #0
 80197a6:	bfd4      	ite	le
 80197a8:	f1c1 0202 	rsble	r2, r1, #2
 80197ac:	2201      	movgt	r2, #1
 80197ae:	4413      	add	r3, r2
 80197b0:	e7e0      	b.n	8019774 <_printf_float+0x1a4>
 80197b2:	6823      	ldr	r3, [r4, #0]
 80197b4:	055a      	lsls	r2, r3, #21
 80197b6:	d407      	bmi.n	80197c8 <_printf_float+0x1f8>
 80197b8:	6923      	ldr	r3, [r4, #16]
 80197ba:	4642      	mov	r2, r8
 80197bc:	4631      	mov	r1, r6
 80197be:	4628      	mov	r0, r5
 80197c0:	47b8      	blx	r7
 80197c2:	3001      	adds	r0, #1
 80197c4:	d12c      	bne.n	8019820 <_printf_float+0x250>
 80197c6:	e764      	b.n	8019692 <_printf_float+0xc2>
 80197c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80197cc:	f240 80e0 	bls.w	8019990 <_printf_float+0x3c0>
 80197d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80197d4:	2200      	movs	r2, #0
 80197d6:	2300      	movs	r3, #0
 80197d8:	f7e7 f976 	bl	8000ac8 <__aeabi_dcmpeq>
 80197dc:	2800      	cmp	r0, #0
 80197de:	d034      	beq.n	801984a <_printf_float+0x27a>
 80197e0:	4a37      	ldr	r2, [pc, #220]	; (80198c0 <_printf_float+0x2f0>)
 80197e2:	2301      	movs	r3, #1
 80197e4:	4631      	mov	r1, r6
 80197e6:	4628      	mov	r0, r5
 80197e8:	47b8      	blx	r7
 80197ea:	3001      	adds	r0, #1
 80197ec:	f43f af51 	beq.w	8019692 <_printf_float+0xc2>
 80197f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80197f4:	429a      	cmp	r2, r3
 80197f6:	db02      	blt.n	80197fe <_printf_float+0x22e>
 80197f8:	6823      	ldr	r3, [r4, #0]
 80197fa:	07d8      	lsls	r0, r3, #31
 80197fc:	d510      	bpl.n	8019820 <_printf_float+0x250>
 80197fe:	ee18 3a10 	vmov	r3, s16
 8019802:	4652      	mov	r2, sl
 8019804:	4631      	mov	r1, r6
 8019806:	4628      	mov	r0, r5
 8019808:	47b8      	blx	r7
 801980a:	3001      	adds	r0, #1
 801980c:	f43f af41 	beq.w	8019692 <_printf_float+0xc2>
 8019810:	f04f 0800 	mov.w	r8, #0
 8019814:	f104 091a 	add.w	r9, r4, #26
 8019818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801981a:	3b01      	subs	r3, #1
 801981c:	4543      	cmp	r3, r8
 801981e:	dc09      	bgt.n	8019834 <_printf_float+0x264>
 8019820:	6823      	ldr	r3, [r4, #0]
 8019822:	079b      	lsls	r3, r3, #30
 8019824:	f100 8105 	bmi.w	8019a32 <_printf_float+0x462>
 8019828:	68e0      	ldr	r0, [r4, #12]
 801982a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801982c:	4298      	cmp	r0, r3
 801982e:	bfb8      	it	lt
 8019830:	4618      	movlt	r0, r3
 8019832:	e730      	b.n	8019696 <_printf_float+0xc6>
 8019834:	2301      	movs	r3, #1
 8019836:	464a      	mov	r2, r9
 8019838:	4631      	mov	r1, r6
 801983a:	4628      	mov	r0, r5
 801983c:	47b8      	blx	r7
 801983e:	3001      	adds	r0, #1
 8019840:	f43f af27 	beq.w	8019692 <_printf_float+0xc2>
 8019844:	f108 0801 	add.w	r8, r8, #1
 8019848:	e7e6      	b.n	8019818 <_printf_float+0x248>
 801984a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801984c:	2b00      	cmp	r3, #0
 801984e:	dc39      	bgt.n	80198c4 <_printf_float+0x2f4>
 8019850:	4a1b      	ldr	r2, [pc, #108]	; (80198c0 <_printf_float+0x2f0>)
 8019852:	2301      	movs	r3, #1
 8019854:	4631      	mov	r1, r6
 8019856:	4628      	mov	r0, r5
 8019858:	47b8      	blx	r7
 801985a:	3001      	adds	r0, #1
 801985c:	f43f af19 	beq.w	8019692 <_printf_float+0xc2>
 8019860:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019864:	4313      	orrs	r3, r2
 8019866:	d102      	bne.n	801986e <_printf_float+0x29e>
 8019868:	6823      	ldr	r3, [r4, #0]
 801986a:	07d9      	lsls	r1, r3, #31
 801986c:	d5d8      	bpl.n	8019820 <_printf_float+0x250>
 801986e:	ee18 3a10 	vmov	r3, s16
 8019872:	4652      	mov	r2, sl
 8019874:	4631      	mov	r1, r6
 8019876:	4628      	mov	r0, r5
 8019878:	47b8      	blx	r7
 801987a:	3001      	adds	r0, #1
 801987c:	f43f af09 	beq.w	8019692 <_printf_float+0xc2>
 8019880:	f04f 0900 	mov.w	r9, #0
 8019884:	f104 0a1a 	add.w	sl, r4, #26
 8019888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801988a:	425b      	negs	r3, r3
 801988c:	454b      	cmp	r3, r9
 801988e:	dc01      	bgt.n	8019894 <_printf_float+0x2c4>
 8019890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019892:	e792      	b.n	80197ba <_printf_float+0x1ea>
 8019894:	2301      	movs	r3, #1
 8019896:	4652      	mov	r2, sl
 8019898:	4631      	mov	r1, r6
 801989a:	4628      	mov	r0, r5
 801989c:	47b8      	blx	r7
 801989e:	3001      	adds	r0, #1
 80198a0:	f43f aef7 	beq.w	8019692 <_printf_float+0xc2>
 80198a4:	f109 0901 	add.w	r9, r9, #1
 80198a8:	e7ee      	b.n	8019888 <_printf_float+0x2b8>
 80198aa:	bf00      	nop
 80198ac:	7fefffff 	.word	0x7fefffff
 80198b0:	0802104c 	.word	0x0802104c
 80198b4:	08021050 	.word	0x08021050
 80198b8:	08021058 	.word	0x08021058
 80198bc:	08021054 	.word	0x08021054
 80198c0:	0802105c 	.word	0x0802105c
 80198c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80198c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80198c8:	429a      	cmp	r2, r3
 80198ca:	bfa8      	it	ge
 80198cc:	461a      	movge	r2, r3
 80198ce:	2a00      	cmp	r2, #0
 80198d0:	4691      	mov	r9, r2
 80198d2:	dc37      	bgt.n	8019944 <_printf_float+0x374>
 80198d4:	f04f 0b00 	mov.w	fp, #0
 80198d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80198dc:	f104 021a 	add.w	r2, r4, #26
 80198e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80198e2:	9305      	str	r3, [sp, #20]
 80198e4:	eba3 0309 	sub.w	r3, r3, r9
 80198e8:	455b      	cmp	r3, fp
 80198ea:	dc33      	bgt.n	8019954 <_printf_float+0x384>
 80198ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80198f0:	429a      	cmp	r2, r3
 80198f2:	db3b      	blt.n	801996c <_printf_float+0x39c>
 80198f4:	6823      	ldr	r3, [r4, #0]
 80198f6:	07da      	lsls	r2, r3, #31
 80198f8:	d438      	bmi.n	801996c <_printf_float+0x39c>
 80198fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80198fc:	9b05      	ldr	r3, [sp, #20]
 80198fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019900:	1ad3      	subs	r3, r2, r3
 8019902:	eba2 0901 	sub.w	r9, r2, r1
 8019906:	4599      	cmp	r9, r3
 8019908:	bfa8      	it	ge
 801990a:	4699      	movge	r9, r3
 801990c:	f1b9 0f00 	cmp.w	r9, #0
 8019910:	dc35      	bgt.n	801997e <_printf_float+0x3ae>
 8019912:	f04f 0800 	mov.w	r8, #0
 8019916:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801991a:	f104 0a1a 	add.w	sl, r4, #26
 801991e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019922:	1a9b      	subs	r3, r3, r2
 8019924:	eba3 0309 	sub.w	r3, r3, r9
 8019928:	4543      	cmp	r3, r8
 801992a:	f77f af79 	ble.w	8019820 <_printf_float+0x250>
 801992e:	2301      	movs	r3, #1
 8019930:	4652      	mov	r2, sl
 8019932:	4631      	mov	r1, r6
 8019934:	4628      	mov	r0, r5
 8019936:	47b8      	blx	r7
 8019938:	3001      	adds	r0, #1
 801993a:	f43f aeaa 	beq.w	8019692 <_printf_float+0xc2>
 801993e:	f108 0801 	add.w	r8, r8, #1
 8019942:	e7ec      	b.n	801991e <_printf_float+0x34e>
 8019944:	4613      	mov	r3, r2
 8019946:	4631      	mov	r1, r6
 8019948:	4642      	mov	r2, r8
 801994a:	4628      	mov	r0, r5
 801994c:	47b8      	blx	r7
 801994e:	3001      	adds	r0, #1
 8019950:	d1c0      	bne.n	80198d4 <_printf_float+0x304>
 8019952:	e69e      	b.n	8019692 <_printf_float+0xc2>
 8019954:	2301      	movs	r3, #1
 8019956:	4631      	mov	r1, r6
 8019958:	4628      	mov	r0, r5
 801995a:	9205      	str	r2, [sp, #20]
 801995c:	47b8      	blx	r7
 801995e:	3001      	adds	r0, #1
 8019960:	f43f ae97 	beq.w	8019692 <_printf_float+0xc2>
 8019964:	9a05      	ldr	r2, [sp, #20]
 8019966:	f10b 0b01 	add.w	fp, fp, #1
 801996a:	e7b9      	b.n	80198e0 <_printf_float+0x310>
 801996c:	ee18 3a10 	vmov	r3, s16
 8019970:	4652      	mov	r2, sl
 8019972:	4631      	mov	r1, r6
 8019974:	4628      	mov	r0, r5
 8019976:	47b8      	blx	r7
 8019978:	3001      	adds	r0, #1
 801997a:	d1be      	bne.n	80198fa <_printf_float+0x32a>
 801997c:	e689      	b.n	8019692 <_printf_float+0xc2>
 801997e:	9a05      	ldr	r2, [sp, #20]
 8019980:	464b      	mov	r3, r9
 8019982:	4442      	add	r2, r8
 8019984:	4631      	mov	r1, r6
 8019986:	4628      	mov	r0, r5
 8019988:	47b8      	blx	r7
 801998a:	3001      	adds	r0, #1
 801998c:	d1c1      	bne.n	8019912 <_printf_float+0x342>
 801998e:	e680      	b.n	8019692 <_printf_float+0xc2>
 8019990:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019992:	2a01      	cmp	r2, #1
 8019994:	dc01      	bgt.n	801999a <_printf_float+0x3ca>
 8019996:	07db      	lsls	r3, r3, #31
 8019998:	d538      	bpl.n	8019a0c <_printf_float+0x43c>
 801999a:	2301      	movs	r3, #1
 801999c:	4642      	mov	r2, r8
 801999e:	4631      	mov	r1, r6
 80199a0:	4628      	mov	r0, r5
 80199a2:	47b8      	blx	r7
 80199a4:	3001      	adds	r0, #1
 80199a6:	f43f ae74 	beq.w	8019692 <_printf_float+0xc2>
 80199aa:	ee18 3a10 	vmov	r3, s16
 80199ae:	4652      	mov	r2, sl
 80199b0:	4631      	mov	r1, r6
 80199b2:	4628      	mov	r0, r5
 80199b4:	47b8      	blx	r7
 80199b6:	3001      	adds	r0, #1
 80199b8:	f43f ae6b 	beq.w	8019692 <_printf_float+0xc2>
 80199bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80199c0:	2200      	movs	r2, #0
 80199c2:	2300      	movs	r3, #0
 80199c4:	f7e7 f880 	bl	8000ac8 <__aeabi_dcmpeq>
 80199c8:	b9d8      	cbnz	r0, 8019a02 <_printf_float+0x432>
 80199ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80199cc:	f108 0201 	add.w	r2, r8, #1
 80199d0:	3b01      	subs	r3, #1
 80199d2:	4631      	mov	r1, r6
 80199d4:	4628      	mov	r0, r5
 80199d6:	47b8      	blx	r7
 80199d8:	3001      	adds	r0, #1
 80199da:	d10e      	bne.n	80199fa <_printf_float+0x42a>
 80199dc:	e659      	b.n	8019692 <_printf_float+0xc2>
 80199de:	2301      	movs	r3, #1
 80199e0:	4652      	mov	r2, sl
 80199e2:	4631      	mov	r1, r6
 80199e4:	4628      	mov	r0, r5
 80199e6:	47b8      	blx	r7
 80199e8:	3001      	adds	r0, #1
 80199ea:	f43f ae52 	beq.w	8019692 <_printf_float+0xc2>
 80199ee:	f108 0801 	add.w	r8, r8, #1
 80199f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80199f4:	3b01      	subs	r3, #1
 80199f6:	4543      	cmp	r3, r8
 80199f8:	dcf1      	bgt.n	80199de <_printf_float+0x40e>
 80199fa:	464b      	mov	r3, r9
 80199fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019a00:	e6dc      	b.n	80197bc <_printf_float+0x1ec>
 8019a02:	f04f 0800 	mov.w	r8, #0
 8019a06:	f104 0a1a 	add.w	sl, r4, #26
 8019a0a:	e7f2      	b.n	80199f2 <_printf_float+0x422>
 8019a0c:	2301      	movs	r3, #1
 8019a0e:	4642      	mov	r2, r8
 8019a10:	e7df      	b.n	80199d2 <_printf_float+0x402>
 8019a12:	2301      	movs	r3, #1
 8019a14:	464a      	mov	r2, r9
 8019a16:	4631      	mov	r1, r6
 8019a18:	4628      	mov	r0, r5
 8019a1a:	47b8      	blx	r7
 8019a1c:	3001      	adds	r0, #1
 8019a1e:	f43f ae38 	beq.w	8019692 <_printf_float+0xc2>
 8019a22:	f108 0801 	add.w	r8, r8, #1
 8019a26:	68e3      	ldr	r3, [r4, #12]
 8019a28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019a2a:	1a5b      	subs	r3, r3, r1
 8019a2c:	4543      	cmp	r3, r8
 8019a2e:	dcf0      	bgt.n	8019a12 <_printf_float+0x442>
 8019a30:	e6fa      	b.n	8019828 <_printf_float+0x258>
 8019a32:	f04f 0800 	mov.w	r8, #0
 8019a36:	f104 0919 	add.w	r9, r4, #25
 8019a3a:	e7f4      	b.n	8019a26 <_printf_float+0x456>

08019a3c <_printf_common>:
 8019a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a40:	4616      	mov	r6, r2
 8019a42:	4699      	mov	r9, r3
 8019a44:	688a      	ldr	r2, [r1, #8]
 8019a46:	690b      	ldr	r3, [r1, #16]
 8019a48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019a4c:	4293      	cmp	r3, r2
 8019a4e:	bfb8      	it	lt
 8019a50:	4613      	movlt	r3, r2
 8019a52:	6033      	str	r3, [r6, #0]
 8019a54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019a58:	4607      	mov	r7, r0
 8019a5a:	460c      	mov	r4, r1
 8019a5c:	b10a      	cbz	r2, 8019a62 <_printf_common+0x26>
 8019a5e:	3301      	adds	r3, #1
 8019a60:	6033      	str	r3, [r6, #0]
 8019a62:	6823      	ldr	r3, [r4, #0]
 8019a64:	0699      	lsls	r1, r3, #26
 8019a66:	bf42      	ittt	mi
 8019a68:	6833      	ldrmi	r3, [r6, #0]
 8019a6a:	3302      	addmi	r3, #2
 8019a6c:	6033      	strmi	r3, [r6, #0]
 8019a6e:	6825      	ldr	r5, [r4, #0]
 8019a70:	f015 0506 	ands.w	r5, r5, #6
 8019a74:	d106      	bne.n	8019a84 <_printf_common+0x48>
 8019a76:	f104 0a19 	add.w	sl, r4, #25
 8019a7a:	68e3      	ldr	r3, [r4, #12]
 8019a7c:	6832      	ldr	r2, [r6, #0]
 8019a7e:	1a9b      	subs	r3, r3, r2
 8019a80:	42ab      	cmp	r3, r5
 8019a82:	dc26      	bgt.n	8019ad2 <_printf_common+0x96>
 8019a84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019a88:	1e13      	subs	r3, r2, #0
 8019a8a:	6822      	ldr	r2, [r4, #0]
 8019a8c:	bf18      	it	ne
 8019a8e:	2301      	movne	r3, #1
 8019a90:	0692      	lsls	r2, r2, #26
 8019a92:	d42b      	bmi.n	8019aec <_printf_common+0xb0>
 8019a94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019a98:	4649      	mov	r1, r9
 8019a9a:	4638      	mov	r0, r7
 8019a9c:	47c0      	blx	r8
 8019a9e:	3001      	adds	r0, #1
 8019aa0:	d01e      	beq.n	8019ae0 <_printf_common+0xa4>
 8019aa2:	6823      	ldr	r3, [r4, #0]
 8019aa4:	68e5      	ldr	r5, [r4, #12]
 8019aa6:	6832      	ldr	r2, [r6, #0]
 8019aa8:	f003 0306 	and.w	r3, r3, #6
 8019aac:	2b04      	cmp	r3, #4
 8019aae:	bf08      	it	eq
 8019ab0:	1aad      	subeq	r5, r5, r2
 8019ab2:	68a3      	ldr	r3, [r4, #8]
 8019ab4:	6922      	ldr	r2, [r4, #16]
 8019ab6:	bf0c      	ite	eq
 8019ab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019abc:	2500      	movne	r5, #0
 8019abe:	4293      	cmp	r3, r2
 8019ac0:	bfc4      	itt	gt
 8019ac2:	1a9b      	subgt	r3, r3, r2
 8019ac4:	18ed      	addgt	r5, r5, r3
 8019ac6:	2600      	movs	r6, #0
 8019ac8:	341a      	adds	r4, #26
 8019aca:	42b5      	cmp	r5, r6
 8019acc:	d11a      	bne.n	8019b04 <_printf_common+0xc8>
 8019ace:	2000      	movs	r0, #0
 8019ad0:	e008      	b.n	8019ae4 <_printf_common+0xa8>
 8019ad2:	2301      	movs	r3, #1
 8019ad4:	4652      	mov	r2, sl
 8019ad6:	4649      	mov	r1, r9
 8019ad8:	4638      	mov	r0, r7
 8019ada:	47c0      	blx	r8
 8019adc:	3001      	adds	r0, #1
 8019ade:	d103      	bne.n	8019ae8 <_printf_common+0xac>
 8019ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ae8:	3501      	adds	r5, #1
 8019aea:	e7c6      	b.n	8019a7a <_printf_common+0x3e>
 8019aec:	18e1      	adds	r1, r4, r3
 8019aee:	1c5a      	adds	r2, r3, #1
 8019af0:	2030      	movs	r0, #48	; 0x30
 8019af2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019af6:	4422      	add	r2, r4
 8019af8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019afc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019b00:	3302      	adds	r3, #2
 8019b02:	e7c7      	b.n	8019a94 <_printf_common+0x58>
 8019b04:	2301      	movs	r3, #1
 8019b06:	4622      	mov	r2, r4
 8019b08:	4649      	mov	r1, r9
 8019b0a:	4638      	mov	r0, r7
 8019b0c:	47c0      	blx	r8
 8019b0e:	3001      	adds	r0, #1
 8019b10:	d0e6      	beq.n	8019ae0 <_printf_common+0xa4>
 8019b12:	3601      	adds	r6, #1
 8019b14:	e7d9      	b.n	8019aca <_printf_common+0x8e>
	...

08019b18 <_printf_i>:
 8019b18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019b1c:	460c      	mov	r4, r1
 8019b1e:	4691      	mov	r9, r2
 8019b20:	7e27      	ldrb	r7, [r4, #24]
 8019b22:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019b24:	2f78      	cmp	r7, #120	; 0x78
 8019b26:	4680      	mov	r8, r0
 8019b28:	469a      	mov	sl, r3
 8019b2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019b2e:	d807      	bhi.n	8019b40 <_printf_i+0x28>
 8019b30:	2f62      	cmp	r7, #98	; 0x62
 8019b32:	d80a      	bhi.n	8019b4a <_printf_i+0x32>
 8019b34:	2f00      	cmp	r7, #0
 8019b36:	f000 80d8 	beq.w	8019cea <_printf_i+0x1d2>
 8019b3a:	2f58      	cmp	r7, #88	; 0x58
 8019b3c:	f000 80a3 	beq.w	8019c86 <_printf_i+0x16e>
 8019b40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019b44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019b48:	e03a      	b.n	8019bc0 <_printf_i+0xa8>
 8019b4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019b4e:	2b15      	cmp	r3, #21
 8019b50:	d8f6      	bhi.n	8019b40 <_printf_i+0x28>
 8019b52:	a001      	add	r0, pc, #4	; (adr r0, 8019b58 <_printf_i+0x40>)
 8019b54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8019b58:	08019bb1 	.word	0x08019bb1
 8019b5c:	08019bc5 	.word	0x08019bc5
 8019b60:	08019b41 	.word	0x08019b41
 8019b64:	08019b41 	.word	0x08019b41
 8019b68:	08019b41 	.word	0x08019b41
 8019b6c:	08019b41 	.word	0x08019b41
 8019b70:	08019bc5 	.word	0x08019bc5
 8019b74:	08019b41 	.word	0x08019b41
 8019b78:	08019b41 	.word	0x08019b41
 8019b7c:	08019b41 	.word	0x08019b41
 8019b80:	08019b41 	.word	0x08019b41
 8019b84:	08019cd1 	.word	0x08019cd1
 8019b88:	08019bf5 	.word	0x08019bf5
 8019b8c:	08019cb3 	.word	0x08019cb3
 8019b90:	08019b41 	.word	0x08019b41
 8019b94:	08019b41 	.word	0x08019b41
 8019b98:	08019cf3 	.word	0x08019cf3
 8019b9c:	08019b41 	.word	0x08019b41
 8019ba0:	08019bf5 	.word	0x08019bf5
 8019ba4:	08019b41 	.word	0x08019b41
 8019ba8:	08019b41 	.word	0x08019b41
 8019bac:	08019cbb 	.word	0x08019cbb
 8019bb0:	680b      	ldr	r3, [r1, #0]
 8019bb2:	1d1a      	adds	r2, r3, #4
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	600a      	str	r2, [r1, #0]
 8019bb8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019bbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019bc0:	2301      	movs	r3, #1
 8019bc2:	e0a3      	b.n	8019d0c <_printf_i+0x1f4>
 8019bc4:	6825      	ldr	r5, [r4, #0]
 8019bc6:	6808      	ldr	r0, [r1, #0]
 8019bc8:	062e      	lsls	r6, r5, #24
 8019bca:	f100 0304 	add.w	r3, r0, #4
 8019bce:	d50a      	bpl.n	8019be6 <_printf_i+0xce>
 8019bd0:	6805      	ldr	r5, [r0, #0]
 8019bd2:	600b      	str	r3, [r1, #0]
 8019bd4:	2d00      	cmp	r5, #0
 8019bd6:	da03      	bge.n	8019be0 <_printf_i+0xc8>
 8019bd8:	232d      	movs	r3, #45	; 0x2d
 8019bda:	426d      	negs	r5, r5
 8019bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019be0:	485e      	ldr	r0, [pc, #376]	; (8019d5c <_printf_i+0x244>)
 8019be2:	230a      	movs	r3, #10
 8019be4:	e019      	b.n	8019c1a <_printf_i+0x102>
 8019be6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8019bea:	6805      	ldr	r5, [r0, #0]
 8019bec:	600b      	str	r3, [r1, #0]
 8019bee:	bf18      	it	ne
 8019bf0:	b22d      	sxthne	r5, r5
 8019bf2:	e7ef      	b.n	8019bd4 <_printf_i+0xbc>
 8019bf4:	680b      	ldr	r3, [r1, #0]
 8019bf6:	6825      	ldr	r5, [r4, #0]
 8019bf8:	1d18      	adds	r0, r3, #4
 8019bfa:	6008      	str	r0, [r1, #0]
 8019bfc:	0628      	lsls	r0, r5, #24
 8019bfe:	d501      	bpl.n	8019c04 <_printf_i+0xec>
 8019c00:	681d      	ldr	r5, [r3, #0]
 8019c02:	e002      	b.n	8019c0a <_printf_i+0xf2>
 8019c04:	0669      	lsls	r1, r5, #25
 8019c06:	d5fb      	bpl.n	8019c00 <_printf_i+0xe8>
 8019c08:	881d      	ldrh	r5, [r3, #0]
 8019c0a:	4854      	ldr	r0, [pc, #336]	; (8019d5c <_printf_i+0x244>)
 8019c0c:	2f6f      	cmp	r7, #111	; 0x6f
 8019c0e:	bf0c      	ite	eq
 8019c10:	2308      	moveq	r3, #8
 8019c12:	230a      	movne	r3, #10
 8019c14:	2100      	movs	r1, #0
 8019c16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019c1a:	6866      	ldr	r6, [r4, #4]
 8019c1c:	60a6      	str	r6, [r4, #8]
 8019c1e:	2e00      	cmp	r6, #0
 8019c20:	bfa2      	ittt	ge
 8019c22:	6821      	ldrge	r1, [r4, #0]
 8019c24:	f021 0104 	bicge.w	r1, r1, #4
 8019c28:	6021      	strge	r1, [r4, #0]
 8019c2a:	b90d      	cbnz	r5, 8019c30 <_printf_i+0x118>
 8019c2c:	2e00      	cmp	r6, #0
 8019c2e:	d04d      	beq.n	8019ccc <_printf_i+0x1b4>
 8019c30:	4616      	mov	r6, r2
 8019c32:	fbb5 f1f3 	udiv	r1, r5, r3
 8019c36:	fb03 5711 	mls	r7, r3, r1, r5
 8019c3a:	5dc7      	ldrb	r7, [r0, r7]
 8019c3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019c40:	462f      	mov	r7, r5
 8019c42:	42bb      	cmp	r3, r7
 8019c44:	460d      	mov	r5, r1
 8019c46:	d9f4      	bls.n	8019c32 <_printf_i+0x11a>
 8019c48:	2b08      	cmp	r3, #8
 8019c4a:	d10b      	bne.n	8019c64 <_printf_i+0x14c>
 8019c4c:	6823      	ldr	r3, [r4, #0]
 8019c4e:	07df      	lsls	r7, r3, #31
 8019c50:	d508      	bpl.n	8019c64 <_printf_i+0x14c>
 8019c52:	6923      	ldr	r3, [r4, #16]
 8019c54:	6861      	ldr	r1, [r4, #4]
 8019c56:	4299      	cmp	r1, r3
 8019c58:	bfde      	ittt	le
 8019c5a:	2330      	movle	r3, #48	; 0x30
 8019c5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019c60:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8019c64:	1b92      	subs	r2, r2, r6
 8019c66:	6122      	str	r2, [r4, #16]
 8019c68:	f8cd a000 	str.w	sl, [sp]
 8019c6c:	464b      	mov	r3, r9
 8019c6e:	aa03      	add	r2, sp, #12
 8019c70:	4621      	mov	r1, r4
 8019c72:	4640      	mov	r0, r8
 8019c74:	f7ff fee2 	bl	8019a3c <_printf_common>
 8019c78:	3001      	adds	r0, #1
 8019c7a:	d14c      	bne.n	8019d16 <_printf_i+0x1fe>
 8019c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019c80:	b004      	add	sp, #16
 8019c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c86:	4835      	ldr	r0, [pc, #212]	; (8019d5c <_printf_i+0x244>)
 8019c88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019c8c:	6823      	ldr	r3, [r4, #0]
 8019c8e:	680e      	ldr	r6, [r1, #0]
 8019c90:	061f      	lsls	r7, r3, #24
 8019c92:	f856 5b04 	ldr.w	r5, [r6], #4
 8019c96:	600e      	str	r6, [r1, #0]
 8019c98:	d514      	bpl.n	8019cc4 <_printf_i+0x1ac>
 8019c9a:	07d9      	lsls	r1, r3, #31
 8019c9c:	bf44      	itt	mi
 8019c9e:	f043 0320 	orrmi.w	r3, r3, #32
 8019ca2:	6023      	strmi	r3, [r4, #0]
 8019ca4:	b91d      	cbnz	r5, 8019cae <_printf_i+0x196>
 8019ca6:	6823      	ldr	r3, [r4, #0]
 8019ca8:	f023 0320 	bic.w	r3, r3, #32
 8019cac:	6023      	str	r3, [r4, #0]
 8019cae:	2310      	movs	r3, #16
 8019cb0:	e7b0      	b.n	8019c14 <_printf_i+0xfc>
 8019cb2:	6823      	ldr	r3, [r4, #0]
 8019cb4:	f043 0320 	orr.w	r3, r3, #32
 8019cb8:	6023      	str	r3, [r4, #0]
 8019cba:	2378      	movs	r3, #120	; 0x78
 8019cbc:	4828      	ldr	r0, [pc, #160]	; (8019d60 <_printf_i+0x248>)
 8019cbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019cc2:	e7e3      	b.n	8019c8c <_printf_i+0x174>
 8019cc4:	065e      	lsls	r6, r3, #25
 8019cc6:	bf48      	it	mi
 8019cc8:	b2ad      	uxthmi	r5, r5
 8019cca:	e7e6      	b.n	8019c9a <_printf_i+0x182>
 8019ccc:	4616      	mov	r6, r2
 8019cce:	e7bb      	b.n	8019c48 <_printf_i+0x130>
 8019cd0:	680b      	ldr	r3, [r1, #0]
 8019cd2:	6826      	ldr	r6, [r4, #0]
 8019cd4:	6960      	ldr	r0, [r4, #20]
 8019cd6:	1d1d      	adds	r5, r3, #4
 8019cd8:	600d      	str	r5, [r1, #0]
 8019cda:	0635      	lsls	r5, r6, #24
 8019cdc:	681b      	ldr	r3, [r3, #0]
 8019cde:	d501      	bpl.n	8019ce4 <_printf_i+0x1cc>
 8019ce0:	6018      	str	r0, [r3, #0]
 8019ce2:	e002      	b.n	8019cea <_printf_i+0x1d2>
 8019ce4:	0671      	lsls	r1, r6, #25
 8019ce6:	d5fb      	bpl.n	8019ce0 <_printf_i+0x1c8>
 8019ce8:	8018      	strh	r0, [r3, #0]
 8019cea:	2300      	movs	r3, #0
 8019cec:	6123      	str	r3, [r4, #16]
 8019cee:	4616      	mov	r6, r2
 8019cf0:	e7ba      	b.n	8019c68 <_printf_i+0x150>
 8019cf2:	680b      	ldr	r3, [r1, #0]
 8019cf4:	1d1a      	adds	r2, r3, #4
 8019cf6:	600a      	str	r2, [r1, #0]
 8019cf8:	681e      	ldr	r6, [r3, #0]
 8019cfa:	6862      	ldr	r2, [r4, #4]
 8019cfc:	2100      	movs	r1, #0
 8019cfe:	4630      	mov	r0, r6
 8019d00:	f7e6 fa6e 	bl	80001e0 <memchr>
 8019d04:	b108      	cbz	r0, 8019d0a <_printf_i+0x1f2>
 8019d06:	1b80      	subs	r0, r0, r6
 8019d08:	6060      	str	r0, [r4, #4]
 8019d0a:	6863      	ldr	r3, [r4, #4]
 8019d0c:	6123      	str	r3, [r4, #16]
 8019d0e:	2300      	movs	r3, #0
 8019d10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019d14:	e7a8      	b.n	8019c68 <_printf_i+0x150>
 8019d16:	6923      	ldr	r3, [r4, #16]
 8019d18:	4632      	mov	r2, r6
 8019d1a:	4649      	mov	r1, r9
 8019d1c:	4640      	mov	r0, r8
 8019d1e:	47d0      	blx	sl
 8019d20:	3001      	adds	r0, #1
 8019d22:	d0ab      	beq.n	8019c7c <_printf_i+0x164>
 8019d24:	6823      	ldr	r3, [r4, #0]
 8019d26:	079b      	lsls	r3, r3, #30
 8019d28:	d413      	bmi.n	8019d52 <_printf_i+0x23a>
 8019d2a:	68e0      	ldr	r0, [r4, #12]
 8019d2c:	9b03      	ldr	r3, [sp, #12]
 8019d2e:	4298      	cmp	r0, r3
 8019d30:	bfb8      	it	lt
 8019d32:	4618      	movlt	r0, r3
 8019d34:	e7a4      	b.n	8019c80 <_printf_i+0x168>
 8019d36:	2301      	movs	r3, #1
 8019d38:	4632      	mov	r2, r6
 8019d3a:	4649      	mov	r1, r9
 8019d3c:	4640      	mov	r0, r8
 8019d3e:	47d0      	blx	sl
 8019d40:	3001      	adds	r0, #1
 8019d42:	d09b      	beq.n	8019c7c <_printf_i+0x164>
 8019d44:	3501      	adds	r5, #1
 8019d46:	68e3      	ldr	r3, [r4, #12]
 8019d48:	9903      	ldr	r1, [sp, #12]
 8019d4a:	1a5b      	subs	r3, r3, r1
 8019d4c:	42ab      	cmp	r3, r5
 8019d4e:	dcf2      	bgt.n	8019d36 <_printf_i+0x21e>
 8019d50:	e7eb      	b.n	8019d2a <_printf_i+0x212>
 8019d52:	2500      	movs	r5, #0
 8019d54:	f104 0619 	add.w	r6, r4, #25
 8019d58:	e7f5      	b.n	8019d46 <_printf_i+0x22e>
 8019d5a:	bf00      	nop
 8019d5c:	0802105e 	.word	0x0802105e
 8019d60:	0802106f 	.word	0x0802106f

08019d64 <_scanf_float>:
 8019d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d68:	b087      	sub	sp, #28
 8019d6a:	4617      	mov	r7, r2
 8019d6c:	9303      	str	r3, [sp, #12]
 8019d6e:	688b      	ldr	r3, [r1, #8]
 8019d70:	1e5a      	subs	r2, r3, #1
 8019d72:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8019d76:	bf83      	ittte	hi
 8019d78:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019d7c:	195b      	addhi	r3, r3, r5
 8019d7e:	9302      	strhi	r3, [sp, #8]
 8019d80:	2300      	movls	r3, #0
 8019d82:	bf86      	itte	hi
 8019d84:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019d88:	608b      	strhi	r3, [r1, #8]
 8019d8a:	9302      	strls	r3, [sp, #8]
 8019d8c:	680b      	ldr	r3, [r1, #0]
 8019d8e:	468b      	mov	fp, r1
 8019d90:	2500      	movs	r5, #0
 8019d92:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8019d96:	f84b 3b1c 	str.w	r3, [fp], #28
 8019d9a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8019d9e:	4680      	mov	r8, r0
 8019da0:	460c      	mov	r4, r1
 8019da2:	465e      	mov	r6, fp
 8019da4:	46aa      	mov	sl, r5
 8019da6:	46a9      	mov	r9, r5
 8019da8:	9501      	str	r5, [sp, #4]
 8019daa:	68a2      	ldr	r2, [r4, #8]
 8019dac:	b152      	cbz	r2, 8019dc4 <_scanf_float+0x60>
 8019dae:	683b      	ldr	r3, [r7, #0]
 8019db0:	781b      	ldrb	r3, [r3, #0]
 8019db2:	2b4e      	cmp	r3, #78	; 0x4e
 8019db4:	d864      	bhi.n	8019e80 <_scanf_float+0x11c>
 8019db6:	2b40      	cmp	r3, #64	; 0x40
 8019db8:	d83c      	bhi.n	8019e34 <_scanf_float+0xd0>
 8019dba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8019dbe:	b2c8      	uxtb	r0, r1
 8019dc0:	280e      	cmp	r0, #14
 8019dc2:	d93a      	bls.n	8019e3a <_scanf_float+0xd6>
 8019dc4:	f1b9 0f00 	cmp.w	r9, #0
 8019dc8:	d003      	beq.n	8019dd2 <_scanf_float+0x6e>
 8019dca:	6823      	ldr	r3, [r4, #0]
 8019dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019dd0:	6023      	str	r3, [r4, #0]
 8019dd2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8019dd6:	f1ba 0f01 	cmp.w	sl, #1
 8019dda:	f200 8113 	bhi.w	801a004 <_scanf_float+0x2a0>
 8019dde:	455e      	cmp	r6, fp
 8019de0:	f200 8105 	bhi.w	8019fee <_scanf_float+0x28a>
 8019de4:	2501      	movs	r5, #1
 8019de6:	4628      	mov	r0, r5
 8019de8:	b007      	add	sp, #28
 8019dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8019df2:	2a0d      	cmp	r2, #13
 8019df4:	d8e6      	bhi.n	8019dc4 <_scanf_float+0x60>
 8019df6:	a101      	add	r1, pc, #4	; (adr r1, 8019dfc <_scanf_float+0x98>)
 8019df8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8019dfc:	08019f3b 	.word	0x08019f3b
 8019e00:	08019dc5 	.word	0x08019dc5
 8019e04:	08019dc5 	.word	0x08019dc5
 8019e08:	08019dc5 	.word	0x08019dc5
 8019e0c:	08019f9b 	.word	0x08019f9b
 8019e10:	08019f73 	.word	0x08019f73
 8019e14:	08019dc5 	.word	0x08019dc5
 8019e18:	08019dc5 	.word	0x08019dc5
 8019e1c:	08019f49 	.word	0x08019f49
 8019e20:	08019dc5 	.word	0x08019dc5
 8019e24:	08019dc5 	.word	0x08019dc5
 8019e28:	08019dc5 	.word	0x08019dc5
 8019e2c:	08019dc5 	.word	0x08019dc5
 8019e30:	08019f01 	.word	0x08019f01
 8019e34:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8019e38:	e7db      	b.n	8019df2 <_scanf_float+0x8e>
 8019e3a:	290e      	cmp	r1, #14
 8019e3c:	d8c2      	bhi.n	8019dc4 <_scanf_float+0x60>
 8019e3e:	a001      	add	r0, pc, #4	; (adr r0, 8019e44 <_scanf_float+0xe0>)
 8019e40:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8019e44:	08019ef3 	.word	0x08019ef3
 8019e48:	08019dc5 	.word	0x08019dc5
 8019e4c:	08019ef3 	.word	0x08019ef3
 8019e50:	08019f87 	.word	0x08019f87
 8019e54:	08019dc5 	.word	0x08019dc5
 8019e58:	08019ea1 	.word	0x08019ea1
 8019e5c:	08019edd 	.word	0x08019edd
 8019e60:	08019edd 	.word	0x08019edd
 8019e64:	08019edd 	.word	0x08019edd
 8019e68:	08019edd 	.word	0x08019edd
 8019e6c:	08019edd 	.word	0x08019edd
 8019e70:	08019edd 	.word	0x08019edd
 8019e74:	08019edd 	.word	0x08019edd
 8019e78:	08019edd 	.word	0x08019edd
 8019e7c:	08019edd 	.word	0x08019edd
 8019e80:	2b6e      	cmp	r3, #110	; 0x6e
 8019e82:	d809      	bhi.n	8019e98 <_scanf_float+0x134>
 8019e84:	2b60      	cmp	r3, #96	; 0x60
 8019e86:	d8b2      	bhi.n	8019dee <_scanf_float+0x8a>
 8019e88:	2b54      	cmp	r3, #84	; 0x54
 8019e8a:	d077      	beq.n	8019f7c <_scanf_float+0x218>
 8019e8c:	2b59      	cmp	r3, #89	; 0x59
 8019e8e:	d199      	bne.n	8019dc4 <_scanf_float+0x60>
 8019e90:	2d07      	cmp	r5, #7
 8019e92:	d197      	bne.n	8019dc4 <_scanf_float+0x60>
 8019e94:	2508      	movs	r5, #8
 8019e96:	e029      	b.n	8019eec <_scanf_float+0x188>
 8019e98:	2b74      	cmp	r3, #116	; 0x74
 8019e9a:	d06f      	beq.n	8019f7c <_scanf_float+0x218>
 8019e9c:	2b79      	cmp	r3, #121	; 0x79
 8019e9e:	e7f6      	b.n	8019e8e <_scanf_float+0x12a>
 8019ea0:	6821      	ldr	r1, [r4, #0]
 8019ea2:	05c8      	lsls	r0, r1, #23
 8019ea4:	d51a      	bpl.n	8019edc <_scanf_float+0x178>
 8019ea6:	9b02      	ldr	r3, [sp, #8]
 8019ea8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8019eac:	6021      	str	r1, [r4, #0]
 8019eae:	f109 0901 	add.w	r9, r9, #1
 8019eb2:	b11b      	cbz	r3, 8019ebc <_scanf_float+0x158>
 8019eb4:	3b01      	subs	r3, #1
 8019eb6:	3201      	adds	r2, #1
 8019eb8:	9302      	str	r3, [sp, #8]
 8019eba:	60a2      	str	r2, [r4, #8]
 8019ebc:	68a3      	ldr	r3, [r4, #8]
 8019ebe:	3b01      	subs	r3, #1
 8019ec0:	60a3      	str	r3, [r4, #8]
 8019ec2:	6923      	ldr	r3, [r4, #16]
 8019ec4:	3301      	adds	r3, #1
 8019ec6:	6123      	str	r3, [r4, #16]
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	3b01      	subs	r3, #1
 8019ecc:	2b00      	cmp	r3, #0
 8019ece:	607b      	str	r3, [r7, #4]
 8019ed0:	f340 8084 	ble.w	8019fdc <_scanf_float+0x278>
 8019ed4:	683b      	ldr	r3, [r7, #0]
 8019ed6:	3301      	adds	r3, #1
 8019ed8:	603b      	str	r3, [r7, #0]
 8019eda:	e766      	b.n	8019daa <_scanf_float+0x46>
 8019edc:	eb1a 0f05 	cmn.w	sl, r5
 8019ee0:	f47f af70 	bne.w	8019dc4 <_scanf_float+0x60>
 8019ee4:	6822      	ldr	r2, [r4, #0]
 8019ee6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8019eea:	6022      	str	r2, [r4, #0]
 8019eec:	f806 3b01 	strb.w	r3, [r6], #1
 8019ef0:	e7e4      	b.n	8019ebc <_scanf_float+0x158>
 8019ef2:	6822      	ldr	r2, [r4, #0]
 8019ef4:	0610      	lsls	r0, r2, #24
 8019ef6:	f57f af65 	bpl.w	8019dc4 <_scanf_float+0x60>
 8019efa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8019efe:	e7f4      	b.n	8019eea <_scanf_float+0x186>
 8019f00:	f1ba 0f00 	cmp.w	sl, #0
 8019f04:	d10e      	bne.n	8019f24 <_scanf_float+0x1c0>
 8019f06:	f1b9 0f00 	cmp.w	r9, #0
 8019f0a:	d10e      	bne.n	8019f2a <_scanf_float+0x1c6>
 8019f0c:	6822      	ldr	r2, [r4, #0]
 8019f0e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8019f12:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8019f16:	d108      	bne.n	8019f2a <_scanf_float+0x1c6>
 8019f18:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8019f1c:	6022      	str	r2, [r4, #0]
 8019f1e:	f04f 0a01 	mov.w	sl, #1
 8019f22:	e7e3      	b.n	8019eec <_scanf_float+0x188>
 8019f24:	f1ba 0f02 	cmp.w	sl, #2
 8019f28:	d055      	beq.n	8019fd6 <_scanf_float+0x272>
 8019f2a:	2d01      	cmp	r5, #1
 8019f2c:	d002      	beq.n	8019f34 <_scanf_float+0x1d0>
 8019f2e:	2d04      	cmp	r5, #4
 8019f30:	f47f af48 	bne.w	8019dc4 <_scanf_float+0x60>
 8019f34:	3501      	adds	r5, #1
 8019f36:	b2ed      	uxtb	r5, r5
 8019f38:	e7d8      	b.n	8019eec <_scanf_float+0x188>
 8019f3a:	f1ba 0f01 	cmp.w	sl, #1
 8019f3e:	f47f af41 	bne.w	8019dc4 <_scanf_float+0x60>
 8019f42:	f04f 0a02 	mov.w	sl, #2
 8019f46:	e7d1      	b.n	8019eec <_scanf_float+0x188>
 8019f48:	b97d      	cbnz	r5, 8019f6a <_scanf_float+0x206>
 8019f4a:	f1b9 0f00 	cmp.w	r9, #0
 8019f4e:	f47f af3c 	bne.w	8019dca <_scanf_float+0x66>
 8019f52:	6822      	ldr	r2, [r4, #0]
 8019f54:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8019f58:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8019f5c:	f47f af39 	bne.w	8019dd2 <_scanf_float+0x6e>
 8019f60:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8019f64:	6022      	str	r2, [r4, #0]
 8019f66:	2501      	movs	r5, #1
 8019f68:	e7c0      	b.n	8019eec <_scanf_float+0x188>
 8019f6a:	2d03      	cmp	r5, #3
 8019f6c:	d0e2      	beq.n	8019f34 <_scanf_float+0x1d0>
 8019f6e:	2d05      	cmp	r5, #5
 8019f70:	e7de      	b.n	8019f30 <_scanf_float+0x1cc>
 8019f72:	2d02      	cmp	r5, #2
 8019f74:	f47f af26 	bne.w	8019dc4 <_scanf_float+0x60>
 8019f78:	2503      	movs	r5, #3
 8019f7a:	e7b7      	b.n	8019eec <_scanf_float+0x188>
 8019f7c:	2d06      	cmp	r5, #6
 8019f7e:	f47f af21 	bne.w	8019dc4 <_scanf_float+0x60>
 8019f82:	2507      	movs	r5, #7
 8019f84:	e7b2      	b.n	8019eec <_scanf_float+0x188>
 8019f86:	6822      	ldr	r2, [r4, #0]
 8019f88:	0591      	lsls	r1, r2, #22
 8019f8a:	f57f af1b 	bpl.w	8019dc4 <_scanf_float+0x60>
 8019f8e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8019f92:	6022      	str	r2, [r4, #0]
 8019f94:	f8cd 9004 	str.w	r9, [sp, #4]
 8019f98:	e7a8      	b.n	8019eec <_scanf_float+0x188>
 8019f9a:	6822      	ldr	r2, [r4, #0]
 8019f9c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8019fa0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8019fa4:	d006      	beq.n	8019fb4 <_scanf_float+0x250>
 8019fa6:	0550      	lsls	r0, r2, #21
 8019fa8:	f57f af0c 	bpl.w	8019dc4 <_scanf_float+0x60>
 8019fac:	f1b9 0f00 	cmp.w	r9, #0
 8019fb0:	f43f af0f 	beq.w	8019dd2 <_scanf_float+0x6e>
 8019fb4:	0591      	lsls	r1, r2, #22
 8019fb6:	bf58      	it	pl
 8019fb8:	9901      	ldrpl	r1, [sp, #4]
 8019fba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8019fbe:	bf58      	it	pl
 8019fc0:	eba9 0101 	subpl.w	r1, r9, r1
 8019fc4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8019fc8:	bf58      	it	pl
 8019fca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8019fce:	6022      	str	r2, [r4, #0]
 8019fd0:	f04f 0900 	mov.w	r9, #0
 8019fd4:	e78a      	b.n	8019eec <_scanf_float+0x188>
 8019fd6:	f04f 0a03 	mov.w	sl, #3
 8019fda:	e787      	b.n	8019eec <_scanf_float+0x188>
 8019fdc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019fe0:	4639      	mov	r1, r7
 8019fe2:	4640      	mov	r0, r8
 8019fe4:	4798      	blx	r3
 8019fe6:	2800      	cmp	r0, #0
 8019fe8:	f43f aedf 	beq.w	8019daa <_scanf_float+0x46>
 8019fec:	e6ea      	b.n	8019dc4 <_scanf_float+0x60>
 8019fee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019ff2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019ff6:	463a      	mov	r2, r7
 8019ff8:	4640      	mov	r0, r8
 8019ffa:	4798      	blx	r3
 8019ffc:	6923      	ldr	r3, [r4, #16]
 8019ffe:	3b01      	subs	r3, #1
 801a000:	6123      	str	r3, [r4, #16]
 801a002:	e6ec      	b.n	8019dde <_scanf_float+0x7a>
 801a004:	1e6b      	subs	r3, r5, #1
 801a006:	2b06      	cmp	r3, #6
 801a008:	d825      	bhi.n	801a056 <_scanf_float+0x2f2>
 801a00a:	2d02      	cmp	r5, #2
 801a00c:	d836      	bhi.n	801a07c <_scanf_float+0x318>
 801a00e:	455e      	cmp	r6, fp
 801a010:	f67f aee8 	bls.w	8019de4 <_scanf_float+0x80>
 801a014:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a018:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a01c:	463a      	mov	r2, r7
 801a01e:	4640      	mov	r0, r8
 801a020:	4798      	blx	r3
 801a022:	6923      	ldr	r3, [r4, #16]
 801a024:	3b01      	subs	r3, #1
 801a026:	6123      	str	r3, [r4, #16]
 801a028:	e7f1      	b.n	801a00e <_scanf_float+0x2aa>
 801a02a:	9802      	ldr	r0, [sp, #8]
 801a02c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a030:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801a034:	9002      	str	r0, [sp, #8]
 801a036:	463a      	mov	r2, r7
 801a038:	4640      	mov	r0, r8
 801a03a:	4798      	blx	r3
 801a03c:	6923      	ldr	r3, [r4, #16]
 801a03e:	3b01      	subs	r3, #1
 801a040:	6123      	str	r3, [r4, #16]
 801a042:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801a046:	fa5f fa8a 	uxtb.w	sl, sl
 801a04a:	f1ba 0f02 	cmp.w	sl, #2
 801a04e:	d1ec      	bne.n	801a02a <_scanf_float+0x2c6>
 801a050:	3d03      	subs	r5, #3
 801a052:	b2ed      	uxtb	r5, r5
 801a054:	1b76      	subs	r6, r6, r5
 801a056:	6823      	ldr	r3, [r4, #0]
 801a058:	05da      	lsls	r2, r3, #23
 801a05a:	d52f      	bpl.n	801a0bc <_scanf_float+0x358>
 801a05c:	055b      	lsls	r3, r3, #21
 801a05e:	d510      	bpl.n	801a082 <_scanf_float+0x31e>
 801a060:	455e      	cmp	r6, fp
 801a062:	f67f aebf 	bls.w	8019de4 <_scanf_float+0x80>
 801a066:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a06a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a06e:	463a      	mov	r2, r7
 801a070:	4640      	mov	r0, r8
 801a072:	4798      	blx	r3
 801a074:	6923      	ldr	r3, [r4, #16]
 801a076:	3b01      	subs	r3, #1
 801a078:	6123      	str	r3, [r4, #16]
 801a07a:	e7f1      	b.n	801a060 <_scanf_float+0x2fc>
 801a07c:	46aa      	mov	sl, r5
 801a07e:	9602      	str	r6, [sp, #8]
 801a080:	e7df      	b.n	801a042 <_scanf_float+0x2de>
 801a082:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801a086:	6923      	ldr	r3, [r4, #16]
 801a088:	2965      	cmp	r1, #101	; 0x65
 801a08a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801a08e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801a092:	6123      	str	r3, [r4, #16]
 801a094:	d00c      	beq.n	801a0b0 <_scanf_float+0x34c>
 801a096:	2945      	cmp	r1, #69	; 0x45
 801a098:	d00a      	beq.n	801a0b0 <_scanf_float+0x34c>
 801a09a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a09e:	463a      	mov	r2, r7
 801a0a0:	4640      	mov	r0, r8
 801a0a2:	4798      	blx	r3
 801a0a4:	6923      	ldr	r3, [r4, #16]
 801a0a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801a0aa:	3b01      	subs	r3, #1
 801a0ac:	1eb5      	subs	r5, r6, #2
 801a0ae:	6123      	str	r3, [r4, #16]
 801a0b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a0b4:	463a      	mov	r2, r7
 801a0b6:	4640      	mov	r0, r8
 801a0b8:	4798      	blx	r3
 801a0ba:	462e      	mov	r6, r5
 801a0bc:	6825      	ldr	r5, [r4, #0]
 801a0be:	f015 0510 	ands.w	r5, r5, #16
 801a0c2:	d158      	bne.n	801a176 <_scanf_float+0x412>
 801a0c4:	7035      	strb	r5, [r6, #0]
 801a0c6:	6823      	ldr	r3, [r4, #0]
 801a0c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801a0cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a0d0:	d11c      	bne.n	801a10c <_scanf_float+0x3a8>
 801a0d2:	9b01      	ldr	r3, [sp, #4]
 801a0d4:	454b      	cmp	r3, r9
 801a0d6:	eba3 0209 	sub.w	r2, r3, r9
 801a0da:	d124      	bne.n	801a126 <_scanf_float+0x3c2>
 801a0dc:	2200      	movs	r2, #0
 801a0de:	4659      	mov	r1, fp
 801a0e0:	4640      	mov	r0, r8
 801a0e2:	f000 ff6b 	bl	801afbc <_strtod_r>
 801a0e6:	9b03      	ldr	r3, [sp, #12]
 801a0e8:	6821      	ldr	r1, [r4, #0]
 801a0ea:	681b      	ldr	r3, [r3, #0]
 801a0ec:	f011 0f02 	tst.w	r1, #2
 801a0f0:	ec57 6b10 	vmov	r6, r7, d0
 801a0f4:	f103 0204 	add.w	r2, r3, #4
 801a0f8:	d020      	beq.n	801a13c <_scanf_float+0x3d8>
 801a0fa:	9903      	ldr	r1, [sp, #12]
 801a0fc:	600a      	str	r2, [r1, #0]
 801a0fe:	681b      	ldr	r3, [r3, #0]
 801a100:	e9c3 6700 	strd	r6, r7, [r3]
 801a104:	68e3      	ldr	r3, [r4, #12]
 801a106:	3301      	adds	r3, #1
 801a108:	60e3      	str	r3, [r4, #12]
 801a10a:	e66c      	b.n	8019de6 <_scanf_float+0x82>
 801a10c:	9b04      	ldr	r3, [sp, #16]
 801a10e:	2b00      	cmp	r3, #0
 801a110:	d0e4      	beq.n	801a0dc <_scanf_float+0x378>
 801a112:	9905      	ldr	r1, [sp, #20]
 801a114:	230a      	movs	r3, #10
 801a116:	462a      	mov	r2, r5
 801a118:	3101      	adds	r1, #1
 801a11a:	4640      	mov	r0, r8
 801a11c:	f000 ffd8 	bl	801b0d0 <_strtol_r>
 801a120:	9b04      	ldr	r3, [sp, #16]
 801a122:	9e05      	ldr	r6, [sp, #20]
 801a124:	1ac2      	subs	r2, r0, r3
 801a126:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801a12a:	429e      	cmp	r6, r3
 801a12c:	bf28      	it	cs
 801a12e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801a132:	4912      	ldr	r1, [pc, #72]	; (801a17c <_scanf_float+0x418>)
 801a134:	4630      	mov	r0, r6
 801a136:	f000 f8b5 	bl	801a2a4 <siprintf>
 801a13a:	e7cf      	b.n	801a0dc <_scanf_float+0x378>
 801a13c:	f011 0f04 	tst.w	r1, #4
 801a140:	9903      	ldr	r1, [sp, #12]
 801a142:	600a      	str	r2, [r1, #0]
 801a144:	d1db      	bne.n	801a0fe <_scanf_float+0x39a>
 801a146:	f8d3 8000 	ldr.w	r8, [r3]
 801a14a:	ee10 2a10 	vmov	r2, s0
 801a14e:	ee10 0a10 	vmov	r0, s0
 801a152:	463b      	mov	r3, r7
 801a154:	4639      	mov	r1, r7
 801a156:	f7e6 fce9 	bl	8000b2c <__aeabi_dcmpun>
 801a15a:	b128      	cbz	r0, 801a168 <_scanf_float+0x404>
 801a15c:	4808      	ldr	r0, [pc, #32]	; (801a180 <_scanf_float+0x41c>)
 801a15e:	f000 f829 	bl	801a1b4 <nanf>
 801a162:	ed88 0a00 	vstr	s0, [r8]
 801a166:	e7cd      	b.n	801a104 <_scanf_float+0x3a0>
 801a168:	4630      	mov	r0, r6
 801a16a:	4639      	mov	r1, r7
 801a16c:	f7e6 fd3c 	bl	8000be8 <__aeabi_d2f>
 801a170:	f8c8 0000 	str.w	r0, [r8]
 801a174:	e7c6      	b.n	801a104 <_scanf_float+0x3a0>
 801a176:	2500      	movs	r5, #0
 801a178:	e635      	b.n	8019de6 <_scanf_float+0x82>
 801a17a:	bf00      	nop
 801a17c:	08021080 	.word	0x08021080
 801a180:	08021498 	.word	0x08021498

0801a184 <realloc>:
 801a184:	4b02      	ldr	r3, [pc, #8]	; (801a190 <realloc+0xc>)
 801a186:	460a      	mov	r2, r1
 801a188:	4601      	mov	r1, r0
 801a18a:	6818      	ldr	r0, [r3, #0]
 801a18c:	f002 beaa 	b.w	801cee4 <_realloc_r>
 801a190:	200000d0 	.word	0x200000d0

0801a194 <_sbrk_r>:
 801a194:	b538      	push	{r3, r4, r5, lr}
 801a196:	4d06      	ldr	r5, [pc, #24]	; (801a1b0 <_sbrk_r+0x1c>)
 801a198:	2300      	movs	r3, #0
 801a19a:	4604      	mov	r4, r0
 801a19c:	4608      	mov	r0, r1
 801a19e:	602b      	str	r3, [r5, #0]
 801a1a0:	f7f2 ffe0 	bl	800d164 <_sbrk>
 801a1a4:	1c43      	adds	r3, r0, #1
 801a1a6:	d102      	bne.n	801a1ae <_sbrk_r+0x1a>
 801a1a8:	682b      	ldr	r3, [r5, #0]
 801a1aa:	b103      	cbz	r3, 801a1ae <_sbrk_r+0x1a>
 801a1ac:	6023      	str	r3, [r4, #0]
 801a1ae:	bd38      	pop	{r3, r4, r5, pc}
 801a1b0:	2000a578 	.word	0x2000a578

0801a1b4 <nanf>:
 801a1b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a1bc <nanf+0x8>
 801a1b8:	4770      	bx	lr
 801a1ba:	bf00      	nop
 801a1bc:	7fc00000 	.word	0x7fc00000

0801a1c0 <scalbnf>:
 801a1c0:	ee10 3a10 	vmov	r3, s0
 801a1c4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801a1c8:	d025      	beq.n	801a216 <scalbnf+0x56>
 801a1ca:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801a1ce:	d302      	bcc.n	801a1d6 <scalbnf+0x16>
 801a1d0:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a1d4:	4770      	bx	lr
 801a1d6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801a1da:	d122      	bne.n	801a222 <scalbnf+0x62>
 801a1dc:	4b2a      	ldr	r3, [pc, #168]	; (801a288 <scalbnf+0xc8>)
 801a1de:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801a28c <scalbnf+0xcc>
 801a1e2:	4298      	cmp	r0, r3
 801a1e4:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a1e8:	db16      	blt.n	801a218 <scalbnf+0x58>
 801a1ea:	ee10 3a10 	vmov	r3, s0
 801a1ee:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801a1f2:	3a19      	subs	r2, #25
 801a1f4:	4402      	add	r2, r0
 801a1f6:	2afe      	cmp	r2, #254	; 0xfe
 801a1f8:	dd15      	ble.n	801a226 <scalbnf+0x66>
 801a1fa:	ee10 3a10 	vmov	r3, s0
 801a1fe:	eddf 7a24 	vldr	s15, [pc, #144]	; 801a290 <scalbnf+0xd0>
 801a202:	eddf 6a24 	vldr	s13, [pc, #144]	; 801a294 <scalbnf+0xd4>
 801a206:	2b00      	cmp	r3, #0
 801a208:	eeb0 7a67 	vmov.f32	s14, s15
 801a20c:	bfb8      	it	lt
 801a20e:	eef0 7a66 	vmovlt.f32	s15, s13
 801a212:	ee27 0a27 	vmul.f32	s0, s14, s15
 801a216:	4770      	bx	lr
 801a218:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801a298 <scalbnf+0xd8>
 801a21c:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a220:	4770      	bx	lr
 801a222:	0dd2      	lsrs	r2, r2, #23
 801a224:	e7e6      	b.n	801a1f4 <scalbnf+0x34>
 801a226:	2a00      	cmp	r2, #0
 801a228:	dd06      	ble.n	801a238 <scalbnf+0x78>
 801a22a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a22e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801a232:	ee00 3a10 	vmov	s0, r3
 801a236:	4770      	bx	lr
 801a238:	f112 0f16 	cmn.w	r2, #22
 801a23c:	da1a      	bge.n	801a274 <scalbnf+0xb4>
 801a23e:	f24c 3350 	movw	r3, #50000	; 0xc350
 801a242:	4298      	cmp	r0, r3
 801a244:	ee10 3a10 	vmov	r3, s0
 801a248:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a24c:	dd0a      	ble.n	801a264 <scalbnf+0xa4>
 801a24e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801a290 <scalbnf+0xd0>
 801a252:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801a294 <scalbnf+0xd4>
 801a256:	eef0 7a40 	vmov.f32	s15, s0
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	bf18      	it	ne
 801a25e:	eeb0 0a47 	vmovne.f32	s0, s14
 801a262:	e7db      	b.n	801a21c <scalbnf+0x5c>
 801a264:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801a298 <scalbnf+0xd8>
 801a268:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801a29c <scalbnf+0xdc>
 801a26c:	eef0 7a40 	vmov.f32	s15, s0
 801a270:	2b00      	cmp	r3, #0
 801a272:	e7f3      	b.n	801a25c <scalbnf+0x9c>
 801a274:	3219      	adds	r2, #25
 801a276:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a27a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801a27e:	eddf 7a08 	vldr	s15, [pc, #32]	; 801a2a0 <scalbnf+0xe0>
 801a282:	ee07 3a10 	vmov	s14, r3
 801a286:	e7c4      	b.n	801a212 <scalbnf+0x52>
 801a288:	ffff3cb0 	.word	0xffff3cb0
 801a28c:	4c000000 	.word	0x4c000000
 801a290:	7149f2ca 	.word	0x7149f2ca
 801a294:	f149f2ca 	.word	0xf149f2ca
 801a298:	0da24260 	.word	0x0da24260
 801a29c:	8da24260 	.word	0x8da24260
 801a2a0:	33000000 	.word	0x33000000

0801a2a4 <siprintf>:
 801a2a4:	b40e      	push	{r1, r2, r3}
 801a2a6:	b500      	push	{lr}
 801a2a8:	b09c      	sub	sp, #112	; 0x70
 801a2aa:	ab1d      	add	r3, sp, #116	; 0x74
 801a2ac:	9002      	str	r0, [sp, #8]
 801a2ae:	9006      	str	r0, [sp, #24]
 801a2b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a2b4:	4809      	ldr	r0, [pc, #36]	; (801a2dc <siprintf+0x38>)
 801a2b6:	9107      	str	r1, [sp, #28]
 801a2b8:	9104      	str	r1, [sp, #16]
 801a2ba:	4909      	ldr	r1, [pc, #36]	; (801a2e0 <siprintf+0x3c>)
 801a2bc:	f853 2b04 	ldr.w	r2, [r3], #4
 801a2c0:	9105      	str	r1, [sp, #20]
 801a2c2:	6800      	ldr	r0, [r0, #0]
 801a2c4:	9301      	str	r3, [sp, #4]
 801a2c6:	a902      	add	r1, sp, #8
 801a2c8:	f002 fe8e 	bl	801cfe8 <_svfiprintf_r>
 801a2cc:	9b02      	ldr	r3, [sp, #8]
 801a2ce:	2200      	movs	r2, #0
 801a2d0:	701a      	strb	r2, [r3, #0]
 801a2d2:	b01c      	add	sp, #112	; 0x70
 801a2d4:	f85d eb04 	ldr.w	lr, [sp], #4
 801a2d8:	b003      	add	sp, #12
 801a2da:	4770      	bx	lr
 801a2dc:	200000d0 	.word	0x200000d0
 801a2e0:	ffff0208 	.word	0xffff0208

0801a2e4 <__sread>:
 801a2e4:	b510      	push	{r4, lr}
 801a2e6:	460c      	mov	r4, r1
 801a2e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a2ec:	f002 ff7c 	bl	801d1e8 <_read_r>
 801a2f0:	2800      	cmp	r0, #0
 801a2f2:	bfab      	itete	ge
 801a2f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a2f6:	89a3      	ldrhlt	r3, [r4, #12]
 801a2f8:	181b      	addge	r3, r3, r0
 801a2fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a2fe:	bfac      	ite	ge
 801a300:	6563      	strge	r3, [r4, #84]	; 0x54
 801a302:	81a3      	strhlt	r3, [r4, #12]
 801a304:	bd10      	pop	{r4, pc}

0801a306 <__swrite>:
 801a306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a30a:	461f      	mov	r7, r3
 801a30c:	898b      	ldrh	r3, [r1, #12]
 801a30e:	05db      	lsls	r3, r3, #23
 801a310:	4605      	mov	r5, r0
 801a312:	460c      	mov	r4, r1
 801a314:	4616      	mov	r6, r2
 801a316:	d505      	bpl.n	801a324 <__swrite+0x1e>
 801a318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a31c:	2302      	movs	r3, #2
 801a31e:	2200      	movs	r2, #0
 801a320:	f002 f8e6 	bl	801c4f0 <_lseek_r>
 801a324:	89a3      	ldrh	r3, [r4, #12]
 801a326:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a32a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a32e:	81a3      	strh	r3, [r4, #12]
 801a330:	4632      	mov	r2, r6
 801a332:	463b      	mov	r3, r7
 801a334:	4628      	mov	r0, r5
 801a336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a33a:	f000 becb 	b.w	801b0d4 <_write_r>

0801a33e <__sseek>:
 801a33e:	b510      	push	{r4, lr}
 801a340:	460c      	mov	r4, r1
 801a342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a346:	f002 f8d3 	bl	801c4f0 <_lseek_r>
 801a34a:	1c43      	adds	r3, r0, #1
 801a34c:	89a3      	ldrh	r3, [r4, #12]
 801a34e:	bf15      	itete	ne
 801a350:	6560      	strne	r0, [r4, #84]	; 0x54
 801a352:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a356:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a35a:	81a3      	strheq	r3, [r4, #12]
 801a35c:	bf18      	it	ne
 801a35e:	81a3      	strhne	r3, [r4, #12]
 801a360:	bd10      	pop	{r4, pc}

0801a362 <__sclose>:
 801a362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a366:	f000 bec7 	b.w	801b0f8 <_close_r>

0801a36a <sulp>:
 801a36a:	b570      	push	{r4, r5, r6, lr}
 801a36c:	4604      	mov	r4, r0
 801a36e:	460d      	mov	r5, r1
 801a370:	ec45 4b10 	vmov	d0, r4, r5
 801a374:	4616      	mov	r6, r2
 801a376:	f002 fc57 	bl	801cc28 <__ulp>
 801a37a:	ec51 0b10 	vmov	r0, r1, d0
 801a37e:	b17e      	cbz	r6, 801a3a0 <sulp+0x36>
 801a380:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801a384:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a388:	2b00      	cmp	r3, #0
 801a38a:	dd09      	ble.n	801a3a0 <sulp+0x36>
 801a38c:	051b      	lsls	r3, r3, #20
 801a38e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801a392:	2400      	movs	r4, #0
 801a394:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801a398:	4622      	mov	r2, r4
 801a39a:	462b      	mov	r3, r5
 801a39c:	f7e6 f92c 	bl	80005f8 <__aeabi_dmul>
 801a3a0:	bd70      	pop	{r4, r5, r6, pc}
 801a3a2:	0000      	movs	r0, r0
 801a3a4:	0000      	movs	r0, r0
	...

0801a3a8 <_strtod_l>:
 801a3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3ac:	b0a3      	sub	sp, #140	; 0x8c
 801a3ae:	461f      	mov	r7, r3
 801a3b0:	2300      	movs	r3, #0
 801a3b2:	931e      	str	r3, [sp, #120]	; 0x78
 801a3b4:	4ba4      	ldr	r3, [pc, #656]	; (801a648 <_strtod_l+0x2a0>)
 801a3b6:	9219      	str	r2, [sp, #100]	; 0x64
 801a3b8:	681b      	ldr	r3, [r3, #0]
 801a3ba:	9307      	str	r3, [sp, #28]
 801a3bc:	4604      	mov	r4, r0
 801a3be:	4618      	mov	r0, r3
 801a3c0:	4688      	mov	r8, r1
 801a3c2:	f7e5 ff05 	bl	80001d0 <strlen>
 801a3c6:	f04f 0a00 	mov.w	sl, #0
 801a3ca:	4605      	mov	r5, r0
 801a3cc:	f04f 0b00 	mov.w	fp, #0
 801a3d0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801a3d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a3d6:	781a      	ldrb	r2, [r3, #0]
 801a3d8:	2a2b      	cmp	r2, #43	; 0x2b
 801a3da:	d04c      	beq.n	801a476 <_strtod_l+0xce>
 801a3dc:	d839      	bhi.n	801a452 <_strtod_l+0xaa>
 801a3de:	2a0d      	cmp	r2, #13
 801a3e0:	d832      	bhi.n	801a448 <_strtod_l+0xa0>
 801a3e2:	2a08      	cmp	r2, #8
 801a3e4:	d832      	bhi.n	801a44c <_strtod_l+0xa4>
 801a3e6:	2a00      	cmp	r2, #0
 801a3e8:	d03c      	beq.n	801a464 <_strtod_l+0xbc>
 801a3ea:	2300      	movs	r3, #0
 801a3ec:	930e      	str	r3, [sp, #56]	; 0x38
 801a3ee:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801a3f0:	7833      	ldrb	r3, [r6, #0]
 801a3f2:	2b30      	cmp	r3, #48	; 0x30
 801a3f4:	f040 80b4 	bne.w	801a560 <_strtod_l+0x1b8>
 801a3f8:	7873      	ldrb	r3, [r6, #1]
 801a3fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a3fe:	2b58      	cmp	r3, #88	; 0x58
 801a400:	d16c      	bne.n	801a4dc <_strtod_l+0x134>
 801a402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a404:	9301      	str	r3, [sp, #4]
 801a406:	ab1e      	add	r3, sp, #120	; 0x78
 801a408:	9702      	str	r7, [sp, #8]
 801a40a:	9300      	str	r3, [sp, #0]
 801a40c:	4a8f      	ldr	r2, [pc, #572]	; (801a64c <_strtod_l+0x2a4>)
 801a40e:	ab1f      	add	r3, sp, #124	; 0x7c
 801a410:	a91d      	add	r1, sp, #116	; 0x74
 801a412:	4620      	mov	r0, r4
 801a414:	f001 fd60 	bl	801bed8 <__gethex>
 801a418:	f010 0707 	ands.w	r7, r0, #7
 801a41c:	4605      	mov	r5, r0
 801a41e:	d005      	beq.n	801a42c <_strtod_l+0x84>
 801a420:	2f06      	cmp	r7, #6
 801a422:	d12a      	bne.n	801a47a <_strtod_l+0xd2>
 801a424:	3601      	adds	r6, #1
 801a426:	2300      	movs	r3, #0
 801a428:	961d      	str	r6, [sp, #116]	; 0x74
 801a42a:	930e      	str	r3, [sp, #56]	; 0x38
 801a42c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a42e:	2b00      	cmp	r3, #0
 801a430:	f040 8596 	bne.w	801af60 <_strtod_l+0xbb8>
 801a434:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a436:	b1db      	cbz	r3, 801a470 <_strtod_l+0xc8>
 801a438:	4652      	mov	r2, sl
 801a43a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801a43e:	ec43 2b10 	vmov	d0, r2, r3
 801a442:	b023      	add	sp, #140	; 0x8c
 801a444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a448:	2a20      	cmp	r2, #32
 801a44a:	d1ce      	bne.n	801a3ea <_strtod_l+0x42>
 801a44c:	3301      	adds	r3, #1
 801a44e:	931d      	str	r3, [sp, #116]	; 0x74
 801a450:	e7c0      	b.n	801a3d4 <_strtod_l+0x2c>
 801a452:	2a2d      	cmp	r2, #45	; 0x2d
 801a454:	d1c9      	bne.n	801a3ea <_strtod_l+0x42>
 801a456:	2201      	movs	r2, #1
 801a458:	920e      	str	r2, [sp, #56]	; 0x38
 801a45a:	1c5a      	adds	r2, r3, #1
 801a45c:	921d      	str	r2, [sp, #116]	; 0x74
 801a45e:	785b      	ldrb	r3, [r3, #1]
 801a460:	2b00      	cmp	r3, #0
 801a462:	d1c4      	bne.n	801a3ee <_strtod_l+0x46>
 801a464:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a466:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	f040 8576 	bne.w	801af5c <_strtod_l+0xbb4>
 801a470:	4652      	mov	r2, sl
 801a472:	465b      	mov	r3, fp
 801a474:	e7e3      	b.n	801a43e <_strtod_l+0x96>
 801a476:	2200      	movs	r2, #0
 801a478:	e7ee      	b.n	801a458 <_strtod_l+0xb0>
 801a47a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801a47c:	b13a      	cbz	r2, 801a48e <_strtod_l+0xe6>
 801a47e:	2135      	movs	r1, #53	; 0x35
 801a480:	a820      	add	r0, sp, #128	; 0x80
 801a482:	f002 fcdc 	bl	801ce3e <__copybits>
 801a486:	991e      	ldr	r1, [sp, #120]	; 0x78
 801a488:	4620      	mov	r0, r4
 801a48a:	f002 f8a1 	bl	801c5d0 <_Bfree>
 801a48e:	3f01      	subs	r7, #1
 801a490:	2f05      	cmp	r7, #5
 801a492:	d807      	bhi.n	801a4a4 <_strtod_l+0xfc>
 801a494:	e8df f007 	tbb	[pc, r7]
 801a498:	1d180b0e 	.word	0x1d180b0e
 801a49c:	030e      	.short	0x030e
 801a49e:	f04f 0b00 	mov.w	fp, #0
 801a4a2:	46da      	mov	sl, fp
 801a4a4:	0728      	lsls	r0, r5, #28
 801a4a6:	d5c1      	bpl.n	801a42c <_strtod_l+0x84>
 801a4a8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801a4ac:	e7be      	b.n	801a42c <_strtod_l+0x84>
 801a4ae:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801a4b2:	e7f7      	b.n	801a4a4 <_strtod_l+0xfc>
 801a4b4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801a4b8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801a4ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801a4be:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a4c2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801a4c6:	e7ed      	b.n	801a4a4 <_strtod_l+0xfc>
 801a4c8:	f8df b184 	ldr.w	fp, [pc, #388]	; 801a650 <_strtod_l+0x2a8>
 801a4cc:	f04f 0a00 	mov.w	sl, #0
 801a4d0:	e7e8      	b.n	801a4a4 <_strtod_l+0xfc>
 801a4d2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801a4d6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801a4da:	e7e3      	b.n	801a4a4 <_strtod_l+0xfc>
 801a4dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a4de:	1c5a      	adds	r2, r3, #1
 801a4e0:	921d      	str	r2, [sp, #116]	; 0x74
 801a4e2:	785b      	ldrb	r3, [r3, #1]
 801a4e4:	2b30      	cmp	r3, #48	; 0x30
 801a4e6:	d0f9      	beq.n	801a4dc <_strtod_l+0x134>
 801a4e8:	2b00      	cmp	r3, #0
 801a4ea:	d09f      	beq.n	801a42c <_strtod_l+0x84>
 801a4ec:	2301      	movs	r3, #1
 801a4ee:	f04f 0900 	mov.w	r9, #0
 801a4f2:	9304      	str	r3, [sp, #16]
 801a4f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a4f6:	930a      	str	r3, [sp, #40]	; 0x28
 801a4f8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801a4fc:	464f      	mov	r7, r9
 801a4fe:	220a      	movs	r2, #10
 801a500:	981d      	ldr	r0, [sp, #116]	; 0x74
 801a502:	7806      	ldrb	r6, [r0, #0]
 801a504:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801a508:	b2d9      	uxtb	r1, r3
 801a50a:	2909      	cmp	r1, #9
 801a50c:	d92a      	bls.n	801a564 <_strtod_l+0x1bc>
 801a50e:	9907      	ldr	r1, [sp, #28]
 801a510:	462a      	mov	r2, r5
 801a512:	f002 fe92 	bl	801d23a <strncmp>
 801a516:	b398      	cbz	r0, 801a580 <_strtod_l+0x1d8>
 801a518:	2000      	movs	r0, #0
 801a51a:	4633      	mov	r3, r6
 801a51c:	463d      	mov	r5, r7
 801a51e:	9007      	str	r0, [sp, #28]
 801a520:	4602      	mov	r2, r0
 801a522:	2b65      	cmp	r3, #101	; 0x65
 801a524:	d001      	beq.n	801a52a <_strtod_l+0x182>
 801a526:	2b45      	cmp	r3, #69	; 0x45
 801a528:	d118      	bne.n	801a55c <_strtod_l+0x1b4>
 801a52a:	b91d      	cbnz	r5, 801a534 <_strtod_l+0x18c>
 801a52c:	9b04      	ldr	r3, [sp, #16]
 801a52e:	4303      	orrs	r3, r0
 801a530:	d098      	beq.n	801a464 <_strtod_l+0xbc>
 801a532:	2500      	movs	r5, #0
 801a534:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801a538:	f108 0301 	add.w	r3, r8, #1
 801a53c:	931d      	str	r3, [sp, #116]	; 0x74
 801a53e:	f898 3001 	ldrb.w	r3, [r8, #1]
 801a542:	2b2b      	cmp	r3, #43	; 0x2b
 801a544:	d075      	beq.n	801a632 <_strtod_l+0x28a>
 801a546:	2b2d      	cmp	r3, #45	; 0x2d
 801a548:	d07b      	beq.n	801a642 <_strtod_l+0x29a>
 801a54a:	f04f 0c00 	mov.w	ip, #0
 801a54e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801a552:	2909      	cmp	r1, #9
 801a554:	f240 8082 	bls.w	801a65c <_strtod_l+0x2b4>
 801a558:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801a55c:	2600      	movs	r6, #0
 801a55e:	e09d      	b.n	801a69c <_strtod_l+0x2f4>
 801a560:	2300      	movs	r3, #0
 801a562:	e7c4      	b.n	801a4ee <_strtod_l+0x146>
 801a564:	2f08      	cmp	r7, #8
 801a566:	bfd8      	it	le
 801a568:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801a56a:	f100 0001 	add.w	r0, r0, #1
 801a56e:	bfda      	itte	le
 801a570:	fb02 3301 	mlale	r3, r2, r1, r3
 801a574:	9309      	strle	r3, [sp, #36]	; 0x24
 801a576:	fb02 3909 	mlagt	r9, r2, r9, r3
 801a57a:	3701      	adds	r7, #1
 801a57c:	901d      	str	r0, [sp, #116]	; 0x74
 801a57e:	e7bf      	b.n	801a500 <_strtod_l+0x158>
 801a580:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a582:	195a      	adds	r2, r3, r5
 801a584:	921d      	str	r2, [sp, #116]	; 0x74
 801a586:	5d5b      	ldrb	r3, [r3, r5]
 801a588:	2f00      	cmp	r7, #0
 801a58a:	d037      	beq.n	801a5fc <_strtod_l+0x254>
 801a58c:	9007      	str	r0, [sp, #28]
 801a58e:	463d      	mov	r5, r7
 801a590:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801a594:	2a09      	cmp	r2, #9
 801a596:	d912      	bls.n	801a5be <_strtod_l+0x216>
 801a598:	2201      	movs	r2, #1
 801a59a:	e7c2      	b.n	801a522 <_strtod_l+0x17a>
 801a59c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a59e:	1c5a      	adds	r2, r3, #1
 801a5a0:	921d      	str	r2, [sp, #116]	; 0x74
 801a5a2:	785b      	ldrb	r3, [r3, #1]
 801a5a4:	3001      	adds	r0, #1
 801a5a6:	2b30      	cmp	r3, #48	; 0x30
 801a5a8:	d0f8      	beq.n	801a59c <_strtod_l+0x1f4>
 801a5aa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801a5ae:	2a08      	cmp	r2, #8
 801a5b0:	f200 84db 	bhi.w	801af6a <_strtod_l+0xbc2>
 801a5b4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a5b6:	9007      	str	r0, [sp, #28]
 801a5b8:	2000      	movs	r0, #0
 801a5ba:	920a      	str	r2, [sp, #40]	; 0x28
 801a5bc:	4605      	mov	r5, r0
 801a5be:	3b30      	subs	r3, #48	; 0x30
 801a5c0:	f100 0201 	add.w	r2, r0, #1
 801a5c4:	d014      	beq.n	801a5f0 <_strtod_l+0x248>
 801a5c6:	9907      	ldr	r1, [sp, #28]
 801a5c8:	4411      	add	r1, r2
 801a5ca:	9107      	str	r1, [sp, #28]
 801a5cc:	462a      	mov	r2, r5
 801a5ce:	eb00 0e05 	add.w	lr, r0, r5
 801a5d2:	210a      	movs	r1, #10
 801a5d4:	4572      	cmp	r2, lr
 801a5d6:	d113      	bne.n	801a600 <_strtod_l+0x258>
 801a5d8:	182a      	adds	r2, r5, r0
 801a5da:	2a08      	cmp	r2, #8
 801a5dc:	f105 0501 	add.w	r5, r5, #1
 801a5e0:	4405      	add	r5, r0
 801a5e2:	dc1c      	bgt.n	801a61e <_strtod_l+0x276>
 801a5e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a5e6:	220a      	movs	r2, #10
 801a5e8:	fb02 3301 	mla	r3, r2, r1, r3
 801a5ec:	9309      	str	r3, [sp, #36]	; 0x24
 801a5ee:	2200      	movs	r2, #0
 801a5f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a5f2:	1c59      	adds	r1, r3, #1
 801a5f4:	911d      	str	r1, [sp, #116]	; 0x74
 801a5f6:	785b      	ldrb	r3, [r3, #1]
 801a5f8:	4610      	mov	r0, r2
 801a5fa:	e7c9      	b.n	801a590 <_strtod_l+0x1e8>
 801a5fc:	4638      	mov	r0, r7
 801a5fe:	e7d2      	b.n	801a5a6 <_strtod_l+0x1fe>
 801a600:	2a08      	cmp	r2, #8
 801a602:	dc04      	bgt.n	801a60e <_strtod_l+0x266>
 801a604:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801a606:	434e      	muls	r6, r1
 801a608:	9609      	str	r6, [sp, #36]	; 0x24
 801a60a:	3201      	adds	r2, #1
 801a60c:	e7e2      	b.n	801a5d4 <_strtod_l+0x22c>
 801a60e:	f102 0c01 	add.w	ip, r2, #1
 801a612:	f1bc 0f10 	cmp.w	ip, #16
 801a616:	bfd8      	it	le
 801a618:	fb01 f909 	mulle.w	r9, r1, r9
 801a61c:	e7f5      	b.n	801a60a <_strtod_l+0x262>
 801a61e:	2d10      	cmp	r5, #16
 801a620:	bfdc      	itt	le
 801a622:	220a      	movle	r2, #10
 801a624:	fb02 3909 	mlale	r9, r2, r9, r3
 801a628:	e7e1      	b.n	801a5ee <_strtod_l+0x246>
 801a62a:	2300      	movs	r3, #0
 801a62c:	9307      	str	r3, [sp, #28]
 801a62e:	2201      	movs	r2, #1
 801a630:	e77c      	b.n	801a52c <_strtod_l+0x184>
 801a632:	f04f 0c00 	mov.w	ip, #0
 801a636:	f108 0302 	add.w	r3, r8, #2
 801a63a:	931d      	str	r3, [sp, #116]	; 0x74
 801a63c:	f898 3002 	ldrb.w	r3, [r8, #2]
 801a640:	e785      	b.n	801a54e <_strtod_l+0x1a6>
 801a642:	f04f 0c01 	mov.w	ip, #1
 801a646:	e7f6      	b.n	801a636 <_strtod_l+0x28e>
 801a648:	080212d8 	.word	0x080212d8
 801a64c:	08021088 	.word	0x08021088
 801a650:	7ff00000 	.word	0x7ff00000
 801a654:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a656:	1c59      	adds	r1, r3, #1
 801a658:	911d      	str	r1, [sp, #116]	; 0x74
 801a65a:	785b      	ldrb	r3, [r3, #1]
 801a65c:	2b30      	cmp	r3, #48	; 0x30
 801a65e:	d0f9      	beq.n	801a654 <_strtod_l+0x2ac>
 801a660:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801a664:	2908      	cmp	r1, #8
 801a666:	f63f af79 	bhi.w	801a55c <_strtod_l+0x1b4>
 801a66a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801a66e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a670:	9308      	str	r3, [sp, #32]
 801a672:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a674:	1c59      	adds	r1, r3, #1
 801a676:	911d      	str	r1, [sp, #116]	; 0x74
 801a678:	785b      	ldrb	r3, [r3, #1]
 801a67a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801a67e:	2e09      	cmp	r6, #9
 801a680:	d937      	bls.n	801a6f2 <_strtod_l+0x34a>
 801a682:	9e08      	ldr	r6, [sp, #32]
 801a684:	1b89      	subs	r1, r1, r6
 801a686:	2908      	cmp	r1, #8
 801a688:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801a68c:	dc02      	bgt.n	801a694 <_strtod_l+0x2ec>
 801a68e:	4576      	cmp	r6, lr
 801a690:	bfa8      	it	ge
 801a692:	4676      	movge	r6, lr
 801a694:	f1bc 0f00 	cmp.w	ip, #0
 801a698:	d000      	beq.n	801a69c <_strtod_l+0x2f4>
 801a69a:	4276      	negs	r6, r6
 801a69c:	2d00      	cmp	r5, #0
 801a69e:	d14f      	bne.n	801a740 <_strtod_l+0x398>
 801a6a0:	9904      	ldr	r1, [sp, #16]
 801a6a2:	4301      	orrs	r1, r0
 801a6a4:	f47f aec2 	bne.w	801a42c <_strtod_l+0x84>
 801a6a8:	2a00      	cmp	r2, #0
 801a6aa:	f47f aedb 	bne.w	801a464 <_strtod_l+0xbc>
 801a6ae:	2b69      	cmp	r3, #105	; 0x69
 801a6b0:	d027      	beq.n	801a702 <_strtod_l+0x35a>
 801a6b2:	dc24      	bgt.n	801a6fe <_strtod_l+0x356>
 801a6b4:	2b49      	cmp	r3, #73	; 0x49
 801a6b6:	d024      	beq.n	801a702 <_strtod_l+0x35a>
 801a6b8:	2b4e      	cmp	r3, #78	; 0x4e
 801a6ba:	f47f aed3 	bne.w	801a464 <_strtod_l+0xbc>
 801a6be:	499e      	ldr	r1, [pc, #632]	; (801a938 <_strtod_l+0x590>)
 801a6c0:	a81d      	add	r0, sp, #116	; 0x74
 801a6c2:	f001 fe61 	bl	801c388 <__match>
 801a6c6:	2800      	cmp	r0, #0
 801a6c8:	f43f aecc 	beq.w	801a464 <_strtod_l+0xbc>
 801a6cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a6ce:	781b      	ldrb	r3, [r3, #0]
 801a6d0:	2b28      	cmp	r3, #40	; 0x28
 801a6d2:	d12d      	bne.n	801a730 <_strtod_l+0x388>
 801a6d4:	4999      	ldr	r1, [pc, #612]	; (801a93c <_strtod_l+0x594>)
 801a6d6:	aa20      	add	r2, sp, #128	; 0x80
 801a6d8:	a81d      	add	r0, sp, #116	; 0x74
 801a6da:	f001 fe69 	bl	801c3b0 <__hexnan>
 801a6de:	2805      	cmp	r0, #5
 801a6e0:	d126      	bne.n	801a730 <_strtod_l+0x388>
 801a6e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a6e4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801a6e8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801a6ec:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801a6f0:	e69c      	b.n	801a42c <_strtod_l+0x84>
 801a6f2:	210a      	movs	r1, #10
 801a6f4:	fb01 3e0e 	mla	lr, r1, lr, r3
 801a6f8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801a6fc:	e7b9      	b.n	801a672 <_strtod_l+0x2ca>
 801a6fe:	2b6e      	cmp	r3, #110	; 0x6e
 801a700:	e7db      	b.n	801a6ba <_strtod_l+0x312>
 801a702:	498f      	ldr	r1, [pc, #572]	; (801a940 <_strtod_l+0x598>)
 801a704:	a81d      	add	r0, sp, #116	; 0x74
 801a706:	f001 fe3f 	bl	801c388 <__match>
 801a70a:	2800      	cmp	r0, #0
 801a70c:	f43f aeaa 	beq.w	801a464 <_strtod_l+0xbc>
 801a710:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a712:	498c      	ldr	r1, [pc, #560]	; (801a944 <_strtod_l+0x59c>)
 801a714:	3b01      	subs	r3, #1
 801a716:	a81d      	add	r0, sp, #116	; 0x74
 801a718:	931d      	str	r3, [sp, #116]	; 0x74
 801a71a:	f001 fe35 	bl	801c388 <__match>
 801a71e:	b910      	cbnz	r0, 801a726 <_strtod_l+0x37e>
 801a720:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a722:	3301      	adds	r3, #1
 801a724:	931d      	str	r3, [sp, #116]	; 0x74
 801a726:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801a954 <_strtod_l+0x5ac>
 801a72a:	f04f 0a00 	mov.w	sl, #0
 801a72e:	e67d      	b.n	801a42c <_strtod_l+0x84>
 801a730:	4885      	ldr	r0, [pc, #532]	; (801a948 <_strtod_l+0x5a0>)
 801a732:	f002 fd6d 	bl	801d210 <nan>
 801a736:	ed8d 0b04 	vstr	d0, [sp, #16]
 801a73a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801a73e:	e675      	b.n	801a42c <_strtod_l+0x84>
 801a740:	9b07      	ldr	r3, [sp, #28]
 801a742:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a744:	1af3      	subs	r3, r6, r3
 801a746:	2f00      	cmp	r7, #0
 801a748:	bf08      	it	eq
 801a74a:	462f      	moveq	r7, r5
 801a74c:	2d10      	cmp	r5, #16
 801a74e:	9308      	str	r3, [sp, #32]
 801a750:	46a8      	mov	r8, r5
 801a752:	bfa8      	it	ge
 801a754:	f04f 0810 	movge.w	r8, #16
 801a758:	f7e5 fed4 	bl	8000504 <__aeabi_ui2d>
 801a75c:	2d09      	cmp	r5, #9
 801a75e:	4682      	mov	sl, r0
 801a760:	468b      	mov	fp, r1
 801a762:	dd13      	ble.n	801a78c <_strtod_l+0x3e4>
 801a764:	4b79      	ldr	r3, [pc, #484]	; (801a94c <_strtod_l+0x5a4>)
 801a766:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801a76a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801a76e:	f7e5 ff43 	bl	80005f8 <__aeabi_dmul>
 801a772:	4682      	mov	sl, r0
 801a774:	4648      	mov	r0, r9
 801a776:	468b      	mov	fp, r1
 801a778:	f7e5 fec4 	bl	8000504 <__aeabi_ui2d>
 801a77c:	4602      	mov	r2, r0
 801a77e:	460b      	mov	r3, r1
 801a780:	4650      	mov	r0, sl
 801a782:	4659      	mov	r1, fp
 801a784:	f7e5 fd82 	bl	800028c <__adddf3>
 801a788:	4682      	mov	sl, r0
 801a78a:	468b      	mov	fp, r1
 801a78c:	2d0f      	cmp	r5, #15
 801a78e:	dc38      	bgt.n	801a802 <_strtod_l+0x45a>
 801a790:	9b08      	ldr	r3, [sp, #32]
 801a792:	2b00      	cmp	r3, #0
 801a794:	f43f ae4a 	beq.w	801a42c <_strtod_l+0x84>
 801a798:	dd24      	ble.n	801a7e4 <_strtod_l+0x43c>
 801a79a:	2b16      	cmp	r3, #22
 801a79c:	dc0b      	bgt.n	801a7b6 <_strtod_l+0x40e>
 801a79e:	4d6b      	ldr	r5, [pc, #428]	; (801a94c <_strtod_l+0x5a4>)
 801a7a0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801a7a4:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a7a8:	4652      	mov	r2, sl
 801a7aa:	465b      	mov	r3, fp
 801a7ac:	f7e5 ff24 	bl	80005f8 <__aeabi_dmul>
 801a7b0:	4682      	mov	sl, r0
 801a7b2:	468b      	mov	fp, r1
 801a7b4:	e63a      	b.n	801a42c <_strtod_l+0x84>
 801a7b6:	9a08      	ldr	r2, [sp, #32]
 801a7b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801a7bc:	4293      	cmp	r3, r2
 801a7be:	db20      	blt.n	801a802 <_strtod_l+0x45a>
 801a7c0:	4c62      	ldr	r4, [pc, #392]	; (801a94c <_strtod_l+0x5a4>)
 801a7c2:	f1c5 050f 	rsb	r5, r5, #15
 801a7c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801a7ca:	4652      	mov	r2, sl
 801a7cc:	465b      	mov	r3, fp
 801a7ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a7d2:	f7e5 ff11 	bl	80005f8 <__aeabi_dmul>
 801a7d6:	9b08      	ldr	r3, [sp, #32]
 801a7d8:	1b5d      	subs	r5, r3, r5
 801a7da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801a7de:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a7e2:	e7e3      	b.n	801a7ac <_strtod_l+0x404>
 801a7e4:	9b08      	ldr	r3, [sp, #32]
 801a7e6:	3316      	adds	r3, #22
 801a7e8:	db0b      	blt.n	801a802 <_strtod_l+0x45a>
 801a7ea:	9b07      	ldr	r3, [sp, #28]
 801a7ec:	4a57      	ldr	r2, [pc, #348]	; (801a94c <_strtod_l+0x5a4>)
 801a7ee:	1b9e      	subs	r6, r3, r6
 801a7f0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801a7f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 801a7f8:	4650      	mov	r0, sl
 801a7fa:	4659      	mov	r1, fp
 801a7fc:	f7e6 f826 	bl	800084c <__aeabi_ddiv>
 801a800:	e7d6      	b.n	801a7b0 <_strtod_l+0x408>
 801a802:	9b08      	ldr	r3, [sp, #32]
 801a804:	eba5 0808 	sub.w	r8, r5, r8
 801a808:	4498      	add	r8, r3
 801a80a:	f1b8 0f00 	cmp.w	r8, #0
 801a80e:	dd71      	ble.n	801a8f4 <_strtod_l+0x54c>
 801a810:	f018 030f 	ands.w	r3, r8, #15
 801a814:	d00a      	beq.n	801a82c <_strtod_l+0x484>
 801a816:	494d      	ldr	r1, [pc, #308]	; (801a94c <_strtod_l+0x5a4>)
 801a818:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801a81c:	4652      	mov	r2, sl
 801a81e:	465b      	mov	r3, fp
 801a820:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a824:	f7e5 fee8 	bl	80005f8 <__aeabi_dmul>
 801a828:	4682      	mov	sl, r0
 801a82a:	468b      	mov	fp, r1
 801a82c:	f038 080f 	bics.w	r8, r8, #15
 801a830:	d04d      	beq.n	801a8ce <_strtod_l+0x526>
 801a832:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801a836:	dd22      	ble.n	801a87e <_strtod_l+0x4d6>
 801a838:	2500      	movs	r5, #0
 801a83a:	462e      	mov	r6, r5
 801a83c:	9509      	str	r5, [sp, #36]	; 0x24
 801a83e:	9507      	str	r5, [sp, #28]
 801a840:	2322      	movs	r3, #34	; 0x22
 801a842:	f8df b110 	ldr.w	fp, [pc, #272]	; 801a954 <_strtod_l+0x5ac>
 801a846:	6023      	str	r3, [r4, #0]
 801a848:	f04f 0a00 	mov.w	sl, #0
 801a84c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a84e:	2b00      	cmp	r3, #0
 801a850:	f43f adec 	beq.w	801a42c <_strtod_l+0x84>
 801a854:	991e      	ldr	r1, [sp, #120]	; 0x78
 801a856:	4620      	mov	r0, r4
 801a858:	f001 feba 	bl	801c5d0 <_Bfree>
 801a85c:	9907      	ldr	r1, [sp, #28]
 801a85e:	4620      	mov	r0, r4
 801a860:	f001 feb6 	bl	801c5d0 <_Bfree>
 801a864:	4631      	mov	r1, r6
 801a866:	4620      	mov	r0, r4
 801a868:	f001 feb2 	bl	801c5d0 <_Bfree>
 801a86c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a86e:	4620      	mov	r0, r4
 801a870:	f001 feae 	bl	801c5d0 <_Bfree>
 801a874:	4629      	mov	r1, r5
 801a876:	4620      	mov	r0, r4
 801a878:	f001 feaa 	bl	801c5d0 <_Bfree>
 801a87c:	e5d6      	b.n	801a42c <_strtod_l+0x84>
 801a87e:	2300      	movs	r3, #0
 801a880:	ea4f 1828 	mov.w	r8, r8, asr #4
 801a884:	4650      	mov	r0, sl
 801a886:	4659      	mov	r1, fp
 801a888:	4699      	mov	r9, r3
 801a88a:	f1b8 0f01 	cmp.w	r8, #1
 801a88e:	dc21      	bgt.n	801a8d4 <_strtod_l+0x52c>
 801a890:	b10b      	cbz	r3, 801a896 <_strtod_l+0x4ee>
 801a892:	4682      	mov	sl, r0
 801a894:	468b      	mov	fp, r1
 801a896:	4b2e      	ldr	r3, [pc, #184]	; (801a950 <_strtod_l+0x5a8>)
 801a898:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801a89c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801a8a0:	4652      	mov	r2, sl
 801a8a2:	465b      	mov	r3, fp
 801a8a4:	e9d9 0100 	ldrd	r0, r1, [r9]
 801a8a8:	f7e5 fea6 	bl	80005f8 <__aeabi_dmul>
 801a8ac:	4b29      	ldr	r3, [pc, #164]	; (801a954 <_strtod_l+0x5ac>)
 801a8ae:	460a      	mov	r2, r1
 801a8b0:	400b      	ands	r3, r1
 801a8b2:	4929      	ldr	r1, [pc, #164]	; (801a958 <_strtod_l+0x5b0>)
 801a8b4:	428b      	cmp	r3, r1
 801a8b6:	4682      	mov	sl, r0
 801a8b8:	d8be      	bhi.n	801a838 <_strtod_l+0x490>
 801a8ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801a8be:	428b      	cmp	r3, r1
 801a8c0:	bf86      	itte	hi
 801a8c2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801a95c <_strtod_l+0x5b4>
 801a8c6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 801a8ca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801a8ce:	2300      	movs	r3, #0
 801a8d0:	9304      	str	r3, [sp, #16]
 801a8d2:	e081      	b.n	801a9d8 <_strtod_l+0x630>
 801a8d4:	f018 0f01 	tst.w	r8, #1
 801a8d8:	d007      	beq.n	801a8ea <_strtod_l+0x542>
 801a8da:	4b1d      	ldr	r3, [pc, #116]	; (801a950 <_strtod_l+0x5a8>)
 801a8dc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801a8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8e4:	f7e5 fe88 	bl	80005f8 <__aeabi_dmul>
 801a8e8:	2301      	movs	r3, #1
 801a8ea:	f109 0901 	add.w	r9, r9, #1
 801a8ee:	ea4f 0868 	mov.w	r8, r8, asr #1
 801a8f2:	e7ca      	b.n	801a88a <_strtod_l+0x4e2>
 801a8f4:	d0eb      	beq.n	801a8ce <_strtod_l+0x526>
 801a8f6:	f1c8 0800 	rsb	r8, r8, #0
 801a8fa:	f018 020f 	ands.w	r2, r8, #15
 801a8fe:	d00a      	beq.n	801a916 <_strtod_l+0x56e>
 801a900:	4b12      	ldr	r3, [pc, #72]	; (801a94c <_strtod_l+0x5a4>)
 801a902:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a906:	4650      	mov	r0, sl
 801a908:	4659      	mov	r1, fp
 801a90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a90e:	f7e5 ff9d 	bl	800084c <__aeabi_ddiv>
 801a912:	4682      	mov	sl, r0
 801a914:	468b      	mov	fp, r1
 801a916:	ea5f 1828 	movs.w	r8, r8, asr #4
 801a91a:	d0d8      	beq.n	801a8ce <_strtod_l+0x526>
 801a91c:	f1b8 0f1f 	cmp.w	r8, #31
 801a920:	dd1e      	ble.n	801a960 <_strtod_l+0x5b8>
 801a922:	2500      	movs	r5, #0
 801a924:	462e      	mov	r6, r5
 801a926:	9509      	str	r5, [sp, #36]	; 0x24
 801a928:	9507      	str	r5, [sp, #28]
 801a92a:	2322      	movs	r3, #34	; 0x22
 801a92c:	f04f 0a00 	mov.w	sl, #0
 801a930:	f04f 0b00 	mov.w	fp, #0
 801a934:	6023      	str	r3, [r4, #0]
 801a936:	e789      	b.n	801a84c <_strtod_l+0x4a4>
 801a938:	08021059 	.word	0x08021059
 801a93c:	0802109c 	.word	0x0802109c
 801a940:	08021051 	.word	0x08021051
 801a944:	080211dc 	.word	0x080211dc
 801a948:	08021498 	.word	0x08021498
 801a94c:	08021378 	.word	0x08021378
 801a950:	08021350 	.word	0x08021350
 801a954:	7ff00000 	.word	0x7ff00000
 801a958:	7ca00000 	.word	0x7ca00000
 801a95c:	7fefffff 	.word	0x7fefffff
 801a960:	f018 0310 	ands.w	r3, r8, #16
 801a964:	bf18      	it	ne
 801a966:	236a      	movne	r3, #106	; 0x6a
 801a968:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801ad20 <_strtod_l+0x978>
 801a96c:	9304      	str	r3, [sp, #16]
 801a96e:	4650      	mov	r0, sl
 801a970:	4659      	mov	r1, fp
 801a972:	2300      	movs	r3, #0
 801a974:	f018 0f01 	tst.w	r8, #1
 801a978:	d004      	beq.n	801a984 <_strtod_l+0x5dc>
 801a97a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801a97e:	f7e5 fe3b 	bl	80005f8 <__aeabi_dmul>
 801a982:	2301      	movs	r3, #1
 801a984:	ea5f 0868 	movs.w	r8, r8, asr #1
 801a988:	f109 0908 	add.w	r9, r9, #8
 801a98c:	d1f2      	bne.n	801a974 <_strtod_l+0x5cc>
 801a98e:	b10b      	cbz	r3, 801a994 <_strtod_l+0x5ec>
 801a990:	4682      	mov	sl, r0
 801a992:	468b      	mov	fp, r1
 801a994:	9b04      	ldr	r3, [sp, #16]
 801a996:	b1bb      	cbz	r3, 801a9c8 <_strtod_l+0x620>
 801a998:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801a99c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a9a0:	2b00      	cmp	r3, #0
 801a9a2:	4659      	mov	r1, fp
 801a9a4:	dd10      	ble.n	801a9c8 <_strtod_l+0x620>
 801a9a6:	2b1f      	cmp	r3, #31
 801a9a8:	f340 8128 	ble.w	801abfc <_strtod_l+0x854>
 801a9ac:	2b34      	cmp	r3, #52	; 0x34
 801a9ae:	bfde      	ittt	le
 801a9b0:	3b20      	suble	r3, #32
 801a9b2:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 801a9b6:	fa02 f303 	lslle.w	r3, r2, r3
 801a9ba:	f04f 0a00 	mov.w	sl, #0
 801a9be:	bfcc      	ite	gt
 801a9c0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801a9c4:	ea03 0b01 	andle.w	fp, r3, r1
 801a9c8:	2200      	movs	r2, #0
 801a9ca:	2300      	movs	r3, #0
 801a9cc:	4650      	mov	r0, sl
 801a9ce:	4659      	mov	r1, fp
 801a9d0:	f7e6 f87a 	bl	8000ac8 <__aeabi_dcmpeq>
 801a9d4:	2800      	cmp	r0, #0
 801a9d6:	d1a4      	bne.n	801a922 <_strtod_l+0x57a>
 801a9d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a9da:	9300      	str	r3, [sp, #0]
 801a9dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a9de:	462b      	mov	r3, r5
 801a9e0:	463a      	mov	r2, r7
 801a9e2:	4620      	mov	r0, r4
 801a9e4:	f001 fe60 	bl	801c6a8 <__s2b>
 801a9e8:	9009      	str	r0, [sp, #36]	; 0x24
 801a9ea:	2800      	cmp	r0, #0
 801a9ec:	f43f af24 	beq.w	801a838 <_strtod_l+0x490>
 801a9f0:	9b07      	ldr	r3, [sp, #28]
 801a9f2:	1b9e      	subs	r6, r3, r6
 801a9f4:	9b08      	ldr	r3, [sp, #32]
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	bfb4      	ite	lt
 801a9fa:	4633      	movlt	r3, r6
 801a9fc:	2300      	movge	r3, #0
 801a9fe:	9310      	str	r3, [sp, #64]	; 0x40
 801aa00:	9b08      	ldr	r3, [sp, #32]
 801aa02:	2500      	movs	r5, #0
 801aa04:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aa08:	9318      	str	r3, [sp, #96]	; 0x60
 801aa0a:	462e      	mov	r6, r5
 801aa0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa0e:	4620      	mov	r0, r4
 801aa10:	6859      	ldr	r1, [r3, #4]
 801aa12:	f001 fd9d 	bl	801c550 <_Balloc>
 801aa16:	9007      	str	r0, [sp, #28]
 801aa18:	2800      	cmp	r0, #0
 801aa1a:	f43f af11 	beq.w	801a840 <_strtod_l+0x498>
 801aa1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa20:	691a      	ldr	r2, [r3, #16]
 801aa22:	3202      	adds	r2, #2
 801aa24:	f103 010c 	add.w	r1, r3, #12
 801aa28:	0092      	lsls	r2, r2, #2
 801aa2a:	300c      	adds	r0, #12
 801aa2c:	f7fe fc70 	bl	8019310 <memcpy>
 801aa30:	ec4b ab10 	vmov	d0, sl, fp
 801aa34:	aa20      	add	r2, sp, #128	; 0x80
 801aa36:	a91f      	add	r1, sp, #124	; 0x7c
 801aa38:	4620      	mov	r0, r4
 801aa3a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801aa3e:	f002 f96f 	bl	801cd20 <__d2b>
 801aa42:	901e      	str	r0, [sp, #120]	; 0x78
 801aa44:	2800      	cmp	r0, #0
 801aa46:	f43f aefb 	beq.w	801a840 <_strtod_l+0x498>
 801aa4a:	2101      	movs	r1, #1
 801aa4c:	4620      	mov	r0, r4
 801aa4e:	f001 fec5 	bl	801c7dc <__i2b>
 801aa52:	4606      	mov	r6, r0
 801aa54:	2800      	cmp	r0, #0
 801aa56:	f43f aef3 	beq.w	801a840 <_strtod_l+0x498>
 801aa5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801aa5c:	9904      	ldr	r1, [sp, #16]
 801aa5e:	2b00      	cmp	r3, #0
 801aa60:	bfab      	itete	ge
 801aa62:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801aa64:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801aa66:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801aa68:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801aa6c:	bfac      	ite	ge
 801aa6e:	eb03 0902 	addge.w	r9, r3, r2
 801aa72:	1ad7      	sublt	r7, r2, r3
 801aa74:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801aa76:	eba3 0801 	sub.w	r8, r3, r1
 801aa7a:	4490      	add	r8, r2
 801aa7c:	4ba3      	ldr	r3, [pc, #652]	; (801ad0c <_strtod_l+0x964>)
 801aa7e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801aa82:	4598      	cmp	r8, r3
 801aa84:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801aa88:	f280 80cc 	bge.w	801ac24 <_strtod_l+0x87c>
 801aa8c:	eba3 0308 	sub.w	r3, r3, r8
 801aa90:	2b1f      	cmp	r3, #31
 801aa92:	eba2 0203 	sub.w	r2, r2, r3
 801aa96:	f04f 0101 	mov.w	r1, #1
 801aa9a:	f300 80b6 	bgt.w	801ac0a <_strtod_l+0x862>
 801aa9e:	fa01 f303 	lsl.w	r3, r1, r3
 801aaa2:	9311      	str	r3, [sp, #68]	; 0x44
 801aaa4:	2300      	movs	r3, #0
 801aaa6:	930c      	str	r3, [sp, #48]	; 0x30
 801aaa8:	eb09 0802 	add.w	r8, r9, r2
 801aaac:	9b04      	ldr	r3, [sp, #16]
 801aaae:	45c1      	cmp	r9, r8
 801aab0:	4417      	add	r7, r2
 801aab2:	441f      	add	r7, r3
 801aab4:	464b      	mov	r3, r9
 801aab6:	bfa8      	it	ge
 801aab8:	4643      	movge	r3, r8
 801aaba:	42bb      	cmp	r3, r7
 801aabc:	bfa8      	it	ge
 801aabe:	463b      	movge	r3, r7
 801aac0:	2b00      	cmp	r3, #0
 801aac2:	bfc2      	ittt	gt
 801aac4:	eba8 0803 	subgt.w	r8, r8, r3
 801aac8:	1aff      	subgt	r7, r7, r3
 801aaca:	eba9 0903 	subgt.w	r9, r9, r3
 801aace:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aad0:	2b00      	cmp	r3, #0
 801aad2:	dd17      	ble.n	801ab04 <_strtod_l+0x75c>
 801aad4:	4631      	mov	r1, r6
 801aad6:	461a      	mov	r2, r3
 801aad8:	4620      	mov	r0, r4
 801aada:	f001 ff3b 	bl	801c954 <__pow5mult>
 801aade:	4606      	mov	r6, r0
 801aae0:	2800      	cmp	r0, #0
 801aae2:	f43f aead 	beq.w	801a840 <_strtod_l+0x498>
 801aae6:	4601      	mov	r1, r0
 801aae8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801aaea:	4620      	mov	r0, r4
 801aaec:	f001 fe8c 	bl	801c808 <__multiply>
 801aaf0:	900f      	str	r0, [sp, #60]	; 0x3c
 801aaf2:	2800      	cmp	r0, #0
 801aaf4:	f43f aea4 	beq.w	801a840 <_strtod_l+0x498>
 801aaf8:	991e      	ldr	r1, [sp, #120]	; 0x78
 801aafa:	4620      	mov	r0, r4
 801aafc:	f001 fd68 	bl	801c5d0 <_Bfree>
 801ab00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ab02:	931e      	str	r3, [sp, #120]	; 0x78
 801ab04:	f1b8 0f00 	cmp.w	r8, #0
 801ab08:	f300 8091 	bgt.w	801ac2e <_strtod_l+0x886>
 801ab0c:	9b08      	ldr	r3, [sp, #32]
 801ab0e:	2b00      	cmp	r3, #0
 801ab10:	dd08      	ble.n	801ab24 <_strtod_l+0x77c>
 801ab12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ab14:	9907      	ldr	r1, [sp, #28]
 801ab16:	4620      	mov	r0, r4
 801ab18:	f001 ff1c 	bl	801c954 <__pow5mult>
 801ab1c:	9007      	str	r0, [sp, #28]
 801ab1e:	2800      	cmp	r0, #0
 801ab20:	f43f ae8e 	beq.w	801a840 <_strtod_l+0x498>
 801ab24:	2f00      	cmp	r7, #0
 801ab26:	dd08      	ble.n	801ab3a <_strtod_l+0x792>
 801ab28:	9907      	ldr	r1, [sp, #28]
 801ab2a:	463a      	mov	r2, r7
 801ab2c:	4620      	mov	r0, r4
 801ab2e:	f001 ff6b 	bl	801ca08 <__lshift>
 801ab32:	9007      	str	r0, [sp, #28]
 801ab34:	2800      	cmp	r0, #0
 801ab36:	f43f ae83 	beq.w	801a840 <_strtod_l+0x498>
 801ab3a:	f1b9 0f00 	cmp.w	r9, #0
 801ab3e:	dd08      	ble.n	801ab52 <_strtod_l+0x7aa>
 801ab40:	4631      	mov	r1, r6
 801ab42:	464a      	mov	r2, r9
 801ab44:	4620      	mov	r0, r4
 801ab46:	f001 ff5f 	bl	801ca08 <__lshift>
 801ab4a:	4606      	mov	r6, r0
 801ab4c:	2800      	cmp	r0, #0
 801ab4e:	f43f ae77 	beq.w	801a840 <_strtod_l+0x498>
 801ab52:	9a07      	ldr	r2, [sp, #28]
 801ab54:	991e      	ldr	r1, [sp, #120]	; 0x78
 801ab56:	4620      	mov	r0, r4
 801ab58:	f001 ffde 	bl	801cb18 <__mdiff>
 801ab5c:	4605      	mov	r5, r0
 801ab5e:	2800      	cmp	r0, #0
 801ab60:	f43f ae6e 	beq.w	801a840 <_strtod_l+0x498>
 801ab64:	68c3      	ldr	r3, [r0, #12]
 801ab66:	930f      	str	r3, [sp, #60]	; 0x3c
 801ab68:	2300      	movs	r3, #0
 801ab6a:	60c3      	str	r3, [r0, #12]
 801ab6c:	4631      	mov	r1, r6
 801ab6e:	f001 ffb7 	bl	801cae0 <__mcmp>
 801ab72:	2800      	cmp	r0, #0
 801ab74:	da65      	bge.n	801ac42 <_strtod_l+0x89a>
 801ab76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ab78:	ea53 030a 	orrs.w	r3, r3, sl
 801ab7c:	f040 8087 	bne.w	801ac8e <_strtod_l+0x8e6>
 801ab80:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ab84:	2b00      	cmp	r3, #0
 801ab86:	f040 8082 	bne.w	801ac8e <_strtod_l+0x8e6>
 801ab8a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ab8e:	0d1b      	lsrs	r3, r3, #20
 801ab90:	051b      	lsls	r3, r3, #20
 801ab92:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801ab96:	d97a      	bls.n	801ac8e <_strtod_l+0x8e6>
 801ab98:	696b      	ldr	r3, [r5, #20]
 801ab9a:	b913      	cbnz	r3, 801aba2 <_strtod_l+0x7fa>
 801ab9c:	692b      	ldr	r3, [r5, #16]
 801ab9e:	2b01      	cmp	r3, #1
 801aba0:	dd75      	ble.n	801ac8e <_strtod_l+0x8e6>
 801aba2:	4629      	mov	r1, r5
 801aba4:	2201      	movs	r2, #1
 801aba6:	4620      	mov	r0, r4
 801aba8:	f001 ff2e 	bl	801ca08 <__lshift>
 801abac:	4631      	mov	r1, r6
 801abae:	4605      	mov	r5, r0
 801abb0:	f001 ff96 	bl	801cae0 <__mcmp>
 801abb4:	2800      	cmp	r0, #0
 801abb6:	dd6a      	ble.n	801ac8e <_strtod_l+0x8e6>
 801abb8:	9904      	ldr	r1, [sp, #16]
 801abba:	4a55      	ldr	r2, [pc, #340]	; (801ad10 <_strtod_l+0x968>)
 801abbc:	465b      	mov	r3, fp
 801abbe:	2900      	cmp	r1, #0
 801abc0:	f000 8085 	beq.w	801acce <_strtod_l+0x926>
 801abc4:	ea02 010b 	and.w	r1, r2, fp
 801abc8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801abcc:	dc7f      	bgt.n	801acce <_strtod_l+0x926>
 801abce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801abd2:	f77f aeaa 	ble.w	801a92a <_strtod_l+0x582>
 801abd6:	4a4f      	ldr	r2, [pc, #316]	; (801ad14 <_strtod_l+0x96c>)
 801abd8:	2300      	movs	r3, #0
 801abda:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801abde:	4650      	mov	r0, sl
 801abe0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801abe4:	4659      	mov	r1, fp
 801abe6:	f7e5 fd07 	bl	80005f8 <__aeabi_dmul>
 801abea:	460b      	mov	r3, r1
 801abec:	4303      	orrs	r3, r0
 801abee:	bf08      	it	eq
 801abf0:	2322      	moveq	r3, #34	; 0x22
 801abf2:	4682      	mov	sl, r0
 801abf4:	468b      	mov	fp, r1
 801abf6:	bf08      	it	eq
 801abf8:	6023      	streq	r3, [r4, #0]
 801abfa:	e62b      	b.n	801a854 <_strtod_l+0x4ac>
 801abfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ac00:	fa02 f303 	lsl.w	r3, r2, r3
 801ac04:	ea03 0a0a 	and.w	sl, r3, sl
 801ac08:	e6de      	b.n	801a9c8 <_strtod_l+0x620>
 801ac0a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801ac0e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801ac12:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801ac16:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801ac1a:	fa01 f308 	lsl.w	r3, r1, r8
 801ac1e:	930c      	str	r3, [sp, #48]	; 0x30
 801ac20:	9111      	str	r1, [sp, #68]	; 0x44
 801ac22:	e741      	b.n	801aaa8 <_strtod_l+0x700>
 801ac24:	2300      	movs	r3, #0
 801ac26:	930c      	str	r3, [sp, #48]	; 0x30
 801ac28:	2301      	movs	r3, #1
 801ac2a:	9311      	str	r3, [sp, #68]	; 0x44
 801ac2c:	e73c      	b.n	801aaa8 <_strtod_l+0x700>
 801ac2e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801ac30:	4642      	mov	r2, r8
 801ac32:	4620      	mov	r0, r4
 801ac34:	f001 fee8 	bl	801ca08 <__lshift>
 801ac38:	901e      	str	r0, [sp, #120]	; 0x78
 801ac3a:	2800      	cmp	r0, #0
 801ac3c:	f47f af66 	bne.w	801ab0c <_strtod_l+0x764>
 801ac40:	e5fe      	b.n	801a840 <_strtod_l+0x498>
 801ac42:	465f      	mov	r7, fp
 801ac44:	d16e      	bne.n	801ad24 <_strtod_l+0x97c>
 801ac46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ac48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ac4c:	b342      	cbz	r2, 801aca0 <_strtod_l+0x8f8>
 801ac4e:	4a32      	ldr	r2, [pc, #200]	; (801ad18 <_strtod_l+0x970>)
 801ac50:	4293      	cmp	r3, r2
 801ac52:	d128      	bne.n	801aca6 <_strtod_l+0x8fe>
 801ac54:	9b04      	ldr	r3, [sp, #16]
 801ac56:	4650      	mov	r0, sl
 801ac58:	b1eb      	cbz	r3, 801ac96 <_strtod_l+0x8ee>
 801ac5a:	4a2d      	ldr	r2, [pc, #180]	; (801ad10 <_strtod_l+0x968>)
 801ac5c:	403a      	ands	r2, r7
 801ac5e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801ac62:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801ac66:	d819      	bhi.n	801ac9c <_strtod_l+0x8f4>
 801ac68:	0d12      	lsrs	r2, r2, #20
 801ac6a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801ac6e:	fa01 f303 	lsl.w	r3, r1, r3
 801ac72:	4298      	cmp	r0, r3
 801ac74:	d117      	bne.n	801aca6 <_strtod_l+0x8fe>
 801ac76:	4b29      	ldr	r3, [pc, #164]	; (801ad1c <_strtod_l+0x974>)
 801ac78:	429f      	cmp	r7, r3
 801ac7a:	d102      	bne.n	801ac82 <_strtod_l+0x8da>
 801ac7c:	3001      	adds	r0, #1
 801ac7e:	f43f addf 	beq.w	801a840 <_strtod_l+0x498>
 801ac82:	4b23      	ldr	r3, [pc, #140]	; (801ad10 <_strtod_l+0x968>)
 801ac84:	403b      	ands	r3, r7
 801ac86:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801ac8a:	f04f 0a00 	mov.w	sl, #0
 801ac8e:	9b04      	ldr	r3, [sp, #16]
 801ac90:	2b00      	cmp	r3, #0
 801ac92:	d1a0      	bne.n	801abd6 <_strtod_l+0x82e>
 801ac94:	e5de      	b.n	801a854 <_strtod_l+0x4ac>
 801ac96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ac9a:	e7ea      	b.n	801ac72 <_strtod_l+0x8ca>
 801ac9c:	460b      	mov	r3, r1
 801ac9e:	e7e8      	b.n	801ac72 <_strtod_l+0x8ca>
 801aca0:	ea53 030a 	orrs.w	r3, r3, sl
 801aca4:	d088      	beq.n	801abb8 <_strtod_l+0x810>
 801aca6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aca8:	b1db      	cbz	r3, 801ace2 <_strtod_l+0x93a>
 801acaa:	423b      	tst	r3, r7
 801acac:	d0ef      	beq.n	801ac8e <_strtod_l+0x8e6>
 801acae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801acb0:	9a04      	ldr	r2, [sp, #16]
 801acb2:	4650      	mov	r0, sl
 801acb4:	4659      	mov	r1, fp
 801acb6:	b1c3      	cbz	r3, 801acea <_strtod_l+0x942>
 801acb8:	f7ff fb57 	bl	801a36a <sulp>
 801acbc:	4602      	mov	r2, r0
 801acbe:	460b      	mov	r3, r1
 801acc0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801acc4:	f7e5 fae2 	bl	800028c <__adddf3>
 801acc8:	4682      	mov	sl, r0
 801acca:	468b      	mov	fp, r1
 801accc:	e7df      	b.n	801ac8e <_strtod_l+0x8e6>
 801acce:	4013      	ands	r3, r2
 801acd0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801acd4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801acd8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801acdc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801ace0:	e7d5      	b.n	801ac8e <_strtod_l+0x8e6>
 801ace2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ace4:	ea13 0f0a 	tst.w	r3, sl
 801ace8:	e7e0      	b.n	801acac <_strtod_l+0x904>
 801acea:	f7ff fb3e 	bl	801a36a <sulp>
 801acee:	4602      	mov	r2, r0
 801acf0:	460b      	mov	r3, r1
 801acf2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801acf6:	f7e5 fac7 	bl	8000288 <__aeabi_dsub>
 801acfa:	2200      	movs	r2, #0
 801acfc:	2300      	movs	r3, #0
 801acfe:	4682      	mov	sl, r0
 801ad00:	468b      	mov	fp, r1
 801ad02:	f7e5 fee1 	bl	8000ac8 <__aeabi_dcmpeq>
 801ad06:	2800      	cmp	r0, #0
 801ad08:	d0c1      	beq.n	801ac8e <_strtod_l+0x8e6>
 801ad0a:	e60e      	b.n	801a92a <_strtod_l+0x582>
 801ad0c:	fffffc02 	.word	0xfffffc02
 801ad10:	7ff00000 	.word	0x7ff00000
 801ad14:	39500000 	.word	0x39500000
 801ad18:	000fffff 	.word	0x000fffff
 801ad1c:	7fefffff 	.word	0x7fefffff
 801ad20:	080210b0 	.word	0x080210b0
 801ad24:	4631      	mov	r1, r6
 801ad26:	4628      	mov	r0, r5
 801ad28:	f002 f856 	bl	801cdd8 <__ratio>
 801ad2c:	ec59 8b10 	vmov	r8, r9, d0
 801ad30:	ee10 0a10 	vmov	r0, s0
 801ad34:	2200      	movs	r2, #0
 801ad36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ad3a:	4649      	mov	r1, r9
 801ad3c:	f7e5 fed8 	bl	8000af0 <__aeabi_dcmple>
 801ad40:	2800      	cmp	r0, #0
 801ad42:	d07c      	beq.n	801ae3e <_strtod_l+0xa96>
 801ad44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ad46:	2b00      	cmp	r3, #0
 801ad48:	d04c      	beq.n	801ade4 <_strtod_l+0xa3c>
 801ad4a:	4b95      	ldr	r3, [pc, #596]	; (801afa0 <_strtod_l+0xbf8>)
 801ad4c:	2200      	movs	r2, #0
 801ad4e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801ad52:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801afa0 <_strtod_l+0xbf8>
 801ad56:	f04f 0800 	mov.w	r8, #0
 801ad5a:	4b92      	ldr	r3, [pc, #584]	; (801afa4 <_strtod_l+0xbfc>)
 801ad5c:	403b      	ands	r3, r7
 801ad5e:	9311      	str	r3, [sp, #68]	; 0x44
 801ad60:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ad62:	4b91      	ldr	r3, [pc, #580]	; (801afa8 <_strtod_l+0xc00>)
 801ad64:	429a      	cmp	r2, r3
 801ad66:	f040 80b2 	bne.w	801aece <_strtod_l+0xb26>
 801ad6a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ad6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801ad72:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801ad76:	ec4b ab10 	vmov	d0, sl, fp
 801ad7a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801ad7e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801ad82:	f001 ff51 	bl	801cc28 <__ulp>
 801ad86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801ad8a:	ec53 2b10 	vmov	r2, r3, d0
 801ad8e:	f7e5 fc33 	bl	80005f8 <__aeabi_dmul>
 801ad92:	4652      	mov	r2, sl
 801ad94:	465b      	mov	r3, fp
 801ad96:	f7e5 fa79 	bl	800028c <__adddf3>
 801ad9a:	460b      	mov	r3, r1
 801ad9c:	4981      	ldr	r1, [pc, #516]	; (801afa4 <_strtod_l+0xbfc>)
 801ad9e:	4a83      	ldr	r2, [pc, #524]	; (801afac <_strtod_l+0xc04>)
 801ada0:	4019      	ands	r1, r3
 801ada2:	4291      	cmp	r1, r2
 801ada4:	4682      	mov	sl, r0
 801ada6:	d95e      	bls.n	801ae66 <_strtod_l+0xabe>
 801ada8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801adaa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801adae:	4293      	cmp	r3, r2
 801adb0:	d103      	bne.n	801adba <_strtod_l+0xa12>
 801adb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801adb4:	3301      	adds	r3, #1
 801adb6:	f43f ad43 	beq.w	801a840 <_strtod_l+0x498>
 801adba:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801afb8 <_strtod_l+0xc10>
 801adbe:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801adc2:	991e      	ldr	r1, [sp, #120]	; 0x78
 801adc4:	4620      	mov	r0, r4
 801adc6:	f001 fc03 	bl	801c5d0 <_Bfree>
 801adca:	9907      	ldr	r1, [sp, #28]
 801adcc:	4620      	mov	r0, r4
 801adce:	f001 fbff 	bl	801c5d0 <_Bfree>
 801add2:	4631      	mov	r1, r6
 801add4:	4620      	mov	r0, r4
 801add6:	f001 fbfb 	bl	801c5d0 <_Bfree>
 801adda:	4629      	mov	r1, r5
 801addc:	4620      	mov	r0, r4
 801adde:	f001 fbf7 	bl	801c5d0 <_Bfree>
 801ade2:	e613      	b.n	801aa0c <_strtod_l+0x664>
 801ade4:	f1ba 0f00 	cmp.w	sl, #0
 801ade8:	d11b      	bne.n	801ae22 <_strtod_l+0xa7a>
 801adea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801adee:	b9f3      	cbnz	r3, 801ae2e <_strtod_l+0xa86>
 801adf0:	4b6b      	ldr	r3, [pc, #428]	; (801afa0 <_strtod_l+0xbf8>)
 801adf2:	2200      	movs	r2, #0
 801adf4:	4640      	mov	r0, r8
 801adf6:	4649      	mov	r1, r9
 801adf8:	f7e5 fe70 	bl	8000adc <__aeabi_dcmplt>
 801adfc:	b9d0      	cbnz	r0, 801ae34 <_strtod_l+0xa8c>
 801adfe:	4640      	mov	r0, r8
 801ae00:	4649      	mov	r1, r9
 801ae02:	4b6b      	ldr	r3, [pc, #428]	; (801afb0 <_strtod_l+0xc08>)
 801ae04:	2200      	movs	r2, #0
 801ae06:	f7e5 fbf7 	bl	80005f8 <__aeabi_dmul>
 801ae0a:	4680      	mov	r8, r0
 801ae0c:	4689      	mov	r9, r1
 801ae0e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801ae12:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801ae16:	931b      	str	r3, [sp, #108]	; 0x6c
 801ae18:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801ae1c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801ae20:	e79b      	b.n	801ad5a <_strtod_l+0x9b2>
 801ae22:	f1ba 0f01 	cmp.w	sl, #1
 801ae26:	d102      	bne.n	801ae2e <_strtod_l+0xa86>
 801ae28:	2f00      	cmp	r7, #0
 801ae2a:	f43f ad7e 	beq.w	801a92a <_strtod_l+0x582>
 801ae2e:	4b61      	ldr	r3, [pc, #388]	; (801afb4 <_strtod_l+0xc0c>)
 801ae30:	2200      	movs	r2, #0
 801ae32:	e78c      	b.n	801ad4e <_strtod_l+0x9a6>
 801ae34:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801afb0 <_strtod_l+0xc08>
 801ae38:	f04f 0800 	mov.w	r8, #0
 801ae3c:	e7e7      	b.n	801ae0e <_strtod_l+0xa66>
 801ae3e:	4b5c      	ldr	r3, [pc, #368]	; (801afb0 <_strtod_l+0xc08>)
 801ae40:	4640      	mov	r0, r8
 801ae42:	4649      	mov	r1, r9
 801ae44:	2200      	movs	r2, #0
 801ae46:	f7e5 fbd7 	bl	80005f8 <__aeabi_dmul>
 801ae4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ae4c:	4680      	mov	r8, r0
 801ae4e:	4689      	mov	r9, r1
 801ae50:	b933      	cbnz	r3, 801ae60 <_strtod_l+0xab8>
 801ae52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ae56:	9012      	str	r0, [sp, #72]	; 0x48
 801ae58:	9313      	str	r3, [sp, #76]	; 0x4c
 801ae5a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801ae5e:	e7dd      	b.n	801ae1c <_strtod_l+0xa74>
 801ae60:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801ae64:	e7f9      	b.n	801ae5a <_strtod_l+0xab2>
 801ae66:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801ae6a:	9b04      	ldr	r3, [sp, #16]
 801ae6c:	2b00      	cmp	r3, #0
 801ae6e:	d1a8      	bne.n	801adc2 <_strtod_l+0xa1a>
 801ae70:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ae74:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ae76:	0d1b      	lsrs	r3, r3, #20
 801ae78:	051b      	lsls	r3, r3, #20
 801ae7a:	429a      	cmp	r2, r3
 801ae7c:	d1a1      	bne.n	801adc2 <_strtod_l+0xa1a>
 801ae7e:	4640      	mov	r0, r8
 801ae80:	4649      	mov	r1, r9
 801ae82:	f7e5 ff19 	bl	8000cb8 <__aeabi_d2lz>
 801ae86:	f7e5 fb89 	bl	800059c <__aeabi_l2d>
 801ae8a:	4602      	mov	r2, r0
 801ae8c:	460b      	mov	r3, r1
 801ae8e:	4640      	mov	r0, r8
 801ae90:	4649      	mov	r1, r9
 801ae92:	f7e5 f9f9 	bl	8000288 <__aeabi_dsub>
 801ae96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ae98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ae9c:	ea43 030a 	orr.w	r3, r3, sl
 801aea0:	4313      	orrs	r3, r2
 801aea2:	4680      	mov	r8, r0
 801aea4:	4689      	mov	r9, r1
 801aea6:	d053      	beq.n	801af50 <_strtod_l+0xba8>
 801aea8:	a335      	add	r3, pc, #212	; (adr r3, 801af80 <_strtod_l+0xbd8>)
 801aeaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aeae:	f7e5 fe15 	bl	8000adc <__aeabi_dcmplt>
 801aeb2:	2800      	cmp	r0, #0
 801aeb4:	f47f acce 	bne.w	801a854 <_strtod_l+0x4ac>
 801aeb8:	a333      	add	r3, pc, #204	; (adr r3, 801af88 <_strtod_l+0xbe0>)
 801aeba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aebe:	4640      	mov	r0, r8
 801aec0:	4649      	mov	r1, r9
 801aec2:	f7e5 fe29 	bl	8000b18 <__aeabi_dcmpgt>
 801aec6:	2800      	cmp	r0, #0
 801aec8:	f43f af7b 	beq.w	801adc2 <_strtod_l+0xa1a>
 801aecc:	e4c2      	b.n	801a854 <_strtod_l+0x4ac>
 801aece:	9b04      	ldr	r3, [sp, #16]
 801aed0:	b333      	cbz	r3, 801af20 <_strtod_l+0xb78>
 801aed2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801aed4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801aed8:	d822      	bhi.n	801af20 <_strtod_l+0xb78>
 801aeda:	a32d      	add	r3, pc, #180	; (adr r3, 801af90 <_strtod_l+0xbe8>)
 801aedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aee0:	4640      	mov	r0, r8
 801aee2:	4649      	mov	r1, r9
 801aee4:	f7e5 fe04 	bl	8000af0 <__aeabi_dcmple>
 801aee8:	b1a0      	cbz	r0, 801af14 <_strtod_l+0xb6c>
 801aeea:	4649      	mov	r1, r9
 801aeec:	4640      	mov	r0, r8
 801aeee:	f7e5 fe5b 	bl	8000ba8 <__aeabi_d2uiz>
 801aef2:	2801      	cmp	r0, #1
 801aef4:	bf38      	it	cc
 801aef6:	2001      	movcc	r0, #1
 801aef8:	f7e5 fb04 	bl	8000504 <__aeabi_ui2d>
 801aefc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801aefe:	4680      	mov	r8, r0
 801af00:	4689      	mov	r9, r1
 801af02:	bb13      	cbnz	r3, 801af4a <_strtod_l+0xba2>
 801af04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801af08:	9014      	str	r0, [sp, #80]	; 0x50
 801af0a:	9315      	str	r3, [sp, #84]	; 0x54
 801af0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801af10:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801af14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801af16:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801af18:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801af1c:	1a9b      	subs	r3, r3, r2
 801af1e:	930d      	str	r3, [sp, #52]	; 0x34
 801af20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801af24:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801af28:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801af2c:	f001 fe7c 	bl	801cc28 <__ulp>
 801af30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801af34:	ec53 2b10 	vmov	r2, r3, d0
 801af38:	f7e5 fb5e 	bl	80005f8 <__aeabi_dmul>
 801af3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801af40:	f7e5 f9a4 	bl	800028c <__adddf3>
 801af44:	4682      	mov	sl, r0
 801af46:	468b      	mov	fp, r1
 801af48:	e78f      	b.n	801ae6a <_strtod_l+0xac2>
 801af4a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801af4e:	e7dd      	b.n	801af0c <_strtod_l+0xb64>
 801af50:	a311      	add	r3, pc, #68	; (adr r3, 801af98 <_strtod_l+0xbf0>)
 801af52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af56:	f7e5 fdc1 	bl	8000adc <__aeabi_dcmplt>
 801af5a:	e7b4      	b.n	801aec6 <_strtod_l+0xb1e>
 801af5c:	2300      	movs	r3, #0
 801af5e:	930e      	str	r3, [sp, #56]	; 0x38
 801af60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801af62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801af64:	6013      	str	r3, [r2, #0]
 801af66:	f7ff ba65 	b.w	801a434 <_strtod_l+0x8c>
 801af6a:	2b65      	cmp	r3, #101	; 0x65
 801af6c:	f43f ab5d 	beq.w	801a62a <_strtod_l+0x282>
 801af70:	2b45      	cmp	r3, #69	; 0x45
 801af72:	f43f ab5a 	beq.w	801a62a <_strtod_l+0x282>
 801af76:	2201      	movs	r2, #1
 801af78:	f7ff bb92 	b.w	801a6a0 <_strtod_l+0x2f8>
 801af7c:	f3af 8000 	nop.w
 801af80:	94a03595 	.word	0x94a03595
 801af84:	3fdfffff 	.word	0x3fdfffff
 801af88:	35afe535 	.word	0x35afe535
 801af8c:	3fe00000 	.word	0x3fe00000
 801af90:	ffc00000 	.word	0xffc00000
 801af94:	41dfffff 	.word	0x41dfffff
 801af98:	94a03595 	.word	0x94a03595
 801af9c:	3fcfffff 	.word	0x3fcfffff
 801afa0:	3ff00000 	.word	0x3ff00000
 801afa4:	7ff00000 	.word	0x7ff00000
 801afa8:	7fe00000 	.word	0x7fe00000
 801afac:	7c9fffff 	.word	0x7c9fffff
 801afb0:	3fe00000 	.word	0x3fe00000
 801afb4:	bff00000 	.word	0xbff00000
 801afb8:	7fefffff 	.word	0x7fefffff

0801afbc <_strtod_r>:
 801afbc:	4b01      	ldr	r3, [pc, #4]	; (801afc4 <_strtod_r+0x8>)
 801afbe:	f7ff b9f3 	b.w	801a3a8 <_strtod_l>
 801afc2:	bf00      	nop
 801afc4:	20000138 	.word	0x20000138

0801afc8 <_strtol_l.isra.0>:
 801afc8:	2b01      	cmp	r3, #1
 801afca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801afce:	d001      	beq.n	801afd4 <_strtol_l.isra.0+0xc>
 801afd0:	2b24      	cmp	r3, #36	; 0x24
 801afd2:	d906      	bls.n	801afe2 <_strtol_l.isra.0+0x1a>
 801afd4:	f7fe f962 	bl	801929c <__errno>
 801afd8:	2316      	movs	r3, #22
 801afda:	6003      	str	r3, [r0, #0]
 801afdc:	2000      	movs	r0, #0
 801afde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801afe2:	4f3a      	ldr	r7, [pc, #232]	; (801b0cc <_strtol_l.isra.0+0x104>)
 801afe4:	468e      	mov	lr, r1
 801afe6:	4676      	mov	r6, lr
 801afe8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801afec:	5de5      	ldrb	r5, [r4, r7]
 801afee:	f015 0508 	ands.w	r5, r5, #8
 801aff2:	d1f8      	bne.n	801afe6 <_strtol_l.isra.0+0x1e>
 801aff4:	2c2d      	cmp	r4, #45	; 0x2d
 801aff6:	d134      	bne.n	801b062 <_strtol_l.isra.0+0x9a>
 801aff8:	f89e 4000 	ldrb.w	r4, [lr]
 801affc:	f04f 0801 	mov.w	r8, #1
 801b000:	f106 0e02 	add.w	lr, r6, #2
 801b004:	2b00      	cmp	r3, #0
 801b006:	d05c      	beq.n	801b0c2 <_strtol_l.isra.0+0xfa>
 801b008:	2b10      	cmp	r3, #16
 801b00a:	d10c      	bne.n	801b026 <_strtol_l.isra.0+0x5e>
 801b00c:	2c30      	cmp	r4, #48	; 0x30
 801b00e:	d10a      	bne.n	801b026 <_strtol_l.isra.0+0x5e>
 801b010:	f89e 4000 	ldrb.w	r4, [lr]
 801b014:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801b018:	2c58      	cmp	r4, #88	; 0x58
 801b01a:	d14d      	bne.n	801b0b8 <_strtol_l.isra.0+0xf0>
 801b01c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801b020:	2310      	movs	r3, #16
 801b022:	f10e 0e02 	add.w	lr, lr, #2
 801b026:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801b02a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801b02e:	2600      	movs	r6, #0
 801b030:	fbbc f9f3 	udiv	r9, ip, r3
 801b034:	4635      	mov	r5, r6
 801b036:	fb03 ca19 	mls	sl, r3, r9, ip
 801b03a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801b03e:	2f09      	cmp	r7, #9
 801b040:	d818      	bhi.n	801b074 <_strtol_l.isra.0+0xac>
 801b042:	463c      	mov	r4, r7
 801b044:	42a3      	cmp	r3, r4
 801b046:	dd24      	ble.n	801b092 <_strtol_l.isra.0+0xca>
 801b048:	2e00      	cmp	r6, #0
 801b04a:	db1f      	blt.n	801b08c <_strtol_l.isra.0+0xc4>
 801b04c:	45a9      	cmp	r9, r5
 801b04e:	d31d      	bcc.n	801b08c <_strtol_l.isra.0+0xc4>
 801b050:	d101      	bne.n	801b056 <_strtol_l.isra.0+0x8e>
 801b052:	45a2      	cmp	sl, r4
 801b054:	db1a      	blt.n	801b08c <_strtol_l.isra.0+0xc4>
 801b056:	fb05 4503 	mla	r5, r5, r3, r4
 801b05a:	2601      	movs	r6, #1
 801b05c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801b060:	e7eb      	b.n	801b03a <_strtol_l.isra.0+0x72>
 801b062:	2c2b      	cmp	r4, #43	; 0x2b
 801b064:	bf08      	it	eq
 801b066:	f89e 4000 	ldrbeq.w	r4, [lr]
 801b06a:	46a8      	mov	r8, r5
 801b06c:	bf08      	it	eq
 801b06e:	f106 0e02 	addeq.w	lr, r6, #2
 801b072:	e7c7      	b.n	801b004 <_strtol_l.isra.0+0x3c>
 801b074:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801b078:	2f19      	cmp	r7, #25
 801b07a:	d801      	bhi.n	801b080 <_strtol_l.isra.0+0xb8>
 801b07c:	3c37      	subs	r4, #55	; 0x37
 801b07e:	e7e1      	b.n	801b044 <_strtol_l.isra.0+0x7c>
 801b080:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801b084:	2f19      	cmp	r7, #25
 801b086:	d804      	bhi.n	801b092 <_strtol_l.isra.0+0xca>
 801b088:	3c57      	subs	r4, #87	; 0x57
 801b08a:	e7db      	b.n	801b044 <_strtol_l.isra.0+0x7c>
 801b08c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801b090:	e7e4      	b.n	801b05c <_strtol_l.isra.0+0x94>
 801b092:	2e00      	cmp	r6, #0
 801b094:	da05      	bge.n	801b0a2 <_strtol_l.isra.0+0xda>
 801b096:	2322      	movs	r3, #34	; 0x22
 801b098:	6003      	str	r3, [r0, #0]
 801b09a:	4665      	mov	r5, ip
 801b09c:	b942      	cbnz	r2, 801b0b0 <_strtol_l.isra.0+0xe8>
 801b09e:	4628      	mov	r0, r5
 801b0a0:	e79d      	b.n	801afde <_strtol_l.isra.0+0x16>
 801b0a2:	f1b8 0f00 	cmp.w	r8, #0
 801b0a6:	d000      	beq.n	801b0aa <_strtol_l.isra.0+0xe2>
 801b0a8:	426d      	negs	r5, r5
 801b0aa:	2a00      	cmp	r2, #0
 801b0ac:	d0f7      	beq.n	801b09e <_strtol_l.isra.0+0xd6>
 801b0ae:	b10e      	cbz	r6, 801b0b4 <_strtol_l.isra.0+0xec>
 801b0b0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 801b0b4:	6011      	str	r1, [r2, #0]
 801b0b6:	e7f2      	b.n	801b09e <_strtol_l.isra.0+0xd6>
 801b0b8:	2430      	movs	r4, #48	; 0x30
 801b0ba:	2b00      	cmp	r3, #0
 801b0bc:	d1b3      	bne.n	801b026 <_strtol_l.isra.0+0x5e>
 801b0be:	2308      	movs	r3, #8
 801b0c0:	e7b1      	b.n	801b026 <_strtol_l.isra.0+0x5e>
 801b0c2:	2c30      	cmp	r4, #48	; 0x30
 801b0c4:	d0a4      	beq.n	801b010 <_strtol_l.isra.0+0x48>
 801b0c6:	230a      	movs	r3, #10
 801b0c8:	e7ad      	b.n	801b026 <_strtol_l.isra.0+0x5e>
 801b0ca:	bf00      	nop
 801b0cc:	080210d9 	.word	0x080210d9

0801b0d0 <_strtol_r>:
 801b0d0:	f7ff bf7a 	b.w	801afc8 <_strtol_l.isra.0>

0801b0d4 <_write_r>:
 801b0d4:	b538      	push	{r3, r4, r5, lr}
 801b0d6:	4d07      	ldr	r5, [pc, #28]	; (801b0f4 <_write_r+0x20>)
 801b0d8:	4604      	mov	r4, r0
 801b0da:	4608      	mov	r0, r1
 801b0dc:	4611      	mov	r1, r2
 801b0de:	2200      	movs	r2, #0
 801b0e0:	602a      	str	r2, [r5, #0]
 801b0e2:	461a      	mov	r2, r3
 801b0e4:	f7f1 ffed 	bl	800d0c2 <_write>
 801b0e8:	1c43      	adds	r3, r0, #1
 801b0ea:	d102      	bne.n	801b0f2 <_write_r+0x1e>
 801b0ec:	682b      	ldr	r3, [r5, #0]
 801b0ee:	b103      	cbz	r3, 801b0f2 <_write_r+0x1e>
 801b0f0:	6023      	str	r3, [r4, #0]
 801b0f2:	bd38      	pop	{r3, r4, r5, pc}
 801b0f4:	2000a578 	.word	0x2000a578

0801b0f8 <_close_r>:
 801b0f8:	b538      	push	{r3, r4, r5, lr}
 801b0fa:	4d06      	ldr	r5, [pc, #24]	; (801b114 <_close_r+0x1c>)
 801b0fc:	2300      	movs	r3, #0
 801b0fe:	4604      	mov	r4, r0
 801b100:	4608      	mov	r0, r1
 801b102:	602b      	str	r3, [r5, #0]
 801b104:	f7f1 fff9 	bl	800d0fa <_close>
 801b108:	1c43      	adds	r3, r0, #1
 801b10a:	d102      	bne.n	801b112 <_close_r+0x1a>
 801b10c:	682b      	ldr	r3, [r5, #0]
 801b10e:	b103      	cbz	r3, 801b112 <_close_r+0x1a>
 801b110:	6023      	str	r3, [r4, #0]
 801b112:	bd38      	pop	{r3, r4, r5, pc}
 801b114:	2000a578 	.word	0x2000a578

0801b118 <quorem>:
 801b118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b11c:	6903      	ldr	r3, [r0, #16]
 801b11e:	690c      	ldr	r4, [r1, #16]
 801b120:	42a3      	cmp	r3, r4
 801b122:	4607      	mov	r7, r0
 801b124:	f2c0 8081 	blt.w	801b22a <quorem+0x112>
 801b128:	3c01      	subs	r4, #1
 801b12a:	f101 0814 	add.w	r8, r1, #20
 801b12e:	f100 0514 	add.w	r5, r0, #20
 801b132:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b136:	9301      	str	r3, [sp, #4]
 801b138:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b13c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b140:	3301      	adds	r3, #1
 801b142:	429a      	cmp	r2, r3
 801b144:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b148:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b14c:	fbb2 f6f3 	udiv	r6, r2, r3
 801b150:	d331      	bcc.n	801b1b6 <quorem+0x9e>
 801b152:	f04f 0e00 	mov.w	lr, #0
 801b156:	4640      	mov	r0, r8
 801b158:	46ac      	mov	ip, r5
 801b15a:	46f2      	mov	sl, lr
 801b15c:	f850 2b04 	ldr.w	r2, [r0], #4
 801b160:	b293      	uxth	r3, r2
 801b162:	fb06 e303 	mla	r3, r6, r3, lr
 801b166:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801b16a:	b29b      	uxth	r3, r3
 801b16c:	ebaa 0303 	sub.w	r3, sl, r3
 801b170:	0c12      	lsrs	r2, r2, #16
 801b172:	f8dc a000 	ldr.w	sl, [ip]
 801b176:	fb06 e202 	mla	r2, r6, r2, lr
 801b17a:	fa13 f38a 	uxtah	r3, r3, sl
 801b17e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b182:	fa1f fa82 	uxth.w	sl, r2
 801b186:	f8dc 2000 	ldr.w	r2, [ip]
 801b18a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801b18e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b192:	b29b      	uxth	r3, r3
 801b194:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b198:	4581      	cmp	r9, r0
 801b19a:	f84c 3b04 	str.w	r3, [ip], #4
 801b19e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b1a2:	d2db      	bcs.n	801b15c <quorem+0x44>
 801b1a4:	f855 300b 	ldr.w	r3, [r5, fp]
 801b1a8:	b92b      	cbnz	r3, 801b1b6 <quorem+0x9e>
 801b1aa:	9b01      	ldr	r3, [sp, #4]
 801b1ac:	3b04      	subs	r3, #4
 801b1ae:	429d      	cmp	r5, r3
 801b1b0:	461a      	mov	r2, r3
 801b1b2:	d32e      	bcc.n	801b212 <quorem+0xfa>
 801b1b4:	613c      	str	r4, [r7, #16]
 801b1b6:	4638      	mov	r0, r7
 801b1b8:	f001 fc92 	bl	801cae0 <__mcmp>
 801b1bc:	2800      	cmp	r0, #0
 801b1be:	db24      	blt.n	801b20a <quorem+0xf2>
 801b1c0:	3601      	adds	r6, #1
 801b1c2:	4628      	mov	r0, r5
 801b1c4:	f04f 0c00 	mov.w	ip, #0
 801b1c8:	f858 2b04 	ldr.w	r2, [r8], #4
 801b1cc:	f8d0 e000 	ldr.w	lr, [r0]
 801b1d0:	b293      	uxth	r3, r2
 801b1d2:	ebac 0303 	sub.w	r3, ip, r3
 801b1d6:	0c12      	lsrs	r2, r2, #16
 801b1d8:	fa13 f38e 	uxtah	r3, r3, lr
 801b1dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801b1e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b1e4:	b29b      	uxth	r3, r3
 801b1e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b1ea:	45c1      	cmp	r9, r8
 801b1ec:	f840 3b04 	str.w	r3, [r0], #4
 801b1f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b1f4:	d2e8      	bcs.n	801b1c8 <quorem+0xb0>
 801b1f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b1fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b1fe:	b922      	cbnz	r2, 801b20a <quorem+0xf2>
 801b200:	3b04      	subs	r3, #4
 801b202:	429d      	cmp	r5, r3
 801b204:	461a      	mov	r2, r3
 801b206:	d30a      	bcc.n	801b21e <quorem+0x106>
 801b208:	613c      	str	r4, [r7, #16]
 801b20a:	4630      	mov	r0, r6
 801b20c:	b003      	add	sp, #12
 801b20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b212:	6812      	ldr	r2, [r2, #0]
 801b214:	3b04      	subs	r3, #4
 801b216:	2a00      	cmp	r2, #0
 801b218:	d1cc      	bne.n	801b1b4 <quorem+0x9c>
 801b21a:	3c01      	subs	r4, #1
 801b21c:	e7c7      	b.n	801b1ae <quorem+0x96>
 801b21e:	6812      	ldr	r2, [r2, #0]
 801b220:	3b04      	subs	r3, #4
 801b222:	2a00      	cmp	r2, #0
 801b224:	d1f0      	bne.n	801b208 <quorem+0xf0>
 801b226:	3c01      	subs	r4, #1
 801b228:	e7eb      	b.n	801b202 <quorem+0xea>
 801b22a:	2000      	movs	r0, #0
 801b22c:	e7ee      	b.n	801b20c <quorem+0xf4>
	...

0801b230 <_dtoa_r>:
 801b230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b234:	ed2d 8b02 	vpush	{d8}
 801b238:	ec57 6b10 	vmov	r6, r7, d0
 801b23c:	b095      	sub	sp, #84	; 0x54
 801b23e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b240:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801b244:	9105      	str	r1, [sp, #20]
 801b246:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801b24a:	4604      	mov	r4, r0
 801b24c:	9209      	str	r2, [sp, #36]	; 0x24
 801b24e:	930f      	str	r3, [sp, #60]	; 0x3c
 801b250:	b975      	cbnz	r5, 801b270 <_dtoa_r+0x40>
 801b252:	2010      	movs	r0, #16
 801b254:	f7fe f84c 	bl	80192f0 <malloc>
 801b258:	4602      	mov	r2, r0
 801b25a:	6260      	str	r0, [r4, #36]	; 0x24
 801b25c:	b920      	cbnz	r0, 801b268 <_dtoa_r+0x38>
 801b25e:	4bb2      	ldr	r3, [pc, #712]	; (801b528 <_dtoa_r+0x2f8>)
 801b260:	21ea      	movs	r1, #234	; 0xea
 801b262:	48b2      	ldr	r0, [pc, #712]	; (801b52c <_dtoa_r+0x2fc>)
 801b264:	f002 f808 	bl	801d278 <__assert_func>
 801b268:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b26c:	6005      	str	r5, [r0, #0]
 801b26e:	60c5      	str	r5, [r0, #12]
 801b270:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b272:	6819      	ldr	r1, [r3, #0]
 801b274:	b151      	cbz	r1, 801b28c <_dtoa_r+0x5c>
 801b276:	685a      	ldr	r2, [r3, #4]
 801b278:	604a      	str	r2, [r1, #4]
 801b27a:	2301      	movs	r3, #1
 801b27c:	4093      	lsls	r3, r2
 801b27e:	608b      	str	r3, [r1, #8]
 801b280:	4620      	mov	r0, r4
 801b282:	f001 f9a5 	bl	801c5d0 <_Bfree>
 801b286:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b288:	2200      	movs	r2, #0
 801b28a:	601a      	str	r2, [r3, #0]
 801b28c:	1e3b      	subs	r3, r7, #0
 801b28e:	bfb9      	ittee	lt
 801b290:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801b294:	9303      	strlt	r3, [sp, #12]
 801b296:	2300      	movge	r3, #0
 801b298:	f8c8 3000 	strge.w	r3, [r8]
 801b29c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801b2a0:	4ba3      	ldr	r3, [pc, #652]	; (801b530 <_dtoa_r+0x300>)
 801b2a2:	bfbc      	itt	lt
 801b2a4:	2201      	movlt	r2, #1
 801b2a6:	f8c8 2000 	strlt.w	r2, [r8]
 801b2aa:	ea33 0309 	bics.w	r3, r3, r9
 801b2ae:	d11b      	bne.n	801b2e8 <_dtoa_r+0xb8>
 801b2b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b2b2:	f242 730f 	movw	r3, #9999	; 0x270f
 801b2b6:	6013      	str	r3, [r2, #0]
 801b2b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b2bc:	4333      	orrs	r3, r6
 801b2be:	f000 857a 	beq.w	801bdb6 <_dtoa_r+0xb86>
 801b2c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b2c4:	b963      	cbnz	r3, 801b2e0 <_dtoa_r+0xb0>
 801b2c6:	4b9b      	ldr	r3, [pc, #620]	; (801b534 <_dtoa_r+0x304>)
 801b2c8:	e024      	b.n	801b314 <_dtoa_r+0xe4>
 801b2ca:	4b9b      	ldr	r3, [pc, #620]	; (801b538 <_dtoa_r+0x308>)
 801b2cc:	9300      	str	r3, [sp, #0]
 801b2ce:	3308      	adds	r3, #8
 801b2d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b2d2:	6013      	str	r3, [r2, #0]
 801b2d4:	9800      	ldr	r0, [sp, #0]
 801b2d6:	b015      	add	sp, #84	; 0x54
 801b2d8:	ecbd 8b02 	vpop	{d8}
 801b2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2e0:	4b94      	ldr	r3, [pc, #592]	; (801b534 <_dtoa_r+0x304>)
 801b2e2:	9300      	str	r3, [sp, #0]
 801b2e4:	3303      	adds	r3, #3
 801b2e6:	e7f3      	b.n	801b2d0 <_dtoa_r+0xa0>
 801b2e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b2ec:	2200      	movs	r2, #0
 801b2ee:	ec51 0b17 	vmov	r0, r1, d7
 801b2f2:	2300      	movs	r3, #0
 801b2f4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801b2f8:	f7e5 fbe6 	bl	8000ac8 <__aeabi_dcmpeq>
 801b2fc:	4680      	mov	r8, r0
 801b2fe:	b158      	cbz	r0, 801b318 <_dtoa_r+0xe8>
 801b300:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b302:	2301      	movs	r3, #1
 801b304:	6013      	str	r3, [r2, #0]
 801b306:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b308:	2b00      	cmp	r3, #0
 801b30a:	f000 8551 	beq.w	801bdb0 <_dtoa_r+0xb80>
 801b30e:	488b      	ldr	r0, [pc, #556]	; (801b53c <_dtoa_r+0x30c>)
 801b310:	6018      	str	r0, [r3, #0]
 801b312:	1e43      	subs	r3, r0, #1
 801b314:	9300      	str	r3, [sp, #0]
 801b316:	e7dd      	b.n	801b2d4 <_dtoa_r+0xa4>
 801b318:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801b31c:	aa12      	add	r2, sp, #72	; 0x48
 801b31e:	a913      	add	r1, sp, #76	; 0x4c
 801b320:	4620      	mov	r0, r4
 801b322:	f001 fcfd 	bl	801cd20 <__d2b>
 801b326:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801b32a:	4683      	mov	fp, r0
 801b32c:	2d00      	cmp	r5, #0
 801b32e:	d07c      	beq.n	801b42a <_dtoa_r+0x1fa>
 801b330:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b332:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801b336:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b33a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801b33e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801b342:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801b346:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801b34a:	4b7d      	ldr	r3, [pc, #500]	; (801b540 <_dtoa_r+0x310>)
 801b34c:	2200      	movs	r2, #0
 801b34e:	4630      	mov	r0, r6
 801b350:	4639      	mov	r1, r7
 801b352:	f7e4 ff99 	bl	8000288 <__aeabi_dsub>
 801b356:	a36e      	add	r3, pc, #440	; (adr r3, 801b510 <_dtoa_r+0x2e0>)
 801b358:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b35c:	f7e5 f94c 	bl	80005f8 <__aeabi_dmul>
 801b360:	a36d      	add	r3, pc, #436	; (adr r3, 801b518 <_dtoa_r+0x2e8>)
 801b362:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b366:	f7e4 ff91 	bl	800028c <__adddf3>
 801b36a:	4606      	mov	r6, r0
 801b36c:	4628      	mov	r0, r5
 801b36e:	460f      	mov	r7, r1
 801b370:	f7e5 f8d8 	bl	8000524 <__aeabi_i2d>
 801b374:	a36a      	add	r3, pc, #424	; (adr r3, 801b520 <_dtoa_r+0x2f0>)
 801b376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b37a:	f7e5 f93d 	bl	80005f8 <__aeabi_dmul>
 801b37e:	4602      	mov	r2, r0
 801b380:	460b      	mov	r3, r1
 801b382:	4630      	mov	r0, r6
 801b384:	4639      	mov	r1, r7
 801b386:	f7e4 ff81 	bl	800028c <__adddf3>
 801b38a:	4606      	mov	r6, r0
 801b38c:	460f      	mov	r7, r1
 801b38e:	f7e5 fbe3 	bl	8000b58 <__aeabi_d2iz>
 801b392:	2200      	movs	r2, #0
 801b394:	4682      	mov	sl, r0
 801b396:	2300      	movs	r3, #0
 801b398:	4630      	mov	r0, r6
 801b39a:	4639      	mov	r1, r7
 801b39c:	f7e5 fb9e 	bl	8000adc <__aeabi_dcmplt>
 801b3a0:	b148      	cbz	r0, 801b3b6 <_dtoa_r+0x186>
 801b3a2:	4650      	mov	r0, sl
 801b3a4:	f7e5 f8be 	bl	8000524 <__aeabi_i2d>
 801b3a8:	4632      	mov	r2, r6
 801b3aa:	463b      	mov	r3, r7
 801b3ac:	f7e5 fb8c 	bl	8000ac8 <__aeabi_dcmpeq>
 801b3b0:	b908      	cbnz	r0, 801b3b6 <_dtoa_r+0x186>
 801b3b2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801b3b6:	f1ba 0f16 	cmp.w	sl, #22
 801b3ba:	d854      	bhi.n	801b466 <_dtoa_r+0x236>
 801b3bc:	4b61      	ldr	r3, [pc, #388]	; (801b544 <_dtoa_r+0x314>)
 801b3be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801b3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b3ca:	f7e5 fb87 	bl	8000adc <__aeabi_dcmplt>
 801b3ce:	2800      	cmp	r0, #0
 801b3d0:	d04b      	beq.n	801b46a <_dtoa_r+0x23a>
 801b3d2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801b3d6:	2300      	movs	r3, #0
 801b3d8:	930e      	str	r3, [sp, #56]	; 0x38
 801b3da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b3dc:	1b5d      	subs	r5, r3, r5
 801b3de:	1e6b      	subs	r3, r5, #1
 801b3e0:	9304      	str	r3, [sp, #16]
 801b3e2:	bf43      	ittte	mi
 801b3e4:	2300      	movmi	r3, #0
 801b3e6:	f1c5 0801 	rsbmi	r8, r5, #1
 801b3ea:	9304      	strmi	r3, [sp, #16]
 801b3ec:	f04f 0800 	movpl.w	r8, #0
 801b3f0:	f1ba 0f00 	cmp.w	sl, #0
 801b3f4:	db3b      	blt.n	801b46e <_dtoa_r+0x23e>
 801b3f6:	9b04      	ldr	r3, [sp, #16]
 801b3f8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801b3fc:	4453      	add	r3, sl
 801b3fe:	9304      	str	r3, [sp, #16]
 801b400:	2300      	movs	r3, #0
 801b402:	9306      	str	r3, [sp, #24]
 801b404:	9b05      	ldr	r3, [sp, #20]
 801b406:	2b09      	cmp	r3, #9
 801b408:	d869      	bhi.n	801b4de <_dtoa_r+0x2ae>
 801b40a:	2b05      	cmp	r3, #5
 801b40c:	bfc4      	itt	gt
 801b40e:	3b04      	subgt	r3, #4
 801b410:	9305      	strgt	r3, [sp, #20]
 801b412:	9b05      	ldr	r3, [sp, #20]
 801b414:	f1a3 0302 	sub.w	r3, r3, #2
 801b418:	bfcc      	ite	gt
 801b41a:	2500      	movgt	r5, #0
 801b41c:	2501      	movle	r5, #1
 801b41e:	2b03      	cmp	r3, #3
 801b420:	d869      	bhi.n	801b4f6 <_dtoa_r+0x2c6>
 801b422:	e8df f003 	tbb	[pc, r3]
 801b426:	4e2c      	.short	0x4e2c
 801b428:	5a4c      	.short	0x5a4c
 801b42a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801b42e:	441d      	add	r5, r3
 801b430:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801b434:	2b20      	cmp	r3, #32
 801b436:	bfc1      	itttt	gt
 801b438:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801b43c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801b440:	fa09 f303 	lslgt.w	r3, r9, r3
 801b444:	fa26 f000 	lsrgt.w	r0, r6, r0
 801b448:	bfda      	itte	le
 801b44a:	f1c3 0320 	rsble	r3, r3, #32
 801b44e:	fa06 f003 	lslle.w	r0, r6, r3
 801b452:	4318      	orrgt	r0, r3
 801b454:	f7e5 f856 	bl	8000504 <__aeabi_ui2d>
 801b458:	2301      	movs	r3, #1
 801b45a:	4606      	mov	r6, r0
 801b45c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801b460:	3d01      	subs	r5, #1
 801b462:	9310      	str	r3, [sp, #64]	; 0x40
 801b464:	e771      	b.n	801b34a <_dtoa_r+0x11a>
 801b466:	2301      	movs	r3, #1
 801b468:	e7b6      	b.n	801b3d8 <_dtoa_r+0x1a8>
 801b46a:	900e      	str	r0, [sp, #56]	; 0x38
 801b46c:	e7b5      	b.n	801b3da <_dtoa_r+0x1aa>
 801b46e:	f1ca 0300 	rsb	r3, sl, #0
 801b472:	9306      	str	r3, [sp, #24]
 801b474:	2300      	movs	r3, #0
 801b476:	eba8 080a 	sub.w	r8, r8, sl
 801b47a:	930d      	str	r3, [sp, #52]	; 0x34
 801b47c:	e7c2      	b.n	801b404 <_dtoa_r+0x1d4>
 801b47e:	2300      	movs	r3, #0
 801b480:	9308      	str	r3, [sp, #32]
 801b482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b484:	2b00      	cmp	r3, #0
 801b486:	dc39      	bgt.n	801b4fc <_dtoa_r+0x2cc>
 801b488:	f04f 0901 	mov.w	r9, #1
 801b48c:	f8cd 9004 	str.w	r9, [sp, #4]
 801b490:	464b      	mov	r3, r9
 801b492:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801b496:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801b498:	2200      	movs	r2, #0
 801b49a:	6042      	str	r2, [r0, #4]
 801b49c:	2204      	movs	r2, #4
 801b49e:	f102 0614 	add.w	r6, r2, #20
 801b4a2:	429e      	cmp	r6, r3
 801b4a4:	6841      	ldr	r1, [r0, #4]
 801b4a6:	d92f      	bls.n	801b508 <_dtoa_r+0x2d8>
 801b4a8:	4620      	mov	r0, r4
 801b4aa:	f001 f851 	bl	801c550 <_Balloc>
 801b4ae:	9000      	str	r0, [sp, #0]
 801b4b0:	2800      	cmp	r0, #0
 801b4b2:	d14b      	bne.n	801b54c <_dtoa_r+0x31c>
 801b4b4:	4b24      	ldr	r3, [pc, #144]	; (801b548 <_dtoa_r+0x318>)
 801b4b6:	4602      	mov	r2, r0
 801b4b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801b4bc:	e6d1      	b.n	801b262 <_dtoa_r+0x32>
 801b4be:	2301      	movs	r3, #1
 801b4c0:	e7de      	b.n	801b480 <_dtoa_r+0x250>
 801b4c2:	2300      	movs	r3, #0
 801b4c4:	9308      	str	r3, [sp, #32]
 801b4c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b4c8:	eb0a 0903 	add.w	r9, sl, r3
 801b4cc:	f109 0301 	add.w	r3, r9, #1
 801b4d0:	2b01      	cmp	r3, #1
 801b4d2:	9301      	str	r3, [sp, #4]
 801b4d4:	bfb8      	it	lt
 801b4d6:	2301      	movlt	r3, #1
 801b4d8:	e7dd      	b.n	801b496 <_dtoa_r+0x266>
 801b4da:	2301      	movs	r3, #1
 801b4dc:	e7f2      	b.n	801b4c4 <_dtoa_r+0x294>
 801b4de:	2501      	movs	r5, #1
 801b4e0:	2300      	movs	r3, #0
 801b4e2:	9305      	str	r3, [sp, #20]
 801b4e4:	9508      	str	r5, [sp, #32]
 801b4e6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801b4ea:	2200      	movs	r2, #0
 801b4ec:	f8cd 9004 	str.w	r9, [sp, #4]
 801b4f0:	2312      	movs	r3, #18
 801b4f2:	9209      	str	r2, [sp, #36]	; 0x24
 801b4f4:	e7cf      	b.n	801b496 <_dtoa_r+0x266>
 801b4f6:	2301      	movs	r3, #1
 801b4f8:	9308      	str	r3, [sp, #32]
 801b4fa:	e7f4      	b.n	801b4e6 <_dtoa_r+0x2b6>
 801b4fc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801b500:	f8cd 9004 	str.w	r9, [sp, #4]
 801b504:	464b      	mov	r3, r9
 801b506:	e7c6      	b.n	801b496 <_dtoa_r+0x266>
 801b508:	3101      	adds	r1, #1
 801b50a:	6041      	str	r1, [r0, #4]
 801b50c:	0052      	lsls	r2, r2, #1
 801b50e:	e7c6      	b.n	801b49e <_dtoa_r+0x26e>
 801b510:	636f4361 	.word	0x636f4361
 801b514:	3fd287a7 	.word	0x3fd287a7
 801b518:	8b60c8b3 	.word	0x8b60c8b3
 801b51c:	3fc68a28 	.word	0x3fc68a28
 801b520:	509f79fb 	.word	0x509f79fb
 801b524:	3fd34413 	.word	0x3fd34413
 801b528:	080211e6 	.word	0x080211e6
 801b52c:	080211fd 	.word	0x080211fd
 801b530:	7ff00000 	.word	0x7ff00000
 801b534:	080211e2 	.word	0x080211e2
 801b538:	080211d9 	.word	0x080211d9
 801b53c:	0802105d 	.word	0x0802105d
 801b540:	3ff80000 	.word	0x3ff80000
 801b544:	08021378 	.word	0x08021378
 801b548:	0802125c 	.word	0x0802125c
 801b54c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b54e:	9a00      	ldr	r2, [sp, #0]
 801b550:	601a      	str	r2, [r3, #0]
 801b552:	9b01      	ldr	r3, [sp, #4]
 801b554:	2b0e      	cmp	r3, #14
 801b556:	f200 80ad 	bhi.w	801b6b4 <_dtoa_r+0x484>
 801b55a:	2d00      	cmp	r5, #0
 801b55c:	f000 80aa 	beq.w	801b6b4 <_dtoa_r+0x484>
 801b560:	f1ba 0f00 	cmp.w	sl, #0
 801b564:	dd36      	ble.n	801b5d4 <_dtoa_r+0x3a4>
 801b566:	4ac3      	ldr	r2, [pc, #780]	; (801b874 <_dtoa_r+0x644>)
 801b568:	f00a 030f 	and.w	r3, sl, #15
 801b56c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801b570:	ed93 7b00 	vldr	d7, [r3]
 801b574:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801b578:	ea4f 172a 	mov.w	r7, sl, asr #4
 801b57c:	eeb0 8a47 	vmov.f32	s16, s14
 801b580:	eef0 8a67 	vmov.f32	s17, s15
 801b584:	d016      	beq.n	801b5b4 <_dtoa_r+0x384>
 801b586:	4bbc      	ldr	r3, [pc, #752]	; (801b878 <_dtoa_r+0x648>)
 801b588:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b58c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b590:	f7e5 f95c 	bl	800084c <__aeabi_ddiv>
 801b594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b598:	f007 070f 	and.w	r7, r7, #15
 801b59c:	2503      	movs	r5, #3
 801b59e:	4eb6      	ldr	r6, [pc, #728]	; (801b878 <_dtoa_r+0x648>)
 801b5a0:	b957      	cbnz	r7, 801b5b8 <_dtoa_r+0x388>
 801b5a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b5a6:	ec53 2b18 	vmov	r2, r3, d8
 801b5aa:	f7e5 f94f 	bl	800084c <__aeabi_ddiv>
 801b5ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b5b2:	e029      	b.n	801b608 <_dtoa_r+0x3d8>
 801b5b4:	2502      	movs	r5, #2
 801b5b6:	e7f2      	b.n	801b59e <_dtoa_r+0x36e>
 801b5b8:	07f9      	lsls	r1, r7, #31
 801b5ba:	d508      	bpl.n	801b5ce <_dtoa_r+0x39e>
 801b5bc:	ec51 0b18 	vmov	r0, r1, d8
 801b5c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b5c4:	f7e5 f818 	bl	80005f8 <__aeabi_dmul>
 801b5c8:	ec41 0b18 	vmov	d8, r0, r1
 801b5cc:	3501      	adds	r5, #1
 801b5ce:	107f      	asrs	r7, r7, #1
 801b5d0:	3608      	adds	r6, #8
 801b5d2:	e7e5      	b.n	801b5a0 <_dtoa_r+0x370>
 801b5d4:	f000 80a6 	beq.w	801b724 <_dtoa_r+0x4f4>
 801b5d8:	f1ca 0600 	rsb	r6, sl, #0
 801b5dc:	4ba5      	ldr	r3, [pc, #660]	; (801b874 <_dtoa_r+0x644>)
 801b5de:	4fa6      	ldr	r7, [pc, #664]	; (801b878 <_dtoa_r+0x648>)
 801b5e0:	f006 020f 	and.w	r2, r6, #15
 801b5e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b5f0:	f7e5 f802 	bl	80005f8 <__aeabi_dmul>
 801b5f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b5f8:	1136      	asrs	r6, r6, #4
 801b5fa:	2300      	movs	r3, #0
 801b5fc:	2502      	movs	r5, #2
 801b5fe:	2e00      	cmp	r6, #0
 801b600:	f040 8085 	bne.w	801b70e <_dtoa_r+0x4de>
 801b604:	2b00      	cmp	r3, #0
 801b606:	d1d2      	bne.n	801b5ae <_dtoa_r+0x37e>
 801b608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b60a:	2b00      	cmp	r3, #0
 801b60c:	f000 808c 	beq.w	801b728 <_dtoa_r+0x4f8>
 801b610:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801b614:	4b99      	ldr	r3, [pc, #612]	; (801b87c <_dtoa_r+0x64c>)
 801b616:	2200      	movs	r2, #0
 801b618:	4630      	mov	r0, r6
 801b61a:	4639      	mov	r1, r7
 801b61c:	f7e5 fa5e 	bl	8000adc <__aeabi_dcmplt>
 801b620:	2800      	cmp	r0, #0
 801b622:	f000 8081 	beq.w	801b728 <_dtoa_r+0x4f8>
 801b626:	9b01      	ldr	r3, [sp, #4]
 801b628:	2b00      	cmp	r3, #0
 801b62a:	d07d      	beq.n	801b728 <_dtoa_r+0x4f8>
 801b62c:	f1b9 0f00 	cmp.w	r9, #0
 801b630:	dd3c      	ble.n	801b6ac <_dtoa_r+0x47c>
 801b632:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801b636:	9307      	str	r3, [sp, #28]
 801b638:	2200      	movs	r2, #0
 801b63a:	4b91      	ldr	r3, [pc, #580]	; (801b880 <_dtoa_r+0x650>)
 801b63c:	4630      	mov	r0, r6
 801b63e:	4639      	mov	r1, r7
 801b640:	f7e4 ffda 	bl	80005f8 <__aeabi_dmul>
 801b644:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b648:	3501      	adds	r5, #1
 801b64a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801b64e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801b652:	4628      	mov	r0, r5
 801b654:	f7e4 ff66 	bl	8000524 <__aeabi_i2d>
 801b658:	4632      	mov	r2, r6
 801b65a:	463b      	mov	r3, r7
 801b65c:	f7e4 ffcc 	bl	80005f8 <__aeabi_dmul>
 801b660:	4b88      	ldr	r3, [pc, #544]	; (801b884 <_dtoa_r+0x654>)
 801b662:	2200      	movs	r2, #0
 801b664:	f7e4 fe12 	bl	800028c <__adddf3>
 801b668:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801b66c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b670:	9303      	str	r3, [sp, #12]
 801b672:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b674:	2b00      	cmp	r3, #0
 801b676:	d15c      	bne.n	801b732 <_dtoa_r+0x502>
 801b678:	4b83      	ldr	r3, [pc, #524]	; (801b888 <_dtoa_r+0x658>)
 801b67a:	2200      	movs	r2, #0
 801b67c:	4630      	mov	r0, r6
 801b67e:	4639      	mov	r1, r7
 801b680:	f7e4 fe02 	bl	8000288 <__aeabi_dsub>
 801b684:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b688:	4606      	mov	r6, r0
 801b68a:	460f      	mov	r7, r1
 801b68c:	f7e5 fa44 	bl	8000b18 <__aeabi_dcmpgt>
 801b690:	2800      	cmp	r0, #0
 801b692:	f040 8296 	bne.w	801bbc2 <_dtoa_r+0x992>
 801b696:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801b69a:	4630      	mov	r0, r6
 801b69c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b6a0:	4639      	mov	r1, r7
 801b6a2:	f7e5 fa1b 	bl	8000adc <__aeabi_dcmplt>
 801b6a6:	2800      	cmp	r0, #0
 801b6a8:	f040 8288 	bne.w	801bbbc <_dtoa_r+0x98c>
 801b6ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801b6b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b6b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b6b6:	2b00      	cmp	r3, #0
 801b6b8:	f2c0 8158 	blt.w	801b96c <_dtoa_r+0x73c>
 801b6bc:	f1ba 0f0e 	cmp.w	sl, #14
 801b6c0:	f300 8154 	bgt.w	801b96c <_dtoa_r+0x73c>
 801b6c4:	4b6b      	ldr	r3, [pc, #428]	; (801b874 <_dtoa_r+0x644>)
 801b6c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801b6ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b6ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b6d0:	2b00      	cmp	r3, #0
 801b6d2:	f280 80e3 	bge.w	801b89c <_dtoa_r+0x66c>
 801b6d6:	9b01      	ldr	r3, [sp, #4]
 801b6d8:	2b00      	cmp	r3, #0
 801b6da:	f300 80df 	bgt.w	801b89c <_dtoa_r+0x66c>
 801b6de:	f040 826d 	bne.w	801bbbc <_dtoa_r+0x98c>
 801b6e2:	4b69      	ldr	r3, [pc, #420]	; (801b888 <_dtoa_r+0x658>)
 801b6e4:	2200      	movs	r2, #0
 801b6e6:	4640      	mov	r0, r8
 801b6e8:	4649      	mov	r1, r9
 801b6ea:	f7e4 ff85 	bl	80005f8 <__aeabi_dmul>
 801b6ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b6f2:	f7e5 fa07 	bl	8000b04 <__aeabi_dcmpge>
 801b6f6:	9e01      	ldr	r6, [sp, #4]
 801b6f8:	4637      	mov	r7, r6
 801b6fa:	2800      	cmp	r0, #0
 801b6fc:	f040 8243 	bne.w	801bb86 <_dtoa_r+0x956>
 801b700:	9d00      	ldr	r5, [sp, #0]
 801b702:	2331      	movs	r3, #49	; 0x31
 801b704:	f805 3b01 	strb.w	r3, [r5], #1
 801b708:	f10a 0a01 	add.w	sl, sl, #1
 801b70c:	e23f      	b.n	801bb8e <_dtoa_r+0x95e>
 801b70e:	07f2      	lsls	r2, r6, #31
 801b710:	d505      	bpl.n	801b71e <_dtoa_r+0x4ee>
 801b712:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b716:	f7e4 ff6f 	bl	80005f8 <__aeabi_dmul>
 801b71a:	3501      	adds	r5, #1
 801b71c:	2301      	movs	r3, #1
 801b71e:	1076      	asrs	r6, r6, #1
 801b720:	3708      	adds	r7, #8
 801b722:	e76c      	b.n	801b5fe <_dtoa_r+0x3ce>
 801b724:	2502      	movs	r5, #2
 801b726:	e76f      	b.n	801b608 <_dtoa_r+0x3d8>
 801b728:	9b01      	ldr	r3, [sp, #4]
 801b72a:	f8cd a01c 	str.w	sl, [sp, #28]
 801b72e:	930c      	str	r3, [sp, #48]	; 0x30
 801b730:	e78d      	b.n	801b64e <_dtoa_r+0x41e>
 801b732:	9900      	ldr	r1, [sp, #0]
 801b734:	980c      	ldr	r0, [sp, #48]	; 0x30
 801b736:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b738:	4b4e      	ldr	r3, [pc, #312]	; (801b874 <_dtoa_r+0x644>)
 801b73a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b73e:	4401      	add	r1, r0
 801b740:	9102      	str	r1, [sp, #8]
 801b742:	9908      	ldr	r1, [sp, #32]
 801b744:	eeb0 8a47 	vmov.f32	s16, s14
 801b748:	eef0 8a67 	vmov.f32	s17, s15
 801b74c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b750:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801b754:	2900      	cmp	r1, #0
 801b756:	d045      	beq.n	801b7e4 <_dtoa_r+0x5b4>
 801b758:	494c      	ldr	r1, [pc, #304]	; (801b88c <_dtoa_r+0x65c>)
 801b75a:	2000      	movs	r0, #0
 801b75c:	f7e5 f876 	bl	800084c <__aeabi_ddiv>
 801b760:	ec53 2b18 	vmov	r2, r3, d8
 801b764:	f7e4 fd90 	bl	8000288 <__aeabi_dsub>
 801b768:	9d00      	ldr	r5, [sp, #0]
 801b76a:	ec41 0b18 	vmov	d8, r0, r1
 801b76e:	4639      	mov	r1, r7
 801b770:	4630      	mov	r0, r6
 801b772:	f7e5 f9f1 	bl	8000b58 <__aeabi_d2iz>
 801b776:	900c      	str	r0, [sp, #48]	; 0x30
 801b778:	f7e4 fed4 	bl	8000524 <__aeabi_i2d>
 801b77c:	4602      	mov	r2, r0
 801b77e:	460b      	mov	r3, r1
 801b780:	4630      	mov	r0, r6
 801b782:	4639      	mov	r1, r7
 801b784:	f7e4 fd80 	bl	8000288 <__aeabi_dsub>
 801b788:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b78a:	3330      	adds	r3, #48	; 0x30
 801b78c:	f805 3b01 	strb.w	r3, [r5], #1
 801b790:	ec53 2b18 	vmov	r2, r3, d8
 801b794:	4606      	mov	r6, r0
 801b796:	460f      	mov	r7, r1
 801b798:	f7e5 f9a0 	bl	8000adc <__aeabi_dcmplt>
 801b79c:	2800      	cmp	r0, #0
 801b79e:	d165      	bne.n	801b86c <_dtoa_r+0x63c>
 801b7a0:	4632      	mov	r2, r6
 801b7a2:	463b      	mov	r3, r7
 801b7a4:	4935      	ldr	r1, [pc, #212]	; (801b87c <_dtoa_r+0x64c>)
 801b7a6:	2000      	movs	r0, #0
 801b7a8:	f7e4 fd6e 	bl	8000288 <__aeabi_dsub>
 801b7ac:	ec53 2b18 	vmov	r2, r3, d8
 801b7b0:	f7e5 f994 	bl	8000adc <__aeabi_dcmplt>
 801b7b4:	2800      	cmp	r0, #0
 801b7b6:	f040 80b9 	bne.w	801b92c <_dtoa_r+0x6fc>
 801b7ba:	9b02      	ldr	r3, [sp, #8]
 801b7bc:	429d      	cmp	r5, r3
 801b7be:	f43f af75 	beq.w	801b6ac <_dtoa_r+0x47c>
 801b7c2:	4b2f      	ldr	r3, [pc, #188]	; (801b880 <_dtoa_r+0x650>)
 801b7c4:	ec51 0b18 	vmov	r0, r1, d8
 801b7c8:	2200      	movs	r2, #0
 801b7ca:	f7e4 ff15 	bl	80005f8 <__aeabi_dmul>
 801b7ce:	4b2c      	ldr	r3, [pc, #176]	; (801b880 <_dtoa_r+0x650>)
 801b7d0:	ec41 0b18 	vmov	d8, r0, r1
 801b7d4:	2200      	movs	r2, #0
 801b7d6:	4630      	mov	r0, r6
 801b7d8:	4639      	mov	r1, r7
 801b7da:	f7e4 ff0d 	bl	80005f8 <__aeabi_dmul>
 801b7de:	4606      	mov	r6, r0
 801b7e0:	460f      	mov	r7, r1
 801b7e2:	e7c4      	b.n	801b76e <_dtoa_r+0x53e>
 801b7e4:	ec51 0b17 	vmov	r0, r1, d7
 801b7e8:	f7e4 ff06 	bl	80005f8 <__aeabi_dmul>
 801b7ec:	9b02      	ldr	r3, [sp, #8]
 801b7ee:	9d00      	ldr	r5, [sp, #0]
 801b7f0:	930c      	str	r3, [sp, #48]	; 0x30
 801b7f2:	ec41 0b18 	vmov	d8, r0, r1
 801b7f6:	4639      	mov	r1, r7
 801b7f8:	4630      	mov	r0, r6
 801b7fa:	f7e5 f9ad 	bl	8000b58 <__aeabi_d2iz>
 801b7fe:	9011      	str	r0, [sp, #68]	; 0x44
 801b800:	f7e4 fe90 	bl	8000524 <__aeabi_i2d>
 801b804:	4602      	mov	r2, r0
 801b806:	460b      	mov	r3, r1
 801b808:	4630      	mov	r0, r6
 801b80a:	4639      	mov	r1, r7
 801b80c:	f7e4 fd3c 	bl	8000288 <__aeabi_dsub>
 801b810:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b812:	3330      	adds	r3, #48	; 0x30
 801b814:	f805 3b01 	strb.w	r3, [r5], #1
 801b818:	9b02      	ldr	r3, [sp, #8]
 801b81a:	429d      	cmp	r5, r3
 801b81c:	4606      	mov	r6, r0
 801b81e:	460f      	mov	r7, r1
 801b820:	f04f 0200 	mov.w	r2, #0
 801b824:	d134      	bne.n	801b890 <_dtoa_r+0x660>
 801b826:	4b19      	ldr	r3, [pc, #100]	; (801b88c <_dtoa_r+0x65c>)
 801b828:	ec51 0b18 	vmov	r0, r1, d8
 801b82c:	f7e4 fd2e 	bl	800028c <__adddf3>
 801b830:	4602      	mov	r2, r0
 801b832:	460b      	mov	r3, r1
 801b834:	4630      	mov	r0, r6
 801b836:	4639      	mov	r1, r7
 801b838:	f7e5 f96e 	bl	8000b18 <__aeabi_dcmpgt>
 801b83c:	2800      	cmp	r0, #0
 801b83e:	d175      	bne.n	801b92c <_dtoa_r+0x6fc>
 801b840:	ec53 2b18 	vmov	r2, r3, d8
 801b844:	4911      	ldr	r1, [pc, #68]	; (801b88c <_dtoa_r+0x65c>)
 801b846:	2000      	movs	r0, #0
 801b848:	f7e4 fd1e 	bl	8000288 <__aeabi_dsub>
 801b84c:	4602      	mov	r2, r0
 801b84e:	460b      	mov	r3, r1
 801b850:	4630      	mov	r0, r6
 801b852:	4639      	mov	r1, r7
 801b854:	f7e5 f942 	bl	8000adc <__aeabi_dcmplt>
 801b858:	2800      	cmp	r0, #0
 801b85a:	f43f af27 	beq.w	801b6ac <_dtoa_r+0x47c>
 801b85e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b860:	1e6b      	subs	r3, r5, #1
 801b862:	930c      	str	r3, [sp, #48]	; 0x30
 801b864:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801b868:	2b30      	cmp	r3, #48	; 0x30
 801b86a:	d0f8      	beq.n	801b85e <_dtoa_r+0x62e>
 801b86c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801b870:	e04a      	b.n	801b908 <_dtoa_r+0x6d8>
 801b872:	bf00      	nop
 801b874:	08021378 	.word	0x08021378
 801b878:	08021350 	.word	0x08021350
 801b87c:	3ff00000 	.word	0x3ff00000
 801b880:	40240000 	.word	0x40240000
 801b884:	401c0000 	.word	0x401c0000
 801b888:	40140000 	.word	0x40140000
 801b88c:	3fe00000 	.word	0x3fe00000
 801b890:	4baf      	ldr	r3, [pc, #700]	; (801bb50 <_dtoa_r+0x920>)
 801b892:	f7e4 feb1 	bl	80005f8 <__aeabi_dmul>
 801b896:	4606      	mov	r6, r0
 801b898:	460f      	mov	r7, r1
 801b89a:	e7ac      	b.n	801b7f6 <_dtoa_r+0x5c6>
 801b89c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801b8a0:	9d00      	ldr	r5, [sp, #0]
 801b8a2:	4642      	mov	r2, r8
 801b8a4:	464b      	mov	r3, r9
 801b8a6:	4630      	mov	r0, r6
 801b8a8:	4639      	mov	r1, r7
 801b8aa:	f7e4 ffcf 	bl	800084c <__aeabi_ddiv>
 801b8ae:	f7e5 f953 	bl	8000b58 <__aeabi_d2iz>
 801b8b2:	9002      	str	r0, [sp, #8]
 801b8b4:	f7e4 fe36 	bl	8000524 <__aeabi_i2d>
 801b8b8:	4642      	mov	r2, r8
 801b8ba:	464b      	mov	r3, r9
 801b8bc:	f7e4 fe9c 	bl	80005f8 <__aeabi_dmul>
 801b8c0:	4602      	mov	r2, r0
 801b8c2:	460b      	mov	r3, r1
 801b8c4:	4630      	mov	r0, r6
 801b8c6:	4639      	mov	r1, r7
 801b8c8:	f7e4 fcde 	bl	8000288 <__aeabi_dsub>
 801b8cc:	9e02      	ldr	r6, [sp, #8]
 801b8ce:	9f01      	ldr	r7, [sp, #4]
 801b8d0:	3630      	adds	r6, #48	; 0x30
 801b8d2:	f805 6b01 	strb.w	r6, [r5], #1
 801b8d6:	9e00      	ldr	r6, [sp, #0]
 801b8d8:	1bae      	subs	r6, r5, r6
 801b8da:	42b7      	cmp	r7, r6
 801b8dc:	4602      	mov	r2, r0
 801b8de:	460b      	mov	r3, r1
 801b8e0:	d137      	bne.n	801b952 <_dtoa_r+0x722>
 801b8e2:	f7e4 fcd3 	bl	800028c <__adddf3>
 801b8e6:	4642      	mov	r2, r8
 801b8e8:	464b      	mov	r3, r9
 801b8ea:	4606      	mov	r6, r0
 801b8ec:	460f      	mov	r7, r1
 801b8ee:	f7e5 f913 	bl	8000b18 <__aeabi_dcmpgt>
 801b8f2:	b9c8      	cbnz	r0, 801b928 <_dtoa_r+0x6f8>
 801b8f4:	4642      	mov	r2, r8
 801b8f6:	464b      	mov	r3, r9
 801b8f8:	4630      	mov	r0, r6
 801b8fa:	4639      	mov	r1, r7
 801b8fc:	f7e5 f8e4 	bl	8000ac8 <__aeabi_dcmpeq>
 801b900:	b110      	cbz	r0, 801b908 <_dtoa_r+0x6d8>
 801b902:	9b02      	ldr	r3, [sp, #8]
 801b904:	07d9      	lsls	r1, r3, #31
 801b906:	d40f      	bmi.n	801b928 <_dtoa_r+0x6f8>
 801b908:	4620      	mov	r0, r4
 801b90a:	4659      	mov	r1, fp
 801b90c:	f000 fe60 	bl	801c5d0 <_Bfree>
 801b910:	2300      	movs	r3, #0
 801b912:	702b      	strb	r3, [r5, #0]
 801b914:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b916:	f10a 0001 	add.w	r0, sl, #1
 801b91a:	6018      	str	r0, [r3, #0]
 801b91c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b91e:	2b00      	cmp	r3, #0
 801b920:	f43f acd8 	beq.w	801b2d4 <_dtoa_r+0xa4>
 801b924:	601d      	str	r5, [r3, #0]
 801b926:	e4d5      	b.n	801b2d4 <_dtoa_r+0xa4>
 801b928:	f8cd a01c 	str.w	sl, [sp, #28]
 801b92c:	462b      	mov	r3, r5
 801b92e:	461d      	mov	r5, r3
 801b930:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b934:	2a39      	cmp	r2, #57	; 0x39
 801b936:	d108      	bne.n	801b94a <_dtoa_r+0x71a>
 801b938:	9a00      	ldr	r2, [sp, #0]
 801b93a:	429a      	cmp	r2, r3
 801b93c:	d1f7      	bne.n	801b92e <_dtoa_r+0x6fe>
 801b93e:	9a07      	ldr	r2, [sp, #28]
 801b940:	9900      	ldr	r1, [sp, #0]
 801b942:	3201      	adds	r2, #1
 801b944:	9207      	str	r2, [sp, #28]
 801b946:	2230      	movs	r2, #48	; 0x30
 801b948:	700a      	strb	r2, [r1, #0]
 801b94a:	781a      	ldrb	r2, [r3, #0]
 801b94c:	3201      	adds	r2, #1
 801b94e:	701a      	strb	r2, [r3, #0]
 801b950:	e78c      	b.n	801b86c <_dtoa_r+0x63c>
 801b952:	4b7f      	ldr	r3, [pc, #508]	; (801bb50 <_dtoa_r+0x920>)
 801b954:	2200      	movs	r2, #0
 801b956:	f7e4 fe4f 	bl	80005f8 <__aeabi_dmul>
 801b95a:	2200      	movs	r2, #0
 801b95c:	2300      	movs	r3, #0
 801b95e:	4606      	mov	r6, r0
 801b960:	460f      	mov	r7, r1
 801b962:	f7e5 f8b1 	bl	8000ac8 <__aeabi_dcmpeq>
 801b966:	2800      	cmp	r0, #0
 801b968:	d09b      	beq.n	801b8a2 <_dtoa_r+0x672>
 801b96a:	e7cd      	b.n	801b908 <_dtoa_r+0x6d8>
 801b96c:	9a08      	ldr	r2, [sp, #32]
 801b96e:	2a00      	cmp	r2, #0
 801b970:	f000 80c4 	beq.w	801bafc <_dtoa_r+0x8cc>
 801b974:	9a05      	ldr	r2, [sp, #20]
 801b976:	2a01      	cmp	r2, #1
 801b978:	f300 80a8 	bgt.w	801bacc <_dtoa_r+0x89c>
 801b97c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b97e:	2a00      	cmp	r2, #0
 801b980:	f000 80a0 	beq.w	801bac4 <_dtoa_r+0x894>
 801b984:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801b988:	9e06      	ldr	r6, [sp, #24]
 801b98a:	4645      	mov	r5, r8
 801b98c:	9a04      	ldr	r2, [sp, #16]
 801b98e:	2101      	movs	r1, #1
 801b990:	441a      	add	r2, r3
 801b992:	4620      	mov	r0, r4
 801b994:	4498      	add	r8, r3
 801b996:	9204      	str	r2, [sp, #16]
 801b998:	f000 ff20 	bl	801c7dc <__i2b>
 801b99c:	4607      	mov	r7, r0
 801b99e:	2d00      	cmp	r5, #0
 801b9a0:	dd0b      	ble.n	801b9ba <_dtoa_r+0x78a>
 801b9a2:	9b04      	ldr	r3, [sp, #16]
 801b9a4:	2b00      	cmp	r3, #0
 801b9a6:	dd08      	ble.n	801b9ba <_dtoa_r+0x78a>
 801b9a8:	42ab      	cmp	r3, r5
 801b9aa:	9a04      	ldr	r2, [sp, #16]
 801b9ac:	bfa8      	it	ge
 801b9ae:	462b      	movge	r3, r5
 801b9b0:	eba8 0803 	sub.w	r8, r8, r3
 801b9b4:	1aed      	subs	r5, r5, r3
 801b9b6:	1ad3      	subs	r3, r2, r3
 801b9b8:	9304      	str	r3, [sp, #16]
 801b9ba:	9b06      	ldr	r3, [sp, #24]
 801b9bc:	b1fb      	cbz	r3, 801b9fe <_dtoa_r+0x7ce>
 801b9be:	9b08      	ldr	r3, [sp, #32]
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	f000 809f 	beq.w	801bb04 <_dtoa_r+0x8d4>
 801b9c6:	2e00      	cmp	r6, #0
 801b9c8:	dd11      	ble.n	801b9ee <_dtoa_r+0x7be>
 801b9ca:	4639      	mov	r1, r7
 801b9cc:	4632      	mov	r2, r6
 801b9ce:	4620      	mov	r0, r4
 801b9d0:	f000 ffc0 	bl	801c954 <__pow5mult>
 801b9d4:	465a      	mov	r2, fp
 801b9d6:	4601      	mov	r1, r0
 801b9d8:	4607      	mov	r7, r0
 801b9da:	4620      	mov	r0, r4
 801b9dc:	f000 ff14 	bl	801c808 <__multiply>
 801b9e0:	4659      	mov	r1, fp
 801b9e2:	9007      	str	r0, [sp, #28]
 801b9e4:	4620      	mov	r0, r4
 801b9e6:	f000 fdf3 	bl	801c5d0 <_Bfree>
 801b9ea:	9b07      	ldr	r3, [sp, #28]
 801b9ec:	469b      	mov	fp, r3
 801b9ee:	9b06      	ldr	r3, [sp, #24]
 801b9f0:	1b9a      	subs	r2, r3, r6
 801b9f2:	d004      	beq.n	801b9fe <_dtoa_r+0x7ce>
 801b9f4:	4659      	mov	r1, fp
 801b9f6:	4620      	mov	r0, r4
 801b9f8:	f000 ffac 	bl	801c954 <__pow5mult>
 801b9fc:	4683      	mov	fp, r0
 801b9fe:	2101      	movs	r1, #1
 801ba00:	4620      	mov	r0, r4
 801ba02:	f000 feeb 	bl	801c7dc <__i2b>
 801ba06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ba08:	2b00      	cmp	r3, #0
 801ba0a:	4606      	mov	r6, r0
 801ba0c:	dd7c      	ble.n	801bb08 <_dtoa_r+0x8d8>
 801ba0e:	461a      	mov	r2, r3
 801ba10:	4601      	mov	r1, r0
 801ba12:	4620      	mov	r0, r4
 801ba14:	f000 ff9e 	bl	801c954 <__pow5mult>
 801ba18:	9b05      	ldr	r3, [sp, #20]
 801ba1a:	2b01      	cmp	r3, #1
 801ba1c:	4606      	mov	r6, r0
 801ba1e:	dd76      	ble.n	801bb0e <_dtoa_r+0x8de>
 801ba20:	2300      	movs	r3, #0
 801ba22:	9306      	str	r3, [sp, #24]
 801ba24:	6933      	ldr	r3, [r6, #16]
 801ba26:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801ba2a:	6918      	ldr	r0, [r3, #16]
 801ba2c:	f000 fe86 	bl	801c73c <__hi0bits>
 801ba30:	f1c0 0020 	rsb	r0, r0, #32
 801ba34:	9b04      	ldr	r3, [sp, #16]
 801ba36:	4418      	add	r0, r3
 801ba38:	f010 001f 	ands.w	r0, r0, #31
 801ba3c:	f000 8086 	beq.w	801bb4c <_dtoa_r+0x91c>
 801ba40:	f1c0 0320 	rsb	r3, r0, #32
 801ba44:	2b04      	cmp	r3, #4
 801ba46:	dd7f      	ble.n	801bb48 <_dtoa_r+0x918>
 801ba48:	f1c0 001c 	rsb	r0, r0, #28
 801ba4c:	9b04      	ldr	r3, [sp, #16]
 801ba4e:	4403      	add	r3, r0
 801ba50:	4480      	add	r8, r0
 801ba52:	4405      	add	r5, r0
 801ba54:	9304      	str	r3, [sp, #16]
 801ba56:	f1b8 0f00 	cmp.w	r8, #0
 801ba5a:	dd05      	ble.n	801ba68 <_dtoa_r+0x838>
 801ba5c:	4659      	mov	r1, fp
 801ba5e:	4642      	mov	r2, r8
 801ba60:	4620      	mov	r0, r4
 801ba62:	f000 ffd1 	bl	801ca08 <__lshift>
 801ba66:	4683      	mov	fp, r0
 801ba68:	9b04      	ldr	r3, [sp, #16]
 801ba6a:	2b00      	cmp	r3, #0
 801ba6c:	dd05      	ble.n	801ba7a <_dtoa_r+0x84a>
 801ba6e:	4631      	mov	r1, r6
 801ba70:	461a      	mov	r2, r3
 801ba72:	4620      	mov	r0, r4
 801ba74:	f000 ffc8 	bl	801ca08 <__lshift>
 801ba78:	4606      	mov	r6, r0
 801ba7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ba7c:	2b00      	cmp	r3, #0
 801ba7e:	d069      	beq.n	801bb54 <_dtoa_r+0x924>
 801ba80:	4631      	mov	r1, r6
 801ba82:	4658      	mov	r0, fp
 801ba84:	f001 f82c 	bl	801cae0 <__mcmp>
 801ba88:	2800      	cmp	r0, #0
 801ba8a:	da63      	bge.n	801bb54 <_dtoa_r+0x924>
 801ba8c:	2300      	movs	r3, #0
 801ba8e:	4659      	mov	r1, fp
 801ba90:	220a      	movs	r2, #10
 801ba92:	4620      	mov	r0, r4
 801ba94:	f000 fdbe 	bl	801c614 <__multadd>
 801ba98:	9b08      	ldr	r3, [sp, #32]
 801ba9a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801ba9e:	4683      	mov	fp, r0
 801baa0:	2b00      	cmp	r3, #0
 801baa2:	f000 818f 	beq.w	801bdc4 <_dtoa_r+0xb94>
 801baa6:	4639      	mov	r1, r7
 801baa8:	2300      	movs	r3, #0
 801baaa:	220a      	movs	r2, #10
 801baac:	4620      	mov	r0, r4
 801baae:	f000 fdb1 	bl	801c614 <__multadd>
 801bab2:	f1b9 0f00 	cmp.w	r9, #0
 801bab6:	4607      	mov	r7, r0
 801bab8:	f300 808e 	bgt.w	801bbd8 <_dtoa_r+0x9a8>
 801babc:	9b05      	ldr	r3, [sp, #20]
 801babe:	2b02      	cmp	r3, #2
 801bac0:	dc50      	bgt.n	801bb64 <_dtoa_r+0x934>
 801bac2:	e089      	b.n	801bbd8 <_dtoa_r+0x9a8>
 801bac4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801bac6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801baca:	e75d      	b.n	801b988 <_dtoa_r+0x758>
 801bacc:	9b01      	ldr	r3, [sp, #4]
 801bace:	1e5e      	subs	r6, r3, #1
 801bad0:	9b06      	ldr	r3, [sp, #24]
 801bad2:	42b3      	cmp	r3, r6
 801bad4:	bfbf      	itttt	lt
 801bad6:	9b06      	ldrlt	r3, [sp, #24]
 801bad8:	9606      	strlt	r6, [sp, #24]
 801bada:	1af2      	sublt	r2, r6, r3
 801badc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801bade:	bfb6      	itet	lt
 801bae0:	189b      	addlt	r3, r3, r2
 801bae2:	1b9e      	subge	r6, r3, r6
 801bae4:	930d      	strlt	r3, [sp, #52]	; 0x34
 801bae6:	9b01      	ldr	r3, [sp, #4]
 801bae8:	bfb8      	it	lt
 801baea:	2600      	movlt	r6, #0
 801baec:	2b00      	cmp	r3, #0
 801baee:	bfb5      	itete	lt
 801baf0:	eba8 0503 	sublt.w	r5, r8, r3
 801baf4:	9b01      	ldrge	r3, [sp, #4]
 801baf6:	2300      	movlt	r3, #0
 801baf8:	4645      	movge	r5, r8
 801bafa:	e747      	b.n	801b98c <_dtoa_r+0x75c>
 801bafc:	9e06      	ldr	r6, [sp, #24]
 801bafe:	9f08      	ldr	r7, [sp, #32]
 801bb00:	4645      	mov	r5, r8
 801bb02:	e74c      	b.n	801b99e <_dtoa_r+0x76e>
 801bb04:	9a06      	ldr	r2, [sp, #24]
 801bb06:	e775      	b.n	801b9f4 <_dtoa_r+0x7c4>
 801bb08:	9b05      	ldr	r3, [sp, #20]
 801bb0a:	2b01      	cmp	r3, #1
 801bb0c:	dc18      	bgt.n	801bb40 <_dtoa_r+0x910>
 801bb0e:	9b02      	ldr	r3, [sp, #8]
 801bb10:	b9b3      	cbnz	r3, 801bb40 <_dtoa_r+0x910>
 801bb12:	9b03      	ldr	r3, [sp, #12]
 801bb14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bb18:	b9a3      	cbnz	r3, 801bb44 <_dtoa_r+0x914>
 801bb1a:	9b03      	ldr	r3, [sp, #12]
 801bb1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801bb20:	0d1b      	lsrs	r3, r3, #20
 801bb22:	051b      	lsls	r3, r3, #20
 801bb24:	b12b      	cbz	r3, 801bb32 <_dtoa_r+0x902>
 801bb26:	9b04      	ldr	r3, [sp, #16]
 801bb28:	3301      	adds	r3, #1
 801bb2a:	9304      	str	r3, [sp, #16]
 801bb2c:	f108 0801 	add.w	r8, r8, #1
 801bb30:	2301      	movs	r3, #1
 801bb32:	9306      	str	r3, [sp, #24]
 801bb34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bb36:	2b00      	cmp	r3, #0
 801bb38:	f47f af74 	bne.w	801ba24 <_dtoa_r+0x7f4>
 801bb3c:	2001      	movs	r0, #1
 801bb3e:	e779      	b.n	801ba34 <_dtoa_r+0x804>
 801bb40:	2300      	movs	r3, #0
 801bb42:	e7f6      	b.n	801bb32 <_dtoa_r+0x902>
 801bb44:	9b02      	ldr	r3, [sp, #8]
 801bb46:	e7f4      	b.n	801bb32 <_dtoa_r+0x902>
 801bb48:	d085      	beq.n	801ba56 <_dtoa_r+0x826>
 801bb4a:	4618      	mov	r0, r3
 801bb4c:	301c      	adds	r0, #28
 801bb4e:	e77d      	b.n	801ba4c <_dtoa_r+0x81c>
 801bb50:	40240000 	.word	0x40240000
 801bb54:	9b01      	ldr	r3, [sp, #4]
 801bb56:	2b00      	cmp	r3, #0
 801bb58:	dc38      	bgt.n	801bbcc <_dtoa_r+0x99c>
 801bb5a:	9b05      	ldr	r3, [sp, #20]
 801bb5c:	2b02      	cmp	r3, #2
 801bb5e:	dd35      	ble.n	801bbcc <_dtoa_r+0x99c>
 801bb60:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801bb64:	f1b9 0f00 	cmp.w	r9, #0
 801bb68:	d10d      	bne.n	801bb86 <_dtoa_r+0x956>
 801bb6a:	4631      	mov	r1, r6
 801bb6c:	464b      	mov	r3, r9
 801bb6e:	2205      	movs	r2, #5
 801bb70:	4620      	mov	r0, r4
 801bb72:	f000 fd4f 	bl	801c614 <__multadd>
 801bb76:	4601      	mov	r1, r0
 801bb78:	4606      	mov	r6, r0
 801bb7a:	4658      	mov	r0, fp
 801bb7c:	f000 ffb0 	bl	801cae0 <__mcmp>
 801bb80:	2800      	cmp	r0, #0
 801bb82:	f73f adbd 	bgt.w	801b700 <_dtoa_r+0x4d0>
 801bb86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb88:	9d00      	ldr	r5, [sp, #0]
 801bb8a:	ea6f 0a03 	mvn.w	sl, r3
 801bb8e:	f04f 0800 	mov.w	r8, #0
 801bb92:	4631      	mov	r1, r6
 801bb94:	4620      	mov	r0, r4
 801bb96:	f000 fd1b 	bl	801c5d0 <_Bfree>
 801bb9a:	2f00      	cmp	r7, #0
 801bb9c:	f43f aeb4 	beq.w	801b908 <_dtoa_r+0x6d8>
 801bba0:	f1b8 0f00 	cmp.w	r8, #0
 801bba4:	d005      	beq.n	801bbb2 <_dtoa_r+0x982>
 801bba6:	45b8      	cmp	r8, r7
 801bba8:	d003      	beq.n	801bbb2 <_dtoa_r+0x982>
 801bbaa:	4641      	mov	r1, r8
 801bbac:	4620      	mov	r0, r4
 801bbae:	f000 fd0f 	bl	801c5d0 <_Bfree>
 801bbb2:	4639      	mov	r1, r7
 801bbb4:	4620      	mov	r0, r4
 801bbb6:	f000 fd0b 	bl	801c5d0 <_Bfree>
 801bbba:	e6a5      	b.n	801b908 <_dtoa_r+0x6d8>
 801bbbc:	2600      	movs	r6, #0
 801bbbe:	4637      	mov	r7, r6
 801bbc0:	e7e1      	b.n	801bb86 <_dtoa_r+0x956>
 801bbc2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801bbc4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801bbc8:	4637      	mov	r7, r6
 801bbca:	e599      	b.n	801b700 <_dtoa_r+0x4d0>
 801bbcc:	9b08      	ldr	r3, [sp, #32]
 801bbce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801bbd2:	2b00      	cmp	r3, #0
 801bbd4:	f000 80fd 	beq.w	801bdd2 <_dtoa_r+0xba2>
 801bbd8:	2d00      	cmp	r5, #0
 801bbda:	dd05      	ble.n	801bbe8 <_dtoa_r+0x9b8>
 801bbdc:	4639      	mov	r1, r7
 801bbde:	462a      	mov	r2, r5
 801bbe0:	4620      	mov	r0, r4
 801bbe2:	f000 ff11 	bl	801ca08 <__lshift>
 801bbe6:	4607      	mov	r7, r0
 801bbe8:	9b06      	ldr	r3, [sp, #24]
 801bbea:	2b00      	cmp	r3, #0
 801bbec:	d05c      	beq.n	801bca8 <_dtoa_r+0xa78>
 801bbee:	6879      	ldr	r1, [r7, #4]
 801bbf0:	4620      	mov	r0, r4
 801bbf2:	f000 fcad 	bl	801c550 <_Balloc>
 801bbf6:	4605      	mov	r5, r0
 801bbf8:	b928      	cbnz	r0, 801bc06 <_dtoa_r+0x9d6>
 801bbfa:	4b80      	ldr	r3, [pc, #512]	; (801bdfc <_dtoa_r+0xbcc>)
 801bbfc:	4602      	mov	r2, r0
 801bbfe:	f240 21ea 	movw	r1, #746	; 0x2ea
 801bc02:	f7ff bb2e 	b.w	801b262 <_dtoa_r+0x32>
 801bc06:	693a      	ldr	r2, [r7, #16]
 801bc08:	3202      	adds	r2, #2
 801bc0a:	0092      	lsls	r2, r2, #2
 801bc0c:	f107 010c 	add.w	r1, r7, #12
 801bc10:	300c      	adds	r0, #12
 801bc12:	f7fd fb7d 	bl	8019310 <memcpy>
 801bc16:	2201      	movs	r2, #1
 801bc18:	4629      	mov	r1, r5
 801bc1a:	4620      	mov	r0, r4
 801bc1c:	f000 fef4 	bl	801ca08 <__lshift>
 801bc20:	9b00      	ldr	r3, [sp, #0]
 801bc22:	3301      	adds	r3, #1
 801bc24:	9301      	str	r3, [sp, #4]
 801bc26:	9b00      	ldr	r3, [sp, #0]
 801bc28:	444b      	add	r3, r9
 801bc2a:	9307      	str	r3, [sp, #28]
 801bc2c:	9b02      	ldr	r3, [sp, #8]
 801bc2e:	f003 0301 	and.w	r3, r3, #1
 801bc32:	46b8      	mov	r8, r7
 801bc34:	9306      	str	r3, [sp, #24]
 801bc36:	4607      	mov	r7, r0
 801bc38:	9b01      	ldr	r3, [sp, #4]
 801bc3a:	4631      	mov	r1, r6
 801bc3c:	3b01      	subs	r3, #1
 801bc3e:	4658      	mov	r0, fp
 801bc40:	9302      	str	r3, [sp, #8]
 801bc42:	f7ff fa69 	bl	801b118 <quorem>
 801bc46:	4603      	mov	r3, r0
 801bc48:	3330      	adds	r3, #48	; 0x30
 801bc4a:	9004      	str	r0, [sp, #16]
 801bc4c:	4641      	mov	r1, r8
 801bc4e:	4658      	mov	r0, fp
 801bc50:	9308      	str	r3, [sp, #32]
 801bc52:	f000 ff45 	bl	801cae0 <__mcmp>
 801bc56:	463a      	mov	r2, r7
 801bc58:	4681      	mov	r9, r0
 801bc5a:	4631      	mov	r1, r6
 801bc5c:	4620      	mov	r0, r4
 801bc5e:	f000 ff5b 	bl	801cb18 <__mdiff>
 801bc62:	68c2      	ldr	r2, [r0, #12]
 801bc64:	9b08      	ldr	r3, [sp, #32]
 801bc66:	4605      	mov	r5, r0
 801bc68:	bb02      	cbnz	r2, 801bcac <_dtoa_r+0xa7c>
 801bc6a:	4601      	mov	r1, r0
 801bc6c:	4658      	mov	r0, fp
 801bc6e:	f000 ff37 	bl	801cae0 <__mcmp>
 801bc72:	9b08      	ldr	r3, [sp, #32]
 801bc74:	4602      	mov	r2, r0
 801bc76:	4629      	mov	r1, r5
 801bc78:	4620      	mov	r0, r4
 801bc7a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801bc7e:	f000 fca7 	bl	801c5d0 <_Bfree>
 801bc82:	9b05      	ldr	r3, [sp, #20]
 801bc84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bc86:	9d01      	ldr	r5, [sp, #4]
 801bc88:	ea43 0102 	orr.w	r1, r3, r2
 801bc8c:	9b06      	ldr	r3, [sp, #24]
 801bc8e:	430b      	orrs	r3, r1
 801bc90:	9b08      	ldr	r3, [sp, #32]
 801bc92:	d10d      	bne.n	801bcb0 <_dtoa_r+0xa80>
 801bc94:	2b39      	cmp	r3, #57	; 0x39
 801bc96:	d029      	beq.n	801bcec <_dtoa_r+0xabc>
 801bc98:	f1b9 0f00 	cmp.w	r9, #0
 801bc9c:	dd01      	ble.n	801bca2 <_dtoa_r+0xa72>
 801bc9e:	9b04      	ldr	r3, [sp, #16]
 801bca0:	3331      	adds	r3, #49	; 0x31
 801bca2:	9a02      	ldr	r2, [sp, #8]
 801bca4:	7013      	strb	r3, [r2, #0]
 801bca6:	e774      	b.n	801bb92 <_dtoa_r+0x962>
 801bca8:	4638      	mov	r0, r7
 801bcaa:	e7b9      	b.n	801bc20 <_dtoa_r+0x9f0>
 801bcac:	2201      	movs	r2, #1
 801bcae:	e7e2      	b.n	801bc76 <_dtoa_r+0xa46>
 801bcb0:	f1b9 0f00 	cmp.w	r9, #0
 801bcb4:	db06      	blt.n	801bcc4 <_dtoa_r+0xa94>
 801bcb6:	9905      	ldr	r1, [sp, #20]
 801bcb8:	ea41 0909 	orr.w	r9, r1, r9
 801bcbc:	9906      	ldr	r1, [sp, #24]
 801bcbe:	ea59 0101 	orrs.w	r1, r9, r1
 801bcc2:	d120      	bne.n	801bd06 <_dtoa_r+0xad6>
 801bcc4:	2a00      	cmp	r2, #0
 801bcc6:	ddec      	ble.n	801bca2 <_dtoa_r+0xa72>
 801bcc8:	4659      	mov	r1, fp
 801bcca:	2201      	movs	r2, #1
 801bccc:	4620      	mov	r0, r4
 801bcce:	9301      	str	r3, [sp, #4]
 801bcd0:	f000 fe9a 	bl	801ca08 <__lshift>
 801bcd4:	4631      	mov	r1, r6
 801bcd6:	4683      	mov	fp, r0
 801bcd8:	f000 ff02 	bl	801cae0 <__mcmp>
 801bcdc:	2800      	cmp	r0, #0
 801bcde:	9b01      	ldr	r3, [sp, #4]
 801bce0:	dc02      	bgt.n	801bce8 <_dtoa_r+0xab8>
 801bce2:	d1de      	bne.n	801bca2 <_dtoa_r+0xa72>
 801bce4:	07da      	lsls	r2, r3, #31
 801bce6:	d5dc      	bpl.n	801bca2 <_dtoa_r+0xa72>
 801bce8:	2b39      	cmp	r3, #57	; 0x39
 801bcea:	d1d8      	bne.n	801bc9e <_dtoa_r+0xa6e>
 801bcec:	9a02      	ldr	r2, [sp, #8]
 801bcee:	2339      	movs	r3, #57	; 0x39
 801bcf0:	7013      	strb	r3, [r2, #0]
 801bcf2:	462b      	mov	r3, r5
 801bcf4:	461d      	mov	r5, r3
 801bcf6:	3b01      	subs	r3, #1
 801bcf8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801bcfc:	2a39      	cmp	r2, #57	; 0x39
 801bcfe:	d050      	beq.n	801bda2 <_dtoa_r+0xb72>
 801bd00:	3201      	adds	r2, #1
 801bd02:	701a      	strb	r2, [r3, #0]
 801bd04:	e745      	b.n	801bb92 <_dtoa_r+0x962>
 801bd06:	2a00      	cmp	r2, #0
 801bd08:	dd03      	ble.n	801bd12 <_dtoa_r+0xae2>
 801bd0a:	2b39      	cmp	r3, #57	; 0x39
 801bd0c:	d0ee      	beq.n	801bcec <_dtoa_r+0xabc>
 801bd0e:	3301      	adds	r3, #1
 801bd10:	e7c7      	b.n	801bca2 <_dtoa_r+0xa72>
 801bd12:	9a01      	ldr	r2, [sp, #4]
 801bd14:	9907      	ldr	r1, [sp, #28]
 801bd16:	f802 3c01 	strb.w	r3, [r2, #-1]
 801bd1a:	428a      	cmp	r2, r1
 801bd1c:	d02a      	beq.n	801bd74 <_dtoa_r+0xb44>
 801bd1e:	4659      	mov	r1, fp
 801bd20:	2300      	movs	r3, #0
 801bd22:	220a      	movs	r2, #10
 801bd24:	4620      	mov	r0, r4
 801bd26:	f000 fc75 	bl	801c614 <__multadd>
 801bd2a:	45b8      	cmp	r8, r7
 801bd2c:	4683      	mov	fp, r0
 801bd2e:	f04f 0300 	mov.w	r3, #0
 801bd32:	f04f 020a 	mov.w	r2, #10
 801bd36:	4641      	mov	r1, r8
 801bd38:	4620      	mov	r0, r4
 801bd3a:	d107      	bne.n	801bd4c <_dtoa_r+0xb1c>
 801bd3c:	f000 fc6a 	bl	801c614 <__multadd>
 801bd40:	4680      	mov	r8, r0
 801bd42:	4607      	mov	r7, r0
 801bd44:	9b01      	ldr	r3, [sp, #4]
 801bd46:	3301      	adds	r3, #1
 801bd48:	9301      	str	r3, [sp, #4]
 801bd4a:	e775      	b.n	801bc38 <_dtoa_r+0xa08>
 801bd4c:	f000 fc62 	bl	801c614 <__multadd>
 801bd50:	4639      	mov	r1, r7
 801bd52:	4680      	mov	r8, r0
 801bd54:	2300      	movs	r3, #0
 801bd56:	220a      	movs	r2, #10
 801bd58:	4620      	mov	r0, r4
 801bd5a:	f000 fc5b 	bl	801c614 <__multadd>
 801bd5e:	4607      	mov	r7, r0
 801bd60:	e7f0      	b.n	801bd44 <_dtoa_r+0xb14>
 801bd62:	f1b9 0f00 	cmp.w	r9, #0
 801bd66:	9a00      	ldr	r2, [sp, #0]
 801bd68:	bfcc      	ite	gt
 801bd6a:	464d      	movgt	r5, r9
 801bd6c:	2501      	movle	r5, #1
 801bd6e:	4415      	add	r5, r2
 801bd70:	f04f 0800 	mov.w	r8, #0
 801bd74:	4659      	mov	r1, fp
 801bd76:	2201      	movs	r2, #1
 801bd78:	4620      	mov	r0, r4
 801bd7a:	9301      	str	r3, [sp, #4]
 801bd7c:	f000 fe44 	bl	801ca08 <__lshift>
 801bd80:	4631      	mov	r1, r6
 801bd82:	4683      	mov	fp, r0
 801bd84:	f000 feac 	bl	801cae0 <__mcmp>
 801bd88:	2800      	cmp	r0, #0
 801bd8a:	dcb2      	bgt.n	801bcf2 <_dtoa_r+0xac2>
 801bd8c:	d102      	bne.n	801bd94 <_dtoa_r+0xb64>
 801bd8e:	9b01      	ldr	r3, [sp, #4]
 801bd90:	07db      	lsls	r3, r3, #31
 801bd92:	d4ae      	bmi.n	801bcf2 <_dtoa_r+0xac2>
 801bd94:	462b      	mov	r3, r5
 801bd96:	461d      	mov	r5, r3
 801bd98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bd9c:	2a30      	cmp	r2, #48	; 0x30
 801bd9e:	d0fa      	beq.n	801bd96 <_dtoa_r+0xb66>
 801bda0:	e6f7      	b.n	801bb92 <_dtoa_r+0x962>
 801bda2:	9a00      	ldr	r2, [sp, #0]
 801bda4:	429a      	cmp	r2, r3
 801bda6:	d1a5      	bne.n	801bcf4 <_dtoa_r+0xac4>
 801bda8:	f10a 0a01 	add.w	sl, sl, #1
 801bdac:	2331      	movs	r3, #49	; 0x31
 801bdae:	e779      	b.n	801bca4 <_dtoa_r+0xa74>
 801bdb0:	4b13      	ldr	r3, [pc, #76]	; (801be00 <_dtoa_r+0xbd0>)
 801bdb2:	f7ff baaf 	b.w	801b314 <_dtoa_r+0xe4>
 801bdb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bdb8:	2b00      	cmp	r3, #0
 801bdba:	f47f aa86 	bne.w	801b2ca <_dtoa_r+0x9a>
 801bdbe:	4b11      	ldr	r3, [pc, #68]	; (801be04 <_dtoa_r+0xbd4>)
 801bdc0:	f7ff baa8 	b.w	801b314 <_dtoa_r+0xe4>
 801bdc4:	f1b9 0f00 	cmp.w	r9, #0
 801bdc8:	dc03      	bgt.n	801bdd2 <_dtoa_r+0xba2>
 801bdca:	9b05      	ldr	r3, [sp, #20]
 801bdcc:	2b02      	cmp	r3, #2
 801bdce:	f73f aec9 	bgt.w	801bb64 <_dtoa_r+0x934>
 801bdd2:	9d00      	ldr	r5, [sp, #0]
 801bdd4:	4631      	mov	r1, r6
 801bdd6:	4658      	mov	r0, fp
 801bdd8:	f7ff f99e 	bl	801b118 <quorem>
 801bddc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801bde0:	f805 3b01 	strb.w	r3, [r5], #1
 801bde4:	9a00      	ldr	r2, [sp, #0]
 801bde6:	1aaa      	subs	r2, r5, r2
 801bde8:	4591      	cmp	r9, r2
 801bdea:	ddba      	ble.n	801bd62 <_dtoa_r+0xb32>
 801bdec:	4659      	mov	r1, fp
 801bdee:	2300      	movs	r3, #0
 801bdf0:	220a      	movs	r2, #10
 801bdf2:	4620      	mov	r0, r4
 801bdf4:	f000 fc0e 	bl	801c614 <__multadd>
 801bdf8:	4683      	mov	fp, r0
 801bdfa:	e7eb      	b.n	801bdd4 <_dtoa_r+0xba4>
 801bdfc:	0802125c 	.word	0x0802125c
 801be00:	0802105c 	.word	0x0802105c
 801be04:	080211d9 	.word	0x080211d9

0801be08 <rshift>:
 801be08:	6903      	ldr	r3, [r0, #16]
 801be0a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801be0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801be12:	ea4f 1261 	mov.w	r2, r1, asr #5
 801be16:	f100 0414 	add.w	r4, r0, #20
 801be1a:	dd45      	ble.n	801bea8 <rshift+0xa0>
 801be1c:	f011 011f 	ands.w	r1, r1, #31
 801be20:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801be24:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801be28:	d10c      	bne.n	801be44 <rshift+0x3c>
 801be2a:	f100 0710 	add.w	r7, r0, #16
 801be2e:	4629      	mov	r1, r5
 801be30:	42b1      	cmp	r1, r6
 801be32:	d334      	bcc.n	801be9e <rshift+0x96>
 801be34:	1a9b      	subs	r3, r3, r2
 801be36:	009b      	lsls	r3, r3, #2
 801be38:	1eea      	subs	r2, r5, #3
 801be3a:	4296      	cmp	r6, r2
 801be3c:	bf38      	it	cc
 801be3e:	2300      	movcc	r3, #0
 801be40:	4423      	add	r3, r4
 801be42:	e015      	b.n	801be70 <rshift+0x68>
 801be44:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801be48:	f1c1 0820 	rsb	r8, r1, #32
 801be4c:	40cf      	lsrs	r7, r1
 801be4e:	f105 0e04 	add.w	lr, r5, #4
 801be52:	46a1      	mov	r9, r4
 801be54:	4576      	cmp	r6, lr
 801be56:	46f4      	mov	ip, lr
 801be58:	d815      	bhi.n	801be86 <rshift+0x7e>
 801be5a:	1a9b      	subs	r3, r3, r2
 801be5c:	009a      	lsls	r2, r3, #2
 801be5e:	3a04      	subs	r2, #4
 801be60:	3501      	adds	r5, #1
 801be62:	42ae      	cmp	r6, r5
 801be64:	bf38      	it	cc
 801be66:	2200      	movcc	r2, #0
 801be68:	18a3      	adds	r3, r4, r2
 801be6a:	50a7      	str	r7, [r4, r2]
 801be6c:	b107      	cbz	r7, 801be70 <rshift+0x68>
 801be6e:	3304      	adds	r3, #4
 801be70:	1b1a      	subs	r2, r3, r4
 801be72:	42a3      	cmp	r3, r4
 801be74:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801be78:	bf08      	it	eq
 801be7a:	2300      	moveq	r3, #0
 801be7c:	6102      	str	r2, [r0, #16]
 801be7e:	bf08      	it	eq
 801be80:	6143      	streq	r3, [r0, #20]
 801be82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801be86:	f8dc c000 	ldr.w	ip, [ip]
 801be8a:	fa0c fc08 	lsl.w	ip, ip, r8
 801be8e:	ea4c 0707 	orr.w	r7, ip, r7
 801be92:	f849 7b04 	str.w	r7, [r9], #4
 801be96:	f85e 7b04 	ldr.w	r7, [lr], #4
 801be9a:	40cf      	lsrs	r7, r1
 801be9c:	e7da      	b.n	801be54 <rshift+0x4c>
 801be9e:	f851 cb04 	ldr.w	ip, [r1], #4
 801bea2:	f847 cf04 	str.w	ip, [r7, #4]!
 801bea6:	e7c3      	b.n	801be30 <rshift+0x28>
 801bea8:	4623      	mov	r3, r4
 801beaa:	e7e1      	b.n	801be70 <rshift+0x68>

0801beac <__hexdig_fun>:
 801beac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801beb0:	2b09      	cmp	r3, #9
 801beb2:	d802      	bhi.n	801beba <__hexdig_fun+0xe>
 801beb4:	3820      	subs	r0, #32
 801beb6:	b2c0      	uxtb	r0, r0
 801beb8:	4770      	bx	lr
 801beba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801bebe:	2b05      	cmp	r3, #5
 801bec0:	d801      	bhi.n	801bec6 <__hexdig_fun+0x1a>
 801bec2:	3847      	subs	r0, #71	; 0x47
 801bec4:	e7f7      	b.n	801beb6 <__hexdig_fun+0xa>
 801bec6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801beca:	2b05      	cmp	r3, #5
 801becc:	d801      	bhi.n	801bed2 <__hexdig_fun+0x26>
 801bece:	3827      	subs	r0, #39	; 0x27
 801bed0:	e7f1      	b.n	801beb6 <__hexdig_fun+0xa>
 801bed2:	2000      	movs	r0, #0
 801bed4:	4770      	bx	lr
	...

0801bed8 <__gethex>:
 801bed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bedc:	ed2d 8b02 	vpush	{d8}
 801bee0:	b089      	sub	sp, #36	; 0x24
 801bee2:	ee08 0a10 	vmov	s16, r0
 801bee6:	9304      	str	r3, [sp, #16]
 801bee8:	4bbc      	ldr	r3, [pc, #752]	; (801c1dc <__gethex+0x304>)
 801beea:	681b      	ldr	r3, [r3, #0]
 801beec:	9301      	str	r3, [sp, #4]
 801beee:	4618      	mov	r0, r3
 801bef0:	468b      	mov	fp, r1
 801bef2:	4690      	mov	r8, r2
 801bef4:	f7e4 f96c 	bl	80001d0 <strlen>
 801bef8:	9b01      	ldr	r3, [sp, #4]
 801befa:	f8db 2000 	ldr.w	r2, [fp]
 801befe:	4403      	add	r3, r0
 801bf00:	4682      	mov	sl, r0
 801bf02:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801bf06:	9305      	str	r3, [sp, #20]
 801bf08:	1c93      	adds	r3, r2, #2
 801bf0a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801bf0e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801bf12:	32fe      	adds	r2, #254	; 0xfe
 801bf14:	18d1      	adds	r1, r2, r3
 801bf16:	461f      	mov	r7, r3
 801bf18:	f813 0b01 	ldrb.w	r0, [r3], #1
 801bf1c:	9100      	str	r1, [sp, #0]
 801bf1e:	2830      	cmp	r0, #48	; 0x30
 801bf20:	d0f8      	beq.n	801bf14 <__gethex+0x3c>
 801bf22:	f7ff ffc3 	bl	801beac <__hexdig_fun>
 801bf26:	4604      	mov	r4, r0
 801bf28:	2800      	cmp	r0, #0
 801bf2a:	d13a      	bne.n	801bfa2 <__gethex+0xca>
 801bf2c:	9901      	ldr	r1, [sp, #4]
 801bf2e:	4652      	mov	r2, sl
 801bf30:	4638      	mov	r0, r7
 801bf32:	f001 f982 	bl	801d23a <strncmp>
 801bf36:	4605      	mov	r5, r0
 801bf38:	2800      	cmp	r0, #0
 801bf3a:	d168      	bne.n	801c00e <__gethex+0x136>
 801bf3c:	f817 000a 	ldrb.w	r0, [r7, sl]
 801bf40:	eb07 060a 	add.w	r6, r7, sl
 801bf44:	f7ff ffb2 	bl	801beac <__hexdig_fun>
 801bf48:	2800      	cmp	r0, #0
 801bf4a:	d062      	beq.n	801c012 <__gethex+0x13a>
 801bf4c:	4633      	mov	r3, r6
 801bf4e:	7818      	ldrb	r0, [r3, #0]
 801bf50:	2830      	cmp	r0, #48	; 0x30
 801bf52:	461f      	mov	r7, r3
 801bf54:	f103 0301 	add.w	r3, r3, #1
 801bf58:	d0f9      	beq.n	801bf4e <__gethex+0x76>
 801bf5a:	f7ff ffa7 	bl	801beac <__hexdig_fun>
 801bf5e:	2301      	movs	r3, #1
 801bf60:	fab0 f480 	clz	r4, r0
 801bf64:	0964      	lsrs	r4, r4, #5
 801bf66:	4635      	mov	r5, r6
 801bf68:	9300      	str	r3, [sp, #0]
 801bf6a:	463a      	mov	r2, r7
 801bf6c:	4616      	mov	r6, r2
 801bf6e:	3201      	adds	r2, #1
 801bf70:	7830      	ldrb	r0, [r6, #0]
 801bf72:	f7ff ff9b 	bl	801beac <__hexdig_fun>
 801bf76:	2800      	cmp	r0, #0
 801bf78:	d1f8      	bne.n	801bf6c <__gethex+0x94>
 801bf7a:	9901      	ldr	r1, [sp, #4]
 801bf7c:	4652      	mov	r2, sl
 801bf7e:	4630      	mov	r0, r6
 801bf80:	f001 f95b 	bl	801d23a <strncmp>
 801bf84:	b980      	cbnz	r0, 801bfa8 <__gethex+0xd0>
 801bf86:	b94d      	cbnz	r5, 801bf9c <__gethex+0xc4>
 801bf88:	eb06 050a 	add.w	r5, r6, sl
 801bf8c:	462a      	mov	r2, r5
 801bf8e:	4616      	mov	r6, r2
 801bf90:	3201      	adds	r2, #1
 801bf92:	7830      	ldrb	r0, [r6, #0]
 801bf94:	f7ff ff8a 	bl	801beac <__hexdig_fun>
 801bf98:	2800      	cmp	r0, #0
 801bf9a:	d1f8      	bne.n	801bf8e <__gethex+0xb6>
 801bf9c:	1bad      	subs	r5, r5, r6
 801bf9e:	00ad      	lsls	r5, r5, #2
 801bfa0:	e004      	b.n	801bfac <__gethex+0xd4>
 801bfa2:	2400      	movs	r4, #0
 801bfa4:	4625      	mov	r5, r4
 801bfa6:	e7e0      	b.n	801bf6a <__gethex+0x92>
 801bfa8:	2d00      	cmp	r5, #0
 801bfaa:	d1f7      	bne.n	801bf9c <__gethex+0xc4>
 801bfac:	7833      	ldrb	r3, [r6, #0]
 801bfae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801bfb2:	2b50      	cmp	r3, #80	; 0x50
 801bfb4:	d13b      	bne.n	801c02e <__gethex+0x156>
 801bfb6:	7873      	ldrb	r3, [r6, #1]
 801bfb8:	2b2b      	cmp	r3, #43	; 0x2b
 801bfba:	d02c      	beq.n	801c016 <__gethex+0x13e>
 801bfbc:	2b2d      	cmp	r3, #45	; 0x2d
 801bfbe:	d02e      	beq.n	801c01e <__gethex+0x146>
 801bfc0:	1c71      	adds	r1, r6, #1
 801bfc2:	f04f 0900 	mov.w	r9, #0
 801bfc6:	7808      	ldrb	r0, [r1, #0]
 801bfc8:	f7ff ff70 	bl	801beac <__hexdig_fun>
 801bfcc:	1e43      	subs	r3, r0, #1
 801bfce:	b2db      	uxtb	r3, r3
 801bfd0:	2b18      	cmp	r3, #24
 801bfd2:	d82c      	bhi.n	801c02e <__gethex+0x156>
 801bfd4:	f1a0 0210 	sub.w	r2, r0, #16
 801bfd8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801bfdc:	f7ff ff66 	bl	801beac <__hexdig_fun>
 801bfe0:	1e43      	subs	r3, r0, #1
 801bfe2:	b2db      	uxtb	r3, r3
 801bfe4:	2b18      	cmp	r3, #24
 801bfe6:	d91d      	bls.n	801c024 <__gethex+0x14c>
 801bfe8:	f1b9 0f00 	cmp.w	r9, #0
 801bfec:	d000      	beq.n	801bff0 <__gethex+0x118>
 801bfee:	4252      	negs	r2, r2
 801bff0:	4415      	add	r5, r2
 801bff2:	f8cb 1000 	str.w	r1, [fp]
 801bff6:	b1e4      	cbz	r4, 801c032 <__gethex+0x15a>
 801bff8:	9b00      	ldr	r3, [sp, #0]
 801bffa:	2b00      	cmp	r3, #0
 801bffc:	bf14      	ite	ne
 801bffe:	2700      	movne	r7, #0
 801c000:	2706      	moveq	r7, #6
 801c002:	4638      	mov	r0, r7
 801c004:	b009      	add	sp, #36	; 0x24
 801c006:	ecbd 8b02 	vpop	{d8}
 801c00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c00e:	463e      	mov	r6, r7
 801c010:	4625      	mov	r5, r4
 801c012:	2401      	movs	r4, #1
 801c014:	e7ca      	b.n	801bfac <__gethex+0xd4>
 801c016:	f04f 0900 	mov.w	r9, #0
 801c01a:	1cb1      	adds	r1, r6, #2
 801c01c:	e7d3      	b.n	801bfc6 <__gethex+0xee>
 801c01e:	f04f 0901 	mov.w	r9, #1
 801c022:	e7fa      	b.n	801c01a <__gethex+0x142>
 801c024:	230a      	movs	r3, #10
 801c026:	fb03 0202 	mla	r2, r3, r2, r0
 801c02a:	3a10      	subs	r2, #16
 801c02c:	e7d4      	b.n	801bfd8 <__gethex+0x100>
 801c02e:	4631      	mov	r1, r6
 801c030:	e7df      	b.n	801bff2 <__gethex+0x11a>
 801c032:	1bf3      	subs	r3, r6, r7
 801c034:	3b01      	subs	r3, #1
 801c036:	4621      	mov	r1, r4
 801c038:	2b07      	cmp	r3, #7
 801c03a:	dc0b      	bgt.n	801c054 <__gethex+0x17c>
 801c03c:	ee18 0a10 	vmov	r0, s16
 801c040:	f000 fa86 	bl	801c550 <_Balloc>
 801c044:	4604      	mov	r4, r0
 801c046:	b940      	cbnz	r0, 801c05a <__gethex+0x182>
 801c048:	4b65      	ldr	r3, [pc, #404]	; (801c1e0 <__gethex+0x308>)
 801c04a:	4602      	mov	r2, r0
 801c04c:	21de      	movs	r1, #222	; 0xde
 801c04e:	4865      	ldr	r0, [pc, #404]	; (801c1e4 <__gethex+0x30c>)
 801c050:	f001 f912 	bl	801d278 <__assert_func>
 801c054:	3101      	adds	r1, #1
 801c056:	105b      	asrs	r3, r3, #1
 801c058:	e7ee      	b.n	801c038 <__gethex+0x160>
 801c05a:	f100 0914 	add.w	r9, r0, #20
 801c05e:	f04f 0b00 	mov.w	fp, #0
 801c062:	f1ca 0301 	rsb	r3, sl, #1
 801c066:	f8cd 9008 	str.w	r9, [sp, #8]
 801c06a:	f8cd b000 	str.w	fp, [sp]
 801c06e:	9306      	str	r3, [sp, #24]
 801c070:	42b7      	cmp	r7, r6
 801c072:	d340      	bcc.n	801c0f6 <__gethex+0x21e>
 801c074:	9802      	ldr	r0, [sp, #8]
 801c076:	9b00      	ldr	r3, [sp, #0]
 801c078:	f840 3b04 	str.w	r3, [r0], #4
 801c07c:	eba0 0009 	sub.w	r0, r0, r9
 801c080:	1080      	asrs	r0, r0, #2
 801c082:	0146      	lsls	r6, r0, #5
 801c084:	6120      	str	r0, [r4, #16]
 801c086:	4618      	mov	r0, r3
 801c088:	f000 fb58 	bl	801c73c <__hi0bits>
 801c08c:	1a30      	subs	r0, r6, r0
 801c08e:	f8d8 6000 	ldr.w	r6, [r8]
 801c092:	42b0      	cmp	r0, r6
 801c094:	dd63      	ble.n	801c15e <__gethex+0x286>
 801c096:	1b87      	subs	r7, r0, r6
 801c098:	4639      	mov	r1, r7
 801c09a:	4620      	mov	r0, r4
 801c09c:	f000 fef2 	bl	801ce84 <__any_on>
 801c0a0:	4682      	mov	sl, r0
 801c0a2:	b1a8      	cbz	r0, 801c0d0 <__gethex+0x1f8>
 801c0a4:	1e7b      	subs	r3, r7, #1
 801c0a6:	1159      	asrs	r1, r3, #5
 801c0a8:	f003 021f 	and.w	r2, r3, #31
 801c0ac:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801c0b0:	f04f 0a01 	mov.w	sl, #1
 801c0b4:	fa0a f202 	lsl.w	r2, sl, r2
 801c0b8:	420a      	tst	r2, r1
 801c0ba:	d009      	beq.n	801c0d0 <__gethex+0x1f8>
 801c0bc:	4553      	cmp	r3, sl
 801c0be:	dd05      	ble.n	801c0cc <__gethex+0x1f4>
 801c0c0:	1eb9      	subs	r1, r7, #2
 801c0c2:	4620      	mov	r0, r4
 801c0c4:	f000 fede 	bl	801ce84 <__any_on>
 801c0c8:	2800      	cmp	r0, #0
 801c0ca:	d145      	bne.n	801c158 <__gethex+0x280>
 801c0cc:	f04f 0a02 	mov.w	sl, #2
 801c0d0:	4639      	mov	r1, r7
 801c0d2:	4620      	mov	r0, r4
 801c0d4:	f7ff fe98 	bl	801be08 <rshift>
 801c0d8:	443d      	add	r5, r7
 801c0da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c0de:	42ab      	cmp	r3, r5
 801c0e0:	da4c      	bge.n	801c17c <__gethex+0x2a4>
 801c0e2:	ee18 0a10 	vmov	r0, s16
 801c0e6:	4621      	mov	r1, r4
 801c0e8:	f000 fa72 	bl	801c5d0 <_Bfree>
 801c0ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c0ee:	2300      	movs	r3, #0
 801c0f0:	6013      	str	r3, [r2, #0]
 801c0f2:	27a3      	movs	r7, #163	; 0xa3
 801c0f4:	e785      	b.n	801c002 <__gethex+0x12a>
 801c0f6:	1e73      	subs	r3, r6, #1
 801c0f8:	9a05      	ldr	r2, [sp, #20]
 801c0fa:	9303      	str	r3, [sp, #12]
 801c0fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801c100:	4293      	cmp	r3, r2
 801c102:	d019      	beq.n	801c138 <__gethex+0x260>
 801c104:	f1bb 0f20 	cmp.w	fp, #32
 801c108:	d107      	bne.n	801c11a <__gethex+0x242>
 801c10a:	9b02      	ldr	r3, [sp, #8]
 801c10c:	9a00      	ldr	r2, [sp, #0]
 801c10e:	f843 2b04 	str.w	r2, [r3], #4
 801c112:	9302      	str	r3, [sp, #8]
 801c114:	2300      	movs	r3, #0
 801c116:	9300      	str	r3, [sp, #0]
 801c118:	469b      	mov	fp, r3
 801c11a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801c11e:	f7ff fec5 	bl	801beac <__hexdig_fun>
 801c122:	9b00      	ldr	r3, [sp, #0]
 801c124:	f000 000f 	and.w	r0, r0, #15
 801c128:	fa00 f00b 	lsl.w	r0, r0, fp
 801c12c:	4303      	orrs	r3, r0
 801c12e:	9300      	str	r3, [sp, #0]
 801c130:	f10b 0b04 	add.w	fp, fp, #4
 801c134:	9b03      	ldr	r3, [sp, #12]
 801c136:	e00d      	b.n	801c154 <__gethex+0x27c>
 801c138:	9b03      	ldr	r3, [sp, #12]
 801c13a:	9a06      	ldr	r2, [sp, #24]
 801c13c:	4413      	add	r3, r2
 801c13e:	42bb      	cmp	r3, r7
 801c140:	d3e0      	bcc.n	801c104 <__gethex+0x22c>
 801c142:	4618      	mov	r0, r3
 801c144:	9901      	ldr	r1, [sp, #4]
 801c146:	9307      	str	r3, [sp, #28]
 801c148:	4652      	mov	r2, sl
 801c14a:	f001 f876 	bl	801d23a <strncmp>
 801c14e:	9b07      	ldr	r3, [sp, #28]
 801c150:	2800      	cmp	r0, #0
 801c152:	d1d7      	bne.n	801c104 <__gethex+0x22c>
 801c154:	461e      	mov	r6, r3
 801c156:	e78b      	b.n	801c070 <__gethex+0x198>
 801c158:	f04f 0a03 	mov.w	sl, #3
 801c15c:	e7b8      	b.n	801c0d0 <__gethex+0x1f8>
 801c15e:	da0a      	bge.n	801c176 <__gethex+0x29e>
 801c160:	1a37      	subs	r7, r6, r0
 801c162:	4621      	mov	r1, r4
 801c164:	ee18 0a10 	vmov	r0, s16
 801c168:	463a      	mov	r2, r7
 801c16a:	f000 fc4d 	bl	801ca08 <__lshift>
 801c16e:	1bed      	subs	r5, r5, r7
 801c170:	4604      	mov	r4, r0
 801c172:	f100 0914 	add.w	r9, r0, #20
 801c176:	f04f 0a00 	mov.w	sl, #0
 801c17a:	e7ae      	b.n	801c0da <__gethex+0x202>
 801c17c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801c180:	42a8      	cmp	r0, r5
 801c182:	dd72      	ble.n	801c26a <__gethex+0x392>
 801c184:	1b45      	subs	r5, r0, r5
 801c186:	42ae      	cmp	r6, r5
 801c188:	dc36      	bgt.n	801c1f8 <__gethex+0x320>
 801c18a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c18e:	2b02      	cmp	r3, #2
 801c190:	d02a      	beq.n	801c1e8 <__gethex+0x310>
 801c192:	2b03      	cmp	r3, #3
 801c194:	d02c      	beq.n	801c1f0 <__gethex+0x318>
 801c196:	2b01      	cmp	r3, #1
 801c198:	d115      	bne.n	801c1c6 <__gethex+0x2ee>
 801c19a:	42ae      	cmp	r6, r5
 801c19c:	d113      	bne.n	801c1c6 <__gethex+0x2ee>
 801c19e:	2e01      	cmp	r6, #1
 801c1a0:	d10b      	bne.n	801c1ba <__gethex+0x2e2>
 801c1a2:	9a04      	ldr	r2, [sp, #16]
 801c1a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c1a8:	6013      	str	r3, [r2, #0]
 801c1aa:	2301      	movs	r3, #1
 801c1ac:	6123      	str	r3, [r4, #16]
 801c1ae:	f8c9 3000 	str.w	r3, [r9]
 801c1b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c1b4:	2762      	movs	r7, #98	; 0x62
 801c1b6:	601c      	str	r4, [r3, #0]
 801c1b8:	e723      	b.n	801c002 <__gethex+0x12a>
 801c1ba:	1e71      	subs	r1, r6, #1
 801c1bc:	4620      	mov	r0, r4
 801c1be:	f000 fe61 	bl	801ce84 <__any_on>
 801c1c2:	2800      	cmp	r0, #0
 801c1c4:	d1ed      	bne.n	801c1a2 <__gethex+0x2ca>
 801c1c6:	ee18 0a10 	vmov	r0, s16
 801c1ca:	4621      	mov	r1, r4
 801c1cc:	f000 fa00 	bl	801c5d0 <_Bfree>
 801c1d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c1d2:	2300      	movs	r3, #0
 801c1d4:	6013      	str	r3, [r2, #0]
 801c1d6:	2750      	movs	r7, #80	; 0x50
 801c1d8:	e713      	b.n	801c002 <__gethex+0x12a>
 801c1da:	bf00      	nop
 801c1dc:	080212d8 	.word	0x080212d8
 801c1e0:	0802125c 	.word	0x0802125c
 801c1e4:	0802126d 	.word	0x0802126d
 801c1e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c1ea:	2b00      	cmp	r3, #0
 801c1ec:	d1eb      	bne.n	801c1c6 <__gethex+0x2ee>
 801c1ee:	e7d8      	b.n	801c1a2 <__gethex+0x2ca>
 801c1f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c1f2:	2b00      	cmp	r3, #0
 801c1f4:	d1d5      	bne.n	801c1a2 <__gethex+0x2ca>
 801c1f6:	e7e6      	b.n	801c1c6 <__gethex+0x2ee>
 801c1f8:	1e6f      	subs	r7, r5, #1
 801c1fa:	f1ba 0f00 	cmp.w	sl, #0
 801c1fe:	d131      	bne.n	801c264 <__gethex+0x38c>
 801c200:	b127      	cbz	r7, 801c20c <__gethex+0x334>
 801c202:	4639      	mov	r1, r7
 801c204:	4620      	mov	r0, r4
 801c206:	f000 fe3d 	bl	801ce84 <__any_on>
 801c20a:	4682      	mov	sl, r0
 801c20c:	117b      	asrs	r3, r7, #5
 801c20e:	2101      	movs	r1, #1
 801c210:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801c214:	f007 071f 	and.w	r7, r7, #31
 801c218:	fa01 f707 	lsl.w	r7, r1, r7
 801c21c:	421f      	tst	r7, r3
 801c21e:	4629      	mov	r1, r5
 801c220:	4620      	mov	r0, r4
 801c222:	bf18      	it	ne
 801c224:	f04a 0a02 	orrne.w	sl, sl, #2
 801c228:	1b76      	subs	r6, r6, r5
 801c22a:	f7ff fded 	bl	801be08 <rshift>
 801c22e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c232:	2702      	movs	r7, #2
 801c234:	f1ba 0f00 	cmp.w	sl, #0
 801c238:	d048      	beq.n	801c2cc <__gethex+0x3f4>
 801c23a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c23e:	2b02      	cmp	r3, #2
 801c240:	d015      	beq.n	801c26e <__gethex+0x396>
 801c242:	2b03      	cmp	r3, #3
 801c244:	d017      	beq.n	801c276 <__gethex+0x39e>
 801c246:	2b01      	cmp	r3, #1
 801c248:	d109      	bne.n	801c25e <__gethex+0x386>
 801c24a:	f01a 0f02 	tst.w	sl, #2
 801c24e:	d006      	beq.n	801c25e <__gethex+0x386>
 801c250:	f8d9 0000 	ldr.w	r0, [r9]
 801c254:	ea4a 0a00 	orr.w	sl, sl, r0
 801c258:	f01a 0f01 	tst.w	sl, #1
 801c25c:	d10e      	bne.n	801c27c <__gethex+0x3a4>
 801c25e:	f047 0710 	orr.w	r7, r7, #16
 801c262:	e033      	b.n	801c2cc <__gethex+0x3f4>
 801c264:	f04f 0a01 	mov.w	sl, #1
 801c268:	e7d0      	b.n	801c20c <__gethex+0x334>
 801c26a:	2701      	movs	r7, #1
 801c26c:	e7e2      	b.n	801c234 <__gethex+0x35c>
 801c26e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c270:	f1c3 0301 	rsb	r3, r3, #1
 801c274:	9315      	str	r3, [sp, #84]	; 0x54
 801c276:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c278:	2b00      	cmp	r3, #0
 801c27a:	d0f0      	beq.n	801c25e <__gethex+0x386>
 801c27c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801c280:	f104 0314 	add.w	r3, r4, #20
 801c284:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801c288:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801c28c:	f04f 0c00 	mov.w	ip, #0
 801c290:	4618      	mov	r0, r3
 801c292:	f853 2b04 	ldr.w	r2, [r3], #4
 801c296:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801c29a:	d01c      	beq.n	801c2d6 <__gethex+0x3fe>
 801c29c:	3201      	adds	r2, #1
 801c29e:	6002      	str	r2, [r0, #0]
 801c2a0:	2f02      	cmp	r7, #2
 801c2a2:	f104 0314 	add.w	r3, r4, #20
 801c2a6:	d13f      	bne.n	801c328 <__gethex+0x450>
 801c2a8:	f8d8 2000 	ldr.w	r2, [r8]
 801c2ac:	3a01      	subs	r2, #1
 801c2ae:	42b2      	cmp	r2, r6
 801c2b0:	d10a      	bne.n	801c2c8 <__gethex+0x3f0>
 801c2b2:	1171      	asrs	r1, r6, #5
 801c2b4:	2201      	movs	r2, #1
 801c2b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c2ba:	f006 061f 	and.w	r6, r6, #31
 801c2be:	fa02 f606 	lsl.w	r6, r2, r6
 801c2c2:	421e      	tst	r6, r3
 801c2c4:	bf18      	it	ne
 801c2c6:	4617      	movne	r7, r2
 801c2c8:	f047 0720 	orr.w	r7, r7, #32
 801c2cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c2ce:	601c      	str	r4, [r3, #0]
 801c2d0:	9b04      	ldr	r3, [sp, #16]
 801c2d2:	601d      	str	r5, [r3, #0]
 801c2d4:	e695      	b.n	801c002 <__gethex+0x12a>
 801c2d6:	4299      	cmp	r1, r3
 801c2d8:	f843 cc04 	str.w	ip, [r3, #-4]
 801c2dc:	d8d8      	bhi.n	801c290 <__gethex+0x3b8>
 801c2de:	68a3      	ldr	r3, [r4, #8]
 801c2e0:	459b      	cmp	fp, r3
 801c2e2:	db19      	blt.n	801c318 <__gethex+0x440>
 801c2e4:	6861      	ldr	r1, [r4, #4]
 801c2e6:	ee18 0a10 	vmov	r0, s16
 801c2ea:	3101      	adds	r1, #1
 801c2ec:	f000 f930 	bl	801c550 <_Balloc>
 801c2f0:	4681      	mov	r9, r0
 801c2f2:	b918      	cbnz	r0, 801c2fc <__gethex+0x424>
 801c2f4:	4b1a      	ldr	r3, [pc, #104]	; (801c360 <__gethex+0x488>)
 801c2f6:	4602      	mov	r2, r0
 801c2f8:	2184      	movs	r1, #132	; 0x84
 801c2fa:	e6a8      	b.n	801c04e <__gethex+0x176>
 801c2fc:	6922      	ldr	r2, [r4, #16]
 801c2fe:	3202      	adds	r2, #2
 801c300:	f104 010c 	add.w	r1, r4, #12
 801c304:	0092      	lsls	r2, r2, #2
 801c306:	300c      	adds	r0, #12
 801c308:	f7fd f802 	bl	8019310 <memcpy>
 801c30c:	4621      	mov	r1, r4
 801c30e:	ee18 0a10 	vmov	r0, s16
 801c312:	f000 f95d 	bl	801c5d0 <_Bfree>
 801c316:	464c      	mov	r4, r9
 801c318:	6923      	ldr	r3, [r4, #16]
 801c31a:	1c5a      	adds	r2, r3, #1
 801c31c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c320:	6122      	str	r2, [r4, #16]
 801c322:	2201      	movs	r2, #1
 801c324:	615a      	str	r2, [r3, #20]
 801c326:	e7bb      	b.n	801c2a0 <__gethex+0x3c8>
 801c328:	6922      	ldr	r2, [r4, #16]
 801c32a:	455a      	cmp	r2, fp
 801c32c:	dd0b      	ble.n	801c346 <__gethex+0x46e>
 801c32e:	2101      	movs	r1, #1
 801c330:	4620      	mov	r0, r4
 801c332:	f7ff fd69 	bl	801be08 <rshift>
 801c336:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c33a:	3501      	adds	r5, #1
 801c33c:	42ab      	cmp	r3, r5
 801c33e:	f6ff aed0 	blt.w	801c0e2 <__gethex+0x20a>
 801c342:	2701      	movs	r7, #1
 801c344:	e7c0      	b.n	801c2c8 <__gethex+0x3f0>
 801c346:	f016 061f 	ands.w	r6, r6, #31
 801c34a:	d0fa      	beq.n	801c342 <__gethex+0x46a>
 801c34c:	449a      	add	sl, r3
 801c34e:	f1c6 0620 	rsb	r6, r6, #32
 801c352:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801c356:	f000 f9f1 	bl	801c73c <__hi0bits>
 801c35a:	42b0      	cmp	r0, r6
 801c35c:	dbe7      	blt.n	801c32e <__gethex+0x456>
 801c35e:	e7f0      	b.n	801c342 <__gethex+0x46a>
 801c360:	0802125c 	.word	0x0802125c

0801c364 <L_shift>:
 801c364:	f1c2 0208 	rsb	r2, r2, #8
 801c368:	0092      	lsls	r2, r2, #2
 801c36a:	b570      	push	{r4, r5, r6, lr}
 801c36c:	f1c2 0620 	rsb	r6, r2, #32
 801c370:	6843      	ldr	r3, [r0, #4]
 801c372:	6804      	ldr	r4, [r0, #0]
 801c374:	fa03 f506 	lsl.w	r5, r3, r6
 801c378:	432c      	orrs	r4, r5
 801c37a:	40d3      	lsrs	r3, r2
 801c37c:	6004      	str	r4, [r0, #0]
 801c37e:	f840 3f04 	str.w	r3, [r0, #4]!
 801c382:	4288      	cmp	r0, r1
 801c384:	d3f4      	bcc.n	801c370 <L_shift+0xc>
 801c386:	bd70      	pop	{r4, r5, r6, pc}

0801c388 <__match>:
 801c388:	b530      	push	{r4, r5, lr}
 801c38a:	6803      	ldr	r3, [r0, #0]
 801c38c:	3301      	adds	r3, #1
 801c38e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c392:	b914      	cbnz	r4, 801c39a <__match+0x12>
 801c394:	6003      	str	r3, [r0, #0]
 801c396:	2001      	movs	r0, #1
 801c398:	bd30      	pop	{r4, r5, pc}
 801c39a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c39e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801c3a2:	2d19      	cmp	r5, #25
 801c3a4:	bf98      	it	ls
 801c3a6:	3220      	addls	r2, #32
 801c3a8:	42a2      	cmp	r2, r4
 801c3aa:	d0f0      	beq.n	801c38e <__match+0x6>
 801c3ac:	2000      	movs	r0, #0
 801c3ae:	e7f3      	b.n	801c398 <__match+0x10>

0801c3b0 <__hexnan>:
 801c3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3b4:	680b      	ldr	r3, [r1, #0]
 801c3b6:	6801      	ldr	r1, [r0, #0]
 801c3b8:	115e      	asrs	r6, r3, #5
 801c3ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c3be:	f013 031f 	ands.w	r3, r3, #31
 801c3c2:	b087      	sub	sp, #28
 801c3c4:	bf18      	it	ne
 801c3c6:	3604      	addne	r6, #4
 801c3c8:	2500      	movs	r5, #0
 801c3ca:	1f37      	subs	r7, r6, #4
 801c3cc:	4682      	mov	sl, r0
 801c3ce:	4690      	mov	r8, r2
 801c3d0:	9301      	str	r3, [sp, #4]
 801c3d2:	f846 5c04 	str.w	r5, [r6, #-4]
 801c3d6:	46b9      	mov	r9, r7
 801c3d8:	463c      	mov	r4, r7
 801c3da:	9502      	str	r5, [sp, #8]
 801c3dc:	46ab      	mov	fp, r5
 801c3de:	784a      	ldrb	r2, [r1, #1]
 801c3e0:	1c4b      	adds	r3, r1, #1
 801c3e2:	9303      	str	r3, [sp, #12]
 801c3e4:	b342      	cbz	r2, 801c438 <__hexnan+0x88>
 801c3e6:	4610      	mov	r0, r2
 801c3e8:	9105      	str	r1, [sp, #20]
 801c3ea:	9204      	str	r2, [sp, #16]
 801c3ec:	f7ff fd5e 	bl	801beac <__hexdig_fun>
 801c3f0:	2800      	cmp	r0, #0
 801c3f2:	d14f      	bne.n	801c494 <__hexnan+0xe4>
 801c3f4:	9a04      	ldr	r2, [sp, #16]
 801c3f6:	9905      	ldr	r1, [sp, #20]
 801c3f8:	2a20      	cmp	r2, #32
 801c3fa:	d818      	bhi.n	801c42e <__hexnan+0x7e>
 801c3fc:	9b02      	ldr	r3, [sp, #8]
 801c3fe:	459b      	cmp	fp, r3
 801c400:	dd13      	ble.n	801c42a <__hexnan+0x7a>
 801c402:	454c      	cmp	r4, r9
 801c404:	d206      	bcs.n	801c414 <__hexnan+0x64>
 801c406:	2d07      	cmp	r5, #7
 801c408:	dc04      	bgt.n	801c414 <__hexnan+0x64>
 801c40a:	462a      	mov	r2, r5
 801c40c:	4649      	mov	r1, r9
 801c40e:	4620      	mov	r0, r4
 801c410:	f7ff ffa8 	bl	801c364 <L_shift>
 801c414:	4544      	cmp	r4, r8
 801c416:	d950      	bls.n	801c4ba <__hexnan+0x10a>
 801c418:	2300      	movs	r3, #0
 801c41a:	f1a4 0904 	sub.w	r9, r4, #4
 801c41e:	f844 3c04 	str.w	r3, [r4, #-4]
 801c422:	f8cd b008 	str.w	fp, [sp, #8]
 801c426:	464c      	mov	r4, r9
 801c428:	461d      	mov	r5, r3
 801c42a:	9903      	ldr	r1, [sp, #12]
 801c42c:	e7d7      	b.n	801c3de <__hexnan+0x2e>
 801c42e:	2a29      	cmp	r2, #41	; 0x29
 801c430:	d156      	bne.n	801c4e0 <__hexnan+0x130>
 801c432:	3102      	adds	r1, #2
 801c434:	f8ca 1000 	str.w	r1, [sl]
 801c438:	f1bb 0f00 	cmp.w	fp, #0
 801c43c:	d050      	beq.n	801c4e0 <__hexnan+0x130>
 801c43e:	454c      	cmp	r4, r9
 801c440:	d206      	bcs.n	801c450 <__hexnan+0xa0>
 801c442:	2d07      	cmp	r5, #7
 801c444:	dc04      	bgt.n	801c450 <__hexnan+0xa0>
 801c446:	462a      	mov	r2, r5
 801c448:	4649      	mov	r1, r9
 801c44a:	4620      	mov	r0, r4
 801c44c:	f7ff ff8a 	bl	801c364 <L_shift>
 801c450:	4544      	cmp	r4, r8
 801c452:	d934      	bls.n	801c4be <__hexnan+0x10e>
 801c454:	f1a8 0204 	sub.w	r2, r8, #4
 801c458:	4623      	mov	r3, r4
 801c45a:	f853 1b04 	ldr.w	r1, [r3], #4
 801c45e:	f842 1f04 	str.w	r1, [r2, #4]!
 801c462:	429f      	cmp	r7, r3
 801c464:	d2f9      	bcs.n	801c45a <__hexnan+0xaa>
 801c466:	1b3b      	subs	r3, r7, r4
 801c468:	f023 0303 	bic.w	r3, r3, #3
 801c46c:	3304      	adds	r3, #4
 801c46e:	3401      	adds	r4, #1
 801c470:	3e03      	subs	r6, #3
 801c472:	42b4      	cmp	r4, r6
 801c474:	bf88      	it	hi
 801c476:	2304      	movhi	r3, #4
 801c478:	4443      	add	r3, r8
 801c47a:	2200      	movs	r2, #0
 801c47c:	f843 2b04 	str.w	r2, [r3], #4
 801c480:	429f      	cmp	r7, r3
 801c482:	d2fb      	bcs.n	801c47c <__hexnan+0xcc>
 801c484:	683b      	ldr	r3, [r7, #0]
 801c486:	b91b      	cbnz	r3, 801c490 <__hexnan+0xe0>
 801c488:	4547      	cmp	r7, r8
 801c48a:	d127      	bne.n	801c4dc <__hexnan+0x12c>
 801c48c:	2301      	movs	r3, #1
 801c48e:	603b      	str	r3, [r7, #0]
 801c490:	2005      	movs	r0, #5
 801c492:	e026      	b.n	801c4e2 <__hexnan+0x132>
 801c494:	3501      	adds	r5, #1
 801c496:	2d08      	cmp	r5, #8
 801c498:	f10b 0b01 	add.w	fp, fp, #1
 801c49c:	dd06      	ble.n	801c4ac <__hexnan+0xfc>
 801c49e:	4544      	cmp	r4, r8
 801c4a0:	d9c3      	bls.n	801c42a <__hexnan+0x7a>
 801c4a2:	2300      	movs	r3, #0
 801c4a4:	f844 3c04 	str.w	r3, [r4, #-4]
 801c4a8:	2501      	movs	r5, #1
 801c4aa:	3c04      	subs	r4, #4
 801c4ac:	6822      	ldr	r2, [r4, #0]
 801c4ae:	f000 000f 	and.w	r0, r0, #15
 801c4b2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801c4b6:	6022      	str	r2, [r4, #0]
 801c4b8:	e7b7      	b.n	801c42a <__hexnan+0x7a>
 801c4ba:	2508      	movs	r5, #8
 801c4bc:	e7b5      	b.n	801c42a <__hexnan+0x7a>
 801c4be:	9b01      	ldr	r3, [sp, #4]
 801c4c0:	2b00      	cmp	r3, #0
 801c4c2:	d0df      	beq.n	801c484 <__hexnan+0xd4>
 801c4c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c4c8:	f1c3 0320 	rsb	r3, r3, #32
 801c4cc:	fa22 f303 	lsr.w	r3, r2, r3
 801c4d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801c4d4:	401a      	ands	r2, r3
 801c4d6:	f846 2c04 	str.w	r2, [r6, #-4]
 801c4da:	e7d3      	b.n	801c484 <__hexnan+0xd4>
 801c4dc:	3f04      	subs	r7, #4
 801c4de:	e7d1      	b.n	801c484 <__hexnan+0xd4>
 801c4e0:	2004      	movs	r0, #4
 801c4e2:	b007      	add	sp, #28
 801c4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c4e8 <_localeconv_r>:
 801c4e8:	4800      	ldr	r0, [pc, #0]	; (801c4ec <_localeconv_r+0x4>)
 801c4ea:	4770      	bx	lr
 801c4ec:	20000228 	.word	0x20000228

0801c4f0 <_lseek_r>:
 801c4f0:	b538      	push	{r3, r4, r5, lr}
 801c4f2:	4d07      	ldr	r5, [pc, #28]	; (801c510 <_lseek_r+0x20>)
 801c4f4:	4604      	mov	r4, r0
 801c4f6:	4608      	mov	r0, r1
 801c4f8:	4611      	mov	r1, r2
 801c4fa:	2200      	movs	r2, #0
 801c4fc:	602a      	str	r2, [r5, #0]
 801c4fe:	461a      	mov	r2, r3
 801c500:	f7f0 fe22 	bl	800d148 <_lseek>
 801c504:	1c43      	adds	r3, r0, #1
 801c506:	d102      	bne.n	801c50e <_lseek_r+0x1e>
 801c508:	682b      	ldr	r3, [r5, #0]
 801c50a:	b103      	cbz	r3, 801c50e <_lseek_r+0x1e>
 801c50c:	6023      	str	r3, [r4, #0]
 801c50e:	bd38      	pop	{r3, r4, r5, pc}
 801c510:	2000a578 	.word	0x2000a578

0801c514 <__ascii_mbtowc>:
 801c514:	b082      	sub	sp, #8
 801c516:	b901      	cbnz	r1, 801c51a <__ascii_mbtowc+0x6>
 801c518:	a901      	add	r1, sp, #4
 801c51a:	b142      	cbz	r2, 801c52e <__ascii_mbtowc+0x1a>
 801c51c:	b14b      	cbz	r3, 801c532 <__ascii_mbtowc+0x1e>
 801c51e:	7813      	ldrb	r3, [r2, #0]
 801c520:	600b      	str	r3, [r1, #0]
 801c522:	7812      	ldrb	r2, [r2, #0]
 801c524:	1e10      	subs	r0, r2, #0
 801c526:	bf18      	it	ne
 801c528:	2001      	movne	r0, #1
 801c52a:	b002      	add	sp, #8
 801c52c:	4770      	bx	lr
 801c52e:	4610      	mov	r0, r2
 801c530:	e7fb      	b.n	801c52a <__ascii_mbtowc+0x16>
 801c532:	f06f 0001 	mvn.w	r0, #1
 801c536:	e7f8      	b.n	801c52a <__ascii_mbtowc+0x16>

0801c538 <__malloc_lock>:
 801c538:	4801      	ldr	r0, [pc, #4]	; (801c540 <__malloc_lock+0x8>)
 801c53a:	f001 b885 	b.w	801d648 <__retarget_lock_acquire_recursive>
 801c53e:	bf00      	nop
 801c540:	2000a580 	.word	0x2000a580

0801c544 <__malloc_unlock>:
 801c544:	4801      	ldr	r0, [pc, #4]	; (801c54c <__malloc_unlock+0x8>)
 801c546:	f001 b880 	b.w	801d64a <__retarget_lock_release_recursive>
 801c54a:	bf00      	nop
 801c54c:	2000a580 	.word	0x2000a580

0801c550 <_Balloc>:
 801c550:	b570      	push	{r4, r5, r6, lr}
 801c552:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c554:	4604      	mov	r4, r0
 801c556:	460d      	mov	r5, r1
 801c558:	b976      	cbnz	r6, 801c578 <_Balloc+0x28>
 801c55a:	2010      	movs	r0, #16
 801c55c:	f7fc fec8 	bl	80192f0 <malloc>
 801c560:	4602      	mov	r2, r0
 801c562:	6260      	str	r0, [r4, #36]	; 0x24
 801c564:	b920      	cbnz	r0, 801c570 <_Balloc+0x20>
 801c566:	4b18      	ldr	r3, [pc, #96]	; (801c5c8 <_Balloc+0x78>)
 801c568:	4818      	ldr	r0, [pc, #96]	; (801c5cc <_Balloc+0x7c>)
 801c56a:	2166      	movs	r1, #102	; 0x66
 801c56c:	f000 fe84 	bl	801d278 <__assert_func>
 801c570:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c574:	6006      	str	r6, [r0, #0]
 801c576:	60c6      	str	r6, [r0, #12]
 801c578:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801c57a:	68f3      	ldr	r3, [r6, #12]
 801c57c:	b183      	cbz	r3, 801c5a0 <_Balloc+0x50>
 801c57e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c580:	68db      	ldr	r3, [r3, #12]
 801c582:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c586:	b9b8      	cbnz	r0, 801c5b8 <_Balloc+0x68>
 801c588:	2101      	movs	r1, #1
 801c58a:	fa01 f605 	lsl.w	r6, r1, r5
 801c58e:	1d72      	adds	r2, r6, #5
 801c590:	0092      	lsls	r2, r2, #2
 801c592:	4620      	mov	r0, r4
 801c594:	f000 fc97 	bl	801cec6 <_calloc_r>
 801c598:	b160      	cbz	r0, 801c5b4 <_Balloc+0x64>
 801c59a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c59e:	e00e      	b.n	801c5be <_Balloc+0x6e>
 801c5a0:	2221      	movs	r2, #33	; 0x21
 801c5a2:	2104      	movs	r1, #4
 801c5a4:	4620      	mov	r0, r4
 801c5a6:	f000 fc8e 	bl	801cec6 <_calloc_r>
 801c5aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c5ac:	60f0      	str	r0, [r6, #12]
 801c5ae:	68db      	ldr	r3, [r3, #12]
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	d1e4      	bne.n	801c57e <_Balloc+0x2e>
 801c5b4:	2000      	movs	r0, #0
 801c5b6:	bd70      	pop	{r4, r5, r6, pc}
 801c5b8:	6802      	ldr	r2, [r0, #0]
 801c5ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c5be:	2300      	movs	r3, #0
 801c5c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c5c4:	e7f7      	b.n	801c5b6 <_Balloc+0x66>
 801c5c6:	bf00      	nop
 801c5c8:	080211e6 	.word	0x080211e6
 801c5cc:	080212ec 	.word	0x080212ec

0801c5d0 <_Bfree>:
 801c5d0:	b570      	push	{r4, r5, r6, lr}
 801c5d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c5d4:	4605      	mov	r5, r0
 801c5d6:	460c      	mov	r4, r1
 801c5d8:	b976      	cbnz	r6, 801c5f8 <_Bfree+0x28>
 801c5da:	2010      	movs	r0, #16
 801c5dc:	f7fc fe88 	bl	80192f0 <malloc>
 801c5e0:	4602      	mov	r2, r0
 801c5e2:	6268      	str	r0, [r5, #36]	; 0x24
 801c5e4:	b920      	cbnz	r0, 801c5f0 <_Bfree+0x20>
 801c5e6:	4b09      	ldr	r3, [pc, #36]	; (801c60c <_Bfree+0x3c>)
 801c5e8:	4809      	ldr	r0, [pc, #36]	; (801c610 <_Bfree+0x40>)
 801c5ea:	218a      	movs	r1, #138	; 0x8a
 801c5ec:	f000 fe44 	bl	801d278 <__assert_func>
 801c5f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c5f4:	6006      	str	r6, [r0, #0]
 801c5f6:	60c6      	str	r6, [r0, #12]
 801c5f8:	b13c      	cbz	r4, 801c60a <_Bfree+0x3a>
 801c5fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801c5fc:	6862      	ldr	r2, [r4, #4]
 801c5fe:	68db      	ldr	r3, [r3, #12]
 801c600:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c604:	6021      	str	r1, [r4, #0]
 801c606:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c60a:	bd70      	pop	{r4, r5, r6, pc}
 801c60c:	080211e6 	.word	0x080211e6
 801c610:	080212ec 	.word	0x080212ec

0801c614 <__multadd>:
 801c614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c618:	690e      	ldr	r6, [r1, #16]
 801c61a:	4607      	mov	r7, r0
 801c61c:	4698      	mov	r8, r3
 801c61e:	460c      	mov	r4, r1
 801c620:	f101 0014 	add.w	r0, r1, #20
 801c624:	2300      	movs	r3, #0
 801c626:	6805      	ldr	r5, [r0, #0]
 801c628:	b2a9      	uxth	r1, r5
 801c62a:	fb02 8101 	mla	r1, r2, r1, r8
 801c62e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801c632:	0c2d      	lsrs	r5, r5, #16
 801c634:	fb02 c505 	mla	r5, r2, r5, ip
 801c638:	b289      	uxth	r1, r1
 801c63a:	3301      	adds	r3, #1
 801c63c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801c640:	429e      	cmp	r6, r3
 801c642:	f840 1b04 	str.w	r1, [r0], #4
 801c646:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801c64a:	dcec      	bgt.n	801c626 <__multadd+0x12>
 801c64c:	f1b8 0f00 	cmp.w	r8, #0
 801c650:	d022      	beq.n	801c698 <__multadd+0x84>
 801c652:	68a3      	ldr	r3, [r4, #8]
 801c654:	42b3      	cmp	r3, r6
 801c656:	dc19      	bgt.n	801c68c <__multadd+0x78>
 801c658:	6861      	ldr	r1, [r4, #4]
 801c65a:	4638      	mov	r0, r7
 801c65c:	3101      	adds	r1, #1
 801c65e:	f7ff ff77 	bl	801c550 <_Balloc>
 801c662:	4605      	mov	r5, r0
 801c664:	b928      	cbnz	r0, 801c672 <__multadd+0x5e>
 801c666:	4602      	mov	r2, r0
 801c668:	4b0d      	ldr	r3, [pc, #52]	; (801c6a0 <__multadd+0x8c>)
 801c66a:	480e      	ldr	r0, [pc, #56]	; (801c6a4 <__multadd+0x90>)
 801c66c:	21b5      	movs	r1, #181	; 0xb5
 801c66e:	f000 fe03 	bl	801d278 <__assert_func>
 801c672:	6922      	ldr	r2, [r4, #16]
 801c674:	3202      	adds	r2, #2
 801c676:	f104 010c 	add.w	r1, r4, #12
 801c67a:	0092      	lsls	r2, r2, #2
 801c67c:	300c      	adds	r0, #12
 801c67e:	f7fc fe47 	bl	8019310 <memcpy>
 801c682:	4621      	mov	r1, r4
 801c684:	4638      	mov	r0, r7
 801c686:	f7ff ffa3 	bl	801c5d0 <_Bfree>
 801c68a:	462c      	mov	r4, r5
 801c68c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801c690:	3601      	adds	r6, #1
 801c692:	f8c3 8014 	str.w	r8, [r3, #20]
 801c696:	6126      	str	r6, [r4, #16]
 801c698:	4620      	mov	r0, r4
 801c69a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c69e:	bf00      	nop
 801c6a0:	0802125c 	.word	0x0802125c
 801c6a4:	080212ec 	.word	0x080212ec

0801c6a8 <__s2b>:
 801c6a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c6ac:	460c      	mov	r4, r1
 801c6ae:	4615      	mov	r5, r2
 801c6b0:	461f      	mov	r7, r3
 801c6b2:	2209      	movs	r2, #9
 801c6b4:	3308      	adds	r3, #8
 801c6b6:	4606      	mov	r6, r0
 801c6b8:	fb93 f3f2 	sdiv	r3, r3, r2
 801c6bc:	2100      	movs	r1, #0
 801c6be:	2201      	movs	r2, #1
 801c6c0:	429a      	cmp	r2, r3
 801c6c2:	db09      	blt.n	801c6d8 <__s2b+0x30>
 801c6c4:	4630      	mov	r0, r6
 801c6c6:	f7ff ff43 	bl	801c550 <_Balloc>
 801c6ca:	b940      	cbnz	r0, 801c6de <__s2b+0x36>
 801c6cc:	4602      	mov	r2, r0
 801c6ce:	4b19      	ldr	r3, [pc, #100]	; (801c734 <__s2b+0x8c>)
 801c6d0:	4819      	ldr	r0, [pc, #100]	; (801c738 <__s2b+0x90>)
 801c6d2:	21ce      	movs	r1, #206	; 0xce
 801c6d4:	f000 fdd0 	bl	801d278 <__assert_func>
 801c6d8:	0052      	lsls	r2, r2, #1
 801c6da:	3101      	adds	r1, #1
 801c6dc:	e7f0      	b.n	801c6c0 <__s2b+0x18>
 801c6de:	9b08      	ldr	r3, [sp, #32]
 801c6e0:	6143      	str	r3, [r0, #20]
 801c6e2:	2d09      	cmp	r5, #9
 801c6e4:	f04f 0301 	mov.w	r3, #1
 801c6e8:	6103      	str	r3, [r0, #16]
 801c6ea:	dd16      	ble.n	801c71a <__s2b+0x72>
 801c6ec:	f104 0909 	add.w	r9, r4, #9
 801c6f0:	46c8      	mov	r8, r9
 801c6f2:	442c      	add	r4, r5
 801c6f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 801c6f8:	4601      	mov	r1, r0
 801c6fa:	3b30      	subs	r3, #48	; 0x30
 801c6fc:	220a      	movs	r2, #10
 801c6fe:	4630      	mov	r0, r6
 801c700:	f7ff ff88 	bl	801c614 <__multadd>
 801c704:	45a0      	cmp	r8, r4
 801c706:	d1f5      	bne.n	801c6f4 <__s2b+0x4c>
 801c708:	f1a5 0408 	sub.w	r4, r5, #8
 801c70c:	444c      	add	r4, r9
 801c70e:	1b2d      	subs	r5, r5, r4
 801c710:	1963      	adds	r3, r4, r5
 801c712:	42bb      	cmp	r3, r7
 801c714:	db04      	blt.n	801c720 <__s2b+0x78>
 801c716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c71a:	340a      	adds	r4, #10
 801c71c:	2509      	movs	r5, #9
 801c71e:	e7f6      	b.n	801c70e <__s2b+0x66>
 801c720:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c724:	4601      	mov	r1, r0
 801c726:	3b30      	subs	r3, #48	; 0x30
 801c728:	220a      	movs	r2, #10
 801c72a:	4630      	mov	r0, r6
 801c72c:	f7ff ff72 	bl	801c614 <__multadd>
 801c730:	e7ee      	b.n	801c710 <__s2b+0x68>
 801c732:	bf00      	nop
 801c734:	0802125c 	.word	0x0802125c
 801c738:	080212ec 	.word	0x080212ec

0801c73c <__hi0bits>:
 801c73c:	0c03      	lsrs	r3, r0, #16
 801c73e:	041b      	lsls	r3, r3, #16
 801c740:	b9d3      	cbnz	r3, 801c778 <__hi0bits+0x3c>
 801c742:	0400      	lsls	r0, r0, #16
 801c744:	2310      	movs	r3, #16
 801c746:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801c74a:	bf04      	itt	eq
 801c74c:	0200      	lsleq	r0, r0, #8
 801c74e:	3308      	addeq	r3, #8
 801c750:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801c754:	bf04      	itt	eq
 801c756:	0100      	lsleq	r0, r0, #4
 801c758:	3304      	addeq	r3, #4
 801c75a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801c75e:	bf04      	itt	eq
 801c760:	0080      	lsleq	r0, r0, #2
 801c762:	3302      	addeq	r3, #2
 801c764:	2800      	cmp	r0, #0
 801c766:	db05      	blt.n	801c774 <__hi0bits+0x38>
 801c768:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801c76c:	f103 0301 	add.w	r3, r3, #1
 801c770:	bf08      	it	eq
 801c772:	2320      	moveq	r3, #32
 801c774:	4618      	mov	r0, r3
 801c776:	4770      	bx	lr
 801c778:	2300      	movs	r3, #0
 801c77a:	e7e4      	b.n	801c746 <__hi0bits+0xa>

0801c77c <__lo0bits>:
 801c77c:	6803      	ldr	r3, [r0, #0]
 801c77e:	f013 0207 	ands.w	r2, r3, #7
 801c782:	4601      	mov	r1, r0
 801c784:	d00b      	beq.n	801c79e <__lo0bits+0x22>
 801c786:	07da      	lsls	r2, r3, #31
 801c788:	d424      	bmi.n	801c7d4 <__lo0bits+0x58>
 801c78a:	0798      	lsls	r0, r3, #30
 801c78c:	bf49      	itett	mi
 801c78e:	085b      	lsrmi	r3, r3, #1
 801c790:	089b      	lsrpl	r3, r3, #2
 801c792:	2001      	movmi	r0, #1
 801c794:	600b      	strmi	r3, [r1, #0]
 801c796:	bf5c      	itt	pl
 801c798:	600b      	strpl	r3, [r1, #0]
 801c79a:	2002      	movpl	r0, #2
 801c79c:	4770      	bx	lr
 801c79e:	b298      	uxth	r0, r3
 801c7a0:	b9b0      	cbnz	r0, 801c7d0 <__lo0bits+0x54>
 801c7a2:	0c1b      	lsrs	r3, r3, #16
 801c7a4:	2010      	movs	r0, #16
 801c7a6:	f013 0fff 	tst.w	r3, #255	; 0xff
 801c7aa:	bf04      	itt	eq
 801c7ac:	0a1b      	lsreq	r3, r3, #8
 801c7ae:	3008      	addeq	r0, #8
 801c7b0:	071a      	lsls	r2, r3, #28
 801c7b2:	bf04      	itt	eq
 801c7b4:	091b      	lsreq	r3, r3, #4
 801c7b6:	3004      	addeq	r0, #4
 801c7b8:	079a      	lsls	r2, r3, #30
 801c7ba:	bf04      	itt	eq
 801c7bc:	089b      	lsreq	r3, r3, #2
 801c7be:	3002      	addeq	r0, #2
 801c7c0:	07da      	lsls	r2, r3, #31
 801c7c2:	d403      	bmi.n	801c7cc <__lo0bits+0x50>
 801c7c4:	085b      	lsrs	r3, r3, #1
 801c7c6:	f100 0001 	add.w	r0, r0, #1
 801c7ca:	d005      	beq.n	801c7d8 <__lo0bits+0x5c>
 801c7cc:	600b      	str	r3, [r1, #0]
 801c7ce:	4770      	bx	lr
 801c7d0:	4610      	mov	r0, r2
 801c7d2:	e7e8      	b.n	801c7a6 <__lo0bits+0x2a>
 801c7d4:	2000      	movs	r0, #0
 801c7d6:	4770      	bx	lr
 801c7d8:	2020      	movs	r0, #32
 801c7da:	4770      	bx	lr

0801c7dc <__i2b>:
 801c7dc:	b510      	push	{r4, lr}
 801c7de:	460c      	mov	r4, r1
 801c7e0:	2101      	movs	r1, #1
 801c7e2:	f7ff feb5 	bl	801c550 <_Balloc>
 801c7e6:	4602      	mov	r2, r0
 801c7e8:	b928      	cbnz	r0, 801c7f6 <__i2b+0x1a>
 801c7ea:	4b05      	ldr	r3, [pc, #20]	; (801c800 <__i2b+0x24>)
 801c7ec:	4805      	ldr	r0, [pc, #20]	; (801c804 <__i2b+0x28>)
 801c7ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801c7f2:	f000 fd41 	bl	801d278 <__assert_func>
 801c7f6:	2301      	movs	r3, #1
 801c7f8:	6144      	str	r4, [r0, #20]
 801c7fa:	6103      	str	r3, [r0, #16]
 801c7fc:	bd10      	pop	{r4, pc}
 801c7fe:	bf00      	nop
 801c800:	0802125c 	.word	0x0802125c
 801c804:	080212ec 	.word	0x080212ec

0801c808 <__multiply>:
 801c808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c80c:	4614      	mov	r4, r2
 801c80e:	690a      	ldr	r2, [r1, #16]
 801c810:	6923      	ldr	r3, [r4, #16]
 801c812:	429a      	cmp	r2, r3
 801c814:	bfb8      	it	lt
 801c816:	460b      	movlt	r3, r1
 801c818:	460d      	mov	r5, r1
 801c81a:	bfbc      	itt	lt
 801c81c:	4625      	movlt	r5, r4
 801c81e:	461c      	movlt	r4, r3
 801c820:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801c824:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801c828:	68ab      	ldr	r3, [r5, #8]
 801c82a:	6869      	ldr	r1, [r5, #4]
 801c82c:	eb0a 0709 	add.w	r7, sl, r9
 801c830:	42bb      	cmp	r3, r7
 801c832:	b085      	sub	sp, #20
 801c834:	bfb8      	it	lt
 801c836:	3101      	addlt	r1, #1
 801c838:	f7ff fe8a 	bl	801c550 <_Balloc>
 801c83c:	b930      	cbnz	r0, 801c84c <__multiply+0x44>
 801c83e:	4602      	mov	r2, r0
 801c840:	4b42      	ldr	r3, [pc, #264]	; (801c94c <__multiply+0x144>)
 801c842:	4843      	ldr	r0, [pc, #268]	; (801c950 <__multiply+0x148>)
 801c844:	f240 115d 	movw	r1, #349	; 0x15d
 801c848:	f000 fd16 	bl	801d278 <__assert_func>
 801c84c:	f100 0614 	add.w	r6, r0, #20
 801c850:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801c854:	4633      	mov	r3, r6
 801c856:	2200      	movs	r2, #0
 801c858:	4543      	cmp	r3, r8
 801c85a:	d31e      	bcc.n	801c89a <__multiply+0x92>
 801c85c:	f105 0c14 	add.w	ip, r5, #20
 801c860:	f104 0314 	add.w	r3, r4, #20
 801c864:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801c868:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801c86c:	9202      	str	r2, [sp, #8]
 801c86e:	ebac 0205 	sub.w	r2, ip, r5
 801c872:	3a15      	subs	r2, #21
 801c874:	f022 0203 	bic.w	r2, r2, #3
 801c878:	3204      	adds	r2, #4
 801c87a:	f105 0115 	add.w	r1, r5, #21
 801c87e:	458c      	cmp	ip, r1
 801c880:	bf38      	it	cc
 801c882:	2204      	movcc	r2, #4
 801c884:	9201      	str	r2, [sp, #4]
 801c886:	9a02      	ldr	r2, [sp, #8]
 801c888:	9303      	str	r3, [sp, #12]
 801c88a:	429a      	cmp	r2, r3
 801c88c:	d808      	bhi.n	801c8a0 <__multiply+0x98>
 801c88e:	2f00      	cmp	r7, #0
 801c890:	dc55      	bgt.n	801c93e <__multiply+0x136>
 801c892:	6107      	str	r7, [r0, #16]
 801c894:	b005      	add	sp, #20
 801c896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c89a:	f843 2b04 	str.w	r2, [r3], #4
 801c89e:	e7db      	b.n	801c858 <__multiply+0x50>
 801c8a0:	f8b3 a000 	ldrh.w	sl, [r3]
 801c8a4:	f1ba 0f00 	cmp.w	sl, #0
 801c8a8:	d020      	beq.n	801c8ec <__multiply+0xe4>
 801c8aa:	f105 0e14 	add.w	lr, r5, #20
 801c8ae:	46b1      	mov	r9, r6
 801c8b0:	2200      	movs	r2, #0
 801c8b2:	f85e 4b04 	ldr.w	r4, [lr], #4
 801c8b6:	f8d9 b000 	ldr.w	fp, [r9]
 801c8ba:	b2a1      	uxth	r1, r4
 801c8bc:	fa1f fb8b 	uxth.w	fp, fp
 801c8c0:	fb0a b101 	mla	r1, sl, r1, fp
 801c8c4:	4411      	add	r1, r2
 801c8c6:	f8d9 2000 	ldr.w	r2, [r9]
 801c8ca:	0c24      	lsrs	r4, r4, #16
 801c8cc:	0c12      	lsrs	r2, r2, #16
 801c8ce:	fb0a 2404 	mla	r4, sl, r4, r2
 801c8d2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801c8d6:	b289      	uxth	r1, r1
 801c8d8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801c8dc:	45f4      	cmp	ip, lr
 801c8de:	f849 1b04 	str.w	r1, [r9], #4
 801c8e2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801c8e6:	d8e4      	bhi.n	801c8b2 <__multiply+0xaa>
 801c8e8:	9901      	ldr	r1, [sp, #4]
 801c8ea:	5072      	str	r2, [r6, r1]
 801c8ec:	9a03      	ldr	r2, [sp, #12]
 801c8ee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801c8f2:	3304      	adds	r3, #4
 801c8f4:	f1b9 0f00 	cmp.w	r9, #0
 801c8f8:	d01f      	beq.n	801c93a <__multiply+0x132>
 801c8fa:	6834      	ldr	r4, [r6, #0]
 801c8fc:	f105 0114 	add.w	r1, r5, #20
 801c900:	46b6      	mov	lr, r6
 801c902:	f04f 0a00 	mov.w	sl, #0
 801c906:	880a      	ldrh	r2, [r1, #0]
 801c908:	f8be b002 	ldrh.w	fp, [lr, #2]
 801c90c:	fb09 b202 	mla	r2, r9, r2, fp
 801c910:	4492      	add	sl, r2
 801c912:	b2a4      	uxth	r4, r4
 801c914:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801c918:	f84e 4b04 	str.w	r4, [lr], #4
 801c91c:	f851 4b04 	ldr.w	r4, [r1], #4
 801c920:	f8be 2000 	ldrh.w	r2, [lr]
 801c924:	0c24      	lsrs	r4, r4, #16
 801c926:	fb09 2404 	mla	r4, r9, r4, r2
 801c92a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801c92e:	458c      	cmp	ip, r1
 801c930:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801c934:	d8e7      	bhi.n	801c906 <__multiply+0xfe>
 801c936:	9a01      	ldr	r2, [sp, #4]
 801c938:	50b4      	str	r4, [r6, r2]
 801c93a:	3604      	adds	r6, #4
 801c93c:	e7a3      	b.n	801c886 <__multiply+0x7e>
 801c93e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801c942:	2b00      	cmp	r3, #0
 801c944:	d1a5      	bne.n	801c892 <__multiply+0x8a>
 801c946:	3f01      	subs	r7, #1
 801c948:	e7a1      	b.n	801c88e <__multiply+0x86>
 801c94a:	bf00      	nop
 801c94c:	0802125c 	.word	0x0802125c
 801c950:	080212ec 	.word	0x080212ec

0801c954 <__pow5mult>:
 801c954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c958:	4615      	mov	r5, r2
 801c95a:	f012 0203 	ands.w	r2, r2, #3
 801c95e:	4606      	mov	r6, r0
 801c960:	460f      	mov	r7, r1
 801c962:	d007      	beq.n	801c974 <__pow5mult+0x20>
 801c964:	4c25      	ldr	r4, [pc, #148]	; (801c9fc <__pow5mult+0xa8>)
 801c966:	3a01      	subs	r2, #1
 801c968:	2300      	movs	r3, #0
 801c96a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c96e:	f7ff fe51 	bl	801c614 <__multadd>
 801c972:	4607      	mov	r7, r0
 801c974:	10ad      	asrs	r5, r5, #2
 801c976:	d03d      	beq.n	801c9f4 <__pow5mult+0xa0>
 801c978:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801c97a:	b97c      	cbnz	r4, 801c99c <__pow5mult+0x48>
 801c97c:	2010      	movs	r0, #16
 801c97e:	f7fc fcb7 	bl	80192f0 <malloc>
 801c982:	4602      	mov	r2, r0
 801c984:	6270      	str	r0, [r6, #36]	; 0x24
 801c986:	b928      	cbnz	r0, 801c994 <__pow5mult+0x40>
 801c988:	4b1d      	ldr	r3, [pc, #116]	; (801ca00 <__pow5mult+0xac>)
 801c98a:	481e      	ldr	r0, [pc, #120]	; (801ca04 <__pow5mult+0xb0>)
 801c98c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801c990:	f000 fc72 	bl	801d278 <__assert_func>
 801c994:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c998:	6004      	str	r4, [r0, #0]
 801c99a:	60c4      	str	r4, [r0, #12]
 801c99c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801c9a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c9a4:	b94c      	cbnz	r4, 801c9ba <__pow5mult+0x66>
 801c9a6:	f240 2171 	movw	r1, #625	; 0x271
 801c9aa:	4630      	mov	r0, r6
 801c9ac:	f7ff ff16 	bl	801c7dc <__i2b>
 801c9b0:	2300      	movs	r3, #0
 801c9b2:	f8c8 0008 	str.w	r0, [r8, #8]
 801c9b6:	4604      	mov	r4, r0
 801c9b8:	6003      	str	r3, [r0, #0]
 801c9ba:	f04f 0900 	mov.w	r9, #0
 801c9be:	07eb      	lsls	r3, r5, #31
 801c9c0:	d50a      	bpl.n	801c9d8 <__pow5mult+0x84>
 801c9c2:	4639      	mov	r1, r7
 801c9c4:	4622      	mov	r2, r4
 801c9c6:	4630      	mov	r0, r6
 801c9c8:	f7ff ff1e 	bl	801c808 <__multiply>
 801c9cc:	4639      	mov	r1, r7
 801c9ce:	4680      	mov	r8, r0
 801c9d0:	4630      	mov	r0, r6
 801c9d2:	f7ff fdfd 	bl	801c5d0 <_Bfree>
 801c9d6:	4647      	mov	r7, r8
 801c9d8:	106d      	asrs	r5, r5, #1
 801c9da:	d00b      	beq.n	801c9f4 <__pow5mult+0xa0>
 801c9dc:	6820      	ldr	r0, [r4, #0]
 801c9de:	b938      	cbnz	r0, 801c9f0 <__pow5mult+0x9c>
 801c9e0:	4622      	mov	r2, r4
 801c9e2:	4621      	mov	r1, r4
 801c9e4:	4630      	mov	r0, r6
 801c9e6:	f7ff ff0f 	bl	801c808 <__multiply>
 801c9ea:	6020      	str	r0, [r4, #0]
 801c9ec:	f8c0 9000 	str.w	r9, [r0]
 801c9f0:	4604      	mov	r4, r0
 801c9f2:	e7e4      	b.n	801c9be <__pow5mult+0x6a>
 801c9f4:	4638      	mov	r0, r7
 801c9f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c9fa:	bf00      	nop
 801c9fc:	08021440 	.word	0x08021440
 801ca00:	080211e6 	.word	0x080211e6
 801ca04:	080212ec 	.word	0x080212ec

0801ca08 <__lshift>:
 801ca08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ca0c:	460c      	mov	r4, r1
 801ca0e:	6849      	ldr	r1, [r1, #4]
 801ca10:	6923      	ldr	r3, [r4, #16]
 801ca12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ca16:	68a3      	ldr	r3, [r4, #8]
 801ca18:	4607      	mov	r7, r0
 801ca1a:	4691      	mov	r9, r2
 801ca1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ca20:	f108 0601 	add.w	r6, r8, #1
 801ca24:	42b3      	cmp	r3, r6
 801ca26:	db0b      	blt.n	801ca40 <__lshift+0x38>
 801ca28:	4638      	mov	r0, r7
 801ca2a:	f7ff fd91 	bl	801c550 <_Balloc>
 801ca2e:	4605      	mov	r5, r0
 801ca30:	b948      	cbnz	r0, 801ca46 <__lshift+0x3e>
 801ca32:	4602      	mov	r2, r0
 801ca34:	4b28      	ldr	r3, [pc, #160]	; (801cad8 <__lshift+0xd0>)
 801ca36:	4829      	ldr	r0, [pc, #164]	; (801cadc <__lshift+0xd4>)
 801ca38:	f240 11d9 	movw	r1, #473	; 0x1d9
 801ca3c:	f000 fc1c 	bl	801d278 <__assert_func>
 801ca40:	3101      	adds	r1, #1
 801ca42:	005b      	lsls	r3, r3, #1
 801ca44:	e7ee      	b.n	801ca24 <__lshift+0x1c>
 801ca46:	2300      	movs	r3, #0
 801ca48:	f100 0114 	add.w	r1, r0, #20
 801ca4c:	f100 0210 	add.w	r2, r0, #16
 801ca50:	4618      	mov	r0, r3
 801ca52:	4553      	cmp	r3, sl
 801ca54:	db33      	blt.n	801cabe <__lshift+0xb6>
 801ca56:	6920      	ldr	r0, [r4, #16]
 801ca58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ca5c:	f104 0314 	add.w	r3, r4, #20
 801ca60:	f019 091f 	ands.w	r9, r9, #31
 801ca64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ca68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801ca6c:	d02b      	beq.n	801cac6 <__lshift+0xbe>
 801ca6e:	f1c9 0e20 	rsb	lr, r9, #32
 801ca72:	468a      	mov	sl, r1
 801ca74:	2200      	movs	r2, #0
 801ca76:	6818      	ldr	r0, [r3, #0]
 801ca78:	fa00 f009 	lsl.w	r0, r0, r9
 801ca7c:	4302      	orrs	r2, r0
 801ca7e:	f84a 2b04 	str.w	r2, [sl], #4
 801ca82:	f853 2b04 	ldr.w	r2, [r3], #4
 801ca86:	459c      	cmp	ip, r3
 801ca88:	fa22 f20e 	lsr.w	r2, r2, lr
 801ca8c:	d8f3      	bhi.n	801ca76 <__lshift+0x6e>
 801ca8e:	ebac 0304 	sub.w	r3, ip, r4
 801ca92:	3b15      	subs	r3, #21
 801ca94:	f023 0303 	bic.w	r3, r3, #3
 801ca98:	3304      	adds	r3, #4
 801ca9a:	f104 0015 	add.w	r0, r4, #21
 801ca9e:	4584      	cmp	ip, r0
 801caa0:	bf38      	it	cc
 801caa2:	2304      	movcc	r3, #4
 801caa4:	50ca      	str	r2, [r1, r3]
 801caa6:	b10a      	cbz	r2, 801caac <__lshift+0xa4>
 801caa8:	f108 0602 	add.w	r6, r8, #2
 801caac:	3e01      	subs	r6, #1
 801caae:	4638      	mov	r0, r7
 801cab0:	612e      	str	r6, [r5, #16]
 801cab2:	4621      	mov	r1, r4
 801cab4:	f7ff fd8c 	bl	801c5d0 <_Bfree>
 801cab8:	4628      	mov	r0, r5
 801caba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cabe:	f842 0f04 	str.w	r0, [r2, #4]!
 801cac2:	3301      	adds	r3, #1
 801cac4:	e7c5      	b.n	801ca52 <__lshift+0x4a>
 801cac6:	3904      	subs	r1, #4
 801cac8:	f853 2b04 	ldr.w	r2, [r3], #4
 801cacc:	f841 2f04 	str.w	r2, [r1, #4]!
 801cad0:	459c      	cmp	ip, r3
 801cad2:	d8f9      	bhi.n	801cac8 <__lshift+0xc0>
 801cad4:	e7ea      	b.n	801caac <__lshift+0xa4>
 801cad6:	bf00      	nop
 801cad8:	0802125c 	.word	0x0802125c
 801cadc:	080212ec 	.word	0x080212ec

0801cae0 <__mcmp>:
 801cae0:	b530      	push	{r4, r5, lr}
 801cae2:	6902      	ldr	r2, [r0, #16]
 801cae4:	690c      	ldr	r4, [r1, #16]
 801cae6:	1b12      	subs	r2, r2, r4
 801cae8:	d10e      	bne.n	801cb08 <__mcmp+0x28>
 801caea:	f100 0314 	add.w	r3, r0, #20
 801caee:	3114      	adds	r1, #20
 801caf0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801caf4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801caf8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801cafc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801cb00:	42a5      	cmp	r5, r4
 801cb02:	d003      	beq.n	801cb0c <__mcmp+0x2c>
 801cb04:	d305      	bcc.n	801cb12 <__mcmp+0x32>
 801cb06:	2201      	movs	r2, #1
 801cb08:	4610      	mov	r0, r2
 801cb0a:	bd30      	pop	{r4, r5, pc}
 801cb0c:	4283      	cmp	r3, r0
 801cb0e:	d3f3      	bcc.n	801caf8 <__mcmp+0x18>
 801cb10:	e7fa      	b.n	801cb08 <__mcmp+0x28>
 801cb12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cb16:	e7f7      	b.n	801cb08 <__mcmp+0x28>

0801cb18 <__mdiff>:
 801cb18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb1c:	460c      	mov	r4, r1
 801cb1e:	4606      	mov	r6, r0
 801cb20:	4611      	mov	r1, r2
 801cb22:	4620      	mov	r0, r4
 801cb24:	4617      	mov	r7, r2
 801cb26:	f7ff ffdb 	bl	801cae0 <__mcmp>
 801cb2a:	1e05      	subs	r5, r0, #0
 801cb2c:	d110      	bne.n	801cb50 <__mdiff+0x38>
 801cb2e:	4629      	mov	r1, r5
 801cb30:	4630      	mov	r0, r6
 801cb32:	f7ff fd0d 	bl	801c550 <_Balloc>
 801cb36:	b930      	cbnz	r0, 801cb46 <__mdiff+0x2e>
 801cb38:	4b39      	ldr	r3, [pc, #228]	; (801cc20 <__mdiff+0x108>)
 801cb3a:	4602      	mov	r2, r0
 801cb3c:	f240 2132 	movw	r1, #562	; 0x232
 801cb40:	4838      	ldr	r0, [pc, #224]	; (801cc24 <__mdiff+0x10c>)
 801cb42:	f000 fb99 	bl	801d278 <__assert_func>
 801cb46:	2301      	movs	r3, #1
 801cb48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801cb4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb50:	bfa4      	itt	ge
 801cb52:	463b      	movge	r3, r7
 801cb54:	4627      	movge	r7, r4
 801cb56:	4630      	mov	r0, r6
 801cb58:	6879      	ldr	r1, [r7, #4]
 801cb5a:	bfa6      	itte	ge
 801cb5c:	461c      	movge	r4, r3
 801cb5e:	2500      	movge	r5, #0
 801cb60:	2501      	movlt	r5, #1
 801cb62:	f7ff fcf5 	bl	801c550 <_Balloc>
 801cb66:	b920      	cbnz	r0, 801cb72 <__mdiff+0x5a>
 801cb68:	4b2d      	ldr	r3, [pc, #180]	; (801cc20 <__mdiff+0x108>)
 801cb6a:	4602      	mov	r2, r0
 801cb6c:	f44f 7110 	mov.w	r1, #576	; 0x240
 801cb70:	e7e6      	b.n	801cb40 <__mdiff+0x28>
 801cb72:	693e      	ldr	r6, [r7, #16]
 801cb74:	60c5      	str	r5, [r0, #12]
 801cb76:	6925      	ldr	r5, [r4, #16]
 801cb78:	f107 0114 	add.w	r1, r7, #20
 801cb7c:	f104 0914 	add.w	r9, r4, #20
 801cb80:	f100 0e14 	add.w	lr, r0, #20
 801cb84:	f107 0210 	add.w	r2, r7, #16
 801cb88:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801cb8c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801cb90:	46f2      	mov	sl, lr
 801cb92:	2700      	movs	r7, #0
 801cb94:	f859 3b04 	ldr.w	r3, [r9], #4
 801cb98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801cb9c:	fa1f f883 	uxth.w	r8, r3
 801cba0:	fa17 f78b 	uxtah	r7, r7, fp
 801cba4:	0c1b      	lsrs	r3, r3, #16
 801cba6:	eba7 0808 	sub.w	r8, r7, r8
 801cbaa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801cbae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801cbb2:	fa1f f888 	uxth.w	r8, r8
 801cbb6:	141f      	asrs	r7, r3, #16
 801cbb8:	454d      	cmp	r5, r9
 801cbba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801cbbe:	f84a 3b04 	str.w	r3, [sl], #4
 801cbc2:	d8e7      	bhi.n	801cb94 <__mdiff+0x7c>
 801cbc4:	1b2b      	subs	r3, r5, r4
 801cbc6:	3b15      	subs	r3, #21
 801cbc8:	f023 0303 	bic.w	r3, r3, #3
 801cbcc:	3304      	adds	r3, #4
 801cbce:	3415      	adds	r4, #21
 801cbd0:	42a5      	cmp	r5, r4
 801cbd2:	bf38      	it	cc
 801cbd4:	2304      	movcc	r3, #4
 801cbd6:	4419      	add	r1, r3
 801cbd8:	4473      	add	r3, lr
 801cbda:	469e      	mov	lr, r3
 801cbdc:	460d      	mov	r5, r1
 801cbde:	4565      	cmp	r5, ip
 801cbe0:	d30e      	bcc.n	801cc00 <__mdiff+0xe8>
 801cbe2:	f10c 0203 	add.w	r2, ip, #3
 801cbe6:	1a52      	subs	r2, r2, r1
 801cbe8:	f022 0203 	bic.w	r2, r2, #3
 801cbec:	3903      	subs	r1, #3
 801cbee:	458c      	cmp	ip, r1
 801cbf0:	bf38      	it	cc
 801cbf2:	2200      	movcc	r2, #0
 801cbf4:	441a      	add	r2, r3
 801cbf6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801cbfa:	b17b      	cbz	r3, 801cc1c <__mdiff+0x104>
 801cbfc:	6106      	str	r6, [r0, #16]
 801cbfe:	e7a5      	b.n	801cb4c <__mdiff+0x34>
 801cc00:	f855 8b04 	ldr.w	r8, [r5], #4
 801cc04:	fa17 f488 	uxtah	r4, r7, r8
 801cc08:	1422      	asrs	r2, r4, #16
 801cc0a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801cc0e:	b2a4      	uxth	r4, r4
 801cc10:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801cc14:	f84e 4b04 	str.w	r4, [lr], #4
 801cc18:	1417      	asrs	r7, r2, #16
 801cc1a:	e7e0      	b.n	801cbde <__mdiff+0xc6>
 801cc1c:	3e01      	subs	r6, #1
 801cc1e:	e7ea      	b.n	801cbf6 <__mdiff+0xde>
 801cc20:	0802125c 	.word	0x0802125c
 801cc24:	080212ec 	.word	0x080212ec

0801cc28 <__ulp>:
 801cc28:	b082      	sub	sp, #8
 801cc2a:	ed8d 0b00 	vstr	d0, [sp]
 801cc2e:	9b01      	ldr	r3, [sp, #4]
 801cc30:	4912      	ldr	r1, [pc, #72]	; (801cc7c <__ulp+0x54>)
 801cc32:	4019      	ands	r1, r3
 801cc34:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801cc38:	2900      	cmp	r1, #0
 801cc3a:	dd05      	ble.n	801cc48 <__ulp+0x20>
 801cc3c:	2200      	movs	r2, #0
 801cc3e:	460b      	mov	r3, r1
 801cc40:	ec43 2b10 	vmov	d0, r2, r3
 801cc44:	b002      	add	sp, #8
 801cc46:	4770      	bx	lr
 801cc48:	4249      	negs	r1, r1
 801cc4a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801cc4e:	ea4f 5021 	mov.w	r0, r1, asr #20
 801cc52:	f04f 0200 	mov.w	r2, #0
 801cc56:	f04f 0300 	mov.w	r3, #0
 801cc5a:	da04      	bge.n	801cc66 <__ulp+0x3e>
 801cc5c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801cc60:	fa41 f300 	asr.w	r3, r1, r0
 801cc64:	e7ec      	b.n	801cc40 <__ulp+0x18>
 801cc66:	f1a0 0114 	sub.w	r1, r0, #20
 801cc6a:	291e      	cmp	r1, #30
 801cc6c:	bfda      	itte	le
 801cc6e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801cc72:	fa20 f101 	lsrle.w	r1, r0, r1
 801cc76:	2101      	movgt	r1, #1
 801cc78:	460a      	mov	r2, r1
 801cc7a:	e7e1      	b.n	801cc40 <__ulp+0x18>
 801cc7c:	7ff00000 	.word	0x7ff00000

0801cc80 <__b2d>:
 801cc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc82:	6905      	ldr	r5, [r0, #16]
 801cc84:	f100 0714 	add.w	r7, r0, #20
 801cc88:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801cc8c:	1f2e      	subs	r6, r5, #4
 801cc8e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801cc92:	4620      	mov	r0, r4
 801cc94:	f7ff fd52 	bl	801c73c <__hi0bits>
 801cc98:	f1c0 0320 	rsb	r3, r0, #32
 801cc9c:	280a      	cmp	r0, #10
 801cc9e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801cd1c <__b2d+0x9c>
 801cca2:	600b      	str	r3, [r1, #0]
 801cca4:	dc14      	bgt.n	801ccd0 <__b2d+0x50>
 801cca6:	f1c0 0e0b 	rsb	lr, r0, #11
 801ccaa:	fa24 f10e 	lsr.w	r1, r4, lr
 801ccae:	42b7      	cmp	r7, r6
 801ccb0:	ea41 030c 	orr.w	r3, r1, ip
 801ccb4:	bf34      	ite	cc
 801ccb6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801ccba:	2100      	movcs	r1, #0
 801ccbc:	3015      	adds	r0, #21
 801ccbe:	fa04 f000 	lsl.w	r0, r4, r0
 801ccc2:	fa21 f10e 	lsr.w	r1, r1, lr
 801ccc6:	ea40 0201 	orr.w	r2, r0, r1
 801ccca:	ec43 2b10 	vmov	d0, r2, r3
 801ccce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ccd0:	42b7      	cmp	r7, r6
 801ccd2:	bf3a      	itte	cc
 801ccd4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801ccd8:	f1a5 0608 	subcc.w	r6, r5, #8
 801ccdc:	2100      	movcs	r1, #0
 801ccde:	380b      	subs	r0, #11
 801cce0:	d017      	beq.n	801cd12 <__b2d+0x92>
 801cce2:	f1c0 0c20 	rsb	ip, r0, #32
 801cce6:	fa04 f500 	lsl.w	r5, r4, r0
 801ccea:	42be      	cmp	r6, r7
 801ccec:	fa21 f40c 	lsr.w	r4, r1, ip
 801ccf0:	ea45 0504 	orr.w	r5, r5, r4
 801ccf4:	bf8c      	ite	hi
 801ccf6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801ccfa:	2400      	movls	r4, #0
 801ccfc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801cd00:	fa01 f000 	lsl.w	r0, r1, r0
 801cd04:	fa24 f40c 	lsr.w	r4, r4, ip
 801cd08:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801cd0c:	ea40 0204 	orr.w	r2, r0, r4
 801cd10:	e7db      	b.n	801ccca <__b2d+0x4a>
 801cd12:	ea44 030c 	orr.w	r3, r4, ip
 801cd16:	460a      	mov	r2, r1
 801cd18:	e7d7      	b.n	801ccca <__b2d+0x4a>
 801cd1a:	bf00      	nop
 801cd1c:	3ff00000 	.word	0x3ff00000

0801cd20 <__d2b>:
 801cd20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801cd24:	4689      	mov	r9, r1
 801cd26:	2101      	movs	r1, #1
 801cd28:	ec57 6b10 	vmov	r6, r7, d0
 801cd2c:	4690      	mov	r8, r2
 801cd2e:	f7ff fc0f 	bl	801c550 <_Balloc>
 801cd32:	4604      	mov	r4, r0
 801cd34:	b930      	cbnz	r0, 801cd44 <__d2b+0x24>
 801cd36:	4602      	mov	r2, r0
 801cd38:	4b25      	ldr	r3, [pc, #148]	; (801cdd0 <__d2b+0xb0>)
 801cd3a:	4826      	ldr	r0, [pc, #152]	; (801cdd4 <__d2b+0xb4>)
 801cd3c:	f240 310a 	movw	r1, #778	; 0x30a
 801cd40:	f000 fa9a 	bl	801d278 <__assert_func>
 801cd44:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801cd48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801cd4c:	bb35      	cbnz	r5, 801cd9c <__d2b+0x7c>
 801cd4e:	2e00      	cmp	r6, #0
 801cd50:	9301      	str	r3, [sp, #4]
 801cd52:	d028      	beq.n	801cda6 <__d2b+0x86>
 801cd54:	4668      	mov	r0, sp
 801cd56:	9600      	str	r6, [sp, #0]
 801cd58:	f7ff fd10 	bl	801c77c <__lo0bits>
 801cd5c:	9900      	ldr	r1, [sp, #0]
 801cd5e:	b300      	cbz	r0, 801cda2 <__d2b+0x82>
 801cd60:	9a01      	ldr	r2, [sp, #4]
 801cd62:	f1c0 0320 	rsb	r3, r0, #32
 801cd66:	fa02 f303 	lsl.w	r3, r2, r3
 801cd6a:	430b      	orrs	r3, r1
 801cd6c:	40c2      	lsrs	r2, r0
 801cd6e:	6163      	str	r3, [r4, #20]
 801cd70:	9201      	str	r2, [sp, #4]
 801cd72:	9b01      	ldr	r3, [sp, #4]
 801cd74:	61a3      	str	r3, [r4, #24]
 801cd76:	2b00      	cmp	r3, #0
 801cd78:	bf14      	ite	ne
 801cd7a:	2202      	movne	r2, #2
 801cd7c:	2201      	moveq	r2, #1
 801cd7e:	6122      	str	r2, [r4, #16]
 801cd80:	b1d5      	cbz	r5, 801cdb8 <__d2b+0x98>
 801cd82:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801cd86:	4405      	add	r5, r0
 801cd88:	f8c9 5000 	str.w	r5, [r9]
 801cd8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801cd90:	f8c8 0000 	str.w	r0, [r8]
 801cd94:	4620      	mov	r0, r4
 801cd96:	b003      	add	sp, #12
 801cd98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cd9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cda0:	e7d5      	b.n	801cd4e <__d2b+0x2e>
 801cda2:	6161      	str	r1, [r4, #20]
 801cda4:	e7e5      	b.n	801cd72 <__d2b+0x52>
 801cda6:	a801      	add	r0, sp, #4
 801cda8:	f7ff fce8 	bl	801c77c <__lo0bits>
 801cdac:	9b01      	ldr	r3, [sp, #4]
 801cdae:	6163      	str	r3, [r4, #20]
 801cdb0:	2201      	movs	r2, #1
 801cdb2:	6122      	str	r2, [r4, #16]
 801cdb4:	3020      	adds	r0, #32
 801cdb6:	e7e3      	b.n	801cd80 <__d2b+0x60>
 801cdb8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801cdbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801cdc0:	f8c9 0000 	str.w	r0, [r9]
 801cdc4:	6918      	ldr	r0, [r3, #16]
 801cdc6:	f7ff fcb9 	bl	801c73c <__hi0bits>
 801cdca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801cdce:	e7df      	b.n	801cd90 <__d2b+0x70>
 801cdd0:	0802125c 	.word	0x0802125c
 801cdd4:	080212ec 	.word	0x080212ec

0801cdd8 <__ratio>:
 801cdd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cddc:	4688      	mov	r8, r1
 801cdde:	4669      	mov	r1, sp
 801cde0:	4681      	mov	r9, r0
 801cde2:	f7ff ff4d 	bl	801cc80 <__b2d>
 801cde6:	a901      	add	r1, sp, #4
 801cde8:	4640      	mov	r0, r8
 801cdea:	ec55 4b10 	vmov	r4, r5, d0
 801cdee:	f7ff ff47 	bl	801cc80 <__b2d>
 801cdf2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801cdf6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801cdfa:	eba3 0c02 	sub.w	ip, r3, r2
 801cdfe:	e9dd 3200 	ldrd	r3, r2, [sp]
 801ce02:	1a9b      	subs	r3, r3, r2
 801ce04:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801ce08:	ec51 0b10 	vmov	r0, r1, d0
 801ce0c:	2b00      	cmp	r3, #0
 801ce0e:	bfd6      	itet	le
 801ce10:	460a      	movle	r2, r1
 801ce12:	462a      	movgt	r2, r5
 801ce14:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801ce18:	468b      	mov	fp, r1
 801ce1a:	462f      	mov	r7, r5
 801ce1c:	bfd4      	ite	le
 801ce1e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801ce22:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801ce26:	4620      	mov	r0, r4
 801ce28:	ee10 2a10 	vmov	r2, s0
 801ce2c:	465b      	mov	r3, fp
 801ce2e:	4639      	mov	r1, r7
 801ce30:	f7e3 fd0c 	bl	800084c <__aeabi_ddiv>
 801ce34:	ec41 0b10 	vmov	d0, r0, r1
 801ce38:	b003      	add	sp, #12
 801ce3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ce3e <__copybits>:
 801ce3e:	3901      	subs	r1, #1
 801ce40:	b570      	push	{r4, r5, r6, lr}
 801ce42:	1149      	asrs	r1, r1, #5
 801ce44:	6914      	ldr	r4, [r2, #16]
 801ce46:	3101      	adds	r1, #1
 801ce48:	f102 0314 	add.w	r3, r2, #20
 801ce4c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801ce50:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801ce54:	1f05      	subs	r5, r0, #4
 801ce56:	42a3      	cmp	r3, r4
 801ce58:	d30c      	bcc.n	801ce74 <__copybits+0x36>
 801ce5a:	1aa3      	subs	r3, r4, r2
 801ce5c:	3b11      	subs	r3, #17
 801ce5e:	f023 0303 	bic.w	r3, r3, #3
 801ce62:	3211      	adds	r2, #17
 801ce64:	42a2      	cmp	r2, r4
 801ce66:	bf88      	it	hi
 801ce68:	2300      	movhi	r3, #0
 801ce6a:	4418      	add	r0, r3
 801ce6c:	2300      	movs	r3, #0
 801ce6e:	4288      	cmp	r0, r1
 801ce70:	d305      	bcc.n	801ce7e <__copybits+0x40>
 801ce72:	bd70      	pop	{r4, r5, r6, pc}
 801ce74:	f853 6b04 	ldr.w	r6, [r3], #4
 801ce78:	f845 6f04 	str.w	r6, [r5, #4]!
 801ce7c:	e7eb      	b.n	801ce56 <__copybits+0x18>
 801ce7e:	f840 3b04 	str.w	r3, [r0], #4
 801ce82:	e7f4      	b.n	801ce6e <__copybits+0x30>

0801ce84 <__any_on>:
 801ce84:	f100 0214 	add.w	r2, r0, #20
 801ce88:	6900      	ldr	r0, [r0, #16]
 801ce8a:	114b      	asrs	r3, r1, #5
 801ce8c:	4298      	cmp	r0, r3
 801ce8e:	b510      	push	{r4, lr}
 801ce90:	db11      	blt.n	801ceb6 <__any_on+0x32>
 801ce92:	dd0a      	ble.n	801ceaa <__any_on+0x26>
 801ce94:	f011 011f 	ands.w	r1, r1, #31
 801ce98:	d007      	beq.n	801ceaa <__any_on+0x26>
 801ce9a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801ce9e:	fa24 f001 	lsr.w	r0, r4, r1
 801cea2:	fa00 f101 	lsl.w	r1, r0, r1
 801cea6:	428c      	cmp	r4, r1
 801cea8:	d10b      	bne.n	801cec2 <__any_on+0x3e>
 801ceaa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ceae:	4293      	cmp	r3, r2
 801ceb0:	d803      	bhi.n	801ceba <__any_on+0x36>
 801ceb2:	2000      	movs	r0, #0
 801ceb4:	bd10      	pop	{r4, pc}
 801ceb6:	4603      	mov	r3, r0
 801ceb8:	e7f7      	b.n	801ceaa <__any_on+0x26>
 801ceba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801cebe:	2900      	cmp	r1, #0
 801cec0:	d0f5      	beq.n	801ceae <__any_on+0x2a>
 801cec2:	2001      	movs	r0, #1
 801cec4:	e7f6      	b.n	801ceb4 <__any_on+0x30>

0801cec6 <_calloc_r>:
 801cec6:	b513      	push	{r0, r1, r4, lr}
 801cec8:	434a      	muls	r2, r1
 801ceca:	4611      	mov	r1, r2
 801cecc:	9201      	str	r2, [sp, #4]
 801cece:	f7fc fa85 	bl	80193dc <_malloc_r>
 801ced2:	4604      	mov	r4, r0
 801ced4:	b118      	cbz	r0, 801cede <_calloc_r+0x18>
 801ced6:	9a01      	ldr	r2, [sp, #4]
 801ced8:	2100      	movs	r1, #0
 801ceda:	f7fc fa27 	bl	801932c <memset>
 801cede:	4620      	mov	r0, r4
 801cee0:	b002      	add	sp, #8
 801cee2:	bd10      	pop	{r4, pc}

0801cee4 <_realloc_r>:
 801cee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cee6:	4607      	mov	r7, r0
 801cee8:	4614      	mov	r4, r2
 801ceea:	460e      	mov	r6, r1
 801ceec:	b921      	cbnz	r1, 801cef8 <_realloc_r+0x14>
 801ceee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801cef2:	4611      	mov	r1, r2
 801cef4:	f7fc ba72 	b.w	80193dc <_malloc_r>
 801cef8:	b922      	cbnz	r2, 801cf04 <_realloc_r+0x20>
 801cefa:	f7fc fa1f 	bl	801933c <_free_r>
 801cefe:	4625      	mov	r5, r4
 801cf00:	4628      	mov	r0, r5
 801cf02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf04:	f000 fbbc 	bl	801d680 <_malloc_usable_size_r>
 801cf08:	42a0      	cmp	r0, r4
 801cf0a:	d20f      	bcs.n	801cf2c <_realloc_r+0x48>
 801cf0c:	4621      	mov	r1, r4
 801cf0e:	4638      	mov	r0, r7
 801cf10:	f7fc fa64 	bl	80193dc <_malloc_r>
 801cf14:	4605      	mov	r5, r0
 801cf16:	2800      	cmp	r0, #0
 801cf18:	d0f2      	beq.n	801cf00 <_realloc_r+0x1c>
 801cf1a:	4631      	mov	r1, r6
 801cf1c:	4622      	mov	r2, r4
 801cf1e:	f7fc f9f7 	bl	8019310 <memcpy>
 801cf22:	4631      	mov	r1, r6
 801cf24:	4638      	mov	r0, r7
 801cf26:	f7fc fa09 	bl	801933c <_free_r>
 801cf2a:	e7e9      	b.n	801cf00 <_realloc_r+0x1c>
 801cf2c:	4635      	mov	r5, r6
 801cf2e:	e7e7      	b.n	801cf00 <_realloc_r+0x1c>

0801cf30 <__ssputs_r>:
 801cf30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cf34:	688e      	ldr	r6, [r1, #8]
 801cf36:	429e      	cmp	r6, r3
 801cf38:	4682      	mov	sl, r0
 801cf3a:	460c      	mov	r4, r1
 801cf3c:	4690      	mov	r8, r2
 801cf3e:	461f      	mov	r7, r3
 801cf40:	d838      	bhi.n	801cfb4 <__ssputs_r+0x84>
 801cf42:	898a      	ldrh	r2, [r1, #12]
 801cf44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801cf48:	d032      	beq.n	801cfb0 <__ssputs_r+0x80>
 801cf4a:	6825      	ldr	r5, [r4, #0]
 801cf4c:	6909      	ldr	r1, [r1, #16]
 801cf4e:	eba5 0901 	sub.w	r9, r5, r1
 801cf52:	6965      	ldr	r5, [r4, #20]
 801cf54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cf58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801cf5c:	3301      	adds	r3, #1
 801cf5e:	444b      	add	r3, r9
 801cf60:	106d      	asrs	r5, r5, #1
 801cf62:	429d      	cmp	r5, r3
 801cf64:	bf38      	it	cc
 801cf66:	461d      	movcc	r5, r3
 801cf68:	0553      	lsls	r3, r2, #21
 801cf6a:	d531      	bpl.n	801cfd0 <__ssputs_r+0xa0>
 801cf6c:	4629      	mov	r1, r5
 801cf6e:	f7fc fa35 	bl	80193dc <_malloc_r>
 801cf72:	4606      	mov	r6, r0
 801cf74:	b950      	cbnz	r0, 801cf8c <__ssputs_r+0x5c>
 801cf76:	230c      	movs	r3, #12
 801cf78:	f8ca 3000 	str.w	r3, [sl]
 801cf7c:	89a3      	ldrh	r3, [r4, #12]
 801cf7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cf82:	81a3      	strh	r3, [r4, #12]
 801cf84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cf88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cf8c:	6921      	ldr	r1, [r4, #16]
 801cf8e:	464a      	mov	r2, r9
 801cf90:	f7fc f9be 	bl	8019310 <memcpy>
 801cf94:	89a3      	ldrh	r3, [r4, #12]
 801cf96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801cf9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cf9e:	81a3      	strh	r3, [r4, #12]
 801cfa0:	6126      	str	r6, [r4, #16]
 801cfa2:	6165      	str	r5, [r4, #20]
 801cfa4:	444e      	add	r6, r9
 801cfa6:	eba5 0509 	sub.w	r5, r5, r9
 801cfaa:	6026      	str	r6, [r4, #0]
 801cfac:	60a5      	str	r5, [r4, #8]
 801cfae:	463e      	mov	r6, r7
 801cfb0:	42be      	cmp	r6, r7
 801cfb2:	d900      	bls.n	801cfb6 <__ssputs_r+0x86>
 801cfb4:	463e      	mov	r6, r7
 801cfb6:	4632      	mov	r2, r6
 801cfb8:	6820      	ldr	r0, [r4, #0]
 801cfba:	4641      	mov	r1, r8
 801cfbc:	f000 fb46 	bl	801d64c <memmove>
 801cfc0:	68a3      	ldr	r3, [r4, #8]
 801cfc2:	6822      	ldr	r2, [r4, #0]
 801cfc4:	1b9b      	subs	r3, r3, r6
 801cfc6:	4432      	add	r2, r6
 801cfc8:	60a3      	str	r3, [r4, #8]
 801cfca:	6022      	str	r2, [r4, #0]
 801cfcc:	2000      	movs	r0, #0
 801cfce:	e7db      	b.n	801cf88 <__ssputs_r+0x58>
 801cfd0:	462a      	mov	r2, r5
 801cfd2:	f7ff ff87 	bl	801cee4 <_realloc_r>
 801cfd6:	4606      	mov	r6, r0
 801cfd8:	2800      	cmp	r0, #0
 801cfda:	d1e1      	bne.n	801cfa0 <__ssputs_r+0x70>
 801cfdc:	6921      	ldr	r1, [r4, #16]
 801cfde:	4650      	mov	r0, sl
 801cfe0:	f7fc f9ac 	bl	801933c <_free_r>
 801cfe4:	e7c7      	b.n	801cf76 <__ssputs_r+0x46>
	...

0801cfe8 <_svfiprintf_r>:
 801cfe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfec:	4698      	mov	r8, r3
 801cfee:	898b      	ldrh	r3, [r1, #12]
 801cff0:	061b      	lsls	r3, r3, #24
 801cff2:	b09d      	sub	sp, #116	; 0x74
 801cff4:	4607      	mov	r7, r0
 801cff6:	460d      	mov	r5, r1
 801cff8:	4614      	mov	r4, r2
 801cffa:	d50e      	bpl.n	801d01a <_svfiprintf_r+0x32>
 801cffc:	690b      	ldr	r3, [r1, #16]
 801cffe:	b963      	cbnz	r3, 801d01a <_svfiprintf_r+0x32>
 801d000:	2140      	movs	r1, #64	; 0x40
 801d002:	f7fc f9eb 	bl	80193dc <_malloc_r>
 801d006:	6028      	str	r0, [r5, #0]
 801d008:	6128      	str	r0, [r5, #16]
 801d00a:	b920      	cbnz	r0, 801d016 <_svfiprintf_r+0x2e>
 801d00c:	230c      	movs	r3, #12
 801d00e:	603b      	str	r3, [r7, #0]
 801d010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d014:	e0d1      	b.n	801d1ba <_svfiprintf_r+0x1d2>
 801d016:	2340      	movs	r3, #64	; 0x40
 801d018:	616b      	str	r3, [r5, #20]
 801d01a:	2300      	movs	r3, #0
 801d01c:	9309      	str	r3, [sp, #36]	; 0x24
 801d01e:	2320      	movs	r3, #32
 801d020:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d024:	f8cd 800c 	str.w	r8, [sp, #12]
 801d028:	2330      	movs	r3, #48	; 0x30
 801d02a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801d1d4 <_svfiprintf_r+0x1ec>
 801d02e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d032:	f04f 0901 	mov.w	r9, #1
 801d036:	4623      	mov	r3, r4
 801d038:	469a      	mov	sl, r3
 801d03a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d03e:	b10a      	cbz	r2, 801d044 <_svfiprintf_r+0x5c>
 801d040:	2a25      	cmp	r2, #37	; 0x25
 801d042:	d1f9      	bne.n	801d038 <_svfiprintf_r+0x50>
 801d044:	ebba 0b04 	subs.w	fp, sl, r4
 801d048:	d00b      	beq.n	801d062 <_svfiprintf_r+0x7a>
 801d04a:	465b      	mov	r3, fp
 801d04c:	4622      	mov	r2, r4
 801d04e:	4629      	mov	r1, r5
 801d050:	4638      	mov	r0, r7
 801d052:	f7ff ff6d 	bl	801cf30 <__ssputs_r>
 801d056:	3001      	adds	r0, #1
 801d058:	f000 80aa 	beq.w	801d1b0 <_svfiprintf_r+0x1c8>
 801d05c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d05e:	445a      	add	r2, fp
 801d060:	9209      	str	r2, [sp, #36]	; 0x24
 801d062:	f89a 3000 	ldrb.w	r3, [sl]
 801d066:	2b00      	cmp	r3, #0
 801d068:	f000 80a2 	beq.w	801d1b0 <_svfiprintf_r+0x1c8>
 801d06c:	2300      	movs	r3, #0
 801d06e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d072:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d076:	f10a 0a01 	add.w	sl, sl, #1
 801d07a:	9304      	str	r3, [sp, #16]
 801d07c:	9307      	str	r3, [sp, #28]
 801d07e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d082:	931a      	str	r3, [sp, #104]	; 0x68
 801d084:	4654      	mov	r4, sl
 801d086:	2205      	movs	r2, #5
 801d088:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d08c:	4851      	ldr	r0, [pc, #324]	; (801d1d4 <_svfiprintf_r+0x1ec>)
 801d08e:	f7e3 f8a7 	bl	80001e0 <memchr>
 801d092:	9a04      	ldr	r2, [sp, #16]
 801d094:	b9d8      	cbnz	r0, 801d0ce <_svfiprintf_r+0xe6>
 801d096:	06d0      	lsls	r0, r2, #27
 801d098:	bf44      	itt	mi
 801d09a:	2320      	movmi	r3, #32
 801d09c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d0a0:	0711      	lsls	r1, r2, #28
 801d0a2:	bf44      	itt	mi
 801d0a4:	232b      	movmi	r3, #43	; 0x2b
 801d0a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d0aa:	f89a 3000 	ldrb.w	r3, [sl]
 801d0ae:	2b2a      	cmp	r3, #42	; 0x2a
 801d0b0:	d015      	beq.n	801d0de <_svfiprintf_r+0xf6>
 801d0b2:	9a07      	ldr	r2, [sp, #28]
 801d0b4:	4654      	mov	r4, sl
 801d0b6:	2000      	movs	r0, #0
 801d0b8:	f04f 0c0a 	mov.w	ip, #10
 801d0bc:	4621      	mov	r1, r4
 801d0be:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d0c2:	3b30      	subs	r3, #48	; 0x30
 801d0c4:	2b09      	cmp	r3, #9
 801d0c6:	d94e      	bls.n	801d166 <_svfiprintf_r+0x17e>
 801d0c8:	b1b0      	cbz	r0, 801d0f8 <_svfiprintf_r+0x110>
 801d0ca:	9207      	str	r2, [sp, #28]
 801d0cc:	e014      	b.n	801d0f8 <_svfiprintf_r+0x110>
 801d0ce:	eba0 0308 	sub.w	r3, r0, r8
 801d0d2:	fa09 f303 	lsl.w	r3, r9, r3
 801d0d6:	4313      	orrs	r3, r2
 801d0d8:	9304      	str	r3, [sp, #16]
 801d0da:	46a2      	mov	sl, r4
 801d0dc:	e7d2      	b.n	801d084 <_svfiprintf_r+0x9c>
 801d0de:	9b03      	ldr	r3, [sp, #12]
 801d0e0:	1d19      	adds	r1, r3, #4
 801d0e2:	681b      	ldr	r3, [r3, #0]
 801d0e4:	9103      	str	r1, [sp, #12]
 801d0e6:	2b00      	cmp	r3, #0
 801d0e8:	bfbb      	ittet	lt
 801d0ea:	425b      	neglt	r3, r3
 801d0ec:	f042 0202 	orrlt.w	r2, r2, #2
 801d0f0:	9307      	strge	r3, [sp, #28]
 801d0f2:	9307      	strlt	r3, [sp, #28]
 801d0f4:	bfb8      	it	lt
 801d0f6:	9204      	strlt	r2, [sp, #16]
 801d0f8:	7823      	ldrb	r3, [r4, #0]
 801d0fa:	2b2e      	cmp	r3, #46	; 0x2e
 801d0fc:	d10c      	bne.n	801d118 <_svfiprintf_r+0x130>
 801d0fe:	7863      	ldrb	r3, [r4, #1]
 801d100:	2b2a      	cmp	r3, #42	; 0x2a
 801d102:	d135      	bne.n	801d170 <_svfiprintf_r+0x188>
 801d104:	9b03      	ldr	r3, [sp, #12]
 801d106:	1d1a      	adds	r2, r3, #4
 801d108:	681b      	ldr	r3, [r3, #0]
 801d10a:	9203      	str	r2, [sp, #12]
 801d10c:	2b00      	cmp	r3, #0
 801d10e:	bfb8      	it	lt
 801d110:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801d114:	3402      	adds	r4, #2
 801d116:	9305      	str	r3, [sp, #20]
 801d118:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801d1e4 <_svfiprintf_r+0x1fc>
 801d11c:	7821      	ldrb	r1, [r4, #0]
 801d11e:	2203      	movs	r2, #3
 801d120:	4650      	mov	r0, sl
 801d122:	f7e3 f85d 	bl	80001e0 <memchr>
 801d126:	b140      	cbz	r0, 801d13a <_svfiprintf_r+0x152>
 801d128:	2340      	movs	r3, #64	; 0x40
 801d12a:	eba0 000a 	sub.w	r0, r0, sl
 801d12e:	fa03 f000 	lsl.w	r0, r3, r0
 801d132:	9b04      	ldr	r3, [sp, #16]
 801d134:	4303      	orrs	r3, r0
 801d136:	3401      	adds	r4, #1
 801d138:	9304      	str	r3, [sp, #16]
 801d13a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d13e:	4826      	ldr	r0, [pc, #152]	; (801d1d8 <_svfiprintf_r+0x1f0>)
 801d140:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d144:	2206      	movs	r2, #6
 801d146:	f7e3 f84b 	bl	80001e0 <memchr>
 801d14a:	2800      	cmp	r0, #0
 801d14c:	d038      	beq.n	801d1c0 <_svfiprintf_r+0x1d8>
 801d14e:	4b23      	ldr	r3, [pc, #140]	; (801d1dc <_svfiprintf_r+0x1f4>)
 801d150:	bb1b      	cbnz	r3, 801d19a <_svfiprintf_r+0x1b2>
 801d152:	9b03      	ldr	r3, [sp, #12]
 801d154:	3307      	adds	r3, #7
 801d156:	f023 0307 	bic.w	r3, r3, #7
 801d15a:	3308      	adds	r3, #8
 801d15c:	9303      	str	r3, [sp, #12]
 801d15e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d160:	4433      	add	r3, r6
 801d162:	9309      	str	r3, [sp, #36]	; 0x24
 801d164:	e767      	b.n	801d036 <_svfiprintf_r+0x4e>
 801d166:	fb0c 3202 	mla	r2, ip, r2, r3
 801d16a:	460c      	mov	r4, r1
 801d16c:	2001      	movs	r0, #1
 801d16e:	e7a5      	b.n	801d0bc <_svfiprintf_r+0xd4>
 801d170:	2300      	movs	r3, #0
 801d172:	3401      	adds	r4, #1
 801d174:	9305      	str	r3, [sp, #20]
 801d176:	4619      	mov	r1, r3
 801d178:	f04f 0c0a 	mov.w	ip, #10
 801d17c:	4620      	mov	r0, r4
 801d17e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d182:	3a30      	subs	r2, #48	; 0x30
 801d184:	2a09      	cmp	r2, #9
 801d186:	d903      	bls.n	801d190 <_svfiprintf_r+0x1a8>
 801d188:	2b00      	cmp	r3, #0
 801d18a:	d0c5      	beq.n	801d118 <_svfiprintf_r+0x130>
 801d18c:	9105      	str	r1, [sp, #20]
 801d18e:	e7c3      	b.n	801d118 <_svfiprintf_r+0x130>
 801d190:	fb0c 2101 	mla	r1, ip, r1, r2
 801d194:	4604      	mov	r4, r0
 801d196:	2301      	movs	r3, #1
 801d198:	e7f0      	b.n	801d17c <_svfiprintf_r+0x194>
 801d19a:	ab03      	add	r3, sp, #12
 801d19c:	9300      	str	r3, [sp, #0]
 801d19e:	462a      	mov	r2, r5
 801d1a0:	4b0f      	ldr	r3, [pc, #60]	; (801d1e0 <_svfiprintf_r+0x1f8>)
 801d1a2:	a904      	add	r1, sp, #16
 801d1a4:	4638      	mov	r0, r7
 801d1a6:	f7fc fa13 	bl	80195d0 <_printf_float>
 801d1aa:	1c42      	adds	r2, r0, #1
 801d1ac:	4606      	mov	r6, r0
 801d1ae:	d1d6      	bne.n	801d15e <_svfiprintf_r+0x176>
 801d1b0:	89ab      	ldrh	r3, [r5, #12]
 801d1b2:	065b      	lsls	r3, r3, #25
 801d1b4:	f53f af2c 	bmi.w	801d010 <_svfiprintf_r+0x28>
 801d1b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d1ba:	b01d      	add	sp, #116	; 0x74
 801d1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1c0:	ab03      	add	r3, sp, #12
 801d1c2:	9300      	str	r3, [sp, #0]
 801d1c4:	462a      	mov	r2, r5
 801d1c6:	4b06      	ldr	r3, [pc, #24]	; (801d1e0 <_svfiprintf_r+0x1f8>)
 801d1c8:	a904      	add	r1, sp, #16
 801d1ca:	4638      	mov	r0, r7
 801d1cc:	f7fc fca4 	bl	8019b18 <_printf_i>
 801d1d0:	e7eb      	b.n	801d1aa <_svfiprintf_r+0x1c2>
 801d1d2:	bf00      	nop
 801d1d4:	0802144c 	.word	0x0802144c
 801d1d8:	08021456 	.word	0x08021456
 801d1dc:	080195d1 	.word	0x080195d1
 801d1e0:	0801cf31 	.word	0x0801cf31
 801d1e4:	08021452 	.word	0x08021452

0801d1e8 <_read_r>:
 801d1e8:	b538      	push	{r3, r4, r5, lr}
 801d1ea:	4d07      	ldr	r5, [pc, #28]	; (801d208 <_read_r+0x20>)
 801d1ec:	4604      	mov	r4, r0
 801d1ee:	4608      	mov	r0, r1
 801d1f0:	4611      	mov	r1, r2
 801d1f2:	2200      	movs	r2, #0
 801d1f4:	602a      	str	r2, [r5, #0]
 801d1f6:	461a      	mov	r2, r3
 801d1f8:	f7ef ff46 	bl	800d088 <_read>
 801d1fc:	1c43      	adds	r3, r0, #1
 801d1fe:	d102      	bne.n	801d206 <_read_r+0x1e>
 801d200:	682b      	ldr	r3, [r5, #0]
 801d202:	b103      	cbz	r3, 801d206 <_read_r+0x1e>
 801d204:	6023      	str	r3, [r4, #0]
 801d206:	bd38      	pop	{r3, r4, r5, pc}
 801d208:	2000a578 	.word	0x2000a578
 801d20c:	00000000 	.word	0x00000000

0801d210 <nan>:
 801d210:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d218 <nan+0x8>
 801d214:	4770      	bx	lr
 801d216:	bf00      	nop
 801d218:	00000000 	.word	0x00000000
 801d21c:	7ff80000 	.word	0x7ff80000

0801d220 <finitef>:
 801d220:	b082      	sub	sp, #8
 801d222:	ed8d 0a01 	vstr	s0, [sp, #4]
 801d226:	9801      	ldr	r0, [sp, #4]
 801d228:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801d22c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801d230:	bfac      	ite	ge
 801d232:	2000      	movge	r0, #0
 801d234:	2001      	movlt	r0, #1
 801d236:	b002      	add	sp, #8
 801d238:	4770      	bx	lr

0801d23a <strncmp>:
 801d23a:	b510      	push	{r4, lr}
 801d23c:	b16a      	cbz	r2, 801d25a <strncmp+0x20>
 801d23e:	3901      	subs	r1, #1
 801d240:	1884      	adds	r4, r0, r2
 801d242:	f810 3b01 	ldrb.w	r3, [r0], #1
 801d246:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801d24a:	4293      	cmp	r3, r2
 801d24c:	d103      	bne.n	801d256 <strncmp+0x1c>
 801d24e:	42a0      	cmp	r0, r4
 801d250:	d001      	beq.n	801d256 <strncmp+0x1c>
 801d252:	2b00      	cmp	r3, #0
 801d254:	d1f5      	bne.n	801d242 <strncmp+0x8>
 801d256:	1a98      	subs	r0, r3, r2
 801d258:	bd10      	pop	{r4, pc}
 801d25a:	4610      	mov	r0, r2
 801d25c:	e7fc      	b.n	801d258 <strncmp+0x1e>

0801d25e <__ascii_wctomb>:
 801d25e:	b149      	cbz	r1, 801d274 <__ascii_wctomb+0x16>
 801d260:	2aff      	cmp	r2, #255	; 0xff
 801d262:	bf85      	ittet	hi
 801d264:	238a      	movhi	r3, #138	; 0x8a
 801d266:	6003      	strhi	r3, [r0, #0]
 801d268:	700a      	strbls	r2, [r1, #0]
 801d26a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801d26e:	bf98      	it	ls
 801d270:	2001      	movls	r0, #1
 801d272:	4770      	bx	lr
 801d274:	4608      	mov	r0, r1
 801d276:	4770      	bx	lr

0801d278 <__assert_func>:
 801d278:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d27a:	4614      	mov	r4, r2
 801d27c:	461a      	mov	r2, r3
 801d27e:	4b09      	ldr	r3, [pc, #36]	; (801d2a4 <__assert_func+0x2c>)
 801d280:	681b      	ldr	r3, [r3, #0]
 801d282:	4605      	mov	r5, r0
 801d284:	68d8      	ldr	r0, [r3, #12]
 801d286:	b14c      	cbz	r4, 801d29c <__assert_func+0x24>
 801d288:	4b07      	ldr	r3, [pc, #28]	; (801d2a8 <__assert_func+0x30>)
 801d28a:	9100      	str	r1, [sp, #0]
 801d28c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d290:	4906      	ldr	r1, [pc, #24]	; (801d2ac <__assert_func+0x34>)
 801d292:	462b      	mov	r3, r5
 801d294:	f000 f9a6 	bl	801d5e4 <fiprintf>
 801d298:	f000 fc14 	bl	801dac4 <abort>
 801d29c:	4b04      	ldr	r3, [pc, #16]	; (801d2b0 <__assert_func+0x38>)
 801d29e:	461c      	mov	r4, r3
 801d2a0:	e7f3      	b.n	801d28a <__assert_func+0x12>
 801d2a2:	bf00      	nop
 801d2a4:	200000d0 	.word	0x200000d0
 801d2a8:	0802145d 	.word	0x0802145d
 801d2ac:	0802146a 	.word	0x0802146a
 801d2b0:	08021498 	.word	0x08021498

0801d2b4 <__sflush_r>:
 801d2b4:	898a      	ldrh	r2, [r1, #12]
 801d2b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d2ba:	4605      	mov	r5, r0
 801d2bc:	0710      	lsls	r0, r2, #28
 801d2be:	460c      	mov	r4, r1
 801d2c0:	d458      	bmi.n	801d374 <__sflush_r+0xc0>
 801d2c2:	684b      	ldr	r3, [r1, #4]
 801d2c4:	2b00      	cmp	r3, #0
 801d2c6:	dc05      	bgt.n	801d2d4 <__sflush_r+0x20>
 801d2c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d2ca:	2b00      	cmp	r3, #0
 801d2cc:	dc02      	bgt.n	801d2d4 <__sflush_r+0x20>
 801d2ce:	2000      	movs	r0, #0
 801d2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d2d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d2d6:	2e00      	cmp	r6, #0
 801d2d8:	d0f9      	beq.n	801d2ce <__sflush_r+0x1a>
 801d2da:	2300      	movs	r3, #0
 801d2dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d2e0:	682f      	ldr	r7, [r5, #0]
 801d2e2:	602b      	str	r3, [r5, #0]
 801d2e4:	d032      	beq.n	801d34c <__sflush_r+0x98>
 801d2e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d2e8:	89a3      	ldrh	r3, [r4, #12]
 801d2ea:	075a      	lsls	r2, r3, #29
 801d2ec:	d505      	bpl.n	801d2fa <__sflush_r+0x46>
 801d2ee:	6863      	ldr	r3, [r4, #4]
 801d2f0:	1ac0      	subs	r0, r0, r3
 801d2f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d2f4:	b10b      	cbz	r3, 801d2fa <__sflush_r+0x46>
 801d2f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d2f8:	1ac0      	subs	r0, r0, r3
 801d2fa:	2300      	movs	r3, #0
 801d2fc:	4602      	mov	r2, r0
 801d2fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d300:	6a21      	ldr	r1, [r4, #32]
 801d302:	4628      	mov	r0, r5
 801d304:	47b0      	blx	r6
 801d306:	1c43      	adds	r3, r0, #1
 801d308:	89a3      	ldrh	r3, [r4, #12]
 801d30a:	d106      	bne.n	801d31a <__sflush_r+0x66>
 801d30c:	6829      	ldr	r1, [r5, #0]
 801d30e:	291d      	cmp	r1, #29
 801d310:	d82c      	bhi.n	801d36c <__sflush_r+0xb8>
 801d312:	4a2a      	ldr	r2, [pc, #168]	; (801d3bc <__sflush_r+0x108>)
 801d314:	40ca      	lsrs	r2, r1
 801d316:	07d6      	lsls	r6, r2, #31
 801d318:	d528      	bpl.n	801d36c <__sflush_r+0xb8>
 801d31a:	2200      	movs	r2, #0
 801d31c:	6062      	str	r2, [r4, #4]
 801d31e:	04d9      	lsls	r1, r3, #19
 801d320:	6922      	ldr	r2, [r4, #16]
 801d322:	6022      	str	r2, [r4, #0]
 801d324:	d504      	bpl.n	801d330 <__sflush_r+0x7c>
 801d326:	1c42      	adds	r2, r0, #1
 801d328:	d101      	bne.n	801d32e <__sflush_r+0x7a>
 801d32a:	682b      	ldr	r3, [r5, #0]
 801d32c:	b903      	cbnz	r3, 801d330 <__sflush_r+0x7c>
 801d32e:	6560      	str	r0, [r4, #84]	; 0x54
 801d330:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d332:	602f      	str	r7, [r5, #0]
 801d334:	2900      	cmp	r1, #0
 801d336:	d0ca      	beq.n	801d2ce <__sflush_r+0x1a>
 801d338:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d33c:	4299      	cmp	r1, r3
 801d33e:	d002      	beq.n	801d346 <__sflush_r+0x92>
 801d340:	4628      	mov	r0, r5
 801d342:	f7fb fffb 	bl	801933c <_free_r>
 801d346:	2000      	movs	r0, #0
 801d348:	6360      	str	r0, [r4, #52]	; 0x34
 801d34a:	e7c1      	b.n	801d2d0 <__sflush_r+0x1c>
 801d34c:	6a21      	ldr	r1, [r4, #32]
 801d34e:	2301      	movs	r3, #1
 801d350:	4628      	mov	r0, r5
 801d352:	47b0      	blx	r6
 801d354:	1c41      	adds	r1, r0, #1
 801d356:	d1c7      	bne.n	801d2e8 <__sflush_r+0x34>
 801d358:	682b      	ldr	r3, [r5, #0]
 801d35a:	2b00      	cmp	r3, #0
 801d35c:	d0c4      	beq.n	801d2e8 <__sflush_r+0x34>
 801d35e:	2b1d      	cmp	r3, #29
 801d360:	d001      	beq.n	801d366 <__sflush_r+0xb2>
 801d362:	2b16      	cmp	r3, #22
 801d364:	d101      	bne.n	801d36a <__sflush_r+0xb6>
 801d366:	602f      	str	r7, [r5, #0]
 801d368:	e7b1      	b.n	801d2ce <__sflush_r+0x1a>
 801d36a:	89a3      	ldrh	r3, [r4, #12]
 801d36c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d370:	81a3      	strh	r3, [r4, #12]
 801d372:	e7ad      	b.n	801d2d0 <__sflush_r+0x1c>
 801d374:	690f      	ldr	r7, [r1, #16]
 801d376:	2f00      	cmp	r7, #0
 801d378:	d0a9      	beq.n	801d2ce <__sflush_r+0x1a>
 801d37a:	0793      	lsls	r3, r2, #30
 801d37c:	680e      	ldr	r6, [r1, #0]
 801d37e:	bf08      	it	eq
 801d380:	694b      	ldreq	r3, [r1, #20]
 801d382:	600f      	str	r7, [r1, #0]
 801d384:	bf18      	it	ne
 801d386:	2300      	movne	r3, #0
 801d388:	eba6 0807 	sub.w	r8, r6, r7
 801d38c:	608b      	str	r3, [r1, #8]
 801d38e:	f1b8 0f00 	cmp.w	r8, #0
 801d392:	dd9c      	ble.n	801d2ce <__sflush_r+0x1a>
 801d394:	6a21      	ldr	r1, [r4, #32]
 801d396:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d398:	4643      	mov	r3, r8
 801d39a:	463a      	mov	r2, r7
 801d39c:	4628      	mov	r0, r5
 801d39e:	47b0      	blx	r6
 801d3a0:	2800      	cmp	r0, #0
 801d3a2:	dc06      	bgt.n	801d3b2 <__sflush_r+0xfe>
 801d3a4:	89a3      	ldrh	r3, [r4, #12]
 801d3a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d3aa:	81a3      	strh	r3, [r4, #12]
 801d3ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d3b0:	e78e      	b.n	801d2d0 <__sflush_r+0x1c>
 801d3b2:	4407      	add	r7, r0
 801d3b4:	eba8 0800 	sub.w	r8, r8, r0
 801d3b8:	e7e9      	b.n	801d38e <__sflush_r+0xda>
 801d3ba:	bf00      	nop
 801d3bc:	20400001 	.word	0x20400001

0801d3c0 <_fflush_r>:
 801d3c0:	b538      	push	{r3, r4, r5, lr}
 801d3c2:	690b      	ldr	r3, [r1, #16]
 801d3c4:	4605      	mov	r5, r0
 801d3c6:	460c      	mov	r4, r1
 801d3c8:	b913      	cbnz	r3, 801d3d0 <_fflush_r+0x10>
 801d3ca:	2500      	movs	r5, #0
 801d3cc:	4628      	mov	r0, r5
 801d3ce:	bd38      	pop	{r3, r4, r5, pc}
 801d3d0:	b118      	cbz	r0, 801d3da <_fflush_r+0x1a>
 801d3d2:	6983      	ldr	r3, [r0, #24]
 801d3d4:	b90b      	cbnz	r3, 801d3da <_fflush_r+0x1a>
 801d3d6:	f000 f887 	bl	801d4e8 <__sinit>
 801d3da:	4b14      	ldr	r3, [pc, #80]	; (801d42c <_fflush_r+0x6c>)
 801d3dc:	429c      	cmp	r4, r3
 801d3de:	d11b      	bne.n	801d418 <_fflush_r+0x58>
 801d3e0:	686c      	ldr	r4, [r5, #4]
 801d3e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d3e6:	2b00      	cmp	r3, #0
 801d3e8:	d0ef      	beq.n	801d3ca <_fflush_r+0xa>
 801d3ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d3ec:	07d0      	lsls	r0, r2, #31
 801d3ee:	d404      	bmi.n	801d3fa <_fflush_r+0x3a>
 801d3f0:	0599      	lsls	r1, r3, #22
 801d3f2:	d402      	bmi.n	801d3fa <_fflush_r+0x3a>
 801d3f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d3f6:	f000 f927 	bl	801d648 <__retarget_lock_acquire_recursive>
 801d3fa:	4628      	mov	r0, r5
 801d3fc:	4621      	mov	r1, r4
 801d3fe:	f7ff ff59 	bl	801d2b4 <__sflush_r>
 801d402:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d404:	07da      	lsls	r2, r3, #31
 801d406:	4605      	mov	r5, r0
 801d408:	d4e0      	bmi.n	801d3cc <_fflush_r+0xc>
 801d40a:	89a3      	ldrh	r3, [r4, #12]
 801d40c:	059b      	lsls	r3, r3, #22
 801d40e:	d4dd      	bmi.n	801d3cc <_fflush_r+0xc>
 801d410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d412:	f000 f91a 	bl	801d64a <__retarget_lock_release_recursive>
 801d416:	e7d9      	b.n	801d3cc <_fflush_r+0xc>
 801d418:	4b05      	ldr	r3, [pc, #20]	; (801d430 <_fflush_r+0x70>)
 801d41a:	429c      	cmp	r4, r3
 801d41c:	d101      	bne.n	801d422 <_fflush_r+0x62>
 801d41e:	68ac      	ldr	r4, [r5, #8]
 801d420:	e7df      	b.n	801d3e2 <_fflush_r+0x22>
 801d422:	4b04      	ldr	r3, [pc, #16]	; (801d434 <_fflush_r+0x74>)
 801d424:	429c      	cmp	r4, r3
 801d426:	bf08      	it	eq
 801d428:	68ec      	ldreq	r4, [r5, #12]
 801d42a:	e7da      	b.n	801d3e2 <_fflush_r+0x22>
 801d42c:	080214bc 	.word	0x080214bc
 801d430:	080214dc 	.word	0x080214dc
 801d434:	0802149c 	.word	0x0802149c

0801d438 <std>:
 801d438:	2300      	movs	r3, #0
 801d43a:	b510      	push	{r4, lr}
 801d43c:	4604      	mov	r4, r0
 801d43e:	e9c0 3300 	strd	r3, r3, [r0]
 801d442:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d446:	6083      	str	r3, [r0, #8]
 801d448:	8181      	strh	r1, [r0, #12]
 801d44a:	6643      	str	r3, [r0, #100]	; 0x64
 801d44c:	81c2      	strh	r2, [r0, #14]
 801d44e:	6183      	str	r3, [r0, #24]
 801d450:	4619      	mov	r1, r3
 801d452:	2208      	movs	r2, #8
 801d454:	305c      	adds	r0, #92	; 0x5c
 801d456:	f7fb ff69 	bl	801932c <memset>
 801d45a:	4b05      	ldr	r3, [pc, #20]	; (801d470 <std+0x38>)
 801d45c:	6263      	str	r3, [r4, #36]	; 0x24
 801d45e:	4b05      	ldr	r3, [pc, #20]	; (801d474 <std+0x3c>)
 801d460:	62a3      	str	r3, [r4, #40]	; 0x28
 801d462:	4b05      	ldr	r3, [pc, #20]	; (801d478 <std+0x40>)
 801d464:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d466:	4b05      	ldr	r3, [pc, #20]	; (801d47c <std+0x44>)
 801d468:	6224      	str	r4, [r4, #32]
 801d46a:	6323      	str	r3, [r4, #48]	; 0x30
 801d46c:	bd10      	pop	{r4, pc}
 801d46e:	bf00      	nop
 801d470:	0801a2e5 	.word	0x0801a2e5
 801d474:	0801a307 	.word	0x0801a307
 801d478:	0801a33f 	.word	0x0801a33f
 801d47c:	0801a363 	.word	0x0801a363

0801d480 <_cleanup_r>:
 801d480:	4901      	ldr	r1, [pc, #4]	; (801d488 <_cleanup_r+0x8>)
 801d482:	f000 b8c1 	b.w	801d608 <_fwalk_reent>
 801d486:	bf00      	nop
 801d488:	0801d3c1 	.word	0x0801d3c1

0801d48c <__sfmoreglue>:
 801d48c:	b570      	push	{r4, r5, r6, lr}
 801d48e:	1e4a      	subs	r2, r1, #1
 801d490:	2568      	movs	r5, #104	; 0x68
 801d492:	4355      	muls	r5, r2
 801d494:	460e      	mov	r6, r1
 801d496:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801d49a:	f7fb ff9f 	bl	80193dc <_malloc_r>
 801d49e:	4604      	mov	r4, r0
 801d4a0:	b140      	cbz	r0, 801d4b4 <__sfmoreglue+0x28>
 801d4a2:	2100      	movs	r1, #0
 801d4a4:	e9c0 1600 	strd	r1, r6, [r0]
 801d4a8:	300c      	adds	r0, #12
 801d4aa:	60a0      	str	r0, [r4, #8]
 801d4ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801d4b0:	f7fb ff3c 	bl	801932c <memset>
 801d4b4:	4620      	mov	r0, r4
 801d4b6:	bd70      	pop	{r4, r5, r6, pc}

0801d4b8 <__sfp_lock_acquire>:
 801d4b8:	4801      	ldr	r0, [pc, #4]	; (801d4c0 <__sfp_lock_acquire+0x8>)
 801d4ba:	f000 b8c5 	b.w	801d648 <__retarget_lock_acquire_recursive>
 801d4be:	bf00      	nop
 801d4c0:	2000a584 	.word	0x2000a584

0801d4c4 <__sfp_lock_release>:
 801d4c4:	4801      	ldr	r0, [pc, #4]	; (801d4cc <__sfp_lock_release+0x8>)
 801d4c6:	f000 b8c0 	b.w	801d64a <__retarget_lock_release_recursive>
 801d4ca:	bf00      	nop
 801d4cc:	2000a584 	.word	0x2000a584

0801d4d0 <__sinit_lock_acquire>:
 801d4d0:	4801      	ldr	r0, [pc, #4]	; (801d4d8 <__sinit_lock_acquire+0x8>)
 801d4d2:	f000 b8b9 	b.w	801d648 <__retarget_lock_acquire_recursive>
 801d4d6:	bf00      	nop
 801d4d8:	2000a57f 	.word	0x2000a57f

0801d4dc <__sinit_lock_release>:
 801d4dc:	4801      	ldr	r0, [pc, #4]	; (801d4e4 <__sinit_lock_release+0x8>)
 801d4de:	f000 b8b4 	b.w	801d64a <__retarget_lock_release_recursive>
 801d4e2:	bf00      	nop
 801d4e4:	2000a57f 	.word	0x2000a57f

0801d4e8 <__sinit>:
 801d4e8:	b510      	push	{r4, lr}
 801d4ea:	4604      	mov	r4, r0
 801d4ec:	f7ff fff0 	bl	801d4d0 <__sinit_lock_acquire>
 801d4f0:	69a3      	ldr	r3, [r4, #24]
 801d4f2:	b11b      	cbz	r3, 801d4fc <__sinit+0x14>
 801d4f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d4f8:	f7ff bff0 	b.w	801d4dc <__sinit_lock_release>
 801d4fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801d500:	6523      	str	r3, [r4, #80]	; 0x50
 801d502:	4b13      	ldr	r3, [pc, #76]	; (801d550 <__sinit+0x68>)
 801d504:	4a13      	ldr	r2, [pc, #76]	; (801d554 <__sinit+0x6c>)
 801d506:	681b      	ldr	r3, [r3, #0]
 801d508:	62a2      	str	r2, [r4, #40]	; 0x28
 801d50a:	42a3      	cmp	r3, r4
 801d50c:	bf04      	itt	eq
 801d50e:	2301      	moveq	r3, #1
 801d510:	61a3      	streq	r3, [r4, #24]
 801d512:	4620      	mov	r0, r4
 801d514:	f000 f820 	bl	801d558 <__sfp>
 801d518:	6060      	str	r0, [r4, #4]
 801d51a:	4620      	mov	r0, r4
 801d51c:	f000 f81c 	bl	801d558 <__sfp>
 801d520:	60a0      	str	r0, [r4, #8]
 801d522:	4620      	mov	r0, r4
 801d524:	f000 f818 	bl	801d558 <__sfp>
 801d528:	2200      	movs	r2, #0
 801d52a:	60e0      	str	r0, [r4, #12]
 801d52c:	2104      	movs	r1, #4
 801d52e:	6860      	ldr	r0, [r4, #4]
 801d530:	f7ff ff82 	bl	801d438 <std>
 801d534:	68a0      	ldr	r0, [r4, #8]
 801d536:	2201      	movs	r2, #1
 801d538:	2109      	movs	r1, #9
 801d53a:	f7ff ff7d 	bl	801d438 <std>
 801d53e:	68e0      	ldr	r0, [r4, #12]
 801d540:	2202      	movs	r2, #2
 801d542:	2112      	movs	r1, #18
 801d544:	f7ff ff78 	bl	801d438 <std>
 801d548:	2301      	movs	r3, #1
 801d54a:	61a3      	str	r3, [r4, #24]
 801d54c:	e7d2      	b.n	801d4f4 <__sinit+0xc>
 801d54e:	bf00      	nop
 801d550:	08021048 	.word	0x08021048
 801d554:	0801d481 	.word	0x0801d481

0801d558 <__sfp>:
 801d558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d55a:	4607      	mov	r7, r0
 801d55c:	f7ff ffac 	bl	801d4b8 <__sfp_lock_acquire>
 801d560:	4b1e      	ldr	r3, [pc, #120]	; (801d5dc <__sfp+0x84>)
 801d562:	681e      	ldr	r6, [r3, #0]
 801d564:	69b3      	ldr	r3, [r6, #24]
 801d566:	b913      	cbnz	r3, 801d56e <__sfp+0x16>
 801d568:	4630      	mov	r0, r6
 801d56a:	f7ff ffbd 	bl	801d4e8 <__sinit>
 801d56e:	3648      	adds	r6, #72	; 0x48
 801d570:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801d574:	3b01      	subs	r3, #1
 801d576:	d503      	bpl.n	801d580 <__sfp+0x28>
 801d578:	6833      	ldr	r3, [r6, #0]
 801d57a:	b30b      	cbz	r3, 801d5c0 <__sfp+0x68>
 801d57c:	6836      	ldr	r6, [r6, #0]
 801d57e:	e7f7      	b.n	801d570 <__sfp+0x18>
 801d580:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801d584:	b9d5      	cbnz	r5, 801d5bc <__sfp+0x64>
 801d586:	4b16      	ldr	r3, [pc, #88]	; (801d5e0 <__sfp+0x88>)
 801d588:	60e3      	str	r3, [r4, #12]
 801d58a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801d58e:	6665      	str	r5, [r4, #100]	; 0x64
 801d590:	f000 f859 	bl	801d646 <__retarget_lock_init_recursive>
 801d594:	f7ff ff96 	bl	801d4c4 <__sfp_lock_release>
 801d598:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801d59c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801d5a0:	6025      	str	r5, [r4, #0]
 801d5a2:	61a5      	str	r5, [r4, #24]
 801d5a4:	2208      	movs	r2, #8
 801d5a6:	4629      	mov	r1, r5
 801d5a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801d5ac:	f7fb febe 	bl	801932c <memset>
 801d5b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801d5b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801d5b8:	4620      	mov	r0, r4
 801d5ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d5bc:	3468      	adds	r4, #104	; 0x68
 801d5be:	e7d9      	b.n	801d574 <__sfp+0x1c>
 801d5c0:	2104      	movs	r1, #4
 801d5c2:	4638      	mov	r0, r7
 801d5c4:	f7ff ff62 	bl	801d48c <__sfmoreglue>
 801d5c8:	4604      	mov	r4, r0
 801d5ca:	6030      	str	r0, [r6, #0]
 801d5cc:	2800      	cmp	r0, #0
 801d5ce:	d1d5      	bne.n	801d57c <__sfp+0x24>
 801d5d0:	f7ff ff78 	bl	801d4c4 <__sfp_lock_release>
 801d5d4:	230c      	movs	r3, #12
 801d5d6:	603b      	str	r3, [r7, #0]
 801d5d8:	e7ee      	b.n	801d5b8 <__sfp+0x60>
 801d5da:	bf00      	nop
 801d5dc:	08021048 	.word	0x08021048
 801d5e0:	ffff0001 	.word	0xffff0001

0801d5e4 <fiprintf>:
 801d5e4:	b40e      	push	{r1, r2, r3}
 801d5e6:	b503      	push	{r0, r1, lr}
 801d5e8:	4601      	mov	r1, r0
 801d5ea:	ab03      	add	r3, sp, #12
 801d5ec:	4805      	ldr	r0, [pc, #20]	; (801d604 <fiprintf+0x20>)
 801d5ee:	f853 2b04 	ldr.w	r2, [r3], #4
 801d5f2:	6800      	ldr	r0, [r0, #0]
 801d5f4:	9301      	str	r3, [sp, #4]
 801d5f6:	f000 f875 	bl	801d6e4 <_vfiprintf_r>
 801d5fa:	b002      	add	sp, #8
 801d5fc:	f85d eb04 	ldr.w	lr, [sp], #4
 801d600:	b003      	add	sp, #12
 801d602:	4770      	bx	lr
 801d604:	200000d0 	.word	0x200000d0

0801d608 <_fwalk_reent>:
 801d608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d60c:	4606      	mov	r6, r0
 801d60e:	4688      	mov	r8, r1
 801d610:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801d614:	2700      	movs	r7, #0
 801d616:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d61a:	f1b9 0901 	subs.w	r9, r9, #1
 801d61e:	d505      	bpl.n	801d62c <_fwalk_reent+0x24>
 801d620:	6824      	ldr	r4, [r4, #0]
 801d622:	2c00      	cmp	r4, #0
 801d624:	d1f7      	bne.n	801d616 <_fwalk_reent+0xe>
 801d626:	4638      	mov	r0, r7
 801d628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d62c:	89ab      	ldrh	r3, [r5, #12]
 801d62e:	2b01      	cmp	r3, #1
 801d630:	d907      	bls.n	801d642 <_fwalk_reent+0x3a>
 801d632:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d636:	3301      	adds	r3, #1
 801d638:	d003      	beq.n	801d642 <_fwalk_reent+0x3a>
 801d63a:	4629      	mov	r1, r5
 801d63c:	4630      	mov	r0, r6
 801d63e:	47c0      	blx	r8
 801d640:	4307      	orrs	r7, r0
 801d642:	3568      	adds	r5, #104	; 0x68
 801d644:	e7e9      	b.n	801d61a <_fwalk_reent+0x12>

0801d646 <__retarget_lock_init_recursive>:
 801d646:	4770      	bx	lr

0801d648 <__retarget_lock_acquire_recursive>:
 801d648:	4770      	bx	lr

0801d64a <__retarget_lock_release_recursive>:
 801d64a:	4770      	bx	lr

0801d64c <memmove>:
 801d64c:	4288      	cmp	r0, r1
 801d64e:	b510      	push	{r4, lr}
 801d650:	eb01 0402 	add.w	r4, r1, r2
 801d654:	d902      	bls.n	801d65c <memmove+0x10>
 801d656:	4284      	cmp	r4, r0
 801d658:	4623      	mov	r3, r4
 801d65a:	d807      	bhi.n	801d66c <memmove+0x20>
 801d65c:	1e43      	subs	r3, r0, #1
 801d65e:	42a1      	cmp	r1, r4
 801d660:	d008      	beq.n	801d674 <memmove+0x28>
 801d662:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d666:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d66a:	e7f8      	b.n	801d65e <memmove+0x12>
 801d66c:	4402      	add	r2, r0
 801d66e:	4601      	mov	r1, r0
 801d670:	428a      	cmp	r2, r1
 801d672:	d100      	bne.n	801d676 <memmove+0x2a>
 801d674:	bd10      	pop	{r4, pc}
 801d676:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d67a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d67e:	e7f7      	b.n	801d670 <memmove+0x24>

0801d680 <_malloc_usable_size_r>:
 801d680:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d684:	1f18      	subs	r0, r3, #4
 801d686:	2b00      	cmp	r3, #0
 801d688:	bfbc      	itt	lt
 801d68a:	580b      	ldrlt	r3, [r1, r0]
 801d68c:	18c0      	addlt	r0, r0, r3
 801d68e:	4770      	bx	lr

0801d690 <__sfputc_r>:
 801d690:	6893      	ldr	r3, [r2, #8]
 801d692:	3b01      	subs	r3, #1
 801d694:	2b00      	cmp	r3, #0
 801d696:	b410      	push	{r4}
 801d698:	6093      	str	r3, [r2, #8]
 801d69a:	da08      	bge.n	801d6ae <__sfputc_r+0x1e>
 801d69c:	6994      	ldr	r4, [r2, #24]
 801d69e:	42a3      	cmp	r3, r4
 801d6a0:	db01      	blt.n	801d6a6 <__sfputc_r+0x16>
 801d6a2:	290a      	cmp	r1, #10
 801d6a4:	d103      	bne.n	801d6ae <__sfputc_r+0x1e>
 801d6a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d6aa:	f000 b94b 	b.w	801d944 <__swbuf_r>
 801d6ae:	6813      	ldr	r3, [r2, #0]
 801d6b0:	1c58      	adds	r0, r3, #1
 801d6b2:	6010      	str	r0, [r2, #0]
 801d6b4:	7019      	strb	r1, [r3, #0]
 801d6b6:	4608      	mov	r0, r1
 801d6b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d6bc:	4770      	bx	lr

0801d6be <__sfputs_r>:
 801d6be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d6c0:	4606      	mov	r6, r0
 801d6c2:	460f      	mov	r7, r1
 801d6c4:	4614      	mov	r4, r2
 801d6c6:	18d5      	adds	r5, r2, r3
 801d6c8:	42ac      	cmp	r4, r5
 801d6ca:	d101      	bne.n	801d6d0 <__sfputs_r+0x12>
 801d6cc:	2000      	movs	r0, #0
 801d6ce:	e007      	b.n	801d6e0 <__sfputs_r+0x22>
 801d6d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d6d4:	463a      	mov	r2, r7
 801d6d6:	4630      	mov	r0, r6
 801d6d8:	f7ff ffda 	bl	801d690 <__sfputc_r>
 801d6dc:	1c43      	adds	r3, r0, #1
 801d6de:	d1f3      	bne.n	801d6c8 <__sfputs_r+0xa>
 801d6e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d6e4 <_vfiprintf_r>:
 801d6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6e8:	460d      	mov	r5, r1
 801d6ea:	b09d      	sub	sp, #116	; 0x74
 801d6ec:	4614      	mov	r4, r2
 801d6ee:	4698      	mov	r8, r3
 801d6f0:	4606      	mov	r6, r0
 801d6f2:	b118      	cbz	r0, 801d6fc <_vfiprintf_r+0x18>
 801d6f4:	6983      	ldr	r3, [r0, #24]
 801d6f6:	b90b      	cbnz	r3, 801d6fc <_vfiprintf_r+0x18>
 801d6f8:	f7ff fef6 	bl	801d4e8 <__sinit>
 801d6fc:	4b89      	ldr	r3, [pc, #548]	; (801d924 <_vfiprintf_r+0x240>)
 801d6fe:	429d      	cmp	r5, r3
 801d700:	d11b      	bne.n	801d73a <_vfiprintf_r+0x56>
 801d702:	6875      	ldr	r5, [r6, #4]
 801d704:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d706:	07d9      	lsls	r1, r3, #31
 801d708:	d405      	bmi.n	801d716 <_vfiprintf_r+0x32>
 801d70a:	89ab      	ldrh	r3, [r5, #12]
 801d70c:	059a      	lsls	r2, r3, #22
 801d70e:	d402      	bmi.n	801d716 <_vfiprintf_r+0x32>
 801d710:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d712:	f7ff ff99 	bl	801d648 <__retarget_lock_acquire_recursive>
 801d716:	89ab      	ldrh	r3, [r5, #12]
 801d718:	071b      	lsls	r3, r3, #28
 801d71a:	d501      	bpl.n	801d720 <_vfiprintf_r+0x3c>
 801d71c:	692b      	ldr	r3, [r5, #16]
 801d71e:	b9eb      	cbnz	r3, 801d75c <_vfiprintf_r+0x78>
 801d720:	4629      	mov	r1, r5
 801d722:	4630      	mov	r0, r6
 801d724:	f000 f960 	bl	801d9e8 <__swsetup_r>
 801d728:	b1c0      	cbz	r0, 801d75c <_vfiprintf_r+0x78>
 801d72a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d72c:	07dc      	lsls	r4, r3, #31
 801d72e:	d50e      	bpl.n	801d74e <_vfiprintf_r+0x6a>
 801d730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d734:	b01d      	add	sp, #116	; 0x74
 801d736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d73a:	4b7b      	ldr	r3, [pc, #492]	; (801d928 <_vfiprintf_r+0x244>)
 801d73c:	429d      	cmp	r5, r3
 801d73e:	d101      	bne.n	801d744 <_vfiprintf_r+0x60>
 801d740:	68b5      	ldr	r5, [r6, #8]
 801d742:	e7df      	b.n	801d704 <_vfiprintf_r+0x20>
 801d744:	4b79      	ldr	r3, [pc, #484]	; (801d92c <_vfiprintf_r+0x248>)
 801d746:	429d      	cmp	r5, r3
 801d748:	bf08      	it	eq
 801d74a:	68f5      	ldreq	r5, [r6, #12]
 801d74c:	e7da      	b.n	801d704 <_vfiprintf_r+0x20>
 801d74e:	89ab      	ldrh	r3, [r5, #12]
 801d750:	0598      	lsls	r0, r3, #22
 801d752:	d4ed      	bmi.n	801d730 <_vfiprintf_r+0x4c>
 801d754:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d756:	f7ff ff78 	bl	801d64a <__retarget_lock_release_recursive>
 801d75a:	e7e9      	b.n	801d730 <_vfiprintf_r+0x4c>
 801d75c:	2300      	movs	r3, #0
 801d75e:	9309      	str	r3, [sp, #36]	; 0x24
 801d760:	2320      	movs	r3, #32
 801d762:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d766:	f8cd 800c 	str.w	r8, [sp, #12]
 801d76a:	2330      	movs	r3, #48	; 0x30
 801d76c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801d930 <_vfiprintf_r+0x24c>
 801d770:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d774:	f04f 0901 	mov.w	r9, #1
 801d778:	4623      	mov	r3, r4
 801d77a:	469a      	mov	sl, r3
 801d77c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d780:	b10a      	cbz	r2, 801d786 <_vfiprintf_r+0xa2>
 801d782:	2a25      	cmp	r2, #37	; 0x25
 801d784:	d1f9      	bne.n	801d77a <_vfiprintf_r+0x96>
 801d786:	ebba 0b04 	subs.w	fp, sl, r4
 801d78a:	d00b      	beq.n	801d7a4 <_vfiprintf_r+0xc0>
 801d78c:	465b      	mov	r3, fp
 801d78e:	4622      	mov	r2, r4
 801d790:	4629      	mov	r1, r5
 801d792:	4630      	mov	r0, r6
 801d794:	f7ff ff93 	bl	801d6be <__sfputs_r>
 801d798:	3001      	adds	r0, #1
 801d79a:	f000 80aa 	beq.w	801d8f2 <_vfiprintf_r+0x20e>
 801d79e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d7a0:	445a      	add	r2, fp
 801d7a2:	9209      	str	r2, [sp, #36]	; 0x24
 801d7a4:	f89a 3000 	ldrb.w	r3, [sl]
 801d7a8:	2b00      	cmp	r3, #0
 801d7aa:	f000 80a2 	beq.w	801d8f2 <_vfiprintf_r+0x20e>
 801d7ae:	2300      	movs	r3, #0
 801d7b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d7b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d7b8:	f10a 0a01 	add.w	sl, sl, #1
 801d7bc:	9304      	str	r3, [sp, #16]
 801d7be:	9307      	str	r3, [sp, #28]
 801d7c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d7c4:	931a      	str	r3, [sp, #104]	; 0x68
 801d7c6:	4654      	mov	r4, sl
 801d7c8:	2205      	movs	r2, #5
 801d7ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d7ce:	4858      	ldr	r0, [pc, #352]	; (801d930 <_vfiprintf_r+0x24c>)
 801d7d0:	f7e2 fd06 	bl	80001e0 <memchr>
 801d7d4:	9a04      	ldr	r2, [sp, #16]
 801d7d6:	b9d8      	cbnz	r0, 801d810 <_vfiprintf_r+0x12c>
 801d7d8:	06d1      	lsls	r1, r2, #27
 801d7da:	bf44      	itt	mi
 801d7dc:	2320      	movmi	r3, #32
 801d7de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d7e2:	0713      	lsls	r3, r2, #28
 801d7e4:	bf44      	itt	mi
 801d7e6:	232b      	movmi	r3, #43	; 0x2b
 801d7e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d7ec:	f89a 3000 	ldrb.w	r3, [sl]
 801d7f0:	2b2a      	cmp	r3, #42	; 0x2a
 801d7f2:	d015      	beq.n	801d820 <_vfiprintf_r+0x13c>
 801d7f4:	9a07      	ldr	r2, [sp, #28]
 801d7f6:	4654      	mov	r4, sl
 801d7f8:	2000      	movs	r0, #0
 801d7fa:	f04f 0c0a 	mov.w	ip, #10
 801d7fe:	4621      	mov	r1, r4
 801d800:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d804:	3b30      	subs	r3, #48	; 0x30
 801d806:	2b09      	cmp	r3, #9
 801d808:	d94e      	bls.n	801d8a8 <_vfiprintf_r+0x1c4>
 801d80a:	b1b0      	cbz	r0, 801d83a <_vfiprintf_r+0x156>
 801d80c:	9207      	str	r2, [sp, #28]
 801d80e:	e014      	b.n	801d83a <_vfiprintf_r+0x156>
 801d810:	eba0 0308 	sub.w	r3, r0, r8
 801d814:	fa09 f303 	lsl.w	r3, r9, r3
 801d818:	4313      	orrs	r3, r2
 801d81a:	9304      	str	r3, [sp, #16]
 801d81c:	46a2      	mov	sl, r4
 801d81e:	e7d2      	b.n	801d7c6 <_vfiprintf_r+0xe2>
 801d820:	9b03      	ldr	r3, [sp, #12]
 801d822:	1d19      	adds	r1, r3, #4
 801d824:	681b      	ldr	r3, [r3, #0]
 801d826:	9103      	str	r1, [sp, #12]
 801d828:	2b00      	cmp	r3, #0
 801d82a:	bfbb      	ittet	lt
 801d82c:	425b      	neglt	r3, r3
 801d82e:	f042 0202 	orrlt.w	r2, r2, #2
 801d832:	9307      	strge	r3, [sp, #28]
 801d834:	9307      	strlt	r3, [sp, #28]
 801d836:	bfb8      	it	lt
 801d838:	9204      	strlt	r2, [sp, #16]
 801d83a:	7823      	ldrb	r3, [r4, #0]
 801d83c:	2b2e      	cmp	r3, #46	; 0x2e
 801d83e:	d10c      	bne.n	801d85a <_vfiprintf_r+0x176>
 801d840:	7863      	ldrb	r3, [r4, #1]
 801d842:	2b2a      	cmp	r3, #42	; 0x2a
 801d844:	d135      	bne.n	801d8b2 <_vfiprintf_r+0x1ce>
 801d846:	9b03      	ldr	r3, [sp, #12]
 801d848:	1d1a      	adds	r2, r3, #4
 801d84a:	681b      	ldr	r3, [r3, #0]
 801d84c:	9203      	str	r2, [sp, #12]
 801d84e:	2b00      	cmp	r3, #0
 801d850:	bfb8      	it	lt
 801d852:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801d856:	3402      	adds	r4, #2
 801d858:	9305      	str	r3, [sp, #20]
 801d85a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801d940 <_vfiprintf_r+0x25c>
 801d85e:	7821      	ldrb	r1, [r4, #0]
 801d860:	2203      	movs	r2, #3
 801d862:	4650      	mov	r0, sl
 801d864:	f7e2 fcbc 	bl	80001e0 <memchr>
 801d868:	b140      	cbz	r0, 801d87c <_vfiprintf_r+0x198>
 801d86a:	2340      	movs	r3, #64	; 0x40
 801d86c:	eba0 000a 	sub.w	r0, r0, sl
 801d870:	fa03 f000 	lsl.w	r0, r3, r0
 801d874:	9b04      	ldr	r3, [sp, #16]
 801d876:	4303      	orrs	r3, r0
 801d878:	3401      	adds	r4, #1
 801d87a:	9304      	str	r3, [sp, #16]
 801d87c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d880:	482c      	ldr	r0, [pc, #176]	; (801d934 <_vfiprintf_r+0x250>)
 801d882:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d886:	2206      	movs	r2, #6
 801d888:	f7e2 fcaa 	bl	80001e0 <memchr>
 801d88c:	2800      	cmp	r0, #0
 801d88e:	d03f      	beq.n	801d910 <_vfiprintf_r+0x22c>
 801d890:	4b29      	ldr	r3, [pc, #164]	; (801d938 <_vfiprintf_r+0x254>)
 801d892:	bb1b      	cbnz	r3, 801d8dc <_vfiprintf_r+0x1f8>
 801d894:	9b03      	ldr	r3, [sp, #12]
 801d896:	3307      	adds	r3, #7
 801d898:	f023 0307 	bic.w	r3, r3, #7
 801d89c:	3308      	adds	r3, #8
 801d89e:	9303      	str	r3, [sp, #12]
 801d8a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d8a2:	443b      	add	r3, r7
 801d8a4:	9309      	str	r3, [sp, #36]	; 0x24
 801d8a6:	e767      	b.n	801d778 <_vfiprintf_r+0x94>
 801d8a8:	fb0c 3202 	mla	r2, ip, r2, r3
 801d8ac:	460c      	mov	r4, r1
 801d8ae:	2001      	movs	r0, #1
 801d8b0:	e7a5      	b.n	801d7fe <_vfiprintf_r+0x11a>
 801d8b2:	2300      	movs	r3, #0
 801d8b4:	3401      	adds	r4, #1
 801d8b6:	9305      	str	r3, [sp, #20]
 801d8b8:	4619      	mov	r1, r3
 801d8ba:	f04f 0c0a 	mov.w	ip, #10
 801d8be:	4620      	mov	r0, r4
 801d8c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d8c4:	3a30      	subs	r2, #48	; 0x30
 801d8c6:	2a09      	cmp	r2, #9
 801d8c8:	d903      	bls.n	801d8d2 <_vfiprintf_r+0x1ee>
 801d8ca:	2b00      	cmp	r3, #0
 801d8cc:	d0c5      	beq.n	801d85a <_vfiprintf_r+0x176>
 801d8ce:	9105      	str	r1, [sp, #20]
 801d8d0:	e7c3      	b.n	801d85a <_vfiprintf_r+0x176>
 801d8d2:	fb0c 2101 	mla	r1, ip, r1, r2
 801d8d6:	4604      	mov	r4, r0
 801d8d8:	2301      	movs	r3, #1
 801d8da:	e7f0      	b.n	801d8be <_vfiprintf_r+0x1da>
 801d8dc:	ab03      	add	r3, sp, #12
 801d8de:	9300      	str	r3, [sp, #0]
 801d8e0:	462a      	mov	r2, r5
 801d8e2:	4b16      	ldr	r3, [pc, #88]	; (801d93c <_vfiprintf_r+0x258>)
 801d8e4:	a904      	add	r1, sp, #16
 801d8e6:	4630      	mov	r0, r6
 801d8e8:	f7fb fe72 	bl	80195d0 <_printf_float>
 801d8ec:	4607      	mov	r7, r0
 801d8ee:	1c78      	adds	r0, r7, #1
 801d8f0:	d1d6      	bne.n	801d8a0 <_vfiprintf_r+0x1bc>
 801d8f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d8f4:	07d9      	lsls	r1, r3, #31
 801d8f6:	d405      	bmi.n	801d904 <_vfiprintf_r+0x220>
 801d8f8:	89ab      	ldrh	r3, [r5, #12]
 801d8fa:	059a      	lsls	r2, r3, #22
 801d8fc:	d402      	bmi.n	801d904 <_vfiprintf_r+0x220>
 801d8fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d900:	f7ff fea3 	bl	801d64a <__retarget_lock_release_recursive>
 801d904:	89ab      	ldrh	r3, [r5, #12]
 801d906:	065b      	lsls	r3, r3, #25
 801d908:	f53f af12 	bmi.w	801d730 <_vfiprintf_r+0x4c>
 801d90c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d90e:	e711      	b.n	801d734 <_vfiprintf_r+0x50>
 801d910:	ab03      	add	r3, sp, #12
 801d912:	9300      	str	r3, [sp, #0]
 801d914:	462a      	mov	r2, r5
 801d916:	4b09      	ldr	r3, [pc, #36]	; (801d93c <_vfiprintf_r+0x258>)
 801d918:	a904      	add	r1, sp, #16
 801d91a:	4630      	mov	r0, r6
 801d91c:	f7fc f8fc 	bl	8019b18 <_printf_i>
 801d920:	e7e4      	b.n	801d8ec <_vfiprintf_r+0x208>
 801d922:	bf00      	nop
 801d924:	080214bc 	.word	0x080214bc
 801d928:	080214dc 	.word	0x080214dc
 801d92c:	0802149c 	.word	0x0802149c
 801d930:	0802144c 	.word	0x0802144c
 801d934:	08021456 	.word	0x08021456
 801d938:	080195d1 	.word	0x080195d1
 801d93c:	0801d6bf 	.word	0x0801d6bf
 801d940:	08021452 	.word	0x08021452

0801d944 <__swbuf_r>:
 801d944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d946:	460e      	mov	r6, r1
 801d948:	4614      	mov	r4, r2
 801d94a:	4605      	mov	r5, r0
 801d94c:	b118      	cbz	r0, 801d956 <__swbuf_r+0x12>
 801d94e:	6983      	ldr	r3, [r0, #24]
 801d950:	b90b      	cbnz	r3, 801d956 <__swbuf_r+0x12>
 801d952:	f7ff fdc9 	bl	801d4e8 <__sinit>
 801d956:	4b21      	ldr	r3, [pc, #132]	; (801d9dc <__swbuf_r+0x98>)
 801d958:	429c      	cmp	r4, r3
 801d95a:	d12b      	bne.n	801d9b4 <__swbuf_r+0x70>
 801d95c:	686c      	ldr	r4, [r5, #4]
 801d95e:	69a3      	ldr	r3, [r4, #24]
 801d960:	60a3      	str	r3, [r4, #8]
 801d962:	89a3      	ldrh	r3, [r4, #12]
 801d964:	071a      	lsls	r2, r3, #28
 801d966:	d52f      	bpl.n	801d9c8 <__swbuf_r+0x84>
 801d968:	6923      	ldr	r3, [r4, #16]
 801d96a:	b36b      	cbz	r3, 801d9c8 <__swbuf_r+0x84>
 801d96c:	6923      	ldr	r3, [r4, #16]
 801d96e:	6820      	ldr	r0, [r4, #0]
 801d970:	1ac0      	subs	r0, r0, r3
 801d972:	6963      	ldr	r3, [r4, #20]
 801d974:	b2f6      	uxtb	r6, r6
 801d976:	4283      	cmp	r3, r0
 801d978:	4637      	mov	r7, r6
 801d97a:	dc04      	bgt.n	801d986 <__swbuf_r+0x42>
 801d97c:	4621      	mov	r1, r4
 801d97e:	4628      	mov	r0, r5
 801d980:	f7ff fd1e 	bl	801d3c0 <_fflush_r>
 801d984:	bb30      	cbnz	r0, 801d9d4 <__swbuf_r+0x90>
 801d986:	68a3      	ldr	r3, [r4, #8]
 801d988:	3b01      	subs	r3, #1
 801d98a:	60a3      	str	r3, [r4, #8]
 801d98c:	6823      	ldr	r3, [r4, #0]
 801d98e:	1c5a      	adds	r2, r3, #1
 801d990:	6022      	str	r2, [r4, #0]
 801d992:	701e      	strb	r6, [r3, #0]
 801d994:	6963      	ldr	r3, [r4, #20]
 801d996:	3001      	adds	r0, #1
 801d998:	4283      	cmp	r3, r0
 801d99a:	d004      	beq.n	801d9a6 <__swbuf_r+0x62>
 801d99c:	89a3      	ldrh	r3, [r4, #12]
 801d99e:	07db      	lsls	r3, r3, #31
 801d9a0:	d506      	bpl.n	801d9b0 <__swbuf_r+0x6c>
 801d9a2:	2e0a      	cmp	r6, #10
 801d9a4:	d104      	bne.n	801d9b0 <__swbuf_r+0x6c>
 801d9a6:	4621      	mov	r1, r4
 801d9a8:	4628      	mov	r0, r5
 801d9aa:	f7ff fd09 	bl	801d3c0 <_fflush_r>
 801d9ae:	b988      	cbnz	r0, 801d9d4 <__swbuf_r+0x90>
 801d9b0:	4638      	mov	r0, r7
 801d9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d9b4:	4b0a      	ldr	r3, [pc, #40]	; (801d9e0 <__swbuf_r+0x9c>)
 801d9b6:	429c      	cmp	r4, r3
 801d9b8:	d101      	bne.n	801d9be <__swbuf_r+0x7a>
 801d9ba:	68ac      	ldr	r4, [r5, #8]
 801d9bc:	e7cf      	b.n	801d95e <__swbuf_r+0x1a>
 801d9be:	4b09      	ldr	r3, [pc, #36]	; (801d9e4 <__swbuf_r+0xa0>)
 801d9c0:	429c      	cmp	r4, r3
 801d9c2:	bf08      	it	eq
 801d9c4:	68ec      	ldreq	r4, [r5, #12]
 801d9c6:	e7ca      	b.n	801d95e <__swbuf_r+0x1a>
 801d9c8:	4621      	mov	r1, r4
 801d9ca:	4628      	mov	r0, r5
 801d9cc:	f000 f80c 	bl	801d9e8 <__swsetup_r>
 801d9d0:	2800      	cmp	r0, #0
 801d9d2:	d0cb      	beq.n	801d96c <__swbuf_r+0x28>
 801d9d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801d9d8:	e7ea      	b.n	801d9b0 <__swbuf_r+0x6c>
 801d9da:	bf00      	nop
 801d9dc:	080214bc 	.word	0x080214bc
 801d9e0:	080214dc 	.word	0x080214dc
 801d9e4:	0802149c 	.word	0x0802149c

0801d9e8 <__swsetup_r>:
 801d9e8:	4b32      	ldr	r3, [pc, #200]	; (801dab4 <__swsetup_r+0xcc>)
 801d9ea:	b570      	push	{r4, r5, r6, lr}
 801d9ec:	681d      	ldr	r5, [r3, #0]
 801d9ee:	4606      	mov	r6, r0
 801d9f0:	460c      	mov	r4, r1
 801d9f2:	b125      	cbz	r5, 801d9fe <__swsetup_r+0x16>
 801d9f4:	69ab      	ldr	r3, [r5, #24]
 801d9f6:	b913      	cbnz	r3, 801d9fe <__swsetup_r+0x16>
 801d9f8:	4628      	mov	r0, r5
 801d9fa:	f7ff fd75 	bl	801d4e8 <__sinit>
 801d9fe:	4b2e      	ldr	r3, [pc, #184]	; (801dab8 <__swsetup_r+0xd0>)
 801da00:	429c      	cmp	r4, r3
 801da02:	d10f      	bne.n	801da24 <__swsetup_r+0x3c>
 801da04:	686c      	ldr	r4, [r5, #4]
 801da06:	89a3      	ldrh	r3, [r4, #12]
 801da08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801da0c:	0719      	lsls	r1, r3, #28
 801da0e:	d42c      	bmi.n	801da6a <__swsetup_r+0x82>
 801da10:	06dd      	lsls	r5, r3, #27
 801da12:	d411      	bmi.n	801da38 <__swsetup_r+0x50>
 801da14:	2309      	movs	r3, #9
 801da16:	6033      	str	r3, [r6, #0]
 801da18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801da1c:	81a3      	strh	r3, [r4, #12]
 801da1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801da22:	e03e      	b.n	801daa2 <__swsetup_r+0xba>
 801da24:	4b25      	ldr	r3, [pc, #148]	; (801dabc <__swsetup_r+0xd4>)
 801da26:	429c      	cmp	r4, r3
 801da28:	d101      	bne.n	801da2e <__swsetup_r+0x46>
 801da2a:	68ac      	ldr	r4, [r5, #8]
 801da2c:	e7eb      	b.n	801da06 <__swsetup_r+0x1e>
 801da2e:	4b24      	ldr	r3, [pc, #144]	; (801dac0 <__swsetup_r+0xd8>)
 801da30:	429c      	cmp	r4, r3
 801da32:	bf08      	it	eq
 801da34:	68ec      	ldreq	r4, [r5, #12]
 801da36:	e7e6      	b.n	801da06 <__swsetup_r+0x1e>
 801da38:	0758      	lsls	r0, r3, #29
 801da3a:	d512      	bpl.n	801da62 <__swsetup_r+0x7a>
 801da3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801da3e:	b141      	cbz	r1, 801da52 <__swsetup_r+0x6a>
 801da40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801da44:	4299      	cmp	r1, r3
 801da46:	d002      	beq.n	801da4e <__swsetup_r+0x66>
 801da48:	4630      	mov	r0, r6
 801da4a:	f7fb fc77 	bl	801933c <_free_r>
 801da4e:	2300      	movs	r3, #0
 801da50:	6363      	str	r3, [r4, #52]	; 0x34
 801da52:	89a3      	ldrh	r3, [r4, #12]
 801da54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801da58:	81a3      	strh	r3, [r4, #12]
 801da5a:	2300      	movs	r3, #0
 801da5c:	6063      	str	r3, [r4, #4]
 801da5e:	6923      	ldr	r3, [r4, #16]
 801da60:	6023      	str	r3, [r4, #0]
 801da62:	89a3      	ldrh	r3, [r4, #12]
 801da64:	f043 0308 	orr.w	r3, r3, #8
 801da68:	81a3      	strh	r3, [r4, #12]
 801da6a:	6923      	ldr	r3, [r4, #16]
 801da6c:	b94b      	cbnz	r3, 801da82 <__swsetup_r+0x9a>
 801da6e:	89a3      	ldrh	r3, [r4, #12]
 801da70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801da74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801da78:	d003      	beq.n	801da82 <__swsetup_r+0x9a>
 801da7a:	4621      	mov	r1, r4
 801da7c:	4630      	mov	r0, r6
 801da7e:	f000 f84d 	bl	801db1c <__smakebuf_r>
 801da82:	89a0      	ldrh	r0, [r4, #12]
 801da84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801da88:	f010 0301 	ands.w	r3, r0, #1
 801da8c:	d00a      	beq.n	801daa4 <__swsetup_r+0xbc>
 801da8e:	2300      	movs	r3, #0
 801da90:	60a3      	str	r3, [r4, #8]
 801da92:	6963      	ldr	r3, [r4, #20]
 801da94:	425b      	negs	r3, r3
 801da96:	61a3      	str	r3, [r4, #24]
 801da98:	6923      	ldr	r3, [r4, #16]
 801da9a:	b943      	cbnz	r3, 801daae <__swsetup_r+0xc6>
 801da9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801daa0:	d1ba      	bne.n	801da18 <__swsetup_r+0x30>
 801daa2:	bd70      	pop	{r4, r5, r6, pc}
 801daa4:	0781      	lsls	r1, r0, #30
 801daa6:	bf58      	it	pl
 801daa8:	6963      	ldrpl	r3, [r4, #20]
 801daaa:	60a3      	str	r3, [r4, #8]
 801daac:	e7f4      	b.n	801da98 <__swsetup_r+0xb0>
 801daae:	2000      	movs	r0, #0
 801dab0:	e7f7      	b.n	801daa2 <__swsetup_r+0xba>
 801dab2:	bf00      	nop
 801dab4:	200000d0 	.word	0x200000d0
 801dab8:	080214bc 	.word	0x080214bc
 801dabc:	080214dc 	.word	0x080214dc
 801dac0:	0802149c 	.word	0x0802149c

0801dac4 <abort>:
 801dac4:	b508      	push	{r3, lr}
 801dac6:	2006      	movs	r0, #6
 801dac8:	f000 f890 	bl	801dbec <raise>
 801dacc:	2001      	movs	r0, #1
 801dace:	f7ef fad1 	bl	800d074 <_exit>

0801dad2 <__swhatbuf_r>:
 801dad2:	b570      	push	{r4, r5, r6, lr}
 801dad4:	460e      	mov	r6, r1
 801dad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dada:	2900      	cmp	r1, #0
 801dadc:	b096      	sub	sp, #88	; 0x58
 801dade:	4614      	mov	r4, r2
 801dae0:	461d      	mov	r5, r3
 801dae2:	da07      	bge.n	801daf4 <__swhatbuf_r+0x22>
 801dae4:	2300      	movs	r3, #0
 801dae6:	602b      	str	r3, [r5, #0]
 801dae8:	89b3      	ldrh	r3, [r6, #12]
 801daea:	061a      	lsls	r2, r3, #24
 801daec:	d410      	bmi.n	801db10 <__swhatbuf_r+0x3e>
 801daee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801daf2:	e00e      	b.n	801db12 <__swhatbuf_r+0x40>
 801daf4:	466a      	mov	r2, sp
 801daf6:	f000 f895 	bl	801dc24 <_fstat_r>
 801dafa:	2800      	cmp	r0, #0
 801dafc:	dbf2      	blt.n	801dae4 <__swhatbuf_r+0x12>
 801dafe:	9a01      	ldr	r2, [sp, #4]
 801db00:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801db04:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801db08:	425a      	negs	r2, r3
 801db0a:	415a      	adcs	r2, r3
 801db0c:	602a      	str	r2, [r5, #0]
 801db0e:	e7ee      	b.n	801daee <__swhatbuf_r+0x1c>
 801db10:	2340      	movs	r3, #64	; 0x40
 801db12:	2000      	movs	r0, #0
 801db14:	6023      	str	r3, [r4, #0]
 801db16:	b016      	add	sp, #88	; 0x58
 801db18:	bd70      	pop	{r4, r5, r6, pc}
	...

0801db1c <__smakebuf_r>:
 801db1c:	898b      	ldrh	r3, [r1, #12]
 801db1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801db20:	079d      	lsls	r5, r3, #30
 801db22:	4606      	mov	r6, r0
 801db24:	460c      	mov	r4, r1
 801db26:	d507      	bpl.n	801db38 <__smakebuf_r+0x1c>
 801db28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801db2c:	6023      	str	r3, [r4, #0]
 801db2e:	6123      	str	r3, [r4, #16]
 801db30:	2301      	movs	r3, #1
 801db32:	6163      	str	r3, [r4, #20]
 801db34:	b002      	add	sp, #8
 801db36:	bd70      	pop	{r4, r5, r6, pc}
 801db38:	ab01      	add	r3, sp, #4
 801db3a:	466a      	mov	r2, sp
 801db3c:	f7ff ffc9 	bl	801dad2 <__swhatbuf_r>
 801db40:	9900      	ldr	r1, [sp, #0]
 801db42:	4605      	mov	r5, r0
 801db44:	4630      	mov	r0, r6
 801db46:	f7fb fc49 	bl	80193dc <_malloc_r>
 801db4a:	b948      	cbnz	r0, 801db60 <__smakebuf_r+0x44>
 801db4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801db50:	059a      	lsls	r2, r3, #22
 801db52:	d4ef      	bmi.n	801db34 <__smakebuf_r+0x18>
 801db54:	f023 0303 	bic.w	r3, r3, #3
 801db58:	f043 0302 	orr.w	r3, r3, #2
 801db5c:	81a3      	strh	r3, [r4, #12]
 801db5e:	e7e3      	b.n	801db28 <__smakebuf_r+0xc>
 801db60:	4b0d      	ldr	r3, [pc, #52]	; (801db98 <__smakebuf_r+0x7c>)
 801db62:	62b3      	str	r3, [r6, #40]	; 0x28
 801db64:	89a3      	ldrh	r3, [r4, #12]
 801db66:	6020      	str	r0, [r4, #0]
 801db68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801db6c:	81a3      	strh	r3, [r4, #12]
 801db6e:	9b00      	ldr	r3, [sp, #0]
 801db70:	6163      	str	r3, [r4, #20]
 801db72:	9b01      	ldr	r3, [sp, #4]
 801db74:	6120      	str	r0, [r4, #16]
 801db76:	b15b      	cbz	r3, 801db90 <__smakebuf_r+0x74>
 801db78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801db7c:	4630      	mov	r0, r6
 801db7e:	f000 f863 	bl	801dc48 <_isatty_r>
 801db82:	b128      	cbz	r0, 801db90 <__smakebuf_r+0x74>
 801db84:	89a3      	ldrh	r3, [r4, #12]
 801db86:	f023 0303 	bic.w	r3, r3, #3
 801db8a:	f043 0301 	orr.w	r3, r3, #1
 801db8e:	81a3      	strh	r3, [r4, #12]
 801db90:	89a0      	ldrh	r0, [r4, #12]
 801db92:	4305      	orrs	r5, r0
 801db94:	81a5      	strh	r5, [r4, #12]
 801db96:	e7cd      	b.n	801db34 <__smakebuf_r+0x18>
 801db98:	0801d481 	.word	0x0801d481

0801db9c <_raise_r>:
 801db9c:	291f      	cmp	r1, #31
 801db9e:	b538      	push	{r3, r4, r5, lr}
 801dba0:	4604      	mov	r4, r0
 801dba2:	460d      	mov	r5, r1
 801dba4:	d904      	bls.n	801dbb0 <_raise_r+0x14>
 801dba6:	2316      	movs	r3, #22
 801dba8:	6003      	str	r3, [r0, #0]
 801dbaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801dbae:	bd38      	pop	{r3, r4, r5, pc}
 801dbb0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801dbb2:	b112      	cbz	r2, 801dbba <_raise_r+0x1e>
 801dbb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801dbb8:	b94b      	cbnz	r3, 801dbce <_raise_r+0x32>
 801dbba:	4620      	mov	r0, r4
 801dbbc:	f000 f830 	bl	801dc20 <_getpid_r>
 801dbc0:	462a      	mov	r2, r5
 801dbc2:	4601      	mov	r1, r0
 801dbc4:	4620      	mov	r0, r4
 801dbc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dbca:	f000 b817 	b.w	801dbfc <_kill_r>
 801dbce:	2b01      	cmp	r3, #1
 801dbd0:	d00a      	beq.n	801dbe8 <_raise_r+0x4c>
 801dbd2:	1c59      	adds	r1, r3, #1
 801dbd4:	d103      	bne.n	801dbde <_raise_r+0x42>
 801dbd6:	2316      	movs	r3, #22
 801dbd8:	6003      	str	r3, [r0, #0]
 801dbda:	2001      	movs	r0, #1
 801dbdc:	e7e7      	b.n	801dbae <_raise_r+0x12>
 801dbde:	2400      	movs	r4, #0
 801dbe0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801dbe4:	4628      	mov	r0, r5
 801dbe6:	4798      	blx	r3
 801dbe8:	2000      	movs	r0, #0
 801dbea:	e7e0      	b.n	801dbae <_raise_r+0x12>

0801dbec <raise>:
 801dbec:	4b02      	ldr	r3, [pc, #8]	; (801dbf8 <raise+0xc>)
 801dbee:	4601      	mov	r1, r0
 801dbf0:	6818      	ldr	r0, [r3, #0]
 801dbf2:	f7ff bfd3 	b.w	801db9c <_raise_r>
 801dbf6:	bf00      	nop
 801dbf8:	200000d0 	.word	0x200000d0

0801dbfc <_kill_r>:
 801dbfc:	b538      	push	{r3, r4, r5, lr}
 801dbfe:	4d07      	ldr	r5, [pc, #28]	; (801dc1c <_kill_r+0x20>)
 801dc00:	2300      	movs	r3, #0
 801dc02:	4604      	mov	r4, r0
 801dc04:	4608      	mov	r0, r1
 801dc06:	4611      	mov	r1, r2
 801dc08:	602b      	str	r3, [r5, #0]
 801dc0a:	f7ef fa23 	bl	800d054 <_kill>
 801dc0e:	1c43      	adds	r3, r0, #1
 801dc10:	d102      	bne.n	801dc18 <_kill_r+0x1c>
 801dc12:	682b      	ldr	r3, [r5, #0]
 801dc14:	b103      	cbz	r3, 801dc18 <_kill_r+0x1c>
 801dc16:	6023      	str	r3, [r4, #0]
 801dc18:	bd38      	pop	{r3, r4, r5, pc}
 801dc1a:	bf00      	nop
 801dc1c:	2000a578 	.word	0x2000a578

0801dc20 <_getpid_r>:
 801dc20:	f7ef ba10 	b.w	800d044 <_getpid>

0801dc24 <_fstat_r>:
 801dc24:	b538      	push	{r3, r4, r5, lr}
 801dc26:	4d07      	ldr	r5, [pc, #28]	; (801dc44 <_fstat_r+0x20>)
 801dc28:	2300      	movs	r3, #0
 801dc2a:	4604      	mov	r4, r0
 801dc2c:	4608      	mov	r0, r1
 801dc2e:	4611      	mov	r1, r2
 801dc30:	602b      	str	r3, [r5, #0]
 801dc32:	f7ef fa6e 	bl	800d112 <_fstat>
 801dc36:	1c43      	adds	r3, r0, #1
 801dc38:	d102      	bne.n	801dc40 <_fstat_r+0x1c>
 801dc3a:	682b      	ldr	r3, [r5, #0]
 801dc3c:	b103      	cbz	r3, 801dc40 <_fstat_r+0x1c>
 801dc3e:	6023      	str	r3, [r4, #0]
 801dc40:	bd38      	pop	{r3, r4, r5, pc}
 801dc42:	bf00      	nop
 801dc44:	2000a578 	.word	0x2000a578

0801dc48 <_isatty_r>:
 801dc48:	b538      	push	{r3, r4, r5, lr}
 801dc4a:	4d06      	ldr	r5, [pc, #24]	; (801dc64 <_isatty_r+0x1c>)
 801dc4c:	2300      	movs	r3, #0
 801dc4e:	4604      	mov	r4, r0
 801dc50:	4608      	mov	r0, r1
 801dc52:	602b      	str	r3, [r5, #0]
 801dc54:	f7ef fa6d 	bl	800d132 <_isatty>
 801dc58:	1c43      	adds	r3, r0, #1
 801dc5a:	d102      	bne.n	801dc62 <_isatty_r+0x1a>
 801dc5c:	682b      	ldr	r3, [r5, #0]
 801dc5e:	b103      	cbz	r3, 801dc62 <_isatty_r+0x1a>
 801dc60:	6023      	str	r3, [r4, #0]
 801dc62:	bd38      	pop	{r3, r4, r5, pc}
 801dc64:	2000a578 	.word	0x2000a578

0801dc68 <atan>:
 801dc68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc6c:	ec55 4b10 	vmov	r4, r5, d0
 801dc70:	4bc3      	ldr	r3, [pc, #780]	; (801df80 <atan+0x318>)
 801dc72:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801dc76:	429e      	cmp	r6, r3
 801dc78:	46ab      	mov	fp, r5
 801dc7a:	dd18      	ble.n	801dcae <atan+0x46>
 801dc7c:	4bc1      	ldr	r3, [pc, #772]	; (801df84 <atan+0x31c>)
 801dc7e:	429e      	cmp	r6, r3
 801dc80:	dc01      	bgt.n	801dc86 <atan+0x1e>
 801dc82:	d109      	bne.n	801dc98 <atan+0x30>
 801dc84:	b144      	cbz	r4, 801dc98 <atan+0x30>
 801dc86:	4622      	mov	r2, r4
 801dc88:	462b      	mov	r3, r5
 801dc8a:	4620      	mov	r0, r4
 801dc8c:	4629      	mov	r1, r5
 801dc8e:	f7e2 fafd 	bl	800028c <__adddf3>
 801dc92:	4604      	mov	r4, r0
 801dc94:	460d      	mov	r5, r1
 801dc96:	e006      	b.n	801dca6 <atan+0x3e>
 801dc98:	f1bb 0f00 	cmp.w	fp, #0
 801dc9c:	f300 8131 	bgt.w	801df02 <atan+0x29a>
 801dca0:	a59b      	add	r5, pc, #620	; (adr r5, 801df10 <atan+0x2a8>)
 801dca2:	e9d5 4500 	ldrd	r4, r5, [r5]
 801dca6:	ec45 4b10 	vmov	d0, r4, r5
 801dcaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dcae:	4bb6      	ldr	r3, [pc, #728]	; (801df88 <atan+0x320>)
 801dcb0:	429e      	cmp	r6, r3
 801dcb2:	dc14      	bgt.n	801dcde <atan+0x76>
 801dcb4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801dcb8:	429e      	cmp	r6, r3
 801dcba:	dc0d      	bgt.n	801dcd8 <atan+0x70>
 801dcbc:	a396      	add	r3, pc, #600	; (adr r3, 801df18 <atan+0x2b0>)
 801dcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcc2:	ee10 0a10 	vmov	r0, s0
 801dcc6:	4629      	mov	r1, r5
 801dcc8:	f7e2 fae0 	bl	800028c <__adddf3>
 801dccc:	4baf      	ldr	r3, [pc, #700]	; (801df8c <atan+0x324>)
 801dcce:	2200      	movs	r2, #0
 801dcd0:	f7e2 ff22 	bl	8000b18 <__aeabi_dcmpgt>
 801dcd4:	2800      	cmp	r0, #0
 801dcd6:	d1e6      	bne.n	801dca6 <atan+0x3e>
 801dcd8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801dcdc:	e02b      	b.n	801dd36 <atan+0xce>
 801dcde:	f000 f963 	bl	801dfa8 <fabs>
 801dce2:	4bab      	ldr	r3, [pc, #684]	; (801df90 <atan+0x328>)
 801dce4:	429e      	cmp	r6, r3
 801dce6:	ec55 4b10 	vmov	r4, r5, d0
 801dcea:	f300 80bf 	bgt.w	801de6c <atan+0x204>
 801dcee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801dcf2:	429e      	cmp	r6, r3
 801dcf4:	f300 80a0 	bgt.w	801de38 <atan+0x1d0>
 801dcf8:	ee10 2a10 	vmov	r2, s0
 801dcfc:	ee10 0a10 	vmov	r0, s0
 801dd00:	462b      	mov	r3, r5
 801dd02:	4629      	mov	r1, r5
 801dd04:	f7e2 fac2 	bl	800028c <__adddf3>
 801dd08:	4ba0      	ldr	r3, [pc, #640]	; (801df8c <atan+0x324>)
 801dd0a:	2200      	movs	r2, #0
 801dd0c:	f7e2 fabc 	bl	8000288 <__aeabi_dsub>
 801dd10:	2200      	movs	r2, #0
 801dd12:	4606      	mov	r6, r0
 801dd14:	460f      	mov	r7, r1
 801dd16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801dd1a:	4620      	mov	r0, r4
 801dd1c:	4629      	mov	r1, r5
 801dd1e:	f7e2 fab5 	bl	800028c <__adddf3>
 801dd22:	4602      	mov	r2, r0
 801dd24:	460b      	mov	r3, r1
 801dd26:	4630      	mov	r0, r6
 801dd28:	4639      	mov	r1, r7
 801dd2a:	f7e2 fd8f 	bl	800084c <__aeabi_ddiv>
 801dd2e:	f04f 0a00 	mov.w	sl, #0
 801dd32:	4604      	mov	r4, r0
 801dd34:	460d      	mov	r5, r1
 801dd36:	4622      	mov	r2, r4
 801dd38:	462b      	mov	r3, r5
 801dd3a:	4620      	mov	r0, r4
 801dd3c:	4629      	mov	r1, r5
 801dd3e:	f7e2 fc5b 	bl	80005f8 <__aeabi_dmul>
 801dd42:	4602      	mov	r2, r0
 801dd44:	460b      	mov	r3, r1
 801dd46:	4680      	mov	r8, r0
 801dd48:	4689      	mov	r9, r1
 801dd4a:	f7e2 fc55 	bl	80005f8 <__aeabi_dmul>
 801dd4e:	a374      	add	r3, pc, #464	; (adr r3, 801df20 <atan+0x2b8>)
 801dd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd54:	4606      	mov	r6, r0
 801dd56:	460f      	mov	r7, r1
 801dd58:	f7e2 fc4e 	bl	80005f8 <__aeabi_dmul>
 801dd5c:	a372      	add	r3, pc, #456	; (adr r3, 801df28 <atan+0x2c0>)
 801dd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd62:	f7e2 fa93 	bl	800028c <__adddf3>
 801dd66:	4632      	mov	r2, r6
 801dd68:	463b      	mov	r3, r7
 801dd6a:	f7e2 fc45 	bl	80005f8 <__aeabi_dmul>
 801dd6e:	a370      	add	r3, pc, #448	; (adr r3, 801df30 <atan+0x2c8>)
 801dd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd74:	f7e2 fa8a 	bl	800028c <__adddf3>
 801dd78:	4632      	mov	r2, r6
 801dd7a:	463b      	mov	r3, r7
 801dd7c:	f7e2 fc3c 	bl	80005f8 <__aeabi_dmul>
 801dd80:	a36d      	add	r3, pc, #436	; (adr r3, 801df38 <atan+0x2d0>)
 801dd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd86:	f7e2 fa81 	bl	800028c <__adddf3>
 801dd8a:	4632      	mov	r2, r6
 801dd8c:	463b      	mov	r3, r7
 801dd8e:	f7e2 fc33 	bl	80005f8 <__aeabi_dmul>
 801dd92:	a36b      	add	r3, pc, #428	; (adr r3, 801df40 <atan+0x2d8>)
 801dd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd98:	f7e2 fa78 	bl	800028c <__adddf3>
 801dd9c:	4632      	mov	r2, r6
 801dd9e:	463b      	mov	r3, r7
 801dda0:	f7e2 fc2a 	bl	80005f8 <__aeabi_dmul>
 801dda4:	a368      	add	r3, pc, #416	; (adr r3, 801df48 <atan+0x2e0>)
 801dda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ddaa:	f7e2 fa6f 	bl	800028c <__adddf3>
 801ddae:	4642      	mov	r2, r8
 801ddb0:	464b      	mov	r3, r9
 801ddb2:	f7e2 fc21 	bl	80005f8 <__aeabi_dmul>
 801ddb6:	a366      	add	r3, pc, #408	; (adr r3, 801df50 <atan+0x2e8>)
 801ddb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ddbc:	4680      	mov	r8, r0
 801ddbe:	4689      	mov	r9, r1
 801ddc0:	4630      	mov	r0, r6
 801ddc2:	4639      	mov	r1, r7
 801ddc4:	f7e2 fc18 	bl	80005f8 <__aeabi_dmul>
 801ddc8:	a363      	add	r3, pc, #396	; (adr r3, 801df58 <atan+0x2f0>)
 801ddca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ddce:	f7e2 fa5b 	bl	8000288 <__aeabi_dsub>
 801ddd2:	4632      	mov	r2, r6
 801ddd4:	463b      	mov	r3, r7
 801ddd6:	f7e2 fc0f 	bl	80005f8 <__aeabi_dmul>
 801ddda:	a361      	add	r3, pc, #388	; (adr r3, 801df60 <atan+0x2f8>)
 801dddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dde0:	f7e2 fa52 	bl	8000288 <__aeabi_dsub>
 801dde4:	4632      	mov	r2, r6
 801dde6:	463b      	mov	r3, r7
 801dde8:	f7e2 fc06 	bl	80005f8 <__aeabi_dmul>
 801ddec:	a35e      	add	r3, pc, #376	; (adr r3, 801df68 <atan+0x300>)
 801ddee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ddf2:	f7e2 fa49 	bl	8000288 <__aeabi_dsub>
 801ddf6:	4632      	mov	r2, r6
 801ddf8:	463b      	mov	r3, r7
 801ddfa:	f7e2 fbfd 	bl	80005f8 <__aeabi_dmul>
 801ddfe:	a35c      	add	r3, pc, #368	; (adr r3, 801df70 <atan+0x308>)
 801de00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de04:	f7e2 fa40 	bl	8000288 <__aeabi_dsub>
 801de08:	4632      	mov	r2, r6
 801de0a:	463b      	mov	r3, r7
 801de0c:	f7e2 fbf4 	bl	80005f8 <__aeabi_dmul>
 801de10:	4602      	mov	r2, r0
 801de12:	460b      	mov	r3, r1
 801de14:	4640      	mov	r0, r8
 801de16:	4649      	mov	r1, r9
 801de18:	f7e2 fa38 	bl	800028c <__adddf3>
 801de1c:	4622      	mov	r2, r4
 801de1e:	462b      	mov	r3, r5
 801de20:	f7e2 fbea 	bl	80005f8 <__aeabi_dmul>
 801de24:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 801de28:	4602      	mov	r2, r0
 801de2a:	460b      	mov	r3, r1
 801de2c:	d14b      	bne.n	801dec6 <atan+0x25e>
 801de2e:	4620      	mov	r0, r4
 801de30:	4629      	mov	r1, r5
 801de32:	f7e2 fa29 	bl	8000288 <__aeabi_dsub>
 801de36:	e72c      	b.n	801dc92 <atan+0x2a>
 801de38:	ee10 0a10 	vmov	r0, s0
 801de3c:	4b53      	ldr	r3, [pc, #332]	; (801df8c <atan+0x324>)
 801de3e:	2200      	movs	r2, #0
 801de40:	4629      	mov	r1, r5
 801de42:	f7e2 fa21 	bl	8000288 <__aeabi_dsub>
 801de46:	4b51      	ldr	r3, [pc, #324]	; (801df8c <atan+0x324>)
 801de48:	4606      	mov	r6, r0
 801de4a:	460f      	mov	r7, r1
 801de4c:	2200      	movs	r2, #0
 801de4e:	4620      	mov	r0, r4
 801de50:	4629      	mov	r1, r5
 801de52:	f7e2 fa1b 	bl	800028c <__adddf3>
 801de56:	4602      	mov	r2, r0
 801de58:	460b      	mov	r3, r1
 801de5a:	4630      	mov	r0, r6
 801de5c:	4639      	mov	r1, r7
 801de5e:	f7e2 fcf5 	bl	800084c <__aeabi_ddiv>
 801de62:	f04f 0a01 	mov.w	sl, #1
 801de66:	4604      	mov	r4, r0
 801de68:	460d      	mov	r5, r1
 801de6a:	e764      	b.n	801dd36 <atan+0xce>
 801de6c:	4b49      	ldr	r3, [pc, #292]	; (801df94 <atan+0x32c>)
 801de6e:	429e      	cmp	r6, r3
 801de70:	da1d      	bge.n	801deae <atan+0x246>
 801de72:	ee10 0a10 	vmov	r0, s0
 801de76:	4b48      	ldr	r3, [pc, #288]	; (801df98 <atan+0x330>)
 801de78:	2200      	movs	r2, #0
 801de7a:	4629      	mov	r1, r5
 801de7c:	f7e2 fa04 	bl	8000288 <__aeabi_dsub>
 801de80:	4b45      	ldr	r3, [pc, #276]	; (801df98 <atan+0x330>)
 801de82:	4606      	mov	r6, r0
 801de84:	460f      	mov	r7, r1
 801de86:	2200      	movs	r2, #0
 801de88:	4620      	mov	r0, r4
 801de8a:	4629      	mov	r1, r5
 801de8c:	f7e2 fbb4 	bl	80005f8 <__aeabi_dmul>
 801de90:	4b3e      	ldr	r3, [pc, #248]	; (801df8c <atan+0x324>)
 801de92:	2200      	movs	r2, #0
 801de94:	f7e2 f9fa 	bl	800028c <__adddf3>
 801de98:	4602      	mov	r2, r0
 801de9a:	460b      	mov	r3, r1
 801de9c:	4630      	mov	r0, r6
 801de9e:	4639      	mov	r1, r7
 801dea0:	f7e2 fcd4 	bl	800084c <__aeabi_ddiv>
 801dea4:	f04f 0a02 	mov.w	sl, #2
 801dea8:	4604      	mov	r4, r0
 801deaa:	460d      	mov	r5, r1
 801deac:	e743      	b.n	801dd36 <atan+0xce>
 801deae:	462b      	mov	r3, r5
 801deb0:	ee10 2a10 	vmov	r2, s0
 801deb4:	4939      	ldr	r1, [pc, #228]	; (801df9c <atan+0x334>)
 801deb6:	2000      	movs	r0, #0
 801deb8:	f7e2 fcc8 	bl	800084c <__aeabi_ddiv>
 801debc:	f04f 0a03 	mov.w	sl, #3
 801dec0:	4604      	mov	r4, r0
 801dec2:	460d      	mov	r5, r1
 801dec4:	e737      	b.n	801dd36 <atan+0xce>
 801dec6:	4b36      	ldr	r3, [pc, #216]	; (801dfa0 <atan+0x338>)
 801dec8:	4e36      	ldr	r6, [pc, #216]	; (801dfa4 <atan+0x33c>)
 801deca:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801dece:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801ded2:	e9da 2300 	ldrd	r2, r3, [sl]
 801ded6:	f7e2 f9d7 	bl	8000288 <__aeabi_dsub>
 801deda:	4622      	mov	r2, r4
 801dedc:	462b      	mov	r3, r5
 801dede:	f7e2 f9d3 	bl	8000288 <__aeabi_dsub>
 801dee2:	4602      	mov	r2, r0
 801dee4:	460b      	mov	r3, r1
 801dee6:	e9d6 0100 	ldrd	r0, r1, [r6]
 801deea:	f7e2 f9cd 	bl	8000288 <__aeabi_dsub>
 801deee:	f1bb 0f00 	cmp.w	fp, #0
 801def2:	4604      	mov	r4, r0
 801def4:	460d      	mov	r5, r1
 801def6:	f6bf aed6 	bge.w	801dca6 <atan+0x3e>
 801defa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801defe:	461d      	mov	r5, r3
 801df00:	e6d1      	b.n	801dca6 <atan+0x3e>
 801df02:	a51d      	add	r5, pc, #116	; (adr r5, 801df78 <atan+0x310>)
 801df04:	e9d5 4500 	ldrd	r4, r5, [r5]
 801df08:	e6cd      	b.n	801dca6 <atan+0x3e>
 801df0a:	bf00      	nop
 801df0c:	f3af 8000 	nop.w
 801df10:	54442d18 	.word	0x54442d18
 801df14:	bff921fb 	.word	0xbff921fb
 801df18:	8800759c 	.word	0x8800759c
 801df1c:	7e37e43c 	.word	0x7e37e43c
 801df20:	e322da11 	.word	0xe322da11
 801df24:	3f90ad3a 	.word	0x3f90ad3a
 801df28:	24760deb 	.word	0x24760deb
 801df2c:	3fa97b4b 	.word	0x3fa97b4b
 801df30:	a0d03d51 	.word	0xa0d03d51
 801df34:	3fb10d66 	.word	0x3fb10d66
 801df38:	c54c206e 	.word	0xc54c206e
 801df3c:	3fb745cd 	.word	0x3fb745cd
 801df40:	920083ff 	.word	0x920083ff
 801df44:	3fc24924 	.word	0x3fc24924
 801df48:	5555550d 	.word	0x5555550d
 801df4c:	3fd55555 	.word	0x3fd55555
 801df50:	2c6a6c2f 	.word	0x2c6a6c2f
 801df54:	bfa2b444 	.word	0xbfa2b444
 801df58:	52defd9a 	.word	0x52defd9a
 801df5c:	3fadde2d 	.word	0x3fadde2d
 801df60:	af749a6d 	.word	0xaf749a6d
 801df64:	3fb3b0f2 	.word	0x3fb3b0f2
 801df68:	fe231671 	.word	0xfe231671
 801df6c:	3fbc71c6 	.word	0x3fbc71c6
 801df70:	9998ebc4 	.word	0x9998ebc4
 801df74:	3fc99999 	.word	0x3fc99999
 801df78:	54442d18 	.word	0x54442d18
 801df7c:	3ff921fb 	.word	0x3ff921fb
 801df80:	440fffff 	.word	0x440fffff
 801df84:	7ff00000 	.word	0x7ff00000
 801df88:	3fdbffff 	.word	0x3fdbffff
 801df8c:	3ff00000 	.word	0x3ff00000
 801df90:	3ff2ffff 	.word	0x3ff2ffff
 801df94:	40038000 	.word	0x40038000
 801df98:	3ff80000 	.word	0x3ff80000
 801df9c:	bff00000 	.word	0xbff00000
 801dfa0:	08021520 	.word	0x08021520
 801dfa4:	08021500 	.word	0x08021500

0801dfa8 <fabs>:
 801dfa8:	ec51 0b10 	vmov	r0, r1, d0
 801dfac:	ee10 2a10 	vmov	r2, s0
 801dfb0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801dfb4:	ec43 2b10 	vmov	d0, r2, r3
 801dfb8:	4770      	bx	lr
	...

0801dfbc <atanf>:
 801dfbc:	b538      	push	{r3, r4, r5, lr}
 801dfbe:	ee10 5a10 	vmov	r5, s0
 801dfc2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801dfc6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801dfca:	eef0 7a40 	vmov.f32	s15, s0
 801dfce:	db10      	blt.n	801dff2 <atanf+0x36>
 801dfd0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801dfd4:	dd04      	ble.n	801dfe0 <atanf+0x24>
 801dfd6:	ee70 7a00 	vadd.f32	s15, s0, s0
 801dfda:	eeb0 0a67 	vmov.f32	s0, s15
 801dfde:	bd38      	pop	{r3, r4, r5, pc}
 801dfe0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801e118 <atanf+0x15c>
 801dfe4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801e11c <atanf+0x160>
 801dfe8:	2d00      	cmp	r5, #0
 801dfea:	bfd8      	it	le
 801dfec:	eef0 7a40 	vmovle.f32	s15, s0
 801dff0:	e7f3      	b.n	801dfda <atanf+0x1e>
 801dff2:	4b4b      	ldr	r3, [pc, #300]	; (801e120 <atanf+0x164>)
 801dff4:	429c      	cmp	r4, r3
 801dff6:	dc10      	bgt.n	801e01a <atanf+0x5e>
 801dff8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801dffc:	da0a      	bge.n	801e014 <atanf+0x58>
 801dffe:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801e124 <atanf+0x168>
 801e002:	ee30 7a07 	vadd.f32	s14, s0, s14
 801e006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e00a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801e00e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e012:	dce2      	bgt.n	801dfda <atanf+0x1e>
 801e014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e018:	e013      	b.n	801e042 <atanf+0x86>
 801e01a:	f000 f8e3 	bl	801e1e4 <fabsf>
 801e01e:	4b42      	ldr	r3, [pc, #264]	; (801e128 <atanf+0x16c>)
 801e020:	429c      	cmp	r4, r3
 801e022:	dc4f      	bgt.n	801e0c4 <atanf+0x108>
 801e024:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801e028:	429c      	cmp	r4, r3
 801e02a:	dc41      	bgt.n	801e0b0 <atanf+0xf4>
 801e02c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801e030:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801e034:	eea0 7a27 	vfma.f32	s14, s0, s15
 801e038:	2300      	movs	r3, #0
 801e03a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801e03e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e042:	1c5a      	adds	r2, r3, #1
 801e044:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801e048:	eddf 5a38 	vldr	s11, [pc, #224]	; 801e12c <atanf+0x170>
 801e04c:	ed9f 6a38 	vldr	s12, [pc, #224]	; 801e130 <atanf+0x174>
 801e050:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801e134 <atanf+0x178>
 801e054:	ed9f 0a38 	vldr	s0, [pc, #224]	; 801e138 <atanf+0x17c>
 801e058:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801e05c:	eea7 6a25 	vfma.f32	s12, s14, s11
 801e060:	eddf 5a36 	vldr	s11, [pc, #216]	; 801e13c <atanf+0x180>
 801e064:	eee6 5a07 	vfma.f32	s11, s12, s14
 801e068:	ed9f 6a35 	vldr	s12, [pc, #212]	; 801e140 <atanf+0x184>
 801e06c:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e070:	eddf 5a34 	vldr	s11, [pc, #208]	; 801e144 <atanf+0x188>
 801e074:	eee6 5a07 	vfma.f32	s11, s12, s14
 801e078:	ed9f 6a33 	vldr	s12, [pc, #204]	; 801e148 <atanf+0x18c>
 801e07c:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e080:	eddf 5a32 	vldr	s11, [pc, #200]	; 801e14c <atanf+0x190>
 801e084:	eee7 5a05 	vfma.f32	s11, s14, s10
 801e088:	ed9f 5a31 	vldr	s10, [pc, #196]	; 801e150 <atanf+0x194>
 801e08c:	eea5 5a87 	vfma.f32	s10, s11, s14
 801e090:	eddf 5a30 	vldr	s11, [pc, #192]	; 801e154 <atanf+0x198>
 801e094:	eee5 5a07 	vfma.f32	s11, s10, s14
 801e098:	eea5 0a87 	vfma.f32	s0, s11, s14
 801e09c:	ee20 0a07 	vmul.f32	s0, s0, s14
 801e0a0:	eea6 0a26 	vfma.f32	s0, s12, s13
 801e0a4:	ee27 0a80 	vmul.f32	s0, s15, s0
 801e0a8:	d121      	bne.n	801e0ee <atanf+0x132>
 801e0aa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801e0ae:	e794      	b.n	801dfda <atanf+0x1e>
 801e0b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e0b4:	ee30 7a67 	vsub.f32	s14, s0, s15
 801e0b8:	ee30 0a27 	vadd.f32	s0, s0, s15
 801e0bc:	2301      	movs	r3, #1
 801e0be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e0c2:	e7be      	b.n	801e042 <atanf+0x86>
 801e0c4:	4b24      	ldr	r3, [pc, #144]	; (801e158 <atanf+0x19c>)
 801e0c6:	429c      	cmp	r4, r3
 801e0c8:	dc0b      	bgt.n	801e0e2 <atanf+0x126>
 801e0ca:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801e0ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e0d2:	eea0 7a27 	vfma.f32	s14, s0, s15
 801e0d6:	2302      	movs	r3, #2
 801e0d8:	ee70 6a67 	vsub.f32	s13, s0, s15
 801e0dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e0e0:	e7af      	b.n	801e042 <atanf+0x86>
 801e0e2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801e0e6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e0ea:	2303      	movs	r3, #3
 801e0ec:	e7a9      	b.n	801e042 <atanf+0x86>
 801e0ee:	4a1b      	ldr	r2, [pc, #108]	; (801e15c <atanf+0x1a0>)
 801e0f0:	491b      	ldr	r1, [pc, #108]	; (801e160 <atanf+0x1a4>)
 801e0f2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801e0f6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e0fa:	ed93 7a00 	vldr	s14, [r3]
 801e0fe:	ee30 0a47 	vsub.f32	s0, s0, s14
 801e102:	2d00      	cmp	r5, #0
 801e104:	ee70 7a67 	vsub.f32	s15, s0, s15
 801e108:	ed92 0a00 	vldr	s0, [r2]
 801e10c:	ee70 7a67 	vsub.f32	s15, s0, s15
 801e110:	bfb8      	it	lt
 801e112:	eef1 7a67 	vneglt.f32	s15, s15
 801e116:	e760      	b.n	801dfda <atanf+0x1e>
 801e118:	3fc90fdb 	.word	0x3fc90fdb
 801e11c:	bfc90fdb 	.word	0xbfc90fdb
 801e120:	3edfffff 	.word	0x3edfffff
 801e124:	7149f2ca 	.word	0x7149f2ca
 801e128:	3f97ffff 	.word	0x3f97ffff
 801e12c:	3c8569d7 	.word	0x3c8569d7
 801e130:	3d4bda59 	.word	0x3d4bda59
 801e134:	bd15a221 	.word	0xbd15a221
 801e138:	be4ccccd 	.word	0xbe4ccccd
 801e13c:	3d886b35 	.word	0x3d886b35
 801e140:	3dba2e6e 	.word	0x3dba2e6e
 801e144:	3e124925 	.word	0x3e124925
 801e148:	3eaaaaab 	.word	0x3eaaaaab
 801e14c:	bd6ef16b 	.word	0xbd6ef16b
 801e150:	bd9d8795 	.word	0xbd9d8795
 801e154:	bde38e38 	.word	0xbde38e38
 801e158:	401bffff 	.word	0x401bffff
 801e15c:	08021540 	.word	0x08021540
 801e160:	08021550 	.word	0x08021550

0801e164 <cosf>:
 801e164:	ee10 3a10 	vmov	r3, s0
 801e168:	b507      	push	{r0, r1, r2, lr}
 801e16a:	4a1c      	ldr	r2, [pc, #112]	; (801e1dc <cosf+0x78>)
 801e16c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e170:	4293      	cmp	r3, r2
 801e172:	dc04      	bgt.n	801e17e <cosf+0x1a>
 801e174:	eddf 0a1a 	vldr	s1, [pc, #104]	; 801e1e0 <cosf+0x7c>
 801e178:	f001 fc70 	bl	801fa5c <__kernel_cosf>
 801e17c:	e004      	b.n	801e188 <cosf+0x24>
 801e17e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e182:	db04      	blt.n	801e18e <cosf+0x2a>
 801e184:	ee30 0a40 	vsub.f32	s0, s0, s0
 801e188:	b003      	add	sp, #12
 801e18a:	f85d fb04 	ldr.w	pc, [sp], #4
 801e18e:	4668      	mov	r0, sp
 801e190:	f001 fb24 	bl	801f7dc <__ieee754_rem_pio2f>
 801e194:	f000 0003 	and.w	r0, r0, #3
 801e198:	2801      	cmp	r0, #1
 801e19a:	d007      	beq.n	801e1ac <cosf+0x48>
 801e19c:	2802      	cmp	r0, #2
 801e19e:	d00e      	beq.n	801e1be <cosf+0x5a>
 801e1a0:	b9a0      	cbnz	r0, 801e1cc <cosf+0x68>
 801e1a2:	eddd 0a01 	vldr	s1, [sp, #4]
 801e1a6:	ed9d 0a00 	vldr	s0, [sp]
 801e1aa:	e7e5      	b.n	801e178 <cosf+0x14>
 801e1ac:	eddd 0a01 	vldr	s1, [sp, #4]
 801e1b0:	ed9d 0a00 	vldr	s0, [sp]
 801e1b4:	f001 ff3c 	bl	8020030 <__kernel_sinf>
 801e1b8:	eeb1 0a40 	vneg.f32	s0, s0
 801e1bc:	e7e4      	b.n	801e188 <cosf+0x24>
 801e1be:	eddd 0a01 	vldr	s1, [sp, #4]
 801e1c2:	ed9d 0a00 	vldr	s0, [sp]
 801e1c6:	f001 fc49 	bl	801fa5c <__kernel_cosf>
 801e1ca:	e7f5      	b.n	801e1b8 <cosf+0x54>
 801e1cc:	eddd 0a01 	vldr	s1, [sp, #4]
 801e1d0:	ed9d 0a00 	vldr	s0, [sp]
 801e1d4:	2001      	movs	r0, #1
 801e1d6:	f001 ff2b 	bl	8020030 <__kernel_sinf>
 801e1da:	e7d5      	b.n	801e188 <cosf+0x24>
 801e1dc:	3f490fd8 	.word	0x3f490fd8
 801e1e0:	00000000 	.word	0x00000000

0801e1e4 <fabsf>:
 801e1e4:	ee10 3a10 	vmov	r3, s0
 801e1e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e1ec:	ee00 3a10 	vmov	s0, r3
 801e1f0:	4770      	bx	lr
	...

0801e1f4 <sinf>:
 801e1f4:	ee10 3a10 	vmov	r3, s0
 801e1f8:	b507      	push	{r0, r1, r2, lr}
 801e1fa:	4a1d      	ldr	r2, [pc, #116]	; (801e270 <sinf+0x7c>)
 801e1fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e200:	4293      	cmp	r3, r2
 801e202:	dc05      	bgt.n	801e210 <sinf+0x1c>
 801e204:	eddf 0a1b 	vldr	s1, [pc, #108]	; 801e274 <sinf+0x80>
 801e208:	2000      	movs	r0, #0
 801e20a:	f001 ff11 	bl	8020030 <__kernel_sinf>
 801e20e:	e004      	b.n	801e21a <sinf+0x26>
 801e210:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e214:	db04      	blt.n	801e220 <sinf+0x2c>
 801e216:	ee30 0a40 	vsub.f32	s0, s0, s0
 801e21a:	b003      	add	sp, #12
 801e21c:	f85d fb04 	ldr.w	pc, [sp], #4
 801e220:	4668      	mov	r0, sp
 801e222:	f001 fadb 	bl	801f7dc <__ieee754_rem_pio2f>
 801e226:	f000 0003 	and.w	r0, r0, #3
 801e22a:	2801      	cmp	r0, #1
 801e22c:	d008      	beq.n	801e240 <sinf+0x4c>
 801e22e:	2802      	cmp	r0, #2
 801e230:	d00d      	beq.n	801e24e <sinf+0x5a>
 801e232:	b9b0      	cbnz	r0, 801e262 <sinf+0x6e>
 801e234:	eddd 0a01 	vldr	s1, [sp, #4]
 801e238:	ed9d 0a00 	vldr	s0, [sp]
 801e23c:	2001      	movs	r0, #1
 801e23e:	e7e4      	b.n	801e20a <sinf+0x16>
 801e240:	eddd 0a01 	vldr	s1, [sp, #4]
 801e244:	ed9d 0a00 	vldr	s0, [sp]
 801e248:	f001 fc08 	bl	801fa5c <__kernel_cosf>
 801e24c:	e7e5      	b.n	801e21a <sinf+0x26>
 801e24e:	eddd 0a01 	vldr	s1, [sp, #4]
 801e252:	ed9d 0a00 	vldr	s0, [sp]
 801e256:	2001      	movs	r0, #1
 801e258:	f001 feea 	bl	8020030 <__kernel_sinf>
 801e25c:	eeb1 0a40 	vneg.f32	s0, s0
 801e260:	e7db      	b.n	801e21a <sinf+0x26>
 801e262:	eddd 0a01 	vldr	s1, [sp, #4]
 801e266:	ed9d 0a00 	vldr	s0, [sp]
 801e26a:	f001 fbf7 	bl	801fa5c <__kernel_cosf>
 801e26e:	e7f5      	b.n	801e25c <sinf+0x68>
 801e270:	3f490fd8 	.word	0x3f490fd8
 801e274:	00000000 	.word	0x00000000

0801e278 <pow>:
 801e278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e27c:	ec59 8b10 	vmov	r8, r9, d0
 801e280:	ec57 6b11 	vmov	r6, r7, d1
 801e284:	f000 f974 	bl	801e570 <__ieee754_pow>
 801e288:	4b4e      	ldr	r3, [pc, #312]	; (801e3c4 <pow+0x14c>)
 801e28a:	f993 3000 	ldrsb.w	r3, [r3]
 801e28e:	3301      	adds	r3, #1
 801e290:	ec55 4b10 	vmov	r4, r5, d0
 801e294:	d015      	beq.n	801e2c2 <pow+0x4a>
 801e296:	4632      	mov	r2, r6
 801e298:	463b      	mov	r3, r7
 801e29a:	4630      	mov	r0, r6
 801e29c:	4639      	mov	r1, r7
 801e29e:	f7e2 fc45 	bl	8000b2c <__aeabi_dcmpun>
 801e2a2:	b970      	cbnz	r0, 801e2c2 <pow+0x4a>
 801e2a4:	4642      	mov	r2, r8
 801e2a6:	464b      	mov	r3, r9
 801e2a8:	4640      	mov	r0, r8
 801e2aa:	4649      	mov	r1, r9
 801e2ac:	f7e2 fc3e 	bl	8000b2c <__aeabi_dcmpun>
 801e2b0:	2200      	movs	r2, #0
 801e2b2:	2300      	movs	r3, #0
 801e2b4:	b148      	cbz	r0, 801e2ca <pow+0x52>
 801e2b6:	4630      	mov	r0, r6
 801e2b8:	4639      	mov	r1, r7
 801e2ba:	f7e2 fc05 	bl	8000ac8 <__aeabi_dcmpeq>
 801e2be:	2800      	cmp	r0, #0
 801e2c0:	d17d      	bne.n	801e3be <pow+0x146>
 801e2c2:	ec45 4b10 	vmov	d0, r4, r5
 801e2c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e2ca:	4640      	mov	r0, r8
 801e2cc:	4649      	mov	r1, r9
 801e2ce:	f7e2 fbfb 	bl	8000ac8 <__aeabi_dcmpeq>
 801e2d2:	b1e0      	cbz	r0, 801e30e <pow+0x96>
 801e2d4:	2200      	movs	r2, #0
 801e2d6:	2300      	movs	r3, #0
 801e2d8:	4630      	mov	r0, r6
 801e2da:	4639      	mov	r1, r7
 801e2dc:	f7e2 fbf4 	bl	8000ac8 <__aeabi_dcmpeq>
 801e2e0:	2800      	cmp	r0, #0
 801e2e2:	d16c      	bne.n	801e3be <pow+0x146>
 801e2e4:	ec47 6b10 	vmov	d0, r6, r7
 801e2e8:	f001 feea 	bl	80200c0 <finite>
 801e2ec:	2800      	cmp	r0, #0
 801e2ee:	d0e8      	beq.n	801e2c2 <pow+0x4a>
 801e2f0:	2200      	movs	r2, #0
 801e2f2:	2300      	movs	r3, #0
 801e2f4:	4630      	mov	r0, r6
 801e2f6:	4639      	mov	r1, r7
 801e2f8:	f7e2 fbf0 	bl	8000adc <__aeabi_dcmplt>
 801e2fc:	2800      	cmp	r0, #0
 801e2fe:	d0e0      	beq.n	801e2c2 <pow+0x4a>
 801e300:	f7fa ffcc 	bl	801929c <__errno>
 801e304:	2321      	movs	r3, #33	; 0x21
 801e306:	6003      	str	r3, [r0, #0]
 801e308:	2400      	movs	r4, #0
 801e30a:	4d2f      	ldr	r5, [pc, #188]	; (801e3c8 <pow+0x150>)
 801e30c:	e7d9      	b.n	801e2c2 <pow+0x4a>
 801e30e:	ec45 4b10 	vmov	d0, r4, r5
 801e312:	f001 fed5 	bl	80200c0 <finite>
 801e316:	bbb8      	cbnz	r0, 801e388 <pow+0x110>
 801e318:	ec49 8b10 	vmov	d0, r8, r9
 801e31c:	f001 fed0 	bl	80200c0 <finite>
 801e320:	b390      	cbz	r0, 801e388 <pow+0x110>
 801e322:	ec47 6b10 	vmov	d0, r6, r7
 801e326:	f001 fecb 	bl	80200c0 <finite>
 801e32a:	b368      	cbz	r0, 801e388 <pow+0x110>
 801e32c:	4622      	mov	r2, r4
 801e32e:	462b      	mov	r3, r5
 801e330:	4620      	mov	r0, r4
 801e332:	4629      	mov	r1, r5
 801e334:	f7e2 fbfa 	bl	8000b2c <__aeabi_dcmpun>
 801e338:	b160      	cbz	r0, 801e354 <pow+0xdc>
 801e33a:	f7fa ffaf 	bl	801929c <__errno>
 801e33e:	2321      	movs	r3, #33	; 0x21
 801e340:	6003      	str	r3, [r0, #0]
 801e342:	2200      	movs	r2, #0
 801e344:	2300      	movs	r3, #0
 801e346:	4610      	mov	r0, r2
 801e348:	4619      	mov	r1, r3
 801e34a:	f7e2 fa7f 	bl	800084c <__aeabi_ddiv>
 801e34e:	4604      	mov	r4, r0
 801e350:	460d      	mov	r5, r1
 801e352:	e7b6      	b.n	801e2c2 <pow+0x4a>
 801e354:	f7fa ffa2 	bl	801929c <__errno>
 801e358:	2322      	movs	r3, #34	; 0x22
 801e35a:	6003      	str	r3, [r0, #0]
 801e35c:	2200      	movs	r2, #0
 801e35e:	2300      	movs	r3, #0
 801e360:	4640      	mov	r0, r8
 801e362:	4649      	mov	r1, r9
 801e364:	f7e2 fbba 	bl	8000adc <__aeabi_dcmplt>
 801e368:	2400      	movs	r4, #0
 801e36a:	b158      	cbz	r0, 801e384 <pow+0x10c>
 801e36c:	ec47 6b10 	vmov	d0, r6, r7
 801e370:	f001 feb2 	bl	80200d8 <rint>
 801e374:	4632      	mov	r2, r6
 801e376:	ec51 0b10 	vmov	r0, r1, d0
 801e37a:	463b      	mov	r3, r7
 801e37c:	f7e2 fba4 	bl	8000ac8 <__aeabi_dcmpeq>
 801e380:	2800      	cmp	r0, #0
 801e382:	d0c2      	beq.n	801e30a <pow+0x92>
 801e384:	4d11      	ldr	r5, [pc, #68]	; (801e3cc <pow+0x154>)
 801e386:	e79c      	b.n	801e2c2 <pow+0x4a>
 801e388:	2200      	movs	r2, #0
 801e38a:	2300      	movs	r3, #0
 801e38c:	4620      	mov	r0, r4
 801e38e:	4629      	mov	r1, r5
 801e390:	f7e2 fb9a 	bl	8000ac8 <__aeabi_dcmpeq>
 801e394:	2800      	cmp	r0, #0
 801e396:	d094      	beq.n	801e2c2 <pow+0x4a>
 801e398:	ec49 8b10 	vmov	d0, r8, r9
 801e39c:	f001 fe90 	bl	80200c0 <finite>
 801e3a0:	2800      	cmp	r0, #0
 801e3a2:	d08e      	beq.n	801e2c2 <pow+0x4a>
 801e3a4:	ec47 6b10 	vmov	d0, r6, r7
 801e3a8:	f001 fe8a 	bl	80200c0 <finite>
 801e3ac:	2800      	cmp	r0, #0
 801e3ae:	d088      	beq.n	801e2c2 <pow+0x4a>
 801e3b0:	f7fa ff74 	bl	801929c <__errno>
 801e3b4:	2322      	movs	r3, #34	; 0x22
 801e3b6:	6003      	str	r3, [r0, #0]
 801e3b8:	2400      	movs	r4, #0
 801e3ba:	2500      	movs	r5, #0
 801e3bc:	e781      	b.n	801e2c2 <pow+0x4a>
 801e3be:	4d04      	ldr	r5, [pc, #16]	; (801e3d0 <pow+0x158>)
 801e3c0:	2400      	movs	r4, #0
 801e3c2:	e77e      	b.n	801e2c2 <pow+0x4a>
 801e3c4:	200002a4 	.word	0x200002a4
 801e3c8:	fff00000 	.word	0xfff00000
 801e3cc:	7ff00000 	.word	0x7ff00000
 801e3d0:	3ff00000 	.word	0x3ff00000

0801e3d4 <sqrt>:
 801e3d4:	b538      	push	{r3, r4, r5, lr}
 801e3d6:	ed2d 8b02 	vpush	{d8}
 801e3da:	ec55 4b10 	vmov	r4, r5, d0
 801e3de:	f000 fde9 	bl	801efb4 <__ieee754_sqrt>
 801e3e2:	4b15      	ldr	r3, [pc, #84]	; (801e438 <sqrt+0x64>)
 801e3e4:	eeb0 8a40 	vmov.f32	s16, s0
 801e3e8:	eef0 8a60 	vmov.f32	s17, s1
 801e3ec:	f993 3000 	ldrsb.w	r3, [r3]
 801e3f0:	3301      	adds	r3, #1
 801e3f2:	d019      	beq.n	801e428 <sqrt+0x54>
 801e3f4:	4622      	mov	r2, r4
 801e3f6:	462b      	mov	r3, r5
 801e3f8:	4620      	mov	r0, r4
 801e3fa:	4629      	mov	r1, r5
 801e3fc:	f7e2 fb96 	bl	8000b2c <__aeabi_dcmpun>
 801e400:	b990      	cbnz	r0, 801e428 <sqrt+0x54>
 801e402:	2200      	movs	r2, #0
 801e404:	2300      	movs	r3, #0
 801e406:	4620      	mov	r0, r4
 801e408:	4629      	mov	r1, r5
 801e40a:	f7e2 fb67 	bl	8000adc <__aeabi_dcmplt>
 801e40e:	b158      	cbz	r0, 801e428 <sqrt+0x54>
 801e410:	f7fa ff44 	bl	801929c <__errno>
 801e414:	2321      	movs	r3, #33	; 0x21
 801e416:	6003      	str	r3, [r0, #0]
 801e418:	2200      	movs	r2, #0
 801e41a:	2300      	movs	r3, #0
 801e41c:	4610      	mov	r0, r2
 801e41e:	4619      	mov	r1, r3
 801e420:	f7e2 fa14 	bl	800084c <__aeabi_ddiv>
 801e424:	ec41 0b18 	vmov	d8, r0, r1
 801e428:	eeb0 0a48 	vmov.f32	s0, s16
 801e42c:	eef0 0a68 	vmov.f32	s1, s17
 801e430:	ecbd 8b02 	vpop	{d8}
 801e434:	bd38      	pop	{r3, r4, r5, pc}
 801e436:	bf00      	nop
 801e438:	200002a4 	.word	0x200002a4

0801e43c <atan2f>:
 801e43c:	f000 be6e 	b.w	801f11c <__ieee754_atan2f>

0801e440 <powf>:
 801e440:	b508      	push	{r3, lr}
 801e442:	ed2d 8b04 	vpush	{d8-d9}
 801e446:	eeb0 9a40 	vmov.f32	s18, s0
 801e44a:	eef0 8a60 	vmov.f32	s17, s1
 801e44e:	f000 ff05 	bl	801f25c <__ieee754_powf>
 801e452:	4b43      	ldr	r3, [pc, #268]	; (801e560 <powf+0x120>)
 801e454:	f993 3000 	ldrsb.w	r3, [r3]
 801e458:	3301      	adds	r3, #1
 801e45a:	eeb0 8a40 	vmov.f32	s16, s0
 801e45e:	d012      	beq.n	801e486 <powf+0x46>
 801e460:	eef4 8a68 	vcmp.f32	s17, s17
 801e464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e468:	d60d      	bvs.n	801e486 <powf+0x46>
 801e46a:	eeb4 9a49 	vcmp.f32	s18, s18
 801e46e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e472:	d70d      	bvc.n	801e490 <powf+0x50>
 801e474:	eef5 8a40 	vcmp.f32	s17, #0.0
 801e478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e47c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e480:	bf08      	it	eq
 801e482:	eeb0 8a67 	vmoveq.f32	s16, s15
 801e486:	eeb0 0a48 	vmov.f32	s0, s16
 801e48a:	ecbd 8b04 	vpop	{d8-d9}
 801e48e:	bd08      	pop	{r3, pc}
 801e490:	eddf 9a34 	vldr	s19, [pc, #208]	; 801e564 <powf+0x124>
 801e494:	eeb4 9a69 	vcmp.f32	s18, s19
 801e498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e49c:	d116      	bne.n	801e4cc <powf+0x8c>
 801e49e:	eef4 8a69 	vcmp.f32	s17, s19
 801e4a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4a6:	d057      	beq.n	801e558 <powf+0x118>
 801e4a8:	eeb0 0a68 	vmov.f32	s0, s17
 801e4ac:	f7fe feb8 	bl	801d220 <finitef>
 801e4b0:	2800      	cmp	r0, #0
 801e4b2:	d0e8      	beq.n	801e486 <powf+0x46>
 801e4b4:	eef4 8ae9 	vcmpe.f32	s17, s19
 801e4b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4bc:	d5e3      	bpl.n	801e486 <powf+0x46>
 801e4be:	f7fa feed 	bl	801929c <__errno>
 801e4c2:	2321      	movs	r3, #33	; 0x21
 801e4c4:	6003      	str	r3, [r0, #0]
 801e4c6:	ed9f 8a28 	vldr	s16, [pc, #160]	; 801e568 <powf+0x128>
 801e4ca:	e7dc      	b.n	801e486 <powf+0x46>
 801e4cc:	f7fe fea8 	bl	801d220 <finitef>
 801e4d0:	bb50      	cbnz	r0, 801e528 <powf+0xe8>
 801e4d2:	eeb0 0a49 	vmov.f32	s0, s18
 801e4d6:	f7fe fea3 	bl	801d220 <finitef>
 801e4da:	b328      	cbz	r0, 801e528 <powf+0xe8>
 801e4dc:	eeb0 0a68 	vmov.f32	s0, s17
 801e4e0:	f7fe fe9e 	bl	801d220 <finitef>
 801e4e4:	b300      	cbz	r0, 801e528 <powf+0xe8>
 801e4e6:	eeb4 8a48 	vcmp.f32	s16, s16
 801e4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4ee:	d706      	bvc.n	801e4fe <powf+0xbe>
 801e4f0:	f7fa fed4 	bl	801929c <__errno>
 801e4f4:	2321      	movs	r3, #33	; 0x21
 801e4f6:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 801e4fa:	6003      	str	r3, [r0, #0]
 801e4fc:	e7c3      	b.n	801e486 <powf+0x46>
 801e4fe:	f7fa fecd 	bl	801929c <__errno>
 801e502:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 801e506:	2322      	movs	r3, #34	; 0x22
 801e508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e50c:	6003      	str	r3, [r0, #0]
 801e50e:	d508      	bpl.n	801e522 <powf+0xe2>
 801e510:	eeb0 0a68 	vmov.f32	s0, s17
 801e514:	f001 ff34 	bl	8020380 <rintf>
 801e518:	eeb4 0a68 	vcmp.f32	s0, s17
 801e51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e520:	d1d1      	bne.n	801e4c6 <powf+0x86>
 801e522:	ed9f 8a12 	vldr	s16, [pc, #72]	; 801e56c <powf+0x12c>
 801e526:	e7ae      	b.n	801e486 <powf+0x46>
 801e528:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801e52c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e530:	d1a9      	bne.n	801e486 <powf+0x46>
 801e532:	eeb0 0a49 	vmov.f32	s0, s18
 801e536:	f7fe fe73 	bl	801d220 <finitef>
 801e53a:	2800      	cmp	r0, #0
 801e53c:	d0a3      	beq.n	801e486 <powf+0x46>
 801e53e:	eeb0 0a68 	vmov.f32	s0, s17
 801e542:	f7fe fe6d 	bl	801d220 <finitef>
 801e546:	2800      	cmp	r0, #0
 801e548:	d09d      	beq.n	801e486 <powf+0x46>
 801e54a:	f7fa fea7 	bl	801929c <__errno>
 801e54e:	2322      	movs	r3, #34	; 0x22
 801e550:	ed9f 8a04 	vldr	s16, [pc, #16]	; 801e564 <powf+0x124>
 801e554:	6003      	str	r3, [r0, #0]
 801e556:	e796      	b.n	801e486 <powf+0x46>
 801e558:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801e55c:	e793      	b.n	801e486 <powf+0x46>
 801e55e:	bf00      	nop
 801e560:	200002a4 	.word	0x200002a4
 801e564:	00000000 	.word	0x00000000
 801e568:	ff800000 	.word	0xff800000
 801e56c:	7f800000 	.word	0x7f800000

0801e570 <__ieee754_pow>:
 801e570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e574:	ed2d 8b06 	vpush	{d8-d10}
 801e578:	b08d      	sub	sp, #52	; 0x34
 801e57a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801e57e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 801e582:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801e586:	ea56 0100 	orrs.w	r1, r6, r0
 801e58a:	ec53 2b10 	vmov	r2, r3, d0
 801e58e:	f000 84d1 	beq.w	801ef34 <__ieee754_pow+0x9c4>
 801e592:	497f      	ldr	r1, [pc, #508]	; (801e790 <__ieee754_pow+0x220>)
 801e594:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 801e598:	428c      	cmp	r4, r1
 801e59a:	ee10 8a10 	vmov	r8, s0
 801e59e:	4699      	mov	r9, r3
 801e5a0:	dc09      	bgt.n	801e5b6 <__ieee754_pow+0x46>
 801e5a2:	d103      	bne.n	801e5ac <__ieee754_pow+0x3c>
 801e5a4:	b97a      	cbnz	r2, 801e5c6 <__ieee754_pow+0x56>
 801e5a6:	42a6      	cmp	r6, r4
 801e5a8:	dd02      	ble.n	801e5b0 <__ieee754_pow+0x40>
 801e5aa:	e00c      	b.n	801e5c6 <__ieee754_pow+0x56>
 801e5ac:	428e      	cmp	r6, r1
 801e5ae:	dc02      	bgt.n	801e5b6 <__ieee754_pow+0x46>
 801e5b0:	428e      	cmp	r6, r1
 801e5b2:	d110      	bne.n	801e5d6 <__ieee754_pow+0x66>
 801e5b4:	b178      	cbz	r0, 801e5d6 <__ieee754_pow+0x66>
 801e5b6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801e5ba:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801e5be:	ea54 0308 	orrs.w	r3, r4, r8
 801e5c2:	f000 84b7 	beq.w	801ef34 <__ieee754_pow+0x9c4>
 801e5c6:	4873      	ldr	r0, [pc, #460]	; (801e794 <__ieee754_pow+0x224>)
 801e5c8:	b00d      	add	sp, #52	; 0x34
 801e5ca:	ecbd 8b06 	vpop	{d8-d10}
 801e5ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5d2:	f7fe be1d 	b.w	801d210 <nan>
 801e5d6:	f1b9 0f00 	cmp.w	r9, #0
 801e5da:	da36      	bge.n	801e64a <__ieee754_pow+0xda>
 801e5dc:	496e      	ldr	r1, [pc, #440]	; (801e798 <__ieee754_pow+0x228>)
 801e5de:	428e      	cmp	r6, r1
 801e5e0:	dc51      	bgt.n	801e686 <__ieee754_pow+0x116>
 801e5e2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 801e5e6:	428e      	cmp	r6, r1
 801e5e8:	f340 84af 	ble.w	801ef4a <__ieee754_pow+0x9da>
 801e5ec:	1531      	asrs	r1, r6, #20
 801e5ee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801e5f2:	2914      	cmp	r1, #20
 801e5f4:	dd0f      	ble.n	801e616 <__ieee754_pow+0xa6>
 801e5f6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 801e5fa:	fa20 fc01 	lsr.w	ip, r0, r1
 801e5fe:	fa0c f101 	lsl.w	r1, ip, r1
 801e602:	4281      	cmp	r1, r0
 801e604:	f040 84a1 	bne.w	801ef4a <__ieee754_pow+0x9da>
 801e608:	f00c 0c01 	and.w	ip, ip, #1
 801e60c:	f1cc 0102 	rsb	r1, ip, #2
 801e610:	9100      	str	r1, [sp, #0]
 801e612:	b180      	cbz	r0, 801e636 <__ieee754_pow+0xc6>
 801e614:	e059      	b.n	801e6ca <__ieee754_pow+0x15a>
 801e616:	2800      	cmp	r0, #0
 801e618:	d155      	bne.n	801e6c6 <__ieee754_pow+0x156>
 801e61a:	f1c1 0114 	rsb	r1, r1, #20
 801e61e:	fa46 fc01 	asr.w	ip, r6, r1
 801e622:	fa0c f101 	lsl.w	r1, ip, r1
 801e626:	42b1      	cmp	r1, r6
 801e628:	f040 848c 	bne.w	801ef44 <__ieee754_pow+0x9d4>
 801e62c:	f00c 0c01 	and.w	ip, ip, #1
 801e630:	f1cc 0102 	rsb	r1, ip, #2
 801e634:	9100      	str	r1, [sp, #0]
 801e636:	4959      	ldr	r1, [pc, #356]	; (801e79c <__ieee754_pow+0x22c>)
 801e638:	428e      	cmp	r6, r1
 801e63a:	d12d      	bne.n	801e698 <__ieee754_pow+0x128>
 801e63c:	2f00      	cmp	r7, #0
 801e63e:	da79      	bge.n	801e734 <__ieee754_pow+0x1c4>
 801e640:	4956      	ldr	r1, [pc, #344]	; (801e79c <__ieee754_pow+0x22c>)
 801e642:	2000      	movs	r0, #0
 801e644:	f7e2 f902 	bl	800084c <__aeabi_ddiv>
 801e648:	e016      	b.n	801e678 <__ieee754_pow+0x108>
 801e64a:	2100      	movs	r1, #0
 801e64c:	9100      	str	r1, [sp, #0]
 801e64e:	2800      	cmp	r0, #0
 801e650:	d13b      	bne.n	801e6ca <__ieee754_pow+0x15a>
 801e652:	494f      	ldr	r1, [pc, #316]	; (801e790 <__ieee754_pow+0x220>)
 801e654:	428e      	cmp	r6, r1
 801e656:	d1ee      	bne.n	801e636 <__ieee754_pow+0xc6>
 801e658:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801e65c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801e660:	ea53 0308 	orrs.w	r3, r3, r8
 801e664:	f000 8466 	beq.w	801ef34 <__ieee754_pow+0x9c4>
 801e668:	4b4d      	ldr	r3, [pc, #308]	; (801e7a0 <__ieee754_pow+0x230>)
 801e66a:	429c      	cmp	r4, r3
 801e66c:	dd0d      	ble.n	801e68a <__ieee754_pow+0x11a>
 801e66e:	2f00      	cmp	r7, #0
 801e670:	f280 8464 	bge.w	801ef3c <__ieee754_pow+0x9cc>
 801e674:	2000      	movs	r0, #0
 801e676:	2100      	movs	r1, #0
 801e678:	ec41 0b10 	vmov	d0, r0, r1
 801e67c:	b00d      	add	sp, #52	; 0x34
 801e67e:	ecbd 8b06 	vpop	{d8-d10}
 801e682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e686:	2102      	movs	r1, #2
 801e688:	e7e0      	b.n	801e64c <__ieee754_pow+0xdc>
 801e68a:	2f00      	cmp	r7, #0
 801e68c:	daf2      	bge.n	801e674 <__ieee754_pow+0x104>
 801e68e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 801e692:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801e696:	e7ef      	b.n	801e678 <__ieee754_pow+0x108>
 801e698:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 801e69c:	d104      	bne.n	801e6a8 <__ieee754_pow+0x138>
 801e69e:	4610      	mov	r0, r2
 801e6a0:	4619      	mov	r1, r3
 801e6a2:	f7e1 ffa9 	bl	80005f8 <__aeabi_dmul>
 801e6a6:	e7e7      	b.n	801e678 <__ieee754_pow+0x108>
 801e6a8:	493e      	ldr	r1, [pc, #248]	; (801e7a4 <__ieee754_pow+0x234>)
 801e6aa:	428f      	cmp	r7, r1
 801e6ac:	d10d      	bne.n	801e6ca <__ieee754_pow+0x15a>
 801e6ae:	f1b9 0f00 	cmp.w	r9, #0
 801e6b2:	db0a      	blt.n	801e6ca <__ieee754_pow+0x15a>
 801e6b4:	ec43 2b10 	vmov	d0, r2, r3
 801e6b8:	b00d      	add	sp, #52	; 0x34
 801e6ba:	ecbd 8b06 	vpop	{d8-d10}
 801e6be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6c2:	f000 bc77 	b.w	801efb4 <__ieee754_sqrt>
 801e6c6:	2100      	movs	r1, #0
 801e6c8:	9100      	str	r1, [sp, #0]
 801e6ca:	ec43 2b10 	vmov	d0, r2, r3
 801e6ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801e6d2:	f7ff fc69 	bl	801dfa8 <fabs>
 801e6d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e6da:	ec51 0b10 	vmov	r0, r1, d0
 801e6de:	f1b8 0f00 	cmp.w	r8, #0
 801e6e2:	d12a      	bne.n	801e73a <__ieee754_pow+0x1ca>
 801e6e4:	b12c      	cbz	r4, 801e6f2 <__ieee754_pow+0x182>
 801e6e6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 801e79c <__ieee754_pow+0x22c>
 801e6ea:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 801e6ee:	45e6      	cmp	lr, ip
 801e6f0:	d123      	bne.n	801e73a <__ieee754_pow+0x1ca>
 801e6f2:	2f00      	cmp	r7, #0
 801e6f4:	da05      	bge.n	801e702 <__ieee754_pow+0x192>
 801e6f6:	4602      	mov	r2, r0
 801e6f8:	460b      	mov	r3, r1
 801e6fa:	2000      	movs	r0, #0
 801e6fc:	4927      	ldr	r1, [pc, #156]	; (801e79c <__ieee754_pow+0x22c>)
 801e6fe:	f7e2 f8a5 	bl	800084c <__aeabi_ddiv>
 801e702:	f1b9 0f00 	cmp.w	r9, #0
 801e706:	dab7      	bge.n	801e678 <__ieee754_pow+0x108>
 801e708:	9b00      	ldr	r3, [sp, #0]
 801e70a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801e70e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801e712:	4323      	orrs	r3, r4
 801e714:	d108      	bne.n	801e728 <__ieee754_pow+0x1b8>
 801e716:	4602      	mov	r2, r0
 801e718:	460b      	mov	r3, r1
 801e71a:	4610      	mov	r0, r2
 801e71c:	4619      	mov	r1, r3
 801e71e:	f7e1 fdb3 	bl	8000288 <__aeabi_dsub>
 801e722:	4602      	mov	r2, r0
 801e724:	460b      	mov	r3, r1
 801e726:	e78d      	b.n	801e644 <__ieee754_pow+0xd4>
 801e728:	9b00      	ldr	r3, [sp, #0]
 801e72a:	2b01      	cmp	r3, #1
 801e72c:	d1a4      	bne.n	801e678 <__ieee754_pow+0x108>
 801e72e:	4602      	mov	r2, r0
 801e730:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e734:	4610      	mov	r0, r2
 801e736:	4619      	mov	r1, r3
 801e738:	e79e      	b.n	801e678 <__ieee754_pow+0x108>
 801e73a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 801e73e:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 801e742:	950a      	str	r5, [sp, #40]	; 0x28
 801e744:	9d00      	ldr	r5, [sp, #0]
 801e746:	46ac      	mov	ip, r5
 801e748:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e74a:	ea5c 0505 	orrs.w	r5, ip, r5
 801e74e:	d0e4      	beq.n	801e71a <__ieee754_pow+0x1aa>
 801e750:	4b15      	ldr	r3, [pc, #84]	; (801e7a8 <__ieee754_pow+0x238>)
 801e752:	429e      	cmp	r6, r3
 801e754:	f340 80fc 	ble.w	801e950 <__ieee754_pow+0x3e0>
 801e758:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801e75c:	429e      	cmp	r6, r3
 801e75e:	4b10      	ldr	r3, [pc, #64]	; (801e7a0 <__ieee754_pow+0x230>)
 801e760:	dd07      	ble.n	801e772 <__ieee754_pow+0x202>
 801e762:	429c      	cmp	r4, r3
 801e764:	dc0a      	bgt.n	801e77c <__ieee754_pow+0x20c>
 801e766:	2f00      	cmp	r7, #0
 801e768:	da84      	bge.n	801e674 <__ieee754_pow+0x104>
 801e76a:	a307      	add	r3, pc, #28	; (adr r3, 801e788 <__ieee754_pow+0x218>)
 801e76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e770:	e795      	b.n	801e69e <__ieee754_pow+0x12e>
 801e772:	429c      	cmp	r4, r3
 801e774:	dbf7      	blt.n	801e766 <__ieee754_pow+0x1f6>
 801e776:	4b09      	ldr	r3, [pc, #36]	; (801e79c <__ieee754_pow+0x22c>)
 801e778:	429c      	cmp	r4, r3
 801e77a:	dd17      	ble.n	801e7ac <__ieee754_pow+0x23c>
 801e77c:	2f00      	cmp	r7, #0
 801e77e:	dcf4      	bgt.n	801e76a <__ieee754_pow+0x1fa>
 801e780:	e778      	b.n	801e674 <__ieee754_pow+0x104>
 801e782:	bf00      	nop
 801e784:	f3af 8000 	nop.w
 801e788:	8800759c 	.word	0x8800759c
 801e78c:	7e37e43c 	.word	0x7e37e43c
 801e790:	7ff00000 	.word	0x7ff00000
 801e794:	08021498 	.word	0x08021498
 801e798:	433fffff 	.word	0x433fffff
 801e79c:	3ff00000 	.word	0x3ff00000
 801e7a0:	3fefffff 	.word	0x3fefffff
 801e7a4:	3fe00000 	.word	0x3fe00000
 801e7a8:	41e00000 	.word	0x41e00000
 801e7ac:	4b64      	ldr	r3, [pc, #400]	; (801e940 <__ieee754_pow+0x3d0>)
 801e7ae:	2200      	movs	r2, #0
 801e7b0:	f7e1 fd6a 	bl	8000288 <__aeabi_dsub>
 801e7b4:	a356      	add	r3, pc, #344	; (adr r3, 801e910 <__ieee754_pow+0x3a0>)
 801e7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7ba:	4604      	mov	r4, r0
 801e7bc:	460d      	mov	r5, r1
 801e7be:	f7e1 ff1b 	bl	80005f8 <__aeabi_dmul>
 801e7c2:	a355      	add	r3, pc, #340	; (adr r3, 801e918 <__ieee754_pow+0x3a8>)
 801e7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7c8:	4606      	mov	r6, r0
 801e7ca:	460f      	mov	r7, r1
 801e7cc:	4620      	mov	r0, r4
 801e7ce:	4629      	mov	r1, r5
 801e7d0:	f7e1 ff12 	bl	80005f8 <__aeabi_dmul>
 801e7d4:	4b5b      	ldr	r3, [pc, #364]	; (801e944 <__ieee754_pow+0x3d4>)
 801e7d6:	4682      	mov	sl, r0
 801e7d8:	468b      	mov	fp, r1
 801e7da:	2200      	movs	r2, #0
 801e7dc:	4620      	mov	r0, r4
 801e7de:	4629      	mov	r1, r5
 801e7e0:	f7e1 ff0a 	bl	80005f8 <__aeabi_dmul>
 801e7e4:	4602      	mov	r2, r0
 801e7e6:	460b      	mov	r3, r1
 801e7e8:	a14d      	add	r1, pc, #308	; (adr r1, 801e920 <__ieee754_pow+0x3b0>)
 801e7ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e7ee:	f7e1 fd4b 	bl	8000288 <__aeabi_dsub>
 801e7f2:	4622      	mov	r2, r4
 801e7f4:	462b      	mov	r3, r5
 801e7f6:	f7e1 feff 	bl	80005f8 <__aeabi_dmul>
 801e7fa:	4602      	mov	r2, r0
 801e7fc:	460b      	mov	r3, r1
 801e7fe:	2000      	movs	r0, #0
 801e800:	4951      	ldr	r1, [pc, #324]	; (801e948 <__ieee754_pow+0x3d8>)
 801e802:	f7e1 fd41 	bl	8000288 <__aeabi_dsub>
 801e806:	4622      	mov	r2, r4
 801e808:	4680      	mov	r8, r0
 801e80a:	4689      	mov	r9, r1
 801e80c:	462b      	mov	r3, r5
 801e80e:	4620      	mov	r0, r4
 801e810:	4629      	mov	r1, r5
 801e812:	f7e1 fef1 	bl	80005f8 <__aeabi_dmul>
 801e816:	4602      	mov	r2, r0
 801e818:	460b      	mov	r3, r1
 801e81a:	4640      	mov	r0, r8
 801e81c:	4649      	mov	r1, r9
 801e81e:	f7e1 feeb 	bl	80005f8 <__aeabi_dmul>
 801e822:	a341      	add	r3, pc, #260	; (adr r3, 801e928 <__ieee754_pow+0x3b8>)
 801e824:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e828:	f7e1 fee6 	bl	80005f8 <__aeabi_dmul>
 801e82c:	4602      	mov	r2, r0
 801e82e:	460b      	mov	r3, r1
 801e830:	4650      	mov	r0, sl
 801e832:	4659      	mov	r1, fp
 801e834:	f7e1 fd28 	bl	8000288 <__aeabi_dsub>
 801e838:	4602      	mov	r2, r0
 801e83a:	460b      	mov	r3, r1
 801e83c:	4680      	mov	r8, r0
 801e83e:	4689      	mov	r9, r1
 801e840:	4630      	mov	r0, r6
 801e842:	4639      	mov	r1, r7
 801e844:	f7e1 fd22 	bl	800028c <__adddf3>
 801e848:	2400      	movs	r4, #0
 801e84a:	4632      	mov	r2, r6
 801e84c:	463b      	mov	r3, r7
 801e84e:	4620      	mov	r0, r4
 801e850:	460d      	mov	r5, r1
 801e852:	f7e1 fd19 	bl	8000288 <__aeabi_dsub>
 801e856:	4602      	mov	r2, r0
 801e858:	460b      	mov	r3, r1
 801e85a:	4640      	mov	r0, r8
 801e85c:	4649      	mov	r1, r9
 801e85e:	f7e1 fd13 	bl	8000288 <__aeabi_dsub>
 801e862:	9b00      	ldr	r3, [sp, #0]
 801e864:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e866:	3b01      	subs	r3, #1
 801e868:	4313      	orrs	r3, r2
 801e86a:	4682      	mov	sl, r0
 801e86c:	468b      	mov	fp, r1
 801e86e:	f040 81f1 	bne.w	801ec54 <__ieee754_pow+0x6e4>
 801e872:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 801e930 <__ieee754_pow+0x3c0>
 801e876:	eeb0 8a47 	vmov.f32	s16, s14
 801e87a:	eef0 8a67 	vmov.f32	s17, s15
 801e87e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801e882:	2600      	movs	r6, #0
 801e884:	4632      	mov	r2, r6
 801e886:	463b      	mov	r3, r7
 801e888:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e88c:	f7e1 fcfc 	bl	8000288 <__aeabi_dsub>
 801e890:	4622      	mov	r2, r4
 801e892:	462b      	mov	r3, r5
 801e894:	f7e1 feb0 	bl	80005f8 <__aeabi_dmul>
 801e898:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e89c:	4680      	mov	r8, r0
 801e89e:	4689      	mov	r9, r1
 801e8a0:	4650      	mov	r0, sl
 801e8a2:	4659      	mov	r1, fp
 801e8a4:	f7e1 fea8 	bl	80005f8 <__aeabi_dmul>
 801e8a8:	4602      	mov	r2, r0
 801e8aa:	460b      	mov	r3, r1
 801e8ac:	4640      	mov	r0, r8
 801e8ae:	4649      	mov	r1, r9
 801e8b0:	f7e1 fcec 	bl	800028c <__adddf3>
 801e8b4:	4632      	mov	r2, r6
 801e8b6:	463b      	mov	r3, r7
 801e8b8:	4680      	mov	r8, r0
 801e8ba:	4689      	mov	r9, r1
 801e8bc:	4620      	mov	r0, r4
 801e8be:	4629      	mov	r1, r5
 801e8c0:	f7e1 fe9a 	bl	80005f8 <__aeabi_dmul>
 801e8c4:	460b      	mov	r3, r1
 801e8c6:	4604      	mov	r4, r0
 801e8c8:	460d      	mov	r5, r1
 801e8ca:	4602      	mov	r2, r0
 801e8cc:	4649      	mov	r1, r9
 801e8ce:	4640      	mov	r0, r8
 801e8d0:	f7e1 fcdc 	bl	800028c <__adddf3>
 801e8d4:	4b1d      	ldr	r3, [pc, #116]	; (801e94c <__ieee754_pow+0x3dc>)
 801e8d6:	4299      	cmp	r1, r3
 801e8d8:	ec45 4b19 	vmov	d9, r4, r5
 801e8dc:	4606      	mov	r6, r0
 801e8de:	460f      	mov	r7, r1
 801e8e0:	468b      	mov	fp, r1
 801e8e2:	f340 82fe 	ble.w	801eee2 <__ieee754_pow+0x972>
 801e8e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801e8ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801e8ee:	4303      	orrs	r3, r0
 801e8f0:	f000 81f0 	beq.w	801ecd4 <__ieee754_pow+0x764>
 801e8f4:	a310      	add	r3, pc, #64	; (adr r3, 801e938 <__ieee754_pow+0x3c8>)
 801e8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8fa:	ec51 0b18 	vmov	r0, r1, d8
 801e8fe:	f7e1 fe7b 	bl	80005f8 <__aeabi_dmul>
 801e902:	a30d      	add	r3, pc, #52	; (adr r3, 801e938 <__ieee754_pow+0x3c8>)
 801e904:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e908:	e6cb      	b.n	801e6a2 <__ieee754_pow+0x132>
 801e90a:	bf00      	nop
 801e90c:	f3af 8000 	nop.w
 801e910:	60000000 	.word	0x60000000
 801e914:	3ff71547 	.word	0x3ff71547
 801e918:	f85ddf44 	.word	0xf85ddf44
 801e91c:	3e54ae0b 	.word	0x3e54ae0b
 801e920:	55555555 	.word	0x55555555
 801e924:	3fd55555 	.word	0x3fd55555
 801e928:	652b82fe 	.word	0x652b82fe
 801e92c:	3ff71547 	.word	0x3ff71547
 801e930:	00000000 	.word	0x00000000
 801e934:	bff00000 	.word	0xbff00000
 801e938:	8800759c 	.word	0x8800759c
 801e93c:	7e37e43c 	.word	0x7e37e43c
 801e940:	3ff00000 	.word	0x3ff00000
 801e944:	3fd00000 	.word	0x3fd00000
 801e948:	3fe00000 	.word	0x3fe00000
 801e94c:	408fffff 	.word	0x408fffff
 801e950:	4bd7      	ldr	r3, [pc, #860]	; (801ecb0 <__ieee754_pow+0x740>)
 801e952:	ea03 0309 	and.w	r3, r3, r9
 801e956:	2200      	movs	r2, #0
 801e958:	b92b      	cbnz	r3, 801e966 <__ieee754_pow+0x3f6>
 801e95a:	4bd6      	ldr	r3, [pc, #856]	; (801ecb4 <__ieee754_pow+0x744>)
 801e95c:	f7e1 fe4c 	bl	80005f8 <__aeabi_dmul>
 801e960:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801e964:	460c      	mov	r4, r1
 801e966:	1523      	asrs	r3, r4, #20
 801e968:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801e96c:	4413      	add	r3, r2
 801e96e:	9309      	str	r3, [sp, #36]	; 0x24
 801e970:	4bd1      	ldr	r3, [pc, #836]	; (801ecb8 <__ieee754_pow+0x748>)
 801e972:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801e976:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801e97a:	429c      	cmp	r4, r3
 801e97c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801e980:	dd08      	ble.n	801e994 <__ieee754_pow+0x424>
 801e982:	4bce      	ldr	r3, [pc, #824]	; (801ecbc <__ieee754_pow+0x74c>)
 801e984:	429c      	cmp	r4, r3
 801e986:	f340 8163 	ble.w	801ec50 <__ieee754_pow+0x6e0>
 801e98a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e98c:	3301      	adds	r3, #1
 801e98e:	9309      	str	r3, [sp, #36]	; 0x24
 801e990:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801e994:	2400      	movs	r4, #0
 801e996:	00e3      	lsls	r3, r4, #3
 801e998:	930b      	str	r3, [sp, #44]	; 0x2c
 801e99a:	4bc9      	ldr	r3, [pc, #804]	; (801ecc0 <__ieee754_pow+0x750>)
 801e99c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e9a0:	ed93 7b00 	vldr	d7, [r3]
 801e9a4:	4629      	mov	r1, r5
 801e9a6:	ec53 2b17 	vmov	r2, r3, d7
 801e9aa:	eeb0 8a47 	vmov.f32	s16, s14
 801e9ae:	eef0 8a67 	vmov.f32	s17, s15
 801e9b2:	4682      	mov	sl, r0
 801e9b4:	f7e1 fc68 	bl	8000288 <__aeabi_dsub>
 801e9b8:	4652      	mov	r2, sl
 801e9ba:	4606      	mov	r6, r0
 801e9bc:	460f      	mov	r7, r1
 801e9be:	462b      	mov	r3, r5
 801e9c0:	ec51 0b18 	vmov	r0, r1, d8
 801e9c4:	f7e1 fc62 	bl	800028c <__adddf3>
 801e9c8:	4602      	mov	r2, r0
 801e9ca:	460b      	mov	r3, r1
 801e9cc:	2000      	movs	r0, #0
 801e9ce:	49bd      	ldr	r1, [pc, #756]	; (801ecc4 <__ieee754_pow+0x754>)
 801e9d0:	f7e1 ff3c 	bl	800084c <__aeabi_ddiv>
 801e9d4:	ec41 0b19 	vmov	d9, r0, r1
 801e9d8:	4602      	mov	r2, r0
 801e9da:	460b      	mov	r3, r1
 801e9dc:	4630      	mov	r0, r6
 801e9de:	4639      	mov	r1, r7
 801e9e0:	f7e1 fe0a 	bl	80005f8 <__aeabi_dmul>
 801e9e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e9e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e9ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801e9f0:	2300      	movs	r3, #0
 801e9f2:	9304      	str	r3, [sp, #16]
 801e9f4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801e9f8:	46ab      	mov	fp, r5
 801e9fa:	106d      	asrs	r5, r5, #1
 801e9fc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801ea00:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801ea04:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801ea08:	2200      	movs	r2, #0
 801ea0a:	4640      	mov	r0, r8
 801ea0c:	4649      	mov	r1, r9
 801ea0e:	4614      	mov	r4, r2
 801ea10:	461d      	mov	r5, r3
 801ea12:	f7e1 fdf1 	bl	80005f8 <__aeabi_dmul>
 801ea16:	4602      	mov	r2, r0
 801ea18:	460b      	mov	r3, r1
 801ea1a:	4630      	mov	r0, r6
 801ea1c:	4639      	mov	r1, r7
 801ea1e:	f7e1 fc33 	bl	8000288 <__aeabi_dsub>
 801ea22:	ec53 2b18 	vmov	r2, r3, d8
 801ea26:	4606      	mov	r6, r0
 801ea28:	460f      	mov	r7, r1
 801ea2a:	4620      	mov	r0, r4
 801ea2c:	4629      	mov	r1, r5
 801ea2e:	f7e1 fc2b 	bl	8000288 <__aeabi_dsub>
 801ea32:	4602      	mov	r2, r0
 801ea34:	460b      	mov	r3, r1
 801ea36:	4650      	mov	r0, sl
 801ea38:	4659      	mov	r1, fp
 801ea3a:	f7e1 fc25 	bl	8000288 <__aeabi_dsub>
 801ea3e:	4642      	mov	r2, r8
 801ea40:	464b      	mov	r3, r9
 801ea42:	f7e1 fdd9 	bl	80005f8 <__aeabi_dmul>
 801ea46:	4602      	mov	r2, r0
 801ea48:	460b      	mov	r3, r1
 801ea4a:	4630      	mov	r0, r6
 801ea4c:	4639      	mov	r1, r7
 801ea4e:	f7e1 fc1b 	bl	8000288 <__aeabi_dsub>
 801ea52:	ec53 2b19 	vmov	r2, r3, d9
 801ea56:	f7e1 fdcf 	bl	80005f8 <__aeabi_dmul>
 801ea5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ea5e:	ec41 0b18 	vmov	d8, r0, r1
 801ea62:	4610      	mov	r0, r2
 801ea64:	4619      	mov	r1, r3
 801ea66:	f7e1 fdc7 	bl	80005f8 <__aeabi_dmul>
 801ea6a:	a37d      	add	r3, pc, #500	; (adr r3, 801ec60 <__ieee754_pow+0x6f0>)
 801ea6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea70:	4604      	mov	r4, r0
 801ea72:	460d      	mov	r5, r1
 801ea74:	f7e1 fdc0 	bl	80005f8 <__aeabi_dmul>
 801ea78:	a37b      	add	r3, pc, #492	; (adr r3, 801ec68 <__ieee754_pow+0x6f8>)
 801ea7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea7e:	f7e1 fc05 	bl	800028c <__adddf3>
 801ea82:	4622      	mov	r2, r4
 801ea84:	462b      	mov	r3, r5
 801ea86:	f7e1 fdb7 	bl	80005f8 <__aeabi_dmul>
 801ea8a:	a379      	add	r3, pc, #484	; (adr r3, 801ec70 <__ieee754_pow+0x700>)
 801ea8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea90:	f7e1 fbfc 	bl	800028c <__adddf3>
 801ea94:	4622      	mov	r2, r4
 801ea96:	462b      	mov	r3, r5
 801ea98:	f7e1 fdae 	bl	80005f8 <__aeabi_dmul>
 801ea9c:	a376      	add	r3, pc, #472	; (adr r3, 801ec78 <__ieee754_pow+0x708>)
 801ea9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eaa2:	f7e1 fbf3 	bl	800028c <__adddf3>
 801eaa6:	4622      	mov	r2, r4
 801eaa8:	462b      	mov	r3, r5
 801eaaa:	f7e1 fda5 	bl	80005f8 <__aeabi_dmul>
 801eaae:	a374      	add	r3, pc, #464	; (adr r3, 801ec80 <__ieee754_pow+0x710>)
 801eab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eab4:	f7e1 fbea 	bl	800028c <__adddf3>
 801eab8:	4622      	mov	r2, r4
 801eaba:	462b      	mov	r3, r5
 801eabc:	f7e1 fd9c 	bl	80005f8 <__aeabi_dmul>
 801eac0:	a371      	add	r3, pc, #452	; (adr r3, 801ec88 <__ieee754_pow+0x718>)
 801eac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eac6:	f7e1 fbe1 	bl	800028c <__adddf3>
 801eaca:	4622      	mov	r2, r4
 801eacc:	4606      	mov	r6, r0
 801eace:	460f      	mov	r7, r1
 801ead0:	462b      	mov	r3, r5
 801ead2:	4620      	mov	r0, r4
 801ead4:	4629      	mov	r1, r5
 801ead6:	f7e1 fd8f 	bl	80005f8 <__aeabi_dmul>
 801eada:	4602      	mov	r2, r0
 801eadc:	460b      	mov	r3, r1
 801eade:	4630      	mov	r0, r6
 801eae0:	4639      	mov	r1, r7
 801eae2:	f7e1 fd89 	bl	80005f8 <__aeabi_dmul>
 801eae6:	4642      	mov	r2, r8
 801eae8:	4604      	mov	r4, r0
 801eaea:	460d      	mov	r5, r1
 801eaec:	464b      	mov	r3, r9
 801eaee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801eaf2:	f7e1 fbcb 	bl	800028c <__adddf3>
 801eaf6:	ec53 2b18 	vmov	r2, r3, d8
 801eafa:	f7e1 fd7d 	bl	80005f8 <__aeabi_dmul>
 801eafe:	4622      	mov	r2, r4
 801eb00:	462b      	mov	r3, r5
 801eb02:	f7e1 fbc3 	bl	800028c <__adddf3>
 801eb06:	4642      	mov	r2, r8
 801eb08:	4682      	mov	sl, r0
 801eb0a:	468b      	mov	fp, r1
 801eb0c:	464b      	mov	r3, r9
 801eb0e:	4640      	mov	r0, r8
 801eb10:	4649      	mov	r1, r9
 801eb12:	f7e1 fd71 	bl	80005f8 <__aeabi_dmul>
 801eb16:	4b6c      	ldr	r3, [pc, #432]	; (801ecc8 <__ieee754_pow+0x758>)
 801eb18:	2200      	movs	r2, #0
 801eb1a:	4606      	mov	r6, r0
 801eb1c:	460f      	mov	r7, r1
 801eb1e:	f7e1 fbb5 	bl	800028c <__adddf3>
 801eb22:	4652      	mov	r2, sl
 801eb24:	465b      	mov	r3, fp
 801eb26:	f7e1 fbb1 	bl	800028c <__adddf3>
 801eb2a:	9c04      	ldr	r4, [sp, #16]
 801eb2c:	460d      	mov	r5, r1
 801eb2e:	4622      	mov	r2, r4
 801eb30:	460b      	mov	r3, r1
 801eb32:	4640      	mov	r0, r8
 801eb34:	4649      	mov	r1, r9
 801eb36:	f7e1 fd5f 	bl	80005f8 <__aeabi_dmul>
 801eb3a:	4b63      	ldr	r3, [pc, #396]	; (801ecc8 <__ieee754_pow+0x758>)
 801eb3c:	4680      	mov	r8, r0
 801eb3e:	4689      	mov	r9, r1
 801eb40:	2200      	movs	r2, #0
 801eb42:	4620      	mov	r0, r4
 801eb44:	4629      	mov	r1, r5
 801eb46:	f7e1 fb9f 	bl	8000288 <__aeabi_dsub>
 801eb4a:	4632      	mov	r2, r6
 801eb4c:	463b      	mov	r3, r7
 801eb4e:	f7e1 fb9b 	bl	8000288 <__aeabi_dsub>
 801eb52:	4602      	mov	r2, r0
 801eb54:	460b      	mov	r3, r1
 801eb56:	4650      	mov	r0, sl
 801eb58:	4659      	mov	r1, fp
 801eb5a:	f7e1 fb95 	bl	8000288 <__aeabi_dsub>
 801eb5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801eb62:	f7e1 fd49 	bl	80005f8 <__aeabi_dmul>
 801eb66:	4622      	mov	r2, r4
 801eb68:	4606      	mov	r6, r0
 801eb6a:	460f      	mov	r7, r1
 801eb6c:	462b      	mov	r3, r5
 801eb6e:	ec51 0b18 	vmov	r0, r1, d8
 801eb72:	f7e1 fd41 	bl	80005f8 <__aeabi_dmul>
 801eb76:	4602      	mov	r2, r0
 801eb78:	460b      	mov	r3, r1
 801eb7a:	4630      	mov	r0, r6
 801eb7c:	4639      	mov	r1, r7
 801eb7e:	f7e1 fb85 	bl	800028c <__adddf3>
 801eb82:	4606      	mov	r6, r0
 801eb84:	460f      	mov	r7, r1
 801eb86:	4602      	mov	r2, r0
 801eb88:	460b      	mov	r3, r1
 801eb8a:	4640      	mov	r0, r8
 801eb8c:	4649      	mov	r1, r9
 801eb8e:	f7e1 fb7d 	bl	800028c <__adddf3>
 801eb92:	9c04      	ldr	r4, [sp, #16]
 801eb94:	a33e      	add	r3, pc, #248	; (adr r3, 801ec90 <__ieee754_pow+0x720>)
 801eb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb9a:	4620      	mov	r0, r4
 801eb9c:	460d      	mov	r5, r1
 801eb9e:	f7e1 fd2b 	bl	80005f8 <__aeabi_dmul>
 801eba2:	4642      	mov	r2, r8
 801eba4:	ec41 0b18 	vmov	d8, r0, r1
 801eba8:	464b      	mov	r3, r9
 801ebaa:	4620      	mov	r0, r4
 801ebac:	4629      	mov	r1, r5
 801ebae:	f7e1 fb6b 	bl	8000288 <__aeabi_dsub>
 801ebb2:	4602      	mov	r2, r0
 801ebb4:	460b      	mov	r3, r1
 801ebb6:	4630      	mov	r0, r6
 801ebb8:	4639      	mov	r1, r7
 801ebba:	f7e1 fb65 	bl	8000288 <__aeabi_dsub>
 801ebbe:	a336      	add	r3, pc, #216	; (adr r3, 801ec98 <__ieee754_pow+0x728>)
 801ebc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebc4:	f7e1 fd18 	bl	80005f8 <__aeabi_dmul>
 801ebc8:	a335      	add	r3, pc, #212	; (adr r3, 801eca0 <__ieee754_pow+0x730>)
 801ebca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebce:	4606      	mov	r6, r0
 801ebd0:	460f      	mov	r7, r1
 801ebd2:	4620      	mov	r0, r4
 801ebd4:	4629      	mov	r1, r5
 801ebd6:	f7e1 fd0f 	bl	80005f8 <__aeabi_dmul>
 801ebda:	4602      	mov	r2, r0
 801ebdc:	460b      	mov	r3, r1
 801ebde:	4630      	mov	r0, r6
 801ebe0:	4639      	mov	r1, r7
 801ebe2:	f7e1 fb53 	bl	800028c <__adddf3>
 801ebe6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ebe8:	4b38      	ldr	r3, [pc, #224]	; (801eccc <__ieee754_pow+0x75c>)
 801ebea:	4413      	add	r3, r2
 801ebec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebf0:	f7e1 fb4c 	bl	800028c <__adddf3>
 801ebf4:	4682      	mov	sl, r0
 801ebf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ebf8:	468b      	mov	fp, r1
 801ebfa:	f7e1 fc93 	bl	8000524 <__aeabi_i2d>
 801ebfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ec00:	4b33      	ldr	r3, [pc, #204]	; (801ecd0 <__ieee754_pow+0x760>)
 801ec02:	4413      	add	r3, r2
 801ec04:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ec08:	4606      	mov	r6, r0
 801ec0a:	460f      	mov	r7, r1
 801ec0c:	4652      	mov	r2, sl
 801ec0e:	465b      	mov	r3, fp
 801ec10:	ec51 0b18 	vmov	r0, r1, d8
 801ec14:	f7e1 fb3a 	bl	800028c <__adddf3>
 801ec18:	4642      	mov	r2, r8
 801ec1a:	464b      	mov	r3, r9
 801ec1c:	f7e1 fb36 	bl	800028c <__adddf3>
 801ec20:	4632      	mov	r2, r6
 801ec22:	463b      	mov	r3, r7
 801ec24:	f7e1 fb32 	bl	800028c <__adddf3>
 801ec28:	9c04      	ldr	r4, [sp, #16]
 801ec2a:	4632      	mov	r2, r6
 801ec2c:	463b      	mov	r3, r7
 801ec2e:	4620      	mov	r0, r4
 801ec30:	460d      	mov	r5, r1
 801ec32:	f7e1 fb29 	bl	8000288 <__aeabi_dsub>
 801ec36:	4642      	mov	r2, r8
 801ec38:	464b      	mov	r3, r9
 801ec3a:	f7e1 fb25 	bl	8000288 <__aeabi_dsub>
 801ec3e:	ec53 2b18 	vmov	r2, r3, d8
 801ec42:	f7e1 fb21 	bl	8000288 <__aeabi_dsub>
 801ec46:	4602      	mov	r2, r0
 801ec48:	460b      	mov	r3, r1
 801ec4a:	4650      	mov	r0, sl
 801ec4c:	4659      	mov	r1, fp
 801ec4e:	e606      	b.n	801e85e <__ieee754_pow+0x2ee>
 801ec50:	2401      	movs	r4, #1
 801ec52:	e6a0      	b.n	801e996 <__ieee754_pow+0x426>
 801ec54:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801eca8 <__ieee754_pow+0x738>
 801ec58:	e60d      	b.n	801e876 <__ieee754_pow+0x306>
 801ec5a:	bf00      	nop
 801ec5c:	f3af 8000 	nop.w
 801ec60:	4a454eef 	.word	0x4a454eef
 801ec64:	3fca7e28 	.word	0x3fca7e28
 801ec68:	93c9db65 	.word	0x93c9db65
 801ec6c:	3fcd864a 	.word	0x3fcd864a
 801ec70:	a91d4101 	.word	0xa91d4101
 801ec74:	3fd17460 	.word	0x3fd17460
 801ec78:	518f264d 	.word	0x518f264d
 801ec7c:	3fd55555 	.word	0x3fd55555
 801ec80:	db6fabff 	.word	0xdb6fabff
 801ec84:	3fdb6db6 	.word	0x3fdb6db6
 801ec88:	33333303 	.word	0x33333303
 801ec8c:	3fe33333 	.word	0x3fe33333
 801ec90:	e0000000 	.word	0xe0000000
 801ec94:	3feec709 	.word	0x3feec709
 801ec98:	dc3a03fd 	.word	0xdc3a03fd
 801ec9c:	3feec709 	.word	0x3feec709
 801eca0:	145b01f5 	.word	0x145b01f5
 801eca4:	be3e2fe0 	.word	0xbe3e2fe0
 801eca8:	00000000 	.word	0x00000000
 801ecac:	3ff00000 	.word	0x3ff00000
 801ecb0:	7ff00000 	.word	0x7ff00000
 801ecb4:	43400000 	.word	0x43400000
 801ecb8:	0003988e 	.word	0x0003988e
 801ecbc:	000bb679 	.word	0x000bb679
 801ecc0:	08021560 	.word	0x08021560
 801ecc4:	3ff00000 	.word	0x3ff00000
 801ecc8:	40080000 	.word	0x40080000
 801eccc:	08021580 	.word	0x08021580
 801ecd0:	08021570 	.word	0x08021570
 801ecd4:	a3b5      	add	r3, pc, #724	; (adr r3, 801efac <__ieee754_pow+0xa3c>)
 801ecd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecda:	4640      	mov	r0, r8
 801ecdc:	4649      	mov	r1, r9
 801ecde:	f7e1 fad5 	bl	800028c <__adddf3>
 801ece2:	4622      	mov	r2, r4
 801ece4:	ec41 0b1a 	vmov	d10, r0, r1
 801ece8:	462b      	mov	r3, r5
 801ecea:	4630      	mov	r0, r6
 801ecec:	4639      	mov	r1, r7
 801ecee:	f7e1 facb 	bl	8000288 <__aeabi_dsub>
 801ecf2:	4602      	mov	r2, r0
 801ecf4:	460b      	mov	r3, r1
 801ecf6:	ec51 0b1a 	vmov	r0, r1, d10
 801ecfa:	f7e1 ff0d 	bl	8000b18 <__aeabi_dcmpgt>
 801ecfe:	2800      	cmp	r0, #0
 801ed00:	f47f adf8 	bne.w	801e8f4 <__ieee754_pow+0x384>
 801ed04:	4aa4      	ldr	r2, [pc, #656]	; (801ef98 <__ieee754_pow+0xa28>)
 801ed06:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ed0a:	4293      	cmp	r3, r2
 801ed0c:	f340 810b 	ble.w	801ef26 <__ieee754_pow+0x9b6>
 801ed10:	151b      	asrs	r3, r3, #20
 801ed12:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801ed16:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801ed1a:	fa4a f303 	asr.w	r3, sl, r3
 801ed1e:	445b      	add	r3, fp
 801ed20:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801ed24:	4e9d      	ldr	r6, [pc, #628]	; (801ef9c <__ieee754_pow+0xa2c>)
 801ed26:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801ed2a:	4116      	asrs	r6, r2
 801ed2c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801ed30:	2000      	movs	r0, #0
 801ed32:	ea23 0106 	bic.w	r1, r3, r6
 801ed36:	f1c2 0214 	rsb	r2, r2, #20
 801ed3a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801ed3e:	fa4a fa02 	asr.w	sl, sl, r2
 801ed42:	f1bb 0f00 	cmp.w	fp, #0
 801ed46:	4602      	mov	r2, r0
 801ed48:	460b      	mov	r3, r1
 801ed4a:	4620      	mov	r0, r4
 801ed4c:	4629      	mov	r1, r5
 801ed4e:	bfb8      	it	lt
 801ed50:	f1ca 0a00 	rsblt	sl, sl, #0
 801ed54:	f7e1 fa98 	bl	8000288 <__aeabi_dsub>
 801ed58:	ec41 0b19 	vmov	d9, r0, r1
 801ed5c:	4642      	mov	r2, r8
 801ed5e:	464b      	mov	r3, r9
 801ed60:	ec51 0b19 	vmov	r0, r1, d9
 801ed64:	f7e1 fa92 	bl	800028c <__adddf3>
 801ed68:	2400      	movs	r4, #0
 801ed6a:	a379      	add	r3, pc, #484	; (adr r3, 801ef50 <__ieee754_pow+0x9e0>)
 801ed6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed70:	4620      	mov	r0, r4
 801ed72:	460d      	mov	r5, r1
 801ed74:	f7e1 fc40 	bl	80005f8 <__aeabi_dmul>
 801ed78:	ec53 2b19 	vmov	r2, r3, d9
 801ed7c:	4606      	mov	r6, r0
 801ed7e:	460f      	mov	r7, r1
 801ed80:	4620      	mov	r0, r4
 801ed82:	4629      	mov	r1, r5
 801ed84:	f7e1 fa80 	bl	8000288 <__aeabi_dsub>
 801ed88:	4602      	mov	r2, r0
 801ed8a:	460b      	mov	r3, r1
 801ed8c:	4640      	mov	r0, r8
 801ed8e:	4649      	mov	r1, r9
 801ed90:	f7e1 fa7a 	bl	8000288 <__aeabi_dsub>
 801ed94:	a370      	add	r3, pc, #448	; (adr r3, 801ef58 <__ieee754_pow+0x9e8>)
 801ed96:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed9a:	f7e1 fc2d 	bl	80005f8 <__aeabi_dmul>
 801ed9e:	a370      	add	r3, pc, #448	; (adr r3, 801ef60 <__ieee754_pow+0x9f0>)
 801eda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eda4:	4680      	mov	r8, r0
 801eda6:	4689      	mov	r9, r1
 801eda8:	4620      	mov	r0, r4
 801edaa:	4629      	mov	r1, r5
 801edac:	f7e1 fc24 	bl	80005f8 <__aeabi_dmul>
 801edb0:	4602      	mov	r2, r0
 801edb2:	460b      	mov	r3, r1
 801edb4:	4640      	mov	r0, r8
 801edb6:	4649      	mov	r1, r9
 801edb8:	f7e1 fa68 	bl	800028c <__adddf3>
 801edbc:	4604      	mov	r4, r0
 801edbe:	460d      	mov	r5, r1
 801edc0:	4602      	mov	r2, r0
 801edc2:	460b      	mov	r3, r1
 801edc4:	4630      	mov	r0, r6
 801edc6:	4639      	mov	r1, r7
 801edc8:	f7e1 fa60 	bl	800028c <__adddf3>
 801edcc:	4632      	mov	r2, r6
 801edce:	463b      	mov	r3, r7
 801edd0:	4680      	mov	r8, r0
 801edd2:	4689      	mov	r9, r1
 801edd4:	f7e1 fa58 	bl	8000288 <__aeabi_dsub>
 801edd8:	4602      	mov	r2, r0
 801edda:	460b      	mov	r3, r1
 801eddc:	4620      	mov	r0, r4
 801edde:	4629      	mov	r1, r5
 801ede0:	f7e1 fa52 	bl	8000288 <__aeabi_dsub>
 801ede4:	4642      	mov	r2, r8
 801ede6:	4606      	mov	r6, r0
 801ede8:	460f      	mov	r7, r1
 801edea:	464b      	mov	r3, r9
 801edec:	4640      	mov	r0, r8
 801edee:	4649      	mov	r1, r9
 801edf0:	f7e1 fc02 	bl	80005f8 <__aeabi_dmul>
 801edf4:	a35c      	add	r3, pc, #368	; (adr r3, 801ef68 <__ieee754_pow+0x9f8>)
 801edf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edfa:	4604      	mov	r4, r0
 801edfc:	460d      	mov	r5, r1
 801edfe:	f7e1 fbfb 	bl	80005f8 <__aeabi_dmul>
 801ee02:	a35b      	add	r3, pc, #364	; (adr r3, 801ef70 <__ieee754_pow+0xa00>)
 801ee04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee08:	f7e1 fa3e 	bl	8000288 <__aeabi_dsub>
 801ee0c:	4622      	mov	r2, r4
 801ee0e:	462b      	mov	r3, r5
 801ee10:	f7e1 fbf2 	bl	80005f8 <__aeabi_dmul>
 801ee14:	a358      	add	r3, pc, #352	; (adr r3, 801ef78 <__ieee754_pow+0xa08>)
 801ee16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee1a:	f7e1 fa37 	bl	800028c <__adddf3>
 801ee1e:	4622      	mov	r2, r4
 801ee20:	462b      	mov	r3, r5
 801ee22:	f7e1 fbe9 	bl	80005f8 <__aeabi_dmul>
 801ee26:	a356      	add	r3, pc, #344	; (adr r3, 801ef80 <__ieee754_pow+0xa10>)
 801ee28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee2c:	f7e1 fa2c 	bl	8000288 <__aeabi_dsub>
 801ee30:	4622      	mov	r2, r4
 801ee32:	462b      	mov	r3, r5
 801ee34:	f7e1 fbe0 	bl	80005f8 <__aeabi_dmul>
 801ee38:	a353      	add	r3, pc, #332	; (adr r3, 801ef88 <__ieee754_pow+0xa18>)
 801ee3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee3e:	f7e1 fa25 	bl	800028c <__adddf3>
 801ee42:	4622      	mov	r2, r4
 801ee44:	462b      	mov	r3, r5
 801ee46:	f7e1 fbd7 	bl	80005f8 <__aeabi_dmul>
 801ee4a:	4602      	mov	r2, r0
 801ee4c:	460b      	mov	r3, r1
 801ee4e:	4640      	mov	r0, r8
 801ee50:	4649      	mov	r1, r9
 801ee52:	f7e1 fa19 	bl	8000288 <__aeabi_dsub>
 801ee56:	4604      	mov	r4, r0
 801ee58:	460d      	mov	r5, r1
 801ee5a:	4602      	mov	r2, r0
 801ee5c:	460b      	mov	r3, r1
 801ee5e:	4640      	mov	r0, r8
 801ee60:	4649      	mov	r1, r9
 801ee62:	f7e1 fbc9 	bl	80005f8 <__aeabi_dmul>
 801ee66:	2200      	movs	r2, #0
 801ee68:	ec41 0b19 	vmov	d9, r0, r1
 801ee6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ee70:	4620      	mov	r0, r4
 801ee72:	4629      	mov	r1, r5
 801ee74:	f7e1 fa08 	bl	8000288 <__aeabi_dsub>
 801ee78:	4602      	mov	r2, r0
 801ee7a:	460b      	mov	r3, r1
 801ee7c:	ec51 0b19 	vmov	r0, r1, d9
 801ee80:	f7e1 fce4 	bl	800084c <__aeabi_ddiv>
 801ee84:	4632      	mov	r2, r6
 801ee86:	4604      	mov	r4, r0
 801ee88:	460d      	mov	r5, r1
 801ee8a:	463b      	mov	r3, r7
 801ee8c:	4640      	mov	r0, r8
 801ee8e:	4649      	mov	r1, r9
 801ee90:	f7e1 fbb2 	bl	80005f8 <__aeabi_dmul>
 801ee94:	4632      	mov	r2, r6
 801ee96:	463b      	mov	r3, r7
 801ee98:	f7e1 f9f8 	bl	800028c <__adddf3>
 801ee9c:	4602      	mov	r2, r0
 801ee9e:	460b      	mov	r3, r1
 801eea0:	4620      	mov	r0, r4
 801eea2:	4629      	mov	r1, r5
 801eea4:	f7e1 f9f0 	bl	8000288 <__aeabi_dsub>
 801eea8:	4642      	mov	r2, r8
 801eeaa:	464b      	mov	r3, r9
 801eeac:	f7e1 f9ec 	bl	8000288 <__aeabi_dsub>
 801eeb0:	460b      	mov	r3, r1
 801eeb2:	4602      	mov	r2, r0
 801eeb4:	493a      	ldr	r1, [pc, #232]	; (801efa0 <__ieee754_pow+0xa30>)
 801eeb6:	2000      	movs	r0, #0
 801eeb8:	f7e1 f9e6 	bl	8000288 <__aeabi_dsub>
 801eebc:	e9cd 0100 	strd	r0, r1, [sp]
 801eec0:	9b01      	ldr	r3, [sp, #4]
 801eec2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801eec6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801eeca:	da2f      	bge.n	801ef2c <__ieee754_pow+0x9bc>
 801eecc:	4650      	mov	r0, sl
 801eece:	ed9d 0b00 	vldr	d0, [sp]
 801eed2:	f001 f98d 	bl	80201f0 <scalbn>
 801eed6:	ec51 0b10 	vmov	r0, r1, d0
 801eeda:	ec53 2b18 	vmov	r2, r3, d8
 801eede:	f7ff bbe0 	b.w	801e6a2 <__ieee754_pow+0x132>
 801eee2:	4b30      	ldr	r3, [pc, #192]	; (801efa4 <__ieee754_pow+0xa34>)
 801eee4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801eee8:	429e      	cmp	r6, r3
 801eeea:	f77f af0b 	ble.w	801ed04 <__ieee754_pow+0x794>
 801eeee:	4b2e      	ldr	r3, [pc, #184]	; (801efa8 <__ieee754_pow+0xa38>)
 801eef0:	440b      	add	r3, r1
 801eef2:	4303      	orrs	r3, r0
 801eef4:	d00b      	beq.n	801ef0e <__ieee754_pow+0x99e>
 801eef6:	a326      	add	r3, pc, #152	; (adr r3, 801ef90 <__ieee754_pow+0xa20>)
 801eef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eefc:	ec51 0b18 	vmov	r0, r1, d8
 801ef00:	f7e1 fb7a 	bl	80005f8 <__aeabi_dmul>
 801ef04:	a322      	add	r3, pc, #136	; (adr r3, 801ef90 <__ieee754_pow+0xa20>)
 801ef06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef0a:	f7ff bbca 	b.w	801e6a2 <__ieee754_pow+0x132>
 801ef0e:	4622      	mov	r2, r4
 801ef10:	462b      	mov	r3, r5
 801ef12:	f7e1 f9b9 	bl	8000288 <__aeabi_dsub>
 801ef16:	4642      	mov	r2, r8
 801ef18:	464b      	mov	r3, r9
 801ef1a:	f7e1 fdf3 	bl	8000b04 <__aeabi_dcmpge>
 801ef1e:	2800      	cmp	r0, #0
 801ef20:	f43f aef0 	beq.w	801ed04 <__ieee754_pow+0x794>
 801ef24:	e7e7      	b.n	801eef6 <__ieee754_pow+0x986>
 801ef26:	f04f 0a00 	mov.w	sl, #0
 801ef2a:	e717      	b.n	801ed5c <__ieee754_pow+0x7ec>
 801ef2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ef30:	4619      	mov	r1, r3
 801ef32:	e7d2      	b.n	801eeda <__ieee754_pow+0x96a>
 801ef34:	491a      	ldr	r1, [pc, #104]	; (801efa0 <__ieee754_pow+0xa30>)
 801ef36:	2000      	movs	r0, #0
 801ef38:	f7ff bb9e 	b.w	801e678 <__ieee754_pow+0x108>
 801ef3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ef40:	f7ff bb9a 	b.w	801e678 <__ieee754_pow+0x108>
 801ef44:	9000      	str	r0, [sp, #0]
 801ef46:	f7ff bb76 	b.w	801e636 <__ieee754_pow+0xc6>
 801ef4a:	2100      	movs	r1, #0
 801ef4c:	f7ff bb60 	b.w	801e610 <__ieee754_pow+0xa0>
 801ef50:	00000000 	.word	0x00000000
 801ef54:	3fe62e43 	.word	0x3fe62e43
 801ef58:	fefa39ef 	.word	0xfefa39ef
 801ef5c:	3fe62e42 	.word	0x3fe62e42
 801ef60:	0ca86c39 	.word	0x0ca86c39
 801ef64:	be205c61 	.word	0xbe205c61
 801ef68:	72bea4d0 	.word	0x72bea4d0
 801ef6c:	3e663769 	.word	0x3e663769
 801ef70:	c5d26bf1 	.word	0xc5d26bf1
 801ef74:	3ebbbd41 	.word	0x3ebbbd41
 801ef78:	af25de2c 	.word	0xaf25de2c
 801ef7c:	3f11566a 	.word	0x3f11566a
 801ef80:	16bebd93 	.word	0x16bebd93
 801ef84:	3f66c16c 	.word	0x3f66c16c
 801ef88:	5555553e 	.word	0x5555553e
 801ef8c:	3fc55555 	.word	0x3fc55555
 801ef90:	c2f8f359 	.word	0xc2f8f359
 801ef94:	01a56e1f 	.word	0x01a56e1f
 801ef98:	3fe00000 	.word	0x3fe00000
 801ef9c:	000fffff 	.word	0x000fffff
 801efa0:	3ff00000 	.word	0x3ff00000
 801efa4:	4090cbff 	.word	0x4090cbff
 801efa8:	3f6f3400 	.word	0x3f6f3400
 801efac:	652b82fe 	.word	0x652b82fe
 801efb0:	3c971547 	.word	0x3c971547

0801efb4 <__ieee754_sqrt>:
 801efb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801efb8:	ec55 4b10 	vmov	r4, r5, d0
 801efbc:	4e56      	ldr	r6, [pc, #344]	; (801f118 <__ieee754_sqrt+0x164>)
 801efbe:	43ae      	bics	r6, r5
 801efc0:	ee10 0a10 	vmov	r0, s0
 801efc4:	ee10 3a10 	vmov	r3, s0
 801efc8:	4629      	mov	r1, r5
 801efca:	462a      	mov	r2, r5
 801efcc:	d110      	bne.n	801eff0 <__ieee754_sqrt+0x3c>
 801efce:	ee10 2a10 	vmov	r2, s0
 801efd2:	462b      	mov	r3, r5
 801efd4:	f7e1 fb10 	bl	80005f8 <__aeabi_dmul>
 801efd8:	4602      	mov	r2, r0
 801efda:	460b      	mov	r3, r1
 801efdc:	4620      	mov	r0, r4
 801efde:	4629      	mov	r1, r5
 801efe0:	f7e1 f954 	bl	800028c <__adddf3>
 801efe4:	4604      	mov	r4, r0
 801efe6:	460d      	mov	r5, r1
 801efe8:	ec45 4b10 	vmov	d0, r4, r5
 801efec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eff0:	2d00      	cmp	r5, #0
 801eff2:	dc10      	bgt.n	801f016 <__ieee754_sqrt+0x62>
 801eff4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801eff8:	4330      	orrs	r0, r6
 801effa:	d0f5      	beq.n	801efe8 <__ieee754_sqrt+0x34>
 801effc:	b15d      	cbz	r5, 801f016 <__ieee754_sqrt+0x62>
 801effe:	ee10 2a10 	vmov	r2, s0
 801f002:	462b      	mov	r3, r5
 801f004:	ee10 0a10 	vmov	r0, s0
 801f008:	f7e1 f93e 	bl	8000288 <__aeabi_dsub>
 801f00c:	4602      	mov	r2, r0
 801f00e:	460b      	mov	r3, r1
 801f010:	f7e1 fc1c 	bl	800084c <__aeabi_ddiv>
 801f014:	e7e6      	b.n	801efe4 <__ieee754_sqrt+0x30>
 801f016:	1509      	asrs	r1, r1, #20
 801f018:	d076      	beq.n	801f108 <__ieee754_sqrt+0x154>
 801f01a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801f01e:	07ce      	lsls	r6, r1, #31
 801f020:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801f024:	bf5e      	ittt	pl
 801f026:	0fda      	lsrpl	r2, r3, #31
 801f028:	005b      	lslpl	r3, r3, #1
 801f02a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801f02e:	0fda      	lsrs	r2, r3, #31
 801f030:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801f034:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801f038:	2000      	movs	r0, #0
 801f03a:	106d      	asrs	r5, r5, #1
 801f03c:	005b      	lsls	r3, r3, #1
 801f03e:	f04f 0e16 	mov.w	lr, #22
 801f042:	4684      	mov	ip, r0
 801f044:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801f048:	eb0c 0401 	add.w	r4, ip, r1
 801f04c:	4294      	cmp	r4, r2
 801f04e:	bfde      	ittt	le
 801f050:	1b12      	suble	r2, r2, r4
 801f052:	eb04 0c01 	addle.w	ip, r4, r1
 801f056:	1840      	addle	r0, r0, r1
 801f058:	0052      	lsls	r2, r2, #1
 801f05a:	f1be 0e01 	subs.w	lr, lr, #1
 801f05e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801f062:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801f066:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801f06a:	d1ed      	bne.n	801f048 <__ieee754_sqrt+0x94>
 801f06c:	4671      	mov	r1, lr
 801f06e:	2720      	movs	r7, #32
 801f070:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801f074:	4562      	cmp	r2, ip
 801f076:	eb04 060e 	add.w	r6, r4, lr
 801f07a:	dc02      	bgt.n	801f082 <__ieee754_sqrt+0xce>
 801f07c:	d113      	bne.n	801f0a6 <__ieee754_sqrt+0xf2>
 801f07e:	429e      	cmp	r6, r3
 801f080:	d811      	bhi.n	801f0a6 <__ieee754_sqrt+0xf2>
 801f082:	2e00      	cmp	r6, #0
 801f084:	eb06 0e04 	add.w	lr, r6, r4
 801f088:	da43      	bge.n	801f112 <__ieee754_sqrt+0x15e>
 801f08a:	f1be 0f00 	cmp.w	lr, #0
 801f08e:	db40      	blt.n	801f112 <__ieee754_sqrt+0x15e>
 801f090:	f10c 0801 	add.w	r8, ip, #1
 801f094:	eba2 020c 	sub.w	r2, r2, ip
 801f098:	429e      	cmp	r6, r3
 801f09a:	bf88      	it	hi
 801f09c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 801f0a0:	1b9b      	subs	r3, r3, r6
 801f0a2:	4421      	add	r1, r4
 801f0a4:	46c4      	mov	ip, r8
 801f0a6:	0052      	lsls	r2, r2, #1
 801f0a8:	3f01      	subs	r7, #1
 801f0aa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801f0ae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801f0b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801f0b6:	d1dd      	bne.n	801f074 <__ieee754_sqrt+0xc0>
 801f0b8:	4313      	orrs	r3, r2
 801f0ba:	d006      	beq.n	801f0ca <__ieee754_sqrt+0x116>
 801f0bc:	1c4c      	adds	r4, r1, #1
 801f0be:	bf13      	iteet	ne
 801f0c0:	3101      	addne	r1, #1
 801f0c2:	3001      	addeq	r0, #1
 801f0c4:	4639      	moveq	r1, r7
 801f0c6:	f021 0101 	bicne.w	r1, r1, #1
 801f0ca:	1043      	asrs	r3, r0, #1
 801f0cc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801f0d0:	0849      	lsrs	r1, r1, #1
 801f0d2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801f0d6:	07c2      	lsls	r2, r0, #31
 801f0d8:	bf48      	it	mi
 801f0da:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801f0de:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801f0e2:	460c      	mov	r4, r1
 801f0e4:	463d      	mov	r5, r7
 801f0e6:	e77f      	b.n	801efe8 <__ieee754_sqrt+0x34>
 801f0e8:	0ada      	lsrs	r2, r3, #11
 801f0ea:	3815      	subs	r0, #21
 801f0ec:	055b      	lsls	r3, r3, #21
 801f0ee:	2a00      	cmp	r2, #0
 801f0f0:	d0fa      	beq.n	801f0e8 <__ieee754_sqrt+0x134>
 801f0f2:	02d7      	lsls	r7, r2, #11
 801f0f4:	d50a      	bpl.n	801f10c <__ieee754_sqrt+0x158>
 801f0f6:	f1c1 0420 	rsb	r4, r1, #32
 801f0fa:	fa23 f404 	lsr.w	r4, r3, r4
 801f0fe:	1e4d      	subs	r5, r1, #1
 801f100:	408b      	lsls	r3, r1
 801f102:	4322      	orrs	r2, r4
 801f104:	1b41      	subs	r1, r0, r5
 801f106:	e788      	b.n	801f01a <__ieee754_sqrt+0x66>
 801f108:	4608      	mov	r0, r1
 801f10a:	e7f0      	b.n	801f0ee <__ieee754_sqrt+0x13a>
 801f10c:	0052      	lsls	r2, r2, #1
 801f10e:	3101      	adds	r1, #1
 801f110:	e7ef      	b.n	801f0f2 <__ieee754_sqrt+0x13e>
 801f112:	46e0      	mov	r8, ip
 801f114:	e7be      	b.n	801f094 <__ieee754_sqrt+0xe0>
 801f116:	bf00      	nop
 801f118:	7ff00000 	.word	0x7ff00000

0801f11c <__ieee754_atan2f>:
 801f11c:	ee10 2a90 	vmov	r2, s1
 801f120:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801f124:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801f128:	b510      	push	{r4, lr}
 801f12a:	eef0 7a40 	vmov.f32	s15, s0
 801f12e:	dc06      	bgt.n	801f13e <__ieee754_atan2f+0x22>
 801f130:	ee10 0a10 	vmov	r0, s0
 801f134:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801f138:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801f13c:	dd04      	ble.n	801f148 <__ieee754_atan2f+0x2c>
 801f13e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801f142:	eeb0 0a67 	vmov.f32	s0, s15
 801f146:	bd10      	pop	{r4, pc}
 801f148:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801f14c:	d103      	bne.n	801f156 <__ieee754_atan2f+0x3a>
 801f14e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f152:	f7fe bf33 	b.w	801dfbc <atanf>
 801f156:	1794      	asrs	r4, r2, #30
 801f158:	f004 0402 	and.w	r4, r4, #2
 801f15c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801f160:	b943      	cbnz	r3, 801f174 <__ieee754_atan2f+0x58>
 801f162:	2c02      	cmp	r4, #2
 801f164:	d05e      	beq.n	801f224 <__ieee754_atan2f+0x108>
 801f166:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801f238 <__ieee754_atan2f+0x11c>
 801f16a:	2c03      	cmp	r4, #3
 801f16c:	bf08      	it	eq
 801f16e:	eef0 7a47 	vmoveq.f32	s15, s14
 801f172:	e7e6      	b.n	801f142 <__ieee754_atan2f+0x26>
 801f174:	b941      	cbnz	r1, 801f188 <__ieee754_atan2f+0x6c>
 801f176:	eddf 7a31 	vldr	s15, [pc, #196]	; 801f23c <__ieee754_atan2f+0x120>
 801f17a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 801f240 <__ieee754_atan2f+0x124>
 801f17e:	2800      	cmp	r0, #0
 801f180:	bfb8      	it	lt
 801f182:	eef0 7a40 	vmovlt.f32	s15, s0
 801f186:	e7dc      	b.n	801f142 <__ieee754_atan2f+0x26>
 801f188:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801f18c:	d110      	bne.n	801f1b0 <__ieee754_atan2f+0x94>
 801f18e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801f192:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801f196:	d107      	bne.n	801f1a8 <__ieee754_atan2f+0x8c>
 801f198:	2c02      	cmp	r4, #2
 801f19a:	d846      	bhi.n	801f22a <__ieee754_atan2f+0x10e>
 801f19c:	4b29      	ldr	r3, [pc, #164]	; (801f244 <__ieee754_atan2f+0x128>)
 801f19e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801f1a2:	edd4 7a00 	vldr	s15, [r4]
 801f1a6:	e7cc      	b.n	801f142 <__ieee754_atan2f+0x26>
 801f1a8:	2c02      	cmp	r4, #2
 801f1aa:	d841      	bhi.n	801f230 <__ieee754_atan2f+0x114>
 801f1ac:	4b26      	ldr	r3, [pc, #152]	; (801f248 <__ieee754_atan2f+0x12c>)
 801f1ae:	e7f6      	b.n	801f19e <__ieee754_atan2f+0x82>
 801f1b0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801f1b4:	d0df      	beq.n	801f176 <__ieee754_atan2f+0x5a>
 801f1b6:	1a5b      	subs	r3, r3, r1
 801f1b8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801f1bc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801f1c0:	da1a      	bge.n	801f1f8 <__ieee754_atan2f+0xdc>
 801f1c2:	2a00      	cmp	r2, #0
 801f1c4:	da01      	bge.n	801f1ca <__ieee754_atan2f+0xae>
 801f1c6:	313c      	adds	r1, #60	; 0x3c
 801f1c8:	db19      	blt.n	801f1fe <__ieee754_atan2f+0xe2>
 801f1ca:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801f1ce:	f7ff f809 	bl	801e1e4 <fabsf>
 801f1d2:	f7fe fef3 	bl	801dfbc <atanf>
 801f1d6:	eef0 7a40 	vmov.f32	s15, s0
 801f1da:	2c01      	cmp	r4, #1
 801f1dc:	d012      	beq.n	801f204 <__ieee754_atan2f+0xe8>
 801f1de:	2c02      	cmp	r4, #2
 801f1e0:	d017      	beq.n	801f212 <__ieee754_atan2f+0xf6>
 801f1e2:	2c00      	cmp	r4, #0
 801f1e4:	d0ad      	beq.n	801f142 <__ieee754_atan2f+0x26>
 801f1e6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 801f24c <__ieee754_atan2f+0x130>
 801f1ea:	ee77 7a80 	vadd.f32	s15, s15, s0
 801f1ee:	ed9f 0a18 	vldr	s0, [pc, #96]	; 801f250 <__ieee754_atan2f+0x134>
 801f1f2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801f1f6:	e7a4      	b.n	801f142 <__ieee754_atan2f+0x26>
 801f1f8:	eddf 7a10 	vldr	s15, [pc, #64]	; 801f23c <__ieee754_atan2f+0x120>
 801f1fc:	e7ed      	b.n	801f1da <__ieee754_atan2f+0xbe>
 801f1fe:	eddf 7a15 	vldr	s15, [pc, #84]	; 801f254 <__ieee754_atan2f+0x138>
 801f202:	e7ea      	b.n	801f1da <__ieee754_atan2f+0xbe>
 801f204:	ee17 3a90 	vmov	r3, s15
 801f208:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801f20c:	ee07 3a90 	vmov	s15, r3
 801f210:	e797      	b.n	801f142 <__ieee754_atan2f+0x26>
 801f212:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801f24c <__ieee754_atan2f+0x130>
 801f216:	ee77 7a80 	vadd.f32	s15, s15, s0
 801f21a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 801f250 <__ieee754_atan2f+0x134>
 801f21e:	ee70 7a67 	vsub.f32	s15, s0, s15
 801f222:	e78e      	b.n	801f142 <__ieee754_atan2f+0x26>
 801f224:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801f250 <__ieee754_atan2f+0x134>
 801f228:	e78b      	b.n	801f142 <__ieee754_atan2f+0x26>
 801f22a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801f258 <__ieee754_atan2f+0x13c>
 801f22e:	e788      	b.n	801f142 <__ieee754_atan2f+0x26>
 801f230:	eddf 7a08 	vldr	s15, [pc, #32]	; 801f254 <__ieee754_atan2f+0x138>
 801f234:	e785      	b.n	801f142 <__ieee754_atan2f+0x26>
 801f236:	bf00      	nop
 801f238:	c0490fdb 	.word	0xc0490fdb
 801f23c:	3fc90fdb 	.word	0x3fc90fdb
 801f240:	bfc90fdb 	.word	0xbfc90fdb
 801f244:	08021590 	.word	0x08021590
 801f248:	0802159c 	.word	0x0802159c
 801f24c:	33bbbd2e 	.word	0x33bbbd2e
 801f250:	40490fdb 	.word	0x40490fdb
 801f254:	00000000 	.word	0x00000000
 801f258:	3f490fdb 	.word	0x3f490fdb

0801f25c <__ieee754_powf>:
 801f25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f260:	ee10 5a90 	vmov	r5, s1
 801f264:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 801f268:	ed2d 8b02 	vpush	{d8}
 801f26c:	eeb0 8a40 	vmov.f32	s16, s0
 801f270:	eef0 8a60 	vmov.f32	s17, s1
 801f274:	f000 8291 	beq.w	801f79a <__ieee754_powf+0x53e>
 801f278:	ee10 8a10 	vmov	r8, s0
 801f27c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 801f280:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801f284:	dc06      	bgt.n	801f294 <__ieee754_powf+0x38>
 801f286:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801f28a:	dd0a      	ble.n	801f2a2 <__ieee754_powf+0x46>
 801f28c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801f290:	f000 8283 	beq.w	801f79a <__ieee754_powf+0x53e>
 801f294:	ecbd 8b02 	vpop	{d8}
 801f298:	48d8      	ldr	r0, [pc, #864]	; (801f5fc <__ieee754_powf+0x3a0>)
 801f29a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f29e:	f7fa bf89 	b.w	801a1b4 <nanf>
 801f2a2:	f1b8 0f00 	cmp.w	r8, #0
 801f2a6:	da1f      	bge.n	801f2e8 <__ieee754_powf+0x8c>
 801f2a8:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 801f2ac:	da2e      	bge.n	801f30c <__ieee754_powf+0xb0>
 801f2ae:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801f2b2:	f2c0 827b 	blt.w	801f7ac <__ieee754_powf+0x550>
 801f2b6:	15fb      	asrs	r3, r7, #23
 801f2b8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801f2bc:	fa47 f603 	asr.w	r6, r7, r3
 801f2c0:	fa06 f303 	lsl.w	r3, r6, r3
 801f2c4:	42bb      	cmp	r3, r7
 801f2c6:	f040 8271 	bne.w	801f7ac <__ieee754_powf+0x550>
 801f2ca:	f006 0601 	and.w	r6, r6, #1
 801f2ce:	f1c6 0602 	rsb	r6, r6, #2
 801f2d2:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801f2d6:	d120      	bne.n	801f31a <__ieee754_powf+0xbe>
 801f2d8:	2d00      	cmp	r5, #0
 801f2da:	f280 8264 	bge.w	801f7a6 <__ieee754_powf+0x54a>
 801f2de:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801f2e2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801f2e6:	e00d      	b.n	801f304 <__ieee754_powf+0xa8>
 801f2e8:	2600      	movs	r6, #0
 801f2ea:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801f2ee:	d1f0      	bne.n	801f2d2 <__ieee754_powf+0x76>
 801f2f0:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801f2f4:	f000 8251 	beq.w	801f79a <__ieee754_powf+0x53e>
 801f2f8:	dd0a      	ble.n	801f310 <__ieee754_powf+0xb4>
 801f2fa:	2d00      	cmp	r5, #0
 801f2fc:	f280 8250 	bge.w	801f7a0 <__ieee754_powf+0x544>
 801f300:	ed9f 0abf 	vldr	s0, [pc, #764]	; 801f600 <__ieee754_powf+0x3a4>
 801f304:	ecbd 8b02 	vpop	{d8}
 801f308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f30c:	2602      	movs	r6, #2
 801f30e:	e7ec      	b.n	801f2ea <__ieee754_powf+0x8e>
 801f310:	2d00      	cmp	r5, #0
 801f312:	daf5      	bge.n	801f300 <__ieee754_powf+0xa4>
 801f314:	eeb1 0a68 	vneg.f32	s0, s17
 801f318:	e7f4      	b.n	801f304 <__ieee754_powf+0xa8>
 801f31a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801f31e:	d102      	bne.n	801f326 <__ieee754_powf+0xca>
 801f320:	ee28 0a08 	vmul.f32	s0, s16, s16
 801f324:	e7ee      	b.n	801f304 <__ieee754_powf+0xa8>
 801f326:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 801f32a:	eeb0 0a48 	vmov.f32	s0, s16
 801f32e:	d108      	bne.n	801f342 <__ieee754_powf+0xe6>
 801f330:	f1b8 0f00 	cmp.w	r8, #0
 801f334:	db05      	blt.n	801f342 <__ieee754_powf+0xe6>
 801f336:	ecbd 8b02 	vpop	{d8}
 801f33a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f33e:	f000 bb89 	b.w	801fa54 <__ieee754_sqrtf>
 801f342:	f7fe ff4f 	bl	801e1e4 <fabsf>
 801f346:	b124      	cbz	r4, 801f352 <__ieee754_powf+0xf6>
 801f348:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 801f34c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801f350:	d117      	bne.n	801f382 <__ieee754_powf+0x126>
 801f352:	2d00      	cmp	r5, #0
 801f354:	bfbc      	itt	lt
 801f356:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801f35a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801f35e:	f1b8 0f00 	cmp.w	r8, #0
 801f362:	dacf      	bge.n	801f304 <__ieee754_powf+0xa8>
 801f364:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 801f368:	ea54 0306 	orrs.w	r3, r4, r6
 801f36c:	d104      	bne.n	801f378 <__ieee754_powf+0x11c>
 801f36e:	ee70 7a40 	vsub.f32	s15, s0, s0
 801f372:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801f376:	e7c5      	b.n	801f304 <__ieee754_powf+0xa8>
 801f378:	2e01      	cmp	r6, #1
 801f37a:	d1c3      	bne.n	801f304 <__ieee754_powf+0xa8>
 801f37c:	eeb1 0a40 	vneg.f32	s0, s0
 801f380:	e7c0      	b.n	801f304 <__ieee754_powf+0xa8>
 801f382:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 801f386:	3801      	subs	r0, #1
 801f388:	ea56 0300 	orrs.w	r3, r6, r0
 801f38c:	d104      	bne.n	801f398 <__ieee754_powf+0x13c>
 801f38e:	ee38 8a48 	vsub.f32	s16, s16, s16
 801f392:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801f396:	e7b5      	b.n	801f304 <__ieee754_powf+0xa8>
 801f398:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 801f39c:	dd6b      	ble.n	801f476 <__ieee754_powf+0x21a>
 801f39e:	4b99      	ldr	r3, [pc, #612]	; (801f604 <__ieee754_powf+0x3a8>)
 801f3a0:	429c      	cmp	r4, r3
 801f3a2:	dc06      	bgt.n	801f3b2 <__ieee754_powf+0x156>
 801f3a4:	2d00      	cmp	r5, #0
 801f3a6:	daab      	bge.n	801f300 <__ieee754_powf+0xa4>
 801f3a8:	ed9f 0a97 	vldr	s0, [pc, #604]	; 801f608 <__ieee754_powf+0x3ac>
 801f3ac:	ee20 0a00 	vmul.f32	s0, s0, s0
 801f3b0:	e7a8      	b.n	801f304 <__ieee754_powf+0xa8>
 801f3b2:	4b96      	ldr	r3, [pc, #600]	; (801f60c <__ieee754_powf+0x3b0>)
 801f3b4:	429c      	cmp	r4, r3
 801f3b6:	dd02      	ble.n	801f3be <__ieee754_powf+0x162>
 801f3b8:	2d00      	cmp	r5, #0
 801f3ba:	dcf5      	bgt.n	801f3a8 <__ieee754_powf+0x14c>
 801f3bc:	e7a0      	b.n	801f300 <__ieee754_powf+0xa4>
 801f3be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801f3c2:	ee30 0a67 	vsub.f32	s0, s0, s15
 801f3c6:	eddf 6a92 	vldr	s13, [pc, #584]	; 801f610 <__ieee754_powf+0x3b4>
 801f3ca:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801f3ce:	eee0 6a67 	vfms.f32	s13, s0, s15
 801f3d2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f3d6:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801f3da:	ee20 7a00 	vmul.f32	s14, s0, s0
 801f3de:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f3e2:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 801f614 <__ieee754_powf+0x3b8>
 801f3e6:	ee67 7a67 	vnmul.f32	s15, s14, s15
 801f3ea:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 801f618 <__ieee754_powf+0x3bc>
 801f3ee:	eee0 7a07 	vfma.f32	s15, s0, s14
 801f3f2:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801f61c <__ieee754_powf+0x3c0>
 801f3f6:	eef0 6a67 	vmov.f32	s13, s15
 801f3fa:	eee0 6a07 	vfma.f32	s13, s0, s14
 801f3fe:	ee16 3a90 	vmov	r3, s13
 801f402:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801f406:	f023 030f 	bic.w	r3, r3, #15
 801f40a:	ee00 3a90 	vmov	s1, r3
 801f40e:	eee0 0a47 	vfms.f32	s1, s0, s14
 801f412:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801f416:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 801f41a:	f025 050f 	bic.w	r5, r5, #15
 801f41e:	ee07 5a10 	vmov	s14, r5
 801f422:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801f426:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801f42a:	ee07 3a90 	vmov	s15, r3
 801f42e:	eee7 0a27 	vfma.f32	s1, s14, s15
 801f432:	3e01      	subs	r6, #1
 801f434:	ea56 0200 	orrs.w	r2, r6, r0
 801f438:	ee07 5a10 	vmov	s14, r5
 801f43c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f440:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801f444:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801f448:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801f44c:	ee17 4a10 	vmov	r4, s14
 801f450:	bf08      	it	eq
 801f452:	eeb0 8a40 	vmoveq.f32	s16, s0
 801f456:	2c00      	cmp	r4, #0
 801f458:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801f45c:	f340 8184 	ble.w	801f768 <__ieee754_powf+0x50c>
 801f460:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801f464:	f340 80fc 	ble.w	801f660 <__ieee754_powf+0x404>
 801f468:	eddf 7a67 	vldr	s15, [pc, #412]	; 801f608 <__ieee754_powf+0x3ac>
 801f46c:	ee28 0a27 	vmul.f32	s0, s16, s15
 801f470:	ee20 0a27 	vmul.f32	s0, s0, s15
 801f474:	e746      	b.n	801f304 <__ieee754_powf+0xa8>
 801f476:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 801f47a:	bf01      	itttt	eq
 801f47c:	eddf 7a68 	vldreq	s15, [pc, #416]	; 801f620 <__ieee754_powf+0x3c4>
 801f480:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801f484:	f06f 0217 	mvneq.w	r2, #23
 801f488:	ee17 4a90 	vmoveq	r4, s15
 801f48c:	ea4f 53e4 	mov.w	r3, r4, asr #23
 801f490:	bf18      	it	ne
 801f492:	2200      	movne	r2, #0
 801f494:	3b7f      	subs	r3, #127	; 0x7f
 801f496:	4413      	add	r3, r2
 801f498:	4a62      	ldr	r2, [pc, #392]	; (801f624 <__ieee754_powf+0x3c8>)
 801f49a:	f3c4 0416 	ubfx	r4, r4, #0, #23
 801f49e:	4294      	cmp	r4, r2
 801f4a0:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 801f4a4:	dd06      	ble.n	801f4b4 <__ieee754_powf+0x258>
 801f4a6:	4a60      	ldr	r2, [pc, #384]	; (801f628 <__ieee754_powf+0x3cc>)
 801f4a8:	4294      	cmp	r4, r2
 801f4aa:	f340 80a4 	ble.w	801f5f6 <__ieee754_powf+0x39a>
 801f4ae:	3301      	adds	r3, #1
 801f4b0:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801f4b4:	2400      	movs	r4, #0
 801f4b6:	4a5d      	ldr	r2, [pc, #372]	; (801f62c <__ieee754_powf+0x3d0>)
 801f4b8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801f4bc:	ee07 1a90 	vmov	s15, r1
 801f4c0:	ed92 7a00 	vldr	s14, [r2]
 801f4c4:	4a5a      	ldr	r2, [pc, #360]	; (801f630 <__ieee754_powf+0x3d4>)
 801f4c6:	ee37 6a27 	vadd.f32	s12, s14, s15
 801f4ca:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801f4ce:	eec5 6a86 	vdiv.f32	s13, s11, s12
 801f4d2:	1049      	asrs	r1, r1, #1
 801f4d4:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801f4d8:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801f4dc:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 801f4e0:	ee37 5ac7 	vsub.f32	s10, s15, s14
 801f4e4:	ee06 1a10 	vmov	s12, r1
 801f4e8:	ee65 4a26 	vmul.f32	s9, s10, s13
 801f4ec:	ee36 7a47 	vsub.f32	s14, s12, s14
 801f4f0:	ee14 7a90 	vmov	r7, s9
 801f4f4:	4017      	ands	r7, r2
 801f4f6:	ee05 7a90 	vmov	s11, r7
 801f4fa:	eea5 5ac6 	vfms.f32	s10, s11, s12
 801f4fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f502:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 801f634 <__ieee754_powf+0x3d8>
 801f506:	eea5 5ae7 	vfms.f32	s10, s11, s15
 801f50a:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801f50e:	ee25 6a26 	vmul.f32	s12, s10, s13
 801f512:	eddf 6a49 	vldr	s13, [pc, #292]	; 801f638 <__ieee754_powf+0x3dc>
 801f516:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801f51a:	eddf 6a48 	vldr	s13, [pc, #288]	; 801f63c <__ieee754_powf+0x3e0>
 801f51e:	eee7 6a27 	vfma.f32	s13, s14, s15
 801f522:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 801f610 <__ieee754_powf+0x3b4>
 801f526:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801f52a:	eddf 6a45 	vldr	s13, [pc, #276]	; 801f640 <__ieee754_powf+0x3e4>
 801f52e:	eee7 6a27 	vfma.f32	s13, s14, s15
 801f532:	ed9f 7a44 	vldr	s14, [pc, #272]	; 801f644 <__ieee754_powf+0x3e8>
 801f536:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801f53a:	ee74 6aa5 	vadd.f32	s13, s9, s11
 801f53e:	ee27 5aa7 	vmul.f32	s10, s15, s15
 801f542:	ee66 6a86 	vmul.f32	s13, s13, s12
 801f546:	eee5 6a07 	vfma.f32	s13, s10, s14
 801f54a:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 801f54e:	eef0 7a45 	vmov.f32	s15, s10
 801f552:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801f556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f55a:	ee17 1a90 	vmov	r1, s15
 801f55e:	4011      	ands	r1, r2
 801f560:	ee07 1a90 	vmov	s15, r1
 801f564:	ee37 7ac5 	vsub.f32	s14, s15, s10
 801f568:	eea5 7ae5 	vfms.f32	s14, s11, s11
 801f56c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801f570:	ee27 7a24 	vmul.f32	s14, s14, s9
 801f574:	eea6 7a27 	vfma.f32	s14, s12, s15
 801f578:	eeb0 6a47 	vmov.f32	s12, s14
 801f57c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801f580:	ee16 1a10 	vmov	r1, s12
 801f584:	4011      	ands	r1, r2
 801f586:	ee06 1a90 	vmov	s13, r1
 801f58a:	eee5 6ae7 	vfms.f32	s13, s11, s15
 801f58e:	eddf 7a2e 	vldr	s15, [pc, #184]	; 801f648 <__ieee754_powf+0x3ec>
 801f592:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801f64c <__ieee754_powf+0x3f0>
 801f596:	ee37 7a66 	vsub.f32	s14, s14, s13
 801f59a:	ee06 1a10 	vmov	s12, r1
 801f59e:	ee27 7a27 	vmul.f32	s14, s14, s15
 801f5a2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801f650 <__ieee754_powf+0x3f4>
 801f5a6:	492b      	ldr	r1, [pc, #172]	; (801f654 <__ieee754_powf+0x3f8>)
 801f5a8:	eea6 7a27 	vfma.f32	s14, s12, s15
 801f5ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801f5b0:	edd1 7a00 	vldr	s15, [r1]
 801f5b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f5b8:	ee07 3a90 	vmov	s15, r3
 801f5bc:	4b26      	ldr	r3, [pc, #152]	; (801f658 <__ieee754_powf+0x3fc>)
 801f5be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801f5c2:	eef0 7a47 	vmov.f32	s15, s14
 801f5c6:	eee6 7a25 	vfma.f32	s15, s12, s11
 801f5ca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801f5ce:	edd4 0a00 	vldr	s1, [r4]
 801f5d2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801f5d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f5da:	ee17 3a90 	vmov	r3, s15
 801f5de:	4013      	ands	r3, r2
 801f5e0:	ee07 3a90 	vmov	s15, r3
 801f5e4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801f5e8:	ee76 6ae0 	vsub.f32	s13, s13, s1
 801f5ec:	eee6 6a65 	vfms.f32	s13, s12, s11
 801f5f0:	ee77 7a66 	vsub.f32	s15, s14, s13
 801f5f4:	e70f      	b.n	801f416 <__ieee754_powf+0x1ba>
 801f5f6:	2401      	movs	r4, #1
 801f5f8:	e75d      	b.n	801f4b6 <__ieee754_powf+0x25a>
 801f5fa:	bf00      	nop
 801f5fc:	08021498 	.word	0x08021498
 801f600:	00000000 	.word	0x00000000
 801f604:	3f7ffff7 	.word	0x3f7ffff7
 801f608:	7149f2ca 	.word	0x7149f2ca
 801f60c:	3f800007 	.word	0x3f800007
 801f610:	3eaaaaab 	.word	0x3eaaaaab
 801f614:	3fb8aa3b 	.word	0x3fb8aa3b
 801f618:	36eca570 	.word	0x36eca570
 801f61c:	3fb8aa00 	.word	0x3fb8aa00
 801f620:	4b800000 	.word	0x4b800000
 801f624:	001cc471 	.word	0x001cc471
 801f628:	005db3d6 	.word	0x005db3d6
 801f62c:	080215a8 	.word	0x080215a8
 801f630:	fffff000 	.word	0xfffff000
 801f634:	3e6c3255 	.word	0x3e6c3255
 801f638:	3e53f142 	.word	0x3e53f142
 801f63c:	3e8ba305 	.word	0x3e8ba305
 801f640:	3edb6db7 	.word	0x3edb6db7
 801f644:	3f19999a 	.word	0x3f19999a
 801f648:	3f76384f 	.word	0x3f76384f
 801f64c:	3f763800 	.word	0x3f763800
 801f650:	369dc3a0 	.word	0x369dc3a0
 801f654:	080215b8 	.word	0x080215b8
 801f658:	080215b0 	.word	0x080215b0
 801f65c:	3338aa3c 	.word	0x3338aa3c
 801f660:	f040 8092 	bne.w	801f788 <__ieee754_powf+0x52c>
 801f664:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801f65c <__ieee754_powf+0x400>
 801f668:	ee37 7a67 	vsub.f32	s14, s14, s15
 801f66c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801f670:	eef4 6ac7 	vcmpe.f32	s13, s14
 801f674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f678:	f73f aef6 	bgt.w	801f468 <__ieee754_powf+0x20c>
 801f67c:	15db      	asrs	r3, r3, #23
 801f67e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801f682:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801f686:	4103      	asrs	r3, r0
 801f688:	4423      	add	r3, r4
 801f68a:	4949      	ldr	r1, [pc, #292]	; (801f7b0 <__ieee754_powf+0x554>)
 801f68c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801f690:	3a7f      	subs	r2, #127	; 0x7f
 801f692:	4111      	asrs	r1, r2
 801f694:	ea23 0101 	bic.w	r1, r3, r1
 801f698:	ee07 1a10 	vmov	s14, r1
 801f69c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801f6a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801f6a4:	f1c2 0217 	rsb	r2, r2, #23
 801f6a8:	4110      	asrs	r0, r2
 801f6aa:	2c00      	cmp	r4, #0
 801f6ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f6b0:	bfb8      	it	lt
 801f6b2:	4240      	neglt	r0, r0
 801f6b4:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801f6b8:	eddf 6a3e 	vldr	s13, [pc, #248]	; 801f7b4 <__ieee754_powf+0x558>
 801f6bc:	ee17 3a10 	vmov	r3, s14
 801f6c0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801f6c4:	f023 030f 	bic.w	r3, r3, #15
 801f6c8:	ee07 3a10 	vmov	s14, r3
 801f6cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f6d0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801f6d4:	eddf 7a38 	vldr	s15, [pc, #224]	; 801f7b8 <__ieee754_powf+0x55c>
 801f6d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f6dc:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801f6e0:	eddf 6a36 	vldr	s13, [pc, #216]	; 801f7bc <__ieee754_powf+0x560>
 801f6e4:	eeb0 0a67 	vmov.f32	s0, s15
 801f6e8:	eea7 0a26 	vfma.f32	s0, s14, s13
 801f6ec:	eeb0 6a40 	vmov.f32	s12, s0
 801f6f0:	eea7 6a66 	vfms.f32	s12, s14, s13
 801f6f4:	ee20 7a00 	vmul.f32	s14, s0, s0
 801f6f8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801f6fc:	eddf 6a30 	vldr	s13, [pc, #192]	; 801f7c0 <__ieee754_powf+0x564>
 801f700:	ed9f 6a30 	vldr	s12, [pc, #192]	; 801f7c4 <__ieee754_powf+0x568>
 801f704:	eea7 6a26 	vfma.f32	s12, s14, s13
 801f708:	eddf 6a2f 	vldr	s13, [pc, #188]	; 801f7c8 <__ieee754_powf+0x56c>
 801f70c:	eee6 6a07 	vfma.f32	s13, s12, s14
 801f710:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 801f7cc <__ieee754_powf+0x570>
 801f714:	eea6 6a87 	vfma.f32	s12, s13, s14
 801f718:	eddf 6a2d 	vldr	s13, [pc, #180]	; 801f7d0 <__ieee754_powf+0x574>
 801f71c:	eee6 6a07 	vfma.f32	s13, s12, s14
 801f720:	eeb0 6a40 	vmov.f32	s12, s0
 801f724:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801f728:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801f72c:	eeb0 7a46 	vmov.f32	s14, s12
 801f730:	ee77 6a66 	vsub.f32	s13, s14, s13
 801f734:	ee20 6a06 	vmul.f32	s12, s0, s12
 801f738:	eee0 7a27 	vfma.f32	s15, s0, s15
 801f73c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801f740:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f744:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801f748:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801f74c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801f750:	ee10 3a10 	vmov	r3, s0
 801f754:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801f758:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801f75c:	da1a      	bge.n	801f794 <__ieee754_powf+0x538>
 801f75e:	f7fa fd2f 	bl	801a1c0 <scalbnf>
 801f762:	ee20 0a08 	vmul.f32	s0, s0, s16
 801f766:	e5cd      	b.n	801f304 <__ieee754_powf+0xa8>
 801f768:	4a1a      	ldr	r2, [pc, #104]	; (801f7d4 <__ieee754_powf+0x578>)
 801f76a:	4293      	cmp	r3, r2
 801f76c:	dd02      	ble.n	801f774 <__ieee754_powf+0x518>
 801f76e:	eddf 7a1a 	vldr	s15, [pc, #104]	; 801f7d8 <__ieee754_powf+0x57c>
 801f772:	e67b      	b.n	801f46c <__ieee754_powf+0x210>
 801f774:	d108      	bne.n	801f788 <__ieee754_powf+0x52c>
 801f776:	ee37 7a67 	vsub.f32	s14, s14, s15
 801f77a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801f77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f782:	f6ff af7b 	blt.w	801f67c <__ieee754_powf+0x420>
 801f786:	e7f2      	b.n	801f76e <__ieee754_powf+0x512>
 801f788:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801f78c:	f73f af76 	bgt.w	801f67c <__ieee754_powf+0x420>
 801f790:	2000      	movs	r0, #0
 801f792:	e78f      	b.n	801f6b4 <__ieee754_powf+0x458>
 801f794:	ee00 3a10 	vmov	s0, r3
 801f798:	e7e3      	b.n	801f762 <__ieee754_powf+0x506>
 801f79a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801f79e:	e5b1      	b.n	801f304 <__ieee754_powf+0xa8>
 801f7a0:	eeb0 0a68 	vmov.f32	s0, s17
 801f7a4:	e5ae      	b.n	801f304 <__ieee754_powf+0xa8>
 801f7a6:	eeb0 0a48 	vmov.f32	s0, s16
 801f7aa:	e5ab      	b.n	801f304 <__ieee754_powf+0xa8>
 801f7ac:	2600      	movs	r6, #0
 801f7ae:	e590      	b.n	801f2d2 <__ieee754_powf+0x76>
 801f7b0:	007fffff 	.word	0x007fffff
 801f7b4:	3f317218 	.word	0x3f317218
 801f7b8:	35bfbe8c 	.word	0x35bfbe8c
 801f7bc:	3f317200 	.word	0x3f317200
 801f7c0:	3331bb4c 	.word	0x3331bb4c
 801f7c4:	b5ddea0e 	.word	0xb5ddea0e
 801f7c8:	388ab355 	.word	0x388ab355
 801f7cc:	bb360b61 	.word	0xbb360b61
 801f7d0:	3e2aaaab 	.word	0x3e2aaaab
 801f7d4:	43160000 	.word	0x43160000
 801f7d8:	0da24260 	.word	0x0da24260

0801f7dc <__ieee754_rem_pio2f>:
 801f7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f7de:	ee10 6a10 	vmov	r6, s0
 801f7e2:	4b8e      	ldr	r3, [pc, #568]	; (801fa1c <__ieee754_rem_pio2f+0x240>)
 801f7e4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801f7e8:	429d      	cmp	r5, r3
 801f7ea:	b087      	sub	sp, #28
 801f7ec:	eef0 7a40 	vmov.f32	s15, s0
 801f7f0:	4604      	mov	r4, r0
 801f7f2:	dc05      	bgt.n	801f800 <__ieee754_rem_pio2f+0x24>
 801f7f4:	2300      	movs	r3, #0
 801f7f6:	ed80 0a00 	vstr	s0, [r0]
 801f7fa:	6043      	str	r3, [r0, #4]
 801f7fc:	2000      	movs	r0, #0
 801f7fe:	e01a      	b.n	801f836 <__ieee754_rem_pio2f+0x5a>
 801f800:	4b87      	ldr	r3, [pc, #540]	; (801fa20 <__ieee754_rem_pio2f+0x244>)
 801f802:	429d      	cmp	r5, r3
 801f804:	dc46      	bgt.n	801f894 <__ieee754_rem_pio2f+0xb8>
 801f806:	2e00      	cmp	r6, #0
 801f808:	ed9f 0a86 	vldr	s0, [pc, #536]	; 801fa24 <__ieee754_rem_pio2f+0x248>
 801f80c:	4b86      	ldr	r3, [pc, #536]	; (801fa28 <__ieee754_rem_pio2f+0x24c>)
 801f80e:	f025 050f 	bic.w	r5, r5, #15
 801f812:	dd1f      	ble.n	801f854 <__ieee754_rem_pio2f+0x78>
 801f814:	429d      	cmp	r5, r3
 801f816:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801f81a:	d00e      	beq.n	801f83a <__ieee754_rem_pio2f+0x5e>
 801f81c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801fa2c <__ieee754_rem_pio2f+0x250>
 801f820:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801f824:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801f828:	ed80 0a00 	vstr	s0, [r0]
 801f82c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f830:	2001      	movs	r0, #1
 801f832:	edc4 7a01 	vstr	s15, [r4, #4]
 801f836:	b007      	add	sp, #28
 801f838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f83a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801fa30 <__ieee754_rem_pio2f+0x254>
 801f83e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801fa34 <__ieee754_rem_pio2f+0x258>
 801f842:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801f846:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801f84a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801f84e:	edc0 6a00 	vstr	s13, [r0]
 801f852:	e7eb      	b.n	801f82c <__ieee754_rem_pio2f+0x50>
 801f854:	429d      	cmp	r5, r3
 801f856:	ee77 7a80 	vadd.f32	s15, s15, s0
 801f85a:	d00e      	beq.n	801f87a <__ieee754_rem_pio2f+0x9e>
 801f85c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801fa2c <__ieee754_rem_pio2f+0x250>
 801f860:	ee37 0a87 	vadd.f32	s0, s15, s14
 801f864:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801f868:	ed80 0a00 	vstr	s0, [r0]
 801f86c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f874:	edc4 7a01 	vstr	s15, [r4, #4]
 801f878:	e7dd      	b.n	801f836 <__ieee754_rem_pio2f+0x5a>
 801f87a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801fa30 <__ieee754_rem_pio2f+0x254>
 801f87e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 801fa34 <__ieee754_rem_pio2f+0x258>
 801f882:	ee77 7a80 	vadd.f32	s15, s15, s0
 801f886:	ee77 6a87 	vadd.f32	s13, s15, s14
 801f88a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801f88e:	edc0 6a00 	vstr	s13, [r0]
 801f892:	e7eb      	b.n	801f86c <__ieee754_rem_pio2f+0x90>
 801f894:	4b68      	ldr	r3, [pc, #416]	; (801fa38 <__ieee754_rem_pio2f+0x25c>)
 801f896:	429d      	cmp	r5, r3
 801f898:	dc72      	bgt.n	801f980 <__ieee754_rem_pio2f+0x1a4>
 801f89a:	f7fe fca3 	bl	801e1e4 <fabsf>
 801f89e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801fa3c <__ieee754_rem_pio2f+0x260>
 801f8a2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f8a6:	eee0 7a07 	vfma.f32	s15, s0, s14
 801f8aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f8ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f8b2:	ee17 0a90 	vmov	r0, s15
 801f8b6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801fa24 <__ieee754_rem_pio2f+0x248>
 801f8ba:	eea7 0a67 	vfms.f32	s0, s14, s15
 801f8be:	281f      	cmp	r0, #31
 801f8c0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801fa2c <__ieee754_rem_pio2f+0x250>
 801f8c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f8c8:	eeb1 6a47 	vneg.f32	s12, s14
 801f8cc:	ee70 6a67 	vsub.f32	s13, s0, s15
 801f8d0:	ee16 2a90 	vmov	r2, s13
 801f8d4:	dc1c      	bgt.n	801f910 <__ieee754_rem_pio2f+0x134>
 801f8d6:	495a      	ldr	r1, [pc, #360]	; (801fa40 <__ieee754_rem_pio2f+0x264>)
 801f8d8:	1e47      	subs	r7, r0, #1
 801f8da:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801f8de:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801f8e2:	428b      	cmp	r3, r1
 801f8e4:	d014      	beq.n	801f910 <__ieee754_rem_pio2f+0x134>
 801f8e6:	6022      	str	r2, [r4, #0]
 801f8e8:	ed94 7a00 	vldr	s14, [r4]
 801f8ec:	ee30 0a47 	vsub.f32	s0, s0, s14
 801f8f0:	2e00      	cmp	r6, #0
 801f8f2:	ee30 0a67 	vsub.f32	s0, s0, s15
 801f8f6:	ed84 0a01 	vstr	s0, [r4, #4]
 801f8fa:	da9c      	bge.n	801f836 <__ieee754_rem_pio2f+0x5a>
 801f8fc:	eeb1 7a47 	vneg.f32	s14, s14
 801f900:	eeb1 0a40 	vneg.f32	s0, s0
 801f904:	ed84 7a00 	vstr	s14, [r4]
 801f908:	ed84 0a01 	vstr	s0, [r4, #4]
 801f90c:	4240      	negs	r0, r0
 801f90e:	e792      	b.n	801f836 <__ieee754_rem_pio2f+0x5a>
 801f910:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801f914:	15eb      	asrs	r3, r5, #23
 801f916:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801f91a:	2d08      	cmp	r5, #8
 801f91c:	dde3      	ble.n	801f8e6 <__ieee754_rem_pio2f+0x10a>
 801f91e:	eddf 7a44 	vldr	s15, [pc, #272]	; 801fa30 <__ieee754_rem_pio2f+0x254>
 801f922:	eef0 6a40 	vmov.f32	s13, s0
 801f926:	eee6 6a27 	vfma.f32	s13, s12, s15
 801f92a:	ee30 0a66 	vsub.f32	s0, s0, s13
 801f92e:	eea6 0a27 	vfma.f32	s0, s12, s15
 801f932:	eddf 7a40 	vldr	s15, [pc, #256]	; 801fa34 <__ieee754_rem_pio2f+0x258>
 801f936:	ee97 0a27 	vfnms.f32	s0, s14, s15
 801f93a:	ee76 5ac0 	vsub.f32	s11, s13, s0
 801f93e:	eef0 7a40 	vmov.f32	s15, s0
 801f942:	ee15 2a90 	vmov	r2, s11
 801f946:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801f94a:	1a5b      	subs	r3, r3, r1
 801f94c:	2b19      	cmp	r3, #25
 801f94e:	dc04      	bgt.n	801f95a <__ieee754_rem_pio2f+0x17e>
 801f950:	edc4 5a00 	vstr	s11, [r4]
 801f954:	eeb0 0a66 	vmov.f32	s0, s13
 801f958:	e7c6      	b.n	801f8e8 <__ieee754_rem_pio2f+0x10c>
 801f95a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801fa44 <__ieee754_rem_pio2f+0x268>
 801f95e:	eeb0 0a66 	vmov.f32	s0, s13
 801f962:	eea6 0a25 	vfma.f32	s0, s12, s11
 801f966:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801f96a:	eddf 6a37 	vldr	s13, [pc, #220]	; 801fa48 <__ieee754_rem_pio2f+0x26c>
 801f96e:	eee6 7a25 	vfma.f32	s15, s12, s11
 801f972:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801f976:	ee30 7a67 	vsub.f32	s14, s0, s15
 801f97a:	ed84 7a00 	vstr	s14, [r4]
 801f97e:	e7b3      	b.n	801f8e8 <__ieee754_rem_pio2f+0x10c>
 801f980:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801f984:	db06      	blt.n	801f994 <__ieee754_rem_pio2f+0x1b8>
 801f986:	ee70 7a40 	vsub.f32	s15, s0, s0
 801f98a:	edc0 7a01 	vstr	s15, [r0, #4]
 801f98e:	edc0 7a00 	vstr	s15, [r0]
 801f992:	e733      	b.n	801f7fc <__ieee754_rem_pio2f+0x20>
 801f994:	15ea      	asrs	r2, r5, #23
 801f996:	3a86      	subs	r2, #134	; 0x86
 801f998:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801f99c:	ee07 3a90 	vmov	s15, r3
 801f9a0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801f9a4:	eddf 6a29 	vldr	s13, [pc, #164]	; 801fa4c <__ieee754_rem_pio2f+0x270>
 801f9a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f9ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f9b0:	ed8d 7a03 	vstr	s14, [sp, #12]
 801f9b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f9b8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801f9bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f9c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f9c4:	ed8d 7a04 	vstr	s14, [sp, #16]
 801f9c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f9cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 801f9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f9d4:	edcd 7a05 	vstr	s15, [sp, #20]
 801f9d8:	d11e      	bne.n	801fa18 <__ieee754_rem_pio2f+0x23c>
 801f9da:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801f9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f9e2:	bf14      	ite	ne
 801f9e4:	2302      	movne	r3, #2
 801f9e6:	2301      	moveq	r3, #1
 801f9e8:	4919      	ldr	r1, [pc, #100]	; (801fa50 <__ieee754_rem_pio2f+0x274>)
 801f9ea:	9101      	str	r1, [sp, #4]
 801f9ec:	2102      	movs	r1, #2
 801f9ee:	9100      	str	r1, [sp, #0]
 801f9f0:	a803      	add	r0, sp, #12
 801f9f2:	4621      	mov	r1, r4
 801f9f4:	f000 f892 	bl	801fb1c <__kernel_rem_pio2f>
 801f9f8:	2e00      	cmp	r6, #0
 801f9fa:	f6bf af1c 	bge.w	801f836 <__ieee754_rem_pio2f+0x5a>
 801f9fe:	edd4 7a00 	vldr	s15, [r4]
 801fa02:	eef1 7a67 	vneg.f32	s15, s15
 801fa06:	edc4 7a00 	vstr	s15, [r4]
 801fa0a:	edd4 7a01 	vldr	s15, [r4, #4]
 801fa0e:	eef1 7a67 	vneg.f32	s15, s15
 801fa12:	edc4 7a01 	vstr	s15, [r4, #4]
 801fa16:	e779      	b.n	801f90c <__ieee754_rem_pio2f+0x130>
 801fa18:	2303      	movs	r3, #3
 801fa1a:	e7e5      	b.n	801f9e8 <__ieee754_rem_pio2f+0x20c>
 801fa1c:	3f490fd8 	.word	0x3f490fd8
 801fa20:	4016cbe3 	.word	0x4016cbe3
 801fa24:	3fc90f80 	.word	0x3fc90f80
 801fa28:	3fc90fd0 	.word	0x3fc90fd0
 801fa2c:	37354443 	.word	0x37354443
 801fa30:	37354400 	.word	0x37354400
 801fa34:	2e85a308 	.word	0x2e85a308
 801fa38:	43490f80 	.word	0x43490f80
 801fa3c:	3f22f984 	.word	0x3f22f984
 801fa40:	080215c0 	.word	0x080215c0
 801fa44:	2e85a300 	.word	0x2e85a300
 801fa48:	248d3132 	.word	0x248d3132
 801fa4c:	43800000 	.word	0x43800000
 801fa50:	08021640 	.word	0x08021640

0801fa54 <__ieee754_sqrtf>:
 801fa54:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801fa58:	4770      	bx	lr
	...

0801fa5c <__kernel_cosf>:
 801fa5c:	ee10 3a10 	vmov	r3, s0
 801fa60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801fa64:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801fa68:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801fa6c:	da05      	bge.n	801fa7a <__kernel_cosf+0x1e>
 801fa6e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801fa72:	ee17 2a90 	vmov	r2, s15
 801fa76:	2a00      	cmp	r2, #0
 801fa78:	d03d      	beq.n	801faf6 <__kernel_cosf+0x9a>
 801fa7a:	ee60 5a00 	vmul.f32	s11, s0, s0
 801fa7e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801fafc <__kernel_cosf+0xa0>
 801fa82:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801fb00 <__kernel_cosf+0xa4>
 801fa86:	eddf 6a1f 	vldr	s13, [pc, #124]	; 801fb04 <__kernel_cosf+0xa8>
 801fa8a:	4a1f      	ldr	r2, [pc, #124]	; (801fb08 <__kernel_cosf+0xac>)
 801fa8c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801fa90:	4293      	cmp	r3, r2
 801fa92:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801fb0c <__kernel_cosf+0xb0>
 801fa96:	eee7 7a25 	vfma.f32	s15, s14, s11
 801fa9a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 801fb10 <__kernel_cosf+0xb4>
 801fa9e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801faa2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801fb14 <__kernel_cosf+0xb8>
 801faa6:	eee7 7a25 	vfma.f32	s15, s14, s11
 801faaa:	eeb0 7a66 	vmov.f32	s14, s13
 801faae:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801fab2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801fab6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801faba:	ee67 6a25 	vmul.f32	s13, s14, s11
 801fabe:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 801fac2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801fac6:	dc04      	bgt.n	801fad2 <__kernel_cosf+0x76>
 801fac8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801facc:	ee36 0a47 	vsub.f32	s0, s12, s14
 801fad0:	4770      	bx	lr
 801fad2:	4a11      	ldr	r2, [pc, #68]	; (801fb18 <__kernel_cosf+0xbc>)
 801fad4:	4293      	cmp	r3, r2
 801fad6:	bfda      	itte	le
 801fad8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801fadc:	ee06 3a90 	vmovle	s13, r3
 801fae0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 801fae4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801fae8:	ee36 0a66 	vsub.f32	s0, s12, s13
 801faec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801faf0:	ee30 0a67 	vsub.f32	s0, s0, s15
 801faf4:	4770      	bx	lr
 801faf6:	eeb0 0a46 	vmov.f32	s0, s12
 801fafa:	4770      	bx	lr
 801fafc:	ad47d74e 	.word	0xad47d74e
 801fb00:	310f74f6 	.word	0x310f74f6
 801fb04:	3d2aaaab 	.word	0x3d2aaaab
 801fb08:	3e999999 	.word	0x3e999999
 801fb0c:	b493f27c 	.word	0xb493f27c
 801fb10:	37d00d01 	.word	0x37d00d01
 801fb14:	bab60b61 	.word	0xbab60b61
 801fb18:	3f480000 	.word	0x3f480000

0801fb1c <__kernel_rem_pio2f>:
 801fb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb20:	ed2d 8b04 	vpush	{d8-d9}
 801fb24:	b0d7      	sub	sp, #348	; 0x15c
 801fb26:	4616      	mov	r6, r2
 801fb28:	4698      	mov	r8, r3
 801fb2a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801fb2c:	4bbb      	ldr	r3, [pc, #748]	; (801fe1c <__kernel_rem_pio2f+0x300>)
 801fb2e:	9001      	str	r0, [sp, #4]
 801fb30:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801fb34:	1d33      	adds	r3, r6, #4
 801fb36:	460d      	mov	r5, r1
 801fb38:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 801fb3c:	db29      	blt.n	801fb92 <__kernel_rem_pio2f+0x76>
 801fb3e:	1ef1      	subs	r1, r6, #3
 801fb40:	bf48      	it	mi
 801fb42:	1d31      	addmi	r1, r6, #4
 801fb44:	10c9      	asrs	r1, r1, #3
 801fb46:	1c4c      	adds	r4, r1, #1
 801fb48:	00e3      	lsls	r3, r4, #3
 801fb4a:	9302      	str	r3, [sp, #8]
 801fb4c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801fb4e:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 801fe2c <__kernel_rem_pio2f+0x310>
 801fb52:	eba1 0009 	sub.w	r0, r1, r9
 801fb56:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 801fb5a:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 801fb5e:	eb07 0c09 	add.w	ip, r7, r9
 801fb62:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 801fb66:	2300      	movs	r3, #0
 801fb68:	4563      	cmp	r3, ip
 801fb6a:	dd14      	ble.n	801fb96 <__kernel_rem_pio2f+0x7a>
 801fb6c:	ab1a      	add	r3, sp, #104	; 0x68
 801fb6e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 801fb72:	46cc      	mov	ip, r9
 801fb74:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 801fb78:	f1c8 0b01 	rsb	fp, r8, #1
 801fb7c:	eb0b 020c 	add.w	r2, fp, ip
 801fb80:	4297      	cmp	r7, r2
 801fb82:	db27      	blt.n	801fbd4 <__kernel_rem_pio2f+0xb8>
 801fb84:	f8dd e004 	ldr.w	lr, [sp, #4]
 801fb88:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801fe2c <__kernel_rem_pio2f+0x310>
 801fb8c:	4618      	mov	r0, r3
 801fb8e:	2200      	movs	r2, #0
 801fb90:	e016      	b.n	801fbc0 <__kernel_rem_pio2f+0xa4>
 801fb92:	2100      	movs	r1, #0
 801fb94:	e7d7      	b.n	801fb46 <__kernel_rem_pio2f+0x2a>
 801fb96:	42d8      	cmn	r0, r3
 801fb98:	bf5d      	ittte	pl
 801fb9a:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 801fb9e:	ee07 2a90 	vmovpl	s15, r2
 801fba2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801fba6:	eef0 7a47 	vmovmi.f32	s15, s14
 801fbaa:	ecea 7a01 	vstmia	sl!, {s15}
 801fbae:	3301      	adds	r3, #1
 801fbb0:	e7da      	b.n	801fb68 <__kernel_rem_pio2f+0x4c>
 801fbb2:	ecfe 6a01 	vldmia	lr!, {s13}
 801fbb6:	ed90 7a00 	vldr	s14, [r0]
 801fbba:	eee6 7a87 	vfma.f32	s15, s13, s14
 801fbbe:	3201      	adds	r2, #1
 801fbc0:	454a      	cmp	r2, r9
 801fbc2:	f1a0 0004 	sub.w	r0, r0, #4
 801fbc6:	ddf4      	ble.n	801fbb2 <__kernel_rem_pio2f+0x96>
 801fbc8:	ecea 7a01 	vstmia	sl!, {s15}
 801fbcc:	3304      	adds	r3, #4
 801fbce:	f10c 0c01 	add.w	ip, ip, #1
 801fbd2:	e7d3      	b.n	801fb7c <__kernel_rem_pio2f+0x60>
 801fbd4:	ab06      	add	r3, sp, #24
 801fbd6:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 801fbda:	9304      	str	r3, [sp, #16]
 801fbdc:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801fbde:	eddf 8a92 	vldr	s17, [pc, #584]	; 801fe28 <__kernel_rem_pio2f+0x30c>
 801fbe2:	ed9f 9a90 	vldr	s18, [pc, #576]	; 801fe24 <__kernel_rem_pio2f+0x308>
 801fbe6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801fbea:	9303      	str	r3, [sp, #12]
 801fbec:	46ba      	mov	sl, r7
 801fbee:	ab56      	add	r3, sp, #344	; 0x158
 801fbf0:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801fbf4:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 801fbf8:	ab06      	add	r3, sp, #24
 801fbfa:	4618      	mov	r0, r3
 801fbfc:	4652      	mov	r2, sl
 801fbfe:	2a00      	cmp	r2, #0
 801fc00:	dc51      	bgt.n	801fca6 <__kernel_rem_pio2f+0x18a>
 801fc02:	4620      	mov	r0, r4
 801fc04:	9305      	str	r3, [sp, #20]
 801fc06:	f7fa fadb 	bl	801a1c0 <scalbnf>
 801fc0a:	eeb0 8a40 	vmov.f32	s16, s0
 801fc0e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801fc12:	ee28 0a00 	vmul.f32	s0, s16, s0
 801fc16:	f000 fb71 	bl	80202fc <floorf>
 801fc1a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801fc1e:	eea0 8a67 	vfms.f32	s16, s0, s15
 801fc22:	2c00      	cmp	r4, #0
 801fc24:	9b05      	ldr	r3, [sp, #20]
 801fc26:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801fc2a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801fc2e:	edcd 7a00 	vstr	s15, [sp]
 801fc32:	ee38 8a40 	vsub.f32	s16, s16, s0
 801fc36:	dd4b      	ble.n	801fcd0 <__kernel_rem_pio2f+0x1b4>
 801fc38:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 801fc3c:	aa06      	add	r2, sp, #24
 801fc3e:	f1c4 0e08 	rsb	lr, r4, #8
 801fc42:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801fc46:	ee17 1a90 	vmov	r1, s15
 801fc4a:	fa42 f00e 	asr.w	r0, r2, lr
 801fc4e:	4401      	add	r1, r0
 801fc50:	9100      	str	r1, [sp, #0]
 801fc52:	fa00 f00e 	lsl.w	r0, r0, lr
 801fc56:	a906      	add	r1, sp, #24
 801fc58:	1a12      	subs	r2, r2, r0
 801fc5a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801fc5e:	f1c4 0007 	rsb	r0, r4, #7
 801fc62:	fa42 fb00 	asr.w	fp, r2, r0
 801fc66:	f1bb 0f00 	cmp.w	fp, #0
 801fc6a:	dd43      	ble.n	801fcf4 <__kernel_rem_pio2f+0x1d8>
 801fc6c:	9a00      	ldr	r2, [sp, #0]
 801fc6e:	f04f 0e00 	mov.w	lr, #0
 801fc72:	3201      	adds	r2, #1
 801fc74:	9200      	str	r2, [sp, #0]
 801fc76:	4670      	mov	r0, lr
 801fc78:	45f2      	cmp	sl, lr
 801fc7a:	dc6c      	bgt.n	801fd56 <__kernel_rem_pio2f+0x23a>
 801fc7c:	2c00      	cmp	r4, #0
 801fc7e:	dd04      	ble.n	801fc8a <__kernel_rem_pio2f+0x16e>
 801fc80:	2c01      	cmp	r4, #1
 801fc82:	d079      	beq.n	801fd78 <__kernel_rem_pio2f+0x25c>
 801fc84:	2c02      	cmp	r4, #2
 801fc86:	f000 8082 	beq.w	801fd8e <__kernel_rem_pio2f+0x272>
 801fc8a:	f1bb 0f02 	cmp.w	fp, #2
 801fc8e:	d131      	bne.n	801fcf4 <__kernel_rem_pio2f+0x1d8>
 801fc90:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801fc94:	ee30 8a48 	vsub.f32	s16, s0, s16
 801fc98:	b360      	cbz	r0, 801fcf4 <__kernel_rem_pio2f+0x1d8>
 801fc9a:	4620      	mov	r0, r4
 801fc9c:	f7fa fa90 	bl	801a1c0 <scalbnf>
 801fca0:	ee38 8a40 	vsub.f32	s16, s16, s0
 801fca4:	e026      	b.n	801fcf4 <__kernel_rem_pio2f+0x1d8>
 801fca6:	ee60 7a28 	vmul.f32	s15, s0, s17
 801fcaa:	3a01      	subs	r2, #1
 801fcac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801fcb0:	a942      	add	r1, sp, #264	; 0x108
 801fcb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fcb6:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801fcba:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801fcbe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801fcc2:	eca0 0a01 	vstmia	r0!, {s0}
 801fcc6:	ed9c 0a00 	vldr	s0, [ip]
 801fcca:	ee37 0a80 	vadd.f32	s0, s15, s0
 801fcce:	e796      	b.n	801fbfe <__kernel_rem_pio2f+0xe2>
 801fcd0:	d107      	bne.n	801fce2 <__kernel_rem_pio2f+0x1c6>
 801fcd2:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 801fcd6:	a906      	add	r1, sp, #24
 801fcd8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801fcdc:	ea4f 2b22 	mov.w	fp, r2, asr #8
 801fce0:	e7c1      	b.n	801fc66 <__kernel_rem_pio2f+0x14a>
 801fce2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801fce6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801fcea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fcee:	da2f      	bge.n	801fd50 <__kernel_rem_pio2f+0x234>
 801fcf0:	f04f 0b00 	mov.w	fp, #0
 801fcf4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801fcf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fcfc:	f040 8098 	bne.w	801fe30 <__kernel_rem_pio2f+0x314>
 801fd00:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801fd04:	469c      	mov	ip, r3
 801fd06:	2200      	movs	r2, #0
 801fd08:	45bc      	cmp	ip, r7
 801fd0a:	da48      	bge.n	801fd9e <__kernel_rem_pio2f+0x282>
 801fd0c:	2a00      	cmp	r2, #0
 801fd0e:	d05f      	beq.n	801fdd0 <__kernel_rem_pio2f+0x2b4>
 801fd10:	aa06      	add	r2, sp, #24
 801fd12:	3c08      	subs	r4, #8
 801fd14:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801fd18:	2900      	cmp	r1, #0
 801fd1a:	d07d      	beq.n	801fe18 <__kernel_rem_pio2f+0x2fc>
 801fd1c:	4620      	mov	r0, r4
 801fd1e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801fd22:	9301      	str	r3, [sp, #4]
 801fd24:	f7fa fa4c 	bl	801a1c0 <scalbnf>
 801fd28:	9b01      	ldr	r3, [sp, #4]
 801fd2a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 801fe28 <__kernel_rem_pio2f+0x30c>
 801fd2e:	4619      	mov	r1, r3
 801fd30:	2900      	cmp	r1, #0
 801fd32:	f280 80af 	bge.w	801fe94 <__kernel_rem_pio2f+0x378>
 801fd36:	4618      	mov	r0, r3
 801fd38:	2400      	movs	r4, #0
 801fd3a:	2800      	cmp	r0, #0
 801fd3c:	f2c0 80d0 	blt.w	801fee0 <__kernel_rem_pio2f+0x3c4>
 801fd40:	a942      	add	r1, sp, #264	; 0x108
 801fd42:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 801fd46:	4a36      	ldr	r2, [pc, #216]	; (801fe20 <__kernel_rem_pio2f+0x304>)
 801fd48:	eddf 7a38 	vldr	s15, [pc, #224]	; 801fe2c <__kernel_rem_pio2f+0x310>
 801fd4c:	2100      	movs	r1, #0
 801fd4e:	e0bb      	b.n	801fec8 <__kernel_rem_pio2f+0x3ac>
 801fd50:	f04f 0b02 	mov.w	fp, #2
 801fd54:	e78a      	b.n	801fc6c <__kernel_rem_pio2f+0x150>
 801fd56:	681a      	ldr	r2, [r3, #0]
 801fd58:	b948      	cbnz	r0, 801fd6e <__kernel_rem_pio2f+0x252>
 801fd5a:	b11a      	cbz	r2, 801fd64 <__kernel_rem_pio2f+0x248>
 801fd5c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801fd60:	601a      	str	r2, [r3, #0]
 801fd62:	2201      	movs	r2, #1
 801fd64:	f10e 0e01 	add.w	lr, lr, #1
 801fd68:	3304      	adds	r3, #4
 801fd6a:	4610      	mov	r0, r2
 801fd6c:	e784      	b.n	801fc78 <__kernel_rem_pio2f+0x15c>
 801fd6e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801fd72:	601a      	str	r2, [r3, #0]
 801fd74:	4602      	mov	r2, r0
 801fd76:	e7f5      	b.n	801fd64 <__kernel_rem_pio2f+0x248>
 801fd78:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 801fd7c:	ab06      	add	r3, sp, #24
 801fd7e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801fd82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801fd86:	aa06      	add	r2, sp, #24
 801fd88:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 801fd8c:	e77d      	b.n	801fc8a <__kernel_rem_pio2f+0x16e>
 801fd8e:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 801fd92:	ab06      	add	r3, sp, #24
 801fd94:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801fd98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801fd9c:	e7f3      	b.n	801fd86 <__kernel_rem_pio2f+0x26a>
 801fd9e:	a906      	add	r1, sp, #24
 801fda0:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 801fda4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801fda8:	4302      	orrs	r2, r0
 801fdaa:	e7ad      	b.n	801fd08 <__kernel_rem_pio2f+0x1ec>
 801fdac:	3001      	adds	r0, #1
 801fdae:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801fdb2:	2a00      	cmp	r2, #0
 801fdb4:	d0fa      	beq.n	801fdac <__kernel_rem_pio2f+0x290>
 801fdb6:	a91a      	add	r1, sp, #104	; 0x68
 801fdb8:	eb0a 0208 	add.w	r2, sl, r8
 801fdbc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801fdc0:	f10a 0301 	add.w	r3, sl, #1
 801fdc4:	eb0a 0100 	add.w	r1, sl, r0
 801fdc8:	4299      	cmp	r1, r3
 801fdca:	da04      	bge.n	801fdd6 <__kernel_rem_pio2f+0x2ba>
 801fdcc:	468a      	mov	sl, r1
 801fdce:	e70e      	b.n	801fbee <__kernel_rem_pio2f+0xd2>
 801fdd0:	9b04      	ldr	r3, [sp, #16]
 801fdd2:	2001      	movs	r0, #1
 801fdd4:	e7eb      	b.n	801fdae <__kernel_rem_pio2f+0x292>
 801fdd6:	9803      	ldr	r0, [sp, #12]
 801fdd8:	f8dd c004 	ldr.w	ip, [sp, #4]
 801fddc:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801fde0:	9000      	str	r0, [sp, #0]
 801fde2:	ee07 0a90 	vmov	s15, r0
 801fde6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fdea:	2000      	movs	r0, #0
 801fdec:	ece2 7a01 	vstmia	r2!, {s15}
 801fdf0:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801fe2c <__kernel_rem_pio2f+0x310>
 801fdf4:	4696      	mov	lr, r2
 801fdf6:	4548      	cmp	r0, r9
 801fdf8:	dd06      	ble.n	801fe08 <__kernel_rem_pio2f+0x2ec>
 801fdfa:	a842      	add	r0, sp, #264	; 0x108
 801fdfc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801fe00:	edc0 7a00 	vstr	s15, [r0]
 801fe04:	3301      	adds	r3, #1
 801fe06:	e7df      	b.n	801fdc8 <__kernel_rem_pio2f+0x2ac>
 801fe08:	ecfc 6a01 	vldmia	ip!, {s13}
 801fe0c:	ed3e 7a01 	vldmdb	lr!, {s14}
 801fe10:	3001      	adds	r0, #1
 801fe12:	eee6 7a87 	vfma.f32	s15, s13, s14
 801fe16:	e7ee      	b.n	801fdf6 <__kernel_rem_pio2f+0x2da>
 801fe18:	3b01      	subs	r3, #1
 801fe1a:	e779      	b.n	801fd10 <__kernel_rem_pio2f+0x1f4>
 801fe1c:	08021984 	.word	0x08021984
 801fe20:	08021958 	.word	0x08021958
 801fe24:	43800000 	.word	0x43800000
 801fe28:	3b800000 	.word	0x3b800000
 801fe2c:	00000000 	.word	0x00000000
 801fe30:	9b02      	ldr	r3, [sp, #8]
 801fe32:	eeb0 0a48 	vmov.f32	s0, s16
 801fe36:	1b98      	subs	r0, r3, r6
 801fe38:	f7fa f9c2 	bl	801a1c0 <scalbnf>
 801fe3c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801fe24 <__kernel_rem_pio2f+0x308>
 801fe40:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801fe44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fe48:	db1b      	blt.n	801fe82 <__kernel_rem_pio2f+0x366>
 801fe4a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801fe28 <__kernel_rem_pio2f+0x30c>
 801fe4e:	ee60 7a27 	vmul.f32	s15, s0, s15
 801fe52:	aa06      	add	r2, sp, #24
 801fe54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801fe58:	a906      	add	r1, sp, #24
 801fe5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fe5e:	3408      	adds	r4, #8
 801fe60:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801fe64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801fe68:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801fe6c:	ee10 3a10 	vmov	r3, s0
 801fe70:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801fe74:	ee17 2a90 	vmov	r2, s15
 801fe78:	f10a 0301 	add.w	r3, sl, #1
 801fe7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801fe80:	e74c      	b.n	801fd1c <__kernel_rem_pio2f+0x200>
 801fe82:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801fe86:	aa06      	add	r2, sp, #24
 801fe88:	ee10 3a10 	vmov	r3, s0
 801fe8c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801fe90:	4653      	mov	r3, sl
 801fe92:	e743      	b.n	801fd1c <__kernel_rem_pio2f+0x200>
 801fe94:	aa42      	add	r2, sp, #264	; 0x108
 801fe96:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801fe9a:	aa06      	add	r2, sp, #24
 801fe9c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801fea0:	9201      	str	r2, [sp, #4]
 801fea2:	ee07 2a90 	vmov	s15, r2
 801fea6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801feaa:	3901      	subs	r1, #1
 801feac:	ee67 7a80 	vmul.f32	s15, s15, s0
 801feb0:	ee20 0a07 	vmul.f32	s0, s0, s14
 801feb4:	edc0 7a00 	vstr	s15, [r0]
 801feb8:	e73a      	b.n	801fd30 <__kernel_rem_pio2f+0x214>
 801feba:	ecf2 6a01 	vldmia	r2!, {s13}
 801febe:	ecb6 7a01 	vldmia	r6!, {s14}
 801fec2:	eee6 7a87 	vfma.f32	s15, s13, s14
 801fec6:	3101      	adds	r1, #1
 801fec8:	42b9      	cmp	r1, r7
 801feca:	dc01      	bgt.n	801fed0 <__kernel_rem_pio2f+0x3b4>
 801fecc:	428c      	cmp	r4, r1
 801fece:	daf4      	bge.n	801feba <__kernel_rem_pio2f+0x39e>
 801fed0:	aa56      	add	r2, sp, #344	; 0x158
 801fed2:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 801fed6:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801feda:	3801      	subs	r0, #1
 801fedc:	3401      	adds	r4, #1
 801fede:	e72c      	b.n	801fd3a <__kernel_rem_pio2f+0x21e>
 801fee0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801fee2:	2a02      	cmp	r2, #2
 801fee4:	dc0a      	bgt.n	801fefc <__kernel_rem_pio2f+0x3e0>
 801fee6:	2a00      	cmp	r2, #0
 801fee8:	dc61      	bgt.n	801ffae <__kernel_rem_pio2f+0x492>
 801feea:	d03c      	beq.n	801ff66 <__kernel_rem_pio2f+0x44a>
 801feec:	9b00      	ldr	r3, [sp, #0]
 801feee:	f003 0007 	and.w	r0, r3, #7
 801fef2:	b057      	add	sp, #348	; 0x15c
 801fef4:	ecbd 8b04 	vpop	{d8-d9}
 801fef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fefc:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801fefe:	2a03      	cmp	r2, #3
 801ff00:	d1f4      	bne.n	801feec <__kernel_rem_pio2f+0x3d0>
 801ff02:	aa2e      	add	r2, sp, #184	; 0xb8
 801ff04:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801ff08:	4608      	mov	r0, r1
 801ff0a:	461c      	mov	r4, r3
 801ff0c:	2c00      	cmp	r4, #0
 801ff0e:	f1a0 0004 	sub.w	r0, r0, #4
 801ff12:	dc59      	bgt.n	801ffc8 <__kernel_rem_pio2f+0x4ac>
 801ff14:	4618      	mov	r0, r3
 801ff16:	2801      	cmp	r0, #1
 801ff18:	f1a1 0104 	sub.w	r1, r1, #4
 801ff1c:	dc64      	bgt.n	801ffe8 <__kernel_rem_pio2f+0x4cc>
 801ff1e:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 801fe2c <__kernel_rem_pio2f+0x310>
 801ff22:	2b01      	cmp	r3, #1
 801ff24:	dc70      	bgt.n	8020008 <__kernel_rem_pio2f+0x4ec>
 801ff26:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 801ff2a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801ff2e:	f1bb 0f00 	cmp.w	fp, #0
 801ff32:	d172      	bne.n	802001a <__kernel_rem_pio2f+0x4fe>
 801ff34:	edc5 6a00 	vstr	s13, [r5]
 801ff38:	ed85 7a01 	vstr	s14, [r5, #4]
 801ff3c:	edc5 7a02 	vstr	s15, [r5, #8]
 801ff40:	e7d4      	b.n	801feec <__kernel_rem_pio2f+0x3d0>
 801ff42:	aa2e      	add	r2, sp, #184	; 0xb8
 801ff44:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801ff48:	ed91 7a00 	vldr	s14, [r1]
 801ff4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ff50:	3b01      	subs	r3, #1
 801ff52:	2b00      	cmp	r3, #0
 801ff54:	daf5      	bge.n	801ff42 <__kernel_rem_pio2f+0x426>
 801ff56:	f1bb 0f00 	cmp.w	fp, #0
 801ff5a:	d001      	beq.n	801ff60 <__kernel_rem_pio2f+0x444>
 801ff5c:	eef1 7a67 	vneg.f32	s15, s15
 801ff60:	edc5 7a00 	vstr	s15, [r5]
 801ff64:	e7c2      	b.n	801feec <__kernel_rem_pio2f+0x3d0>
 801ff66:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 801fe2c <__kernel_rem_pio2f+0x310>
 801ff6a:	e7f2      	b.n	801ff52 <__kernel_rem_pio2f+0x436>
 801ff6c:	aa2e      	add	r2, sp, #184	; 0xb8
 801ff6e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801ff72:	edd0 7a00 	vldr	s15, [r0]
 801ff76:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ff7a:	3901      	subs	r1, #1
 801ff7c:	2900      	cmp	r1, #0
 801ff7e:	daf5      	bge.n	801ff6c <__kernel_rem_pio2f+0x450>
 801ff80:	f1bb 0f00 	cmp.w	fp, #0
 801ff84:	d017      	beq.n	801ffb6 <__kernel_rem_pio2f+0x49a>
 801ff86:	eef1 7a47 	vneg.f32	s15, s14
 801ff8a:	edc5 7a00 	vstr	s15, [r5]
 801ff8e:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 801ff92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ff96:	a82f      	add	r0, sp, #188	; 0xbc
 801ff98:	2101      	movs	r1, #1
 801ff9a:	428b      	cmp	r3, r1
 801ff9c:	da0e      	bge.n	801ffbc <__kernel_rem_pio2f+0x4a0>
 801ff9e:	f1bb 0f00 	cmp.w	fp, #0
 801ffa2:	d001      	beq.n	801ffa8 <__kernel_rem_pio2f+0x48c>
 801ffa4:	eef1 7a67 	vneg.f32	s15, s15
 801ffa8:	edc5 7a01 	vstr	s15, [r5, #4]
 801ffac:	e79e      	b.n	801feec <__kernel_rem_pio2f+0x3d0>
 801ffae:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 801fe2c <__kernel_rem_pio2f+0x310>
 801ffb2:	4619      	mov	r1, r3
 801ffb4:	e7e2      	b.n	801ff7c <__kernel_rem_pio2f+0x460>
 801ffb6:	eef0 7a47 	vmov.f32	s15, s14
 801ffba:	e7e6      	b.n	801ff8a <__kernel_rem_pio2f+0x46e>
 801ffbc:	ecb0 7a01 	vldmia	r0!, {s14}
 801ffc0:	3101      	adds	r1, #1
 801ffc2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ffc6:	e7e8      	b.n	801ff9a <__kernel_rem_pio2f+0x47e>
 801ffc8:	edd0 7a00 	vldr	s15, [r0]
 801ffcc:	edd0 6a01 	vldr	s13, [r0, #4]
 801ffd0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801ffd4:	3c01      	subs	r4, #1
 801ffd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ffda:	ed80 7a00 	vstr	s14, [r0]
 801ffde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ffe2:	edc0 7a01 	vstr	s15, [r0, #4]
 801ffe6:	e791      	b.n	801ff0c <__kernel_rem_pio2f+0x3f0>
 801ffe8:	edd1 7a00 	vldr	s15, [r1]
 801ffec:	edd1 6a01 	vldr	s13, [r1, #4]
 801fff0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801fff4:	3801      	subs	r0, #1
 801fff6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801fffa:	ed81 7a00 	vstr	s14, [r1]
 801fffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8020002:	edc1 7a01 	vstr	s15, [r1, #4]
 8020006:	e786      	b.n	801ff16 <__kernel_rem_pio2f+0x3fa>
 8020008:	aa2e      	add	r2, sp, #184	; 0xb8
 802000a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 802000e:	ed91 7a00 	vldr	s14, [r1]
 8020012:	3b01      	subs	r3, #1
 8020014:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020018:	e783      	b.n	801ff22 <__kernel_rem_pio2f+0x406>
 802001a:	eef1 6a66 	vneg.f32	s13, s13
 802001e:	eeb1 7a47 	vneg.f32	s14, s14
 8020022:	edc5 6a00 	vstr	s13, [r5]
 8020026:	ed85 7a01 	vstr	s14, [r5, #4]
 802002a:	eef1 7a67 	vneg.f32	s15, s15
 802002e:	e785      	b.n	801ff3c <__kernel_rem_pio2f+0x420>

08020030 <__kernel_sinf>:
 8020030:	ee10 3a10 	vmov	r3, s0
 8020034:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020038:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802003c:	da04      	bge.n	8020048 <__kernel_sinf+0x18>
 802003e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8020042:	ee17 3a90 	vmov	r3, s15
 8020046:	b35b      	cbz	r3, 80200a0 <__kernel_sinf+0x70>
 8020048:	ee20 7a00 	vmul.f32	s14, s0, s0
 802004c:	eddf 7a15 	vldr	s15, [pc, #84]	; 80200a4 <__kernel_sinf+0x74>
 8020050:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80200a8 <__kernel_sinf+0x78>
 8020054:	eea7 6a27 	vfma.f32	s12, s14, s15
 8020058:	eddf 7a14 	vldr	s15, [pc, #80]	; 80200ac <__kernel_sinf+0x7c>
 802005c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8020060:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80200b0 <__kernel_sinf+0x80>
 8020064:	eea7 6a87 	vfma.f32	s12, s15, s14
 8020068:	eddf 7a12 	vldr	s15, [pc, #72]	; 80200b4 <__kernel_sinf+0x84>
 802006c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8020070:	eee6 7a07 	vfma.f32	s15, s12, s14
 8020074:	b930      	cbnz	r0, 8020084 <__kernel_sinf+0x54>
 8020076:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80200b8 <__kernel_sinf+0x88>
 802007a:	eea7 6a27 	vfma.f32	s12, s14, s15
 802007e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8020082:	4770      	bx	lr
 8020084:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8020088:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 802008c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8020090:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8020094:	eddf 7a09 	vldr	s15, [pc, #36]	; 80200bc <__kernel_sinf+0x8c>
 8020098:	eee6 0aa7 	vfma.f32	s1, s13, s15
 802009c:	ee30 0a60 	vsub.f32	s0, s0, s1
 80200a0:	4770      	bx	lr
 80200a2:	bf00      	nop
 80200a4:	2f2ec9d3 	.word	0x2f2ec9d3
 80200a8:	b2d72f34 	.word	0xb2d72f34
 80200ac:	3638ef1b 	.word	0x3638ef1b
 80200b0:	b9500d01 	.word	0xb9500d01
 80200b4:	3c088889 	.word	0x3c088889
 80200b8:	be2aaaab 	.word	0xbe2aaaab
 80200bc:	3e2aaaab 	.word	0x3e2aaaab

080200c0 <finite>:
 80200c0:	b082      	sub	sp, #8
 80200c2:	ed8d 0b00 	vstr	d0, [sp]
 80200c6:	9801      	ldr	r0, [sp, #4]
 80200c8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80200cc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80200d0:	0fc0      	lsrs	r0, r0, #31
 80200d2:	b002      	add	sp, #8
 80200d4:	4770      	bx	lr
	...

080200d8 <rint>:
 80200d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80200da:	ec51 0b10 	vmov	r0, r1, d0
 80200de:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80200e2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80200e6:	2e13      	cmp	r6, #19
 80200e8:	ee10 4a10 	vmov	r4, s0
 80200ec:	460b      	mov	r3, r1
 80200ee:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80200f2:	dc58      	bgt.n	80201a6 <rint+0xce>
 80200f4:	2e00      	cmp	r6, #0
 80200f6:	da2b      	bge.n	8020150 <rint+0x78>
 80200f8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80200fc:	4302      	orrs	r2, r0
 80200fe:	d023      	beq.n	8020148 <rint+0x70>
 8020100:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8020104:	4302      	orrs	r2, r0
 8020106:	4254      	negs	r4, r2
 8020108:	4314      	orrs	r4, r2
 802010a:	0c4b      	lsrs	r3, r1, #17
 802010c:	0b24      	lsrs	r4, r4, #12
 802010e:	045b      	lsls	r3, r3, #17
 8020110:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8020114:	ea44 0103 	orr.w	r1, r4, r3
 8020118:	4b32      	ldr	r3, [pc, #200]	; (80201e4 <rint+0x10c>)
 802011a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 802011e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8020122:	4602      	mov	r2, r0
 8020124:	460b      	mov	r3, r1
 8020126:	4630      	mov	r0, r6
 8020128:	4639      	mov	r1, r7
 802012a:	f7e0 f8af 	bl	800028c <__adddf3>
 802012e:	e9cd 0100 	strd	r0, r1, [sp]
 8020132:	463b      	mov	r3, r7
 8020134:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020138:	4632      	mov	r2, r6
 802013a:	f7e0 f8a5 	bl	8000288 <__aeabi_dsub>
 802013e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8020142:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8020146:	4639      	mov	r1, r7
 8020148:	ec41 0b10 	vmov	d0, r0, r1
 802014c:	b003      	add	sp, #12
 802014e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020150:	4a25      	ldr	r2, [pc, #148]	; (80201e8 <rint+0x110>)
 8020152:	4132      	asrs	r2, r6
 8020154:	ea01 0702 	and.w	r7, r1, r2
 8020158:	4307      	orrs	r7, r0
 802015a:	d0f5      	beq.n	8020148 <rint+0x70>
 802015c:	0851      	lsrs	r1, r2, #1
 802015e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8020162:	4314      	orrs	r4, r2
 8020164:	d00c      	beq.n	8020180 <rint+0xa8>
 8020166:	ea23 0201 	bic.w	r2, r3, r1
 802016a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 802016e:	2e13      	cmp	r6, #19
 8020170:	fa43 f606 	asr.w	r6, r3, r6
 8020174:	bf0c      	ite	eq
 8020176:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 802017a:	2400      	movne	r4, #0
 802017c:	ea42 0306 	orr.w	r3, r2, r6
 8020180:	4918      	ldr	r1, [pc, #96]	; (80201e4 <rint+0x10c>)
 8020182:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8020186:	4622      	mov	r2, r4
 8020188:	e9d5 4500 	ldrd	r4, r5, [r5]
 802018c:	4620      	mov	r0, r4
 802018e:	4629      	mov	r1, r5
 8020190:	f7e0 f87c 	bl	800028c <__adddf3>
 8020194:	e9cd 0100 	strd	r0, r1, [sp]
 8020198:	e9dd 0100 	ldrd	r0, r1, [sp]
 802019c:	4622      	mov	r2, r4
 802019e:	462b      	mov	r3, r5
 80201a0:	f7e0 f872 	bl	8000288 <__aeabi_dsub>
 80201a4:	e7d0      	b.n	8020148 <rint+0x70>
 80201a6:	2e33      	cmp	r6, #51	; 0x33
 80201a8:	dd07      	ble.n	80201ba <rint+0xe2>
 80201aa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80201ae:	d1cb      	bne.n	8020148 <rint+0x70>
 80201b0:	ee10 2a10 	vmov	r2, s0
 80201b4:	f7e0 f86a 	bl	800028c <__adddf3>
 80201b8:	e7c6      	b.n	8020148 <rint+0x70>
 80201ba:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80201be:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80201c2:	40d6      	lsrs	r6, r2
 80201c4:	4230      	tst	r0, r6
 80201c6:	d0bf      	beq.n	8020148 <rint+0x70>
 80201c8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80201cc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80201d0:	bf1f      	itttt	ne
 80201d2:	ea24 0101 	bicne.w	r1, r4, r1
 80201d6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80201da:	fa44 f202 	asrne.w	r2, r4, r2
 80201de:	ea41 0402 	orrne.w	r4, r1, r2
 80201e2:	e7cd      	b.n	8020180 <rint+0xa8>
 80201e4:	08021990 	.word	0x08021990
 80201e8:	000fffff 	.word	0x000fffff
 80201ec:	00000000 	.word	0x00000000

080201f0 <scalbn>:
 80201f0:	b570      	push	{r4, r5, r6, lr}
 80201f2:	ec55 4b10 	vmov	r4, r5, d0
 80201f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80201fa:	4606      	mov	r6, r0
 80201fc:	462b      	mov	r3, r5
 80201fe:	b99a      	cbnz	r2, 8020228 <scalbn+0x38>
 8020200:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8020204:	4323      	orrs	r3, r4
 8020206:	d036      	beq.n	8020276 <scalbn+0x86>
 8020208:	4b39      	ldr	r3, [pc, #228]	; (80202f0 <scalbn+0x100>)
 802020a:	4629      	mov	r1, r5
 802020c:	ee10 0a10 	vmov	r0, s0
 8020210:	2200      	movs	r2, #0
 8020212:	f7e0 f9f1 	bl	80005f8 <__aeabi_dmul>
 8020216:	4b37      	ldr	r3, [pc, #220]	; (80202f4 <scalbn+0x104>)
 8020218:	429e      	cmp	r6, r3
 802021a:	4604      	mov	r4, r0
 802021c:	460d      	mov	r5, r1
 802021e:	da10      	bge.n	8020242 <scalbn+0x52>
 8020220:	a32b      	add	r3, pc, #172	; (adr r3, 80202d0 <scalbn+0xe0>)
 8020222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020226:	e03a      	b.n	802029e <scalbn+0xae>
 8020228:	f240 71ff 	movw	r1, #2047	; 0x7ff
 802022c:	428a      	cmp	r2, r1
 802022e:	d10c      	bne.n	802024a <scalbn+0x5a>
 8020230:	ee10 2a10 	vmov	r2, s0
 8020234:	4620      	mov	r0, r4
 8020236:	4629      	mov	r1, r5
 8020238:	f7e0 f828 	bl	800028c <__adddf3>
 802023c:	4604      	mov	r4, r0
 802023e:	460d      	mov	r5, r1
 8020240:	e019      	b.n	8020276 <scalbn+0x86>
 8020242:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8020246:	460b      	mov	r3, r1
 8020248:	3a36      	subs	r2, #54	; 0x36
 802024a:	4432      	add	r2, r6
 802024c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8020250:	428a      	cmp	r2, r1
 8020252:	dd08      	ble.n	8020266 <scalbn+0x76>
 8020254:	2d00      	cmp	r5, #0
 8020256:	a120      	add	r1, pc, #128	; (adr r1, 80202d8 <scalbn+0xe8>)
 8020258:	e9d1 0100 	ldrd	r0, r1, [r1]
 802025c:	da1c      	bge.n	8020298 <scalbn+0xa8>
 802025e:	a120      	add	r1, pc, #128	; (adr r1, 80202e0 <scalbn+0xf0>)
 8020260:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020264:	e018      	b.n	8020298 <scalbn+0xa8>
 8020266:	2a00      	cmp	r2, #0
 8020268:	dd08      	ble.n	802027c <scalbn+0x8c>
 802026a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802026e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8020272:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8020276:	ec45 4b10 	vmov	d0, r4, r5
 802027a:	bd70      	pop	{r4, r5, r6, pc}
 802027c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8020280:	da19      	bge.n	80202b6 <scalbn+0xc6>
 8020282:	f24c 3350 	movw	r3, #50000	; 0xc350
 8020286:	429e      	cmp	r6, r3
 8020288:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 802028c:	dd0a      	ble.n	80202a4 <scalbn+0xb4>
 802028e:	a112      	add	r1, pc, #72	; (adr r1, 80202d8 <scalbn+0xe8>)
 8020290:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020294:	2b00      	cmp	r3, #0
 8020296:	d1e2      	bne.n	802025e <scalbn+0x6e>
 8020298:	a30f      	add	r3, pc, #60	; (adr r3, 80202d8 <scalbn+0xe8>)
 802029a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802029e:	f7e0 f9ab 	bl	80005f8 <__aeabi_dmul>
 80202a2:	e7cb      	b.n	802023c <scalbn+0x4c>
 80202a4:	a10a      	add	r1, pc, #40	; (adr r1, 80202d0 <scalbn+0xe0>)
 80202a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80202aa:	2b00      	cmp	r3, #0
 80202ac:	d0b8      	beq.n	8020220 <scalbn+0x30>
 80202ae:	a10e      	add	r1, pc, #56	; (adr r1, 80202e8 <scalbn+0xf8>)
 80202b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80202b4:	e7b4      	b.n	8020220 <scalbn+0x30>
 80202b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80202ba:	3236      	adds	r2, #54	; 0x36
 80202bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80202c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80202c4:	4620      	mov	r0, r4
 80202c6:	4b0c      	ldr	r3, [pc, #48]	; (80202f8 <scalbn+0x108>)
 80202c8:	2200      	movs	r2, #0
 80202ca:	e7e8      	b.n	802029e <scalbn+0xae>
 80202cc:	f3af 8000 	nop.w
 80202d0:	c2f8f359 	.word	0xc2f8f359
 80202d4:	01a56e1f 	.word	0x01a56e1f
 80202d8:	8800759c 	.word	0x8800759c
 80202dc:	7e37e43c 	.word	0x7e37e43c
 80202e0:	8800759c 	.word	0x8800759c
 80202e4:	fe37e43c 	.word	0xfe37e43c
 80202e8:	c2f8f359 	.word	0xc2f8f359
 80202ec:	81a56e1f 	.word	0x81a56e1f
 80202f0:	43500000 	.word	0x43500000
 80202f4:	ffff3cb0 	.word	0xffff3cb0
 80202f8:	3c900000 	.word	0x3c900000

080202fc <floorf>:
 80202fc:	ee10 3a10 	vmov	r3, s0
 8020300:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8020304:	3a7f      	subs	r2, #127	; 0x7f
 8020306:	2a16      	cmp	r2, #22
 8020308:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802030c:	dc2a      	bgt.n	8020364 <floorf+0x68>
 802030e:	2a00      	cmp	r2, #0
 8020310:	da11      	bge.n	8020336 <floorf+0x3a>
 8020312:	eddf 7a18 	vldr	s15, [pc, #96]	; 8020374 <floorf+0x78>
 8020316:	ee30 0a27 	vadd.f32	s0, s0, s15
 802031a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802031e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020322:	dd05      	ble.n	8020330 <floorf+0x34>
 8020324:	2b00      	cmp	r3, #0
 8020326:	da23      	bge.n	8020370 <floorf+0x74>
 8020328:	4a13      	ldr	r2, [pc, #76]	; (8020378 <floorf+0x7c>)
 802032a:	2900      	cmp	r1, #0
 802032c:	bf18      	it	ne
 802032e:	4613      	movne	r3, r2
 8020330:	ee00 3a10 	vmov	s0, r3
 8020334:	4770      	bx	lr
 8020336:	4911      	ldr	r1, [pc, #68]	; (802037c <floorf+0x80>)
 8020338:	4111      	asrs	r1, r2
 802033a:	420b      	tst	r3, r1
 802033c:	d0fa      	beq.n	8020334 <floorf+0x38>
 802033e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8020374 <floorf+0x78>
 8020342:	ee30 0a27 	vadd.f32	s0, s0, s15
 8020346:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802034a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802034e:	ddef      	ble.n	8020330 <floorf+0x34>
 8020350:	2b00      	cmp	r3, #0
 8020352:	bfbe      	ittt	lt
 8020354:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8020358:	fa40 f202 	asrlt.w	r2, r0, r2
 802035c:	189b      	addlt	r3, r3, r2
 802035e:	ea23 0301 	bic.w	r3, r3, r1
 8020362:	e7e5      	b.n	8020330 <floorf+0x34>
 8020364:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8020368:	d3e4      	bcc.n	8020334 <floorf+0x38>
 802036a:	ee30 0a00 	vadd.f32	s0, s0, s0
 802036e:	4770      	bx	lr
 8020370:	2300      	movs	r3, #0
 8020372:	e7dd      	b.n	8020330 <floorf+0x34>
 8020374:	7149f2ca 	.word	0x7149f2ca
 8020378:	bf800000 	.word	0xbf800000
 802037c:	007fffff 	.word	0x007fffff

08020380 <rintf>:
 8020380:	ee10 2a10 	vmov	r2, s0
 8020384:	b513      	push	{r0, r1, r4, lr}
 8020386:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802038a:	397f      	subs	r1, #127	; 0x7f
 802038c:	2916      	cmp	r1, #22
 802038e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8020392:	dc47      	bgt.n	8020424 <rintf+0xa4>
 8020394:	b32b      	cbz	r3, 80203e2 <rintf+0x62>
 8020396:	2900      	cmp	r1, #0
 8020398:	ee10 3a10 	vmov	r3, s0
 802039c:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 80203a0:	da21      	bge.n	80203e6 <rintf+0x66>
 80203a2:	f3c2 0316 	ubfx	r3, r2, #0, #23
 80203a6:	425b      	negs	r3, r3
 80203a8:	4921      	ldr	r1, [pc, #132]	; (8020430 <rintf+0xb0>)
 80203aa:	0a5b      	lsrs	r3, r3, #9
 80203ac:	0d12      	lsrs	r2, r2, #20
 80203ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80203b2:	0512      	lsls	r2, r2, #20
 80203b4:	4313      	orrs	r3, r2
 80203b6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80203ba:	ee07 3a90 	vmov	s15, r3
 80203be:	edd1 6a00 	vldr	s13, [r1]
 80203c2:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80203c6:	ed8d 7a01 	vstr	s14, [sp, #4]
 80203ca:	eddd 7a01 	vldr	s15, [sp, #4]
 80203ce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80203d2:	ee17 3a90 	vmov	r3, s15
 80203d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80203da:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 80203de:	ee00 3a10 	vmov	s0, r3
 80203e2:	b002      	add	sp, #8
 80203e4:	bd10      	pop	{r4, pc}
 80203e6:	4a13      	ldr	r2, [pc, #76]	; (8020434 <rintf+0xb4>)
 80203e8:	410a      	asrs	r2, r1
 80203ea:	4213      	tst	r3, r2
 80203ec:	d0f9      	beq.n	80203e2 <rintf+0x62>
 80203ee:	0854      	lsrs	r4, r2, #1
 80203f0:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 80203f4:	d006      	beq.n	8020404 <rintf+0x84>
 80203f6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80203fa:	ea23 0304 	bic.w	r3, r3, r4
 80203fe:	fa42 f101 	asr.w	r1, r2, r1
 8020402:	430b      	orrs	r3, r1
 8020404:	4a0a      	ldr	r2, [pc, #40]	; (8020430 <rintf+0xb0>)
 8020406:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 802040a:	ed90 7a00 	vldr	s14, [r0]
 802040e:	ee07 3a90 	vmov	s15, r3
 8020412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020416:	edcd 7a01 	vstr	s15, [sp, #4]
 802041a:	ed9d 0a01 	vldr	s0, [sp, #4]
 802041e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8020422:	e7de      	b.n	80203e2 <rintf+0x62>
 8020424:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8020428:	d3db      	bcc.n	80203e2 <rintf+0x62>
 802042a:	ee30 0a00 	vadd.f32	s0, s0, s0
 802042e:	e7d8      	b.n	80203e2 <rintf+0x62>
 8020430:	080219a0 	.word	0x080219a0
 8020434:	007fffff 	.word	0x007fffff

08020438 <_init>:
 8020438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802043a:	bf00      	nop
 802043c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802043e:	bc08      	pop	{r3}
 8020440:	469e      	mov	lr, r3
 8020442:	4770      	bx	lr

08020444 <_fini>:
 8020444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020446:	bf00      	nop
 8020448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802044a:	bc08      	pop	{r3}
 802044c:	469e      	mov	lr, r3
 802044e:	4770      	bx	lr
