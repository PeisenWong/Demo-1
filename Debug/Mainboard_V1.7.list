
Mainboard_V1.7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a488  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001564  0801a618  0801a618  0002a618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bb7c  0801bb7c  00030418  2**0
                  CONTENTS
  4 .ARM          00000008  0801bb7c  0801bb7c  0002bb7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bb84  0801bb84  00030418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bb84  0801bb84  0002bb84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bb88  0801bb88  0002bb88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000418  20000000  0801bb8c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008b08  20000418  0801bfa4  00030418  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008f20  0801bfa4  00038f20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030418  2**0
                  CONTENTS, READONLY
 12 .debug_info   00072791  00000000  00000000  00030448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008de1  00000000  00000000  000a2bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025b0  00000000  00000000  000ab9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002300  00000000  00000000  000adf70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ec95  00000000  00000000  000b0270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00039380  00000000  00000000  000def05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e92f0  00000000  00000000  00118285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00201575  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b2a0  00000000  00000000  002015c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000418 	.word	0x20000418
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801a600 	.word	0x0801a600

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000041c 	.word	0x2000041c
 80001cc:	0801a600 	.word	0x0801a600

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <BDCInit>:
 * Function Return		: None
 * Function Example		: BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 * 						  BDCInit(&BDC2, &htim3, TIM_CHANNEL_1, GPIO, GPIOA, GPIO_Pin_9, GPIOA, GPIO_Pin_10);
 */

void BDCInit(BDC_t* bdc,TIM_HandleTypeDef* htimx,uint32_t Channel, BCDDIRPINType Dirpintype, ...){
 8000fec:	b408      	push	{r3}
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b089      	sub	sp, #36	; 0x24
 8000ff2:	af02      	add	r7, sp, #8
 8000ff4:	60f8      	str	r0, [r7, #12]
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]

	bdc->htim = htimx;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	68ba      	ldr	r2, [r7, #8]
 8000ffe:	61da      	str	r2, [r3, #28]
	bdc->Channel = Channel;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	621a      	str	r2, [r3, #32]
	bdc->Dirpintype =  Dirpintype;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800100c:	701a      	strb	r2, [r3, #0]

	va_list pinconfig;
	va_start(pinconfig, Dirpintype);
 800100e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001012:	617b      	str	r3, [r7, #20]

	if( bdc->Dirpintype == GPIO){
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d12e      	bne.n	800107a <BDCInit+0x8e>

		bdc->GPIOx_DIR1 = va_arg(pinconfig, GPIO_TypeDef*);
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	1d1a      	adds	r2, r3, #4
 8001020:	617a      	str	r2, [r7, #20]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	605a      	str	r2, [r3, #4]
		bdc->GPIO_Pin_DIR1	= va_arg(pinconfig, int);
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	1d1a      	adds	r2, r3, #4
 800102c:	617a      	str	r2, [r7, #20]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	b29a      	uxth	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	811a      	strh	r2, [r3, #8]
		bdc->GPIOx_DIR2 = va_arg(pinconfig, GPIO_TypeDef*);
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	1d1a      	adds	r2, r3, #4
 800103a:	617a      	str	r2, [r7, #20]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	60da      	str	r2, [r3, #12]
		bdc->GPIO_Pin_DIR2	= va_arg(pinconfig, int);
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	1d1a      	adds	r2, r3, #4
 8001046:	617a      	str	r2, [r7, #20]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	b29a      	uxth	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	821a      	strh	r2, [r3, #16]



		GPIOPinsInit(bdc->GPIOx_DIR1, bdc->GPIO_Pin_DIR1,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6858      	ldr	r0, [r3, #4]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	8919      	ldrh	r1, [r3, #8]
 8001058:	2301      	movs	r3, #1
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2302      	movs	r3, #2
 800105e:	2201      	movs	r2, #1
 8001060:	f000 f84e 	bl	8001100 <GPIOPinsInit>
		GPIOPinsInit(bdc->GPIOx_DIR2, bdc->GPIO_Pin_DIR2,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	68d8      	ldr	r0, [r3, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	8a19      	ldrh	r1, [r3, #16]
 800106c:	2301      	movs	r3, #1
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2302      	movs	r3, #2
 8001072:	2201      	movs	r2, #1
 8001074:	f000 f844 	bl	8001100 <GPIOPinsInit>
 8001078:	e017      	b.n	80010aa <BDCInit+0xbe>

	}else if(bdc->Dirpintype == SHIFTREG){
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d113      	bne.n	80010aa <BDCInit+0xbe>

		bdc->shiftreg = va_arg(pinconfig, byte_t *);
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	1d1a      	adds	r2, r3, #4
 8001086:	617a      	str	r2, [r7, #20]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	615a      	str	r2, [r3, #20]
		bdc->dir1 = va_arg(pinconfig, int);
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	1d1a      	adds	r2, r3, #4
 8001092:	617a      	str	r2, [r7, #20]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	b2da      	uxtb	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	761a      	strb	r2, [r3, #24]
		bdc->dir2 = va_arg(pinconfig, int);
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	1d1a      	adds	r2, r3, #4
 80010a0:	617a      	str	r2, [r7, #20]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	765a      	strb	r2, [r3, #25]
	}

	va_end(pinconfig);
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6a1b      	ldr	r3, [r3, #32]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d105      	bne.n	80010be <BDCInit+0xd2>
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2200      	movs	r2, #0
 80010ba:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010bc:	e018      	b.n	80010f0 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6a1b      	ldr	r3, [r3, #32]
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	d105      	bne.n	80010d2 <BDCInit+0xe6>
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	2300      	movs	r3, #0
 80010ce:	6393      	str	r3, [r2, #56]	; 0x38
}
 80010d0:	e00e      	b.n	80010f0 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	6a1b      	ldr	r3, [r3, #32]
 80010d6:	2b08      	cmp	r3, #8
 80010d8:	d105      	bne.n	80010e6 <BDCInit+0xfa>
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	2300      	movs	r3, #0
 80010e2:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80010e4:	e004      	b.n	80010f0 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	2300      	movs	r3, #0
 80010ee:	6413      	str	r3, [r2, #64]	; 0x40
}
 80010f0:	bf00      	nop
 80010f2:	371c      	adds	r7, #28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010fa:	b001      	add	sp, #4
 80010fc:	4770      	bx	lr
	...

08001100 <GPIOPinsInit>:
 * Function Return		: None
 * Function Example		: GPIOPinsInit(GPIOA, GPIO_Pin_2, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 */

void GPIOPinsInit (GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin,uint32_t Mode, uint32_t GPIO_Speed,  uint32_t GPIO_PuPd)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b092      	sub	sp, #72	; 0x48
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	460b      	mov	r3, r1
 800110e:	817b      	strh	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]

	switch((uint32_t)GPIOx){
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4a6a      	ldr	r2, [pc, #424]	; (80012cc <GPIOPinsInit+0x1cc>)
 8001124:	4293      	cmp	r3, r2
 8001126:	f000 80af 	beq.w	8001288 <GPIOPinsInit+0x188>
 800112a:	4a68      	ldr	r2, [pc, #416]	; (80012cc <GPIOPinsInit+0x1cc>)
 800112c:	4293      	cmp	r3, r2
 800112e:	f200 80ba 	bhi.w	80012a6 <GPIOPinsInit+0x1a6>
 8001132:	4a67      	ldr	r2, [pc, #412]	; (80012d0 <GPIOPinsInit+0x1d0>)
 8001134:	4293      	cmp	r3, r2
 8001136:	f000 8098 	beq.w	800126a <GPIOPinsInit+0x16a>
 800113a:	4a65      	ldr	r2, [pc, #404]	; (80012d0 <GPIOPinsInit+0x1d0>)
 800113c:	4293      	cmp	r3, r2
 800113e:	f200 80b2 	bhi.w	80012a6 <GPIOPinsInit+0x1a6>
 8001142:	4a64      	ldr	r2, [pc, #400]	; (80012d4 <GPIOPinsInit+0x1d4>)
 8001144:	4293      	cmp	r3, r2
 8001146:	f000 8081 	beq.w	800124c <GPIOPinsInit+0x14c>
 800114a:	4a62      	ldr	r2, [pc, #392]	; (80012d4 <GPIOPinsInit+0x1d4>)
 800114c:	4293      	cmp	r3, r2
 800114e:	f200 80aa 	bhi.w	80012a6 <GPIOPinsInit+0x1a6>
 8001152:	4a61      	ldr	r2, [pc, #388]	; (80012d8 <GPIOPinsInit+0x1d8>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d06a      	beq.n	800122e <GPIOPinsInit+0x12e>
 8001158:	4a5f      	ldr	r2, [pc, #380]	; (80012d8 <GPIOPinsInit+0x1d8>)
 800115a:	4293      	cmp	r3, r2
 800115c:	f200 80a3 	bhi.w	80012a6 <GPIOPinsInit+0x1a6>
 8001160:	4a5e      	ldr	r2, [pc, #376]	; (80012dc <GPIOPinsInit+0x1dc>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d054      	beq.n	8001210 <GPIOPinsInit+0x110>
 8001166:	4a5d      	ldr	r2, [pc, #372]	; (80012dc <GPIOPinsInit+0x1dc>)
 8001168:	4293      	cmp	r3, r2
 800116a:	f200 809c 	bhi.w	80012a6 <GPIOPinsInit+0x1a6>
 800116e:	4a5c      	ldr	r2, [pc, #368]	; (80012e0 <GPIOPinsInit+0x1e0>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d03e      	beq.n	80011f2 <GPIOPinsInit+0xf2>
 8001174:	4a5a      	ldr	r2, [pc, #360]	; (80012e0 <GPIOPinsInit+0x1e0>)
 8001176:	4293      	cmp	r3, r2
 8001178:	f200 8095 	bhi.w	80012a6 <GPIOPinsInit+0x1a6>
 800117c:	4a59      	ldr	r2, [pc, #356]	; (80012e4 <GPIOPinsInit+0x1e4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d028      	beq.n	80011d4 <GPIOPinsInit+0xd4>
 8001182:	4a58      	ldr	r2, [pc, #352]	; (80012e4 <GPIOPinsInit+0x1e4>)
 8001184:	4293      	cmp	r3, r2
 8001186:	f200 808e 	bhi.w	80012a6 <GPIOPinsInit+0x1a6>
 800118a:	4a57      	ldr	r2, [pc, #348]	; (80012e8 <GPIOPinsInit+0x1e8>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d003      	beq.n	8001198 <GPIOPinsInit+0x98>
 8001190:	4a56      	ldr	r2, [pc, #344]	; (80012ec <GPIOPinsInit+0x1ec>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d00f      	beq.n	80011b6 <GPIOPinsInit+0xb6>
	break;

	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
	break;

	default: break;
 8001196:	e086      	b.n	80012a6 <GPIOPinsInit+0x1a6>
	case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	2300      	movs	r3, #0
 800119a:	633b      	str	r3, [r7, #48]	; 0x30
 800119c:	4b54      	ldr	r3, [pc, #336]	; (80012f0 <GPIOPinsInit+0x1f0>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	4a53      	ldr	r2, [pc, #332]	; (80012f0 <GPIOPinsInit+0x1f0>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6313      	str	r3, [r2, #48]	; 0x30
 80011a8:	4b51      	ldr	r3, [pc, #324]	; (80012f0 <GPIOPinsInit+0x1f0>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	633b      	str	r3, [r7, #48]	; 0x30
 80011b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	break;
 80011b4:	e078      	b.n	80012a8 <GPIOPinsInit+0x1a8>
	case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011ba:	4b4d      	ldr	r3, [pc, #308]	; (80012f0 <GPIOPinsInit+0x1f0>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a4c      	ldr	r2, [pc, #304]	; (80012f0 <GPIOPinsInit+0x1f0>)
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b4a      	ldr	r3, [pc, #296]	; (80012f0 <GPIOPinsInit+0x1f0>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	break;
 80011d2:	e069      	b.n	80012a8 <GPIOPinsInit+0x1a8>
	case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 80011d4:	2300      	movs	r3, #0
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80011d8:	4b45      	ldr	r3, [pc, #276]	; (80012f0 <GPIOPinsInit+0x1f0>)
 80011da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011dc:	4a44      	ldr	r2, [pc, #272]	; (80012f0 <GPIOPinsInit+0x1f0>)
 80011de:	f043 0304 	orr.w	r3, r3, #4
 80011e2:	6313      	str	r3, [r2, #48]	; 0x30
 80011e4:	4b42      	ldr	r3, [pc, #264]	; (80012f0 <GPIOPinsInit+0x1f0>)
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	f003 0304 	and.w	r3, r3, #4
 80011ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80011ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
	break;
 80011f0:	e05a      	b.n	80012a8 <GPIOPinsInit+0x1a8>
	case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
 80011f6:	4b3e      	ldr	r3, [pc, #248]	; (80012f0 <GPIOPinsInit+0x1f0>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a3d      	ldr	r2, [pc, #244]	; (80012f0 <GPIOPinsInit+0x1f0>)
 80011fc:	f043 0308 	orr.w	r3, r3, #8
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b3b      	ldr	r3, [pc, #236]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
 800120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	break;
 800120e:	e04b      	b.n	80012a8 <GPIOPinsInit+0x1a8>
	case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001210:	2300      	movs	r3, #0
 8001212:	623b      	str	r3, [r7, #32]
 8001214:	4b36      	ldr	r3, [pc, #216]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001218:	4a35      	ldr	r2, [pc, #212]	; (80012f0 <GPIOPinsInit+0x1f0>)
 800121a:	f043 0310 	orr.w	r3, r3, #16
 800121e:	6313      	str	r3, [r2, #48]	; 0x30
 8001220:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001224:	f003 0310 	and.w	r3, r3, #16
 8001228:	623b      	str	r3, [r7, #32]
 800122a:	6a3b      	ldr	r3, [r7, #32]
	break;
 800122c:	e03c      	b.n	80012a8 <GPIOPinsInit+0x1a8>
	case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
 8001232:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a2e      	ldr	r2, [pc, #184]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001238:	f043 0320 	orr.w	r3, r3, #32
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b2c      	ldr	r3, [pc, #176]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0320 	and.w	r3, r3, #32
 8001246:	61fb      	str	r3, [r7, #28]
 8001248:	69fb      	ldr	r3, [r7, #28]
	break;
 800124a:	e02d      	b.n	80012a8 <GPIOPinsInit+0x1a8>
	case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	61bb      	str	r3, [r7, #24]
 8001250:	4b27      	ldr	r3, [pc, #156]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001254:	4a26      	ldr	r2, [pc, #152]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800125a:	6313      	str	r3, [r2, #48]	; 0x30
 800125c:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <GPIOPinsInit+0x1f0>)
 800125e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001264:	61bb      	str	r3, [r7, #24]
 8001266:	69bb      	ldr	r3, [r7, #24]
	break;
 8001268:	e01e      	b.n	80012a8 <GPIOPinsInit+0x1a8>
	case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a1f      	ldr	r2, [pc, #124]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <GPIOPinsInit+0x1f0>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697b      	ldr	r3, [r7, #20]
	break;
 8001286:	e00f      	b.n	80012a8 <GPIOPinsInit+0x1a8>
	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <GPIOPinsInit+0x1f0>)
 800128e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001290:	4a17      	ldr	r2, [pc, #92]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001296:	6313      	str	r3, [r2, #48]	; 0x30
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <GPIOPinsInit+0x1f0>)
 800129a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	693b      	ldr	r3, [r7, #16]
	break;
 80012a4:	e000      	b.n	80012a8 <GPIOPinsInit+0x1a8>
	default: break;
 80012a6:	bf00      	nop
	}


	GPIO_InitStruct.Pin = GPIO_Pin;
 80012a8:	897b      	ldrh	r3, [r7, #10]
 80012aa:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Mode = Mode;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PuPd;
 80012b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_Speed;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80012b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012bc:	4619      	mov	r1, r3
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f00b f83c 	bl	800c33c <HAL_GPIO_Init>

}
 80012c4:	bf00      	nop
 80012c6:	3748      	adds	r7, #72	; 0x48
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40022000 	.word	0x40022000
 80012d0:	40021c00 	.word	0x40021c00
 80012d4:	40021800 	.word	0x40021800
 80012d8:	40021400 	.word	0x40021400
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40020c00 	.word	0x40020c00
 80012e4:	40020800 	.word	0x40020800
 80012e8:	40020000 	.word	0x40020000
 80012ec:	40020400 	.word	0x40020400
 80012f0:	40023800 	.word	0x40023800

080012f4 <PWMTimeBaseInit>:
 * 						  Prescaler 	Prescaler value to divide TIM clock (1 to 65535)
 * Function Return		: None
 * Function Example		: PWMTimeBaseInit(&htim3, 20000, 84);
 */
void PWMTimeBaseInit(TIM_HandleTypeDef* htimx, uint32_t Period, uint32_t Prescaler)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	; 0x28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001300:	f107 0318 	add.w	r3, r7, #24
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]


	if(htimx == &htim1){
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4a52      	ldr	r2, [pc, #328]	; (8001464 <PWMTimeBaseInit+0x170>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d103      	bne.n	8001328 <PWMTimeBaseInit+0x34>
		htimx->Instance = TIM1;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4a51      	ldr	r2, [pc, #324]	; (8001468 <PWMTimeBaseInit+0x174>)
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	e057      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim2)	{
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4a50      	ldr	r2, [pc, #320]	; (800146c <PWMTimeBaseInit+0x178>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d104      	bne.n	800133a <PWMTimeBaseInit+0x46>
		htimx->Instance = TIM2;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	e04e      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim3)	{
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4a4c      	ldr	r2, [pc, #304]	; (8001470 <PWMTimeBaseInit+0x17c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d103      	bne.n	800134a <PWMTimeBaseInit+0x56>
		htimx->Instance = TIM3;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4a4b      	ldr	r2, [pc, #300]	; (8001474 <PWMTimeBaseInit+0x180>)
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	e046      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim4)	{
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4a4a      	ldr	r2, [pc, #296]	; (8001478 <PWMTimeBaseInit+0x184>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d103      	bne.n	800135a <PWMTimeBaseInit+0x66>
		htimx->Instance = TIM4;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4a49      	ldr	r2, [pc, #292]	; (800147c <PWMTimeBaseInit+0x188>)
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	e03e      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim5)	{
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4a48      	ldr	r2, [pc, #288]	; (8001480 <PWMTimeBaseInit+0x18c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d103      	bne.n	800136a <PWMTimeBaseInit+0x76>
		htimx->Instance = TIM5;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4a47      	ldr	r2, [pc, #284]	; (8001484 <PWMTimeBaseInit+0x190>)
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	e036      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim8)	{
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4a46      	ldr	r2, [pc, #280]	; (8001488 <PWMTimeBaseInit+0x194>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d103      	bne.n	800137a <PWMTimeBaseInit+0x86>
		htimx->Instance = TIM8;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4a45      	ldr	r2, [pc, #276]	; (800148c <PWMTimeBaseInit+0x198>)
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	e02e      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim9)	{
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4a44      	ldr	r2, [pc, #272]	; (8001490 <PWMTimeBaseInit+0x19c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d103      	bne.n	800138a <PWMTimeBaseInit+0x96>
		htimx->Instance = TIM9;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4a43      	ldr	r2, [pc, #268]	; (8001494 <PWMTimeBaseInit+0x1a0>)
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	e026      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim10)	{
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4a42      	ldr	r2, [pc, #264]	; (8001498 <PWMTimeBaseInit+0x1a4>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d103      	bne.n	800139a <PWMTimeBaseInit+0xa6>
		htimx->Instance = TIM10;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4a41      	ldr	r2, [pc, #260]	; (800149c <PWMTimeBaseInit+0x1a8>)
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	e01e      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim11)	{
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4a40      	ldr	r2, [pc, #256]	; (80014a0 <PWMTimeBaseInit+0x1ac>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d103      	bne.n	80013aa <PWMTimeBaseInit+0xb6>
		htimx->Instance = TIM11;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4a3f      	ldr	r2, [pc, #252]	; (80014a4 <PWMTimeBaseInit+0x1b0>)
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	e016      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim12)	{
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4a3e      	ldr	r2, [pc, #248]	; (80014a8 <PWMTimeBaseInit+0x1b4>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d103      	bne.n	80013ba <PWMTimeBaseInit+0xc6>
		htimx->Instance = TIM12;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4a3d      	ldr	r2, [pc, #244]	; (80014ac <PWMTimeBaseInit+0x1b8>)
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	e00e      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim13)	{
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4a3c      	ldr	r2, [pc, #240]	; (80014b0 <PWMTimeBaseInit+0x1bc>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d103      	bne.n	80013ca <PWMTimeBaseInit+0xd6>
		htimx->Instance = TIM13;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4a3b      	ldr	r2, [pc, #236]	; (80014b4 <PWMTimeBaseInit+0x1c0>)
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	e006      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
		}
	else if(htimx == &htim14)	{
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4a3a      	ldr	r2, [pc, #232]	; (80014b8 <PWMTimeBaseInit+0x1c4>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d102      	bne.n	80013d8 <PWMTimeBaseInit+0xe4>
		htimx->Instance = TIM14;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4a39      	ldr	r2, [pc, #228]	; (80014bc <PWMTimeBaseInit+0x1c8>)
 80013d6:	601a      	str	r2, [r3, #0]
		}

	htimx->Init.Prescaler = Prescaler - 1;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	1e5a      	subs	r2, r3, #1
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = Period - 1;
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	1e5a      	subs	r2, r3, #1
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2280      	movs	r2, #128	; 0x80
 80013f8:	619a      	str	r2, [r3, #24]
	 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f00e faa4 	bl	800f948 <HAL_TIM_Base_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <PWMTimeBaseInit+0x116>
	  {
	    Error_Handler();
 8001406:	f003 f825 	bl	8004454 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800140a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140e:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 8001410:	f107 0318 	add.w	r3, r7, #24
 8001414:	4619      	mov	r1, r3
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f00e fd40 	bl	800fe9c <HAL_TIM_ConfigClockSource>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <PWMTimeBaseInit+0x132>
	  {
	    Error_Handler();
 8001422:	f003 f817 	bl	8004454 <Error_Handler>
	  }
	if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f00e fb01 	bl	800fa2e <HAL_TIM_PWM_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <PWMTimeBaseInit+0x142>
		{
			Error_Handler();
 8001432:	f003 f80f 	bl	8004454 <Error_Handler>
		}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 800143e:	f107 0310 	add.w	r3, r7, #16
 8001442:	4619      	mov	r1, r3
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f00f f925 	bl	8010694 <HAL_TIMEx_MasterConfigSynchronization>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <PWMTimeBaseInit+0x160>
	{
		Error_Handler();
 8001450:	f003 f800 	bl	8004454 <Error_Handler>
	}


    HAL_TIM_Base_Start(htimx);
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f00e faa2 	bl	800f99e <HAL_TIM_Base_Start>

}
 800145a:	bf00      	nop
 800145c:	3728      	adds	r7, #40	; 0x28
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	2000666c 	.word	0x2000666c
 8001468:	40010000 	.word	0x40010000
 800146c:	20006770 	.word	0x20006770
 8001470:	20006420 	.word	0x20006420
 8001474:	40000400 	.word	0x40000400
 8001478:	2000625c 	.word	0x2000625c
 800147c:	40000800 	.word	0x40000800
 8001480:	200063e0 	.word	0x200063e0
 8001484:	40000c00 	.word	0x40000c00
 8001488:	2000621c 	.word	0x2000621c
 800148c:	40010400 	.word	0x40010400
 8001490:	200066ac 	.word	0x200066ac
 8001494:	40014000 	.word	0x40014000
 8001498:	2000633c 	.word	0x2000633c
 800149c:	40014400 	.word	0x40014400
 80014a0:	20006584 	.word	0x20006584
 80014a4:	40014800 	.word	0x40014800
 80014a8:	20006890 	.word	0x20006890
 80014ac:	40001800 	.word	0x40001800
 80014b0:	20006504 	.word	0x20006504
 80014b4:	40001c00 	.word	0x40001c00
 80014b8:	20006850 	.word	0x20006850
 80014bc:	40002000 	.word	0x40002000

080014c0 <PWMChannelConfig>:
 * 						  GPIO_Pin_x	GPIO_Pin_x of PWM pin(x = 0,1,2,...or 15)
 * Function Return		: None
 * Function Example		: PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 */

void PWMChannelConfig(TIM_HandleTypeDef* htimx, uint32_t Channel , GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_x){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b09a      	sub	sp, #104	; 0x68
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
 80014cc:	807b      	strh	r3, [r7, #2]

	TIM_OC_InitTypeDef sConfigOC = {0};
 80014ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]
 80014de:	615a      	str	r2, [r3, #20]
 80014e0:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]

	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80014f2:	2370      	movs	r3, #112	; 0x70
 80014f4:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.Pulse = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80014fa:	2302      	movs	r3, #2
 80014fc:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80014fe:	2308      	movs	r3, #8
 8001500:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	65fb      	str	r3, [r7, #92]	; 0x5c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	663b      	str	r3, [r7, #96]	; 0x60
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800150a:	2300      	movs	r3, #0
 800150c:	667b      	str	r3, [r7, #100]	; 0x64

	if (HAL_TIM_PWM_ConfigChannel(htimx, &sConfigOC, Channel) != HAL_OK)
 800150e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	4619      	mov	r1, r3
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f00e fbfa 	bl	800fd10 <HAL_TIM_PWM_ConfigChannel>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <PWMChannelConfig+0x66>
	{
		Error_Handler();
 8001522:	f002 ff97 	bl	8004454 <Error_Handler>
	}

	switch((uint32_t)GPIOx){
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a95      	ldr	r2, [pc, #596]	; (8001780 <PWMChannelConfig+0x2c0>)
 800152a:	4293      	cmp	r3, r2
 800152c:	f000 80af 	beq.w	800168e <PWMChannelConfig+0x1ce>
 8001530:	4a93      	ldr	r2, [pc, #588]	; (8001780 <PWMChannelConfig+0x2c0>)
 8001532:	4293      	cmp	r3, r2
 8001534:	f200 80ba 	bhi.w	80016ac <PWMChannelConfig+0x1ec>
 8001538:	4a92      	ldr	r2, [pc, #584]	; (8001784 <PWMChannelConfig+0x2c4>)
 800153a:	4293      	cmp	r3, r2
 800153c:	f000 8098 	beq.w	8001670 <PWMChannelConfig+0x1b0>
 8001540:	4a90      	ldr	r2, [pc, #576]	; (8001784 <PWMChannelConfig+0x2c4>)
 8001542:	4293      	cmp	r3, r2
 8001544:	f200 80b2 	bhi.w	80016ac <PWMChannelConfig+0x1ec>
 8001548:	4a8f      	ldr	r2, [pc, #572]	; (8001788 <PWMChannelConfig+0x2c8>)
 800154a:	4293      	cmp	r3, r2
 800154c:	f000 8081 	beq.w	8001652 <PWMChannelConfig+0x192>
 8001550:	4a8d      	ldr	r2, [pc, #564]	; (8001788 <PWMChannelConfig+0x2c8>)
 8001552:	4293      	cmp	r3, r2
 8001554:	f200 80aa 	bhi.w	80016ac <PWMChannelConfig+0x1ec>
 8001558:	4a8c      	ldr	r2, [pc, #560]	; (800178c <PWMChannelConfig+0x2cc>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d06a      	beq.n	8001634 <PWMChannelConfig+0x174>
 800155e:	4a8b      	ldr	r2, [pc, #556]	; (800178c <PWMChannelConfig+0x2cc>)
 8001560:	4293      	cmp	r3, r2
 8001562:	f200 80a3 	bhi.w	80016ac <PWMChannelConfig+0x1ec>
 8001566:	4a8a      	ldr	r2, [pc, #552]	; (8001790 <PWMChannelConfig+0x2d0>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d054      	beq.n	8001616 <PWMChannelConfig+0x156>
 800156c:	4a88      	ldr	r2, [pc, #544]	; (8001790 <PWMChannelConfig+0x2d0>)
 800156e:	4293      	cmp	r3, r2
 8001570:	f200 809c 	bhi.w	80016ac <PWMChannelConfig+0x1ec>
 8001574:	4a87      	ldr	r2, [pc, #540]	; (8001794 <PWMChannelConfig+0x2d4>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d03e      	beq.n	80015f8 <PWMChannelConfig+0x138>
 800157a:	4a86      	ldr	r2, [pc, #536]	; (8001794 <PWMChannelConfig+0x2d4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	f200 8095 	bhi.w	80016ac <PWMChannelConfig+0x1ec>
 8001582:	4a85      	ldr	r2, [pc, #532]	; (8001798 <PWMChannelConfig+0x2d8>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d028      	beq.n	80015da <PWMChannelConfig+0x11a>
 8001588:	4a83      	ldr	r2, [pc, #524]	; (8001798 <PWMChannelConfig+0x2d8>)
 800158a:	4293      	cmp	r3, r2
 800158c:	f200 808e 	bhi.w	80016ac <PWMChannelConfig+0x1ec>
 8001590:	4a82      	ldr	r2, [pc, #520]	; (800179c <PWMChannelConfig+0x2dc>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d003      	beq.n	800159e <PWMChannelConfig+0xde>
 8001596:	4a82      	ldr	r2, [pc, #520]	; (80017a0 <PWMChannelConfig+0x2e0>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d00f      	beq.n	80015bc <PWMChannelConfig+0xfc>
		break;

		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
		break;

		default: break;
 800159c:	e086      	b.n	80016ac <PWMChannelConfig+0x1ec>
		case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	637b      	str	r3, [r7, #52]	; 0x34
 80015a2:	4b80      	ldr	r3, [pc, #512]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a7f      	ldr	r2, [pc, #508]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b7d      	ldr	r3, [pc, #500]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	637b      	str	r3, [r7, #52]	; 0x34
 80015b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
		break;
 80015ba:	e078      	b.n	80016ae <PWMChannelConfig+0x1ee>
		case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 80015bc:	2300      	movs	r3, #0
 80015be:	633b      	str	r3, [r7, #48]	; 0x30
 80015c0:	4b78      	ldr	r3, [pc, #480]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80015c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c4:	4a77      	ldr	r2, [pc, #476]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80015c6:	f043 0302 	orr.w	r3, r3, #2
 80015ca:	6313      	str	r3, [r2, #48]	; 0x30
 80015cc:	4b75      	ldr	r3, [pc, #468]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80015ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	633b      	str	r3, [r7, #48]	; 0x30
 80015d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		break;
 80015d8:	e069      	b.n	80016ae <PWMChannelConfig+0x1ee>
		case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015de:	4b71      	ldr	r3, [pc, #452]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a70      	ldr	r2, [pc, #448]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80015e4:	f043 0304 	orr.w	r3, r3, #4
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b6e      	ldr	r3, [pc, #440]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		break;
 80015f6:	e05a      	b.n	80016ae <PWMChannelConfig+0x1ee>
		case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 80015f8:	2300      	movs	r3, #0
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80015fc:	4b69      	ldr	r3, [pc, #420]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80015fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001600:	4a68      	ldr	r2, [pc, #416]	; (80017a4 <PWMChannelConfig+0x2e4>)
 8001602:	f043 0308 	orr.w	r3, r3, #8
 8001606:	6313      	str	r3, [r2, #48]	; 0x30
 8001608:	4b66      	ldr	r3, [pc, #408]	; (80017a4 <PWMChannelConfig+0x2e4>)
 800160a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
 8001612:	6abb      	ldr	r3, [r7, #40]	; 0x28
		break;
 8001614:	e04b      	b.n	80016ae <PWMChannelConfig+0x1ee>
		case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
 800161a:	4b62      	ldr	r3, [pc, #392]	; (80017a4 <PWMChannelConfig+0x2e4>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a61      	ldr	r2, [pc, #388]	; (80017a4 <PWMChannelConfig+0x2e4>)
 8001620:	f043 0310 	orr.w	r3, r3, #16
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b5f      	ldr	r3, [pc, #380]	; (80017a4 <PWMChannelConfig+0x2e4>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0310 	and.w	r3, r3, #16
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		break;
 8001632:	e03c      	b.n	80016ae <PWMChannelConfig+0x1ee>
		case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
 8001638:	4b5a      	ldr	r3, [pc, #360]	; (80017a4 <PWMChannelConfig+0x2e4>)
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163c:	4a59      	ldr	r2, [pc, #356]	; (80017a4 <PWMChannelConfig+0x2e4>)
 800163e:	f043 0320 	orr.w	r3, r3, #32
 8001642:	6313      	str	r3, [r2, #48]	; 0x30
 8001644:	4b57      	ldr	r3, [pc, #348]	; (80017a4 <PWMChannelConfig+0x2e4>)
 8001646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001648:	f003 0320 	and.w	r3, r3, #32
 800164c:	623b      	str	r3, [r7, #32]
 800164e:	6a3b      	ldr	r3, [r7, #32]
		break;
 8001650:	e02d      	b.n	80016ae <PWMChannelConfig+0x1ee>
		case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
 8001656:	4b53      	ldr	r3, [pc, #332]	; (80017a4 <PWMChannelConfig+0x2e4>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a52      	ldr	r2, [pc, #328]	; (80017a4 <PWMChannelConfig+0x2e4>)
 800165c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b50      	ldr	r3, [pc, #320]	; (80017a4 <PWMChannelConfig+0x2e4>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800166a:	61fb      	str	r3, [r7, #28]
 800166c:	69fb      	ldr	r3, [r7, #28]
		break;
 800166e:	e01e      	b.n	80016ae <PWMChannelConfig+0x1ee>
		case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
 8001674:	4b4b      	ldr	r3, [pc, #300]	; (80017a4 <PWMChannelConfig+0x2e4>)
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	4a4a      	ldr	r2, [pc, #296]	; (80017a4 <PWMChannelConfig+0x2e4>)
 800167a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800167e:	6313      	str	r3, [r2, #48]	; 0x30
 8001680:	4b48      	ldr	r3, [pc, #288]	; (80017a4 <PWMChannelConfig+0x2e4>)
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001688:	61bb      	str	r3, [r7, #24]
 800168a:	69bb      	ldr	r3, [r7, #24]
		break;
 800168c:	e00f      	b.n	80016ae <PWMChannelConfig+0x1ee>
		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	4b44      	ldr	r3, [pc, #272]	; (80017a4 <PWMChannelConfig+0x2e4>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a43      	ldr	r2, [pc, #268]	; (80017a4 <PWMChannelConfig+0x2e4>)
 8001698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b41      	ldr	r3, [pc, #260]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	697b      	ldr	r3, [r7, #20]
		break;
 80016aa:	e000      	b.n	80016ae <PWMChannelConfig+0x1ee>
		default: break;
 80016ac:	bf00      	nop
		}

	    GPIO_InitStruct.Pin = GPIO_Pin_x;
 80016ae:	887b      	ldrh	r3, [r7, #2]
 80016b0:	63bb      	str	r3, [r7, #56]	; 0x38
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	643b      	str	r3, [r7, #64]	; 0x40
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ba:	2303      	movs	r3, #3
 80016bc:	647b      	str	r3, [r7, #68]	; 0x44
		if(htimx == &htim1){
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4a39      	ldr	r2, [pc, #228]	; (80017a8 <PWMChannelConfig+0x2e8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d102      	bne.n	80016cc <PWMChannelConfig+0x20c>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016c6:	2301      	movs	r3, #1
 80016c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80016ca:	e04b      	b.n	8001764 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim2)	{
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4a37      	ldr	r2, [pc, #220]	; (80017ac <PWMChannelConfig+0x2ec>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d102      	bne.n	80016da <PWMChannelConfig+0x21a>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM2 ;
 80016d4:	2301      	movs	r3, #1
 80016d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80016d8:	e044      	b.n	8001764 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim3)	{
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4a34      	ldr	r2, [pc, #208]	; (80017b0 <PWMChannelConfig+0x2f0>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d102      	bne.n	80016e8 <PWMChannelConfig+0x228>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016e2:	2302      	movs	r3, #2
 80016e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80016e6:	e03d      	b.n	8001764 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim4)	{
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4a32      	ldr	r2, [pc, #200]	; (80017b4 <PWMChannelConfig+0x2f4>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d102      	bne.n	80016f6 <PWMChannelConfig+0x236>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016f0:	2302      	movs	r3, #2
 80016f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80016f4:	e036      	b.n	8001764 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim5)	{
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4a2f      	ldr	r2, [pc, #188]	; (80017b8 <PWMChannelConfig+0x2f8>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d102      	bne.n	8001704 <PWMChannelConfig+0x244>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80016fe:	2302      	movs	r3, #2
 8001700:	64bb      	str	r3, [r7, #72]	; 0x48
 8001702:	e02f      	b.n	8001764 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim8)	{
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4a2d      	ldr	r2, [pc, #180]	; (80017bc <PWMChannelConfig+0x2fc>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d102      	bne.n	8001712 <PWMChannelConfig+0x252>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800170c:	2303      	movs	r3, #3
 800170e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001710:	e028      	b.n	8001764 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim9)	{
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4a2a      	ldr	r2, [pc, #168]	; (80017c0 <PWMChannelConfig+0x300>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d102      	bne.n	8001720 <PWMChannelConfig+0x260>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800171a:	2303      	movs	r3, #3
 800171c:	64bb      	str	r3, [r7, #72]	; 0x48
 800171e:	e021      	b.n	8001764 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim10)	{
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4a28      	ldr	r2, [pc, #160]	; (80017c4 <PWMChannelConfig+0x304>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d102      	bne.n	800172e <PWMChannelConfig+0x26e>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001728:	2303      	movs	r3, #3
 800172a:	64bb      	str	r3, [r7, #72]	; 0x48
 800172c:	e01a      	b.n	8001764 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim11)	{
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4a25      	ldr	r2, [pc, #148]	; (80017c8 <PWMChannelConfig+0x308>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d102      	bne.n	800173c <PWMChannelConfig+0x27c>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001736:	2303      	movs	r3, #3
 8001738:	64bb      	str	r3, [r7, #72]	; 0x48
 800173a:	e013      	b.n	8001764 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim12)	{
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4a23      	ldr	r2, [pc, #140]	; (80017cc <PWMChannelConfig+0x30c>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d102      	bne.n	800174a <PWMChannelConfig+0x28a>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001744:	2309      	movs	r3, #9
 8001746:	64bb      	str	r3, [r7, #72]	; 0x48
 8001748:	e00c      	b.n	8001764 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim13)	{
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	4a20      	ldr	r2, [pc, #128]	; (80017d0 <PWMChannelConfig+0x310>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d102      	bne.n	8001758 <PWMChannelConfig+0x298>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001752:	2309      	movs	r3, #9
 8001754:	64bb      	str	r3, [r7, #72]	; 0x48
 8001756:	e005      	b.n	8001764 <PWMChannelConfig+0x2a4>
			}
		else if(htimx == &htim14)	{
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4a1e      	ldr	r2, [pc, #120]	; (80017d4 <PWMChannelConfig+0x314>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d101      	bne.n	8001764 <PWMChannelConfig+0x2a4>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001760:	2309      	movs	r3, #9
 8001762:	64bb      	str	r3, [r7, #72]	; 0x48
			}

	    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001764:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001768:	4619      	mov	r1, r3
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f00a fde6 	bl	800c33c <HAL_GPIO_Init>


	    HAL_TIM_PWM_Start(htimx,Channel);
 8001770:	68b9      	ldr	r1, [r7, #8]
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f00e f986 	bl	800fa84 <HAL_TIM_PWM_Start>

}
 8001778:	bf00      	nop
 800177a:	3768      	adds	r7, #104	; 0x68
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40022000 	.word	0x40022000
 8001784:	40021c00 	.word	0x40021c00
 8001788:	40021800 	.word	0x40021800
 800178c:	40021400 	.word	0x40021400
 8001790:	40021000 	.word	0x40021000
 8001794:	40020c00 	.word	0x40020c00
 8001798:	40020800 	.word	0x40020800
 800179c:	40020000 	.word	0x40020000
 80017a0:	40020400 	.word	0x40020400
 80017a4:	40023800 	.word	0x40023800
 80017a8:	2000666c 	.word	0x2000666c
 80017ac:	20006770 	.word	0x20006770
 80017b0:	20006420 	.word	0x20006420
 80017b4:	2000625c 	.word	0x2000625c
 80017b8:	200063e0 	.word	0x200063e0
 80017bc:	2000621c 	.word	0x2000621c
 80017c0:	200066ac 	.word	0x200066ac
 80017c4:	2000633c 	.word	0x2000633c
 80017c8:	20006584 	.word	0x20006584
 80017cc:	20006890 	.word	0x20006890
 80017d0:	20006504 	.word	0x20006504
 80017d4:	20006850 	.word	0x20006850

080017d8 <SHIFTREGInit>:
 * Function Return		: None
 * Function Example		: SHIFTREGInit(&shiftreg, CASCADE_1, GPIOD, GPIO_Pin_0, GPIOD, GPIO_Pin_1, GPIOD, GPIO_Pin_2);
 */

void SHIFTREGInit (shiftreg_t* shiftreg, fSR cascade, GPIO_TypeDef *GPIOx_sck, uint16_t GPIO_Pin_sck,
		           GPIO_TypeDef *GPIOx_rck , uint16_t GPIO_Pin_rck,GPIO_TypeDef *GPIOx_si, uint16_t GPIO_Pin_si){
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af02      	add	r7, sp, #8
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	607a      	str	r2, [r7, #4]
 80017e2:	461a      	mov	r2, r3
 80017e4:	460b      	mov	r3, r1
 80017e6:	72fb      	strb	r3, [r7, #11]
 80017e8:	4613      	mov	r3, r2
 80017ea:	813b      	strh	r3, [r7, #8]

	shiftreg->flag = cascade;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	7afa      	ldrb	r2, [r7, #11]
 80017f0:	759a      	strb	r2, [r3, #22]

	shiftreg->GPIOx_sck = GPIOx_sck;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	601a      	str	r2, [r3, #0]
	shiftreg->GPIO_Pin_sck = GPIO_Pin_sck;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	893a      	ldrh	r2, [r7, #8]
 80017fc:	809a      	strh	r2, [r3, #4]

	shiftreg->GPIOx_rck = GPIOx_rck;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	609a      	str	r2, [r3, #8]
	shiftreg->GPIO_Pin_rck = GPIO_Pin_rck;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8bba      	ldrh	r2, [r7, #28]
 8001808:	819a      	strh	r2, [r3, #12]

	shiftreg->GPIOx_si = GPIOx_si;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6a3a      	ldr	r2, [r7, #32]
 800180e:	611a      	str	r2, [r3, #16]
	shiftreg->GPIO_Pin_si = GPIO_Pin_si;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001814:	829a      	strh	r2, [r3, #20]

	GPIOPinsInit(shiftreg->GPIOx_sck, shiftreg->GPIO_Pin_sck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6818      	ldr	r0, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8899      	ldrh	r1, [r3, #4]
 800181e:	2301      	movs	r3, #1
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	2302      	movs	r3, #2
 8001824:	2201      	movs	r2, #1
 8001826:	f7ff fc6b 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_rck, shiftreg->GPIO_Pin_rck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6898      	ldr	r0, [r3, #8]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	8999      	ldrh	r1, [r3, #12]
 8001832:	2301      	movs	r3, #1
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	2302      	movs	r3, #2
 8001838:	2201      	movs	r2, #1
 800183a:	f7ff fc61 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_si, shiftreg->GPIO_Pin_si , GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6918      	ldr	r0, [r3, #16]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	8a99      	ldrh	r1, [r3, #20]
 8001846:	2301      	movs	r3, #1
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	2302      	movs	r3, #2
 800184c:	2201      	movs	r2, #1
 800184e:	f7ff fc57 	bl	8001100 <GPIOPinsInit>

}
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <SHIFTREGShift>:
 * Function Arguments	: shiftreg			pointer to structure
 * Function Return		: None
 * Function Example		: SHIFTREGShift (&shiftreg);
 */

void SHIFTREGShift(shiftreg_t* shiftreg){
 800185a:	b580      	push	{r7, lr}
 800185c:	b084      	sub	sp, #16
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]

	uint8_t out, i, j;

	i = shiftreg->flag;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	7d9b      	ldrb	r3, [r3, #22]
 8001866:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6818      	ldr	r0, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	889b      	ldrh	r3, [r3, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	4619      	mov	r1, r3
 8001874:	f00a fffa 	bl	800c86c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6898      	ldr	r0, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	899b      	ldrh	r3, [r3, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	4619      	mov	r1, r3
 8001884:	f00a fff2 	bl	800c86c <HAL_GPIO_WritePin>

	do{
		out = shiftreg->cast[i].Byte;
 8001888:	7bba      	ldrb	r2, [r7, #14]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3206      	adds	r2, #6
 800188e:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8001892:	73fb      	strb	r3, [r7, #15]
		for (j = 8; j; j--){
 8001894:	2308      	movs	r3, #8
 8001896:	737b      	strb	r3, [r7, #13]
 8001898:	e02a      	b.n	80018f0 <SHIFTREGShift+0x96>
			(out & 0x80) ? HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_SET) : HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_RESET);
 800189a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	da08      	bge.n	80018b4 <SHIFTREGShift+0x5a>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6918      	ldr	r0, [r3, #16]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	8a9b      	ldrh	r3, [r3, #20]
 80018aa:	2201      	movs	r2, #1
 80018ac:	4619      	mov	r1, r3
 80018ae:	f00a ffdd 	bl	800c86c <HAL_GPIO_WritePin>
 80018b2:	e007      	b.n	80018c4 <SHIFTREGShift+0x6a>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6918      	ldr	r0, [r3, #16]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	8a9b      	ldrh	r3, [r3, #20]
 80018bc:	2200      	movs	r2, #0
 80018be:	4619      	mov	r1, r3
 80018c0:	f00a ffd4 	bl	800c86c <HAL_GPIO_WritePin>
			out <<= 1;
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_SET);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	889b      	ldrh	r3, [r3, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	4619      	mov	r1, r3
 80018d6:	f00a ffc9 	bl	800c86c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	889b      	ldrh	r3, [r3, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	4619      	mov	r1, r3
 80018e6:	f00a ffc1 	bl	800c86c <HAL_GPIO_WritePin>
		for (j = 8; j; j--){
 80018ea:	7b7b      	ldrb	r3, [r7, #13]
 80018ec:	3b01      	subs	r3, #1
 80018ee:	737b      	strb	r3, [r7, #13]
 80018f0:	7b7b      	ldrb	r3, [r7, #13]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1d1      	bne.n	800189a <SHIFTREGShift+0x40>
		}
	}while(i--);
 80018f6:	7bbb      	ldrb	r3, [r7, #14]
 80018f8:	1e5a      	subs	r2, r3, #1
 80018fa:	73ba      	strb	r2, [r7, #14]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1c3      	bne.n	8001888 <SHIFTREGShift+0x2e>

	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_SET);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6898      	ldr	r0, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	899b      	ldrh	r3, [r3, #12]
 8001908:	2201      	movs	r2, #1
 800190a:	4619      	mov	r1, r3
 800190c:	f00a ffae 	bl	800c86c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6898      	ldr	r0, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	899b      	ldrh	r3, [r3, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	4619      	mov	r1, r3
 800191c:	f00a ffa6 	bl	800c86c <HAL_GPIO_WritePin>

}
 8001920:	bf00      	nop
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_MspInit+0x54>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	4a11      	ldr	r2, [pc, #68]	; (800197c <HAL_MspInit+0x54>)
 8001938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193c:	6453      	str	r3, [r2, #68]	; 0x44
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <HAL_MspInit+0x54>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	603b      	str	r3, [r7, #0]
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_MspInit+0x54>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	4a0a      	ldr	r2, [pc, #40]	; (800197c <HAL_MspInit+0x54>)
 8001954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001958:	6413      	str	r3, [r2, #64]	; 0x40
 800195a:	4b08      	ldr	r3, [pc, #32]	; (800197c <HAL_MspInit+0x54>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	210f      	movs	r1, #15
 800196a:	f06f 0001 	mvn.w	r0, #1
 800196e:	f009 fdb1 	bl	800b4d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800

08001980 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08c      	sub	sp, #48	; 0x30
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 031c 	add.w	r3, r7, #28
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a42      	ldr	r2, [pc, #264]	; (8001aa8 <HAL_CAN_MspInit+0x128>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d135      	bne.n	8001a0e <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80019a2:	4b42      	ldr	r3, [pc, #264]	; (8001aac <HAL_CAN_MspInit+0x12c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	3301      	adds	r3, #1
 80019a8:	4a40      	ldr	r2, [pc, #256]	; (8001aac <HAL_CAN_MspInit+0x12c>)
 80019aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80019ac:	4b3f      	ldr	r3, [pc, #252]	; (8001aac <HAL_CAN_MspInit+0x12c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d10d      	bne.n	80019d0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80019b4:	2300      	movs	r3, #0
 80019b6:	61bb      	str	r3, [r7, #24]
 80019b8:	4b3d      	ldr	r3, [pc, #244]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	4a3c      	ldr	r2, [pc, #240]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 80019be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019c2:	6413      	str	r3, [r2, #64]	; 0x40
 80019c4:	4b3a      	ldr	r3, [pc, #232]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019cc:	61bb      	str	r3, [r7, #24]
 80019ce:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	4b36      	ldr	r3, [pc, #216]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	4a35      	ldr	r2, [pc, #212]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 80019da:	f043 0308 	orr.w	r3, r3, #8
 80019de:	6313      	str	r3, [r2, #48]	; 0x30
 80019e0:	4b33      	ldr	r3, [pc, #204]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	697b      	ldr	r3, [r7, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80019ec:	2303      	movs	r3, #3
 80019ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f8:	2303      	movs	r3, #3
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80019fc:	2309      	movs	r3, #9
 80019fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a00:	f107 031c 	add.w	r3, r7, #28
 8001a04:	4619      	mov	r1, r3
 8001a06:	482b      	ldr	r0, [pc, #172]	; (8001ab4 <HAL_CAN_MspInit+0x134>)
 8001a08:	f00a fc98 	bl	800c33c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001a0c:	e048      	b.n	8001aa0 <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a29      	ldr	r2, [pc, #164]	; (8001ab8 <HAL_CAN_MspInit+0x138>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d143      	bne.n	8001aa0 <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001a18:	2300      	movs	r3, #0
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	4a23      	ldr	r2, [pc, #140]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 8001a22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a26:	6413      	str	r3, [r2, #64]	; 0x40
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001a34:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <HAL_CAN_MspInit+0x12c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	4a1c      	ldr	r2, [pc, #112]	; (8001aac <HAL_CAN_MspInit+0x12c>)
 8001a3c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <HAL_CAN_MspInit+0x12c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d10d      	bne.n	8001a62 <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	4a18      	ldr	r2, [pc, #96]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 8001a50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a54:	6413      	str	r3, [r2, #64]	; 0x40
 8001a56:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a11      	ldr	r2, [pc, #68]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a7e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001a90:	2309      	movs	r3, #9
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a94:	f107 031c 	add.w	r3, r7, #28
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4808      	ldr	r0, [pc, #32]	; (8001abc <HAL_CAN_MspInit+0x13c>)
 8001a9c:	f00a fc4e 	bl	800c33c <HAL_GPIO_Init>
}
 8001aa0:	bf00      	nop
 8001aa2:	3730      	adds	r7, #48	; 0x30
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40006400 	.word	0x40006400
 8001aac:	20000434 	.word	0x20000434
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40020c00 	.word	0x40020c00
 8001ab8:	40006800 	.word	0x40006800
 8001abc:	40020400 	.word	0x40020400

08001ac0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08e      	sub	sp, #56	; 0x38
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a5c      	ldr	r2, [pc, #368]	; (8001c50 <HAL_I2C_MspInit+0x190>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d12d      	bne.n	8001b3e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	623b      	str	r3, [r7, #32]
 8001ae6:	4b5b      	ldr	r3, [pc, #364]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a5a      	ldr	r2, [pc, #360]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001aec:	f043 0302 	orr.w	r3, r3, #2
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b58      	ldr	r3, [pc, #352]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	623b      	str	r3, [r7, #32]
 8001afc:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001afe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b04:	2312      	movs	r3, #18
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b10:	2304      	movs	r3, #4
 8001b12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b18:	4619      	mov	r1, r3
 8001b1a:	484f      	ldr	r0, [pc, #316]	; (8001c58 <HAL_I2C_MspInit+0x198>)
 8001b1c:	f00a fc0e 	bl	800c33c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b20:	2300      	movs	r3, #0
 8001b22:	61fb      	str	r3, [r7, #28]
 8001b24:	4b4b      	ldr	r3, [pc, #300]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	4a4a      	ldr	r2, [pc, #296]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001b2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b30:	4b48      	ldr	r3, [pc, #288]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b38:	61fb      	str	r3, [r7, #28]
 8001b3a:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001b3c:	e083      	b.n	8001c46 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a46      	ldr	r2, [pc, #280]	; (8001c5c <HAL_I2C_MspInit+0x19c>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d12d      	bne.n	8001ba4 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61bb      	str	r3, [r7, #24]
 8001b4c:	4b41      	ldr	r3, [pc, #260]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b50:	4a40      	ldr	r2, [pc, #256]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001b52:	f043 0302 	orr.w	r3, r3, #2
 8001b56:	6313      	str	r3, [r2, #48]	; 0x30
 8001b58:	4b3e      	ldr	r3, [pc, #248]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	61bb      	str	r3, [r7, #24]
 8001b62:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b64:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b6a:	2312      	movs	r3, #18
 8001b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b72:	2303      	movs	r3, #3
 8001b74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b76:	2304      	movs	r3, #4
 8001b78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4835      	ldr	r0, [pc, #212]	; (8001c58 <HAL_I2C_MspInit+0x198>)
 8001b82:	f00a fbdb 	bl	800c33c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	4b32      	ldr	r3, [pc, #200]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	4a31      	ldr	r2, [pc, #196]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001b90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b94:	6413      	str	r3, [r2, #64]	; 0x40
 8001b96:	4b2f      	ldr	r3, [pc, #188]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	697b      	ldr	r3, [r7, #20]
}
 8001ba2:	e050      	b.n	8001c46 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a2d      	ldr	r2, [pc, #180]	; (8001c60 <HAL_I2C_MspInit+0x1a0>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d14b      	bne.n	8001c46 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	4b28      	ldr	r3, [pc, #160]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	4a27      	ldr	r2, [pc, #156]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001bb8:	f043 0304 	orr.w	r3, r3, #4
 8001bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbe:	4b25      	ldr	r3, [pc, #148]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a20      	ldr	r2, [pc, #128]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001be6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bec:	2312      	movs	r3, #18
 8001bee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c00:	4619      	mov	r1, r3
 8001c02:	4818      	ldr	r0, [pc, #96]	; (8001c64 <HAL_I2C_MspInit+0x1a4>)
 8001c04:	f00a fb9a 	bl	800c33c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c0e:	2312      	movs	r3, #18
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c12:	2301      	movs	r3, #1
 8001c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c16:	2303      	movs	r3, #3
 8001c18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c22:	4619      	mov	r1, r3
 8001c24:	4810      	ldr	r0, [pc, #64]	; (8001c68 <HAL_I2C_MspInit+0x1a8>)
 8001c26:	f00a fb89 	bl	800c33c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	4a08      	ldr	r2, [pc, #32]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001c34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c38:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	68bb      	ldr	r3, [r7, #8]
}
 8001c46:	bf00      	nop
 8001c48:	3738      	adds	r7, #56	; 0x38
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40005400 	.word	0x40005400
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020400 	.word	0x40020400
 8001c5c:	40005800 	.word	0x40005800
 8001c60:	40005c00 	.word	0x40005c00
 8001c64:	40020800 	.word	0x40020800
 8001c68:	40020000 	.word	0x40020000

08001c6c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a2a      	ldr	r2, [pc, #168]	; (8001d24 <HAL_I2C_MspDeInit+0xb8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d116      	bne.n	8001cac <HAL_I2C_MspDeInit+0x40>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001c7e:	4b2a      	ldr	r3, [pc, #168]	; (8001d28 <HAL_I2C_MspDeInit+0xbc>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	4a29      	ldr	r2, [pc, #164]	; (8001d28 <HAL_I2C_MspDeInit+0xbc>)
 8001c84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c88:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001c8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c8e:	4827      	ldr	r0, [pc, #156]	; (8001d2c <HAL_I2C_MspDeInit+0xc0>)
 8001c90:	f00a fcf0 	bl	800c674 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001c94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c98:	4824      	ldr	r0, [pc, #144]	; (8001d2c <HAL_I2C_MspDeInit+0xc0>)
 8001c9a:	f00a fceb 	bl	800c674 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8001c9e:	201f      	movs	r0, #31
 8001ca0:	f009 fc42 	bl	800b528 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8001ca4:	2020      	movs	r0, #32
 8001ca6:	f009 fc3f 	bl	800b528 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001caa:	e036      	b.n	8001d1a <HAL_I2C_MspDeInit+0xae>
  else if(hi2c->Instance==I2C2)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a1f      	ldr	r2, [pc, #124]	; (8001d30 <HAL_I2C_MspDeInit+0xc4>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d116      	bne.n	8001ce4 <HAL_I2C_MspDeInit+0x78>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001cb6:	4b1c      	ldr	r3, [pc, #112]	; (8001d28 <HAL_I2C_MspDeInit+0xbc>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	4a1b      	ldr	r2, [pc, #108]	; (8001d28 <HAL_I2C_MspDeInit+0xbc>)
 8001cbc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001cc0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001cc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cc6:	4819      	ldr	r0, [pc, #100]	; (8001d2c <HAL_I2C_MspDeInit+0xc0>)
 8001cc8:	f00a fcd4 	bl	800c674 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8001ccc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cd0:	4816      	ldr	r0, [pc, #88]	; (8001d2c <HAL_I2C_MspDeInit+0xc0>)
 8001cd2:	f00a fccf 	bl	800c674 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8001cd6:	2021      	movs	r0, #33	; 0x21
 8001cd8:	f009 fc26 	bl	800b528 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8001cdc:	2022      	movs	r0, #34	; 0x22
 8001cde:	f009 fc23 	bl	800b528 <HAL_NVIC_DisableIRQ>
}
 8001ce2:	e01a      	b.n	8001d1a <HAL_I2C_MspDeInit+0xae>
  else if(hi2c->Instance==I2C3)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a12      	ldr	r2, [pc, #72]	; (8001d34 <HAL_I2C_MspDeInit+0xc8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d115      	bne.n	8001d1a <HAL_I2C_MspDeInit+0xae>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001cee:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <HAL_I2C_MspDeInit+0xbc>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	4a0d      	ldr	r2, [pc, #52]	; (8001d28 <HAL_I2C_MspDeInit+0xbc>)
 8001cf4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001cf8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8001cfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cfe:	480e      	ldr	r0, [pc, #56]	; (8001d38 <HAL_I2C_MspDeInit+0xcc>)
 8001d00:	f00a fcb8 	bl	800c674 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8001d04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d08:	480c      	ldr	r0, [pc, #48]	; (8001d3c <HAL_I2C_MspDeInit+0xd0>)
 8001d0a:	f00a fcb3 	bl	800c674 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8001d0e:	2048      	movs	r0, #72	; 0x48
 8001d10:	f009 fc0a 	bl	800b528 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8001d14:	2049      	movs	r0, #73	; 0x49
 8001d16:	f009 fc07 	bl	800b528 <HAL_NVIC_DisableIRQ>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40005400 	.word	0x40005400
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40020400 	.word	0x40020400
 8001d30:	40005800 	.word	0x40005800
 8001d34:	40005c00 	.word	0x40005c00
 8001d38:	40020800 	.word	0x40020800
 8001d3c:	40020000 	.word	0x40020000

08001d40 <HAL_TIM_PWM_MspInit>:


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b091      	sub	sp, #68	; 0x44
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	if(htim_pwm->Instance==TIM1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a8d      	ldr	r2, [pc, #564]	; (8001f84 <HAL_TIM_PWM_MspInit+0x244>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d10e      	bne.n	8001d70 <HAL_TIM_PWM_MspInit+0x30>
		{
			/* Peripheral clock enable */
			__HAL_RCC_TIM1_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d56:	4b8c      	ldr	r3, [pc, #560]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	4a8b      	ldr	r2, [pc, #556]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6453      	str	r3, [r2, #68]	; 0x44
 8001d62:	4b89      	ldr	r3, [pc, #548]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	  {
	    /* Peripheral clock enable */
	    __HAL_RCC_TIM14_CLK_ENABLE();
	  }

}
 8001d6e:	e102      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d78:	d10e      	bne.n	8001d98 <HAL_TIM_PWM_MspInit+0x58>
			__HAL_RCC_TIM2_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d7e:	4b82      	ldr	r3, [pc, #520]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	4a81      	ldr	r2, [pc, #516]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8a:	4b7f      	ldr	r3, [pc, #508]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001d96:	e0ee      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM3)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a7b      	ldr	r2, [pc, #492]	; (8001f8c <HAL_TIM_PWM_MspInit+0x24c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d10e      	bne.n	8001dc0 <HAL_TIM_PWM_MspInit+0x80>
			__HAL_RCC_TIM3_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	637b      	str	r3, [r7, #52]	; 0x34
 8001da6:	4b78      	ldr	r3, [pc, #480]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	4a77      	ldr	r2, [pc, #476]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001dac:	f043 0302 	orr.w	r3, r3, #2
 8001db0:	6413      	str	r3, [r2, #64]	; 0x40
 8001db2:	4b75      	ldr	r3, [pc, #468]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	637b      	str	r3, [r7, #52]	; 0x34
 8001dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001dbe:	e0da      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM4)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a72      	ldr	r2, [pc, #456]	; (8001f90 <HAL_TIM_PWM_MspInit+0x250>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d10e      	bne.n	8001de8 <HAL_TIM_PWM_MspInit+0xa8>
			__HAL_RCC_TIM4_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	633b      	str	r3, [r7, #48]	; 0x30
 8001dce:	4b6e      	ldr	r3, [pc, #440]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	4a6d      	ldr	r2, [pc, #436]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001dd4:	f043 0304 	orr.w	r3, r3, #4
 8001dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dda:	4b6b      	ldr	r3, [pc, #428]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	633b      	str	r3, [r7, #48]	; 0x30
 8001de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001de6:	e0c6      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM5)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a69      	ldr	r2, [pc, #420]	; (8001f94 <HAL_TIM_PWM_MspInit+0x254>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d10e      	bne.n	8001e10 <HAL_TIM_PWM_MspInit+0xd0>
	    __HAL_RCC_TIM5_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001df6:	4b64      	ldr	r3, [pc, #400]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	4a63      	ldr	r2, [pc, #396]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001dfc:	f043 0308 	orr.w	r3, r3, #8
 8001e00:	6413      	str	r3, [r2, #64]	; 0x40
 8001e02:	4b61      	ldr	r3, [pc, #388]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001e0e:	e0b2      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM6)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a60      	ldr	r2, [pc, #384]	; (8001f98 <HAL_TIM_PWM_MspInit+0x258>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d10e      	bne.n	8001e38 <HAL_TIM_PWM_MspInit+0xf8>
	    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e1e:	4b5a      	ldr	r3, [pc, #360]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	4a59      	ldr	r2, [pc, #356]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e24:	f043 0310 	orr.w	r3, r3, #16
 8001e28:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2a:	4b57      	ldr	r3, [pc, #348]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f003 0310 	and.w	r3, r3, #16
 8001e32:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001e36:	e09e      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM7)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a57      	ldr	r2, [pc, #348]	; (8001f9c <HAL_TIM_PWM_MspInit+0x25c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d10e      	bne.n	8001e60 <HAL_TIM_PWM_MspInit+0x120>
	     __HAL_RCC_TIM7_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
 8001e46:	4b50      	ldr	r3, [pc, #320]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	4a4f      	ldr	r2, [pc, #316]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e4c:	f043 0320 	orr.w	r3, r3, #32
 8001e50:	6413      	str	r3, [r2, #64]	; 0x40
 8001e52:	4b4d      	ldr	r3, [pc, #308]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f003 0320 	and.w	r3, r3, #32
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001e5e:	e08a      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM8)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a4e      	ldr	r2, [pc, #312]	; (8001fa0 <HAL_TIM_PWM_MspInit+0x260>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d10e      	bne.n	8001e88 <HAL_TIM_PWM_MspInit+0x148>
	     __HAL_RCC_TIM8_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	623b      	str	r3, [r7, #32]
 8001e6e:	4b46      	ldr	r3, [pc, #280]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	4a45      	ldr	r2, [pc, #276]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e74:	f043 0302 	orr.w	r3, r3, #2
 8001e78:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7a:	4b43      	ldr	r3, [pc, #268]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	623b      	str	r3, [r7, #32]
 8001e84:	6a3b      	ldr	r3, [r7, #32]
}
 8001e86:	e076      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM9)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a45      	ldr	r2, [pc, #276]	; (8001fa4 <HAL_TIM_PWM_MspInit+0x264>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d10e      	bne.n	8001eb0 <HAL_TIM_PWM_MspInit+0x170>
	    __HAL_RCC_TIM9_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
 8001e96:	4b3c      	ldr	r3, [pc, #240]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	4a3b      	ldr	r2, [pc, #236]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea2:	4b39      	ldr	r3, [pc, #228]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eaa:	61fb      	str	r3, [r7, #28]
 8001eac:	69fb      	ldr	r3, [r7, #28]
}
 8001eae:	e062      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM10)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a3c      	ldr	r2, [pc, #240]	; (8001fa8 <HAL_TIM_PWM_MspInit+0x268>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d10e      	bne.n	8001ed8 <HAL_TIM_PWM_MspInit+0x198>
	    __HAL_RCC_TIM10_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61bb      	str	r3, [r7, #24]
 8001ebe:	4b32      	ldr	r3, [pc, #200]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec2:	4a31      	ldr	r2, [pc, #196]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eca:	4b2f      	ldr	r3, [pc, #188]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	61bb      	str	r3, [r7, #24]
 8001ed4:	69bb      	ldr	r3, [r7, #24]
}
 8001ed6:	e04e      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM11)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a33      	ldr	r2, [pc, #204]	; (8001fac <HAL_TIM_PWM_MspInit+0x26c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d10e      	bne.n	8001f00 <HAL_TIM_PWM_MspInit+0x1c0>
	    __HAL_RCC_TIM11_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	4b28      	ldr	r3, [pc, #160]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	4a27      	ldr	r2, [pc, #156]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef2:	4b25      	ldr	r3, [pc, #148]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	697b      	ldr	r3, [r7, #20]
}
 8001efe:	e03a      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM12)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a2a      	ldr	r2, [pc, #168]	; (8001fb0 <HAL_TIM_PWM_MspInit+0x270>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d10e      	bne.n	8001f28 <HAL_TIM_PWM_MspInit+0x1e8>
	    __HAL_RCC_TIM12_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	4b1e      	ldr	r3, [pc, #120]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	4a1d      	ldr	r2, [pc, #116]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f18:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1a:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	693b      	ldr	r3, [r7, #16]
}
 8001f26:	e026      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM13)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a21      	ldr	r2, [pc, #132]	; (8001fb4 <HAL_TIM_PWM_MspInit+0x274>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d10e      	bne.n	8001f50 <HAL_TIM_PWM_MspInit+0x210>
	    __HAL_RCC_TIM13_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	4a13      	ldr	r2, [pc, #76]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f40:	6413      	str	r3, [r2, #64]	; 0x40
 8001f42:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
}
 8001f4e:	e012      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM14)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a18      	ldr	r2, [pc, #96]	; (8001fb8 <HAL_TIM_PWM_MspInit+0x278>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d10d      	bne.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	    __HAL_RCC_TIM14_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	4a09      	ldr	r2, [pc, #36]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f68:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6a:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]
}
 8001f76:	bf00      	nop
 8001f78:	3744      	adds	r7, #68	; 0x44
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40010000 	.word	0x40010000
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40000400 	.word	0x40000400
 8001f90:	40000800 	.word	0x40000800
 8001f94:	40000c00 	.word	0x40000c00
 8001f98:	40001000 	.word	0x40001000
 8001f9c:	40001400 	.word	0x40001400
 8001fa0:	40010400 	.word	0x40010400
 8001fa4:	40014000 	.word	0x40014000
 8001fa8:	40014400 	.word	0x40014400
 8001fac:	40014800 	.word	0x40014800
 8001fb0:	40001800 	.word	0x40001800
 8001fb4:	40001c00 	.word	0x40001c00
 8001fb8:	40002000 	.word	0x40002000

08001fbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b091      	sub	sp, #68	; 0x44
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]

	if(htim_base->Instance==TIM1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a8d      	ldr	r2, [pc, #564]	; (8002200 <HAL_TIM_Base_MspInit+0x244>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d10e      	bne.n	8001fec <HAL_TIM_Base_MspInit+0x30>
	{
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fd2:	4b8c      	ldr	r3, [pc, #560]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	4a8b      	ldr	r2, [pc, #556]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fde:	4b89      	ldr	r3, [pc, #548]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  else if(htim_base->Instance==TIM14)
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
  }
}
 8001fea:	e102      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM2)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff4:	d10e      	bne.n	8002014 <HAL_TIM_Base_MspInit+0x58>
		__HAL_RCC_TIM2_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ffa:	4b82      	ldr	r3, [pc, #520]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	4a81      	ldr	r2, [pc, #516]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6413      	str	r3, [r2, #64]	; 0x40
 8002006:	4b7f      	ldr	r3, [pc, #508]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002012:	e0ee      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM3)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a7b      	ldr	r2, [pc, #492]	; (8002208 <HAL_TIM_Base_MspInit+0x24c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d10e      	bne.n	800203c <HAL_TIM_Base_MspInit+0x80>
		__HAL_RCC_TIM3_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	637b      	str	r3, [r7, #52]	; 0x34
 8002022:	4b78      	ldr	r3, [pc, #480]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	4a77      	ldr	r2, [pc, #476]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002028:	f043 0302 	orr.w	r3, r3, #2
 800202c:	6413      	str	r3, [r2, #64]	; 0x40
 800202e:	4b75      	ldr	r3, [pc, #468]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	637b      	str	r3, [r7, #52]	; 0x34
 8002038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800203a:	e0da      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM4)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a72      	ldr	r2, [pc, #456]	; (800220c <HAL_TIM_Base_MspInit+0x250>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d10e      	bne.n	8002064 <HAL_TIM_Base_MspInit+0xa8>
		__HAL_RCC_TIM4_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	633b      	str	r3, [r7, #48]	; 0x30
 800204a:	4b6e      	ldr	r3, [pc, #440]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	4a6d      	ldr	r2, [pc, #436]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002050:	f043 0304 	orr.w	r3, r3, #4
 8002054:	6413      	str	r3, [r2, #64]	; 0x40
 8002056:	4b6b      	ldr	r3, [pc, #428]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	633b      	str	r3, [r7, #48]	; 0x30
 8002060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002062:	e0c6      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM5)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a69      	ldr	r2, [pc, #420]	; (8002210 <HAL_TIM_Base_MspInit+0x254>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d10e      	bne.n	800208c <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002072:	4b64      	ldr	r3, [pc, #400]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	4a63      	ldr	r2, [pc, #396]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002078:	f043 0308 	orr.w	r3, r3, #8
 800207c:	6413      	str	r3, [r2, #64]	; 0x40
 800207e:	4b61      	ldr	r3, [pc, #388]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800208a:	e0b2      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM6)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a60      	ldr	r2, [pc, #384]	; (8002214 <HAL_TIM_Base_MspInit+0x258>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d10e      	bne.n	80020b4 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	62bb      	str	r3, [r7, #40]	; 0x28
 800209a:	4b5a      	ldr	r3, [pc, #360]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	4a59      	ldr	r2, [pc, #356]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80020a0:	f043 0310 	orr.w	r3, r3, #16
 80020a4:	6413      	str	r3, [r2, #64]	; 0x40
 80020a6:	4b57      	ldr	r3, [pc, #348]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80020b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80020b2:	e09e      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM7)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a57      	ldr	r2, [pc, #348]	; (8002218 <HAL_TIM_Base_MspInit+0x25c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d10e      	bne.n	80020dc <HAL_TIM_Base_MspInit+0x120>
     __HAL_RCC_TIM7_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
 80020c2:	4b50      	ldr	r3, [pc, #320]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	4a4f      	ldr	r2, [pc, #316]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80020c8:	f043 0320 	orr.w	r3, r3, #32
 80020cc:	6413      	str	r3, [r2, #64]	; 0x40
 80020ce:	4b4d      	ldr	r3, [pc, #308]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f003 0320 	and.w	r3, r3, #32
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80020da:	e08a      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM8)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a4e      	ldr	r2, [pc, #312]	; (800221c <HAL_TIM_Base_MspInit+0x260>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d10e      	bne.n	8002104 <HAL_TIM_Base_MspInit+0x148>
     __HAL_RCC_TIM8_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	623b      	str	r3, [r7, #32]
 80020ea:	4b46      	ldr	r3, [pc, #280]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	4a45      	ldr	r2, [pc, #276]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80020f0:	f043 0302 	orr.w	r3, r3, #2
 80020f4:	6453      	str	r3, [r2, #68]	; 0x44
 80020f6:	4b43      	ldr	r3, [pc, #268]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	623b      	str	r3, [r7, #32]
 8002100:	6a3b      	ldr	r3, [r7, #32]
}
 8002102:	e076      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM9)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a45      	ldr	r2, [pc, #276]	; (8002220 <HAL_TIM_Base_MspInit+0x264>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d10e      	bne.n	800212c <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
 8002112:	4b3c      	ldr	r3, [pc, #240]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	4a3b      	ldr	r2, [pc, #236]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211c:	6453      	str	r3, [r2, #68]	; 0x44
 800211e:	4b39      	ldr	r3, [pc, #228]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	69fb      	ldr	r3, [r7, #28]
}
 800212a:	e062      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM10)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a3c      	ldr	r2, [pc, #240]	; (8002224 <HAL_TIM_Base_MspInit+0x268>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d10e      	bne.n	8002154 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	61bb      	str	r3, [r7, #24]
 800213a:	4b32      	ldr	r3, [pc, #200]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	4a31      	ldr	r2, [pc, #196]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002144:	6453      	str	r3, [r2, #68]	; 0x44
 8002146:	4b2f      	ldr	r3, [pc, #188]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	69bb      	ldr	r3, [r7, #24]
}
 8002152:	e04e      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM11)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a33      	ldr	r2, [pc, #204]	; (8002228 <HAL_TIM_Base_MspInit+0x26c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d10e      	bne.n	800217c <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	4b28      	ldr	r3, [pc, #160]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	4a27      	ldr	r2, [pc, #156]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800216c:	6453      	str	r3, [r2, #68]	; 0x44
 800216e:	4b25      	ldr	r3, [pc, #148]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	697b      	ldr	r3, [r7, #20]
}
 800217a:	e03a      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM12)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a2a      	ldr	r2, [pc, #168]	; (800222c <HAL_TIM_Base_MspInit+0x270>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d10e      	bne.n	80021a4 <HAL_TIM_Base_MspInit+0x1e8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	4a1d      	ldr	r2, [pc, #116]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002194:	6413      	str	r3, [r2, #64]	; 0x40
 8002196:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	693b      	ldr	r3, [r7, #16]
}
 80021a2:	e026      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM13)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a21      	ldr	r2, [pc, #132]	; (8002230 <HAL_TIM_Base_MspInit+0x274>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d10e      	bne.n	80021cc <HAL_TIM_Base_MspInit+0x210>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	4b14      	ldr	r3, [pc, #80]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	4a13      	ldr	r2, [pc, #76]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80021b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021bc:	6413      	str	r3, [r2, #64]	; 0x40
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
}
 80021ca:	e012      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM14)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a18      	ldr	r2, [pc, #96]	; (8002234 <HAL_TIM_Base_MspInit+0x278>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d10d      	bne.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	4a09      	ldr	r2, [pc, #36]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80021e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e4:	6413      	str	r3, [r2, #64]	; 0x40
 80021e6:	4b07      	ldr	r3, [pc, #28]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
}
 80021f2:	bf00      	nop
 80021f4:	3744      	adds	r7, #68	; 0x44
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40010000 	.word	0x40010000
 8002204:	40023800 	.word	0x40023800
 8002208:	40000400 	.word	0x40000400
 800220c:	40000800 	.word	0x40000800
 8002210:	40000c00 	.word	0x40000c00
 8002214:	40001000 	.word	0x40001000
 8002218:	40001400 	.word	0x40001400
 800221c:	40010400 	.word	0x40010400
 8002220:	40014000 	.word	0x40014000
 8002224:	40014400 	.word	0x40014400
 8002228:	40014800 	.word	0x40014800
 800222c:	40001800 	.word	0x40001800
 8002230:	40001c00 	.word	0x40001c00
 8002234:	40002000 	.word	0x40002000

08002238 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b094      	sub	sp, #80	; 0x50
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]

  if(huart->Instance==USART1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a8c      	ldr	r2, [pc, #560]	; (8002488 <HAL_UART_MspInit+0x250>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d12d      	bne.n	80022b6 <HAL_UART_MspInit+0x7e>
    {
	  __HAL_RCC_USART1_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	63bb      	str	r3, [r7, #56]	; 0x38
 800225e:	4b8b      	ldr	r3, [pc, #556]	; (800248c <HAL_UART_MspInit+0x254>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	4a8a      	ldr	r2, [pc, #552]	; (800248c <HAL_UART_MspInit+0x254>)
 8002264:	f043 0310 	orr.w	r3, r3, #16
 8002268:	6453      	str	r3, [r2, #68]	; 0x44
 800226a:	4b88      	ldr	r3, [pc, #544]	; (800248c <HAL_UART_MspInit+0x254>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	f003 0310 	and.w	r3, r3, #16
 8002272:	63bb      	str	r3, [r7, #56]	; 0x38
 8002274:	6bbb      	ldr	r3, [r7, #56]	; 0x38

	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	637b      	str	r3, [r7, #52]	; 0x34
 800227a:	4b84      	ldr	r3, [pc, #528]	; (800248c <HAL_UART_MspInit+0x254>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	4a83      	ldr	r2, [pc, #524]	; (800248c <HAL_UART_MspInit+0x254>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6313      	str	r3, [r2, #48]	; 0x30
 8002286:	4b81      	ldr	r3, [pc, #516]	; (800248c <HAL_UART_MspInit+0x254>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	637b      	str	r3, [r7, #52]	; 0x34
 8002290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	  /**USART1 GPIO Configuration
	      PA9     ------> USART1_TX
	      PA10     ------> USART1_RX
	   */
	  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002292:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002296:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002298:	2302      	movs	r3, #2
 800229a:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a0:	2303      	movs	r3, #3
 80022a2:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022a4:	2307      	movs	r3, #7
 80022a6:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022ac:	4619      	mov	r1, r3
 80022ae:	4878      	ldr	r0, [pc, #480]	; (8002490 <HAL_UART_MspInit+0x258>)
 80022b0:	f00a f844 	bl	800c33c <HAL_GPIO_Init>
   /* USER CODE BEGIN USART6_MspInit 1 */

   /* USER CODE END USART6_MspInit 1 */
   }

}
 80022b4:	e12b      	b.n	800250e <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART2)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a76      	ldr	r2, [pc, #472]	; (8002494 <HAL_UART_MspInit+0x25c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d12c      	bne.n	800231a <HAL_UART_MspInit+0xe2>
      __HAL_RCC_USART2_CLK_ENABLE();
 80022c0:	2300      	movs	r3, #0
 80022c2:	633b      	str	r3, [r7, #48]	; 0x30
 80022c4:	4b71      	ldr	r3, [pc, #452]	; (800248c <HAL_UART_MspInit+0x254>)
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	4a70      	ldr	r2, [pc, #448]	; (800248c <HAL_UART_MspInit+0x254>)
 80022ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ce:	6413      	str	r3, [r2, #64]	; 0x40
 80022d0:	4b6e      	ldr	r3, [pc, #440]	; (800248c <HAL_UART_MspInit+0x254>)
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d8:	633b      	str	r3, [r7, #48]	; 0x30
 80022da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      __HAL_RCC_GPIOD_CLK_ENABLE();
 80022dc:	2300      	movs	r3, #0
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022e0:	4b6a      	ldr	r3, [pc, #424]	; (800248c <HAL_UART_MspInit+0x254>)
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	4a69      	ldr	r2, [pc, #420]	; (800248c <HAL_UART_MspInit+0x254>)
 80022e6:	f043 0308 	orr.w	r3, r3, #8
 80022ea:	6313      	str	r3, [r2, #48]	; 0x30
 80022ec:	4b67      	ldr	r3, [pc, #412]	; (800248c <HAL_UART_MspInit+0x254>)
 80022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80022f8:	2360      	movs	r3, #96	; 0x60
 80022fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002304:	2303      	movs	r3, #3
 8002306:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002308:	2307      	movs	r3, #7
 800230a:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800230c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002310:	4619      	mov	r1, r3
 8002312:	4861      	ldr	r0, [pc, #388]	; (8002498 <HAL_UART_MspInit+0x260>)
 8002314:	f00a f812 	bl	800c33c <HAL_GPIO_Init>
}
 8002318:	e0f9      	b.n	800250e <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART3)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a5f      	ldr	r2, [pc, #380]	; (800249c <HAL_UART_MspInit+0x264>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d12d      	bne.n	8002380 <HAL_UART_MspInit+0x148>
      __HAL_RCC_USART3_CLK_ENABLE();
 8002324:	2300      	movs	r3, #0
 8002326:	62bb      	str	r3, [r7, #40]	; 0x28
 8002328:	4b58      	ldr	r3, [pc, #352]	; (800248c <HAL_UART_MspInit+0x254>)
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	4a57      	ldr	r2, [pc, #348]	; (800248c <HAL_UART_MspInit+0x254>)
 800232e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002332:	6413      	str	r3, [r2, #64]	; 0x40
 8002334:	4b55      	ldr	r3, [pc, #340]	; (800248c <HAL_UART_MspInit+0x254>)
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800233c:	62bb      	str	r3, [r7, #40]	; 0x28
 800233e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8002340:	2300      	movs	r3, #0
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
 8002344:	4b51      	ldr	r3, [pc, #324]	; (800248c <HAL_UART_MspInit+0x254>)
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	4a50      	ldr	r2, [pc, #320]	; (800248c <HAL_UART_MspInit+0x254>)
 800234a:	f043 0308 	orr.w	r3, r3, #8
 800234e:	6313      	str	r3, [r2, #48]	; 0x30
 8002350:	4b4e      	ldr	r3, [pc, #312]	; (800248c <HAL_UART_MspInit+0x254>)
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800235c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002360:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236a:	2303      	movs	r3, #3
 800236c:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800236e:	2307      	movs	r3, #7
 8002370:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002372:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002376:	4619      	mov	r1, r3
 8002378:	4847      	ldr	r0, [pc, #284]	; (8002498 <HAL_UART_MspInit+0x260>)
 800237a:	f009 ffdf 	bl	800c33c <HAL_GPIO_Init>
}
 800237e:	e0c6      	b.n	800250e <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART4)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a46      	ldr	r2, [pc, #280]	; (80024a0 <HAL_UART_MspInit+0x268>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d12d      	bne.n	80023e6 <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_UART4_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	623b      	str	r3, [r7, #32]
 800238e:	4b3f      	ldr	r3, [pc, #252]	; (800248c <HAL_UART_MspInit+0x254>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	4a3e      	ldr	r2, [pc, #248]	; (800248c <HAL_UART_MspInit+0x254>)
 8002394:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002398:	6413      	str	r3, [r2, #64]	; 0x40
 800239a:	4b3c      	ldr	r3, [pc, #240]	; (800248c <HAL_UART_MspInit+0x254>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023a2:	623b      	str	r3, [r7, #32]
 80023a4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
 80023aa:	4b38      	ldr	r3, [pc, #224]	; (800248c <HAL_UART_MspInit+0x254>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4a37      	ldr	r2, [pc, #220]	; (800248c <HAL_UART_MspInit+0x254>)
 80023b0:	f043 0304 	orr.w	r3, r3, #4
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
 80023b6:	4b35      	ldr	r3, [pc, #212]	; (800248c <HAL_UART_MspInit+0x254>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	61fb      	str	r3, [r7, #28]
 80023c0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80023c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c8:	2302      	movs	r3, #2
 80023ca:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023cc:	2301      	movs	r3, #1
 80023ce:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d0:	2303      	movs	r3, #3
 80023d2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80023d4:	2308      	movs	r3, #8
 80023d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80023dc:	4619      	mov	r1, r3
 80023de:	4831      	ldr	r0, [pc, #196]	; (80024a4 <HAL_UART_MspInit+0x26c>)
 80023e0:	f009 ffac 	bl	800c33c <HAL_GPIO_Init>
}
 80023e4:	e093      	b.n	800250e <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART5)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a2f      	ldr	r2, [pc, #188]	; (80024a8 <HAL_UART_MspInit+0x270>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d15d      	bne.n	80024ac <HAL_UART_MspInit+0x274>
    __HAL_RCC_UART5_CLK_ENABLE();
 80023f0:	2300      	movs	r3, #0
 80023f2:	61bb      	str	r3, [r7, #24]
 80023f4:	4b25      	ldr	r3, [pc, #148]	; (800248c <HAL_UART_MspInit+0x254>)
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	4a24      	ldr	r2, [pc, #144]	; (800248c <HAL_UART_MspInit+0x254>)
 80023fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002400:	4b22      	ldr	r3, [pc, #136]	; (800248c <HAL_UART_MspInit+0x254>)
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002408:	61bb      	str	r3, [r7, #24]
 800240a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	4b1e      	ldr	r3, [pc, #120]	; (800248c <HAL_UART_MspInit+0x254>)
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	4a1d      	ldr	r2, [pc, #116]	; (800248c <HAL_UART_MspInit+0x254>)
 8002416:	f043 0304 	orr.w	r3, r3, #4
 800241a:	6313      	str	r3, [r2, #48]	; 0x30
 800241c:	4b1b      	ldr	r3, [pc, #108]	; (800248c <HAL_UART_MspInit+0x254>)
 800241e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002428:	2300      	movs	r3, #0
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	4b17      	ldr	r3, [pc, #92]	; (800248c <HAL_UART_MspInit+0x254>)
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	4a16      	ldr	r2, [pc, #88]	; (800248c <HAL_UART_MspInit+0x254>)
 8002432:	f043 0308 	orr.w	r3, r3, #8
 8002436:	6313      	str	r3, [r2, #48]	; 0x30
 8002438:	4b14      	ldr	r3, [pc, #80]	; (800248c <HAL_UART_MspInit+0x254>)
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002448:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244a:	2302      	movs	r3, #2
 800244c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800244e:	2301      	movs	r3, #1
 8002450:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002452:	2303      	movs	r3, #3
 8002454:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002456:	2308      	movs	r3, #8
 8002458:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800245a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800245e:	4619      	mov	r1, r3
 8002460:	4810      	ldr	r0, [pc, #64]	; (80024a4 <HAL_UART_MspInit+0x26c>)
 8002462:	f009 ff6b 	bl	800c33c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002466:	2304      	movs	r3, #4
 8002468:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246a:	2302      	movs	r3, #2
 800246c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800246e:	2301      	movs	r3, #1
 8002470:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002472:	2303      	movs	r3, #3
 8002474:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002476:	2308      	movs	r3, #8
 8002478:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800247a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800247e:	4619      	mov	r1, r3
 8002480:	4805      	ldr	r0, [pc, #20]	; (8002498 <HAL_UART_MspInit+0x260>)
 8002482:	f009 ff5b 	bl	800c33c <HAL_GPIO_Init>
}
 8002486:	e042      	b.n	800250e <HAL_UART_MspInit+0x2d6>
 8002488:	40011000 	.word	0x40011000
 800248c:	40023800 	.word	0x40023800
 8002490:	40020000 	.word	0x40020000
 8002494:	40004400 	.word	0x40004400
 8002498:	40020c00 	.word	0x40020c00
 800249c:	40004800 	.word	0x40004800
 80024a0:	40004c00 	.word	0x40004c00
 80024a4:	40020800 	.word	0x40020800
 80024a8:	40005000 	.word	0x40005000
  else if(huart->Instance==USART6)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a19      	ldr	r2, [pc, #100]	; (8002518 <HAL_UART_MspInit+0x2e0>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d12b      	bne.n	800250e <HAL_UART_MspInit+0x2d6>
     __HAL_RCC_USART6_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	4b18      	ldr	r3, [pc, #96]	; (800251c <HAL_UART_MspInit+0x2e4>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	4a17      	ldr	r2, [pc, #92]	; (800251c <HAL_UART_MspInit+0x2e4>)
 80024c0:	f043 0320 	orr.w	r3, r3, #32
 80024c4:	6453      	str	r3, [r2, #68]	; 0x44
 80024c6:	4b15      	ldr	r3, [pc, #84]	; (800251c <HAL_UART_MspInit+0x2e4>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	f003 0320 	and.w	r3, r3, #32
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]
     __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	4b11      	ldr	r3, [pc, #68]	; (800251c <HAL_UART_MspInit+0x2e4>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	4a10      	ldr	r2, [pc, #64]	; (800251c <HAL_UART_MspInit+0x2e4>)
 80024dc:	f043 0304 	orr.w	r3, r3, #4
 80024e0:	6313      	str	r3, [r2, #48]	; 0x30
 80024e2:	4b0e      	ldr	r3, [pc, #56]	; (800251c <HAL_UART_MspInit+0x2e4>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
     GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024ee:	23c0      	movs	r3, #192	; 0xc0
 80024f0:	63fb      	str	r3, [r7, #60]	; 0x3c
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f2:	2302      	movs	r3, #2
 80024f4:	643b      	str	r3, [r7, #64]	; 0x40
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	647b      	str	r3, [r7, #68]	; 0x44
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fa:	2303      	movs	r3, #3
 80024fc:	64bb      	str	r3, [r7, #72]	; 0x48
     GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80024fe:	2308      	movs	r3, #8
 8002500:	64fb      	str	r3, [r7, #76]	; 0x4c
     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002502:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002506:	4619      	mov	r1, r3
 8002508:	4805      	ldr	r0, [pc, #20]	; (8002520 <HAL_UART_MspInit+0x2e8>)
 800250a:	f009 ff17 	bl	800c33c <HAL_GPIO_Init>
}
 800250e:	bf00      	nop
 8002510:	3750      	adds	r7, #80	; 0x50
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40011400 	.word	0x40011400
 800251c:	40023800 	.word	0x40023800
 8002520:	40020800 	.word	0x40020800

08002524 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08e      	sub	sp, #56	; 0x38
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a6a      	ldr	r2, [pc, #424]	; (80026ec <HAL_SPI_MspInit+0x1c8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d13c      	bne.n	80025c0 <HAL_SPI_MspInit+0x9c>
  {

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	623b      	str	r3, [r7, #32]
 800254a:	4b69      	ldr	r3, [pc, #420]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	4a68      	ldr	r2, [pc, #416]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 8002550:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002554:	6453      	str	r3, [r2, #68]	; 0x44
 8002556:	4b66      	ldr	r3, [pc, #408]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800255e:	623b      	str	r3, [r7, #32]
 8002560:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	4b62      	ldr	r3, [pc, #392]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	4a61      	ldr	r2, [pc, #388]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	4b5f      	ldr	r3, [pc, #380]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	61fb      	str	r3, [r7, #28]
 800257c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800257e:	2320      	movs	r3, #32
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002582:	2302      	movs	r3, #2
 8002584:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002586:	2301      	movs	r3, #1
 8002588:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258a:	2303      	movs	r3, #3
 800258c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800258e:	2305      	movs	r3, #5
 8002590:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002596:	4619      	mov	r1, r3
 8002598:	4856      	ldr	r0, [pc, #344]	; (80026f4 <HAL_SPI_MspInit+0x1d0>)
 800259a:	f009 fecf 	bl	800c33c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800259e:	23c0      	movs	r3, #192	; 0xc0
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a2:	2302      	movs	r3, #2
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025a6:	2302      	movs	r3, #2
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025aa:	2303      	movs	r3, #3
 80025ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025ae:	2305      	movs	r3, #5
 80025b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b6:	4619      	mov	r1, r3
 80025b8:	484e      	ldr	r0, [pc, #312]	; (80026f4 <HAL_SPI_MspInit+0x1d0>)
 80025ba:	f009 febf 	bl	800c33c <HAL_GPIO_Init>
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);


  }

}
 80025be:	e090      	b.n	80026e2 <HAL_SPI_MspInit+0x1be>
  }else if (hspi->Instance==SPI2){
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a4c      	ldr	r2, [pc, #304]	; (80026f8 <HAL_SPI_MspInit+0x1d4>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d13e      	bne.n	8002648 <HAL_SPI_MspInit+0x124>
	  __HAL_RCC_SPI2_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	4b48      	ldr	r3, [pc, #288]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	4a47      	ldr	r2, [pc, #284]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 80025d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025d8:	6413      	str	r3, [r2, #64]	; 0x40
 80025da:	4b45      	ldr	r3, [pc, #276]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e2:	61bb      	str	r3, [r7, #24]
 80025e4:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	4b41      	ldr	r3, [pc, #260]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a40      	ldr	r2, [pc, #256]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 80025f0:	f043 0302 	orr.w	r3, r3, #2
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b3e      	ldr	r3, [pc, #248]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	697b      	ldr	r3, [r7, #20]
	  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002602:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002608:	2302      	movs	r3, #2
 800260a:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800260c:	2301      	movs	r3, #1
 800260e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002610:	2303      	movs	r3, #3
 8002612:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002614:	2305      	movs	r3, #5
 8002616:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800261c:	4619      	mov	r1, r3
 800261e:	4837      	ldr	r0, [pc, #220]	; (80026fc <HAL_SPI_MspInit+0x1d8>)
 8002620:	f009 fe8c 	bl	800c33c <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002624:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262a:	2302      	movs	r3, #2
 800262c:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800262e:	2302      	movs	r3, #2
 8002630:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002632:	2303      	movs	r3, #3
 8002634:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002636:	2305      	movs	r3, #5
 8002638:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800263e:	4619      	mov	r1, r3
 8002640:	482e      	ldr	r0, [pc, #184]	; (80026fc <HAL_SPI_MspInit+0x1d8>)
 8002642:	f009 fe7b 	bl	800c33c <HAL_GPIO_Init>
}
 8002646:	e04c      	b.n	80026e2 <HAL_SPI_MspInit+0x1be>
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002648:	2300      	movs	r3, #0
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	4b28      	ldr	r3, [pc, #160]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	4a27      	ldr	r2, [pc, #156]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 8002652:	f043 0302 	orr.w	r3, r3, #2
 8002656:	6313      	str	r3, [r2, #48]	; 0x30
 8002658:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	4b21      	ldr	r3, [pc, #132]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	4a20      	ldr	r2, [pc, #128]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 800266e:	f043 0304 	orr.w	r3, r3, #4
 8002672:	6313      	str	r3, [r2, #48]	; 0x30
 8002674:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002680:	2308      	movs	r3, #8
 8002682:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002684:	2302      	movs	r3, #2
 8002686:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002688:	2301      	movs	r3, #1
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268c:	2303      	movs	r3, #3
 800268e:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002690:	2306      	movs	r3, #6
 8002692:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002698:	4619      	mov	r1, r3
 800269a:	4818      	ldr	r0, [pc, #96]	; (80026fc <HAL_SPI_MspInit+0x1d8>)
 800269c:	f009 fe4e 	bl	800c33c <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026a0:	2310      	movs	r3, #16
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026a8:	2302      	movs	r3, #2
 80026aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ac:	2303      	movs	r3, #3
 80026ae:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026b0:	2306      	movs	r3, #6
 80026b2:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026b8:	4619      	mov	r1, r3
 80026ba:	4810      	ldr	r0, [pc, #64]	; (80026fc <HAL_SPI_MspInit+0x1d8>)
 80026bc:	f009 fe3e 	bl	800c33c <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80026c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c6:	2302      	movs	r3, #2
 80026c8:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026ca:	2302      	movs	r3, #2
 80026cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ce:	2303      	movs	r3, #3
 80026d0:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026d2:	2306      	movs	r3, #6
 80026d4:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026da:	4619      	mov	r1, r3
 80026dc:	4808      	ldr	r0, [pc, #32]	; (8002700 <HAL_SPI_MspInit+0x1dc>)
 80026de:	f009 fe2d 	bl	800c33c <HAL_GPIO_Init>
}
 80026e2:	bf00      	nop
 80026e4:	3738      	adds	r7, #56	; 0x38
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40013000 	.word	0x40013000
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40020000 	.word	0x40020000
 80026f8:	40003800 	.word	0x40003800
 80026fc:	40020400 	.word	0x40020400
 8002700:	40020800 	.word	0x40020800

08002704 <SystemClock_Config>:

	}
}

void SystemClock_Config(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b094      	sub	sp, #80	; 0x50
 8002708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800270a:	f107 0320 	add.w	r3, r7, #32
 800270e:	2230      	movs	r2, #48	; 0x30
 8002710:	2100      	movs	r1, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f012 fd82 	bl	801521c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002718:	f107 030c 	add.w	r3, r7, #12
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002728:	2300      	movs	r3, #0
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	4b29      	ldr	r3, [pc, #164]	; (80027d4 <SystemClock_Config+0xd0>)
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	4a28      	ldr	r2, [pc, #160]	; (80027d4 <SystemClock_Config+0xd0>)
 8002732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002736:	6413      	str	r3, [r2, #64]	; 0x40
 8002738:	4b26      	ldr	r3, [pc, #152]	; (80027d4 <SystemClock_Config+0xd0>)
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002744:	2300      	movs	r3, #0
 8002746:	607b      	str	r3, [r7, #4]
 8002748:	4b23      	ldr	r3, [pc, #140]	; (80027d8 <SystemClock_Config+0xd4>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a22      	ldr	r2, [pc, #136]	; (80027d8 <SystemClock_Config+0xd4>)
 800274e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <SystemClock_Config+0xd4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275c:	607b      	str	r3, [r7, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002760:	2301      	movs	r3, #1
 8002762:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002764:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800276a:	2302      	movs	r3, #2
 800276c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800276e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002772:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002774:	2308      	movs	r3, #8
 8002776:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002778:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800277c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800277e:	2302      	movs	r3, #2
 8002780:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002782:	2304      	movs	r3, #4
 8002784:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002786:	f107 0320 	add.w	r3, r7, #32
 800278a:	4618      	mov	r0, r3
 800278c:	f00c f8d0 	bl	800e930 <HAL_RCC_OscConfig>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002796:	f001 fe5d 	bl	8004454 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800279a:	230f      	movs	r3, #15
 800279c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800279e:	2302      	movs	r3, #2
 80027a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80027ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80027b2:	f107 030c 	add.w	r3, r7, #12
 80027b6:	2105      	movs	r1, #5
 80027b8:	4618      	mov	r0, r3
 80027ba:	f00c fb29 	bl	800ee10 <HAL_RCC_ClockConfig>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80027c4:	f001 fe46 	bl	8004454 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80027c8:	f00c fc08 	bl	800efdc <HAL_RCC_EnableCSS>
}
 80027cc:	bf00      	nop
 80027ce:	3750      	adds	r7, #80	; 0x50
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40007000 	.word	0x40007000

080027dc <TIMxInit>:
 * 						  BIOSTIMx_Init (&htim2, 1000, 84);  //1ms  interrupt
 * 						  BIOSTIMx_Init (&htim3, 20000, 84); //20ms interrupt
 */

void TIMxInit(TIM_HandleTypeDef* htimx, uint16_t period, uint16_t prescaler)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	807b      	strh	r3, [r7, #2]
 80027e8:	4613      	mov	r3, r2
 80027ea:	803b      	strh	r3, [r7, #0]

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ec:	f107 030c 	add.w	r3, r7, #12
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]
	int nvic = 0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]

	if(htimx == &htim1){
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a9b      	ldr	r2, [pc, #620]	; (8002a6c <TIMxInit+0x290>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d105      	bne.n	800280e <TIMxInit+0x32>
		htimx->Instance = TIM1;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a9a      	ldr	r2, [pc, #616]	; (8002a70 <TIMxInit+0x294>)
 8002806:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8002808:	2319      	movs	r3, #25
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	e081      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim2)	{
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a98      	ldr	r2, [pc, #608]	; (8002a74 <TIMxInit+0x298>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d106      	bne.n	8002824 <TIMxInit+0x48>
		htimx->Instance = TIM2;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800281c:	601a      	str	r2, [r3, #0]
		nvic = TIM2_IRQn;
 800281e:	231c      	movs	r3, #28
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	e076      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim3)	{
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a94      	ldr	r2, [pc, #592]	; (8002a78 <TIMxInit+0x29c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d105      	bne.n	8002838 <TIMxInit+0x5c>
		htimx->Instance = TIM3;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a93      	ldr	r2, [pc, #588]	; (8002a7c <TIMxInit+0x2a0>)
 8002830:	601a      	str	r2, [r3, #0]
		nvic = TIM3_IRQn;
 8002832:	231d      	movs	r3, #29
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	e06c      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim4)	{
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a91      	ldr	r2, [pc, #580]	; (8002a80 <TIMxInit+0x2a4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d105      	bne.n	800284c <TIMxInit+0x70>
		htimx->Instance = TIM4;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a90      	ldr	r2, [pc, #576]	; (8002a84 <TIMxInit+0x2a8>)
 8002844:	601a      	str	r2, [r3, #0]
		nvic = TIM4_IRQn;
 8002846:	231e      	movs	r3, #30
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	e062      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim5)	{
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a8e      	ldr	r2, [pc, #568]	; (8002a88 <TIMxInit+0x2ac>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d105      	bne.n	8002860 <TIMxInit+0x84>
		htimx->Instance = TIM5;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a8d      	ldr	r2, [pc, #564]	; (8002a8c <TIMxInit+0x2b0>)
 8002858:	601a      	str	r2, [r3, #0]
		nvic = TIM5_IRQn;
 800285a:	2332      	movs	r3, #50	; 0x32
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	e058      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim6)	{
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a8b      	ldr	r2, [pc, #556]	; (8002a90 <TIMxInit+0x2b4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d105      	bne.n	8002874 <TIMxInit+0x98>
		htimx->Instance = TIM6;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a8a      	ldr	r2, [pc, #552]	; (8002a94 <TIMxInit+0x2b8>)
 800286c:	601a      	str	r2, [r3, #0]
		nvic = TIM6_DAC_IRQn;
 800286e:	2336      	movs	r3, #54	; 0x36
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	e04e      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim7)	{
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a88      	ldr	r2, [pc, #544]	; (8002a98 <TIMxInit+0x2bc>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d105      	bne.n	8002888 <TIMxInit+0xac>
		htimx->Instance = TIM7;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a87      	ldr	r2, [pc, #540]	; (8002a9c <TIMxInit+0x2c0>)
 8002880:	601a      	str	r2, [r3, #0]
		nvic = TIM7_IRQn;
 8002882:	2337      	movs	r3, #55	; 0x37
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	e044      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim8)	{
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a85      	ldr	r2, [pc, #532]	; (8002aa0 <TIMxInit+0x2c4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d105      	bne.n	800289c <TIMxInit+0xc0>
		htimx->Instance = TIM8;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a84      	ldr	r2, [pc, #528]	; (8002aa4 <TIMxInit+0x2c8>)
 8002894:	601a      	str	r2, [r3, #0]
		nvic = TIM8_CC_IRQn;
 8002896:	232e      	movs	r3, #46	; 0x2e
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	e03a      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim9)	{
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a82      	ldr	r2, [pc, #520]	; (8002aa8 <TIMxInit+0x2cc>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d105      	bne.n	80028b0 <TIMxInit+0xd4>
		htimx->Instance = TIM9;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a81      	ldr	r2, [pc, #516]	; (8002aac <TIMxInit+0x2d0>)
 80028a8:	601a      	str	r2, [r3, #0]
		nvic = TIM1_BRK_TIM9_IRQn;
 80028aa:	2318      	movs	r3, #24
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	e030      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim10)	{
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a7f      	ldr	r2, [pc, #508]	; (8002ab0 <TIMxInit+0x2d4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d105      	bne.n	80028c4 <TIMxInit+0xe8>
		htimx->Instance = TIM10;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a7e      	ldr	r2, [pc, #504]	; (8002ab4 <TIMxInit+0x2d8>)
 80028bc:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 80028be:	2319      	movs	r3, #25
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	e026      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim11)	{
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a7c      	ldr	r2, [pc, #496]	; (8002ab8 <TIMxInit+0x2dc>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d105      	bne.n	80028d8 <TIMxInit+0xfc>
		htimx->Instance = TIM11;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a7b      	ldr	r2, [pc, #492]	; (8002abc <TIMxInit+0x2e0>)
 80028d0:	601a      	str	r2, [r3, #0]
		nvic = TIM1_TRG_COM_TIM11_IRQn;
 80028d2:	231a      	movs	r3, #26
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	e01c      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim12)	{
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a79      	ldr	r2, [pc, #484]	; (8002ac0 <TIMxInit+0x2e4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d105      	bne.n	80028ec <TIMxInit+0x110>
		htimx->Instance = TIM12;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a78      	ldr	r2, [pc, #480]	; (8002ac4 <TIMxInit+0x2e8>)
 80028e4:	601a      	str	r2, [r3, #0]
		nvic = TIM8_BRK_TIM12_IRQn;
 80028e6:	232b      	movs	r3, #43	; 0x2b
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	e012      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim13)	{
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a76      	ldr	r2, [pc, #472]	; (8002ac8 <TIMxInit+0x2ec>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d105      	bne.n	8002900 <TIMxInit+0x124>
		htimx->Instance = TIM13;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a75      	ldr	r2, [pc, #468]	; (8002acc <TIMxInit+0x2f0>)
 80028f8:	601a      	str	r2, [r3, #0]
		nvic = TIM8_UP_TIM13_IRQn;
 80028fa:	232c      	movs	r3, #44	; 0x2c
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	e008      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim14)	{
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a73      	ldr	r2, [pc, #460]	; (8002ad0 <TIMxInit+0x2f4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d104      	bne.n	8002912 <TIMxInit+0x136>
		htimx->Instance = TIM14;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a72      	ldr	r2, [pc, #456]	; (8002ad4 <TIMxInit+0x2f8>)
 800290c:	601a      	str	r2, [r3, #0]
		nvic = TIM8_TRG_COM_TIM14_IRQn;
 800290e:	232d      	movs	r3, #45	; 0x2d
 8002910:	617b      	str	r3, [r7, #20]
	}


	htimx->Init.Prescaler = prescaler;
 8002912:	883a      	ldrh	r2, [r7, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = period;
 800291e:	887a      	ldrh	r2, [r7, #2]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	60da      	str	r2, [r3, #12]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f00d f80c 	bl	800f948 <HAL_TIM_Base_Init>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <TIMxInit+0x15e>
	{
		Error_Handler();
 8002936:	f001 fd8d 	bl	8004454 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800293e:	2300      	movs	r3, #0
 8002940:	613b      	str	r3, [r7, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8002942:	f107 030c 	add.w	r3, r7, #12
 8002946:	4619      	mov	r1, r3
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f00d fea3 	bl	8010694 <HAL_TIMEx_MasterConfigSynchronization>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <TIMxInit+0x17c>
	{
		Error_Handler();
 8002954:	f001 fd7e 	bl	8004454 <Error_Handler>
	}

	if(htimx == &htim1){
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a44      	ldr	r2, [pc, #272]	; (8002a6c <TIMxInit+0x290>)
 800295c:	4293      	cmp	r3, r2
 800295e:	f000 80cb 	beq.w	8002af8 <TIMxInit+0x31c>
#ifndef QEI1_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM1_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim2)	{
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a43      	ldr	r2, [pc, #268]	; (8002a74 <TIMxInit+0x298>)
 8002966:	4293      	cmp	r3, r2
 8002968:	f000 80c6 	beq.w	8002af8 <TIMxInit+0x31c>
#ifndef FREERTOS_USED
		HAL_NVIC_SetPriority(nvic, TIM2_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim3)	{
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a42      	ldr	r2, [pc, #264]	; (8002a78 <TIMxInit+0x29c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	f000 80c1 	beq.w	8002af8 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM3_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim4)	{
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a41      	ldr	r2, [pc, #260]	; (8002a80 <TIMxInit+0x2a4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	f000 80bc 	beq.w	8002af8 <TIMxInit+0x31c>
#ifndef QEI4_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM4_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim5)	{
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a41      	ldr	r2, [pc, #260]	; (8002a88 <TIMxInit+0x2ac>)
 8002984:	4293      	cmp	r3, r2
 8002986:	f000 80b7 	beq.w	8002af8 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM5_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim6)	{
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a40      	ldr	r2, [pc, #256]	; (8002a90 <TIMxInit+0x2b4>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d10c      	bne.n	80029ac <TIMxInit+0x1d0>
		HAL_NVIC_SetPriority(nvic, TIM6_IRQ_PRIO, 0);
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	b25b      	sxtb	r3, r3
 8002996:	2200      	movs	r2, #0
 8002998:	2107      	movs	r1, #7
 800299a:	4618      	mov	r0, r3
 800299c:	f008 fd9a 	bl	800b4d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	b25b      	sxtb	r3, r3
 80029a4:	4618      	mov	r0, r3
 80029a6:	f008 fdb1 	bl	800b50c <HAL_NVIC_EnableIRQ>
 80029aa:	e0a5      	b.n	8002af8 <TIMxInit+0x31c>
	}
	else if(htimx == &htim7)	{
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a3a      	ldr	r2, [pc, #232]	; (8002a98 <TIMxInit+0x2bc>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d10c      	bne.n	80029ce <TIMxInit+0x1f2>
		HAL_NVIC_SetPriority(nvic, TIM7_IRQ_PRIO, 0);
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	b25b      	sxtb	r3, r3
 80029b8:	2200      	movs	r2, #0
 80029ba:	210e      	movs	r1, #14
 80029bc:	4618      	mov	r0, r3
 80029be:	f008 fd89 	bl	800b4d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	b25b      	sxtb	r3, r3
 80029c6:	4618      	mov	r0, r3
 80029c8:	f008 fda0 	bl	800b50c <HAL_NVIC_EnableIRQ>
 80029cc:	e094      	b.n	8002af8 <TIMxInit+0x31c>
	}
	else if(htimx == &htim8)	{
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a33      	ldr	r2, [pc, #204]	; (8002aa0 <TIMxInit+0x2c4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	f000 8090 	beq.w	8002af8 <TIMxInit+0x31c>
#ifndef QEI6_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM8_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim9)	{
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a33      	ldr	r2, [pc, #204]	; (8002aa8 <TIMxInit+0x2cc>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	f000 808b 	beq.w	8002af8 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM9_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim10)	{
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a32      	ldr	r2, [pc, #200]	; (8002ab0 <TIMxInit+0x2d4>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d10c      	bne.n	8002a04 <TIMxInit+0x228>
		HAL_NVIC_SetPriority(nvic, TIM10_IRQ_PRIO, 0);
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	b25b      	sxtb	r3, r3
 80029ee:	2200      	movs	r2, #0
 80029f0:	210e      	movs	r1, #14
 80029f2:	4618      	mov	r0, r3
 80029f4:	f008 fd6e 	bl	800b4d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	b25b      	sxtb	r3, r3
 80029fc:	4618      	mov	r0, r3
 80029fe:	f008 fd85 	bl	800b50c <HAL_NVIC_EnableIRQ>
 8002a02:	e079      	b.n	8002af8 <TIMxInit+0x31c>
	}
	else if(htimx == &htim11)	{
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a2c      	ldr	r2, [pc, #176]	; (8002ab8 <TIMxInit+0x2dc>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d10c      	bne.n	8002a26 <TIMxInit+0x24a>
		HAL_NVIC_SetPriority(nvic, TIM11_IRQ_PRIO, 0);
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	b25b      	sxtb	r3, r3
 8002a10:	2200      	movs	r2, #0
 8002a12:	210e      	movs	r1, #14
 8002a14:	4618      	mov	r0, r3
 8002a16:	f008 fd5d 	bl	800b4d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	b25b      	sxtb	r3, r3
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f008 fd74 	bl	800b50c <HAL_NVIC_EnableIRQ>
 8002a24:	e068      	b.n	8002af8 <TIMxInit+0x31c>
	}
	else if(htimx == &htim12)	{
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a25      	ldr	r2, [pc, #148]	; (8002ac0 <TIMxInit+0x2e4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d10c      	bne.n	8002a48 <TIMxInit+0x26c>
		HAL_NVIC_SetPriority(nvic, TIM12_IRQ_PRIO, 0);
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	b25b      	sxtb	r3, r3
 8002a32:	2200      	movs	r2, #0
 8002a34:	210e      	movs	r1, #14
 8002a36:	4618      	mov	r0, r3
 8002a38:	f008 fd4c 	bl	800b4d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	b25b      	sxtb	r3, r3
 8002a40:	4618      	mov	r0, r3
 8002a42:	f008 fd63 	bl	800b50c <HAL_NVIC_EnableIRQ>
 8002a46:	e057      	b.n	8002af8 <TIMxInit+0x31c>
	}
	else if(htimx == &htim13)	{
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a1f      	ldr	r2, [pc, #124]	; (8002ac8 <TIMxInit+0x2ec>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d143      	bne.n	8002ad8 <TIMxInit+0x2fc>
		HAL_NVIC_SetPriority(nvic, TIM13_IRQ_PRIO, 0);
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	b25b      	sxtb	r3, r3
 8002a54:	2200      	movs	r2, #0
 8002a56:	210e      	movs	r1, #14
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f008 fd3b 	bl	800b4d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	b25b      	sxtb	r3, r3
 8002a62:	4618      	mov	r0, r3
 8002a64:	f008 fd52 	bl	800b50c <HAL_NVIC_EnableIRQ>
 8002a68:	e046      	b.n	8002af8 <TIMxInit+0x31c>
 8002a6a:	bf00      	nop
 8002a6c:	2000666c 	.word	0x2000666c
 8002a70:	40010000 	.word	0x40010000
 8002a74:	20006770 	.word	0x20006770
 8002a78:	20006420 	.word	0x20006420
 8002a7c:	40000400 	.word	0x40000400
 8002a80:	2000625c 	.word	0x2000625c
 8002a84:	40000800 	.word	0x40000800
 8002a88:	200063e0 	.word	0x200063e0
 8002a8c:	40000c00 	.word	0x40000c00
 8002a90:	2000662c 	.word	0x2000662c
 8002a94:	40001000 	.word	0x40001000
 8002a98:	200068d0 	.word	0x200068d0
 8002a9c:	40001400 	.word	0x40001400
 8002aa0:	2000621c 	.word	0x2000621c
 8002aa4:	40010400 	.word	0x40010400
 8002aa8:	200066ac 	.word	0x200066ac
 8002aac:	40014000 	.word	0x40014000
 8002ab0:	2000633c 	.word	0x2000633c
 8002ab4:	40014400 	.word	0x40014400
 8002ab8:	20006584 	.word	0x20006584
 8002abc:	40014800 	.word	0x40014800
 8002ac0:	20006890 	.word	0x20006890
 8002ac4:	40001800 	.word	0x40001800
 8002ac8:	20006504 	.word	0x20006504
 8002acc:	40001c00 	.word	0x40001c00
 8002ad0:	20006850 	.word	0x20006850
 8002ad4:	40002000 	.word	0x40002000
	}
	else if(htimx == &htim14)	{
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a0c      	ldr	r2, [pc, #48]	; (8002b0c <TIMxInit+0x330>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d10b      	bne.n	8002af8 <TIMxInit+0x31c>
		HAL_NVIC_SetPriority(nvic, TIM14_IRQ_PRIO, 0);
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	b25b      	sxtb	r3, r3
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	210e      	movs	r1, #14
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f008 fcf3 	bl	800b4d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	b25b      	sxtb	r3, r3
 8002af2:	4618      	mov	r0, r3
 8002af4:	f008 fd0a 	bl	800b50c <HAL_NVIC_EnableIRQ>
	}

	HAL_TIM_Base_Start(htimx);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f00c ff50 	bl	800f99e <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(htimx);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f00c ff71 	bl	800f9e6 <HAL_TIM_Base_Start_IT>

}
 8002b04:	bf00      	nop
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20006850 	.word	0x20006850

08002b10 <UARTInit>:
 * 						  rxstate				,can be ENABLE (enable USART1 receive interrupt) or DISBALE
 * Function Return		: None
 * Function Example		: UARTxInit(&huart1, 115200, ENABLE, 0, 0);
 */
void UARTInit(UART_HandleTypeDef* huartx, uint32_t baudrate, FunctionalState rxstate)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	71fb      	strb	r3, [r7, #7]
	IRQn_Type nvic;
	uint8_t *rcv_data;

	if (huartx == &huart1){
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4a6e      	ldr	r2, [pc, #440]	; (8002cdc <UARTInit+0x1cc>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d107      	bne.n	8002b36 <UARTInit+0x26>
		huartx->Instance = USART1;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4a6d      	ldr	r2, [pc, #436]	; (8002ce0 <UARTInit+0x1d0>)
 8002b2a:	601a      	str	r2, [r3, #0]
		nvic = USART1_IRQn;
 8002b2c:	2325      	movs	r3, #37	; 0x25
 8002b2e:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart1_data;
 8002b30:	4b6c      	ldr	r3, [pc, #432]	; (8002ce4 <UARTInit+0x1d4>)
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	e036      	b.n	8002ba4 <UARTInit+0x94>
	}else if(huartx == &huart2){
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4a6b      	ldr	r2, [pc, #428]	; (8002ce8 <UARTInit+0x1d8>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d107      	bne.n	8002b4e <UARTInit+0x3e>
		huartx->Instance = USART2;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4a6a      	ldr	r2, [pc, #424]	; (8002cec <UARTInit+0x1dc>)
 8002b42:	601a      	str	r2, [r3, #0]
		nvic = USART2_IRQn;
 8002b44:	2326      	movs	r3, #38	; 0x26
 8002b46:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart2_data;
 8002b48:	4b69      	ldr	r3, [pc, #420]	; (8002cf0 <UARTInit+0x1e0>)
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	e02a      	b.n	8002ba4 <UARTInit+0x94>
	}else if(huartx == &huart3){
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4a68      	ldr	r2, [pc, #416]	; (8002cf4 <UARTInit+0x1e4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d107      	bne.n	8002b66 <UARTInit+0x56>
		huartx->Instance = USART3;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4a67      	ldr	r2, [pc, #412]	; (8002cf8 <UARTInit+0x1e8>)
 8002b5a:	601a      	str	r2, [r3, #0]
		nvic = USART3_IRQn;
 8002b5c:	2327      	movs	r3, #39	; 0x27
 8002b5e:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart3_data;
 8002b60:	4b66      	ldr	r3, [pc, #408]	; (8002cfc <UARTInit+0x1ec>)
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	e01e      	b.n	8002ba4 <UARTInit+0x94>
	}else if(huartx == &huart4){
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4a65      	ldr	r2, [pc, #404]	; (8002d00 <UARTInit+0x1f0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d107      	bne.n	8002b7e <UARTInit+0x6e>
		huartx->Instance = UART4;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	4a64      	ldr	r2, [pc, #400]	; (8002d04 <UARTInit+0x1f4>)
 8002b72:	601a      	str	r2, [r3, #0]
		nvic = UART4_IRQn;
 8002b74:	2334      	movs	r3, #52	; 0x34
 8002b76:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart4_data;
 8002b78:	4b63      	ldr	r3, [pc, #396]	; (8002d08 <UARTInit+0x1f8>)
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	e012      	b.n	8002ba4 <UARTInit+0x94>
	}else if(huartx == &huart5){
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4a62      	ldr	r2, [pc, #392]	; (8002d0c <UARTInit+0x1fc>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d107      	bne.n	8002b96 <UARTInit+0x86>
		huartx->Instance = UART5;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4a61      	ldr	r2, [pc, #388]	; (8002d10 <UARTInit+0x200>)
 8002b8a:	601a      	str	r2, [r3, #0]
		nvic = UART5_IRQn;
 8002b8c:	2335      	movs	r3, #53	; 0x35
 8002b8e:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart5_data;
 8002b90:	4b60      	ldr	r3, [pc, #384]	; (8002d14 <UARTInit+0x204>)
 8002b92:	613b      	str	r3, [r7, #16]
 8002b94:	e006      	b.n	8002ba4 <UARTInit+0x94>
	}else{
		huartx->Instance = USART6;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	4a5f      	ldr	r2, [pc, #380]	; (8002d18 <UARTInit+0x208>)
 8002b9a:	601a      	str	r2, [r3, #0]
		nvic = USART6_IRQn;
 8002b9c:	2347      	movs	r3, #71	; 0x47
 8002b9e:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart6_data;
 8002ba0:	4b5e      	ldr	r3, [pc, #376]	; (8002d1c <UARTInit+0x20c>)
 8002ba2:	613b      	str	r3, [r7, #16]
	}


	huartx->Init.BaudRate = baudrate;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	605a      	str	r2, [r3, #4]
	huartx->Init.WordLength = UART_WORDLENGTH_8B;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	609a      	str	r2, [r3, #8]
	huartx->Init.StopBits = UART_STOPBITS_1;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	60da      	str	r2, [r3, #12]
	huartx->Init.Parity = UART_PARITY_NONE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	611a      	str	r2, [r3, #16]
	huartx->Init.Mode = UART_MODE_TX_RX;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	220c      	movs	r2, #12
 8002bc0:	615a      	str	r2, [r3, #20]
	huartx->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	619a      	str	r2, [r3, #24]
	huartx->Init.OverSampling = UART_OVERSAMPLING_16;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	61da      	str	r2, [r3, #28]


	if (HAL_UART_Init(huartx) != HAL_OK)
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f00d fdf0 	bl	80107b4 <HAL_UART_Init>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <UARTInit+0xce>
	{
		Error_Handler();
 8002bda:	f001 fc3b 	bl	8004454 <Error_Handler>
	}

	if(rxstate == ENABLE){
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d176      	bne.n	8002cd2 <UARTInit+0x1c2>
		if(huartx == &huart2){
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4a40      	ldr	r2, [pc, #256]	; (8002ce8 <UARTInit+0x1d8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d119      	bne.n	8002c20 <UARTInit+0x110>

			HAL_NVIC_SetPriority(nvic, UART2_RX_IRQ_PRIO, 0);
 8002bec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2105      	movs	r1, #5
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f008 fc6d 	bl	800b4d4 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 8002bfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f008 fca0 	bl	800b544 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8002c04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f008 fc7f 	bl	800b50c <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68da      	ldr	r2, [r3, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f042 0220 	orr.w	r2, r2, #32
 8002c1c:	60da      	str	r2, [r3, #12]
			HAL_NVIC_EnableIRQ(nvic);
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);

		}
	}
}
 8002c1e:	e058      	b.n	8002cd2 <UARTInit+0x1c2>
		}else if(huartx == &huart3){
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4a34      	ldr	r2, [pc, #208]	; (8002cf4 <UARTInit+0x1e4>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d119      	bne.n	8002c5c <UARTInit+0x14c>
			HAL_NVIC_SetPriority(nvic, UART3_RX_IRQ_PRIO, 0);
 8002c28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	2104      	movs	r1, #4
 8002c30:	4618      	mov	r0, r3
 8002c32:	f008 fc4f 	bl	800b4d4 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 8002c36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f008 fc82 	bl	800b544 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8002c40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f008 fc61 	bl	800b50c <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 0220 	orr.w	r2, r2, #32
 8002c58:	60da      	str	r2, [r3, #12]
}
 8002c5a:	e03a      	b.n	8002cd2 <UARTInit+0x1c2>
		}else if(huartx == &huart4){
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4a28      	ldr	r2, [pc, #160]	; (8002d00 <UARTInit+0x1f0>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d119      	bne.n	8002c98 <UARTInit+0x188>
			HAL_NVIC_SetPriority(nvic, UART4_RX_IRQ_PRIO, 0);
 8002c64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	2106      	movs	r1, #6
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f008 fc31 	bl	800b4d4 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 8002c72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f008 fc64 	bl	800b544 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8002c7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f008 fc43 	bl	800b50c <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 0220 	orr.w	r2, r2, #32
 8002c94:	60da      	str	r2, [r3, #12]
}
 8002c96:	e01c      	b.n	8002cd2 <UARTInit+0x1c2>
		}else if(huartx == &huart5){
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4a1c      	ldr	r2, [pc, #112]	; (8002d0c <UARTInit+0x1fc>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d118      	bne.n	8002cd2 <UARTInit+0x1c2>
			HAL_NVIC_SetPriority(nvic, UART5_RX_IRQ_PRIO, 0);
 8002ca0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	210e      	movs	r1, #14
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f008 fc13 	bl	800b4d4 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 8002cae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f008 fc46 	bl	800b544 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8002cb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f008 fc25 	bl	800b50c <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f042 0220 	orr.w	r2, r2, #32
 8002cd0:	60da      	str	r2, [r3, #12]
}
 8002cd2:	bf00      	nop
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20006544 	.word	0x20006544
 8002ce0:	40011000 	.word	0x40011000
 8002ce4:	20006218 	.word	0x20006218
 8002ce8:	200067b0 	.word	0x200067b0
 8002cec:	40004400 	.word	0x40004400
 8002cf0:	200065c4 	.word	0x200065c4
 8002cf4:	200062fc 	.word	0x200062fc
 8002cf8:	40004800 	.word	0x40004800
 8002cfc:	20006461 	.word	0x20006461
 8002d00:	20006730 	.word	0x20006730
 8002d04:	40004c00 	.word	0x40004c00
 8002d08:	2000672c 	.word	0x2000672c
 8002d0c:	20006464 	.word	0x20006464
 8002d10:	40005000 	.word	0x40005000
 8002d14:	200063dc 	.word	0x200063dc
 8002d18:	40011400 	.word	0x40011400
 8002d1c:	20006460 	.word	0x20006460

08002d20 <UARTx_DMA_Rx_Init>:
 * 						  baudrate				,normally set to 115200 according to UTM ROBOCON UART COMMUNICATION PROTOCOL.
 * Function Return		: None
 * Function Example		: UARTx_DMA_Rx_Init(&huart1, &hdma_usart2_rx, 115200);
 */
void UARTx_DMA_Rx_Init(UART_HandleTypeDef* huartx, DMA_HandleTypeDef* hdma_usart_rx,  uint32_t baudrate)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	4b5a      	ldr	r3, [pc, #360]	; (8002e9c <UARTx_DMA_Rx_Init+0x17c>)
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	4a59      	ldr	r2, [pc, #356]	; (8002e9c <UARTx_DMA_Rx_Init+0x17c>)
 8002d36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3c:	4b57      	ldr	r3, [pc, #348]	; (8002e9c <UARTx_DMA_Rx_Init+0x17c>)
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	697b      	ldr	r3, [r7, #20]
	IRQn_Type nvic;
	uint32_t DMA_CHANNEL;

	if(hdma_usart_rx == &hdma_usart2_rx){
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4a55      	ldr	r2, [pc, #340]	; (8002ea0 <UARTx_DMA_Rx_Init+0x180>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d119      	bne.n	8002d84 <UARTx_DMA_Rx_Init+0x64>

		nvic = DMA1_Stream5_IRQn;
 8002d50:	2310      	movs	r3, #16
 8002d52:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream5;
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	4a53      	ldr	r2, [pc, #332]	; (8002ea4 <UARTx_DMA_Rx_Init+0x184>)
 8002d58:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 8002d5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d5e:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART2_RX_IRQ_PRIO, 0);
 8002d60:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002d64:	2200      	movs	r2, #0
 8002d66:	2105      	movs	r1, #5
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f008 fbb3 	bl	800b4d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8002d6e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f008 fbe6 	bl	800b544 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8002d78:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f008 fbc5 	bl	800b50c <HAL_NVIC_EnableIRQ>
 8002d82:	e058      	b.n	8002e36 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_usart3_rx){
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4a48      	ldr	r2, [pc, #288]	; (8002ea8 <UARTx_DMA_Rx_Init+0x188>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d119      	bne.n	8002dc0 <UARTx_DMA_Rx_Init+0xa0>

		nvic = DMA1_Stream1_IRQn;
 8002d8c:	230c      	movs	r3, #12
 8002d8e:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream1;
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4a46      	ldr	r2, [pc, #280]	; (8002eac <UARTx_DMA_Rx_Init+0x18c>)
 8002d94:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 8002d96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d9a:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART3_RX_IRQ_PRIO, 0);
 8002d9c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002da0:	2200      	movs	r2, #0
 8002da2:	2104      	movs	r1, #4
 8002da4:	4618      	mov	r0, r3
 8002da6:	f008 fb95 	bl	800b4d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8002daa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f008 fbc8 	bl	800b544 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8002db4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f008 fba7 	bl	800b50c <HAL_NVIC_EnableIRQ>
 8002dbe:	e03a      	b.n	8002e36 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_uart4_rx){
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4a3b      	ldr	r2, [pc, #236]	; (8002eb0 <UARTx_DMA_Rx_Init+0x190>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d119      	bne.n	8002dfc <UARTx_DMA_Rx_Init+0xdc>

		nvic = DMA1_Stream2_IRQn;
 8002dc8:	230d      	movs	r3, #13
 8002dca:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream2;
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4a39      	ldr	r2, [pc, #228]	; (8002eb4 <UARTx_DMA_Rx_Init+0x194>)
 8002dd0:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 8002dd2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002dd6:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART4_RX_IRQ_PRIO, 0);
 8002dd8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2106      	movs	r1, #6
 8002de0:	4618      	mov	r0, r3
 8002de2:	f008 fb77 	bl	800b4d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8002de6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f008 fbaa 	bl	800b544 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8002df0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f008 fb89 	bl	800b50c <HAL_NVIC_EnableIRQ>
 8002dfa:	e01c      	b.n	8002e36 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_uart5_rx){
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	4a2e      	ldr	r2, [pc, #184]	; (8002eb8 <UARTx_DMA_Rx_Init+0x198>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d118      	bne.n	8002e36 <UARTx_DMA_Rx_Init+0x116>

		nvic = DMA1_Stream0_IRQn;
 8002e04:	230b      	movs	r3, #11
 8002e06:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream0;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4a2c      	ldr	r2, [pc, #176]	; (8002ebc <UARTx_DMA_Rx_Init+0x19c>)
 8002e0c:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 8002e0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e12:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART5_RX_IRQ_PRIO, 0);
 8002e14:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	210e      	movs	r1, #14
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f008 fb59 	bl	800b4d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8002e22:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f008 fb8c 	bl	800b544 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8002e2c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f008 fb6b 	bl	800b50c <HAL_NVIC_EnableIRQ>

	}

	UARTInit(huartx, baudrate, DISABLE);
 8002e36:	2200      	movs	r2, #0
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f7ff fe68 	bl	8002b10 <UARTInit>

	hdma_usart_rx->Init.Channel = DMA_CHANNEL;
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	69fa      	ldr	r2, [r7, #28]
 8002e44:	605a      	str	r2, [r3, #4]
	hdma_usart_rx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	609a      	str	r2, [r3, #8]
	hdma_usart_rx->Init.PeriphInc = DMA_PINC_DISABLE;
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	60da      	str	r2, [r3, #12]
	hdma_usart_rx->Init.MemInc = DMA_MINC_ENABLE;
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e58:	611a      	str	r2, [r3, #16]
	hdma_usart_rx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	615a      	str	r2, [r3, #20]
	hdma_usart_rx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2200      	movs	r2, #0
 8002e64:	619a      	str	r2, [r3, #24]
	hdma_usart_rx->Init.Mode = DMA_NORMAL;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	61da      	str	r2, [r3, #28]
	hdma_usart_rx->Init.Priority = DMA_PRIORITY_LOW;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	621a      	str	r2, [r3, #32]
	hdma_usart_rx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2200      	movs	r2, #0
 8002e76:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_DMA_Init(hdma_usart_rx) != HAL_OK)
 8002e78:	68b8      	ldr	r0, [r7, #8]
 8002e7a:	f008 fb71 	bl	800b560 <HAL_DMA_Init>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <UARTx_DMA_Rx_Init+0x168>
	{
		Error_Handler();
 8002e84:	f001 fae6 	bl	8004454 <Error_Handler>
	}

	__HAL_LINKDMA(huartx,hdmarx, *hdma_usart_rx);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	635a      	str	r2, [r3, #52]	; 0x34
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002e94:	bf00      	nop
 8002e96:	3720      	adds	r7, #32
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	200061b8 	.word	0x200061b8
 8002ea4:	40026088 	.word	0x40026088
 8002ea8:	2000629c 	.word	0x2000629c
 8002eac:	40026028 	.word	0x40026028
 8002eb0:	20006158 	.word	0x20006158
 8002eb4:	40026040 	.word	0x40026040
 8002eb8:	200067f0 	.word	0x200067f0
 8002ebc:	40026010 	.word	0x40026010

08002ec0 <UARTPrintString>:
 * 						  s			,buffer or string
 * Function Return		: None
 * Function Example		: UARTPrintString(huart4, buffer);
 */
void UARTPrintString(UART_HandleTypeDef* huartx, char s[])
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huartx, (uint8_t *)s, strlen(s), 10);
 8002eca:	6838      	ldr	r0, [r7, #0]
 8002ecc:	f7fd f980 	bl	80001d0 <strlen>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	230a      	movs	r3, #10
 8002ed6:	6839      	ldr	r1, [r7, #0]
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f00d fcb8 	bl	801084e <HAL_UART_Transmit>
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <USART1_IRQHandler>:
void UARTPrintString_IT(UART_HandleTypeDef* huartx, char s[]){
	if(HAL_UART_GetState(huartx) == HAL_UART_STATE_READY)
		HAL_UART_Transmit_IT(huartx, (uint8_t *)s, strlen(s));
}

void  USART1_IRQHandler(void){
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0


	HAL_UART_IRQHandler(&huart1);
 8002eec:	4802      	ldr	r0, [pc, #8]	; (8002ef8 <USART1_IRQHandler+0x10>)
 8002eee:	f00d fe1d 	bl	8010b2c <HAL_UART_IRQHandler>
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20006544 	.word	0x20006544

08002efc <USART2_IRQHandler>:

void  USART2_IRQHandler(void){
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart2);
 8002f00:	4802      	ldr	r0, [pc, #8]	; (8002f0c <USART2_IRQHandler+0x10>)
 8002f02:	f00d fe13 	bl	8010b2c <HAL_UART_IRQHandler>
}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	200067b0 	.word	0x200067b0

08002f10 <USART3_IRQHandler>:

void  USART3_IRQHandler(void){
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart3);
 8002f14:	4802      	ldr	r0, [pc, #8]	; (8002f20 <USART3_IRQHandler+0x10>)
 8002f16:	f00d fe09 	bl	8010b2c <HAL_UART_IRQHandler>
}
 8002f1a:	bf00      	nop
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	200062fc 	.word	0x200062fc

08002f24 <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart4);
 8002f28:	4802      	ldr	r0, [pc, #8]	; (8002f34 <UART4_IRQHandler+0x10>)
 8002f2a:	f00d fdff 	bl	8010b2c <HAL_UART_IRQHandler>
}
 8002f2e:	bf00      	nop
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20006730 	.word	0x20006730

08002f38 <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart5);
 8002f3c:	4802      	ldr	r0, [pc, #8]	; (8002f48 <UART5_IRQHandler+0x10>)
 8002f3e:	f00d fdf5 	bl	8010b2c <HAL_UART_IRQHandler>
}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20006464 	.word	0x20006464

08002f4c <USART6_IRQHandler>:

void  USART6_IRQHandler(void){
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart6);
 8002f50:	4802      	ldr	r0, [pc, #8]	; (8002f5c <USART6_IRQHandler+0x10>)
 8002f52:	f00d fdeb 	bl	8010b2c <HAL_UART_IRQHandler>
}
 8002f56:	bf00      	nop
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	200066ec 	.word	0x200066ec

08002f60 <CANxInit>:
 * Function Return		: CAN_InitStatus				Constant indicates initialization succeed which will be
  *        											    CAN_InitStatus_Failed or CAN_InitStatus_Success.
 * Function Example		: CAN1_Init(&hcan1,4,CAN_Filter_FIFO0,0,0,13,1,1);
 */
void CANxInit(CAN_HandleTypeDef* hcanx,uint16_t prescaler,uint32_t FilterFIFOAssignment,uint16_t CAN_FilterId_11bits,
		uint16_t CAN_FilterMaskId_11bits,uint8_t CAN_FilterNumber, uint8_t rate){
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08e      	sub	sp, #56	; 0x38
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	607a      	str	r2, [r7, #4]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	817b      	strh	r3, [r7, #10]
 8002f70:	4613      	mov	r3, r2
 8002f72:	813b      	strh	r3, [r7, #8]

	CAN_FilterTypeDef sFilterConfig = {0};
 8002f74:	f107 0310 	add.w	r3, r7, #16
 8002f78:	2228      	movs	r2, #40	; 0x28
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f012 f94d 	bl	801521c <memset>

	if(hcanx == &hcan1){
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	4a53      	ldr	r2, [pc, #332]	; (80030d4 <CANxInit+0x174>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d103      	bne.n	8002f92 <CANxInit+0x32>
		hcanx->Instance = CAN1;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4a52      	ldr	r2, [pc, #328]	; (80030d8 <CANxInit+0x178>)
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	e002      	b.n	8002f98 <CANxInit+0x38>
	}else{
		hcanx->Instance = CAN2;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	4a51      	ldr	r2, [pc, #324]	; (80030dc <CANxInit+0x17c>)
 8002f96:	601a      	str	r2, [r3, #0]
	}


	hcanx->Init.Prescaler = prescaler;
 8002f98:	897a      	ldrh	r2, [r7, #10]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	605a      	str	r2, [r3, #4]
	hcanx->Init.Mode = CAN_MODE_NORMAL;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	609a      	str	r2, [r3, #8]

	hcanx->Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	60da      	str	r2, [r3, #12]
	if(rate == CAN_1MHz){
 8002faa:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d108      	bne.n	8002fc4 <CANxInit+0x64>
		//sampling point 85.71%
		hcanx->Init.TimeSeg1 = CAN_BS1_11TQ;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8002fb8:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_2TQ;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002fc0:	615a      	str	r2, [r3, #20]
 8002fc2:	e00b      	b.n	8002fdc <CANxInit+0x7c>
	}else if(rate == CAN_500KHz){
 8002fc4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d107      	bne.n	8002fdc <CANxInit+0x7c>
		//sampling point 71.42%
		hcanx->Init.TimeSeg1 = CAN_BS1_14TQ;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8002fd2:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_6TQ;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 8002fda:	615a      	str	r2, [r3, #20]
	}
	hcanx->Init.TimeTriggeredMode = DISABLE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	761a      	strb	r2, [r3, #24]
	hcanx->Init.AutoBusOff = ENABLE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	765a      	strb	r2, [r3, #25]
	hcanx->Init.AutoWakeUp = DISABLE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	769a      	strb	r2, [r3, #26]
	hcanx->Init.AutoRetransmission = DISABLE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	76da      	strb	r2, [r3, #27]
	hcanx->Init.ReceiveFifoLocked = DISABLE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	771a      	strb	r2, [r3, #28]
	hcanx->Init.TransmitFifoPriority = DISABLE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(hcanx) != HAL_OK)
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f007 fadf 	bl	800a5c4 <HAL_CAN_Init>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <CANxInit+0xb0>
	{
		Error_Handler();
 800300c:	f001 fa22 	bl	8004454 <Error_Handler>
	}

	sFilterConfig.SlaveStartFilterBank = 14;
 8003010:	230e      	movs	r3, #14
 8003012:	637b      	str	r3, [r7, #52]	; 0x34
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8003014:	2301      	movs	r3, #1
 8003016:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003018:	2300      	movs	r3, #0
 800301a:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment=FilterFIFOAssignment; //set fifo assignment
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh= CAN_FilterId_11bits <<5; //the ID that the filter looks for (switch this for the other microcontroller)
 8003020:	893b      	ldrh	r3, [r7, #8]
 8003022:	015b      	lsls	r3, r3, #5
 8003024:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow=0;
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh=CAN_FilterMaskId_11bits <<5;
 800302a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800302e:	015b      	lsls	r3, r3, #5
 8003030:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow=0;
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //set filter scale
 8003036:	2301      	movs	r3, #1
 8003038:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterBank = CAN_FilterNumber;
 800303a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800303e:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(hcanx, &sFilterConfig);
 8003040:	f107 0310 	add.w	r3, r7, #16
 8003044:	4619      	mov	r1, r3
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f007 fbb8 	bl	800a7bc <HAL_CAN_ConfigFilter>



	if(hcanx == &hcan1){
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4a21      	ldr	r2, [pc, #132]	; (80030d4 <CANxInit+0x174>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d11c      	bne.n	800308e <CANxInit+0x12e>

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10c      	bne.n	8003074 <CANxInit+0x114>
			/* CAN1_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX0_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 800305a:	2200      	movs	r2, #0
 800305c:	210e      	movs	r1, #14
 800305e:	2014      	movs	r0, #20
 8003060:	f008 fa38 	bl	800b4d4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003064:	2014      	movs	r0, #20
 8003066:	f008 fa51 	bl	800b50c <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 800306a:	2102      	movs	r1, #2
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f007 feeb 	bl	800ae48 <HAL_CAN_ActivateNotification>
 8003072:	e028      	b.n	80030c6 <CANxInit+0x166>

		}else{
			/* CAN1_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX1_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 8003074:	2200      	movs	r2, #0
 8003076:	210e      	movs	r1, #14
 8003078:	2015      	movs	r0, #21
 800307a:	f008 fa2b 	bl	800b4d4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800307e:	2015      	movs	r0, #21
 8003080:	f008 fa44 	bl	800b50c <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 8003084:	2110      	movs	r1, #16
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f007 fede 	bl	800ae48 <HAL_CAN_ActivateNotification>
 800308c:	e01b      	b.n	80030c6 <CANxInit+0x166>
		}
	}else{

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10c      	bne.n	80030ae <CANxInit+0x14e>
			/* CAN2_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX0_IRQn, CAN2_FIFO0_IRQ_PRIO, 0);
 8003094:	2200      	movs	r2, #0
 8003096:	210e      	movs	r1, #14
 8003098:	2040      	movs	r0, #64	; 0x40
 800309a:	f008 fa1b 	bl	800b4d4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800309e:	2040      	movs	r0, #64	; 0x40
 80030a0:	f008 fa34 	bl	800b50c <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 80030a4:	2102      	movs	r1, #2
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f007 fece 	bl	800ae48 <HAL_CAN_ActivateNotification>
 80030ac:	e00b      	b.n	80030c6 <CANxInit+0x166>
		}else{
			/* CAN2_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX1_IRQn, CAN2_FIFO1_IRQ_PRIO, 0);
 80030ae:	2200      	movs	r2, #0
 80030b0:	210e      	movs	r1, #14
 80030b2:	2041      	movs	r0, #65	; 0x41
 80030b4:	f008 fa0e 	bl	800b4d4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80030b8:	2041      	movs	r0, #65	; 0x41
 80030ba:	f008 fa27 	bl	800b50c <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 80030be:	2110      	movs	r1, #16
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f007 fec1 	bl	800ae48 <HAL_CAN_ActivateNotification>
		}
	}

	HAL_CAN_Start(hcanx);
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f007 fc58 	bl	800a97c <HAL_CAN_Start>

}
 80030cc:	bf00      	nop
 80030ce:	3738      	adds	r7, #56	; 0x38
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	20008838 	.word	0x20008838
 80030d8:	40006400 	.word	0x40006400
 80030dc:	40006800 	.word	0x40006800

080030e0 <CAN_TxMsg>:
 * Function Return		: canmailbox		The number of the mailbox that is used for transmission or
  *         								CAN_TxStatus_NoMailBox if there is no empty mailbox.
 * Function Example		: CAN_TxMsg(&hcan1,1,&data,1);
 */
uint32_t CAN_TxMsg(CAN_HandleTypeDef* hcanx,uint32_t StdId_11bits,uint8_t *Msg,uint8_t len)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b090      	sub	sp, #64	; 0x40
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	70fb      	strb	r3, [r7, #3]
	sys.rns_busy = 1;
 80030ee:	4a26      	ldr	r2, [pc, #152]	; (8003188 <CAN_TxMsg+0xa8>)
 80030f0:	7813      	ldrb	r3, [r2, #0]
 80030f2:	f043 0310 	orr.w	r3, r3, #16
 80030f6:	7013      	strb	r3, [r2, #0]
	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0);
 80030f8:	bf00      	nop
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f007 fd5d 	bl	800abba <HAL_CAN_GetTxMailboxesFreeLevel>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0f9      	beq.n	80030fa <CAN_TxMsg+0x1a>
	CAN_TxHeaderTypeDef TxMessage;
	uint32_t canMailbox;
	uint8_t* buf = Msg;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t i=0,datalen=len;
 800310a:	2300      	movs	r3, #0
 800310c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800310e:	78fb      	ldrb	r3, [r7, #3]
 8003110:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t Txmsg[8];

	TxMessage.StdId=StdId_11bits;					 // standard identifier=0
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	623b      	str	r3, [r7, #32]
	TxMessage.ExtId=0;					 // extended identifier=StdId
 8003116:	2300      	movs	r3, #0
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
	TxMessage.IDE=CAN_Id_Standard;			 // type of identifier for the message is Standard
 800311a:	2300      	movs	r3, #0
 800311c:	62bb      	str	r3, [r7, #40]	; 0x28
	TxMessage.RTR=CAN_RTR_Data;
 800311e:	2300      	movs	r3, #0
 8003120:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxMessage.TransmitGlobalTime = DISABLE;  // the type of frame for the message that will be transmitted
 8003122:	2300      	movs	r3, #0
 8003124:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	while(datalen--)
 8003128:	e00c      	b.n	8003144 <CAN_TxMsg+0x64>
	{
		Txmsg[i++]= *(uint8_t*)buf++;
 800312a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003130:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003132:	1c51      	adds	r1, r2, #1
 8003134:	8779      	strh	r1, [r7, #58]	; 0x3a
 8003136:	4611      	mov	r1, r2
 8003138:	781a      	ldrb	r2, [r3, #0]
 800313a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800313e:	440b      	add	r3, r1
 8003140:	f803 2c2c 	strb.w	r2, [r3, #-44]
	while(datalen--)
 8003144:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003146:	1e5a      	subs	r2, r3, #1
 8003148:	873a      	strh	r2, [r7, #56]	; 0x38
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1ed      	bne.n	800312a <CAN_TxMsg+0x4a>
//			if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
//				Error_Handler();
//			}
//		}
	}
	if(i>0){
 800314e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00f      	beq.n	8003174 <CAN_TxMsg+0x94>
		TxMessage.DLC = i;
 8003154:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003156:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 8003158:	f107 031c 	add.w	r3, r7, #28
 800315c:	f107 0214 	add.w	r2, r7, #20
 8003160:	f107 0120 	add.w	r1, r7, #32
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f007 fc4d 	bl	800aa04 <HAL_CAN_AddTxMessage>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <CAN_TxMsg+0x94>
			Error_Handler();
 8003170:	f001 f970 	bl	8004454 <Error_Handler>
		}

	}
	sys.rns_busy = 0;
 8003174:	4a04      	ldr	r2, [pc, #16]	; (8003188 <CAN_TxMsg+0xa8>)
 8003176:	7813      	ldrb	r3, [r2, #0]
 8003178:	f36f 1304 	bfc	r3, #4, #1
 800317c:	7013      	strb	r3, [r2, #0]

	return(canMailbox);
 800317e:	69fb      	ldr	r3, [r7, #28]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3740      	adds	r7, #64	; 0x40
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20007254 	.word	0x20007254

0800318c <CAN_TxMsgEID>:
 * Function Return		: canmailbox		The number of the mailbox that is used for transmission or
  *         								CAN_TxStatus_NoMailBox if there is no empty mailbox.
 * Function Example		: CAN_TxMsg(&hcan1,1,&data,1);
 */
uint32_t CAN_TxMsgEID(CAN_HandleTypeDef* hcanx,uint32_t EID,uint8_t *Msg,uint8_t len)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b090      	sub	sp, #64	; 0x40
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	70fb      	strb	r3, [r7, #3]


	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0);
 800319a:	bf00      	nop
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f007 fd0c 	bl	800abba <HAL_CAN_GetTxMailboxesFreeLevel>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f9      	beq.n	800319c <CAN_TxMsgEID+0x10>
	CAN_TxHeaderTypeDef TxMessage;
	uint32_t canMailbox;
	uint8_t* buf = Msg;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t i=0,datalen=len;
 80031ac:	2300      	movs	r3, #0
 80031ae:	877b      	strh	r3, [r7, #58]	; 0x3a
 80031b0:	78fb      	ldrb	r3, [r7, #3]
 80031b2:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t Txmsg[8];

	TxMessage.StdId=0;					 // standard identifier=0
 80031b4:	2300      	movs	r3, #0
 80031b6:	623b      	str	r3, [r7, #32]
	TxMessage.ExtId=EID;					 // extended identifier=StdId
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
	TxMessage.IDE=CAN_Id_Extended;			 // type of identifier for the message is Standard
 80031bc:	2304      	movs	r3, #4
 80031be:	62bb      	str	r3, [r7, #40]	; 0x28
	TxMessage.RTR=CAN_RTR_Data;
 80031c0:	2300      	movs	r3, #0
 80031c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxMessage.TransmitGlobalTime = DISABLE;  // the type of frame for the message that will be transmitted
 80031c4:	2300      	movs	r3, #0
 80031c6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	while(datalen--)
 80031ca:	e01f      	b.n	800320c <CAN_TxMsgEID+0x80>
	{
		Txmsg[i++]= *(uint8_t*)buf++;
 80031cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031d2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80031d4:	1c51      	adds	r1, r2, #1
 80031d6:	8779      	strh	r1, [r7, #58]	; 0x3a
 80031d8:	4611      	mov	r1, r2
 80031da:	781a      	ldrb	r2, [r3, #0]
 80031dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80031e0:	440b      	add	r3, r1
 80031e2:	f803 2c2c 	strb.w	r2, [r3, #-44]
		if(i == 8){
 80031e6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d10f      	bne.n	800320c <CAN_TxMsgEID+0x80>
			TxMessage.DLC=8;
 80031ec:	2308      	movs	r3, #8
 80031ee:	633b      	str	r3, [r7, #48]	; 0x30
			if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 80031f0:	f107 031c 	add.w	r3, r7, #28
 80031f4:	f107 0214 	add.w	r2, r7, #20
 80031f8:	f107 0120 	add.w	r1, r7, #32
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f007 fc01 	bl	800aa04 <HAL_CAN_AddTxMessage>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <CAN_TxMsgEID+0x80>
				Error_Handler();
 8003208:	f001 f924 	bl	8004454 <Error_Handler>
	while(datalen--)
 800320c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800320e:	1e5a      	subs	r2, r3, #1
 8003210:	873a      	strh	r2, [r7, #56]	; 0x38
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1da      	bne.n	80031cc <CAN_TxMsgEID+0x40>
			}
		}
	}
	if(i>0){
 8003216:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00f      	beq.n	800323c <CAN_TxMsgEID+0xb0>
		TxMessage.DLC = i;
 800321c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800321e:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 8003220:	f107 031c 	add.w	r3, r7, #28
 8003224:	f107 0214 	add.w	r2, r7, #20
 8003228:	f107 0120 	add.w	r1, r7, #32
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f007 fbe9 	bl	800aa04 <HAL_CAN_AddTxMessage>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <CAN_TxMsgEID+0xb0>
			Error_Handler();
 8003238:	f001 f90c 	bl	8004454 <Error_Handler>
		}

	}

	return(canMailbox);
 800323c:	69fb      	ldr	r3, [r7, #28]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3740      	adds	r7, #64	; 0x40
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <I2CX_DMA_RX_Init>:
 * 						  ClockSpeed					Speed of transmission can be CLOCK_SPEED_100KHz or CLOCK_SPEED_400KHz
 * Function Return		: NONE
 * Function Example		: I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 *
 */
void I2CX_DMA_RX_Init(I2C_HandleTypeDef *hi2cx,DMA_HandleTypeDef* hdma_i2cx,uint8_t OwnAddress,uint32_t ClockSpeed){
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	4613      	mov	r3, r2
 8003256:	71fb      	strb	r3, [r7, #7]

	IRQn_Type nvic,nvicER,nvicEV;
	uint32_t DMA_CHANNEL;
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	4b9e      	ldr	r3, [pc, #632]	; (80034d8 <I2CX_DMA_RX_Init+0x290>)
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	4a9d      	ldr	r2, [pc, #628]	; (80034d8 <I2CX_DMA_RX_Init+0x290>)
 8003262:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003266:	6313      	str	r3, [r2, #48]	; 0x30
 8003268:	4b9b      	ldr	r3, [pc, #620]	; (80034d8 <I2CX_DMA_RX_Init+0x290>)
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	697b      	ldr	r3, [r7, #20]
	if(hi2cx == &hi2c1){
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4a99      	ldr	r2, [pc, #612]	; (80034dc <I2CX_DMA_RX_Init+0x294>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d11d      	bne.n	80032b8 <I2CX_DMA_RX_Init+0x70>

		hi2cx->Instance = I2C1;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4a98      	ldr	r2, [pc, #608]	; (80034e0 <I2CX_DMA_RX_Init+0x298>)
 8003280:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream0;
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	4a97      	ldr	r2, [pc, #604]	; (80034e4 <I2CX_DMA_RX_Init+0x29c>)
 8003286:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_1;
 8003288:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800328c:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream0_IRQn;
 800328e:	230b      	movs	r3, #11
 8003290:	77fb      	strb	r3, [r7, #31]

		nvicER = I2C1_ER_IRQn;
 8003292:	2320      	movs	r3, #32
 8003294:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C1_EV_IRQn;
 8003296:	231f      	movs	r3, #31
 8003298:	777b      	strb	r3, [r7, #29]
		__HAL_RCC_DMA1_CLK_ENABLE();
 800329a:	2300      	movs	r3, #0
 800329c:	613b      	str	r3, [r7, #16]
 800329e:	4b8e      	ldr	r3, [pc, #568]	; (80034d8 <I2CX_DMA_RX_Init+0x290>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	4a8d      	ldr	r2, [pc, #564]	; (80034d8 <I2CX_DMA_RX_Init+0x290>)
 80032a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032a8:	6313      	str	r3, [r2, #48]	; 0x30
 80032aa:	4b8b      	ldr	r3, [pc, #556]	; (80034d8 <I2CX_DMA_RX_Init+0x290>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032b2:	613b      	str	r3, [r7, #16]
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	e022      	b.n	80032fe <I2CX_DMA_RX_Init+0xb6>
	}else if(hi2cx == &hi2c2){
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4a8b      	ldr	r2, [pc, #556]	; (80034e8 <I2CX_DMA_RX_Init+0x2a0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d10f      	bne.n	80032e0 <I2CX_DMA_RX_Init+0x98>

		hi2cx->Instance = I2C2;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4a8a      	ldr	r2, [pc, #552]	; (80034ec <I2CX_DMA_RX_Init+0x2a4>)
 80032c4:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream3;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	4a89      	ldr	r2, [pc, #548]	; (80034f0 <I2CX_DMA_RX_Init+0x2a8>)
 80032ca:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_7;
 80032cc:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 80032d0:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream3_IRQn;
 80032d2:	230e      	movs	r3, #14
 80032d4:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C2_ER_IRQn;
 80032d6:	2322      	movs	r3, #34	; 0x22
 80032d8:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C2_EV_IRQn;
 80032da:	2321      	movs	r3, #33	; 0x21
 80032dc:	777b      	strb	r3, [r7, #29]
 80032de:	e00e      	b.n	80032fe <I2CX_DMA_RX_Init+0xb6>

	}else{
		hi2cx->Instance = I2C3;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4a84      	ldr	r2, [pc, #528]	; (80034f4 <I2CX_DMA_RX_Init+0x2ac>)
 80032e4:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream2;
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	4a83      	ldr	r2, [pc, #524]	; (80034f8 <I2CX_DMA_RX_Init+0x2b0>)
 80032ea:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_3;
 80032ec:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80032f0:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream2_IRQn;
 80032f2:	230d      	movs	r3, #13
 80032f4:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C3_ER_IRQn;
 80032f6:	2349      	movs	r3, #73	; 0x49
 80032f8:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C3_EV_IRQn;
 80032fa:	2348      	movs	r3, #72	; 0x48
 80032fc:	777b      	strb	r3, [r7, #29]
	}

	hdma_i2cx->Init.Channel = DMA_CHANNEL;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	605a      	str	r2, [r3, #4]
	hdma_i2cx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2200      	movs	r2, #0
 8003308:	609a      	str	r2, [r3, #8]
	hdma_i2cx->Init.PeriphInc = DMA_PINC_DISABLE;
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2200      	movs	r2, #0
 800330e:	60da      	str	r2, [r3, #12]
	hdma_i2cx->Init.MemInc = DMA_MINC_ENABLE;
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003316:	611a      	str	r2, [r3, #16]
	hdma_i2cx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2200      	movs	r2, #0
 800331c:	615a      	str	r2, [r3, #20]
	hdma_i2cx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2200      	movs	r2, #0
 8003322:	619a      	str	r2, [r3, #24]
	hdma_i2cx->Init.Mode = DMA_NORMAL;
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2200      	movs	r2, #0
 8003328:	61da      	str	r2, [r3, #28]
	hdma_i2cx->Init.Priority = DMA_PRIORITY_HIGH;
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003330:	621a      	str	r2, [r3, #32]
	hdma_i2cx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	2200      	movs	r2, #0
 8003336:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_i2cx->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2203      	movs	r2, #3
 800333c:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_i2cx->Init.MemBurst = DMA_MBURST_INC4;
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003344:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_i2cx->Init.PeriphBurst = DMA_PBURST_INC4;
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800334c:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(hdma_i2cx) != HAL_OK)
 800334e:	68b8      	ldr	r0, [r7, #8]
 8003350:	f008 f906 	bl	800b560 <HAL_DMA_Init>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <I2CX_DMA_RX_Init+0x116>
	{

		Error_Handler();
 800335a:	f001 f87b 	bl	8004454 <Error_Handler>

	}
	__HAL_LINKDMA(hi2cx,hdmarx,*hdma_i2cx);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	639a      	str	r2, [r3, #56]	; 0x38
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	639a      	str	r2, [r3, #56]	; 0x38

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */

	//	__HAL_DMA_ENABLE_IT(hdma_i2cx,DMA_IT_TC);
	if(hi2cx == &hi2c1){
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4a5b      	ldr	r2, [pc, #364]	; (80034dc <I2CX_DMA_RX_Init+0x294>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d111      	bne.n	8003396 <I2CX_DMA_RX_Init+0x14e>
		HAL_NVIC_SetPriority(nvic, DMA1_Str0__IRQ_PRIO, 0);
 8003372:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003376:	2200      	movs	r2, #0
 8003378:	210a      	movs	r1, #10
 800337a:	4618      	mov	r0, r3
 800337c:	f008 f8aa 	bl	800b4d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003380:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003384:	4618      	mov	r0, r3
 8003386:	f008 f8dd 	bl	800b544 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 800338a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800338e:	4618      	mov	r0, r3
 8003390:	f008 f8bc 	bl	800b50c <HAL_NVIC_EnableIRQ>
 8003394:	e026      	b.n	80033e4 <I2CX_DMA_RX_Init+0x19c>
	}else if(hi2cx == &hi2c2){
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4a53      	ldr	r2, [pc, #332]	; (80034e8 <I2CX_DMA_RX_Init+0x2a0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d111      	bne.n	80033c2 <I2CX_DMA_RX_Init+0x17a>
		HAL_NVIC_SetPriority(nvic, DMA1_Str3__IRQ_PRIO, 0);
 800339e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80033a2:	2200      	movs	r2, #0
 80033a4:	210e      	movs	r1, #14
 80033a6:	4618      	mov	r0, r3
 80033a8:	f008 f894 	bl	800b4d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 80033ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f008 f8c7 	bl	800b544 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 80033b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f008 f8a6 	bl	800b50c <HAL_NVIC_EnableIRQ>
 80033c0:	e010      	b.n	80033e4 <I2CX_DMA_RX_Init+0x19c>
	}else{
		HAL_NVIC_SetPriority(nvic, DMA1_Str2__IRQ_PRIO, 0);
 80033c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80033c6:	2200      	movs	r2, #0
 80033c8:	210e      	movs	r1, #14
 80033ca:	4618      	mov	r0, r3
 80033cc:	f008 f882 	bl	800b4d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 80033d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f008 f8b5 	bl	800b544 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 80033da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80033de:	4618      	mov	r0, r3
 80033e0:	f008 f894 	bl	800b50c <HAL_NVIC_EnableIRQ>
	}

	hi2cx->Init.ClockSpeed = ClockSpeed;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	605a      	str	r2, [r3, #4]
	hi2cx->Init.DutyCycle = I2C_DUTYCYCLE_2;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	609a      	str	r2, [r3, #8]
	hi2cx->Init.OwnAddress1 = OwnAddress<<1;
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	461a      	mov	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	60da      	str	r2, [r3, #12]
	hi2cx->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003400:	611a      	str	r2, [r3, #16]
	hi2cx->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	615a      	str	r2, [r3, #20]
	hi2cx->Init.OwnAddress2 = 0;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	619a      	str	r2, [r3, #24]
	hi2cx->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	61da      	str	r2, [r3, #28]
	hi2cx->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	621a      	str	r2, [r3, #32]

	if(hi2cx == &hi2c1){
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4a2f      	ldr	r2, [pc, #188]	; (80034dc <I2CX_DMA_RX_Init+0x294>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d118      	bne.n	8003454 <I2CX_DMA_RX_Init+0x20c>
		HAL_NVIC_SetPriority(nvicER, I2C1_ER_IRQ_PRIO, 0);
 8003422:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003426:	2200      	movs	r2, #0
 8003428:	2100      	movs	r1, #0
 800342a:	4618      	mov	r0, r3
 800342c:	f008 f852 	bl	800b4d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003430:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003434:	4618      	mov	r0, r3
 8003436:	f008 f869 	bl	800b50c <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C1_EV_IRQ_PRIO, 0);
 800343a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800343e:	2200      	movs	r2, #0
 8003440:	2108      	movs	r1, #8
 8003442:	4618      	mov	r0, r3
 8003444:	f008 f846 	bl	800b4d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003448:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800344c:	4618      	mov	r0, r3
 800344e:	f008 f85d 	bl	800b50c <HAL_NVIC_EnableIRQ>
 8003452:	e034      	b.n	80034be <I2CX_DMA_RX_Init+0x276>
	}else if(hi2cx == &hi2c2){
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4a24      	ldr	r2, [pc, #144]	; (80034e8 <I2CX_DMA_RX_Init+0x2a0>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d118      	bne.n	800348e <I2CX_DMA_RX_Init+0x246>
		HAL_NVIC_SetPriority(nvicER, I2C2_ER_IRQ_PRIO, 0);
 800345c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003460:	2200      	movs	r2, #0
 8003462:	210e      	movs	r1, #14
 8003464:	4618      	mov	r0, r3
 8003466:	f008 f835 	bl	800b4d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 800346a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800346e:	4618      	mov	r0, r3
 8003470:	f008 f84c 	bl	800b50c <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C2_EV_IRQ_PRIO, 0);
 8003474:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003478:	2200      	movs	r2, #0
 800347a:	210e      	movs	r1, #14
 800347c:	4618      	mov	r0, r3
 800347e:	f008 f829 	bl	800b4d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003482:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003486:	4618      	mov	r0, r3
 8003488:	f008 f840 	bl	800b50c <HAL_NVIC_EnableIRQ>
 800348c:	e017      	b.n	80034be <I2CX_DMA_RX_Init+0x276>
	}else{
		HAL_NVIC_SetPriority(nvicER, I2C3_ER_IRQ_PRIO, 0);
 800348e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003492:	2200      	movs	r2, #0
 8003494:	210e      	movs	r1, #14
 8003496:	4618      	mov	r0, r3
 8003498:	f008 f81c 	bl	800b4d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 800349c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f008 f833 	bl	800b50c <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C3_EV_IRQ_PRIO, 0);
 80034a6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80034aa:	2200      	movs	r2, #0
 80034ac:	210e      	movs	r1, #14
 80034ae:	4618      	mov	r0, r3
 80034b0:	f008 f810 	bl	800b4d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 80034b4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f008 f827 	bl	800b50c <HAL_NVIC_EnableIRQ>
	}

	if (HAL_I2C_Init(hi2cx) != HAL_OK)
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f009 f9ee 	bl	800c8a0 <HAL_I2C_Init>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <I2CX_DMA_RX_Init+0x286>
	{

		Error_Handler();
 80034ca:	f000 ffc3 	bl	8004454 <Error_Handler>
	}
}
 80034ce:	bf00      	nop
 80034d0:	3720      	adds	r7, #32
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40023800 	.word	0x40023800
 80034dc:	20007174 	.word	0x20007174
 80034e0:	40005400 	.word	0x40005400
 80034e4:	40026010 	.word	0x40026010
 80034e8:	200071c8 	.word	0x200071c8
 80034ec:	40005800 	.word	0x40005800
 80034f0:	40026058 	.word	0x40026058
 80034f4:	40005c00 	.word	0x40005c00
 80034f8:	40026040 	.word	0x40026040

080034fc <I2C2_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_EV_IRQHandler(void){
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0


	HAL_I2C_EV_IRQHandler(&hi2c2);
 8003500:	4802      	ldr	r0, [pc, #8]	; (800350c <I2C2_EV_IRQHandler+0x10>)
 8003502:	f009 fc57 	bl	800cdb4 <HAL_I2C_EV_IRQHandler>


}
 8003506:	bf00      	nop
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	200071c8 	.word	0x200071c8

08003510 <I2C2_ER_IRQHandler>:
 * Function Remarks		: This interrupt handle the error event of I2C2.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_ER_IRQHandler(void){
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0

	HAL_I2C_ER_IRQHandler(&hi2c2);
 8003514:	4802      	ldr	r0, [pc, #8]	; (8003520 <I2C2_ER_IRQHandler+0x10>)
 8003516:	f009 fdba 	bl	800d08e <HAL_I2C_ER_IRQHandler>


}
 800351a:	bf00      	nop
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	200071c8 	.word	0x200071c8

08003524 <I2C3_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C3_EV_IRQHandler(void){
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0

	//	taskENTER_CRITICAL();
	HAL_I2C_EV_IRQHandler(&hi2c3);
 8003528:	4802      	ldr	r0, [pc, #8]	; (8003534 <I2C3_EV_IRQHandler+0x10>)
 800352a:	f009 fc43 	bl	800cdb4 <HAL_I2C_EV_IRQHandler>
	//	taskEXIT_CRITICAL();

}
 800352e:	bf00      	nop
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	20006e28 	.word	0x20006e28

08003538 <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
static SPI_HandleTypeDef led_spi;

void ILI9341_Init() {
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
//	ILI9341_SPI_Init();

	/* Reset The Screen */
	ILI9341_Reset();
 800353c:	f000 f910 	bl	8003760 <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 8003540:	2001      	movs	r0, #1
 8003542:	f000 fa13 	bl	800396c <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 8003546:	20cb      	movs	r0, #203	; 0xcb
 8003548:	f000 fa10 	bl	800396c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 800354c:	2039      	movs	r0, #57	; 0x39
 800354e:	f000 fa1c 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 8003552:	202c      	movs	r0, #44	; 0x2c
 8003554:	f000 fa19 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8003558:	2000      	movs	r0, #0
 800355a:	f000 fa16 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 800355e:	2034      	movs	r0, #52	; 0x34
 8003560:	f000 fa13 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8003564:	2002      	movs	r0, #2
 8003566:	f000 fa10 	bl	800398a <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 800356a:	20cf      	movs	r0, #207	; 0xcf
 800356c:	f000 f9fe 	bl	800396c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8003570:	2000      	movs	r0, #0
 8003572:	f000 fa0a 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8003576:	20c1      	movs	r0, #193	; 0xc1
 8003578:	f000 fa07 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 800357c:	2030      	movs	r0, #48	; 0x30
 800357e:	f000 fa04 	bl	800398a <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8003582:	20e8      	movs	r0, #232	; 0xe8
 8003584:	f000 f9f2 	bl	800396c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 8003588:	2085      	movs	r0, #133	; 0x85
 800358a:	f000 f9fe 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800358e:	2000      	movs	r0, #0
 8003590:	f000 f9fb 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8003594:	2078      	movs	r0, #120	; 0x78
 8003596:	f000 f9f8 	bl	800398a <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 800359a:	20ea      	movs	r0, #234	; 0xea
 800359c:	f000 f9e6 	bl	800396c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80035a0:	2000      	movs	r0, #0
 80035a2:	f000 f9f2 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80035a6:	2000      	movs	r0, #0
 80035a8:	f000 f9ef 	bl	800398a <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 80035ac:	20ed      	movs	r0, #237	; 0xed
 80035ae:	f000 f9dd 	bl	800396c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 80035b2:	2064      	movs	r0, #100	; 0x64
 80035b4:	f000 f9e9 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80035b8:	2003      	movs	r0, #3
 80035ba:	f000 f9e6 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 80035be:	2012      	movs	r0, #18
 80035c0:	f000 f9e3 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 80035c4:	2081      	movs	r0, #129	; 0x81
 80035c6:	f000 f9e0 	bl	800398a <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 80035ca:	20f7      	movs	r0, #247	; 0xf7
 80035cc:	f000 f9ce 	bl	800396c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 80035d0:	2020      	movs	r0, #32
 80035d2:	f000 f9da 	bl	800398a <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 80035d6:	20c0      	movs	r0, #192	; 0xc0
 80035d8:	f000 f9c8 	bl	800396c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 80035dc:	2010      	movs	r0, #16
 80035de:	f000 f9d4 	bl	800398a <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 80035e2:	20c1      	movs	r0, #193	; 0xc1
 80035e4:	f000 f9c2 	bl	800396c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 80035e8:	2010      	movs	r0, #16
 80035ea:	f000 f9ce 	bl	800398a <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 80035ee:	20c5      	movs	r0, #197	; 0xc5
 80035f0:	f000 f9bc 	bl	800396c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 80035f4:	203e      	movs	r0, #62	; 0x3e
 80035f6:	f000 f9c8 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 80035fa:	2028      	movs	r0, #40	; 0x28
 80035fc:	f000 f9c5 	bl	800398a <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 8003600:	20c7      	movs	r0, #199	; 0xc7
 8003602:	f000 f9b3 	bl	800396c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 8003606:	2086      	movs	r0, #134	; 0x86
 8003608:	f000 f9bf 	bl	800398a <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 800360c:	2036      	movs	r0, #54	; 0x36
 800360e:	f000 f9ad 	bl	800396c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 8003612:	2048      	movs	r0, #72	; 0x48
 8003614:	f000 f9b9 	bl	800398a <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 8003618:	203a      	movs	r0, #58	; 0x3a
 800361a:	f000 f9a7 	bl	800396c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 800361e:	2055      	movs	r0, #85	; 0x55
 8003620:	f000 f9b3 	bl	800398a <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 8003624:	20b1      	movs	r0, #177	; 0xb1
 8003626:	f000 f9a1 	bl	800396c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800362a:	2000      	movs	r0, #0
 800362c:	f000 f9ad 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 8003630:	2018      	movs	r0, #24
 8003632:	f000 f9aa 	bl	800398a <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 8003636:	20b6      	movs	r0, #182	; 0xb6
 8003638:	f000 f998 	bl	800396c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 800363c:	2008      	movs	r0, #8
 800363e:	f000 f9a4 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 8003642:	2082      	movs	r0, #130	; 0x82
 8003644:	f000 f9a1 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 8003648:	2027      	movs	r0, #39	; 0x27
 800364a:	f000 f99e 	bl	800398a <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 800364e:	20f2      	movs	r0, #242	; 0xf2
 8003650:	f000 f98c 	bl	800396c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8003654:	2000      	movs	r0, #0
 8003656:	f000 f998 	bl	800398a <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 800365a:	2026      	movs	r0, #38	; 0x26
 800365c:	f000 f986 	bl	800396c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8003660:	2001      	movs	r0, #1
 8003662:	f000 f992 	bl	800398a <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 8003666:	20e0      	movs	r0, #224	; 0xe0
 8003668:	f000 f980 	bl	800396c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 800366c:	200f      	movs	r0, #15
 800366e:	f000 f98c 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8003672:	2031      	movs	r0, #49	; 0x31
 8003674:	f000 f989 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 8003678:	202b      	movs	r0, #43	; 0x2b
 800367a:	f000 f986 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 800367e:	200c      	movs	r0, #12
 8003680:	f000 f983 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8003684:	200e      	movs	r0, #14
 8003686:	f000 f980 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800368a:	2008      	movs	r0, #8
 800368c:	f000 f97d 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8003690:	204e      	movs	r0, #78	; 0x4e
 8003692:	f000 f97a 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 8003696:	20f1      	movs	r0, #241	; 0xf1
 8003698:	f000 f977 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 800369c:	2037      	movs	r0, #55	; 0x37
 800369e:	f000 f974 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 80036a2:	2007      	movs	r0, #7
 80036a4:	f000 f971 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 80036a8:	2010      	movs	r0, #16
 80036aa:	f000 f96e 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80036ae:	2003      	movs	r0, #3
 80036b0:	f000 f96b 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80036b4:	200e      	movs	r0, #14
 80036b6:	f000 f968 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 80036ba:	2009      	movs	r0, #9
 80036bc:	f000 f965 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80036c0:	2000      	movs	r0, #0
 80036c2:	f000 f962 	bl	800398a <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 80036c6:	20e1      	movs	r0, #225	; 0xe1
 80036c8:	f000 f950 	bl	800396c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80036cc:	2000      	movs	r0, #0
 80036ce:	f000 f95c 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80036d2:	200e      	movs	r0, #14
 80036d4:	f000 f959 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 80036d8:	2014      	movs	r0, #20
 80036da:	f000 f956 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80036de:	2003      	movs	r0, #3
 80036e0:	f000 f953 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 80036e4:	2011      	movs	r0, #17
 80036e6:	f000 f950 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 80036ea:	2007      	movs	r0, #7
 80036ec:	f000 f94d 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80036f0:	2031      	movs	r0, #49	; 0x31
 80036f2:	f000 f94a 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 80036f6:	20c1      	movs	r0, #193	; 0xc1
 80036f8:	f000 f947 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 80036fc:	2048      	movs	r0, #72	; 0x48
 80036fe:	f000 f944 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 8003702:	2008      	movs	r0, #8
 8003704:	f000 f941 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8003708:	200f      	movs	r0, #15
 800370a:	f000 f93e 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 800370e:	200c      	movs	r0, #12
 8003710:	f000 f93b 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8003714:	2031      	movs	r0, #49	; 0x31
 8003716:	f000 f938 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 800371a:	2036      	movs	r0, #54	; 0x36
 800371c:	f000 f935 	bl	800398a <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8003720:	200f      	movs	r0, #15
 8003722:	f000 f932 	bl	800398a <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 8003726:	2011      	movs	r0, #17
 8003728:	f000 f920 	bl	800396c <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 800372c:	2029      	movs	r0, #41	; 0x29
 800372e:	f000 f91d 	bl	800396c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 8003732:	202c      	movs	r0, #44	; 0x2c
 8003734:	f000 f929 	bl	800398a <ILI9341_Send_Data>
}
 8003738:	bf00      	nop
 800373a:	bd80      	pop	{r7, pc}

0800373c <ILI9341_SPI_Send>:
		Error_Handler();
	}
}

void ILI9341_SPI_Send(unsigned char data)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	4603      	mov	r3, r0
 8003744:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &data, 1, 1);
 8003746:	1df9      	adds	r1, r7, #7
 8003748:	2301      	movs	r3, #1
 800374a:	2201      	movs	r2, #1
 800374c:	4803      	ldr	r0, [pc, #12]	; (800375c <ILI9341_SPI_Send+0x20>)
 800374e:	f00b fdfd 	bl	800f34c <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_DMA(&hspi1, &data, 1);
}
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20008570 	.word	0x20008570

08003760 <ILI9341_Reset>:
{
	HAL_SPI_Transmit(&hspi1, &data, size, 10);
//	HAL_SPI_Transmit_DMA(&hspi1, &data, size);
}

void ILI9341_Reset() {
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
	RESET_ON;
 8003764:	2200      	movs	r2, #0
 8003766:	2110      	movs	r1, #16
 8003768:	4809      	ldr	r0, [pc, #36]	; (8003790 <ILI9341_Reset+0x30>)
 800376a:	f009 f87f 	bl	800c86c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800376e:	2032      	movs	r0, #50	; 0x32
 8003770:	f006 ff04 	bl	800a57c <HAL_Delay>
	RESET_OFF;
 8003774:	2201      	movs	r2, #1
 8003776:	2110      	movs	r1, #16
 8003778:	4805      	ldr	r0, [pc, #20]	; (8003790 <ILI9341_Reset+0x30>)
 800377a:	f009 f877 	bl	800c86c <HAL_GPIO_WritePin>
	//CS_ON;
	HAL_Delay(50);
 800377e:	2032      	movs	r0, #50	; 0x32
 8003780:	f006 fefc 	bl	800a57c <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8003784:	2001      	movs	r0, #1
 8003786:	f000 f8f1 	bl	800396c <ILI9341_Send_Command>
	//CS_OFF;
}
 800378a:	bf00      	nop
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40020000 	.word	0x40020000

08003794 <ILI9341_SPI_Send_32>:
		Y_SIZE = 240;
		break;
	}
}

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	6039      	str	r1, [r7, #0]
 800379e:	71fb      	strb	r3, [r7, #7]
	//CS_ON;
	DC_COMMAND;
 80037a0:	2200      	movs	r2, #0
 80037a2:	2140      	movs	r1, #64	; 0x40
 80037a4:	4813      	ldr	r0, [pc, #76]	; (80037f4 <ILI9341_SPI_Send_32+0x60>)
 80037a6:	f009 f861 	bl	800c86c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff ffc5 	bl	800373c <ILI9341_SPI_Send>

	DC_DATA;
 80037b2:	2201      	movs	r2, #1
 80037b4:	2140      	movs	r1, #64	; 0x40
 80037b6:	480f      	ldr	r0, [pc, #60]	; (80037f4 <ILI9341_SPI_Send_32+0x60>)
 80037b8:	f009 f858 	bl	800c86c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	0e1b      	lsrs	r3, r3, #24
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff ffba 	bl	800373c <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	0c1b      	lsrs	r3, r3, #16
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff ffb4 	bl	800373c <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	0a1b      	lsrs	r3, r3, #8
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff ffae 	bl	800373c <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff ffa9 	bl	800373c <ILI9341_SPI_Send>

}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40020000 	.word	0x40020000

080037f8 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
 8003804:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	617b      	str	r3, [r7, #20]
	t <<= 16;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	041b      	lsls	r3, r3, #16
 800380e:	617b      	str	r3, [r7, #20]
	t |= x2;
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4313      	orrs	r3, r2
 8003816:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8003818:	6979      	ldr	r1, [r7, #20]
 800381a:	202a      	movs	r0, #42	; 0x2a
 800381c:	f7ff ffba 	bl	8003794 <ILI9341_SPI_Send_32>
	t = y1;
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	041b      	lsls	r3, r3, #16
 8003828:	617b      	str	r3, [r7, #20]
	t |= y2;
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	4313      	orrs	r3, r2
 8003830:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 8003832:	6979      	ldr	r1, [r7, #20]
 8003834:	202b      	movs	r0, #43	; 0x2b
 8003836:	f7ff ffad 	bl	8003794 <ILI9341_SPI_Send_32>
}
 800383a:	bf00      	nop
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
	...

08003844 <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 800384c:	4b0d      	ldr	r3, [pc, #52]	; (8003884 <ILI9341_Fill_Screen+0x40>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	1e5a      	subs	r2, r3, #1
 8003852:	4b0d      	ldr	r3, [pc, #52]	; (8003888 <ILI9341_Fill_Screen+0x44>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	3b01      	subs	r3, #1
 8003858:	2100      	movs	r1, #0
 800385a:	2000      	movs	r0, #0
 800385c:	f7ff ffcc 	bl	80037f8 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	b29b      	uxth	r3, r3
 8003864:	4a07      	ldr	r2, [pc, #28]	; (8003884 <ILI9341_Fill_Screen+0x40>)
 8003866:	6812      	ldr	r2, [r2, #0]
 8003868:	4611      	mov	r1, r2
 800386a:	4a07      	ldr	r2, [pc, #28]	; (8003888 <ILI9341_Fill_Screen+0x44>)
 800386c:	6812      	ldr	r2, [r2, #0]
 800386e:	fb02 f201 	mul.w	r2, r2, r1
 8003872:	4611      	mov	r1, r2
 8003874:	4618      	mov	r0, r3
 8003876:	f000 f897 	bl	80039a8 <ILI9341_Send_Burst>
}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20000000 	.word	0x20000000
 8003888:	20000004 	.word	0x20000004

0800388c <ILI9341_Draw_String>:
		}
	}
}

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af02      	add	r7, sp, #8
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	603b      	str	r3, [r7, #0]
	switch (size)
 800389a:	7f3b      	ldrb	r3, [r7, #28]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d028      	beq.n	80038f2 <ILI9341_Draw_String+0x66>
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d02b      	beq.n	80038fc <ILI9341_Draw_String+0x70>
			x += hh*8;
			str++;
		}
	break;
	}
}
 80038a4:	e059      	b.n	800395a <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 80038a6:	7f3b      	ldrb	r3, [r7, #28]
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	461a      	mov	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	441a      	add	r2, r3
 80038b0:	4b2c      	ldr	r3, [pc, #176]	; (8003964 <ILI9341_Draw_String+0xd8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d907      	bls.n	80038c8 <ILI9341_Draw_String+0x3c>
				x = 1;
 80038b8:	2301      	movs	r3, #1
 80038ba:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 80038bc:	7f3b      	ldrb	r3, [r7, #28]
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	461a      	mov	r2, r3
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	4413      	add	r3, r2
 80038c6:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	68b9      	ldr	r1, [r7, #8]
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	7f3a      	ldrb	r2, [r7, #28]
 80038d2:	9201      	str	r2, [sp, #4]
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	f000 f919 	bl	8003b10 <ILI9341_Draw_Char>
			x += size*8-2;
 80038de:	7f3b      	ldrb	r3, [r7, #28]
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	461a      	mov	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4413      	add	r3, r2
 80038e8:	3b02      	subs	r3, #2
 80038ea:	60fb      	str	r3, [r7, #12]
			str++;
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	3301      	adds	r3, #1
 80038f0:	61bb      	str	r3, [r7, #24]
		while (*str)
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1d5      	bne.n	80038a6 <ILI9341_Draw_String+0x1a>
	break;
 80038fa:	e02e      	b.n	800395a <ILI9341_Draw_String+0xce>
		hh=1;
 80038fc:	4b1a      	ldr	r3, [pc, #104]	; (8003968 <ILI9341_Draw_String+0xdc>)
 80038fe:	2201      	movs	r2, #1
 8003900:	701a      	strb	r2, [r3, #0]
		while (*str)
 8003902:	e025      	b.n	8003950 <ILI9341_Draw_String+0xc4>
			if ((x+(size*8))>X_SIZE)
 8003904:	7f3b      	ldrb	r3, [r7, #28]
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	461a      	mov	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	441a      	add	r2, r3
 800390e:	4b15      	ldr	r3, [pc, #84]	; (8003964 <ILI9341_Draw_String+0xd8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d907      	bls.n	8003926 <ILI9341_Draw_String+0x9a>
				x = 1;
 8003916:	2301      	movs	r3, #1
 8003918:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 800391a:	7f3b      	ldrb	r3, [r7, #28]
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	461a      	mov	r2, r3
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	4413      	add	r3, r2
 8003924:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	68b9      	ldr	r1, [r7, #8]
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	7f3a      	ldrb	r2, [r7, #28]
 8003930:	9201      	str	r2, [sp, #4]
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	f000 f8ea 	bl	8003b10 <ILI9341_Draw_Char>
			x += hh*8;
 800393c:	4b0a      	ldr	r3, [pc, #40]	; (8003968 <ILI9341_Draw_String+0xdc>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	461a      	mov	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4413      	add	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]
			str++;
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	3301      	adds	r3, #1
 800394e:	61bb      	str	r3, [r7, #24]
		while (*str)
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1d5      	bne.n	8003904 <ILI9341_Draw_String+0x78>
	break;
 8003958:	bf00      	nop
}
 800395a:	bf00      	nop
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20000000 	.word	0x20000000
 8003968:	20008ea4 	.word	0x20008ea4

0800396c <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8003976:	f000 f995 	bl	8003ca4 <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff fedd 	bl	800373c <ILI9341_SPI_Send>
}
 8003982:	bf00      	nop
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 800398a:	b580      	push	{r7, lr}
 800398c:	b082      	sub	sp, #8
 800398e:	af00      	add	r7, sp, #0
 8003990:	4603      	mov	r3, r0
 8003992:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8003994:	f000 f97a 	bl	8003c8c <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8003998:	79fb      	ldrb	r3, [r7, #7]
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff fece 	bl	800373c <ILI9341_SPI_Send>
}
 80039a0:	bf00      	nop
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	4603      	mov	r3, r0
 80039b0:	6039      	str	r1, [r7, #0]
 80039b2:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 80039b4:	88fb      	ldrh	r3, [r7, #6]
 80039b6:	0a1b      	lsrs	r3, r3, #8
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	733b      	strb	r3, [r7, #12]
 80039bc:	88fb      	ldrh	r3, [r7, #6]
 80039be:	72fb      	strb	r3, [r7, #11]
	//CS_ON;
	DC_COMMAND;
 80039c0:	2200      	movs	r2, #0
 80039c2:	2140      	movs	r1, #64	; 0x40
 80039c4:	4851      	ldr	r0, [pc, #324]	; (8003b0c <ILI9341_Send_Burst+0x164>)
 80039c6:	f008 ff51 	bl	800c86c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 80039ca:	202c      	movs	r0, #44	; 0x2c
 80039cc:	f7ff feb6 	bl	800373c <ILI9341_SPI_Send>
	DC_DATA;
 80039d0:	2201      	movs	r2, #1
 80039d2:	2140      	movs	r1, #64	; 0x40
 80039d4:	484d      	ldr	r0, [pc, #308]	; (8003b0c <ILI9341_Send_Burst+0x164>)
 80039d6:	f008 ff49 	bl	800c86c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 80039da:	7b3b      	ldrb	r3, [r7, #12]
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff fead 	bl	800373c <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 80039e2:	7afb      	ldrb	r3, [r7, #11]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff fea9 	bl	800373c <ILI9341_SPI_Send>
	len--;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	3b01      	subs	r3, #1
 80039ee:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	099b      	lsrs	r3, r3, #6
 80039f4:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 80039f6:	7b3a      	ldrb	r2, [r7, #12]
 80039f8:	7afb      	ldrb	r3, [r7, #11]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d169      	bne.n	8003ad2 <ILI9341_Send_Burst+0x12a>
	{
		while (blocks--) {
 80039fe:	e027      	b.n	8003a50 <ILI9341_Send_Burst+0xa8>
			i = 16;
 8003a00:	2310      	movs	r3, #16
 8003a02:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 8003a04:	7afb      	ldrb	r3, [r7, #11]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff fe98 	bl	800373c <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003a0c:	7afb      	ldrb	r3, [r7, #11]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff fe94 	bl	800373c <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003a14:	7afb      	ldrb	r3, [r7, #11]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff fe90 	bl	800373c <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003a1c:	7afb      	ldrb	r3, [r7, #11]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff fe8c 	bl	800373c <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003a24:	7afb      	ldrb	r3, [r7, #11]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff fe88 	bl	800373c <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003a2c:	7afb      	ldrb	r3, [r7, #11]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff fe84 	bl	800373c <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003a34:	7afb      	ldrb	r3, [r7, #11]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff fe80 	bl	800373c <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003a3c:	7afb      	ldrb	r3, [r7, #11]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff fe7c 	bl	800373c <ILI9341_SPI_Send>
			} while (--i);
 8003a44:	7b7b      	ldrb	r3, [r7, #13]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	737b      	strb	r3, [r7, #13]
 8003a4a:	7b7b      	ldrb	r3, [r7, #13]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1d9      	bne.n	8003a04 <ILI9341_Send_Burst+0x5c>
		while (blocks--) {
 8003a50:	89fb      	ldrh	r3, [r7, #14]
 8003a52:	1e5a      	subs	r2, r3, #1
 8003a54:	81fa      	strh	r2, [r7, #14]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1d2      	bne.n	8003a00 <ILI9341_Send_Burst+0x58>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a62:	737b      	strb	r3, [r7, #13]
 8003a64:	e007      	b.n	8003a76 <ILI9341_Send_Burst+0xce>
			ILI9341_SPI_Send(low_bit);
 8003a66:	7afb      	ldrb	r3, [r7, #11]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff fe67 	bl	800373c <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8003a6e:	7afb      	ldrb	r3, [r7, #11]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff fe63 	bl	800373c <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8003a76:	7b7b      	ldrb	r3, [r7, #13]
 8003a78:	1e5a      	subs	r2, r3, #1
 8003a7a:	737a      	strb	r2, [r7, #13]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1f2      	bne.n	8003a66 <ILI9341_Send_Burst+0xbe>
			ILI9341_SPI_Send(high_bit);
			ILI9341_SPI_Send(low_bit);
		}
	}
	//CS_OFF;
}
 8003a80:	e03f      	b.n	8003b02 <ILI9341_Send_Burst+0x15a>
			i = 16;
 8003a82:	2310      	movs	r3, #16
 8003a84:	737b      	strb	r3, [r7, #13]
				ILI9341_SPI_Send(high_bit);
 8003a86:	7b3b      	ldrb	r3, [r7, #12]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff fe57 	bl	800373c <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003a8e:	7afb      	ldrb	r3, [r7, #11]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff fe53 	bl	800373c <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8003a96:	7b3b      	ldrb	r3, [r7, #12]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff fe4f 	bl	800373c <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003a9e:	7afb      	ldrb	r3, [r7, #11]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff fe4b 	bl	800373c <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8003aa6:	7b3b      	ldrb	r3, [r7, #12]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff fe47 	bl	800373c <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003aae:	7afb      	ldrb	r3, [r7, #11]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff fe43 	bl	800373c <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8003ab6:	7b3b      	ldrb	r3, [r7, #12]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff fe3f 	bl	800373c <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003abe:	7afb      	ldrb	r3, [r7, #11]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff fe3b 	bl	800373c <ILI9341_SPI_Send>
			} while (--i);
 8003ac6:	7b7b      	ldrb	r3, [r7, #13]
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	737b      	strb	r3, [r7, #13]
 8003acc:	7b7b      	ldrb	r3, [r7, #13]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1d9      	bne.n	8003a86 <ILI9341_Send_Burst+0xde>
		while (blocks--) {
 8003ad2:	89fb      	ldrh	r3, [r7, #14]
 8003ad4:	1e5a      	subs	r2, r3, #1
 8003ad6:	81fa      	strh	r2, [r7, #14]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1d2      	bne.n	8003a82 <ILI9341_Send_Burst+0xda>
		for (i = (unsigned char) len & 63; i--;) {
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ae4:	737b      	strb	r3, [r7, #13]
 8003ae6:	e007      	b.n	8003af8 <ILI9341_Send_Burst+0x150>
			ILI9341_SPI_Send(high_bit);
 8003ae8:	7b3b      	ldrb	r3, [r7, #12]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff fe26 	bl	800373c <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8003af0:	7afb      	ldrb	r3, [r7, #11]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff fe22 	bl	800373c <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8003af8:	7b7b      	ldrb	r3, [r7, #13]
 8003afa:	1e5a      	subs	r2, r3, #1
 8003afc:	737a      	strb	r2, [r7, #13]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1f2      	bne.n	8003ae8 <ILI9341_Send_Burst+0x140>
}
 8003b02:	bf00      	nop
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40020000 	.word	0x40020000

08003b10 <ILI9341_Draw_Char>:
	ILI9341_SPI_Send(color1);
	ILI9341_SPI_Send(color2);
}

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 8003b1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d002      	beq.n	8003b2c <ILI9341_Draw_Char+0x1c>
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d053      	beq.n	8003bd2 <ILI9341_Draw_Char+0xc2>
					}
				}
			}
		break;
	}
}
 8003b2a:	e0a5      	b.n	8003c78 <ILI9341_Draw_Char+0x168>
			ILI9341_Set_Address(x, y, x+5, y+8);
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	68b9      	ldr	r1, [r7, #8]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	3305      	adds	r3, #5
 8003b34:	461a      	mov	r2, r3
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	3308      	adds	r3, #8
 8003b3a:	f7ff fe5d 	bl	80037f8 <ILI9341_Set_Address>
			DC_COMMAND;
 8003b3e:	2200      	movs	r2, #0
 8003b40:	2140      	movs	r1, #64	; 0x40
 8003b42:	484f      	ldr	r0, [pc, #316]	; (8003c80 <ILI9341_Draw_Char+0x170>)
 8003b44:	f008 fe92 	bl	800c86c <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8003b48:	202c      	movs	r0, #44	; 0x2c
 8003b4a:	f7ff fdf7 	bl	800373c <ILI9341_SPI_Send>
			DC_DATA;
 8003b4e:	2201      	movs	r2, #1
 8003b50:	2140      	movs	r1, #64	; 0x40
 8003b52:	484b      	ldr	r0, [pc, #300]	; (8003c80 <ILI9341_Draw_Char+0x170>)
 8003b54:	f008 fe8a 	bl	800c86c <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 8003b58:	2300      	movs	r3, #0
 8003b5a:	613b      	str	r3, [r7, #16]
 8003b5c:	e035      	b.n	8003bca <ILI9341_Draw_Char+0xba>
				for(i=2;i<8;i++)
 8003b5e:	2302      	movs	r3, #2
 8003b60:	617b      	str	r3, [r7, #20]
 8003b62:	e02c      	b.n	8003bbe <ILI9341_Draw_Char+0xae>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8003b64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003b68:	3b20      	subs	r3, #32
 8003b6a:	4a46      	ldr	r2, [pc, #280]	; (8003c84 <ILI9341_Draw_Char+0x174>)
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	441a      	add	r2, r3
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	4413      	add	r3, r2
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f1c3 0307 	rsb	r3, r3, #7
 8003b7e:	fa42 f303 	asr.w	r3, r2, r3
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00b      	beq.n	8003ba2 <ILI9341_Draw_Char+0x92>
						ILI9341_SPI_Send(color>>8);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	0a1b      	lsrs	r3, r3, #8
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff fdd3 	bl	800373c <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff fdce 	bl	800373c <ILI9341_SPI_Send>
 8003ba0:	e00a      	b.n	8003bb8 <ILI9341_Draw_Char+0xa8>
						ILI9341_SPI_Send(phone>>8);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	0a1b      	lsrs	r3, r3, #8
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff fdc7 	bl	800373c <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7ff fdc2 	bl	800373c <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2b07      	cmp	r3, #7
 8003bc2:	ddcf      	ble.n	8003b64 <ILI9341_Draw_Char+0x54>
			for(h=0;h<8;h++)
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	613b      	str	r3, [r7, #16]
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	2b07      	cmp	r3, #7
 8003bce:	ddc6      	ble.n	8003b5e <ILI9341_Draw_Char+0x4e>
			break;
 8003bd0:	e052      	b.n	8003c78 <ILI9341_Draw_Char+0x168>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	68b9      	ldr	r1, [r7, #8]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	3307      	adds	r3, #7
 8003bda:	461a      	mov	r2, r3
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	3310      	adds	r3, #16
 8003be0:	f7ff fe0a 	bl	80037f8 <ILI9341_Set_Address>
			DC_COMMAND;
 8003be4:	2200      	movs	r2, #0
 8003be6:	2140      	movs	r1, #64	; 0x40
 8003be8:	4825      	ldr	r0, [pc, #148]	; (8003c80 <ILI9341_Draw_Char+0x170>)
 8003bea:	f008 fe3f 	bl	800c86c <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8003bee:	202c      	movs	r0, #44	; 0x2c
 8003bf0:	f7ff fda4 	bl	800373c <ILI9341_SPI_Send>
			DC_DATA;
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	2140      	movs	r1, #64	; 0x40
 8003bf8:	4821      	ldr	r0, [pc, #132]	; (8003c80 <ILI9341_Draw_Char+0x170>)
 8003bfa:	f008 fe37 	bl	800c86c <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8003bfe:	2300      	movs	r3, #0
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	e035      	b.n	8003c70 <ILI9341_Draw_Char+0x160>
				for(i=0;i<8;i++)
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	e02c      	b.n	8003c64 <ILI9341_Draw_Char+0x154>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8003c0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c0e:	3b20      	subs	r3, #32
 8003c10:	4a1d      	ldr	r2, [pc, #116]	; (8003c88 <ILI9341_Draw_Char+0x178>)
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	441a      	add	r2, r3
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	4413      	add	r3, r2
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f1c3 0307 	rsb	r3, r3, #7
 8003c24:	fa42 f303 	asr.w	r3, r2, r3
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00b      	beq.n	8003c48 <ILI9341_Draw_Char+0x138>
						ILI9341_SPI_Send(color>>8);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	0a1b      	lsrs	r3, r3, #8
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff fd80 	bl	800373c <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff fd7b 	bl	800373c <ILI9341_SPI_Send>
 8003c46:	e00a      	b.n	8003c5e <ILI9341_Draw_Char+0x14e>
						ILI9341_SPI_Send(phone>>8);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	0a1b      	lsrs	r3, r3, #8
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff fd74 	bl	800373c <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff fd6f 	bl	800373c <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	3301      	adds	r3, #1
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	2b07      	cmp	r3, #7
 8003c68:	ddcf      	ble.n	8003c0a <ILI9341_Draw_Char+0xfa>
			for(h=0;h<16;h++)
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	613b      	str	r3, [r7, #16]
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	2b0f      	cmp	r3, #15
 8003c74:	ddc6      	ble.n	8003c04 <ILI9341_Draw_Char+0xf4>
		break;
 8003c76:	bf00      	nop
}
 8003c78:	bf00      	nop
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40020000 	.word	0x40020000
 8003c84:	0801a810 	.word	0x0801a810
 8003c88:	0801aae8 	.word	0x0801aae8

08003c8c <Before_Sending_Data>:

static void Before_Sending_Data() {
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_GPIO_PIN, GPIO_PIN_SET);
 8003c90:	2201      	movs	r2, #1
 8003c92:	2140      	movs	r1, #64	; 0x40
 8003c94:	4802      	ldr	r0, [pc, #8]	; (8003ca0 <Before_Sending_Data+0x14>)
 8003c96:	f008 fde9 	bl	800c86c <HAL_GPIO_WritePin>
//	CS_ON
}
 8003c9a:	bf00      	nop
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40020000 	.word	0x40020000

08003ca4 <Before_Sending_Command>:

static void Before_Sending_Command() {
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_GPIO_PIN, GPIO_PIN_RESET);
 8003ca8:	2200      	movs	r2, #0
 8003caa:	2140      	movs	r1, #64	; 0x40
 8003cac:	4802      	ldr	r0, [pc, #8]	; (8003cb8 <Before_Sending_Command+0x14>)
 8003cae:	f008 fddd 	bl	800c86c <HAL_GPIO_WritePin>
//	CS_ON
}
 8003cb2:	bf00      	nop
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40020000 	.word	0x40020000

08003cbc <main>:
 * @brief  The application entry point.
 * @retval int
 */

int main(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b0a0      	sub	sp, #128	; 0x80
 8003cc0:	af00      	add	r7, sp, #0
	set();
 8003cc2:	f002 fbf3 	bl	80064ac <set>
	const osThreadAttr_t MainTask_attributes = {
 8003cc6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003cca:	2224      	movs	r2, #36	; 0x24
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f011 faa4 	bl	801521c <memset>
 8003cd4:	4b3c      	ldr	r3, [pc, #240]	; (8003dc8 <main+0x10c>)
 8003cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cdc:	673b      	str	r3, [r7, #112]	; 0x70
 8003cde:	2318      	movs	r3, #24
 8003ce0:	677b      	str	r3, [r7, #116]	; 0x74
			.name = "MainTask",
			.stack_size = 1024 * 4,
			.priority = (osPriority_t) osPriorityNormal,
	};

	const osThreadAttr_t EmergencyTask_attributes = {
 8003ce2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003ce6:	2224      	movs	r2, #36	; 0x24
 8003ce8:	2100      	movs	r1, #0
 8003cea:	4618      	mov	r0, r3
 8003cec:	f011 fa96 	bl	801521c <memset>
 8003cf0:	4b36      	ldr	r3, [pc, #216]	; (8003dcc <main+0x110>)
 8003cf2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cfa:	2318      	movs	r3, #24
 8003cfc:	653b      	str	r3, [r7, #80]	; 0x50
			.name = "EmergencyTask",
			.stack_size = 256 * 4,
			.priority = (osPriority_t) osPriorityNormal,
	};

	const osThreadAttr_t TuneTask_attributes = {
 8003cfe:	f107 0314 	add.w	r3, r7, #20
 8003d02:	2224      	movs	r2, #36	; 0x24
 8003d04:	2100      	movs	r1, #0
 8003d06:	4618      	mov	r0, r3
 8003d08:	f011 fa88 	bl	801521c <memset>
 8003d0c:	4b30      	ldr	r3, [pc, #192]	; (8003dd0 <main+0x114>)
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d14:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d16:	2320      	movs	r3, #32
 8003d18:	62fb      	str	r3, [r7, #44]	; 0x2c
			.name = "TuneTask",
			.stack_size = 256 * 4,
			.priority = (osPriority_t) osPriorityAboveNormal,
	};

	const osSemaphoreAttr_t TuneSemaphore_attributes = {
 8003d1a:	1d3b      	adds	r3, r7, #4
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	605a      	str	r2, [r3, #4]
 8003d22:	609a      	str	r2, [r3, #8]
 8003d24:	60da      	str	r2, [r3, #12]
 8003d26:	4b2b      	ldr	r3, [pc, #172]	; (8003dd4 <main+0x118>)
 8003d28:	607b      	str	r3, [r7, #4]
			.name = "TuneSemaphore"
	};

	ILI9341_Init();
 8003d2a:	f7ff fc05 	bl	8003538 <ILI9341_Init>
//	ILI9341_Set_Rotation(1);
	ILI9341_Fill_Screen(BLACK);
 8003d2e:	2000      	movs	r0, #0
 8003d30:	f7ff fd88 	bl	8003844 <ILI9341_Fill_Screen>
	ILI9341_Init_List();
 8003d34:	f002 ffde 	bl	8006cf4 <ILI9341_Init_List>

	osKernelInitialize();
 8003d38:	f00d fe04 	bl	8011944 <osKernelInitialize>

	MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
 8003d3c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003d40:	461a      	mov	r2, r3
 8003d42:	2100      	movs	r1, #0
 8003d44:	4824      	ldr	r0, [pc, #144]	; (8003dd8 <main+0x11c>)
 8003d46:	f00d fe47 	bl	80119d8 <osThreadNew>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	4a23      	ldr	r2, [pc, #140]	; (8003ddc <main+0x120>)
 8003d4e:	6013      	str	r3, [r2, #0]
	EmergencyTaskHandle = osThreadNew(EmergencyTask, NULL, &EmergencyTask_attributes);
 8003d50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003d54:	461a      	mov	r2, r3
 8003d56:	2100      	movs	r1, #0
 8003d58:	4821      	ldr	r0, [pc, #132]	; (8003de0 <main+0x124>)
 8003d5a:	f00d fe3d 	bl	80119d8 <osThreadNew>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	4a20      	ldr	r2, [pc, #128]	; (8003de4 <main+0x128>)
 8003d62:	6013      	str	r3, [r2, #0]
	TuneTaskHandle = osThreadNew(TuneTask, NULL, &TuneTask_attributes);
 8003d64:	f107 0314 	add.w	r3, r7, #20
 8003d68:	461a      	mov	r2, r3
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	481e      	ldr	r0, [pc, #120]	; (8003de8 <main+0x12c>)
 8003d6e:	f00d fe33 	bl	80119d8 <osThreadNew>
 8003d72:	4603      	mov	r3, r0
 8003d74:	4a1d      	ldr	r2, [pc, #116]	; (8003dec <main+0x130>)
 8003d76:	6013      	str	r3, [r2, #0]
	TuneSemaphore = osSemaphoreNew(1, 0, &TuneSemaphore_attributes);
 8003d78:	1d3b      	adds	r3, r7, #4
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	2001      	movs	r0, #1
 8003d80:	f00d ff25 	bl	8011bce <osSemaphoreNew>
 8003d84:	4603      	mov	r3, r0
 8003d86:	4a1a      	ldr	r2, [pc, #104]	; (8003df0 <main+0x134>)
 8003d88:	6013      	str	r3, [r2, #0]
	led2 = 1;
 8003d8a:	4a1a      	ldr	r2, [pc, #104]	; (8003df4 <main+0x138>)
 8003d8c:	7853      	ldrb	r3, [r2, #1]
 8003d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d92:	7053      	strb	r3, [r2, #1]
	osKernelStart();
 8003d94:	f00d fdfa 	bl	801198c <osKernelStart>

	while(1){
		//diagnostic
//		ILI9341_Update_List();
		if(ps4.button == SQUARE){
 8003d98:	4b17      	ldr	r3, [pc, #92]	; (8003df8 <main+0x13c>)
 8003d9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da0:	d1fa      	bne.n	8003d98 <main+0xdc>
			while(ps4.button == SQUARE);
 8003da2:	bf00      	nop
 8003da4:	4b14      	ldr	r3, [pc, #80]	; (8003df8 <main+0x13c>)
 8003da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dac:	d0fa      	beq.n	8003da4 <main+0xe8>
			led3 = !led3;
 8003dae:	4b11      	ldr	r3, [pc, #68]	; (8003df4 <main+0x138>)
 8003db0:	785b      	ldrb	r3, [r3, #1]
 8003db2:	b25b      	sxtb	r3, r3
 8003db4:	4a0f      	ldr	r2, [pc, #60]	; (8003df4 <main+0x138>)
 8003db6:	43db      	mvns	r3, r3
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	09db      	lsrs	r3, r3, #7
 8003dbc:	b2d9      	uxtb	r1, r3
 8003dbe:	7853      	ldrb	r3, [r2, #1]
 8003dc0:	f361 13c7 	bfi	r3, r1, #7, #1
 8003dc4:	7053      	strb	r3, [r2, #1]
		if(ps4.button == SQUARE){
 8003dc6:	e7e7      	b.n	8003d98 <main+0xdc>
 8003dc8:	0801a618 	.word	0x0801a618
 8003dcc:	0801a624 	.word	0x0801a624
 8003dd0:	0801a634 	.word	0x0801a634
 8003dd4:	0801a640 	.word	0x0801a640
 8003dd8:	08003e31 	.word	0x08003e31
 8003ddc:	20007618 	.word	0x20007618
 8003de0:	080040a1 	.word	0x080040a1
 8003de4:	200086d0 	.word	0x200086d0
 8003de8:	08004135 	.word	0x08004135
 8003dec:	20008568 	.word	0x20008568
 8003df0:	20008944 	.word	0x20008944
 8003df4:	40020814 	.word	0x40020814
 8003df8:	200088cc 	.word	0x200088cc

08003dfc <TIM6_DAC_IRQHandler>:
		}
	}
}

void TIM6_DAC_IRQHandler(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
	led1 = !led1;
 8003e00:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <TIM6_DAC_IRQHandler+0x2c>)
 8003e02:	785b      	ldrb	r3, [r3, #1]
 8003e04:	f003 0320 	and.w	r3, r3, #32
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	4a07      	ldr	r2, [pc, #28]	; (8003e28 <TIM6_DAC_IRQHandler+0x2c>)
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	bf0c      	ite	eq
 8003e10:	2301      	moveq	r3, #1
 8003e12:	2300      	movne	r3, #0
 8003e14:	b2d9      	uxtb	r1, r3
 8003e16:	7853      	ldrb	r3, [r2, #1]
 8003e18:	f361 1345 	bfi	r3, r1, #5, #1
 8003e1c:	7053      	strb	r3, [r2, #1]
//		UARTPrintString(&huart2, data);
//	if(!sys.rns_busy)
//		CAN_Open_TxSync(&hcan1);
	HAL_TIM_IRQHandler(&htim6);
 8003e1e:	4803      	ldr	r0, [pc, #12]	; (8003e2c <TIM6_DAC_IRQHandler+0x30>)
 8003e20:	f00b fe6e 	bl	800fb00 <HAL_TIM_IRQHandler>
}
 8003e24:	bf00      	nop
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40020814 	.word	0x40020814
 8003e2c:	2000662c 	.word	0x2000662c

08003e30 <MainTask>:


void MainTask(void *argument)
{
 8003e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e34:	b094      	sub	sp, #80	; 0x50
 8003e36:	af0c      	add	r7, sp, #48	; 0x30
 8003e38:	61f8      	str	r0, [r7, #28]
	while(1)
	{
		realMODN(&ps4, &rns);
 8003e3a:	4985      	ldr	r1, [pc, #532]	; (8004050 <MainTask+0x220>)
 8003e3c:	4885      	ldr	r0, [pc, #532]	; (8004054 <MainTask+0x224>)
 8003e3e:	f000 fb6f 	bl	8004520 <realMODN>

		if(ps4.button == OPTION)
 8003e42:	4b84      	ldr	r3, [pc, #528]	; (8004054 <MainTask+0x224>)
 8003e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e4a:	d116      	bne.n	8003e7a <MainTask+0x4a>
		{
			while(ps4.button == OPTION);
 8003e4c:	bf00      	nop
 8003e4e:	4b81      	ldr	r3, [pc, #516]	; (8004054 <MainTask+0x224>)
 8003e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e56:	d0fa      	beq.n	8003e4e <MainTask+0x1e>
			led3 = !led3;
 8003e58:	4b7f      	ldr	r3, [pc, #508]	; (8004058 <MainTask+0x228>)
 8003e5a:	785b      	ldrb	r3, [r3, #1]
 8003e5c:	b25b      	sxtb	r3, r3
 8003e5e:	4a7e      	ldr	r2, [pc, #504]	; (8004058 <MainTask+0x228>)
 8003e60:	43db      	mvns	r3, r3
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	09db      	lsrs	r3, r3, #7
 8003e66:	b2d9      	uxtb	r1, r3
 8003e68:	7853      	ldrb	r3, [r2, #1]
 8003e6a:	f361 13c7 	bfi	r3, r1, #7, #1
 8003e6e:	7053      	strb	r3, [r2, #1]
			sys.tunePid = 1;
 8003e70:	4a7a      	ldr	r2, [pc, #488]	; (800405c <MainTask+0x22c>)
 8003e72:	7813      	ldrb	r3, [r2, #0]
 8003e74:	f043 0302 	orr.w	r3, r3, #2
 8003e78:	7013      	strb	r3, [r2, #0]
		}

		if(ps4.button == TRIANGLE)
 8003e7a:	4b76      	ldr	r3, [pc, #472]	; (8004054 <MainTask+0x224>)
 8003e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e82:	d120      	bne.n	8003ec6 <MainTask+0x96>
		{
			if(sys.pp_ready)
 8003e84:	4b75      	ldr	r3, [pc, #468]	; (800405c <MainTask+0x22c>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d013      	beq.n	8003eba <MainTask+0x8a>
//				1.0, 0.5, 0.5
				//RNSSet(&rns, RNS_PPPathPID, kp[0], ki[0], kd[0]);
//				0.5, 0.1, 0.7
				//RNSSet(&rns, RNS_PPEndPID, kp[1], ki[1], kd[1]);
//				5.0, 0.2, 0.2//z
				RNSPPstart(PP_Points, point_num, &rns);
 8003e92:	4b73      	ldr	r3, [pc, #460]	; (8004060 <MainTask+0x230>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a73      	ldr	r2, [pc, #460]	; (8004064 <MainTask+0x234>)
 8003e98:	6811      	ldr	r1, [r2, #0]
 8003e9a:	4a6d      	ldr	r2, [pc, #436]	; (8004050 <MainTask+0x220>)
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f001 fa0f 	bl	80052c0 <RNSPPstart>
				HAL_UART_Transmit(&huart5, (uint8_t* )"PP Start\n", 9, HAL_MAX_DELAY);
 8003ea2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ea6:	2209      	movs	r2, #9
 8003ea8:	496f      	ldr	r1, [pc, #444]	; (8004068 <MainTask+0x238>)
 8003eaa:	4870      	ldr	r0, [pc, #448]	; (800406c <MainTask+0x23c>)
 8003eac:	f00c fccf 	bl	801084e <HAL_UART_Transmit>
				sys.pp_start = 1;
 8003eb0:	4a6a      	ldr	r2, [pc, #424]	; (800405c <MainTask+0x22c>)
 8003eb2:	7813      	ldrb	r3, [r2, #0]
 8003eb4:	f043 0308 	orr.w	r3, r3, #8
 8003eb8:	7013      	strb	r3, [r2, #0]
			}
			while(ps4.button == TRIANGLE){}
 8003eba:	bf00      	nop
 8003ebc:	4b65      	ldr	r3, [pc, #404]	; (8004054 <MainTask+0x224>)
 8003ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec4:	d0fa      	beq.n	8003ebc <MainTask+0x8c>
		}

		if(ps4.button == UP)
 8003ec6:	4b63      	ldr	r3, [pc, #396]	; (8004054 <MainTask+0x224>)
 8003ec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eca:	2b10      	cmp	r3, #16
 8003ecc:	d103      	bne.n	8003ed6 <MainTask+0xa6>
		{
			setSpeedMODN(3.0);
 8003ece:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003ed2:	f000 fda5 	bl	8004a20 <setSpeedMODN>
		}

		if(ps4.button == DOWN)
 8003ed6:	4b5f      	ldr	r3, [pc, #380]	; (8004054 <MainTask+0x224>)
 8003ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eda:	2b40      	cmp	r3, #64	; 0x40
 8003edc:	d103      	bne.n	8003ee6 <MainTask+0xb6>
		{
			setSpeedMODN(2.0);
 8003ede:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8003ee2:	f000 fd9d 	bl	8004a20 <setSpeedMODN>
		}

		if(ps4.button == CROSS)
 8003ee6:	4b5b      	ldr	r3, [pc, #364]	; (8004054 <MainTask+0x224>)
 8003ee8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003eee:	d119      	bne.n	8003f24 <MainTask+0xf4>
		{
			HAL_UART_Transmit(&huart5, (uint8_t*)"Cross is pressed\n", 17, HAL_MAX_DELAY);
 8003ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ef4:	2211      	movs	r2, #17
 8003ef6:	495e      	ldr	r1, [pc, #376]	; (8004070 <MainTask+0x240>)
 8003ef8:	485c      	ldr	r0, [pc, #368]	; (800406c <MainTask+0x23c>)
 8003efa:	f00c fca8 	bl	801084e <HAL_UART_Transmit>
			RNSStop(&rns);
 8003efe:	4854      	ldr	r0, [pc, #336]	; (8004050 <MainTask+0x220>)
 8003f00:	f001 f938 	bl	8005174 <RNSStop>
//			{
//				free(PP_Points[i]);
//			}
//			free(PP_Points);

			sys.pp_ready = 0;
 8003f04:	4a55      	ldr	r2, [pc, #340]	; (800405c <MainTask+0x22c>)
 8003f06:	7813      	ldrb	r3, [r2, #0]
 8003f08:	f36f 0382 	bfc	r3, #2, #1
 8003f0c:	7013      	strb	r3, [r2, #0]
			sys.pp_start = 0;
 8003f0e:	4a53      	ldr	r2, [pc, #332]	; (800405c <MainTask+0x22c>)
 8003f10:	7813      	ldrb	r3, [r2, #0]
 8003f12:	f36f 03c3 	bfc	r3, #3, #1
 8003f16:	7013      	strb	r3, [r2, #0]
			while(ps4.button == CROSS){}
 8003f18:	bf00      	nop
 8003f1a:	4b4e      	ldr	r3, [pc, #312]	; (8004054 <MainTask+0x224>)
 8003f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f22:	d0fa      	beq.n	8003f1a <MainTask+0xea>
		}

		if(ps4.button == CIRCLE)
 8003f24:	4b4b      	ldr	r3, [pc, #300]	; (8004054 <MainTask+0x224>)
 8003f26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f2c:	d119      	bne.n	8003f62 <MainTask+0x132>
		{
			HAL_UART_Transmit(&huart5, (uint8_t*)"Circle is pressed\n", 18, HAL_MAX_DELAY);
 8003f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f32:	2212      	movs	r2, #18
 8003f34:	494f      	ldr	r1, [pc, #316]	; (8004074 <MainTask+0x244>)
 8003f36:	484d      	ldr	r0, [pc, #308]	; (800406c <MainTask+0x23c>)
 8003f38:	f00c fc89 	bl	801084e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart5, send_buf, strlen((char*)send_buf), HAL_MAX_DELAY);
 8003f3c:	484e      	ldr	r0, [pc, #312]	; (8004078 <MainTask+0x248>)
 8003f3e:	f7fc f947 	bl	80001d0 <strlen>
 8003f42:	4603      	mov	r3, r0
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f4a:	494b      	ldr	r1, [pc, #300]	; (8004078 <MainTask+0x248>)
 8003f4c:	4847      	ldr	r0, [pc, #284]	; (800406c <MainTask+0x23c>)
 8003f4e:	f00c fc7e 	bl	801084e <HAL_UART_Transmit>
		}

		while(sys.tunePid)
 8003f52:	e006      	b.n	8003f62 <MainTask+0x132>
			tunePID(tuneUart, &ps4, &rns);
 8003f54:	4b49      	ldr	r3, [pc, #292]	; (800407c <MainTask+0x24c>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a3d      	ldr	r2, [pc, #244]	; (8004050 <MainTask+0x220>)
 8003f5a:	493e      	ldr	r1, [pc, #248]	; (8004054 <MainTask+0x224>)
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f003 fdc7 	bl	8007af0 <tunePID>
		while(sys.tunePid)
 8003f62:	4b3e      	ldr	r3, [pc, #248]	; (800405c <MainTask+0x22c>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1f1      	bne.n	8003f54 <MainTask+0x124>

		RNSEnquire(RNS_POS_BOTH, &rns);
 8003f70:	4937      	ldr	r1, [pc, #220]	; (8004050 <MainTask+0x220>)
 8003f72:	2056      	movs	r0, #86	; 0x56
 8003f74:	f001 fc7a 	bl	800586c <RNSEnquire>
		FLEnc = rns.enq.enq_buffer[0].data;
 8003f78:	4b35      	ldr	r3, [pc, #212]	; (8004050 <MainTask+0x220>)
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7c:	4a40      	ldr	r2, [pc, #256]	; (8004080 <MainTask+0x250>)
 8003f7e:	6013      	str	r3, [r2, #0]
		FREnc = rns.enq.enq_buffer[1].data;
 8003f80:	4b33      	ldr	r3, [pc, #204]	; (8004050 <MainTask+0x220>)
 8003f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f84:	4a3f      	ldr	r2, [pc, #252]	; (8004084 <MainTask+0x254>)
 8003f86:	6013      	str	r3, [r2, #0]
		BLEnc = rns.enq.enq_buffer[2].data;
 8003f88:	4b31      	ldr	r3, [pc, #196]	; (8004050 <MainTask+0x220>)
 8003f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f8c:	4a3e      	ldr	r2, [pc, #248]	; (8004088 <MainTask+0x258>)
 8003f8e:	6013      	str	r3, [r2, #0]
		BREnc = rns.enq.enq_buffer[3].data;
 8003f90:	4b2f      	ldr	r3, [pc, #188]	; (8004050 <MainTask+0x220>)
 8003f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f94:	4a3d      	ldr	r2, [pc, #244]	; (800408c <MainTask+0x25c>)
 8003f96:	6013      	str	r3, [r2, #0]

		RNSEnquire(RNS_X_Y_POS, &rns);
 8003f98:	492d      	ldr	r1, [pc, #180]	; (8004050 <MainTask+0x220>)
 8003f9a:	2059      	movs	r0, #89	; 0x59
 8003f9c:	f001 fc66 	bl	800586c <RNSEnquire>
		XEnc = rns.enq.enq_buffer[0].data;
 8003fa0:	4b2b      	ldr	r3, [pc, #172]	; (8004050 <MainTask+0x220>)
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	4a3a      	ldr	r2, [pc, #232]	; (8004090 <MainTask+0x260>)
 8003fa6:	6013      	str	r3, [r2, #0]
		YEnc = rns.enq.enq_buffer[1].data;
 8003fa8:	4b29      	ldr	r3, [pc, #164]	; (8004050 <MainTask+0x220>)
 8003faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fac:	4a39      	ldr	r2, [pc, #228]	; (8004094 <MainTask+0x264>)
 8003fae:	6013      	str	r3, [r2, #0]

		RNSEnquire(RNS_COORDINATE_X_Y_Z_Zrad, &rns);
 8003fb0:	4927      	ldr	r1, [pc, #156]	; (8004050 <MainTask+0x220>)
 8003fb2:	205f      	movs	r0, #95	; 0x5f
 8003fb4:	f001 fc5a 	bl	800586c <RNSEnquire>
		yaw = rns.enq.enq_buffer[2].data;
 8003fb8:	4b25      	ldr	r3, [pc, #148]	; (8004050 <MainTask+0x220>)
 8003fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fbc:	4a36      	ldr	r2, [pc, #216]	; (8004098 <MainTask+0x268>)
 8003fbe:	6013      	str	r3, [r2, #0]

		sprintf((char*)send_buf, "A: %.2f B: %.2f C: %.2f D: %.2f X: %.2f Y: %.2f Yaw: %.2f\n", FLEnc, FREnc, BLEnc, BREnc, XEnc, YEnc, yaw);
 8003fc0:	4b2f      	ldr	r3, [pc, #188]	; (8004080 <MainTask+0x250>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fc fabf 	bl	8000548 <__aeabi_f2d>
 8003fca:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003fce:	4b2d      	ldr	r3, [pc, #180]	; (8004084 <MainTask+0x254>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fc fab8 	bl	8000548 <__aeabi_f2d>
 8003fd8:	4680      	mov	r8, r0
 8003fda:	4689      	mov	r9, r1
 8003fdc:	4b2a      	ldr	r3, [pc, #168]	; (8004088 <MainTask+0x258>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fc fab1 	bl	8000548 <__aeabi_f2d>
 8003fe6:	4682      	mov	sl, r0
 8003fe8:	468b      	mov	fp, r1
 8003fea:	4b28      	ldr	r3, [pc, #160]	; (800408c <MainTask+0x25c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fc faaa 	bl	8000548 <__aeabi_f2d>
 8003ff4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003ff8:	4b25      	ldr	r3, [pc, #148]	; (8004090 <MainTask+0x260>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fc faa3 	bl	8000548 <__aeabi_f2d>
 8004002:	e9c7 0100 	strd	r0, r1, [r7]
 8004006:	4b23      	ldr	r3, [pc, #140]	; (8004094 <MainTask+0x264>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f7fc fa9c 	bl	8000548 <__aeabi_f2d>
 8004010:	4604      	mov	r4, r0
 8004012:	460d      	mov	r5, r1
 8004014:	4b20      	ldr	r3, [pc, #128]	; (8004098 <MainTask+0x268>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f7fc fa95 	bl	8000548 <__aeabi_f2d>
 800401e:	4602      	mov	r2, r0
 8004020:	460b      	mov	r3, r1
 8004022:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004026:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800402a:	ed97 7b00 	vldr	d7, [r7]
 800402e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004032:	ed97 7b02 	vldr	d7, [r7, #8]
 8004036:	ed8d 7b04 	vstr	d7, [sp, #16]
 800403a:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800403e:	e9cd 8900 	strd	r8, r9, [sp]
 8004042:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004046:	4915      	ldr	r1, [pc, #84]	; (800409c <MainTask+0x26c>)
 8004048:	480b      	ldr	r0, [pc, #44]	; (8004078 <MainTask+0x248>)
 800404a:	f012 f8c1 	bl	80161d0 <siprintf>
		realMODN(&ps4, &rns);
 800404e:	e6f4      	b.n	8003e3a <MainTask+0xa>
 8004050:	20007c7c 	.word	0x20007c7c
 8004054:	200088cc 	.word	0x200088cc
 8004058:	40020814 	.word	0x40020814
 800405c:	20007254 	.word	0x20007254
 8004060:	20007ef0 	.word	0x20007ef0
 8004064:	20007f34 	.word	0x20007f34
 8004068:	0801a650 	.word	0x0801a650
 800406c:	20006464 	.word	0x20006464
 8004070:	0801a65c 	.word	0x0801a65c
 8004074:	0801a670 	.word	0x0801a670
 8004078:	2000894c 	.word	0x2000894c
 800407c:	20008bec 	.word	0x20008bec
 8004080:	20007410 	.word	0x20007410
 8004084:	2000830c 	.word	0x2000830c
 8004088:	20008314 	.word	0x20008314
 800408c:	200088c0 	.word	0x200088c0
 8004090:	2000706c 	.word	0x2000706c
 8004094:	200088c8 	.word	0x200088c8
 8004098:	200086c0 	.word	0x200086c0
 800409c:	0801a684 	.word	0x0801a684

080040a0 <EmergencyTask>:
		//HAL_UART_Transmit(&huart5, send_buf, strlen((char*)send_buf), HAL_MAX_DELAY);
	}
}

void EmergencyTask(void *argument){
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b08c      	sub	sp, #48	; 0x30
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]

	while(1){

		if(ps4.button == TOUCH){
 80040a8:	4b1a      	ldr	r3, [pc, #104]	; (8004114 <EmergencyTask+0x74>)
 80040aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040b0:	d1fa      	bne.n	80040a8 <EmergencyTask+0x8>
			RNSStop(&rns);
 80040b2:	4819      	ldr	r0, [pc, #100]	; (8004118 <EmergencyTask+0x78>)
 80040b4:	f001 f85e 	bl	8005174 <RNSStop>
			VESCStop(&vesc1);
 80040b8:	4818      	ldr	r0, [pc, #96]	; (800411c <EmergencyTask+0x7c>)
 80040ba:	f006 f9a7 	bl	800a40c <VESCStop>
			osThreadSuspend(FlywheelPitchPIDTaskHandle);
 80040be:	4b18      	ldr	r3, [pc, #96]	; (8004120 <EmergencyTask+0x80>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f00d fd1a 	bl	8011afc <osThreadSuspend>
			osThreadSuspend(FlywheelYawPIDTaskHandle);
 80040c8:	4b16      	ldr	r3, [pc, #88]	; (8004124 <EmergencyTask+0x84>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f00d fd15 	bl	8011afc <osThreadSuspend>
			osThreadTerminate(MainTaskHandle);
 80040d2:	4b15      	ldr	r3, [pc, #84]	; (8004128 <EmergencyTask+0x88>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f00d fd31 	bl	8011b3e <osThreadTerminate>
			osDelay(5);
 80040dc:	2005      	movs	r0, #5
 80040de:	f00d fd5b 	bl	8011b98 <osDelay>

			const osThreadAttr_t MainTask_attributes = {
 80040e2:	f107 030c 	add.w	r3, r7, #12
 80040e6:	2224      	movs	r2, #36	; 0x24
 80040e8:	2100      	movs	r1, #0
 80040ea:	4618      	mov	r0, r3
 80040ec:	f011 f896 	bl	801521c <memset>
 80040f0:	4b0e      	ldr	r3, [pc, #56]	; (800412c <EmergencyTask+0x8c>)
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040f8:	623b      	str	r3, [r7, #32]
 80040fa:	2318      	movs	r3, #24
 80040fc:	627b      	str	r3, [r7, #36]	; 0x24
					.name = "MainTask",
					.stack_size = 256 * 4,
					.priority = (osPriority_t) osPriorityNormal,
			};

			MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
 80040fe:	f107 030c 	add.w	r3, r7, #12
 8004102:	461a      	mov	r2, r3
 8004104:	2100      	movs	r1, #0
 8004106:	480a      	ldr	r0, [pc, #40]	; (8004130 <EmergencyTask+0x90>)
 8004108:	f00d fc66 	bl	80119d8 <osThreadNew>
 800410c:	4603      	mov	r3, r0
 800410e:	4a06      	ldr	r2, [pc, #24]	; (8004128 <EmergencyTask+0x88>)
 8004110:	6013      	str	r3, [r2, #0]
		if(ps4.button == TOUCH){
 8004112:	e7c9      	b.n	80040a8 <EmergencyTask+0x8>
 8004114:	200088cc 	.word	0x200088cc
 8004118:	20007c7c 	.word	0x20007c7c
 800411c:	20007100 	.word	0x20007100
 8004120:	200080fc 	.word	0x200080fc
 8004124:	2000724c 	.word	0x2000724c
 8004128:	20007618 	.word	0x20007618
 800412c:	0801a618 	.word	0x0801a618
 8004130:	08003e31 	.word	0x08003e31

08004134 <TuneTask>:
		}

	}
}

void TuneTask(void *argument){
 8004134:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004138:	b088      	sub	sp, #32
 800413a:	af04      	add	r7, sp, #16
 800413c:	6078      	str	r0, [r7, #4]
	tunePending();
 800413e:	f003 f8cf 	bl	80072e0 <tunePending>
	int page = -1;
 8004142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004146:	60fb      	str	r3, [r7, #12]
	while(1){
		osSemaphoreAcquire(TuneSemaphore,osWaitForever);
 8004148:	4b95      	ldr	r3, [pc, #596]	; (80043a0 <TuneTask+0x26c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004150:	4618      	mov	r0, r3
 8004152:	f00d fdc5 	bl	8011ce0 <osSemaphoreAcquire>

		if(tuneCommand == '0'){
 8004156:	4b93      	ldr	r3, [pc, #588]	; (80043a4 <TuneTask+0x270>)
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	2b30      	cmp	r3, #48	; 0x30
 800415c:	d106      	bne.n	800416c <TuneTask+0x38>
			page = 0;
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]
			tuneInit(page);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	b2db      	uxtb	r3, r3
 8004166:	4618      	mov	r0, r3
 8004168:	f003 f8ca 	bl	8007300 <tuneInit>
		}
		if(tuneCommand == '1'){
 800416c:	4b8d      	ldr	r3, [pc, #564]	; (80043a4 <TuneTask+0x270>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b31      	cmp	r3, #49	; 0x31
 8004172:	d106      	bne.n	8004182 <TuneTask+0x4e>
			page = 1;
 8004174:	2301      	movs	r3, #1
 8004176:	60fb      	str	r3, [r7, #12]
			tuneInit(page);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	b2db      	uxtb	r3, r3
 800417c:	4618      	mov	r0, r3
 800417e:	f003 f8bf 	bl	8007300 <tuneInit>
		}
		if(tuneCommand == '2'){
 8004182:	4b88      	ldr	r3, [pc, #544]	; (80043a4 <TuneTask+0x270>)
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	2b32      	cmp	r3, #50	; 0x32
 8004188:	d106      	bne.n	8004198 <TuneTask+0x64>
			page = 2;
 800418a:	2302      	movs	r3, #2
 800418c:	60fb      	str	r3, [r7, #12]
			tuneInit(page);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	b2db      	uxtb	r3, r3
 8004192:	4618      	mov	r0, r3
 8004194:	f003 f8b4 	bl	8007300 <tuneInit>
		}
		if(tuneCommand == '3'){
 8004198:	4b82      	ldr	r3, [pc, #520]	; (80043a4 <TuneTask+0x270>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b33      	cmp	r3, #51	; 0x33
 800419e:	d106      	bne.n	80041ae <TuneTask+0x7a>
			page = 3;
 80041a0:	2303      	movs	r3, #3
 80041a2:	60fb      	str	r3, [r7, #12]
			tuneInit(page);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	4618      	mov	r0, r3
 80041aa:	f003 f8a9 	bl	8007300 <tuneInit>
		}
		if(tuneCommand == '4'){
 80041ae:	4b7d      	ldr	r3, [pc, #500]	; (80043a4 <TuneTask+0x270>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	2b34      	cmp	r3, #52	; 0x34
 80041b4:	d106      	bne.n	80041c4 <TuneTask+0x90>
			page = 4;
 80041b6:	2304      	movs	r3, #4
 80041b8:	60fb      	str	r3, [r7, #12]
			tuneInit(page);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	4618      	mov	r0, r3
 80041c0:	f003 f89e 	bl	8007300 <tuneInit>
		}

		if(tuneCommand == 'r'){
 80041c4:	4b77      	ldr	r3, [pc, #476]	; (80043a4 <TuneTask+0x270>)
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b72      	cmp	r3, #114	; 0x72
 80041ca:	d104      	bne.n	80041d6 <TuneTask+0xa2>
			tuneUpdate(page);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	4618      	mov	r0, r3
 80041d2:	f003 f9c9 	bl	8007568 <tuneUpdate>
		}

		if(tuneCommand == 'w'){
 80041d6:	4b73      	ldr	r3, [pc, #460]	; (80043a4 <TuneTask+0x270>)
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b77      	cmp	r3, #119	; 0x77
 80041dc:	d13d      	bne.n	800425a <TuneTask+0x126>
			led3 = 0; led2 = 1;
 80041de:	4a72      	ldr	r2, [pc, #456]	; (80043a8 <TuneTask+0x274>)
 80041e0:	7853      	ldrb	r3, [r2, #1]
 80041e2:	f36f 13c7 	bfc	r3, #7, #1
 80041e6:	7053      	strb	r3, [r2, #1]
 80041e8:	4a6f      	ldr	r2, [pc, #444]	; (80043a8 <TuneTask+0x274>)
 80041ea:	7853      	ldrb	r3, [r2, #1]
 80041ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041f0:	7053      	strb	r3, [r2, #1]
			led2 = 0;
 80041f2:	4a6d      	ldr	r2, [pc, #436]	; (80043a8 <TuneTask+0x274>)
 80041f4:	7853      	ldrb	r3, [r2, #1]
 80041f6:	f36f 1386 	bfc	r3, #6, #1
 80041fa:	7053      	strb	r3, [r2, #1]
			uint32_t writeSuccess=0;
 80041fc:	2300      	movs	r3, #0
 80041fe:	60bb      	str	r3, [r7, #8]
			writeSuccess += tuneWriteInt();
 8004200:	f003 fb40 	bl	8007884 <tuneWriteInt>
 8004204:	4602      	mov	r2, r0
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	4413      	add	r3, r2
 800420a:	60bb      	str	r3, [r7, #8]
			writeSuccess += tuneWriteFloat();
 800420c:	f003 fba2 	bl	8007954 <tuneWriteFloat>
 8004210:	4602      	mov	r2, r0
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	4413      	add	r3, r2
 8004216:	60bb      	str	r3, [r7, #8]

			if( writeSuccess == tuneWriteSuccess){
 8004218:	4b64      	ldr	r3, [pc, #400]	; (80043ac <TuneTask+0x278>)
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	461a      	mov	r2, r3
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	4293      	cmp	r3, r2
 8004222:	d10c      	bne.n	800423e <TuneTask+0x10a>
				HAL_UART_Transmit(tuneUart, (uint8_t *)((char *)"EEPROM WRITTEN\n"), 15, 10);
 8004224:	4b62      	ldr	r3, [pc, #392]	; (80043b0 <TuneTask+0x27c>)
 8004226:	6818      	ldr	r0, [r3, #0]
 8004228:	230a      	movs	r3, #10
 800422a:	220f      	movs	r2, #15
 800422c:	4961      	ldr	r1, [pc, #388]	; (80043b4 <TuneTask+0x280>)
 800422e:	f00c fb0e 	bl	801084e <HAL_UART_Transmit>
				led2 = 1;
 8004232:	4a5d      	ldr	r2, [pc, #372]	; (80043a8 <TuneTask+0x274>)
 8004234:	7853      	ldrb	r3, [r2, #1]
 8004236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800423a:	7053      	strb	r3, [r2, #1]
 800423c:	e00b      	b.n	8004256 <TuneTask+0x122>
			}else{
				HAL_UART_Transmit(tuneUart, (uint8_t *)((char *)"EEPROM WRITE FAIL\n"), 18, 10);
 800423e:	4b5c      	ldr	r3, [pc, #368]	; (80043b0 <TuneTask+0x27c>)
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	230a      	movs	r3, #10
 8004244:	2212      	movs	r2, #18
 8004246:	495c      	ldr	r1, [pc, #368]	; (80043b8 <TuneTask+0x284>)
 8004248:	f00c fb01 	bl	801084e <HAL_UART_Transmit>
				led3 = 1;
 800424c:	4a56      	ldr	r2, [pc, #344]	; (80043a8 <TuneTask+0x274>)
 800424e:	7853      	ldrb	r3, [r2, #1]
 8004250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004254:	7053      	strb	r3, [r2, #1]
			}
			tunePending();
 8004256:	f003 f843 	bl	80072e0 <tunePending>
		}

		if(tuneCommand == 'e'){
 800425a:	4b52      	ldr	r3, [pc, #328]	; (80043a4 <TuneTask+0x270>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b65      	cmp	r3, #101	; 0x65
 8004260:	d104      	bne.n	800426c <TuneTask+0x138>
			tuneEdit(page);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	b2db      	uxtb	r3, r3
 8004266:	4618      	mov	r0, r3
 8004268:	f003 fa50 	bl	800770c <tuneEdit>
		}
		if(tune_flag.editTerminated && page == 0){
 800426c:	4b53      	ldr	r3, [pc, #332]	; (80043bc <TuneTask+0x288>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	f43f af66 	beq.w	8004148 <TuneTask+0x14>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2b00      	cmp	r3, #0
 8004280:	f47f af62 	bne.w	8004148 <TuneTask+0x14>
			led3 = !led3;
 8004284:	4b48      	ldr	r3, [pc, #288]	; (80043a8 <TuneTask+0x274>)
 8004286:	785b      	ldrb	r3, [r3, #1]
 8004288:	b25b      	sxtb	r3, r3
 800428a:	4a47      	ldr	r2, [pc, #284]	; (80043a8 <TuneTask+0x274>)
 800428c:	43db      	mvns	r3, r3
 800428e:	b2db      	uxtb	r3, r3
 8004290:	09db      	lsrs	r3, r3, #7
 8004292:	b2d9      	uxtb	r1, r3
 8004294:	7853      	ldrb	r3, [r2, #1]
 8004296:	f361 13c7 	bfi	r3, r1, #7, #1
 800429a:	7053      	strb	r3, [r2, #1]
			RNSSet(&rns, RNS_F_LEFT_VEL_PID,  AP, AI, AD);   //
 800429c:	4b48      	ldr	r3, [pc, #288]	; (80043c0 <TuneTask+0x28c>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fc f951 	bl	8000548 <__aeabi_f2d>
 80042a6:	4680      	mov	r8, r0
 80042a8:	4689      	mov	r9, r1
 80042aa:	4b46      	ldr	r3, [pc, #280]	; (80043c4 <TuneTask+0x290>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fc f94a 	bl	8000548 <__aeabi_f2d>
 80042b4:	4604      	mov	r4, r0
 80042b6:	460d      	mov	r5, r1
 80042b8:	4b43      	ldr	r3, [pc, #268]	; (80043c8 <TuneTask+0x294>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fc f943 	bl	8000548 <__aeabi_f2d>
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80042ca:	e9cd 4500 	strd	r4, r5, [sp]
 80042ce:	4642      	mov	r2, r8
 80042d0:	464b      	mov	r3, r9
 80042d2:	212f      	movs	r1, #47	; 0x2f
 80042d4:	483d      	ldr	r0, [pc, #244]	; (80043cc <TuneTask+0x298>)
 80042d6:	f001 f90f 	bl	80054f8 <RNSSet>
			RNSSet(&rns, RNS_F_RIGHT_VEL_PID, BP, BI, BD);   //
 80042da:	4b3d      	ldr	r3, [pc, #244]	; (80043d0 <TuneTask+0x29c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fc f932 	bl	8000548 <__aeabi_f2d>
 80042e4:	4680      	mov	r8, r0
 80042e6:	4689      	mov	r9, r1
 80042e8:	4b3a      	ldr	r3, [pc, #232]	; (80043d4 <TuneTask+0x2a0>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fc f92b 	bl	8000548 <__aeabi_f2d>
 80042f2:	4604      	mov	r4, r0
 80042f4:	460d      	mov	r5, r1
 80042f6:	4b38      	ldr	r3, [pc, #224]	; (80043d8 <TuneTask+0x2a4>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fc f924 	bl	8000548 <__aeabi_f2d>
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004308:	e9cd 4500 	strd	r4, r5, [sp]
 800430c:	4642      	mov	r2, r8
 800430e:	464b      	mov	r3, r9
 8004310:	2130      	movs	r1, #48	; 0x30
 8004312:	482e      	ldr	r0, [pc, #184]	; (80043cc <TuneTask+0x298>)
 8004314:	f001 f8f0 	bl	80054f8 <RNSSet>
			RNSSet(&rns, RNS_B_LEFT_VEL_PID,  CP, CI, CD);   //
 8004318:	4b30      	ldr	r3, [pc, #192]	; (80043dc <TuneTask+0x2a8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f7fc f913 	bl	8000548 <__aeabi_f2d>
 8004322:	4680      	mov	r8, r0
 8004324:	4689      	mov	r9, r1
 8004326:	4b2e      	ldr	r3, [pc, #184]	; (80043e0 <TuneTask+0x2ac>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f7fc f90c 	bl	8000548 <__aeabi_f2d>
 8004330:	4604      	mov	r4, r0
 8004332:	460d      	mov	r5, r1
 8004334:	4b2b      	ldr	r3, [pc, #172]	; (80043e4 <TuneTask+0x2b0>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4618      	mov	r0, r3
 800433a:	f7fc f905 	bl	8000548 <__aeabi_f2d>
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004346:	e9cd 4500 	strd	r4, r5, [sp]
 800434a:	4642      	mov	r2, r8
 800434c:	464b      	mov	r3, r9
 800434e:	2131      	movs	r1, #49	; 0x31
 8004350:	481e      	ldr	r0, [pc, #120]	; (80043cc <TuneTask+0x298>)
 8004352:	f001 f8d1 	bl	80054f8 <RNSSet>
			RNSSet(&rns, RNS_B_RIGHT_VEL_PID, DP, DI, DD);   //
 8004356:	4b24      	ldr	r3, [pc, #144]	; (80043e8 <TuneTask+0x2b4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f7fc f8f4 	bl	8000548 <__aeabi_f2d>
 8004360:	4680      	mov	r8, r0
 8004362:	4689      	mov	r9, r1
 8004364:	4b21      	ldr	r3, [pc, #132]	; (80043ec <TuneTask+0x2b8>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4618      	mov	r0, r3
 800436a:	f7fc f8ed 	bl	8000548 <__aeabi_f2d>
 800436e:	4604      	mov	r4, r0
 8004370:	460d      	mov	r5, r1
 8004372:	4b1f      	ldr	r3, [pc, #124]	; (80043f0 <TuneTask+0x2bc>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4618      	mov	r0, r3
 8004378:	f7fc f8e6 	bl	8000548 <__aeabi_f2d>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004384:	e9cd 4500 	strd	r4, r5, [sp]
 8004388:	4642      	mov	r2, r8
 800438a:	464b      	mov	r3, r9
 800438c:	2132      	movs	r1, #50	; 0x32
 800438e:	480f      	ldr	r0, [pc, #60]	; (80043cc <TuneTask+0x298>)
 8004390:	f001 f8b2 	bl	80054f8 <RNSSet>
			tune_flag.editTerminated = 0;
 8004394:	4a09      	ldr	r2, [pc, #36]	; (80043bc <TuneTask+0x288>)
 8004396:	7813      	ldrb	r3, [r2, #0]
 8004398:	f36f 0300 	bfc	r3, #0, #1
 800439c:	7013      	strb	r3, [r2, #0]
		osSemaphoreAcquire(TuneSemaphore,osWaitForever);
 800439e:	e6d3      	b.n	8004148 <TuneTask+0x14>
 80043a0:	20008944 	.word	0x20008944
 80043a4:	20007f31 	.word	0x20007f31
 80043a8:	40020814 	.word	0x40020814
 80043ac:	20007f30 	.word	0x20007f30
 80043b0:	20008bec 	.word	0x20008bec
 80043b4:	0801a6c0 	.word	0x0801a6c0
 80043b8:	0801a6d0 	.word	0x0801a6d0
 80043bc:	200086c8 	.word	0x200086c8
 80043c0:	20008b88 	.word	0x20008b88
 80043c4:	20007248 	.word	0x20007248
 80043c8:	20008b84 	.word	0x20008b84
 80043cc:	20007c7c 	.word	0x20007c7c
 80043d0:	20007408 	.word	0x20007408
 80043d4:	20007ef4 	.word	0x20007ef4
 80043d8:	20007244 	.word	0x20007244
 80043dc:	20008108 	.word	0x20008108
 80043e0:	20008294 	.word	0x20008294
 80043e4:	20006bcc 	.word	0x20006bcc
 80043e8:	200086cc 	.word	0x200086cc
 80043ec:	20007064 	.word	0x20007064
 80043f0:	20008434 	.word	0x20008434

080043f4 <HAL_UART_RxCpltCallback>:
		}
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
	if(huart == tuneUart){
 80043fc:	4b11      	ldr	r3, [pc, #68]	; (8004444 <HAL_UART_RxCpltCallback+0x50>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	429a      	cmp	r2, r3
 8004404:	d105      	bne.n	8004412 <HAL_UART_RxCpltCallback+0x1e>
		osSemaphoreRelease(TuneSemaphore);
 8004406:	4b10      	ldr	r3, [pc, #64]	; (8004448 <HAL_UART_RxCpltCallback+0x54>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4618      	mov	r0, r3
 800440c:	f00d fcba 	bl	8011d84 <osSemaphoreRelease>

	}
//		else if(huart == ps4.huartps4){
//		PSx_HandlerUART(&ps4);
//	}
}
 8004410:	e014      	b.n	800443c <HAL_UART_RxCpltCallback+0x48>
	}else if(huart == &huart4){
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a0d      	ldr	r2, [pc, #52]	; (800444c <HAL_UART_RxCpltCallback+0x58>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d110      	bne.n	800443c <HAL_UART_RxCpltCallback+0x48>
		led2 = !led2;
 800441a:	4b0d      	ldr	r3, [pc, #52]	; (8004450 <HAL_UART_RxCpltCallback+0x5c>)
 800441c:	785b      	ldrb	r3, [r3, #1]
 800441e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004422:	b2db      	uxtb	r3, r3
 8004424:	4a0a      	ldr	r2, [pc, #40]	; (8004450 <HAL_UART_RxCpltCallback+0x5c>)
 8004426:	2b00      	cmp	r3, #0
 8004428:	bf0c      	ite	eq
 800442a:	2301      	moveq	r3, #1
 800442c:	2300      	movne	r3, #0
 800442e:	b2d9      	uxtb	r1, r3
 8004430:	7853      	ldrb	r3, [r2, #1]
 8004432:	f361 1386 	bfi	r3, r1, #6, #1
 8004436:	7053      	strb	r3, [r2, #1]
		ROS_Handler();
 8004438:	f002 fb14 	bl	8006a64 <ROS_Handler>
}
 800443c:	bf00      	nop
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	20008bec 	.word	0x20008bec
 8004448:	20008944 	.word	0x20008944
 800444c:	20006730 	.word	0x20006730
 8004450:	40020814 	.word	0x40020814

08004454 <Error_Handler>:

/**
 * @brief  This function is executed in case of errorYaw occurrence.
 */
void Error_Handler(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0


}
 8004458:	bf00      	nop
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	0000      	movs	r0, r0
 8004464:	0000      	movs	r0, r0
	...

08004468 <MODNInit>:
 * 						  								gain added to four wheels based on the speed
 * Function Return		: NONE
 * Function Example		: void MODNInit(MODN_FWD_OMNI, 3.0, 0.5, 2.0, 0.1);
 */
void MODNInit(RobotBaseType_t base, float speed, float turnSpeed, float angleTol, float imuGain)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	4603      	mov	r3, r0
 8004470:	ed87 0a04 	vstr	s0, [r7, #16]
 8004474:	edc7 0a03 	vstr	s1, [r7, #12]
 8004478:	ed87 1a02 	vstr	s2, [r7, #8]
 800447c:	edc7 1a01 	vstr	s3, [r7, #4]
 8004480:	75fb      	strb	r3, [r7, #23]
	MODN.base = base;
 8004482:	4a23      	ldr	r2, [pc, #140]	; (8004510 <MODNInit+0xa8>)
 8004484:	7dfb      	ldrb	r3, [r7, #23]
 8004486:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	MODN.speed = speed;
 800448a:	4a21      	ldr	r2, [pc, #132]	; (8004510 <MODNInit+0xa8>)
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	61d3      	str	r3, [r2, #28]
	MODN.d	= turnSpeed;
 8004490:	4a1f      	ldr	r2, [pc, #124]	; (8004510 <MODNInit+0xa8>)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6213      	str	r3, [r2, #32]
	MODN.radTol = angleTol/180.0*3.14159265359;
 8004496:	68b8      	ldr	r0, [r7, #8]
 8004498:	f7fc f856 	bl	8000548 <__aeabi_f2d>
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	4b1c      	ldr	r3, [pc, #112]	; (8004514 <MODNInit+0xac>)
 80044a2:	f7fc f9d3 	bl	800084c <__aeabi_ddiv>
 80044a6:	4602      	mov	r2, r0
 80044a8:	460b      	mov	r3, r1
 80044aa:	4610      	mov	r0, r2
 80044ac:	4619      	mov	r1, r3
 80044ae:	a316      	add	r3, pc, #88	; (adr r3, 8004508 <MODNInit+0xa0>)
 80044b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b4:	f7fc f8a0 	bl	80005f8 <__aeabi_dmul>
 80044b8:	4602      	mov	r2, r0
 80044ba:	460b      	mov	r3, r1
 80044bc:	4610      	mov	r0, r2
 80044be:	4619      	mov	r1, r3
 80044c0:	f7fc fb92 	bl	8000be8 <__aeabi_d2f>
 80044c4:	4603      	mov	r3, r0
 80044c6:	4a12      	ldr	r2, [pc, #72]	; (8004510 <MODNInit+0xa8>)
 80044c8:	62d3      	str	r3, [r2, #44]	; 0x2c
	MODN.imuGain = speed*imuGain/MODN.radTol;
 80044ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80044ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80044d2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80044d6:	4b0e      	ldr	r3, [pc, #56]	; (8004510 <MODNInit+0xa8>)
 80044d8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80044dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044e0:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <MODNInit+0xa8>)
 80044e2:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	MODN.radTarget = 0.0;
 80044e6:	4b0a      	ldr	r3, [pc, #40]	; (8004510 <MODNInit+0xa8>)
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	639a      	str	r2, [r3, #56]	; 0x38
	MODN.orientation = 0;
 80044ee:	4b08      	ldr	r3, [pc, #32]	; (8004510 <MODNInit+0xa8>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	641a      	str	r2, [r3, #64]	; 0x40
	MODN.real_x_vel = &(MODN.x_vel);
 80044f4:	4b06      	ldr	r3, [pc, #24]	; (8004510 <MODNInit+0xa8>)
 80044f6:	4a06      	ldr	r2, [pc, #24]	; (8004510 <MODNInit+0xa8>)
 80044f8:	645a      	str	r2, [r3, #68]	; 0x44
	MODN.real_y_vel = &(MODN.y_vel);
 80044fa:	4b05      	ldr	r3, [pc, #20]	; (8004510 <MODNInit+0xa8>)
 80044fc:	4a06      	ldr	r2, [pc, #24]	; (8004518 <MODNInit+0xb0>)
 80044fe:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004500:	bf00      	nop
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	54442eea 	.word	0x54442eea
 800450c:	400921fb 	.word	0x400921fb
 8004510:	20007070 	.word	0x20007070
 8004514:	40668000 	.word	0x40668000
 8004518:	20007074 	.word	0x20007074
 800451c:	00000000 	.word	0x00000000

08004520 <realMODN>:
 * Function Return		: NONE
 * Function Example		: realMODN(ps4, &rns);
 */

void realMODN(PSxBT_t *psx, RNS_interface_t* rns)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	ed2d 8b02 	vpush	{d8}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
	MODN.x_vel = -(psx->joyL_x) * MODN.speed;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004534:	eeb1 7a67 	vneg.f32	s14, s15
 8004538:	4bc3      	ldr	r3, [pc, #780]	; (8004848 <realMODN+0x328>)
 800453a:	edd3 7a07 	vldr	s15, [r3, #28]
 800453e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004542:	4bc1      	ldr	r3, [pc, #772]	; (8004848 <realMODN+0x328>)
 8004544:	edc3 7a00 	vstr	s15, [r3]
	MODN.y_vel =  (psx->joyL_y) * MODN.speed;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800454e:	4bbe      	ldr	r3, [pc, #760]	; (8004848 <realMODN+0x328>)
 8004550:	edd3 7a07 	vldr	s15, [r3, #28]
 8004554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004558:	4bbb      	ldr	r3, [pc, #748]	; (8004848 <realMODN+0x328>)
 800455a:	edc3 7a01 	vstr	s15, [r3, #4]
	MODN.w_vel = ((psx->joyR_2) - (psx->joyL_2))* MODN.speed;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800456a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800456e:	4bb6      	ldr	r3, [pc, #728]	; (8004848 <realMODN+0x328>)
 8004570:	edd3 7a07 	vldr	s15, [r3, #28]
 8004574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004578:	4bb3      	ldr	r3, [pc, #716]	; (8004848 <realMODN+0x328>)
 800457a:	edc3 7a02 	vstr	s15, [r3, #8]
	if(MODN.x_vel==0.0 && MODN.y_vel==0.0 && MODN.w_vel==0.0){
 800457e:	4bb2      	ldr	r3, [pc, #712]	; (8004848 <realMODN+0x328>)
 8004580:	edd3 7a00 	vldr	s15, [r3]
 8004584:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800458c:	d113      	bne.n	80045b6 <realMODN+0x96>
 800458e:	4bae      	ldr	r3, [pc, #696]	; (8004848 <realMODN+0x328>)
 8004590:	edd3 7a01 	vldr	s15, [r3, #4]
 8004594:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800459c:	d10b      	bne.n	80045b6 <realMODN+0x96>
 800459e:	4baa      	ldr	r3, [pc, #680]	; (8004848 <realMODN+0x328>)
 80045a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80045a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80045a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ac:	d103      	bne.n	80045b6 <realMODN+0x96>
		RNSStop(rns);
 80045ae:	6838      	ldr	r0, [r7, #0]
 80045b0:	f000 fde0 	bl	8005174 <RNSStop>
			MODN.vel1 = MODN.y_vel*sinf(2.0944-realZrad) + MODN.x_vel*cosf(2.0944-realZrad) + MODN.w_vel*MODN.d;
			MODN.vel2 = MODN.y_vel*sinf(1.0472-realZrad) + MODN.x_vel*cosf(1.0472-realZrad) - MODN.w_vel*MODN.d;
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
		}
	}
}
 80045b4:	e21f      	b.n	80049f6 <realMODN+0x4d6>
		RNSEnquire(RNS_COORDINATE_X_Y_Z_Zrad, rns);
 80045b6:	6839      	ldr	r1, [r7, #0]
 80045b8:	205f      	movs	r0, #95	; 0x5f
 80045ba:	f001 f957 	bl	800586c <RNSEnquire>
		float realZrad = rns->enq.enq_buffer[3].data;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c2:	60fb      	str	r3, [r7, #12]
		if(MODN.base == MODN_FWD_OMNI) {
 80045c4:	4ba0      	ldr	r3, [pc, #640]	; (8004848 <realMODN+0x328>)
 80045c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f040 813e 	bne.w	800484c <realMODN+0x32c>
			MODN.vel1 = MODN.x_vel*cosf(0.7854-realZrad) + MODN.y_vel*sinf(0.7854-realZrad) + MODN.w_vel*MODN.d;
 80045d0:	4b9d      	ldr	r3, [pc, #628]	; (8004848 <realMODN+0x328>)
 80045d2:	ed93 8a00 	vldr	s16, [r3]
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f7fb ffb6 	bl	8000548 <__aeabi_f2d>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	a195      	add	r1, pc, #596	; (adr r1, 8004838 <realMODN+0x318>)
 80045e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045e6:	f7fb fe4f 	bl	8000288 <__aeabi_dsub>
 80045ea:	4602      	mov	r2, r0
 80045ec:	460b      	mov	r3, r1
 80045ee:	4610      	mov	r0, r2
 80045f0:	4619      	mov	r1, r3
 80045f2:	f7fc faf9 	bl	8000be8 <__aeabi_d2f>
 80045f6:	4603      	mov	r3, r0
 80045f8:	ee00 3a10 	vmov	s0, r3
 80045fc:	f015 fac6 	bl	8019b8c <cosf>
 8004600:	eef0 7a40 	vmov.f32	s15, s0
 8004604:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004608:	4b8f      	ldr	r3, [pc, #572]	; (8004848 <realMODN+0x328>)
 800460a:	edd3 8a01 	vldr	s17, [r3, #4]
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f7fb ff9a 	bl	8000548 <__aeabi_f2d>
 8004614:	4602      	mov	r2, r0
 8004616:	460b      	mov	r3, r1
 8004618:	a187      	add	r1, pc, #540	; (adr r1, 8004838 <realMODN+0x318>)
 800461a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800461e:	f7fb fe33 	bl	8000288 <__aeabi_dsub>
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	4610      	mov	r0, r2
 8004628:	4619      	mov	r1, r3
 800462a:	f7fc fadd 	bl	8000be8 <__aeabi_d2f>
 800462e:	4603      	mov	r3, r0
 8004630:	ee00 3a10 	vmov	s0, r3
 8004634:	f015 faea 	bl	8019c0c <sinf>
 8004638:	eef0 7a40 	vmov.f32	s15, s0
 800463c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004640:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004644:	4b80      	ldr	r3, [pc, #512]	; (8004848 <realMODN+0x328>)
 8004646:	edd3 6a02 	vldr	s13, [r3, #8]
 800464a:	4b7f      	ldr	r3, [pc, #508]	; (8004848 <realMODN+0x328>)
 800464c:	edd3 7a08 	vldr	s15, [r3, #32]
 8004650:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004658:	4b7b      	ldr	r3, [pc, #492]	; (8004848 <realMODN+0x328>)
 800465a:	edc3 7a03 	vstr	s15, [r3, #12]
			MODN.vel2 = MODN.x_vel*cosf(2.3562-realZrad) + MODN.y_vel*sinf(2.3562-realZrad) - MODN.w_vel*MODN.d;
 800465e:	4b7a      	ldr	r3, [pc, #488]	; (8004848 <realMODN+0x328>)
 8004660:	ed93 8a00 	vldr	s16, [r3]
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f7fb ff6f 	bl	8000548 <__aeabi_f2d>
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	a174      	add	r1, pc, #464	; (adr r1, 8004840 <realMODN+0x320>)
 8004670:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004674:	f7fb fe08 	bl	8000288 <__aeabi_dsub>
 8004678:	4602      	mov	r2, r0
 800467a:	460b      	mov	r3, r1
 800467c:	4610      	mov	r0, r2
 800467e:	4619      	mov	r1, r3
 8004680:	f7fc fab2 	bl	8000be8 <__aeabi_d2f>
 8004684:	4603      	mov	r3, r0
 8004686:	ee00 3a10 	vmov	s0, r3
 800468a:	f015 fa7f 	bl	8019b8c <cosf>
 800468e:	eef0 7a40 	vmov.f32	s15, s0
 8004692:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004696:	4b6c      	ldr	r3, [pc, #432]	; (8004848 <realMODN+0x328>)
 8004698:	edd3 8a01 	vldr	s17, [r3, #4]
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f7fb ff53 	bl	8000548 <__aeabi_f2d>
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	a166      	add	r1, pc, #408	; (adr r1, 8004840 <realMODN+0x320>)
 80046a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046ac:	f7fb fdec 	bl	8000288 <__aeabi_dsub>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4610      	mov	r0, r2
 80046b6:	4619      	mov	r1, r3
 80046b8:	f7fc fa96 	bl	8000be8 <__aeabi_d2f>
 80046bc:	4603      	mov	r3, r0
 80046be:	ee00 3a10 	vmov	s0, r3
 80046c2:	f015 faa3 	bl	8019c0c <sinf>
 80046c6:	eef0 7a40 	vmov.f32	s15, s0
 80046ca:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80046ce:	ee38 7a27 	vadd.f32	s14, s16, s15
 80046d2:	4b5d      	ldr	r3, [pc, #372]	; (8004848 <realMODN+0x328>)
 80046d4:	edd3 6a02 	vldr	s13, [r3, #8]
 80046d8:	4b5b      	ldr	r3, [pc, #364]	; (8004848 <realMODN+0x328>)
 80046da:	edd3 7a08 	vldr	s15, [r3, #32]
 80046de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046e6:	4b58      	ldr	r3, [pc, #352]	; (8004848 <realMODN+0x328>)
 80046e8:	edc3 7a04 	vstr	s15, [r3, #16]
			MODN.vel3 = MODN.x_vel*cosf(2.3562-realZrad) + MODN.y_vel*sinf(2.3562-realZrad) + MODN.w_vel*MODN.d;
 80046ec:	4b56      	ldr	r3, [pc, #344]	; (8004848 <realMODN+0x328>)
 80046ee:	ed93 8a00 	vldr	s16, [r3]
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f7fb ff28 	bl	8000548 <__aeabi_f2d>
 80046f8:	4602      	mov	r2, r0
 80046fa:	460b      	mov	r3, r1
 80046fc:	a150      	add	r1, pc, #320	; (adr r1, 8004840 <realMODN+0x320>)
 80046fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004702:	f7fb fdc1 	bl	8000288 <__aeabi_dsub>
 8004706:	4602      	mov	r2, r0
 8004708:	460b      	mov	r3, r1
 800470a:	4610      	mov	r0, r2
 800470c:	4619      	mov	r1, r3
 800470e:	f7fc fa6b 	bl	8000be8 <__aeabi_d2f>
 8004712:	4603      	mov	r3, r0
 8004714:	ee00 3a10 	vmov	s0, r3
 8004718:	f015 fa38 	bl	8019b8c <cosf>
 800471c:	eef0 7a40 	vmov.f32	s15, s0
 8004720:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004724:	4b48      	ldr	r3, [pc, #288]	; (8004848 <realMODN+0x328>)
 8004726:	edd3 8a01 	vldr	s17, [r3, #4]
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f7fb ff0c 	bl	8000548 <__aeabi_f2d>
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	a142      	add	r1, pc, #264	; (adr r1, 8004840 <realMODN+0x320>)
 8004736:	e9d1 0100 	ldrd	r0, r1, [r1]
 800473a:	f7fb fda5 	bl	8000288 <__aeabi_dsub>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	4610      	mov	r0, r2
 8004744:	4619      	mov	r1, r3
 8004746:	f7fc fa4f 	bl	8000be8 <__aeabi_d2f>
 800474a:	4603      	mov	r3, r0
 800474c:	ee00 3a10 	vmov	s0, r3
 8004750:	f015 fa5c 	bl	8019c0c <sinf>
 8004754:	eef0 7a40 	vmov.f32	s15, s0
 8004758:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800475c:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004760:	4b39      	ldr	r3, [pc, #228]	; (8004848 <realMODN+0x328>)
 8004762:	edd3 6a02 	vldr	s13, [r3, #8]
 8004766:	4b38      	ldr	r3, [pc, #224]	; (8004848 <realMODN+0x328>)
 8004768:	edd3 7a08 	vldr	s15, [r3, #32]
 800476c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004774:	4b34      	ldr	r3, [pc, #208]	; (8004848 <realMODN+0x328>)
 8004776:	edc3 7a05 	vstr	s15, [r3, #20]
			MODN.vel4 = MODN.x_vel*cosf(0.7854-realZrad) + MODN.y_vel*sinf(0.7854-realZrad) - MODN.w_vel*MODN.d;
 800477a:	4b33      	ldr	r3, [pc, #204]	; (8004848 <realMODN+0x328>)
 800477c:	ed93 8a00 	vldr	s16, [r3]
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f7fb fee1 	bl	8000548 <__aeabi_f2d>
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	a12b      	add	r1, pc, #172	; (adr r1, 8004838 <realMODN+0x318>)
 800478c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004790:	f7fb fd7a 	bl	8000288 <__aeabi_dsub>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	4610      	mov	r0, r2
 800479a:	4619      	mov	r1, r3
 800479c:	f7fc fa24 	bl	8000be8 <__aeabi_d2f>
 80047a0:	4603      	mov	r3, r0
 80047a2:	ee00 3a10 	vmov	s0, r3
 80047a6:	f015 f9f1 	bl	8019b8c <cosf>
 80047aa:	eef0 7a40 	vmov.f32	s15, s0
 80047ae:	ee28 8a27 	vmul.f32	s16, s16, s15
 80047b2:	4b25      	ldr	r3, [pc, #148]	; (8004848 <realMODN+0x328>)
 80047b4:	edd3 8a01 	vldr	s17, [r3, #4]
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f7fb fec5 	bl	8000548 <__aeabi_f2d>
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	a11d      	add	r1, pc, #116	; (adr r1, 8004838 <realMODN+0x318>)
 80047c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047c8:	f7fb fd5e 	bl	8000288 <__aeabi_dsub>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	4610      	mov	r0, r2
 80047d2:	4619      	mov	r1, r3
 80047d4:	f7fc fa08 	bl	8000be8 <__aeabi_d2f>
 80047d8:	4603      	mov	r3, r0
 80047da:	ee00 3a10 	vmov	s0, r3
 80047de:	f015 fa15 	bl	8019c0c <sinf>
 80047e2:	eef0 7a40 	vmov.f32	s15, s0
 80047e6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80047ea:	ee38 7a27 	vadd.f32	s14, s16, s15
 80047ee:	4b16      	ldr	r3, [pc, #88]	; (8004848 <realMODN+0x328>)
 80047f0:	edd3 6a02 	vldr	s13, [r3, #8]
 80047f4:	4b14      	ldr	r3, [pc, #80]	; (8004848 <realMODN+0x328>)
 80047f6:	edd3 7a08 	vldr	s15, [r3, #32]
 80047fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80047fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004802:	4b11      	ldr	r3, [pc, #68]	; (8004848 <realMODN+0x328>)
 8004804:	edc3 7a06 	vstr	s15, [r3, #24]
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, MODN.vel4, rns);
 8004808:	4b0f      	ldr	r3, [pc, #60]	; (8004848 <realMODN+0x328>)
 800480a:	edd3 7a03 	vldr	s15, [r3, #12]
 800480e:	4b0e      	ldr	r3, [pc, #56]	; (8004848 <realMODN+0x328>)
 8004810:	ed93 7a04 	vldr	s14, [r3, #16]
 8004814:	4b0c      	ldr	r3, [pc, #48]	; (8004848 <realMODN+0x328>)
 8004816:	edd3 6a05 	vldr	s13, [r3, #20]
 800481a:	4b0b      	ldr	r3, [pc, #44]	; (8004848 <realMODN+0x328>)
 800481c:	ed93 6a06 	vldr	s12, [r3, #24]
 8004820:	6838      	ldr	r0, [r7, #0]
 8004822:	eef0 1a46 	vmov.f32	s3, s12
 8004826:	eeb0 1a66 	vmov.f32	s2, s13
 800482a:	eef0 0a47 	vmov.f32	s1, s14
 800482e:	eeb0 0a67 	vmov.f32	s0, s15
 8004832:	f000 fd23 	bl	800527c <RNSVelocity>
}
 8004836:	e0de      	b.n	80049f6 <realMODN+0x4d6>
 8004838:	2e48e8a7 	.word	0x2e48e8a7
 800483c:	3fe921ff 	.word	0x3fe921ff
 8004840:	62b6ae7d 	.word	0x62b6ae7d
 8004844:	4002d97f 	.word	0x4002d97f
 8004848:	20007070 	.word	0x20007070
		else if (MODN.base == MODN_TRI_OMNI){
 800484c:	4b72      	ldr	r3, [pc, #456]	; (8004a18 <realMODN+0x4f8>)
 800484e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004852:	2b01      	cmp	r3, #1
 8004854:	f040 80cf 	bne.w	80049f6 <realMODN+0x4d6>
			MODN.vel3 = MODN.y_vel*sinf(-realZrad) 		 + MODN.x_vel*cosf(-realZrad)  	    + MODN.w_vel*MODN.d;
 8004858:	4b6f      	ldr	r3, [pc, #444]	; (8004a18 <realMODN+0x4f8>)
 800485a:	ed93 8a01 	vldr	s16, [r3, #4]
 800485e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004862:	eef1 7a67 	vneg.f32	s15, s15
 8004866:	eeb0 0a67 	vmov.f32	s0, s15
 800486a:	f015 f9cf 	bl	8019c0c <sinf>
 800486e:	eef0 7a40 	vmov.f32	s15, s0
 8004872:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004876:	4b68      	ldr	r3, [pc, #416]	; (8004a18 <realMODN+0x4f8>)
 8004878:	edd3 8a00 	vldr	s17, [r3]
 800487c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004880:	eef1 7a67 	vneg.f32	s15, s15
 8004884:	eeb0 0a67 	vmov.f32	s0, s15
 8004888:	f015 f980 	bl	8019b8c <cosf>
 800488c:	eef0 7a40 	vmov.f32	s15, s0
 8004890:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004894:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004898:	4b5f      	ldr	r3, [pc, #380]	; (8004a18 <realMODN+0x4f8>)
 800489a:	edd3 6a02 	vldr	s13, [r3, #8]
 800489e:	4b5e      	ldr	r3, [pc, #376]	; (8004a18 <realMODN+0x4f8>)
 80048a0:	edd3 7a08 	vldr	s15, [r3, #32]
 80048a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048ac:	4b5a      	ldr	r3, [pc, #360]	; (8004a18 <realMODN+0x4f8>)
 80048ae:	edc3 7a05 	vstr	s15, [r3, #20]
			MODN.vel1 = MODN.y_vel*sinf(2.0944-realZrad) + MODN.x_vel*cosf(2.0944-realZrad) + MODN.w_vel*MODN.d;
 80048b2:	4b59      	ldr	r3, [pc, #356]	; (8004a18 <realMODN+0x4f8>)
 80048b4:	ed93 8a01 	vldr	s16, [r3, #4]
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f7fb fe45 	bl	8000548 <__aeabi_f2d>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	a151      	add	r1, pc, #324	; (adr r1, 8004a08 <realMODN+0x4e8>)
 80048c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048c8:	f7fb fcde 	bl	8000288 <__aeabi_dsub>
 80048cc:	4602      	mov	r2, r0
 80048ce:	460b      	mov	r3, r1
 80048d0:	4610      	mov	r0, r2
 80048d2:	4619      	mov	r1, r3
 80048d4:	f7fc f988 	bl	8000be8 <__aeabi_d2f>
 80048d8:	4603      	mov	r3, r0
 80048da:	ee00 3a10 	vmov	s0, r3
 80048de:	f015 f995 	bl	8019c0c <sinf>
 80048e2:	eef0 7a40 	vmov.f32	s15, s0
 80048e6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80048ea:	4b4b      	ldr	r3, [pc, #300]	; (8004a18 <realMODN+0x4f8>)
 80048ec:	edd3 8a00 	vldr	s17, [r3]
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f7fb fe29 	bl	8000548 <__aeabi_f2d>
 80048f6:	4602      	mov	r2, r0
 80048f8:	460b      	mov	r3, r1
 80048fa:	a143      	add	r1, pc, #268	; (adr r1, 8004a08 <realMODN+0x4e8>)
 80048fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004900:	f7fb fcc2 	bl	8000288 <__aeabi_dsub>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4610      	mov	r0, r2
 800490a:	4619      	mov	r1, r3
 800490c:	f7fc f96c 	bl	8000be8 <__aeabi_d2f>
 8004910:	4603      	mov	r3, r0
 8004912:	ee00 3a10 	vmov	s0, r3
 8004916:	f015 f939 	bl	8019b8c <cosf>
 800491a:	eef0 7a40 	vmov.f32	s15, s0
 800491e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004922:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004926:	4b3c      	ldr	r3, [pc, #240]	; (8004a18 <realMODN+0x4f8>)
 8004928:	edd3 6a02 	vldr	s13, [r3, #8]
 800492c:	4b3a      	ldr	r3, [pc, #232]	; (8004a18 <realMODN+0x4f8>)
 800492e:	edd3 7a08 	vldr	s15, [r3, #32]
 8004932:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800493a:	4b37      	ldr	r3, [pc, #220]	; (8004a18 <realMODN+0x4f8>)
 800493c:	edc3 7a03 	vstr	s15, [r3, #12]
			MODN.vel2 = MODN.y_vel*sinf(1.0472-realZrad) + MODN.x_vel*cosf(1.0472-realZrad) - MODN.w_vel*MODN.d;
 8004940:	4b35      	ldr	r3, [pc, #212]	; (8004a18 <realMODN+0x4f8>)
 8004942:	ed93 8a01 	vldr	s16, [r3, #4]
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f7fb fdfe 	bl	8000548 <__aeabi_f2d>
 800494c:	4602      	mov	r2, r0
 800494e:	460b      	mov	r3, r1
 8004950:	a12f      	add	r1, pc, #188	; (adr r1, 8004a10 <realMODN+0x4f0>)
 8004952:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004956:	f7fb fc97 	bl	8000288 <__aeabi_dsub>
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	4610      	mov	r0, r2
 8004960:	4619      	mov	r1, r3
 8004962:	f7fc f941 	bl	8000be8 <__aeabi_d2f>
 8004966:	4603      	mov	r3, r0
 8004968:	ee00 3a10 	vmov	s0, r3
 800496c:	f015 f94e 	bl	8019c0c <sinf>
 8004970:	eef0 7a40 	vmov.f32	s15, s0
 8004974:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004978:	4b27      	ldr	r3, [pc, #156]	; (8004a18 <realMODN+0x4f8>)
 800497a:	edd3 8a00 	vldr	s17, [r3]
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f7fb fde2 	bl	8000548 <__aeabi_f2d>
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	a121      	add	r1, pc, #132	; (adr r1, 8004a10 <realMODN+0x4f0>)
 800498a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800498e:	f7fb fc7b 	bl	8000288 <__aeabi_dsub>
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	4610      	mov	r0, r2
 8004998:	4619      	mov	r1, r3
 800499a:	f7fc f925 	bl	8000be8 <__aeabi_d2f>
 800499e:	4603      	mov	r3, r0
 80049a0:	ee00 3a10 	vmov	s0, r3
 80049a4:	f015 f8f2 	bl	8019b8c <cosf>
 80049a8:	eef0 7a40 	vmov.f32	s15, s0
 80049ac:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80049b0:	ee38 7a27 	vadd.f32	s14, s16, s15
 80049b4:	4b18      	ldr	r3, [pc, #96]	; (8004a18 <realMODN+0x4f8>)
 80049b6:	edd3 6a02 	vldr	s13, [r3, #8]
 80049ba:	4b17      	ldr	r3, [pc, #92]	; (8004a18 <realMODN+0x4f8>)
 80049bc:	edd3 7a08 	vldr	s15, [r3, #32]
 80049c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049c8:	4b13      	ldr	r3, [pc, #76]	; (8004a18 <realMODN+0x4f8>)
 80049ca:	edc3 7a04 	vstr	s15, [r3, #16]
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
 80049ce:	4b12      	ldr	r3, [pc, #72]	; (8004a18 <realMODN+0x4f8>)
 80049d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80049d4:	4b10      	ldr	r3, [pc, #64]	; (8004a18 <realMODN+0x4f8>)
 80049d6:	ed93 7a04 	vldr	s14, [r3, #16]
 80049da:	4b0f      	ldr	r3, [pc, #60]	; (8004a18 <realMODN+0x4f8>)
 80049dc:	edd3 6a05 	vldr	s13, [r3, #20]
 80049e0:	6838      	ldr	r0, [r7, #0]
 80049e2:	eddf 1a0e 	vldr	s3, [pc, #56]	; 8004a1c <realMODN+0x4fc>
 80049e6:	eeb0 1a66 	vmov.f32	s2, s13
 80049ea:	eef0 0a47 	vmov.f32	s1, s14
 80049ee:	eeb0 0a67 	vmov.f32	s0, s15
 80049f2:	f000 fc43 	bl	800527c <RNSVelocity>
}
 80049f6:	bf00      	nop
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	ecbd 8b02 	vpop	{d8}
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	f3af 8000 	nop.w
 8004a08:	c985f06f 	.word	0xc985f06f
 8004a0c:	4000c154 	.word	0x4000c154
 8004a10:	c985f06f 	.word	0xc985f06f
 8004a14:	3ff0c154 	.word	0x3ff0c154
 8004a18:	20007070 	.word	0x20007070
 8004a1c:	00000000 	.word	0x00000000

08004a20 <setSpeedMODN>:
void setOrientationMODN(OrientationMODN_t orientation)
{
	MODN.orientation = orientation;
}

void setSpeedMODN(float speed){
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	ed87 0a01 	vstr	s0, [r7, #4]
	MODN.speed = speed;
 8004a2a:	4a0c      	ldr	r2, [pc, #48]	; (8004a5c <setSpeedMODN+0x3c>)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	61d3      	str	r3, [r2, #28]
	MODN.imuGain = speed*MODN.imuGain/MODN.radTol;
 8004a30:	4b0a      	ldr	r3, [pc, #40]	; (8004a5c <setSpeedMODN+0x3c>)
 8004a32:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004a36:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a3a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004a3e:	4b07      	ldr	r3, [pc, #28]	; (8004a5c <setSpeedMODN+0x3c>)
 8004a40:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004a44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a48:	4b04      	ldr	r3, [pc, #16]	; (8004a5c <setSpeedMODN+0x3c>)
 8004a4a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	20007070 	.word	0x20007070

08004a60 <PSxConnectDMA>:
 * Function Remarks		: Called in respective I2c interrupt
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSxConnectDMA(&ps4);
 */
void PSxConnectDMA(PSxBT_t* psxbt){
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 11);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	230b      	movs	r3, #11
 8004a72:	2188      	movs	r1, #136	; 0x88
 8004a74:	f008 f888 	bl	800cb88 <HAL_I2C_Master_Receive_DMA>
	PSx_HandlerI2C(psxbt);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f81e 	bl	8004aba <PSx_HandlerI2C>
}
 8004a7e:	bf00      	nop
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <PSxInitDMA>:
 * Function Arguments	: *psxbt	, Pointer to structure PSxBT_t
 * 						   hi2cx    , Pointer to I2C handle
 * Function Return		: None
 * Function Example		: PSxInitDMA(&ps4,&hi2c1);
 */
void PSxInitDMA(PSxBT_t *psxbt,I2C_HandleTypeDef* hi2cx){
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b082      	sub	sp, #8
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	6039      	str	r1, [r7, #0]
	psxbt->hi2cps4 = hi2cx;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	665a      	str	r2, [r3, #100]	; 0x64
//	HAL_I2C_Slave_Receive_DMA(hi2cx, psxbt->ReceiveBuffer, 11);//GG
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 11);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	230b      	movs	r3, #11
 8004aa0:	2188      	movs	r1, #136	; 0x88
 8004aa2:	f008 f871 	bl	800cb88 <HAL_I2C_Master_Receive_DMA>
	psxbt->initialized = 1;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	701a      	strb	r2, [r3, #0]
	psxbt->disconnected = 0;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004ab2:	bf00      	nop
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <PSx_HandlerI2C>:
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSx_HandlerI2C(&ps4x);
 */

void PSx_HandlerI2C(PSxBT_t *psxbt){
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b082      	sub	sp, #8
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
	psxbt->buf1 = psxbt->ReceiveBuffer[1];
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	789a      	ldrb	r2, [r3, #2]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	psxbt->buf2 = psxbt->ReceiveBuffer[2];
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	78da      	ldrb	r2, [r3, #3]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	psxbt->leftjoy_x = psxbt->ReceiveBuffer[3];
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	791b      	ldrb	r3, [r3, #4]
 8004ada:	461a      	mov	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	635a      	str	r2, [r3, #52]	; 0x34
	psxbt->leftjoy_y = psxbt->ReceiveBuffer[4];
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	795b      	ldrb	r3, [r3, #5]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	639a      	str	r2, [r3, #56]	; 0x38
	psxbt->rightjoy_x = psxbt->ReceiveBuffer[5];
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	799b      	ldrb	r3, [r3, #6]
 8004aee:	461a      	mov	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	63da      	str	r2, [r3, #60]	; 0x3c
	psxbt->rightjoy_y = psxbt->ReceiveBuffer[6];
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	79db      	ldrb	r3, [r3, #7]
 8004af8:	461a      	mov	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	641a      	str	r2, [r3, #64]	; 0x40
	psxbt->an_L2 = psxbt->ReceiveBuffer[7];
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	7a1b      	ldrb	r3, [r3, #8]
 8004b02:	461a      	mov	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	645a      	str	r2, [r3, #68]	; 0x44
	psxbt->an_R2 = psxbt->ReceiveBuffer[8];
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	7a5b      	ldrb	r3, [r3, #9]
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	649a      	str	r2, [r3, #72]	; 0x48
	psxbt->buf3 = psxbt->ReceiveBuffer[9];
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	7a9a      	ldrb	r2, [r3, #10]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	psxbt->state = psxbt->ReceiveBuffer[10];
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	7ada      	ldrb	r2, [r3, #11]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	PSxBTGetXY(psxbt);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f806 	bl	8004b38 <PSxBTGetXY>
}
 8004b2c:	bf00      	nop
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	0000      	movs	r0, r0
	...

08004b38 <PSxBTGetXY>:
 * Function Return		: None
 * Function Example		: PSxBTGetXY(&ps3x);
 */

void PSxBTGetXY(PSxBT_t *psxbt)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
	if(joyR_up){
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b44:	ee07 3a90 	vmov	s15, r3
 8004b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4c:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 8004e50 <PSxBTGetXY+0x318>
 8004b50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b58:	d53e      	bpl.n	8004bd8 <PSxBTGetXY+0xa0>
		psxbt->joyR_y  = ((psx_low_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	ee07 3a90 	vmov	s15, r3
 8004b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b66:	ee17 0a90 	vmov	r0, s15
 8004b6a:	f7fb fced 	bl	8000548 <__aeabi_f2d>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	a1b5      	add	r1, pc, #724	; (adr r1, 8004e48 <PSxBTGetXY+0x310>)
 8004b74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b78:	f7fb fb86 	bl	8000288 <__aeabi_dsub>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4610      	mov	r0, r2
 8004b82:	4619      	mov	r1, r3
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	4bb2      	ldr	r3, [pc, #712]	; (8004e54 <PSxBTGetXY+0x31c>)
 8004b8a:	f7fb fe5f 	bl	800084c <__aeabi_ddiv>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	4610      	mov	r0, r2
 8004b94:	4619      	mov	r1, r3
 8004b96:	f7fc f827 	bl	8000be8 <__aeabi_d2f>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	64da      	str	r2, [r3, #76]	; 0x4c
		if(psxbt->joyR_y < 0.0){
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004ba6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bae:	d504      	bpl.n	8004bba <PSxBTGetXY+0x82>
			psxbt->joyR_y = 0.0;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	64da      	str	r2, [r3, #76]	; 0x4c
 8004bb8:	e05d      	b.n	8004c76 <PSxBTGetXY+0x13e>
		}else if(psxbt->joyR_y > 1.0){
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004bc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bcc:	dd53      	ble.n	8004c76 <PSxBTGetXY+0x13e>
			psxbt->joyR_y = 1.0;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004bd4:	64da      	str	r2, [r3, #76]	; 0x4c
 8004bd6:	e04e      	b.n	8004c76 <PSxBTGetXY+0x13e>
		}
	}else if(joyR_down){
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	ee07 3a90 	vmov	s15, r3
 8004be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be4:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8004e60 <PSxBTGetXY+0x328>
 8004be8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bf0:	dd3d      	ble.n	8004c6e <PSxBTGetXY+0x136>
		psxbt->joyR_y = ((psx_high_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	ee07 3a90 	vmov	s15, r3
 8004bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bfe:	ee17 0a90 	vmov	r0, s15
 8004c02:	f7fb fca1 	bl	8000548 <__aeabi_f2d>
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	f04f 0000 	mov.w	r0, #0
 8004c0e:	4992      	ldr	r1, [pc, #584]	; (8004e58 <PSxBTGetXY+0x320>)
 8004c10:	f7fb fb3a 	bl	8000288 <__aeabi_dsub>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	4610      	mov	r0, r2
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	4b8c      	ldr	r3, [pc, #560]	; (8004e54 <PSxBTGetXY+0x31c>)
 8004c22:	f7fb fe13 	bl	800084c <__aeabi_ddiv>
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	4610      	mov	r0, r2
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	f7fb ffdb 	bl	8000be8 <__aeabi_d2f>
 8004c32:	4602      	mov	r2, r0
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	64da      	str	r2, [r3, #76]	; 0x4c
		if(psxbt->joyR_y > 0.0){
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004c3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c46:	dd04      	ble.n	8004c52 <PSxBTGetXY+0x11a>
			psxbt->joyR_y = 0.0;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004c50:	e011      	b.n	8004c76 <PSxBTGetXY+0x13e>
		}else if(psxbt->joyR_y < -1.0){
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004c58:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004c5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c64:	d507      	bpl.n	8004c76 <PSxBTGetXY+0x13e>
			psxbt->joyR_y = -1.0;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a7c      	ldr	r2, [pc, #496]	; (8004e5c <PSxBTGetXY+0x324>)
 8004c6a:	64da      	str	r2, [r3, #76]	; 0x4c
 8004c6c:	e003      	b.n	8004c76 <PSxBTGetXY+0x13e>
		}
	}else{
		psxbt->joyR_y = 0.0;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	64da      	str	r2, [r3, #76]	; 0x4c
	}

	if(joyR_left){
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7a:	ee07 3a90 	vmov	s15, r3
 8004c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c82:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8004e50 <PSxBTGetXY+0x318>
 8004c86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c8e:	d53e      	bpl.n	8004d0e <PSxBTGetXY+0x1d6>
		psxbt->joyR_x = ((psx_low_Rx - ((float)psxbt->rightjoy_x))/100.0)/1.00;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c94:	ee07 3a90 	vmov	s15, r3
 8004c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c9c:	ee17 0a90 	vmov	r0, s15
 8004ca0:	f7fb fc52 	bl	8000548 <__aeabi_f2d>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	a167      	add	r1, pc, #412	; (adr r1, 8004e48 <PSxBTGetXY+0x310>)
 8004caa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cae:	f7fb faeb 	bl	8000288 <__aeabi_dsub>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4610      	mov	r0, r2
 8004cb8:	4619      	mov	r1, r3
 8004cba:	f04f 0200 	mov.w	r2, #0
 8004cbe:	4b65      	ldr	r3, [pc, #404]	; (8004e54 <PSxBTGetXY+0x31c>)
 8004cc0:	f7fb fdc4 	bl	800084c <__aeabi_ddiv>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	4610      	mov	r0, r2
 8004cca:	4619      	mov	r1, r3
 8004ccc:	f7fb ff8c 	bl	8000be8 <__aeabi_d2f>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	651a      	str	r2, [r3, #80]	; 0x50
		if(psxbt->joyR_x < 0.0){
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004cdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce4:	d504      	bpl.n	8004cf0 <PSxBTGetXY+0x1b8>
			psxbt->joyR_x = 0.0;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f04f 0200 	mov.w	r2, #0
 8004cec:	651a      	str	r2, [r3, #80]	; 0x50
 8004cee:	e05d      	b.n	8004dac <PSxBTGetXY+0x274>
		}else if(psxbt->joyR_x > 1.0){
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004cf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d02:	dd53      	ble.n	8004dac <PSxBTGetXY+0x274>
			psxbt->joyR_x = 1.0;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004d0a:	651a      	str	r2, [r3, #80]	; 0x50
 8004d0c:	e04e      	b.n	8004dac <PSxBTGetXY+0x274>
		}
	}else if(joyR_right){
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d12:	ee07 3a90 	vmov	s15, r3
 8004d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d1a:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8004e60 <PSxBTGetXY+0x328>
 8004d1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d26:	dd3d      	ble.n	8004da4 <PSxBTGetXY+0x26c>
		psxbt->joyR_x = ((psx_high_Rx - ((float)psxbt->rightjoy_x))/100.0)/1.00;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d2c:	ee07 3a90 	vmov	s15, r3
 8004d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d34:	ee17 0a90 	vmov	r0, s15
 8004d38:	f7fb fc06 	bl	8000548 <__aeabi_f2d>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	460b      	mov	r3, r1
 8004d40:	f04f 0000 	mov.w	r0, #0
 8004d44:	4944      	ldr	r1, [pc, #272]	; (8004e58 <PSxBTGetXY+0x320>)
 8004d46:	f7fb fa9f 	bl	8000288 <__aeabi_dsub>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	4610      	mov	r0, r2
 8004d50:	4619      	mov	r1, r3
 8004d52:	f04f 0200 	mov.w	r2, #0
 8004d56:	4b3f      	ldr	r3, [pc, #252]	; (8004e54 <PSxBTGetXY+0x31c>)
 8004d58:	f7fb fd78 	bl	800084c <__aeabi_ddiv>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4610      	mov	r0, r2
 8004d62:	4619      	mov	r1, r3
 8004d64:	f7fb ff40 	bl	8000be8 <__aeabi_d2f>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	651a      	str	r2, [r3, #80]	; 0x50
		if(psxbt->joyR_x > 0.0){
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004d74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d7c:	dd04      	ble.n	8004d88 <PSxBTGetXY+0x250>
			psxbt->joyR_x = 0.0;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f04f 0200 	mov.w	r2, #0
 8004d84:	651a      	str	r2, [r3, #80]	; 0x50
 8004d86:	e011      	b.n	8004dac <PSxBTGetXY+0x274>
		}else if(psxbt->joyR_x < -1.0){
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004d8e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004d92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d9a:	d507      	bpl.n	8004dac <PSxBTGetXY+0x274>
			psxbt->joyR_x = -1.0;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a2f      	ldr	r2, [pc, #188]	; (8004e5c <PSxBTGetXY+0x324>)
 8004da0:	651a      	str	r2, [r3, #80]	; 0x50
 8004da2:	e003      	b.n	8004dac <PSxBTGetXY+0x274>
		}
	}else{
		psxbt->joyR_x = 0.0;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f04f 0200 	mov.w	r2, #0
 8004daa:	651a      	str	r2, [r3, #80]	; 0x50
	}

	if(joyL_up){
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db0:	ee07 3a90 	vmov	s15, r3
 8004db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db8:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8004e50 <PSxBTGetXY+0x318>
 8004dbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc4:	d54e      	bpl.n	8004e64 <PSxBTGetXY+0x32c>
		psxbt->joyL_y = ((psx_low_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dca:	ee07 3a90 	vmov	s15, r3
 8004dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd2:	ee17 0a90 	vmov	r0, s15
 8004dd6:	f7fb fbb7 	bl	8000548 <__aeabi_f2d>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	a11a      	add	r1, pc, #104	; (adr r1, 8004e48 <PSxBTGetXY+0x310>)
 8004de0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004de4:	f7fb fa50 	bl	8000288 <__aeabi_dsub>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4610      	mov	r0, r2
 8004dee:	4619      	mov	r1, r3
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	4b17      	ldr	r3, [pc, #92]	; (8004e54 <PSxBTGetXY+0x31c>)
 8004df6:	f7fb fd29 	bl	800084c <__aeabi_ddiv>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	4610      	mov	r0, r2
 8004e00:	4619      	mov	r1, r3
 8004e02:	f7fb fef1 	bl	8000be8 <__aeabi_d2f>
 8004e06:	4602      	mov	r2, r0
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	655a      	str	r2, [r3, #84]	; 0x54
		if(psxbt->joyL_y < 0.0){
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004e12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e1a:	d504      	bpl.n	8004e26 <PSxBTGetXY+0x2ee>
			psxbt->joyL_y = 0.0;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f04f 0200 	mov.w	r2, #0
 8004e22:	655a      	str	r2, [r3, #84]	; 0x54
 8004e24:	e06d      	b.n	8004f02 <PSxBTGetXY+0x3ca>
		}else if(psxbt->joyL_y > 1.0){
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004e2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e38:	dd63      	ble.n	8004f02 <PSxBTGetXY+0x3ca>
			psxbt->joyL_y = 1.0;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004e40:	655a      	str	r2, [r3, #84]	; 0x54
 8004e42:	e05e      	b.n	8004f02 <PSxBTGetXY+0x3ca>
 8004e44:	f3af 8000 	nop.w
 8004e48:	00000000 	.word	0x00000000
 8004e4c:	405cc000 	.word	0x405cc000
 8004e50:	42e60000 	.word	0x42e60000
 8004e54:	40590000 	.word	0x40590000
 8004e58:	40618000 	.word	0x40618000
 8004e5c:	bf800000 	.word	0xbf800000
 8004e60:	430c0000 	.word	0x430c0000
		}
	}else if(joyL_down){
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e68:	ee07 3a90 	vmov	s15, r3
 8004e6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e70:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8004e60 <PSxBTGetXY+0x328>
 8004e74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e7c:	dd3d      	ble.n	8004efa <PSxBTGetXY+0x3c2>
		psxbt->joyL_y = ((psx_high_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e82:	ee07 3a90 	vmov	s15, r3
 8004e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e8a:	ee17 0a90 	vmov	r0, s15
 8004e8e:	f7fb fb5b 	bl	8000548 <__aeabi_f2d>
 8004e92:	4602      	mov	r2, r0
 8004e94:	460b      	mov	r3, r1
 8004e96:	f04f 0000 	mov.w	r0, #0
 8004e9a:	4981      	ldr	r1, [pc, #516]	; (80050a0 <PSxBTGetXY+0x568>)
 8004e9c:	f7fb f9f4 	bl	8000288 <__aeabi_dsub>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	4610      	mov	r0, r2
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	f04f 0200 	mov.w	r2, #0
 8004eac:	4b7d      	ldr	r3, [pc, #500]	; (80050a4 <PSxBTGetXY+0x56c>)
 8004eae:	f7fb fccd 	bl	800084c <__aeabi_ddiv>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	4610      	mov	r0, r2
 8004eb8:	4619      	mov	r1, r3
 8004eba:	f7fb fe95 	bl	8000be8 <__aeabi_d2f>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	655a      	str	r2, [r3, #84]	; 0x54
		if(psxbt->joyL_y > 0.0){
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004eca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ed2:	dd04      	ble.n	8004ede <PSxBTGetXY+0x3a6>
			psxbt->joyL_y = 0.0;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f04f 0200 	mov.w	r2, #0
 8004eda:	655a      	str	r2, [r3, #84]	; 0x54
 8004edc:	e011      	b.n	8004f02 <PSxBTGetXY+0x3ca>
		}else if(psxbt->joyL_y < -1.0){
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004ee4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef0:	d507      	bpl.n	8004f02 <PSxBTGetXY+0x3ca>
			psxbt->joyL_y = -1.0;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a6c      	ldr	r2, [pc, #432]	; (80050a8 <PSxBTGetXY+0x570>)
 8004ef6:	655a      	str	r2, [r3, #84]	; 0x54
 8004ef8:	e003      	b.n	8004f02 <PSxBTGetXY+0x3ca>
		}
	}else{
		psxbt->joyL_y = 0.0;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if(joyL_left){
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f06:	ee07 3a90 	vmov	s15, r3
 8004f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f0e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80050ac <PSxBTGetXY+0x574>
 8004f12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f1a:	d53e      	bpl.n	8004f9a <PSxBTGetXY+0x462>
		psxbt->joyL_x = ((psx_low_Lx - ((float)psxbt->leftjoy_x))/100.0)/1.00;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f20:	ee07 3a90 	vmov	s15, r3
 8004f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f28:	ee17 0a90 	vmov	r0, s15
 8004f2c:	f7fb fb0c 	bl	8000548 <__aeabi_f2d>
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	a156      	add	r1, pc, #344	; (adr r1, 8005090 <PSxBTGetXY+0x558>)
 8004f36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f3a:	f7fb f9a5 	bl	8000288 <__aeabi_dsub>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	460b      	mov	r3, r1
 8004f42:	4610      	mov	r0, r2
 8004f44:	4619      	mov	r1, r3
 8004f46:	f04f 0200 	mov.w	r2, #0
 8004f4a:	4b56      	ldr	r3, [pc, #344]	; (80050a4 <PSxBTGetXY+0x56c>)
 8004f4c:	f7fb fc7e 	bl	800084c <__aeabi_ddiv>
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	4610      	mov	r0, r2
 8004f56:	4619      	mov	r1, r3
 8004f58:	f7fb fe46 	bl	8000be8 <__aeabi_d2f>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	659a      	str	r2, [r3, #88]	; 0x58
		if(psxbt->joyL_x < 0.0){
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004f68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f70:	d504      	bpl.n	8004f7c <PSxBTGetXY+0x444>
			psxbt->joyL_x = 0.0;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f04f 0200 	mov.w	r2, #0
 8004f78:	659a      	str	r2, [r3, #88]	; 0x58
 8004f7a:	e05d      	b.n	8005038 <PSxBTGetXY+0x500>
		}else if(psxbt->joyL_x > 1.0){
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004f82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f8e:	dd53      	ble.n	8005038 <PSxBTGetXY+0x500>
			psxbt->joyL_x = 1.0;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004f96:	659a      	str	r2, [r3, #88]	; 0x58
 8004f98:	e04e      	b.n	8005038 <PSxBTGetXY+0x500>
		}
	}else if(joyL_right){
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f9e:	ee07 3a90 	vmov	s15, r3
 8004fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa6:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80050b0 <PSxBTGetXY+0x578>
 8004faa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb2:	dd3d      	ble.n	8005030 <PSxBTGetXY+0x4f8>
		psxbt->joyL_x = ((psx_high_Lx - ((float)psxbt->leftjoy_x))/100.0)/1.00;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb8:	ee07 3a90 	vmov	s15, r3
 8004fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fc0:	ee17 0a90 	vmov	r0, s15
 8004fc4:	f7fb fac0 	bl	8000548 <__aeabi_f2d>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	f04f 0000 	mov.w	r0, #0
 8004fd0:	4933      	ldr	r1, [pc, #204]	; (80050a0 <PSxBTGetXY+0x568>)
 8004fd2:	f7fb f959 	bl	8000288 <__aeabi_dsub>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	460b      	mov	r3, r1
 8004fda:	4610      	mov	r0, r2
 8004fdc:	4619      	mov	r1, r3
 8004fde:	f04f 0200 	mov.w	r2, #0
 8004fe2:	4b30      	ldr	r3, [pc, #192]	; (80050a4 <PSxBTGetXY+0x56c>)
 8004fe4:	f7fb fc32 	bl	800084c <__aeabi_ddiv>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	4610      	mov	r0, r2
 8004fee:	4619      	mov	r1, r3
 8004ff0:	f7fb fdfa 	bl	8000be8 <__aeabi_d2f>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	659a      	str	r2, [r3, #88]	; 0x58
		if(psxbt->joyL_x > 0.0){
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8005000:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005008:	dd04      	ble.n	8005014 <PSxBTGetXY+0x4dc>
			psxbt->joyL_x = 0.0;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f04f 0200 	mov.w	r2, #0
 8005010:	659a      	str	r2, [r3, #88]	; 0x58
 8005012:	e011      	b.n	8005038 <PSxBTGetXY+0x500>
		}else if(psxbt->joyL_x < -1.0){
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800501a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800501e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005026:	d507      	bpl.n	8005038 <PSxBTGetXY+0x500>
			psxbt->joyL_x = -1.0;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a1f      	ldr	r2, [pc, #124]	; (80050a8 <PSxBTGetXY+0x570>)
 800502c:	659a      	str	r2, [r3, #88]	; 0x58
 800502e:	e003      	b.n	8005038 <PSxBTGetXY+0x500>
		}
	}else{
		psxbt->joyL_x = 0.0;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f04f 0200 	mov.w	r2, #0
 8005036:	659a      	str	r2, [r3, #88]	; 0x58
	}

	psxbt->joyR_2 = (psxbt->an_R2/255.0);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800503c:	4618      	mov	r0, r3
 800503e:	f7fb fa61 	bl	8000504 <__aeabi_ui2d>
 8005042:	a315      	add	r3, pc, #84	; (adr r3, 8005098 <PSxBTGetXY+0x560>)
 8005044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005048:	f7fb fc00 	bl	800084c <__aeabi_ddiv>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	4610      	mov	r0, r2
 8005052:	4619      	mov	r1, r3
 8005054:	f7fb fdc8 	bl	8000be8 <__aeabi_d2f>
 8005058:	4602      	mov	r2, r0
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	65da      	str	r2, [r3, #92]	; 0x5c
	psxbt->joyL_2 = (psxbt->an_L2/255.0);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005062:	4618      	mov	r0, r3
 8005064:	f7fb fa4e 	bl	8000504 <__aeabi_ui2d>
 8005068:	a30b      	add	r3, pc, #44	; (adr r3, 8005098 <PSxBTGetXY+0x560>)
 800506a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506e:	f7fb fbed 	bl	800084c <__aeabi_ddiv>
 8005072:	4602      	mov	r2, r0
 8005074:	460b      	mov	r3, r1
 8005076:	4610      	mov	r0, r2
 8005078:	4619      	mov	r1, r3
 800507a:	f7fb fdb5 	bl	8000be8 <__aeabi_d2f>
 800507e:	4602      	mov	r2, r0
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005084:	bf00      	nop
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	f3af 8000 	nop.w
 8005090:	00000000 	.word	0x00000000
 8005094:	405cc000 	.word	0x405cc000
 8005098:	00000000 	.word	0x00000000
 800509c:	406fe000 	.word	0x406fe000
 80050a0:	40618000 	.word	0x40618000
 80050a4:	40590000 	.word	0x40590000
 80050a8:	bf800000 	.word	0xbf800000
 80050ac:	42e60000 	.word	0x42e60000
 80050b0:	430c0000 	.word	0x430c0000

080050b4 <RNSInit>:
 * Function Example		: RNSInit(CAN1, &RNS);
 * 						  RNSInit(Robot_navi_system, I2C1,  &RNS);
 */

void RNSInit(CAN_HandleTypeDef* hcanx, RNS_interface_t* rns)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
	rns->rns_hcanx = hcanx;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	601a      	str	r2, [r3, #0]

	insData_send[0] = 1;
 80050c4:	4b28      	ldr	r3, [pc, #160]	; (8005168 <RNSInit+0xb4>)
 80050c6:	2201      	movs	r2, #1
 80050c8:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_PENDING;
 80050ca:	4b27      	ldr	r3, [pc, #156]	; (8005168 <RNSInit+0xb4>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	705a      	strb	r2, [r3, #1]

	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	6818      	ldr	r0, [r3, #0]
 80050d4:	2302      	movs	r3, #2
 80050d6:	4a24      	ldr	r2, [pc, #144]	; (8005168 <RNSInit+0xb4>)
 80050d8:	2117      	movs	r1, #23
 80050da:	f7fe f801 	bl	80030e0 <CAN_TxMsg>
	rns->RNS_data.common_instruction = RNS_PENDING;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 1;
 80050e6:	4b20      	ldr	r3, [pc, #128]	; (8005168 <RNSInit+0xb4>)
 80050e8:	2201      	movs	r2, #1
 80050ea:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_RESET_POS;
 80050ec:	4b1e      	ldr	r3, [pc, #120]	; (8005168 <RNSInit+0xb4>)
 80050ee:	2214      	movs	r2, #20
 80050f0:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	6818      	ldr	r0, [r3, #0]
 80050f6:	2302      	movs	r3, #2
 80050f8:	4a1b      	ldr	r2, [pc, #108]	; (8005168 <RNSInit+0xb4>)
 80050fa:	2117      	movs	r1, #23
 80050fc:	f7fd fff0 	bl	80030e0 <CAN_TxMsg>

	rns->RNS_data.common_instruction = RNS_WAITING;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	2202      	movs	r2, #2
 8005104:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	int wait=0;
 8005108:	2300      	movs	r3, #0
 800510a:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING){
 800510c:	e022      	b.n	8005154 <RNSInit+0xa0>
		if(wait >= 2000000){
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	4a16      	ldr	r2, [pc, #88]	; (800516c <RNSInit+0xb8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	dd1b      	ble.n	800514e <RNSInit+0x9a>
			insData_send[0] = 1;
 8005116:	4b14      	ldr	r3, [pc, #80]	; (8005168 <RNSInit+0xb4>)
 8005118:	2201      	movs	r2, #1
 800511a:	701a      	strb	r2, [r3, #0]
			insData_send[1] = RNS_RESET_POS;
 800511c:	4b12      	ldr	r3, [pc, #72]	; (8005168 <RNSInit+0xb4>)
 800511e:	2214      	movs	r2, #20
 8005120:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	6818      	ldr	r0, [r3, #0]
 8005126:	2302      	movs	r3, #2
 8005128:	4a0f      	ldr	r2, [pc, #60]	; (8005168 <RNSInit+0xb4>)
 800512a:	2117      	movs	r1, #23
 800512c:	f7fd ffd8 	bl	80030e0 <CAN_TxMsg>
			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15;
 8005130:	4b0f      	ldr	r3, [pc, #60]	; (8005170 <RNSInit+0xbc>)
 8005132:	785b      	ldrb	r3, [r3, #1]
 8005134:	b25b      	sxtb	r3, r3
 8005136:	4a0e      	ldr	r2, [pc, #56]	; (8005170 <RNSInit+0xbc>)
 8005138:	43db      	mvns	r3, r3
 800513a:	b2db      	uxtb	r3, r3
 800513c:	09db      	lsrs	r3, r3, #7
 800513e:	b2d9      	uxtb	r1, r3
 8005140:	7853      	ldrb	r3, [r2, #1]
 8005142:	f361 13c7 	bfi	r3, r1, #7, #1
 8005146:	7053      	strb	r3, [r2, #1]
			wait = 0;
 8005148:	2300      	movs	r3, #0
 800514a:	60fb      	str	r3, [r7, #12]
 800514c:	e002      	b.n	8005154 <RNSInit+0xa0>
		}else{
			wait ++;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	3301      	adds	r3, #1
 8005152:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING){
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800515a:	2b02      	cmp	r3, #2
 800515c:	d0d7      	beq.n	800510e <RNSInit+0x5a>
		}
	}
}
 800515e:	bf00      	nop
 8005160:	bf00      	nop
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	20008ea8 	.word	0x20008ea8
 800516c:	001e847f 	.word	0x001e847f
 8005170:	40020814 	.word	0x40020814

08005174 <RNSStop>:
 * Function Return		: None
 * Function Example		: RNSStop(&RNS);
 */

void RNSStop(RNS_interface_t* rns)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]


	rns->ins.instruction = RNS_STOP;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2203      	movs	r2, #3
 8005180:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = 0.0;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f04f 0200 	mov.w	r2, #0
 8005188:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = 0.0;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f04f 0200 	mov.w	r2, #0
 8005190:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = 0.0;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f04f 0200 	mov.w	r2, #0
 8005198:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = 0.0;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	615a      	str	r2, [r3, #20]

	//RNSSendIns(rns);
	rns->RNS_data.common_instruction = RNS_WAITING;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2202      	movs	r2, #2
 80051a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 80051aa:	4b31      	ldr	r3, [pc, #196]	; (8005270 <RNSStop+0xfc>)
 80051ac:	2211      	movs	r2, #17
 80051ae:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	791a      	ldrb	r2, [r3, #4]
 80051b4:	4b2e      	ldr	r3, [pc, #184]	; (8005270 <RNSStop+0xfc>)
 80051b6:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6818      	ldr	r0, [r3, #0]
 80051bc:	2302      	movs	r3, #2
 80051be:	4a2c      	ldr	r2, [pc, #176]	; (8005270 <RNSStop+0xfc>)
 80051c0:	2117      	movs	r1, #23
 80051c2:	f7fd ff8d 	bl	80030e0 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0]),8);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6818      	ldr	r0, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f103 0208 	add.w	r2, r3, #8
 80051d0:	2308      	movs	r3, #8
 80051d2:	2118      	movs	r1, #24
 80051d4:	f7fd ff84 	bl	80030e0 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2]),8);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6818      	ldr	r0, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f103 0210 	add.w	r2, r3, #16
 80051e2:	2308      	movs	r3, #8
 80051e4:	2119      	movs	r1, #25
 80051e6:	f7fd ff7b 	bl	80030e0 <CAN_TxMsg>

	int wait = 0;
 80051ea:	2300      	movs	r3, #0
 80051ec:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 80051ee:	e035      	b.n	800525c <RNSStop+0xe8>
	{
		if(wait >= 2000000)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4a20      	ldr	r2, [pc, #128]	; (8005274 <RNSStop+0x100>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	dd2e      	ble.n	8005256 <RNSStop+0xe2>
		{
			insData_send[0] = 17;
 80051f8:	4b1d      	ldr	r3, [pc, #116]	; (8005270 <RNSStop+0xfc>)
 80051fa:	2211      	movs	r2, #17
 80051fc:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->ins.instruction;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	791a      	ldrb	r2, [r3, #4]
 8005202:	4b1b      	ldr	r3, [pc, #108]	; (8005270 <RNSStop+0xfc>)
 8005204:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	2302      	movs	r3, #2
 800520c:	4a18      	ldr	r2, [pc, #96]	; (8005270 <RNSStop+0xfc>)
 800520e:	2117      	movs	r1, #23
 8005210:	f7fd ff66 	bl	80030e0 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0]),8);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6818      	ldr	r0, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f103 0208 	add.w	r2, r3, #8
 800521e:	2308      	movs	r3, #8
 8005220:	2118      	movs	r1, #24
 8005222:	f7fd ff5d 	bl	80030e0 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2]),8);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6818      	ldr	r0, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f103 0210 	add.w	r2, r3, #16
 8005230:	2308      	movs	r3, #8
 8005232:	2119      	movs	r1, #25
 8005234:	f7fd ff54 	bl	80030e0 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 8005238:	4b0f      	ldr	r3, [pc, #60]	; (8005278 <RNSStop+0x104>)
 800523a:	785b      	ldrb	r3, [r3, #1]
 800523c:	b25b      	sxtb	r3, r3
 800523e:	4a0e      	ldr	r2, [pc, #56]	; (8005278 <RNSStop+0x104>)
 8005240:	43db      	mvns	r3, r3
 8005242:	b2db      	uxtb	r3, r3
 8005244:	09db      	lsrs	r3, r3, #7
 8005246:	b2d9      	uxtb	r1, r3
 8005248:	7853      	ldrb	r3, [r2, #1]
 800524a:	f361 13c7 	bfi	r3, r1, #7, #1
 800524e:	7053      	strb	r3, [r2, #1]
			wait = 0;
 8005250:	2300      	movs	r3, #0
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	e002      	b.n	800525c <RNSStop+0xe8>
		}
		else
			wait++;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	3301      	adds	r3, #1
 800525a:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005262:	2b02      	cmp	r3, #2
 8005264:	d0c4      	beq.n	80051f0 <RNSStop+0x7c>
	}


}
 8005266:	bf00      	nop
 8005268:	bf00      	nop
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	20008ea8 	.word	0x20008ea8
 8005274:	001e847f 	.word	0x001e847f
 8005278:	40020814 	.word	0x40020814

0800527c <RNSVelocity>:
 * Function Return		: None
 * Function Example		: RNSVelocity(1.0, 1.5 , 1.5 , 1.0, &RNS);
 */

void RNSVelocity(float fFLeftVelR, float fFRightVelR, float fBLeftVelR, float fBRightVelR, RNS_interface_t* rns)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	ed87 0a05 	vstr	s0, [r7, #20]
 8005286:	edc7 0a04 	vstr	s1, [r7, #16]
 800528a:	ed87 1a03 	vstr	s2, [r7, #12]
 800528e:	edc7 1a02 	vstr	s3, [r7, #8]
 8005292:	6078      	str	r0, [r7, #4]

	rns->ins.instruction = RNS_VELOCITY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2205      	movs	r2, #5
 8005298:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = fFLeftVelR;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = fFRightVelR;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = fBLeftVelR;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = fBRightVelR;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	615a      	str	r2, [r3, #20]

	RNSSendIns(rns);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f8a8 	bl	8005408 <RNSSendIns>

}
 80052b8:	bf00      	nop
 80052ba:	3718      	adds	r7, #24
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <RNSPPstart>:
 * Function Return		: None
 * Function Example		: float point[1][7] = {{3.0, 0.001, 1.0, -180.0, 0.0, 0.0, 1.5}};					//for coordinates use this type of naming
 * 								RNSPPstart(point,1,&rns);
 */

void RNSPPstart(float** allpoints,int no_point,RNS_interface_t* rns){
 80052c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052c4:	b098      	sub	sp, #96	; 0x60
 80052c6:	af0c      	add	r7, sp, #48	; 0x30
 80052c8:	6278      	str	r0, [r7, #36]	; 0x24
 80052ca:	6239      	str	r1, [r7, #32]
 80052cc:	61fa      	str	r2, [r7, #28]
	RNSSet(rns, RNS_PPSend_num_Point,(float)no_point);
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	ee07 3a90 	vmov	s15, r3
 80052d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052d8:	ee17 0a90 	vmov	r0, s15
 80052dc:	f7fb f934 	bl	8000548 <__aeabi_f2d>
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	2119      	movs	r1, #25
 80052e6:	69f8      	ldr	r0, [r7, #28]
 80052e8:	f000 f906 	bl	80054f8 <RNSSet>
	int k;
	for(k=0;k<no_point;k++)
 80052ec:	2300      	movs	r3, #0
 80052ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052f0:	e06b      	b.n	80053ca <RNSPPstart+0x10a>
		RNSSet(rns, RNS_PPSendPoint, allpoints[k][0],allpoints[k][1],allpoints[k][2],allpoints[k][3],allpoints[k][4],allpoints[k][5],allpoints[k][6]);
 80052f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f8:	4413      	add	r3, r2
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4618      	mov	r0, r3
 8005300:	f7fb f922 	bl	8000548 <__aeabi_f2d>
 8005304:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8005308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800530e:	4413      	add	r3, r2
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	3304      	adds	r3, #4
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4618      	mov	r0, r3
 8005318:	f7fb f916 	bl	8000548 <__aeabi_f2d>
 800531c:	4680      	mov	r8, r0
 800531e:	4689      	mov	r9, r1
 8005320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005326:	4413      	add	r3, r2
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3308      	adds	r3, #8
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4618      	mov	r0, r3
 8005330:	f7fb f90a 	bl	8000548 <__aeabi_f2d>
 8005334:	4682      	mov	sl, r0
 8005336:	468b      	mov	fp, r1
 8005338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800533e:	4413      	add	r3, r2
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	330c      	adds	r3, #12
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4618      	mov	r0, r3
 8005348:	f7fb f8fe 	bl	8000548 <__aeabi_f2d>
 800534c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8005350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005356:	4413      	add	r3, r2
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	3310      	adds	r3, #16
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4618      	mov	r0, r3
 8005360:	f7fb f8f2 	bl	8000548 <__aeabi_f2d>
 8005364:	e9c7 0100 	strd	r0, r1, [r7]
 8005368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800536e:	4413      	add	r3, r2
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	3314      	adds	r3, #20
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4618      	mov	r0, r3
 8005378:	f7fb f8e6 	bl	8000548 <__aeabi_f2d>
 800537c:	4604      	mov	r4, r0
 800537e:	460d      	mov	r5, r1
 8005380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005386:	4413      	add	r3, r2
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3318      	adds	r3, #24
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4618      	mov	r0, r3
 8005390:	f7fb f8da 	bl	8000548 <__aeabi_f2d>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800539c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80053a0:	ed97 7b00 	vldr	d7, [r7]
 80053a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80053a8:	ed97 7b02 	vldr	d7, [r7, #8]
 80053ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 80053b0:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80053b4:	e9cd 8900 	strd	r8, r9, [sp]
 80053b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80053bc:	2153      	movs	r1, #83	; 0x53
 80053be:	69f8      	ldr	r0, [r7, #28]
 80053c0:	f000 f89a 	bl	80054f8 <RNSSet>
	for(k=0;k<no_point;k++)
 80053c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c6:	3301      	adds	r3, #1
 80053c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	db8f      	blt.n	80052f2 <RNSPPstart+0x32>
	rns->ins.instruction = RNS_PPStart;
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	2210      	movs	r2, #16
 80053d6:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = 0;
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	f04f 0200 	mov.w	r2, #0
 80053de:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = 0;
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	f04f 0200 	mov.w	r2, #0
 80053e6:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = 0;
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	f04f 0200 	mov.w	r2, #0
 80053ee:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = 0;
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	f04f 0200 	mov.w	r2, #0
 80053f6:	615a      	str	r2, [r3, #20]

	RNSSendIns(rns);
 80053f8:	69f8      	ldr	r0, [r7, #28]
 80053fa:	f000 f805 	bl	8005408 <RNSSendIns>
}
 80053fe:	bf00      	nop
 8005400:	3730      	adds	r7, #48	; 0x30
 8005402:	46bd      	mov	sp, r7
 8005404:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005408 <RNSSendIns>:
 * Function Return		: None
 * Function Example		: None
 */

void RNSSendIns(RNS_interface_t* rns)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
	while(rns->RNS_data.common_instruction == RNS_BUSY);
 8005410:	bf00      	nop
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005418:	2b01      	cmp	r3, #1
 800541a:	d0fa      	beq.n	8005412 <RNSSendIns+0xa>
//
//		sys.pp_start = 0;
//		sys.pp_ready = 0;
//
//	}
	rns->RNS_data.common_instruction = RNS_WAITING;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2202      	movs	r2, #2
 8005420:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 8005424:	4b31      	ldr	r3, [pc, #196]	; (80054ec <RNSSendIns+0xe4>)
 8005426:	2211      	movs	r2, #17
 8005428:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	791a      	ldrb	r2, [r3, #4]
 800542e:	4b2f      	ldr	r3, [pc, #188]	; (80054ec <RNSSendIns+0xe4>)
 8005430:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS, insData_send,2);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6818      	ldr	r0, [r3, #0]
 8005436:	2302      	movs	r3, #2
 8005438:	4a2c      	ldr	r2, [pc, #176]	; (80054ec <RNSSendIns+0xe4>)
 800543a:	2117      	movs	r1, #23
 800543c:	f7fd fe50 	bl	80030e0 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6818      	ldr	r0, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f103 0208 	add.w	r2, r3, #8
 800544a:	2308      	movs	r3, #8
 800544c:	2118      	movs	r1, #24
 800544e:	f7fd fe47 	bl	80030e0 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6818      	ldr	r0, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f103 0210 	add.w	r2, r3, #16
 800545c:	2308      	movs	r3, #8
 800545e:	2119      	movs	r1, #25
 8005460:	f7fd fe3e 	bl	80030e0 <CAN_TxMsg>

	int wait = 0;
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 8005468:	e035      	b.n	80054d6 <RNSSendIns+0xce>
	{
		if(wait >= 2000000)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	4a20      	ldr	r2, [pc, #128]	; (80054f0 <RNSSendIns+0xe8>)
 800546e:	4293      	cmp	r3, r2
 8005470:	dd2e      	ble.n	80054d0 <RNSSendIns+0xc8>
		{
			insData_send[0] = 17;
 8005472:	4b1e      	ldr	r3, [pc, #120]	; (80054ec <RNSSendIns+0xe4>)
 8005474:	2211      	movs	r2, #17
 8005476:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->ins.instruction;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	791a      	ldrb	r2, [r3, #4]
 800547c:	4b1b      	ldr	r3, [pc, #108]	; (80054ec <RNSSendIns+0xe4>)
 800547e:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS, insData_send,2);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6818      	ldr	r0, [r3, #0]
 8005484:	2302      	movs	r3, #2
 8005486:	4a19      	ldr	r2, [pc, #100]	; (80054ec <RNSSendIns+0xe4>)
 8005488:	2117      	movs	r1, #23
 800548a:	f7fd fe29 	bl	80030e0 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6818      	ldr	r0, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f103 0208 	add.w	r2, r3, #8
 8005498:	2308      	movs	r3, #8
 800549a:	2118      	movs	r1, #24
 800549c:	f7fd fe20 	bl	80030e0 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6818      	ldr	r0, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f103 0210 	add.w	r2, r3, #16
 80054aa:	2308      	movs	r3, #8
 80054ac:	2119      	movs	r1, #25
 80054ae:	f7fd fe17 	bl	80030e0 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 80054b2:	4b10      	ldr	r3, [pc, #64]	; (80054f4 <RNSSendIns+0xec>)
 80054b4:	785b      	ldrb	r3, [r3, #1]
 80054b6:	b25b      	sxtb	r3, r3
 80054b8:	4a0e      	ldr	r2, [pc, #56]	; (80054f4 <RNSSendIns+0xec>)
 80054ba:	43db      	mvns	r3, r3
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	09db      	lsrs	r3, r3, #7
 80054c0:	b2d9      	uxtb	r1, r3
 80054c2:	7853      	ldrb	r3, [r2, #1]
 80054c4:	f361 13c7 	bfi	r3, r1, #7, #1
 80054c8:	7053      	strb	r3, [r2, #1]
			wait = 0;
 80054ca:	2300      	movs	r3, #0
 80054cc:	60fb      	str	r3, [r7, #12]
 80054ce:	e002      	b.n	80054d6 <RNSSendIns+0xce>
		}
		else
		{
			wait++;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	3301      	adds	r3, #1
 80054d4:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d0c4      	beq.n	800546a <RNSSendIns+0x62>
		}
	}

}
 80054e0:	bf00      	nop
 80054e2:	bf00      	nop
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	20008ea8 	.word	0x20008ea8
 80054f0:	001e847f 	.word	0x001e847f
 80054f4:	40020814 	.word	0x40020814

080054f8 <RNSSet>:
 * Function Return		: None
 * Function Example		: RNSSet(&RNS, RNS_F_KCD_PTD, 0.9956, 0.01/2000);
 */

void RNSSet(RNS_interface_t* rns, unsigned char parameter, ...)
{
 80054f8:	b40e      	push	{r1, r2, r3}
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b085      	sub	sp, #20
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]

	va_list value;
	rns->param.parameter = parameter;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	7f3a      	ldrb	r2, [r7, #28]
 8005506:	761a      	strb	r2, [r3, #24]
	va_start(value, parameter);
 8005508:	f107 0320 	add.w	r3, r7, #32
 800550c:	60bb      	str	r3, [r7, #8]
	while(rns->RNS_data.common_instruction == RNS_WAITING);
 800550e:	bf00      	nop
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005516:	2b02      	cmp	r3, #2
 8005518:	d0fa      	beq.n	8005510 <RNSSet+0x18>
	if (parameter > RNS_PARAM_1){
 800551a:	7f3b      	ldrb	r3, [r7, #28]
 800551c:	2b18      	cmp	r3, #24
 800551e:	d92b      	bls.n	8005578 <RNSSet+0x80>
		rns->param.param_buffer[0].data = va_arg(value, double);
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	3307      	adds	r3, #7
 8005524:	f023 0307 	bic.w	r3, r3, #7
 8005528:	f103 0208 	add.w	r2, r3, #8
 800552c:	60ba      	str	r2, [r7, #8]
 800552e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005532:	4610      	mov	r0, r2
 8005534:	4619      	mov	r1, r3
 8005536:	f7fb fb57 	bl	8000be8 <__aeabi_d2f>
 800553a:	4602      	mov	r2, r0
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	61da      	str	r2, [r3, #28]
		rns->param.param_buffer[1].data = 0;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f04f 0200 	mov.w	r2, #0
 8005546:	621a      	str	r2, [r3, #32]
		rns->param.param_buffer[2].data = 0;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f04f 0200 	mov.w	r2, #0
 800554e:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f04f 0200 	mov.w	r2, #0
 8005556:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f04f 0200 	mov.w	r2, #0
 800555e:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f04f 0200 	mov.w	r2, #0
 800556e:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f04f 0200 	mov.w	r2, #0
 8005576:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_2){
 8005578:	7f3b      	ldrb	r3, [r7, #28]
 800557a:	2b1e      	cmp	r3, #30
 800557c:	d927      	bls.n	80055ce <RNSSet+0xd6>
		rns->param.param_buffer[1].data = va_arg(value, double);
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	3307      	adds	r3, #7
 8005582:	f023 0307 	bic.w	r3, r3, #7
 8005586:	f103 0208 	add.w	r2, r3, #8
 800558a:	60ba      	str	r2, [r7, #8]
 800558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005590:	4610      	mov	r0, r2
 8005592:	4619      	mov	r1, r3
 8005594:	f7fb fb28 	bl	8000be8 <__aeabi_d2f>
 8005598:	4602      	mov	r2, r0
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	621a      	str	r2, [r3, #32]
		rns->param.param_buffer[2].data = 0;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f04f 0200 	mov.w	r2, #0
 80055a4:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f04f 0200 	mov.w	r2, #0
 80055b4:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f04f 0200 	mov.w	r2, #0
 80055c4:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f04f 0200 	mov.w	r2, #0
 80055cc:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_3){
 80055ce:	7f3b      	ldrb	r3, [r7, #28]
 80055d0:	2b23      	cmp	r3, #35	; 0x23
 80055d2:	d923      	bls.n	800561c <RNSSet+0x124>
		rns->param.param_buffer[2].data = va_arg(value, double);
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	3307      	adds	r3, #7
 80055d8:	f023 0307 	bic.w	r3, r3, #7
 80055dc:	f103 0208 	add.w	r2, r3, #8
 80055e0:	60ba      	str	r2, [r7, #8]
 80055e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e6:	4610      	mov	r0, r2
 80055e8:	4619      	mov	r1, r3
 80055ea:	f7fb fafd 	bl	8000be8 <__aeabi_d2f>
 80055ee:	4602      	mov	r2, r0
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f04f 0200 	mov.w	r2, #0
 80055fa:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f04f 0200 	mov.w	r2, #0
 8005602:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f04f 0200 	mov.w	r2, #0
 800560a:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f04f 0200 	mov.w	r2, #0
 8005612:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f04f 0200 	mov.w	r2, #0
 800561a:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_4){
 800561c:	7f3b      	ldrb	r3, [r7, #28]
 800561e:	2b48      	cmp	r3, #72	; 0x48
 8005620:	d91f      	bls.n	8005662 <RNSSet+0x16a>
		rns->param.param_buffer[3].data = va_arg(value, double);
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	3307      	adds	r3, #7
 8005626:	f023 0307 	bic.w	r3, r3, #7
 800562a:	f103 0208 	add.w	r2, r3, #8
 800562e:	60ba      	str	r2, [r7, #8]
 8005630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005634:	4610      	mov	r0, r2
 8005636:	4619      	mov	r1, r3
 8005638:	f7fb fad6 	bl	8000be8 <__aeabi_d2f>
 800563c:	4602      	mov	r2, r0
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f04f 0200 	mov.w	r2, #0
 8005648:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f04f 0200 	mov.w	r2, #0
 8005650:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f04f 0200 	mov.w	r2, #0
 8005658:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f04f 0200 	mov.w	r2, #0
 8005660:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_5){
 8005662:	7f3b      	ldrb	r3, [r7, #28]
 8005664:	2b50      	cmp	r3, #80	; 0x50
 8005666:	d91b      	bls.n	80056a0 <RNSSet+0x1a8>
		rns->param.param_buffer[4].data = va_arg(value,double);
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	3307      	adds	r3, #7
 800566c:	f023 0307 	bic.w	r3, r3, #7
 8005670:	f103 0208 	add.w	r2, r3, #8
 8005674:	60ba      	str	r2, [r7, #8]
 8005676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567a:	4610      	mov	r0, r2
 800567c:	4619      	mov	r1, r3
 800567e:	f7fb fab3 	bl	8000be8 <__aeabi_d2f>
 8005682:	4602      	mov	r2, r0
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f04f 0200 	mov.w	r2, #0
 800568e:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f04f 0200 	mov.w	r2, #0
 8005696:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f04f 0200 	mov.w	r2, #0
 800569e:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_6){
 80056a0:	7f3b      	ldrb	r3, [r7, #28]
 80056a2:	2b51      	cmp	r3, #81	; 0x51
 80056a4:	d917      	bls.n	80056d6 <RNSSet+0x1de>
		rns->param.param_buffer[5].data = va_arg(value, double);
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	3307      	adds	r3, #7
 80056aa:	f023 0307 	bic.w	r3, r3, #7
 80056ae:	f103 0208 	add.w	r2, r3, #8
 80056b2:	60ba      	str	r2, [r7, #8]
 80056b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b8:	4610      	mov	r0, r2
 80056ba:	4619      	mov	r1, r3
 80056bc:	f7fb fa94 	bl	8000be8 <__aeabi_d2f>
 80056c0:	4602      	mov	r2, r0
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f04f 0200 	mov.w	r2, #0
 80056cc:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f04f 0200 	mov.w	r2, #0
 80056d4:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_7){
 80056d6:	7f3b      	ldrb	r3, [r7, #28]
 80056d8:	2b52      	cmp	r3, #82	; 0x52
 80056da:	d913      	bls.n	8005704 <RNSSet+0x20c>
		rns->param.param_buffer[6].data = va_arg(value, double);
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	3307      	adds	r3, #7
 80056e0:	f023 0307 	bic.w	r3, r3, #7
 80056e4:	f103 0208 	add.w	r2, r3, #8
 80056e8:	60ba      	str	r2, [r7, #8]
 80056ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ee:	4610      	mov	r0, r2
 80056f0:	4619      	mov	r1, r3
 80056f2:	f7fb fa79 	bl	8000be8 <__aeabi_d2f>
 80056f6:	4602      	mov	r2, r0
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f04f 0200 	mov.w	r2, #0
 8005702:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if(parameter > RNS_PARAM_8){
 8005704:	7f3b      	ldrb	r3, [r7, #28]
 8005706:	2b54      	cmp	r3, #84	; 0x54
 8005708:	d90f      	bls.n	800572a <RNSSet+0x232>
		rns->param.param_buffer[7].data = va_arg(value, double);
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	3307      	adds	r3, #7
 800570e:	f023 0307 	bic.w	r3, r3, #7
 8005712:	f103 0208 	add.w	r2, r3, #8
 8005716:	60ba      	str	r2, [r7, #8]
 8005718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571c:	4610      	mov	r0, r2
 800571e:	4619      	mov	r1, r3
 8005720:	f7fb fa62 	bl	8000be8 <__aeabi_d2f>
 8005724:	4602      	mov	r2, r0
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	639a      	str	r2, [r3, #56]	; 0x38
	}

	va_end(value);

	insData_send[0] = 17;
 800572a:	4b4d      	ldr	r3, [pc, #308]	; (8005860 <RNSSet+0x368>)
 800572c:	2211      	movs	r2, #17
 800572e:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->param.parameter;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	7e1a      	ldrb	r2, [r3, #24]
 8005734:	4b4a      	ldr	r3, [pc, #296]	; (8005860 <RNSSet+0x368>)
 8005736:	705a      	strb	r2, [r3, #1]

	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6818      	ldr	r0, [r3, #0]
 800573c:	2302      	movs	r3, #2
 800573e:	4a48      	ldr	r2, [pc, #288]	; (8005860 <RNSSet+0x368>)
 8005740:	2117      	movs	r1, #23
 8005742:	f7fd fccd 	bl	80030e0 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->param.param_buffer[0]),8);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6818      	ldr	r0, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f103 021c 	add.w	r2, r3, #28
 8005750:	2308      	movs	r3, #8
 8005752:	2118      	movs	r1, #24
 8005754:	f7fd fcc4 	bl	80030e0 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->param.param_buffer[2]),8);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6818      	ldr	r0, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8005762:	2308      	movs	r3, #8
 8005764:	2119      	movs	r1, #25
 8005766:	f7fd fcbb 	bl	80030e0 <CAN_TxMsg>
	if(parameter > RNS_PARAM_5)
 800576a:	7f3b      	ldrb	r3, [r7, #28]
 800576c:	2b50      	cmp	r3, #80	; 0x50
 800576e:	d908      	bls.n	8005782 <RNSSet+0x28a>
		CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf3,&(rns->param.param_buffer[4]),8);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6818      	ldr	r0, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800577a:	2308      	movs	r3, #8
 800577c:	211a      	movs	r1, #26
 800577e:	f7fd fcaf 	bl	80030e0 <CAN_TxMsg>
	if(parameter > RNS_PARAM_7)
 8005782:	7f3b      	ldrb	r3, [r7, #28]
 8005784:	2b52      	cmp	r3, #82	; 0x52
 8005786:	d908      	bls.n	800579a <RNSSet+0x2a2>
		CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf4,&(rns->param.param_buffer[6]),8);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6818      	ldr	r0, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005792:	2308      	movs	r3, #8
 8005794:	211b      	movs	r1, #27
 8005796:	f7fd fca3 	bl	80030e0 <CAN_TxMsg>

	rns->RNS_data.common_instruction = RNS_WAITING;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2202      	movs	r2, #2
 800579e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	int wait = 0;
 80057a2:	2300      	movs	r3, #0
 80057a4:	60fb      	str	r3, [r7, #12]

	while(rns->RNS_data.common_instruction == RNS_WAITING)
 80057a6:	e04d      	b.n	8005844 <RNSSet+0x34c>
	{
		if(wait >= 2000000)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4a2e      	ldr	r2, [pc, #184]	; (8005864 <RNSSet+0x36c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	dd46      	ble.n	800583e <RNSSet+0x346>
		{
			insData_send[0] = 17;
 80057b0:	4b2b      	ldr	r3, [pc, #172]	; (8005860 <RNSSet+0x368>)
 80057b2:	2211      	movs	r2, #17
 80057b4:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->param.parameter;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	7e1a      	ldrb	r2, [r3, #24]
 80057ba:	4b29      	ldr	r3, [pc, #164]	; (8005860 <RNSSet+0x368>)
 80057bc:	705a      	strb	r2, [r3, #1]

			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6818      	ldr	r0, [r3, #0]
 80057c2:	2302      	movs	r3, #2
 80057c4:	4a26      	ldr	r2, [pc, #152]	; (8005860 <RNSSet+0x368>)
 80057c6:	2117      	movs	r1, #23
 80057c8:	f7fd fc8a 	bl	80030e0 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->param.param_buffer[0]),8);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6818      	ldr	r0, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f103 021c 	add.w	r2, r3, #28
 80057d6:	2308      	movs	r3, #8
 80057d8:	2118      	movs	r1, #24
 80057da:	f7fd fc81 	bl	80030e0 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->param.param_buffer[2]),8);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6818      	ldr	r0, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80057e8:	2308      	movs	r3, #8
 80057ea:	2119      	movs	r1, #25
 80057ec:	f7fd fc78 	bl	80030e0 <CAN_TxMsg>
			if(parameter > RNS_PARAM_5)
 80057f0:	7f3b      	ldrb	r3, [r7, #28]
 80057f2:	2b50      	cmp	r3, #80	; 0x50
 80057f4:	d908      	bls.n	8005808 <RNSSet+0x310>
				CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf3,&(rns->param.param_buffer[4]),8);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6818      	ldr	r0, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8005800:	2308      	movs	r3, #8
 8005802:	211a      	movs	r1, #26
 8005804:	f7fd fc6c 	bl	80030e0 <CAN_TxMsg>
			if(parameter > RNS_PARAM_7)
 8005808:	7f3b      	ldrb	r3, [r7, #28]
 800580a:	2b52      	cmp	r3, #82	; 0x52
 800580c:	d908      	bls.n	8005820 <RNSSet+0x328>
				CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf4,&(rns->param.param_buffer[6]),8);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6818      	ldr	r0, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005818:	2308      	movs	r3, #8
 800581a:	211b      	movs	r1, #27
 800581c:	f7fd fc60 	bl	80030e0 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 8005820:	4b11      	ldr	r3, [pc, #68]	; (8005868 <RNSSet+0x370>)
 8005822:	785b      	ldrb	r3, [r3, #1]
 8005824:	b25b      	sxtb	r3, r3
 8005826:	4a10      	ldr	r2, [pc, #64]	; (8005868 <RNSSet+0x370>)
 8005828:	43db      	mvns	r3, r3
 800582a:	b2db      	uxtb	r3, r3
 800582c:	09db      	lsrs	r3, r3, #7
 800582e:	b2d9      	uxtb	r1, r3
 8005830:	7853      	ldrb	r3, [r2, #1]
 8005832:	f361 13c7 	bfi	r3, r1, #7, #1
 8005836:	7053      	strb	r3, [r2, #1]
			wait = 0;
 8005838:	2300      	movs	r3, #0
 800583a:	60fb      	str	r3, [r7, #12]
 800583c:	e002      	b.n	8005844 <RNSSet+0x34c>
		}
		else
			wait++;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	3301      	adds	r3, #1
 8005842:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800584a:	2b02      	cmp	r3, #2
 800584c:	d0ac      	beq.n	80057a8 <RNSSet+0x2b0>
	}
	//UARTPrintString(&huart5,"1\r\n");

}
 800584e:	bf00      	nop
 8005850:	bf00      	nop
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800585a:	b003      	add	sp, #12
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	20008ea8 	.word	0x20008ea8
 8005864:	001e847f 	.word	0x001e847f
 8005868:	40020814 	.word	0x40020814

0800586c <RNSEnquire>:
 * Function Return		: None
 * Function Example		: RNSSet(&RNS, RNS_F_KCD_PTD, 0.9956, 0.01/2000);
 */

uint8_t RNSEnquire(unsigned char parameter, RNS_interface_t* rns)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	4603      	mov	r3, r0
 8005874:	6039      	str	r1, [r7, #0]
 8005876:	71fb      	strb	r3, [r7, #7]

	rns->ins.instruction = parameter;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	79fa      	ldrb	r2, [r7, #7]
 800587c:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = 0.0;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	f04f 0200 	mov.w	r2, #0
 8005884:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = 0.0;
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	f04f 0200 	mov.w	r2, #0
 800588c:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = 0.0;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	f04f 0200 	mov.w	r2, #0
 8005894:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = 0.0;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	f04f 0200 	mov.w	r2, #0
 800589c:	615a      	str	r2, [r3, #20]

//	RNSSendIns(rns);

	rns->RNS_data.common_instruction = RNS_WAITING;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2202      	movs	r2, #2
 80058a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 80058a6:	4b3b      	ldr	r3, [pc, #236]	; (8005994 <RNSEnquire+0x128>)
 80058a8:	2211      	movs	r2, #17
 80058aa:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	791a      	ldrb	r2, [r3, #4]
 80058b0:	4b38      	ldr	r3, [pc, #224]	; (8005994 <RNSEnquire+0x128>)
 80058b2:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	6818      	ldr	r0, [r3, #0]
 80058b8:	2302      	movs	r3, #2
 80058ba:	4a36      	ldr	r2, [pc, #216]	; (8005994 <RNSEnquire+0x128>)
 80058bc:	2117      	movs	r1, #23
 80058be:	f7fd fc0f 	bl	80030e0 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	6818      	ldr	r0, [r3, #0]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	f103 0208 	add.w	r2, r3, #8
 80058cc:	2308      	movs	r3, #8
 80058ce:	2118      	movs	r1, #24
 80058d0:	f7fd fc06 	bl	80030e0 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	6818      	ldr	r0, [r3, #0]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	f103 0210 	add.w	r2, r3, #16
 80058de:	2308      	movs	r3, #8
 80058e0:	2119      	movs	r1, #25
 80058e2:	f7fd fbfd 	bl	80030e0 <CAN_TxMsg>

	int wait = 0;
 80058e6:	2300      	movs	r3, #0
 80058e8:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 80058ea:	e035      	b.n	8005958 <RNSEnquire+0xec>
	{
		if(wait >= 2000000)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4a2a      	ldr	r2, [pc, #168]	; (8005998 <RNSEnquire+0x12c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	dd2e      	ble.n	8005952 <RNSEnquire+0xe6>
		{
			insData_send[0] = 17;
 80058f4:	4b27      	ldr	r3, [pc, #156]	; (8005994 <RNSEnquire+0x128>)
 80058f6:	2211      	movs	r2, #17
 80058f8:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->ins.instruction;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	791a      	ldrb	r2, [r3, #4]
 80058fe:	4b25      	ldr	r3, [pc, #148]	; (8005994 <RNSEnquire+0x128>)
 8005900:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	6818      	ldr	r0, [r3, #0]
 8005906:	2302      	movs	r3, #2
 8005908:	4a22      	ldr	r2, [pc, #136]	; (8005994 <RNSEnquire+0x128>)
 800590a:	2117      	movs	r1, #23
 800590c:	f7fd fbe8 	bl	80030e0 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	6818      	ldr	r0, [r3, #0]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	f103 0208 	add.w	r2, r3, #8
 800591a:	2308      	movs	r3, #8
 800591c:	2118      	movs	r1, #24
 800591e:	f7fd fbdf 	bl	80030e0 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	6818      	ldr	r0, [r3, #0]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	f103 0210 	add.w	r2, r3, #16
 800592c:	2308      	movs	r3, #8
 800592e:	2119      	movs	r1, #25
 8005930:	f7fd fbd6 	bl	80030e0 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 8005934:	4b19      	ldr	r3, [pc, #100]	; (800599c <RNSEnquire+0x130>)
 8005936:	785b      	ldrb	r3, [r3, #1]
 8005938:	b25b      	sxtb	r3, r3
 800593a:	4a18      	ldr	r2, [pc, #96]	; (800599c <RNSEnquire+0x130>)
 800593c:	43db      	mvns	r3, r3
 800593e:	b2db      	uxtb	r3, r3
 8005940:	09db      	lsrs	r3, r3, #7
 8005942:	b2d9      	uxtb	r1, r3
 8005944:	7853      	ldrb	r3, [r2, #1]
 8005946:	f361 13c7 	bfi	r3, r1, #7, #1
 800594a:	7053      	strb	r3, [r2, #1]
			wait = 0;
 800594c:	2300      	movs	r3, #0
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	e002      	b.n	8005958 <RNSEnquire+0xec>
		}
		else wait++;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	3301      	adds	r3, #1
 8005956:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800595e:	2b02      	cmp	r3, #2
 8005960:	d0c4      	beq.n	80058ec <RNSEnquire+0x80>

	}

	rns->enq.enquiry = parameter;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	79fa      	ldrb	r2, [r7, #7]
 8005966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rns->enq.enq_buffer[0].data = rns->RNS_data.common_buffer[0].data;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	641a      	str	r2, [r3, #64]	; 0x40
	rns->enq.enq_buffer[1].data = rns->RNS_data.common_buffer[1].data;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	645a      	str	r2, [r3, #68]	; 0x44
	rns->enq.enq_buffer[2].data = rns->RNS_data.common_buffer[2].data;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	649a      	str	r2, [r3, #72]	; 0x48
	rns->enq.enq_buffer[3].data = rns->RNS_data.common_buffer[3].data;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	64da      	str	r2, [r3, #76]	; 0x4c


	return 1;
 800598a:	2301      	movs	r3, #1
}
 800598c:	4618      	mov	r0, r3
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	20008ea8 	.word	0x20008ea8
 8005998:	001e847f 	.word	0x001e847f
 800599c:	40020814 	.word	0x40020814

080059a0 <SPIxInit>:
 *
 * Function Return		: None
 * Function Example		: IMU_SPI_Init(&hspix, GPIOB , GPIO_Pin_12, SPI_MODE_MASTER);
 *
 */
void SPIxInit(SPI_HandleTypeDef* hspix, GPIO_TypeDef* GPIOx_NSS, uint16_t GPIO_Pin_NSS,uint32_t Mode, int InterruptEnable){
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b088      	sub	sp, #32
 80059a4:	af02      	add	r7, sp, #8
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	603b      	str	r3, [r7, #0]
 80059ac:	4613      	mov	r3, r2
 80059ae:	80fb      	strh	r3, [r7, #6]

	IRQn_Type nvic;
	GPIOPinsInit(GPIOx_NSS, GPIO_Pin_NSS, GPIO_MODE_OUTPUT_PP, GPIO_PULLUP, GPIO_SPEED_FREQ_HIGH);
 80059b0:	88f9      	ldrh	r1, [r7, #6]
 80059b2:	2302      	movs	r3, #2
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	2301      	movs	r3, #1
 80059b8:	2201      	movs	r2, #1
 80059ba:	68b8      	ldr	r0, [r7, #8]
 80059bc:	f7fb fba0 	bl	8001100 <GPIOPinsInit>

	if(hspix == &hspi1){
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4a2a      	ldr	r2, [pc, #168]	; (8005a6c <SPIxInit+0xcc>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d105      	bne.n	80059d4 <SPIxInit+0x34>
		hspix->Instance = SPI1;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4a29      	ldr	r2, [pc, #164]	; (8005a70 <SPIxInit+0xd0>)
 80059cc:	601a      	str	r2, [r3, #0]
		nvic = SPI1_IRQn;
 80059ce:	2323      	movs	r3, #35	; 0x23
 80059d0:	75fb      	strb	r3, [r7, #23]
 80059d2:	e00e      	b.n	80059f2 <SPIxInit+0x52>
	}else if(hspix == &hspi2){
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4a27      	ldr	r2, [pc, #156]	; (8005a74 <SPIxInit+0xd4>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d105      	bne.n	80059e8 <SPIxInit+0x48>
		hspix->Instance = SPI2;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4a26      	ldr	r2, [pc, #152]	; (8005a78 <SPIxInit+0xd8>)
 80059e0:	601a      	str	r2, [r3, #0]
		nvic = SPI2_IRQn;
 80059e2:	2324      	movs	r3, #36	; 0x24
 80059e4:	75fb      	strb	r3, [r7, #23]
 80059e6:	e004      	b.n	80059f2 <SPIxInit+0x52>
	}
	else{
		hspix->Instance = SPI3;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4a24      	ldr	r2, [pc, #144]	; (8005a7c <SPIxInit+0xdc>)
 80059ec:	601a      	str	r2, [r3, #0]
		nvic = SPI3_IRQn;
 80059ee:	2333      	movs	r3, #51	; 0x33
 80059f0:	75fb      	strb	r3, [r7, #23]
	}

	hspix->Init.Mode = Mode;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	605a      	str	r2, [r3, #4]
	hspix->Init.Direction = SPI_DIRECTION_2LINES;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	609a      	str	r2, [r3, #8]
	hspix->Init.DataSize = SPI_DATASIZE_8BIT;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	60da      	str	r2, [r3, #12]
	hspix->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	611a      	str	r2, [r3, #16]
	hspix->Init.CLKPhase = SPI_PHASE_1EDGE;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	615a      	str	r2, [r3, #20]
//	hspix->Init.CLKPhase = SPI_PHASE_2EDGE;
	hspix->Init.NSS = SPI_NSS_SOFT ;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a16:	619a      	str	r2, [r3, #24]
	hspix->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	61da      	str	r2, [r3, #28]
//	hspix->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
	hspix->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	621a      	str	r2, [r3, #32]
	hspix->Init.TIMode = SPI_TIMODE_DISABLE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	625a      	str	r2, [r3, #36]	; 0x24
	hspix->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	629a      	str	r2, [r3, #40]	; 0x28
	hspix->Init.CRCPolynomial = 10;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	220a      	movs	r2, #10
 8005a34:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005a36:	480d      	ldr	r0, [pc, #52]	; (8005a6c <SPIxInit+0xcc>)
 8005a38:	f009 fc24 	bl	800f284 <HAL_SPI_Init>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <SPIxInit+0xa6>
	{
		Error_Handler();
 8005a42:	f7fe fd07 	bl	8004454 <Error_Handler>
	}

	if(InterruptEnable){
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00b      	beq.n	8005a64 <SPIxInit+0xc4>
		HAL_NVIC_SetPriority(nvic, SPI1_RX_IRQ_PRIO, 0);
 8005a4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a50:	2200      	movs	r2, #0
 8005a52:	210e      	movs	r1, #14
 8005a54:	4618      	mov	r0, r3
 8005a56:	f005 fd3d 	bl	800b4d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8005a5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f005 fd54 	bl	800b50c <HAL_NVIC_EnableIRQ>
	}

}
 8005a64:	bf00      	nop
 8005a66:	3718      	adds	r7, #24
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	20008570 	.word	0x20008570
 8005a70:	40013000 	.word	0x40013000
 8005a74:	20006ed8 	.word	0x20006ed8
 8005a78:	40003800 	.word	0x40003800
 8005a7c:	40003c00 	.word	0x40003c00

08005a80 <SPIx_DMA_TX_Init>:


void SPIx_DMA_TX_Init(SPI_HandleTypeDef* hspix, DMA_HandleTypeDef* hdma_spix,
		GPIO_TypeDef* GPIOx_NSS, uint16_t GPIO_Pin_NSS,uint32_t Mode){
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b088      	sub	sp, #32
 8005a84:	af02      	add	r7, sp, #8
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
 8005a8c:	807b      	strh	r3, [r7, #2]

	__HAL_RCC_DMA2_CLK_ENABLE();
 8005a8e:	2300      	movs	r3, #0
 8005a90:	617b      	str	r3, [r7, #20]
 8005a92:	4b28      	ldr	r3, [pc, #160]	; (8005b34 <SPIx_DMA_TX_Init+0xb4>)
 8005a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a96:	4a27      	ldr	r2, [pc, #156]	; (8005b34 <SPIx_DMA_TX_Init+0xb4>)
 8005a98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a9e:	4b25      	ldr	r3, [pc, #148]	; (8005b34 <SPIx_DMA_TX_Init+0xb4>)
 8005aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aa6:	617b      	str	r3, [r7, #20]
 8005aa8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, SPI1_TX_IRQ_PRIO, 0);
 8005aaa:	2200      	movs	r2, #0
 8005aac:	210d      	movs	r1, #13
 8005aae:	2044      	movs	r0, #68	; 0x44
 8005ab0:	f005 fd10 	bl	800b4d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_ClearPendingIRQ(DMA2_Stream5_IRQn);
 8005ab4:	2044      	movs	r0, #68	; 0x44
 8005ab6:	f005 fd45 	bl	800b544 <HAL_NVIC_ClearPendingIRQ>
    HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8005aba:	2044      	movs	r0, #68	; 0x44
 8005abc:	f005 fd26 	bl	800b50c <HAL_NVIC_EnableIRQ>

	SPIxInit(hspix, GPIOx_NSS, GPIO_Pin_NSS, Mode, DISABLE);
 8005ac0:	887a      	ldrh	r2, [r7, #2]
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	6879      	ldr	r1, [r7, #4]
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f7ff ff68 	bl	80059a0 <SPIxInit>

    hdma_spix->Instance = DMA2_Stream5;
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	4a19      	ldr	r2, [pc, #100]	; (8005b38 <SPIx_DMA_TX_Init+0xb8>)
 8005ad4:	601a      	str	r2, [r3, #0]
    hdma_spix->Init.Channel = DMA_CHANNEL_3;
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005adc:	605a      	str	r2, [r3, #4]
    hdma_spix->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	2240      	movs	r2, #64	; 0x40
 8005ae2:	609a      	str	r2, [r3, #8]
    hdma_spix->Init.PeriphInc = DMA_PINC_DISABLE;
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	60da      	str	r2, [r3, #12]
    hdma_spix->Init.MemInc = DMA_MINC_ENABLE;
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005af0:	611a      	str	r2, [r3, #16]
    hdma_spix->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	2200      	movs	r2, #0
 8005af6:	615a      	str	r2, [r3, #20]
    hdma_spix->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2200      	movs	r2, #0
 8005afc:	619a      	str	r2, [r3, #24]
    hdma_spix->Init.Mode = DMA_NORMAL;
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2200      	movs	r2, #0
 8005b02:	61da      	str	r2, [r3, #28]
    hdma_spix->Init.Priority = DMA_PRIORITY_LOW;
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	2200      	movs	r2, #0
 8005b08:	621a      	str	r2, [r3, #32]
    hdma_spix->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(hdma_spix) != HAL_OK)
 8005b10:	68b8      	ldr	r0, [r7, #8]
 8005b12:	f005 fd25 	bl	800b560 <HAL_DMA_Init>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <SPIx_DMA_TX_Init+0xa0>
    {
      Error_Handler();
 8005b1c:	f7fe fc9a 	bl	8004454 <Error_Handler>
    }

    __HAL_LINKDMA(hspix,hdmatx,*hdma_spix);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	649a      	str	r2, [r3, #72]	; 0x48
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005b2c:	bf00      	nop
 8005b2e:	3718      	adds	r7, #24
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	40023800 	.word	0x40023800
 8005b38:	40026488 	.word	0x40026488

08005b3c <SPI1_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI1_IRQHandler(void)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi1);
 8005b40:	4802      	ldr	r0, [pc, #8]	; (8005b4c <SPI1_IRQHandler+0x10>)
 8005b42:	f009 fd37 	bl	800f5b4 <HAL_SPI_IRQHandler>
}
 8005b46:	bf00      	nop
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	20008570 	.word	0x20008570

08005b50 <SPI2_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI2_IRQHandler(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi2);
 8005b54:	4802      	ldr	r0, [pc, #8]	; (8005b60 <SPI2_IRQHandler+0x10>)
 8005b56:	f009 fd2d 	bl	800f5b4 <HAL_SPI_IRQHandler>
}
 8005b5a:	bf00      	nop
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	20006ed8 	.word	0x20006ed8

08005b64 <SPI3_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI3_IRQHandler(void)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi3);
 8005b68:	4802      	ldr	r0, [pc, #8]	; (8005b74 <SPI3_IRQHandler+0x10>)
 8005b6a:	f009 fd23 	bl	800f5b4 <HAL_SPI_IRQHandler>
}
 8005b6e:	bf00      	nop
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	200075b8 	.word	0x200075b8

08005b78 <Initialize>:
uint8_t mailbox = 0, buf2_flag = 0, buf2_flagC2 = 0;

/************************************************/
/*		 	 	Functions		       		  	*/
/************************************************/
void Initialize(){
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af04      	add	r7, sp, #16
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8005b7e:	f004 fcbb 	bl	800a4f8 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8005b82:	f7fc fdbf 	bl	8002704 <SystemClock_Config>

	/* Initialize all configured peripherals */
	GPIOPinsInit (LED1_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8005b86:	2301      	movs	r3, #1
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b92:	48c4      	ldr	r0, [pc, #784]	; (8005ea4 <Initialize+0x32c>)
 8005b94:	f7fb fab4 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (LED2_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8005b98:	2301      	movs	r3, #1
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005ba4:	48bf      	ldr	r0, [pc, #764]	; (8005ea4 <Initialize+0x32c>)
 8005ba6:	f7fb faab 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (LED3_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8005baa:	2301      	movs	r3, #1
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	2302      	movs	r3, #2
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005bb6:	48bb      	ldr	r0, [pc, #748]	; (8005ea4 <Initialize+0x32c>)
 8005bb8:	f7fb faa2 	bl	8001100 <GPIOPinsInit>

	GPIOPinsInit (PB1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	2180      	movs	r1, #128	; 0x80
 8005bc6:	48b8      	ldr	r0, [pc, #736]	; (8005ea8 <Initialize+0x330>)
 8005bc8:	f7fb fa9a 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (PB2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8005bcc:	2301      	movs	r3, #1
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	48b5      	ldr	r0, [pc, #724]	; (8005eac <Initialize+0x334>)
 8005bd8:	f7fb fa92 	bl	8001100 <GPIOPinsInit>

	/*Normal IOs*/
	GPIOPinsInit (IP1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8005bdc:	2301      	movs	r3, #1
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	2301      	movs	r3, #1
 8005be2:	2200      	movs	r2, #0
 8005be4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005be8:	48b0      	ldr	r0, [pc, #704]	; (8005eac <Initialize+0x334>)
 8005bea:	f7fb fa89 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8005bee:	2301      	movs	r3, #1
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005bfa:	48ac      	ldr	r0, [pc, #688]	; (8005eac <Initialize+0x334>)
 8005bfc:	f7fb fa80 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8005c00:	2301      	movs	r3, #1
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	2301      	movs	r3, #1
 8005c06:	2200      	movs	r2, #0
 8005c08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c0c:	48a7      	ldr	r0, [pc, #668]	; (8005eac <Initialize+0x334>)
 8005c0e:	f7fb fa77 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8005c12:	2301      	movs	r3, #1
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	2301      	movs	r3, #1
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c1e:	48a3      	ldr	r0, [pc, #652]	; (8005eac <Initialize+0x334>)
 8005c20:	f7fb fa6e 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8005c24:	2301      	movs	r3, #1
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	2301      	movs	r3, #1
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c30:	489d      	ldr	r0, [pc, #628]	; (8005ea8 <Initialize+0x330>)
 8005c32:	f7fb fa65 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP6_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8005c36:	2301      	movs	r3, #1
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c42:	4899      	ldr	r0, [pc, #612]	; (8005ea8 <Initialize+0x330>)
 8005c44:	f7fb fa5c 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP7_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8005c48:	2301      	movs	r3, #1
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005c54:	4896      	ldr	r0, [pc, #600]	; (8005eb0 <Initialize+0x338>)
 8005c56:	f7fb fa53 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP8_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	9300      	str	r3, [sp, #0]
 8005c5e:	2301      	movs	r3, #1
 8005c60:	2200      	movs	r2, #0
 8005c62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005c66:	4892      	ldr	r0, [pc, #584]	; (8005eb0 <Initialize+0x338>)
 8005c68:	f7fb fa4a 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP9_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	2301      	movs	r3, #1
 8005c72:	2200      	movs	r2, #0
 8005c74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c78:	488a      	ldr	r0, [pc, #552]	; (8005ea4 <Initialize+0x32c>)
 8005c7a:	f7fb fa41 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP10_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8005c7e:	2301      	movs	r3, #1
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	2301      	movs	r3, #1
 8005c84:	2200      	movs	r2, #0
 8005c86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005c8a:	488a      	ldr	r0, [pc, #552]	; (8005eb4 <Initialize+0x33c>)
 8005c8c:	f7fb fa38 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP11_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8005c90:	2301      	movs	r3, #1
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	2301      	movs	r3, #1
 8005c96:	2200      	movs	r2, #0
 8005c98:	2108      	movs	r1, #8
 8005c9a:	4885      	ldr	r0, [pc, #532]	; (8005eb0 <Initialize+0x338>)
 8005c9c:	f7fb fa30 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP12_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	2110      	movs	r1, #16
 8005caa:	4881      	ldr	r0, [pc, #516]	; (8005eb0 <Initialize+0x338>)
 8005cac:	f7fb fa28 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP13_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	2180      	movs	r1, #128	; 0x80
 8005cba:	487d      	ldr	r0, [pc, #500]	; (8005eb0 <Initialize+0x338>)
 8005cbc:	f7fb fa20 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP14_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	9300      	str	r3, [sp, #0]
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	2120      	movs	r1, #32
 8005cca:	4877      	ldr	r0, [pc, #476]	; (8005ea8 <Initialize+0x330>)
 8005ccc:	f7fb fa18 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP15_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	2140      	movs	r1, #64	; 0x40
 8005cda:	4873      	ldr	r0, [pc, #460]	; (8005ea8 <Initialize+0x330>)
 8005cdc:	f7fb fa10 	bl	8001100 <GPIOPinsInit>

	GPIOPinsInit (IP16_Analog1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	2101      	movs	r1, #1
 8005cea:	486e      	ldr	r0, [pc, #440]	; (8005ea4 <Initialize+0x32c>)
 8005cec:	f7fb fa08 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP17_Analog2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	2102      	movs	r1, #2
 8005cfa:	486a      	ldr	r0, [pc, #424]	; (8005ea4 <Initialize+0x32c>)
 8005cfc:	f7fb fa00 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP18_Analog3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8005d00:	2301      	movs	r3, #1
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	2301      	movs	r3, #1
 8005d06:	2200      	movs	r2, #0
 8005d08:	2104      	movs	r1, #4
 8005d0a:	4866      	ldr	r0, [pc, #408]	; (8005ea4 <Initialize+0x32c>)
 8005d0c:	f7fb f9f8 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP19_Analog4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8005d10:	2301      	movs	r3, #1
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	2301      	movs	r3, #1
 8005d16:	2200      	movs	r2, #0
 8005d18:	2108      	movs	r1, #8
 8005d1a:	4862      	ldr	r0, [pc, #392]	; (8005ea4 <Initialize+0x32c>)
 8005d1c:	f7fb f9f0 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP20_Analog5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8005d20:	2301      	movs	r3, #1
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	2301      	movs	r3, #1
 8005d26:	2200      	movs	r2, #0
 8005d28:	2110      	movs	r1, #16
 8005d2a:	485e      	ldr	r0, [pc, #376]	; (8005ea4 <Initialize+0x32c>)
 8005d2c:	f7fb f9e8 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP21_Analog6_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8005d30:	2301      	movs	r3, #1
 8005d32:	9300      	str	r3, [sp, #0]
 8005d34:	2301      	movs	r3, #1
 8005d36:	2200      	movs	r2, #0
 8005d38:	2120      	movs	r1, #32
 8005d3a:	485a      	ldr	r0, [pc, #360]	; (8005ea4 <Initialize+0x32c>)
 8005d3c:	f7fb f9e0 	bl	8001100 <GPIOPinsInit>

	//Unused peripheral pins can be used as GPIO Input or Output
//	GPIOPinsInit (UART3_Rx, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);

//	MUXInit(&MUX, MUX1_INPUT_PIN, MUX1_S0_PIN, MUX1_S1_PIN, MUX1_S2_PIN);
	SHIFTREGInit (&SR, CASCADE_1, SR_SCK_PIN, SR_RCK_PIN, SR_SI_PIN);
 8005d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d44:	9303      	str	r3, [sp, #12]
 8005d46:	4b59      	ldr	r3, [pc, #356]	; (8005eac <Initialize+0x334>)
 8005d48:	9302      	str	r3, [sp, #8]
 8005d4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d4e:	9301      	str	r3, [sp, #4]
 8005d50:	4b56      	ldr	r3, [pc, #344]	; (8005eac <Initialize+0x334>)
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	2380      	movs	r3, #128	; 0x80
 8005d56:	4a55      	ldr	r2, [pc, #340]	; (8005eac <Initialize+0x334>)
 8005d58:	2101      	movs	r1, #1
 8005d5a:	4857      	ldr	r0, [pc, #348]	; (8005eb8 <Initialize+0x340>)
 8005d5c:	f7fb fd3c 	bl	80017d8 <SHIFTREGInit>

	//https://stackoverflow.com/questions/50243996/what-are-valid-values-of-hal-nvic-setpriority-when-using-stm32-and-freertos
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d60:	2003      	movs	r0, #3
 8005d62:	f005 fbac 	bl	800b4be <HAL_NVIC_SetPriorityGrouping>


	/*************** Set Interrupt Priorities in BIOS/priorities.h ***************/

//	I2CxInit (&hi2c1,main_board_1, CLOCK_SPEED_400KHz,ENABLE);
	I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 8005d66:	4b55      	ldr	r3, [pc, #340]	; (8005ebc <Initialize+0x344>)
 8005d68:	2208      	movs	r2, #8
 8005d6a:	4955      	ldr	r1, [pc, #340]	; (8005ec0 <Initialize+0x348>)
 8005d6c:	4855      	ldr	r0, [pc, #340]	; (8005ec4 <Initialize+0x34c>)
 8005d6e:	f7fd fa6b 	bl	8003248 <I2CX_DMA_RX_Init>

	//Servo Driver - recommended to use 100KHz I2C as 400KHz hang frequently
//	I2CxInit (&hi2c3,main_board_1, CLOCK_SPEED_100KHz,DISABLE);
//	ServoDriverInit(&srv_drv,&hi2c3,0x40);

	UARTx_DMA_Rx_Init(&huart2, &hdma_usart2_rx, 115200);//Bluebee Tuning
 8005d72:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005d76:	4954      	ldr	r1, [pc, #336]	; (8005ec8 <Initialize+0x350>)
 8005d78:	4854      	ldr	r0, [pc, #336]	; (8005ecc <Initialize+0x354>)
 8005d7a:	f7fc ffd1 	bl	8002d20 <UARTx_DMA_Rx_Init>
//	UARTx_DMA_Rx_Init(&huart4, &hdma_uart4_rx, 115200); //Jetson
	//UARTInit(&huart3, 115200, ENABLE); // ROS UART
	UARTInit(&huart4, 115200, ENABLE); // ROS UART
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8005d84:	4852      	ldr	r0, [pc, #328]	; (8005ed0 <Initialize+0x358>)
 8005d86:	f7fc fec3 	bl	8002b10 <UARTInit>
	UARTInit(&huart5, 115200, ENABLE); // User Checking
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8005d90:	4850      	ldr	r0, [pc, #320]	; (8005ed4 <Initialize+0x35c>)
 8005d92:	f7fc febd 	bl	8002b10 <UARTInit>

//	QEIInit(&htim1);
//	QEIInit(&htim4);
//	QEIInit(&htim8);

	CANxInit(&hcan1,4,CAN_FILTER_FIFO0,0,0,0,CAN_500KHz);
 8005d96:	2300      	movs	r3, #0
 8005d98:	9302      	str	r3, [sp, #8]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	9301      	str	r3, [sp, #4]
 8005d9e:	2300      	movs	r3, #0
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	2300      	movs	r3, #0
 8005da4:	2200      	movs	r2, #0
 8005da6:	2104      	movs	r1, #4
 8005da8:	484b      	ldr	r0, [pc, #300]	; (8005ed8 <Initialize+0x360>)
 8005daa:	f7fd f8d9 	bl	8002f60 <CANxInit>

	PWMTimeBaseInit(&htim3, 2000, 35);
 8005dae:	2223      	movs	r2, #35	; 0x23
 8005db0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8005db4:	4849      	ldr	r0, [pc, #292]	; (8005edc <Initialize+0x364>)
 8005db6:	f7fb fa9d 	bl	80012f4 <PWMTimeBaseInit>
	PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 8005dba:	2301      	movs	r3, #1
 8005dbc:	4a3a      	ldr	r2, [pc, #232]	; (8005ea8 <Initialize+0x330>)
 8005dbe:	2108      	movs	r1, #8
 8005dc0:	4846      	ldr	r0, [pc, #280]	; (8005edc <Initialize+0x364>)
 8005dc2:	f7fb fb7d 	bl	80014c0 <PWMChannelConfig>
	PWMChannelConfig(&htim3, TIM_CHANNEL_4 , TIM3_CHANNEL4_PIN);
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	4a37      	ldr	r2, [pc, #220]	; (8005ea8 <Initialize+0x330>)
 8005dca:	210c      	movs	r1, #12
 8005dcc:	4843      	ldr	r0, [pc, #268]	; (8005edc <Initialize+0x364>)
 8005dce:	f7fb fb77 	bl	80014c0 <PWMChannelConfig>

	PWMTimeBaseInit(&htim5, 2000, 88);
 8005dd2:	2258      	movs	r2, #88	; 0x58
 8005dd4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8005dd8:	4841      	ldr	r0, [pc, #260]	; (8005ee0 <Initialize+0x368>)
 8005dda:	f7fb fa8b 	bl	80012f4 <PWMTimeBaseInit>
	PWMChannelConfig(&htim5, TIM_CHANNEL_1, TIM5_CHANNEL1_PIN);
 8005dde:	2301      	movs	r3, #1
 8005de0:	4a34      	ldr	r2, [pc, #208]	; (8005eb4 <Initialize+0x33c>)
 8005de2:	2100      	movs	r1, #0
 8005de4:	483e      	ldr	r0, [pc, #248]	; (8005ee0 <Initialize+0x368>)
 8005de6:	f7fb fb6b 	bl	80014c0 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_2, TIM5_CHANNEL2_PIN);
 8005dea:	2302      	movs	r3, #2
 8005dec:	4a31      	ldr	r2, [pc, #196]	; (8005eb4 <Initialize+0x33c>)
 8005dee:	2104      	movs	r1, #4
 8005df0:	483b      	ldr	r0, [pc, #236]	; (8005ee0 <Initialize+0x368>)
 8005df2:	f7fb fb65 	bl	80014c0 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_3, TIM5_CHANNEL3_PIN);
 8005df6:	2304      	movs	r3, #4
 8005df8:	4a2e      	ldr	r2, [pc, #184]	; (8005eb4 <Initialize+0x33c>)
 8005dfa:	2108      	movs	r1, #8
 8005dfc:	4838      	ldr	r0, [pc, #224]	; (8005ee0 <Initialize+0x368>)
 8005dfe:	f7fb fb5f 	bl	80014c0 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_4, TIM5_CHANNEL4_PIN);
 8005e02:	2308      	movs	r3, #8
 8005e04:	4a2b      	ldr	r2, [pc, #172]	; (8005eb4 <Initialize+0x33c>)
 8005e06:	210c      	movs	r1, #12
 8005e08:	4835      	ldr	r0, [pc, #212]	; (8005ee0 <Initialize+0x368>)
 8005e0a:	f7fb fb59 	bl	80014c0 <PWMChannelConfig>

	PWMTimeBaseInit(&htim9, 2000, 4);
 8005e0e:	2204      	movs	r2, #4
 8005e10:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8005e14:	4833      	ldr	r0, [pc, #204]	; (8005ee4 <Initialize+0x36c>)
 8005e16:	f7fb fa6d 	bl	80012f4 <PWMTimeBaseInit>
	PWMChannelConfig(&htim9, TIM_CHANNEL_1, TIM9_CHANNEL1_PIN);
 8005e1a:	2320      	movs	r3, #32
 8005e1c:	4a23      	ldr	r2, [pc, #140]	; (8005eac <Initialize+0x334>)
 8005e1e:	2100      	movs	r1, #0
 8005e20:	4830      	ldr	r0, [pc, #192]	; (8005ee4 <Initialize+0x36c>)
 8005e22:	f7fb fb4d 	bl	80014c0 <PWMChannelConfig>
	PWMChannelConfig(&htim9, TIM_CHANNEL_2, TIM9_CHANNEL2_PIN);
 8005e26:	2340      	movs	r3, #64	; 0x40
 8005e28:	4a20      	ldr	r2, [pc, #128]	; (8005eac <Initialize+0x334>)
 8005e2a:	2104      	movs	r1, #4
 8005e2c:	482d      	ldr	r0, [pc, #180]	; (8005ee4 <Initialize+0x36c>)
 8005e2e:	f7fb fb47 	bl	80014c0 <PWMChannelConfig>


	BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 8005e32:	2380      	movs	r3, #128	; 0x80
 8005e34:	9302      	str	r3, [sp, #8]
 8005e36:	2340      	movs	r3, #64	; 0x40
 8005e38:	9301      	str	r3, [sp, #4]
 8005e3a:	4b2b      	ldr	r3, [pc, #172]	; (8005ee8 <Initialize+0x370>)
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	2300      	movs	r3, #0
 8005e40:	220c      	movs	r2, #12
 8005e42:	4926      	ldr	r1, [pc, #152]	; (8005edc <Initialize+0x364>)
 8005e44:	4829      	ldr	r0, [pc, #164]	; (8005eec <Initialize+0x374>)
 8005e46:	f7fb f8d1 	bl	8000fec <BDCInit>
	BDCInit(&BDC2, &htim3, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[1]), Bit4, Bit5);
 8005e4a:	2320      	movs	r3, #32
 8005e4c:	9302      	str	r3, [sp, #8]
 8005e4e:	2310      	movs	r3, #16
 8005e50:	9301      	str	r3, [sp, #4]
 8005e52:	4b25      	ldr	r3, [pc, #148]	; (8005ee8 <Initialize+0x370>)
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	2300      	movs	r3, #0
 8005e58:	2208      	movs	r2, #8
 8005e5a:	4920      	ldr	r1, [pc, #128]	; (8005edc <Initialize+0x364>)
 8005e5c:	4824      	ldr	r0, [pc, #144]	; (8005ef0 <Initialize+0x378>)
 8005e5e:	f7fb f8c5 	bl	8000fec <BDCInit>
	BDCInit(&BDC3, &htim9, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[1]), Bit2, Bit3);
 8005e62:	2308      	movs	r3, #8
 8005e64:	9302      	str	r3, [sp, #8]
 8005e66:	2304      	movs	r3, #4
 8005e68:	9301      	str	r3, [sp, #4]
 8005e6a:	4b1f      	ldr	r3, [pc, #124]	; (8005ee8 <Initialize+0x370>)
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	2300      	movs	r3, #0
 8005e70:	2200      	movs	r2, #0
 8005e72:	491c      	ldr	r1, [pc, #112]	; (8005ee4 <Initialize+0x36c>)
 8005e74:	481f      	ldr	r0, [pc, #124]	; (8005ef4 <Initialize+0x37c>)
 8005e76:	f7fb f8b9 	bl	8000fec <BDCInit>
	BDCInit(&BDC4, &htim9, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[1]), Bit0, Bit1);
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	9302      	str	r3, [sp, #8]
 8005e7e:	2301      	movs	r3, #1
 8005e80:	9301      	str	r3, [sp, #4]
 8005e82:	4b19      	ldr	r3, [pc, #100]	; (8005ee8 <Initialize+0x370>)
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	2300      	movs	r3, #0
 8005e88:	2204      	movs	r2, #4
 8005e8a:	4916      	ldr	r1, [pc, #88]	; (8005ee4 <Initialize+0x36c>)
 8005e8c:	481a      	ldr	r0, [pc, #104]	; (8005ef8 <Initialize+0x380>)
 8005e8e:	f7fb f8ad 	bl	8000fec <BDCInit>
	BDCInit(&BDC5, &htim5, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[0]), Bit6, Bit7);
 8005e92:	2380      	movs	r3, #128	; 0x80
 8005e94:	9302      	str	r3, [sp, #8]
 8005e96:	2340      	movs	r3, #64	; 0x40
 8005e98:	9301      	str	r3, [sp, #4]
 8005e9a:	4b18      	ldr	r3, [pc, #96]	; (8005efc <Initialize+0x384>)
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	e02e      	b.n	8005f00 <Initialize+0x388>
 8005ea2:	bf00      	nop
 8005ea4:	40020800 	.word	0x40020800
 8005ea8:	40020400 	.word	0x40020400
 8005eac:	40021000 	.word	0x40021000
 8005eb0:	40020c00 	.word	0x40020c00
 8005eb4:	40020000 	.word	0x40020000
 8005eb8:	2000803c 	.word	0x2000803c
 8005ebc:	00061a80 	.word	0x00061a80
 8005ec0:	20008860 	.word	0x20008860
 8005ec4:	20007174 	.word	0x20007174
 8005ec8:	200061b8 	.word	0x200061b8
 8005ecc:	200067b0 	.word	0x200067b0
 8005ed0:	20006730 	.word	0x20006730
 8005ed4:	20006464 	.word	0x20006464
 8005ed8:	20008838 	.word	0x20008838
 8005edc:	20006420 	.word	0x20006420
 8005ee0:	200063e0 	.word	0x200063e0
 8005ee4:	200066ac 	.word	0x200066ac
 8005ee8:	20008058 	.word	0x20008058
 8005eec:	20008d90 	.word	0x20008d90
 8005ef0:	2000755c 	.word	0x2000755c
 8005ef4:	2000721c 	.word	0x2000721c
 8005ef8:	20008110 	.word	0x20008110
 8005efc:	20008054 	.word	0x20008054
 8005f00:	220c      	movs	r2, #12
 8005f02:	4923      	ldr	r1, [pc, #140]	; (8005f90 <Initialize+0x418>)
 8005f04:	4823      	ldr	r0, [pc, #140]	; (8005f94 <Initialize+0x41c>)
 8005f06:	f7fb f871 	bl	8000fec <BDCInit>
	BDCInit(&BDC6, &htim5, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[0]), Bit4, Bit5);
 8005f0a:	2320      	movs	r3, #32
 8005f0c:	9302      	str	r3, [sp, #8]
 8005f0e:	2310      	movs	r3, #16
 8005f10:	9301      	str	r3, [sp, #4]
 8005f12:	4b21      	ldr	r3, [pc, #132]	; (8005f98 <Initialize+0x420>)
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	2300      	movs	r3, #0
 8005f18:	2208      	movs	r2, #8
 8005f1a:	491d      	ldr	r1, [pc, #116]	; (8005f90 <Initialize+0x418>)
 8005f1c:	481f      	ldr	r0, [pc, #124]	; (8005f9c <Initialize+0x424>)
 8005f1e:	f7fb f865 	bl	8000fec <BDCInit>
	BDCInit(&BDC7, &htim5, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[0]), Bit2, Bit3);
 8005f22:	2308      	movs	r3, #8
 8005f24:	9302      	str	r3, [sp, #8]
 8005f26:	2304      	movs	r3, #4
 8005f28:	9301      	str	r3, [sp, #4]
 8005f2a:	4b1b      	ldr	r3, [pc, #108]	; (8005f98 <Initialize+0x420>)
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	2300      	movs	r3, #0
 8005f30:	2204      	movs	r2, #4
 8005f32:	4917      	ldr	r1, [pc, #92]	; (8005f90 <Initialize+0x418>)
 8005f34:	481a      	ldr	r0, [pc, #104]	; (8005fa0 <Initialize+0x428>)
 8005f36:	f7fb f859 	bl	8000fec <BDCInit>
	BDCInit(&BDC8, &htim5, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[0]), Bit0, Bit1);
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	9302      	str	r3, [sp, #8]
 8005f3e:	2301      	movs	r3, #1
 8005f40:	9301      	str	r3, [sp, #4]
 8005f42:	4b15      	ldr	r3, [pc, #84]	; (8005f98 <Initialize+0x420>)
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	2300      	movs	r3, #0
 8005f48:	2200      	movs	r2, #0
 8005f4a:	4911      	ldr	r1, [pc, #68]	; (8005f90 <Initialize+0x418>)
 8005f4c:	4815      	ldr	r0, [pc, #84]	; (8005fa4 <Initialize+0x42c>)
 8005f4e:	f7fb f84d 	bl	8000fec <BDCInit>
	//Laser
//	ADC_DMAxInit(&adc,&hadc2,&hdma_adc1,2);
//	ADC_Channel_Config(&adc,ADC_CHANNEL_10,IP16_Analog1_PIN);
//	ADC_Channel_Config(&adc,ADC_CHANNEL_11,IP17_Analog2_PIN);

	VESCInit(31920, 7, 0.0037, VESC1, &vesc1);
 8005f52:	4915      	ldr	r1, [pc, #84]	; (8005fa8 <Initialize+0x430>)
 8005f54:	206f      	movs	r0, #111	; 0x6f
 8005f56:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8005fac <Initialize+0x434>
 8005f5a:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 8005f5e:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8005fb0 <Initialize+0x438>
 8005f62:	f004 fa31 	bl	800a3c8 <VESCInit>

	SPIx_DMA_TX_Init(&hspi1, &hdma_spi1_tx, SPI1_NSS_PIN, SPI_MODE_MASTER);
 8005f66:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	2310      	movs	r3, #16
 8005f6e:	4a11      	ldr	r2, [pc, #68]	; (8005fb4 <Initialize+0x43c>)
 8005f70:	4911      	ldr	r1, [pc, #68]	; (8005fb8 <Initialize+0x440>)
 8005f72:	4812      	ldr	r0, [pc, #72]	; (8005fbc <Initialize+0x444>)
 8005f74:	f7ff fd84 	bl	8005a80 <SPIx_DMA_TX_Init>
	GPIOPinsInit (SPI1_MISO_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8005f78:	2301      	movs	r3, #1
 8005f7a:	9300      	str	r3, [sp, #0]
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	2201      	movs	r2, #1
 8005f80:	2140      	movs	r1, #64	; 0x40
 8005f82:	480c      	ldr	r0, [pc, #48]	; (8005fb4 <Initialize+0x43c>)
 8005f84:	f7fb f8bc 	bl	8001100 <GPIOPinsInit>
}
 8005f88:	bf00      	nop
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	200063e0 	.word	0x200063e0
 8005f94:	20008c0c 	.word	0x20008c0c
 8005f98:	20008054 	.word	0x20008054
 8005f9c:	20008190 	.word	0x20008190
 8005fa0:	200081b4 	.word	0x200081b4
 8005fa4:	200072bc 	.word	0x200072bc
 8005fa8:	20007100 	.word	0x20007100
 8005fac:	3b727bb3 	.word	0x3b727bb3
 8005fb0:	46f96000 	.word	0x46f96000
 8005fb4:	40020000 	.word	0x40020000
 8005fb8:	20008b8c 	.word	0x20008b8c
 8005fbc:	20008570 	.word	0x20008570

08005fc0 <CAN1_RX0_IRQHandler>:



void CAN1_RX0_IRQHandler()
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8005fc4:	4802      	ldr	r0, [pc, #8]	; (8005fd0 <CAN1_RX0_IRQHandler+0x10>)
 8005fc6:	f004 ff65 	bl	800ae94 <HAL_CAN_IRQHandler>

}
 8005fca:	bf00      	nop
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	20008838 	.word	0x20008838

08005fd4 <CAN2_RX1_IRQHandler>:

void CAN2_RX1_IRQHandler()
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan2);
 8005fd8:	4802      	ldr	r0, [pc, #8]	; (8005fe4 <CAN2_RX1_IRQHandler+0x10>)
 8005fda:	f004 ff5b 	bl	800ae94 <HAL_CAN_IRQHandler>

}
 8005fde:	bf00      	nop
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	20007d70 	.word	0x20007d70

08005fe8 <CAN_PROCESS>:


void CAN_PROCESS(PACKET_t packet_src){
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	4603      	mov	r3, r0
 8005ff0:	71fb      	strb	r3, [r7, #7]


	switch(packet_src){
 8005ff2:	79fb      	ldrb	r3, [r7, #7]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d004      	beq.n	8006002 <CAN_PROCESS+0x1a>
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d12f      	bne.n	800605c <CAN_PROCESS+0x74>

	case VESC_PACKET:
		decode_VESC();
 8005ffc:	f004 f88e 	bl	800a11c <decode_VESC>
		break;
 8006000:	e02c      	b.n	800605c <CAN_PROCESS+0x74>

	case RNS_PACKET:

		if(insData_receive[0] == 1){
 8006002:	4b18      	ldr	r3, [pc, #96]	; (8006064 <CAN_PROCESS+0x7c>)
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d107      	bne.n	800601a <CAN_PROCESS+0x32>
			rns.RNS_data.common_instruction = insData_receive[1];
 800600a:	4b16      	ldr	r3, [pc, #88]	; (8006064 <CAN_PROCESS+0x7c>)
 800600c:	785a      	ldrb	r2, [r3, #1]
 800600e:	4b16      	ldr	r3, [pc, #88]	; (8006068 <CAN_PROCESS+0x80>)
 8006010:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			insData_receive[0]=2;
 8006014:	4b13      	ldr	r3, [pc, #76]	; (8006064 <CAN_PROCESS+0x7c>)
 8006016:	2202      	movs	r2, #2
 8006018:	701a      	strb	r2, [r3, #0]
		}
		if(insData_receive[0] == 17){
 800601a:	4b12      	ldr	r3, [pc, #72]	; (8006064 <CAN_PROCESS+0x7c>)
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	2b11      	cmp	r3, #17
 8006020:	d11b      	bne.n	800605a <CAN_PROCESS+0x72>
			if(buf2_flag == 1){
 8006022:	4b12      	ldr	r3, [pc, #72]	; (800606c <CAN_PROCESS+0x84>)
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d117      	bne.n	800605a <CAN_PROCESS+0x72>
				rns.RNS_data.common_instruction = insData_receive[1];
 800602a:	4b0e      	ldr	r3, [pc, #56]	; (8006064 <CAN_PROCESS+0x7c>)
 800602c:	785a      	ldrb	r2, [r3, #1]
 800602e:	4b0e      	ldr	r3, [pc, #56]	; (8006068 <CAN_PROCESS+0x80>)
 8006030:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				rns.RNS_data.common_buffer[0].data = buf1_receive[0].data;
 8006034:	4b0e      	ldr	r3, [pc, #56]	; (8006070 <CAN_PROCESS+0x88>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a0b      	ldr	r2, [pc, #44]	; (8006068 <CAN_PROCESS+0x80>)
 800603a:	6553      	str	r3, [r2, #84]	; 0x54
				rns.RNS_data.common_buffer[1].data = buf1_receive[1].data;
 800603c:	4b0c      	ldr	r3, [pc, #48]	; (8006070 <CAN_PROCESS+0x88>)
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	4a09      	ldr	r2, [pc, #36]	; (8006068 <CAN_PROCESS+0x80>)
 8006042:	6593      	str	r3, [r2, #88]	; 0x58
				rns.RNS_data.common_buffer[2].data = buf2_receive[0].data;
 8006044:	4b0b      	ldr	r3, [pc, #44]	; (8006074 <CAN_PROCESS+0x8c>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a07      	ldr	r2, [pc, #28]	; (8006068 <CAN_PROCESS+0x80>)
 800604a:	65d3      	str	r3, [r2, #92]	; 0x5c
				rns.RNS_data.common_buffer[3].data = buf2_receive[1].data;
 800604c:	4b09      	ldr	r3, [pc, #36]	; (8006074 <CAN_PROCESS+0x8c>)
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	4a05      	ldr	r2, [pc, #20]	; (8006068 <CAN_PROCESS+0x80>)
 8006052:	6613      	str	r3, [r2, #96]	; 0x60
				insData_receive[0]=3;
 8006054:	4b03      	ldr	r3, [pc, #12]	; (8006064 <CAN_PROCESS+0x7c>)
 8006056:	2203      	movs	r2, #3
 8006058:	701a      	strb	r2, [r3, #0]
			}
		}

		break;
 800605a:	bf00      	nop

	}

}
 800605c:	bf00      	nop
 800605e:	3708      	adds	r7, #8
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	20007040 	.word	0x20007040
 8006068:	20007c7c 	.word	0x20007c7c
 800606c:	20000498 	.word	0x20000498
 8006070:	20008560 	.word	0x20008560
 8006074:	200086b8 	.word	0x200086b8

08006078 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)

{
 8006078:	b5b0      	push	{r4, r5, r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
	uint8_t aData[8];
	PACKET_t source;

	if(hcan == &hcan1){
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a88      	ldr	r2, [pc, #544]	; (80062a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8006084:	4293      	cmp	r3, r2
 8006086:	f040 809f 	bne.w	80061c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>
		led2 = !led2;
 800608a:	4b87      	ldr	r3, [pc, #540]	; (80062a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800608c:	785b      	ldrb	r3, [r3, #1]
 800608e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006092:	b2db      	uxtb	r3, r3
 8006094:	4a84      	ldr	r2, [pc, #528]	; (80062a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8006096:	2b00      	cmp	r3, #0
 8006098:	bf0c      	ite	eq
 800609a:	2301      	moveq	r3, #1
 800609c:	2300      	movne	r3, #0
 800609e:	b2d9      	uxtb	r1, r3
 80060a0:	7853      	ldrb	r3, [r2, #1]
 80060a2:	f361 1386 	bfi	r3, r1, #6, #1
 80060a6:	7053      	strb	r3, [r2, #1]
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN1RxMessage, aData);
 80060a8:	f107 030c 	add.w	r3, r7, #12
 80060ac:	4a7f      	ldr	r2, [pc, #508]	; (80062ac <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 80060ae:	2100      	movs	r1, #0
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f004 fdb7 	bl	800ac24 <HAL_CAN_GetRxMessage>
		//	sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);

		if(CAN1RxMessage.IDE == CAN_ID_EXT)
 80060b6:	4b7d      	ldr	r3, [pc, #500]	; (80062ac <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	2b04      	cmp	r3, #4
 80060bc:	d117      	bne.n	80060ee <HAL_CAN_RxFifo0MsgPendingCallback+0x76>
		{
			vescmsg.Rxmsg = CAN1RxMessage;
 80060be:	4a7c      	ldr	r2, [pc, #496]	; (80062b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 80060c0:	4b7a      	ldr	r3, [pc, #488]	; (80062ac <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 80060c2:	4614      	mov	r4, r2
 80060c4:	461d      	mov	r5, r3
 80060c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80060ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 80060d2:	4b77      	ldr	r3, [pc, #476]	; (80062b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 80060d4:	331c      	adds	r3, #28
 80060d6:	f107 020c 	add.w	r2, r7, #12
 80060da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80060de:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 80060e2:	4873      	ldr	r0, [pc, #460]	; (80062b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 80060e4:	f004 f93a 	bl	800a35c <set_rx_frames>
			source = VESC_PACKET;
 80060e8:	2301      	movs	r3, #1
 80060ea:	75fb      	strb	r3, [r7, #23]
 80060ec:	e063      	b.n	80061b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		}else{
			source = RNS_PACKET;
 80060ee:	2300      	movs	r3, #0
 80060f0:	75fb      	strb	r3, [r7, #23]
			switch(CAN1RxMessage.StdId){
 80060f2:	4b6e      	ldr	r3, [pc, #440]	; (80062ac <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b1c      	cmp	r3, #28
 80060f8:	d81a      	bhi.n	8006130 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>
 80060fa:	2b14      	cmp	r3, #20
 80060fc:	d35a      	bcc.n	80061b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>
 80060fe:	3b14      	subs	r3, #20
 8006100:	2b08      	cmp	r3, #8
 8006102:	d857      	bhi.n	80061b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>
 8006104:	a201      	add	r2, pc, #4	; (adr r2, 800610c <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8006106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610a:	bf00      	nop
 800610c:	08006139 	.word	0x08006139
 8006110:	08006151 	.word	0x08006151
 8006114:	08006163 	.word	0x08006163
 8006118:	080061b5 	.word	0x080061b5
 800611c:	080061b5 	.word	0x080061b5
 8006120:	080061b5 	.word	0x080061b5
 8006124:	080061b5 	.word	0x080061b5
 8006128:	080061b5 	.word	0x080061b5
 800612c:	080061b5 	.word	0x080061b5
 8006130:	f5b3 6fea 	cmp.w	r3, #1872	; 0x750
 8006134:	d021      	beq.n	800617a <HAL_CAN_RxFifo0MsgPendingCallback+0x102>
					faul_counter = 0;
				}else{
					faul_counter ++;
				}
			default:
				break;
 8006136:	e03d      	b.n	80061b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>
				memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 8006138:	4b5c      	ldr	r3, [pc, #368]	; (80062ac <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 800613a:	691a      	ldr	r2, [r3, #16]
 800613c:	f107 030c 	add.w	r3, r7, #12
 8006140:	4619      	mov	r1, r3
 8006142:	485c      	ldr	r0, [pc, #368]	; (80062b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 8006144:	f00f f85c 	bl	8015200 <memcpy>
				buf2_flag = 0;
 8006148:	4b5b      	ldr	r3, [pc, #364]	; (80062b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 800614a:	2200      	movs	r2, #0
 800614c:	701a      	strb	r2, [r3, #0]
				break;
 800614e:	e032      	b.n	80061b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				memcpy(&buf1_receive, &aData, CAN1RxMessage.DLC);
 8006150:	4b56      	ldr	r3, [pc, #344]	; (80062ac <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8006152:	691a      	ldr	r2, [r3, #16]
 8006154:	f107 030c 	add.w	r3, r7, #12
 8006158:	4619      	mov	r1, r3
 800615a:	4858      	ldr	r0, [pc, #352]	; (80062bc <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 800615c:	f00f f850 	bl	8015200 <memcpy>
				break;
 8006160:	e029      	b.n	80061b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				memcpy(&buf2_receive, &aData, CAN1RxMessage.DLC);
 8006162:	4b52      	ldr	r3, [pc, #328]	; (80062ac <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8006164:	691a      	ldr	r2, [r3, #16]
 8006166:	f107 030c 	add.w	r3, r7, #12
 800616a:	4619      	mov	r1, r3
 800616c:	4854      	ldr	r0, [pc, #336]	; (80062c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800616e:	f00f f847 	bl	8015200 <memcpy>
				buf2_flag = 1;
 8006172:	4b51      	ldr	r3, [pc, #324]	; (80062b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8006174:	2201      	movs	r2, #1
 8006176:	701a      	strb	r2, [r3, #0]
				break;
 8006178:	e01d      	b.n	80061b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
				if(faul_counter >= 2000){
 800617a:	4b52      	ldr	r3, [pc, #328]	; (80062c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006182:	d312      	bcc.n	80061aa <HAL_CAN_RxFifo0MsgPendingCallback+0x132>
					led2 = !led2;
 8006184:	4b48      	ldr	r3, [pc, #288]	; (80062a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8006186:	785b      	ldrb	r3, [r3, #1]
 8006188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618c:	b2db      	uxtb	r3, r3
 800618e:	4a46      	ldr	r2, [pc, #280]	; (80062a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8006190:	2b00      	cmp	r3, #0
 8006192:	bf0c      	ite	eq
 8006194:	2301      	moveq	r3, #1
 8006196:	2300      	movne	r3, #0
 8006198:	b2d9      	uxtb	r1, r3
 800619a:	7853      	ldrb	r3, [r2, #1]
 800619c:	f361 1386 	bfi	r3, r1, #6, #1
 80061a0:	7053      	strb	r3, [r2, #1]
					faul_counter = 0;
 80061a2:	4b48      	ldr	r3, [pc, #288]	; (80062c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	601a      	str	r2, [r3, #0]
				break;
 80061a8:	e004      	b.n	80061b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>
					faul_counter ++;
 80061aa:	4b46      	ldr	r3, [pc, #280]	; (80062c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3301      	adds	r3, #1
 80061b0:	4a44      	ldr	r2, [pc, #272]	; (80062c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 80061b2:	6013      	str	r3, [r2, #0]
				break;
 80061b4:	bf00      	nop
			}
		}
		CAN_PROCESS(source);
 80061b6:	7dfb      	ldrb	r3, [r7, #23]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7ff ff15 	bl	8005fe8 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80061be:	2102      	movs	r1, #2
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f004 fe41 	bl	800ae48 <HAL_CAN_ActivateNotification>
			}
		}
		CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
	}
}
 80061c6:	e069      	b.n	800629c <HAL_CAN_RxFifo0MsgPendingCallback+0x224>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN2RxMessage, aData);
 80061c8:	f107 030c 	add.w	r3, r7, #12
 80061cc:	4a3e      	ldr	r2, [pc, #248]	; (80062c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 80061ce:	2100      	movs	r1, #0
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f004 fd27 	bl	800ac24 <HAL_CAN_GetRxMessage>
		if(CAN2RxMessage.IDE == CAN_ID_EXT)
 80061d6:	4b3c      	ldr	r3, [pc, #240]	; (80062c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	2b04      	cmp	r3, #4
 80061dc:	d117      	bne.n	800620e <HAL_CAN_RxFifo0MsgPendingCallback+0x196>
			vescmsg.Rxmsg = CAN2RxMessage;
 80061de:	4a34      	ldr	r2, [pc, #208]	; (80062b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 80061e0:	4b39      	ldr	r3, [pc, #228]	; (80062c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 80061e2:	4614      	mov	r4, r2
 80061e4:	461d      	mov	r5, r3
 80061e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80061ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 80061f2:	4b2f      	ldr	r3, [pc, #188]	; (80062b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 80061f4:	331c      	adds	r3, #28
 80061f6:	f107 020c 	add.w	r2, r7, #12
 80061fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80061fe:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 8006202:	482b      	ldr	r0, [pc, #172]	; (80062b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8006204:	f004 f8aa 	bl	800a35c <set_rx_frames>
			source = VESC_PACKET;
 8006208:	2301      	movs	r3, #1
 800620a:	75fb      	strb	r3, [r7, #23]
 800620c:	e03e      	b.n	800628c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>
			source = RNS_PACKET;
 800620e:	2300      	movs	r3, #0
 8006210:	75fb      	strb	r3, [r7, #23]
			switch(CAN1RxMessage.StdId){
 8006212:	4b26      	ldr	r3, [pc, #152]	; (80062ac <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	3b14      	subs	r3, #20
 8006218:	2b08      	cmp	r3, #8
 800621a:	d836      	bhi.n	800628a <HAL_CAN_RxFifo0MsgPendingCallback+0x212>
 800621c:	a201      	add	r2, pc, #4	; (adr r2, 8006224 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 800621e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006222:	bf00      	nop
 8006224:	08006249 	.word	0x08006249
 8006228:	08006261 	.word	0x08006261
 800622c:	08006273 	.word	0x08006273
 8006230:	0800628b 	.word	0x0800628b
 8006234:	0800628b 	.word	0x0800628b
 8006238:	0800628b 	.word	0x0800628b
 800623c:	0800628b 	.word	0x0800628b
 8006240:	0800628b 	.word	0x0800628b
 8006244:	0800628b 	.word	0x0800628b
				memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 8006248:	4b1f      	ldr	r3, [pc, #124]	; (80062c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 800624a:	691a      	ldr	r2, [r3, #16]
 800624c:	f107 030c 	add.w	r3, r7, #12
 8006250:	4619      	mov	r1, r3
 8006252:	4818      	ldr	r0, [pc, #96]	; (80062b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 8006254:	f00e ffd4 	bl	8015200 <memcpy>
				buf2_flag = 0;
 8006258:	4b17      	ldr	r3, [pc, #92]	; (80062b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 800625a:	2200      	movs	r2, #0
 800625c:	701a      	strb	r2, [r3, #0]
				break;
 800625e:	e015      	b.n	800628c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>
				memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 8006260:	4b19      	ldr	r3, [pc, #100]	; (80062c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8006262:	691a      	ldr	r2, [r3, #16]
 8006264:	f107 030c 	add.w	r3, r7, #12
 8006268:	4619      	mov	r1, r3
 800626a:	4814      	ldr	r0, [pc, #80]	; (80062bc <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 800626c:	f00e ffc8 	bl	8015200 <memcpy>
				break;
 8006270:	e00c      	b.n	800628c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>
				memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 8006272:	4b15      	ldr	r3, [pc, #84]	; (80062c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8006274:	691a      	ldr	r2, [r3, #16]
 8006276:	f107 030c 	add.w	r3, r7, #12
 800627a:	4619      	mov	r1, r3
 800627c:	4810      	ldr	r0, [pc, #64]	; (80062c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800627e:	f00e ffbf 	bl	8015200 <memcpy>
				buf2_flag = 1;
 8006282:	4b0d      	ldr	r3, [pc, #52]	; (80062b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8006284:	2201      	movs	r2, #1
 8006286:	701a      	strb	r2, [r3, #0]
				break;
 8006288:	e000      	b.n	800628c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>
				break;
 800628a:	bf00      	nop
		CAN_PROCESS(source);
 800628c:	7dfb      	ldrb	r3, [r7, #23]
 800628e:	4618      	mov	r0, r3
 8006290:	f7ff feaa 	bl	8005fe8 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8006294:	2110      	movs	r1, #16
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f004 fdd6 	bl	800ae48 <HAL_CAN_ActivateNotification>
}
 800629c:	bf00      	nop
 800629e:	3718      	adds	r7, #24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bdb0      	pop	{r4, r5, r7, pc}
 80062a4:	20008838 	.word	0x20008838
 80062a8:	40020814 	.word	0x40020814
 80062ac:	20008d4c 	.word	0x20008d4c
 80062b0:	20008160 	.word	0x20008160
 80062b4:	20007040 	.word	0x20007040
 80062b8:	20000498 	.word	0x20000498
 80062bc:	20008560 	.word	0x20008560
 80062c0:	200086b8 	.word	0x200086b8
 80062c4:	2000822c 	.word	0x2000822c
 80062c8:	200070bc 	.word	0x200070bc

080062cc <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)

{
 80062cc:	b5b0      	push	{r4, r5, r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
	uint8_t aData[8];
	PACKET_t source;

	if(hcan == &hcan1){
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a6d      	ldr	r2, [pc, #436]	; (800648c <HAL_CAN_RxFifo1MsgPendingCallback+0x1c0>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d16a      	bne.n	80063b2 <HAL_CAN_RxFifo1MsgPendingCallback+0xe6>

		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN1RxMessage, aData);
 80062dc:	f107 030c 	add.w	r3, r7, #12
 80062e0:	4a6b      	ldr	r2, [pc, #428]	; (8006490 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 80062e2:	2101      	movs	r1, #1
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f004 fc9d 	bl	800ac24 <HAL_CAN_GetRxMessage>
		//sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);
		if(CAN1RxMessage.IDE == CAN_ID_EXT)
 80062ea:	4b69      	ldr	r3, [pc, #420]	; (8006490 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	d117      	bne.n	8006322 <HAL_CAN_RxFifo1MsgPendingCallback+0x56>
		{
			vescmsg.Rxmsg = CAN1RxMessage;
 80062f2:	4a68      	ldr	r2, [pc, #416]	; (8006494 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 80062f4:	4b66      	ldr	r3, [pc, #408]	; (8006490 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 80062f6:	4614      	mov	r4, r2
 80062f8:	461d      	mov	r5, r3
 80062fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006302:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 8006306:	4b63      	ldr	r3, [pc, #396]	; (8006494 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 8006308:	331c      	adds	r3, #28
 800630a:	f107 020c 	add.w	r2, r7, #12
 800630e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006312:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 8006316:	485f      	ldr	r0, [pc, #380]	; (8006494 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 8006318:	f004 f820 	bl	800a35c <set_rx_frames>
			source = VESC_PACKET;
 800631c:	2301      	movs	r3, #1
 800631e:	75fb      	strb	r3, [r7, #23]
 8006320:	e03e      	b.n	80063a0 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>

		}else{
			source = RNS_PACKET;
 8006322:	2300      	movs	r3, #0
 8006324:	75fb      	strb	r3, [r7, #23]
			switch(CAN2RxMessage.StdId){
 8006326:	4b5c      	ldr	r3, [pc, #368]	; (8006498 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	3b14      	subs	r3, #20
 800632c:	2b08      	cmp	r3, #8
 800632e:	d836      	bhi.n	800639e <HAL_CAN_RxFifo1MsgPendingCallback+0xd2>
 8006330:	a201      	add	r2, pc, #4	; (adr r2, 8006338 <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>)
 8006332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006336:	bf00      	nop
 8006338:	0800635d 	.word	0x0800635d
 800633c:	08006375 	.word	0x08006375
 8006340:	08006387 	.word	0x08006387
 8006344:	0800639f 	.word	0x0800639f
 8006348:	0800639f 	.word	0x0800639f
 800634c:	0800639f 	.word	0x0800639f
 8006350:	0800639f 	.word	0x0800639f
 8006354:	0800639f 	.word	0x0800639f
 8006358:	0800639f 	.word	0x0800639f
			case RNS_TO_mainboard:
				memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 800635c:	4b4c      	ldr	r3, [pc, #304]	; (8006490 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800635e:	691a      	ldr	r2, [r3, #16]
 8006360:	f107 030c 	add.w	r3, r7, #12
 8006364:	4619      	mov	r1, r3
 8006366:	484d      	ldr	r0, [pc, #308]	; (800649c <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 8006368:	f00e ff4a 	bl	8015200 <memcpy>
				buf2_flag = 0;
 800636c:	4b4c      	ldr	r3, [pc, #304]	; (80064a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 800636e:	2200      	movs	r2, #0
 8006370:	701a      	strb	r2, [r3, #0]

				break;
 8006372:	e015      	b.n	80063a0 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>
			case RNS_TO_mainboard_buf1:
				memcpy(&buf1_receive, &aData, CAN1RxMessage.DLC);
 8006374:	4b46      	ldr	r3, [pc, #280]	; (8006490 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 8006376:	691a      	ldr	r2, [r3, #16]
 8006378:	f107 030c 	add.w	r3, r7, #12
 800637c:	4619      	mov	r1, r3
 800637e:	4849      	ldr	r0, [pc, #292]	; (80064a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d8>)
 8006380:	f00e ff3e 	bl	8015200 <memcpy>

				break;
 8006384:	e00c      	b.n	80063a0 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>
			case RNS_TO_mainboard_buf2:
				memcpy(&buf2_receive, &aData, CAN1RxMessage.DLC);
 8006386:	4b42      	ldr	r3, [pc, #264]	; (8006490 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 8006388:	691a      	ldr	r2, [r3, #16]
 800638a:	f107 030c 	add.w	r3, r7, #12
 800638e:	4619      	mov	r1, r3
 8006390:	4845      	ldr	r0, [pc, #276]	; (80064a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1dc>)
 8006392:	f00e ff35 	bl	8015200 <memcpy>
				buf2_flag = 1;
 8006396:	4b42      	ldr	r3, [pc, #264]	; (80064a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 8006398:	2201      	movs	r2, #1
 800639a:	701a      	strb	r2, [r3, #0]
				break;
 800639c:	e000      	b.n	80063a0 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>
			case XY_feedback_state :
				break;
			default:
				break;
 800639e:	bf00      	nop
			}
		}
		CAN_PROCESS(source);
 80063a0:	7dfb      	ldrb	r3, [r7, #23]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7ff fe20 	bl	8005fe8 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80063a8:	2102      	movs	r1, #2
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f004 fd4c 	bl	800ae48 <HAL_CAN_ActivateNotification>
		}
		CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
	}

}
 80063b0:	e068      	b.n	8006484 <HAL_CAN_RxFifo1MsgPendingCallback+0x1b8>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN2RxMessage, aData);
 80063b2:	f107 030c 	add.w	r3, r7, #12
 80063b6:	4a38      	ldr	r2, [pc, #224]	; (8006498 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 80063b8:	2101      	movs	r1, #1
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f004 fc32 	bl	800ac24 <HAL_CAN_GetRxMessage>
		if(CAN2RxMessage.IDE == CAN_ID_EXT)
 80063c0:	4b35      	ldr	r3, [pc, #212]	; (8006498 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	2b04      	cmp	r3, #4
 80063c6:	d117      	bne.n	80063f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>
			vescmsg.Rxmsg = CAN2RxMessage;
 80063c8:	4a32      	ldr	r2, [pc, #200]	; (8006494 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 80063ca:	4b33      	ldr	r3, [pc, #204]	; (8006498 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 80063cc:	4614      	mov	r4, r2
 80063ce:	461d      	mov	r5, r3
 80063d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80063d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 80063dc:	4b2d      	ldr	r3, [pc, #180]	; (8006494 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 80063de:	331c      	adds	r3, #28
 80063e0:	f107 020c 	add.w	r2, r7, #12
 80063e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80063e8:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 80063ec:	4829      	ldr	r0, [pc, #164]	; (8006494 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 80063ee:	f003 ffb5 	bl	800a35c <set_rx_frames>
			source = VESC_PACKET;
 80063f2:	2301      	movs	r3, #1
 80063f4:	75fb      	strb	r3, [r7, #23]
 80063f6:	e03d      	b.n	8006474 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>
			source = RNS_PACKET;
 80063f8:	2300      	movs	r3, #0
 80063fa:	75fb      	strb	r3, [r7, #23]
			switch(CAN2RxMessage.StdId){
 80063fc:	4b26      	ldr	r3, [pc, #152]	; (8006498 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3b14      	subs	r3, #20
 8006402:	2b08      	cmp	r3, #8
 8006404:	d835      	bhi.n	8006472 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a6>
 8006406:	a201      	add	r2, pc, #4	; (adr r2, 800640c <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 8006408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640c:	08006431 	.word	0x08006431
 8006410:	08006449 	.word	0x08006449
 8006414:	0800645b 	.word	0x0800645b
 8006418:	08006473 	.word	0x08006473
 800641c:	08006473 	.word	0x08006473
 8006420:	08006473 	.word	0x08006473
 8006424:	08006473 	.word	0x08006473
 8006428:	08006473 	.word	0x08006473
 800642c:	08006473 	.word	0x08006473
				memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 8006430:	4b19      	ldr	r3, [pc, #100]	; (8006498 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 8006432:	691a      	ldr	r2, [r3, #16]
 8006434:	f107 030c 	add.w	r3, r7, #12
 8006438:	4619      	mov	r1, r3
 800643a:	4818      	ldr	r0, [pc, #96]	; (800649c <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800643c:	f00e fee0 	bl	8015200 <memcpy>
				buf2_flag = 0;
 8006440:	4b17      	ldr	r3, [pc, #92]	; (80064a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 8006442:	2200      	movs	r2, #0
 8006444:	701a      	strb	r2, [r3, #0]
				break;
 8006446:	e015      	b.n	8006474 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>
				memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 8006448:	4b13      	ldr	r3, [pc, #76]	; (8006498 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800644a:	691a      	ldr	r2, [r3, #16]
 800644c:	f107 030c 	add.w	r3, r7, #12
 8006450:	4619      	mov	r1, r3
 8006452:	4814      	ldr	r0, [pc, #80]	; (80064a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d8>)
 8006454:	f00e fed4 	bl	8015200 <memcpy>
				break;
 8006458:	e00c      	b.n	8006474 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>
				memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 800645a:	4b0f      	ldr	r3, [pc, #60]	; (8006498 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800645c:	691a      	ldr	r2, [r3, #16]
 800645e:	f107 030c 	add.w	r3, r7, #12
 8006462:	4619      	mov	r1, r3
 8006464:	4810      	ldr	r0, [pc, #64]	; (80064a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1dc>)
 8006466:	f00e fecb 	bl	8015200 <memcpy>
				buf2_flag = 1;
 800646a:	4b0d      	ldr	r3, [pc, #52]	; (80064a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 800646c:	2201      	movs	r2, #1
 800646e:	701a      	strb	r2, [r3, #0]
				break;
 8006470:	e000      	b.n	8006474 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>
				break;
 8006472:	bf00      	nop
		CAN_PROCESS(source);
 8006474:	7dfb      	ldrb	r3, [r7, #23]
 8006476:	4618      	mov	r0, r3
 8006478:	f7ff fdb6 	bl	8005fe8 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800647c:	2110      	movs	r1, #16
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f004 fce2 	bl	800ae48 <HAL_CAN_ActivateNotification>
}
 8006484:	bf00      	nop
 8006486:	3718      	adds	r7, #24
 8006488:	46bd      	mov	sp, r7
 800648a:	bdb0      	pop	{r4, r5, r7, pc}
 800648c:	20008838 	.word	0x20008838
 8006490:	20008d4c 	.word	0x20008d4c
 8006494:	20008160 	.word	0x20008160
 8006498:	200070bc 	.word	0x200070bc
 800649c:	20007040 	.word	0x20007040
 80064a0:	20000498 	.word	0x20000498
 80064a4:	20008560 	.word	0x20008560
 80064a8:	200086b8 	.word	0x200086b8

080064ac <set>:
/*********************************************/

#include "common.h"
#include "math.h"

void set(void) {
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0

	Initialize();
 80064b0:	f7ff fb62 	bl	8005b78 <Initialize>
	PSxInitDMA(&ps4,&hi2c1);
 80064b4:	4913      	ldr	r1, [pc, #76]	; (8006504 <set+0x58>)
 80064b6:	4814      	ldr	r0, [pc, #80]	; (8006508 <set+0x5c>)
 80064b8:	f7fe fae5 	bl	8004a86 <PSxInitDMA>
//	PSxInitUART(&ps4, &huart4);
	TIMxInit(&htim6, 20000, 84);
 80064bc:	2254      	movs	r2, #84	; 0x54
 80064be:	f644 6120 	movw	r1, #20000	; 0x4e20
 80064c2:	4812      	ldr	r0, [pc, #72]	; (800650c <set+0x60>)
 80064c4:	f7fc f98a 	bl	80027dc <TIMxInit>
	tuneRegister(2, &huart2);
 80064c8:	4911      	ldr	r1, [pc, #68]	; (8006510 <set+0x64>)
 80064ca:	2002      	movs	r0, #2
 80064cc:	f000 fec8 	bl	8007260 <tuneRegister>
	tuneRead();
 80064d0:	f001 faaa 	bl	8007a28 <tuneRead>
	ROS_Read_Flash();
 80064d4:	f000 fa6c 	bl	80069b0 <ROS_Read_Flash>
	RNS_config(&hcan1);
 80064d8:	480e      	ldr	r0, [pc, #56]	; (8006514 <set+0x68>)
 80064da:	f000 f825 	bl	8006528 <RNS_config>

	MODNInit(MODN_FWD_OMNI, 3.0, 1.0, 2.0, 0.1);
 80064de:	eddf 1a0e 	vldr	s3, [pc, #56]	; 8006518 <set+0x6c>
 80064e2:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 80064e6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80064ea:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80064ee:	2000      	movs	r0, #0
 80064f0:	f7fd ffba 	bl	8004468 <MODNInit>
	HAL_UART_Receive_IT(&huart4, ROS_buff, 6);
 80064f4:	2206      	movs	r2, #6
 80064f6:	4909      	ldr	r1, [pc, #36]	; (800651c <set+0x70>)
 80064f8:	4809      	ldr	r0, [pc, #36]	; (8006520 <set+0x74>)
 80064fa:	f00a fa41 	bl	8010980 <HAL_UART_Receive_IT>

}
 80064fe:	bf00      	nop
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	20007174 	.word	0x20007174
 8006508:	200088cc 	.word	0x200088cc
 800650c:	2000662c 	.word	0x2000662c
 8006510:	200067b0 	.word	0x200067b0
 8006514:	20008838 	.word	0x20008838
 8006518:	3dcccccd 	.word	0x3dcccccd
 800651c:	2000768c 	.word	0x2000768c
 8006520:	20006730 	.word	0x20006730
 8006524:	00000000 	.word	0x00000000

08006528 <RNS_config>:


void RNS_config(CAN_HandleTypeDef* hcanx) {
 8006528:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800652c:	b088      	sub	sp, #32
 800652e:	af06      	add	r7, sp, #24
 8006530:	6078      	str	r0, [r7, #4]
	RNSInit(hcanx, &rns);
 8006532:	49b5      	ldr	r1, [pc, #724]	; (8006808 <RNS_config+0x2e0>)
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f7fe fdbd 	bl	80050b4 <RNSInit>
	//0b11100101
	//Encoder dcba(0-swap, 1-keep)  BDC dcba(0-keep, 1-swap) //0x00 0x00 0x
	RNSSet(&rns, RNS_DEVICE_CONFIG, (float) 0b11100101, (float) fwd_omni, (float) roboconPID);
 800653a:	f04f 0200 	mov.w	r2, #0
 800653e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006542:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006546:	f04f 0200 	mov.w	r2, #0
 800654a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800654e:	e9cd 2300 	strd	r2, r3, [sp]
 8006552:	a39b      	add	r3, pc, #620	; (adr r3, 80067c0 <RNS_config+0x298>)
 8006554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006558:	2124      	movs	r1, #36	; 0x24
 800655a:	48ab      	ldr	r0, [pc, #684]	; (8006808 <RNS_config+0x2e0>)
 800655c:	f7fe ffcc 	bl	80054f8 <RNSSet>
	RNSSet(&rns, RNS_X_Y_ENC_CONFIG, 0.05 / 2000.0 * 3.142, 2.0,
 8006560:	f04f 0200 	mov.w	r2, #0
 8006564:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006568:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800656c:	a396      	add	r3, pc, #600	; (adr r3, 80067c8 <RNS_config+0x2a0>)
 800656e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006572:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006576:	f04f 0200 	mov.w	r2, #0
 800657a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800657e:	e9cd 2300 	strd	r2, r3, [sp]
 8006582:	a391      	add	r3, pc, #580	; (adr r3, 80067c8 <RNS_config+0x2a0>)
 8006584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006588:	2149      	movs	r1, #73	; 0x49
 800658a:	489f      	ldr	r0, [pc, #636]	; (8006808 <RNS_config+0x2e0>)
 800658c:	f7fe ffb4 	bl	80054f8 <RNSSet>
			0.05 / 2000.0 * 3.142, 2.0); //1.0 for nonswap , 2.0 for swap
	RNSSet(&rns, RNS_F_KCD_PTD, 2442.0/ 2442.0,//remember to put floating point 5175/5174 wrong
 8006590:	a38f      	add	r3, pc, #572	; (adr r3, 80067d0 <RNS_config+0x2a8>)
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	e9cd 2300 	strd	r2, r3, [sp]
 800659a:	f04f 0200 	mov.w	r2, #0
 800659e:	4b9b      	ldr	r3, [pc, #620]	; (800680c <RNS_config+0x2e4>)
 80065a0:	211f      	movs	r1, #31
 80065a2:	4899      	ldr	r0, [pc, #612]	; (8006808 <RNS_config+0x2e0>)
 80065a4:	f7fe ffa8 	bl	80054f8 <RNSSet>
			(float)(0.15 * 3.142 / 244.0));
	RNSSet(&rns, RNS_B_KCD_PTD, 2440.0/ 2445.0,
 80065a8:	a38b      	add	r3, pc, #556	; (adr r3, 80067d8 <RNS_config+0x2b0>)
 80065aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ae:	e9cd 2300 	strd	r2, r3, [sp]
 80065b2:	a38b      	add	r3, pc, #556	; (adr r3, 80067e0 <RNS_config+0x2b8>)
 80065b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b8:	2120      	movs	r1, #32
 80065ba:	4893      	ldr	r0, [pc, #588]	; (8006808 <RNS_config+0x2e0>)
 80065bc:	f7fe ff9c 	bl	80054f8 <RNSSet>
			0.15 * 3.142 / 244.0);

	RNSSet(&rns, RNS_F_LEFT_VEL_SATEU, 1.0, 1.0 / 16.0, 19999.0);
 80065c0:	a389      	add	r3, pc, #548	; (adr r3, 80067e8 <RNS_config+0x2c0>)
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065ca:	f04f 0200 	mov.w	r2, #0
 80065ce:	4b90      	ldr	r3, [pc, #576]	; (8006810 <RNS_config+0x2e8>)
 80065d0:	e9cd 2300 	strd	r2, r3, [sp]
 80065d4:	f04f 0200 	mov.w	r2, #0
 80065d8:	4b8c      	ldr	r3, [pc, #560]	; (800680c <RNS_config+0x2e4>)
 80065da:	212b      	movs	r1, #43	; 0x2b
 80065dc:	488a      	ldr	r0, [pc, #552]	; (8006808 <RNS_config+0x2e0>)
 80065de:	f7fe ff8b 	bl	80054f8 <RNSSet>
	RNSSet(&rns, RNS_F_RIGHT_VEL_SATEU, 1.0, 1.0 / 16.0 , 19999.0);
 80065e2:	a381      	add	r3, pc, #516	; (adr r3, 80067e8 <RNS_config+0x2c0>)
 80065e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065ec:	f04f 0200 	mov.w	r2, #0
 80065f0:	4b87      	ldr	r3, [pc, #540]	; (8006810 <RNS_config+0x2e8>)
 80065f2:	e9cd 2300 	strd	r2, r3, [sp]
 80065f6:	f04f 0200 	mov.w	r2, #0
 80065fa:	4b84      	ldr	r3, [pc, #528]	; (800680c <RNS_config+0x2e4>)
 80065fc:	212c      	movs	r1, #44	; 0x2c
 80065fe:	4882      	ldr	r0, [pc, #520]	; (8006808 <RNS_config+0x2e0>)
 8006600:	f7fe ff7a 	bl	80054f8 <RNSSet>
	RNSSet(&rns, RNS_B_LEFT_VEL_SATEU, 1.0, 1.0 / 16.0, 19999.0);
 8006604:	a378      	add	r3, pc, #480	; (adr r3, 80067e8 <RNS_config+0x2c0>)
 8006606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800660e:	f04f 0200 	mov.w	r2, #0
 8006612:	4b7f      	ldr	r3, [pc, #508]	; (8006810 <RNS_config+0x2e8>)
 8006614:	e9cd 2300 	strd	r2, r3, [sp]
 8006618:	f04f 0200 	mov.w	r2, #0
 800661c:	4b7b      	ldr	r3, [pc, #492]	; (800680c <RNS_config+0x2e4>)
 800661e:	212d      	movs	r1, #45	; 0x2d
 8006620:	4879      	ldr	r0, [pc, #484]	; (8006808 <RNS_config+0x2e0>)
 8006622:	f7fe ff69 	bl	80054f8 <RNSSet>
	RNSSet(&rns, RNS_B_RIGHT_VEL_SATEU, 1.0, 1.0 / 16.0, 19999.0);
 8006626:	a370      	add	r3, pc, #448	; (adr r3, 80067e8 <RNS_config+0x2c0>)
 8006628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006630:	f04f 0200 	mov.w	r2, #0
 8006634:	4b76      	ldr	r3, [pc, #472]	; (8006810 <RNS_config+0x2e8>)
 8006636:	e9cd 2300 	strd	r2, r3, [sp]
 800663a:	f04f 0200 	mov.w	r2, #0
 800663e:	4b73      	ldr	r3, [pc, #460]	; (800680c <RNS_config+0x2e4>)
 8006640:	212e      	movs	r1, #46	; 0x2e
 8006642:	4871      	ldr	r0, [pc, #452]	; (8006808 <RNS_config+0x2e0>)
 8006644:	f7fe ff58 	bl	80054f8 <RNSSet>

	RNSSet(&rns, RNS_F_LEFT_VEL_PID,  AP, AI, AD);   //
 8006648:	4b72      	ldr	r3, [pc, #456]	; (8006814 <RNS_config+0x2ec>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4618      	mov	r0, r3
 800664e:	f7f9 ff7b 	bl	8000548 <__aeabi_f2d>
 8006652:	4680      	mov	r8, r0
 8006654:	4689      	mov	r9, r1
 8006656:	4b70      	ldr	r3, [pc, #448]	; (8006818 <RNS_config+0x2f0>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4618      	mov	r0, r3
 800665c:	f7f9 ff74 	bl	8000548 <__aeabi_f2d>
 8006660:	4604      	mov	r4, r0
 8006662:	460d      	mov	r5, r1
 8006664:	4b6d      	ldr	r3, [pc, #436]	; (800681c <RNS_config+0x2f4>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4618      	mov	r0, r3
 800666a:	f7f9 ff6d 	bl	8000548 <__aeabi_f2d>
 800666e:	4602      	mov	r2, r0
 8006670:	460b      	mov	r3, r1
 8006672:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006676:	e9cd 4500 	strd	r4, r5, [sp]
 800667a:	4642      	mov	r2, r8
 800667c:	464b      	mov	r3, r9
 800667e:	212f      	movs	r1, #47	; 0x2f
 8006680:	4861      	ldr	r0, [pc, #388]	; (8006808 <RNS_config+0x2e0>)
 8006682:	f7fe ff39 	bl	80054f8 <RNSSet>
	RNSSet(&rns, RNS_F_RIGHT_VEL_PID, BP, BI, BD);   //
 8006686:	4b66      	ldr	r3, [pc, #408]	; (8006820 <RNS_config+0x2f8>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4618      	mov	r0, r3
 800668c:	f7f9 ff5c 	bl	8000548 <__aeabi_f2d>
 8006690:	4680      	mov	r8, r0
 8006692:	4689      	mov	r9, r1
 8006694:	4b63      	ldr	r3, [pc, #396]	; (8006824 <RNS_config+0x2fc>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4618      	mov	r0, r3
 800669a:	f7f9 ff55 	bl	8000548 <__aeabi_f2d>
 800669e:	4604      	mov	r4, r0
 80066a0:	460d      	mov	r5, r1
 80066a2:	4b61      	ldr	r3, [pc, #388]	; (8006828 <RNS_config+0x300>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7f9 ff4e 	bl	8000548 <__aeabi_f2d>
 80066ac:	4602      	mov	r2, r0
 80066ae:	460b      	mov	r3, r1
 80066b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80066b4:	e9cd 4500 	strd	r4, r5, [sp]
 80066b8:	4642      	mov	r2, r8
 80066ba:	464b      	mov	r3, r9
 80066bc:	2130      	movs	r1, #48	; 0x30
 80066be:	4852      	ldr	r0, [pc, #328]	; (8006808 <RNS_config+0x2e0>)
 80066c0:	f7fe ff1a 	bl	80054f8 <RNSSet>
	RNSSet(&rns, RNS_B_LEFT_VEL_PID,  CP, CI, CD);   //
 80066c4:	4b59      	ldr	r3, [pc, #356]	; (800682c <RNS_config+0x304>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7f9 ff3d 	bl	8000548 <__aeabi_f2d>
 80066ce:	4680      	mov	r8, r0
 80066d0:	4689      	mov	r9, r1
 80066d2:	4b57      	ldr	r3, [pc, #348]	; (8006830 <RNS_config+0x308>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7f9 ff36 	bl	8000548 <__aeabi_f2d>
 80066dc:	4604      	mov	r4, r0
 80066de:	460d      	mov	r5, r1
 80066e0:	4b54      	ldr	r3, [pc, #336]	; (8006834 <RNS_config+0x30c>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7f9 ff2f 	bl	8000548 <__aeabi_f2d>
 80066ea:	4602      	mov	r2, r0
 80066ec:	460b      	mov	r3, r1
 80066ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80066f2:	e9cd 4500 	strd	r4, r5, [sp]
 80066f6:	4642      	mov	r2, r8
 80066f8:	464b      	mov	r3, r9
 80066fa:	2131      	movs	r1, #49	; 0x31
 80066fc:	4842      	ldr	r0, [pc, #264]	; (8006808 <RNS_config+0x2e0>)
 80066fe:	f7fe fefb 	bl	80054f8 <RNSSet>
	RNSSet(&rns, RNS_B_RIGHT_VEL_PID, DP, DI, DD);   //
 8006702:	4b4d      	ldr	r3, [pc, #308]	; (8006838 <RNS_config+0x310>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4618      	mov	r0, r3
 8006708:	f7f9 ff1e 	bl	8000548 <__aeabi_f2d>
 800670c:	4680      	mov	r8, r0
 800670e:	4689      	mov	r9, r1
 8006710:	4b4a      	ldr	r3, [pc, #296]	; (800683c <RNS_config+0x314>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4618      	mov	r0, r3
 8006716:	f7f9 ff17 	bl	8000548 <__aeabi_f2d>
 800671a:	4604      	mov	r4, r0
 800671c:	460d      	mov	r5, r1
 800671e:	4b48      	ldr	r3, [pc, #288]	; (8006840 <RNS_config+0x318>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4618      	mov	r0, r3
 8006724:	f7f9 ff10 	bl	8000548 <__aeabi_f2d>
 8006728:	4602      	mov	r2, r0
 800672a:	460b      	mov	r3, r1
 800672c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006730:	e9cd 4500 	strd	r4, r5, [sp]
 8006734:	4642      	mov	r2, r8
 8006736:	464b      	mov	r3, r9
 8006738:	2132      	movs	r1, #50	; 0x32
 800673a:	4833      	ldr	r0, [pc, #204]	; (8006808 <RNS_config+0x2e0>)
 800673c:	f7fe fedc 	bl	80054f8 <RNSSet>

	RNSSet(&rns, RNS_F_LEFT_VEL_FUZZY_PID_BASE, 0.2, 0.2, 0.2);
 8006740:	a32b      	add	r3, pc, #172	; (adr r3, 80067f0 <RNS_config+0x2c8>)
 8006742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006746:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800674a:	a329      	add	r3, pc, #164	; (adr r3, 80067f0 <RNS_config+0x2c8>)
 800674c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006750:	e9cd 2300 	strd	r2, r3, [sp]
 8006754:	a326      	add	r3, pc, #152	; (adr r3, 80067f0 <RNS_config+0x2c8>)
 8006756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675a:	213d      	movs	r1, #61	; 0x3d
 800675c:	482a      	ldr	r0, [pc, #168]	; (8006808 <RNS_config+0x2e0>)
 800675e:	f7fe fecb 	bl	80054f8 <RNSSet>
	RNSSet(&rns, RNS_F_LEFT_VEL_FUZZY_PID_PARAM, 0.02, 0.02, 0.02);
 8006762:	a325      	add	r3, pc, #148	; (adr r3, 80067f8 <RNS_config+0x2d0>)
 8006764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006768:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800676c:	a322      	add	r3, pc, #136	; (adr r3, 80067f8 <RNS_config+0x2d0>)
 800676e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006772:	e9cd 2300 	strd	r2, r3, [sp]
 8006776:	a320      	add	r3, pc, #128	; (adr r3, 80067f8 <RNS_config+0x2d0>)
 8006778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677c:	2141      	movs	r1, #65	; 0x41
 800677e:	4822      	ldr	r0, [pc, #136]	; (8006808 <RNS_config+0x2e0>)
 8006780:	f7fe feba 	bl	80054f8 <RNSSet>

	RNSSet(&rns, RNS_PPInit); //Path Planning
 8006784:	2116      	movs	r1, #22
 8006786:	4820      	ldr	r0, [pc, #128]	; (8006808 <RNS_config+0x2e0>)
 8006788:	f7fe feb6 	bl	80054f8 <RNSSet>
	RNSSet(&rns, RNS_PPPathPID, 1.0, 0.5, 0.5);
 800678c:	f04f 0200 	mov.w	r2, #0
 8006790:	4b2c      	ldr	r3, [pc, #176]	; (8006844 <RNS_config+0x31c>)
 8006792:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006796:	f04f 0200 	mov.w	r2, #0
 800679a:	4b2a      	ldr	r3, [pc, #168]	; (8006844 <RNS_config+0x31c>)
 800679c:	e9cd 2300 	strd	r2, r3, [sp]
 80067a0:	f04f 0200 	mov.w	r2, #0
 80067a4:	4b19      	ldr	r3, [pc, #100]	; (800680c <RNS_config+0x2e4>)
 80067a6:	2146      	movs	r1, #70	; 0x46
 80067a8:	4817      	ldr	r0, [pc, #92]	; (8006808 <RNS_config+0x2e0>)
 80067aa:	f7fe fea5 	bl	80054f8 <RNSSet>
	RNSSet(&rns, RNS_PPEndPID, 0.5, 0.1, 0.7);
 80067ae:	a314      	add	r3, pc, #80	; (adr r3, 8006800 <RNS_config+0x2d8>)
 80067b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80067b8:	e046      	b.n	8006848 <RNS_config+0x320>
 80067ba:	bf00      	nop
 80067bc:	f3af 8000 	nop.w
 80067c0:	00000000 	.word	0x00000000
 80067c4:	406ca000 	.word	0x406ca000
 80067c8:	b9727cf5 	.word	0xb9727cf5
 80067cc:	3f149766 	.word	0x3f149766
 80067d0:	00000000 	.word	0x00000000
 80067d4:	3f5fa58a 	.word	0x3f5fa58a
 80067d8:	f0f20dae 	.word	0xf0f20dae
 80067dc:	3f5fa589 	.word	0x3f5fa589
 80067e0:	587974bf 	.word	0x587974bf
 80067e4:	3fefef3f 	.word	0x3fefef3f
 80067e8:	00000000 	.word	0x00000000
 80067ec:	40d387c0 	.word	0x40d387c0
 80067f0:	9999999a 	.word	0x9999999a
 80067f4:	3fc99999 	.word	0x3fc99999
 80067f8:	47ae147b 	.word	0x47ae147b
 80067fc:	3f947ae1 	.word	0x3f947ae1
 8006800:	66666666 	.word	0x66666666
 8006804:	3fe66666 	.word	0x3fe66666
 8006808:	20007c7c 	.word	0x20007c7c
 800680c:	3ff00000 	.word	0x3ff00000
 8006810:	3fb00000 	.word	0x3fb00000
 8006814:	20008b88 	.word	0x20008b88
 8006818:	20007248 	.word	0x20007248
 800681c:	20008b84 	.word	0x20008b84
 8006820:	20007408 	.word	0x20007408
 8006824:	20007ef4 	.word	0x20007ef4
 8006828:	20007244 	.word	0x20007244
 800682c:	20008108 	.word	0x20008108
 8006830:	20008294 	.word	0x20008294
 8006834:	20006bcc 	.word	0x20006bcc
 8006838:	200086cc 	.word	0x200086cc
 800683c:	20007064 	.word	0x20007064
 8006840:	20008434 	.word	0x20008434
 8006844:	3fe00000 	.word	0x3fe00000
 8006848:	a31f      	add	r3, pc, #124	; (adr r3, 80068c8 <RNS_config+0x3a0>)
 800684a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684e:	e9cd 2300 	strd	r2, r3, [sp]
 8006852:	f04f 0200 	mov.w	r2, #0
 8006856:	4b18      	ldr	r3, [pc, #96]	; (80068b8 <RNS_config+0x390>)
 8006858:	2147      	movs	r1, #71	; 0x47
 800685a:	4818      	ldr	r0, [pc, #96]	; (80068bc <RNS_config+0x394>)
 800685c:	f7fe fe4c 	bl	80054f8 <RNSSet>
	RNSSet(&rns, RNS_PPZPID, 0.5, 0.05, 0.2, 5.5);
 8006860:	f04f 0200 	mov.w	r2, #0
 8006864:	4b16      	ldr	r3, [pc, #88]	; (80068c0 <RNS_config+0x398>)
 8006866:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800686a:	a30f      	add	r3, pc, #60	; (adr r3, 80068a8 <RNS_config+0x380>)
 800686c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006870:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006874:	a30e      	add	r3, pc, #56	; (adr r3, 80068b0 <RNS_config+0x388>)
 8006876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687a:	e9cd 2300 	strd	r2, r3, [sp]
 800687e:	f04f 0200 	mov.w	r2, #0
 8006882:	4b0d      	ldr	r3, [pc, #52]	; (80068b8 <RNS_config+0x390>)
 8006884:	214f      	movs	r1, #79	; 0x4f
 8006886:	480d      	ldr	r0, [pc, #52]	; (80068bc <RNS_config+0x394>)
 8006888:	f7fe fe36 	bl	80054f8 <RNSSet>
	RNSSet(&rns, RNS_PPSetCRV_PTS, 10.0);         // Change No. of Points in the Curved Path
 800688c:	f04f 0200 	mov.w	r2, #0
 8006890:	4b0c      	ldr	r3, [pc, #48]	; (80068c4 <RNS_config+0x39c>)
 8006892:	211d      	movs	r1, #29
 8006894:	4809      	ldr	r0, [pc, #36]	; (80068bc <RNS_config+0x394>)
 8006896:	f7fe fe2f 	bl	80054f8 <RNSSet>
}
 800689a:	bf00      	nop
 800689c:	3708      	adds	r7, #8
 800689e:	46bd      	mov	sp, r7
 80068a0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80068a4:	f3af 8000 	nop.w
 80068a8:	9999999a 	.word	0x9999999a
 80068ac:	3fc99999 	.word	0x3fc99999
 80068b0:	9999999a 	.word	0x9999999a
 80068b4:	3fa99999 	.word	0x3fa99999
 80068b8:	3fe00000 	.word	0x3fe00000
 80068bc:	20007c7c 	.word	0x20007c7c
 80068c0:	40160000 	.word	0x40160000
 80068c4:	40240000 	.word	0x40240000
 80068c8:	9999999a 	.word	0x9999999a
 80068cc:	3fb99999 	.word	0x3fb99999

080068d0 <ROS_Write_Flash>:

uint32_t ROS_Write_Flash(void)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b088      	sub	sp, #32
 80068d4:	af00      	add	r7, sp, #0
	uint32_t success = 0;
 80068d6:	2300      	movs	r3, #0
 80068d8:	61fb      	str	r3, [r7, #28]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	HAL_FLASH_Unlock();
 80068da:	f005 fa9f 	bl	800be1c <HAL_FLASH_Unlock>

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80068de:	4b30      	ldr	r3, [pc, #192]	; (80069a0 <ROS_Write_Flash+0xd0>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80068e4:	4b2e      	ldr	r3, [pc, #184]	; (80069a0 <ROS_Write_Flash+0xd0>)
 80068e6:	2202      	movs	r2, #2
 80068e8:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = FLASH_SECTOR_8;
 80068ea:	4b2d      	ldr	r3, [pc, #180]	; (80069a0 <ROS_Write_Flash+0xd0>)
 80068ec:	2208      	movs	r2, #8
 80068ee:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors     = 1;
 80068f0:	4b2b      	ldr	r3, [pc, #172]	; (80069a0 <ROS_Write_Flash+0xd0>)
 80068f2:	2201      	movs	r2, #1
 80068f4:	60da      	str	r2, [r3, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 80068f6:	f107 030c 	add.w	r3, r7, #12
 80068fa:	4619      	mov	r1, r3
 80068fc:	4828      	ldr	r0, [pc, #160]	; (80069a0 <ROS_Write_Flash+0xd0>)
 80068fe:	f005 fbfb 	bl	800c0f8 <HAL_FLASHEx_Erase>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d003      	beq.n	8006910 <ROS_Write_Flash+0x40>
	{
		return HAL_FLASH_GetError ();
 8006908:	f005 faba 	bl	800be80 <HAL_FLASH_GetError>
 800690c:	4603      	mov	r3, r0
 800690e:	e042      	b.n	8006996 <ROS_Write_Flash+0xc6>
	}

	uint32_t address = SECTOR8;
 8006910:	4b24      	ldr	r3, [pc, #144]	; (80069a4 <ROS_Write_Flash+0xd4>)
 8006912:	61bb      	str	r3, [r7, #24]
 8006914:	4b24      	ldr	r3, [pc, #144]	; (80069a8 <ROS_Write_Flash+0xd8>)
 8006916:	681b      	ldr	r3, [r3, #0]
	uint32_t temp_1;
	memcpy(&temp_1, &point_num, 4);
 8006918:	60bb      	str	r3, [r7, #8]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, temp_1);
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	461a      	mov	r2, r3
 800691e:	f04f 0300 	mov.w	r3, #0
 8006922:	69b9      	ldr	r1, [r7, #24]
 8006924:	2002      	movs	r0, #2
 8006926:	f005 fa25 	bl	800bd74 <HAL_FLASH_Program>
	address += 4;
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	3304      	adds	r3, #4
 800692e:	61bb      	str	r3, [r7, #24]

	for(int i = 0; i < point_num; i++)
 8006930:	2300      	movs	r3, #0
 8006932:	617b      	str	r3, [r7, #20]
 8006934:	e027      	b.n	8006986 <ROS_Write_Flash+0xb6>
	{
		for(int j = 0; j < 7; j++)
 8006936:	2300      	movs	r3, #0
 8006938:	613b      	str	r3, [r7, #16]
 800693a:	e01e      	b.n	800697a <ROS_Write_Flash+0xaa>
		{
			uint32_t temp;
			memcpy(&temp, &PP_Points[i][j], 4);
 800693c:	4b1b      	ldr	r3, [pc, #108]	; (80069ac <ROS_Write_Flash+0xdc>)
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	607b      	str	r3, [r7, #4]
			if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, temp) == HAL_OK)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	461a      	mov	r2, r3
 8006956:	f04f 0300 	mov.w	r3, #0
 800695a:	69b9      	ldr	r1, [r7, #24]
 800695c:	2002      	movs	r0, #2
 800695e:	f005 fa09 	bl	800bd74 <HAL_FLASH_Program>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d102      	bne.n	800696e <ROS_Write_Flash+0x9e>
			{
				success++;
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	3301      	adds	r3, #1
 800696c:	61fb      	str	r3, [r7, #28]
			}
			address += 4;
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	3304      	adds	r3, #4
 8006972:	61bb      	str	r3, [r7, #24]
		for(int j = 0; j < 7; j++)
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	3301      	adds	r3, #1
 8006978:	613b      	str	r3, [r7, #16]
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	2b06      	cmp	r3, #6
 800697e:	dddd      	ble.n	800693c <ROS_Write_Flash+0x6c>
	for(int i = 0; i < point_num; i++)
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	3301      	adds	r3, #1
 8006984:	617b      	str	r3, [r7, #20]
 8006986:	4b08      	ldr	r3, [pc, #32]	; (80069a8 <ROS_Write_Flash+0xd8>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	429a      	cmp	r2, r3
 800698e:	dbd2      	blt.n	8006936 <ROS_Write_Flash+0x66>
		}
	}
	HAL_FLASH_Lock();
 8006990:	f005 fa66 	bl	800be60 <HAL_FLASH_Lock>
	return success;
 8006994:	69fb      	ldr	r3, [r7, #28]


//	path_num++;
}
 8006996:	4618      	mov	r0, r3
 8006998:	3720      	adds	r7, #32
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	200004bc 	.word	0x200004bc
 80069a4:	08080004 	.word	0x08080004
 80069a8:	20007f34 	.word	0x20007f34
 80069ac:	20007ef0 	.word	0x20007ef0

080069b0 <ROS_Read_Flash>:

void ROS_Read_Flash(void)
{
 80069b0:	b590      	push	{r4, r7, lr}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
	uint32_t address = SECTOR8;
 80069b6:	4b28      	ldr	r3, [pc, #160]	; (8006a58 <ROS_Read_Flash+0xa8>)
 80069b8:	60fb      	str	r3, [r7, #12]
	memcpy(&point_num, (__IO uint32_t *)address, 4);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	461a      	mov	r2, r3
 80069c0:	4b26      	ldr	r3, [pc, #152]	; (8006a5c <ROS_Read_Flash+0xac>)
 80069c2:	601a      	str	r2, [r3, #0]
	address += 4;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	3304      	adds	r3, #4
 80069c8:	60fb      	str	r3, [r7, #12]

	PP_Points = (float**)malloc(point_num * sizeof(float*));
 80069ca:	4b24      	ldr	r3, [pc, #144]	; (8006a5c <ROS_Read_Flash+0xac>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4618      	mov	r0, r3
 80069d2:	f00e fc0d 	bl	80151f0 <malloc>
 80069d6:	4603      	mov	r3, r0
 80069d8:	461a      	mov	r2, r3
 80069da:	4b21      	ldr	r3, [pc, #132]	; (8006a60 <ROS_Read_Flash+0xb0>)
 80069dc:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < point_num; i++)
 80069de:	2300      	movs	r3, #0
 80069e0:	60bb      	str	r3, [r7, #8]
 80069e2:	e00c      	b.n	80069fe <ROS_Read_Flash+0x4e>
	{
		PP_Points[i] = (float*)malloc(7 * sizeof(float));
 80069e4:	4b1e      	ldr	r3, [pc, #120]	; (8006a60 <ROS_Read_Flash+0xb0>)
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	18d4      	adds	r4, r2, r3
 80069ee:	201c      	movs	r0, #28
 80069f0:	f00e fbfe 	bl	80151f0 <malloc>
 80069f4:	4603      	mov	r3, r0
 80069f6:	6023      	str	r3, [r4, #0]
	for(int i = 0; i < point_num; i++)
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	3301      	adds	r3, #1
 80069fc:	60bb      	str	r3, [r7, #8]
 80069fe:	4b17      	ldr	r3, [pc, #92]	; (8006a5c <ROS_Read_Flash+0xac>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	dbed      	blt.n	80069e4 <ROS_Read_Flash+0x34>
	}

	for(int i = 0; i < point_num; i++)
 8006a08:	2300      	movs	r3, #0
 8006a0a:	607b      	str	r3, [r7, #4]
 8006a0c:	e01a      	b.n	8006a44 <ROS_Read_Flash+0x94>
	{
		for(int j = 0; j < 7; j++)
 8006a0e:	2300      	movs	r3, #0
 8006a10:	603b      	str	r3, [r7, #0]
 8006a12:	e011      	b.n	8006a38 <ROS_Read_Flash+0x88>
		{
			memcpy(&PP_Points[i][j], (__IO uint32_t *)address, 4);
 8006a14:	4b12      	ldr	r3, [pc, #72]	; (8006a60 <ROS_Read_Flash+0xb0>)
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4413      	add	r3, r2
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	6812      	ldr	r2, [r2, #0]
 8006a2a:	601a      	str	r2, [r3, #0]
			address += 4;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	3304      	adds	r3, #4
 8006a30:	60fb      	str	r3, [r7, #12]
		for(int j = 0; j < 7; j++)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	3301      	adds	r3, #1
 8006a36:	603b      	str	r3, [r7, #0]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2b06      	cmp	r3, #6
 8006a3c:	ddea      	ble.n	8006a14 <ROS_Read_Flash+0x64>
	for(int i = 0; i < point_num; i++)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	3301      	adds	r3, #1
 8006a42:	607b      	str	r3, [r7, #4]
 8006a44:	4b05      	ldr	r3, [pc, #20]	; (8006a5c <ROS_Read_Flash+0xac>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	dbdf      	blt.n	8006a0e <ROS_Read_Flash+0x5e>
		}
	}
}
 8006a4e:	bf00      	nop
 8006a50:	bf00      	nop
 8006a52:	3714      	adds	r7, #20
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd90      	pop	{r4, r7, pc}
 8006a58:	08080004 	.word	0x08080004
 8006a5c:	20007f34 	.word	0x20007f34
 8006a60:	20007ef0 	.word	0x20007ef0

08006a64 <ROS_Handler>:

void ROS_Handler(void)
{
 8006a64:	b590      	push	{r4, r7, lr}
 8006a66:	b089      	sub	sp, #36	; 0x24
 8006a68:	af00      	add	r7, sp, #0
	static uint8_t state = 0;
	switch(state)
 8006a6a:	4b9b      	ldr	r3, [pc, #620]	; (8006cd8 <ROS_Handler+0x274>)
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	f000 8102 	beq.w	8006c78 <ROS_Handler+0x214>
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	f300 812b 	bgt.w	8006cd0 <ROS_Handler+0x26c>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <ROS_Handler+0x22>
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	f000 80a1 	beq.w	8006bc6 <ROS_Handler+0x162>
//		led3 = !led3;
		break;

	}

}
 8006a84:	e124      	b.n	8006cd0 <ROS_Handler+0x26c>
		sys.pp_ready = 0;
 8006a86:	4a95      	ldr	r2, [pc, #596]	; (8006cdc <ROS_Handler+0x278>)
 8006a88:	7813      	ldrb	r3, [r2, #0]
 8006a8a:	f36f 0382 	bfc	r3, #2, #1
 8006a8e:	7013      	strb	r3, [r2, #0]
		if(ROS_buff[0] == 0x01 && ROS_buff[1] == 0x02)
 8006a90:	4b93      	ldr	r3, [pc, #588]	; (8006ce0 <ROS_Handler+0x27c>)
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d140      	bne.n	8006b1a <ROS_Handler+0xb6>
 8006a98:	4b91      	ldr	r3, [pc, #580]	; (8006ce0 <ROS_Handler+0x27c>)
 8006a9a:	785b      	ldrb	r3, [r3, #1]
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d13c      	bne.n	8006b1a <ROS_Handler+0xb6>
			state = 1;
 8006aa0:	4b8d      	ldr	r3, [pc, #564]	; (8006cd8 <ROS_Handler+0x274>)
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	701a      	strb	r2, [r3, #0]
 8006aa6:	4b8e      	ldr	r3, [pc, #568]	; (8006ce0 <ROS_Handler+0x27c>)
 8006aa8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8006aac:	461a      	mov	r2, r3
			memcpy(&point_num, &ROS_buff[2], 4);
 8006aae:	4b8d      	ldr	r3, [pc, #564]	; (8006ce4 <ROS_Handler+0x280>)
 8006ab0:	601a      	str	r2, [r3, #0]
			PP_Points = (float**)malloc(point_num * sizeof(float*));
 8006ab2:	4b8c      	ldr	r3, [pc, #560]	; (8006ce4 <ROS_Handler+0x280>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f00e fb99 	bl	80151f0 <malloc>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	4b89      	ldr	r3, [pc, #548]	; (8006ce8 <ROS_Handler+0x284>)
 8006ac4:	601a      	str	r2, [r3, #0]
			for(int i = 0; i < point_num; i++)
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	61fb      	str	r3, [r7, #28]
 8006aca:	e00c      	b.n	8006ae6 <ROS_Handler+0x82>
				PP_Points[i] = (float*)malloc(7 * sizeof(float));
 8006acc:	4b86      	ldr	r3, [pc, #536]	; (8006ce8 <ROS_Handler+0x284>)
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	18d4      	adds	r4, r2, r3
 8006ad6:	201c      	movs	r0, #28
 8006ad8:	f00e fb8a 	bl	80151f0 <malloc>
 8006adc:	4603      	mov	r3, r0
 8006ade:	6023      	str	r3, [r4, #0]
			for(int i = 0; i < point_num; i++)
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	61fb      	str	r3, [r7, #28]
 8006ae6:	4b7f      	ldr	r3, [pc, #508]	; (8006ce4 <ROS_Handler+0x280>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	69fa      	ldr	r2, [r7, #28]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	dbed      	blt.n	8006acc <ROS_Handler+0x68>
			HAL_UART_Transmit(&huart4, (uint8_t* )&point_num, 4, HAL_MAX_DELAY);
 8006af0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006af4:	2204      	movs	r2, #4
 8006af6:	497b      	ldr	r1, [pc, #492]	; (8006ce4 <ROS_Handler+0x280>)
 8006af8:	487c      	ldr	r0, [pc, #496]	; (8006cec <ROS_Handler+0x288>)
 8006afa:	f009 fea8 	bl	801084e <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart4, ROS_buff, 28 * point_num);
 8006afe:	4b79      	ldr	r3, [pc, #484]	; (8006ce4 <ROS_Handler+0x280>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	461a      	mov	r2, r3
 8006b06:	00d2      	lsls	r2, r2, #3
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	461a      	mov	r2, r3
 8006b10:	4973      	ldr	r1, [pc, #460]	; (8006ce0 <ROS_Handler+0x27c>)
 8006b12:	4876      	ldr	r0, [pc, #472]	; (8006cec <ROS_Handler+0x288>)
 8006b14:	f009 ff34 	bl	8010980 <HAL_UART_Receive_IT>
 8006b18:	e054      	b.n	8006bc4 <ROS_Handler+0x160>
		else if(ROS_buff[0] == 0x11 && ROS_buff[1] == 0x12) // Sending command
 8006b1a:	4b71      	ldr	r3, [pc, #452]	; (8006ce0 <ROS_Handler+0x27c>)
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	2b11      	cmp	r3, #17
 8006b20:	d149      	bne.n	8006bb6 <ROS_Handler+0x152>
 8006b22:	4b6f      	ldr	r3, [pc, #444]	; (8006ce0 <ROS_Handler+0x27c>)
 8006b24:	785b      	ldrb	r3, [r3, #1]
 8006b26:	2b12      	cmp	r3, #18
 8006b28:	d145      	bne.n	8006bb6 <ROS_Handler+0x152>
			if(ROS_buff[2] == 'w')
 8006b2a:	4b6d      	ldr	r3, [pc, #436]	; (8006ce0 <ROS_Handler+0x27c>)
 8006b2c:	789b      	ldrb	r3, [r3, #2]
 8006b2e:	2b77      	cmp	r3, #119	; 0x77
 8006b30:	d12d      	bne.n	8006b8e <ROS_Handler+0x12a>
				state = 0;
 8006b32:	4b69      	ldr	r3, [pc, #420]	; (8006cd8 <ROS_Handler+0x274>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	701a      	strb	r2, [r3, #0]
				uint32_t write_success = 0;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	603b      	str	r3, [r7, #0]
				write_success += ROS_Write_Flash();
 8006b3c:	f7ff fec8 	bl	80068d0 <ROS_Write_Flash>
 8006b40:	4602      	mov	r2, r0
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	4413      	add	r3, r2
 8006b46:	603b      	str	r3, [r7, #0]
				if(write_success == point_num * 7)
 8006b48:	4b66      	ldr	r3, [pc, #408]	; (8006ce4 <ROS_Handler+0x280>)
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	00db      	lsls	r3, r3, #3
 8006b50:	1a9a      	subs	r2, r3, r2
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d10a      	bne.n	8006b6e <ROS_Handler+0x10a>
					ack = 0x21;
 8006b58:	4b65      	ldr	r3, [pc, #404]	; (8006cf0 <ROS_Handler+0x28c>)
 8006b5a:	2221      	movs	r2, #33	; 0x21
 8006b5c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart4, &ack, 1, HAL_MAX_DELAY);
 8006b5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b62:	2201      	movs	r2, #1
 8006b64:	4962      	ldr	r1, [pc, #392]	; (8006cf0 <ROS_Handler+0x28c>)
 8006b66:	4861      	ldr	r0, [pc, #388]	; (8006cec <ROS_Handler+0x288>)
 8006b68:	f009 fe71 	bl	801084e <HAL_UART_Transmit>
 8006b6c:	e009      	b.n	8006b82 <ROS_Handler+0x11e>
					ack = 0x22;
 8006b6e:	4b60      	ldr	r3, [pc, #384]	; (8006cf0 <ROS_Handler+0x28c>)
 8006b70:	2222      	movs	r2, #34	; 0x22
 8006b72:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart4, &ack, 1, HAL_MAX_DELAY);
 8006b74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b78:	2201      	movs	r2, #1
 8006b7a:	495d      	ldr	r1, [pc, #372]	; (8006cf0 <ROS_Handler+0x28c>)
 8006b7c:	485b      	ldr	r0, [pc, #364]	; (8006cec <ROS_Handler+0x288>)
 8006b7e:	f009 fe66 	bl	801084e <HAL_UART_Transmit>
				HAL_UART_Receive_IT(&huart4, ROS_buff, 6);
 8006b82:	2206      	movs	r2, #6
 8006b84:	4956      	ldr	r1, [pc, #344]	; (8006ce0 <ROS_Handler+0x27c>)
 8006b86:	4859      	ldr	r0, [pc, #356]	; (8006cec <ROS_Handler+0x288>)
 8006b88:	f009 fefa 	bl	8010980 <HAL_UART_Receive_IT>
			if(ROS_buff[2] == 'w')
 8006b8c:	e019      	b.n	8006bc2 <ROS_Handler+0x15e>
			else if(ROS_buff[2] == 'r')
 8006b8e:	4b54      	ldr	r3, [pc, #336]	; (8006ce0 <ROS_Handler+0x27c>)
 8006b90:	789b      	ldrb	r3, [r3, #2]
 8006b92:	2b72      	cmp	r3, #114	; 0x72
 8006b94:	d115      	bne.n	8006bc2 <ROS_Handler+0x15e>
				state = 2;
 8006b96:	4b50      	ldr	r3, [pc, #320]	; (8006cd8 <ROS_Handler+0x274>)
 8006b98:	2202      	movs	r2, #2
 8006b9a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart4, (uint8_t* )&point_num, 4, HAL_MAX_DELAY);
 8006b9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ba0:	2204      	movs	r2, #4
 8006ba2:	4950      	ldr	r1, [pc, #320]	; (8006ce4 <ROS_Handler+0x280>)
 8006ba4:	4851      	ldr	r0, [pc, #324]	; (8006cec <ROS_Handler+0x288>)
 8006ba6:	f009 fe52 	bl	801084e <HAL_UART_Transmit>
				HAL_UART_Receive_IT(&huart4, &ROS_buff[0], 1);
 8006baa:	2201      	movs	r2, #1
 8006bac:	494c      	ldr	r1, [pc, #304]	; (8006ce0 <ROS_Handler+0x27c>)
 8006bae:	484f      	ldr	r0, [pc, #316]	; (8006cec <ROS_Handler+0x288>)
 8006bb0:	f009 fee6 	bl	8010980 <HAL_UART_Receive_IT>
			if(ROS_buff[2] == 'w')
 8006bb4:	e005      	b.n	8006bc2 <ROS_Handler+0x15e>
			HAL_UART_Receive_IT(&huart4, ROS_buff, 6);
 8006bb6:	2206      	movs	r2, #6
 8006bb8:	4949      	ldr	r1, [pc, #292]	; (8006ce0 <ROS_Handler+0x27c>)
 8006bba:	484c      	ldr	r0, [pc, #304]	; (8006cec <ROS_Handler+0x288>)
 8006bbc:	f009 fee0 	bl	8010980 <HAL_UART_Receive_IT>
		break;
 8006bc0:	e086      	b.n	8006cd0 <ROS_Handler+0x26c>
			if(ROS_buff[2] == 'w')
 8006bc2:	bf00      	nop
		break;
 8006bc4:	e084      	b.n	8006cd0 <ROS_Handler+0x26c>
		for(int i = 0; i < point_num; i++)
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	61bb      	str	r3, [r7, #24]
 8006bca:	e01f      	b.n	8006c0c <ROS_Handler+0x1a8>
			for(int j = 0; j < 7; j++)
 8006bcc:	2300      	movs	r3, #0
 8006bce:	617b      	str	r3, [r7, #20]
 8006bd0:	e016      	b.n	8006c00 <ROS_Handler+0x19c>
				memcpy(&PP_Points[i][j], &ROS_buff[j * 4 + i * 28], 4);
 8006bd2:	4b45      	ldr	r3, [pc, #276]	; (8006ce8 <ROS_Handler+0x284>)
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4413      	add	r3, r2
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	18d1      	adds	r1, r2, r3
 8006be4:	69ba      	ldr	r2, [r7, #24]
 8006be6:	4613      	mov	r3, r2
 8006be8:	00db      	lsls	r3, r3, #3
 8006bea:	1a9a      	subs	r2, r3, r2
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	4413      	add	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4a3b      	ldr	r2, [pc, #236]	; (8006ce0 <ROS_Handler+0x27c>)
 8006bf4:	4413      	add	r3, r2
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	600b      	str	r3, [r1, #0]
			for(int j = 0; j < 7; j++)
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	617b      	str	r3, [r7, #20]
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	2b06      	cmp	r3, #6
 8006c04:	dde5      	ble.n	8006bd2 <ROS_Handler+0x16e>
		for(int i = 0; i < point_num; i++)
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	61bb      	str	r3, [r7, #24]
 8006c0c:	4b35      	ldr	r3, [pc, #212]	; (8006ce4 <ROS_Handler+0x280>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	dbda      	blt.n	8006bcc <ROS_Handler+0x168>
		for(int i = 0; i < point_num; i++)
 8006c16:	2300      	movs	r3, #0
 8006c18:	613b      	str	r3, [r7, #16]
 8006c1a:	e01a      	b.n	8006c52 <ROS_Handler+0x1ee>
			for(int j = 0; j < 7; j++)
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	60fb      	str	r3, [r7, #12]
 8006c20:	e011      	b.n	8006c46 <ROS_Handler+0x1e2>
				HAL_UART_Transmit(&huart4, (uint8_t*)&PP_Points[i][j], 4, HAL_MAX_DELAY);
 8006c22:	4b31      	ldr	r3, [pc, #196]	; (8006ce8 <ROS_Handler+0x284>)
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4413      	add	r3, r2
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	18d1      	adds	r1, r2, r3
 8006c34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c38:	2204      	movs	r2, #4
 8006c3a:	482c      	ldr	r0, [pc, #176]	; (8006cec <ROS_Handler+0x288>)
 8006c3c:	f009 fe07 	bl	801084e <HAL_UART_Transmit>
			for(int j = 0; j < 7; j++)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	3301      	adds	r3, #1
 8006c44:	60fb      	str	r3, [r7, #12]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2b06      	cmp	r3, #6
 8006c4a:	ddea      	ble.n	8006c22 <ROS_Handler+0x1be>
		for(int i = 0; i < point_num; i++)
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	613b      	str	r3, [r7, #16]
 8006c52:	4b24      	ldr	r3, [pc, #144]	; (8006ce4 <ROS_Handler+0x280>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	dbdf      	blt.n	8006c1c <ROS_Handler+0x1b8>
		HAL_UART_Receive_IT(&huart4, ROS_buff, 6);
 8006c5c:	2206      	movs	r2, #6
 8006c5e:	4920      	ldr	r1, [pc, #128]	; (8006ce0 <ROS_Handler+0x27c>)
 8006c60:	4822      	ldr	r0, [pc, #136]	; (8006cec <ROS_Handler+0x288>)
 8006c62:	f009 fe8d 	bl	8010980 <HAL_UART_Receive_IT>
		sys.pp_ready = 1;
 8006c66:	4a1d      	ldr	r2, [pc, #116]	; (8006cdc <ROS_Handler+0x278>)
 8006c68:	7813      	ldrb	r3, [r2, #0]
 8006c6a:	f043 0304 	orr.w	r3, r3, #4
 8006c6e:	7013      	strb	r3, [r2, #0]
		state = 0;
 8006c70:	4b19      	ldr	r3, [pc, #100]	; (8006cd8 <ROS_Handler+0x274>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	701a      	strb	r2, [r3, #0]
		break;
 8006c76:	e02b      	b.n	8006cd0 <ROS_Handler+0x26c>
		for(int i = 0; i < point_num; i++)
 8006c78:	2300      	movs	r3, #0
 8006c7a:	60bb      	str	r3, [r7, #8]
 8006c7c:	e01a      	b.n	8006cb4 <ROS_Handler+0x250>
			for(int j = 0; j < 7; j++)
 8006c7e:	2300      	movs	r3, #0
 8006c80:	607b      	str	r3, [r7, #4]
 8006c82:	e011      	b.n	8006ca8 <ROS_Handler+0x244>
				HAL_UART_Transmit(&huart4, (uint8_t*)&PP_Points[i][j], 4, HAL_MAX_DELAY);
 8006c84:	4b18      	ldr	r3, [pc, #96]	; (8006ce8 <ROS_Handler+0x284>)
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	18d1      	adds	r1, r2, r3
 8006c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c9a:	2204      	movs	r2, #4
 8006c9c:	4813      	ldr	r0, [pc, #76]	; (8006cec <ROS_Handler+0x288>)
 8006c9e:	f009 fdd6 	bl	801084e <HAL_UART_Transmit>
			for(int j = 0; j < 7; j++)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	607b      	str	r3, [r7, #4]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2b06      	cmp	r3, #6
 8006cac:	ddea      	ble.n	8006c84 <ROS_Handler+0x220>
		for(int i = 0; i < point_num; i++)
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	60bb      	str	r3, [r7, #8]
 8006cb4:	4b0b      	ldr	r3, [pc, #44]	; (8006ce4 <ROS_Handler+0x280>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	dbdf      	blt.n	8006c7e <ROS_Handler+0x21a>
		HAL_UART_Receive_IT(&huart4, ROS_buff, 6);
 8006cbe:	2206      	movs	r2, #6
 8006cc0:	4907      	ldr	r1, [pc, #28]	; (8006ce0 <ROS_Handler+0x27c>)
 8006cc2:	480a      	ldr	r0, [pc, #40]	; (8006cec <ROS_Handler+0x288>)
 8006cc4:	f009 fe5c 	bl	8010980 <HAL_UART_Receive_IT>
		state = 0;
 8006cc8:	4b03      	ldr	r3, [pc, #12]	; (8006cd8 <ROS_Handler+0x274>)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	701a      	strb	r2, [r3, #0]
		break;
 8006cce:	bf00      	nop
}
 8006cd0:	bf00      	nop
 8006cd2:	3724      	adds	r7, #36	; 0x24
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd90      	pop	{r4, r7, pc}
 8006cd8:	200004d0 	.word	0x200004d0
 8006cdc:	20007254 	.word	0x20007254
 8006ce0:	2000768c 	.word	0x2000768c
 8006ce4:	20007f34 	.word	0x20007f34
 8006ce8:	20007ef0 	.word	0x20007ef0
 8006cec:	20006730 	.word	0x20006730
 8006cf0:	20007038 	.word	0x20007038

08006cf4 <ILI9341_Init_List>:
Tune_Float_t lcdFloatList[NUM_FLOAT_UPDATE]={
//		varF(ps4.joyR_x, 0, 0),
};


void ILI9341_Init_List(void){
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af02      	add	r7, sp, #8
	ILI9341row = 5;
 8006cfa:	4b23      	ldr	r3, [pc, #140]	; (8006d88 <ILI9341_Init_List+0x94>)
 8006cfc:	2205      	movs	r2, #5
 8006cfe:	601a      	str	r2, [r3, #0]

	for(int i=0; i<NUM_INT_UPDATE; i++){
 8006d00:	2300      	movs	r3, #0
 8006d02:	607b      	str	r3, [r7, #4]
 8006d04:	e018      	b.n	8006d38 <ILI9341_Init_List+0x44>
		ILI9341_Draw_String(5, ILI9341row, WHITE, BLACK, lcdIntList[i].varName, 2);
 8006d06:	4b20      	ldr	r3, [pc, #128]	; (8006d88 <ILI9341_Init_List+0x94>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	4a1f      	ldr	r2, [pc, #124]	; (8006d8c <ILI9341_Init_List+0x98>)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	011b      	lsls	r3, r3, #4
 8006d12:	4413      	add	r3, r2
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2202      	movs	r2, #2
 8006d18:	9201      	str	r2, [sp, #4]
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d22:	2005      	movs	r0, #5
 8006d24:	f7fc fdb2 	bl	800388c <ILI9341_Draw_String>
		ILI9341row += 15;
 8006d28:	4b17      	ldr	r3, [pc, #92]	; (8006d88 <ILI9341_Init_List+0x94>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	330f      	adds	r3, #15
 8006d2e:	4a16      	ldr	r2, [pc, #88]	; (8006d88 <ILI9341_Init_List+0x94>)
 8006d30:	6013      	str	r3, [r2, #0]
	for(int i=0; i<NUM_INT_UPDATE; i++){
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	3301      	adds	r3, #1
 8006d36:	607b      	str	r3, [r7, #4]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	dde3      	ble.n	8006d06 <ILI9341_Init_List+0x12>
	}

	for(int i=0; i<NUM_FLOAT_UPDATE; i++){
 8006d3e:	2300      	movs	r3, #0
 8006d40:	603b      	str	r3, [r7, #0]
 8006d42:	e018      	b.n	8006d76 <ILI9341_Init_List+0x82>
		ILI9341_Draw_String(5, ILI9341row, WHITE, BLACK, lcdFloatList[i].varName, 2);
 8006d44:	4b10      	ldr	r3, [pc, #64]	; (8006d88 <ILI9341_Init_List+0x94>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4619      	mov	r1, r3
 8006d4a:	4a11      	ldr	r2, [pc, #68]	; (8006d90 <ILI9341_Init_List+0x9c>)
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	011b      	lsls	r3, r3, #4
 8006d50:	4413      	add	r3, r2
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2202      	movs	r2, #2
 8006d56:	9201      	str	r2, [sp, #4]
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d60:	2005      	movs	r0, #5
 8006d62:	f7fc fd93 	bl	800388c <ILI9341_Draw_String>
		ILI9341row += 15;
 8006d66:	4b08      	ldr	r3, [pc, #32]	; (8006d88 <ILI9341_Init_List+0x94>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	330f      	adds	r3, #15
 8006d6c:	4a06      	ldr	r2, [pc, #24]	; (8006d88 <ILI9341_Init_List+0x94>)
 8006d6e:	6013      	str	r3, [r2, #0]
	for(int i=0; i<NUM_FLOAT_UPDATE; i++){
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	3301      	adds	r3, #1
 8006d74:	603b      	str	r3, [r7, #0]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	dde3      	ble.n	8006d44 <ILI9341_Init_List+0x50>
	}
}
 8006d7c:	bf00      	nop
 8006d7e:	bf00      	nop
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	20006e1c 	.word	0x20006e1c
 8006d8c:	2000049c 	.word	0x2000049c
 8006d90:	200004ac 	.word	0x200004ac

08006d94 <DMA1_Stream0_IRQHandler>:
#include "dma.h"

/*I2C*/

void DMA1_Stream0_IRQHandler(void)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
 8006d98:	4802      	ldr	r0, [pc, #8]	; (8006da4 <DMA1_Stream0_IRQHandler+0x10>)
 8006d9a:	f004 fd67 	bl	800b86c <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_uart5_rx);

}
 8006d9e:	bf00      	nop
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	20008860 	.word	0x20008860

08006da8 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hdma_usart3_rx);
	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
 8006dac:	4802      	ldr	r0, [pc, #8]	; (8006db8 <DMA1_Stream3_IRQHandler+0x10>)
 8006dae:	f004 fd5d 	bl	800b86c <HAL_DMA_IRQHandler>
}
 8006db2:	bf00      	nop
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	20006c28 	.word	0x20006c28

08006dbc <DMA1_Stream2_IRQHandler>:

void DMA1_Stream2_IRQHandler(void)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8006dc0:	4802      	ldr	r0, [pc, #8]	; (8006dcc <DMA1_Stream2_IRQHandler+0x10>)
 8006dc2:	f004 fd53 	bl	800b86c <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
//	HAL_DMA_IRQHandler(&hi2c3_rx_dma);
}
 8006dc6:	bf00      	nop
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	20006158 	.word	0x20006158

08006dd0 <DMA1_Stream1_IRQHandler>:

/*UART*/
void DMA1_Stream1_IRQHandler(void)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8006dd4:	4802      	ldr	r0, [pc, #8]	; (8006de0 <DMA1_Stream1_IRQHandler+0x10>)
 8006dd6:	f004 fd49 	bl	800b86c <HAL_DMA_IRQHandler>
}
 8006dda:	bf00      	nop
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	2000629c 	.word	0x2000629c

08006de4 <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8006de8:	4802      	ldr	r0, [pc, #8]	; (8006df4 <DMA1_Stream4_IRQHandler+0x10>)
 8006dea:	f004 fd3f 	bl	800b86c <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_usart3_tx);
//	HAL_DMA_IRQHandler(&hi2c3_tx_dma);
}
 8006dee:	bf00      	nop
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	20006910 	.word	0x20006910

08006df8 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006dfc:	4802      	ldr	r0, [pc, #8]	; (8006e08 <DMA1_Stream5_IRQHandler+0x10>)
 8006dfe:	f004 fd35 	bl	800b86c <HAL_DMA_IRQHandler>
}
 8006e02:	bf00      	nop
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	200061b8 	.word	0x200061b8

08006e0c <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	af00      	add	r7, sp, #0

//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006e10:	4802      	ldr	r0, [pc, #8]	; (8006e1c <DMA1_Stream6_IRQHandler+0x10>)
 8006e12:	f004 fd2b 	bl	800b86c <HAL_DMA_IRQHandler>
}
 8006e16:	bf00      	nop
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	200064a4 	.word	0x200064a4

08006e20 <DMA1_Stream7_IRQHandler>:

void DMA1_Stream7_IRQHandler(void){
 8006e20:	b580      	push	{r7, lr}
 8006e22:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
//	HAL_DMA_IRQHandler(&hi2c2_tx_dma);
	HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8006e24:	4802      	ldr	r0, [pc, #8]	; (8006e30 <DMA1_Stream7_IRQHandler+0x10>)
 8006e26:	f004 fd21 	bl	800b86c <HAL_DMA_IRQHandler>
}
 8006e2a:	bf00      	nop
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	20006970 	.word	0x20006970

08006e34 <DMA2_Stream0_IRQHandler>:


void DMA2_Stream0_IRQHandler(void)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc1);
 8006e38:	4802      	ldr	r0, [pc, #8]	; (8006e44 <DMA2_Stream0_IRQHandler+0x10>)
 8006e3a:	f004 fd17 	bl	800b86c <HAL_DMA_IRQHandler>
}
 8006e3e:	bf00      	nop
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	20006b08 	.word	0x20006b08

08006e48 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc3);
 8006e4c:	4802      	ldr	r0, [pc, #8]	; (8006e58 <DMA2_Stream1_IRQHandler+0x10>)
 8006e4e:	f004 fd0d 	bl	800b86c <HAL_DMA_IRQHandler>
}
 8006e52:	bf00      	nop
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	20006a18 	.word	0x20006a18

08006e5c <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8006e60:	4802      	ldr	r0, [pc, #8]	; (8006e6c <DMA2_Stream2_IRQHandler+0x10>)
 8006e62:	f004 fd03 	bl	800b86c <HAL_DMA_IRQHandler>
}
 8006e66:	bf00      	nop
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	200087d8 	.word	0x200087d8

08006e70 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc2);
 8006e74:	4802      	ldr	r0, [pc, #8]	; (8006e80 <DMA2_Stream3_IRQHandler+0x10>)
 8006e76:	f004 fcf9 	bl	800b86c <HAL_DMA_IRQHandler>
}
 8006e7a:	bf00      	nop
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	20006b68 	.word	0x20006b68

08006e84 <DMA2_Stream5_IRQHandler>:

void DMA2_Stream5_IRQHandler(void)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8006e88:	4802      	ldr	r0, [pc, #8]	; (8006e94 <DMA2_Stream5_IRQHandler+0x10>)
 8006e8a:	f004 fcef 	bl	800b86c <HAL_DMA_IRQHandler>
}
 8006e8e:	bf00      	nop
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	20008b8c 	.word	0x20008b8c

08006e98 <NMI_Handler>:
int _counter = 0;
/**
 * * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	af00      	add	r7, sp, #0

}
 8006e9c:	bf00      	nop
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	af00      	add	r7, sp, #0

}
 8006eaa:	bf00      	nop
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	af00      	add	r7, sp, #0

	while(1){
 8006eb8:	e7fe      	b.n	8006eb8 <MemManage_Handler+0x4>

08006eba <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	af00      	add	r7, sp, #0

}
 8006ebe:	bf00      	nop
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	af00      	add	r7, sp, #0

}
 8006ecc:	bf00      	nop
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	af00      	add	r7, sp, #0

}
 8006eda:	bf00      	nop
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <TIM1_UP_TIM10_IRQHandler>:
//
//}


void TIM1_UP_TIM10_IRQHandler(void)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	af00      	add	r7, sp, #0
		BIOS_QEI1.signbit -= 1;
	}
	htim1.Instance -> SR = 0;
	QEIDelay(200);
#else
	HAL_TIM_IRQHandler(&htim1);
 8006ee8:	4803      	ldr	r0, [pc, #12]	; (8006ef8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8006eea:	f008 fe09 	bl	800fb00 <HAL_TIM_IRQHandler>
#endif
	HAL_TIM_IRQHandler(&htim10);
 8006eee:	4803      	ldr	r0, [pc, #12]	; (8006efc <TIM1_UP_TIM10_IRQHandler+0x18>)
 8006ef0:	f008 fe06 	bl	800fb00 <HAL_TIM_IRQHandler>
	return;
 8006ef4:	bf00      	nop
}
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	2000666c 	.word	0x2000666c
 8006efc:	2000633c 	.word	0x2000633c

08006f00 <TIM4_IRQHandler>:



void TIM4_IRQHandler(void)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	af00      	add	r7, sp, #0
	}
	htim4.Instance -> SR = 0;
	QEIDelay(100);

#else
	HAL_TIM_IRQHandler(&htim4);
 8006f04:	4802      	ldr	r0, [pc, #8]	; (8006f10 <TIM4_IRQHandler+0x10>)
 8006f06:	f008 fdfb 	bl	800fb00 <HAL_TIM_IRQHandler>

	return;
 8006f0a:	bf00      	nop
#endif

}
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	2000625c 	.word	0x2000625c

08006f14 <TIM8_UP_TIM13_IRQHandler>:



void TIM8_UP_TIM13_IRQHandler(void)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	af00      	add	r7, sp, #0
		BIOS_QEI6.signbit -= 1;
	}
	htim8.Instance -> SR = 0;
	QEIDelay(200);
#else
	HAL_TIM_IRQHandler(&htim8);
 8006f18:	4803      	ldr	r0, [pc, #12]	; (8006f28 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8006f1a:	f008 fdf1 	bl	800fb00 <HAL_TIM_IRQHandler>
#endif
	HAL_TIM_IRQHandler(&htim13);
 8006f1e:	4803      	ldr	r0, [pc, #12]	; (8006f2c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8006f20:	f008 fdee 	bl	800fb00 <HAL_TIM_IRQHandler>
	return;
 8006f24:	bf00      	nop
}
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	2000621c 	.word	0x2000621c
 8006f2c:	20006504 	.word	0x20006504

08006f30 <TIM2_IRQHandler>:



void TIM2_IRQHandler(void)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 8006f34:	4802      	ldr	r0, [pc, #8]	; (8006f40 <TIM2_IRQHandler+0x10>)
 8006f36:	f008 fde3 	bl	800fb00 <HAL_TIM_IRQHandler>
}
 8006f3a:	bf00      	nop
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	20006770 	.word	0x20006770

08006f44 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f54:	d109      	bne.n	8006f6a <HAL_TIM_PeriodElapsedCallback+0x26>
		HAL_IncTick();
 8006f56:	f003 faf1 	bl	800a53c <HAL_IncTick>
		//		MUXUpdate(&MUX);
		SHIFTREGShift(&SR);
 8006f5a:	4806      	ldr	r0, [pc, #24]	; (8006f74 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8006f5c:	f7fa fc7d 	bl	800185a <SHIFTREGShift>
		counter++;
 8006f60:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	3301      	adds	r3, #1
 8006f66:	4a04      	ldr	r2, [pc, #16]	; (8006f78 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8006f68:	6013      	str	r3, [r2, #0]
	}
}
 8006f6a:	bf00      	nop
 8006f6c:	3708      	adds	r7, #8
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	2000803c 	.word	0x2000803c
 8006f78:	2000818c 	.word	0x2000818c

08006f7c <HAL_I2C_MasterRxCpltCallback>:


//Callback for I2C RXBuffer
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
	if(hi2c == ps4.hi2cps4){
 8006f84:	4b05      	ldr	r3, [pc, #20]	; (8006f9c <HAL_I2C_MasterRxCpltCallback+0x20>)
 8006f86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d102      	bne.n	8006f94 <HAL_I2C_MasterRxCpltCallback+0x18>
		PSxConnectDMA(&ps4);
 8006f8e:	4803      	ldr	r0, [pc, #12]	; (8006f9c <HAL_I2C_MasterRxCpltCallback+0x20>)
 8006f90:	f7fd fd66 	bl	8004a60 <PSxConnectDMA>
	}
}
 8006f94:	bf00      	nop
 8006f96:	3708      	adds	r7, #8
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	200088cc 	.word	0x200088cc

08006fa0 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void){
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	af00      	add	r7, sp, #0
	HAL_I2C_EV_IRQHandler(&hi2c1);
 8006fa4:	4802      	ldr	r0, [pc, #8]	; (8006fb0 <I2C1_EV_IRQHandler+0x10>)
 8006fa6:	f005 ff05 	bl	800cdb4 <HAL_I2C_EV_IRQHandler>

}
 8006faa:	bf00      	nop
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20007174 	.word	0x20007174

08006fb4 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void){
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	af00      	add	r7, sp, #0
	HAL_I2C_ER_IRQHandler(&hi2c1);
 8006fb8:	480a      	ldr	r0, [pc, #40]	; (8006fe4 <I2C1_ER_IRQHandler+0x30>)
 8006fba:	f006 f868 	bl	800d08e <HAL_I2C_ER_IRQHandler>
	HAL_DMA_DeInit(&hi2c1_rx_dma);
 8006fbe:	480a      	ldr	r0, [pc, #40]	; (8006fe8 <I2C1_ER_IRQHandler+0x34>)
 8006fc0:	f004 fb7c 	bl	800b6bc <HAL_DMA_DeInit>
	HAL_I2C_DeInit(&hi2c1);
 8006fc4:	4807      	ldr	r0, [pc, #28]	; (8006fe4 <I2C1_ER_IRQHandler+0x30>)
 8006fc6:	f005 fdaf 	bl	800cb28 <HAL_I2C_DeInit>

	I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 8006fca:	4b08      	ldr	r3, [pc, #32]	; (8006fec <I2C1_ER_IRQHandler+0x38>)
 8006fcc:	2208      	movs	r2, #8
 8006fce:	4906      	ldr	r1, [pc, #24]	; (8006fe8 <I2C1_ER_IRQHandler+0x34>)
 8006fd0:	4804      	ldr	r0, [pc, #16]	; (8006fe4 <I2C1_ER_IRQHandler+0x30>)
 8006fd2:	f7fc f939 	bl	8003248 <I2CX_DMA_RX_Init>
//
//
//
	PSxInitDMA(&ps4, &hi2c1);
 8006fd6:	4903      	ldr	r1, [pc, #12]	; (8006fe4 <I2C1_ER_IRQHandler+0x30>)
 8006fd8:	4805      	ldr	r0, [pc, #20]	; (8006ff0 <I2C1_ER_IRQHandler+0x3c>)
 8006fda:	f7fd fd54 	bl	8004a86 <PSxInitDMA>

}
 8006fde:	bf00      	nop
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	20007174 	.word	0x20007174
 8006fe8:	20008860 	.word	0x20008860
 8006fec:	00061a80 	.word	0x00061a80
 8006ff0:	200088cc 	.word	0x200088cc

08006ff4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b08c      	sub	sp, #48	; 0x30
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8007000:	2300      	movs	r3, #0
 8007002:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8007004:	2200      	movs	r2, #0
 8007006:	6879      	ldr	r1, [r7, #4]
 8007008:	201c      	movs	r0, #28
 800700a:	f004 fa63 	bl	800b4d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800700e:	201c      	movs	r0, #28
 8007010:	f004 fa7c 	bl	800b50c <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8007014:	2300      	movs	r3, #0
 8007016:	60fb      	str	r3, [r7, #12]
 8007018:	4b20      	ldr	r3, [pc, #128]	; (800709c <HAL_InitTick+0xa8>)
 800701a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701c:	4a1f      	ldr	r2, [pc, #124]	; (800709c <HAL_InitTick+0xa8>)
 800701e:	f043 0301 	orr.w	r3, r3, #1
 8007022:	6413      	str	r3, [r2, #64]	; 0x40
 8007024:	4b1d      	ldr	r3, [pc, #116]	; (800709c <HAL_InitTick+0xa8>)
 8007026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	60fb      	str	r3, [r7, #12]
 800702e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007030:	f107 0210 	add.w	r2, r7, #16
 8007034:	f107 0314 	add.w	r3, r7, #20
 8007038:	4611      	mov	r1, r2
 800703a:	4618      	mov	r0, r3
 800703c:	f008 f8f0 	bl	800f220 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8007040:	f008 f8c6 	bl	800f1d0 <HAL_RCC_GetPCLK1Freq>
 8007044:	4603      	mov	r3, r0
 8007046:	005b      	lsls	r3, r3, #1
 8007048:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800704a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704c:	4a14      	ldr	r2, [pc, #80]	; (80070a0 <HAL_InitTick+0xac>)
 800704e:	fba2 2303 	umull	r2, r3, r2, r3
 8007052:	0c9b      	lsrs	r3, r3, #18
 8007054:	3b01      	subs	r3, #1
 8007056:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8007058:	4b12      	ldr	r3, [pc, #72]	; (80070a4 <HAL_InitTick+0xb0>)
 800705a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800705e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8007060:	4b10      	ldr	r3, [pc, #64]	; (80070a4 <HAL_InitTick+0xb0>)
 8007062:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007066:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8007068:	4a0e      	ldr	r2, [pc, #56]	; (80070a4 <HAL_InitTick+0xb0>)
 800706a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800706e:	4b0d      	ldr	r3, [pc, #52]	; (80070a4 <HAL_InitTick+0xb0>)
 8007070:	2200      	movs	r2, #0
 8007072:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007074:	4b0b      	ldr	r3, [pc, #44]	; (80070a4 <HAL_InitTick+0xb0>)
 8007076:	2200      	movs	r2, #0
 8007078:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800707a:	480a      	ldr	r0, [pc, #40]	; (80070a4 <HAL_InitTick+0xb0>)
 800707c:	f008 fc64 	bl	800f948 <HAL_TIM_Base_Init>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d104      	bne.n	8007090 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8007086:	4807      	ldr	r0, [pc, #28]	; (80070a4 <HAL_InitTick+0xb0>)
 8007088:	f008 fcad 	bl	800f9e6 <HAL_TIM_Base_Start_IT>
 800708c:	4603      	mov	r3, r0
 800708e:	e000      	b.n	8007092 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8007090:	2301      	movs	r3, #1
}
 8007092:	4618      	mov	r0, r3
 8007094:	3730      	adds	r7, #48	; 0x30
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	40023800 	.word	0x40023800
 80070a0:	431bde83 	.word	0x431bde83
 80070a4:	20006770 	.word	0x20006770

080070a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80070a8:	b480      	push	{r7}
 80070aa:	af00      	add	r7, sp, #0
	return 1;
 80070ac:	2301      	movs	r3, #1
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <_kill>:

int _kill(int pid, int sig)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80070c2:	f00e f86b 	bl	801519c <__errno>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2216      	movs	r2, #22
 80070ca:	601a      	str	r2, [r3, #0]
	return -1;
 80070cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3708      	adds	r7, #8
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <_exit>:

void _exit (int status)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80070e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7ff ffe7 	bl	80070b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80070ea:	e7fe      	b.n	80070ea <_exit+0x12>

080070ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b086      	sub	sp, #24
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80070f8:	2300      	movs	r3, #0
 80070fa:	617b      	str	r3, [r7, #20]
 80070fc:	e00a      	b.n	8007114 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80070fe:	f3af 8000 	nop.w
 8007102:	4601      	mov	r1, r0
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	1c5a      	adds	r2, r3, #1
 8007108:	60ba      	str	r2, [r7, #8]
 800710a:	b2ca      	uxtb	r2, r1
 800710c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	3301      	adds	r3, #1
 8007112:	617b      	str	r3, [r7, #20]
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	429a      	cmp	r2, r3
 800711a:	dbf0      	blt.n	80070fe <_read+0x12>
	}

return len;
 800711c:	687b      	ldr	r3, [r7, #4]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3718      	adds	r7, #24
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b086      	sub	sp, #24
 800712a:	af00      	add	r7, sp, #0
 800712c:	60f8      	str	r0, [r7, #12]
 800712e:	60b9      	str	r1, [r7, #8]
 8007130:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007132:	2300      	movs	r3, #0
 8007134:	617b      	str	r3, [r7, #20]
 8007136:	e009      	b.n	800714c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	1c5a      	adds	r2, r3, #1
 800713c:	60ba      	str	r2, [r7, #8]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	4618      	mov	r0, r3
 8007142:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	3301      	adds	r3, #1
 800714a:	617b      	str	r3, [r7, #20]
 800714c:	697a      	ldr	r2, [r7, #20]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	429a      	cmp	r2, r3
 8007152:	dbf1      	blt.n	8007138 <_write+0x12>
	}
	return len;
 8007154:	687b      	ldr	r3, [r7, #4]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3718      	adds	r7, #24
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <_close>:

int _close(int file)
{
 800715e:	b480      	push	{r7}
 8007160:	b083      	sub	sp, #12
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
	return -1;
 8007166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800716a:	4618      	mov	r0, r3
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr

08007176 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007176:	b480      	push	{r7}
 8007178:	b083      	sub	sp, #12
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007186:	605a      	str	r2, [r3, #4]
	return 0;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <_isatty>:

int _isatty(int file)
{
 8007196:	b480      	push	{r7}
 8007198:	b083      	sub	sp, #12
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
	return 1;
 800719e:	2301      	movs	r3, #1
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
	return 0;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3714      	adds	r7, #20
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
	...

080071c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80071d0:	4a14      	ldr	r2, [pc, #80]	; (8007224 <_sbrk+0x5c>)
 80071d2:	4b15      	ldr	r3, [pc, #84]	; (8007228 <_sbrk+0x60>)
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80071dc:	4b13      	ldr	r3, [pc, #76]	; (800722c <_sbrk+0x64>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d102      	bne.n	80071ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80071e4:	4b11      	ldr	r3, [pc, #68]	; (800722c <_sbrk+0x64>)
 80071e6:	4a12      	ldr	r2, [pc, #72]	; (8007230 <_sbrk+0x68>)
 80071e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80071ea:	4b10      	ldr	r3, [pc, #64]	; (800722c <_sbrk+0x64>)
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4413      	add	r3, r2
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d207      	bcs.n	8007208 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80071f8:	f00d ffd0 	bl	801519c <__errno>
 80071fc:	4603      	mov	r3, r0
 80071fe:	220c      	movs	r2, #12
 8007200:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007202:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007206:	e009      	b.n	800721c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007208:	4b08      	ldr	r3, [pc, #32]	; (800722c <_sbrk+0x64>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800720e:	4b07      	ldr	r3, [pc, #28]	; (800722c <_sbrk+0x64>)
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4413      	add	r3, r2
 8007216:	4a05      	ldr	r2, [pc, #20]	; (800722c <_sbrk+0x64>)
 8007218:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800721a:	68fb      	ldr	r3, [r7, #12]
}
 800721c:	4618      	mov	r0, r3
 800721e:	3718      	adds	r7, #24
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	20020000 	.word	0x20020000
 8007228:	00000400 	.word	0x00000400
 800722c:	200004d4 	.word	0x200004d4
 8007230:	20008f20 	.word	0x20008f20

08007234 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007234:	b480      	push	{r7}
 8007236:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007238:	4b08      	ldr	r3, [pc, #32]	; (800725c <SystemInit+0x28>)
 800723a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800723e:	4a07      	ldr	r2, [pc, #28]	; (800725c <SystemInit+0x28>)
 8007240:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007244:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007248:	4b04      	ldr	r3, [pc, #16]	; (800725c <SystemInit+0x28>)
 800724a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800724e:	609a      	str	r2, [r3, #8]
#endif
}
 8007250:	bf00      	nop
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	e000ed00 	.word	0xe000ed00

08007260 <tuneRegister>:
		SECTOR_7_FOR_PAGE_2,
		SECTOR_7_FOR_PAGE_3,
		SECTOR_7_FOR_PAGE_4
};

void tuneRegister(int numPage, UART_HandleTypeDef* huartx){
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
	tunePage = numPage;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	b2da      	uxtb	r2, r3
 800726e:	4b17      	ldr	r3, [pc, #92]	; (80072cc <tuneRegister+0x6c>)
 8007270:	701a      	strb	r2, [r3, #0]
	tuneUart = huartx;
 8007272:	4a17      	ldr	r2, [pc, #92]	; (80072d0 <tuneRegister+0x70>)
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	6013      	str	r3, [r2, #0]

	for(int i=0; i<tunePage; i++){
 8007278:	2300      	movs	r3, #0
 800727a:	60fb      	str	r3, [r7, #12]
 800727c:	e018      	b.n	80072b0 <tuneRegister+0x50>
		tuneWriteSuccess += numInt[i];
 800727e:	4a15      	ldr	r2, [pc, #84]	; (80072d4 <tuneRegister+0x74>)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007286:	b2da      	uxtb	r2, r3
 8007288:	4b13      	ldr	r3, [pc, #76]	; (80072d8 <tuneRegister+0x78>)
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	4413      	add	r3, r2
 800728e:	b2da      	uxtb	r2, r3
 8007290:	4b11      	ldr	r3, [pc, #68]	; (80072d8 <tuneRegister+0x78>)
 8007292:	701a      	strb	r2, [r3, #0]
		tuneWriteSuccess += numFloat[i];
 8007294:	4a11      	ldr	r2, [pc, #68]	; (80072dc <tuneRegister+0x7c>)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800729c:	b2da      	uxtb	r2, r3
 800729e:	4b0e      	ldr	r3, [pc, #56]	; (80072d8 <tuneRegister+0x78>)
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	4413      	add	r3, r2
 80072a4:	b2da      	uxtb	r2, r3
 80072a6:	4b0c      	ldr	r3, [pc, #48]	; (80072d8 <tuneRegister+0x78>)
 80072a8:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<tunePage; i++){
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	3301      	adds	r3, #1
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	4b06      	ldr	r3, [pc, #24]	; (80072cc <tuneRegister+0x6c>)
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	461a      	mov	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	4293      	cmp	r3, r2
 80072ba:	dbe0      	blt.n	800727e <tuneRegister+0x1e>
	}
}
 80072bc:	bf00      	nop
 80072be:	bf00      	nop
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	20006e18 	.word	0x20006e18
 80072d0:	20008bec 	.word	0x20008bec
 80072d4:	200001bc 	.word	0x200001bc
 80072d8:	20007f30 	.word	0x20007f30
 80072dc:	200001d0 	.word	0x200001d0

080072e0 <tunePending>:

void tunePending(void){
 80072e0:	b580      	push	{r7, lr}
 80072e2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(tuneUart, (uint8_t *)&tuneCommand, 1);
 80072e4:	4b04      	ldr	r3, [pc, #16]	; (80072f8 <tunePending+0x18>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2201      	movs	r2, #1
 80072ea:	4904      	ldr	r1, [pc, #16]	; (80072fc <tunePending+0x1c>)
 80072ec:	4618      	mov	r0, r3
 80072ee:	f009 fb9d 	bl	8010a2c <HAL_UART_Receive_DMA>
}
 80072f2:	bf00      	nop
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	20008bec 	.word	0x20008bec
 80072fc:	20007f31 	.word	0x20007f31

08007300 <tuneInit>:

void tuneInit(TUNE_PAGE page){
 8007300:	b580      	push	{r7, lr}
 8007302:	b0a0      	sub	sp, #128	; 0x80
 8007304:	af00      	add	r7, sp, #0
 8007306:	4603      	mov	r3, r0
 8007308:	71fb      	strb	r3, [r7, #7]
	//[NUM_INT_TUNE][NUM_FLOAT_TUNE]
	//[0x52][0x01][strlen][str...][*curValue...][min ...][max ...][0x31][0x40] format of INT
	//[0x14][0x01][strlen][str...][*curValue...][minF...][maxF...][0x20][0x00] format of FLOAT


	uint8_t numVar[2] = {numInt[page], numFloat[page]};
 800730a:	79fb      	ldrb	r3, [r7, #7]
 800730c:	4a91      	ldr	r2, [pc, #580]	; (8007554 <tuneInit+0x254>)
 800730e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007312:	b2db      	uxtb	r3, r3
 8007314:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 8007318:	79fb      	ldrb	r3, [r7, #7]
 800731a:	4a8f      	ldr	r2, [pc, #572]	; (8007558 <tuneInit+0x258>)
 800731c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007320:	b2db      	uxtb	r3, r3
 8007322:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71

	HAL_UART_Transmit(tuneUart, numVar, 2, 10);
 8007326:	4b8d      	ldr	r3, [pc, #564]	; (800755c <tuneInit+0x25c>)
 8007328:	6818      	ldr	r0, [r3, #0]
 800732a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800732e:	230a      	movs	r3, #10
 8007330:	2202      	movs	r2, #2
 8007332:	f009 fa8c 	bl	801084e <HAL_UART_Transmit>
	uint8_t sendBuf[100];
	for(int i=0; i<numInt[page]; i++){
 8007336:	2300      	movs	r3, #0
 8007338:	67fb      	str	r3, [r7, #124]	; 0x7c
 800733a:	e079      	b.n	8007430 <tuneInit+0x130>
		sendBuf[0] = 0x52;
 800733c:	2352      	movs	r3, #82	; 0x52
 800733e:	733b      	strb	r3, [r7, #12]
		sendBuf[1] = 0x01;
 8007340:	2301      	movs	r3, #1
 8007342:	737b      	strb	r3, [r7, #13]
		uint8_t strLen = strlen(intList[page][i].varName);
 8007344:	79fb      	ldrb	r3, [r7, #7]
 8007346:	4a86      	ldr	r2, [pc, #536]	; (8007560 <tuneInit+0x260>)
 8007348:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800734c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800734e:	011b      	lsls	r3, r3, #4
 8007350:	4413      	add	r3, r2
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4618      	mov	r0, r3
 8007356:	f7f8 ff3b 	bl	80001d0 <strlen>
 800735a:	4603      	mov	r3, r0
 800735c:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
		sendBuf[2] = strLen;
 8007360:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8007364:	73bb      	strb	r3, [r7, #14]
		uint8_t len = 1+1+1+strLen+4+4+4+1+1;
 8007366:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800736a:	3311      	adds	r3, #17
 800736c:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

		sendBuf[len-2] = 0x31; sendBuf[len-1] = 0x40;
 8007370:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8007374:	3b02      	subs	r3, #2
 8007376:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800737a:	4413      	add	r3, r2
 800737c:	2231      	movs	r2, #49	; 0x31
 800737e:	f803 2c74 	strb.w	r2, [r3, #-116]
 8007382:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8007386:	3b01      	subs	r3, #1
 8007388:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800738c:	4413      	add	r3, r2
 800738e:	2240      	movs	r2, #64	; 0x40
 8007390:	f803 2c74 	strb.w	r2, [r3, #-116]
		memcpy(&sendBuf[3], intList[page][i].varName, strLen);
 8007394:	79fb      	ldrb	r3, [r7, #7]
 8007396:	4a72      	ldr	r2, [pc, #456]	; (8007560 <tuneInit+0x260>)
 8007398:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800739c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800739e:	011b      	lsls	r3, r3, #4
 80073a0:	4413      	add	r3, r2
 80073a2:	6819      	ldr	r1, [r3, #0]
 80073a4:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 80073a8:	f107 030c 	add.w	r3, r7, #12
 80073ac:	3303      	adds	r3, #3
 80073ae:	4618      	mov	r0, r3
 80073b0:	f00d ff26 	bl	8015200 <memcpy>
		memcpy(&sendBuf[3+strLen], intList[page][i].ptr, 4);
 80073b4:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80073b8:	3303      	adds	r3, #3
 80073ba:	f107 020c 	add.w	r2, r7, #12
 80073be:	4413      	add	r3, r2
 80073c0:	79fa      	ldrb	r2, [r7, #7]
 80073c2:	4967      	ldr	r1, [pc, #412]	; (8007560 <tuneInit+0x260>)
 80073c4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80073c8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80073ca:	0112      	lsls	r2, r2, #4
 80073cc:	440a      	add	r2, r1
 80073ce:	6852      	ldr	r2, [r2, #4]
 80073d0:	6812      	ldr	r2, [r2, #0]
 80073d2:	601a      	str	r2, [r3, #0]
		memcpy(&sendBuf[3+strLen+4], &intList[page][i].min, 4);
 80073d4:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80073d8:	3307      	adds	r3, #7
 80073da:	f107 020c 	add.w	r2, r7, #12
 80073de:	4413      	add	r3, r2
 80073e0:	79fa      	ldrb	r2, [r7, #7]
 80073e2:	495f      	ldr	r1, [pc, #380]	; (8007560 <tuneInit+0x260>)
 80073e4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80073e8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80073ea:	0112      	lsls	r2, r2, #4
 80073ec:	440a      	add	r2, r1
 80073ee:	3208      	adds	r2, #8
 80073f0:	6812      	ldr	r2, [r2, #0]
 80073f2:	601a      	str	r2, [r3, #0]
		memcpy(&sendBuf[3+strLen+8], &intList[page][i].max, 4);
 80073f4:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80073f8:	330b      	adds	r3, #11
 80073fa:	f107 020c 	add.w	r2, r7, #12
 80073fe:	4413      	add	r3, r2
 8007400:	79fa      	ldrb	r2, [r7, #7]
 8007402:	4957      	ldr	r1, [pc, #348]	; (8007560 <tuneInit+0x260>)
 8007404:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8007408:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800740a:	0112      	lsls	r2, r2, #4
 800740c:	440a      	add	r2, r1
 800740e:	320c      	adds	r2, #12
 8007410:	6812      	ldr	r2, [r2, #0]
 8007412:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(tuneUart, sendBuf, len, 1000);
 8007414:	4b51      	ldr	r3, [pc, #324]	; (800755c <tuneInit+0x25c>)
 8007416:	6818      	ldr	r0, [r3, #0]
 8007418:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800741c:	b29a      	uxth	r2, r3
 800741e:	f107 010c 	add.w	r1, r7, #12
 8007422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007426:	f009 fa12 	bl	801084e <HAL_UART_Transmit>
	for(int i=0; i<numInt[page]; i++){
 800742a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800742c:	3301      	adds	r3, #1
 800742e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007430:	79fb      	ldrb	r3, [r7, #7]
 8007432:	4a48      	ldr	r2, [pc, #288]	; (8007554 <tuneInit+0x254>)
 8007434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007438:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800743a:	429a      	cmp	r2, r3
 800743c:	f6ff af7e 	blt.w	800733c <tuneInit+0x3c>
	}

	for(int i=0; i<numFloat[page]; i++){
 8007440:	2300      	movs	r3, #0
 8007442:	67bb      	str	r3, [r7, #120]	; 0x78
 8007444:	e078      	b.n	8007538 <tuneInit+0x238>
		sendBuf[0] = 0x14;
 8007446:	2314      	movs	r3, #20
 8007448:	733b      	strb	r3, [r7, #12]
		sendBuf[1] = 0x01;
 800744a:	2301      	movs	r3, #1
 800744c:	737b      	strb	r3, [r7, #13]
		uint8_t strLen = strlen(floatList[page][i].varName);
 800744e:	79fb      	ldrb	r3, [r7, #7]
 8007450:	4a44      	ldr	r2, [pc, #272]	; (8007564 <tuneInit+0x264>)
 8007452:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007456:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007458:	011b      	lsls	r3, r3, #4
 800745a:	4413      	add	r3, r2
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4618      	mov	r0, r3
 8007460:	f7f8 feb6 	bl	80001d0 <strlen>
 8007464:	4603      	mov	r3, r0
 8007466:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		sendBuf[2] = strLen;
 800746a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800746e:	73bb      	strb	r3, [r7, #14]
		uint8_t len = 3+strLen+4+4+4+1+1;
 8007470:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007474:	3311      	adds	r3, #17
 8007476:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

		sendBuf[len-2] = 0x20; sendBuf[len-1] = 0x00;
 800747a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800747e:	3b02      	subs	r3, #2
 8007480:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8007484:	4413      	add	r3, r2
 8007486:	2220      	movs	r2, #32
 8007488:	f803 2c74 	strb.w	r2, [r3, #-116]
 800748c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8007490:	3b01      	subs	r3, #1
 8007492:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8007496:	4413      	add	r3, r2
 8007498:	2200      	movs	r2, #0
 800749a:	f803 2c74 	strb.w	r2, [r3, #-116]
		memcpy(&sendBuf[3], floatList[page][i].varName, strLen);
 800749e:	79fb      	ldrb	r3, [r7, #7]
 80074a0:	4a30      	ldr	r2, [pc, #192]	; (8007564 <tuneInit+0x264>)
 80074a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80074a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074a8:	011b      	lsls	r3, r3, #4
 80074aa:	4413      	add	r3, r2
 80074ac:	6819      	ldr	r1, [r3, #0]
 80074ae:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80074b2:	f107 030c 	add.w	r3, r7, #12
 80074b6:	3303      	adds	r3, #3
 80074b8:	4618      	mov	r0, r3
 80074ba:	f00d fea1 	bl	8015200 <memcpy>
		memcpy(&sendBuf[3+strLen], floatList[page][i].ptr, 4);
 80074be:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80074c2:	3303      	adds	r3, #3
 80074c4:	f107 020c 	add.w	r2, r7, #12
 80074c8:	4413      	add	r3, r2
 80074ca:	79fa      	ldrb	r2, [r7, #7]
 80074cc:	4925      	ldr	r1, [pc, #148]	; (8007564 <tuneInit+0x264>)
 80074ce:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80074d2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80074d4:	0112      	lsls	r2, r2, #4
 80074d6:	440a      	add	r2, r1
 80074d8:	6852      	ldr	r2, [r2, #4]
 80074da:	6812      	ldr	r2, [r2, #0]
 80074dc:	601a      	str	r2, [r3, #0]
		memcpy(&sendBuf[3+strLen+4], &floatList[page][i].min, 4);
 80074de:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80074e2:	3307      	adds	r3, #7
 80074e4:	f107 020c 	add.w	r2, r7, #12
 80074e8:	4413      	add	r3, r2
 80074ea:	79fa      	ldrb	r2, [r7, #7]
 80074ec:	491d      	ldr	r1, [pc, #116]	; (8007564 <tuneInit+0x264>)
 80074ee:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80074f2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80074f4:	0112      	lsls	r2, r2, #4
 80074f6:	440a      	add	r2, r1
 80074f8:	3208      	adds	r2, #8
 80074fa:	6812      	ldr	r2, [r2, #0]
 80074fc:	601a      	str	r2, [r3, #0]
		memcpy(&sendBuf[3+strLen+8], &floatList[page][i].max, 4);
 80074fe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007502:	330b      	adds	r3, #11
 8007504:	f107 020c 	add.w	r2, r7, #12
 8007508:	4413      	add	r3, r2
 800750a:	79fa      	ldrb	r2, [r7, #7]
 800750c:	4915      	ldr	r1, [pc, #84]	; (8007564 <tuneInit+0x264>)
 800750e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8007512:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007514:	0112      	lsls	r2, r2, #4
 8007516:	440a      	add	r2, r1
 8007518:	320c      	adds	r2, #12
 800751a:	6812      	ldr	r2, [r2, #0]
 800751c:	601a      	str	r2, [r3, #0]

		HAL_UART_Transmit(tuneUart, sendBuf, len, 100);
 800751e:	4b0f      	ldr	r3, [pc, #60]	; (800755c <tuneInit+0x25c>)
 8007520:	6818      	ldr	r0, [r3, #0]
 8007522:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8007526:	b29a      	uxth	r2, r3
 8007528:	f107 010c 	add.w	r1, r7, #12
 800752c:	2364      	movs	r3, #100	; 0x64
 800752e:	f009 f98e 	bl	801084e <HAL_UART_Transmit>
	for(int i=0; i<numFloat[page]; i++){
 8007532:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007534:	3301      	adds	r3, #1
 8007536:	67bb      	str	r3, [r7, #120]	; 0x78
 8007538:	79fb      	ldrb	r3, [r7, #7]
 800753a:	4a07      	ldr	r2, [pc, #28]	; (8007558 <tuneInit+0x258>)
 800753c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007540:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007542:	429a      	cmp	r2, r3
 8007544:	f6ff af7f 	blt.w	8007446 <tuneInit+0x146>
	}
	tunePending();
 8007548:	f7ff feca 	bl	80072e0 <tunePending>
}
 800754c:	bf00      	nop
 800754e:	3780      	adds	r7, #128	; 0x80
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	200001bc 	.word	0x200001bc
 8007558:	200001d0 	.word	0x200001d0
 800755c:	20008bec 	.word	0x20008bec
 8007560:	200001e4 	.word	0x200001e4
 8007564:	200001f8 	.word	0x200001f8

08007568 <tuneUpdate>:

void tuneUpdate(TUNE_PAGE page){
 8007568:	b5b0      	push	{r4, r5, r7, lr}
 800756a:	b08a      	sub	sp, #40	; 0x28
 800756c:	af00      	add	r7, sp, #0
 800756e:	4603      	mov	r3, r0
 8007570:	71fb      	strb	r3, [r7, #7]
	//[0x52][0x01][index][*curValue...][0x31][0x40] format of INT
	//[0x14][0x01][index][*curValue...][0x20][0x00] format of FLOAT

	for(int i=0; i<numInt[page]; i++){
 8007572:	2300      	movs	r3, #0
 8007574:	623b      	str	r3, [r7, #32]
 8007576:	e053      	b.n	8007620 <tuneUpdate+0xb8>
 8007578:	466b      	mov	r3, sp
 800757a:	461d      	mov	r5, r3
		int len = 1+1+1+4+1+1;
 800757c:	2309      	movs	r3, #9
 800757e:	613b      	str	r3, [r7, #16]
		uint8_t sendBuf[len];
 8007580:	693c      	ldr	r4, [r7, #16]
 8007582:	1e63      	subs	r3, r4, #1
 8007584:	60fb      	str	r3, [r7, #12]
 8007586:	4623      	mov	r3, r4
 8007588:	4618      	mov	r0, r3
 800758a:	f04f 0100 	mov.w	r1, #0
 800758e:	f04f 0200 	mov.w	r2, #0
 8007592:	f04f 0300 	mov.w	r3, #0
 8007596:	00cb      	lsls	r3, r1, #3
 8007598:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800759c:	00c2      	lsls	r2, r0, #3
 800759e:	4623      	mov	r3, r4
 80075a0:	4618      	mov	r0, r3
 80075a2:	f04f 0100 	mov.w	r1, #0
 80075a6:	f04f 0200 	mov.w	r2, #0
 80075aa:	f04f 0300 	mov.w	r3, #0
 80075ae:	00cb      	lsls	r3, r1, #3
 80075b0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80075b4:	00c2      	lsls	r2, r0, #3
 80075b6:	4623      	mov	r3, r4
 80075b8:	3307      	adds	r3, #7
 80075ba:	08db      	lsrs	r3, r3, #3
 80075bc:	00db      	lsls	r3, r3, #3
 80075be:	ebad 0d03 	sub.w	sp, sp, r3
 80075c2:	466b      	mov	r3, sp
 80075c4:	3300      	adds	r3, #0
 80075c6:	60bb      	str	r3, [r7, #8]
		sendBuf[0] = 0x52; sendBuf[1] = 0x01; sendBuf[len-2] = 0x31; sendBuf[len-1] = 0x40;
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	2252      	movs	r2, #82	; 0x52
 80075cc:	701a      	strb	r2, [r3, #0]
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	2201      	movs	r2, #1
 80075d2:	705a      	strb	r2, [r3, #1]
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	3b02      	subs	r3, #2
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	2131      	movs	r1, #49	; 0x31
 80075dc:	54d1      	strb	r1, [r2, r3]
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	3b01      	subs	r3, #1
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	2140      	movs	r1, #64	; 0x40
 80075e6:	54d1      	strb	r1, [r2, r3]
		sendBuf[2] = i;
 80075e8:	6a3b      	ldr	r3, [r7, #32]
 80075ea:	b2da      	uxtb	r2, r3
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	709a      	strb	r2, [r3, #2]
		memcpy(&sendBuf[3], intList[page][i].ptr, 4);
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	3303      	adds	r3, #3
 80075f4:	79fa      	ldrb	r2, [r7, #7]
 80075f6:	4940      	ldr	r1, [pc, #256]	; (80076f8 <tuneUpdate+0x190>)
 80075f8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80075fc:	6a3a      	ldr	r2, [r7, #32]
 80075fe:	0112      	lsls	r2, r2, #4
 8007600:	440a      	add	r2, r1
 8007602:	6852      	ldr	r2, [r2, #4]
 8007604:	6812      	ldr	r2, [r2, #0]
 8007606:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(tuneUart, sendBuf, len, 100);
 8007608:	4b3c      	ldr	r3, [pc, #240]	; (80076fc <tuneUpdate+0x194>)
 800760a:	6818      	ldr	r0, [r3, #0]
 800760c:	68b9      	ldr	r1, [r7, #8]
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	b29a      	uxth	r2, r3
 8007612:	2364      	movs	r3, #100	; 0x64
 8007614:	f009 f91b 	bl	801084e <HAL_UART_Transmit>
 8007618:	46ad      	mov	sp, r5
	for(int i=0; i<numInt[page]; i++){
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	3301      	adds	r3, #1
 800761e:	623b      	str	r3, [r7, #32]
 8007620:	79fb      	ldrb	r3, [r7, #7]
 8007622:	4a37      	ldr	r2, [pc, #220]	; (8007700 <tuneUpdate+0x198>)
 8007624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007628:	6a3a      	ldr	r2, [r7, #32]
 800762a:	429a      	cmp	r2, r3
 800762c:	dba4      	blt.n	8007578 <tuneUpdate+0x10>
	}

	for(int i=0; i<numFloat[page]; i++){
 800762e:	2300      	movs	r3, #0
 8007630:	627b      	str	r3, [r7, #36]	; 0x24
 8007632:	e053      	b.n	80076dc <tuneUpdate+0x174>
 8007634:	466b      	mov	r3, sp
 8007636:	461d      	mov	r5, r3
		int len = 1+1+1+4+1+1;
 8007638:	2309      	movs	r3, #9
 800763a:	61fb      	str	r3, [r7, #28]
		uint8_t sendBuf[len];
 800763c:	69fc      	ldr	r4, [r7, #28]
 800763e:	1e63      	subs	r3, r4, #1
 8007640:	61bb      	str	r3, [r7, #24]
 8007642:	4623      	mov	r3, r4
 8007644:	4618      	mov	r0, r3
 8007646:	f04f 0100 	mov.w	r1, #0
 800764a:	f04f 0200 	mov.w	r2, #0
 800764e:	f04f 0300 	mov.w	r3, #0
 8007652:	00cb      	lsls	r3, r1, #3
 8007654:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8007658:	00c2      	lsls	r2, r0, #3
 800765a:	4623      	mov	r3, r4
 800765c:	4618      	mov	r0, r3
 800765e:	f04f 0100 	mov.w	r1, #0
 8007662:	f04f 0200 	mov.w	r2, #0
 8007666:	f04f 0300 	mov.w	r3, #0
 800766a:	00cb      	lsls	r3, r1, #3
 800766c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8007670:	00c2      	lsls	r2, r0, #3
 8007672:	4623      	mov	r3, r4
 8007674:	3307      	adds	r3, #7
 8007676:	08db      	lsrs	r3, r3, #3
 8007678:	00db      	lsls	r3, r3, #3
 800767a:	ebad 0d03 	sub.w	sp, sp, r3
 800767e:	466b      	mov	r3, sp
 8007680:	3300      	adds	r3, #0
 8007682:	617b      	str	r3, [r7, #20]
		sendBuf[0] = 0x14; sendBuf[1] = 0x01; sendBuf[len-2] = 0x20; sendBuf[len-1] = 0x00;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	2214      	movs	r2, #20
 8007688:	701a      	strb	r2, [r3, #0]
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	2201      	movs	r2, #1
 800768e:	705a      	strb	r2, [r3, #1]
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	3b02      	subs	r3, #2
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	2120      	movs	r1, #32
 8007698:	54d1      	strb	r1, [r2, r3]
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	3b01      	subs	r3, #1
 800769e:	697a      	ldr	r2, [r7, #20]
 80076a0:	2100      	movs	r1, #0
 80076a2:	54d1      	strb	r1, [r2, r3]
		sendBuf[2] = i;
 80076a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a6:	b2da      	uxtb	r2, r3
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	709a      	strb	r2, [r3, #2]
		memcpy(&sendBuf[3], floatList[page][i].ptr, 4);
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	3303      	adds	r3, #3
 80076b0:	79fa      	ldrb	r2, [r7, #7]
 80076b2:	4914      	ldr	r1, [pc, #80]	; (8007704 <tuneUpdate+0x19c>)
 80076b4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80076b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ba:	0112      	lsls	r2, r2, #4
 80076bc:	440a      	add	r2, r1
 80076be:	6852      	ldr	r2, [r2, #4]
 80076c0:	6812      	ldr	r2, [r2, #0]
 80076c2:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(tuneUart, sendBuf, len, 100);
 80076c4:	4b0d      	ldr	r3, [pc, #52]	; (80076fc <tuneUpdate+0x194>)
 80076c6:	6818      	ldr	r0, [r3, #0]
 80076c8:	6979      	ldr	r1, [r7, #20]
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	2364      	movs	r3, #100	; 0x64
 80076d0:	f009 f8bd 	bl	801084e <HAL_UART_Transmit>
 80076d4:	46ad      	mov	sp, r5
	for(int i=0; i<numFloat[page]; i++){
 80076d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d8:	3301      	adds	r3, #1
 80076da:	627b      	str	r3, [r7, #36]	; 0x24
 80076dc:	79fb      	ldrb	r3, [r7, #7]
 80076de:	4a0a      	ldr	r2, [pc, #40]	; (8007708 <tuneUpdate+0x1a0>)
 80076e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076e6:	429a      	cmp	r2, r3
 80076e8:	dba4      	blt.n	8007634 <tuneUpdate+0xcc>
	}

	tunePending();
 80076ea:	f7ff fdf9 	bl	80072e0 <tunePending>
}
 80076ee:	bf00      	nop
 80076f0:	3728      	adds	r7, #40	; 0x28
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bdb0      	pop	{r4, r5, r7, pc}
 80076f6:	bf00      	nop
 80076f8:	200001e4 	.word	0x200001e4
 80076fc:	20008bec 	.word	0x20008bec
 8007700:	200001bc 	.word	0x200001bc
 8007704:	200001f8 	.word	0x200001f8
 8007708:	200001d0 	.word	0x200001d0

0800770c <tuneEdit>:

void tuneEdit(TUNE_PAGE page){
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	4603      	mov	r3, r0
 8007714:	71fb      	strb	r3, [r7, #7]
	//[0x52][0x01][index][editValue...][0x31][0x40] format of INT
	//[0x14][0x01][index][editValue...][0x20][0x00] format of FLOAT
	//[0x88][0x77] terminate, back to tune pending
	static uint8_t state = 0;

	switch(state){
 8007716:	4b52      	ldr	r3, [pc, #328]	; (8007860 <tuneEdit+0x154>)
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	2b03      	cmp	r3, #3
 800771c:	f200 809c 	bhi.w	8007858 <tuneEdit+0x14c>
 8007720:	a201      	add	r2, pc, #4	; (adr r2, 8007728 <tuneEdit+0x1c>)
 8007722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007726:	bf00      	nop
 8007728:	08007739 	.word	0x08007739
 800772c:	0800774f 	.word	0x0800774f
 8007730:	08007793 	.word	0x08007793
 8007734:	080077e5 	.word	0x080077e5
	case 0://When first received tuneCommand == 'e'
		HAL_UART_Receive_DMA(tuneUart, &tuneHeader, 1);
 8007738:	4b4a      	ldr	r3, [pc, #296]	; (8007864 <tuneEdit+0x158>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2201      	movs	r2, #1
 800773e:	494a      	ldr	r1, [pc, #296]	; (8007868 <tuneEdit+0x15c>)
 8007740:	4618      	mov	r0, r3
 8007742:	f009 f973 	bl	8010a2c <HAL_UART_Receive_DMA>
		state = 1;
 8007746:	4b46      	ldr	r3, [pc, #280]	; (8007860 <tuneEdit+0x154>)
 8007748:	2201      	movs	r2, #1
 800774a:	701a      	strb	r2, [r3, #0]
		break;
 800774c:	e084      	b.n	8007858 <tuneEdit+0x14c>
	case 1:
		if(tuneHeader == 0x52 || tuneHeader == 0x14 || tuneHeader == 0x88){
 800774e:	4b46      	ldr	r3, [pc, #280]	; (8007868 <tuneEdit+0x15c>)
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	2b52      	cmp	r3, #82	; 0x52
 8007754:	d007      	beq.n	8007766 <tuneEdit+0x5a>
 8007756:	4b44      	ldr	r3, [pc, #272]	; (8007868 <tuneEdit+0x15c>)
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	2b14      	cmp	r3, #20
 800775c:	d003      	beq.n	8007766 <tuneEdit+0x5a>
 800775e:	4b42      	ldr	r3, [pc, #264]	; (8007868 <tuneEdit+0x15c>)
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	2b88      	cmp	r3, #136	; 0x88
 8007764:	d10a      	bne.n	800777c <tuneEdit+0x70>
			state = 2;
 8007766:	4b3e      	ldr	r3, [pc, #248]	; (8007860 <tuneEdit+0x154>)
 8007768:	2202      	movs	r2, #2
 800776a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(tuneUart, &tuneHeader1, 1);
 800776c:	4b3d      	ldr	r3, [pc, #244]	; (8007864 <tuneEdit+0x158>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2201      	movs	r2, #1
 8007772:	493e      	ldr	r1, [pc, #248]	; (800786c <tuneEdit+0x160>)
 8007774:	4618      	mov	r0, r3
 8007776:	f009 f959 	bl	8010a2c <HAL_UART_Receive_DMA>
		}
		else{
			HAL_UART_Receive_DMA(tuneUart, &tuneHeader, 1);
			state = 1;
		}
		break;
 800777a:	e06d      	b.n	8007858 <tuneEdit+0x14c>
			HAL_UART_Receive_DMA(tuneUart, &tuneHeader, 1);
 800777c:	4b39      	ldr	r3, [pc, #228]	; (8007864 <tuneEdit+0x158>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2201      	movs	r2, #1
 8007782:	4939      	ldr	r1, [pc, #228]	; (8007868 <tuneEdit+0x15c>)
 8007784:	4618      	mov	r0, r3
 8007786:	f009 f951 	bl	8010a2c <HAL_UART_Receive_DMA>
			state = 1;
 800778a:	4b35      	ldr	r3, [pc, #212]	; (8007860 <tuneEdit+0x154>)
 800778c:	2201      	movs	r2, #1
 800778e:	701a      	strb	r2, [r3, #0]
		break;
 8007790:	e062      	b.n	8007858 <tuneEdit+0x14c>
	case 2:
		if(tuneHeader1 == 0x01){
 8007792:	4b36      	ldr	r3, [pc, #216]	; (800786c <tuneEdit+0x160>)
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d10a      	bne.n	80077b0 <tuneEdit+0xa4>
			HAL_UART_Receive_DMA(tuneUart, tuneBuffer, 7);
 800779a:	4b32      	ldr	r3, [pc, #200]	; (8007864 <tuneEdit+0x158>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2207      	movs	r2, #7
 80077a0:	4933      	ldr	r1, [pc, #204]	; (8007870 <tuneEdit+0x164>)
 80077a2:	4618      	mov	r0, r3
 80077a4:	f009 f942 	bl	8010a2c <HAL_UART_Receive_DMA>
			state = 3;
 80077a8:	4b2d      	ldr	r3, [pc, #180]	; (8007860 <tuneEdit+0x154>)
 80077aa:	2203      	movs	r2, #3
 80077ac:	701a      	strb	r2, [r3, #0]
		}
		else{
			HAL_UART_Receive_DMA(tuneUart, &tuneHeader, 1);
			state = 1;
		}
		break;
 80077ae:	e053      	b.n	8007858 <tuneEdit+0x14c>
		else if(tuneHeader1 == 0x77){
 80077b0:	4b2e      	ldr	r3, [pc, #184]	; (800786c <tuneEdit+0x160>)
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	2b77      	cmp	r3, #119	; 0x77
 80077b6:	d10a      	bne.n	80077ce <tuneEdit+0xc2>
			tune_flag.editTerminated = 1;
 80077b8:	4a2e      	ldr	r2, [pc, #184]	; (8007874 <tuneEdit+0x168>)
 80077ba:	7813      	ldrb	r3, [r2, #0]
 80077bc:	f043 0301 	orr.w	r3, r3, #1
 80077c0:	7013      	strb	r3, [r2, #0]
			tunePending();
 80077c2:	f7ff fd8d 	bl	80072e0 <tunePending>
			state = 0;
 80077c6:	4b26      	ldr	r3, [pc, #152]	; (8007860 <tuneEdit+0x154>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	701a      	strb	r2, [r3, #0]
		break;
 80077cc:	e044      	b.n	8007858 <tuneEdit+0x14c>
			HAL_UART_Receive_DMA(tuneUart, &tuneHeader, 1);
 80077ce:	4b25      	ldr	r3, [pc, #148]	; (8007864 <tuneEdit+0x158>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2201      	movs	r2, #1
 80077d4:	4924      	ldr	r1, [pc, #144]	; (8007868 <tuneEdit+0x15c>)
 80077d6:	4618      	mov	r0, r3
 80077d8:	f009 f928 	bl	8010a2c <HAL_UART_Receive_DMA>
			state = 1;
 80077dc:	4b20      	ldr	r3, [pc, #128]	; (8007860 <tuneEdit+0x154>)
 80077de:	2201      	movs	r2, #1
 80077e0:	701a      	strb	r2, [r3, #0]
		break;
 80077e2:	e039      	b.n	8007858 <tuneEdit+0x14c>
	case 3:
		if(tuneBuffer[5] == 0x31 && tuneBuffer[6] == 0x40){
 80077e4:	4b22      	ldr	r3, [pc, #136]	; (8007870 <tuneEdit+0x164>)
 80077e6:	795b      	ldrb	r3, [r3, #5]
 80077e8:	2b31      	cmp	r3, #49	; 0x31
 80077ea:	d10f      	bne.n	800780c <tuneEdit+0x100>
 80077ec:	4b20      	ldr	r3, [pc, #128]	; (8007870 <tuneEdit+0x164>)
 80077ee:	799b      	ldrb	r3, [r3, #6]
 80077f0:	2b40      	cmp	r3, #64	; 0x40
 80077f2:	d10b      	bne.n	800780c <tuneEdit+0x100>
			*((int *)(intList[page][tuneBuffer[0]].ptr)) = *((int *)&tuneBuffer[1]);
 80077f4:	4920      	ldr	r1, [pc, #128]	; (8007878 <tuneEdit+0x16c>)
 80077f6:	79fb      	ldrb	r3, [r7, #7]
 80077f8:	4a20      	ldr	r2, [pc, #128]	; (800787c <tuneEdit+0x170>)
 80077fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80077fe:	4b1c      	ldr	r3, [pc, #112]	; (8007870 <tuneEdit+0x164>)
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	011b      	lsls	r3, r3, #4
 8007804:	4413      	add	r3, r2
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	680a      	ldr	r2, [r1, #0]
 800780a:	601a      	str	r2, [r3, #0]
		}

		if(tuneBuffer[5] == 0x20 && tuneBuffer[6] == 0x00){
 800780c:	4b18      	ldr	r3, [pc, #96]	; (8007870 <tuneEdit+0x164>)
 800780e:	795b      	ldrb	r3, [r3, #5]
 8007810:	2b20      	cmp	r3, #32
 8007812:	d10f      	bne.n	8007834 <tuneEdit+0x128>
 8007814:	4b16      	ldr	r3, [pc, #88]	; (8007870 <tuneEdit+0x164>)
 8007816:	799b      	ldrb	r3, [r3, #6]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10b      	bne.n	8007834 <tuneEdit+0x128>
			*(floatList[page][tuneBuffer[0]].ptr) = *((float *)&tuneBuffer[1]);
 800781c:	4916      	ldr	r1, [pc, #88]	; (8007878 <tuneEdit+0x16c>)
 800781e:	79fb      	ldrb	r3, [r7, #7]
 8007820:	4a17      	ldr	r2, [pc, #92]	; (8007880 <tuneEdit+0x174>)
 8007822:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007826:	4b12      	ldr	r3, [pc, #72]	; (8007870 <tuneEdit+0x164>)
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	011b      	lsls	r3, r3, #4
 800782c:	4413      	add	r3, r2
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	680a      	ldr	r2, [r1, #0]
 8007832:	601a      	str	r2, [r3, #0]
		}
		tuneBuffer[5] = tuneBuffer[6] = 0;
 8007834:	4b0e      	ldr	r3, [pc, #56]	; (8007870 <tuneEdit+0x164>)
 8007836:	2200      	movs	r2, #0
 8007838:	719a      	strb	r2, [r3, #6]
 800783a:	4b0d      	ldr	r3, [pc, #52]	; (8007870 <tuneEdit+0x164>)
 800783c:	799a      	ldrb	r2, [r3, #6]
 800783e:	4b0c      	ldr	r3, [pc, #48]	; (8007870 <tuneEdit+0x164>)
 8007840:	715a      	strb	r2, [r3, #5]
		HAL_UART_Receive_DMA(tuneUart, &tuneHeader, 1);
 8007842:	4b08      	ldr	r3, [pc, #32]	; (8007864 <tuneEdit+0x158>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2201      	movs	r2, #1
 8007848:	4907      	ldr	r1, [pc, #28]	; (8007868 <tuneEdit+0x15c>)
 800784a:	4618      	mov	r0, r3
 800784c:	f009 f8ee 	bl	8010a2c <HAL_UART_Receive_DMA>
		state = 1;
 8007850:	4b03      	ldr	r3, [pc, #12]	; (8007860 <tuneEdit+0x154>)
 8007852:	2201      	movs	r2, #1
 8007854:	701a      	strb	r2, [r3, #0]
		break;
 8007856:	bf00      	nop
	}
}
 8007858:	bf00      	nop
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	200004d8 	.word	0x200004d8
 8007864:	20008bec 	.word	0x20008bec
 8007868:	200080f8 	.word	0x200080f8
 800786c:	20008310 	.word	0x20008310
 8007870:	20006f30 	.word	0x20006f30
 8007874:	200086c8 	.word	0x200086c8
 8007878:	20006f31 	.word	0x20006f31
 800787c:	200001e4 	.word	0x200001e4
 8007880:	200001f8 	.word	0x200001f8

08007884 <tuneWriteInt>:

uint32_t tuneWriteInt(void){
 8007884:	b580      	push	{r7, lr}
 8007886:	b086      	sub	sp, #24
 8007888:	af00      	add	r7, sp, #0
	uint32_t success=0;
 800788a:	2300      	movs	r3, #0
 800788c:	617b      	str	r3, [r7, #20]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	HAL_FLASH_Unlock();
 800788e:	f004 fac5 	bl	800be1c <HAL_FLASH_Unlock>

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8007892:	4b2b      	ldr	r3, [pc, #172]	; (8007940 <tuneWriteInt+0xbc>)
 8007894:	2200      	movs	r2, #0
 8007896:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8007898:	4b29      	ldr	r3, [pc, #164]	; (8007940 <tuneWriteInt+0xbc>)
 800789a:	2202      	movs	r2, #2
 800789c:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = FLASH_SECTOR_6;
 800789e:	4b28      	ldr	r3, [pc, #160]	; (8007940 <tuneWriteInt+0xbc>)
 80078a0:	2206      	movs	r2, #6
 80078a2:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors     = 1;
 80078a4:	4b26      	ldr	r3, [pc, #152]	; (8007940 <tuneWriteInt+0xbc>)
 80078a6:	2201      	movs	r2, #1
 80078a8:	60da      	str	r2, [r3, #12]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 80078aa:	1d3b      	adds	r3, r7, #4
 80078ac:	4619      	mov	r1, r3
 80078ae:	4824      	ldr	r0, [pc, #144]	; (8007940 <tuneWriteInt+0xbc>)
 80078b0:	f004 fc22 	bl	800c0f8 <HAL_FLASHEx_Erase>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d003      	beq.n	80078c2 <tuneWriteInt+0x3e>
	{
		return HAL_FLASH_GetError ();
 80078ba:	f004 fae1 	bl	800be80 <HAL_FLASH_GetError>
 80078be:	4603      	mov	r3, r0
 80078c0:	e039      	b.n	8007936 <tuneWriteInt+0xb2>
	}
	for(int i=0; i<tunePage; i++){
 80078c2:	2300      	movs	r3, #0
 80078c4:	613b      	str	r3, [r7, #16]
 80078c6:	e02d      	b.n	8007924 <tuneWriteInt+0xa0>
		uint32_t Address = intAddress[i];
 80078c8:	4a1e      	ldr	r2, [pc, #120]	; (8007944 <tuneWriteInt+0xc0>)
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078d0:	60fb      	str	r3, [r7, #12]
		for(int j=0; j<numInt[i]; j++){
 80078d2:	2300      	movs	r3, #0
 80078d4:	60bb      	str	r3, [r7, #8]
 80078d6:	e01b      	b.n	8007910 <tuneWriteInt+0x8c>
			if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, *((int *)(intList[i][j].ptr)))==HAL_OK){
 80078d8:	4a1b      	ldr	r2, [pc, #108]	; (8007948 <tuneWriteInt+0xc4>)
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	011b      	lsls	r3, r3, #4
 80078e4:	4413      	add	r3, r2
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	461a      	mov	r2, r3
 80078ec:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80078f0:	68f9      	ldr	r1, [r7, #12]
 80078f2:	2002      	movs	r0, #2
 80078f4:	f004 fa3e 	bl	800bd74 <HAL_FLASH_Program>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d102      	bne.n	8007904 <tuneWriteInt+0x80>
				success ++;
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	3301      	adds	r3, #1
 8007902:	617b      	str	r3, [r7, #20]
			}
			Address += 4;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	3304      	adds	r3, #4
 8007908:	60fb      	str	r3, [r7, #12]
		for(int j=0; j<numInt[i]; j++){
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	3301      	adds	r3, #1
 800790e:	60bb      	str	r3, [r7, #8]
 8007910:	4a0e      	ldr	r2, [pc, #56]	; (800794c <tuneWriteInt+0xc8>)
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	429a      	cmp	r2, r3
 800791c:	dbdc      	blt.n	80078d8 <tuneWriteInt+0x54>
	for(int i=0; i<tunePage; i++){
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	3301      	adds	r3, #1
 8007922:	613b      	str	r3, [r7, #16]
 8007924:	4b0a      	ldr	r3, [pc, #40]	; (8007950 <tuneWriteInt+0xcc>)
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	461a      	mov	r2, r3
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	4293      	cmp	r3, r2
 800792e:	dbcb      	blt.n	80078c8 <tuneWriteInt+0x44>
		}
	}

	HAL_FLASH_Lock();
 8007930:	f004 fa96 	bl	800be60 <HAL_FLASH_Lock>
	return success;
 8007934:	697b      	ldr	r3, [r7, #20]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3718      	adds	r7, #24
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	200004dc 	.word	0x200004dc
 8007944:	2000020c 	.word	0x2000020c
 8007948:	200001e4 	.word	0x200001e4
 800794c:	200001bc 	.word	0x200001bc
 8007950:	20006e18 	.word	0x20006e18

08007954 <tuneWriteFloat>:

uint32_t tuneWriteFloat(void){
 8007954:	b580      	push	{r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af00      	add	r7, sp, #0

	uint32_t success=0;
 800795a:	2300      	movs	r3, #0
 800795c:	617b      	str	r3, [r7, #20]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	HAL_FLASH_Unlock();
 800795e:	f004 fa5d 	bl	800be1c <HAL_FLASH_Unlock>

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8007962:	4b2c      	ldr	r3, [pc, #176]	; (8007a14 <tuneWriteFloat+0xc0>)
 8007964:	2200      	movs	r2, #0
 8007966:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8007968:	4b2a      	ldr	r3, [pc, #168]	; (8007a14 <tuneWriteFloat+0xc0>)
 800796a:	2202      	movs	r2, #2
 800796c:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = FLASH_SECTOR_7;
 800796e:	4b29      	ldr	r3, [pc, #164]	; (8007a14 <tuneWriteFloat+0xc0>)
 8007970:	2207      	movs	r2, #7
 8007972:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors     = 1;
 8007974:	4b27      	ldr	r3, [pc, #156]	; (8007a14 <tuneWriteFloat+0xc0>)
 8007976:	2201      	movs	r2, #1
 8007978:	60da      	str	r2, [r3, #12]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800797a:	1d3b      	adds	r3, r7, #4
 800797c:	4619      	mov	r1, r3
 800797e:	4825      	ldr	r0, [pc, #148]	; (8007a14 <tuneWriteFloat+0xc0>)
 8007980:	f004 fbba 	bl	800c0f8 <HAL_FLASHEx_Erase>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d003      	beq.n	8007992 <tuneWriteFloat+0x3e>
	{
		return HAL_FLASH_GetError ();
 800798a:	f004 fa79 	bl	800be80 <HAL_FLASH_GetError>
 800798e:	4603      	mov	r3, r0
 8007990:	e03b      	b.n	8007a0a <tuneWriteFloat+0xb6>
	}
	for(int i=0; i<tunePage; i++){
 8007992:	2300      	movs	r3, #0
 8007994:	613b      	str	r3, [r7, #16]
 8007996:	e02f      	b.n	80079f8 <tuneWriteFloat+0xa4>
		uint32_t Address = floatAddress[i];
 8007998:	4a1f      	ldr	r2, [pc, #124]	; (8007a18 <tuneWriteFloat+0xc4>)
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079a0:	60fb      	str	r3, [r7, #12]
		for(int j=0; j<numFloat[i]; j++){
 80079a2:	2300      	movs	r3, #0
 80079a4:	60bb      	str	r3, [r7, #8]
 80079a6:	e01d      	b.n	80079e4 <tuneWriteFloat+0x90>
			uint32_t temp;
			memcpy(&temp, floatList[i][j].ptr, 4);
 80079a8:	4a1c      	ldr	r2, [pc, #112]	; (8007a1c <tuneWriteFloat+0xc8>)
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	011b      	lsls	r3, r3, #4
 80079b4:	4413      	add	r3, r2
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	603b      	str	r3, [r7, #0]
			if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, temp)==HAL_OK){
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	461a      	mov	r2, r3
 80079c0:	f04f 0300 	mov.w	r3, #0
 80079c4:	68f9      	ldr	r1, [r7, #12]
 80079c6:	2002      	movs	r0, #2
 80079c8:	f004 f9d4 	bl	800bd74 <HAL_FLASH_Program>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d102      	bne.n	80079d8 <tuneWriteFloat+0x84>
				success ++;
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	3301      	adds	r3, #1
 80079d6:	617b      	str	r3, [r7, #20]
			}
			Address += 4;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	3304      	adds	r3, #4
 80079dc:	60fb      	str	r3, [r7, #12]
		for(int j=0; j<numFloat[i]; j++){
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	3301      	adds	r3, #1
 80079e2:	60bb      	str	r3, [r7, #8]
 80079e4:	4a0e      	ldr	r2, [pc, #56]	; (8007a20 <tuneWriteFloat+0xcc>)
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079ec:	68ba      	ldr	r2, [r7, #8]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	dbda      	blt.n	80079a8 <tuneWriteFloat+0x54>
	for(int i=0; i<tunePage; i++){
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	3301      	adds	r3, #1
 80079f6:	613b      	str	r3, [r7, #16]
 80079f8:	4b0a      	ldr	r3, [pc, #40]	; (8007a24 <tuneWriteFloat+0xd0>)
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	461a      	mov	r2, r3
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	4293      	cmp	r3, r2
 8007a02:	dbc9      	blt.n	8007998 <tuneWriteFloat+0x44>
		}
	}
	HAL_FLASH_Lock();
 8007a04:	f004 fa2c 	bl	800be60 <HAL_FLASH_Lock>
	return success;
 8007a08:	697b      	ldr	r3, [r7, #20]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3718      	adds	r7, #24
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	200004f0 	.word	0x200004f0
 8007a18:	20000220 	.word	0x20000220
 8007a1c:	200001f8 	.word	0x200001f8
 8007a20:	200001d0 	.word	0x200001d0
 8007a24:	20006e18 	.word	0x20006e18

08007a28 <tuneRead>:

void tuneRead(void){
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
	for(int page=0; page<tunePage; page++){
 8007a2e:	2300      	movs	r3, #0
 8007a30:	60fb      	str	r3, [r7, #12]
 8007a32:	e042      	b.n	8007aba <tuneRead+0x92>
		uint32_t Address = intAddress[page];
 8007a34:	4a27      	ldr	r2, [pc, #156]	; (8007ad4 <tuneRead+0xac>)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a3c:	60bb      	str	r3, [r7, #8]
		for(int i=0; i<numInt[page]; i++){
 8007a3e:	2300      	movs	r3, #0
 8007a40:	607b      	str	r3, [r7, #4]
 8007a42:	e010      	b.n	8007a66 <tuneRead+0x3e>
			memcpy(intList[page][i].ptr, (__IO uint32_t *)Address, 4);
 8007a44:	4a24      	ldr	r2, [pc, #144]	; (8007ad8 <tuneRead+0xb0>)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	011b      	lsls	r3, r3, #4
 8007a50:	4413      	add	r3, r2
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	6812      	ldr	r2, [r2, #0]
 8007a58:	601a      	str	r2, [r3, #0]
			Address += 4;
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	3304      	adds	r3, #4
 8007a5e:	60bb      	str	r3, [r7, #8]
		for(int i=0; i<numInt[page]; i++){
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	3301      	adds	r3, #1
 8007a64:	607b      	str	r3, [r7, #4]
 8007a66:	4a1d      	ldr	r2, [pc, #116]	; (8007adc <tuneRead+0xb4>)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	dbe7      	blt.n	8007a44 <tuneRead+0x1c>
		}
		Address = floatAddress[page];
 8007a74:	4a1a      	ldr	r2, [pc, #104]	; (8007ae0 <tuneRead+0xb8>)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a7c:	60bb      	str	r3, [r7, #8]
		for(int i=0; i<numFloat[page]; i++){
 8007a7e:	2300      	movs	r3, #0
 8007a80:	603b      	str	r3, [r7, #0]
 8007a82:	e010      	b.n	8007aa6 <tuneRead+0x7e>
			memcpy(floatList[page][i].ptr, (__IO uint32_t *)Address, 4);
 8007a84:	4a17      	ldr	r2, [pc, #92]	; (8007ae4 <tuneRead+0xbc>)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	011b      	lsls	r3, r3, #4
 8007a90:	4413      	add	r3, r2
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	6812      	ldr	r2, [r2, #0]
 8007a98:	601a      	str	r2, [r3, #0]
			Address += 4;
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	3304      	adds	r3, #4
 8007a9e:	60bb      	str	r3, [r7, #8]
		for(int i=0; i<numFloat[page]; i++){
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	603b      	str	r3, [r7, #0]
 8007aa6:	4a10      	ldr	r2, [pc, #64]	; (8007ae8 <tuneRead+0xc0>)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aae:	683a      	ldr	r2, [r7, #0]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	dbe7      	blt.n	8007a84 <tuneRead+0x5c>
	for(int page=0; page<tunePage; page++){
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	60fb      	str	r3, [r7, #12]
 8007aba:	4b0c      	ldr	r3, [pc, #48]	; (8007aec <tuneRead+0xc4>)
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	dbb6      	blt.n	8007a34 <tuneRead+0xc>
		}
	}
}
 8007ac6:	bf00      	nop
 8007ac8:	bf00      	nop
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr
 8007ad4:	2000020c 	.word	0x2000020c
 8007ad8:	200001e4 	.word	0x200001e4
 8007adc:	200001bc 	.word	0x200001bc
 8007ae0:	20000220 	.word	0x20000220
 8007ae4:	200001f8 	.word	0x200001f8
 8007ae8:	200001d0 	.word	0x200001d0
 8007aec:	20006e18 	.word	0x20006e18

08007af0 <tunePID>:

void tunePID(UART_HandleTypeDef* huartx, PSxBT_t* ps4, RNS_interface_t* rns){
 8007af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007af4:	b0b0      	sub	sp, #192	; 0xc0
 8007af6:	af0e      	add	r7, sp, #56	; 0x38
 8007af8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007afa:	62b9      	str	r1, [r7, #40]	; 0x28
 8007afc:	627a      	str	r2, [r7, #36]	; 0x24
	static float target_speed = 3.0;

	if(ps4->button == R1){
 8007afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b06:	d11d      	bne.n	8007b44 <tunePID+0x54>
		while(ps4->button == R1)
 8007b08:	e009      	b.n	8007b1e <tunePID+0x2e>
			target_speed += 1.0;
 8007b0a:	4b71      	ldr	r3, [pc, #452]	; (8007cd0 <tunePID+0x1e0>)
 8007b0c:	edd3 7a00 	vldr	s15, [r3]
 8007b10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b18:	4b6d      	ldr	r3, [pc, #436]	; (8007cd0 <tunePID+0x1e0>)
 8007b1a:	edc3 7a00 	vstr	s15, [r3]
		while(ps4->button == R1)
 8007b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b26:	d0f0      	beq.n	8007b0a <tunePID+0x1a>
		if(target_speed > 6.0)
 8007b28:	4b69      	ldr	r3, [pc, #420]	; (8007cd0 <tunePID+0x1e0>)
 8007b2a:	edd3 7a00 	vldr	s15, [r3]
 8007b2e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8007b32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b3a:	dd26      	ble.n	8007b8a <tunePID+0x9a>
			target_speed = 6.0;
 8007b3c:	4b64      	ldr	r3, [pc, #400]	; (8007cd0 <tunePID+0x1e0>)
 8007b3e:	4a65      	ldr	r2, [pc, #404]	; (8007cd4 <tunePID+0x1e4>)
 8007b40:	601a      	str	r2, [r3, #0]
 8007b42:	e022      	b.n	8007b8a <tunePID+0x9a>
	}else if(ps4->button == L1){
 8007b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b4c:	d11d      	bne.n	8007b8a <tunePID+0x9a>
		while(ps4->button == L1)
 8007b4e:	e009      	b.n	8007b64 <tunePID+0x74>
			target_speed -= 1.0;
 8007b50:	4b5f      	ldr	r3, [pc, #380]	; (8007cd0 <tunePID+0x1e0>)
 8007b52:	edd3 7a00 	vldr	s15, [r3]
 8007b56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b5e:	4b5c      	ldr	r3, [pc, #368]	; (8007cd0 <tunePID+0x1e0>)
 8007b60:	edc3 7a00 	vstr	s15, [r3]
		while(ps4->button == L1)
 8007b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b6c:	d0f0      	beq.n	8007b50 <tunePID+0x60>
		if(target_speed < 1.0)
 8007b6e:	4b58      	ldr	r3, [pc, #352]	; (8007cd0 <tunePID+0x1e0>)
 8007b70:	edd3 7a00 	vldr	s15, [r3]
 8007b74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b80:	d503      	bpl.n	8007b8a <tunePID+0x9a>
			target_speed = 1.0;
 8007b82:	4b53      	ldr	r3, [pc, #332]	; (8007cd0 <tunePID+0x1e0>)
 8007b84:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007b88:	601a      	str	r2, [r3, #0]
	}

	if(ps4->button == UP){
 8007b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b8e:	2b10      	cmp	r3, #16
 8007b90:	f040 8094 	bne.w	8007cbc <tunePID+0x1cc>
		uint32_t tick = HAL_GetTick();
 8007b94:	f002 fce6 	bl	800a564 <HAL_GetTick>
 8007b98:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		float a, b, c, d;
		while(ps4->button == UP){
 8007b9c:	e080      	b.n	8007ca0 <tunePID+0x1b0>
			RNSVelocity(target_speed, target_speed, target_speed, target_speed, rns);
 8007b9e:	4b4c      	ldr	r3, [pc, #304]	; (8007cd0 <tunePID+0x1e0>)
 8007ba0:	edd3 7a00 	vldr	s15, [r3]
 8007ba4:	4b4a      	ldr	r3, [pc, #296]	; (8007cd0 <tunePID+0x1e0>)
 8007ba6:	ed93 7a00 	vldr	s14, [r3]
 8007baa:	4b49      	ldr	r3, [pc, #292]	; (8007cd0 <tunePID+0x1e0>)
 8007bac:	edd3 6a00 	vldr	s13, [r3]
 8007bb0:	4b47      	ldr	r3, [pc, #284]	; (8007cd0 <tunePID+0x1e0>)
 8007bb2:	ed93 6a00 	vldr	s12, [r3]
 8007bb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bb8:	eef0 1a46 	vmov.f32	s3, s12
 8007bbc:	eeb0 1a66 	vmov.f32	s2, s13
 8007bc0:	eef0 0a47 	vmov.f32	s1, s14
 8007bc4:	eeb0 0a67 	vmov.f32	s0, s15
 8007bc8:	f7fd fb58 	bl	800527c <RNSVelocity>
			RNSEnquire(RNS_VEL_BOTH, rns);
 8007bcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007bce:	2057      	movs	r0, #87	; 0x57
 8007bd0:	f7fd fe4c 	bl	800586c <RNSEnquire>
			a = rns->enq.enq_buffer[0].data;
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd8:	647b      	str	r3, [r7, #68]	; 0x44
			b = rns->enq.enq_buffer[1].data;
 8007bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bde:	643b      	str	r3, [r7, #64]	; 0x40
			c = rns->enq.enq_buffer[2].data;
 8007be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007be4:	63fb      	str	r3, [r7, #60]	; 0x3c
			d = rns->enq.enq_buffer[3].data;
 8007be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bea:	63bb      	str	r3, [r7, #56]	; 0x38
			sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f\n",
 8007bec:	4b38      	ldr	r3, [pc, #224]	; (8007cd0 <tunePID+0x1e0>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7f8 fca9 	bl	8000548 <__aeabi_f2d>
 8007bf6:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8007bfa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007bfc:	f7f8 fca4 	bl	8000548 <__aeabi_f2d>
 8007c00:	4682      	mov	sl, r0
 8007c02:	468b      	mov	fp, r1
 8007c04:	4b32      	ldr	r3, [pc, #200]	; (8007cd0 <tunePID+0x1e0>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7f8 fc9d 	bl	8000548 <__aeabi_f2d>
 8007c0e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8007c12:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007c14:	f7f8 fc98 	bl	8000548 <__aeabi_f2d>
 8007c18:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8007c1c:	4b2c      	ldr	r3, [pc, #176]	; (8007cd0 <tunePID+0x1e0>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7f8 fc91 	bl	8000548 <__aeabi_f2d>
 8007c26:	e9c7 0100 	strd	r0, r1, [r7]
 8007c2a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007c2c:	f7f8 fc8c 	bl	8000548 <__aeabi_f2d>
 8007c30:	4680      	mov	r8, r0
 8007c32:	4689      	mov	r9, r1
 8007c34:	4b26      	ldr	r3, [pc, #152]	; (8007cd0 <tunePID+0x1e0>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7f8 fc85 	bl	8000548 <__aeabi_f2d>
 8007c3e:	4604      	mov	r4, r0
 8007c40:	460d      	mov	r5, r1
 8007c42:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c44:	f7f8 fc80 	bl	8000548 <__aeabi_f2d>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007c50:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8007c54:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8007c58:	ed97 7b00 	vldr	d7, [r7]
 8007c5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007c60:	ed97 7b02 	vldr	d7, [r7, #8]
 8007c64:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007c68:	ed97 7b04 	vldr	d7, [r7, #16]
 8007c6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007c70:	e9cd ab00 	strd	sl, fp, [sp]
 8007c74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c78:	4917      	ldr	r1, [pc, #92]	; (8007cd8 <tunePID+0x1e8>)
 8007c7a:	4818      	ldr	r0, [pc, #96]	; (8007cdc <tunePID+0x1ec>)
 8007c7c:	f00e faa8 	bl	80161d0 <siprintf>
					target_speed, a, target_speed, b, target_speed, c, target_speed, d);
			if(HAL_GetTick()-tick >= 20){
 8007c80:	f002 fc70 	bl	800a564 <HAL_GetTick>
 8007c84:	4602      	mov	r2, r0
 8007c86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c8a:	1ad3      	subs	r3, r2, r3
 8007c8c:	2b13      	cmp	r3, #19
 8007c8e:	d907      	bls.n	8007ca0 <tunePID+0x1b0>
				tick = HAL_GetTick();
 8007c90:	f002 fc68 	bl	800a564 <HAL_GetTick>
 8007c94:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
				UARTPrintString(huartx, data);
 8007c98:	4910      	ldr	r1, [pc, #64]	; (8007cdc <tunePID+0x1ec>)
 8007c9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c9c:	f7fb f910 	bl	8002ec0 <UARTPrintString>
		while(ps4->button == UP){
 8007ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ca4:	2b10      	cmp	r3, #16
 8007ca6:	f43f af7a 	beq.w	8007b9e <tunePID+0xae>
			}
		}
		RNSStop(rns);
 8007caa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007cac:	f7fd fa62 	bl	8005174 <RNSStop>
		memset(data, 0, 100);
 8007cb0:	2264      	movs	r2, #100	; 0x64
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	4809      	ldr	r0, [pc, #36]	; (8007cdc <tunePID+0x1ec>)
 8007cb6:	f00d fab1 	bl	801521c <memset>
 8007cba:	e211      	b.n	80080e0 <tunePID+0x5f0>
	}else if(ps4->button == LEFT){
 8007cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cc0:	2b80      	cmp	r3, #128	; 0x80
 8007cc2:	f040 80ac 	bne.w	8007e1e <tunePID+0x32e>
		uint32_t tick = HAL_GetTick();
 8007cc6:	f002 fc4d 	bl	800a564 <HAL_GetTick>
 8007cca:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		float a, b, c, d;
		while(ps4->button == LEFT){
 8007cce:	e098      	b.n	8007e02 <tunePID+0x312>
 8007cd0:	20000234 	.word	0x20000234
 8007cd4:	40c00000 	.word	0x40c00000
 8007cd8:	0801a7a4 	.word	0x0801a7a4
 8007cdc:	200065c8 	.word	0x200065c8
			RNSVelocity(-target_speed, target_speed, target_speed, -target_speed, rns);
 8007ce0:	4bae      	ldr	r3, [pc, #696]	; (8007f9c <tunePID+0x4ac>)
 8007ce2:	edd3 7a00 	vldr	s15, [r3]
 8007ce6:	eeb1 7a67 	vneg.f32	s14, s15
 8007cea:	4bac      	ldr	r3, [pc, #688]	; (8007f9c <tunePID+0x4ac>)
 8007cec:	edd3 6a00 	vldr	s13, [r3]
 8007cf0:	4baa      	ldr	r3, [pc, #680]	; (8007f9c <tunePID+0x4ac>)
 8007cf2:	ed93 6a00 	vldr	s12, [r3]
 8007cf6:	4ba9      	ldr	r3, [pc, #676]	; (8007f9c <tunePID+0x4ac>)
 8007cf8:	edd3 7a00 	vldr	s15, [r3]
 8007cfc:	eef1 7a67 	vneg.f32	s15, s15
 8007d00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d02:	eef0 1a67 	vmov.f32	s3, s15
 8007d06:	eeb0 1a46 	vmov.f32	s2, s12
 8007d0a:	eef0 0a66 	vmov.f32	s1, s13
 8007d0e:	eeb0 0a47 	vmov.f32	s0, s14
 8007d12:	f7fd fab3 	bl	800527c <RNSVelocity>
			RNSEnquire(RNS_VEL_BOTH, rns);
 8007d16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d18:	2057      	movs	r0, #87	; 0x57
 8007d1a:	f7fd fda7 	bl	800586c <RNSEnquire>
			a = rns->enq.enq_buffer[0].data;
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d22:	657b      	str	r3, [r7, #84]	; 0x54
			b = rns->enq.enq_buffer[1].data;
 8007d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d28:	653b      	str	r3, [r7, #80]	; 0x50
			c = rns->enq.enq_buffer[2].data;
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
			d = rns->enq.enq_buffer[3].data;
 8007d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d34:	64bb      	str	r3, [r7, #72]	; 0x48
			sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f\n",
 8007d36:	4b99      	ldr	r3, [pc, #612]	; (8007f9c <tunePID+0x4ac>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7f8 fc04 	bl	8000548 <__aeabi_f2d>
 8007d40:	e9c7 0106 	strd	r0, r1, [r7, #24]
					target_speed, -a, target_speed, b, target_speed, c, target_speed, -d);
 8007d44:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8007d48:	eef1 7a67 	vneg.f32	s15, s15
 8007d4c:	ee17 3a90 	vmov	r3, s15
			sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f\n",
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7f8 fbf9 	bl	8000548 <__aeabi_f2d>
 8007d56:	4682      	mov	sl, r0
 8007d58:	468b      	mov	fp, r1
 8007d5a:	4b90      	ldr	r3, [pc, #576]	; (8007f9c <tunePID+0x4ac>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7f8 fbf2 	bl	8000548 <__aeabi_f2d>
 8007d64:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8007d68:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007d6a:	f7f8 fbed 	bl	8000548 <__aeabi_f2d>
 8007d6e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8007d72:	4b8a      	ldr	r3, [pc, #552]	; (8007f9c <tunePID+0x4ac>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7f8 fbe6 	bl	8000548 <__aeabi_f2d>
 8007d7c:	e9c7 0100 	strd	r0, r1, [r7]
 8007d80:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007d82:	f7f8 fbe1 	bl	8000548 <__aeabi_f2d>
 8007d86:	4680      	mov	r8, r0
 8007d88:	4689      	mov	r9, r1
 8007d8a:	4b84      	ldr	r3, [pc, #528]	; (8007f9c <tunePID+0x4ac>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7f8 fbda 	bl	8000548 <__aeabi_f2d>
 8007d94:	4604      	mov	r4, r0
 8007d96:	460d      	mov	r5, r1
					target_speed, -a, target_speed, b, target_speed, c, target_speed, -d);
 8007d98:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8007d9c:	eef1 7a67 	vneg.f32	s15, s15
 8007da0:	ee17 3a90 	vmov	r3, s15
			sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f\n",
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7f8 fbcf 	bl	8000548 <__aeabi_f2d>
 8007daa:	4602      	mov	r2, r0
 8007dac:	460b      	mov	r3, r1
 8007dae:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007db2:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8007db6:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8007dba:	ed97 7b00 	vldr	d7, [r7]
 8007dbe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007dc2:	ed97 7b02 	vldr	d7, [r7, #8]
 8007dc6:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007dca:	ed97 7b04 	vldr	d7, [r7, #16]
 8007dce:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007dd2:	e9cd ab00 	strd	sl, fp, [sp]
 8007dd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007dda:	4971      	ldr	r1, [pc, #452]	; (8007fa0 <tunePID+0x4b0>)
 8007ddc:	4871      	ldr	r0, [pc, #452]	; (8007fa4 <tunePID+0x4b4>)
 8007dde:	f00e f9f7 	bl	80161d0 <siprintf>
			if(HAL_GetTick() - tick >= 20){
 8007de2:	f002 fbbf 	bl	800a564 <HAL_GetTick>
 8007de6:	4602      	mov	r2, r0
 8007de8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	2b13      	cmp	r3, #19
 8007df0:	d907      	bls.n	8007e02 <tunePID+0x312>
				tick = HAL_GetTick();
 8007df2:	f002 fbb7 	bl	800a564 <HAL_GetTick>
 8007df6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
				UARTPrintString(huartx, data);
 8007dfa:	496a      	ldr	r1, [pc, #424]	; (8007fa4 <tunePID+0x4b4>)
 8007dfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007dfe:	f7fb f85f 	bl	8002ec0 <UARTPrintString>
		while(ps4->button == LEFT){
 8007e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e06:	2b80      	cmp	r3, #128	; 0x80
 8007e08:	f43f af6a 	beq.w	8007ce0 <tunePID+0x1f0>
			}
		}
		RNSStop(rns);
 8007e0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e0e:	f7fd f9b1 	bl	8005174 <RNSStop>
		memset(data, 0, 100);
 8007e12:	2264      	movs	r2, #100	; 0x64
 8007e14:	2100      	movs	r1, #0
 8007e16:	4863      	ldr	r0, [pc, #396]	; (8007fa4 <tunePID+0x4b4>)
 8007e18:	f00d fa00 	bl	801521c <memset>
 8007e1c:	e160      	b.n	80080e0 <tunePID+0x5f0>
	}else if(ps4->button == DOWN){
 8007e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e22:	2b40      	cmp	r3, #64	; 0x40
 8007e24:	f040 80b1 	bne.w	8007f8a <tunePID+0x49a>
		uint32_t tick = HAL_GetTick();
 8007e28:	f002 fb9c 	bl	800a564 <HAL_GetTick>
 8007e2c:	67f8      	str	r0, [r7, #124]	; 0x7c
		float a, b, c, d;
		while(ps4->button == DOWN){
 8007e2e:	e09e      	b.n	8007f6e <tunePID+0x47e>
			RNSVelocity(-target_speed, -target_speed, -target_speed, -target_speed, rns);
 8007e30:	4b5a      	ldr	r3, [pc, #360]	; (8007f9c <tunePID+0x4ac>)
 8007e32:	edd3 7a00 	vldr	s15, [r3]
 8007e36:	eeb1 7a67 	vneg.f32	s14, s15
 8007e3a:	4b58      	ldr	r3, [pc, #352]	; (8007f9c <tunePID+0x4ac>)
 8007e3c:	edd3 7a00 	vldr	s15, [r3]
 8007e40:	eef1 6a67 	vneg.f32	s13, s15
 8007e44:	4b55      	ldr	r3, [pc, #340]	; (8007f9c <tunePID+0x4ac>)
 8007e46:	edd3 7a00 	vldr	s15, [r3]
 8007e4a:	eeb1 6a67 	vneg.f32	s12, s15
 8007e4e:	4b53      	ldr	r3, [pc, #332]	; (8007f9c <tunePID+0x4ac>)
 8007e50:	edd3 7a00 	vldr	s15, [r3]
 8007e54:	eef1 7a67 	vneg.f32	s15, s15
 8007e58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e5a:	eef0 1a67 	vmov.f32	s3, s15
 8007e5e:	eeb0 1a46 	vmov.f32	s2, s12
 8007e62:	eef0 0a66 	vmov.f32	s1, s13
 8007e66:	eeb0 0a47 	vmov.f32	s0, s14
 8007e6a:	f7fd fa07 	bl	800527c <RNSVelocity>
			RNSEnquire(RNS_VEL_BOTH, rns);
 8007e6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e70:	2057      	movs	r0, #87	; 0x57
 8007e72:	f7fd fcfb 	bl	800586c <RNSEnquire>
			a = rns->enq.enq_buffer[0].data;
 8007e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7a:	667b      	str	r3, [r7, #100]	; 0x64
			b = rns->enq.enq_buffer[1].data;
 8007e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e80:	663b      	str	r3, [r7, #96]	; 0x60
			c = rns->enq.enq_buffer[2].data;
 8007e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e86:	65fb      	str	r3, [r7, #92]	; 0x5c
			d = rns->enq.enq_buffer[3].data;
 8007e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e8c:	65bb      	str	r3, [r7, #88]	; 0x58
			sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f\n",
 8007e8e:	4b43      	ldr	r3, [pc, #268]	; (8007f9c <tunePID+0x4ac>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7f8 fb58 	bl	8000548 <__aeabi_f2d>
 8007e98:	e9c7 0106 	strd	r0, r1, [r7, #24]
					target_speed, -a, target_speed, -b, target_speed, -c, target_speed, -d);
 8007e9c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8007ea0:	eef1 7a67 	vneg.f32	s15, s15
 8007ea4:	ee17 3a90 	vmov	r3, s15
			sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f\n",
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7f8 fb4d 	bl	8000548 <__aeabi_f2d>
 8007eae:	4682      	mov	sl, r0
 8007eb0:	468b      	mov	fp, r1
 8007eb2:	4b3a      	ldr	r3, [pc, #232]	; (8007f9c <tunePID+0x4ac>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7f8 fb46 	bl	8000548 <__aeabi_f2d>
 8007ebc:	e9c7 0104 	strd	r0, r1, [r7, #16]
					target_speed, -a, target_speed, -b, target_speed, -c, target_speed, -d);
 8007ec0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8007ec4:	eef1 7a67 	vneg.f32	s15, s15
 8007ec8:	ee17 3a90 	vmov	r3, s15
			sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f\n",
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7f8 fb3b 	bl	8000548 <__aeabi_f2d>
 8007ed2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8007ed6:	4b31      	ldr	r3, [pc, #196]	; (8007f9c <tunePID+0x4ac>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7f8 fb34 	bl	8000548 <__aeabi_f2d>
 8007ee0:	e9c7 0100 	strd	r0, r1, [r7]
					target_speed, -a, target_speed, -b, target_speed, -c, target_speed, -d);
 8007ee4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8007ee8:	eef1 7a67 	vneg.f32	s15, s15
 8007eec:	ee17 3a90 	vmov	r3, s15
			sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f\n",
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f7f8 fb29 	bl	8000548 <__aeabi_f2d>
 8007ef6:	4680      	mov	r8, r0
 8007ef8:	4689      	mov	r9, r1
 8007efa:	4b28      	ldr	r3, [pc, #160]	; (8007f9c <tunePID+0x4ac>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7f8 fb22 	bl	8000548 <__aeabi_f2d>
 8007f04:	4604      	mov	r4, r0
 8007f06:	460d      	mov	r5, r1
					target_speed, -a, target_speed, -b, target_speed, -c, target_speed, -d);
 8007f08:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8007f0c:	eef1 7a67 	vneg.f32	s15, s15
 8007f10:	ee17 3a90 	vmov	r3, s15
			sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f\n",
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7f8 fb17 	bl	8000548 <__aeabi_f2d>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007f22:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8007f26:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8007f2a:	ed97 7b00 	vldr	d7, [r7]
 8007f2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007f32:	ed97 7b02 	vldr	d7, [r7, #8]
 8007f36:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007f3a:	ed97 7b04 	vldr	d7, [r7, #16]
 8007f3e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007f42:	e9cd ab00 	strd	sl, fp, [sp]
 8007f46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f4a:	4915      	ldr	r1, [pc, #84]	; (8007fa0 <tunePID+0x4b0>)
 8007f4c:	4815      	ldr	r0, [pc, #84]	; (8007fa4 <tunePID+0x4b4>)
 8007f4e:	f00e f93f 	bl	80161d0 <siprintf>
			if(HAL_GetTick() - tick >= 20){
 8007f52:	f002 fb07 	bl	800a564 <HAL_GetTick>
 8007f56:	4602      	mov	r2, r0
 8007f58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f5a:	1ad3      	subs	r3, r2, r3
 8007f5c:	2b13      	cmp	r3, #19
 8007f5e:	d906      	bls.n	8007f6e <tunePID+0x47e>
				tick = HAL_GetTick();
 8007f60:	f002 fb00 	bl	800a564 <HAL_GetTick>
 8007f64:	67f8      	str	r0, [r7, #124]	; 0x7c
				UARTPrintString(huartx, data);
 8007f66:	490f      	ldr	r1, [pc, #60]	; (8007fa4 <tunePID+0x4b4>)
 8007f68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f6a:	f7fa ffa9 	bl	8002ec0 <UARTPrintString>
		while(ps4->button == DOWN){
 8007f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f72:	2b40      	cmp	r3, #64	; 0x40
 8007f74:	f43f af5c 	beq.w	8007e30 <tunePID+0x340>
			}
		}
		RNSStop(rns);
 8007f78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f7a:	f7fd f8fb 	bl	8005174 <RNSStop>
		memset(data, 0, 100);
 8007f7e:	2264      	movs	r2, #100	; 0x64
 8007f80:	2100      	movs	r1, #0
 8007f82:	4808      	ldr	r0, [pc, #32]	; (8007fa4 <tunePID+0x4b4>)
 8007f84:	f00d f94a 	bl	801521c <memset>
 8007f88:	e0aa      	b.n	80080e0 <tunePID+0x5f0>
	}else if(ps4->button == RIGHT){
 8007f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f8e:	2b20      	cmp	r3, #32
 8007f90:	f040 80a6 	bne.w	80080e0 <tunePID+0x5f0>
		uint32_t tick = HAL_GetTick();
 8007f94:	f002 fae6 	bl	800a564 <HAL_GetTick>
 8007f98:	67b8      	str	r0, [r7, #120]	; 0x78
		float a, b, c, d;
		while(ps4->button == RIGHT){
 8007f9a:	e094      	b.n	80080c6 <tunePID+0x5d6>
 8007f9c:	20000234 	.word	0x20000234
 8007fa0:	0801a7a4 	.word	0x0801a7a4
 8007fa4:	200065c8 	.word	0x200065c8
			RNSVelocity(target_speed, -target_speed, -target_speed, target_speed, rns);
 8007fa8:	4b6a      	ldr	r3, [pc, #424]	; (8008154 <tunePID+0x664>)
 8007faa:	ed93 7a00 	vldr	s14, [r3]
 8007fae:	4b69      	ldr	r3, [pc, #420]	; (8008154 <tunePID+0x664>)
 8007fb0:	edd3 7a00 	vldr	s15, [r3]
 8007fb4:	eef1 6a67 	vneg.f32	s13, s15
 8007fb8:	4b66      	ldr	r3, [pc, #408]	; (8008154 <tunePID+0x664>)
 8007fba:	edd3 7a00 	vldr	s15, [r3]
 8007fbe:	eef1 7a67 	vneg.f32	s15, s15
 8007fc2:	4b64      	ldr	r3, [pc, #400]	; (8008154 <tunePID+0x664>)
 8007fc4:	ed93 6a00 	vldr	s12, [r3]
 8007fc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fca:	eef0 1a46 	vmov.f32	s3, s12
 8007fce:	eeb0 1a67 	vmov.f32	s2, s15
 8007fd2:	eef0 0a66 	vmov.f32	s1, s13
 8007fd6:	eeb0 0a47 	vmov.f32	s0, s14
 8007fda:	f7fd f94f 	bl	800527c <RNSVelocity>
			RNSEnquire(RNS_VEL_BOTH, rns);
 8007fde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fe0:	2057      	movs	r0, #87	; 0x57
 8007fe2:	f7fd fc43 	bl	800586c <RNSEnquire>
			a = rns->enq.enq_buffer[0].data;
 8007fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fea:	677b      	str	r3, [r7, #116]	; 0x74
			b = rns->enq.enq_buffer[1].data;
 8007fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff0:	673b      	str	r3, [r7, #112]	; 0x70
			c = rns->enq.enq_buffer[2].data;
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ff6:	66fb      	str	r3, [r7, #108]	; 0x6c
			d = rns->enq.enq_buffer[3].data;
 8007ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ffc:	66bb      	str	r3, [r7, #104]	; 0x68
			sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f\n",
 8007ffe:	4b55      	ldr	r3, [pc, #340]	; (8008154 <tunePID+0x664>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4618      	mov	r0, r3
 8008004:	f7f8 faa0 	bl	8000548 <__aeabi_f2d>
 8008008:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800800c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800800e:	f7f8 fa9b 	bl	8000548 <__aeabi_f2d>
 8008012:	4682      	mov	sl, r0
 8008014:	468b      	mov	fp, r1
 8008016:	4b4f      	ldr	r3, [pc, #316]	; (8008154 <tunePID+0x664>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4618      	mov	r0, r3
 800801c:	f7f8 fa94 	bl	8000548 <__aeabi_f2d>
 8008020:	e9c7 0104 	strd	r0, r1, [r7, #16]
					target_speed, a, target_speed, -b, target_speed, -c, target_speed, d);
 8008024:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8008028:	eef1 7a67 	vneg.f32	s15, s15
 800802c:	ee17 3a90 	vmov	r3, s15
			sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f\n",
 8008030:	4618      	mov	r0, r3
 8008032:	f7f8 fa89 	bl	8000548 <__aeabi_f2d>
 8008036:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800803a:	4b46      	ldr	r3, [pc, #280]	; (8008154 <tunePID+0x664>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4618      	mov	r0, r3
 8008040:	f7f8 fa82 	bl	8000548 <__aeabi_f2d>
 8008044:	e9c7 0100 	strd	r0, r1, [r7]
					target_speed, a, target_speed, -b, target_speed, -c, target_speed, d);
 8008048:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800804c:	eef1 7a67 	vneg.f32	s15, s15
 8008050:	ee17 3a90 	vmov	r3, s15
			sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f\n",
 8008054:	4618      	mov	r0, r3
 8008056:	f7f8 fa77 	bl	8000548 <__aeabi_f2d>
 800805a:	4680      	mov	r8, r0
 800805c:	4689      	mov	r9, r1
 800805e:	4b3d      	ldr	r3, [pc, #244]	; (8008154 <tunePID+0x664>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4618      	mov	r0, r3
 8008064:	f7f8 fa70 	bl	8000548 <__aeabi_f2d>
 8008068:	4604      	mov	r4, r0
 800806a:	460d      	mov	r5, r1
 800806c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800806e:	f7f8 fa6b 	bl	8000548 <__aeabi_f2d>
 8008072:	4602      	mov	r2, r0
 8008074:	460b      	mov	r3, r1
 8008076:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800807a:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 800807e:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8008082:	ed97 7b00 	vldr	d7, [r7]
 8008086:	ed8d 7b06 	vstr	d7, [sp, #24]
 800808a:	ed97 7b02 	vldr	d7, [r7, #8]
 800808e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008092:	ed97 7b04 	vldr	d7, [r7, #16]
 8008096:	ed8d 7b02 	vstr	d7, [sp, #8]
 800809a:	e9cd ab00 	strd	sl, fp, [sp]
 800809e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080a2:	492d      	ldr	r1, [pc, #180]	; (8008158 <tunePID+0x668>)
 80080a4:	482d      	ldr	r0, [pc, #180]	; (800815c <tunePID+0x66c>)
 80080a6:	f00e f893 	bl	80161d0 <siprintf>
			if(HAL_GetTick() - tick >= 20){
 80080aa:	f002 fa5b 	bl	800a564 <HAL_GetTick>
 80080ae:	4602      	mov	r2, r0
 80080b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	2b13      	cmp	r3, #19
 80080b6:	d906      	bls.n	80080c6 <tunePID+0x5d6>
				tick = HAL_GetTick();
 80080b8:	f002 fa54 	bl	800a564 <HAL_GetTick>
 80080bc:	67b8      	str	r0, [r7, #120]	; 0x78
				UARTPrintString(huartx, data);
 80080be:	4927      	ldr	r1, [pc, #156]	; (800815c <tunePID+0x66c>)
 80080c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080c2:	f7fa fefd 	bl	8002ec0 <UARTPrintString>
		while(ps4->button == RIGHT){
 80080c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080ca:	2b20      	cmp	r3, #32
 80080cc:	f43f af6c 	beq.w	8007fa8 <tunePID+0x4b8>
			}
		}
		RNSStop(rns);
 80080d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080d2:	f7fd f84f 	bl	8005174 <RNSStop>
		memset(data, 0, 100);
 80080d6:	2264      	movs	r2, #100	; 0x64
 80080d8:	2100      	movs	r1, #0
 80080da:	4820      	ldr	r0, [pc, #128]	; (800815c <tunePID+0x66c>)
 80080dc:	f00d f89e 	bl	801521c <memset>
	}

	realMODN(ps4, rns);
 80080e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080e4:	f7fc fa1c 	bl	8004520 <realMODN>
	if(ps4->button == CROSS){
 80080e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080f0:	d10f      	bne.n	8008112 <tunePID+0x622>
		while(ps4->button == CROSS);
 80080f2:	bf00      	nop
 80080f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080fc:	d0fa      	beq.n	80080f4 <tunePID+0x604>
		uint8_t terminatePlot = 0x15;
 80080fe:	2315      	movs	r3, #21
 8008100:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		HAL_UART_Transmit(huartx, &terminatePlot, 1, 1);
 8008104:	f107 0137 	add.w	r1, r7, #55	; 0x37
 8008108:	2301      	movs	r3, #1
 800810a:	2201      	movs	r2, #1
 800810c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800810e:	f008 fb9e 	bl	801084e <HAL_UART_Transmit>
	}

	if(ps4->button == OPTION)
 8008112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800811a:	d116      	bne.n	800814a <tunePID+0x65a>
	{
		while(ps4->button == OPTION);
 800811c:	bf00      	nop
 800811e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008126:	d0fa      	beq.n	800811e <tunePID+0x62e>
		sys.tunePid = 0;
 8008128:	4a0d      	ldr	r2, [pc, #52]	; (8008160 <tunePID+0x670>)
 800812a:	7813      	ldrb	r3, [r2, #0]
 800812c:	f36f 0341 	bfc	r3, #1, #1
 8008130:	7013      	strb	r3, [r2, #0]
		led3 = !led3;
 8008132:	4b0c      	ldr	r3, [pc, #48]	; (8008164 <tunePID+0x674>)
 8008134:	785b      	ldrb	r3, [r3, #1]
 8008136:	b25b      	sxtb	r3, r3
 8008138:	4a0a      	ldr	r2, [pc, #40]	; (8008164 <tunePID+0x674>)
 800813a:	43db      	mvns	r3, r3
 800813c:	b2db      	uxtb	r3, r3
 800813e:	09db      	lsrs	r3, r3, #7
 8008140:	b2d9      	uxtb	r1, r3
 8008142:	7853      	ldrb	r3, [r2, #1]
 8008144:	f361 13c7 	bfi	r3, r1, #7, #1
 8008148:	7053      	strb	r3, [r2, #1]
	}
}
 800814a:	bf00      	nop
 800814c:	3788      	adds	r7, #136	; 0x88
 800814e:	46bd      	mov	sp, r7
 8008150:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008154:	20000234 	.word	0x20000234
 8008158:	0801a7a4 	.word	0x0801a7a4
 800815c:	200065c8 	.word	0x200065c8
 8008160:	20007254 	.word	0x20007254
 8008164:	40020814 	.word	0x40020814

08008168 <bldc_interface_init>:
static void(*rx_mcconf_received_func)(void) = 0;
static void(*rx_appconf_received_func)(void) = 0;
static void(*motor_control_set_func)(uint32_t controller_id, motor_control_mode mode, float value) = 0;
static void(*values_requested_func)(uint32_t controller_id) = 0;

void bldc_interface_init(void(*func)(uint32_t controller_id, unsigned char *data, unsigned int len)) {
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
	send_func = func;
 8008170:	4a04      	ldr	r2, [pc, #16]	; (8008184 <bldc_interface_init+0x1c>)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6013      	str	r3, [r2, #0]
}
 8008176:	bf00      	nop
 8008178:	370c      	adds	r7, #12
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	200007ec 	.word	0x200007ec

08008188 <bldc_interface_process_packet>:
 * The buffer to process.
 *
 * @param len
 * The length of the buffer.
 */
void bldc_interface_process_packet(unsigned char *data, unsigned int len) {
 8008188:	b580      	push	{r7, lr}
 800818a:	b088      	sub	sp, #32
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
	if (!len) {
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	f001 8437 	beq.w	8009a08 <bldc_interface_process_packet+0x1880>
		return;
	}

	if (forward_func) {
 800819a:	4bcd      	ldr	r3, [pc, #820]	; (80084d0 <bldc_interface_process_packet+0x348>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d006      	beq.n	80081b0 <bldc_interface_process_packet+0x28>
		forward_func(data, len);
 80081a2:	4bcb      	ldr	r3, [pc, #812]	; (80084d0 <bldc_interface_process_packet+0x348>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	6839      	ldr	r1, [r7, #0]
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	4798      	blx	r3
		return;
 80081ac:	f001 bc43 	b.w	8009a36 <bldc_interface_process_packet+0x18ae>
	}

	int32_t ind = 0;
 80081b0:	2300      	movs	r3, #0
 80081b2:	60fb      	str	r3, [r7, #12]
	uint32_t mask = 0;
 80081b4:	2300      	movs	r3, #0
 80081b6:	617b      	str	r3, [r7, #20]
	uint32_t hahaha = 0;
 80081b8:	2300      	movs	r3, #0
 80081ba:	61fb      	str	r3, [r7, #28]
	int i = 0;
 80081bc:	2300      	movs	r3, #0
 80081be:	61bb      	str	r3, [r7, #24]
	unsigned char id = data[0];
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	74fb      	strb	r3, [r7, #19]
	data++;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	3301      	adds	r3, #1
 80081ca:	607b      	str	r3, [r7, #4]
	len--;
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	3b01      	subs	r3, #1
 80081d0:	603b      	str	r3, [r7, #0]

	switch (id) {
 80081d2:	7cfb      	ldrb	r3, [r7, #19]
 80081d4:	2b32      	cmp	r3, #50	; 0x32
 80081d6:	f201 8419 	bhi.w	8009a0c <bldc_interface_process_packet+0x1884>
 80081da:	a201      	add	r2, pc, #4	; (adr r2, 80081e0 <bldc_interface_process_packet+0x58>)
 80081dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e0:	080082ad 	.word	0x080082ad
 80081e4:	08009a0d 	.word	0x08009a0d
 80081e8:	08009a0d 	.word	0x08009a0d
 80081ec:	08009a0d 	.word	0x08009a0d
 80081f0:	080082f7 	.word	0x080082f7
 80081f4:	08009a0d 	.word	0x08009a0d
 80081f8:	08009a0d 	.word	0x08009a0d
 80081fc:	08009a0d 	.word	0x08009a0d
 8008200:	08009a0d 	.word	0x08009a0d
 8008204:	08009a0d 	.word	0x08009a0d
 8008208:	08009a0d 	.word	0x08009a0d
 800820c:	08009a0d 	.word	0x08009a0d
 8008210:	08009a0d 	.word	0x08009a0d
 8008214:	080099e9 	.word	0x080099e9
 8008218:	08008971 	.word	0x08008971
 800821c:	08008971 	.word	0x08008971
 8008220:	080099f9 	.word	0x080099f9
 8008224:	0800922d 	.word	0x0800922d
 8008228:	0800922d 	.word	0x0800922d
 800822c:	08009a0d 	.word	0x08009a0d
 8008230:	08009a0d 	.word	0x08009a0d
 8008234:	080088f1 	.word	0x080088f1
 8008238:	08008911 	.word	0x08008911
 800823c:	08009a0d 	.word	0x08009a0d
 8008240:	08009851 	.word	0x08009851
 8008244:	08009a0d 	.word	0x08009a0d
 8008248:	08009a0d 	.word	0x08009a0d
 800824c:	08009a0d 	.word	0x08009a0d
 8008250:	08009a0d 	.word	0x08009a0d
 8008254:	08009a0d 	.word	0x08009a0d
 8008258:	08009a0d 	.word	0x08009a0d
 800825c:	080098f9 	.word	0x080098f9
 8008260:	08009955 	.word	0x08009955
 8008264:	080099b1 	.word	0x080099b1
 8008268:	08009a0d 	.word	0x08009a0d
 800826c:	08009a0d 	.word	0x08009a0d
 8008270:	08009a0d 	.word	0x08009a0d
 8008274:	08009a0d 	.word	0x08009a0d
 8008278:	08009a0d 	.word	0x08009a0d
 800827c:	08009a0d 	.word	0x08009a0d
 8008280:	08009a0d 	.word	0x08009a0d
 8008284:	08009a0d 	.word	0x08009a0d
 8008288:	08009a0d 	.word	0x08009a0d
 800828c:	08009a0d 	.word	0x08009a0d
 8008290:	08009a0d 	.word	0x08009a0d
 8008294:	08009a0d 	.word	0x08009a0d
 8008298:	08009a0d 	.word	0x08009a0d
 800829c:	08009a0d 	.word	0x08009a0d
 80082a0:	08009a0d 	.word	0x08009a0d
 80082a4:	08009a0d 	.word	0x08009a0d
 80082a8:	08008535 	.word	0x08008535
	case COMM_FW_VERSION:
		if (len == 2) {
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	d117      	bne.n	80082e2 <bldc_interface_process_packet+0x15a>
			ind = 0;
 80082b2:	2300      	movs	r3, #0
 80082b4:	60fb      	str	r3, [r7, #12]
			fw_major = data[ind++];
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	1c5a      	adds	r2, r3, #1
 80082ba:	60fa      	str	r2, [r7, #12]
 80082bc:	461a      	mov	r2, r3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4413      	add	r3, r2
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	461a      	mov	r2, r3
 80082c6:	4b83      	ldr	r3, [pc, #524]	; (80084d4 <bldc_interface_process_packet+0x34c>)
 80082c8:	601a      	str	r2, [r3, #0]
			fw_minor = data[ind++];
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	1c5a      	adds	r2, r3, #1
 80082ce:	60fa      	str	r2, [r7, #12]
 80082d0:	461a      	mov	r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4413      	add	r3, r2
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	461a      	mov	r2, r3
 80082da:	4b7f      	ldr	r3, [pc, #508]	; (80084d8 <bldc_interface_process_packet+0x350>)
 80082dc:	601a      	str	r2, [r3, #0]
		} else {
			fw_major = -1;
			fw_minor = -1;
		}
		break;
 80082de:	f001 bbaa 	b.w	8009a36 <bldc_interface_process_packet+0x18ae>
			fw_major = -1;
 80082e2:	4b7c      	ldr	r3, [pc, #496]	; (80084d4 <bldc_interface_process_packet+0x34c>)
 80082e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082e8:	601a      	str	r2, [r3, #0]
			fw_minor = -1;
 80082ea:	4b7b      	ldr	r3, [pc, #492]	; (80084d8 <bldc_interface_process_packet+0x350>)
 80082ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082f0:	601a      	str	r2, [r3, #0]
		break;
 80082f2:	f001 bba0 	b.w	8009a36 <bldc_interface_process_packet+0x18ae>
	case COMM_WRITE_NEW_APP_DATA:
		// TODO
		break;

	case COMM_GET_VALUES:
		ind = 0;
 80082f6:	2300      	movs	r3, #0
 80082f8:	60fb      	str	r3, [r7, #12]
		values.temp_mos = buffer_get_float16(data, 1e1, &ind);
 80082fa:	f107 030c 	add.w	r3, r7, #12
 80082fe:	4619      	mov	r1, r3
 8008300:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f001 fca0 	bl	8009c4a <buffer_get_float16>
 800830a:	eef0 7a40 	vmov.f32	s15, s0
 800830e:	4b73      	ldr	r3, [pc, #460]	; (80084dc <bldc_interface_process_packet+0x354>)
 8008310:	edc3 7a01 	vstr	s15, [r3, #4]
		values.temp_motor = buffer_get_float16(data, 1e1, &ind);
 8008314:	f107 030c 	add.w	r3, r7, #12
 8008318:	4619      	mov	r1, r3
 800831a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f001 fc93 	bl	8009c4a <buffer_get_float16>
 8008324:	eef0 7a40 	vmov.f32	s15, s0
 8008328:	4b6c      	ldr	r3, [pc, #432]	; (80084dc <bldc_interface_process_packet+0x354>)
 800832a:	edc3 7a02 	vstr	s15, [r3, #8]
		values.current_motor = buffer_get_float32(data, 1e2, &ind);
 800832e:	f107 030c 	add.w	r3, r7, #12
 8008332:	4619      	mov	r1, r3
 8008334:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 80084e0 <bldc_interface_process_packet+0x358>
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f001 fca1 	bl	8009c80 <buffer_get_float32>
 800833e:	eef0 7a40 	vmov.f32	s15, s0
 8008342:	4b66      	ldr	r3, [pc, #408]	; (80084dc <bldc_interface_process_packet+0x354>)
 8008344:	edc3 7a03 	vstr	s15, [r3, #12]
		values.current_in = buffer_get_float32(data, 1e2, &ind);
 8008348:	f107 030c 	add.w	r3, r7, #12
 800834c:	4619      	mov	r1, r3
 800834e:	ed9f 0a64 	vldr	s0, [pc, #400]	; 80084e0 <bldc_interface_process_packet+0x358>
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f001 fc94 	bl	8009c80 <buffer_get_float32>
 8008358:	eef0 7a40 	vmov.f32	s15, s0
 800835c:	4b5f      	ldr	r3, [pc, #380]	; (80084dc <bldc_interface_process_packet+0x354>)
 800835e:	edc3 7a04 	vstr	s15, [r3, #16]
		values.id = buffer_get_float32(data, 1e2, &ind);
 8008362:	f107 030c 	add.w	r3, r7, #12
 8008366:	4619      	mov	r1, r3
 8008368:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 80084e0 <bldc_interface_process_packet+0x358>
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f001 fc87 	bl	8009c80 <buffer_get_float32>
 8008372:	eef0 7a40 	vmov.f32	s15, s0
 8008376:	4b59      	ldr	r3, [pc, #356]	; (80084dc <bldc_interface_process_packet+0x354>)
 8008378:	edc3 7a05 	vstr	s15, [r3, #20]
		values.iq = buffer_get_float32(data, 1e2, &ind);
 800837c:	f107 030c 	add.w	r3, r7, #12
 8008380:	4619      	mov	r1, r3
 8008382:	ed9f 0a57 	vldr	s0, [pc, #348]	; 80084e0 <bldc_interface_process_packet+0x358>
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f001 fc7a 	bl	8009c80 <buffer_get_float32>
 800838c:	eef0 7a40 	vmov.f32	s15, s0
 8008390:	4b52      	ldr	r3, [pc, #328]	; (80084dc <bldc_interface_process_packet+0x354>)
 8008392:	edc3 7a06 	vstr	s15, [r3, #24]
		values.duty_now = buffer_get_float16(data, 1e3, &ind);
 8008396:	f107 030c 	add.w	r3, r7, #12
 800839a:	4619      	mov	r1, r3
 800839c:	ed9f 0a51 	vldr	s0, [pc, #324]	; 80084e4 <bldc_interface_process_packet+0x35c>
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f001 fc52 	bl	8009c4a <buffer_get_float16>
 80083a6:	eef0 7a40 	vmov.f32	s15, s0
 80083aa:	4b4c      	ldr	r3, [pc, #304]	; (80084dc <bldc_interface_process_packet+0x354>)
 80083ac:	edc3 7a08 	vstr	s15, [r3, #32]
		values.rpm = buffer_get_float32(data, 1e0, &ind);
 80083b0:	f107 030c 	add.w	r3, r7, #12
 80083b4:	4619      	mov	r1, r3
 80083b6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f001 fc60 	bl	8009c80 <buffer_get_float32>
 80083c0:	eef0 7a40 	vmov.f32	s15, s0
 80083c4:	4b45      	ldr	r3, [pc, #276]	; (80084dc <bldc_interface_process_packet+0x354>)
 80083c6:	edc3 7a07 	vstr	s15, [r3, #28]
		values.v_in = buffer_get_float16(data, 1e1, &ind);
 80083ca:	f107 030c 	add.w	r3, r7, #12
 80083ce:	4619      	mov	r1, r3
 80083d0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f001 fc38 	bl	8009c4a <buffer_get_float16>
 80083da:	eef0 7a40 	vmov.f32	s15, s0
 80083de:	4b3f      	ldr	r3, [pc, #252]	; (80084dc <bldc_interface_process_packet+0x354>)
 80083e0:	edc3 7a00 	vstr	s15, [r3]
		values.amp_hours = buffer_get_float32(data, 1e4, &ind);
 80083e4:	f107 030c 	add.w	r3, r7, #12
 80083e8:	4619      	mov	r1, r3
 80083ea:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 80084e8 <bldc_interface_process_packet+0x360>
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f001 fc46 	bl	8009c80 <buffer_get_float32>
 80083f4:	eef0 7a40 	vmov.f32	s15, s0
 80083f8:	4b38      	ldr	r3, [pc, #224]	; (80084dc <bldc_interface_process_packet+0x354>)
 80083fa:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		values.amp_hours_charged = buffer_get_float32(data, 1e4, &ind);
 80083fe:	f107 030c 	add.w	r3, r7, #12
 8008402:	4619      	mov	r1, r3
 8008404:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80084e8 <bldc_interface_process_packet+0x360>
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f001 fc39 	bl	8009c80 <buffer_get_float32>
 800840e:	eef0 7a40 	vmov.f32	s15, s0
 8008412:	4b32      	ldr	r3, [pc, #200]	; (80084dc <bldc_interface_process_packet+0x354>)
 8008414:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		values.watt_hours = buffer_get_float32(data, 1e4, &ind);
 8008418:	f107 030c 	add.w	r3, r7, #12
 800841c:	4619      	mov	r1, r3
 800841e:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80084e8 <bldc_interface_process_packet+0x360>
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f001 fc2c 	bl	8009c80 <buffer_get_float32>
 8008428:	eef0 7a40 	vmov.f32	s15, s0
 800842c:	4b2b      	ldr	r3, [pc, #172]	; (80084dc <bldc_interface_process_packet+0x354>)
 800842e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		values.watt_hours_charged = buffer_get_float32(data, 1e4, &ind);
 8008432:	f107 030c 	add.w	r3, r7, #12
 8008436:	4619      	mov	r1, r3
 8008438:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 80084e8 <bldc_interface_process_packet+0x360>
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f001 fc1f 	bl	8009c80 <buffer_get_float32>
 8008442:	eef0 7a40 	vmov.f32	s15, s0
 8008446:	4b25      	ldr	r3, [pc, #148]	; (80084dc <bldc_interface_process_packet+0x354>)
 8008448:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		values.tachometer = buffer_get_int32(data, &ind);
 800844c:	f107 030c 	add.w	r3, r7, #12
 8008450:	4619      	mov	r1, r3
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f001 fb99 	bl	8009b8a <buffer_get_int32>
 8008458:	4603      	mov	r3, r0
 800845a:	4a20      	ldr	r2, [pc, #128]	; (80084dc <bldc_interface_process_packet+0x354>)
 800845c:	6353      	str	r3, [r2, #52]	; 0x34
		values.tachometer_abs = buffer_get_int32(data, &ind);
 800845e:	f107 030c 	add.w	r3, r7, #12
 8008462:	4619      	mov	r1, r3
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f001 fb90 	bl	8009b8a <buffer_get_int32>
 800846a:	4603      	mov	r3, r0
 800846c:	4a1b      	ldr	r2, [pc, #108]	; (80084dc <bldc_interface_process_packet+0x354>)
 800846e:	6393      	str	r3, [r2, #56]	; 0x38
		values.fault_code = (mc_fault_code)data[ind++];
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	1c5a      	adds	r2, r3, #1
 8008474:	60fa      	str	r2, [r7, #12]
 8008476:	461a      	mov	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4413      	add	r3, r2
 800847c:	781a      	ldrb	r2, [r3, #0]
 800847e:	4b17      	ldr	r3, [pc, #92]	; (80084dc <bldc_interface_process_packet+0x354>)
 8008480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		if (ind < (int)len) {
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	429a      	cmp	r2, r3
 800848a:	da0d      	bge.n	80084a8 <bldc_interface_process_packet+0x320>
			values.pid_pos = buffer_get_float32(data, 1e6, &ind);
 800848c:	f107 030c 	add.w	r3, r7, #12
 8008490:	4619      	mov	r1, r3
 8008492:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80084ec <bldc_interface_process_packet+0x364>
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f001 fbf2 	bl	8009c80 <buffer_get_float32>
 800849c:	eef0 7a40 	vmov.f32	s15, s0
 80084a0:	4b0e      	ldr	r3, [pc, #56]	; (80084dc <bldc_interface_process_packet+0x354>)
 80084a2:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 80084a6:	e003      	b.n	80084b0 <bldc_interface_process_packet+0x328>
		} else {
			values.pid_pos = 0.0;
 80084a8:	4b0c      	ldr	r3, [pc, #48]	; (80084dc <bldc_interface_process_packet+0x354>)
 80084aa:	f04f 0200 	mov.w	r2, #0
 80084ae:	645a      	str	r2, [r3, #68]	; 0x44
		}

		if (ind < (int)len) {
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	da1b      	bge.n	80084f0 <bldc_interface_process_packet+0x368>
			values.vesc_id = data[ind++];
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	1c5a      	adds	r2, r3, #1
 80084bc:	60fa      	str	r2, [r7, #12]
 80084be:	461a      	mov	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4413      	add	r3, r2
 80084c4:	781a      	ldrb	r2, [r3, #0]
 80084c6:	4b05      	ldr	r3, [pc, #20]	; (80084dc <bldc_interface_process_packet+0x354>)
 80084c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80084cc:	e014      	b.n	80084f8 <bldc_interface_process_packet+0x370>
 80084ce:	bf00      	nop
 80084d0:	200007f0 	.word	0x200007f0
 80084d4:	20000564 	.word	0x20000564
 80084d8:	20000568 	.word	0x20000568
 80084dc:	20000504 	.word	0x20000504
 80084e0:	42c80000 	.word	0x42c80000
 80084e4:	447a0000 	.word	0x447a0000
 80084e8:	461c4000 	.word	0x461c4000
 80084ec:	49742400 	.word	0x49742400
		} else {
			values.vesc_id = 255;
 80084f0:	4b0c      	ldr	r3, [pc, #48]	; (8008524 <bldc_interface_process_packet+0x39c>)
 80084f2:	22ff      	movs	r2, #255	; 0xff
 80084f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		}

		rx_value_buf = values;
 80084f8:	4a0b      	ldr	r2, [pc, #44]	; (8008528 <bldc_interface_process_packet+0x3a0>)
 80084fa:	4b0a      	ldr	r3, [pc, #40]	; (8008524 <bldc_interface_process_packet+0x39c>)
 80084fc:	4610      	mov	r0, r2
 80084fe:	4619      	mov	r1, r3
 8008500:	2360      	movs	r3, #96	; 0x60
 8008502:	461a      	mov	r2, r3
 8008504:	f00c fe7c 	bl	8015200 <memcpy>

		if (rx_value_func) {
 8008508:	4b08      	ldr	r3, [pc, #32]	; (800852c <bldc_interface_process_packet+0x3a4>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d003      	beq.n	8008518 <bldc_interface_process_packet+0x390>
			rx_value_func(&values);
 8008510:	4b06      	ldr	r3, [pc, #24]	; (800852c <bldc_interface_process_packet+0x3a4>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4803      	ldr	r0, [pc, #12]	; (8008524 <bldc_interface_process_packet+0x39c>)
 8008516:	4798      	blx	r3
		}

		rx_value_complete = true;
 8008518:	4b05      	ldr	r3, [pc, #20]	; (8008530 <bldc_interface_process_packet+0x3a8>)
 800851a:	2201      	movs	r2, #1
 800851c:	701a      	strb	r2, [r3, #0]

		break;
 800851e:	f001 ba8a 	b.w	8009a36 <bldc_interface_process_packet+0x18ae>
 8008522:	bf00      	nop
 8008524:	20000504 	.word	0x20000504
 8008528:	20007258 	.word	0x20007258
 800852c:	200007f4 	.word	0x200007f4
 8008530:	20008b80 	.word	0x20008b80

	case COMM_GET_VALUES_SELECTIVE:
		ind = 0;
 8008534:	2300      	movs	r3, #0
 8008536:	60fb      	str	r3, [r7, #12]
		mask = buffer_get_uint32(data, &ind);
 8008538:	f107 030c 	add.w	r3, r7, #12
 800853c:	4619      	mov	r1, r3
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f001 fb53 	bl	8009bea <buffer_get_uint32>
 8008544:	6178      	str	r0, [r7, #20]

		if (mask & ((uint32_t)1 << 0)) {
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	f003 0301 	and.w	r3, r3, #1
 800854c:	2b00      	cmp	r3, #0
 800854e:	d00e      	beq.n	800856e <bldc_interface_process_packet+0x3e6>
			values.temp_mos = buffer_get_float16(data, 1e1, &ind);
 8008550:	f107 030c 	add.w	r3, r7, #12
 8008554:	4619      	mov	r1, r3
 8008556:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f001 fb75 	bl	8009c4a <buffer_get_float16>
 8008560:	eef0 7a40 	vmov.f32	s15, s0
 8008564:	4bc6      	ldr	r3, [pc, #792]	; (8008880 <bldc_interface_process_packet+0x6f8>)
 8008566:	edc3 7a01 	vstr	s15, [r3, #4]
			hahaha = 0;
 800856a:	2300      	movs	r3, #0
 800856c:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 1)) {
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	f003 0302 	and.w	r3, r3, #2
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00e      	beq.n	8008596 <bldc_interface_process_packet+0x40e>
			values.temp_motor = buffer_get_float16(data, 1e1, &ind);
 8008578:	f107 030c 	add.w	r3, r7, #12
 800857c:	4619      	mov	r1, r3
 800857e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f001 fb61 	bl	8009c4a <buffer_get_float16>
 8008588:	eef0 7a40 	vmov.f32	s15, s0
 800858c:	4bbc      	ldr	r3, [pc, #752]	; (8008880 <bldc_interface_process_packet+0x6f8>)
 800858e:	edc3 7a02 	vstr	s15, [r3, #8]
			hahaha = 1;
 8008592:	2301      	movs	r3, #1
 8008594:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 2)) {
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	f003 0304 	and.w	r3, r3, #4
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00e      	beq.n	80085be <bldc_interface_process_packet+0x436>
			values.current_motor = buffer_get_float32(data, 1e2, &ind);
 80085a0:	f107 030c 	add.w	r3, r7, #12
 80085a4:	4619      	mov	r1, r3
 80085a6:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 8008884 <bldc_interface_process_packet+0x6fc>
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f001 fb68 	bl	8009c80 <buffer_get_float32>
 80085b0:	eef0 7a40 	vmov.f32	s15, s0
 80085b4:	4bb2      	ldr	r3, [pc, #712]	; (8008880 <bldc_interface_process_packet+0x6f8>)
 80085b6:	edc3 7a03 	vstr	s15, [r3, #12]
			hahaha = 2;
 80085ba:	2302      	movs	r3, #2
 80085bc:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 3)) {
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	f003 0308 	and.w	r3, r3, #8
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00e      	beq.n	80085e6 <bldc_interface_process_packet+0x45e>
			values.current_in = buffer_get_float32(data, 1e2, &ind);
 80085c8:	f107 030c 	add.w	r3, r7, #12
 80085cc:	4619      	mov	r1, r3
 80085ce:	ed9f 0aad 	vldr	s0, [pc, #692]	; 8008884 <bldc_interface_process_packet+0x6fc>
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f001 fb54 	bl	8009c80 <buffer_get_float32>
 80085d8:	eef0 7a40 	vmov.f32	s15, s0
 80085dc:	4ba8      	ldr	r3, [pc, #672]	; (8008880 <bldc_interface_process_packet+0x6f8>)
 80085de:	edc3 7a04 	vstr	s15, [r3, #16]
			hahaha = 3;
 80085e2:	2303      	movs	r3, #3
 80085e4:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 4)) {
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f003 0310 	and.w	r3, r3, #16
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00e      	beq.n	800860e <bldc_interface_process_packet+0x486>
			values.id = buffer_get_float32(data, 1e2, &ind);
 80085f0:	f107 030c 	add.w	r3, r7, #12
 80085f4:	4619      	mov	r1, r3
 80085f6:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 8008884 <bldc_interface_process_packet+0x6fc>
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f001 fb40 	bl	8009c80 <buffer_get_float32>
 8008600:	eef0 7a40 	vmov.f32	s15, s0
 8008604:	4b9e      	ldr	r3, [pc, #632]	; (8008880 <bldc_interface_process_packet+0x6f8>)
 8008606:	edc3 7a05 	vstr	s15, [r3, #20]
			hahaha = 4;
 800860a:	2304      	movs	r3, #4
 800860c:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 5)) {
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	f003 0320 	and.w	r3, r3, #32
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00e      	beq.n	8008636 <bldc_interface_process_packet+0x4ae>
			values.iq = buffer_get_float32(data, 1e2, &ind);
 8008618:	f107 030c 	add.w	r3, r7, #12
 800861c:	4619      	mov	r1, r3
 800861e:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8008884 <bldc_interface_process_packet+0x6fc>
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f001 fb2c 	bl	8009c80 <buffer_get_float32>
 8008628:	eef0 7a40 	vmov.f32	s15, s0
 800862c:	4b94      	ldr	r3, [pc, #592]	; (8008880 <bldc_interface_process_packet+0x6f8>)
 800862e:	edc3 7a06 	vstr	s15, [r3, #24]
			hahaha = 5;
 8008632:	2305      	movs	r3, #5
 8008634:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 6)) {
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00e      	beq.n	800865e <bldc_interface_process_packet+0x4d6>
			values.duty_now = buffer_get_float16(data, 1e3, &ind);
 8008640:	f107 030c 	add.w	r3, r7, #12
 8008644:	4619      	mov	r1, r3
 8008646:	ed9f 0a92 	vldr	s0, [pc, #584]	; 8008890 <bldc_interface_process_packet+0x708>
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f001 fafd 	bl	8009c4a <buffer_get_float16>
 8008650:	eef0 7a40 	vmov.f32	s15, s0
 8008654:	4b8a      	ldr	r3, [pc, #552]	; (8008880 <bldc_interface_process_packet+0x6f8>)
 8008656:	edc3 7a08 	vstr	s15, [r3, #32]
			hahaha = 6;
 800865a:	2306      	movs	r3, #6
 800865c:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 7)) {
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008664:	2b00      	cmp	r3, #0
 8008666:	d00e      	beq.n	8008686 <bldc_interface_process_packet+0x4fe>
			values.rpm = buffer_get_float32(data, 1e0, &ind); // has to be divided by pole pairs
 8008668:	f107 030c 	add.w	r3, r7, #12
 800866c:	4619      	mov	r1, r3
 800866e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f001 fb04 	bl	8009c80 <buffer_get_float32>
 8008678:	eef0 7a40 	vmov.f32	s15, s0
 800867c:	4b80      	ldr	r3, [pc, #512]	; (8008880 <bldc_interface_process_packet+0x6f8>)
 800867e:	edc3 7a07 	vstr	s15, [r3, #28]
			hahaha = 7;
 8008682:	2307      	movs	r3, #7
 8008684:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 8)) {
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800868c:	2b00      	cmp	r3, #0
 800868e:	d00e      	beq.n	80086ae <bldc_interface_process_packet+0x526>
			values.v_in = buffer_get_float16(data, 1e1, &ind);
 8008690:	f107 030c 	add.w	r3, r7, #12
 8008694:	4619      	mov	r1, r3
 8008696:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f001 fad5 	bl	8009c4a <buffer_get_float16>
 80086a0:	eef0 7a40 	vmov.f32	s15, s0
 80086a4:	4b76      	ldr	r3, [pc, #472]	; (8008880 <bldc_interface_process_packet+0x6f8>)
 80086a6:	edc3 7a00 	vstr	s15, [r3]
			hahaha = 8;
 80086aa:	2308      	movs	r3, #8
 80086ac:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 9)) {
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00e      	beq.n	80086d6 <bldc_interface_process_packet+0x54e>
			values.amp_hours = buffer_get_float32(data, 1e4, &ind);
 80086b8:	f107 030c 	add.w	r3, r7, #12
 80086bc:	4619      	mov	r1, r3
 80086be:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8008888 <bldc_interface_process_packet+0x700>
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f001 fadc 	bl	8009c80 <buffer_get_float32>
 80086c8:	eef0 7a40 	vmov.f32	s15, s0
 80086cc:	4b6c      	ldr	r3, [pc, #432]	; (8008880 <bldc_interface_process_packet+0x6f8>)
 80086ce:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			hahaha = 9;
 80086d2:	2309      	movs	r3, #9
 80086d4:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 10)) {
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00e      	beq.n	80086fe <bldc_interface_process_packet+0x576>
			values.amp_hours_charged = buffer_get_float32(data, 1e4, &ind);
 80086e0:	f107 030c 	add.w	r3, r7, #12
 80086e4:	4619      	mov	r1, r3
 80086e6:	ed9f 0a68 	vldr	s0, [pc, #416]	; 8008888 <bldc_interface_process_packet+0x700>
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f001 fac8 	bl	8009c80 <buffer_get_float32>
 80086f0:	eef0 7a40 	vmov.f32	s15, s0
 80086f4:	4b62      	ldr	r3, [pc, #392]	; (8008880 <bldc_interface_process_packet+0x6f8>)
 80086f6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			hahaha = 10;
 80086fa:	230a      	movs	r3, #10
 80086fc:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 11)) {
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00e      	beq.n	8008726 <bldc_interface_process_packet+0x59e>
			values.watt_hours = buffer_get_float32(data, 1e4, &ind);
 8008708:	f107 030c 	add.w	r3, r7, #12
 800870c:	4619      	mov	r1, r3
 800870e:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8008888 <bldc_interface_process_packet+0x700>
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f001 fab4 	bl	8009c80 <buffer_get_float32>
 8008718:	eef0 7a40 	vmov.f32	s15, s0
 800871c:	4b58      	ldr	r3, [pc, #352]	; (8008880 <bldc_interface_process_packet+0x6f8>)
 800871e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			hahaha = 11;
 8008722:	230b      	movs	r3, #11
 8008724:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 12)) {
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800872c:	2b00      	cmp	r3, #0
 800872e:	d00e      	beq.n	800874e <bldc_interface_process_packet+0x5c6>
			values.watt_hours_charged = buffer_get_float32(data, 1e4, &ind);
 8008730:	f107 030c 	add.w	r3, r7, #12
 8008734:	4619      	mov	r1, r3
 8008736:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8008888 <bldc_interface_process_packet+0x700>
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f001 faa0 	bl	8009c80 <buffer_get_float32>
 8008740:	eef0 7a40 	vmov.f32	s15, s0
 8008744:	4b4e      	ldr	r3, [pc, #312]	; (8008880 <bldc_interface_process_packet+0x6f8>)
 8008746:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			hahaha = 12;
 800874a:	230c      	movs	r3, #12
 800874c:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 13)) {
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00a      	beq.n	800876e <bldc_interface_process_packet+0x5e6>
			values.tachometer = buffer_get_int32(data, &ind);
 8008758:	f107 030c 	add.w	r3, r7, #12
 800875c:	4619      	mov	r1, r3
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f001 fa13 	bl	8009b8a <buffer_get_int32>
 8008764:	4603      	mov	r3, r0
 8008766:	4a46      	ldr	r2, [pc, #280]	; (8008880 <bldc_interface_process_packet+0x6f8>)
 8008768:	6353      	str	r3, [r2, #52]	; 0x34
			hahaha = 13;
 800876a:	230d      	movs	r3, #13
 800876c:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 14)) {
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00a      	beq.n	800878e <bldc_interface_process_packet+0x606>
			values.tachometer_abs = buffer_get_int32(data, &ind);
 8008778:	f107 030c 	add.w	r3, r7, #12
 800877c:	4619      	mov	r1, r3
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f001 fa03 	bl	8009b8a <buffer_get_int32>
 8008784:	4603      	mov	r3, r0
 8008786:	4a3e      	ldr	r2, [pc, #248]	; (8008880 <bldc_interface_process_packet+0x6f8>)
 8008788:	6393      	str	r3, [r2, #56]	; 0x38
			hahaha = 14;
 800878a:	230e      	movs	r3, #14
 800878c:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 15)) {
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00b      	beq.n	80087b0 <bldc_interface_process_packet+0x628>
			values.fault_code = (mc_fault_code)data[ind++];
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	1c5a      	adds	r2, r3, #1
 800879c:	60fa      	str	r2, [r7, #12]
 800879e:	461a      	mov	r2, r3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4413      	add	r3, r2
 80087a4:	781a      	ldrb	r2, [r3, #0]
 80087a6:	4b36      	ldr	r3, [pc, #216]	; (8008880 <bldc_interface_process_packet+0x6f8>)
 80087a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			hahaha = 15;
 80087ac:	230f      	movs	r3, #15
 80087ae:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 16)) {
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00e      	beq.n	80087d8 <bldc_interface_process_packet+0x650>
			values.pid_pos = buffer_get_float32(data, 1e6, &ind);
 80087ba:	f107 030c 	add.w	r3, r7, #12
 80087be:	4619      	mov	r1, r3
 80087c0:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800888c <bldc_interface_process_packet+0x704>
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f001 fa5b 	bl	8009c80 <buffer_get_float32>
 80087ca:	eef0 7a40 	vmov.f32	s15, s0
 80087ce:	4b2c      	ldr	r3, [pc, #176]	; (8008880 <bldc_interface_process_packet+0x6f8>)
 80087d0:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			hahaha = 16;
 80087d4:	2310      	movs	r3, #16
 80087d6:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 17)) {
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00b      	beq.n	80087fa <bldc_interface_process_packet+0x672>
			values.vesc_id = data[ind++];
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	1c5a      	adds	r2, r3, #1
 80087e6:	60fa      	str	r2, [r7, #12]
 80087e8:	461a      	mov	r2, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4413      	add	r3, r2
 80087ee:	781a      	ldrb	r2, [r3, #0]
 80087f0:	4b23      	ldr	r3, [pc, #140]	; (8008880 <bldc_interface_process_packet+0x6f8>)
 80087f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			hahaha = 17;
 80087f6:	2311      	movs	r3, #17
 80087f8:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 18)) {
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008800:	2b00      	cmp	r3, #0
 8008802:	d028      	beq.n	8008856 <bldc_interface_process_packet+0x6ce>
			values.temp_mos1 = buffer_get_float16(data, 1e1, &ind);
 8008804:	f107 030c 	add.w	r3, r7, #12
 8008808:	4619      	mov	r1, r3
 800880a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f001 fa1b 	bl	8009c4a <buffer_get_float16>
 8008814:	eef0 7a40 	vmov.f32	s15, s0
 8008818:	4b19      	ldr	r3, [pc, #100]	; (8008880 <bldc_interface_process_packet+0x6f8>)
 800881a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
			values.temp_mos2 = buffer_get_float16(data, 1e1, &ind);
 800881e:	f107 030c 	add.w	r3, r7, #12
 8008822:	4619      	mov	r1, r3
 8008824:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f001 fa0e 	bl	8009c4a <buffer_get_float16>
 800882e:	eef0 7a40 	vmov.f32	s15, s0
 8008832:	4b13      	ldr	r3, [pc, #76]	; (8008880 <bldc_interface_process_packet+0x6f8>)
 8008834:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			values.temp_mos3 = buffer_get_float16(data, 1e1, &ind);
 8008838:	f107 030c 	add.w	r3, r7, #12
 800883c:	4619      	mov	r1, r3
 800883e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f001 fa01 	bl	8009c4a <buffer_get_float16>
 8008848:	eef0 7a40 	vmov.f32	s15, s0
 800884c:	4b0c      	ldr	r3, [pc, #48]	; (8008880 <bldc_interface_process_packet+0x6f8>)
 800884e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			hahaha = 18;
 8008852:	2312      	movs	r3, #18
 8008854:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 19)) {
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800885c:	2b00      	cmp	r3, #0
 800885e:	d019      	beq.n	8008894 <bldc_interface_process_packet+0x70c>
			values.vd = buffer_get_float32(data, 1e3, &ind);
 8008860:	f107 030c 	add.w	r3, r7, #12
 8008864:	4619      	mov	r1, r3
 8008866:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8008890 <bldc_interface_process_packet+0x708>
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f001 fa08 	bl	8009c80 <buffer_get_float32>
 8008870:	eef0 7a40 	vmov.f32	s15, s0
 8008874:	4b02      	ldr	r3, [pc, #8]	; (8008880 <bldc_interface_process_packet+0x6f8>)
 8008876:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			hahaha = 19;
 800887a:	2313      	movs	r3, #19
 800887c:	61fb      	str	r3, [r7, #28]
 800887e:	e009      	b.n	8008894 <bldc_interface_process_packet+0x70c>
 8008880:	20000504 	.word	0x20000504
 8008884:	42c80000 	.word	0x42c80000
 8008888:	461c4000 	.word	0x461c4000
 800888c:	49742400 	.word	0x49742400
 8008890:	447a0000 	.word	0x447a0000
		}
		if (mask & ((uint32_t)1 << 20)) {
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00e      	beq.n	80088bc <bldc_interface_process_packet+0x734>
			values.vq = buffer_get_float32(data, 1e3, &ind);
 800889e:	f107 030c 	add.w	r3, r7, #12
 80088a2:	4619      	mov	r1, r3
 80088a4:	ed1f 0a06 	vldr	s0, [pc, #-24]	; 8008890 <bldc_interface_process_packet+0x708>
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f001 f9e9 	bl	8009c80 <buffer_get_float32>
 80088ae:	eef0 7a40 	vmov.f32	s15, s0
 80088b2:	4b26      	ldr	r3, [pc, #152]	; (800894c <bldc_interface_process_packet+0x7c4>)
 80088b4:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			hahaha = 20;
 80088b8:	2314      	movs	r3, #20
 80088ba:	61fb      	str	r3, [r7, #28]
		}

		rx_value_buf = values;
 80088bc:	4a24      	ldr	r2, [pc, #144]	; (8008950 <bldc_interface_process_packet+0x7c8>)
 80088be:	4b23      	ldr	r3, [pc, #140]	; (800894c <bldc_interface_process_packet+0x7c4>)
 80088c0:	4610      	mov	r0, r2
 80088c2:	4619      	mov	r1, r3
 80088c4:	2360      	movs	r3, #96	; 0x60
 80088c6:	461a      	mov	r2, r3
 80088c8:	f00c fc9a 	bl	8015200 <memcpy>

		if(rx_value_selective_print){
 80088cc:	4b21      	ldr	r3, [pc, #132]	; (8008954 <bldc_interface_process_packet+0x7cc>)
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d008      	beq.n	80088e6 <bldc_interface_process_packet+0x75e>
			if (rx_value_selective_func) {
 80088d4:	4b20      	ldr	r3, [pc, #128]	; (8008958 <bldc_interface_process_packet+0x7d0>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d004      	beq.n	80088e6 <bldc_interface_process_packet+0x75e>
				rx_value_selective_func(hahaha, &values);
 80088dc:	4b1e      	ldr	r3, [pc, #120]	; (8008958 <bldc_interface_process_packet+0x7d0>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	491a      	ldr	r1, [pc, #104]	; (800894c <bldc_interface_process_packet+0x7c4>)
 80088e2:	69f8      	ldr	r0, [r7, #28]
 80088e4:	4798      	blx	r3
			}
		}

		rx_value_complete = true;
 80088e6:	4b1d      	ldr	r3, [pc, #116]	; (800895c <bldc_interface_process_packet+0x7d4>)
 80088e8:	2201      	movs	r2, #1
 80088ea:	701a      	strb	r2, [r3, #0]
		break;
 80088ec:	f001 b8a3 	b.w	8009a36 <bldc_interface_process_packet+0x18ae>

	case COMM_PRINT:
		if (rx_printf_func) {
 80088f0:	4b1b      	ldr	r3, [pc, #108]	; (8008960 <bldc_interface_process_packet+0x7d8>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f001 808b 	beq.w	8009a10 <bldc_interface_process_packet+0x1888>
			data[len] = '\0';
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	4413      	add	r3, r2
 8008900:	2200      	movs	r2, #0
 8008902:	701a      	strb	r2, [r3, #0]
			rx_printf_func((char*)data);
 8008904:	4b16      	ldr	r3, [pc, #88]	; (8008960 <bldc_interface_process_packet+0x7d8>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	4798      	blx	r3
		}
		break;
 800890c:	f001 b880 	b.w	8009a10 <bldc_interface_process_packet+0x1888>
	case COMM_SAMPLE_PRINT:
		// TODO
		break;

	case COMM_ROTOR_POSITION:
		ind = 0;
 8008910:	2300      	movs	r3, #0
 8008912:	60fb      	str	r3, [r7, #12]
		rotor_pos = buffer_get_float32(data, 100000.0, &ind);
 8008914:	f107 030c 	add.w	r3, r7, #12
 8008918:	4619      	mov	r1, r3
 800891a:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8008964 <bldc_interface_process_packet+0x7dc>
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f001 f9ae 	bl	8009c80 <buffer_get_float32>
 8008924:	eef0 7a40 	vmov.f32	s15, s0
 8008928:	4b0f      	ldr	r3, [pc, #60]	; (8008968 <bldc_interface_process_packet+0x7e0>)
 800892a:	edc3 7a00 	vstr	s15, [r3]

		if (rx_rotor_pos_func) {
 800892e:	4b0f      	ldr	r3, [pc, #60]	; (800896c <bldc_interface_process_packet+0x7e4>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	f001 806e 	beq.w	8009a14 <bldc_interface_process_packet+0x188c>
			rx_rotor_pos_func(rotor_pos);
 8008938:	4b0c      	ldr	r3, [pc, #48]	; (800896c <bldc_interface_process_packet+0x7e4>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a0a      	ldr	r2, [pc, #40]	; (8008968 <bldc_interface_process_packet+0x7e0>)
 800893e:	edd2 7a00 	vldr	s15, [r2]
 8008942:	eeb0 0a67 	vmov.f32	s0, s15
 8008946:	4798      	blx	r3
		}
		break;
 8008948:	f001 b864 	b.w	8009a14 <bldc_interface_process_packet+0x188c>
 800894c:	20000504 	.word	0x20000504
 8008950:	20007258 	.word	0x20007258
 8008954:	20008e40 	.word	0x20008e40
 8008958:	200007f8 	.word	0x200007f8
 800895c:	20008b80 	.word	0x20008b80
 8008960:	200007fc 	.word	0x200007fc
 8008964:	47c35000 	.word	0x47c35000
 8008968:	2000056c 	.word	0x2000056c
 800896c:	20000800 	.word	0x20000800
		// TODO
		break;

	case COMM_GET_MCCONF:
	case COMM_GET_MCCONF_DEFAULT:
		ind = 0;
 8008970:	2300      	movs	r3, #0
 8008972:	60fb      	str	r3, [r7, #12]

		mcconf.signature = buffer_get_uint32(data, &ind);
 8008974:	f107 030c 	add.w	r3, r7, #12
 8008978:	4619      	mov	r1, r3
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f001 f935 	bl	8009bea <buffer_get_uint32>
 8008980:	4603      	mov	r3, r0
 8008982:	4ac5      	ldr	r2, [pc, #788]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008984:	6013      	str	r3, [r2, #0]

		mcconf.pwm_mode = data[ind++];
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	1c5a      	adds	r2, r3, #1
 800898a:	60fa      	str	r2, [r7, #12]
 800898c:	461a      	mov	r2, r3
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4413      	add	r3, r2
 8008992:	781a      	ldrb	r2, [r3, #0]
 8008994:	4bc0      	ldr	r3, [pc, #768]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008996:	711a      	strb	r2, [r3, #4]
		mcconf.comm_mode = data[ind++];
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	1c5a      	adds	r2, r3, #1
 800899c:	60fa      	str	r2, [r7, #12]
 800899e:	461a      	mov	r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4413      	add	r3, r2
 80089a4:	781a      	ldrb	r2, [r3, #0]
 80089a6:	4bbc      	ldr	r3, [pc, #752]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 80089a8:	715a      	strb	r2, [r3, #5]
		mcconf.motor_type = data[ind++];
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	1c5a      	adds	r2, r3, #1
 80089ae:	60fa      	str	r2, [r7, #12]
 80089b0:	461a      	mov	r2, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4413      	add	r3, r2
 80089b6:	781a      	ldrb	r2, [r3, #0]
 80089b8:	4bb7      	ldr	r3, [pc, #732]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 80089ba:	719a      	strb	r2, [r3, #6]
		mcconf.sensor_mode = data[ind++];
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	1c5a      	adds	r2, r3, #1
 80089c0:	60fa      	str	r2, [r7, #12]
 80089c2:	461a      	mov	r2, r3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4413      	add	r3, r2
 80089c8:	781a      	ldrb	r2, [r3, #0]
 80089ca:	4bb3      	ldr	r3, [pc, #716]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 80089cc:	71da      	strb	r2, [r3, #7]

		mcconf.l_current_max = buffer_get_float32_auto(data, &ind);
 80089ce:	f107 030c 	add.w	r3, r7, #12
 80089d2:	4619      	mov	r1, r3
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f001 f96d 	bl	8009cb4 <buffer_get_float32_auto>
 80089da:	eef0 7a40 	vmov.f32	s15, s0
 80089de:	4bae      	ldr	r3, [pc, #696]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 80089e0:	edc3 7a02 	vstr	s15, [r3, #8]
		mcconf.l_current_min = buffer_get_float32_auto(data, &ind);
 80089e4:	f107 030c 	add.w	r3, r7, #12
 80089e8:	4619      	mov	r1, r3
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f001 f962 	bl	8009cb4 <buffer_get_float32_auto>
 80089f0:	eef0 7a40 	vmov.f32	s15, s0
 80089f4:	4ba8      	ldr	r3, [pc, #672]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 80089f6:	edc3 7a03 	vstr	s15, [r3, #12]
		mcconf.l_in_current_max = buffer_get_float32_auto(data, &ind);
 80089fa:	f107 030c 	add.w	r3, r7, #12
 80089fe:	4619      	mov	r1, r3
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f001 f957 	bl	8009cb4 <buffer_get_float32_auto>
 8008a06:	eef0 7a40 	vmov.f32	s15, s0
 8008a0a:	4ba3      	ldr	r3, [pc, #652]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008a0c:	edc3 7a04 	vstr	s15, [r3, #16]
		mcconf.l_in_current_min = buffer_get_float32_auto(data, &ind);
 8008a10:	f107 030c 	add.w	r3, r7, #12
 8008a14:	4619      	mov	r1, r3
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f001 f94c 	bl	8009cb4 <buffer_get_float32_auto>
 8008a1c:	eef0 7a40 	vmov.f32	s15, s0
 8008a20:	4b9d      	ldr	r3, [pc, #628]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008a22:	edc3 7a05 	vstr	s15, [r3, #20]
		mcconf.l_abs_current_max = buffer_get_float32_auto(data, &ind);
 8008a26:	f107 030c 	add.w	r3, r7, #12
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f001 f941 	bl	8009cb4 <buffer_get_float32_auto>
 8008a32:	eef0 7a40 	vmov.f32	s15, s0
 8008a36:	4b98      	ldr	r3, [pc, #608]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008a38:	edc3 7a06 	vstr	s15, [r3, #24]
		mcconf.l_min_erpm = buffer_get_float32_auto(data, &ind);
 8008a3c:	f107 030c 	add.w	r3, r7, #12
 8008a40:	4619      	mov	r1, r3
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f001 f936 	bl	8009cb4 <buffer_get_float32_auto>
 8008a48:	eef0 7a40 	vmov.f32	s15, s0
 8008a4c:	4b92      	ldr	r3, [pc, #584]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008a4e:	edc3 7a07 	vstr	s15, [r3, #28]
		mcconf.l_max_erpm = buffer_get_float32_auto(data, &ind);
 8008a52:	f107 030c 	add.w	r3, r7, #12
 8008a56:	4619      	mov	r1, r3
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f001 f92b 	bl	8009cb4 <buffer_get_float32_auto>
 8008a5e:	eef0 7a40 	vmov.f32	s15, s0
 8008a62:	4b8d      	ldr	r3, [pc, #564]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008a64:	edc3 7a08 	vstr	s15, [r3, #32]
		mcconf.l_erpm_start = buffer_get_float32_auto(data, &ind);
 8008a68:	f107 030c 	add.w	r3, r7, #12
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f001 f920 	bl	8009cb4 <buffer_get_float32_auto>
 8008a74:	eef0 7a40 	vmov.f32	s15, s0
 8008a78:	4b87      	ldr	r3, [pc, #540]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008a7a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		mcconf.l_max_erpm_fbrake = buffer_get_float32_auto(data, &ind);
 8008a7e:	f107 030c 	add.w	r3, r7, #12
 8008a82:	4619      	mov	r1, r3
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f001 f915 	bl	8009cb4 <buffer_get_float32_auto>
 8008a8a:	eef0 7a40 	vmov.f32	s15, s0
 8008a8e:	4b82      	ldr	r3, [pc, #520]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008a90:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		mcconf.l_max_erpm_fbrake_cc = buffer_get_float32_auto(data, &ind);
 8008a94:	f107 030c 	add.w	r3, r7, #12
 8008a98:	4619      	mov	r1, r3
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f001 f90a 	bl	8009cb4 <buffer_get_float32_auto>
 8008aa0:	eef0 7a40 	vmov.f32	s15, s0
 8008aa4:	4b7c      	ldr	r3, [pc, #496]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008aa6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		mcconf.l_min_vin = buffer_get_float32_auto(data, &ind);
 8008aaa:	f107 030c 	add.w	r3, r7, #12
 8008aae:	4619      	mov	r1, r3
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f001 f8ff 	bl	8009cb4 <buffer_get_float32_auto>
 8008ab6:	eef0 7a40 	vmov.f32	s15, s0
 8008aba:	4b77      	ldr	r3, [pc, #476]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008abc:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		mcconf.l_max_vin = buffer_get_float32_auto(data, &ind);
 8008ac0:	f107 030c 	add.w	r3, r7, #12
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f001 f8f4 	bl	8009cb4 <buffer_get_float32_auto>
 8008acc:	eef0 7a40 	vmov.f32	s15, s0
 8008ad0:	4b71      	ldr	r3, [pc, #452]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008ad2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		mcconf.l_battery_cut_start = buffer_get_float32_auto(data, &ind);
 8008ad6:	f107 030c 	add.w	r3, r7, #12
 8008ada:	4619      	mov	r1, r3
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f001 f8e9 	bl	8009cb4 <buffer_get_float32_auto>
 8008ae2:	eef0 7a40 	vmov.f32	s15, s0
 8008ae6:	4b6c      	ldr	r3, [pc, #432]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008ae8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		mcconf.l_battery_cut_end = buffer_get_float32_auto(data, &ind);
 8008aec:	f107 030c 	add.w	r3, r7, #12
 8008af0:	4619      	mov	r1, r3
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f001 f8de 	bl	8009cb4 <buffer_get_float32_auto>
 8008af8:	eef0 7a40 	vmov.f32	s15, s0
 8008afc:	4b66      	ldr	r3, [pc, #408]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008afe:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		mcconf.l_slow_abs_current = data[ind++];
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	1c5a      	adds	r2, r3, #1
 8008b06:	60fa      	str	r2, [r7, #12]
 8008b08:	461a      	mov	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	bf14      	ite	ne
 8008b14:	2301      	movne	r3, #1
 8008b16:	2300      	moveq	r3, #0
 8008b18:	b2da      	uxtb	r2, r3
 8008b1a:	4b5f      	ldr	r3, [pc, #380]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		mcconf.l_temp_fet_start = buffer_get_float32_auto(data, &ind);
 8008b20:	f107 030c 	add.w	r3, r7, #12
 8008b24:	4619      	mov	r1, r3
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f001 f8c4 	bl	8009cb4 <buffer_get_float32_auto>
 8008b2c:	eef0 7a40 	vmov.f32	s15, s0
 8008b30:	4b59      	ldr	r3, [pc, #356]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008b32:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		mcconf.l_temp_fet_end = buffer_get_float32_auto(data, &ind);
 8008b36:	f107 030c 	add.w	r3, r7, #12
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f001 f8b9 	bl	8009cb4 <buffer_get_float32_auto>
 8008b42:	eef0 7a40 	vmov.f32	s15, s0
 8008b46:	4b54      	ldr	r3, [pc, #336]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008b48:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		mcconf.l_temp_motor_start = buffer_get_float32_auto(data, &ind);
 8008b4c:	f107 030c 	add.w	r3, r7, #12
 8008b50:	4619      	mov	r1, r3
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f001 f8ae 	bl	8009cb4 <buffer_get_float32_auto>
 8008b58:	eef0 7a40 	vmov.f32	s15, s0
 8008b5c:	4b4e      	ldr	r3, [pc, #312]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008b5e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		mcconf.l_temp_motor_end = buffer_get_float32_auto(data, &ind);
 8008b62:	f107 030c 	add.w	r3, r7, #12
 8008b66:	4619      	mov	r1, r3
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f001 f8a3 	bl	8009cb4 <buffer_get_float32_auto>
 8008b6e:	eef0 7a40 	vmov.f32	s15, s0
 8008b72:	4b49      	ldr	r3, [pc, #292]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008b74:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		mcconf.l_temp_accel_dec = buffer_get_float32_auto(data, &ind);
 8008b78:	f107 030c 	add.w	r3, r7, #12
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f001 f898 	bl	8009cb4 <buffer_get_float32_auto>
 8008b84:	eef0 7a40 	vmov.f32	s15, s0
 8008b88:	4b43      	ldr	r3, [pc, #268]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008b8a:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		mcconf.l_min_duty = buffer_get_float32_auto(data, &ind);
 8008b8e:	f107 030c 	add.w	r3, r7, #12
 8008b92:	4619      	mov	r1, r3
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f001 f88d 	bl	8009cb4 <buffer_get_float32_auto>
 8008b9a:	eef0 7a40 	vmov.f32	s15, s0
 8008b9e:	4b3e      	ldr	r3, [pc, #248]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008ba0:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		mcconf.l_max_duty = buffer_get_float32_auto(data, &ind);
 8008ba4:	f107 030c 	add.w	r3, r7, #12
 8008ba8:	4619      	mov	r1, r3
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f001 f882 	bl	8009cb4 <buffer_get_float32_auto>
 8008bb0:	eef0 7a40 	vmov.f32	s15, s0
 8008bb4:	4b38      	ldr	r3, [pc, #224]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008bb6:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		mcconf.l_watt_max = buffer_get_float32_auto(data, &ind);
 8008bba:	f107 030c 	add.w	r3, r7, #12
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f001 f877 	bl	8009cb4 <buffer_get_float32_auto>
 8008bc6:	eef0 7a40 	vmov.f32	s15, s0
 8008bca:	4b33      	ldr	r3, [pc, #204]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008bcc:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		mcconf.l_watt_min = buffer_get_float32_auto(data, &ind);
 8008bd0:	f107 030c 	add.w	r3, r7, #12
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f001 f86c 	bl	8009cb4 <buffer_get_float32_auto>
 8008bdc:	eef0 7a40 	vmov.f32	s15, s0
 8008be0:	4b2d      	ldr	r3, [pc, #180]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008be2:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

		mcconf.lo_current_max = mcconf.l_current_max;
 8008be6:	4b2c      	ldr	r3, [pc, #176]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	4a2b      	ldr	r2, [pc, #172]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008bec:	6693      	str	r3, [r2, #104]	; 0x68
		mcconf.lo_current_min = mcconf.l_current_min;
 8008bee:	4b2a      	ldr	r3, [pc, #168]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	4a29      	ldr	r2, [pc, #164]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008bf4:	66d3      	str	r3, [r2, #108]	; 0x6c
		mcconf.lo_in_current_max = mcconf.l_in_current_max;
 8008bf6:	4b28      	ldr	r3, [pc, #160]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	4a27      	ldr	r2, [pc, #156]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008bfc:	6713      	str	r3, [r2, #112]	; 0x70
		mcconf.lo_in_current_min = mcconf.l_in_current_min;
 8008bfe:	4b26      	ldr	r3, [pc, #152]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008c00:	695b      	ldr	r3, [r3, #20]
 8008c02:	4a25      	ldr	r2, [pc, #148]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008c04:	6753      	str	r3, [r2, #116]	; 0x74
		mcconf.lo_current_motor_max_now = mcconf.l_current_max;
 8008c06:	4b24      	ldr	r3, [pc, #144]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	4a23      	ldr	r2, [pc, #140]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008c0c:	6793      	str	r3, [r2, #120]	; 0x78
		mcconf.lo_current_motor_min_now = mcconf.l_current_min;
 8008c0e:	4b22      	ldr	r3, [pc, #136]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	4a21      	ldr	r2, [pc, #132]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008c14:	67d3      	str	r3, [r2, #124]	; 0x7c

		mcconf.sl_min_erpm = buffer_get_float32_auto(data, &ind);
 8008c16:	f107 030c 	add.w	r3, r7, #12
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f001 f849 	bl	8009cb4 <buffer_get_float32_auto>
 8008c22:	eef0 7a40 	vmov.f32	s15, s0
 8008c26:	4b1c      	ldr	r3, [pc, #112]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008c28:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		mcconf.sl_min_erpm_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 8008c2c:	f107 030c 	add.w	r3, r7, #12
 8008c30:	4619      	mov	r1, r3
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f001 f83e 	bl	8009cb4 <buffer_get_float32_auto>
 8008c38:	eef0 7a40 	vmov.f32	s15, s0
 8008c3c:	4b16      	ldr	r3, [pc, #88]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008c3e:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		mcconf.sl_max_fullbreak_current_dir_change = buffer_get_float32_auto(data, &ind);
 8008c42:	f107 030c 	add.w	r3, r7, #12
 8008c46:	4619      	mov	r1, r3
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f001 f833 	bl	8009cb4 <buffer_get_float32_auto>
 8008c4e:	eef0 7a40 	vmov.f32	s15, s0
 8008c52:	4b11      	ldr	r3, [pc, #68]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008c54:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
		mcconf.sl_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 8008c58:	f107 030c 	add.w	r3, r7, #12
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f001 f828 	bl	8009cb4 <buffer_get_float32_auto>
 8008c64:	eef0 7a40 	vmov.f32	s15, s0
 8008c68:	4b0b      	ldr	r3, [pc, #44]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008c6a:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		mcconf.sl_phase_advance_at_br = buffer_get_float32_auto(data, &ind);
 8008c6e:	f107 030c 	add.w	r3, r7, #12
 8008c72:	4619      	mov	r1, r3
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f001 f81d 	bl	8009cb4 <buffer_get_float32_auto>
 8008c7a:	eef0 7a40 	vmov.f32	s15, s0
 8008c7e:	4b06      	ldr	r3, [pc, #24]	; (8008c98 <bldc_interface_process_packet+0xb10>)
 8008c80:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
		mcconf.sl_cycle_int_rpm_br = buffer_get_float32_auto(data, &ind);
 8008c84:	f107 030c 	add.w	r3, r7, #12
 8008c88:	4619      	mov	r1, r3
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f001 f812 	bl	8009cb4 <buffer_get_float32_auto>
 8008c90:	eef0 7a40 	vmov.f32	s15, s0
 8008c94:	e002      	b.n	8008c9c <bldc_interface_process_packet+0xb14>
 8008c96:	bf00      	nop
 8008c98:	20000570 	.word	0x20000570
 8008c9c:	4bc7      	ldr	r3, [pc, #796]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008c9e:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
		mcconf.sl_bemf_coupling_k = buffer_get_float32_auto(data, &ind);
 8008ca2:	f107 030c 	add.w	r3, r7, #12
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f001 f803 	bl	8009cb4 <buffer_get_float32_auto>
 8008cae:	eef0 7a40 	vmov.f32	s15, s0
 8008cb2:	4bc2      	ldr	r3, [pc, #776]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008cb4:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98

		memcpy(mcconf.hall_table, data + ind, 8);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	461a      	mov	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	441a      	add	r2, r3
 8008cc0:	4bbe      	ldr	r3, [pc, #760]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008cc2:	339c      	adds	r3, #156	; 0x9c
 8008cc4:	6810      	ldr	r0, [r2, #0]
 8008cc6:	6851      	ldr	r1, [r2, #4]
 8008cc8:	c303      	stmia	r3!, {r0, r1}
		ind += 8;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	3308      	adds	r3, #8
 8008cce:	60fb      	str	r3, [r7, #12]
		mcconf.hall_sl_erpm = buffer_get_float32_auto(data, &ind);
 8008cd0:	f107 030c 	add.w	r3, r7, #12
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 ffec 	bl	8009cb4 <buffer_get_float32_auto>
 8008cdc:	eef0 7a40 	vmov.f32	s15, s0
 8008ce0:	4bb6      	ldr	r3, [pc, #728]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008ce2:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4

		mcconf.foc_current_kp = buffer_get_float32_auto(data, &ind);
 8008ce6:	f107 030c 	add.w	r3, r7, #12
 8008cea:	4619      	mov	r1, r3
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 ffe1 	bl	8009cb4 <buffer_get_float32_auto>
 8008cf2:	eef0 7a40 	vmov.f32	s15, s0
 8008cf6:	4bb1      	ldr	r3, [pc, #708]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008cf8:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		mcconf.foc_current_ki = buffer_get_float32_auto(data, &ind);
 8008cfc:	f107 030c 	add.w	r3, r7, #12
 8008d00:	4619      	mov	r1, r3
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 ffd6 	bl	8009cb4 <buffer_get_float32_auto>
 8008d08:	eef0 7a40 	vmov.f32	s15, s0
 8008d0c:	4bab      	ldr	r3, [pc, #684]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008d0e:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		mcconf.foc_f_sw = buffer_get_float32_auto(data, &ind);
 8008d12:	f107 030c 	add.w	r3, r7, #12
 8008d16:	4619      	mov	r1, r3
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 ffcb 	bl	8009cb4 <buffer_get_float32_auto>
 8008d1e:	eef0 7a40 	vmov.f32	s15, s0
 8008d22:	4ba6      	ldr	r3, [pc, #664]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008d24:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		mcconf.foc_dt_us = buffer_get_float32_auto(data, &ind);
 8008d28:	f107 030c 	add.w	r3, r7, #12
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 ffc0 	bl	8009cb4 <buffer_get_float32_auto>
 8008d34:	eef0 7a40 	vmov.f32	s15, s0
 8008d38:	4ba0      	ldr	r3, [pc, #640]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008d3a:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
		mcconf.foc_encoder_inverted = data[ind++];
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	1c5a      	adds	r2, r3, #1
 8008d42:	60fa      	str	r2, [r7, #12]
 8008d44:	461a      	mov	r2, r3
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4413      	add	r3, r2
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	bf14      	ite	ne
 8008d50:	2301      	movne	r3, #1
 8008d52:	2300      	moveq	r3, #0
 8008d54:	b2da      	uxtb	r2, r3
 8008d56:	4b99      	ldr	r3, [pc, #612]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008d58:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		mcconf.foc_encoder_offset = buffer_get_float32_auto(data, &ind);
 8008d5c:	f107 030c 	add.w	r3, r7, #12
 8008d60:	4619      	mov	r1, r3
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 ffa6 	bl	8009cb4 <buffer_get_float32_auto>
 8008d68:	eef0 7a40 	vmov.f32	s15, s0
 8008d6c:	4b93      	ldr	r3, [pc, #588]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008d6e:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
		mcconf.foc_encoder_ratio = buffer_get_float32_auto(data, &ind);
 8008d72:	f107 030c 	add.w	r3, r7, #12
 8008d76:	4619      	mov	r1, r3
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 ff9b 	bl	8009cb4 <buffer_get_float32_auto>
 8008d7e:	eef0 7a40 	vmov.f32	s15, s0
 8008d82:	4b8e      	ldr	r3, [pc, #568]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008d84:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
		mcconf.foc_sensor_mode = data[ind++];
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	1c5a      	adds	r2, r3, #1
 8008d8c:	60fa      	str	r2, [r7, #12]
 8008d8e:	461a      	mov	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4413      	add	r3, r2
 8008d94:	781a      	ldrb	r2, [r3, #0]
 8008d96:	4b89      	ldr	r3, [pc, #548]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008d98:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
		mcconf.foc_pll_kp = buffer_get_float32_auto(data, &ind);
 8008d9c:	f107 030c 	add.w	r3, r7, #12
 8008da0:	4619      	mov	r1, r3
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 ff86 	bl	8009cb4 <buffer_get_float32_auto>
 8008da8:	eef0 7a40 	vmov.f32	s15, s0
 8008dac:	4b83      	ldr	r3, [pc, #524]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008dae:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
		mcconf.foc_pll_ki = buffer_get_float32_auto(data, &ind);
 8008db2:	f107 030c 	add.w	r3, r7, #12
 8008db6:	4619      	mov	r1, r3
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 ff7b 	bl	8009cb4 <buffer_get_float32_auto>
 8008dbe:	eef0 7a40 	vmov.f32	s15, s0
 8008dc2:	4b7e      	ldr	r3, [pc, #504]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008dc4:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
		mcconf.foc_motor_l = buffer_get_float32_auto(data, &ind);
 8008dc8:	f107 030c 	add.w	r3, r7, #12
 8008dcc:	4619      	mov	r1, r3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 ff70 	bl	8009cb4 <buffer_get_float32_auto>
 8008dd4:	eef0 7a40 	vmov.f32	s15, s0
 8008dd8:	4b78      	ldr	r3, [pc, #480]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008dda:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4
		mcconf.foc_motor_r = buffer_get_float32_auto(data, &ind);
 8008dde:	f107 030c 	add.w	r3, r7, #12
 8008de2:	4619      	mov	r1, r3
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 ff65 	bl	8009cb4 <buffer_get_float32_auto>
 8008dea:	eef0 7a40 	vmov.f32	s15, s0
 8008dee:	4b73      	ldr	r3, [pc, #460]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008df0:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
		mcconf.foc_motor_flux_linkage = buffer_get_float32_auto(data, &ind);
 8008df4:	f107 030c 	add.w	r3, r7, #12
 8008df8:	4619      	mov	r1, r3
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 ff5a 	bl	8009cb4 <buffer_get_float32_auto>
 8008e00:	eef0 7a40 	vmov.f32	s15, s0
 8008e04:	4b6d      	ldr	r3, [pc, #436]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008e06:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
		mcconf.foc_observer_gain = buffer_get_float32_auto(data, &ind);
 8008e0a:	f107 030c 	add.w	r3, r7, #12
 8008e0e:	4619      	mov	r1, r3
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 ff4f 	bl	8009cb4 <buffer_get_float32_auto>
 8008e16:	eef0 7a40 	vmov.f32	s15, s0
 8008e1a:	4b68      	ldr	r3, [pc, #416]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008e1c:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
		mcconf.foc_observer_gain_slow = buffer_get_float32_auto(data, &ind);
 8008e20:	f107 030c 	add.w	r3, r7, #12
 8008e24:	4619      	mov	r1, r3
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 ff44 	bl	8009cb4 <buffer_get_float32_auto>
 8008e2c:	eef0 7a40 	vmov.f32	s15, s0
 8008e30:	4b62      	ldr	r3, [pc, #392]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008e32:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
		mcconf.foc_duty_dowmramp_kp = buffer_get_float32_auto(data, &ind);
 8008e36:	f107 030c 	add.w	r3, r7, #12
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 ff39 	bl	8009cb4 <buffer_get_float32_auto>
 8008e42:	eef0 7a40 	vmov.f32	s15, s0
 8008e46:	4b5d      	ldr	r3, [pc, #372]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008e48:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
		mcconf.foc_duty_dowmramp_ki = buffer_get_float32_auto(data, &ind);
 8008e4c:	f107 030c 	add.w	r3, r7, #12
 8008e50:	4619      	mov	r1, r3
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 ff2e 	bl	8009cb4 <buffer_get_float32_auto>
 8008e58:	eef0 7a40 	vmov.f32	s15, s0
 8008e5c:	4b57      	ldr	r3, [pc, #348]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008e5e:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4
		mcconf.foc_openloop_rpm = buffer_get_float32_auto(data, &ind);
 8008e62:	f107 030c 	add.w	r3, r7, #12
 8008e66:	4619      	mov	r1, r3
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 ff23 	bl	8009cb4 <buffer_get_float32_auto>
 8008e6e:	eef0 7a40 	vmov.f32	s15, s0
 8008e72:	4b52      	ldr	r3, [pc, #328]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008e74:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
		mcconf.foc_sl_openloop_hyst = buffer_get_float32_auto(data, &ind);
 8008e78:	f107 030c 	add.w	r3, r7, #12
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 ff18 	bl	8009cb4 <buffer_get_float32_auto>
 8008e84:	eef0 7a40 	vmov.f32	s15, s0
 8008e88:	4b4c      	ldr	r3, [pc, #304]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008e8a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
		mcconf.foc_sl_openloop_time = buffer_get_float32_auto(data, &ind);
 8008e8e:	f107 030c 	add.w	r3, r7, #12
 8008e92:	4619      	mov	r1, r3
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 ff0d 	bl	8009cb4 <buffer_get_float32_auto>
 8008e9a:	eef0 7a40 	vmov.f32	s15, s0
 8008e9e:	4b47      	ldr	r3, [pc, #284]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008ea0:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
		mcconf.foc_sl_d_current_duty = buffer_get_float32_auto(data, &ind);
 8008ea4:	f107 030c 	add.w	r3, r7, #12
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 ff02 	bl	8009cb4 <buffer_get_float32_auto>
 8008eb0:	eef0 7a40 	vmov.f32	s15, s0
 8008eb4:	4b41      	ldr	r3, [pc, #260]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008eb6:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
		mcconf.foc_sl_d_current_factor = buffer_get_float32_auto(data, &ind);
 8008eba:	f107 030c 	add.w	r3, r7, #12
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 fef7 	bl	8009cb4 <buffer_get_float32_auto>
 8008ec6:	eef0 7a40 	vmov.f32	s15, s0
 8008eca:	4b3c      	ldr	r3, [pc, #240]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008ecc:	edc3 7a3e 	vstr	s15, [r3, #248]	; 0xf8
		memcpy(mcconf.foc_hall_table, data + ind, 8);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	441a      	add	r2, r3
 8008ed8:	4b38      	ldr	r3, [pc, #224]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008eda:	33fd      	adds	r3, #253	; 0xfd
 8008edc:	6811      	ldr	r1, [r2, #0]
 8008ede:	6852      	ldr	r2, [r2, #4]
 8008ee0:	6019      	str	r1, [r3, #0]
 8008ee2:	605a      	str	r2, [r3, #4]
		ind += 8;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	3308      	adds	r3, #8
 8008ee8:	60fb      	str	r3, [r7, #12]
		mcconf.foc_sl_erpm = buffer_get_float32_auto(data, &ind);
 8008eea:	f107 030c 	add.w	r3, r7, #12
 8008eee:	4619      	mov	r1, r3
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 fedf 	bl	8009cb4 <buffer_get_float32_auto>
 8008ef6:	eef0 7a40 	vmov.f32	s15, s0
 8008efa:	4b30      	ldr	r3, [pc, #192]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008efc:	edc3 7a42 	vstr	s15, [r3, #264]	; 0x108
		mcconf.foc_sample_v0_v7 = data[ind++];
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	1c5a      	adds	r2, r3, #1
 8008f04:	60fa      	str	r2, [r7, #12]
 8008f06:	461a      	mov	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	bf14      	ite	ne
 8008f12:	2301      	movne	r3, #1
 8008f14:	2300      	moveq	r3, #0
 8008f16:	b2da      	uxtb	r2, r3
 8008f18:	4b28      	ldr	r3, [pc, #160]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008f1a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
		mcconf.foc_sample_high_current = data[ind++];
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	1c5a      	adds	r2, r3, #1
 8008f22:	60fa      	str	r2, [r7, #12]
 8008f24:	461a      	mov	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4413      	add	r3, r2
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	bf14      	ite	ne
 8008f30:	2301      	movne	r3, #1
 8008f32:	2300      	moveq	r3, #0
 8008f34:	b2da      	uxtb	r2, r3
 8008f36:	4b21      	ldr	r3, [pc, #132]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008f38:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
		mcconf.foc_sat_comp = buffer_get_float32_auto(data, &ind);
 8008f3c:	f107 030c 	add.w	r3, r7, #12
 8008f40:	4619      	mov	r1, r3
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 feb6 	bl	8009cb4 <buffer_get_float32_auto>
 8008f48:	eef0 7a40 	vmov.f32	s15, s0
 8008f4c:	4b1b      	ldr	r3, [pc, #108]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008f4e:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110
		mcconf.foc_temp_comp = data[ind++];
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	1c5a      	adds	r2, r3, #1
 8008f56:	60fa      	str	r2, [r7, #12]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	bf14      	ite	ne
 8008f64:	2301      	movne	r3, #1
 8008f66:	2300      	moveq	r3, #0
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	4b14      	ldr	r3, [pc, #80]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008f6c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
		mcconf.foc_temp_comp_base_temp = buffer_get_float32_auto(data, &ind);
 8008f70:	f107 030c 	add.w	r3, r7, #12
 8008f74:	4619      	mov	r1, r3
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 fe9c 	bl	8009cb4 <buffer_get_float32_auto>
 8008f7c:	eef0 7a40 	vmov.f32	s15, s0
 8008f80:	4b0e      	ldr	r3, [pc, #56]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008f82:	edc3 7a46 	vstr	s15, [r3, #280]	; 0x118
		mcconf.foc_current_filter_const = buffer_get_float32_auto(data, &ind);
 8008f86:	f107 030c 	add.w	r3, r7, #12
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 fe91 	bl	8009cb4 <buffer_get_float32_auto>
 8008f92:	eef0 7a40 	vmov.f32	s15, s0
 8008f96:	4b09      	ldr	r3, [pc, #36]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008f98:	edc3 7a47 	vstr	s15, [r3, #284]	; 0x11c

		mcconf.s_pid_kp = buffer_get_float32_auto(data, &ind);
 8008f9c:	f107 030c 	add.w	r3, r7, #12
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 fe86 	bl	8009cb4 <buffer_get_float32_auto>
 8008fa8:	eef0 7a40 	vmov.f32	s15, s0
 8008fac:	4b03      	ldr	r3, [pc, #12]	; (8008fbc <bldc_interface_process_packet+0xe34>)
 8008fae:	edc3 7a48 	vstr	s15, [r3, #288]	; 0x120
		mcconf.s_pid_ki = buffer_get_float32_auto(data, &ind);
 8008fb2:	f107 030c 	add.w	r3, r7, #12
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	e001      	b.n	8008fc0 <bldc_interface_process_packet+0xe38>
 8008fbc:	20000570 	.word	0x20000570
 8008fc0:	f000 fe78 	bl	8009cb4 <buffer_get_float32_auto>
 8008fc4:	eef0 7a40 	vmov.f32	s15, s0
 8008fc8:	4b96      	ldr	r3, [pc, #600]	; (8009224 <bldc_interface_process_packet+0x109c>)
 8008fca:	edc3 7a49 	vstr	s15, [r3, #292]	; 0x124
		mcconf.s_pid_kd = buffer_get_float32_auto(data, &ind);
 8008fce:	f107 030c 	add.w	r3, r7, #12
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 fe6d 	bl	8009cb4 <buffer_get_float32_auto>
 8008fda:	eef0 7a40 	vmov.f32	s15, s0
 8008fde:	4b91      	ldr	r3, [pc, #580]	; (8009224 <bldc_interface_process_packet+0x109c>)
 8008fe0:	edc3 7a4a 	vstr	s15, [r3, #296]	; 0x128
		mcconf.s_pid_kd_filter = buffer_get_float32_auto(data, &ind);
 8008fe4:	f107 030c 	add.w	r3, r7, #12
 8008fe8:	4619      	mov	r1, r3
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 fe62 	bl	8009cb4 <buffer_get_float32_auto>
 8008ff0:	eef0 7a40 	vmov.f32	s15, s0
 8008ff4:	4b8b      	ldr	r3, [pc, #556]	; (8009224 <bldc_interface_process_packet+0x109c>)
 8008ff6:	edc3 7a4b 	vstr	s15, [r3, #300]	; 0x12c
		mcconf.s_pid_min_erpm = buffer_get_float32_auto(data, &ind);
 8008ffa:	f107 030c 	add.w	r3, r7, #12
 8008ffe:	4619      	mov	r1, r3
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 fe57 	bl	8009cb4 <buffer_get_float32_auto>
 8009006:	eef0 7a40 	vmov.f32	s15, s0
 800900a:	4b86      	ldr	r3, [pc, #536]	; (8009224 <bldc_interface_process_packet+0x109c>)
 800900c:	edc3 7a4c 	vstr	s15, [r3, #304]	; 0x130
		mcconf.s_pid_allow_braking = data[ind++];
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	1c5a      	adds	r2, r3, #1
 8009014:	60fa      	str	r2, [r7, #12]
 8009016:	461a      	mov	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4413      	add	r3, r2
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	bf14      	ite	ne
 8009022:	2301      	movne	r3, #1
 8009024:	2300      	moveq	r3, #0
 8009026:	b2da      	uxtb	r2, r3
 8009028:	4b7e      	ldr	r3, [pc, #504]	; (8009224 <bldc_interface_process_packet+0x109c>)
 800902a:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134

		mcconf.p_pid_kp = buffer_get_float32_auto(data, &ind);
 800902e:	f107 030c 	add.w	r3, r7, #12
 8009032:	4619      	mov	r1, r3
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 fe3d 	bl	8009cb4 <buffer_get_float32_auto>
 800903a:	eef0 7a40 	vmov.f32	s15, s0
 800903e:	4b79      	ldr	r3, [pc, #484]	; (8009224 <bldc_interface_process_packet+0x109c>)
 8009040:	edc3 7a4e 	vstr	s15, [r3, #312]	; 0x138
		mcconf.p_pid_ki = buffer_get_float32_auto(data, &ind);
 8009044:	f107 030c 	add.w	r3, r7, #12
 8009048:	4619      	mov	r1, r3
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fe32 	bl	8009cb4 <buffer_get_float32_auto>
 8009050:	eef0 7a40 	vmov.f32	s15, s0
 8009054:	4b73      	ldr	r3, [pc, #460]	; (8009224 <bldc_interface_process_packet+0x109c>)
 8009056:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
		mcconf.p_pid_kd = buffer_get_float32_auto(data, &ind);
 800905a:	f107 030c 	add.w	r3, r7, #12
 800905e:	4619      	mov	r1, r3
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 fe27 	bl	8009cb4 <buffer_get_float32_auto>
 8009066:	eef0 7a40 	vmov.f32	s15, s0
 800906a:	4b6e      	ldr	r3, [pc, #440]	; (8009224 <bldc_interface_process_packet+0x109c>)
 800906c:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140
		mcconf.p_pid_kd_filter = buffer_get_float32_auto(data, &ind);
 8009070:	f107 030c 	add.w	r3, r7, #12
 8009074:	4619      	mov	r1, r3
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fe1c 	bl	8009cb4 <buffer_get_float32_auto>
 800907c:	eef0 7a40 	vmov.f32	s15, s0
 8009080:	4b68      	ldr	r3, [pc, #416]	; (8009224 <bldc_interface_process_packet+0x109c>)
 8009082:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144
		mcconf.p_pid_ang_div = buffer_get_float32_auto(data, &ind);
 8009086:	f107 030c 	add.w	r3, r7, #12
 800908a:	4619      	mov	r1, r3
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fe11 	bl	8009cb4 <buffer_get_float32_auto>
 8009092:	eef0 7a40 	vmov.f32	s15, s0
 8009096:	4b63      	ldr	r3, [pc, #396]	; (8009224 <bldc_interface_process_packet+0x109c>)
 8009098:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148

		mcconf.cc_startup_boost_duty = buffer_get_float32_auto(data, &ind);
 800909c:	f107 030c 	add.w	r3, r7, #12
 80090a0:	4619      	mov	r1, r3
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fe06 	bl	8009cb4 <buffer_get_float32_auto>
 80090a8:	eef0 7a40 	vmov.f32	s15, s0
 80090ac:	4b5d      	ldr	r3, [pc, #372]	; (8009224 <bldc_interface_process_packet+0x109c>)
 80090ae:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
		mcconf.cc_min_current = buffer_get_float32_auto(data, &ind);
 80090b2:	f107 030c 	add.w	r3, r7, #12
 80090b6:	4619      	mov	r1, r3
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 fdfb 	bl	8009cb4 <buffer_get_float32_auto>
 80090be:	eef0 7a40 	vmov.f32	s15, s0
 80090c2:	4b58      	ldr	r3, [pc, #352]	; (8009224 <bldc_interface_process_packet+0x109c>)
 80090c4:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150
		mcconf.cc_gain = buffer_get_float32_auto(data, &ind);
 80090c8:	f107 030c 	add.w	r3, r7, #12
 80090cc:	4619      	mov	r1, r3
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fdf0 	bl	8009cb4 <buffer_get_float32_auto>
 80090d4:	eef0 7a40 	vmov.f32	s15, s0
 80090d8:	4b52      	ldr	r3, [pc, #328]	; (8009224 <bldc_interface_process_packet+0x109c>)
 80090da:	edc3 7a55 	vstr	s15, [r3, #340]	; 0x154
		mcconf.cc_ramp_step_max = buffer_get_float32_auto(data, &ind);
 80090de:	f107 030c 	add.w	r3, r7, #12
 80090e2:	4619      	mov	r1, r3
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 fde5 	bl	8009cb4 <buffer_get_float32_auto>
 80090ea:	eef0 7a40 	vmov.f32	s15, s0
 80090ee:	4b4d      	ldr	r3, [pc, #308]	; (8009224 <bldc_interface_process_packet+0x109c>)
 80090f0:	edc3 7a56 	vstr	s15, [r3, #344]	; 0x158

		mcconf.m_fault_stop_time_ms = buffer_get_int32(data, &ind);
 80090f4:	f107 030c 	add.w	r3, r7, #12
 80090f8:	4619      	mov	r1, r3
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 fd45 	bl	8009b8a <buffer_get_int32>
 8009100:	4603      	mov	r3, r0
 8009102:	4a48      	ldr	r2, [pc, #288]	; (8009224 <bldc_interface_process_packet+0x109c>)
 8009104:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
		mcconf.m_duty_ramp_step = buffer_get_float32_auto(data, &ind);
 8009108:	f107 030c 	add.w	r3, r7, #12
 800910c:	4619      	mov	r1, r3
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 fdd0 	bl	8009cb4 <buffer_get_float32_auto>
 8009114:	eef0 7a40 	vmov.f32	s15, s0
 8009118:	4b42      	ldr	r3, [pc, #264]	; (8009224 <bldc_interface_process_packet+0x109c>)
 800911a:	edc3 7a58 	vstr	s15, [r3, #352]	; 0x160
		mcconf.m_current_backoff_gain = buffer_get_float32_auto(data, &ind);
 800911e:	f107 030c 	add.w	r3, r7, #12
 8009122:	4619      	mov	r1, r3
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 fdc5 	bl	8009cb4 <buffer_get_float32_auto>
 800912a:	eef0 7a40 	vmov.f32	s15, s0
 800912e:	4b3d      	ldr	r3, [pc, #244]	; (8009224 <bldc_interface_process_packet+0x109c>)
 8009130:	edc3 7a59 	vstr	s15, [r3, #356]	; 0x164
		mcconf.m_encoder_counts = buffer_get_uint32(data, &ind);
 8009134:	f107 030c 	add.w	r3, r7, #12
 8009138:	4619      	mov	r1, r3
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 fd55 	bl	8009bea <buffer_get_uint32>
 8009140:	4603      	mov	r3, r0
 8009142:	4a38      	ldr	r2, [pc, #224]	; (8009224 <bldc_interface_process_packet+0x109c>)
 8009144:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
		mcconf.m_sensor_port_mode = data[ind++];
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	1c5a      	adds	r2, r3, #1
 800914c:	60fa      	str	r2, [r7, #12]
 800914e:	461a      	mov	r2, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	4413      	add	r3, r2
 8009154:	781a      	ldrb	r2, [r3, #0]
 8009156:	4b33      	ldr	r3, [pc, #204]	; (8009224 <bldc_interface_process_packet+0x109c>)
 8009158:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
		mcconf.m_invert_direction = data[ind++];
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	1c5a      	adds	r2, r3, #1
 8009160:	60fa      	str	r2, [r7, #12]
 8009162:	461a      	mov	r2, r3
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4413      	add	r3, r2
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	bf14      	ite	ne
 800916e:	2301      	movne	r3, #1
 8009170:	2300      	moveq	r3, #0
 8009172:	b2da      	uxtb	r2, r3
 8009174:	4b2b      	ldr	r3, [pc, #172]	; (8009224 <bldc_interface_process_packet+0x109c>)
 8009176:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
		mcconf.m_drv8301_oc_mode = data[ind++];
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	1c5a      	adds	r2, r3, #1
 800917e:	60fa      	str	r2, [r7, #12]
 8009180:	461a      	mov	r2, r3
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4413      	add	r3, r2
 8009186:	781a      	ldrb	r2, [r3, #0]
 8009188:	4b26      	ldr	r3, [pc, #152]	; (8009224 <bldc_interface_process_packet+0x109c>)
 800918a:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
		mcconf.m_drv8301_oc_adj = data[ind++];
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	1c5a      	adds	r2, r3, #1
 8009192:	60fa      	str	r2, [r7, #12]
 8009194:	461a      	mov	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4413      	add	r3, r2
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	461a      	mov	r2, r3
 800919e:	4b21      	ldr	r3, [pc, #132]	; (8009224 <bldc_interface_process_packet+0x109c>)
 80091a0:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
		mcconf.m_bldc_f_sw_min = buffer_get_float32_auto(data, &ind);
 80091a4:	f107 030c 	add.w	r3, r7, #12
 80091a8:	4619      	mov	r1, r3
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fd82 	bl	8009cb4 <buffer_get_float32_auto>
 80091b0:	eef0 7a40 	vmov.f32	s15, s0
 80091b4:	4b1b      	ldr	r3, [pc, #108]	; (8009224 <bldc_interface_process_packet+0x109c>)
 80091b6:	edc3 7a5d 	vstr	s15, [r3, #372]	; 0x174
		mcconf.m_bldc_f_sw_max = buffer_get_float32_auto(data, &ind);
 80091ba:	f107 030c 	add.w	r3, r7, #12
 80091be:	4619      	mov	r1, r3
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 fd77 	bl	8009cb4 <buffer_get_float32_auto>
 80091c6:	eef0 7a40 	vmov.f32	s15, s0
 80091ca:	4b16      	ldr	r3, [pc, #88]	; (8009224 <bldc_interface_process_packet+0x109c>)
 80091cc:	edc3 7a5e 	vstr	s15, [r3, #376]	; 0x178
		mcconf.m_dc_f_sw = buffer_get_float32_auto(data, &ind);
 80091d0:	f107 030c 	add.w	r3, r7, #12
 80091d4:	4619      	mov	r1, r3
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fd6c 	bl	8009cb4 <buffer_get_float32_auto>
 80091dc:	eef0 7a40 	vmov.f32	s15, s0
 80091e0:	4b10      	ldr	r3, [pc, #64]	; (8009224 <bldc_interface_process_packet+0x109c>)
 80091e2:	edc3 7a5f 	vstr	s15, [r3, #380]	; 0x17c
		mcconf.m_ntc_motor_beta = buffer_get_float32_auto(data, &ind);
 80091e6:	f107 030c 	add.w	r3, r7, #12
 80091ea:	4619      	mov	r1, r3
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 fd61 	bl	8009cb4 <buffer_get_float32_auto>
 80091f2:	eef0 7a40 	vmov.f32	s15, s0
 80091f6:	4b0b      	ldr	r3, [pc, #44]	; (8009224 <bldc_interface_process_packet+0x109c>)
 80091f8:	edc3 7a60 	vstr	s15, [r3, #384]	; 0x180
		mcconf.m_out_aux_mode = data[ind++];
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	1c5a      	adds	r2, r3, #1
 8009200:	60fa      	str	r2, [r7, #12]
 8009202:	461a      	mov	r2, r3
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4413      	add	r3, r2
 8009208:	781a      	ldrb	r2, [r3, #0]
 800920a:	4b06      	ldr	r3, [pc, #24]	; (8009224 <bldc_interface_process_packet+0x109c>)
 800920c:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184

		if (rx_mcconf_func) {
 8009210:	4b05      	ldr	r3, [pc, #20]	; (8009228 <bldc_interface_process_packet+0x10a0>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	f000 83ff 	beq.w	8009a18 <bldc_interface_process_packet+0x1890>
			rx_mcconf_func(&mcconf);
 800921a:	4b03      	ldr	r3, [pc, #12]	; (8009228 <bldc_interface_process_packet+0x10a0>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4801      	ldr	r0, [pc, #4]	; (8009224 <bldc_interface_process_packet+0x109c>)
 8009220:	4798      	blx	r3
		}
		break;
 8009222:	e3f9      	b.n	8009a18 <bldc_interface_process_packet+0x1890>
 8009224:	20000570 	.word	0x20000570
 8009228:	20000804 	.word	0x20000804

	case COMM_GET_APPCONF:
	case COMM_GET_APPCONF_DEFAULT:
		ind = 0;
 800922c:	2300      	movs	r3, #0
 800922e:	60fb      	str	r3, [r7, #12]
		appconf.signature = buffer_get_uint32(data, &ind);
 8009230:	f107 030c 	add.w	r3, r7, #12
 8009234:	4619      	mov	r1, r3
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 fcd7 	bl	8009bea <buffer_get_uint32>
 800923c:	4603      	mov	r3, r0
 800923e:	4aba      	ldr	r2, [pc, #744]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 8009240:	6013      	str	r3, [r2, #0]
		appconf.controller_id = data[ind++];
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	1c5a      	adds	r2, r3, #1
 8009246:	60fa      	str	r2, [r7, #12]
 8009248:	461a      	mov	r2, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4413      	add	r3, r2
 800924e:	781a      	ldrb	r2, [r3, #0]
 8009250:	4bb5      	ldr	r3, [pc, #724]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 8009252:	711a      	strb	r2, [r3, #4]
		appconf.timeout_msec = buffer_get_uint32(data, &ind);
 8009254:	f107 030c 	add.w	r3, r7, #12
 8009258:	4619      	mov	r1, r3
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fcc5 	bl	8009bea <buffer_get_uint32>
 8009260:	4603      	mov	r3, r0
 8009262:	4ab1      	ldr	r2, [pc, #708]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 8009264:	6093      	str	r3, [r2, #8]
		appconf.timeout_brake_current = buffer_get_float32_auto(data, &ind);
 8009266:	f107 030c 	add.w	r3, r7, #12
 800926a:	4619      	mov	r1, r3
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 fd21 	bl	8009cb4 <buffer_get_float32_auto>
 8009272:	eef0 7a40 	vmov.f32	s15, s0
 8009276:	4bac      	ldr	r3, [pc, #688]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 8009278:	edc3 7a03 	vstr	s15, [r3, #12]
		appconf.send_can_status = data[ind++];
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	1c5a      	adds	r2, r3, #1
 8009280:	60fa      	str	r2, [r7, #12]
 8009282:	461a      	mov	r2, r3
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4413      	add	r3, r2
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	bf14      	ite	ne
 800928e:	2301      	movne	r3, #1
 8009290:	2300      	moveq	r3, #0
 8009292:	b2da      	uxtb	r2, r3
 8009294:	4ba4      	ldr	r3, [pc, #656]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 8009296:	741a      	strb	r2, [r3, #16]
		appconf.send_can_status_rate_hz = buffer_get_uint16(data, &ind);
 8009298:	f107 030c 	add.w	r3, r7, #12
 800929c:	4619      	mov	r1, r3
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 fc50 	bl	8009b44 <buffer_get_uint16>
 80092a4:	4603      	mov	r3, r0
 80092a6:	461a      	mov	r2, r3
 80092a8:	4b9f      	ldr	r3, [pc, #636]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 80092aa:	615a      	str	r2, [r3, #20]
		appconf.can_baud_rate = data[ind++];
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	1c5a      	adds	r2, r3, #1
 80092b0:	60fa      	str	r2, [r7, #12]
 80092b2:	461a      	mov	r2, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4413      	add	r3, r2
 80092b8:	781a      	ldrb	r2, [r3, #0]
 80092ba:	4b9b      	ldr	r3, [pc, #620]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 80092bc:	761a      	strb	r2, [r3, #24]

		appconf.app_to_use = data[ind++];
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	1c5a      	adds	r2, r3, #1
 80092c2:	60fa      	str	r2, [r7, #12]
 80092c4:	461a      	mov	r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	4413      	add	r3, r2
 80092ca:	781a      	ldrb	r2, [r3, #0]
 80092cc:	4b96      	ldr	r3, [pc, #600]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 80092ce:	765a      	strb	r2, [r3, #25]

		appconf.app_ppm_conf.ctrl_type = data[ind++];
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	1c5a      	adds	r2, r3, #1
 80092d4:	60fa      	str	r2, [r7, #12]
 80092d6:	461a      	mov	r2, r3
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4413      	add	r3, r2
 80092dc:	781a      	ldrb	r2, [r3, #0]
 80092de:	4b92      	ldr	r3, [pc, #584]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 80092e0:	771a      	strb	r2, [r3, #28]
		appconf.app_ppm_conf.pid_max_erpm = buffer_get_float32_auto(data, &ind);
 80092e2:	f107 030c 	add.w	r3, r7, #12
 80092e6:	4619      	mov	r1, r3
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 fce3 	bl	8009cb4 <buffer_get_float32_auto>
 80092ee:	eef0 7a40 	vmov.f32	s15, s0
 80092f2:	4b8d      	ldr	r3, [pc, #564]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 80092f4:	edc3 7a08 	vstr	s15, [r3, #32]
		appconf.app_ppm_conf.hyst = buffer_get_float32_auto(data, &ind);
 80092f8:	f107 030c 	add.w	r3, r7, #12
 80092fc:	4619      	mov	r1, r3
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 fcd8 	bl	8009cb4 <buffer_get_float32_auto>
 8009304:	eef0 7a40 	vmov.f32	s15, s0
 8009308:	4b87      	ldr	r3, [pc, #540]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 800930a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		appconf.app_ppm_conf.pulse_start = buffer_get_float32_auto(data, &ind);
 800930e:	f107 030c 	add.w	r3, r7, #12
 8009312:	4619      	mov	r1, r3
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 fccd 	bl	8009cb4 <buffer_get_float32_auto>
 800931a:	eef0 7a40 	vmov.f32	s15, s0
 800931e:	4b82      	ldr	r3, [pc, #520]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 8009320:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		appconf.app_ppm_conf.pulse_end = buffer_get_float32_auto(data, &ind);
 8009324:	f107 030c 	add.w	r3, r7, #12
 8009328:	4619      	mov	r1, r3
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 fcc2 	bl	8009cb4 <buffer_get_float32_auto>
 8009330:	eef0 7a40 	vmov.f32	s15, s0
 8009334:	4b7c      	ldr	r3, [pc, #496]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 8009336:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		appconf.app_ppm_conf.pulse_center = buffer_get_float32_auto(data, &ind);
 800933a:	f107 030c 	add.w	r3, r7, #12
 800933e:	4619      	mov	r1, r3
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 fcb7 	bl	8009cb4 <buffer_get_float32_auto>
 8009346:	eef0 7a40 	vmov.f32	s15, s0
 800934a:	4b77      	ldr	r3, [pc, #476]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 800934c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		appconf.app_ppm_conf.median_filter = data[ind++];
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	1c5a      	adds	r2, r3, #1
 8009354:	60fa      	str	r2, [r7, #12]
 8009356:	461a      	mov	r2, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4413      	add	r3, r2
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	bf14      	ite	ne
 8009362:	2301      	movne	r3, #1
 8009364:	2300      	moveq	r3, #0
 8009366:	b2da      	uxtb	r2, r3
 8009368:	4b6f      	ldr	r3, [pc, #444]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 800936a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		appconf.app_ppm_conf.safe_start = data[ind++];
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	1c5a      	adds	r2, r3, #1
 8009372:	60fa      	str	r2, [r7, #12]
 8009374:	461a      	mov	r2, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4413      	add	r3, r2
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	bf14      	ite	ne
 8009380:	2301      	movne	r3, #1
 8009382:	2300      	moveq	r3, #0
 8009384:	b2da      	uxtb	r2, r3
 8009386:	4b68      	ldr	r3, [pc, #416]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 8009388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		appconf.app_ppm_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 800938c:	f107 030c 	add.w	r3, r7, #12
 8009390:	4619      	mov	r1, r3
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 fc8e 	bl	8009cb4 <buffer_get_float32_auto>
 8009398:	eef0 7a40 	vmov.f32	s15, s0
 800939c:	4b62      	ldr	r3, [pc, #392]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 800939e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		appconf.app_ppm_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 80093a2:	f107 030c 	add.w	r3, r7, #12
 80093a6:	4619      	mov	r1, r3
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 fc83 	bl	8009cb4 <buffer_get_float32_auto>
 80093ae:	eef0 7a40 	vmov.f32	s15, s0
 80093b2:	4b5d      	ldr	r3, [pc, #372]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 80093b4:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		appconf.app_ppm_conf.throttle_exp_mode = data[ind++];
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	1c5a      	adds	r2, r3, #1
 80093bc:	60fa      	str	r2, [r7, #12]
 80093be:	461a      	mov	r2, r3
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	4413      	add	r3, r2
 80093c4:	781a      	ldrb	r2, [r3, #0]
 80093c6:	4b58      	ldr	r3, [pc, #352]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 80093c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		appconf.app_ppm_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 80093cc:	f107 030c 	add.w	r3, r7, #12
 80093d0:	4619      	mov	r1, r3
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 fc6e 	bl	8009cb4 <buffer_get_float32_auto>
 80093d8:	eef0 7a40 	vmov.f32	s15, s0
 80093dc:	4b52      	ldr	r3, [pc, #328]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 80093de:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		appconf.app_ppm_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 80093e2:	f107 030c 	add.w	r3, r7, #12
 80093e6:	4619      	mov	r1, r3
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 fc63 	bl	8009cb4 <buffer_get_float32_auto>
 80093ee:	eef0 7a40 	vmov.f32	s15, s0
 80093f2:	4b4d      	ldr	r3, [pc, #308]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 80093f4:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		appconf.app_ppm_conf.multi_esc = data[ind++];
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	1c5a      	adds	r2, r3, #1
 80093fc:	60fa      	str	r2, [r7, #12]
 80093fe:	461a      	mov	r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4413      	add	r3, r2
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	bf14      	ite	ne
 800940a:	2301      	movne	r3, #1
 800940c:	2300      	moveq	r3, #0
 800940e:	b2da      	uxtb	r2, r3
 8009410:	4b45      	ldr	r3, [pc, #276]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 8009412:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		appconf.app_ppm_conf.tc = data[ind++];
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	1c5a      	adds	r2, r3, #1
 800941a:	60fa      	str	r2, [r7, #12]
 800941c:	461a      	mov	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4413      	add	r3, r2
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	bf14      	ite	ne
 8009428:	2301      	movne	r3, #1
 800942a:	2300      	moveq	r3, #0
 800942c:	b2da      	uxtb	r2, r3
 800942e:	4b3e      	ldr	r3, [pc, #248]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 8009430:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		appconf.app_ppm_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8009434:	f107 030c 	add.w	r3, r7, #12
 8009438:	4619      	mov	r1, r3
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 fc3a 	bl	8009cb4 <buffer_get_float32_auto>
 8009440:	eef0 7a40 	vmov.f32	s15, s0
 8009444:	4b38      	ldr	r3, [pc, #224]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 8009446:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

		appconf.app_adc_conf.ctrl_type = data[ind++];
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	1c5a      	adds	r2, r3, #1
 800944e:	60fa      	str	r2, [r7, #12]
 8009450:	461a      	mov	r2, r3
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4413      	add	r3, r2
 8009456:	781a      	ldrb	r2, [r3, #0]
 8009458:	4b33      	ldr	r3, [pc, #204]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 800945a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		appconf.app_adc_conf.hyst = buffer_get_float32_auto(data, &ind);
 800945e:	f107 030c 	add.w	r3, r7, #12
 8009462:	4619      	mov	r1, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 fc25 	bl	8009cb4 <buffer_get_float32_auto>
 800946a:	eef0 7a40 	vmov.f32	s15, s0
 800946e:	4b2e      	ldr	r3, [pc, #184]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 8009470:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		appconf.app_adc_conf.voltage_start = buffer_get_float32_auto(data, &ind);
 8009474:	f107 030c 	add.w	r3, r7, #12
 8009478:	4619      	mov	r1, r3
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 fc1a 	bl	8009cb4 <buffer_get_float32_auto>
 8009480:	eef0 7a40 	vmov.f32	s15, s0
 8009484:	4b28      	ldr	r3, [pc, #160]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 8009486:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		appconf.app_adc_conf.voltage_end = buffer_get_float32_auto(data, &ind);
 800948a:	f107 030c 	add.w	r3, r7, #12
 800948e:	4619      	mov	r1, r3
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 fc0f 	bl	8009cb4 <buffer_get_float32_auto>
 8009496:	eef0 7a40 	vmov.f32	s15, s0
 800949a:	4b23      	ldr	r3, [pc, #140]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 800949c:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		appconf.app_adc_conf.voltage_center = buffer_get_float32_auto(data, &ind);
 80094a0:	f107 030c 	add.w	r3, r7, #12
 80094a4:	4619      	mov	r1, r3
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 fc04 	bl	8009cb4 <buffer_get_float32_auto>
 80094ac:	eef0 7a40 	vmov.f32	s15, s0
 80094b0:	4b1d      	ldr	r3, [pc, #116]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 80094b2:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
		appconf.app_adc_conf.voltage2_start = buffer_get_float32_auto(data, &ind);
 80094b6:	f107 030c 	add.w	r3, r7, #12
 80094ba:	4619      	mov	r1, r3
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 fbf9 	bl	8009cb4 <buffer_get_float32_auto>
 80094c2:	eef0 7a40 	vmov.f32	s15, s0
 80094c6:	4b18      	ldr	r3, [pc, #96]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 80094c8:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		appconf.app_adc_conf.voltage2_end = buffer_get_float32_auto(data, &ind);
 80094cc:	f107 030c 	add.w	r3, r7, #12
 80094d0:	4619      	mov	r1, r3
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 fbee 	bl	8009cb4 <buffer_get_float32_auto>
 80094d8:	eef0 7a40 	vmov.f32	s15, s0
 80094dc:	4b12      	ldr	r3, [pc, #72]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 80094de:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
		appconf.app_adc_conf.use_filter = data[ind++];
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	1c5a      	adds	r2, r3, #1
 80094e6:	60fa      	str	r2, [r7, #12]
 80094e8:	461a      	mov	r2, r3
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4413      	add	r3, r2
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	bf14      	ite	ne
 80094f4:	2301      	movne	r3, #1
 80094f6:	2300      	moveq	r3, #0
 80094f8:	b2da      	uxtb	r2, r3
 80094fa:	4b0b      	ldr	r3, [pc, #44]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 80094fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
		appconf.app_adc_conf.safe_start = data[ind++];
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	1c5a      	adds	r2, r3, #1
 8009504:	60fa      	str	r2, [r7, #12]
 8009506:	461a      	mov	r2, r3
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4413      	add	r3, r2
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	2b00      	cmp	r3, #0
 8009510:	bf14      	ite	ne
 8009512:	2301      	movne	r3, #1
 8009514:	2300      	moveq	r3, #0
 8009516:	b2da      	uxtb	r2, r3
 8009518:	4b03      	ldr	r3, [pc, #12]	; (8009528 <bldc_interface_process_packet+0x13a0>)
 800951a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		appconf.app_adc_conf.cc_button_inverted = data[ind++];
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	1c5a      	adds	r2, r3, #1
 8009522:	60fa      	str	r2, [r7, #12]
 8009524:	e002      	b.n	800952c <bldc_interface_process_packet+0x13a4>
 8009526:	bf00      	nop
 8009528:	200006f8 	.word	0x200006f8
 800952c:	461a      	mov	r2, r3
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4413      	add	r3, r2
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	bf14      	ite	ne
 8009538:	2301      	movne	r3, #1
 800953a:	2300      	moveq	r3, #0
 800953c:	b2da      	uxtb	r2, r3
 800953e:	4bb7      	ldr	r3, [pc, #732]	; (800981c <bldc_interface_process_packet+0x1694>)
 8009540:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		appconf.app_adc_conf.rev_button_inverted = data[ind++];
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	1c5a      	adds	r2, r3, #1
 8009548:	60fa      	str	r2, [r7, #12]
 800954a:	461a      	mov	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4413      	add	r3, r2
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	2b00      	cmp	r3, #0
 8009554:	bf14      	ite	ne
 8009556:	2301      	movne	r3, #1
 8009558:	2300      	moveq	r3, #0
 800955a:	b2da      	uxtb	r2, r3
 800955c:	4baf      	ldr	r3, [pc, #700]	; (800981c <bldc_interface_process_packet+0x1694>)
 800955e:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		appconf.app_adc_conf.voltage_inverted = data[ind++];
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	1c5a      	adds	r2, r3, #1
 8009566:	60fa      	str	r2, [r7, #12]
 8009568:	461a      	mov	r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4413      	add	r3, r2
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	bf14      	ite	ne
 8009574:	2301      	movne	r3, #1
 8009576:	2300      	moveq	r3, #0
 8009578:	b2da      	uxtb	r2, r3
 800957a:	4ba8      	ldr	r3, [pc, #672]	; (800981c <bldc_interface_process_packet+0x1694>)
 800957c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		appconf.app_adc_conf.voltage2_inverted = data[ind++];
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	1c5a      	adds	r2, r3, #1
 8009584:	60fa      	str	r2, [r7, #12]
 8009586:	461a      	mov	r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4413      	add	r3, r2
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	bf14      	ite	ne
 8009592:	2301      	movne	r3, #1
 8009594:	2300      	moveq	r3, #0
 8009596:	b2da      	uxtb	r2, r3
 8009598:	4ba0      	ldr	r3, [pc, #640]	; (800981c <bldc_interface_process_packet+0x1694>)
 800959a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		appconf.app_adc_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 800959e:	f107 030c 	add.w	r3, r7, #12
 80095a2:	4619      	mov	r1, r3
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 fb85 	bl	8009cb4 <buffer_get_float32_auto>
 80095aa:	eef0 7a40 	vmov.f32	s15, s0
 80095ae:	4b9b      	ldr	r3, [pc, #620]	; (800981c <bldc_interface_process_packet+0x1694>)
 80095b0:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		appconf.app_adc_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 80095b4:	f107 030c 	add.w	r3, r7, #12
 80095b8:	4619      	mov	r1, r3
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 fb7a 	bl	8009cb4 <buffer_get_float32_auto>
 80095c0:	eef0 7a40 	vmov.f32	s15, s0
 80095c4:	4b95      	ldr	r3, [pc, #596]	; (800981c <bldc_interface_process_packet+0x1694>)
 80095c6:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
		appconf.app_adc_conf.throttle_exp_mode = data[ind++];
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	1c5a      	adds	r2, r3, #1
 80095ce:	60fa      	str	r2, [r7, #12]
 80095d0:	461a      	mov	r2, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4413      	add	r3, r2
 80095d6:	781a      	ldrb	r2, [r3, #0]
 80095d8:	4b90      	ldr	r3, [pc, #576]	; (800981c <bldc_interface_process_packet+0x1694>)
 80095da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		appconf.app_adc_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 80095de:	f107 030c 	add.w	r3, r7, #12
 80095e2:	4619      	mov	r1, r3
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 fb65 	bl	8009cb4 <buffer_get_float32_auto>
 80095ea:	eef0 7a40 	vmov.f32	s15, s0
 80095ee:	4b8b      	ldr	r3, [pc, #556]	; (800981c <bldc_interface_process_packet+0x1694>)
 80095f0:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		appconf.app_adc_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 80095f4:	f107 030c 	add.w	r3, r7, #12
 80095f8:	4619      	mov	r1, r3
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 fb5a 	bl	8009cb4 <buffer_get_float32_auto>
 8009600:	eef0 7a40 	vmov.f32	s15, s0
 8009604:	4b85      	ldr	r3, [pc, #532]	; (800981c <bldc_interface_process_packet+0x1694>)
 8009606:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
		appconf.app_adc_conf.multi_esc = data[ind++];
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	1c5a      	adds	r2, r3, #1
 800960e:	60fa      	str	r2, [r7, #12]
 8009610:	461a      	mov	r2, r3
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4413      	add	r3, r2
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	bf14      	ite	ne
 800961c:	2301      	movne	r3, #1
 800961e:	2300      	moveq	r3, #0
 8009620:	b2da      	uxtb	r2, r3
 8009622:	4b7e      	ldr	r3, [pc, #504]	; (800981c <bldc_interface_process_packet+0x1694>)
 8009624:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		appconf.app_adc_conf.tc = data[ind++];
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	1c5a      	adds	r2, r3, #1
 800962c:	60fa      	str	r2, [r7, #12]
 800962e:	461a      	mov	r2, r3
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	4413      	add	r3, r2
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	bf14      	ite	ne
 800963a:	2301      	movne	r3, #1
 800963c:	2300      	moveq	r3, #0
 800963e:	b2da      	uxtb	r2, r3
 8009640:	4b76      	ldr	r3, [pc, #472]	; (800981c <bldc_interface_process_packet+0x1694>)
 8009642:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		appconf.app_adc_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8009646:	f107 030c 	add.w	r3, r7, #12
 800964a:	4619      	mov	r1, r3
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 fb31 	bl	8009cb4 <buffer_get_float32_auto>
 8009652:	eef0 7a40 	vmov.f32	s15, s0
 8009656:	4b71      	ldr	r3, [pc, #452]	; (800981c <bldc_interface_process_packet+0x1694>)
 8009658:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
		appconf.app_adc_conf.update_rate_hz = buffer_get_uint16(data, &ind);
 800965c:	f107 030c 	add.w	r3, r7, #12
 8009660:	4619      	mov	r1, r3
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 fa6e 	bl	8009b44 <buffer_get_uint16>
 8009668:	4603      	mov	r3, r0
 800966a:	461a      	mov	r2, r3
 800966c:	4b6b      	ldr	r3, [pc, #428]	; (800981c <bldc_interface_process_packet+0x1694>)
 800966e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		appconf.app_uart_baudrate = buffer_get_uint32(data, &ind);
 8009672:	f107 030c 	add.w	r3, r7, #12
 8009676:	4619      	mov	r1, r3
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 fab6 	bl	8009bea <buffer_get_uint32>
 800967e:	4603      	mov	r3, r0
 8009680:	4a66      	ldr	r2, [pc, #408]	; (800981c <bldc_interface_process_packet+0x1694>)
 8009682:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

		appconf.app_chuk_conf.ctrl_type = data[ind++];
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	1c5a      	adds	r2, r3, #1
 800968a:	60fa      	str	r2, [r7, #12]
 800968c:	461a      	mov	r2, r3
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4413      	add	r3, r2
 8009692:	781a      	ldrb	r2, [r3, #0]
 8009694:	4b61      	ldr	r3, [pc, #388]	; (800981c <bldc_interface_process_packet+0x1694>)
 8009696:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		appconf.app_chuk_conf.hyst = buffer_get_float32_auto(data, &ind);
 800969a:	f107 030c 	add.w	r3, r7, #12
 800969e:	4619      	mov	r1, r3
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 fb07 	bl	8009cb4 <buffer_get_float32_auto>
 80096a6:	eef0 7a40 	vmov.f32	s15, s0
 80096aa:	4b5c      	ldr	r3, [pc, #368]	; (800981c <bldc_interface_process_packet+0x1694>)
 80096ac:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
		appconf.app_chuk_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 80096b0:	f107 030c 	add.w	r3, r7, #12
 80096b4:	4619      	mov	r1, r3
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 fafc 	bl	8009cb4 <buffer_get_float32_auto>
 80096bc:	eef0 7a40 	vmov.f32	s15, s0
 80096c0:	4b56      	ldr	r3, [pc, #344]	; (800981c <bldc_interface_process_packet+0x1694>)
 80096c2:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		appconf.app_chuk_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 80096c6:	f107 030c 	add.w	r3, r7, #12
 80096ca:	4619      	mov	r1, r3
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 faf1 	bl	8009cb4 <buffer_get_float32_auto>
 80096d2:	eef0 7a40 	vmov.f32	s15, s0
 80096d6:	4b51      	ldr	r3, [pc, #324]	; (800981c <bldc_interface_process_packet+0x1694>)
 80096d8:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		appconf.app_chuk_conf.stick_erpm_per_s_in_cc = buffer_get_float32_auto(data, &ind);
 80096dc:	f107 030c 	add.w	r3, r7, #12
 80096e0:	4619      	mov	r1, r3
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fae6 	bl	8009cb4 <buffer_get_float32_auto>
 80096e8:	eef0 7a40 	vmov.f32	s15, s0
 80096ec:	4b4b      	ldr	r3, [pc, #300]	; (800981c <bldc_interface_process_packet+0x1694>)
 80096ee:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		appconf.app_chuk_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 80096f2:	f107 030c 	add.w	r3, r7, #12
 80096f6:	4619      	mov	r1, r3
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 fadb 	bl	8009cb4 <buffer_get_float32_auto>
 80096fe:	eef0 7a40 	vmov.f32	s15, s0
 8009702:	4b46      	ldr	r3, [pc, #280]	; (800981c <bldc_interface_process_packet+0x1694>)
 8009704:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		appconf.app_chuk_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 8009708:	f107 030c 	add.w	r3, r7, #12
 800970c:	4619      	mov	r1, r3
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fad0 	bl	8009cb4 <buffer_get_float32_auto>
 8009714:	eef0 7a40 	vmov.f32	s15, s0
 8009718:	4b40      	ldr	r3, [pc, #256]	; (800981c <bldc_interface_process_packet+0x1694>)
 800971a:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
		appconf.app_chuk_conf.throttle_exp_mode = data[ind++];
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	1c5a      	adds	r2, r3, #1
 8009722:	60fa      	str	r2, [r7, #12]
 8009724:	461a      	mov	r2, r3
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4413      	add	r3, r2
 800972a:	781a      	ldrb	r2, [r3, #0]
 800972c:	4b3b      	ldr	r3, [pc, #236]	; (800981c <bldc_interface_process_packet+0x1694>)
 800972e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		appconf.app_chuk_conf.multi_esc = data[ind++];
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	1c5a      	adds	r2, r3, #1
 8009736:	60fa      	str	r2, [r7, #12]
 8009738:	461a      	mov	r2, r3
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4413      	add	r3, r2
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	bf14      	ite	ne
 8009744:	2301      	movne	r3, #1
 8009746:	2300      	moveq	r3, #0
 8009748:	b2da      	uxtb	r2, r3
 800974a:	4b34      	ldr	r3, [pc, #208]	; (800981c <bldc_interface_process_packet+0x1694>)
 800974c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
		appconf.app_chuk_conf.tc = data[ind++];
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	1c5a      	adds	r2, r3, #1
 8009754:	60fa      	str	r2, [r7, #12]
 8009756:	461a      	mov	r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	4413      	add	r3, r2
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	bf14      	ite	ne
 8009762:	2301      	movne	r3, #1
 8009764:	2300      	moveq	r3, #0
 8009766:	b2da      	uxtb	r2, r3
 8009768:	4b2c      	ldr	r3, [pc, #176]	; (800981c <bldc_interface_process_packet+0x1694>)
 800976a:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		appconf.app_chuk_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 800976e:	f107 030c 	add.w	r3, r7, #12
 8009772:	4619      	mov	r1, r3
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 fa9d 	bl	8009cb4 <buffer_get_float32_auto>
 800977a:	eef0 7a40 	vmov.f32	s15, s0
 800977e:	4b27      	ldr	r3, [pc, #156]	; (800981c <bldc_interface_process_packet+0x1694>)
 8009780:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc

		appconf.app_nrf_conf.speed = data[ind++];
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	1c5a      	adds	r2, r3, #1
 8009788:	60fa      	str	r2, [r7, #12]
 800978a:	461a      	mov	r2, r3
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4413      	add	r3, r2
 8009790:	781a      	ldrb	r2, [r3, #0]
 8009792:	4b22      	ldr	r3, [pc, #136]	; (800981c <bldc_interface_process_packet+0x1694>)
 8009794:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		appconf.app_nrf_conf.power = data[ind++];
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	1c5a      	adds	r2, r3, #1
 800979c:	60fa      	str	r2, [r7, #12]
 800979e:	461a      	mov	r2, r3
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4413      	add	r3, r2
 80097a4:	781a      	ldrb	r2, [r3, #0]
 80097a6:	4b1d      	ldr	r3, [pc, #116]	; (800981c <bldc_interface_process_packet+0x1694>)
 80097a8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
		appconf.app_nrf_conf.crc_type = data[ind++];
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	1c5a      	adds	r2, r3, #1
 80097b0:	60fa      	str	r2, [r7, #12]
 80097b2:	461a      	mov	r2, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	4413      	add	r3, r2
 80097b8:	781a      	ldrb	r2, [r3, #0]
 80097ba:	4b18      	ldr	r3, [pc, #96]	; (800981c <bldc_interface_process_packet+0x1694>)
 80097bc:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
		appconf.app_nrf_conf.retry_delay = data[ind++];
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	1c5a      	adds	r2, r3, #1
 80097c4:	60fa      	str	r2, [r7, #12]
 80097c6:	461a      	mov	r2, r3
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4413      	add	r3, r2
 80097cc:	781a      	ldrb	r2, [r3, #0]
 80097ce:	4b13      	ldr	r3, [pc, #76]	; (800981c <bldc_interface_process_packet+0x1694>)
 80097d0:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
		appconf.app_nrf_conf.retries = data[ind++];
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	1c5a      	adds	r2, r3, #1
 80097d8:	60fa      	str	r2, [r7, #12]
 80097da:	461a      	mov	r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	4413      	add	r3, r2
 80097e0:	781a      	ldrb	r2, [r3, #0]
 80097e2:	4b0e      	ldr	r3, [pc, #56]	; (800981c <bldc_interface_process_packet+0x1694>)
 80097e4:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
		appconf.app_nrf_conf.channel = data[ind++];
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	1c5a      	adds	r2, r3, #1
 80097ec:	60fa      	str	r2, [r7, #12]
 80097ee:	461a      	mov	r2, r3
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4413      	add	r3, r2
 80097f4:	781a      	ldrb	r2, [r3, #0]
 80097f6:	4b09      	ldr	r3, [pc, #36]	; (800981c <bldc_interface_process_packet+0x1694>)
 80097f8:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
		memcpy(appconf.app_nrf_conf.address, data + ind, 3);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	461a      	mov	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	441a      	add	r2, r3
 8009804:	4b05      	ldr	r3, [pc, #20]	; (800981c <bldc_interface_process_packet+0x1694>)
 8009806:	33c6      	adds	r3, #198	; 0xc6
 8009808:	8811      	ldrh	r1, [r2, #0]
 800980a:	7892      	ldrb	r2, [r2, #2]
 800980c:	8019      	strh	r1, [r3, #0]
 800980e:	709a      	strb	r2, [r3, #2]
		ind += 3;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	3303      	adds	r3, #3
 8009814:	60fb      	str	r3, [r7, #12]
		appconf.app_nrf_conf.send_crc_ack = data[ind++];
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	e002      	b.n	8009820 <bldc_interface_process_packet+0x1698>
 800981a:	bf00      	nop
 800981c:	200006f8 	.word	0x200006f8
 8009820:	1c5a      	adds	r2, r3, #1
 8009822:	60fa      	str	r2, [r7, #12]
 8009824:	461a      	mov	r2, r3
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	4413      	add	r3, r2
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	bf14      	ite	ne
 8009830:	2301      	movne	r3, #1
 8009832:	2300      	moveq	r3, #0
 8009834:	b2da      	uxtb	r2, r3
 8009836:	4b81      	ldr	r3, [pc, #516]	; (8009a3c <bldc_interface_process_packet+0x18b4>)
 8009838:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9

		if (rx_appconf_func) {
 800983c:	4b80      	ldr	r3, [pc, #512]	; (8009a40 <bldc_interface_process_packet+0x18b8>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	f000 80eb 	beq.w	8009a1c <bldc_interface_process_packet+0x1894>
			rx_appconf_func(&appconf);
 8009846:	4b7e      	ldr	r3, [pc, #504]	; (8009a40 <bldc_interface_process_packet+0x18b8>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	487c      	ldr	r0, [pc, #496]	; (8009a3c <bldc_interface_process_packet+0x18b4>)
 800984c:	4798      	blx	r3
		}
		break;
 800984e:	e0e5      	b.n	8009a1c <bldc_interface_process_packet+0x1894>

	case COMM_DETECT_MOTOR_PARAM:
		ind = 0;
 8009850:	2300      	movs	r3, #0
 8009852:	60fb      	str	r3, [r7, #12]
		detect_cycle_int_limit = buffer_get_float32(data, 1000.0, &ind);
 8009854:	f107 030c 	add.w	r3, r7, #12
 8009858:	4619      	mov	r1, r3
 800985a:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8009a44 <bldc_interface_process_packet+0x18bc>
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 fa0e 	bl	8009c80 <buffer_get_float32>
 8009864:	eef0 7a40 	vmov.f32	s15, s0
 8009868:	4b77      	ldr	r3, [pc, #476]	; (8009a48 <bldc_interface_process_packet+0x18c0>)
 800986a:	edc3 7a00 	vstr	s15, [r3]
		detect_coupling_k = buffer_get_float32(data, 1000.0, &ind);
 800986e:	f107 030c 	add.w	r3, r7, #12
 8009872:	4619      	mov	r1, r3
 8009874:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8009a44 <bldc_interface_process_packet+0x18bc>
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 fa01 	bl	8009c80 <buffer_get_float32>
 800987e:	eef0 7a40 	vmov.f32	s15, s0
 8009882:	4b72      	ldr	r3, [pc, #456]	; (8009a4c <bldc_interface_process_packet+0x18c4>)
 8009884:	edc3 7a00 	vstr	s15, [r3]
		for (i = 0;i < 8;i++) {
 8009888:	2300      	movs	r3, #0
 800988a:	61bb      	str	r3, [r7, #24]
 800988c:	e00f      	b.n	80098ae <bldc_interface_process_packet+0x1726>
			detect_hall_table[i] = (const signed char)(data[ind++]);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	1c5a      	adds	r2, r3, #1
 8009892:	60fa      	str	r2, [r7, #12]
 8009894:	461a      	mov	r2, r3
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	4413      	add	r3, r2
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	b259      	sxtb	r1, r3
 800989e:	4a6c      	ldr	r2, [pc, #432]	; (8009a50 <bldc_interface_process_packet+0x18c8>)
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	4413      	add	r3, r2
 80098a4:	460a      	mov	r2, r1
 80098a6:	701a      	strb	r2, [r3, #0]
		for (i = 0;i < 8;i++) {
 80098a8:	69bb      	ldr	r3, [r7, #24]
 80098aa:	3301      	adds	r3, #1
 80098ac:	61bb      	str	r3, [r7, #24]
 80098ae:	69bb      	ldr	r3, [r7, #24]
 80098b0:	2b07      	cmp	r3, #7
 80098b2:	ddec      	ble.n	800988e <bldc_interface_process_packet+0x1706>
		}
		detect_hall_res = (const signed char)(data[ind++]);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	1c5a      	adds	r2, r3, #1
 80098b8:	60fa      	str	r2, [r7, #12]
 80098ba:	461a      	mov	r2, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4413      	add	r3, r2
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	b25a      	sxtb	r2, r3
 80098c4:	4b63      	ldr	r3, [pc, #396]	; (8009a54 <bldc_interface_process_packet+0x18cc>)
 80098c6:	701a      	strb	r2, [r3, #0]

		if (rx_detect_func) {
 80098c8:	4b63      	ldr	r3, [pc, #396]	; (8009a58 <bldc_interface_process_packet+0x18d0>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f000 80a7 	beq.w	8009a20 <bldc_interface_process_packet+0x1898>
			rx_detect_func(detect_cycle_int_limit, detect_coupling_k,
 80098d2:	4b61      	ldr	r3, [pc, #388]	; (8009a58 <bldc_interface_process_packet+0x18d0>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a5c      	ldr	r2, [pc, #368]	; (8009a48 <bldc_interface_process_packet+0x18c0>)
 80098d8:	edd2 7a00 	vldr	s15, [r2]
 80098dc:	4a5b      	ldr	r2, [pc, #364]	; (8009a4c <bldc_interface_process_packet+0x18c4>)
 80098de:	ed92 7a00 	vldr	s14, [r2]
 80098e2:	4a5c      	ldr	r2, [pc, #368]	; (8009a54 <bldc_interface_process_packet+0x18cc>)
 80098e4:	f992 2000 	ldrsb.w	r2, [r2]
 80098e8:	4611      	mov	r1, r2
 80098ea:	4859      	ldr	r0, [pc, #356]	; (8009a50 <bldc_interface_process_packet+0x18c8>)
 80098ec:	eef0 0a47 	vmov.f32	s1, s14
 80098f0:	eeb0 0a67 	vmov.f32	s0, s15
 80098f4:	4798      	blx	r3
					detect_hall_table, detect_hall_res);
		}
		break;
 80098f6:	e093      	b.n	8009a20 <bldc_interface_process_packet+0x1898>
	case COMM_DETECT_HALL_FOC: {
		// TODO!
	} break;

	case COMM_GET_DECODED_PPM:
		ind = 0;
 80098f8:	2300      	movs	r3, #0
 80098fa:	60fb      	str	r3, [r7, #12]
		dec_ppm = buffer_get_float32(data, 1000000.0, &ind);
 80098fc:	f107 030c 	add.w	r3, r7, #12
 8009900:	4619      	mov	r1, r3
 8009902:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8009a5c <bldc_interface_process_packet+0x18d4>
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 f9ba 	bl	8009c80 <buffer_get_float32>
 800990c:	eef0 7a40 	vmov.f32	s15, s0
 8009910:	4b53      	ldr	r3, [pc, #332]	; (8009a60 <bldc_interface_process_packet+0x18d8>)
 8009912:	edc3 7a00 	vstr	s15, [r3]
		dec_ppm_len = buffer_get_float32(data, 1000000.0, &ind);
 8009916:	f107 030c 	add.w	r3, r7, #12
 800991a:	4619      	mov	r1, r3
 800991c:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8009a5c <bldc_interface_process_packet+0x18d4>
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 f9ad 	bl	8009c80 <buffer_get_float32>
 8009926:	eef0 7a40 	vmov.f32	s15, s0
 800992a:	4b4e      	ldr	r3, [pc, #312]	; (8009a64 <bldc_interface_process_packet+0x18dc>)
 800992c:	edc3 7a00 	vstr	s15, [r3]

		if (rx_dec_ppm_func) {
 8009930:	4b4d      	ldr	r3, [pc, #308]	; (8009a68 <bldc_interface_process_packet+0x18e0>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d075      	beq.n	8009a24 <bldc_interface_process_packet+0x189c>
			rx_dec_ppm_func(dec_ppm, dec_ppm_len);
 8009938:	4b4b      	ldr	r3, [pc, #300]	; (8009a68 <bldc_interface_process_packet+0x18e0>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a48      	ldr	r2, [pc, #288]	; (8009a60 <bldc_interface_process_packet+0x18d8>)
 800993e:	edd2 7a00 	vldr	s15, [r2]
 8009942:	4a48      	ldr	r2, [pc, #288]	; (8009a64 <bldc_interface_process_packet+0x18dc>)
 8009944:	ed92 7a00 	vldr	s14, [r2]
 8009948:	eef0 0a47 	vmov.f32	s1, s14
 800994c:	eeb0 0a67 	vmov.f32	s0, s15
 8009950:	4798      	blx	r3
		}
		break;
 8009952:	e067      	b.n	8009a24 <bldc_interface_process_packet+0x189c>

	case COMM_GET_DECODED_ADC:
		ind = 0;
 8009954:	2300      	movs	r3, #0
 8009956:	60fb      	str	r3, [r7, #12]
		dec_adc = buffer_get_float32(data, 1000000.0, &ind);
 8009958:	f107 030c 	add.w	r3, r7, #12
 800995c:	4619      	mov	r1, r3
 800995e:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8009a5c <bldc_interface_process_packet+0x18d4>
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 f98c 	bl	8009c80 <buffer_get_float32>
 8009968:	eef0 7a40 	vmov.f32	s15, s0
 800996c:	4b3f      	ldr	r3, [pc, #252]	; (8009a6c <bldc_interface_process_packet+0x18e4>)
 800996e:	edc3 7a00 	vstr	s15, [r3]
		dec_adc_voltage = buffer_get_float32(data, 1000000.0, &ind);
 8009972:	f107 030c 	add.w	r3, r7, #12
 8009976:	4619      	mov	r1, r3
 8009978:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8009a5c <bldc_interface_process_packet+0x18d4>
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 f97f 	bl	8009c80 <buffer_get_float32>
 8009982:	eef0 7a40 	vmov.f32	s15, s0
 8009986:	4b3a      	ldr	r3, [pc, #232]	; (8009a70 <bldc_interface_process_packet+0x18e8>)
 8009988:	edc3 7a00 	vstr	s15, [r3]
		// TODO for adc2

		if (rx_dec_adc_func) {
 800998c:	4b39      	ldr	r3, [pc, #228]	; (8009a74 <bldc_interface_process_packet+0x18ec>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d049      	beq.n	8009a28 <bldc_interface_process_packet+0x18a0>
			rx_dec_adc_func(dec_adc, dec_adc_voltage);
 8009994:	4b37      	ldr	r3, [pc, #220]	; (8009a74 <bldc_interface_process_packet+0x18ec>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a34      	ldr	r2, [pc, #208]	; (8009a6c <bldc_interface_process_packet+0x18e4>)
 800999a:	edd2 7a00 	vldr	s15, [r2]
 800999e:	4a34      	ldr	r2, [pc, #208]	; (8009a70 <bldc_interface_process_packet+0x18e8>)
 80099a0:	ed92 7a00 	vldr	s14, [r2]
 80099a4:	eef0 0a47 	vmov.f32	s1, s14
 80099a8:	eeb0 0a67 	vmov.f32	s0, s15
 80099ac:	4798      	blx	r3
		}
		break;
 80099ae:	e03b      	b.n	8009a28 <bldc_interface_process_packet+0x18a0>

	case COMM_GET_DECODED_CHUK:
		ind = 0;
 80099b0:	2300      	movs	r3, #0
 80099b2:	60fb      	str	r3, [r7, #12]
		dec_chuk = buffer_get_float32(data, 1000000.0, &ind);
 80099b4:	f107 030c 	add.w	r3, r7, #12
 80099b8:	4619      	mov	r1, r3
 80099ba:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8009a5c <bldc_interface_process_packet+0x18d4>
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 f95e 	bl	8009c80 <buffer_get_float32>
 80099c4:	eef0 7a40 	vmov.f32	s15, s0
 80099c8:	4b2b      	ldr	r3, [pc, #172]	; (8009a78 <bldc_interface_process_packet+0x18f0>)
 80099ca:	edc3 7a00 	vstr	s15, [r3]

		if (rx_dec_chuk_func) {
 80099ce:	4b2b      	ldr	r3, [pc, #172]	; (8009a7c <bldc_interface_process_packet+0x18f4>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d02a      	beq.n	8009a2c <bldc_interface_process_packet+0x18a4>
			rx_dec_chuk_func(dec_chuk);
 80099d6:	4b29      	ldr	r3, [pc, #164]	; (8009a7c <bldc_interface_process_packet+0x18f4>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a27      	ldr	r2, [pc, #156]	; (8009a78 <bldc_interface_process_packet+0x18f0>)
 80099dc:	edd2 7a00 	vldr	s15, [r2]
 80099e0:	eeb0 0a67 	vmov.f32	s0, s15
 80099e4:	4798      	blx	r3
		}
		break;
 80099e6:	e021      	b.n	8009a2c <bldc_interface_process_packet+0x18a4>

	case COMM_SET_MCCONF:
		// This is a confirmation that the new mcconf is received.
		if (rx_mcconf_received_func) {
 80099e8:	4b25      	ldr	r3, [pc, #148]	; (8009a80 <bldc_interface_process_packet+0x18f8>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d01f      	beq.n	8009a30 <bldc_interface_process_packet+0x18a8>
			rx_mcconf_received_func();
 80099f0:	4b23      	ldr	r3, [pc, #140]	; (8009a80 <bldc_interface_process_packet+0x18f8>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4798      	blx	r3
		}
		break;
 80099f6:	e01b      	b.n	8009a30 <bldc_interface_process_packet+0x18a8>

	case COMM_SET_APPCONF:
		// This is a confirmation that the new appconf is received.
		if (rx_appconf_received_func) {
 80099f8:	4b22      	ldr	r3, [pc, #136]	; (8009a84 <bldc_interface_process_packet+0x18fc>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d019      	beq.n	8009a34 <bldc_interface_process_packet+0x18ac>
			rx_appconf_received_func();
 8009a00:	4b20      	ldr	r3, [pc, #128]	; (8009a84 <bldc_interface_process_packet+0x18fc>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4798      	blx	r3
		}
		break;
 8009a06:	e015      	b.n	8009a34 <bldc_interface_process_packet+0x18ac>
		return;
 8009a08:	bf00      	nop
 8009a0a:	e014      	b.n	8009a36 <bldc_interface_process_packet+0x18ae>

	default:
		break;
 8009a0c:	bf00      	nop
 8009a0e:	e012      	b.n	8009a36 <bldc_interface_process_packet+0x18ae>
		break;
 8009a10:	bf00      	nop
 8009a12:	e010      	b.n	8009a36 <bldc_interface_process_packet+0x18ae>
		break;
 8009a14:	bf00      	nop
 8009a16:	e00e      	b.n	8009a36 <bldc_interface_process_packet+0x18ae>
		break;
 8009a18:	bf00      	nop
 8009a1a:	e00c      	b.n	8009a36 <bldc_interface_process_packet+0x18ae>
		break;
 8009a1c:	bf00      	nop
 8009a1e:	e00a      	b.n	8009a36 <bldc_interface_process_packet+0x18ae>
		break;
 8009a20:	bf00      	nop
 8009a22:	e008      	b.n	8009a36 <bldc_interface_process_packet+0x18ae>
		break;
 8009a24:	bf00      	nop
 8009a26:	e006      	b.n	8009a36 <bldc_interface_process_packet+0x18ae>
		break;
 8009a28:	bf00      	nop
 8009a2a:	e004      	b.n	8009a36 <bldc_interface_process_packet+0x18ae>
		break;
 8009a2c:	bf00      	nop
 8009a2e:	e002      	b.n	8009a36 <bldc_interface_process_packet+0x18ae>
		break;
 8009a30:	bf00      	nop
 8009a32:	e000      	b.n	8009a36 <bldc_interface_process_packet+0x18ae>
		break;
 8009a34:	bf00      	nop
	}
}
 8009a36:	3720      	adds	r7, #32
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	200006f8 	.word	0x200006f8
 8009a40:	20000808 	.word	0x20000808
 8009a44:	447a0000 	.word	0x447a0000
 8009a48:	200007c4 	.word	0x200007c4
 8009a4c:	200007c8 	.word	0x200007c8
 8009a50:	200007cc 	.word	0x200007cc
 8009a54:	200007d4 	.word	0x200007d4
 8009a58:	2000080c 	.word	0x2000080c
 8009a5c:	49742400 	.word	0x49742400
 8009a60:	200007d8 	.word	0x200007d8
 8009a64:	200007dc 	.word	0x200007dc
 8009a68:	20000810 	.word	0x20000810
 8009a6c:	200007e0 	.word	0x200007e0
 8009a70:	200007e4 	.word	0x200007e4
 8009a74:	20000814 	.word	0x20000814
 8009a78:	200007e8 	.word	0x200007e8
 8009a7c:	20000818 	.word	0x20000818
 8009a80:	2000081c 	.word	0x2000081c
 8009a84:	20000820 	.word	0x20000820

08009a88 <buffer_append_int32>:
void buffer_append_uint16(uint8_t* buffer, uint16_t number, int32_t *index) {
	buffer[(*index)++] = number >> 8;
	buffer[(*index)++] = number;
}

void buffer_append_int32(uint8_t* buffer, int32_t number, int32_t *index) {
 8009a88:	b480      	push	{r7}
 8009a8a:	b085      	sub	sp, #20
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	607a      	str	r2, [r7, #4]
	buffer[(*index)++] = number >> 24;
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	1618      	asrs	r0, r3, #24
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	1c59      	adds	r1, r3, #1
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	6011      	str	r1, [r2, #0]
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	b2c2      	uxtb	r2, r0
 8009aaa:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 16;
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	1418      	asrs	r0, r3, #16
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	1c59      	adds	r1, r3, #1
 8009ab6:	687a      	ldr	r2, [r7, #4]
 8009ab8:	6011      	str	r1, [r2, #0]
 8009aba:	461a      	mov	r2, r3
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	4413      	add	r3, r2
 8009ac0:	b2c2      	uxtb	r2, r0
 8009ac2:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 8;
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	1218      	asrs	r0, r3, #8
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	1c59      	adds	r1, r3, #1
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	6011      	str	r1, [r2, #0]
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	4413      	add	r3, r2
 8009ad8:	b2c2      	uxtb	r2, r0
 8009ada:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	1c59      	adds	r1, r3, #1
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	6011      	str	r1, [r2, #0]
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	4413      	add	r3, r2
 8009aec:	68ba      	ldr	r2, [r7, #8]
 8009aee:	b2d2      	uxtb	r2, r2
 8009af0:	701a      	strb	r2, [r3, #0]
}
 8009af2:	bf00      	nop
 8009af4:	3714      	adds	r7, #20
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr

08009afe <buffer_get_int16>:
	}

	buffer_append_uint32(buffer, res, index);
}

int16_t buffer_get_int16(const uint8_t *buffer, int32_t *index) {
 8009afe:	b480      	push	{r7}
 8009b00:	b085      	sub	sp, #20
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
 8009b06:	6039      	str	r1, [r7, #0]
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4413      	add	r3, r2
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	021b      	lsls	r3, r3, #8
 8009b16:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	6879      	ldr	r1, [r7, #4]
 8009b20:	440b      	add	r3, r1
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	b21b      	sxth	r3, r3
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 8009b26:	4313      	orrs	r3, r2
 8009b28:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	1c9a      	adds	r2, r3, #2
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	601a      	str	r2, [r3, #0]
	return res;
 8009b34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3714      	adds	r7, #20
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <buffer_get_uint16>:

uint16_t buffer_get_uint16(const uint8_t *buffer, int32_t *index) {
 8009b44:	b480      	push	{r7}
 8009b46:	b085      	sub	sp, #20
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	461a      	mov	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	4413      	add	r3, r2
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	021b      	lsls	r3, r3, #8
 8009b5c:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	3301      	adds	r3, #1
 8009b64:	6879      	ldr	r1, [r7, #4]
 8009b66:	440b      	add	r3, r1
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	b21b      	sxth	r3, r3
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	b21b      	sxth	r3, r3
 8009b70:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	1c9a      	adds	r2, r3, #2
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	601a      	str	r2, [r3, #0]
	return res;
 8009b7c:	89fb      	ldrh	r3, [r7, #14]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3714      	adds	r7, #20
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr

08009b8a <buffer_get_int32>:

int32_t buffer_get_int32(const uint8_t *buffer, int32_t *index) {
 8009b8a:	b480      	push	{r7}
 8009b8c:	b085      	sub	sp, #20
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
 8009b92:	6039      	str	r1, [r7, #0]
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	461a      	mov	r2, r3
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	6879      	ldr	r1, [r7, #4]
 8009baa:	440b      	add	r3, r1
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	041b      	lsls	r3, r3, #16
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 8009bb0:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	3302      	adds	r3, #2
 8009bb8:	6879      	ldr	r1, [r7, #4]
 8009bba:	440b      	add	r3, r1
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 8009bc0:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 8009bc2:	683a      	ldr	r2, [r7, #0]
 8009bc4:	6812      	ldr	r2, [r2, #0]
 8009bc6:	3203      	adds	r2, #3
 8009bc8:	6879      	ldr	r1, [r7, #4]
 8009bca:	440a      	add	r2, r1
 8009bcc:	7812      	ldrb	r2, [r2, #0]
					((uint32_t) buffer[*index + 2]) << 8 |
 8009bce:	4313      	orrs	r3, r2
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 8009bd0:	60fb      	str	r3, [r7, #12]
	*index += 4;
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	1d1a      	adds	r2, r3, #4
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	601a      	str	r2, [r3, #0]
	return res;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3714      	adds	r7, #20
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr

08009bea <buffer_get_uint32>:

uint32_t buffer_get_uint32(const uint8_t *buffer, int32_t *index) {
 8009bea:	b480      	push	{r7}
 8009bec:	b085      	sub	sp, #20
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
 8009bf2:	6039      	str	r1, [r7, #0]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	3301      	adds	r3, #1
 8009c08:	6879      	ldr	r1, [r7, #4]
 8009c0a:	440b      	add	r3, r1
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	041b      	lsls	r3, r3, #16
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 8009c10:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	3302      	adds	r3, #2
 8009c18:	6879      	ldr	r1, [r7, #4]
 8009c1a:	440b      	add	r3, r1
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 8009c20:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	6812      	ldr	r2, [r2, #0]
 8009c26:	3203      	adds	r2, #3
 8009c28:	6879      	ldr	r1, [r7, #4]
 8009c2a:	440a      	add	r2, r1
 8009c2c:	7812      	ldrb	r2, [r2, #0]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	60fb      	str	r3, [r7, #12]
	*index += 4;
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	1d1a      	adds	r2, r3, #4
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	601a      	str	r2, [r3, #0]
	return res;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3714      	adds	r7, #20
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr

08009c4a <buffer_get_float16>:
					((uint64_t) buffer[*index + 7]);
	*index += 8;
	return res;
}

float buffer_get_float16(const uint8_t *buffer, float scale, int32_t *index) {
 8009c4a:	b580      	push	{r7, lr}
 8009c4c:	b084      	sub	sp, #16
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	60f8      	str	r0, [r7, #12]
 8009c52:	ed87 0a02 	vstr	s0, [r7, #8]
 8009c56:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int16(buffer, index) / scale;
 8009c58:	6879      	ldr	r1, [r7, #4]
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f7ff ff4f 	bl	8009afe <buffer_get_int16>
 8009c60:	4603      	mov	r3, r0
 8009c62:	ee07 3a90 	vmov	s15, r3
 8009c66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009c6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8009c6e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009c72:	eef0 7a66 	vmov.f32	s15, s13
}
 8009c76:	eeb0 0a67 	vmov.f32	s0, s15
 8009c7a:	3710      	adds	r7, #16
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <buffer_get_float32>:

float buffer_get_float32(const uint8_t *buffer, float scale, int32_t *index) {
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	ed87 0a02 	vstr	s0, [r7, #8]
 8009c8c:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int32(buffer, index) / scale;
 8009c8e:	6879      	ldr	r1, [r7, #4]
 8009c90:	68f8      	ldr	r0, [r7, #12]
 8009c92:	f7ff ff7a 	bl	8009b8a <buffer_get_int32>
 8009c96:	ee07 0a90 	vmov	s15, r0
 8009c9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009c9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8009ca2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009ca6:	eef0 7a66 	vmov.f32	s15, s13
}
 8009caa:	eeb0 0a67 	vmov.f32	s0, s15
 8009cae:	3710      	adds	r7, #16
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <buffer_get_float32_auto>:

double buffer_get_double64(const uint8_t *buffer, double scale, int32_t *index) {
    return (double)buffer_get_int64(buffer, index) / scale;
}

float buffer_get_float32_auto(const uint8_t *buffer, int32_t *index) {
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b088      	sub	sp, #32
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
	uint32_t res = buffer_get_uint32(buffer, index);
 8009cbe:	6839      	ldr	r1, [r7, #0]
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f7ff ff92 	bl	8009bea <buffer_get_uint32>
 8009cc6:	6178      	str	r0, [r7, #20]

	int e = (res >> 23) & 0xFF;
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	0ddb      	lsrs	r3, r3, #23
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	61fb      	str	r3, [r7, #28]
	uint32_t sig_i = res & 0x7FFFFF;
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009cd6:	613b      	str	r3, [r7, #16]
	bool neg = res & (1 << 31);
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	bf14      	ite	ne
 8009ce2:	2301      	movne	r3, #1
 8009ce4:	2300      	moveq	r3, #0
 8009ce6:	73fb      	strb	r3, [r7, #15]

	float sig = 0.0;
 8009ce8:	f04f 0300 	mov.w	r3, #0
 8009cec:	61bb      	str	r3, [r7, #24]
	if (e != 0 || sig_i != 0) {
 8009cee:	69fb      	ldr	r3, [r7, #28]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d102      	bne.n	8009cfa <buffer_get_float32_auto+0x46>
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d021      	beq.n	8009d3e <buffer_get_float32_auto+0x8a>
		sig = (float)sig_i / (8388608.0 * 2.0) + 0.5;
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	ee07 3a90 	vmov	s15, r3
 8009d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d04:	ee17 0a90 	vmov	r0, s15
 8009d08:	f7f6 fc1e 	bl	8000548 <__aeabi_f2d>
 8009d0c:	f04f 0200 	mov.w	r2, #0
 8009d10:	4b15      	ldr	r3, [pc, #84]	; (8009d68 <buffer_get_float32_auto+0xb4>)
 8009d12:	f7f6 fd9b 	bl	800084c <__aeabi_ddiv>
 8009d16:	4602      	mov	r2, r0
 8009d18:	460b      	mov	r3, r1
 8009d1a:	4610      	mov	r0, r2
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	f04f 0200 	mov.w	r2, #0
 8009d22:	4b12      	ldr	r3, [pc, #72]	; (8009d6c <buffer_get_float32_auto+0xb8>)
 8009d24:	f7f6 fab2 	bl	800028c <__adddf3>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	4610      	mov	r0, r2
 8009d2e:	4619      	mov	r1, r3
 8009d30:	f7f6 ff5a 	bl	8000be8 <__aeabi_d2f>
 8009d34:	4603      	mov	r3, r0
 8009d36:	61bb      	str	r3, [r7, #24]
		e -= 126;
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	3b7e      	subs	r3, #126	; 0x7e
 8009d3c:	61fb      	str	r3, [r7, #28]
	}

	if (neg) {
 8009d3e:	7bfb      	ldrb	r3, [r7, #15]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d005      	beq.n	8009d50 <buffer_get_float32_auto+0x9c>
		sig = -sig;
 8009d44:	edd7 7a06 	vldr	s15, [r7, #24]
 8009d48:	eef1 7a67 	vneg.f32	s15, s15
 8009d4c:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	return ldexpf(sig, e);
 8009d50:	69f8      	ldr	r0, [r7, #28]
 8009d52:	ed97 0a06 	vldr	s0, [r7, #24]
 8009d56:	f00c f99d 	bl	8016094 <ldexpf>
 8009d5a:	eef0 7a40 	vmov.f32	s15, s0
}
 8009d5e:	eeb0 0a67 	vmov.f32	s0, s15
 8009d62:	3720      	adds	r7, #32
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	41700000 	.word	0x41700000
 8009d6c:	3fe00000 	.word	0x3fe00000

08009d70 <crc16>:
		0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
		0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
 8009d70:	b480      	push	{r7}
 8009d72:	b085      	sub	sp, #20
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
	unsigned int i;
	unsigned short cksum = 0;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 8009d7e:	2300      	movs	r3, #0
 8009d80:	60fb      	str	r3, [r7, #12]
 8009d82:	e016      	b.n	8009db2 <crc16+0x42>
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 8009d84:	897b      	ldrh	r3, [r7, #10]
 8009d86:	0a1b      	lsrs	r3, r3, #8
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	1c5a      	adds	r2, r3, #1
 8009d90:	607a      	str	r2, [r7, #4]
 8009d92:	781b      	ldrb	r3, [r3, #0]
 8009d94:	404b      	eors	r3, r1
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	4a0b      	ldr	r2, [pc, #44]	; (8009dc8 <crc16+0x58>)
 8009d9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d9e:	b21a      	sxth	r2, r3
 8009da0:	897b      	ldrh	r3, [r7, #10]
 8009da2:	021b      	lsls	r3, r3, #8
 8009da4:	b21b      	sxth	r3, r3
 8009da6:	4053      	eors	r3, r2
 8009da8:	b21b      	sxth	r3, r3
 8009daa:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	3301      	adds	r3, #1
 8009db0:	60fb      	str	r3, [r7, #12]
 8009db2:	68fa      	ldr	r2, [r7, #12]
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d3e4      	bcc.n	8009d84 <crc16+0x14>
	}
	return cksum;
 8009dba:	897b      	ldrh	r3, [r7, #10]
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3714      	adds	r7, #20
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr
 8009dc8:	0801b0f0 	.word	0x0801b0f0

08009dcc <comm_can_send_buffer>:
 * 0: Packet goes to commands_process_packet of receiver
 * 1: Packet goes to commands_send_packet of receiver --> can use to send to other board?
 * 2: Packet goes to commands_process and send function is set to null
 *    so that no reply is sent back.
 */
void comm_can_send_buffer(uint8_t controller_id, uint8_t *data, unsigned int len, uint8_t send) {
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b08e      	sub	sp, #56	; 0x38
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60b9      	str	r1, [r7, #8]
 8009dd4:	607a      	str	r2, [r7, #4]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	4603      	mov	r3, r0
 8009dda:	73fb      	strb	r3, [r7, #15]
 8009ddc:	4613      	mov	r3, r2
 8009dde:	73bb      	strb	r3, [r7, #14]
	uint8_t send_buffer[8];

	if (len <= 6) {
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2b06      	cmp	r3, #6
 8009de4:	d82b      	bhi.n	8009e3e <comm_can_send_buffer+0x72>
		uint32_t ind = 0;
 8009de6:	2300      	movs	r3, #0
 8009de8:	61bb      	str	r3, [r7, #24]
		send_buffer[ind++] = (uint8_t)RNS_TO_VESC;
 8009dea:	69bb      	ldr	r3, [r7, #24]
 8009dec:	1c5a      	adds	r2, r3, #1
 8009dee:	61ba      	str	r2, [r7, #24]
 8009df0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009df4:	4413      	add	r3, r2
 8009df6:	221e      	movs	r2, #30
 8009df8:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = send;
 8009dfc:	69bb      	ldr	r3, [r7, #24]
 8009dfe:	1c5a      	adds	r2, r3, #1
 8009e00:	61ba      	str	r2, [r7, #24]
 8009e02:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009e06:	4413      	add	r3, r2
 8009e08:	7bba      	ldrb	r2, [r7, #14]
 8009e0a:	f803 2c28 	strb.w	r2, [r3, #-40]
		memcpy(send_buffer + ind, data, len);
 8009e0e:	f107 0210 	add.w	r2, r7, #16
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	4413      	add	r3, r2
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	68b9      	ldr	r1, [r7, #8]
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f00b f9f0 	bl	8015200 <memcpy>
		ind += len;
 8009e20:	69ba      	ldr	r2, [r7, #24]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4413      	add	r3, r2
 8009e26:	61bb      	str	r3, [r7, #24]
#if defined USED_CAN1
			CAN_TxMsgEID(&hcan1, controller_id |
 8009e28:	7bfb      	ldrb	r3, [r7, #15]
 8009e2a:	f443 6100 	orr.w	r1, r3, #2048	; 0x800
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	f107 0210 	add.w	r2, r7, #16
 8009e36:	4872      	ldr	r0, [pc, #456]	; (800a000 <comm_can_send_buffer+0x234>)
 8009e38:	f7f9 f9a8 	bl	800318c <CAN_TxMsgEID>
#elif defined USED_CAN2
			CAN_TxMsgEID(&hcan2, controller_id |
								((uint32_t)CAN_PACKET_PROCESS_RX_BUFFER << 8), send_buffer, ind++);
#endif
	}
}
 8009e3c:	e0dc      	b.n	8009ff8 <comm_can_send_buffer+0x22c>
		unsigned int end_a = 0;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	637b      	str	r3, [r7, #52]	; 0x34
		for (unsigned int i = 0;i < len;i += 7) {
 8009e42:	2300      	movs	r3, #0
 8009e44:	633b      	str	r3, [r7, #48]	; 0x30
 8009e46:	e03d      	b.n	8009ec4 <comm_can_send_buffer+0xf8>
			if (i > 255) {
 8009e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e4a:	2bff      	cmp	r3, #255	; 0xff
 8009e4c:	d83f      	bhi.n	8009ece <comm_can_send_buffer+0x102>
			end_a = i + 7;
 8009e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e50:	3307      	adds	r3, #7
 8009e52:	637b      	str	r3, [r7, #52]	; 0x34
			uint8_t send_len = 7;
 8009e54:	2307      	movs	r3, #7
 8009e56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			send_buffer[0] = i;
 8009e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	743b      	strb	r3, [r7, #16]
			if ((i + 7) <= len) {
 8009e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e62:	3307      	adds	r3, #7
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d30b      	bcc.n	8009e82 <comm_can_send_buffer+0xb6>
				memcpy(send_buffer + 1, data + i, send_len);
 8009e6a:	f107 0310 	add.w	r3, r7, #16
 8009e6e:	3301      	adds	r3, #1
 8009e70:	68b9      	ldr	r1, [r7, #8]
 8009e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e74:	4411      	add	r1, r2
 8009e76:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f00b f9c0 	bl	8015200 <memcpy>
 8009e80:	e011      	b.n	8009ea6 <comm_can_send_buffer+0xda>
				send_len = len - i;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	b2da      	uxtb	r2, r3
 8009e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	1ad3      	subs	r3, r2, r3
 8009e8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				memcpy(send_buffer + 1, data + i, send_len);
 8009e90:	f107 0310 	add.w	r3, r7, #16
 8009e94:	3301      	adds	r3, #1
 8009e96:	68b9      	ldr	r1, [r7, #8]
 8009e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e9a:	4411      	add	r1, r2
 8009e9c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f00b f9ad 	bl	8015200 <memcpy>
			CAN_TxMsgEID(&hcan1, controller_id |
 8009ea6:	7bfb      	ldrb	r3, [r7, #15]
 8009ea8:	f443 61a0 	orr.w	r1, r3, #1280	; 0x500
 8009eac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	f107 0210 	add.w	r2, r7, #16
 8009eb8:	4851      	ldr	r0, [pc, #324]	; (800a000 <comm_can_send_buffer+0x234>)
 8009eba:	f7f9 f967 	bl	800318c <CAN_TxMsgEID>
		for (unsigned int i = 0;i < len;i += 7) {
 8009ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec0:	3307      	adds	r3, #7
 8009ec2:	633b      	str	r3, [r7, #48]	; 0x30
 8009ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d3bd      	bcc.n	8009e48 <comm_can_send_buffer+0x7c>
 8009ecc:	e000      	b.n	8009ed0 <comm_can_send_buffer+0x104>
				break;
 8009ece:	bf00      	nop
		for (unsigned int i = end_a;i < len;i += 6) {
 8009ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ed2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ed4:	e03b      	b.n	8009f4e <comm_can_send_buffer+0x182>
			uint8_t send_len = 6;
 8009ed6:	2306      	movs	r3, #6
 8009ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			send_buffer[0] = i >> 8;
 8009edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ede:	0a1b      	lsrs	r3, r3, #8
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	743b      	strb	r3, [r7, #16]
			send_buffer[1] = i & 0xFF;
 8009ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	747b      	strb	r3, [r7, #17]
			if ((i + 6) <= len) {
 8009eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eec:	3306      	adds	r3, #6
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d30b      	bcc.n	8009f0c <comm_can_send_buffer+0x140>
				memcpy(send_buffer + 2, data + i, send_len);
 8009ef4:	f107 0310 	add.w	r3, r7, #16
 8009ef8:	3302      	adds	r3, #2
 8009efa:	68b9      	ldr	r1, [r7, #8]
 8009efc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009efe:	4411      	add	r1, r2
 8009f00:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009f04:	4618      	mov	r0, r3
 8009f06:	f00b f97b 	bl	8015200 <memcpy>
 8009f0a:	e011      	b.n	8009f30 <comm_can_send_buffer+0x164>
				send_len = len - i;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	b2da      	uxtb	r2, r3
 8009f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	1ad3      	subs	r3, r2, r3
 8009f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				memcpy(send_buffer + 2, data + i, send_len);
 8009f1a:	f107 0310 	add.w	r3, r7, #16
 8009f1e:	3302      	adds	r3, #2
 8009f20:	68b9      	ldr	r1, [r7, #8]
 8009f22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f24:	4411      	add	r1, r2
 8009f26:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f00b f968 	bl	8015200 <memcpy>
			CAN_TxMsgEID(&hcan1, controller_id |
 8009f30:	7bfb      	ldrb	r3, [r7, #15]
 8009f32:	f443 61c0 	orr.w	r1, r3, #1536	; 0x600
 8009f36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f3a:	3302      	adds	r3, #2
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	f107 0210 	add.w	r2, r7, #16
 8009f42:	482f      	ldr	r0, [pc, #188]	; (800a000 <comm_can_send_buffer+0x234>)
 8009f44:	f7f9 f922 	bl	800318c <CAN_TxMsgEID>
		for (unsigned int i = end_a;i < len;i += 6) {
 8009f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4a:	3306      	adds	r3, #6
 8009f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d3bf      	bcc.n	8009ed6 <comm_can_send_buffer+0x10a>
		uint32_t ind = 0;
 8009f56:	2300      	movs	r3, #0
 8009f58:	623b      	str	r3, [r7, #32]
		send_buffer[ind++] = (uint8_t)RNS_TO_VESC;
 8009f5a:	6a3b      	ldr	r3, [r7, #32]
 8009f5c:	1c5a      	adds	r2, r3, #1
 8009f5e:	623a      	str	r2, [r7, #32]
 8009f60:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009f64:	4413      	add	r3, r2
 8009f66:	221e      	movs	r2, #30
 8009f68:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = send;
 8009f6c:	6a3b      	ldr	r3, [r7, #32]
 8009f6e:	1c5a      	adds	r2, r3, #1
 8009f70:	623a      	str	r2, [r7, #32]
 8009f72:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009f76:	4413      	add	r3, r2
 8009f78:	7bba      	ldrb	r2, [r7, #14]
 8009f7a:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = len >> 8;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	0a19      	lsrs	r1, r3, #8
 8009f82:	6a3b      	ldr	r3, [r7, #32]
 8009f84:	1c5a      	adds	r2, r3, #1
 8009f86:	623a      	str	r2, [r7, #32]
 8009f88:	b2ca      	uxtb	r2, r1
 8009f8a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009f8e:	440b      	add	r3, r1
 8009f90:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = len & 0xFF;
 8009f94:	6a3b      	ldr	r3, [r7, #32]
 8009f96:	1c5a      	adds	r2, r3, #1
 8009f98:	623a      	str	r2, [r7, #32]
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	b2d2      	uxtb	r2, r2
 8009f9e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009fa2:	440b      	add	r3, r1
 8009fa4:	f803 2c28 	strb.w	r2, [r3, #-40]
		unsigned short crc = crc16(data, len);
 8009fa8:	6879      	ldr	r1, [r7, #4]
 8009faa:	68b8      	ldr	r0, [r7, #8]
 8009fac:	f7ff fee0 	bl	8009d70 <crc16>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	83fb      	strh	r3, [r7, #30]
		send_buffer[ind++] = (uint8_t)(crc >> 8);
 8009fb4:	8bfb      	ldrh	r3, [r7, #30]
 8009fb6:	0a1b      	lsrs	r3, r3, #8
 8009fb8:	b299      	uxth	r1, r3
 8009fba:	6a3b      	ldr	r3, [r7, #32]
 8009fbc:	1c5a      	adds	r2, r3, #1
 8009fbe:	623a      	str	r2, [r7, #32]
 8009fc0:	b2ca      	uxtb	r2, r1
 8009fc2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009fc6:	440b      	add	r3, r1
 8009fc8:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = (uint8_t)(crc & 0xFF);
 8009fcc:	6a3b      	ldr	r3, [r7, #32]
 8009fce:	1c5a      	adds	r2, r3, #1
 8009fd0:	623a      	str	r2, [r7, #32]
 8009fd2:	8bfa      	ldrh	r2, [r7, #30]
 8009fd4:	b2d2      	uxtb	r2, r2
 8009fd6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009fda:	440b      	add	r3, r1
 8009fdc:	f803 2c28 	strb.w	r2, [r3, #-40]
			CAN_TxMsgEID(&hcan1, controller_id |
 8009fe0:	7bfb      	ldrb	r3, [r7, #15]
 8009fe2:	f443 61e0 	orr.w	r1, r3, #1792	; 0x700
					((uint32_t)CAN_PACKET_PROCESS_RX_BUFFER << 8), send_buffer, ind++);
 8009fe6:	6a3b      	ldr	r3, [r7, #32]
 8009fe8:	1c5a      	adds	r2, r3, #1
 8009fea:	623a      	str	r2, [r7, #32]
			CAN_TxMsgEID(&hcan1, controller_id |
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	f107 0210 	add.w	r2, r7, #16
 8009ff2:	4803      	ldr	r0, [pc, #12]	; (800a000 <comm_can_send_buffer+0x234>)
 8009ff4:	f7f9 f8ca 	bl	800318c <CAN_TxMsgEID>
}
 8009ff8:	bf00      	nop
 8009ffa:	3738      	adds	r7, #56	; 0x38
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	20008838 	.word	0x20008838
 800a004:	00000000 	.word	0x00000000

0800a008 <comm_can_set_duty>:

void comm_can_set_duty(uint8_t controller_id, float duty) {
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	4603      	mov	r3, r0
 800a010:	ed87 0a00 	vstr	s0, [r7]
 800a014:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800a016:	2300      	movs	r3, #0
 800a018:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)(duty * 100000.0), &send_index);
 800a01a:	6838      	ldr	r0, [r7, #0]
 800a01c:	f7f6 fa94 	bl	8000548 <__aeabi_f2d>
 800a020:	a310      	add	r3, pc, #64	; (adr r3, 800a064 <comm_can_set_duty+0x5c>)
 800a022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a026:	f7f6 fae7 	bl	80005f8 <__aeabi_dmul>
 800a02a:	4602      	mov	r2, r0
 800a02c:	460b      	mov	r3, r1
 800a02e:	4610      	mov	r0, r2
 800a030:	4619      	mov	r1, r3
 800a032:	f7f6 fd91 	bl	8000b58 <__aeabi_d2iz>
 800a036:	4601      	mov	r1, r0
 800a038:	f107 020c 	add.w	r2, r7, #12
 800a03c:	f107 0308 	add.w	r3, r7, #8
 800a040:	4618      	mov	r0, r3
 800a042:	f7ff fd21 	bl	8009a88 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
 800a046:	79f9      	ldrb	r1, [r7, #7]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	f107 0208 	add.w	r2, r7, #8
 800a050:	4803      	ldr	r0, [pc, #12]	; (800a060 <comm_can_set_duty+0x58>)
 800a052:	f7f9 f89b 	bl	800318c <CAN_TxMsgEID>
			((uint32_t)CAN_PACKET_SET_DUTY << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
				((uint32_t)CAN_PACKET_SET_DUTY << 8), buffer, send_index);
#endif
}
 800a056:	bf00      	nop
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	20008838 	.word	0x20008838
 800a064:	00000000 	.word	0x00000000
 800a068:	40f86a00 	.word	0x40f86a00

0800a06c <comm_can_set_current>:

void comm_can_set_current(uint8_t controller_id, float current) {
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af00      	add	r7, sp, #0
 800a072:	4603      	mov	r3, r0
 800a074:	ed87 0a00 	vstr	s0, [r7]
 800a078:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800a07a:	2300      	movs	r3, #0
 800a07c:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)(current * 1000.0), &send_index);
 800a07e:	6838      	ldr	r0, [r7, #0]
 800a080:	f7f6 fa62 	bl	8000548 <__aeabi_f2d>
 800a084:	f04f 0200 	mov.w	r2, #0
 800a088:	4b0f      	ldr	r3, [pc, #60]	; (800a0c8 <comm_can_set_current+0x5c>)
 800a08a:	f7f6 fab5 	bl	80005f8 <__aeabi_dmul>
 800a08e:	4602      	mov	r2, r0
 800a090:	460b      	mov	r3, r1
 800a092:	4610      	mov	r0, r2
 800a094:	4619      	mov	r1, r3
 800a096:	f7f6 fd5f 	bl	8000b58 <__aeabi_d2iz>
 800a09a:	4601      	mov	r1, r0
 800a09c:	f107 020c 	add.w	r2, r7, #12
 800a0a0:	f107 0308 	add.w	r3, r7, #8
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7ff fcef 	bl	8009a88 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
 800a0aa:	79fb      	ldrb	r3, [r7, #7]
 800a0ac:	f443 7180 	orr.w	r1, r3, #256	; 0x100
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	f107 0208 	add.w	r2, r7, #8
 800a0b8:	4804      	ldr	r0, [pc, #16]	; (800a0cc <comm_can_set_current+0x60>)
 800a0ba:	f7f9 f867 	bl	800318c <CAN_TxMsgEID>
			((uint32_t)CAN_PACKET_SET_CURRENT << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
				((uint32_t)CAN_PACKET_SET_CURRENT << 8), buffer, send_index);
#endif
}
 800a0be:	bf00      	nop
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	408f4000 	.word	0x408f4000
 800a0cc:	20008838 	.word	0x20008838

0800a0d0 <comm_can_set_rpm>:
				((uint32_t)CAN_PACKET_SET_CURRENT_BRAKE << 8), buffer, send_index);
#endif

}

void comm_can_set_rpm(uint8_t controller_id, float rpm) {
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	ed87 0a00 	vstr	s0, [r7]
 800a0dc:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)rpm, &send_index);
 800a0e2:	edd7 7a00 	vldr	s15, [r7]
 800a0e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a0ea:	f107 020c 	add.w	r2, r7, #12
 800a0ee:	f107 0308 	add.w	r3, r7, #8
 800a0f2:	ee17 1a90 	vmov	r1, s15
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7ff fcc6 	bl	8009a88 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
 800a0fc:	79fb      	ldrb	r3, [r7, #7]
 800a0fe:	f443 7140 	orr.w	r1, r3, #768	; 0x300
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	b2db      	uxtb	r3, r3
 800a106:	f107 0208 	add.w	r2, r7, #8
 800a10a:	4803      	ldr	r0, [pc, #12]	; (800a118 <comm_can_set_rpm+0x48>)
 800a10c:	f7f9 f83e 	bl	800318c <CAN_TxMsgEID>
			((uint32_t)CAN_PACKET_SET_RPM << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
				((uint32_t)CAN_PACKET_SET_RPM << 8), buffer, send_index);
#endif
}
 800a110:	bf00      	nop
 800a112:	3710      	adds	r7, #16
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	20008838 	.word	0x20008838

0800a11c <decode_VESC>:
	CAN_TxMsgEID(&hcan2, controller_id |
				((uint32_t)CAN_PACKET_SET_CURRENT_HANDBRAKE_REL<< 8), buffer, send_index);
#endif
}

void decode_VESC(void){
 800a11c:	b5b0      	push	{r4, r5, r7, lr}
 800a11e:	b090      	sub	sp, #64	; 0x40
 800a120:	af00      	add	r7, sp, #0
	int32_t ind = 0;
 800a122:	2300      	movs	r3, #0
 800a124:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t crc_low;
	uint8_t crc_high;
	uint8_t commands_send;

	Vescmsg *rxmsg_tmp;
	while ((rxmsg_tmp = get_rx_frame()) != 0) {
 800a126:	e0dd      	b.n	800a2e4 <decode_VESC+0x1c8>
		Vescmsg rxmsg = *rxmsg_tmp;
 800a128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a12a:	1d3c      	adds	r4, r7, #4
 800a12c:	461d      	mov	r5, r3
 800a12e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a130:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a132:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a134:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a136:	682b      	ldr	r3, [r5, #0]
 800a138:	6023      	str	r3, [r4, #0]

		if (rxmsg.Rxmsg.IDE == CAN_ID_EXT) {
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2b04      	cmp	r3, #4
 800a13e:	f040 80c6 	bne.w	800a2ce <decode_VESC+0x1b2>
			uint8_t id = rxmsg.Rxmsg.ExtId & 0xFF;
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			CAN_PACKET_ID cmd = rxmsg.Rxmsg.ExtId >> 8;
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	0a1b      	lsrs	r3, r3, #8
 800a14c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

			if (id == 255 || id == RNS_TO_VESC) {
 800a150:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a154:	2bff      	cmp	r3, #255	; 0xff
 800a156:	d004      	beq.n	800a162 <decode_VESC+0x46>
 800a158:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a15c:	2b1e      	cmp	r3, #30
 800a15e:	f040 80b6 	bne.w	800a2ce <decode_VESC+0x1b2>
				switch (cmd) {
 800a162:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a166:	3b05      	subs	r3, #5
 800a168:	2b03      	cmp	r3, #3
 800a16a:	f200 80b2 	bhi.w	800a2d2 <decode_VESC+0x1b6>
 800a16e:	a201      	add	r2, pc, #4	; (adr r2, 800a174 <decode_VESC+0x58>)
 800a170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a174:	0800a185 	.word	0x0800a185
 800a178:	0800a1a1 	.word	0x0800a1a1
 800a17c:	0800a1d7 	.word	0x0800a1d7
 800a180:	0800a28f 	.word	0x0800a28f
				case CAN_PACKET_FILL_RX_BUFFER:
					memcpy(rx_buffer + rxmsg.Data[0], rxmsg.Data + 1, rxmsg.Rxmsg.DLC - 1);
 800a184:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a188:	461a      	mov	r2, r3
 800a18a:	4b5c      	ldr	r3, [pc, #368]	; (800a2fc <decode_VESC+0x1e0>)
 800a18c:	18d0      	adds	r0, r2, r3
 800a18e:	1d3b      	adds	r3, r7, #4
 800a190:	331c      	adds	r3, #28
 800a192:	3301      	adds	r3, #1
 800a194:	697a      	ldr	r2, [r7, #20]
 800a196:	3a01      	subs	r2, #1
 800a198:	4619      	mov	r1, r3
 800a19a:	f00b f831 	bl	8015200 <memcpy>
					break;
 800a19e:	e0a1      	b.n	800a2e4 <decode_VESC+0x1c8>

				case CAN_PACKET_FILL_RX_BUFFER_LONG:
					rxbuf_ind = (unsigned int)rxmsg.Data[0] << 8;
 800a1a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a1a4:	021b      	lsls	r3, r3, #8
 800a1a6:	62bb      	str	r3, [r7, #40]	; 0x28
					rxbuf_ind |= rxmsg.Data[1];
 800a1a8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (rxbuf_ind < RX_BUFFER_SIZE) {
 800a1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1ba:	f080 808c 	bcs.w	800a2d6 <decode_VESC+0x1ba>
						memcpy(rx_buffer + rxbuf_ind, rxmsg.Data + 2, rxmsg.Rxmsg.DLC - 2);
 800a1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c0:	4a4e      	ldr	r2, [pc, #312]	; (800a2fc <decode_VESC+0x1e0>)
 800a1c2:	1898      	adds	r0, r3, r2
 800a1c4:	1d3b      	adds	r3, r7, #4
 800a1c6:	331c      	adds	r3, #28
 800a1c8:	3302      	adds	r3, #2
 800a1ca:	697a      	ldr	r2, [r7, #20]
 800a1cc:	3a02      	subs	r2, #2
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	f00b f816 	bl	8015200 <memcpy>
					}
					break;
 800a1d4:	e07f      	b.n	800a2d6 <decode_VESC+0x1ba>

				case CAN_PACKET_PROCESS_RX_BUFFER:
					ind = 0;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	63bb      	str	r3, [r7, #56]	; 0x38
					rx_buffer_last_id = rxmsg.Data[ind++];
 800a1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1dc:	1c5a      	adds	r2, r3, #1
 800a1de:	63ba      	str	r2, [r7, #56]	; 0x38
 800a1e0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a1e4:	4413      	add	r3, r2
 800a1e6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	4b44      	ldr	r3, [pc, #272]	; (800a300 <decode_VESC+0x1e4>)
 800a1ee:	601a      	str	r2, [r3, #0]
					commands_send = rxmsg.Data[ind++];
 800a1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f2:	1c5a      	adds	r2, r3, #1
 800a1f4:	63ba      	str	r2, [r7, #56]	; 0x38
 800a1f6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a1fa:	4413      	add	r3, r2
 800a1fc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a200:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
					rxbuf_len = (unsigned int)rxmsg.Data[ind++] << 8;
 800a204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a206:	1c5a      	adds	r2, r3, #1
 800a208:	63ba      	str	r2, [r7, #56]	; 0x38
 800a20a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a20e:	4413      	add	r3, r2
 800a210:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a214:	021b      	lsls	r3, r3, #8
 800a216:	63fb      	str	r3, [r7, #60]	; 0x3c
					rxbuf_len |= (unsigned int)rxmsg.Data[ind++];
 800a218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a21a:	1c5a      	adds	r2, r3, #1
 800a21c:	63ba      	str	r2, [r7, #56]	; 0x38
 800a21e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a222:	4413      	add	r3, r2
 800a224:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a228:	461a      	mov	r2, r3
 800a22a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a22c:	4313      	orrs	r3, r2
 800a22e:	63fb      	str	r3, [r7, #60]	; 0x3c

					if (rxbuf_len > RX_BUFFER_SIZE) {
 800a230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a236:	d850      	bhi.n	800a2da <decode_VESC+0x1be>
						break;
					}

					crc_high = rxmsg.Data[ind++];
 800a238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a23a:	1c5a      	adds	r2, r3, #1
 800a23c:	63ba      	str	r2, [r7, #56]	; 0x38
 800a23e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a242:	4413      	add	r3, r2
 800a244:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a248:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
					crc_low = rxmsg.Data[ind++];
 800a24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a24e:	1c5a      	adds	r2, r3, #1
 800a250:	63ba      	str	r2, [r7, #56]	; 0x38
 800a252:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a256:	4413      	add	r3, r2
 800a258:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a25c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

					if (crc16(rx_buffer, rxbuf_len)
 800a260:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a262:	4826      	ldr	r0, [pc, #152]	; (800a2fc <decode_VESC+0x1e0>)
 800a264:	f7ff fd84 	bl	8009d70 <crc16>
 800a268:	4603      	mov	r3, r0
 800a26a:	4619      	mov	r1, r3
							== ((unsigned short) crc_high << 8
 800a26c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a270:	021a      	lsls	r2, r3, #8
									| (unsigned short) crc_low)) {
 800a272:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a276:	4313      	orrs	r3, r2
					if (crc16(rx_buffer, rxbuf_len)
 800a278:	4299      	cmp	r1, r3
 800a27a:	d130      	bne.n	800a2de <decode_VESC+0x1c2>
						if(commands_send==1)
 800a27c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a280:	2b01      	cmp	r3, #1
 800a282:	d12c      	bne.n	800a2de <decode_VESC+0x1c2>
							bldc_interface_process_packet(rx_buffer, rxbuf_len);
 800a284:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a286:	481d      	ldr	r0, [pc, #116]	; (800a2fc <decode_VESC+0x1e0>)
 800a288:	f7fd ff7e 	bl	8008188 <bldc_interface_process_packet>
					}
					break;
 800a28c:	e027      	b.n	800a2de <decode_VESC+0x1c2>

				case CAN_PACKET_PROCESS_SHORT_BUFFER:
					ind = 0;
 800a28e:	2300      	movs	r3, #0
 800a290:	63bb      	str	r3, [r7, #56]	; 0x38
					rx_buffer_last_id = rxmsg.Data[ind++];
 800a292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a294:	1c5a      	adds	r2, r3, #1
 800a296:	63ba      	str	r2, [r7, #56]	; 0x38
 800a298:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a29c:	4413      	add	r3, r2
 800a29e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	4b16      	ldr	r3, [pc, #88]	; (800a300 <decode_VESC+0x1e4>)
 800a2a6:	601a      	str	r2, [r3, #0]
					commands_send = rxmsg.Data[ind++];
 800a2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2aa:	1c5a      	adds	r2, r3, #1
 800a2ac:	63ba      	str	r2, [r7, #56]	; 0x38
 800a2ae:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a2b2:	4413      	add	r3, r2
 800a2b4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a2b8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

					if(commands_send==1)
 800a2bc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d10e      	bne.n	800a2e2 <decode_VESC+0x1c6>
						bldc_interface_process_packet(rx_buffer, rxbuf_len);
 800a2c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a2c6:	480d      	ldr	r0, [pc, #52]	; (800a2fc <decode_VESC+0x1e0>)
 800a2c8:	f7fd ff5e 	bl	8008188 <bldc_interface_process_packet>
					break;
 800a2cc:	e009      	b.n	800a2e2 <decode_VESC+0x1c6>
				default:
					break;
				}
			}
 800a2ce:	bf00      	nop
 800a2d0:	e008      	b.n	800a2e4 <decode_VESC+0x1c8>
					break;
 800a2d2:	bf00      	nop
 800a2d4:	e006      	b.n	800a2e4 <decode_VESC+0x1c8>
					break;
 800a2d6:	bf00      	nop
 800a2d8:	e004      	b.n	800a2e4 <decode_VESC+0x1c8>
						break;
 800a2da:	bf00      	nop
 800a2dc:	e002      	b.n	800a2e4 <decode_VESC+0x1c8>
					break;
 800a2de:	bf00      	nop
 800a2e0:	e000      	b.n	800a2e4 <decode_VESC+0x1c8>
					break;
 800a2e2:	bf00      	nop
	while ((rxmsg_tmp = get_rx_frame()) != 0) {
 800a2e4:	f000 f80e 	bl	800a304 <get_rx_frame>
 800a2e8:	6378      	str	r0, [r7, #52]	; 0x34
 800a2ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f47f af1b 	bne.w	800a128 <decode_VESC+0xc>
		}
	}
}
 800a2f2:	bf00      	nop
 800a2f4:	bf00      	nop
 800a2f6:	3740      	adds	r7, #64	; 0x40
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bdb0      	pop	{r4, r5, r7, pc}
 800a2fc:	20000824 	.word	0x20000824
 800a300:	20000a24 	.word	0x20000a24

0800a304 <get_rx_frame>:

Vescmsg *get_rx_frame(void) {
 800a304:	b480      	push	{r7}
 800a306:	b083      	sub	sp, #12
 800a308:	af00      	add	r7, sp, #0
	if (rx_frame_read != rx_frame_write){
 800a30a:	4b11      	ldr	r3, [pc, #68]	; (800a350 <get_rx_frame+0x4c>)
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	4b11      	ldr	r3, [pc, #68]	; (800a354 <get_rx_frame+0x50>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	429a      	cmp	r2, r3
 800a314:	d014      	beq.n	800a340 <get_rx_frame+0x3c>
		Vescmsg *res = &rx_frames[rx_frame_read++];
 800a316:	4b0e      	ldr	r3, [pc, #56]	; (800a350 <get_rx_frame+0x4c>)
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	1c53      	adds	r3, r2, #1
 800a31c:	490c      	ldr	r1, [pc, #48]	; (800a350 <get_rx_frame+0x4c>)
 800a31e:	600b      	str	r3, [r1, #0]
 800a320:	4613      	mov	r3, r2
 800a322:	00db      	lsls	r3, r3, #3
 800a324:	4413      	add	r3, r2
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	4a0b      	ldr	r2, [pc, #44]	; (800a358 <get_rx_frame+0x54>)
 800a32a:	4413      	add	r3, r2
 800a32c:	607b      	str	r3, [r7, #4]

		if (rx_frame_read == RX_FRAMES_SIZE){
 800a32e:	4b08      	ldr	r3, [pc, #32]	; (800a350 <get_rx_frame+0x4c>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	2b64      	cmp	r3, #100	; 0x64
 800a334:	d102      	bne.n	800a33c <get_rx_frame+0x38>
			rx_frame_read = 0;
 800a336:	4b06      	ldr	r3, [pc, #24]	; (800a350 <get_rx_frame+0x4c>)
 800a338:	2200      	movs	r2, #0
 800a33a:	601a      	str	r2, [r3, #0]
		}

		return res;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	e000      	b.n	800a342 <get_rx_frame+0x3e>
	} else
		return 0;
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	370c      	adds	r7, #12
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr
 800a34e:	bf00      	nop
 800a350:	20001838 	.word	0x20001838
 800a354:	2000183c 	.word	0x2000183c
 800a358:	20000a28 	.word	0x20000a28

0800a35c <set_rx_frames>:

uint8_t set_rx_frames(Vescmsg* CANRxFrame) {
 800a35c:	b4b0      	push	{r4, r5, r7}
 800a35e:	b085      	sub	sp, #20
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
	uint32_t cmd;

	rx_frames[rx_frame_write++] = *CANRxFrame;
 800a364:	4b16      	ldr	r3, [pc, #88]	; (800a3c0 <set_rx_frames+0x64>)
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	1c53      	adds	r3, r2, #1
 800a36a:	4915      	ldr	r1, [pc, #84]	; (800a3c0 <set_rx_frames+0x64>)
 800a36c:	600b      	str	r3, [r1, #0]
 800a36e:	4915      	ldr	r1, [pc, #84]	; (800a3c4 <set_rx_frames+0x68>)
 800a370:	4613      	mov	r3, r2
 800a372:	00db      	lsls	r3, r3, #3
 800a374:	4413      	add	r3, r2
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	18ca      	adds	r2, r1, r3
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	4614      	mov	r4, r2
 800a37e:	461d      	mov	r5, r3
 800a380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a388:	682b      	ldr	r3, [r5, #0]
 800a38a:	6023      	str	r3, [r4, #0]
	if (rx_frame_write == RX_FRAMES_SIZE) {
 800a38c:	4b0c      	ldr	r3, [pc, #48]	; (800a3c0 <set_rx_frames+0x64>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2b64      	cmp	r3, #100	; 0x64
 800a392:	d102      	bne.n	800a39a <set_rx_frames+0x3e>
		rx_frame_write = 0;
 800a394:	4b0a      	ldr	r3, [pc, #40]	; (800a3c0 <set_rx_frames+0x64>)
 800a396:	2200      	movs	r2, #0
 800a398:	601a      	str	r2, [r3, #0]
	}

	cmd = CANRxFrame->Rxmsg.ExtId >> 8;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	0a1b      	lsrs	r3, r3, #8
 800a3a0:	60fb      	str	r3, [r7, #12]
	if(cmd == (uint32_t)CAN_PACKET_PROCESS_RX_BUFFER || cmd == (uint32_t)CAN_PACKET_PROCESS_SHORT_BUFFER)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2b07      	cmp	r3, #7
 800a3a6:	d002      	beq.n	800a3ae <set_rx_frames+0x52>
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2b08      	cmp	r3, #8
 800a3ac:	d101      	bne.n	800a3b2 <set_rx_frames+0x56>
		return 112;
 800a3ae:	2370      	movs	r3, #112	; 0x70
 800a3b0:	e000      	b.n	800a3b4 <set_rx_frames+0x58>
	else
		return 0;
 800a3b2:	2300      	movs	r3, #0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3714      	adds	r7, #20
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bcb0      	pop	{r4, r5, r7}
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	2000183c 	.word	0x2000183c
 800a3c4:	20000a28 	.word	0x20000a28

0800a3c8 <VESCInit>:
 * 						  wheel_diameter 	wheel diameter
 * 						  vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCInit(40000,1,0.0037,&csev);
 */
void VESCInit(float max_rpm, float pole_pairs, float wheel_diameter,uint16_t Instance, VESC_t* vesc){
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b086      	sub	sp, #24
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	ed87 0a05 	vstr	s0, [r7, #20]
 800a3d2:	edc7 0a04 	vstr	s1, [r7, #16]
 800a3d6:	ed87 1a03 	vstr	s2, [r7, #12]
 800a3da:	4603      	mov	r3, r0
 800a3dc:	6079      	str	r1, [r7, #4]
 800a3de:	817b      	strh	r3, [r7, #10]
	bldc_interface_init(bldc_send_packet);
 800a3e0:	4809      	ldr	r0, [pc, #36]	; (800a408 <VESCInit+0x40>)
 800a3e2:	f7fd fec1 	bl	8008168 <bldc_interface_init>
//	bldc_interface_set_rx_value_selective_func(bldc_val_selective_received_cb);

	vesc->max_rpm = max_rpm;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	697a      	ldr	r2, [r7, #20]
 800a3ea:	601a      	str	r2, [r3, #0]
	vesc->pole_pairs = pole_pairs;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	693a      	ldr	r2, [r7, #16]
 800a3f0:	605a      	str	r2, [r3, #4]
	vesc->wheel_diameter = wheel_diameter;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	68fa      	ldr	r2, [r7, #12]
 800a3f6:	609a      	str	r2, [r3, #8]
	vesc->Instance = Instance;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	897a      	ldrh	r2, [r7, #10]
 800a3fc:	819a      	strh	r2, [r3, #12]
}
 800a3fe:	bf00      	nop
 800a400:	3718      	adds	r7, #24
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	0800a481 	.word	0x0800a481

0800a40c <VESCStop>:
 * Function Remarks		: NONE
 * Function Arguments	: vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCStop(&csev);
 */
void VESCStop(VESC_t* vesc) {
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]

	if(vesc->pdc_flag) {
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	7c1b      	ldrb	r3, [r3, #16]
 800a418:	f003 0304 	and.w	r3, r3, #4
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d007      	beq.n	800a432 <VESCStop+0x26>
		comm_can_set_duty(vesc->Instance, 0.0);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	899b      	ldrh	r3, [r3, #12]
 800a426:	b2db      	uxtb	r3, r3
 800a428:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800a47c <VESCStop+0x70>
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7ff fdeb 	bl	800a008 <comm_can_set_duty>
	}

	if(vesc->rpm_flag) {
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	7c1b      	ldrb	r3, [r3, #16]
 800a436:	f003 0302 	and.w	r3, r3, #2
 800a43a:	b2db      	uxtb	r3, r3
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d007      	beq.n	800a450 <VESCStop+0x44>
		comm_can_set_rpm(vesc->Instance, 0.0);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	899b      	ldrh	r3, [r3, #12]
 800a444:	b2db      	uxtb	r3, r3
 800a446:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800a47c <VESCStop+0x70>
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7ff fe40 	bl	800a0d0 <comm_can_set_rpm>
	}

	if(vesc->current_flag){
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	7c1b      	ldrb	r3, [r3, #16]
 800a454:	f003 0301 	and.w	r3, r3, #1
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d007      	beq.n	800a46e <VESCStop+0x62>
		comm_can_set_current(vesc->Instance, 0.0);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	899b      	ldrh	r3, [r3, #12]
 800a462:	b2db      	uxtb	r3, r3
 800a464:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800a47c <VESCStop+0x70>
 800a468:	4618      	mov	r0, r3
 800a46a:	f7ff fdff 	bl	800a06c <comm_can_set_current>
	}

	vesc->flags = 0;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	741a      	strb	r2, [r3, #16]
}
 800a474:	bf00      	nop
 800a476:	3708      	adds	r7, #8
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	00000000 	.word	0x00000000

0800a480 <bldc_send_packet>:
//	rx_value_complete = false;
	return rx_value_buf;
}

/*	Private Function	*/
void bldc_send_packet(uint8_t controller_id, uint8_t *data, unsigned int len) {
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	4603      	mov	r3, r0
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	607a      	str	r2, [r7, #4]
 800a48c:	73fb      	strb	r3, [r7, #15]
	comm_can_send_buffer(controller_id, data, len, 0);
 800a48e:	7bf8      	ldrb	r0, [r7, #15]
 800a490:	2300      	movs	r3, #0
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	68b9      	ldr	r1, [r7, #8]
 800a496:	f7ff fc99 	bl	8009dcc <comm_can_send_buffer>
}
 800a49a:	bf00      	nop
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
	...

0800a4a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800a4a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a4dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a4a8:	480d      	ldr	r0, [pc, #52]	; (800a4e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800a4aa:	490e      	ldr	r1, [pc, #56]	; (800a4e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800a4ac:	4a0e      	ldr	r2, [pc, #56]	; (800a4e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800a4ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a4b0:	e002      	b.n	800a4b8 <LoopCopyDataInit>

0800a4b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a4b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a4b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a4b6:	3304      	adds	r3, #4

0800a4b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a4b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a4ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a4bc:	d3f9      	bcc.n	800a4b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a4be:	4a0b      	ldr	r2, [pc, #44]	; (800a4ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800a4c0:	4c0b      	ldr	r4, [pc, #44]	; (800a4f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 800a4c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a4c4:	e001      	b.n	800a4ca <LoopFillZerobss>

0800a4c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a4c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a4c8:	3204      	adds	r2, #4

0800a4ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a4ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a4cc:	d3fb      	bcc.n	800a4c6 <FillZerobss>


/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a4ce:	f7fc feb1 	bl	8007234 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a4d2:	f00a fe69 	bl	80151a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a4d6:	f7f9 fbf1 	bl	8003cbc <main>
  bx  lr    
 800a4da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800a4dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a4e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a4e4:	20000418 	.word	0x20000418
  ldr r2, =_sidata
 800a4e8:	0801bb8c 	.word	0x0801bb8c
  ldr r2, =_sbss
 800a4ec:	20000418 	.word	0x20000418
  ldr r4, =_ebss
 800a4f0:	20008f20 	.word	0x20008f20

0800a4f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a4f4:	e7fe      	b.n	800a4f4 <ADC_IRQHandler>
	...

0800a4f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a4fc:	4b0e      	ldr	r3, [pc, #56]	; (800a538 <HAL_Init+0x40>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4a0d      	ldr	r2, [pc, #52]	; (800a538 <HAL_Init+0x40>)
 800a502:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a506:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a508:	4b0b      	ldr	r3, [pc, #44]	; (800a538 <HAL_Init+0x40>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a0a      	ldr	r2, [pc, #40]	; (800a538 <HAL_Init+0x40>)
 800a50e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a512:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a514:	4b08      	ldr	r3, [pc, #32]	; (800a538 <HAL_Init+0x40>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a07      	ldr	r2, [pc, #28]	; (800a538 <HAL_Init+0x40>)
 800a51a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a51e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a520:	2003      	movs	r0, #3
 800a522:	f000 ffcc 	bl	800b4be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a526:	2000      	movs	r0, #0
 800a528:	f7fc fd64 	bl	8006ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a52c:	f7f7 f9fc 	bl	8001928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a530:	2300      	movs	r3, #0
}
 800a532:	4618      	mov	r0, r3
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	40023c00 	.word	0x40023c00

0800a53c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a53c:	b480      	push	{r7}
 800a53e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a540:	4b06      	ldr	r3, [pc, #24]	; (800a55c <HAL_IncTick+0x20>)
 800a542:	781b      	ldrb	r3, [r3, #0]
 800a544:	461a      	mov	r2, r3
 800a546:	4b06      	ldr	r3, [pc, #24]	; (800a560 <HAL_IncTick+0x24>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4413      	add	r3, r2
 800a54c:	4a04      	ldr	r2, [pc, #16]	; (800a560 <HAL_IncTick+0x24>)
 800a54e:	6013      	str	r3, [r2, #0]
}
 800a550:	bf00      	nop
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr
 800a55a:	bf00      	nop
 800a55c:	2000023c 	.word	0x2000023c
 800a560:	20008eac 	.word	0x20008eac

0800a564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a564:	b480      	push	{r7}
 800a566:	af00      	add	r7, sp, #0
  return uwTick;
 800a568:	4b03      	ldr	r3, [pc, #12]	; (800a578 <HAL_GetTick+0x14>)
 800a56a:	681b      	ldr	r3, [r3, #0]
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop
 800a578:	20008eac 	.word	0x20008eac

0800a57c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a584:	f7ff ffee 	bl	800a564 <HAL_GetTick>
 800a588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a594:	d005      	beq.n	800a5a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a596:	4b0a      	ldr	r3, [pc, #40]	; (800a5c0 <HAL_Delay+0x44>)
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	461a      	mov	r2, r3
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	4413      	add	r3, r2
 800a5a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a5a2:	bf00      	nop
 800a5a4:	f7ff ffde 	bl	800a564 <HAL_GetTick>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	1ad3      	subs	r3, r2, r3
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d8f7      	bhi.n	800a5a4 <HAL_Delay+0x28>
  {
  }
}
 800a5b4:	bf00      	nop
 800a5b6:	bf00      	nop
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	2000023c 	.word	0x2000023c

0800a5c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b084      	sub	sp, #16
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d101      	bne.n	800a5d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e0ed      	b.n	800a7b2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d102      	bne.n	800a5e8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f7f7 f9cc 	bl	8001980 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f022 0202 	bic.w	r2, r2, #2
 800a5f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a5f8:	f7ff ffb4 	bl	800a564 <HAL_GetTick>
 800a5fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800a5fe:	e012      	b.n	800a626 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a600:	f7ff ffb0 	bl	800a564 <HAL_GetTick>
 800a604:	4602      	mov	r2, r0
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	1ad3      	subs	r3, r2, r3
 800a60a:	2b0a      	cmp	r3, #10
 800a60c:	d90b      	bls.n	800a626 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a612:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2205      	movs	r2, #5
 800a61e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	e0c5      	b.n	800a7b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	f003 0302 	and.w	r3, r3, #2
 800a630:	2b00      	cmp	r3, #0
 800a632:	d1e5      	bne.n	800a600 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f042 0201 	orr.w	r2, r2, #1
 800a642:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a644:	f7ff ff8e 	bl	800a564 <HAL_GetTick>
 800a648:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800a64a:	e012      	b.n	800a672 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a64c:	f7ff ff8a 	bl	800a564 <HAL_GetTick>
 800a650:	4602      	mov	r2, r0
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	1ad3      	subs	r3, r2, r3
 800a656:	2b0a      	cmp	r3, #10
 800a658:	d90b      	bls.n	800a672 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a65e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2205      	movs	r2, #5
 800a66a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800a66e:	2301      	movs	r3, #1
 800a670:	e09f      	b.n	800a7b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	f003 0301 	and.w	r3, r3, #1
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d0e5      	beq.n	800a64c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	7e1b      	ldrb	r3, [r3, #24]
 800a684:	2b01      	cmp	r3, #1
 800a686:	d108      	bne.n	800a69a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	681a      	ldr	r2, [r3, #0]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a696:	601a      	str	r2, [r3, #0]
 800a698:	e007      	b.n	800a6aa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	681a      	ldr	r2, [r3, #0]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a6a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	7e5b      	ldrb	r3, [r3, #25]
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d108      	bne.n	800a6c4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6c0:	601a      	str	r2, [r3, #0]
 800a6c2:	e007      	b.n	800a6d4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	7e9b      	ldrb	r3, [r3, #26]
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d108      	bne.n	800a6ee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	681a      	ldr	r2, [r3, #0]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f042 0220 	orr.w	r2, r2, #32
 800a6ea:	601a      	str	r2, [r3, #0]
 800a6ec:	e007      	b.n	800a6fe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f022 0220 	bic.w	r2, r2, #32
 800a6fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	7edb      	ldrb	r3, [r3, #27]
 800a702:	2b01      	cmp	r3, #1
 800a704:	d108      	bne.n	800a718 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f022 0210 	bic.w	r2, r2, #16
 800a714:	601a      	str	r2, [r3, #0]
 800a716:	e007      	b.n	800a728 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f042 0210 	orr.w	r2, r2, #16
 800a726:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	7f1b      	ldrb	r3, [r3, #28]
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d108      	bne.n	800a742 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f042 0208 	orr.w	r2, r2, #8
 800a73e:	601a      	str	r2, [r3, #0]
 800a740:	e007      	b.n	800a752 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f022 0208 	bic.w	r2, r2, #8
 800a750:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	7f5b      	ldrb	r3, [r3, #29]
 800a756:	2b01      	cmp	r3, #1
 800a758:	d108      	bne.n	800a76c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f042 0204 	orr.w	r2, r2, #4
 800a768:	601a      	str	r2, [r3, #0]
 800a76a:	e007      	b.n	800a77c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f022 0204 	bic.w	r2, r2, #4
 800a77a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	689a      	ldr	r2, [r3, #8]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	68db      	ldr	r3, [r3, #12]
 800a784:	431a      	orrs	r2, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	691b      	ldr	r3, [r3, #16]
 800a78a:	431a      	orrs	r2, r3
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	695b      	ldr	r3, [r3, #20]
 800a790:	ea42 0103 	orr.w	r1, r2, r3
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	1e5a      	subs	r2, r3, #1
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	430a      	orrs	r2, r1
 800a7a0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
	...

0800a7bc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b087      	sub	sp, #28
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a7d2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800a7d4:	7cfb      	ldrb	r3, [r7, #19]
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d003      	beq.n	800a7e2 <HAL_CAN_ConfigFilter+0x26>
 800a7da:	7cfb      	ldrb	r3, [r7, #19]
 800a7dc:	2b02      	cmp	r3, #2
 800a7de:	f040 80be 	bne.w	800a95e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800a7e2:	4b65      	ldr	r3, [pc, #404]	; (800a978 <HAL_CAN_ConfigFilter+0x1bc>)
 800a7e4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a7ec:	f043 0201 	orr.w	r2, r3, #1
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a7fc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a810:	021b      	lsls	r3, r3, #8
 800a812:	431a      	orrs	r2, r3
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	695b      	ldr	r3, [r3, #20]
 800a81e:	f003 031f 	and.w	r3, r3, #31
 800a822:	2201      	movs	r2, #1
 800a824:	fa02 f303 	lsl.w	r3, r2, r3
 800a828:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	43db      	mvns	r3, r3
 800a834:	401a      	ands	r2, r3
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	69db      	ldr	r3, [r3, #28]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d123      	bne.n	800a88c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	43db      	mvns	r3, r3
 800a84e:	401a      	ands	r2, r3
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a862:	683a      	ldr	r2, [r7, #0]
 800a864:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800a866:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	3248      	adds	r2, #72	; 0x48
 800a86c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	689b      	ldr	r3, [r3, #8]
 800a874:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a880:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a882:	6979      	ldr	r1, [r7, #20]
 800a884:	3348      	adds	r3, #72	; 0x48
 800a886:	00db      	lsls	r3, r3, #3
 800a888:	440b      	add	r3, r1
 800a88a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	69db      	ldr	r3, [r3, #28]
 800a890:	2b01      	cmp	r3, #1
 800a892:	d122      	bne.n	800a8da <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	431a      	orrs	r2, r3
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a8b0:	683a      	ldr	r2, [r7, #0]
 800a8b2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800a8b4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	3248      	adds	r2, #72	; 0x48
 800a8ba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a8ce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a8d0:	6979      	ldr	r1, [r7, #20]
 800a8d2:	3348      	adds	r3, #72	; 0x48
 800a8d4:	00db      	lsls	r3, r3, #3
 800a8d6:	440b      	add	r3, r1
 800a8d8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	699b      	ldr	r3, [r3, #24]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d109      	bne.n	800a8f6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	43db      	mvns	r3, r3
 800a8ec:	401a      	ands	r2, r3
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800a8f4:	e007      	b.n	800a906 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	431a      	orrs	r2, r3
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	691b      	ldr	r3, [r3, #16]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d109      	bne.n	800a922 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	43db      	mvns	r3, r3
 800a918:	401a      	ands	r2, r3
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800a920:	e007      	b.n	800a932 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	431a      	orrs	r2, r3
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	6a1b      	ldr	r3, [r3, #32]
 800a936:	2b01      	cmp	r3, #1
 800a938:	d107      	bne.n	800a94a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	431a      	orrs	r2, r3
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a950:	f023 0201 	bic.w	r2, r3, #1
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800a95a:	2300      	movs	r3, #0
 800a95c:	e006      	b.n	800a96c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a962:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a96a:	2301      	movs	r3, #1
  }
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	371c      	adds	r7, #28
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr
 800a978:	40006400 	.word	0x40006400

0800a97c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d12e      	bne.n	800a9ee <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2202      	movs	r2, #2
 800a994:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f022 0201 	bic.w	r2, r2, #1
 800a9a6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a9a8:	f7ff fddc 	bl	800a564 <HAL_GetTick>
 800a9ac:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800a9ae:	e012      	b.n	800a9d6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a9b0:	f7ff fdd8 	bl	800a564 <HAL_GetTick>
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	1ad3      	subs	r3, r2, r3
 800a9ba:	2b0a      	cmp	r3, #10
 800a9bc:	d90b      	bls.n	800a9d6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2205      	movs	r2, #5
 800a9ce:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	e012      	b.n	800a9fc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	f003 0301 	and.w	r3, r3, #1
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d1e5      	bne.n	800a9b0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	e006      	b.n	800a9fc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a9fa:	2301      	movs	r3, #1
  }
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b089      	sub	sp, #36	; 0x24
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	60b9      	str	r1, [r7, #8]
 800aa0e:	607a      	str	r2, [r7, #4]
 800aa10:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aa18:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800aa22:	7ffb      	ldrb	r3, [r7, #31]
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d003      	beq.n	800aa30 <HAL_CAN_AddTxMessage+0x2c>
 800aa28:	7ffb      	ldrb	r3, [r7, #31]
 800aa2a:	2b02      	cmp	r3, #2
 800aa2c:	f040 80b8 	bne.w	800aba0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800aa30:	69bb      	ldr	r3, [r7, #24]
 800aa32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d10a      	bne.n	800aa50 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800aa3a:	69bb      	ldr	r3, [r7, #24]
 800aa3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d105      	bne.n	800aa50 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800aa44:	69bb      	ldr	r3, [r7, #24]
 800aa46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	f000 80a0 	beq.w	800ab90 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800aa50:	69bb      	ldr	r3, [r7, #24]
 800aa52:	0e1b      	lsrs	r3, r3, #24
 800aa54:	f003 0303 	and.w	r3, r3, #3
 800aa58:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	2b02      	cmp	r3, #2
 800aa5e:	d907      	bls.n	800aa70 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa64:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e09e      	b.n	800abae <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800aa70:	2201      	movs	r2, #1
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	409a      	lsls	r2, r3
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	689b      	ldr	r3, [r3, #8]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d10d      	bne.n	800aa9e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800aa8c:	68f9      	ldr	r1, [r7, #12]
 800aa8e:	6809      	ldr	r1, [r1, #0]
 800aa90:	431a      	orrs	r2, r3
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	3318      	adds	r3, #24
 800aa96:	011b      	lsls	r3, r3, #4
 800aa98:	440b      	add	r3, r1
 800aa9a:	601a      	str	r2, [r3, #0]
 800aa9c:	e00f      	b.n	800aabe <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800aaa8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800aaae:	68f9      	ldr	r1, [r7, #12]
 800aab0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800aab2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	3318      	adds	r3, #24
 800aab8:	011b      	lsls	r3, r3, #4
 800aaba:	440b      	add	r3, r1
 800aabc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	6819      	ldr	r1, [r3, #0]
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	691a      	ldr	r2, [r3, #16]
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	3318      	adds	r3, #24
 800aaca:	011b      	lsls	r3, r3, #4
 800aacc:	440b      	add	r3, r1
 800aace:	3304      	adds	r3, #4
 800aad0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	7d1b      	ldrb	r3, [r3, #20]
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	d111      	bne.n	800aafe <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	3318      	adds	r3, #24
 800aae2:	011b      	lsls	r3, r3, #4
 800aae4:	4413      	add	r3, r2
 800aae6:	3304      	adds	r3, #4
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	68fa      	ldr	r2, [r7, #12]
 800aaec:	6811      	ldr	r1, [r2, #0]
 800aaee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	3318      	adds	r3, #24
 800aaf6:	011b      	lsls	r3, r3, #4
 800aaf8:	440b      	add	r3, r1
 800aafa:	3304      	adds	r3, #4
 800aafc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	3307      	adds	r3, #7
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	061a      	lsls	r2, r3, #24
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	3306      	adds	r3, #6
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	041b      	lsls	r3, r3, #16
 800ab0e:	431a      	orrs	r2, r3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	3305      	adds	r3, #5
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	021b      	lsls	r3, r3, #8
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	3204      	adds	r2, #4
 800ab1e:	7812      	ldrb	r2, [r2, #0]
 800ab20:	4610      	mov	r0, r2
 800ab22:	68fa      	ldr	r2, [r7, #12]
 800ab24:	6811      	ldr	r1, [r2, #0]
 800ab26:	ea43 0200 	orr.w	r2, r3, r0
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	011b      	lsls	r3, r3, #4
 800ab2e:	440b      	add	r3, r1
 800ab30:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800ab34:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	3303      	adds	r3, #3
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	061a      	lsls	r2, r3, #24
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	3302      	adds	r3, #2
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	041b      	lsls	r3, r3, #16
 800ab46:	431a      	orrs	r2, r3
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	021b      	lsls	r3, r3, #8
 800ab50:	4313      	orrs	r3, r2
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	7812      	ldrb	r2, [r2, #0]
 800ab56:	4610      	mov	r0, r2
 800ab58:	68fa      	ldr	r2, [r7, #12]
 800ab5a:	6811      	ldr	r1, [r2, #0]
 800ab5c:	ea43 0200 	orr.w	r2, r3, r0
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	011b      	lsls	r3, r3, #4
 800ab64:	440b      	add	r3, r1
 800ab66:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800ab6a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	3318      	adds	r3, #24
 800ab74:	011b      	lsls	r3, r3, #4
 800ab76:	4413      	add	r3, r2
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	68fa      	ldr	r2, [r7, #12]
 800ab7c:	6811      	ldr	r1, [r2, #0]
 800ab7e:	f043 0201 	orr.w	r2, r3, #1
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	3318      	adds	r3, #24
 800ab86:	011b      	lsls	r3, r3, #4
 800ab88:	440b      	add	r3, r1
 800ab8a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	e00e      	b.n	800abae <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab94:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	e006      	b.n	800abae <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800abac:	2301      	movs	r3, #1
  }
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3724      	adds	r7, #36	; 0x24
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr

0800abba <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800abba:	b480      	push	{r7}
 800abbc:	b085      	sub	sp, #20
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800abc2:	2300      	movs	r3, #0
 800abc4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800abcc:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800abce:	7afb      	ldrb	r3, [r7, #11]
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d002      	beq.n	800abda <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800abd4:	7afb      	ldrb	r3, [r7, #11]
 800abd6:	2b02      	cmp	r3, #2
 800abd8:	d11d      	bne.n	800ac16 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d002      	beq.n	800abee <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	3301      	adds	r3, #1
 800abec:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	689b      	ldr	r3, [r3, #8]
 800abf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d002      	beq.n	800ac02 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	3301      	adds	r3, #1
 800ac00:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	689b      	ldr	r3, [r3, #8]
 800ac08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d002      	beq.n	800ac16 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	3301      	adds	r3, #1
 800ac14:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800ac16:	68fb      	ldr	r3, [r7, #12]
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3714      	adds	r7, #20
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr

0800ac24 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800ac24:	b480      	push	{r7}
 800ac26:	b087      	sub	sp, #28
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	60f8      	str	r0, [r7, #12]
 800ac2c:	60b9      	str	r1, [r7, #8]
 800ac2e:	607a      	str	r2, [r7, #4]
 800ac30:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ac38:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800ac3a:	7dfb      	ldrb	r3, [r7, #23]
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d003      	beq.n	800ac48 <HAL_CAN_GetRxMessage+0x24>
 800ac40:	7dfb      	ldrb	r3, [r7, #23]
 800ac42:	2b02      	cmp	r3, #2
 800ac44:	f040 80f3 	bne.w	800ae2e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d10e      	bne.n	800ac6c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	68db      	ldr	r3, [r3, #12]
 800ac54:	f003 0303 	and.w	r3, r3, #3
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d116      	bne.n	800ac8a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac60:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e0e7      	b.n	800ae3c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	691b      	ldr	r3, [r3, #16]
 800ac72:	f003 0303 	and.w	r3, r3, #3
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d107      	bne.n	800ac8a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	e0d8      	b.n	800ae3c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681a      	ldr	r2, [r3, #0]
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	331b      	adds	r3, #27
 800ac92:	011b      	lsls	r3, r3, #4
 800ac94:	4413      	add	r3, r2
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f003 0204 	and.w	r2, r3, #4
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d10c      	bne.n	800acc2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	331b      	adds	r3, #27
 800acb0:	011b      	lsls	r3, r3, #4
 800acb2:	4413      	add	r3, r2
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	0d5b      	lsrs	r3, r3, #21
 800acb8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	601a      	str	r2, [r3, #0]
 800acc0:	e00b      	b.n	800acda <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681a      	ldr	r2, [r3, #0]
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	331b      	adds	r3, #27
 800acca:	011b      	lsls	r3, r3, #4
 800accc:	4413      	add	r3, r2
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	08db      	lsrs	r3, r3, #3
 800acd2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	331b      	adds	r3, #27
 800ace2:	011b      	lsls	r3, r3, #4
 800ace4:	4413      	add	r3, r2
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f003 0202 	and.w	r2, r3, #2
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	331b      	adds	r3, #27
 800acf8:	011b      	lsls	r3, r3, #4
 800acfa:	4413      	add	r3, r2
 800acfc:	3304      	adds	r3, #4
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f003 020f 	and.w	r2, r3, #15
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	331b      	adds	r3, #27
 800ad10:	011b      	lsls	r3, r3, #4
 800ad12:	4413      	add	r3, r2
 800ad14:	3304      	adds	r3, #4
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	0a1b      	lsrs	r3, r3, #8
 800ad1a:	b2da      	uxtb	r2, r3
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681a      	ldr	r2, [r3, #0]
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	331b      	adds	r3, #27
 800ad28:	011b      	lsls	r3, r3, #4
 800ad2a:	4413      	add	r3, r2
 800ad2c:	3304      	adds	r3, #4
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	0c1b      	lsrs	r3, r3, #16
 800ad32:	b29a      	uxth	r2, r3
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681a      	ldr	r2, [r3, #0]
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	011b      	lsls	r3, r3, #4
 800ad40:	4413      	add	r3, r2
 800ad42:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	b2da      	uxtb	r2, r3
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	011b      	lsls	r3, r3, #4
 800ad56:	4413      	add	r3, r2
 800ad58:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	0a1a      	lsrs	r2, r3, #8
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	3301      	adds	r3, #1
 800ad64:	b2d2      	uxtb	r2, r2
 800ad66:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	011b      	lsls	r3, r3, #4
 800ad70:	4413      	add	r3, r2
 800ad72:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	0c1a      	lsrs	r2, r3, #16
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	3302      	adds	r3, #2
 800ad7e:	b2d2      	uxtb	r2, r2
 800ad80:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681a      	ldr	r2, [r3, #0]
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	011b      	lsls	r3, r3, #4
 800ad8a:	4413      	add	r3, r2
 800ad8c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	0e1a      	lsrs	r2, r3, #24
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	3303      	adds	r3, #3
 800ad98:	b2d2      	uxtb	r2, r2
 800ad9a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681a      	ldr	r2, [r3, #0]
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	011b      	lsls	r3, r3, #4
 800ada4:	4413      	add	r3, r2
 800ada6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	3304      	adds	r3, #4
 800adb0:	b2d2      	uxtb	r2, r2
 800adb2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	011b      	lsls	r3, r3, #4
 800adbc:	4413      	add	r3, r2
 800adbe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	0a1a      	lsrs	r2, r3, #8
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	3305      	adds	r3, #5
 800adca:	b2d2      	uxtb	r2, r2
 800adcc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	011b      	lsls	r3, r3, #4
 800add6:	4413      	add	r3, r2
 800add8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	0c1a      	lsrs	r2, r3, #16
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	3306      	adds	r3, #6
 800ade4:	b2d2      	uxtb	r2, r2
 800ade6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	011b      	lsls	r3, r3, #4
 800adf0:	4413      	add	r3, r2
 800adf2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	0e1a      	lsrs	r2, r3, #24
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	3307      	adds	r3, #7
 800adfe:	b2d2      	uxtb	r2, r2
 800ae00:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d108      	bne.n	800ae1a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	68da      	ldr	r2, [r3, #12]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f042 0220 	orr.w	r2, r2, #32
 800ae16:	60da      	str	r2, [r3, #12]
 800ae18:	e007      	b.n	800ae2a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	691a      	ldr	r2, [r3, #16]
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f042 0220 	orr.w	r2, r2, #32
 800ae28:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	e006      	b.n	800ae3c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae32:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800ae3a:	2301      	movs	r3, #1
  }
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	371c      	adds	r7, #28
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b085      	sub	sp, #20
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ae58:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800ae5a:	7bfb      	ldrb	r3, [r7, #15]
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d002      	beq.n	800ae66 <HAL_CAN_ActivateNotification+0x1e>
 800ae60:	7bfb      	ldrb	r3, [r7, #15]
 800ae62:	2b02      	cmp	r3, #2
 800ae64:	d109      	bne.n	800ae7a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	6959      	ldr	r1, [r3, #20]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	683a      	ldr	r2, [r7, #0]
 800ae72:	430a      	orrs	r2, r1
 800ae74:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800ae76:	2300      	movs	r3, #0
 800ae78:	e006      	b.n	800ae88 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
  }
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3714      	adds	r7, #20
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr

0800ae94 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b08a      	sub	sp, #40	; 0x28
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	695b      	ldr	r3, [r3, #20]
 800aea6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	689b      	ldr	r3, [r3, #8]
 800aeb6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	68db      	ldr	r3, [r3, #12]
 800aebe:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	691b      	ldr	r3, [r3, #16]
 800aec6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	699b      	ldr	r3, [r3, #24]
 800aece:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800aed0:	6a3b      	ldr	r3, [r7, #32]
 800aed2:	f003 0301 	and.w	r3, r3, #1
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d07c      	beq.n	800afd4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	f003 0301 	and.w	r3, r3, #1
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d023      	beq.n	800af2c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2201      	movs	r2, #1
 800aeea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800aeec:	69bb      	ldr	r3, [r7, #24]
 800aeee:	f003 0302 	and.w	r3, r3, #2
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d003      	beq.n	800aefe <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 f983 	bl	800b202 <HAL_CAN_TxMailbox0CompleteCallback>
 800aefc:	e016      	b.n	800af2c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800aefe:	69bb      	ldr	r3, [r7, #24]
 800af00:	f003 0304 	and.w	r3, r3, #4
 800af04:	2b00      	cmp	r3, #0
 800af06:	d004      	beq.n	800af12 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800af08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800af0e:	627b      	str	r3, [r7, #36]	; 0x24
 800af10:	e00c      	b.n	800af2c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800af12:	69bb      	ldr	r3, [r7, #24]
 800af14:	f003 0308 	and.w	r3, r3, #8
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d004      	beq.n	800af26 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800af1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800af22:	627b      	str	r3, [r7, #36]	; 0x24
 800af24:	e002      	b.n	800af2c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 f989 	bl	800b23e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800af2c:	69bb      	ldr	r3, [r7, #24]
 800af2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af32:	2b00      	cmp	r3, #0
 800af34:	d024      	beq.n	800af80 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af3e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800af40:	69bb      	ldr	r3, [r7, #24]
 800af42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800af46:	2b00      	cmp	r3, #0
 800af48:	d003      	beq.n	800af52 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f000 f963 	bl	800b216 <HAL_CAN_TxMailbox1CompleteCallback>
 800af50:	e016      	b.n	800af80 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800af52:	69bb      	ldr	r3, [r7, #24]
 800af54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d004      	beq.n	800af66 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800af5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800af62:	627b      	str	r3, [r7, #36]	; 0x24
 800af64:	e00c      	b.n	800af80 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800af66:	69bb      	ldr	r3, [r7, #24]
 800af68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d004      	beq.n	800af7a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800af70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af76:	627b      	str	r3, [r7, #36]	; 0x24
 800af78:	e002      	b.n	800af80 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 f969 	bl	800b252 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800af80:	69bb      	ldr	r3, [r7, #24]
 800af82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af86:	2b00      	cmp	r3, #0
 800af88:	d024      	beq.n	800afd4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800af92:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800af94:	69bb      	ldr	r3, [r7, #24]
 800af96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d003      	beq.n	800afa6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 f943 	bl	800b22a <HAL_CAN_TxMailbox2CompleteCallback>
 800afa4:	e016      	b.n	800afd4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800afa6:	69bb      	ldr	r3, [r7, #24]
 800afa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800afac:	2b00      	cmp	r3, #0
 800afae:	d004      	beq.n	800afba <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800afb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afb6:	627b      	str	r3, [r7, #36]	; 0x24
 800afb8:	e00c      	b.n	800afd4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800afba:	69bb      	ldr	r3, [r7, #24]
 800afbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d004      	beq.n	800afce <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800afc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afca:	627b      	str	r3, [r7, #36]	; 0x24
 800afcc:	e002      	b.n	800afd4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f000 f949 	bl	800b266 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800afd4:	6a3b      	ldr	r3, [r7, #32]
 800afd6:	f003 0308 	and.w	r3, r3, #8
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d00c      	beq.n	800aff8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	f003 0310 	and.w	r3, r3, #16
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d007      	beq.n	800aff8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800afe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800afee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	2210      	movs	r2, #16
 800aff6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800aff8:	6a3b      	ldr	r3, [r7, #32]
 800affa:	f003 0304 	and.w	r3, r3, #4
 800affe:	2b00      	cmp	r3, #0
 800b000:	d00b      	beq.n	800b01a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	f003 0308 	and.w	r3, r3, #8
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d006      	beq.n	800b01a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2208      	movs	r2, #8
 800b012:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 f930 	bl	800b27a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800b01a:	6a3b      	ldr	r3, [r7, #32]
 800b01c:	f003 0302 	and.w	r3, r3, #2
 800b020:	2b00      	cmp	r3, #0
 800b022:	d009      	beq.n	800b038 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	68db      	ldr	r3, [r3, #12]
 800b02a:	f003 0303 	and.w	r3, r3, #3
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d002      	beq.n	800b038 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f7fb f820 	bl	8006078 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800b038:	6a3b      	ldr	r3, [r7, #32]
 800b03a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d00c      	beq.n	800b05c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	f003 0310 	and.w	r3, r3, #16
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d007      	beq.n	800b05c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800b04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b052:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	2210      	movs	r2, #16
 800b05a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800b05c:	6a3b      	ldr	r3, [r7, #32]
 800b05e:	f003 0320 	and.w	r3, r3, #32
 800b062:	2b00      	cmp	r3, #0
 800b064:	d00b      	beq.n	800b07e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	f003 0308 	and.w	r3, r3, #8
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d006      	beq.n	800b07e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	2208      	movs	r2, #8
 800b076:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 f908 	bl	800b28e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800b07e:	6a3b      	ldr	r3, [r7, #32]
 800b080:	f003 0310 	and.w	r3, r3, #16
 800b084:	2b00      	cmp	r3, #0
 800b086:	d009      	beq.n	800b09c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	691b      	ldr	r3, [r3, #16]
 800b08e:	f003 0303 	and.w	r3, r3, #3
 800b092:	2b00      	cmp	r3, #0
 800b094:	d002      	beq.n	800b09c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f7fb f918 	bl	80062cc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800b09c:	6a3b      	ldr	r3, [r7, #32]
 800b09e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d00b      	beq.n	800b0be <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800b0a6:	69fb      	ldr	r3, [r7, #28]
 800b0a8:	f003 0310 	and.w	r3, r3, #16
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d006      	beq.n	800b0be <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	2210      	movs	r2, #16
 800b0b6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f000 f8f2 	bl	800b2a2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800b0be:	6a3b      	ldr	r3, [r7, #32]
 800b0c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d00b      	beq.n	800b0e0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800b0c8:	69fb      	ldr	r3, [r7, #28]
 800b0ca:	f003 0308 	and.w	r3, r3, #8
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d006      	beq.n	800b0e0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	2208      	movs	r2, #8
 800b0d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f000 f8eb 	bl	800b2b6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800b0e0:	6a3b      	ldr	r3, [r7, #32]
 800b0e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d07b      	beq.n	800b1e2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	f003 0304 	and.w	r3, r3, #4
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d072      	beq.n	800b1da <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800b0f4:	6a3b      	ldr	r3, [r7, #32]
 800b0f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d008      	beq.n	800b110 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800b104:	2b00      	cmp	r3, #0
 800b106:	d003      	beq.n	800b110 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800b108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10a:	f043 0301 	orr.w	r3, r3, #1
 800b10e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800b110:	6a3b      	ldr	r3, [r7, #32]
 800b112:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b116:	2b00      	cmp	r3, #0
 800b118:	d008      	beq.n	800b12c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800b120:	2b00      	cmp	r3, #0
 800b122:	d003      	beq.n	800b12c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800b124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b126:	f043 0302 	orr.w	r3, r3, #2
 800b12a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800b12c:	6a3b      	ldr	r3, [r7, #32]
 800b12e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b132:	2b00      	cmp	r3, #0
 800b134:	d008      	beq.n	800b148 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d003      	beq.n	800b148 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800b140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b142:	f043 0304 	orr.w	r3, r3, #4
 800b146:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800b148:	6a3b      	ldr	r3, [r7, #32]
 800b14a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d043      	beq.n	800b1da <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d03e      	beq.n	800b1da <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b162:	2b60      	cmp	r3, #96	; 0x60
 800b164:	d02b      	beq.n	800b1be <HAL_CAN_IRQHandler+0x32a>
 800b166:	2b60      	cmp	r3, #96	; 0x60
 800b168:	d82e      	bhi.n	800b1c8 <HAL_CAN_IRQHandler+0x334>
 800b16a:	2b50      	cmp	r3, #80	; 0x50
 800b16c:	d022      	beq.n	800b1b4 <HAL_CAN_IRQHandler+0x320>
 800b16e:	2b50      	cmp	r3, #80	; 0x50
 800b170:	d82a      	bhi.n	800b1c8 <HAL_CAN_IRQHandler+0x334>
 800b172:	2b40      	cmp	r3, #64	; 0x40
 800b174:	d019      	beq.n	800b1aa <HAL_CAN_IRQHandler+0x316>
 800b176:	2b40      	cmp	r3, #64	; 0x40
 800b178:	d826      	bhi.n	800b1c8 <HAL_CAN_IRQHandler+0x334>
 800b17a:	2b30      	cmp	r3, #48	; 0x30
 800b17c:	d010      	beq.n	800b1a0 <HAL_CAN_IRQHandler+0x30c>
 800b17e:	2b30      	cmp	r3, #48	; 0x30
 800b180:	d822      	bhi.n	800b1c8 <HAL_CAN_IRQHandler+0x334>
 800b182:	2b10      	cmp	r3, #16
 800b184:	d002      	beq.n	800b18c <HAL_CAN_IRQHandler+0x2f8>
 800b186:	2b20      	cmp	r3, #32
 800b188:	d005      	beq.n	800b196 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800b18a:	e01d      	b.n	800b1c8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800b18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18e:	f043 0308 	orr.w	r3, r3, #8
 800b192:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b194:	e019      	b.n	800b1ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800b196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b198:	f043 0310 	orr.w	r3, r3, #16
 800b19c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b19e:	e014      	b.n	800b1ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800b1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a2:	f043 0320 	orr.w	r3, r3, #32
 800b1a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b1a8:	e00f      	b.n	800b1ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800b1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b1b2:	e00a      	b.n	800b1ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800b1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b1bc:	e005      	b.n	800b1ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800b1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b1c6:	e000      	b.n	800b1ca <HAL_CAN_IRQHandler+0x336>
            break;
 800b1c8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	699a      	ldr	r2, [r3, #24]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b1d8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	2204      	movs	r2, #4
 800b1e0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800b1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d008      	beq.n	800b1fa <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ee:	431a      	orrs	r2, r3
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f000 f868 	bl	800b2ca <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800b1fa:	bf00      	nop
 800b1fc:	3728      	adds	r7, #40	; 0x28
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800b202:	b480      	push	{r7}
 800b204:	b083      	sub	sp, #12
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800b20a:	bf00      	nop
 800b20c:	370c      	adds	r7, #12
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr

0800b216 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800b216:	b480      	push	{r7}
 800b218:	b083      	sub	sp, #12
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800b21e:	bf00      	nop
 800b220:	370c      	adds	r7, #12
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr

0800b22a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800b22a:	b480      	push	{r7}
 800b22c:	b083      	sub	sp, #12
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800b232:	bf00      	nop
 800b234:	370c      	adds	r7, #12
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr

0800b23e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800b23e:	b480      	push	{r7}
 800b240:	b083      	sub	sp, #12
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800b246:	bf00      	nop
 800b248:	370c      	adds	r7, #12
 800b24a:	46bd      	mov	sp, r7
 800b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b250:	4770      	bx	lr

0800b252 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800b252:	b480      	push	{r7}
 800b254:	b083      	sub	sp, #12
 800b256:	af00      	add	r7, sp, #0
 800b258:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800b25a:	bf00      	nop
 800b25c:	370c      	adds	r7, #12
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr

0800b266 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800b266:	b480      	push	{r7}
 800b268:	b083      	sub	sp, #12
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800b26e:	bf00      	nop
 800b270:	370c      	adds	r7, #12
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr

0800b27a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800b27a:	b480      	push	{r7}
 800b27c:	b083      	sub	sp, #12
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800b282:	bf00      	nop
 800b284:	370c      	adds	r7, #12
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr

0800b28e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800b28e:	b480      	push	{r7}
 800b290:	b083      	sub	sp, #12
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800b296:	bf00      	nop
 800b298:	370c      	adds	r7, #12
 800b29a:	46bd      	mov	sp, r7
 800b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a0:	4770      	bx	lr

0800b2a2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800b2a2:	b480      	push	{r7}
 800b2a4:	b083      	sub	sp, #12
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800b2aa:	bf00      	nop
 800b2ac:	370c      	adds	r7, #12
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b4:	4770      	bx	lr

0800b2b6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800b2b6:	b480      	push	{r7}
 800b2b8:	b083      	sub	sp, #12
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800b2be:	bf00      	nop
 800b2c0:	370c      	adds	r7, #12
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr

0800b2ca <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800b2ca:	b480      	push	{r7}
 800b2cc:	b083      	sub	sp, #12
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800b2d2:	bf00      	nop
 800b2d4:	370c      	adds	r7, #12
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr
	...

0800b2e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b085      	sub	sp, #20
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f003 0307 	and.w	r3, r3, #7
 800b2ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b2f0:	4b0c      	ldr	r3, [pc, #48]	; (800b324 <__NVIC_SetPriorityGrouping+0x44>)
 800b2f2:	68db      	ldr	r3, [r3, #12]
 800b2f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b2f6:	68ba      	ldr	r2, [r7, #8]
 800b2f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b2fc:	4013      	ands	r3, r2
 800b2fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b308:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b30c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b312:	4a04      	ldr	r2, [pc, #16]	; (800b324 <__NVIC_SetPriorityGrouping+0x44>)
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	60d3      	str	r3, [r2, #12]
}
 800b318:	bf00      	nop
 800b31a:	3714      	adds	r7, #20
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr
 800b324:	e000ed00 	.word	0xe000ed00

0800b328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b328:	b480      	push	{r7}
 800b32a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b32c:	4b04      	ldr	r3, [pc, #16]	; (800b340 <__NVIC_GetPriorityGrouping+0x18>)
 800b32e:	68db      	ldr	r3, [r3, #12]
 800b330:	0a1b      	lsrs	r3, r3, #8
 800b332:	f003 0307 	and.w	r3, r3, #7
}
 800b336:	4618      	mov	r0, r3
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr
 800b340:	e000ed00 	.word	0xe000ed00

0800b344 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
 800b34a:	4603      	mov	r3, r0
 800b34c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b34e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b352:	2b00      	cmp	r3, #0
 800b354:	db0b      	blt.n	800b36e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b356:	79fb      	ldrb	r3, [r7, #7]
 800b358:	f003 021f 	and.w	r2, r3, #31
 800b35c:	4907      	ldr	r1, [pc, #28]	; (800b37c <__NVIC_EnableIRQ+0x38>)
 800b35e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b362:	095b      	lsrs	r3, r3, #5
 800b364:	2001      	movs	r0, #1
 800b366:	fa00 f202 	lsl.w	r2, r0, r2
 800b36a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b36e:	bf00      	nop
 800b370:	370c      	adds	r7, #12
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr
 800b37a:	bf00      	nop
 800b37c:	e000e100 	.word	0xe000e100

0800b380 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b380:	b480      	push	{r7}
 800b382:	b083      	sub	sp, #12
 800b384:	af00      	add	r7, sp, #0
 800b386:	4603      	mov	r3, r0
 800b388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b38a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	db12      	blt.n	800b3b8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b392:	79fb      	ldrb	r3, [r7, #7]
 800b394:	f003 021f 	and.w	r2, r3, #31
 800b398:	490a      	ldr	r1, [pc, #40]	; (800b3c4 <__NVIC_DisableIRQ+0x44>)
 800b39a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b39e:	095b      	lsrs	r3, r3, #5
 800b3a0:	2001      	movs	r0, #1
 800b3a2:	fa00 f202 	lsl.w	r2, r0, r2
 800b3a6:	3320      	adds	r3, #32
 800b3a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b3ac:	f3bf 8f4f 	dsb	sy
}
 800b3b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b3b2:	f3bf 8f6f 	isb	sy
}
 800b3b6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800b3b8:	bf00      	nop
 800b3ba:	370c      	adds	r7, #12
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr
 800b3c4:	e000e100 	.word	0xe000e100

0800b3c8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b3d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	db0c      	blt.n	800b3f4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b3da:	79fb      	ldrb	r3, [r7, #7]
 800b3dc:	f003 021f 	and.w	r2, r3, #31
 800b3e0:	4907      	ldr	r1, [pc, #28]	; (800b400 <__NVIC_ClearPendingIRQ+0x38>)
 800b3e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3e6:	095b      	lsrs	r3, r3, #5
 800b3e8:	2001      	movs	r0, #1
 800b3ea:	fa00 f202 	lsl.w	r2, r0, r2
 800b3ee:	3360      	adds	r3, #96	; 0x60
 800b3f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b3f4:	bf00      	nop
 800b3f6:	370c      	adds	r7, #12
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr
 800b400:	e000e100 	.word	0xe000e100

0800b404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b404:	b480      	push	{r7}
 800b406:	b083      	sub	sp, #12
 800b408:	af00      	add	r7, sp, #0
 800b40a:	4603      	mov	r3, r0
 800b40c:	6039      	str	r1, [r7, #0]
 800b40e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b414:	2b00      	cmp	r3, #0
 800b416:	db0a      	blt.n	800b42e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	b2da      	uxtb	r2, r3
 800b41c:	490c      	ldr	r1, [pc, #48]	; (800b450 <__NVIC_SetPriority+0x4c>)
 800b41e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b422:	0112      	lsls	r2, r2, #4
 800b424:	b2d2      	uxtb	r2, r2
 800b426:	440b      	add	r3, r1
 800b428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b42c:	e00a      	b.n	800b444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	b2da      	uxtb	r2, r3
 800b432:	4908      	ldr	r1, [pc, #32]	; (800b454 <__NVIC_SetPriority+0x50>)
 800b434:	79fb      	ldrb	r3, [r7, #7]
 800b436:	f003 030f 	and.w	r3, r3, #15
 800b43a:	3b04      	subs	r3, #4
 800b43c:	0112      	lsls	r2, r2, #4
 800b43e:	b2d2      	uxtb	r2, r2
 800b440:	440b      	add	r3, r1
 800b442:	761a      	strb	r2, [r3, #24]
}
 800b444:	bf00      	nop
 800b446:	370c      	adds	r7, #12
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr
 800b450:	e000e100 	.word	0xe000e100
 800b454:	e000ed00 	.word	0xe000ed00

0800b458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b458:	b480      	push	{r7}
 800b45a:	b089      	sub	sp, #36	; 0x24
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	60b9      	str	r1, [r7, #8]
 800b462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f003 0307 	and.w	r3, r3, #7
 800b46a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b46c:	69fb      	ldr	r3, [r7, #28]
 800b46e:	f1c3 0307 	rsb	r3, r3, #7
 800b472:	2b04      	cmp	r3, #4
 800b474:	bf28      	it	cs
 800b476:	2304      	movcs	r3, #4
 800b478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b47a:	69fb      	ldr	r3, [r7, #28]
 800b47c:	3304      	adds	r3, #4
 800b47e:	2b06      	cmp	r3, #6
 800b480:	d902      	bls.n	800b488 <NVIC_EncodePriority+0x30>
 800b482:	69fb      	ldr	r3, [r7, #28]
 800b484:	3b03      	subs	r3, #3
 800b486:	e000      	b.n	800b48a <NVIC_EncodePriority+0x32>
 800b488:	2300      	movs	r3, #0
 800b48a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b48c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b490:	69bb      	ldr	r3, [r7, #24]
 800b492:	fa02 f303 	lsl.w	r3, r2, r3
 800b496:	43da      	mvns	r2, r3
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	401a      	ands	r2, r3
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b4a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	fa01 f303 	lsl.w	r3, r1, r3
 800b4aa:	43d9      	mvns	r1, r3
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b4b0:	4313      	orrs	r3, r2
         );
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3724      	adds	r7, #36	; 0x24
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4bc:	4770      	bx	lr

0800b4be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b4be:	b580      	push	{r7, lr}
 800b4c0:	b082      	sub	sp, #8
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f7ff ff0a 	bl	800b2e0 <__NVIC_SetPriorityGrouping>
}
 800b4cc:	bf00      	nop
 800b4ce:	3708      	adds	r7, #8
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b086      	sub	sp, #24
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	4603      	mov	r3, r0
 800b4dc:	60b9      	str	r1, [r7, #8]
 800b4de:	607a      	str	r2, [r7, #4]
 800b4e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b4e6:	f7ff ff1f 	bl	800b328 <__NVIC_GetPriorityGrouping>
 800b4ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b4ec:	687a      	ldr	r2, [r7, #4]
 800b4ee:	68b9      	ldr	r1, [r7, #8]
 800b4f0:	6978      	ldr	r0, [r7, #20]
 800b4f2:	f7ff ffb1 	bl	800b458 <NVIC_EncodePriority>
 800b4f6:	4602      	mov	r2, r0
 800b4f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4fc:	4611      	mov	r1, r2
 800b4fe:	4618      	mov	r0, r3
 800b500:	f7ff ff80 	bl	800b404 <__NVIC_SetPriority>
}
 800b504:	bf00      	nop
 800b506:	3718      	adds	r7, #24
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
 800b512:	4603      	mov	r3, r0
 800b514:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7ff ff12 	bl	800b344 <__NVIC_EnableIRQ>
}
 800b520:	bf00      	nop
 800b522:	3708      	adds	r7, #8
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	4603      	mov	r3, r0
 800b530:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800b532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b536:	4618      	mov	r0, r3
 800b538:	f7ff ff22 	bl	800b380 <__NVIC_DisableIRQ>
}
 800b53c:	bf00      	nop
 800b53e:	3708      	adds	r7, #8
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b082      	sub	sp, #8
 800b548:	af00      	add	r7, sp, #0
 800b54a:	4603      	mov	r3, r0
 800b54c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800b54e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b552:	4618      	mov	r0, r3
 800b554:	f7ff ff38 	bl	800b3c8 <__NVIC_ClearPendingIRQ>
}
 800b558:	bf00      	nop
 800b55a:	3708      	adds	r7, #8
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b086      	sub	sp, #24
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b568:	2300      	movs	r3, #0
 800b56a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b56c:	f7fe fffa 	bl	800a564 <HAL_GetTick>
 800b570:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d101      	bne.n	800b57c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b578:	2301      	movs	r3, #1
 800b57a:	e099      	b.n	800b6b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2200      	movs	r2, #0
 800b580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2202      	movs	r2, #2
 800b588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f022 0201 	bic.w	r2, r2, #1
 800b59a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b59c:	e00f      	b.n	800b5be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b59e:	f7fe ffe1 	bl	800a564 <HAL_GetTick>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	1ad3      	subs	r3, r2, r3
 800b5a8:	2b05      	cmp	r3, #5
 800b5aa:	d908      	bls.n	800b5be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2220      	movs	r2, #32
 800b5b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2203      	movs	r2, #3
 800b5b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b5ba:	2303      	movs	r3, #3
 800b5bc:	e078      	b.n	800b6b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f003 0301 	and.w	r3, r3, #1
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d1e8      	bne.n	800b59e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b5d4:	697a      	ldr	r2, [r7, #20]
 800b5d6:	4b38      	ldr	r3, [pc, #224]	; (800b6b8 <HAL_DMA_Init+0x158>)
 800b5d8:	4013      	ands	r3, r2
 800b5da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	685a      	ldr	r2, [r3, #4]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	689b      	ldr	r3, [r3, #8]
 800b5e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b5ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	691b      	ldr	r3, [r3, #16]
 800b5f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b5f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	699b      	ldr	r3, [r3, #24]
 800b5fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b602:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6a1b      	ldr	r3, [r3, #32]
 800b608:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b60a:	697a      	ldr	r2, [r7, #20]
 800b60c:	4313      	orrs	r3, r2
 800b60e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b614:	2b04      	cmp	r3, #4
 800b616:	d107      	bne.n	800b628 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b620:	4313      	orrs	r3, r2
 800b622:	697a      	ldr	r2, [r7, #20]
 800b624:	4313      	orrs	r3, r2
 800b626:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	697a      	ldr	r2, [r7, #20]
 800b62e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	695b      	ldr	r3, [r3, #20]
 800b636:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	f023 0307 	bic.w	r3, r3, #7
 800b63e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b644:	697a      	ldr	r2, [r7, #20]
 800b646:	4313      	orrs	r3, r2
 800b648:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b64e:	2b04      	cmp	r3, #4
 800b650:	d117      	bne.n	800b682 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b656:	697a      	ldr	r2, [r7, #20]
 800b658:	4313      	orrs	r3, r2
 800b65a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b660:	2b00      	cmp	r3, #0
 800b662:	d00e      	beq.n	800b682 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 fb09 	bl	800bc7c <DMA_CheckFifoParam>
 800b66a:	4603      	mov	r3, r0
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d008      	beq.n	800b682 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2240      	movs	r2, #64	; 0x40
 800b674:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2201      	movs	r2, #1
 800b67a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b67e:	2301      	movs	r3, #1
 800b680:	e016      	b.n	800b6b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	697a      	ldr	r2, [r7, #20]
 800b688:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 fac0 	bl	800bc10 <DMA_CalcBaseAndBitshift>
 800b690:	4603      	mov	r3, r0
 800b692:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b698:	223f      	movs	r2, #63	; 0x3f
 800b69a:	409a      	lsls	r2, r3
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b6ae:	2300      	movs	r3, #0
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3718      	adds	r7, #24
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	f010803f 	.word	0xf010803f

0800b6bc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b084      	sub	sp, #16
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d101      	bne.n	800b6ce <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	e050      	b.n	800b770 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b6d4:	b2db      	uxtb	r3, r3
 800b6d6:	2b02      	cmp	r3, #2
 800b6d8:	d101      	bne.n	800b6de <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800b6da:	2302      	movs	r3, #2
 800b6dc:	e048      	b.n	800b770 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	681a      	ldr	r2, [r3, #0]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f022 0201 	bic.w	r2, r2, #1
 800b6ec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	2200      	movs	r2, #0
 800b704:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	2200      	movs	r2, #0
 800b70c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	2200      	movs	r2, #0
 800b714:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2221      	movs	r2, #33	; 0x21
 800b71c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 fa76 	bl	800bc10 <DMA_CalcBaseAndBitshift>
 800b724:	4603      	mov	r3, r0
 800b726:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2200      	movs	r2, #0
 800b72c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2200      	movs	r2, #0
 800b732:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2200      	movs	r2, #0
 800b738:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2200      	movs	r2, #0
 800b73e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2200      	movs	r2, #0
 800b744:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2200      	movs	r2, #0
 800b74a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b750:	223f      	movs	r2, #63	; 0x3f
 800b752:	409a      	lsls	r2, r3
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2200      	movs	r2, #0
 800b75c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2200      	movs	r2, #0
 800b762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2200      	movs	r2, #0
 800b76a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b76e:	2300      	movs	r3, #0
}
 800b770:	4618      	mov	r0, r3
 800b772:	3710      	adds	r7, #16
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}

0800b778 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b086      	sub	sp, #24
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	60f8      	str	r0, [r7, #12]
 800b780:	60b9      	str	r1, [r7, #8]
 800b782:	607a      	str	r2, [r7, #4]
 800b784:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b786:	2300      	movs	r3, #0
 800b788:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b78e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b796:	2b01      	cmp	r3, #1
 800b798:	d101      	bne.n	800b79e <HAL_DMA_Start_IT+0x26>
 800b79a:	2302      	movs	r3, #2
 800b79c:	e040      	b.n	800b820 <HAL_DMA_Start_IT+0xa8>
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  

  if(HAL_DMA_STATE_READY == hdma->State)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b7ac:	b2db      	uxtb	r3, r3
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	d12f      	bne.n	800b812 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2202      	movs	r2, #2
 800b7b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	68b9      	ldr	r1, [r7, #8]
 800b7c6:	68f8      	ldr	r0, [r7, #12]
 800b7c8:	f000 f9f4 	bl	800bbb4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7d0:	223f      	movs	r2, #63	; 0x3f
 800b7d2:	409a      	lsls	r2, r3
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f042 0216 	orr.w	r2, r2, #22
 800b7e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d007      	beq.n	800b800 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	681a      	ldr	r2, [r3, #0]
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f042 0208 	orr.w	r2, r2, #8
 800b7fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	681a      	ldr	r2, [r3, #0]
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f042 0201 	orr.w	r2, r2, #1
 800b80e:	601a      	str	r2, [r3, #0]
 800b810:	e005      	b.n	800b81e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2200      	movs	r2, #0
 800b816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 800b81a:	2302      	movs	r3, #2
 800b81c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b81e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b820:	4618      	mov	r0, r3
 800b822:	3718      	adds	r7, #24
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b828:	b480      	push	{r7}
 800b82a:	b083      	sub	sp, #12
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b836:	b2db      	uxtb	r3, r3
 800b838:	2b02      	cmp	r3, #2
 800b83a:	d004      	beq.n	800b846 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2280      	movs	r2, #128	; 0x80
 800b840:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800b842:	2301      	movs	r3, #1
 800b844:	e00c      	b.n	800b860 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2205      	movs	r2, #5
 800b84a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	681a      	ldr	r2, [r3, #0]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f022 0201 	bic.w	r2, r2, #1
 800b85c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b85e:	2300      	movs	r3, #0
}
 800b860:	4618      	mov	r0, r3
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr

0800b86c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b086      	sub	sp, #24
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800b874:	2300      	movs	r3, #0
 800b876:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b878:	4b92      	ldr	r3, [pc, #584]	; (800bac4 <HAL_DMA_IRQHandler+0x258>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a92      	ldr	r2, [pc, #584]	; (800bac8 <HAL_DMA_IRQHandler+0x25c>)
 800b87e:	fba2 2303 	umull	r2, r3, r2, r3
 800b882:	0a9b      	lsrs	r3, r3, #10
 800b884:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b88a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b896:	2208      	movs	r2, #8
 800b898:	409a      	lsls	r2, r3
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	4013      	ands	r3, r2
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d01a      	beq.n	800b8d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f003 0304 	and.w	r3, r3, #4
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d013      	beq.n	800b8d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	681a      	ldr	r2, [r3, #0]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f022 0204 	bic.w	r2, r2, #4
 800b8be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8c4:	2208      	movs	r2, #8
 800b8c6:	409a      	lsls	r2, r3
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8d0:	f043 0201 	orr.w	r2, r3, #1
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8dc:	2201      	movs	r2, #1
 800b8de:	409a      	lsls	r2, r3
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	4013      	ands	r3, r2
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d012      	beq.n	800b90e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	695b      	ldr	r3, [r3, #20]
 800b8ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d00b      	beq.n	800b90e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	409a      	lsls	r2, r3
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b906:	f043 0202 	orr.w	r2, r3, #2
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b912:	2204      	movs	r2, #4
 800b914:	409a      	lsls	r2, r3
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	4013      	ands	r3, r2
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d012      	beq.n	800b944 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f003 0302 	and.w	r3, r3, #2
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d00b      	beq.n	800b944 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b930:	2204      	movs	r2, #4
 800b932:	409a      	lsls	r2, r3
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b93c:	f043 0204 	orr.w	r2, r3, #4
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b948:	2210      	movs	r2, #16
 800b94a:	409a      	lsls	r2, r3
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	4013      	ands	r3, r2
 800b950:	2b00      	cmp	r3, #0
 800b952:	d043      	beq.n	800b9dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f003 0308 	and.w	r3, r3, #8
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d03c      	beq.n	800b9dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b966:	2210      	movs	r2, #16
 800b968:	409a      	lsls	r2, r3
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d018      	beq.n	800b9ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b986:	2b00      	cmp	r3, #0
 800b988:	d108      	bne.n	800b99c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d024      	beq.n	800b9dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	4798      	blx	r3
 800b99a:	e01f      	b.n	800b9dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d01b      	beq.n	800b9dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	4798      	blx	r3
 800b9ac:	e016      	b.n	800b9dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d107      	bne.n	800b9cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	681a      	ldr	r2, [r3, #0]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f022 0208 	bic.w	r2, r2, #8
 800b9ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d003      	beq.n	800b9dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9e0:	2220      	movs	r2, #32
 800b9e2:	409a      	lsls	r2, r3
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	4013      	ands	r3, r2
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	f000 808e 	beq.w	800bb0a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f003 0310 	and.w	r3, r3, #16
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	f000 8086 	beq.w	800bb0a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba02:	2220      	movs	r2, #32
 800ba04:	409a      	lsls	r2, r3
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ba10:	b2db      	uxtb	r3, r3
 800ba12:	2b05      	cmp	r3, #5
 800ba14:	d136      	bne.n	800ba84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	681a      	ldr	r2, [r3, #0]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f022 0216 	bic.w	r2, r2, #22
 800ba24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	695a      	ldr	r2, [r3, #20]
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d103      	bne.n	800ba46 <HAL_DMA_IRQHandler+0x1da>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d007      	beq.n	800ba56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f022 0208 	bic.w	r2, r2, #8
 800ba54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba5a:	223f      	movs	r2, #63	; 0x3f
 800ba5c:	409a      	lsls	r2, r3
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2200      	movs	r2, #0
 800ba66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2201      	movs	r2, #1
 800ba6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d07d      	beq.n	800bb76 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	4798      	blx	r3
        }
        return;
 800ba82:	e078      	b.n	800bb76 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d01c      	beq.n	800bacc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d108      	bne.n	800bab2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d030      	beq.n	800bb0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	4798      	blx	r3
 800bab0:	e02b      	b.n	800bb0a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d027      	beq.n	800bb0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	4798      	blx	r3
 800bac2:	e022      	b.n	800bb0a <HAL_DMA_IRQHandler+0x29e>
 800bac4:	200001b8 	.word	0x200001b8
 800bac8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d10f      	bne.n	800bafa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	681a      	ldr	r2, [r3, #0]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f022 0210 	bic.w	r2, r2, #16
 800bae8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2200      	movs	r2, #0
 800baee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2201      	movs	r2, #1
 800baf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d003      	beq.n	800bb0a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d032      	beq.n	800bb78 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb16:	f003 0301 	and.w	r3, r3, #1
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d022      	beq.n	800bb64 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2205      	movs	r2, #5
 800bb22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	681a      	ldr	r2, [r3, #0]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f022 0201 	bic.w	r2, r2, #1
 800bb34:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	3301      	adds	r3, #1
 800bb3a:	60bb      	str	r3, [r7, #8]
 800bb3c:	697a      	ldr	r2, [r7, #20]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d307      	bcc.n	800bb52 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f003 0301 	and.w	r3, r3, #1
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d1f2      	bne.n	800bb36 <HAL_DMA_IRQHandler+0x2ca>
 800bb50:	e000      	b.n	800bb54 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800bb52:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2200      	movs	r2, #0
 800bb58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2201      	movs	r2, #1
 800bb60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d005      	beq.n	800bb78 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	4798      	blx	r3
 800bb74:	e000      	b.n	800bb78 <HAL_DMA_IRQHandler+0x30c>
        return;
 800bb76:	bf00      	nop
    }
  }
}
 800bb78:	3718      	adds	r7, #24
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop

0800bb80 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b083      	sub	sp, #12
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bb8e:	b2db      	uxtb	r3, r3
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	370c      	adds	r7, #12
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr

0800bb9c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b083      	sub	sp, #12
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	370c      	adds	r7, #12
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr

0800bbb4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b085      	sub	sp, #20
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	60f8      	str	r0, [r7, #12]
 800bbbc:	60b9      	str	r1, [r7, #8]
 800bbbe:	607a      	str	r2, [r7, #4]
 800bbc0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bbd0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	683a      	ldr	r2, [r7, #0]
 800bbd8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	689b      	ldr	r3, [r3, #8]
 800bbde:	2b40      	cmp	r3, #64	; 0x40
 800bbe0:	d108      	bne.n	800bbf4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	687a      	ldr	r2, [r7, #4]
 800bbe8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	68ba      	ldr	r2, [r7, #8]
 800bbf0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800bbf2:	e007      	b.n	800bc04 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	68ba      	ldr	r2, [r7, #8]
 800bbfa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	60da      	str	r2, [r3, #12]
}
 800bc04:	bf00      	nop
 800bc06:	3714      	adds	r7, #20
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr

0800bc10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b085      	sub	sp, #20
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	3b10      	subs	r3, #16
 800bc20:	4a14      	ldr	r2, [pc, #80]	; (800bc74 <DMA_CalcBaseAndBitshift+0x64>)
 800bc22:	fba2 2303 	umull	r2, r3, r2, r3
 800bc26:	091b      	lsrs	r3, r3, #4
 800bc28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800bc2a:	4a13      	ldr	r2, [pc, #76]	; (800bc78 <DMA_CalcBaseAndBitshift+0x68>)
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	4413      	add	r3, r2
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	461a      	mov	r2, r3
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2b03      	cmp	r3, #3
 800bc3c:	d909      	bls.n	800bc52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bc46:	f023 0303 	bic.w	r3, r3, #3
 800bc4a:	1d1a      	adds	r2, r3, #4
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	659a      	str	r2, [r3, #88]	; 0x58
 800bc50:	e007      	b.n	800bc62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bc5a:	f023 0303 	bic.w	r3, r3, #3
 800bc5e:	687a      	ldr	r2, [r7, #4]
 800bc60:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3714      	adds	r7, #20
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr
 800bc72:	bf00      	nop
 800bc74:	aaaaaaab 	.word	0xaaaaaaab
 800bc78:	0801b2f0 	.word	0x0801b2f0

0800bc7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b085      	sub	sp, #20
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc84:	2300      	movs	r3, #0
 800bc86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	699b      	ldr	r3, [r3, #24]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d11f      	bne.n	800bcd6 <DMA_CheckFifoParam+0x5a>
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	2b03      	cmp	r3, #3
 800bc9a:	d856      	bhi.n	800bd4a <DMA_CheckFifoParam+0xce>
 800bc9c:	a201      	add	r2, pc, #4	; (adr r2, 800bca4 <DMA_CheckFifoParam+0x28>)
 800bc9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca2:	bf00      	nop
 800bca4:	0800bcb5 	.word	0x0800bcb5
 800bca8:	0800bcc7 	.word	0x0800bcc7
 800bcac:	0800bcb5 	.word	0x0800bcb5
 800bcb0:	0800bd4b 	.word	0x0800bd4b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d046      	beq.n	800bd4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bcc4:	e043      	b.n	800bd4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bcce:	d140      	bne.n	800bd52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bcd4:	e03d      	b.n	800bd52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	699b      	ldr	r3, [r3, #24]
 800bcda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcde:	d121      	bne.n	800bd24 <DMA_CheckFifoParam+0xa8>
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	2b03      	cmp	r3, #3
 800bce4:	d837      	bhi.n	800bd56 <DMA_CheckFifoParam+0xda>
 800bce6:	a201      	add	r2, pc, #4	; (adr r2, 800bcec <DMA_CheckFifoParam+0x70>)
 800bce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcec:	0800bcfd 	.word	0x0800bcfd
 800bcf0:	0800bd03 	.word	0x0800bd03
 800bcf4:	0800bcfd 	.word	0x0800bcfd
 800bcf8:	0800bd15 	.word	0x0800bd15
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	73fb      	strb	r3, [r7, #15]
      break;
 800bd00:	e030      	b.n	800bd64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d025      	beq.n	800bd5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bd12:	e022      	b.n	800bd5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bd1c:	d11f      	bne.n	800bd5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800bd22:	e01c      	b.n	800bd5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	2b02      	cmp	r3, #2
 800bd28:	d903      	bls.n	800bd32 <DMA_CheckFifoParam+0xb6>
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	2b03      	cmp	r3, #3
 800bd2e:	d003      	beq.n	800bd38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800bd30:	e018      	b.n	800bd64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800bd32:	2301      	movs	r3, #1
 800bd34:	73fb      	strb	r3, [r7, #15]
      break;
 800bd36:	e015      	b.n	800bd64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d00e      	beq.n	800bd62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800bd44:	2301      	movs	r3, #1
 800bd46:	73fb      	strb	r3, [r7, #15]
      break;
 800bd48:	e00b      	b.n	800bd62 <DMA_CheckFifoParam+0xe6>
      break;
 800bd4a:	bf00      	nop
 800bd4c:	e00a      	b.n	800bd64 <DMA_CheckFifoParam+0xe8>
      break;
 800bd4e:	bf00      	nop
 800bd50:	e008      	b.n	800bd64 <DMA_CheckFifoParam+0xe8>
      break;
 800bd52:	bf00      	nop
 800bd54:	e006      	b.n	800bd64 <DMA_CheckFifoParam+0xe8>
      break;
 800bd56:	bf00      	nop
 800bd58:	e004      	b.n	800bd64 <DMA_CheckFifoParam+0xe8>
      break;
 800bd5a:	bf00      	nop
 800bd5c:	e002      	b.n	800bd64 <DMA_CheckFifoParam+0xe8>
      break;   
 800bd5e:	bf00      	nop
 800bd60:	e000      	b.n	800bd64 <DMA_CheckFifoParam+0xe8>
      break;
 800bd62:	bf00      	nop
    }
  } 
  
  return status; 
 800bd64:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3714      	adds	r7, #20
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd70:	4770      	bx	lr
 800bd72:	bf00      	nop

0800bd74 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b086      	sub	sp, #24
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	60f8      	str	r0, [r7, #12]
 800bd7c:	60b9      	str	r1, [r7, #8]
 800bd7e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800bd82:	2301      	movs	r3, #1
 800bd84:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800bd86:	4b23      	ldr	r3, [pc, #140]	; (800be14 <HAL_FLASH_Program+0xa0>)
 800bd88:	7e1b      	ldrb	r3, [r3, #24]
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d101      	bne.n	800bd92 <HAL_FLASH_Program+0x1e>
 800bd8e:	2302      	movs	r3, #2
 800bd90:	e03b      	b.n	800be0a <HAL_FLASH_Program+0x96>
 800bd92:	4b20      	ldr	r3, [pc, #128]	; (800be14 <HAL_FLASH_Program+0xa0>)
 800bd94:	2201      	movs	r2, #1
 800bd96:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800bd98:	f24c 3050 	movw	r0, #50000	; 0xc350
 800bd9c:	f000 f87c 	bl	800be98 <FLASH_WaitForLastOperation>
 800bda0:	4603      	mov	r3, r0
 800bda2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800bda4:	7dfb      	ldrb	r3, [r7, #23]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d12b      	bne.n	800be02 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d105      	bne.n	800bdbc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800bdb0:	783b      	ldrb	r3, [r7, #0]
 800bdb2:	4619      	mov	r1, r3
 800bdb4:	68b8      	ldr	r0, [r7, #8]
 800bdb6:	f000 f927 	bl	800c008 <FLASH_Program_Byte>
 800bdba:	e016      	b.n	800bdea <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2b01      	cmp	r3, #1
 800bdc0:	d105      	bne.n	800bdce <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800bdc2:	883b      	ldrh	r3, [r7, #0]
 800bdc4:	4619      	mov	r1, r3
 800bdc6:	68b8      	ldr	r0, [r7, #8]
 800bdc8:	f000 f8fa 	bl	800bfc0 <FLASH_Program_HalfWord>
 800bdcc:	e00d      	b.n	800bdea <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2b02      	cmp	r3, #2
 800bdd2:	d105      	bne.n	800bde0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	68b8      	ldr	r0, [r7, #8]
 800bdda:	f000 f8cf 	bl	800bf7c <FLASH_Program_Word>
 800bdde:	e004      	b.n	800bdea <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800bde0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bde4:	68b8      	ldr	r0, [r7, #8]
 800bde6:	f000 f897 	bl	800bf18 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800bdea:	f24c 3050 	movw	r0, #50000	; 0xc350
 800bdee:	f000 f853 	bl	800be98 <FLASH_WaitForLastOperation>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800bdf6:	4b08      	ldr	r3, [pc, #32]	; (800be18 <HAL_FLASH_Program+0xa4>)
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	4a07      	ldr	r2, [pc, #28]	; (800be18 <HAL_FLASH_Program+0xa4>)
 800bdfc:	f023 0301 	bic.w	r3, r3, #1
 800be00:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800be02:	4b04      	ldr	r3, [pc, #16]	; (800be14 <HAL_FLASH_Program+0xa0>)
 800be04:	2200      	movs	r2, #0
 800be06:	761a      	strb	r2, [r3, #24]
  
  return status;
 800be08:	7dfb      	ldrb	r3, [r7, #23]
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3718      	adds	r7, #24
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
 800be12:	bf00      	nop
 800be14:	20008eb0 	.word	0x20008eb0
 800be18:	40023c00 	.word	0x40023c00

0800be1c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b083      	sub	sp, #12
 800be20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800be22:	2300      	movs	r3, #0
 800be24:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800be26:	4b0b      	ldr	r3, [pc, #44]	; (800be54 <HAL_FLASH_Unlock+0x38>)
 800be28:	691b      	ldr	r3, [r3, #16]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	da0b      	bge.n	800be46 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800be2e:	4b09      	ldr	r3, [pc, #36]	; (800be54 <HAL_FLASH_Unlock+0x38>)
 800be30:	4a09      	ldr	r2, [pc, #36]	; (800be58 <HAL_FLASH_Unlock+0x3c>)
 800be32:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800be34:	4b07      	ldr	r3, [pc, #28]	; (800be54 <HAL_FLASH_Unlock+0x38>)
 800be36:	4a09      	ldr	r2, [pc, #36]	; (800be5c <HAL_FLASH_Unlock+0x40>)
 800be38:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800be3a:	4b06      	ldr	r3, [pc, #24]	; (800be54 <HAL_FLASH_Unlock+0x38>)
 800be3c:	691b      	ldr	r3, [r3, #16]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	da01      	bge.n	800be46 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800be42:	2301      	movs	r3, #1
 800be44:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800be46:	79fb      	ldrb	r3, [r7, #7]
}
 800be48:	4618      	mov	r0, r3
 800be4a:	370c      	adds	r7, #12
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr
 800be54:	40023c00 	.word	0x40023c00
 800be58:	45670123 	.word	0x45670123
 800be5c:	cdef89ab 	.word	0xcdef89ab

0800be60 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800be60:	b480      	push	{r7}
 800be62:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800be64:	4b05      	ldr	r3, [pc, #20]	; (800be7c <HAL_FLASH_Lock+0x1c>)
 800be66:	691b      	ldr	r3, [r3, #16]
 800be68:	4a04      	ldr	r2, [pc, #16]	; (800be7c <HAL_FLASH_Lock+0x1c>)
 800be6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800be6e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800be70:	2300      	movs	r3, #0
}
 800be72:	4618      	mov	r0, r3
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr
 800be7c:	40023c00 	.word	0x40023c00

0800be80 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800be80:	b480      	push	{r7}
 800be82:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800be84:	4b03      	ldr	r3, [pc, #12]	; (800be94 <HAL_FLASH_GetError+0x14>)
 800be86:	69db      	ldr	r3, [r3, #28]
}  
 800be88:	4618      	mov	r0, r3
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr
 800be92:	bf00      	nop
 800be94:	20008eb0 	.word	0x20008eb0

0800be98 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bea0:	2300      	movs	r3, #0
 800bea2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800bea4:	4b1a      	ldr	r3, [pc, #104]	; (800bf10 <FLASH_WaitForLastOperation+0x78>)
 800bea6:	2200      	movs	r2, #0
 800bea8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800beaa:	f7fe fb5b 	bl	800a564 <HAL_GetTick>
 800beae:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800beb0:	e010      	b.n	800bed4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800beb8:	d00c      	beq.n	800bed4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d007      	beq.n	800bed0 <FLASH_WaitForLastOperation+0x38>
 800bec0:	f7fe fb50 	bl	800a564 <HAL_GetTick>
 800bec4:	4602      	mov	r2, r0
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	1ad3      	subs	r3, r2, r3
 800beca:	687a      	ldr	r2, [r7, #4]
 800becc:	429a      	cmp	r2, r3
 800bece:	d201      	bcs.n	800bed4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800bed0:	2303      	movs	r3, #3
 800bed2:	e019      	b.n	800bf08 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800bed4:	4b0f      	ldr	r3, [pc, #60]	; (800bf14 <FLASH_WaitForLastOperation+0x7c>)
 800bed6:	68db      	ldr	r3, [r3, #12]
 800bed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d1e8      	bne.n	800beb2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800bee0:	4b0c      	ldr	r3, [pc, #48]	; (800bf14 <FLASH_WaitForLastOperation+0x7c>)
 800bee2:	68db      	ldr	r3, [r3, #12]
 800bee4:	f003 0301 	and.w	r3, r3, #1
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d002      	beq.n	800bef2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800beec:	4b09      	ldr	r3, [pc, #36]	; (800bf14 <FLASH_WaitForLastOperation+0x7c>)
 800beee:	2201      	movs	r2, #1
 800bef0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800bef2:	4b08      	ldr	r3, [pc, #32]	; (800bf14 <FLASH_WaitForLastOperation+0x7c>)
 800bef4:	68db      	ldr	r3, [r3, #12]
 800bef6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800befa:	2b00      	cmp	r3, #0
 800befc:	d003      	beq.n	800bf06 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800befe:	f000 f8a5 	bl	800c04c <FLASH_SetErrorCode>
    return HAL_ERROR;
 800bf02:	2301      	movs	r3, #1
 800bf04:	e000      	b.n	800bf08 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800bf06:	2300      	movs	r3, #0
  
}  
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3710      	adds	r7, #16
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}
 800bf10:	20008eb0 	.word	0x20008eb0
 800bf14:	40023c00 	.word	0x40023c00

0800bf18 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b085      	sub	sp, #20
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800bf24:	4b14      	ldr	r3, [pc, #80]	; (800bf78 <FLASH_Program_DoubleWord+0x60>)
 800bf26:	691b      	ldr	r3, [r3, #16]
 800bf28:	4a13      	ldr	r2, [pc, #76]	; (800bf78 <FLASH_Program_DoubleWord+0x60>)
 800bf2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800bf30:	4b11      	ldr	r3, [pc, #68]	; (800bf78 <FLASH_Program_DoubleWord+0x60>)
 800bf32:	691b      	ldr	r3, [r3, #16]
 800bf34:	4a10      	ldr	r2, [pc, #64]	; (800bf78 <FLASH_Program_DoubleWord+0x60>)
 800bf36:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800bf3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800bf3c:	4b0e      	ldr	r3, [pc, #56]	; (800bf78 <FLASH_Program_DoubleWord+0x60>)
 800bf3e:	691b      	ldr	r3, [r3, #16]
 800bf40:	4a0d      	ldr	r2, [pc, #52]	; (800bf78 <FLASH_Program_DoubleWord+0x60>)
 800bf42:	f043 0301 	orr.w	r3, r3, #1
 800bf46:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	683a      	ldr	r2, [r7, #0]
 800bf4c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800bf4e:	f3bf 8f6f 	isb	sy
}
 800bf52:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800bf54:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bf58:	f04f 0200 	mov.w	r2, #0
 800bf5c:	f04f 0300 	mov.w	r3, #0
 800bf60:	000a      	movs	r2, r1
 800bf62:	2300      	movs	r3, #0
 800bf64:	68f9      	ldr	r1, [r7, #12]
 800bf66:	3104      	adds	r1, #4
 800bf68:	4613      	mov	r3, r2
 800bf6a:	600b      	str	r3, [r1, #0]
}
 800bf6c:	bf00      	nop
 800bf6e:	3714      	adds	r7, #20
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr
 800bf78:	40023c00 	.word	0x40023c00

0800bf7c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b083      	sub	sp, #12
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800bf86:	4b0d      	ldr	r3, [pc, #52]	; (800bfbc <FLASH_Program_Word+0x40>)
 800bf88:	691b      	ldr	r3, [r3, #16]
 800bf8a:	4a0c      	ldr	r2, [pc, #48]	; (800bfbc <FLASH_Program_Word+0x40>)
 800bf8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf90:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800bf92:	4b0a      	ldr	r3, [pc, #40]	; (800bfbc <FLASH_Program_Word+0x40>)
 800bf94:	691b      	ldr	r3, [r3, #16]
 800bf96:	4a09      	ldr	r2, [pc, #36]	; (800bfbc <FLASH_Program_Word+0x40>)
 800bf98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bf9c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800bf9e:	4b07      	ldr	r3, [pc, #28]	; (800bfbc <FLASH_Program_Word+0x40>)
 800bfa0:	691b      	ldr	r3, [r3, #16]
 800bfa2:	4a06      	ldr	r2, [pc, #24]	; (800bfbc <FLASH_Program_Word+0x40>)
 800bfa4:	f043 0301 	orr.w	r3, r3, #1
 800bfa8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	683a      	ldr	r2, [r7, #0]
 800bfae:	601a      	str	r2, [r3, #0]
}
 800bfb0:	bf00      	nop
 800bfb2:	370c      	adds	r7, #12
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr
 800bfbc:	40023c00 	.word	0x40023c00

0800bfc0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b083      	sub	sp, #12
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	460b      	mov	r3, r1
 800bfca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800bfcc:	4b0d      	ldr	r3, [pc, #52]	; (800c004 <FLASH_Program_HalfWord+0x44>)
 800bfce:	691b      	ldr	r3, [r3, #16]
 800bfd0:	4a0c      	ldr	r2, [pc, #48]	; (800c004 <FLASH_Program_HalfWord+0x44>)
 800bfd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bfd6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800bfd8:	4b0a      	ldr	r3, [pc, #40]	; (800c004 <FLASH_Program_HalfWord+0x44>)
 800bfda:	691b      	ldr	r3, [r3, #16]
 800bfdc:	4a09      	ldr	r2, [pc, #36]	; (800c004 <FLASH_Program_HalfWord+0x44>)
 800bfde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bfe2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800bfe4:	4b07      	ldr	r3, [pc, #28]	; (800c004 <FLASH_Program_HalfWord+0x44>)
 800bfe6:	691b      	ldr	r3, [r3, #16]
 800bfe8:	4a06      	ldr	r2, [pc, #24]	; (800c004 <FLASH_Program_HalfWord+0x44>)
 800bfea:	f043 0301 	orr.w	r3, r3, #1
 800bfee:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	887a      	ldrh	r2, [r7, #2]
 800bff4:	801a      	strh	r2, [r3, #0]
}
 800bff6:	bf00      	nop
 800bff8:	370c      	adds	r7, #12
 800bffa:	46bd      	mov	sp, r7
 800bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c000:	4770      	bx	lr
 800c002:	bf00      	nop
 800c004:	40023c00 	.word	0x40023c00

0800c008 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800c008:	b480      	push	{r7}
 800c00a:	b083      	sub	sp, #12
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	460b      	mov	r3, r1
 800c012:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800c014:	4b0c      	ldr	r3, [pc, #48]	; (800c048 <FLASH_Program_Byte+0x40>)
 800c016:	691b      	ldr	r3, [r3, #16]
 800c018:	4a0b      	ldr	r2, [pc, #44]	; (800c048 <FLASH_Program_Byte+0x40>)
 800c01a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c01e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800c020:	4b09      	ldr	r3, [pc, #36]	; (800c048 <FLASH_Program_Byte+0x40>)
 800c022:	4a09      	ldr	r2, [pc, #36]	; (800c048 <FLASH_Program_Byte+0x40>)
 800c024:	691b      	ldr	r3, [r3, #16]
 800c026:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800c028:	4b07      	ldr	r3, [pc, #28]	; (800c048 <FLASH_Program_Byte+0x40>)
 800c02a:	691b      	ldr	r3, [r3, #16]
 800c02c:	4a06      	ldr	r2, [pc, #24]	; (800c048 <FLASH_Program_Byte+0x40>)
 800c02e:	f043 0301 	orr.w	r3, r3, #1
 800c032:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	78fa      	ldrb	r2, [r7, #3]
 800c038:	701a      	strb	r2, [r3, #0]
}
 800c03a:	bf00      	nop
 800c03c:	370c      	adds	r7, #12
 800c03e:	46bd      	mov	sp, r7
 800c040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c044:	4770      	bx	lr
 800c046:	bf00      	nop
 800c048:	40023c00 	.word	0x40023c00

0800c04c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800c04c:	b480      	push	{r7}
 800c04e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800c050:	4b27      	ldr	r3, [pc, #156]	; (800c0f0 <FLASH_SetErrorCode+0xa4>)
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	f003 0310 	and.w	r3, r3, #16
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d008      	beq.n	800c06e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800c05c:	4b25      	ldr	r3, [pc, #148]	; (800c0f4 <FLASH_SetErrorCode+0xa8>)
 800c05e:	69db      	ldr	r3, [r3, #28]
 800c060:	f043 0310 	orr.w	r3, r3, #16
 800c064:	4a23      	ldr	r2, [pc, #140]	; (800c0f4 <FLASH_SetErrorCode+0xa8>)
 800c066:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800c068:	4b21      	ldr	r3, [pc, #132]	; (800c0f0 <FLASH_SetErrorCode+0xa4>)
 800c06a:	2210      	movs	r2, #16
 800c06c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800c06e:	4b20      	ldr	r3, [pc, #128]	; (800c0f0 <FLASH_SetErrorCode+0xa4>)
 800c070:	68db      	ldr	r3, [r3, #12]
 800c072:	f003 0320 	and.w	r3, r3, #32
 800c076:	2b00      	cmp	r3, #0
 800c078:	d008      	beq.n	800c08c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800c07a:	4b1e      	ldr	r3, [pc, #120]	; (800c0f4 <FLASH_SetErrorCode+0xa8>)
 800c07c:	69db      	ldr	r3, [r3, #28]
 800c07e:	f043 0308 	orr.w	r3, r3, #8
 800c082:	4a1c      	ldr	r2, [pc, #112]	; (800c0f4 <FLASH_SetErrorCode+0xa8>)
 800c084:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800c086:	4b1a      	ldr	r3, [pc, #104]	; (800c0f0 <FLASH_SetErrorCode+0xa4>)
 800c088:	2220      	movs	r2, #32
 800c08a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800c08c:	4b18      	ldr	r3, [pc, #96]	; (800c0f0 <FLASH_SetErrorCode+0xa4>)
 800c08e:	68db      	ldr	r3, [r3, #12]
 800c090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c094:	2b00      	cmp	r3, #0
 800c096:	d008      	beq.n	800c0aa <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800c098:	4b16      	ldr	r3, [pc, #88]	; (800c0f4 <FLASH_SetErrorCode+0xa8>)
 800c09a:	69db      	ldr	r3, [r3, #28]
 800c09c:	f043 0304 	orr.w	r3, r3, #4
 800c0a0:	4a14      	ldr	r2, [pc, #80]	; (800c0f4 <FLASH_SetErrorCode+0xa8>)
 800c0a2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800c0a4:	4b12      	ldr	r3, [pc, #72]	; (800c0f0 <FLASH_SetErrorCode+0xa4>)
 800c0a6:	2240      	movs	r2, #64	; 0x40
 800c0a8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800c0aa:	4b11      	ldr	r3, [pc, #68]	; (800c0f0 <FLASH_SetErrorCode+0xa4>)
 800c0ac:	68db      	ldr	r3, [r3, #12]
 800c0ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d008      	beq.n	800c0c8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800c0b6:	4b0f      	ldr	r3, [pc, #60]	; (800c0f4 <FLASH_SetErrorCode+0xa8>)
 800c0b8:	69db      	ldr	r3, [r3, #28]
 800c0ba:	f043 0302 	orr.w	r3, r3, #2
 800c0be:	4a0d      	ldr	r2, [pc, #52]	; (800c0f4 <FLASH_SetErrorCode+0xa8>)
 800c0c0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800c0c2:	4b0b      	ldr	r3, [pc, #44]	; (800c0f0 <FLASH_SetErrorCode+0xa4>)
 800c0c4:	2280      	movs	r2, #128	; 0x80
 800c0c6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800c0c8:	4b09      	ldr	r3, [pc, #36]	; (800c0f0 <FLASH_SetErrorCode+0xa4>)
 800c0ca:	68db      	ldr	r3, [r3, #12]
 800c0cc:	f003 0302 	and.w	r3, r3, #2
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d008      	beq.n	800c0e6 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800c0d4:	4b07      	ldr	r3, [pc, #28]	; (800c0f4 <FLASH_SetErrorCode+0xa8>)
 800c0d6:	69db      	ldr	r3, [r3, #28]
 800c0d8:	f043 0320 	orr.w	r3, r3, #32
 800c0dc:	4a05      	ldr	r2, [pc, #20]	; (800c0f4 <FLASH_SetErrorCode+0xa8>)
 800c0de:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800c0e0:	4b03      	ldr	r3, [pc, #12]	; (800c0f0 <FLASH_SetErrorCode+0xa4>)
 800c0e2:	2202      	movs	r2, #2
 800c0e4:	60da      	str	r2, [r3, #12]
  }
}
 800c0e6:	bf00      	nop
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	4770      	bx	lr
 800c0f0:	40023c00 	.word	0x40023c00
 800c0f4:	20008eb0 	.word	0x20008eb0

0800c0f8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b084      	sub	sp, #16
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c102:	2301      	movs	r3, #1
 800c104:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800c106:	2300      	movs	r3, #0
 800c108:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800c10a:	4b31      	ldr	r3, [pc, #196]	; (800c1d0 <HAL_FLASHEx_Erase+0xd8>)
 800c10c:	7e1b      	ldrb	r3, [r3, #24]
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d101      	bne.n	800c116 <HAL_FLASHEx_Erase+0x1e>
 800c112:	2302      	movs	r3, #2
 800c114:	e058      	b.n	800c1c8 <HAL_FLASHEx_Erase+0xd0>
 800c116:	4b2e      	ldr	r3, [pc, #184]	; (800c1d0 <HAL_FLASHEx_Erase+0xd8>)
 800c118:	2201      	movs	r2, #1
 800c11a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c11c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c120:	f7ff feba 	bl	800be98 <FLASH_WaitForLastOperation>
 800c124:	4603      	mov	r3, r0
 800c126:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800c128:	7bfb      	ldrb	r3, [r7, #15]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d148      	bne.n	800c1c0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c134:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	d115      	bne.n	800c16a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	691b      	ldr	r3, [r3, #16]
 800c142:	b2da      	uxtb	r2, r3
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	685b      	ldr	r3, [r3, #4]
 800c148:	4619      	mov	r1, r3
 800c14a:	4610      	mov	r0, r2
 800c14c:	f000 f844 	bl	800c1d8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c150:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c154:	f7ff fea0 	bl	800be98 <FLASH_WaitForLastOperation>
 800c158:	4603      	mov	r3, r0
 800c15a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800c15c:	4b1d      	ldr	r3, [pc, #116]	; (800c1d4 <HAL_FLASHEx_Erase+0xdc>)
 800c15e:	691b      	ldr	r3, [r3, #16]
 800c160:	4a1c      	ldr	r2, [pc, #112]	; (800c1d4 <HAL_FLASHEx_Erase+0xdc>)
 800c162:	f023 0304 	bic.w	r3, r3, #4
 800c166:	6113      	str	r3, [r2, #16]
 800c168:	e028      	b.n	800c1bc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	689b      	ldr	r3, [r3, #8]
 800c16e:	60bb      	str	r3, [r7, #8]
 800c170:	e01c      	b.n	800c1ac <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	691b      	ldr	r3, [r3, #16]
 800c176:	b2db      	uxtb	r3, r3
 800c178:	4619      	mov	r1, r3
 800c17a:	68b8      	ldr	r0, [r7, #8]
 800c17c:	f000 f850 	bl	800c220 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c180:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c184:	f7ff fe88 	bl	800be98 <FLASH_WaitForLastOperation>
 800c188:	4603      	mov	r3, r0
 800c18a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800c18c:	4b11      	ldr	r3, [pc, #68]	; (800c1d4 <HAL_FLASHEx_Erase+0xdc>)
 800c18e:	691b      	ldr	r3, [r3, #16]
 800c190:	4a10      	ldr	r2, [pc, #64]	; (800c1d4 <HAL_FLASHEx_Erase+0xdc>)
 800c192:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800c196:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800c198:	7bfb      	ldrb	r3, [r7, #15]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d003      	beq.n	800c1a6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	68ba      	ldr	r2, [r7, #8]
 800c1a2:	601a      	str	r2, [r3, #0]
          break;
 800c1a4:	e00a      	b.n	800c1bc <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	3301      	adds	r3, #1
 800c1aa:	60bb      	str	r3, [r7, #8]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	68da      	ldr	r2, [r3, #12]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	689b      	ldr	r3, [r3, #8]
 800c1b4:	4413      	add	r3, r2
 800c1b6:	68ba      	ldr	r2, [r7, #8]
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d3da      	bcc.n	800c172 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800c1bc:	f000 f878 	bl	800c2b0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800c1c0:	4b03      	ldr	r3, [pc, #12]	; (800c1d0 <HAL_FLASHEx_Erase+0xd8>)
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	761a      	strb	r2, [r3, #24]

  return status;
 800c1c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3710      	adds	r7, #16
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	20008eb0 	.word	0x20008eb0
 800c1d4:	40023c00 	.word	0x40023c00

0800c1d8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b083      	sub	sp, #12
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	4603      	mov	r3, r0
 800c1e0:	6039      	str	r1, [r7, #0]
 800c1e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800c1e4:	4b0d      	ldr	r3, [pc, #52]	; (800c21c <FLASH_MassErase+0x44>)
 800c1e6:	691b      	ldr	r3, [r3, #16]
 800c1e8:	4a0c      	ldr	r2, [pc, #48]	; (800c21c <FLASH_MassErase+0x44>)
 800c1ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c1ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800c1f0:	4b0a      	ldr	r3, [pc, #40]	; (800c21c <FLASH_MassErase+0x44>)
 800c1f2:	691b      	ldr	r3, [r3, #16]
 800c1f4:	4a09      	ldr	r2, [pc, #36]	; (800c21c <FLASH_MassErase+0x44>)
 800c1f6:	f043 0304 	orr.w	r3, r3, #4
 800c1fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800c1fc:	4b07      	ldr	r3, [pc, #28]	; (800c21c <FLASH_MassErase+0x44>)
 800c1fe:	691a      	ldr	r2, [r3, #16]
 800c200:	79fb      	ldrb	r3, [r7, #7]
 800c202:	021b      	lsls	r3, r3, #8
 800c204:	4313      	orrs	r3, r2
 800c206:	4a05      	ldr	r2, [pc, #20]	; (800c21c <FLASH_MassErase+0x44>)
 800c208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c20c:	6113      	str	r3, [r2, #16]
}
 800c20e:	bf00      	nop
 800c210:	370c      	adds	r7, #12
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr
 800c21a:	bf00      	nop
 800c21c:	40023c00 	.word	0x40023c00

0800c220 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800c220:	b480      	push	{r7}
 800c222:	b085      	sub	sp, #20
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	460b      	mov	r3, r1
 800c22a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800c22c:	2300      	movs	r3, #0
 800c22e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800c230:	78fb      	ldrb	r3, [r7, #3]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d102      	bne.n	800c23c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800c236:	2300      	movs	r3, #0
 800c238:	60fb      	str	r3, [r7, #12]
 800c23a:	e010      	b.n	800c25e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800c23c:	78fb      	ldrb	r3, [r7, #3]
 800c23e:	2b01      	cmp	r3, #1
 800c240:	d103      	bne.n	800c24a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800c242:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c246:	60fb      	str	r3, [r7, #12]
 800c248:	e009      	b.n	800c25e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800c24a:	78fb      	ldrb	r3, [r7, #3]
 800c24c:	2b02      	cmp	r3, #2
 800c24e:	d103      	bne.n	800c258 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800c250:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c254:	60fb      	str	r3, [r7, #12]
 800c256:	e002      	b.n	800c25e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800c258:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c25c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800c25e:	4b13      	ldr	r3, [pc, #76]	; (800c2ac <FLASH_Erase_Sector+0x8c>)
 800c260:	691b      	ldr	r3, [r3, #16]
 800c262:	4a12      	ldr	r2, [pc, #72]	; (800c2ac <FLASH_Erase_Sector+0x8c>)
 800c264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c268:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800c26a:	4b10      	ldr	r3, [pc, #64]	; (800c2ac <FLASH_Erase_Sector+0x8c>)
 800c26c:	691a      	ldr	r2, [r3, #16]
 800c26e:	490f      	ldr	r1, [pc, #60]	; (800c2ac <FLASH_Erase_Sector+0x8c>)
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	4313      	orrs	r3, r2
 800c274:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800c276:	4b0d      	ldr	r3, [pc, #52]	; (800c2ac <FLASH_Erase_Sector+0x8c>)
 800c278:	691b      	ldr	r3, [r3, #16]
 800c27a:	4a0c      	ldr	r2, [pc, #48]	; (800c2ac <FLASH_Erase_Sector+0x8c>)
 800c27c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c280:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800c282:	4b0a      	ldr	r3, [pc, #40]	; (800c2ac <FLASH_Erase_Sector+0x8c>)
 800c284:	691a      	ldr	r2, [r3, #16]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	00db      	lsls	r3, r3, #3
 800c28a:	4313      	orrs	r3, r2
 800c28c:	4a07      	ldr	r2, [pc, #28]	; (800c2ac <FLASH_Erase_Sector+0x8c>)
 800c28e:	f043 0302 	orr.w	r3, r3, #2
 800c292:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800c294:	4b05      	ldr	r3, [pc, #20]	; (800c2ac <FLASH_Erase_Sector+0x8c>)
 800c296:	691b      	ldr	r3, [r3, #16]
 800c298:	4a04      	ldr	r2, [pc, #16]	; (800c2ac <FLASH_Erase_Sector+0x8c>)
 800c29a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c29e:	6113      	str	r3, [r2, #16]
}
 800c2a0:	bf00      	nop
 800c2a2:	3714      	adds	r7, #20
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr
 800c2ac:	40023c00 	.word	0x40023c00

0800c2b0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800c2b4:	4b20      	ldr	r3, [pc, #128]	; (800c338 <FLASH_FlushCaches+0x88>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d017      	beq.n	800c2f0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800c2c0:	4b1d      	ldr	r3, [pc, #116]	; (800c338 <FLASH_FlushCaches+0x88>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	4a1c      	ldr	r2, [pc, #112]	; (800c338 <FLASH_FlushCaches+0x88>)
 800c2c6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c2ca:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800c2cc:	4b1a      	ldr	r3, [pc, #104]	; (800c338 <FLASH_FlushCaches+0x88>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	4a19      	ldr	r2, [pc, #100]	; (800c338 <FLASH_FlushCaches+0x88>)
 800c2d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c2d6:	6013      	str	r3, [r2, #0]
 800c2d8:	4b17      	ldr	r3, [pc, #92]	; (800c338 <FLASH_FlushCaches+0x88>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4a16      	ldr	r2, [pc, #88]	; (800c338 <FLASH_FlushCaches+0x88>)
 800c2de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c2e2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800c2e4:	4b14      	ldr	r3, [pc, #80]	; (800c338 <FLASH_FlushCaches+0x88>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4a13      	ldr	r2, [pc, #76]	; (800c338 <FLASH_FlushCaches+0x88>)
 800c2ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c2ee:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800c2f0:	4b11      	ldr	r3, [pc, #68]	; (800c338 <FLASH_FlushCaches+0x88>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d017      	beq.n	800c32c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800c2fc:	4b0e      	ldr	r3, [pc, #56]	; (800c338 <FLASH_FlushCaches+0x88>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	4a0d      	ldr	r2, [pc, #52]	; (800c338 <FLASH_FlushCaches+0x88>)
 800c302:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c306:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800c308:	4b0b      	ldr	r3, [pc, #44]	; (800c338 <FLASH_FlushCaches+0x88>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4a0a      	ldr	r2, [pc, #40]	; (800c338 <FLASH_FlushCaches+0x88>)
 800c30e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c312:	6013      	str	r3, [r2, #0]
 800c314:	4b08      	ldr	r3, [pc, #32]	; (800c338 <FLASH_FlushCaches+0x88>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	4a07      	ldr	r2, [pc, #28]	; (800c338 <FLASH_FlushCaches+0x88>)
 800c31a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c31e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800c320:	4b05      	ldr	r3, [pc, #20]	; (800c338 <FLASH_FlushCaches+0x88>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4a04      	ldr	r2, [pc, #16]	; (800c338 <FLASH_FlushCaches+0x88>)
 800c326:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c32a:	6013      	str	r3, [r2, #0]
  }
}
 800c32c:	bf00      	nop
 800c32e:	46bd      	mov	sp, r7
 800c330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c334:	4770      	bx	lr
 800c336:	bf00      	nop
 800c338:	40023c00 	.word	0x40023c00

0800c33c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b089      	sub	sp, #36	; 0x24
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c346:	2300      	movs	r3, #0
 800c348:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c34a:	2300      	movs	r3, #0
 800c34c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c34e:	2300      	movs	r3, #0
 800c350:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c352:	2300      	movs	r3, #0
 800c354:	61fb      	str	r3, [r7, #28]
 800c356:	e16b      	b.n	800c630 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c358:	2201      	movs	r2, #1
 800c35a:	69fb      	ldr	r3, [r7, #28]
 800c35c:	fa02 f303 	lsl.w	r3, r2, r3
 800c360:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	697a      	ldr	r2, [r7, #20]
 800c368:	4013      	ands	r3, r2
 800c36a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c36c:	693a      	ldr	r2, [r7, #16]
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	429a      	cmp	r2, r3
 800c372:	f040 815a 	bne.w	800c62a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	2b01      	cmp	r3, #1
 800c37c:	d00b      	beq.n	800c396 <HAL_GPIO_Init+0x5a>
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	685b      	ldr	r3, [r3, #4]
 800c382:	2b02      	cmp	r3, #2
 800c384:	d007      	beq.n	800c396 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c38a:	2b11      	cmp	r3, #17
 800c38c:	d003      	beq.n	800c396 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	2b12      	cmp	r3, #18
 800c394:	d130      	bne.n	800c3f8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	689b      	ldr	r3, [r3, #8]
 800c39a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c39c:	69fb      	ldr	r3, [r7, #28]
 800c39e:	005b      	lsls	r3, r3, #1
 800c3a0:	2203      	movs	r2, #3
 800c3a2:	fa02 f303 	lsl.w	r3, r2, r3
 800c3a6:	43db      	mvns	r3, r3
 800c3a8:	69ba      	ldr	r2, [r7, #24]
 800c3aa:	4013      	ands	r3, r2
 800c3ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	68da      	ldr	r2, [r3, #12]
 800c3b2:	69fb      	ldr	r3, [r7, #28]
 800c3b4:	005b      	lsls	r3, r3, #1
 800c3b6:	fa02 f303 	lsl.w	r3, r2, r3
 800c3ba:	69ba      	ldr	r2, [r7, #24]
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	69ba      	ldr	r2, [r7, #24]
 800c3c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	685b      	ldr	r3, [r3, #4]
 800c3ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	69fb      	ldr	r3, [r7, #28]
 800c3d0:	fa02 f303 	lsl.w	r3, r2, r3
 800c3d4:	43db      	mvns	r3, r3
 800c3d6:	69ba      	ldr	r2, [r7, #24]
 800c3d8:	4013      	ands	r3, r2
 800c3da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	685b      	ldr	r3, [r3, #4]
 800c3e0:	091b      	lsrs	r3, r3, #4
 800c3e2:	f003 0201 	and.w	r2, r3, #1
 800c3e6:	69fb      	ldr	r3, [r7, #28]
 800c3e8:	fa02 f303 	lsl.w	r3, r2, r3
 800c3ec:	69ba      	ldr	r2, [r7, #24]
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	69ba      	ldr	r2, [r7, #24]
 800c3f6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	68db      	ldr	r3, [r3, #12]
 800c3fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c3fe:	69fb      	ldr	r3, [r7, #28]
 800c400:	005b      	lsls	r3, r3, #1
 800c402:	2203      	movs	r2, #3
 800c404:	fa02 f303 	lsl.w	r3, r2, r3
 800c408:	43db      	mvns	r3, r3
 800c40a:	69ba      	ldr	r2, [r7, #24]
 800c40c:	4013      	ands	r3, r2
 800c40e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	689a      	ldr	r2, [r3, #8]
 800c414:	69fb      	ldr	r3, [r7, #28]
 800c416:	005b      	lsls	r3, r3, #1
 800c418:	fa02 f303 	lsl.w	r3, r2, r3
 800c41c:	69ba      	ldr	r2, [r7, #24]
 800c41e:	4313      	orrs	r3, r2
 800c420:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	69ba      	ldr	r2, [r7, #24]
 800c426:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	685b      	ldr	r3, [r3, #4]
 800c42c:	2b02      	cmp	r3, #2
 800c42e:	d003      	beq.n	800c438 <HAL_GPIO_Init+0xfc>
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	2b12      	cmp	r3, #18
 800c436:	d123      	bne.n	800c480 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c438:	69fb      	ldr	r3, [r7, #28]
 800c43a:	08da      	lsrs	r2, r3, #3
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	3208      	adds	r2, #8
 800c440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c444:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c446:	69fb      	ldr	r3, [r7, #28]
 800c448:	f003 0307 	and.w	r3, r3, #7
 800c44c:	009b      	lsls	r3, r3, #2
 800c44e:	220f      	movs	r2, #15
 800c450:	fa02 f303 	lsl.w	r3, r2, r3
 800c454:	43db      	mvns	r3, r3
 800c456:	69ba      	ldr	r2, [r7, #24]
 800c458:	4013      	ands	r3, r2
 800c45a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	691a      	ldr	r2, [r3, #16]
 800c460:	69fb      	ldr	r3, [r7, #28]
 800c462:	f003 0307 	and.w	r3, r3, #7
 800c466:	009b      	lsls	r3, r3, #2
 800c468:	fa02 f303 	lsl.w	r3, r2, r3
 800c46c:	69ba      	ldr	r2, [r7, #24]
 800c46e:	4313      	orrs	r3, r2
 800c470:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c472:	69fb      	ldr	r3, [r7, #28]
 800c474:	08da      	lsrs	r2, r3, #3
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	3208      	adds	r2, #8
 800c47a:	69b9      	ldr	r1, [r7, #24]
 800c47c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c486:	69fb      	ldr	r3, [r7, #28]
 800c488:	005b      	lsls	r3, r3, #1
 800c48a:	2203      	movs	r2, #3
 800c48c:	fa02 f303 	lsl.w	r3, r2, r3
 800c490:	43db      	mvns	r3, r3
 800c492:	69ba      	ldr	r2, [r7, #24]
 800c494:	4013      	ands	r3, r2
 800c496:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	685b      	ldr	r3, [r3, #4]
 800c49c:	f003 0203 	and.w	r2, r3, #3
 800c4a0:	69fb      	ldr	r3, [r7, #28]
 800c4a2:	005b      	lsls	r3, r3, #1
 800c4a4:	fa02 f303 	lsl.w	r3, r2, r3
 800c4a8:	69ba      	ldr	r2, [r7, #24]
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	69ba      	ldr	r2, [r7, #24]
 800c4b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	685b      	ldr	r3, [r3, #4]
 800c4b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	f000 80b4 	beq.w	800c62a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	60fb      	str	r3, [r7, #12]
 800c4c6:	4b60      	ldr	r3, [pc, #384]	; (800c648 <HAL_GPIO_Init+0x30c>)
 800c4c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4ca:	4a5f      	ldr	r2, [pc, #380]	; (800c648 <HAL_GPIO_Init+0x30c>)
 800c4cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c4d0:	6453      	str	r3, [r2, #68]	; 0x44
 800c4d2:	4b5d      	ldr	r3, [pc, #372]	; (800c648 <HAL_GPIO_Init+0x30c>)
 800c4d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4da:	60fb      	str	r3, [r7, #12]
 800c4dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c4de:	4a5b      	ldr	r2, [pc, #364]	; (800c64c <HAL_GPIO_Init+0x310>)
 800c4e0:	69fb      	ldr	r3, [r7, #28]
 800c4e2:	089b      	lsrs	r3, r3, #2
 800c4e4:	3302      	adds	r3, #2
 800c4e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c4ec:	69fb      	ldr	r3, [r7, #28]
 800c4ee:	f003 0303 	and.w	r3, r3, #3
 800c4f2:	009b      	lsls	r3, r3, #2
 800c4f4:	220f      	movs	r2, #15
 800c4f6:	fa02 f303 	lsl.w	r3, r2, r3
 800c4fa:	43db      	mvns	r3, r3
 800c4fc:	69ba      	ldr	r2, [r7, #24]
 800c4fe:	4013      	ands	r3, r2
 800c500:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	4a52      	ldr	r2, [pc, #328]	; (800c650 <HAL_GPIO_Init+0x314>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d02b      	beq.n	800c562 <HAL_GPIO_Init+0x226>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	4a51      	ldr	r2, [pc, #324]	; (800c654 <HAL_GPIO_Init+0x318>)
 800c50e:	4293      	cmp	r3, r2
 800c510:	d025      	beq.n	800c55e <HAL_GPIO_Init+0x222>
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	4a50      	ldr	r2, [pc, #320]	; (800c658 <HAL_GPIO_Init+0x31c>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d01f      	beq.n	800c55a <HAL_GPIO_Init+0x21e>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	4a4f      	ldr	r2, [pc, #316]	; (800c65c <HAL_GPIO_Init+0x320>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d019      	beq.n	800c556 <HAL_GPIO_Init+0x21a>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	4a4e      	ldr	r2, [pc, #312]	; (800c660 <HAL_GPIO_Init+0x324>)
 800c526:	4293      	cmp	r3, r2
 800c528:	d013      	beq.n	800c552 <HAL_GPIO_Init+0x216>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	4a4d      	ldr	r2, [pc, #308]	; (800c664 <HAL_GPIO_Init+0x328>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	d00d      	beq.n	800c54e <HAL_GPIO_Init+0x212>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	4a4c      	ldr	r2, [pc, #304]	; (800c668 <HAL_GPIO_Init+0x32c>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d007      	beq.n	800c54a <HAL_GPIO_Init+0x20e>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	4a4b      	ldr	r2, [pc, #300]	; (800c66c <HAL_GPIO_Init+0x330>)
 800c53e:	4293      	cmp	r3, r2
 800c540:	d101      	bne.n	800c546 <HAL_GPIO_Init+0x20a>
 800c542:	2307      	movs	r3, #7
 800c544:	e00e      	b.n	800c564 <HAL_GPIO_Init+0x228>
 800c546:	2308      	movs	r3, #8
 800c548:	e00c      	b.n	800c564 <HAL_GPIO_Init+0x228>
 800c54a:	2306      	movs	r3, #6
 800c54c:	e00a      	b.n	800c564 <HAL_GPIO_Init+0x228>
 800c54e:	2305      	movs	r3, #5
 800c550:	e008      	b.n	800c564 <HAL_GPIO_Init+0x228>
 800c552:	2304      	movs	r3, #4
 800c554:	e006      	b.n	800c564 <HAL_GPIO_Init+0x228>
 800c556:	2303      	movs	r3, #3
 800c558:	e004      	b.n	800c564 <HAL_GPIO_Init+0x228>
 800c55a:	2302      	movs	r3, #2
 800c55c:	e002      	b.n	800c564 <HAL_GPIO_Init+0x228>
 800c55e:	2301      	movs	r3, #1
 800c560:	e000      	b.n	800c564 <HAL_GPIO_Init+0x228>
 800c562:	2300      	movs	r3, #0
 800c564:	69fa      	ldr	r2, [r7, #28]
 800c566:	f002 0203 	and.w	r2, r2, #3
 800c56a:	0092      	lsls	r2, r2, #2
 800c56c:	4093      	lsls	r3, r2
 800c56e:	69ba      	ldr	r2, [r7, #24]
 800c570:	4313      	orrs	r3, r2
 800c572:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c574:	4935      	ldr	r1, [pc, #212]	; (800c64c <HAL_GPIO_Init+0x310>)
 800c576:	69fb      	ldr	r3, [r7, #28]
 800c578:	089b      	lsrs	r3, r3, #2
 800c57a:	3302      	adds	r3, #2
 800c57c:	69ba      	ldr	r2, [r7, #24]
 800c57e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c582:	4b3b      	ldr	r3, [pc, #236]	; (800c670 <HAL_GPIO_Init+0x334>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	43db      	mvns	r3, r3
 800c58c:	69ba      	ldr	r2, [r7, #24]
 800c58e:	4013      	ands	r3, r2
 800c590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	685b      	ldr	r3, [r3, #4]
 800c596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d003      	beq.n	800c5a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800c59e:	69ba      	ldr	r2, [r7, #24]
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c5a6:	4a32      	ldr	r2, [pc, #200]	; (800c670 <HAL_GPIO_Init+0x334>)
 800c5a8:	69bb      	ldr	r3, [r7, #24]
 800c5aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c5ac:	4b30      	ldr	r3, [pc, #192]	; (800c670 <HAL_GPIO_Init+0x334>)
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	43db      	mvns	r3, r3
 800c5b6:	69ba      	ldr	r2, [r7, #24]
 800c5b8:	4013      	ands	r3, r2
 800c5ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	685b      	ldr	r3, [r3, #4]
 800c5c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d003      	beq.n	800c5d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800c5c8:	69ba      	ldr	r2, [r7, #24]
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c5d0:	4a27      	ldr	r2, [pc, #156]	; (800c670 <HAL_GPIO_Init+0x334>)
 800c5d2:	69bb      	ldr	r3, [r7, #24]
 800c5d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c5d6:	4b26      	ldr	r3, [pc, #152]	; (800c670 <HAL_GPIO_Init+0x334>)
 800c5d8:	689b      	ldr	r3, [r3, #8]
 800c5da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	43db      	mvns	r3, r3
 800c5e0:	69ba      	ldr	r2, [r7, #24]
 800c5e2:	4013      	ands	r3, r2
 800c5e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d003      	beq.n	800c5fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800c5f2:	69ba      	ldr	r2, [r7, #24]
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	4313      	orrs	r3, r2
 800c5f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c5fa:	4a1d      	ldr	r2, [pc, #116]	; (800c670 <HAL_GPIO_Init+0x334>)
 800c5fc:	69bb      	ldr	r3, [r7, #24]
 800c5fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c600:	4b1b      	ldr	r3, [pc, #108]	; (800c670 <HAL_GPIO_Init+0x334>)
 800c602:	68db      	ldr	r3, [r3, #12]
 800c604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	43db      	mvns	r3, r3
 800c60a:	69ba      	ldr	r2, [r7, #24]
 800c60c:	4013      	ands	r3, r2
 800c60e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d003      	beq.n	800c624 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800c61c:	69ba      	ldr	r2, [r7, #24]
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	4313      	orrs	r3, r2
 800c622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c624:	4a12      	ldr	r2, [pc, #72]	; (800c670 <HAL_GPIO_Init+0x334>)
 800c626:	69bb      	ldr	r3, [r7, #24]
 800c628:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c62a:	69fb      	ldr	r3, [r7, #28]
 800c62c:	3301      	adds	r3, #1
 800c62e:	61fb      	str	r3, [r7, #28]
 800c630:	69fb      	ldr	r3, [r7, #28]
 800c632:	2b0f      	cmp	r3, #15
 800c634:	f67f ae90 	bls.w	800c358 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c638:	bf00      	nop
 800c63a:	bf00      	nop
 800c63c:	3724      	adds	r7, #36	; 0x24
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr
 800c646:	bf00      	nop
 800c648:	40023800 	.word	0x40023800
 800c64c:	40013800 	.word	0x40013800
 800c650:	40020000 	.word	0x40020000
 800c654:	40020400 	.word	0x40020400
 800c658:	40020800 	.word	0x40020800
 800c65c:	40020c00 	.word	0x40020c00
 800c660:	40021000 	.word	0x40021000
 800c664:	40021400 	.word	0x40021400
 800c668:	40021800 	.word	0x40021800
 800c66c:	40021c00 	.word	0x40021c00
 800c670:	40013c00 	.word	0x40013c00

0800c674 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c674:	b480      	push	{r7}
 800c676:	b087      	sub	sp, #28
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c67e:	2300      	movs	r3, #0
 800c680:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800c682:	2300      	movs	r3, #0
 800c684:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800c686:	2300      	movs	r3, #0
 800c688:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c68a:	2300      	movs	r3, #0
 800c68c:	617b      	str	r3, [r7, #20]
 800c68e:	e0cd      	b.n	800c82c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c690:	2201      	movs	r2, #1
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	fa02 f303 	lsl.w	r3, r2, r3
 800c698:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800c69a:	683a      	ldr	r2, [r7, #0]
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	4013      	ands	r3, r2
 800c6a0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800c6a2:	68fa      	ldr	r2, [r7, #12]
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	f040 80bd 	bne.w	800c826 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800c6ac:	4a65      	ldr	r2, [pc, #404]	; (800c844 <HAL_GPIO_DeInit+0x1d0>)
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	089b      	lsrs	r3, r3, #2
 800c6b2:	3302      	adds	r3, #2
 800c6b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6b8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	f003 0303 	and.w	r3, r3, #3
 800c6c0:	009b      	lsls	r3, r3, #2
 800c6c2:	220f      	movs	r2, #15
 800c6c4:	fa02 f303 	lsl.w	r3, r2, r3
 800c6c8:	68ba      	ldr	r2, [r7, #8]
 800c6ca:	4013      	ands	r3, r2
 800c6cc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	4a5d      	ldr	r2, [pc, #372]	; (800c848 <HAL_GPIO_DeInit+0x1d4>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d02b      	beq.n	800c72e <HAL_GPIO_DeInit+0xba>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	4a5c      	ldr	r2, [pc, #368]	; (800c84c <HAL_GPIO_DeInit+0x1d8>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d025      	beq.n	800c72a <HAL_GPIO_DeInit+0xb6>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	4a5b      	ldr	r2, [pc, #364]	; (800c850 <HAL_GPIO_DeInit+0x1dc>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d01f      	beq.n	800c726 <HAL_GPIO_DeInit+0xb2>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	4a5a      	ldr	r2, [pc, #360]	; (800c854 <HAL_GPIO_DeInit+0x1e0>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d019      	beq.n	800c722 <HAL_GPIO_DeInit+0xae>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	4a59      	ldr	r2, [pc, #356]	; (800c858 <HAL_GPIO_DeInit+0x1e4>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d013      	beq.n	800c71e <HAL_GPIO_DeInit+0xaa>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	4a58      	ldr	r2, [pc, #352]	; (800c85c <HAL_GPIO_DeInit+0x1e8>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d00d      	beq.n	800c71a <HAL_GPIO_DeInit+0xa6>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	4a57      	ldr	r2, [pc, #348]	; (800c860 <HAL_GPIO_DeInit+0x1ec>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d007      	beq.n	800c716 <HAL_GPIO_DeInit+0xa2>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	4a56      	ldr	r2, [pc, #344]	; (800c864 <HAL_GPIO_DeInit+0x1f0>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d101      	bne.n	800c712 <HAL_GPIO_DeInit+0x9e>
 800c70e:	2307      	movs	r3, #7
 800c710:	e00e      	b.n	800c730 <HAL_GPIO_DeInit+0xbc>
 800c712:	2308      	movs	r3, #8
 800c714:	e00c      	b.n	800c730 <HAL_GPIO_DeInit+0xbc>
 800c716:	2306      	movs	r3, #6
 800c718:	e00a      	b.n	800c730 <HAL_GPIO_DeInit+0xbc>
 800c71a:	2305      	movs	r3, #5
 800c71c:	e008      	b.n	800c730 <HAL_GPIO_DeInit+0xbc>
 800c71e:	2304      	movs	r3, #4
 800c720:	e006      	b.n	800c730 <HAL_GPIO_DeInit+0xbc>
 800c722:	2303      	movs	r3, #3
 800c724:	e004      	b.n	800c730 <HAL_GPIO_DeInit+0xbc>
 800c726:	2302      	movs	r3, #2
 800c728:	e002      	b.n	800c730 <HAL_GPIO_DeInit+0xbc>
 800c72a:	2301      	movs	r3, #1
 800c72c:	e000      	b.n	800c730 <HAL_GPIO_DeInit+0xbc>
 800c72e:	2300      	movs	r3, #0
 800c730:	697a      	ldr	r2, [r7, #20]
 800c732:	f002 0203 	and.w	r2, r2, #3
 800c736:	0092      	lsls	r2, r2, #2
 800c738:	4093      	lsls	r3, r2
 800c73a:	68ba      	ldr	r2, [r7, #8]
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d132      	bne.n	800c7a6 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800c740:	4b49      	ldr	r3, [pc, #292]	; (800c868 <HAL_GPIO_DeInit+0x1f4>)
 800c742:	681a      	ldr	r2, [r3, #0]
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	43db      	mvns	r3, r3
 800c748:	4947      	ldr	r1, [pc, #284]	; (800c868 <HAL_GPIO_DeInit+0x1f4>)
 800c74a:	4013      	ands	r3, r2
 800c74c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800c74e:	4b46      	ldr	r3, [pc, #280]	; (800c868 <HAL_GPIO_DeInit+0x1f4>)
 800c750:	685a      	ldr	r2, [r3, #4]
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	43db      	mvns	r3, r3
 800c756:	4944      	ldr	r1, [pc, #272]	; (800c868 <HAL_GPIO_DeInit+0x1f4>)
 800c758:	4013      	ands	r3, r2
 800c75a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800c75c:	4b42      	ldr	r3, [pc, #264]	; (800c868 <HAL_GPIO_DeInit+0x1f4>)
 800c75e:	689a      	ldr	r2, [r3, #8]
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	43db      	mvns	r3, r3
 800c764:	4940      	ldr	r1, [pc, #256]	; (800c868 <HAL_GPIO_DeInit+0x1f4>)
 800c766:	4013      	ands	r3, r2
 800c768:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800c76a:	4b3f      	ldr	r3, [pc, #252]	; (800c868 <HAL_GPIO_DeInit+0x1f4>)
 800c76c:	68da      	ldr	r2, [r3, #12]
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	43db      	mvns	r3, r3
 800c772:	493d      	ldr	r1, [pc, #244]	; (800c868 <HAL_GPIO_DeInit+0x1f4>)
 800c774:	4013      	ands	r3, r2
 800c776:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	f003 0303 	and.w	r3, r3, #3
 800c77e:	009b      	lsls	r3, r3, #2
 800c780:	220f      	movs	r2, #15
 800c782:	fa02 f303 	lsl.w	r3, r2, r3
 800c786:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800c788:	4a2e      	ldr	r2, [pc, #184]	; (800c844 <HAL_GPIO_DeInit+0x1d0>)
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	089b      	lsrs	r3, r3, #2
 800c78e:	3302      	adds	r3, #2
 800c790:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	43da      	mvns	r2, r3
 800c798:	482a      	ldr	r0, [pc, #168]	; (800c844 <HAL_GPIO_DeInit+0x1d0>)
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	089b      	lsrs	r3, r3, #2
 800c79e:	400a      	ands	r2, r1
 800c7a0:	3302      	adds	r3, #2
 800c7a2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	005b      	lsls	r3, r3, #1
 800c7ae:	2103      	movs	r1, #3
 800c7b0:	fa01 f303 	lsl.w	r3, r1, r3
 800c7b4:	43db      	mvns	r3, r3
 800c7b6:	401a      	ands	r2, r3
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	08da      	lsrs	r2, r3, #3
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	3208      	adds	r2, #8
 800c7c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	f003 0307 	and.w	r3, r3, #7
 800c7ce:	009b      	lsls	r3, r3, #2
 800c7d0:	220f      	movs	r2, #15
 800c7d2:	fa02 f303 	lsl.w	r3, r2, r3
 800c7d6:	43db      	mvns	r3, r3
 800c7d8:	697a      	ldr	r2, [r7, #20]
 800c7da:	08d2      	lsrs	r2, r2, #3
 800c7dc:	4019      	ands	r1, r3
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	3208      	adds	r2, #8
 800c7e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	68da      	ldr	r2, [r3, #12]
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	005b      	lsls	r3, r3, #1
 800c7ee:	2103      	movs	r1, #3
 800c7f0:	fa01 f303 	lsl.w	r3, r1, r3
 800c7f4:	43db      	mvns	r3, r3
 800c7f6:	401a      	ands	r2, r3
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	685a      	ldr	r2, [r3, #4]
 800c800:	2101      	movs	r1, #1
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	fa01 f303 	lsl.w	r3, r1, r3
 800c808:	43db      	mvns	r3, r3
 800c80a:	401a      	ands	r2, r3
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	689a      	ldr	r2, [r3, #8]
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	005b      	lsls	r3, r3, #1
 800c818:	2103      	movs	r1, #3
 800c81a:	fa01 f303 	lsl.w	r3, r1, r3
 800c81e:	43db      	mvns	r3, r3
 800c820:	401a      	ands	r2, r3
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	3301      	adds	r3, #1
 800c82a:	617b      	str	r3, [r7, #20]
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	2b0f      	cmp	r3, #15
 800c830:	f67f af2e 	bls.w	800c690 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800c834:	bf00      	nop
 800c836:	bf00      	nop
 800c838:	371c      	adds	r7, #28
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr
 800c842:	bf00      	nop
 800c844:	40013800 	.word	0x40013800
 800c848:	40020000 	.word	0x40020000
 800c84c:	40020400 	.word	0x40020400
 800c850:	40020800 	.word	0x40020800
 800c854:	40020c00 	.word	0x40020c00
 800c858:	40021000 	.word	0x40021000
 800c85c:	40021400 	.word	0x40021400
 800c860:	40021800 	.word	0x40021800
 800c864:	40021c00 	.word	0x40021c00
 800c868:	40013c00 	.word	0x40013c00

0800c86c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b083      	sub	sp, #12
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	460b      	mov	r3, r1
 800c876:	807b      	strh	r3, [r7, #2]
 800c878:	4613      	mov	r3, r2
 800c87a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c87c:	787b      	ldrb	r3, [r7, #1]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d003      	beq.n	800c88a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c882:	887a      	ldrh	r2, [r7, #2]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c888:	e003      	b.n	800c892 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c88a:	887b      	ldrh	r3, [r7, #2]
 800c88c:	041a      	lsls	r2, r3, #16
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	619a      	str	r2, [r3, #24]
}
 800c892:	bf00      	nop
 800c894:	370c      	adds	r7, #12
 800c896:	46bd      	mov	sp, r7
 800c898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89c:	4770      	bx	lr
	...

0800c8a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b084      	sub	sp, #16
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d101      	bne.n	800c8b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	e12b      	b.n	800cb0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8b8:	b2db      	uxtb	r3, r3
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d106      	bne.n	800c8cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f7f5 f8fa 	bl	8001ac0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2224      	movs	r2, #36	; 0x24
 800c8d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	681a      	ldr	r2, [r3, #0]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	f022 0201 	bic.w	r2, r2, #1
 800c8e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	681a      	ldr	r2, [r3, #0]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c8f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	681a      	ldr	r2, [r3, #0]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c902:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800c904:	f002 fc64 	bl	800f1d0 <HAL_RCC_GetPCLK1Freq>
 800c908:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	685b      	ldr	r3, [r3, #4]
 800c90e:	4a81      	ldr	r2, [pc, #516]	; (800cb14 <HAL_I2C_Init+0x274>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d807      	bhi.n	800c924 <HAL_I2C_Init+0x84>
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	4a80      	ldr	r2, [pc, #512]	; (800cb18 <HAL_I2C_Init+0x278>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	bf94      	ite	ls
 800c91c:	2301      	movls	r3, #1
 800c91e:	2300      	movhi	r3, #0
 800c920:	b2db      	uxtb	r3, r3
 800c922:	e006      	b.n	800c932 <HAL_I2C_Init+0x92>
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	4a7d      	ldr	r2, [pc, #500]	; (800cb1c <HAL_I2C_Init+0x27c>)
 800c928:	4293      	cmp	r3, r2
 800c92a:	bf94      	ite	ls
 800c92c:	2301      	movls	r3, #1
 800c92e:	2300      	movhi	r3, #0
 800c930:	b2db      	uxtb	r3, r3
 800c932:	2b00      	cmp	r3, #0
 800c934:	d001      	beq.n	800c93a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800c936:	2301      	movs	r3, #1
 800c938:	e0e7      	b.n	800cb0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	4a78      	ldr	r2, [pc, #480]	; (800cb20 <HAL_I2C_Init+0x280>)
 800c93e:	fba2 2303 	umull	r2, r3, r2, r3
 800c942:	0c9b      	lsrs	r3, r3, #18
 800c944:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	68ba      	ldr	r2, [r7, #8]
 800c956:	430a      	orrs	r2, r1
 800c958:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	6a1b      	ldr	r3, [r3, #32]
 800c960:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	685b      	ldr	r3, [r3, #4]
 800c968:	4a6a      	ldr	r2, [pc, #424]	; (800cb14 <HAL_I2C_Init+0x274>)
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d802      	bhi.n	800c974 <HAL_I2C_Init+0xd4>
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	3301      	adds	r3, #1
 800c972:	e009      	b.n	800c988 <HAL_I2C_Init+0xe8>
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c97a:	fb02 f303 	mul.w	r3, r2, r3
 800c97e:	4a69      	ldr	r2, [pc, #420]	; (800cb24 <HAL_I2C_Init+0x284>)
 800c980:	fba2 2303 	umull	r2, r3, r2, r3
 800c984:	099b      	lsrs	r3, r3, #6
 800c986:	3301      	adds	r3, #1
 800c988:	687a      	ldr	r2, [r7, #4]
 800c98a:	6812      	ldr	r2, [r2, #0]
 800c98c:	430b      	orrs	r3, r1
 800c98e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	69db      	ldr	r3, [r3, #28]
 800c996:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800c99a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	495c      	ldr	r1, [pc, #368]	; (800cb14 <HAL_I2C_Init+0x274>)
 800c9a4:	428b      	cmp	r3, r1
 800c9a6:	d819      	bhi.n	800c9dc <HAL_I2C_Init+0x13c>
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	1e59      	subs	r1, r3, #1
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	685b      	ldr	r3, [r3, #4]
 800c9b0:	005b      	lsls	r3, r3, #1
 800c9b2:	fbb1 f3f3 	udiv	r3, r1, r3
 800c9b6:	1c59      	adds	r1, r3, #1
 800c9b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c9bc:	400b      	ands	r3, r1
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d00a      	beq.n	800c9d8 <HAL_I2C_Init+0x138>
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	1e59      	subs	r1, r3, #1
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	685b      	ldr	r3, [r3, #4]
 800c9ca:	005b      	lsls	r3, r3, #1
 800c9cc:	fbb1 f3f3 	udiv	r3, r1, r3
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c9d6:	e051      	b.n	800ca7c <HAL_I2C_Init+0x1dc>
 800c9d8:	2304      	movs	r3, #4
 800c9da:	e04f      	b.n	800ca7c <HAL_I2C_Init+0x1dc>
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	689b      	ldr	r3, [r3, #8]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d111      	bne.n	800ca08 <HAL_I2C_Init+0x168>
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	1e58      	subs	r0, r3, #1
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6859      	ldr	r1, [r3, #4]
 800c9ec:	460b      	mov	r3, r1
 800c9ee:	005b      	lsls	r3, r3, #1
 800c9f0:	440b      	add	r3, r1
 800c9f2:	fbb0 f3f3 	udiv	r3, r0, r3
 800c9f6:	3301      	adds	r3, #1
 800c9f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	bf0c      	ite	eq
 800ca00:	2301      	moveq	r3, #1
 800ca02:	2300      	movne	r3, #0
 800ca04:	b2db      	uxtb	r3, r3
 800ca06:	e012      	b.n	800ca2e <HAL_I2C_Init+0x18e>
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	1e58      	subs	r0, r3, #1
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6859      	ldr	r1, [r3, #4]
 800ca10:	460b      	mov	r3, r1
 800ca12:	009b      	lsls	r3, r3, #2
 800ca14:	440b      	add	r3, r1
 800ca16:	0099      	lsls	r1, r3, #2
 800ca18:	440b      	add	r3, r1
 800ca1a:	fbb0 f3f3 	udiv	r3, r0, r3
 800ca1e:	3301      	adds	r3, #1
 800ca20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	bf0c      	ite	eq
 800ca28:	2301      	moveq	r3, #1
 800ca2a:	2300      	movne	r3, #0
 800ca2c:	b2db      	uxtb	r3, r3
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d001      	beq.n	800ca36 <HAL_I2C_Init+0x196>
 800ca32:	2301      	movs	r3, #1
 800ca34:	e022      	b.n	800ca7c <HAL_I2C_Init+0x1dc>
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	689b      	ldr	r3, [r3, #8]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d10e      	bne.n	800ca5c <HAL_I2C_Init+0x1bc>
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	1e58      	subs	r0, r3, #1
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6859      	ldr	r1, [r3, #4]
 800ca46:	460b      	mov	r3, r1
 800ca48:	005b      	lsls	r3, r3, #1
 800ca4a:	440b      	add	r3, r1
 800ca4c:	fbb0 f3f3 	udiv	r3, r0, r3
 800ca50:	3301      	adds	r3, #1
 800ca52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ca56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca5a:	e00f      	b.n	800ca7c <HAL_I2C_Init+0x1dc>
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	1e58      	subs	r0, r3, #1
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6859      	ldr	r1, [r3, #4]
 800ca64:	460b      	mov	r3, r1
 800ca66:	009b      	lsls	r3, r3, #2
 800ca68:	440b      	add	r3, r1
 800ca6a:	0099      	lsls	r1, r3, #2
 800ca6c:	440b      	add	r3, r1
 800ca6e:	fbb0 f3f3 	udiv	r3, r0, r3
 800ca72:	3301      	adds	r3, #1
 800ca74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ca78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ca7c:	6879      	ldr	r1, [r7, #4]
 800ca7e:	6809      	ldr	r1, [r1, #0]
 800ca80:	4313      	orrs	r3, r2
 800ca82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	69da      	ldr	r2, [r3, #28]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6a1b      	ldr	r3, [r3, #32]
 800ca96:	431a      	orrs	r2, r3
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	430a      	orrs	r2, r1
 800ca9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	689b      	ldr	r3, [r3, #8]
 800caa6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800caaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800caae:	687a      	ldr	r2, [r7, #4]
 800cab0:	6911      	ldr	r1, [r2, #16]
 800cab2:	687a      	ldr	r2, [r7, #4]
 800cab4:	68d2      	ldr	r2, [r2, #12]
 800cab6:	4311      	orrs	r1, r2
 800cab8:	687a      	ldr	r2, [r7, #4]
 800caba:	6812      	ldr	r2, [r2, #0]
 800cabc:	430b      	orrs	r3, r1
 800cabe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	68db      	ldr	r3, [r3, #12]
 800cac6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	695a      	ldr	r2, [r3, #20]
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	699b      	ldr	r3, [r3, #24]
 800cad2:	431a      	orrs	r2, r3
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	430a      	orrs	r2, r1
 800cada:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	681a      	ldr	r2, [r3, #0]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f042 0201 	orr.w	r2, r2, #1
 800caea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2200      	movs	r2, #0
 800caf0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2220      	movs	r2, #32
 800caf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2200      	movs	r2, #0
 800cafe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2200      	movs	r2, #0
 800cb04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800cb08:	2300      	movs	r3, #0
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3710      	adds	r7, #16
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
 800cb12:	bf00      	nop
 800cb14:	000186a0 	.word	0x000186a0
 800cb18:	001e847f 	.word	0x001e847f
 800cb1c:	003d08ff 	.word	0x003d08ff
 800cb20:	431bde83 	.word	0x431bde83
 800cb24:	10624dd3 	.word	0x10624dd3

0800cb28 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b082      	sub	sp, #8
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d101      	bne.n	800cb3a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800cb36:	2301      	movs	r3, #1
 800cb38:	e021      	b.n	800cb7e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2224      	movs	r2, #36	; 0x24
 800cb3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	681a      	ldr	r2, [r3, #0]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f022 0201 	bic.w	r2, r2, #1
 800cb50:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f7f5 f88a 	bl	8001c6c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2200      	movs	r2, #0
 800cb62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2200      	movs	r2, #0
 800cb78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb7c:	2300      	movs	r3, #0
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3708      	adds	r7, #8
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
	...

0800cb88 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b086      	sub	sp, #24
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	60f8      	str	r0, [r7, #12]
 800cb90:	607a      	str	r2, [r7, #4]
 800cb92:	461a      	mov	r2, r3
 800cb94:	460b      	mov	r3, r1
 800cb96:	817b      	strh	r3, [r7, #10]
 800cb98:	4613      	mov	r3, r2
 800cb9a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cba6:	b2db      	uxtb	r3, r3
 800cba8:	2b20      	cmp	r3, #32
 800cbaa:	f040 80f4 	bne.w	800cd96 <HAL_I2C_Master_Receive_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800cbae:	4b7c      	ldr	r3, [pc, #496]	; (800cda0 <HAL_I2C_Master_Receive_DMA+0x218>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	08db      	lsrs	r3, r3, #3
 800cbb4:	4a7b      	ldr	r2, [pc, #492]	; (800cda4 <HAL_I2C_Master_Receive_DMA+0x21c>)
 800cbb6:	fba2 2303 	umull	r2, r3, r2, r3
 800cbba:	0a1a      	lsrs	r2, r3, #8
 800cbbc:	4613      	mov	r3, r2
 800cbbe:	009b      	lsls	r3, r3, #2
 800cbc0:	4413      	add	r3, r2
 800cbc2:	009a      	lsls	r2, r3, #2
 800cbc4:	4413      	add	r3, r2
 800cbc6:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800cbc8:	693b      	ldr	r3, [r7, #16]
 800cbca:	3b01      	subs	r3, #1
 800cbcc:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d116      	bne.n	800cc02 <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	2220      	movs	r2, #32
 800cbde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbee:	f043 0220 	orr.w	r2, r3, #32
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cbfe:	2301      	movs	r3, #1
 800cc00:	e0ca      	b.n	800cd98 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	699b      	ldr	r3, [r3, #24]
 800cc08:	f003 0302 	and.w	r3, r3, #2
 800cc0c:	2b02      	cmp	r3, #2
 800cc0e:	d0db      	beq.n	800cbc8 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc16:	2b01      	cmp	r3, #1
 800cc18:	d101      	bne.n	800cc1e <HAL_I2C_Master_Receive_DMA+0x96>
 800cc1a:	2302      	movs	r3, #2
 800cc1c:	e0bc      	b.n	800cd98 <HAL_I2C_Master_Receive_DMA+0x210>
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2201      	movs	r2, #1
 800cc22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f003 0301 	and.w	r3, r3, #1
 800cc30:	2b01      	cmp	r3, #1
 800cc32:	d007      	beq.n	800cc44 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	681a      	ldr	r2, [r3, #0]
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f042 0201 	orr.w	r2, r2, #1
 800cc42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	681a      	ldr	r2, [r3, #0]
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cc52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	2222      	movs	r2, #34	; 0x22
 800cc58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	2210      	movs	r2, #16
 800cc60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2200      	movs	r2, #0
 800cc68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	687a      	ldr	r2, [r7, #4]
 800cc6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	893a      	ldrh	r2, [r7, #8]
 800cc74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc7a:	b29a      	uxth	r2, r3
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	4a49      	ldr	r2, [pc, #292]	; (800cda8 <HAL_I2C_Master_Receive_DMA+0x220>)
 800cc84:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800cc86:	897a      	ldrh	r2, [r7, #10]
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d062      	beq.n	800cd5a <HAL_I2C_Master_Receive_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc98:	4a44      	ldr	r2, [pc, #272]	; (800cdac <HAL_I2C_Master_Receive_DMA+0x224>)
 800cc9a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cca0:	4a43      	ldr	r2, [pc, #268]	; (800cdb0 <HAL_I2C_Master_Receive_DMA+0x228>)
 800cca2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cca8:	2200      	movs	r2, #0
 800ccaa:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccb8:	2200      	movs	r2, #0
 800ccba:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	3310      	adds	r3, #16
 800ccce:	4619      	mov	r1, r3
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd4:	461a      	mov	r2, r3
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccda:	f7fe fd4d 	bl	800b778 <HAL_DMA_Start_IT>
 800ccde:	4603      	mov	r3, r0
 800cce0:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 800cce2:	7dfb      	ldrb	r3, [r7, #23]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d124      	bne.n	800cd32 <HAL_I2C_Master_Receive_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	681a      	ldr	r2, [r3, #0]
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ccf6:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	681a      	ldr	r2, [r3, #0]
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cd06:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	685a      	ldr	r2, [r3, #4]
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800cd1e:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	685a      	ldr	r2, [r3, #4]
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd2e:	605a      	str	r2, [r3, #4]
 800cd30:	e02f      	b.n	800cd92 <HAL_I2C_Master_Receive_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	2220      	movs	r2, #32
 800cd36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd46:	f043 0210 	orr.w	r2, r3, #16
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2200      	movs	r2, #0
 800cd52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cd56:	2301      	movs	r3, #1
 800cd58:	e01e      	b.n	800cd98 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	681a      	ldr	r2, [r3, #0]
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cd68:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	681a      	ldr	r2, [r3, #0]
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cd78:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	685a      	ldr	r2, [r3, #4]
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800cd90:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800cd92:	2300      	movs	r3, #0
 800cd94:	e000      	b.n	800cd98 <HAL_I2C_Master_Receive_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 800cd96:	2302      	movs	r3, #2
  }
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3718      	adds	r7, #24
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}
 800cda0:	200001b8 	.word	0x200001b8
 800cda4:	14f8b589 	.word	0x14f8b589
 800cda8:	ffff0000 	.word	0xffff0000
 800cdac:	0800e521 	.word	0x0800e521
 800cdb0:	0800e6cb 	.word	0x0800e6cb

0800cdb4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b088      	sub	sp, #32
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	685b      	ldr	r3, [r3, #4]
 800cdc6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdcc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cdd4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cddc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800cdde:	7bfb      	ldrb	r3, [r7, #15]
 800cde0:	2b10      	cmp	r3, #16
 800cde2:	d003      	beq.n	800cdec <HAL_I2C_EV_IRQHandler+0x38>
 800cde4:	7bfb      	ldrb	r3, [r7, #15]
 800cde6:	2b40      	cmp	r3, #64	; 0x40
 800cde8:	f040 80bd 	bne.w	800cf66 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	699b      	ldr	r3, [r3, #24]
 800cdf2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	695b      	ldr	r3, [r3, #20]
 800cdfa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800cdfc:	69fb      	ldr	r3, [r7, #28]
 800cdfe:	f003 0301 	and.w	r3, r3, #1
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d10d      	bne.n	800ce22 <HAL_I2C_EV_IRQHandler+0x6e>
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800ce0c:	d003      	beq.n	800ce16 <HAL_I2C_EV_IRQHandler+0x62>
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800ce14:	d101      	bne.n	800ce1a <HAL_I2C_EV_IRQHandler+0x66>
 800ce16:	2301      	movs	r3, #1
 800ce18:	e000      	b.n	800ce1c <HAL_I2C_EV_IRQHandler+0x68>
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	f000 812e 	beq.w	800d07e <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	f003 0301 	and.w	r3, r3, #1
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d00c      	beq.n	800ce46 <HAL_I2C_EV_IRQHandler+0x92>
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	0a5b      	lsrs	r3, r3, #9
 800ce30:	f003 0301 	and.w	r3, r3, #1
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d006      	beq.n	800ce46 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f001 fd5d 	bl	800e8f8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f000 fd58 	bl	800d8f4 <I2C_Master_SB>
 800ce44:	e08e      	b.n	800cf64 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ce46:	69fb      	ldr	r3, [r7, #28]
 800ce48:	08db      	lsrs	r3, r3, #3
 800ce4a:	f003 0301 	and.w	r3, r3, #1
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d009      	beq.n	800ce66 <HAL_I2C_EV_IRQHandler+0xb2>
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	0a5b      	lsrs	r3, r3, #9
 800ce56:	f003 0301 	and.w	r3, r3, #1
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d003      	beq.n	800ce66 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f000 fdce 	bl	800da00 <I2C_Master_ADD10>
 800ce64:	e07e      	b.n	800cf64 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ce66:	69fb      	ldr	r3, [r7, #28]
 800ce68:	085b      	lsrs	r3, r3, #1
 800ce6a:	f003 0301 	and.w	r3, r3, #1
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d009      	beq.n	800ce86 <HAL_I2C_EV_IRQHandler+0xd2>
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	0a5b      	lsrs	r3, r3, #9
 800ce76:	f003 0301 	and.w	r3, r3, #1
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d003      	beq.n	800ce86 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f000 fde8 	bl	800da54 <I2C_Master_ADDR>
 800ce84:	e06e      	b.n	800cf64 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800ce86:	69bb      	ldr	r3, [r7, #24]
 800ce88:	089b      	lsrs	r3, r3, #2
 800ce8a:	f003 0301 	and.w	r3, r3, #1
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d037      	beq.n	800cf02 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	685b      	ldr	r3, [r3, #4]
 800ce98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cea0:	f000 80ef 	beq.w	800d082 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cea4:	69fb      	ldr	r3, [r7, #28]
 800cea6:	09db      	lsrs	r3, r3, #7
 800cea8:	f003 0301 	and.w	r3, r3, #1
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d00f      	beq.n	800ced0 <HAL_I2C_EV_IRQHandler+0x11c>
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	0a9b      	lsrs	r3, r3, #10
 800ceb4:	f003 0301 	and.w	r3, r3, #1
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d009      	beq.n	800ced0 <HAL_I2C_EV_IRQHandler+0x11c>
 800cebc:	69fb      	ldr	r3, [r7, #28]
 800cebe:	089b      	lsrs	r3, r3, #2
 800cec0:	f003 0301 	and.w	r3, r3, #1
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d103      	bne.n	800ced0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f000 f9e5 	bl	800d298 <I2C_MasterTransmit_TXE>
 800cece:	e049      	b.n	800cf64 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ced0:	69fb      	ldr	r3, [r7, #28]
 800ced2:	089b      	lsrs	r3, r3, #2
 800ced4:	f003 0301 	and.w	r3, r3, #1
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	f000 80d2 	beq.w	800d082 <HAL_I2C_EV_IRQHandler+0x2ce>
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	0a5b      	lsrs	r3, r3, #9
 800cee2:	f003 0301 	and.w	r3, r3, #1
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	f000 80cb 	beq.w	800d082 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 800ceec:	7bfb      	ldrb	r3, [r7, #15]
 800ceee:	2b10      	cmp	r3, #16
 800cef0:	d103      	bne.n	800cefa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f000 fa6c 	bl	800d3d0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cef8:	e0c3      	b.n	800d082 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f000 fad0 	bl	800d4a0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cf00:	e0bf      	b.n	800d082 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	685b      	ldr	r3, [r3, #4]
 800cf08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cf0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cf10:	f000 80b7 	beq.w	800d082 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cf14:	69fb      	ldr	r3, [r7, #28]
 800cf16:	099b      	lsrs	r3, r3, #6
 800cf18:	f003 0301 	and.w	r3, r3, #1
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d00f      	beq.n	800cf40 <HAL_I2C_EV_IRQHandler+0x18c>
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	0a9b      	lsrs	r3, r3, #10
 800cf24:	f003 0301 	and.w	r3, r3, #1
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d009      	beq.n	800cf40 <HAL_I2C_EV_IRQHandler+0x18c>
 800cf2c:	69fb      	ldr	r3, [r7, #28]
 800cf2e:	089b      	lsrs	r3, r3, #2
 800cf30:	f003 0301 	and.w	r3, r3, #1
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d103      	bne.n	800cf40 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f000 fb40 	bl	800d5be <I2C_MasterReceive_RXNE>
 800cf3e:	e011      	b.n	800cf64 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cf40:	69fb      	ldr	r3, [r7, #28]
 800cf42:	089b      	lsrs	r3, r3, #2
 800cf44:	f003 0301 	and.w	r3, r3, #1
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	f000 809a 	beq.w	800d082 <HAL_I2C_EV_IRQHandler+0x2ce>
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	0a5b      	lsrs	r3, r3, #9
 800cf52:	f003 0301 	and.w	r3, r3, #1
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	f000 8093 	beq.w	800d082 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f000 fbdf 	bl	800d720 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cf62:	e08e      	b.n	800d082 <HAL_I2C_EV_IRQHandler+0x2ce>
 800cf64:	e08d      	b.n	800d082 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d004      	beq.n	800cf78 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	695b      	ldr	r3, [r3, #20]
 800cf74:	61fb      	str	r3, [r7, #28]
 800cf76:	e007      	b.n	800cf88 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	699b      	ldr	r3, [r3, #24]
 800cf7e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	695b      	ldr	r3, [r3, #20]
 800cf86:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cf88:	69fb      	ldr	r3, [r7, #28]
 800cf8a:	085b      	lsrs	r3, r3, #1
 800cf8c:	f003 0301 	and.w	r3, r3, #1
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d012      	beq.n	800cfba <HAL_I2C_EV_IRQHandler+0x206>
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	0a5b      	lsrs	r3, r3, #9
 800cf98:	f003 0301 	and.w	r3, r3, #1
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d00c      	beq.n	800cfba <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d003      	beq.n	800cfb0 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	699b      	ldr	r3, [r3, #24]
 800cfae:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800cfb0:	69b9      	ldr	r1, [r7, #24]
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f000 ff9d 	bl	800def2 <I2C_Slave_ADDR>
 800cfb8:	e066      	b.n	800d088 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cfba:	69fb      	ldr	r3, [r7, #28]
 800cfbc:	091b      	lsrs	r3, r3, #4
 800cfbe:	f003 0301 	and.w	r3, r3, #1
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d009      	beq.n	800cfda <HAL_I2C_EV_IRQHandler+0x226>
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	0a5b      	lsrs	r3, r3, #9
 800cfca:	f003 0301 	and.w	r3, r3, #1
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d003      	beq.n	800cfda <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f000 ffd2 	bl	800df7c <I2C_Slave_STOPF>
 800cfd8:	e056      	b.n	800d088 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800cfda:	7bbb      	ldrb	r3, [r7, #14]
 800cfdc:	2b21      	cmp	r3, #33	; 0x21
 800cfde:	d002      	beq.n	800cfe6 <HAL_I2C_EV_IRQHandler+0x232>
 800cfe0:	7bbb      	ldrb	r3, [r7, #14]
 800cfe2:	2b29      	cmp	r3, #41	; 0x29
 800cfe4:	d125      	bne.n	800d032 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cfe6:	69fb      	ldr	r3, [r7, #28]
 800cfe8:	09db      	lsrs	r3, r3, #7
 800cfea:	f003 0301 	and.w	r3, r3, #1
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d00f      	beq.n	800d012 <HAL_I2C_EV_IRQHandler+0x25e>
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	0a9b      	lsrs	r3, r3, #10
 800cff6:	f003 0301 	and.w	r3, r3, #1
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d009      	beq.n	800d012 <HAL_I2C_EV_IRQHandler+0x25e>
 800cffe:	69fb      	ldr	r3, [r7, #28]
 800d000:	089b      	lsrs	r3, r3, #2
 800d002:	f003 0301 	and.w	r3, r3, #1
 800d006:	2b00      	cmp	r3, #0
 800d008:	d103      	bne.n	800d012 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f000 feb3 	bl	800dd76 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d010:	e039      	b.n	800d086 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d012:	69fb      	ldr	r3, [r7, #28]
 800d014:	089b      	lsrs	r3, r3, #2
 800d016:	f003 0301 	and.w	r3, r3, #1
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d033      	beq.n	800d086 <HAL_I2C_EV_IRQHandler+0x2d2>
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	0a5b      	lsrs	r3, r3, #9
 800d022:	f003 0301 	and.w	r3, r3, #1
 800d026:	2b00      	cmp	r3, #0
 800d028:	d02d      	beq.n	800d086 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f000 fee0 	bl	800ddf0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d030:	e029      	b.n	800d086 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d032:	69fb      	ldr	r3, [r7, #28]
 800d034:	099b      	lsrs	r3, r3, #6
 800d036:	f003 0301 	and.w	r3, r3, #1
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d00f      	beq.n	800d05e <HAL_I2C_EV_IRQHandler+0x2aa>
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	0a9b      	lsrs	r3, r3, #10
 800d042:	f003 0301 	and.w	r3, r3, #1
 800d046:	2b00      	cmp	r3, #0
 800d048:	d009      	beq.n	800d05e <HAL_I2C_EV_IRQHandler+0x2aa>
 800d04a:	69fb      	ldr	r3, [r7, #28]
 800d04c:	089b      	lsrs	r3, r3, #2
 800d04e:	f003 0301 	and.w	r3, r3, #1
 800d052:	2b00      	cmp	r3, #0
 800d054:	d103      	bne.n	800d05e <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f000 feeb 	bl	800de32 <I2C_SlaveReceive_RXNE>
 800d05c:	e014      	b.n	800d088 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d05e:	69fb      	ldr	r3, [r7, #28]
 800d060:	089b      	lsrs	r3, r3, #2
 800d062:	f003 0301 	and.w	r3, r3, #1
 800d066:	2b00      	cmp	r3, #0
 800d068:	d00e      	beq.n	800d088 <HAL_I2C_EV_IRQHandler+0x2d4>
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	0a5b      	lsrs	r3, r3, #9
 800d06e:	f003 0301 	and.w	r3, r3, #1
 800d072:	2b00      	cmp	r3, #0
 800d074:	d008      	beq.n	800d088 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 ff19 	bl	800deae <I2C_SlaveReceive_BTF>
 800d07c:	e004      	b.n	800d088 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800d07e:	bf00      	nop
 800d080:	e002      	b.n	800d088 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d082:	bf00      	nop
 800d084:	e000      	b.n	800d088 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d086:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800d088:	3720      	adds	r7, #32
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}

0800d08e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800d08e:	b580      	push	{r7, lr}
 800d090:	b08a      	sub	sp, #40	; 0x28
 800d092:	af00      	add	r7, sp, #0
 800d094:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	695b      	ldr	r3, [r3, #20]
 800d09c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	685b      	ldr	r3, [r3, #4]
 800d0a4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d0b0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d0b2:	6a3b      	ldr	r3, [r7, #32]
 800d0b4:	0a1b      	lsrs	r3, r3, #8
 800d0b6:	f003 0301 	and.w	r3, r3, #1
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d00e      	beq.n	800d0dc <HAL_I2C_ER_IRQHandler+0x4e>
 800d0be:	69fb      	ldr	r3, [r7, #28]
 800d0c0:	0a1b      	lsrs	r3, r3, #8
 800d0c2:	f003 0301 	and.w	r3, r3, #1
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d008      	beq.n	800d0dc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800d0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0cc:	f043 0301 	orr.w	r3, r3, #1
 800d0d0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d0da:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d0dc:	6a3b      	ldr	r3, [r7, #32]
 800d0de:	0a5b      	lsrs	r3, r3, #9
 800d0e0:	f003 0301 	and.w	r3, r3, #1
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d00e      	beq.n	800d106 <HAL_I2C_ER_IRQHandler+0x78>
 800d0e8:	69fb      	ldr	r3, [r7, #28]
 800d0ea:	0a1b      	lsrs	r3, r3, #8
 800d0ec:	f003 0301 	and.w	r3, r3, #1
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d008      	beq.n	800d106 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800d0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f6:	f043 0302 	orr.w	r3, r3, #2
 800d0fa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800d104:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d106:	6a3b      	ldr	r3, [r7, #32]
 800d108:	0a9b      	lsrs	r3, r3, #10
 800d10a:	f003 0301 	and.w	r3, r3, #1
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d03f      	beq.n	800d192 <HAL_I2C_ER_IRQHandler+0x104>
 800d112:	69fb      	ldr	r3, [r7, #28]
 800d114:	0a1b      	lsrs	r3, r3, #8
 800d116:	f003 0301 	and.w	r3, r3, #1
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d039      	beq.n	800d192 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800d11e:	7efb      	ldrb	r3, [r7, #27]
 800d120:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d126:	b29b      	uxth	r3, r3
 800d128:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d130:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d136:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800d138:	7ebb      	ldrb	r3, [r7, #26]
 800d13a:	2b20      	cmp	r3, #32
 800d13c:	d112      	bne.n	800d164 <HAL_I2C_ER_IRQHandler+0xd6>
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d10f      	bne.n	800d164 <HAL_I2C_ER_IRQHandler+0xd6>
 800d144:	7cfb      	ldrb	r3, [r7, #19]
 800d146:	2b21      	cmp	r3, #33	; 0x21
 800d148:	d008      	beq.n	800d15c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800d14a:	7cfb      	ldrb	r3, [r7, #19]
 800d14c:	2b29      	cmp	r3, #41	; 0x29
 800d14e:	d005      	beq.n	800d15c <HAL_I2C_ER_IRQHandler+0xce>
 800d150:	7cfb      	ldrb	r3, [r7, #19]
 800d152:	2b28      	cmp	r3, #40	; 0x28
 800d154:	d106      	bne.n	800d164 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2b21      	cmp	r3, #33	; 0x21
 800d15a:	d103      	bne.n	800d164 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f001 f83d 	bl	800e1dc <I2C_Slave_AF>
 800d162:	e016      	b.n	800d192 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d16c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800d16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d170:	f043 0304 	orr.w	r3, r3, #4
 800d174:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800d176:	7efb      	ldrb	r3, [r7, #27]
 800d178:	2b10      	cmp	r3, #16
 800d17a:	d002      	beq.n	800d182 <HAL_I2C_ER_IRQHandler+0xf4>
 800d17c:	7efb      	ldrb	r3, [r7, #27]
 800d17e:	2b40      	cmp	r3, #64	; 0x40
 800d180:	d107      	bne.n	800d192 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	681a      	ldr	r2, [r3, #0]
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d190:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d192:	6a3b      	ldr	r3, [r7, #32]
 800d194:	0adb      	lsrs	r3, r3, #11
 800d196:	f003 0301 	and.w	r3, r3, #1
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d00e      	beq.n	800d1bc <HAL_I2C_ER_IRQHandler+0x12e>
 800d19e:	69fb      	ldr	r3, [r7, #28]
 800d1a0:	0a1b      	lsrs	r3, r3, #8
 800d1a2:	f003 0301 	and.w	r3, r3, #1
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d008      	beq.n	800d1bc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800d1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ac:	f043 0308 	orr.w	r3, r3, #8
 800d1b0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800d1ba:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800d1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d008      	beq.n	800d1d4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c8:	431a      	orrs	r2, r3
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f001 f874 	bl	800e2bc <I2C_ITError>
  }
}
 800d1d4:	bf00      	nop
 800d1d6:	3728      	adds	r7, #40	; 0x28
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}

0800d1dc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b083      	sub	sp, #12
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800d1e4:	bf00      	nop
 800d1e6:	370c      	adds	r7, #12
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr

0800d1f0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b083      	sub	sp, #12
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800d1f8:	bf00      	nop
 800d1fa:	370c      	adds	r7, #12
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr

0800d204 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d204:	b480      	push	{r7}
 800d206:	b083      	sub	sp, #12
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800d20c:	bf00      	nop
 800d20e:	370c      	adds	r7, #12
 800d210:	46bd      	mov	sp, r7
 800d212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d216:	4770      	bx	lr

0800d218 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800d218:	b480      	push	{r7}
 800d21a:	b083      	sub	sp, #12
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	460b      	mov	r3, r1
 800d222:	70fb      	strb	r3, [r7, #3]
 800d224:	4613      	mov	r3, r2
 800d226:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800d228:	bf00      	nop
 800d22a:	370c      	adds	r7, #12
 800d22c:	46bd      	mov	sp, r7
 800d22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d232:	4770      	bx	lr

0800d234 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d234:	b480      	push	{r7}
 800d236:	b083      	sub	sp, #12
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800d23c:	bf00      	nop
 800d23e:	370c      	adds	r7, #12
 800d240:	46bd      	mov	sp, r7
 800d242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d246:	4770      	bx	lr

0800d248 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d248:	b480      	push	{r7}
 800d24a:	b083      	sub	sp, #12
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800d250:	bf00      	nop
 800d252:	370c      	adds	r7, #12
 800d254:	46bd      	mov	sp, r7
 800d256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25a:	4770      	bx	lr

0800d25c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d25c:	b480      	push	{r7}
 800d25e:	b083      	sub	sp, #12
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800d264:	bf00      	nop
 800d266:	370c      	adds	r7, #12
 800d268:	46bd      	mov	sp, r7
 800d26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26e:	4770      	bx	lr

0800d270 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d270:	b480      	push	{r7}
 800d272:	b083      	sub	sp, #12
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800d278:	bf00      	nop
 800d27a:	370c      	adds	r7, #12
 800d27c:	46bd      	mov	sp, r7
 800d27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d282:	4770      	bx	lr

0800d284 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d284:	b480      	push	{r7}
 800d286:	b083      	sub	sp, #12
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800d28c:	bf00      	nop
 800d28e:	370c      	adds	r7, #12
 800d290:	46bd      	mov	sp, r7
 800d292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d296:	4770      	bx	lr

0800d298 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b084      	sub	sp, #16
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d2a6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d2ae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2b4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d150      	bne.n	800d360 <I2C_MasterTransmit_TXE+0xc8>
 800d2be:	7bfb      	ldrb	r3, [r7, #15]
 800d2c0:	2b21      	cmp	r3, #33	; 0x21
 800d2c2:	d14d      	bne.n	800d360 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	2b08      	cmp	r3, #8
 800d2c8:	d01d      	beq.n	800d306 <I2C_MasterTransmit_TXE+0x6e>
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	2b20      	cmp	r3, #32
 800d2ce:	d01a      	beq.n	800d306 <I2C_MasterTransmit_TXE+0x6e>
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d2d6:	d016      	beq.n	800d306 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	685a      	ldr	r2, [r3, #4]
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d2e6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2211      	movs	r2, #17
 800d2ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2220      	movs	r2, #32
 800d2fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f7ff ff6c 	bl	800d1dc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d304:	e060      	b.n	800d3c8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	685a      	ldr	r2, [r3, #4]
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d314:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	681a      	ldr	r2, [r3, #0]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d324:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2200      	movs	r2, #0
 800d32a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2220      	movs	r2, #32
 800d330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d33a:	b2db      	uxtb	r3, r3
 800d33c:	2b40      	cmp	r3, #64	; 0x40
 800d33e:	d107      	bne.n	800d350 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2200      	movs	r2, #0
 800d344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f7ff ff7d 	bl	800d248 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d34e:	e03b      	b.n	800d3c8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2200      	movs	r2, #0
 800d354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f7ff ff3f 	bl	800d1dc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d35e:	e033      	b.n	800d3c8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800d360:	7bfb      	ldrb	r3, [r7, #15]
 800d362:	2b21      	cmp	r3, #33	; 0x21
 800d364:	d005      	beq.n	800d372 <I2C_MasterTransmit_TXE+0xda>
 800d366:	7bbb      	ldrb	r3, [r7, #14]
 800d368:	2b40      	cmp	r3, #64	; 0x40
 800d36a:	d12d      	bne.n	800d3c8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800d36c:	7bfb      	ldrb	r3, [r7, #15]
 800d36e:	2b22      	cmp	r3, #34	; 0x22
 800d370:	d12a      	bne.n	800d3c8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d376:	b29b      	uxth	r3, r3
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d108      	bne.n	800d38e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	685a      	ldr	r2, [r3, #4]
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d38a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800d38c:	e01c      	b.n	800d3c8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d394:	b2db      	uxtb	r3, r3
 800d396:	2b40      	cmp	r3, #64	; 0x40
 800d398:	d103      	bne.n	800d3a2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	f000 f880 	bl	800d4a0 <I2C_MemoryTransmit_TXE_BTF>
}
 800d3a0:	e012      	b.n	800d3c8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3a6:	781a      	ldrb	r2, [r3, #0]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3b2:	1c5a      	adds	r2, r3, #1
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3bc:	b29b      	uxth	r3, r3
 800d3be:	3b01      	subs	r3, #1
 800d3c0:	b29a      	uxth	r2, r3
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800d3c6:	e7ff      	b.n	800d3c8 <I2C_MasterTransmit_TXE+0x130>
 800d3c8:	bf00      	nop
 800d3ca:	3710      	adds	r7, #16
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}

0800d3d0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b084      	sub	sp, #16
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3dc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3e4:	b2db      	uxtb	r3, r3
 800d3e6:	2b21      	cmp	r3, #33	; 0x21
 800d3e8:	d156      	bne.n	800d498 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3ee:	b29b      	uxth	r3, r3
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d012      	beq.n	800d41a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f8:	781a      	ldrb	r2, [r3, #0]
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d404:	1c5a      	adds	r2, r3, #1
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d40e:	b29b      	uxth	r3, r3
 800d410:	3b01      	subs	r3, #1
 800d412:	b29a      	uxth	r2, r3
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800d418:	e03e      	b.n	800d498 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2b08      	cmp	r3, #8
 800d41e:	d01d      	beq.n	800d45c <I2C_MasterTransmit_BTF+0x8c>
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	2b20      	cmp	r3, #32
 800d424:	d01a      	beq.n	800d45c <I2C_MasterTransmit_BTF+0x8c>
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d42c:	d016      	beq.n	800d45c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	685a      	ldr	r2, [r3, #4]
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d43c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2211      	movs	r2, #17
 800d442:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2200      	movs	r2, #0
 800d448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2220      	movs	r2, #32
 800d450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f7ff fec1 	bl	800d1dc <HAL_I2C_MasterTxCpltCallback>
}
 800d45a:	e01d      	b.n	800d498 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	685a      	ldr	r2, [r3, #4]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d46a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	681a      	ldr	r2, [r3, #0]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d47a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2200      	movs	r2, #0
 800d480:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2220      	movs	r2, #32
 800d486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2200      	movs	r2, #0
 800d48e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f7ff fea2 	bl	800d1dc <HAL_I2C_MasterTxCpltCallback>
}
 800d498:	bf00      	nop
 800d49a:	3710      	adds	r7, #16
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}

0800d4a0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b084      	sub	sp, #16
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d4ae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d11d      	bne.n	800d4f4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4bc:	2b01      	cmp	r3, #1
 800d4be:	d10b      	bne.n	800d4d8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4c4:	b2da      	uxtb	r2, r3
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4d0:	1c9a      	adds	r2, r3, #2
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800d4d6:	e06e      	b.n	800d5b6 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4dc:	b29b      	uxth	r3, r3
 800d4de:	121b      	asrs	r3, r3, #8
 800d4e0:	b2da      	uxtb	r2, r3
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4ec:	1c5a      	adds	r2, r3, #1
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 800d4f2:	e060      	b.n	800d5b6 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4f8:	2b01      	cmp	r3, #1
 800d4fa:	d10b      	bne.n	800d514 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d500:	b2da      	uxtb	r2, r3
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d50c:	1c5a      	adds	r2, r3, #1
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	651a      	str	r2, [r3, #80]	; 0x50
}
 800d512:	e050      	b.n	800d5b6 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d518:	2b02      	cmp	r3, #2
 800d51a:	d14c      	bne.n	800d5b6 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800d51c:	7bfb      	ldrb	r3, [r7, #15]
 800d51e:	2b22      	cmp	r3, #34	; 0x22
 800d520:	d108      	bne.n	800d534 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	681a      	ldr	r2, [r3, #0]
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d530:	601a      	str	r2, [r3, #0]
}
 800d532:	e040      	b.n	800d5b6 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d538:	b29b      	uxth	r3, r3
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d015      	beq.n	800d56a <I2C_MemoryTransmit_TXE_BTF+0xca>
 800d53e:	7bfb      	ldrb	r3, [r7, #15]
 800d540:	2b21      	cmp	r3, #33	; 0x21
 800d542:	d112      	bne.n	800d56a <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d548:	781a      	ldrb	r2, [r3, #0]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d554:	1c5a      	adds	r2, r3, #1
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d55e:	b29b      	uxth	r3, r3
 800d560:	3b01      	subs	r3, #1
 800d562:	b29a      	uxth	r2, r3
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800d568:	e025      	b.n	800d5b6 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d56e:	b29b      	uxth	r3, r3
 800d570:	2b00      	cmp	r3, #0
 800d572:	d120      	bne.n	800d5b6 <I2C_MemoryTransmit_TXE_BTF+0x116>
 800d574:	7bfb      	ldrb	r3, [r7, #15]
 800d576:	2b21      	cmp	r3, #33	; 0x21
 800d578:	d11d      	bne.n	800d5b6 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	685a      	ldr	r2, [r3, #4]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d588:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	681a      	ldr	r2, [r3, #0]
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d598:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2200      	movs	r2, #0
 800d59e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2220      	movs	r2, #32
 800d5a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f7ff fe49 	bl	800d248 <HAL_I2C_MemTxCpltCallback>
}
 800d5b6:	bf00      	nop
 800d5b8:	3710      	adds	r7, #16
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}

0800d5be <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800d5be:	b580      	push	{r7, lr}
 800d5c0:	b084      	sub	sp, #16
 800d5c2:	af00      	add	r7, sp, #0
 800d5c4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d5cc:	b2db      	uxtb	r3, r3
 800d5ce:	2b22      	cmp	r3, #34	; 0x22
 800d5d0:	f040 80a2 	bne.w	800d718 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5d8:	b29b      	uxth	r3, r3
 800d5da:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	2b03      	cmp	r3, #3
 800d5e0:	d921      	bls.n	800d626 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	691a      	ldr	r2, [r3, #16]
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ec:	b2d2      	uxtb	r2, r2
 800d5ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5f4:	1c5a      	adds	r2, r3, #1
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	3b01      	subs	r3, #1
 800d602:	b29a      	uxth	r2, r3
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d60c:	b29b      	uxth	r3, r3
 800d60e:	2b03      	cmp	r3, #3
 800d610:	f040 8082 	bne.w	800d718 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	685a      	ldr	r2, [r3, #4]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d622:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800d624:	e078      	b.n	800d718 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d62a:	2b02      	cmp	r3, #2
 800d62c:	d074      	beq.n	800d718 <I2C_MasterReceive_RXNE+0x15a>
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2b01      	cmp	r3, #1
 800d632:	d002      	beq.n	800d63a <I2C_MasterReceive_RXNE+0x7c>
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d16e      	bne.n	800d718 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f001 f92a 	bl	800e894 <I2C_WaitOnSTOPRequestThroughIT>
 800d640:	4603      	mov	r3, r0
 800d642:	2b00      	cmp	r3, #0
 800d644:	d142      	bne.n	800d6cc <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	681a      	ldr	r2, [r3, #0]
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d654:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	685a      	ldr	r2, [r3, #4]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d664:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	691a      	ldr	r2, [r3, #16]
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d670:	b2d2      	uxtb	r2, r2
 800d672:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d678:	1c5a      	adds	r2, r3, #1
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d682:	b29b      	uxth	r3, r3
 800d684:	3b01      	subs	r3, #1
 800d686:	b29a      	uxth	r2, r3
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2220      	movs	r2, #32
 800d690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d69a:	b2db      	uxtb	r3, r3
 800d69c:	2b40      	cmp	r3, #64	; 0x40
 800d69e:	d10a      	bne.n	800d6b6 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f7ff fdd4 	bl	800d25c <HAL_I2C_MemRxCpltCallback>
}
 800d6b4:	e030      	b.n	800d718 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2212      	movs	r2, #18
 800d6c2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f7f9 fc59 	bl	8006f7c <HAL_I2C_MasterRxCpltCallback>
}
 800d6ca:	e025      	b.n	800d718 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	685a      	ldr	r2, [r3, #4]
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d6da:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	691a      	ldr	r2, [r3, #16]
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6e6:	b2d2      	uxtb	r2, r2
 800d6e8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ee:	1c5a      	adds	r2, r3, #1
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6f8:	b29b      	uxth	r3, r3
 800d6fa:	3b01      	subs	r3, #1
 800d6fc:	b29a      	uxth	r2, r3
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2220      	movs	r2, #32
 800d706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2200      	movs	r2, #0
 800d70e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f7ff fdac 	bl	800d270 <HAL_I2C_ErrorCallback>
}
 800d718:	bf00      	nop
 800d71a:	3710      	adds	r7, #16
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}

0800d720 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b084      	sub	sp, #16
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d72c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d732:	b29b      	uxth	r3, r3
 800d734:	2b04      	cmp	r3, #4
 800d736:	d11b      	bne.n	800d770 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	685a      	ldr	r2, [r3, #4]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d746:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	691a      	ldr	r2, [r3, #16]
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d752:	b2d2      	uxtb	r2, r2
 800d754:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d75a:	1c5a      	adds	r2, r3, #1
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d764:	b29b      	uxth	r3, r3
 800d766:	3b01      	subs	r3, #1
 800d768:	b29a      	uxth	r2, r3
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800d76e:	e0bd      	b.n	800d8ec <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d774:	b29b      	uxth	r3, r3
 800d776:	2b03      	cmp	r3, #3
 800d778:	d129      	bne.n	800d7ce <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	685a      	ldr	r2, [r3, #4]
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d788:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	2b04      	cmp	r3, #4
 800d78e:	d00a      	beq.n	800d7a6 <I2C_MasterReceive_BTF+0x86>
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	2b02      	cmp	r3, #2
 800d794:	d007      	beq.n	800d7a6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d7a4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	691a      	ldr	r2, [r3, #16]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7b0:	b2d2      	uxtb	r2, r2
 800d7b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7b8:	1c5a      	adds	r2, r3, #1
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7c2:	b29b      	uxth	r3, r3
 800d7c4:	3b01      	subs	r3, #1
 800d7c6:	b29a      	uxth	r2, r3
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800d7cc:	e08e      	b.n	800d8ec <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7d2:	b29b      	uxth	r3, r3
 800d7d4:	2b02      	cmp	r3, #2
 800d7d6:	d176      	bne.n	800d8c6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	2b01      	cmp	r3, #1
 800d7dc:	d002      	beq.n	800d7e4 <I2C_MasterReceive_BTF+0xc4>
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	2b10      	cmp	r3, #16
 800d7e2:	d108      	bne.n	800d7f6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	681a      	ldr	r2, [r3, #0]
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d7f2:	601a      	str	r2, [r3, #0]
 800d7f4:	e019      	b.n	800d82a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	2b04      	cmp	r3, #4
 800d7fa:	d002      	beq.n	800d802 <I2C_MasterReceive_BTF+0xe2>
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	2b02      	cmp	r3, #2
 800d800:	d108      	bne.n	800d814 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	681a      	ldr	r2, [r3, #0]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d810:	601a      	str	r2, [r3, #0]
 800d812:	e00a      	b.n	800d82a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	2b10      	cmp	r3, #16
 800d818:	d007      	beq.n	800d82a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	681a      	ldr	r2, [r3, #0]
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d828:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	691a      	ldr	r2, [r3, #16]
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d834:	b2d2      	uxtb	r2, r2
 800d836:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d83c:	1c5a      	adds	r2, r3, #1
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d846:	b29b      	uxth	r3, r3
 800d848:	3b01      	subs	r3, #1
 800d84a:	b29a      	uxth	r2, r3
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	691a      	ldr	r2, [r3, #16]
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d85a:	b2d2      	uxtb	r2, r2
 800d85c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d862:	1c5a      	adds	r2, r3, #1
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d86c:	b29b      	uxth	r3, r3
 800d86e:	3b01      	subs	r3, #1
 800d870:	b29a      	uxth	r2, r3
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	685a      	ldr	r2, [r3, #4]
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800d884:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2220      	movs	r2, #32
 800d88a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d894:	b2db      	uxtb	r3, r3
 800d896:	2b40      	cmp	r3, #64	; 0x40
 800d898:	d10a      	bne.n	800d8b0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2200      	movs	r2, #0
 800d89e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f7ff fcd7 	bl	800d25c <HAL_I2C_MemRxCpltCallback>
}
 800d8ae:	e01d      	b.n	800d8ec <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2212      	movs	r2, #18
 800d8bc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800d8be:	6878      	ldr	r0, [r7, #4]
 800d8c0:	f7f9 fb5c 	bl	8006f7c <HAL_I2C_MasterRxCpltCallback>
}
 800d8c4:	e012      	b.n	800d8ec <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	691a      	ldr	r2, [r3, #16]
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8d0:	b2d2      	uxtb	r2, r2
 800d8d2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8d8:	1c5a      	adds	r2, r3, #1
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d8e2:	b29b      	uxth	r3, r3
 800d8e4:	3b01      	subs	r3, #1
 800d8e6:	b29a      	uxth	r2, r3
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800d8ec:	bf00      	nop
 800d8ee:	3710      	adds	r7, #16
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}

0800d8f4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	b083      	sub	sp, #12
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d902:	b2db      	uxtb	r3, r3
 800d904:	2b40      	cmp	r3, #64	; 0x40
 800d906:	d117      	bne.n	800d938 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d109      	bne.n	800d924 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d914:	b2db      	uxtb	r3, r3
 800d916:	461a      	mov	r2, r3
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d920:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800d922:	e067      	b.n	800d9f4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d928:	b2db      	uxtb	r3, r3
 800d92a:	f043 0301 	orr.w	r3, r3, #1
 800d92e:	b2da      	uxtb	r2, r3
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	611a      	str	r2, [r3, #16]
}
 800d936:	e05d      	b.n	800d9f4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	691b      	ldr	r3, [r3, #16]
 800d93c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d940:	d133      	bne.n	800d9aa <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d948:	b2db      	uxtb	r3, r3
 800d94a:	2b21      	cmp	r3, #33	; 0x21
 800d94c:	d109      	bne.n	800d962 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d952:	b2db      	uxtb	r3, r3
 800d954:	461a      	mov	r2, r3
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d95e:	611a      	str	r2, [r3, #16]
 800d960:	e008      	b.n	800d974 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d966:	b2db      	uxtb	r3, r3
 800d968:	f043 0301 	orr.w	r3, r3, #1
 800d96c:	b2da      	uxtb	r2, r3
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d004      	beq.n	800d986 <I2C_Master_SB+0x92>
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d982:	2b00      	cmp	r3, #0
 800d984:	d108      	bne.n	800d998 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d032      	beq.n	800d9f4 <I2C_Master_SB+0x100>
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d994:	2b00      	cmp	r3, #0
 800d996:	d02d      	beq.n	800d9f4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	685a      	ldr	r2, [r3, #4]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d9a6:	605a      	str	r2, [r3, #4]
}
 800d9a8:	e024      	b.n	800d9f4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d10e      	bne.n	800d9d0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9b6:	b29b      	uxth	r3, r3
 800d9b8:	11db      	asrs	r3, r3, #7
 800d9ba:	b2db      	uxtb	r3, r3
 800d9bc:	f003 0306 	and.w	r3, r3, #6
 800d9c0:	b2db      	uxtb	r3, r3
 800d9c2:	f063 030f 	orn	r3, r3, #15
 800d9c6:	b2da      	uxtb	r2, r3
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	611a      	str	r2, [r3, #16]
}
 800d9ce:	e011      	b.n	800d9f4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9d4:	2b01      	cmp	r3, #1
 800d9d6:	d10d      	bne.n	800d9f4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9dc:	b29b      	uxth	r3, r3
 800d9de:	11db      	asrs	r3, r3, #7
 800d9e0:	b2db      	uxtb	r3, r3
 800d9e2:	f003 0306 	and.w	r3, r3, #6
 800d9e6:	b2db      	uxtb	r3, r3
 800d9e8:	f063 030e 	orn	r3, r3, #14
 800d9ec:	b2da      	uxtb	r2, r3
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	611a      	str	r2, [r3, #16]
}
 800d9f4:	bf00      	nop
 800d9f6:	370c      	adds	r7, #12
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fe:	4770      	bx	lr

0800da00 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800da00:	b480      	push	{r7}
 800da02:	b083      	sub	sp, #12
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da0c:	b2da      	uxtb	r2, r3
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d103      	bne.n	800da24 <I2C_Master_ADD10+0x24>
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da20:	2b00      	cmp	r3, #0
 800da22:	d011      	beq.n	800da48 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d104      	bne.n	800da38 <I2C_Master_ADD10+0x38>
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da34:	2b00      	cmp	r3, #0
 800da36:	d007      	beq.n	800da48 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	685a      	ldr	r2, [r3, #4]
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da46:	605a      	str	r2, [r3, #4]
    }
  }
}
 800da48:	bf00      	nop
 800da4a:	370c      	adds	r7, #12
 800da4c:	46bd      	mov	sp, r7
 800da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da52:	4770      	bx	lr

0800da54 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800da54:	b480      	push	{r7}
 800da56:	b091      	sub	sp, #68	; 0x44
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800da62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da6a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da70:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da78:	b2db      	uxtb	r3, r3
 800da7a:	2b22      	cmp	r3, #34	; 0x22
 800da7c:	f040 8169 	bne.w	800dd52 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da84:	2b00      	cmp	r3, #0
 800da86:	d10f      	bne.n	800daa8 <I2C_Master_ADDR+0x54>
 800da88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800da8c:	2b40      	cmp	r3, #64	; 0x40
 800da8e:	d10b      	bne.n	800daa8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800da90:	2300      	movs	r3, #0
 800da92:	633b      	str	r3, [r7, #48]	; 0x30
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	695b      	ldr	r3, [r3, #20]
 800da9a:	633b      	str	r3, [r7, #48]	; 0x30
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	699b      	ldr	r3, [r3, #24]
 800daa2:	633b      	str	r3, [r7, #48]	; 0x30
 800daa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa6:	e160      	b.n	800dd6a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800daac:	2b00      	cmp	r3, #0
 800daae:	d11d      	bne.n	800daec <I2C_Master_ADDR+0x98>
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	691b      	ldr	r3, [r3, #16]
 800dab4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800dab8:	d118      	bne.n	800daec <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800daba:	2300      	movs	r3, #0
 800dabc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	695b      	ldr	r3, [r3, #20]
 800dac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	699b      	ldr	r3, [r3, #24]
 800dacc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dace:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	681a      	ldr	r2, [r3, #0]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dade:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dae4:	1c5a      	adds	r2, r3, #1
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	651a      	str	r2, [r3, #80]	; 0x50
 800daea:	e13e      	b.n	800dd6a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800daf0:	b29b      	uxth	r3, r3
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d113      	bne.n	800db1e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800daf6:	2300      	movs	r3, #0
 800daf8:	62bb      	str	r3, [r7, #40]	; 0x28
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	695b      	ldr	r3, [r3, #20]
 800db00:	62bb      	str	r3, [r7, #40]	; 0x28
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	699b      	ldr	r3, [r3, #24]
 800db08:	62bb      	str	r3, [r7, #40]	; 0x28
 800db0a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	681a      	ldr	r2, [r3, #0]
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800db1a:	601a      	str	r2, [r3, #0]
 800db1c:	e115      	b.n	800dd4a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db22:	b29b      	uxth	r3, r3
 800db24:	2b01      	cmp	r3, #1
 800db26:	f040 808a 	bne.w	800dc3e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800db2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800db30:	d137      	bne.n	800dba2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	681a      	ldr	r2, [r3, #0]
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800db40:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	685b      	ldr	r3, [r3, #4]
 800db48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800db4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db50:	d113      	bne.n	800db7a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	681a      	ldr	r2, [r3, #0]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800db60:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800db62:	2300      	movs	r3, #0
 800db64:	627b      	str	r3, [r7, #36]	; 0x24
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	695b      	ldr	r3, [r3, #20]
 800db6c:	627b      	str	r3, [r7, #36]	; 0x24
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	699b      	ldr	r3, [r3, #24]
 800db74:	627b      	str	r3, [r7, #36]	; 0x24
 800db76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db78:	e0e7      	b.n	800dd4a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800db7a:	2300      	movs	r3, #0
 800db7c:	623b      	str	r3, [r7, #32]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	695b      	ldr	r3, [r3, #20]
 800db84:	623b      	str	r3, [r7, #32]
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	699b      	ldr	r3, [r3, #24]
 800db8c:	623b      	str	r3, [r7, #32]
 800db8e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	681a      	ldr	r2, [r3, #0]
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800db9e:	601a      	str	r2, [r3, #0]
 800dba0:	e0d3      	b.n	800dd4a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800dba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dba4:	2b08      	cmp	r3, #8
 800dba6:	d02e      	beq.n	800dc06 <I2C_Master_ADDR+0x1b2>
 800dba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbaa:	2b20      	cmp	r3, #32
 800dbac:	d02b      	beq.n	800dc06 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800dbae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbb0:	2b12      	cmp	r3, #18
 800dbb2:	d102      	bne.n	800dbba <I2C_Master_ADDR+0x166>
 800dbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb6:	2b01      	cmp	r3, #1
 800dbb8:	d125      	bne.n	800dc06 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800dbba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbbc:	2b04      	cmp	r3, #4
 800dbbe:	d00e      	beq.n	800dbde <I2C_Master_ADDR+0x18a>
 800dbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc2:	2b02      	cmp	r3, #2
 800dbc4:	d00b      	beq.n	800dbde <I2C_Master_ADDR+0x18a>
 800dbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc8:	2b10      	cmp	r3, #16
 800dbca:	d008      	beq.n	800dbde <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	681a      	ldr	r2, [r3, #0]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dbda:	601a      	str	r2, [r3, #0]
 800dbdc:	e007      	b.n	800dbee <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	681a      	ldr	r2, [r3, #0]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dbec:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dbee:	2300      	movs	r3, #0
 800dbf0:	61fb      	str	r3, [r7, #28]
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	695b      	ldr	r3, [r3, #20]
 800dbf8:	61fb      	str	r3, [r7, #28]
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	699b      	ldr	r3, [r3, #24]
 800dc00:	61fb      	str	r3, [r7, #28]
 800dc02:	69fb      	ldr	r3, [r7, #28]
 800dc04:	e0a1      	b.n	800dd4a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	681a      	ldr	r2, [r3, #0]
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dc14:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dc16:	2300      	movs	r3, #0
 800dc18:	61bb      	str	r3, [r7, #24]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	695b      	ldr	r3, [r3, #20]
 800dc20:	61bb      	str	r3, [r7, #24]
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	699b      	ldr	r3, [r3, #24]
 800dc28:	61bb      	str	r3, [r7, #24]
 800dc2a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	681a      	ldr	r2, [r3, #0]
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dc3a:	601a      	str	r2, [r3, #0]
 800dc3c:	e085      	b.n	800dd4a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc42:	b29b      	uxth	r3, r3
 800dc44:	2b02      	cmp	r3, #2
 800dc46:	d14d      	bne.n	800dce4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800dc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc4a:	2b04      	cmp	r3, #4
 800dc4c:	d016      	beq.n	800dc7c <I2C_Master_ADDR+0x228>
 800dc4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc50:	2b02      	cmp	r3, #2
 800dc52:	d013      	beq.n	800dc7c <I2C_Master_ADDR+0x228>
 800dc54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc56:	2b10      	cmp	r3, #16
 800dc58:	d010      	beq.n	800dc7c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	681a      	ldr	r2, [r3, #0]
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dc68:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	681a      	ldr	r2, [r3, #0]
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc78:	601a      	str	r2, [r3, #0]
 800dc7a:	e007      	b.n	800dc8c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	681a      	ldr	r2, [r3, #0]
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dc8a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	685b      	ldr	r3, [r3, #4]
 800dc92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dc96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc9a:	d117      	bne.n	800dccc <I2C_Master_ADDR+0x278>
 800dc9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc9e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800dca2:	d00b      	beq.n	800dcbc <I2C_Master_ADDR+0x268>
 800dca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca6:	2b01      	cmp	r3, #1
 800dca8:	d008      	beq.n	800dcbc <I2C_Master_ADDR+0x268>
 800dcaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcac:	2b08      	cmp	r3, #8
 800dcae:	d005      	beq.n	800dcbc <I2C_Master_ADDR+0x268>
 800dcb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcb2:	2b10      	cmp	r3, #16
 800dcb4:	d002      	beq.n	800dcbc <I2C_Master_ADDR+0x268>
 800dcb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcb8:	2b20      	cmp	r3, #32
 800dcba:	d107      	bne.n	800dccc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	685a      	ldr	r2, [r3, #4]
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dcca:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dccc:	2300      	movs	r3, #0
 800dcce:	617b      	str	r3, [r7, #20]
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	695b      	ldr	r3, [r3, #20]
 800dcd6:	617b      	str	r3, [r7, #20]
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	699b      	ldr	r3, [r3, #24]
 800dcde:	617b      	str	r3, [r7, #20]
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	e032      	b.n	800dd4a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	681a      	ldr	r2, [r3, #0]
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dcf2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	685b      	ldr	r3, [r3, #4]
 800dcfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dcfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dd02:	d117      	bne.n	800dd34 <I2C_Master_ADDR+0x2e0>
 800dd04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd06:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800dd0a:	d00b      	beq.n	800dd24 <I2C_Master_ADDR+0x2d0>
 800dd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd0e:	2b01      	cmp	r3, #1
 800dd10:	d008      	beq.n	800dd24 <I2C_Master_ADDR+0x2d0>
 800dd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd14:	2b08      	cmp	r3, #8
 800dd16:	d005      	beq.n	800dd24 <I2C_Master_ADDR+0x2d0>
 800dd18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd1a:	2b10      	cmp	r3, #16
 800dd1c:	d002      	beq.n	800dd24 <I2C_Master_ADDR+0x2d0>
 800dd1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd20:	2b20      	cmp	r3, #32
 800dd22:	d107      	bne.n	800dd34 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	685a      	ldr	r2, [r3, #4]
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dd32:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dd34:	2300      	movs	r3, #0
 800dd36:	613b      	str	r3, [r7, #16]
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	695b      	ldr	r3, [r3, #20]
 800dd3e:	613b      	str	r3, [r7, #16]
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	699b      	ldr	r3, [r3, #24]
 800dd46:	613b      	str	r3, [r7, #16]
 800dd48:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800dd50:	e00b      	b.n	800dd6a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dd52:	2300      	movs	r3, #0
 800dd54:	60fb      	str	r3, [r7, #12]
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	695b      	ldr	r3, [r3, #20]
 800dd5c:	60fb      	str	r3, [r7, #12]
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	699b      	ldr	r3, [r3, #24]
 800dd64:	60fb      	str	r3, [r7, #12]
 800dd66:	68fb      	ldr	r3, [r7, #12]
}
 800dd68:	e7ff      	b.n	800dd6a <I2C_Master_ADDR+0x316>
 800dd6a:	bf00      	nop
 800dd6c:	3744      	adds	r7, #68	; 0x44
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd74:	4770      	bx	lr

0800dd76 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800dd76:	b580      	push	{r7, lr}
 800dd78:	b084      	sub	sp, #16
 800dd7a:	af00      	add	r7, sp, #0
 800dd7c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd84:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd8a:	b29b      	uxth	r3, r3
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d02b      	beq.n	800dde8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd94:	781a      	ldrb	r2, [r3, #0]
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dda0:	1c5a      	adds	r2, r3, #1
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ddaa:	b29b      	uxth	r3, r3
 800ddac:	3b01      	subs	r3, #1
 800ddae:	b29a      	uxth	r2, r3
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ddb8:	b29b      	uxth	r3, r3
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d114      	bne.n	800dde8 <I2C_SlaveTransmit_TXE+0x72>
 800ddbe:	7bfb      	ldrb	r3, [r7, #15]
 800ddc0:	2b29      	cmp	r3, #41	; 0x29
 800ddc2:	d111      	bne.n	800dde8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	685a      	ldr	r2, [r3, #4]
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ddd2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2221      	movs	r2, #33	; 0x21
 800ddd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2228      	movs	r2, #40	; 0x28
 800ddde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f7ff fa04 	bl	800d1f0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800dde8:	bf00      	nop
 800ddea:	3710      	adds	r7, #16
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}

0800ddf0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800ddf0:	b480      	push	{r7}
 800ddf2:	b083      	sub	sp, #12
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ddfc:	b29b      	uxth	r3, r3
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d011      	beq.n	800de26 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de06:	781a      	ldrb	r2, [r3, #0]
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de12:	1c5a      	adds	r2, r3, #1
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de1c:	b29b      	uxth	r3, r3
 800de1e:	3b01      	subs	r3, #1
 800de20:	b29a      	uxth	r2, r3
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800de26:	bf00      	nop
 800de28:	370c      	adds	r7, #12
 800de2a:	46bd      	mov	sp, r7
 800de2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de30:	4770      	bx	lr

0800de32 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800de32:	b580      	push	{r7, lr}
 800de34:	b084      	sub	sp, #16
 800de36:	af00      	add	r7, sp, #0
 800de38:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de40:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de46:	b29b      	uxth	r3, r3
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d02c      	beq.n	800dea6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	691a      	ldr	r2, [r3, #16]
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de56:	b2d2      	uxtb	r2, r2
 800de58:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de5e:	1c5a      	adds	r2, r3, #1
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de68:	b29b      	uxth	r3, r3
 800de6a:	3b01      	subs	r3, #1
 800de6c:	b29a      	uxth	r2, r3
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de76:	b29b      	uxth	r3, r3
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d114      	bne.n	800dea6 <I2C_SlaveReceive_RXNE+0x74>
 800de7c:	7bfb      	ldrb	r3, [r7, #15]
 800de7e:	2b2a      	cmp	r3, #42	; 0x2a
 800de80:	d111      	bne.n	800dea6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	685a      	ldr	r2, [r3, #4]
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de90:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2222      	movs	r2, #34	; 0x22
 800de96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2228      	movs	r2, #40	; 0x28
 800de9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f7ff f9af 	bl	800d204 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800dea6:	bf00      	nop
 800dea8:	3710      	adds	r7, #16
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}

0800deae <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800deae:	b480      	push	{r7}
 800deb0:	b083      	sub	sp, #12
 800deb2:	af00      	add	r7, sp, #0
 800deb4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800deba:	b29b      	uxth	r3, r3
 800debc:	2b00      	cmp	r3, #0
 800debe:	d012      	beq.n	800dee6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	691a      	ldr	r2, [r3, #16]
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deca:	b2d2      	uxtb	r2, r2
 800decc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ded2:	1c5a      	adds	r2, r3, #1
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dedc:	b29b      	uxth	r3, r3
 800dede:	3b01      	subs	r3, #1
 800dee0:	b29a      	uxth	r2, r3
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800dee6:	bf00      	nop
 800dee8:	370c      	adds	r7, #12
 800deea:	46bd      	mov	sp, r7
 800deec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def0:	4770      	bx	lr

0800def2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800def2:	b580      	push	{r7, lr}
 800def4:	b084      	sub	sp, #16
 800def6:	af00      	add	r7, sp, #0
 800def8:	6078      	str	r0, [r7, #4]
 800defa:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800defc:	2300      	movs	r3, #0
 800defe:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df06:	b2db      	uxtb	r3, r3
 800df08:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800df0c:	2b28      	cmp	r3, #40	; 0x28
 800df0e:	d127      	bne.n	800df60 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	685a      	ldr	r2, [r3, #4]
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800df1e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	089b      	lsrs	r3, r3, #2
 800df24:	f003 0301 	and.w	r3, r3, #1
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d101      	bne.n	800df30 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800df2c:	2301      	movs	r3, #1
 800df2e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	09db      	lsrs	r3, r3, #7
 800df34:	f003 0301 	and.w	r3, r3, #1
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d103      	bne.n	800df44 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	68db      	ldr	r3, [r3, #12]
 800df40:	81bb      	strh	r3, [r7, #12]
 800df42:	e002      	b.n	800df4a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	699b      	ldr	r3, [r3, #24]
 800df48:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	2200      	movs	r2, #0
 800df4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800df52:	89ba      	ldrh	r2, [r7, #12]
 800df54:	7bfb      	ldrb	r3, [r7, #15]
 800df56:	4619      	mov	r1, r3
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f7ff f95d 	bl	800d218 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800df5e:	e008      	b.n	800df72 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	f06f 0202 	mvn.w	r2, #2
 800df68:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2200      	movs	r2, #0
 800df6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800df72:	bf00      	nop
 800df74:	3710      	adds	r7, #16
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}
	...

0800df7c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b084      	sub	sp, #16
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df8a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	685a      	ldr	r2, [r3, #4]
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800df9a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800df9c:	2300      	movs	r3, #0
 800df9e:	60bb      	str	r3, [r7, #8]
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	695b      	ldr	r3, [r3, #20]
 800dfa6:	60bb      	str	r3, [r7, #8]
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	681a      	ldr	r2, [r3, #0]
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	f042 0201 	orr.w	r2, r2, #1
 800dfb6:	601a      	str	r2, [r3, #0]
 800dfb8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	681a      	ldr	r2, [r3, #0]
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dfc8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	685b      	ldr	r3, [r3, #4]
 800dfd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dfd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dfd8:	d172      	bne.n	800e0c0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800dfda:	7bfb      	ldrb	r3, [r7, #15]
 800dfdc:	2b22      	cmp	r3, #34	; 0x22
 800dfde:	d002      	beq.n	800dfe6 <I2C_Slave_STOPF+0x6a>
 800dfe0:	7bfb      	ldrb	r3, [r7, #15]
 800dfe2:	2b2a      	cmp	r3, #42	; 0x2a
 800dfe4:	d135      	bne.n	800e052 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	685b      	ldr	r3, [r3, #4]
 800dfee:	b29a      	uxth	r2, r3
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dff8:	b29b      	uxth	r3, r3
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d005      	beq.n	800e00a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e002:	f043 0204 	orr.w	r2, r3, #4
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	685a      	ldr	r2, [r3, #4]
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e018:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e01e:	4618      	mov	r0, r3
 800e020:	f7fd fdae 	bl	800bb80 <HAL_DMA_GetState>
 800e024:	4603      	mov	r3, r0
 800e026:	2b01      	cmp	r3, #1
 800e028:	d049      	beq.n	800e0be <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e02e:	4a69      	ldr	r2, [pc, #420]	; (800e1d4 <I2C_Slave_STOPF+0x258>)
 800e030:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e036:	4618      	mov	r0, r3
 800e038:	f7fd fbf6 	bl	800b828 <HAL_DMA_Abort_IT>
 800e03c:	4603      	mov	r3, r0
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d03d      	beq.n	800e0be <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e048:	687a      	ldr	r2, [r7, #4]
 800e04a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e04c:	4610      	mov	r0, r2
 800e04e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e050:	e035      	b.n	800e0be <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	685b      	ldr	r3, [r3, #4]
 800e05a:	b29a      	uxth	r2, r3
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e064:	b29b      	uxth	r3, r3
 800e066:	2b00      	cmp	r3, #0
 800e068:	d005      	beq.n	800e076 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e06e:	f043 0204 	orr.w	r2, r3, #4
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	685a      	ldr	r2, [r3, #4]
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e084:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7fd fd78 	bl	800bb80 <HAL_DMA_GetState>
 800e090:	4603      	mov	r3, r0
 800e092:	2b01      	cmp	r3, #1
 800e094:	d014      	beq.n	800e0c0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e09a:	4a4e      	ldr	r2, [pc, #312]	; (800e1d4 <I2C_Slave_STOPF+0x258>)
 800e09c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7fd fbc0 	bl	800b828 <HAL_DMA_Abort_IT>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d008      	beq.n	800e0c0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0b4:	687a      	ldr	r2, [r7, #4]
 800e0b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e0b8:	4610      	mov	r0, r2
 800e0ba:	4798      	blx	r3
 800e0bc:	e000      	b.n	800e0c0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e0be:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d03e      	beq.n	800e148 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	695b      	ldr	r3, [r3, #20]
 800e0d0:	f003 0304 	and.w	r3, r3, #4
 800e0d4:	2b04      	cmp	r3, #4
 800e0d6:	d112      	bne.n	800e0fe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	691a      	ldr	r2, [r3, #16]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0e2:	b2d2      	uxtb	r2, r2
 800e0e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ea:	1c5a      	adds	r2, r3, #1
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0f4:	b29b      	uxth	r3, r3
 800e0f6:	3b01      	subs	r3, #1
 800e0f8:	b29a      	uxth	r2, r3
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	695b      	ldr	r3, [r3, #20]
 800e104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e108:	2b40      	cmp	r3, #64	; 0x40
 800e10a:	d112      	bne.n	800e132 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	691a      	ldr	r2, [r3, #16]
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e116:	b2d2      	uxtb	r2, r2
 800e118:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e11e:	1c5a      	adds	r2, r3, #1
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e128:	b29b      	uxth	r3, r3
 800e12a:	3b01      	subs	r3, #1
 800e12c:	b29a      	uxth	r2, r3
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e136:	b29b      	uxth	r3, r3
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d005      	beq.n	800e148 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e140:	f043 0204 	orr.w	r2, r3, #4
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d003      	beq.n	800e158 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	f000 f8b3 	bl	800e2bc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800e156:	e039      	b.n	800e1cc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800e158:	7bfb      	ldrb	r3, [r7, #15]
 800e15a:	2b2a      	cmp	r3, #42	; 0x2a
 800e15c:	d109      	bne.n	800e172 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2200      	movs	r2, #0
 800e162:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2228      	movs	r2, #40	; 0x28
 800e168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f7ff f849 	bl	800d204 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e178:	b2db      	uxtb	r3, r3
 800e17a:	2b28      	cmp	r3, #40	; 0x28
 800e17c:	d111      	bne.n	800e1a2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	4a15      	ldr	r2, [pc, #84]	; (800e1d8 <I2C_Slave_STOPF+0x25c>)
 800e182:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2200      	movs	r2, #0
 800e188:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2220      	movs	r2, #32
 800e18e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2200      	movs	r2, #0
 800e196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f7ff f84a 	bl	800d234 <HAL_I2C_ListenCpltCallback>
}
 800e1a0:	e014      	b.n	800e1cc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1a6:	2b22      	cmp	r3, #34	; 0x22
 800e1a8:	d002      	beq.n	800e1b0 <I2C_Slave_STOPF+0x234>
 800e1aa:	7bfb      	ldrb	r3, [r7, #15]
 800e1ac:	2b22      	cmp	r3, #34	; 0x22
 800e1ae:	d10d      	bne.n	800e1cc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2220      	movs	r2, #32
 800e1ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e1c6:	6878      	ldr	r0, [r7, #4]
 800e1c8:	f7ff f81c 	bl	800d204 <HAL_I2C_SlaveRxCpltCallback>
}
 800e1cc:	bf00      	nop
 800e1ce:	3710      	adds	r7, #16
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}
 800e1d4:	0800e745 	.word	0x0800e745
 800e1d8:	ffff0000 	.word	0xffff0000

0800e1dc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b084      	sub	sp, #16
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1ea:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1f0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	2b08      	cmp	r3, #8
 800e1f6:	d002      	beq.n	800e1fe <I2C_Slave_AF+0x22>
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	2b20      	cmp	r3, #32
 800e1fc:	d129      	bne.n	800e252 <I2C_Slave_AF+0x76>
 800e1fe:	7bfb      	ldrb	r3, [r7, #15]
 800e200:	2b28      	cmp	r3, #40	; 0x28
 800e202:	d126      	bne.n	800e252 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	4a2c      	ldr	r2, [pc, #176]	; (800e2b8 <I2C_Slave_AF+0xdc>)
 800e208:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	685a      	ldr	r2, [r3, #4]
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e218:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e222:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	681a      	ldr	r2, [r3, #0]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e232:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2200      	movs	r2, #0
 800e238:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2220      	movs	r2, #32
 800e23e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	2200      	movs	r2, #0
 800e246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f7fe fff2 	bl	800d234 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800e250:	e02e      	b.n	800e2b0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800e252:	7bfb      	ldrb	r3, [r7, #15]
 800e254:	2b21      	cmp	r3, #33	; 0x21
 800e256:	d126      	bne.n	800e2a6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	4a17      	ldr	r2, [pc, #92]	; (800e2b8 <I2C_Slave_AF+0xdc>)
 800e25c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2221      	movs	r2, #33	; 0x21
 800e262:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2220      	movs	r2, #32
 800e268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2200      	movs	r2, #0
 800e270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	685a      	ldr	r2, [r3, #4]
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e282:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e28c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	681a      	ldr	r2, [r3, #0]
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e29c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f7fe ffa6 	bl	800d1f0 <HAL_I2C_SlaveTxCpltCallback>
}
 800e2a4:	e004      	b.n	800e2b0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e2ae:	615a      	str	r2, [r3, #20]
}
 800e2b0:	bf00      	nop
 800e2b2:	3710      	adds	r7, #16
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bd80      	pop	{r7, pc}
 800e2b8:	ffff0000 	.word	0xffff0000

0800e2bc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b084      	sub	sp, #16
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e2ca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e2d2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800e2d4:	7bbb      	ldrb	r3, [r7, #14]
 800e2d6:	2b10      	cmp	r3, #16
 800e2d8:	d002      	beq.n	800e2e0 <I2C_ITError+0x24>
 800e2da:	7bbb      	ldrb	r3, [r7, #14]
 800e2dc:	2b40      	cmp	r3, #64	; 0x40
 800e2de:	d10a      	bne.n	800e2f6 <I2C_ITError+0x3a>
 800e2e0:	7bfb      	ldrb	r3, [r7, #15]
 800e2e2:	2b22      	cmp	r3, #34	; 0x22
 800e2e4:	d107      	bne.n	800e2f6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	681a      	ldr	r2, [r3, #0]
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e2f4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e2f6:	7bfb      	ldrb	r3, [r7, #15]
 800e2f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e2fc:	2b28      	cmp	r3, #40	; 0x28
 800e2fe:	d107      	bne.n	800e310 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2200      	movs	r2, #0
 800e304:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2228      	movs	r2, #40	; 0x28
 800e30a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800e30e:	e015      	b.n	800e33c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	685b      	ldr	r3, [r3, #4]
 800e316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e31a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e31e:	d00a      	beq.n	800e336 <I2C_ITError+0x7a>
 800e320:	7bfb      	ldrb	r3, [r7, #15]
 800e322:	2b60      	cmp	r3, #96	; 0x60
 800e324:	d007      	beq.n	800e336 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2220      	movs	r2, #32
 800e32a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	2200      	movs	r2, #0
 800e332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	2200      	movs	r2, #0
 800e33a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	685b      	ldr	r3, [r3, #4]
 800e342:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e34a:	d162      	bne.n	800e412 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	685a      	ldr	r2, [r3, #4]
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e35a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e360:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e364:	b2db      	uxtb	r3, r3
 800e366:	2b01      	cmp	r3, #1
 800e368:	d020      	beq.n	800e3ac <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e36e:	4a6a      	ldr	r2, [pc, #424]	; (800e518 <I2C_ITError+0x25c>)
 800e370:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e376:	4618      	mov	r0, r3
 800e378:	f7fd fa56 	bl	800b828 <HAL_DMA_Abort_IT>
 800e37c:	4603      	mov	r3, r0
 800e37e:	2b00      	cmp	r3, #0
 800e380:	f000 8089 	beq.w	800e496 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	681a      	ldr	r2, [r3, #0]
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	f022 0201 	bic.w	r2, r2, #1
 800e392:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2220      	movs	r2, #32
 800e398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3a2:	687a      	ldr	r2, [r7, #4]
 800e3a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e3a6:	4610      	mov	r0, r2
 800e3a8:	4798      	blx	r3
 800e3aa:	e074      	b.n	800e496 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3b0:	4a59      	ldr	r2, [pc, #356]	; (800e518 <I2C_ITError+0x25c>)
 800e3b2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f7fd fa35 	bl	800b828 <HAL_DMA_Abort_IT>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d068      	beq.n	800e496 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	695b      	ldr	r3, [r3, #20]
 800e3ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3ce:	2b40      	cmp	r3, #64	; 0x40
 800e3d0:	d10b      	bne.n	800e3ea <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	691a      	ldr	r2, [r3, #16]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3dc:	b2d2      	uxtb	r2, r2
 800e3de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3e4:	1c5a      	adds	r2, r3, #1
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	681a      	ldr	r2, [r3, #0]
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	f022 0201 	bic.w	r2, r2, #1
 800e3f8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2220      	movs	r2, #32
 800e3fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e408:	687a      	ldr	r2, [r7, #4]
 800e40a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e40c:	4610      	mov	r0, r2
 800e40e:	4798      	blx	r3
 800e410:	e041      	b.n	800e496 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e418:	b2db      	uxtb	r3, r3
 800e41a:	2b60      	cmp	r3, #96	; 0x60
 800e41c:	d125      	bne.n	800e46a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2220      	movs	r2, #32
 800e422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2200      	movs	r2, #0
 800e42a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	695b      	ldr	r3, [r3, #20]
 800e432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e436:	2b40      	cmp	r3, #64	; 0x40
 800e438:	d10b      	bne.n	800e452 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	691a      	ldr	r2, [r3, #16]
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e444:	b2d2      	uxtb	r2, r2
 800e446:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e44c:	1c5a      	adds	r2, r3, #1
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	681a      	ldr	r2, [r3, #0]
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	f022 0201 	bic.w	r2, r2, #1
 800e460:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f7fe ff0e 	bl	800d284 <HAL_I2C_AbortCpltCallback>
 800e468:	e015      	b.n	800e496 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	695b      	ldr	r3, [r3, #20]
 800e470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e474:	2b40      	cmp	r3, #64	; 0x40
 800e476:	d10b      	bne.n	800e490 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	691a      	ldr	r2, [r3, #16]
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e482:	b2d2      	uxtb	r2, r2
 800e484:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e48a:	1c5a      	adds	r2, r3, #1
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	f7fe feed 	bl	800d270 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e49a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	f003 0301 	and.w	r3, r3, #1
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d10e      	bne.n	800e4c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d109      	bne.n	800e4c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d104      	bne.n	800e4c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d007      	beq.n	800e4d4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	685a      	ldr	r2, [r3, #4]
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e4d2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e4da:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4e0:	f003 0304 	and.w	r3, r3, #4
 800e4e4:	2b04      	cmp	r3, #4
 800e4e6:	d113      	bne.n	800e510 <I2C_ITError+0x254>
 800e4e8:	7bfb      	ldrb	r3, [r7, #15]
 800e4ea:	2b28      	cmp	r3, #40	; 0x28
 800e4ec:	d110      	bne.n	800e510 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	4a0a      	ldr	r2, [pc, #40]	; (800e51c <I2C_ITError+0x260>)
 800e4f2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2220      	movs	r2, #32
 800e4fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2200      	movs	r2, #0
 800e506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	f7fe fe92 	bl	800d234 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e510:	bf00      	nop
 800e512:	3710      	adds	r7, #16
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}
 800e518:	0800e745 	.word	0x0800e745
 800e51c:	ffff0000 	.word	0xffff0000

0800e520 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b086      	sub	sp, #24
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e52c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e52e:	697b      	ldr	r3, [r7, #20]
 800e530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e534:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e53c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800e53e:	697b      	ldr	r3, [r7, #20]
 800e540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e542:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	685a      	ldr	r2, [r3, #4]
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800e552:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800e554:	697b      	ldr	r3, [r7, #20]
 800e556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d003      	beq.n	800e564 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e560:	2200      	movs	r2, #0
 800e562:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800e564:	697b      	ldr	r3, [r7, #20]
 800e566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d003      	beq.n	800e574 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e570:	2200      	movs	r2, #0
 800e572:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800e574:	7cfb      	ldrb	r3, [r7, #19]
 800e576:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800e57a:	2b21      	cmp	r3, #33	; 0x21
 800e57c:	d007      	beq.n	800e58e <I2C_DMAXferCplt+0x6e>
 800e57e:	7cfb      	ldrb	r3, [r7, #19]
 800e580:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800e584:	2b22      	cmp	r3, #34	; 0x22
 800e586:	d131      	bne.n	800e5ec <I2C_DMAXferCplt+0xcc>
 800e588:	7cbb      	ldrb	r3, [r7, #18]
 800e58a:	2b20      	cmp	r3, #32
 800e58c:	d12e      	bne.n	800e5ec <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e58e:	697b      	ldr	r3, [r7, #20]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	685a      	ldr	r2, [r3, #4]
 800e594:	697b      	ldr	r3, [r7, #20]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e59c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800e59e:	697b      	ldr	r3, [r7, #20]
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800e5a4:	7cfb      	ldrb	r3, [r7, #19]
 800e5a6:	2b29      	cmp	r3, #41	; 0x29
 800e5a8:	d10a      	bne.n	800e5c0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e5aa:	697b      	ldr	r3, [r7, #20]
 800e5ac:	2221      	movs	r2, #33	; 0x21
 800e5ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e5b0:	697b      	ldr	r3, [r7, #20]
 800e5b2:	2228      	movs	r2, #40	; 0x28
 800e5b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e5b8:	6978      	ldr	r0, [r7, #20]
 800e5ba:	f7fe fe19 	bl	800d1f0 <HAL_I2C_SlaveTxCpltCallback>
 800e5be:	e00c      	b.n	800e5da <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800e5c0:	7cfb      	ldrb	r3, [r7, #19]
 800e5c2:	2b2a      	cmp	r3, #42	; 0x2a
 800e5c4:	d109      	bne.n	800e5da <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	2222      	movs	r2, #34	; 0x22
 800e5ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e5cc:	697b      	ldr	r3, [r7, #20]
 800e5ce:	2228      	movs	r2, #40	; 0x28
 800e5d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e5d4:	6978      	ldr	r0, [r7, #20]
 800e5d6:	f7fe fe15 	bl	800d204 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e5da:	697b      	ldr	r3, [r7, #20]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	685a      	ldr	r2, [r3, #4]
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800e5e8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800e5ea:	e06a      	b.n	800e6c2 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800e5ec:	697b      	ldr	r3, [r7, #20]
 800e5ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e5f2:	b2db      	uxtb	r3, r3
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d064      	beq.n	800e6c2 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e5fc:	b29b      	uxth	r3, r3
 800e5fe:	2b01      	cmp	r3, #1
 800e600:	d107      	bne.n	800e612 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	681a      	ldr	r2, [r3, #0]
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e610:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	685a      	ldr	r2, [r3, #4]
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800e620:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e628:	d009      	beq.n	800e63e <I2C_DMAXferCplt+0x11e>
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	2b08      	cmp	r3, #8
 800e62e:	d006      	beq.n	800e63e <I2C_DMAXferCplt+0x11e>
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e636:	d002      	beq.n	800e63e <I2C_DMAXferCplt+0x11e>
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	2b20      	cmp	r3, #32
 800e63c:	d107      	bne.n	800e64e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	681a      	ldr	r2, [r3, #0]
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e64c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e64e:	697b      	ldr	r3, [r7, #20]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	685a      	ldr	r2, [r3, #4]
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e65c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	685a      	ldr	r2, [r3, #4]
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e66c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800e66e:	697b      	ldr	r3, [r7, #20]
 800e670:	2200      	movs	r2, #0
 800e672:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d003      	beq.n	800e684 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800e67c:	6978      	ldr	r0, [r7, #20]
 800e67e:	f7fe fdf7 	bl	800d270 <HAL_I2C_ErrorCallback>
}
 800e682:	e01e      	b.n	800e6c2 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	2220      	movs	r2, #32
 800e688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e692:	b2db      	uxtb	r3, r3
 800e694:	2b40      	cmp	r3, #64	; 0x40
 800e696:	d10a      	bne.n	800e6ae <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e698:	697b      	ldr	r3, [r7, #20]
 800e69a:	2200      	movs	r2, #0
 800e69c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800e6a6:	6978      	ldr	r0, [r7, #20]
 800e6a8:	f7fe fdd8 	bl	800d25c <HAL_I2C_MemRxCpltCallback>
}
 800e6ac:	e009      	b.n	800e6c2 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	2212      	movs	r2, #18
 800e6ba:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800e6bc:	6978      	ldr	r0, [r7, #20]
 800e6be:	f7f8 fc5d 	bl	8006f7c <HAL_I2C_MasterRxCpltCallback>
}
 800e6c2:	bf00      	nop
 800e6c4:	3718      	adds	r7, #24
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}

0800e6ca <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800e6ca:	b580      	push	{r7, lr}
 800e6cc:	b084      	sub	sp, #16
 800e6ce:	af00      	add	r7, sp, #0
 800e6d0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6d6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d003      	beq.n	800e6e8 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d003      	beq.n	800e6f8 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f7fd fa4f 	bl	800bb9c <HAL_DMA_GetError>
 800e6fe:	4603      	mov	r3, r0
 800e700:	2b02      	cmp	r3, #2
 800e702:	d01b      	beq.n	800e73c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	681a      	ldr	r2, [r3, #0]
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e712:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2200      	movs	r2, #0
 800e718:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	2220      	movs	r2, #32
 800e71e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	2200      	movs	r2, #0
 800e726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e72e:	f043 0210 	orr.w	r2, r3, #16
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800e736:	68f8      	ldr	r0, [r7, #12]
 800e738:	f7fe fd9a 	bl	800d270 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e73c:	bf00      	nop
 800e73e:	3710      	adds	r7, #16
 800e740:	46bd      	mov	sp, r7
 800e742:	bd80      	pop	{r7, pc}

0800e744 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b086      	sub	sp, #24
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e74c:	2300      	movs	r3, #0
 800e74e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e754:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e75c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800e75e:	4b4b      	ldr	r3, [pc, #300]	; (800e88c <I2C_DMAAbort+0x148>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	08db      	lsrs	r3, r3, #3
 800e764:	4a4a      	ldr	r2, [pc, #296]	; (800e890 <I2C_DMAAbort+0x14c>)
 800e766:	fba2 2303 	umull	r2, r3, r2, r3
 800e76a:	0a1a      	lsrs	r2, r3, #8
 800e76c:	4613      	mov	r3, r2
 800e76e:	009b      	lsls	r3, r3, #2
 800e770:	4413      	add	r3, r2
 800e772:	00da      	lsls	r2, r3, #3
 800e774:	1ad3      	subs	r3, r2, r3
 800e776:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d106      	bne.n	800e78c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e77e:	697b      	ldr	r3, [r7, #20]
 800e780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e782:	f043 0220 	orr.w	r2, r3, #32
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800e78a:	e00a      	b.n	800e7a2 <I2C_DMAAbort+0x5e>
    }
    count--;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	3b01      	subs	r3, #1
 800e790:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e79c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e7a0:	d0ea      	beq.n	800e778 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d003      	beq.n	800e7b2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d003      	beq.n	800e7c2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7be:	2200      	movs	r2, #0
 800e7c0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	681a      	ldr	r2, [r3, #0]
 800e7c8:	697b      	ldr	r3, [r7, #20]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e7d0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d003      	beq.n	800e7e8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d003      	beq.n	800e7f8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	681a      	ldr	r2, [r3, #0]
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	f022 0201 	bic.w	r2, r2, #1
 800e806:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e80e:	b2db      	uxtb	r3, r3
 800e810:	2b60      	cmp	r3, #96	; 0x60
 800e812:	d10e      	bne.n	800e832 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	2220      	movs	r2, #32
 800e818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e81c:	697b      	ldr	r3, [r7, #20]
 800e81e:	2200      	movs	r2, #0
 800e820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800e824:	697b      	ldr	r3, [r7, #20]
 800e826:	2200      	movs	r2, #0
 800e828:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800e82a:	6978      	ldr	r0, [r7, #20]
 800e82c:	f7fe fd2a 	bl	800d284 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e830:	e027      	b.n	800e882 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e832:	7cfb      	ldrb	r3, [r7, #19]
 800e834:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e838:	2b28      	cmp	r3, #40	; 0x28
 800e83a:	d117      	bne.n	800e86c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	681a      	ldr	r2, [r3, #0]
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	f042 0201 	orr.w	r2, r2, #1
 800e84a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e84c:	697b      	ldr	r3, [r7, #20]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	681a      	ldr	r2, [r3, #0]
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e85a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800e85c:	697b      	ldr	r3, [r7, #20]
 800e85e:	2200      	movs	r2, #0
 800e860:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	2228      	movs	r2, #40	; 0x28
 800e866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800e86a:	e007      	b.n	800e87c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	2220      	movs	r2, #32
 800e870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	2200      	movs	r2, #0
 800e878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800e87c:	6978      	ldr	r0, [r7, #20]
 800e87e:	f7fe fcf7 	bl	800d270 <HAL_I2C_ErrorCallback>
}
 800e882:	bf00      	nop
 800e884:	3718      	adds	r7, #24
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}
 800e88a:	bf00      	nop
 800e88c:	200001b8 	.word	0x200001b8
 800e890:	14f8b589 	.word	0x14f8b589

0800e894 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800e894:	b480      	push	{r7}
 800e896:	b085      	sub	sp, #20
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e89c:	2300      	movs	r3, #0
 800e89e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800e8a0:	4b13      	ldr	r3, [pc, #76]	; (800e8f0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	08db      	lsrs	r3, r3, #3
 800e8a6:	4a13      	ldr	r2, [pc, #76]	; (800e8f4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800e8a8:	fba2 2303 	umull	r2, r3, r2, r3
 800e8ac:	0a1a      	lsrs	r2, r3, #8
 800e8ae:	4613      	mov	r3, r2
 800e8b0:	009b      	lsls	r3, r3, #2
 800e8b2:	4413      	add	r3, r2
 800e8b4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	3b01      	subs	r3, #1
 800e8ba:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d107      	bne.n	800e8d2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8c6:	f043 0220 	orr.w	r2, r3, #32
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800e8ce:	2301      	movs	r3, #1
 800e8d0:	e008      	b.n	800e8e4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e8dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e8e0:	d0e9      	beq.n	800e8b6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800e8e2:	2300      	movs	r3, #0
}
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	3714      	adds	r7, #20
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ee:	4770      	bx	lr
 800e8f0:	200001b8 	.word	0x200001b8
 800e8f4:	14f8b589 	.word	0x14f8b589

0800e8f8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800e8f8:	b480      	push	{r7}
 800e8fa:	b083      	sub	sp, #12
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e904:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e908:	d103      	bne.n	800e912 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	2201      	movs	r2, #1
 800e90e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800e910:	e007      	b.n	800e922 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e916:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e91a:	d102      	bne.n	800e922 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2208      	movs	r2, #8
 800e920:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800e922:	bf00      	nop
 800e924:	370c      	adds	r7, #12
 800e926:	46bd      	mov	sp, r7
 800e928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92c:	4770      	bx	lr
	...

0800e930 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b086      	sub	sp, #24
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d101      	bne.n	800e942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e93e:	2301      	movs	r3, #1
 800e940:	e25b      	b.n	800edfa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	f003 0301 	and.w	r3, r3, #1
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d075      	beq.n	800ea3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e94e:	4ba3      	ldr	r3, [pc, #652]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800e950:	689b      	ldr	r3, [r3, #8]
 800e952:	f003 030c 	and.w	r3, r3, #12
 800e956:	2b04      	cmp	r3, #4
 800e958:	d00c      	beq.n	800e974 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e95a:	4ba0      	ldr	r3, [pc, #640]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800e95c:	689b      	ldr	r3, [r3, #8]
 800e95e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e962:	2b08      	cmp	r3, #8
 800e964:	d112      	bne.n	800e98c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e966:	4b9d      	ldr	r3, [pc, #628]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800e968:	685b      	ldr	r3, [r3, #4]
 800e96a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e96e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e972:	d10b      	bne.n	800e98c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e974:	4b99      	ldr	r3, [pc, #612]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d05b      	beq.n	800ea38 <HAL_RCC_OscConfig+0x108>
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	685b      	ldr	r3, [r3, #4]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d157      	bne.n	800ea38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800e988:	2301      	movs	r3, #1
 800e98a:	e236      	b.n	800edfa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	685b      	ldr	r3, [r3, #4]
 800e990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e994:	d106      	bne.n	800e9a4 <HAL_RCC_OscConfig+0x74>
 800e996:	4b91      	ldr	r3, [pc, #580]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	4a90      	ldr	r2, [pc, #576]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800e99c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e9a0:	6013      	str	r3, [r2, #0]
 800e9a2:	e01d      	b.n	800e9e0 <HAL_RCC_OscConfig+0xb0>
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	685b      	ldr	r3, [r3, #4]
 800e9a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e9ac:	d10c      	bne.n	800e9c8 <HAL_RCC_OscConfig+0x98>
 800e9ae:	4b8b      	ldr	r3, [pc, #556]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	4a8a      	ldr	r2, [pc, #552]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800e9b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e9b8:	6013      	str	r3, [r2, #0]
 800e9ba:	4b88      	ldr	r3, [pc, #544]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	4a87      	ldr	r2, [pc, #540]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800e9c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e9c4:	6013      	str	r3, [r2, #0]
 800e9c6:	e00b      	b.n	800e9e0 <HAL_RCC_OscConfig+0xb0>
 800e9c8:	4b84      	ldr	r3, [pc, #528]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	4a83      	ldr	r2, [pc, #524]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800e9ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e9d2:	6013      	str	r3, [r2, #0]
 800e9d4:	4b81      	ldr	r3, [pc, #516]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	4a80      	ldr	r2, [pc, #512]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800e9da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e9de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	685b      	ldr	r3, [r3, #4]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d013      	beq.n	800ea10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e9e8:	f7fb fdbc 	bl	800a564 <HAL_GetTick>
 800e9ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e9ee:	e008      	b.n	800ea02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e9f0:	f7fb fdb8 	bl	800a564 <HAL_GetTick>
 800e9f4:	4602      	mov	r2, r0
 800e9f6:	693b      	ldr	r3, [r7, #16]
 800e9f8:	1ad3      	subs	r3, r2, r3
 800e9fa:	2b64      	cmp	r3, #100	; 0x64
 800e9fc:	d901      	bls.n	800ea02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800e9fe:	2303      	movs	r3, #3
 800ea00:	e1fb      	b.n	800edfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ea02:	4b76      	ldr	r3, [pc, #472]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d0f0      	beq.n	800e9f0 <HAL_RCC_OscConfig+0xc0>
 800ea0e:	e014      	b.n	800ea3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ea10:	f7fb fda8 	bl	800a564 <HAL_GetTick>
 800ea14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ea16:	e008      	b.n	800ea2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ea18:	f7fb fda4 	bl	800a564 <HAL_GetTick>
 800ea1c:	4602      	mov	r2, r0
 800ea1e:	693b      	ldr	r3, [r7, #16]
 800ea20:	1ad3      	subs	r3, r2, r3
 800ea22:	2b64      	cmp	r3, #100	; 0x64
 800ea24:	d901      	bls.n	800ea2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ea26:	2303      	movs	r3, #3
 800ea28:	e1e7      	b.n	800edfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ea2a:	4b6c      	ldr	r3, [pc, #432]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d1f0      	bne.n	800ea18 <HAL_RCC_OscConfig+0xe8>
 800ea36:	e000      	b.n	800ea3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ea38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f003 0302 	and.w	r3, r3, #2
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d063      	beq.n	800eb0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ea46:	4b65      	ldr	r3, [pc, #404]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800ea48:	689b      	ldr	r3, [r3, #8]
 800ea4a:	f003 030c 	and.w	r3, r3, #12
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d00b      	beq.n	800ea6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ea52:	4b62      	ldr	r3, [pc, #392]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800ea54:	689b      	ldr	r3, [r3, #8]
 800ea56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ea5a:	2b08      	cmp	r3, #8
 800ea5c:	d11c      	bne.n	800ea98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ea5e:	4b5f      	ldr	r3, [pc, #380]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800ea60:	685b      	ldr	r3, [r3, #4]
 800ea62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d116      	bne.n	800ea98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ea6a:	4b5c      	ldr	r3, [pc, #368]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	f003 0302 	and.w	r3, r3, #2
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d005      	beq.n	800ea82 <HAL_RCC_OscConfig+0x152>
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	68db      	ldr	r3, [r3, #12]
 800ea7a:	2b01      	cmp	r3, #1
 800ea7c:	d001      	beq.n	800ea82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ea7e:	2301      	movs	r3, #1
 800ea80:	e1bb      	b.n	800edfa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ea82:	4b56      	ldr	r3, [pc, #344]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	691b      	ldr	r3, [r3, #16]
 800ea8e:	00db      	lsls	r3, r3, #3
 800ea90:	4952      	ldr	r1, [pc, #328]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800ea92:	4313      	orrs	r3, r2
 800ea94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ea96:	e03a      	b.n	800eb0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	68db      	ldr	r3, [r3, #12]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d020      	beq.n	800eae2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800eaa0:	4b4f      	ldr	r3, [pc, #316]	; (800ebe0 <HAL_RCC_OscConfig+0x2b0>)
 800eaa2:	2201      	movs	r2, #1
 800eaa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eaa6:	f7fb fd5d 	bl	800a564 <HAL_GetTick>
 800eaaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800eaac:	e008      	b.n	800eac0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800eaae:	f7fb fd59 	bl	800a564 <HAL_GetTick>
 800eab2:	4602      	mov	r2, r0
 800eab4:	693b      	ldr	r3, [r7, #16]
 800eab6:	1ad3      	subs	r3, r2, r3
 800eab8:	2b02      	cmp	r3, #2
 800eaba:	d901      	bls.n	800eac0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800eabc:	2303      	movs	r3, #3
 800eabe:	e19c      	b.n	800edfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800eac0:	4b46      	ldr	r3, [pc, #280]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	f003 0302 	and.w	r3, r3, #2
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d0f0      	beq.n	800eaae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800eacc:	4b43      	ldr	r3, [pc, #268]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	691b      	ldr	r3, [r3, #16]
 800ead8:	00db      	lsls	r3, r3, #3
 800eada:	4940      	ldr	r1, [pc, #256]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800eadc:	4313      	orrs	r3, r2
 800eade:	600b      	str	r3, [r1, #0]
 800eae0:	e015      	b.n	800eb0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800eae2:	4b3f      	ldr	r3, [pc, #252]	; (800ebe0 <HAL_RCC_OscConfig+0x2b0>)
 800eae4:	2200      	movs	r2, #0
 800eae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eae8:	f7fb fd3c 	bl	800a564 <HAL_GetTick>
 800eaec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800eaee:	e008      	b.n	800eb02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800eaf0:	f7fb fd38 	bl	800a564 <HAL_GetTick>
 800eaf4:	4602      	mov	r2, r0
 800eaf6:	693b      	ldr	r3, [r7, #16]
 800eaf8:	1ad3      	subs	r3, r2, r3
 800eafa:	2b02      	cmp	r3, #2
 800eafc:	d901      	bls.n	800eb02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800eafe:	2303      	movs	r3, #3
 800eb00:	e17b      	b.n	800edfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800eb02:	4b36      	ldr	r3, [pc, #216]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	f003 0302 	and.w	r3, r3, #2
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d1f0      	bne.n	800eaf0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	f003 0308 	and.w	r3, r3, #8
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d030      	beq.n	800eb7c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	695b      	ldr	r3, [r3, #20]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d016      	beq.n	800eb50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800eb22:	4b30      	ldr	r3, [pc, #192]	; (800ebe4 <HAL_RCC_OscConfig+0x2b4>)
 800eb24:	2201      	movs	r2, #1
 800eb26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eb28:	f7fb fd1c 	bl	800a564 <HAL_GetTick>
 800eb2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800eb2e:	e008      	b.n	800eb42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800eb30:	f7fb fd18 	bl	800a564 <HAL_GetTick>
 800eb34:	4602      	mov	r2, r0
 800eb36:	693b      	ldr	r3, [r7, #16]
 800eb38:	1ad3      	subs	r3, r2, r3
 800eb3a:	2b02      	cmp	r3, #2
 800eb3c:	d901      	bls.n	800eb42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800eb3e:	2303      	movs	r3, #3
 800eb40:	e15b      	b.n	800edfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800eb42:	4b26      	ldr	r3, [pc, #152]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800eb44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb46:	f003 0302 	and.w	r3, r3, #2
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d0f0      	beq.n	800eb30 <HAL_RCC_OscConfig+0x200>
 800eb4e:	e015      	b.n	800eb7c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800eb50:	4b24      	ldr	r3, [pc, #144]	; (800ebe4 <HAL_RCC_OscConfig+0x2b4>)
 800eb52:	2200      	movs	r2, #0
 800eb54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800eb56:	f7fb fd05 	bl	800a564 <HAL_GetTick>
 800eb5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800eb5c:	e008      	b.n	800eb70 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800eb5e:	f7fb fd01 	bl	800a564 <HAL_GetTick>
 800eb62:	4602      	mov	r2, r0
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	1ad3      	subs	r3, r2, r3
 800eb68:	2b02      	cmp	r3, #2
 800eb6a:	d901      	bls.n	800eb70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800eb6c:	2303      	movs	r3, #3
 800eb6e:	e144      	b.n	800edfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800eb70:	4b1a      	ldr	r3, [pc, #104]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800eb72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb74:	f003 0302 	and.w	r3, r3, #2
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d1f0      	bne.n	800eb5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	f003 0304 	and.w	r3, r3, #4
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	f000 80a0 	beq.w	800ecca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800eb8e:	4b13      	ldr	r3, [pc, #76]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800eb90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d10f      	bne.n	800ebba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	60bb      	str	r3, [r7, #8]
 800eb9e:	4b0f      	ldr	r3, [pc, #60]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800eba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eba2:	4a0e      	ldr	r2, [pc, #56]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800eba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eba8:	6413      	str	r3, [r2, #64]	; 0x40
 800ebaa:	4b0c      	ldr	r3, [pc, #48]	; (800ebdc <HAL_RCC_OscConfig+0x2ac>)
 800ebac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ebb2:	60bb      	str	r3, [r7, #8]
 800ebb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ebba:	4b0b      	ldr	r3, [pc, #44]	; (800ebe8 <HAL_RCC_OscConfig+0x2b8>)
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d121      	bne.n	800ec0a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ebc6:	4b08      	ldr	r3, [pc, #32]	; (800ebe8 <HAL_RCC_OscConfig+0x2b8>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	4a07      	ldr	r2, [pc, #28]	; (800ebe8 <HAL_RCC_OscConfig+0x2b8>)
 800ebcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ebd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ebd2:	f7fb fcc7 	bl	800a564 <HAL_GetTick>
 800ebd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ebd8:	e011      	b.n	800ebfe <HAL_RCC_OscConfig+0x2ce>
 800ebda:	bf00      	nop
 800ebdc:	40023800 	.word	0x40023800
 800ebe0:	42470000 	.word	0x42470000
 800ebe4:	42470e80 	.word	0x42470e80
 800ebe8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ebec:	f7fb fcba 	bl	800a564 <HAL_GetTick>
 800ebf0:	4602      	mov	r2, r0
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	1ad3      	subs	r3, r2, r3
 800ebf6:	2b02      	cmp	r3, #2
 800ebf8:	d901      	bls.n	800ebfe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800ebfa:	2303      	movs	r3, #3
 800ebfc:	e0fd      	b.n	800edfa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ebfe:	4b81      	ldr	r3, [pc, #516]	; (800ee04 <HAL_RCC_OscConfig+0x4d4>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d0f0      	beq.n	800ebec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	689b      	ldr	r3, [r3, #8]
 800ec0e:	2b01      	cmp	r3, #1
 800ec10:	d106      	bne.n	800ec20 <HAL_RCC_OscConfig+0x2f0>
 800ec12:	4b7d      	ldr	r3, [pc, #500]	; (800ee08 <HAL_RCC_OscConfig+0x4d8>)
 800ec14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec16:	4a7c      	ldr	r2, [pc, #496]	; (800ee08 <HAL_RCC_OscConfig+0x4d8>)
 800ec18:	f043 0301 	orr.w	r3, r3, #1
 800ec1c:	6713      	str	r3, [r2, #112]	; 0x70
 800ec1e:	e01c      	b.n	800ec5a <HAL_RCC_OscConfig+0x32a>
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	689b      	ldr	r3, [r3, #8]
 800ec24:	2b05      	cmp	r3, #5
 800ec26:	d10c      	bne.n	800ec42 <HAL_RCC_OscConfig+0x312>
 800ec28:	4b77      	ldr	r3, [pc, #476]	; (800ee08 <HAL_RCC_OscConfig+0x4d8>)
 800ec2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec2c:	4a76      	ldr	r2, [pc, #472]	; (800ee08 <HAL_RCC_OscConfig+0x4d8>)
 800ec2e:	f043 0304 	orr.w	r3, r3, #4
 800ec32:	6713      	str	r3, [r2, #112]	; 0x70
 800ec34:	4b74      	ldr	r3, [pc, #464]	; (800ee08 <HAL_RCC_OscConfig+0x4d8>)
 800ec36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec38:	4a73      	ldr	r2, [pc, #460]	; (800ee08 <HAL_RCC_OscConfig+0x4d8>)
 800ec3a:	f043 0301 	orr.w	r3, r3, #1
 800ec3e:	6713      	str	r3, [r2, #112]	; 0x70
 800ec40:	e00b      	b.n	800ec5a <HAL_RCC_OscConfig+0x32a>
 800ec42:	4b71      	ldr	r3, [pc, #452]	; (800ee08 <HAL_RCC_OscConfig+0x4d8>)
 800ec44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec46:	4a70      	ldr	r2, [pc, #448]	; (800ee08 <HAL_RCC_OscConfig+0x4d8>)
 800ec48:	f023 0301 	bic.w	r3, r3, #1
 800ec4c:	6713      	str	r3, [r2, #112]	; 0x70
 800ec4e:	4b6e      	ldr	r3, [pc, #440]	; (800ee08 <HAL_RCC_OscConfig+0x4d8>)
 800ec50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec52:	4a6d      	ldr	r2, [pc, #436]	; (800ee08 <HAL_RCC_OscConfig+0x4d8>)
 800ec54:	f023 0304 	bic.w	r3, r3, #4
 800ec58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	689b      	ldr	r3, [r3, #8]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d015      	beq.n	800ec8e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ec62:	f7fb fc7f 	bl	800a564 <HAL_GetTick>
 800ec66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ec68:	e00a      	b.n	800ec80 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ec6a:	f7fb fc7b 	bl	800a564 <HAL_GetTick>
 800ec6e:	4602      	mov	r2, r0
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	1ad3      	subs	r3, r2, r3
 800ec74:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec78:	4293      	cmp	r3, r2
 800ec7a:	d901      	bls.n	800ec80 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800ec7c:	2303      	movs	r3, #3
 800ec7e:	e0bc      	b.n	800edfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ec80:	4b61      	ldr	r3, [pc, #388]	; (800ee08 <HAL_RCC_OscConfig+0x4d8>)
 800ec82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec84:	f003 0302 	and.w	r3, r3, #2
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d0ee      	beq.n	800ec6a <HAL_RCC_OscConfig+0x33a>
 800ec8c:	e014      	b.n	800ecb8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ec8e:	f7fb fc69 	bl	800a564 <HAL_GetTick>
 800ec92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ec94:	e00a      	b.n	800ecac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ec96:	f7fb fc65 	bl	800a564 <HAL_GetTick>
 800ec9a:	4602      	mov	r2, r0
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	1ad3      	subs	r3, r2, r3
 800eca0:	f241 3288 	movw	r2, #5000	; 0x1388
 800eca4:	4293      	cmp	r3, r2
 800eca6:	d901      	bls.n	800ecac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800eca8:	2303      	movs	r3, #3
 800ecaa:	e0a6      	b.n	800edfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ecac:	4b56      	ldr	r3, [pc, #344]	; (800ee08 <HAL_RCC_OscConfig+0x4d8>)
 800ecae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecb0:	f003 0302 	and.w	r3, r3, #2
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d1ee      	bne.n	800ec96 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ecb8:	7dfb      	ldrb	r3, [r7, #23]
 800ecba:	2b01      	cmp	r3, #1
 800ecbc:	d105      	bne.n	800ecca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ecbe:	4b52      	ldr	r3, [pc, #328]	; (800ee08 <HAL_RCC_OscConfig+0x4d8>)
 800ecc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecc2:	4a51      	ldr	r2, [pc, #324]	; (800ee08 <HAL_RCC_OscConfig+0x4d8>)
 800ecc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ecc8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	699b      	ldr	r3, [r3, #24]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	f000 8092 	beq.w	800edf8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ecd4:	4b4c      	ldr	r3, [pc, #304]	; (800ee08 <HAL_RCC_OscConfig+0x4d8>)
 800ecd6:	689b      	ldr	r3, [r3, #8]
 800ecd8:	f003 030c 	and.w	r3, r3, #12
 800ecdc:	2b08      	cmp	r3, #8
 800ecde:	d05c      	beq.n	800ed9a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	699b      	ldr	r3, [r3, #24]
 800ece4:	2b02      	cmp	r3, #2
 800ece6:	d141      	bne.n	800ed6c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ece8:	4b48      	ldr	r3, [pc, #288]	; (800ee0c <HAL_RCC_OscConfig+0x4dc>)
 800ecea:	2200      	movs	r2, #0
 800ecec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ecee:	f7fb fc39 	bl	800a564 <HAL_GetTick>
 800ecf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ecf4:	e008      	b.n	800ed08 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ecf6:	f7fb fc35 	bl	800a564 <HAL_GetTick>
 800ecfa:	4602      	mov	r2, r0
 800ecfc:	693b      	ldr	r3, [r7, #16]
 800ecfe:	1ad3      	subs	r3, r2, r3
 800ed00:	2b02      	cmp	r3, #2
 800ed02:	d901      	bls.n	800ed08 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800ed04:	2303      	movs	r3, #3
 800ed06:	e078      	b.n	800edfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ed08:	4b3f      	ldr	r3, [pc, #252]	; (800ee08 <HAL_RCC_OscConfig+0x4d8>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d1f0      	bne.n	800ecf6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	69da      	ldr	r2, [r3, #28]
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	6a1b      	ldr	r3, [r3, #32]
 800ed1c:	431a      	orrs	r2, r3
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed22:	019b      	lsls	r3, r3, #6
 800ed24:	431a      	orrs	r2, r3
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed2a:	085b      	lsrs	r3, r3, #1
 800ed2c:	3b01      	subs	r3, #1
 800ed2e:	041b      	lsls	r3, r3, #16
 800ed30:	431a      	orrs	r2, r3
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed36:	061b      	lsls	r3, r3, #24
 800ed38:	4933      	ldr	r1, [pc, #204]	; (800ee08 <HAL_RCC_OscConfig+0x4d8>)
 800ed3a:	4313      	orrs	r3, r2
 800ed3c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ed3e:	4b33      	ldr	r3, [pc, #204]	; (800ee0c <HAL_RCC_OscConfig+0x4dc>)
 800ed40:	2201      	movs	r2, #1
 800ed42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ed44:	f7fb fc0e 	bl	800a564 <HAL_GetTick>
 800ed48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ed4a:	e008      	b.n	800ed5e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ed4c:	f7fb fc0a 	bl	800a564 <HAL_GetTick>
 800ed50:	4602      	mov	r2, r0
 800ed52:	693b      	ldr	r3, [r7, #16]
 800ed54:	1ad3      	subs	r3, r2, r3
 800ed56:	2b02      	cmp	r3, #2
 800ed58:	d901      	bls.n	800ed5e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800ed5a:	2303      	movs	r3, #3
 800ed5c:	e04d      	b.n	800edfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ed5e:	4b2a      	ldr	r3, [pc, #168]	; (800ee08 <HAL_RCC_OscConfig+0x4d8>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d0f0      	beq.n	800ed4c <HAL_RCC_OscConfig+0x41c>
 800ed6a:	e045      	b.n	800edf8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ed6c:	4b27      	ldr	r3, [pc, #156]	; (800ee0c <HAL_RCC_OscConfig+0x4dc>)
 800ed6e:	2200      	movs	r2, #0
 800ed70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ed72:	f7fb fbf7 	bl	800a564 <HAL_GetTick>
 800ed76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ed78:	e008      	b.n	800ed8c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ed7a:	f7fb fbf3 	bl	800a564 <HAL_GetTick>
 800ed7e:	4602      	mov	r2, r0
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	1ad3      	subs	r3, r2, r3
 800ed84:	2b02      	cmp	r3, #2
 800ed86:	d901      	bls.n	800ed8c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800ed88:	2303      	movs	r3, #3
 800ed8a:	e036      	b.n	800edfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ed8c:	4b1e      	ldr	r3, [pc, #120]	; (800ee08 <HAL_RCC_OscConfig+0x4d8>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d1f0      	bne.n	800ed7a <HAL_RCC_OscConfig+0x44a>
 800ed98:	e02e      	b.n	800edf8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	699b      	ldr	r3, [r3, #24]
 800ed9e:	2b01      	cmp	r3, #1
 800eda0:	d101      	bne.n	800eda6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800eda2:	2301      	movs	r3, #1
 800eda4:	e029      	b.n	800edfa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800eda6:	4b18      	ldr	r3, [pc, #96]	; (800ee08 <HAL_RCC_OscConfig+0x4d8>)
 800eda8:	685b      	ldr	r3, [r3, #4]
 800edaa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	69db      	ldr	r3, [r3, #28]
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d11c      	bne.n	800edf4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800edc4:	429a      	cmp	r2, r3
 800edc6:	d115      	bne.n	800edf4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800edc8:	68fa      	ldr	r2, [r7, #12]
 800edca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800edce:	4013      	ands	r3, r2
 800edd0:	687a      	ldr	r2, [r7, #4]
 800edd2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800edd4:	4293      	cmp	r3, r2
 800edd6:	d10d      	bne.n	800edf4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800ede2:	429a      	cmp	r2, r3
 800ede4:	d106      	bne.n	800edf4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800edf0:	429a      	cmp	r2, r3
 800edf2:	d001      	beq.n	800edf8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800edf4:	2301      	movs	r3, #1
 800edf6:	e000      	b.n	800edfa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800edf8:	2300      	movs	r3, #0
}
 800edfa:	4618      	mov	r0, r3
 800edfc:	3718      	adds	r7, #24
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}
 800ee02:	bf00      	nop
 800ee04:	40007000 	.word	0x40007000
 800ee08:	40023800 	.word	0x40023800
 800ee0c:	42470060 	.word	0x42470060

0800ee10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b084      	sub	sp, #16
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
 800ee18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d101      	bne.n	800ee24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ee20:	2301      	movs	r3, #1
 800ee22:	e0cc      	b.n	800efbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ee24:	4b68      	ldr	r3, [pc, #416]	; (800efc8 <HAL_RCC_ClockConfig+0x1b8>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	f003 030f 	and.w	r3, r3, #15
 800ee2c:	683a      	ldr	r2, [r7, #0]
 800ee2e:	429a      	cmp	r2, r3
 800ee30:	d90c      	bls.n	800ee4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ee32:	4b65      	ldr	r3, [pc, #404]	; (800efc8 <HAL_RCC_ClockConfig+0x1b8>)
 800ee34:	683a      	ldr	r2, [r7, #0]
 800ee36:	b2d2      	uxtb	r2, r2
 800ee38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ee3a:	4b63      	ldr	r3, [pc, #396]	; (800efc8 <HAL_RCC_ClockConfig+0x1b8>)
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	f003 030f 	and.w	r3, r3, #15
 800ee42:	683a      	ldr	r2, [r7, #0]
 800ee44:	429a      	cmp	r2, r3
 800ee46:	d001      	beq.n	800ee4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ee48:	2301      	movs	r3, #1
 800ee4a:	e0b8      	b.n	800efbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	f003 0302 	and.w	r3, r3, #2
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d020      	beq.n	800ee9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	f003 0304 	and.w	r3, r3, #4
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d005      	beq.n	800ee70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ee64:	4b59      	ldr	r3, [pc, #356]	; (800efcc <HAL_RCC_ClockConfig+0x1bc>)
 800ee66:	689b      	ldr	r3, [r3, #8]
 800ee68:	4a58      	ldr	r2, [pc, #352]	; (800efcc <HAL_RCC_ClockConfig+0x1bc>)
 800ee6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ee6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	f003 0308 	and.w	r3, r3, #8
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d005      	beq.n	800ee88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ee7c:	4b53      	ldr	r3, [pc, #332]	; (800efcc <HAL_RCC_ClockConfig+0x1bc>)
 800ee7e:	689b      	ldr	r3, [r3, #8]
 800ee80:	4a52      	ldr	r2, [pc, #328]	; (800efcc <HAL_RCC_ClockConfig+0x1bc>)
 800ee82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ee86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ee88:	4b50      	ldr	r3, [pc, #320]	; (800efcc <HAL_RCC_ClockConfig+0x1bc>)
 800ee8a:	689b      	ldr	r3, [r3, #8]
 800ee8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	689b      	ldr	r3, [r3, #8]
 800ee94:	494d      	ldr	r1, [pc, #308]	; (800efcc <HAL_RCC_ClockConfig+0x1bc>)
 800ee96:	4313      	orrs	r3, r2
 800ee98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	f003 0301 	and.w	r3, r3, #1
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d044      	beq.n	800ef30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	685b      	ldr	r3, [r3, #4]
 800eeaa:	2b01      	cmp	r3, #1
 800eeac:	d107      	bne.n	800eebe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800eeae:	4b47      	ldr	r3, [pc, #284]	; (800efcc <HAL_RCC_ClockConfig+0x1bc>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d119      	bne.n	800eeee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800eeba:	2301      	movs	r3, #1
 800eebc:	e07f      	b.n	800efbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	685b      	ldr	r3, [r3, #4]
 800eec2:	2b02      	cmp	r3, #2
 800eec4:	d003      	beq.n	800eece <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800eeca:	2b03      	cmp	r3, #3
 800eecc:	d107      	bne.n	800eede <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800eece:	4b3f      	ldr	r3, [pc, #252]	; (800efcc <HAL_RCC_ClockConfig+0x1bc>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d109      	bne.n	800eeee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800eeda:	2301      	movs	r3, #1
 800eedc:	e06f      	b.n	800efbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800eede:	4b3b      	ldr	r3, [pc, #236]	; (800efcc <HAL_RCC_ClockConfig+0x1bc>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	f003 0302 	and.w	r3, r3, #2
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d101      	bne.n	800eeee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800eeea:	2301      	movs	r3, #1
 800eeec:	e067      	b.n	800efbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800eeee:	4b37      	ldr	r3, [pc, #220]	; (800efcc <HAL_RCC_ClockConfig+0x1bc>)
 800eef0:	689b      	ldr	r3, [r3, #8]
 800eef2:	f023 0203 	bic.w	r2, r3, #3
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	685b      	ldr	r3, [r3, #4]
 800eefa:	4934      	ldr	r1, [pc, #208]	; (800efcc <HAL_RCC_ClockConfig+0x1bc>)
 800eefc:	4313      	orrs	r3, r2
 800eefe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ef00:	f7fb fb30 	bl	800a564 <HAL_GetTick>
 800ef04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ef06:	e00a      	b.n	800ef1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ef08:	f7fb fb2c 	bl	800a564 <HAL_GetTick>
 800ef0c:	4602      	mov	r2, r0
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	1ad3      	subs	r3, r2, r3
 800ef12:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef16:	4293      	cmp	r3, r2
 800ef18:	d901      	bls.n	800ef1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ef1a:	2303      	movs	r3, #3
 800ef1c:	e04f      	b.n	800efbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ef1e:	4b2b      	ldr	r3, [pc, #172]	; (800efcc <HAL_RCC_ClockConfig+0x1bc>)
 800ef20:	689b      	ldr	r3, [r3, #8]
 800ef22:	f003 020c 	and.w	r2, r3, #12
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	685b      	ldr	r3, [r3, #4]
 800ef2a:	009b      	lsls	r3, r3, #2
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	d1eb      	bne.n	800ef08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ef30:	4b25      	ldr	r3, [pc, #148]	; (800efc8 <HAL_RCC_ClockConfig+0x1b8>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	f003 030f 	and.w	r3, r3, #15
 800ef38:	683a      	ldr	r2, [r7, #0]
 800ef3a:	429a      	cmp	r2, r3
 800ef3c:	d20c      	bcs.n	800ef58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ef3e:	4b22      	ldr	r3, [pc, #136]	; (800efc8 <HAL_RCC_ClockConfig+0x1b8>)
 800ef40:	683a      	ldr	r2, [r7, #0]
 800ef42:	b2d2      	uxtb	r2, r2
 800ef44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ef46:	4b20      	ldr	r3, [pc, #128]	; (800efc8 <HAL_RCC_ClockConfig+0x1b8>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	f003 030f 	and.w	r3, r3, #15
 800ef4e:	683a      	ldr	r2, [r7, #0]
 800ef50:	429a      	cmp	r2, r3
 800ef52:	d001      	beq.n	800ef58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ef54:	2301      	movs	r3, #1
 800ef56:	e032      	b.n	800efbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	f003 0304 	and.w	r3, r3, #4
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d008      	beq.n	800ef76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ef64:	4b19      	ldr	r3, [pc, #100]	; (800efcc <HAL_RCC_ClockConfig+0x1bc>)
 800ef66:	689b      	ldr	r3, [r3, #8]
 800ef68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	68db      	ldr	r3, [r3, #12]
 800ef70:	4916      	ldr	r1, [pc, #88]	; (800efcc <HAL_RCC_ClockConfig+0x1bc>)
 800ef72:	4313      	orrs	r3, r2
 800ef74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	f003 0308 	and.w	r3, r3, #8
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d009      	beq.n	800ef96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ef82:	4b12      	ldr	r3, [pc, #72]	; (800efcc <HAL_RCC_ClockConfig+0x1bc>)
 800ef84:	689b      	ldr	r3, [r3, #8]
 800ef86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	691b      	ldr	r3, [r3, #16]
 800ef8e:	00db      	lsls	r3, r3, #3
 800ef90:	490e      	ldr	r1, [pc, #56]	; (800efcc <HAL_RCC_ClockConfig+0x1bc>)
 800ef92:	4313      	orrs	r3, r2
 800ef94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ef96:	f000 f82d 	bl	800eff4 <HAL_RCC_GetSysClockFreq>
 800ef9a:	4602      	mov	r2, r0
 800ef9c:	4b0b      	ldr	r3, [pc, #44]	; (800efcc <HAL_RCC_ClockConfig+0x1bc>)
 800ef9e:	689b      	ldr	r3, [r3, #8]
 800efa0:	091b      	lsrs	r3, r3, #4
 800efa2:	f003 030f 	and.w	r3, r3, #15
 800efa6:	490a      	ldr	r1, [pc, #40]	; (800efd0 <HAL_RCC_ClockConfig+0x1c0>)
 800efa8:	5ccb      	ldrb	r3, [r1, r3]
 800efaa:	fa22 f303 	lsr.w	r3, r2, r3
 800efae:	4a09      	ldr	r2, [pc, #36]	; (800efd4 <HAL_RCC_ClockConfig+0x1c4>)
 800efb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800efb2:	4b09      	ldr	r3, [pc, #36]	; (800efd8 <HAL_RCC_ClockConfig+0x1c8>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	4618      	mov	r0, r3
 800efb8:	f7f8 f81c 	bl	8006ff4 <HAL_InitTick>

  return HAL_OK;
 800efbc:	2300      	movs	r3, #0
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3710      	adds	r7, #16
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}
 800efc6:	bf00      	nop
 800efc8:	40023c00 	.word	0x40023c00
 800efcc:	40023800 	.word	0x40023800
 800efd0:	0801b0d8 	.word	0x0801b0d8
 800efd4:	200001b8 	.word	0x200001b8
 800efd8:	20000238 	.word	0x20000238

0800efdc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800efdc:	b480      	push	{r7}
 800efde:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800efe0:	4b03      	ldr	r3, [pc, #12]	; (800eff0 <HAL_RCC_EnableCSS+0x14>)
 800efe2:	2201      	movs	r2, #1
 800efe4:	601a      	str	r2, [r3, #0]
}
 800efe6:	bf00      	nop
 800efe8:	46bd      	mov	sp, r7
 800efea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efee:	4770      	bx	lr
 800eff0:	4247004c 	.word	0x4247004c

0800eff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800eff4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800eff8:	b084      	sub	sp, #16
 800effa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800effc:	2300      	movs	r3, #0
 800effe:	607b      	str	r3, [r7, #4]
 800f000:	2300      	movs	r3, #0
 800f002:	60fb      	str	r3, [r7, #12]
 800f004:	2300      	movs	r3, #0
 800f006:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800f008:	2300      	movs	r3, #0
 800f00a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f00c:	4b67      	ldr	r3, [pc, #412]	; (800f1ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800f00e:	689b      	ldr	r3, [r3, #8]
 800f010:	f003 030c 	and.w	r3, r3, #12
 800f014:	2b08      	cmp	r3, #8
 800f016:	d00d      	beq.n	800f034 <HAL_RCC_GetSysClockFreq+0x40>
 800f018:	2b08      	cmp	r3, #8
 800f01a:	f200 80bd 	bhi.w	800f198 <HAL_RCC_GetSysClockFreq+0x1a4>
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d002      	beq.n	800f028 <HAL_RCC_GetSysClockFreq+0x34>
 800f022:	2b04      	cmp	r3, #4
 800f024:	d003      	beq.n	800f02e <HAL_RCC_GetSysClockFreq+0x3a>
 800f026:	e0b7      	b.n	800f198 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800f028:	4b61      	ldr	r3, [pc, #388]	; (800f1b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800f02a:	60bb      	str	r3, [r7, #8]
       break;
 800f02c:	e0b7      	b.n	800f19e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800f02e:	4b61      	ldr	r3, [pc, #388]	; (800f1b4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800f030:	60bb      	str	r3, [r7, #8]
      break;
 800f032:	e0b4      	b.n	800f19e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f034:	4b5d      	ldr	r3, [pc, #372]	; (800f1ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800f036:	685b      	ldr	r3, [r3, #4]
 800f038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f03c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f03e:	4b5b      	ldr	r3, [pc, #364]	; (800f1ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800f040:	685b      	ldr	r3, [r3, #4]
 800f042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f046:	2b00      	cmp	r3, #0
 800f048:	d04d      	beq.n	800f0e6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f04a:	4b58      	ldr	r3, [pc, #352]	; (800f1ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800f04c:	685b      	ldr	r3, [r3, #4]
 800f04e:	099b      	lsrs	r3, r3, #6
 800f050:	461a      	mov	r2, r3
 800f052:	f04f 0300 	mov.w	r3, #0
 800f056:	f240 10ff 	movw	r0, #511	; 0x1ff
 800f05a:	f04f 0100 	mov.w	r1, #0
 800f05e:	ea02 0800 	and.w	r8, r2, r0
 800f062:	ea03 0901 	and.w	r9, r3, r1
 800f066:	4640      	mov	r0, r8
 800f068:	4649      	mov	r1, r9
 800f06a:	f04f 0200 	mov.w	r2, #0
 800f06e:	f04f 0300 	mov.w	r3, #0
 800f072:	014b      	lsls	r3, r1, #5
 800f074:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800f078:	0142      	lsls	r2, r0, #5
 800f07a:	4610      	mov	r0, r2
 800f07c:	4619      	mov	r1, r3
 800f07e:	ebb0 0008 	subs.w	r0, r0, r8
 800f082:	eb61 0109 	sbc.w	r1, r1, r9
 800f086:	f04f 0200 	mov.w	r2, #0
 800f08a:	f04f 0300 	mov.w	r3, #0
 800f08e:	018b      	lsls	r3, r1, #6
 800f090:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800f094:	0182      	lsls	r2, r0, #6
 800f096:	1a12      	subs	r2, r2, r0
 800f098:	eb63 0301 	sbc.w	r3, r3, r1
 800f09c:	f04f 0000 	mov.w	r0, #0
 800f0a0:	f04f 0100 	mov.w	r1, #0
 800f0a4:	00d9      	lsls	r1, r3, #3
 800f0a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f0aa:	00d0      	lsls	r0, r2, #3
 800f0ac:	4602      	mov	r2, r0
 800f0ae:	460b      	mov	r3, r1
 800f0b0:	eb12 0208 	adds.w	r2, r2, r8
 800f0b4:	eb43 0309 	adc.w	r3, r3, r9
 800f0b8:	f04f 0000 	mov.w	r0, #0
 800f0bc:	f04f 0100 	mov.w	r1, #0
 800f0c0:	0259      	lsls	r1, r3, #9
 800f0c2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800f0c6:	0250      	lsls	r0, r2, #9
 800f0c8:	4602      	mov	r2, r0
 800f0ca:	460b      	mov	r3, r1
 800f0cc:	4610      	mov	r0, r2
 800f0ce:	4619      	mov	r1, r3
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	461a      	mov	r2, r3
 800f0d4:	f04f 0300 	mov.w	r3, #0
 800f0d8:	f7f1 fdd6 	bl	8000c88 <__aeabi_uldivmod>
 800f0dc:	4602      	mov	r2, r0
 800f0de:	460b      	mov	r3, r1
 800f0e0:	4613      	mov	r3, r2
 800f0e2:	60fb      	str	r3, [r7, #12]
 800f0e4:	e04a      	b.n	800f17c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f0e6:	4b31      	ldr	r3, [pc, #196]	; (800f1ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800f0e8:	685b      	ldr	r3, [r3, #4]
 800f0ea:	099b      	lsrs	r3, r3, #6
 800f0ec:	461a      	mov	r2, r3
 800f0ee:	f04f 0300 	mov.w	r3, #0
 800f0f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800f0f6:	f04f 0100 	mov.w	r1, #0
 800f0fa:	ea02 0400 	and.w	r4, r2, r0
 800f0fe:	ea03 0501 	and.w	r5, r3, r1
 800f102:	4620      	mov	r0, r4
 800f104:	4629      	mov	r1, r5
 800f106:	f04f 0200 	mov.w	r2, #0
 800f10a:	f04f 0300 	mov.w	r3, #0
 800f10e:	014b      	lsls	r3, r1, #5
 800f110:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800f114:	0142      	lsls	r2, r0, #5
 800f116:	4610      	mov	r0, r2
 800f118:	4619      	mov	r1, r3
 800f11a:	1b00      	subs	r0, r0, r4
 800f11c:	eb61 0105 	sbc.w	r1, r1, r5
 800f120:	f04f 0200 	mov.w	r2, #0
 800f124:	f04f 0300 	mov.w	r3, #0
 800f128:	018b      	lsls	r3, r1, #6
 800f12a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800f12e:	0182      	lsls	r2, r0, #6
 800f130:	1a12      	subs	r2, r2, r0
 800f132:	eb63 0301 	sbc.w	r3, r3, r1
 800f136:	f04f 0000 	mov.w	r0, #0
 800f13a:	f04f 0100 	mov.w	r1, #0
 800f13e:	00d9      	lsls	r1, r3, #3
 800f140:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f144:	00d0      	lsls	r0, r2, #3
 800f146:	4602      	mov	r2, r0
 800f148:	460b      	mov	r3, r1
 800f14a:	1912      	adds	r2, r2, r4
 800f14c:	eb45 0303 	adc.w	r3, r5, r3
 800f150:	f04f 0000 	mov.w	r0, #0
 800f154:	f04f 0100 	mov.w	r1, #0
 800f158:	0299      	lsls	r1, r3, #10
 800f15a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800f15e:	0290      	lsls	r0, r2, #10
 800f160:	4602      	mov	r2, r0
 800f162:	460b      	mov	r3, r1
 800f164:	4610      	mov	r0, r2
 800f166:	4619      	mov	r1, r3
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	461a      	mov	r2, r3
 800f16c:	f04f 0300 	mov.w	r3, #0
 800f170:	f7f1 fd8a 	bl	8000c88 <__aeabi_uldivmod>
 800f174:	4602      	mov	r2, r0
 800f176:	460b      	mov	r3, r1
 800f178:	4613      	mov	r3, r2
 800f17a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800f17c:	4b0b      	ldr	r3, [pc, #44]	; (800f1ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800f17e:	685b      	ldr	r3, [r3, #4]
 800f180:	0c1b      	lsrs	r3, r3, #16
 800f182:	f003 0303 	and.w	r3, r3, #3
 800f186:	3301      	adds	r3, #1
 800f188:	005b      	lsls	r3, r3, #1
 800f18a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800f18c:	68fa      	ldr	r2, [r7, #12]
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	fbb2 f3f3 	udiv	r3, r2, r3
 800f194:	60bb      	str	r3, [r7, #8]
      break;
 800f196:	e002      	b.n	800f19e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f198:	4b05      	ldr	r3, [pc, #20]	; (800f1b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800f19a:	60bb      	str	r3, [r7, #8]
      break;
 800f19c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f19e:	68bb      	ldr	r3, [r7, #8]
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	3710      	adds	r7, #16
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800f1aa:	bf00      	nop
 800f1ac:	40023800 	.word	0x40023800
 800f1b0:	00f42400 	.word	0x00f42400
 800f1b4:	007a1200 	.word	0x007a1200

0800f1b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f1b8:	b480      	push	{r7}
 800f1ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f1bc:	4b03      	ldr	r3, [pc, #12]	; (800f1cc <HAL_RCC_GetHCLKFreq+0x14>)
 800f1be:	681b      	ldr	r3, [r3, #0]
}
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c8:	4770      	bx	lr
 800f1ca:	bf00      	nop
 800f1cc:	200001b8 	.word	0x200001b8

0800f1d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800f1d4:	f7ff fff0 	bl	800f1b8 <HAL_RCC_GetHCLKFreq>
 800f1d8:	4602      	mov	r2, r0
 800f1da:	4b05      	ldr	r3, [pc, #20]	; (800f1f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f1dc:	689b      	ldr	r3, [r3, #8]
 800f1de:	0a9b      	lsrs	r3, r3, #10
 800f1e0:	f003 0307 	and.w	r3, r3, #7
 800f1e4:	4903      	ldr	r1, [pc, #12]	; (800f1f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f1e6:	5ccb      	ldrb	r3, [r1, r3]
 800f1e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	bd80      	pop	{r7, pc}
 800f1f0:	40023800 	.word	0x40023800
 800f1f4:	0801b0e8 	.word	0x0801b0e8

0800f1f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800f1fc:	f7ff ffdc 	bl	800f1b8 <HAL_RCC_GetHCLKFreq>
 800f200:	4602      	mov	r2, r0
 800f202:	4b05      	ldr	r3, [pc, #20]	; (800f218 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f204:	689b      	ldr	r3, [r3, #8]
 800f206:	0b5b      	lsrs	r3, r3, #13
 800f208:	f003 0307 	and.w	r3, r3, #7
 800f20c:	4903      	ldr	r1, [pc, #12]	; (800f21c <HAL_RCC_GetPCLK2Freq+0x24>)
 800f20e:	5ccb      	ldrb	r3, [r1, r3]
 800f210:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f214:	4618      	mov	r0, r3
 800f216:	bd80      	pop	{r7, pc}
 800f218:	40023800 	.word	0x40023800
 800f21c:	0801b0e8 	.word	0x0801b0e8

0800f220 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800f220:	b480      	push	{r7}
 800f222:	b083      	sub	sp, #12
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
 800f228:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	220f      	movs	r2, #15
 800f22e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800f230:	4b12      	ldr	r3, [pc, #72]	; (800f27c <HAL_RCC_GetClockConfig+0x5c>)
 800f232:	689b      	ldr	r3, [r3, #8]
 800f234:	f003 0203 	and.w	r2, r3, #3
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800f23c:	4b0f      	ldr	r3, [pc, #60]	; (800f27c <HAL_RCC_GetClockConfig+0x5c>)
 800f23e:	689b      	ldr	r3, [r3, #8]
 800f240:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800f248:	4b0c      	ldr	r3, [pc, #48]	; (800f27c <HAL_RCC_GetClockConfig+0x5c>)
 800f24a:	689b      	ldr	r3, [r3, #8]
 800f24c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800f254:	4b09      	ldr	r3, [pc, #36]	; (800f27c <HAL_RCC_GetClockConfig+0x5c>)
 800f256:	689b      	ldr	r3, [r3, #8]
 800f258:	08db      	lsrs	r3, r3, #3
 800f25a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800f262:	4b07      	ldr	r3, [pc, #28]	; (800f280 <HAL_RCC_GetClockConfig+0x60>)
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	f003 020f 	and.w	r2, r3, #15
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	601a      	str	r2, [r3, #0]
}
 800f26e:	bf00      	nop
 800f270:	370c      	adds	r7, #12
 800f272:	46bd      	mov	sp, r7
 800f274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f278:	4770      	bx	lr
 800f27a:	bf00      	nop
 800f27c:	40023800 	.word	0x40023800
 800f280:	40023c00 	.word	0x40023c00

0800f284 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b082      	sub	sp, #8
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d101      	bne.n	800f296 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f292:	2301      	movs	r3, #1
 800f294:	e056      	b.n	800f344 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	2200      	movs	r2, #0
 800f29a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f2a2:	b2db      	uxtb	r3, r3
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d106      	bne.n	800f2b6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f7f3 f937 	bl	8002524 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	2202      	movs	r2, #2
 800f2ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	681a      	ldr	r2, [r3, #0]
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f2cc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	685a      	ldr	r2, [r3, #4]
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	689b      	ldr	r3, [r3, #8]
 800f2d6:	431a      	orrs	r2, r3
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	68db      	ldr	r3, [r3, #12]
 800f2dc:	431a      	orrs	r2, r3
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	691b      	ldr	r3, [r3, #16]
 800f2e2:	431a      	orrs	r2, r3
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	695b      	ldr	r3, [r3, #20]
 800f2e8:	431a      	orrs	r2, r3
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	699b      	ldr	r3, [r3, #24]
 800f2ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f2f2:	431a      	orrs	r2, r3
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	69db      	ldr	r3, [r3, #28]
 800f2f8:	431a      	orrs	r2, r3
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6a1b      	ldr	r3, [r3, #32]
 800f2fe:	ea42 0103 	orr.w	r1, r2, r3
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	430a      	orrs	r2, r1
 800f30c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	699b      	ldr	r3, [r3, #24]
 800f312:	0c1b      	lsrs	r3, r3, #16
 800f314:	f003 0104 	and.w	r1, r3, #4
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	430a      	orrs	r2, r1
 800f322:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	69da      	ldr	r2, [r3, #28]
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f332:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2200      	movs	r2, #0
 800f338:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	2201      	movs	r2, #1
 800f33e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800f342:	2300      	movs	r3, #0
}
 800f344:	4618      	mov	r0, r3
 800f346:	3708      	adds	r7, #8
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd80      	pop	{r7, pc}

0800f34c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b088      	sub	sp, #32
 800f350:	af00      	add	r7, sp, #0
 800f352:	60f8      	str	r0, [r7, #12]
 800f354:	60b9      	str	r1, [r7, #8]
 800f356:	603b      	str	r3, [r7, #0]
 800f358:	4613      	mov	r3, r2
 800f35a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f35c:	2300      	movs	r3, #0
 800f35e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f366:	2b01      	cmp	r3, #1
 800f368:	d101      	bne.n	800f36e <HAL_SPI_Transmit+0x22>
 800f36a:	2302      	movs	r3, #2
 800f36c:	e11e      	b.n	800f5ac <HAL_SPI_Transmit+0x260>
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	2201      	movs	r2, #1
 800f372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f376:	f7fb f8f5 	bl	800a564 <HAL_GetTick>
 800f37a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800f37c:	88fb      	ldrh	r3, [r7, #6]
 800f37e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f386:	b2db      	uxtb	r3, r3
 800f388:	2b01      	cmp	r3, #1
 800f38a:	d002      	beq.n	800f392 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800f38c:	2302      	movs	r3, #2
 800f38e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f390:	e103      	b.n	800f59a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d002      	beq.n	800f39e <HAL_SPI_Transmit+0x52>
 800f398:	88fb      	ldrh	r3, [r7, #6]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d102      	bne.n	800f3a4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800f39e:	2301      	movs	r3, #1
 800f3a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f3a2:	e0fa      	b.n	800f59a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	2203      	movs	r2, #3
 800f3a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	68ba      	ldr	r2, [r7, #8]
 800f3b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	88fa      	ldrh	r2, [r7, #6]
 800f3bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	88fa      	ldrh	r2, [r7, #6]
 800f3c2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	2200      	movs	r2, #0
 800f3da:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	2200      	movs	r2, #0
 800f3e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	689b      	ldr	r3, [r3, #8]
 800f3e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f3ea:	d107      	bne.n	800f3fc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	681a      	ldr	r2, [r3, #0]
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f3fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f406:	2b40      	cmp	r3, #64	; 0x40
 800f408:	d007      	beq.n	800f41a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	681a      	ldr	r2, [r3, #0]
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f418:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	68db      	ldr	r3, [r3, #12]
 800f41e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f422:	d14b      	bne.n	800f4bc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	685b      	ldr	r3, [r3, #4]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d002      	beq.n	800f432 <HAL_SPI_Transmit+0xe6>
 800f42c:	8afb      	ldrh	r3, [r7, #22]
 800f42e:	2b01      	cmp	r3, #1
 800f430:	d13e      	bne.n	800f4b0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f436:	881a      	ldrh	r2, [r3, #0]
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f442:	1c9a      	adds	r2, r3, #2
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f44c:	b29b      	uxth	r3, r3
 800f44e:	3b01      	subs	r3, #1
 800f450:	b29a      	uxth	r2, r3
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f456:	e02b      	b.n	800f4b0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	689b      	ldr	r3, [r3, #8]
 800f45e:	f003 0302 	and.w	r3, r3, #2
 800f462:	2b02      	cmp	r3, #2
 800f464:	d112      	bne.n	800f48c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f46a:	881a      	ldrh	r2, [r3, #0]
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f476:	1c9a      	adds	r2, r3, #2
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f480:	b29b      	uxth	r3, r3
 800f482:	3b01      	subs	r3, #1
 800f484:	b29a      	uxth	r2, r3
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	86da      	strh	r2, [r3, #54]	; 0x36
 800f48a:	e011      	b.n	800f4b0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f48c:	f7fb f86a 	bl	800a564 <HAL_GetTick>
 800f490:	4602      	mov	r2, r0
 800f492:	69bb      	ldr	r3, [r7, #24]
 800f494:	1ad3      	subs	r3, r2, r3
 800f496:	683a      	ldr	r2, [r7, #0]
 800f498:	429a      	cmp	r2, r3
 800f49a:	d803      	bhi.n	800f4a4 <HAL_SPI_Transmit+0x158>
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f4a2:	d102      	bne.n	800f4aa <HAL_SPI_Transmit+0x15e>
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d102      	bne.n	800f4b0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800f4aa:	2303      	movs	r3, #3
 800f4ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f4ae:	e074      	b.n	800f59a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f4b4:	b29b      	uxth	r3, r3
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d1ce      	bne.n	800f458 <HAL_SPI_Transmit+0x10c>
 800f4ba:	e04c      	b.n	800f556 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	685b      	ldr	r3, [r3, #4]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d002      	beq.n	800f4ca <HAL_SPI_Transmit+0x17e>
 800f4c4:	8afb      	ldrh	r3, [r7, #22]
 800f4c6:	2b01      	cmp	r3, #1
 800f4c8:	d140      	bne.n	800f54c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	330c      	adds	r3, #12
 800f4d4:	7812      	ldrb	r2, [r2, #0]
 800f4d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4dc:	1c5a      	adds	r2, r3, #1
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f4e6:	b29b      	uxth	r3, r3
 800f4e8:	3b01      	subs	r3, #1
 800f4ea:	b29a      	uxth	r2, r3
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800f4f0:	e02c      	b.n	800f54c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	689b      	ldr	r3, [r3, #8]
 800f4f8:	f003 0302 	and.w	r3, r3, #2
 800f4fc:	2b02      	cmp	r3, #2
 800f4fe:	d113      	bne.n	800f528 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	330c      	adds	r3, #12
 800f50a:	7812      	ldrb	r2, [r2, #0]
 800f50c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f512:	1c5a      	adds	r2, r3, #1
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f51c:	b29b      	uxth	r3, r3
 800f51e:	3b01      	subs	r3, #1
 800f520:	b29a      	uxth	r2, r3
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	86da      	strh	r2, [r3, #54]	; 0x36
 800f526:	e011      	b.n	800f54c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f528:	f7fb f81c 	bl	800a564 <HAL_GetTick>
 800f52c:	4602      	mov	r2, r0
 800f52e:	69bb      	ldr	r3, [r7, #24]
 800f530:	1ad3      	subs	r3, r2, r3
 800f532:	683a      	ldr	r2, [r7, #0]
 800f534:	429a      	cmp	r2, r3
 800f536:	d803      	bhi.n	800f540 <HAL_SPI_Transmit+0x1f4>
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f53e:	d102      	bne.n	800f546 <HAL_SPI_Transmit+0x1fa>
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d102      	bne.n	800f54c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800f546:	2303      	movs	r3, #3
 800f548:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f54a:	e026      	b.n	800f59a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f550:	b29b      	uxth	r3, r3
 800f552:	2b00      	cmp	r3, #0
 800f554:	d1cd      	bne.n	800f4f2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f556:	69ba      	ldr	r2, [r7, #24]
 800f558:	6839      	ldr	r1, [r7, #0]
 800f55a:	68f8      	ldr	r0, [r7, #12]
 800f55c:	f000 f9b2 	bl	800f8c4 <SPI_EndRxTxTransaction>
 800f560:	4603      	mov	r3, r0
 800f562:	2b00      	cmp	r3, #0
 800f564:	d002      	beq.n	800f56c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	2220      	movs	r2, #32
 800f56a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	689b      	ldr	r3, [r3, #8]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d10a      	bne.n	800f58a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f574:	2300      	movs	r3, #0
 800f576:	613b      	str	r3, [r7, #16]
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	68db      	ldr	r3, [r3, #12]
 800f57e:	613b      	str	r3, [r7, #16]
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	689b      	ldr	r3, [r3, #8]
 800f586:	613b      	str	r3, [r7, #16]
 800f588:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d002      	beq.n	800f598 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800f592:	2301      	movs	r3, #1
 800f594:	77fb      	strb	r3, [r7, #31]
 800f596:	e000      	b.n	800f59a <HAL_SPI_Transmit+0x24e>
  }

error:
 800f598:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	2201      	movs	r2, #1
 800f59e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f5aa:	7ffb      	ldrb	r3, [r7, #31]
}
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	3720      	adds	r7, #32
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd80      	pop	{r7, pc}

0800f5b4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b088      	sub	sp, #32
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	685b      	ldr	r3, [r3, #4]
 800f5c2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	689b      	ldr	r3, [r3, #8]
 800f5ca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f5cc:	69bb      	ldr	r3, [r7, #24]
 800f5ce:	099b      	lsrs	r3, r3, #6
 800f5d0:	f003 0301 	and.w	r3, r3, #1
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d10f      	bne.n	800f5f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f5d8:	69bb      	ldr	r3, [r7, #24]
 800f5da:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d00a      	beq.n	800f5f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f5e2:	69fb      	ldr	r3, [r7, #28]
 800f5e4:	099b      	lsrs	r3, r3, #6
 800f5e6:	f003 0301 	and.w	r3, r3, #1
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d004      	beq.n	800f5f8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	4798      	blx	r3
    return;
 800f5f6:	e0d7      	b.n	800f7a8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800f5f8:	69bb      	ldr	r3, [r7, #24]
 800f5fa:	085b      	lsrs	r3, r3, #1
 800f5fc:	f003 0301 	and.w	r3, r3, #1
 800f600:	2b00      	cmp	r3, #0
 800f602:	d00a      	beq.n	800f61a <HAL_SPI_IRQHandler+0x66>
 800f604:	69fb      	ldr	r3, [r7, #28]
 800f606:	09db      	lsrs	r3, r3, #7
 800f608:	f003 0301 	and.w	r3, r3, #1
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d004      	beq.n	800f61a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	4798      	blx	r3
    return;
 800f618:	e0c6      	b.n	800f7a8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f61a:	69bb      	ldr	r3, [r7, #24]
 800f61c:	095b      	lsrs	r3, r3, #5
 800f61e:	f003 0301 	and.w	r3, r3, #1
 800f622:	2b00      	cmp	r3, #0
 800f624:	d10c      	bne.n	800f640 <HAL_SPI_IRQHandler+0x8c>
 800f626:	69bb      	ldr	r3, [r7, #24]
 800f628:	099b      	lsrs	r3, r3, #6
 800f62a:	f003 0301 	and.w	r3, r3, #1
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d106      	bne.n	800f640 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800f632:	69bb      	ldr	r3, [r7, #24]
 800f634:	0a1b      	lsrs	r3, r3, #8
 800f636:	f003 0301 	and.w	r3, r3, #1
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	f000 80b4 	beq.w	800f7a8 <HAL_SPI_IRQHandler+0x1f4>
 800f640:	69fb      	ldr	r3, [r7, #28]
 800f642:	095b      	lsrs	r3, r3, #5
 800f644:	f003 0301 	and.w	r3, r3, #1
 800f648:	2b00      	cmp	r3, #0
 800f64a:	f000 80ad 	beq.w	800f7a8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f64e:	69bb      	ldr	r3, [r7, #24]
 800f650:	099b      	lsrs	r3, r3, #6
 800f652:	f003 0301 	and.w	r3, r3, #1
 800f656:	2b00      	cmp	r3, #0
 800f658:	d023      	beq.n	800f6a2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f660:	b2db      	uxtb	r3, r3
 800f662:	2b03      	cmp	r3, #3
 800f664:	d011      	beq.n	800f68a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f66a:	f043 0204 	orr.w	r2, r3, #4
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f672:	2300      	movs	r3, #0
 800f674:	617b      	str	r3, [r7, #20]
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	68db      	ldr	r3, [r3, #12]
 800f67c:	617b      	str	r3, [r7, #20]
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	689b      	ldr	r3, [r3, #8]
 800f684:	617b      	str	r3, [r7, #20]
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	e00b      	b.n	800f6a2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f68a:	2300      	movs	r3, #0
 800f68c:	613b      	str	r3, [r7, #16]
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	68db      	ldr	r3, [r3, #12]
 800f694:	613b      	str	r3, [r7, #16]
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	689b      	ldr	r3, [r3, #8]
 800f69c:	613b      	str	r3, [r7, #16]
 800f69e:	693b      	ldr	r3, [r7, #16]
        return;
 800f6a0:	e082      	b.n	800f7a8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800f6a2:	69bb      	ldr	r3, [r7, #24]
 800f6a4:	095b      	lsrs	r3, r3, #5
 800f6a6:	f003 0301 	and.w	r3, r3, #1
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d014      	beq.n	800f6d8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6b2:	f043 0201 	orr.w	r2, r3, #1
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	60fb      	str	r3, [r7, #12]
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	689b      	ldr	r3, [r3, #8]
 800f6c4:	60fb      	str	r3, [r7, #12]
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	681a      	ldr	r2, [r3, #0]
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f6d4:	601a      	str	r2, [r3, #0]
 800f6d6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800f6d8:	69bb      	ldr	r3, [r7, #24]
 800f6da:	0a1b      	lsrs	r3, r3, #8
 800f6dc:	f003 0301 	and.w	r3, r3, #1
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d00c      	beq.n	800f6fe <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6e8:	f043 0208 	orr.w	r2, r3, #8
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	60bb      	str	r3, [r7, #8]
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	689b      	ldr	r3, [r3, #8]
 800f6fa:	60bb      	str	r3, [r7, #8]
 800f6fc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f702:	2b00      	cmp	r3, #0
 800f704:	d04f      	beq.n	800f7a6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	685a      	ldr	r2, [r3, #4]
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f714:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	2201      	movs	r2, #1
 800f71a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800f71e:	69fb      	ldr	r3, [r7, #28]
 800f720:	f003 0302 	and.w	r3, r3, #2
 800f724:	2b00      	cmp	r3, #0
 800f726:	d104      	bne.n	800f732 <HAL_SPI_IRQHandler+0x17e>
 800f728:	69fb      	ldr	r3, [r7, #28]
 800f72a:	f003 0301 	and.w	r3, r3, #1
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d034      	beq.n	800f79c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	685a      	ldr	r2, [r3, #4]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	f022 0203 	bic.w	r2, r2, #3
 800f740:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f746:	2b00      	cmp	r3, #0
 800f748:	d011      	beq.n	800f76e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f74e:	4a18      	ldr	r2, [pc, #96]	; (800f7b0 <HAL_SPI_IRQHandler+0x1fc>)
 800f750:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f756:	4618      	mov	r0, r3
 800f758:	f7fc f866 	bl	800b828 <HAL_DMA_Abort_IT>
 800f75c:	4603      	mov	r3, r0
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d005      	beq.n	800f76e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f766:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f772:	2b00      	cmp	r3, #0
 800f774:	d016      	beq.n	800f7a4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f77a:	4a0d      	ldr	r2, [pc, #52]	; (800f7b0 <HAL_SPI_IRQHandler+0x1fc>)
 800f77c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f782:	4618      	mov	r0, r3
 800f784:	f7fc f850 	bl	800b828 <HAL_DMA_Abort_IT>
 800f788:	4603      	mov	r3, r0
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d00a      	beq.n	800f7a4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f792:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800f79a:	e003      	b.n	800f7a4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	f000 f809 	bl	800f7b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800f7a2:	e000      	b.n	800f7a6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800f7a4:	bf00      	nop
    return;
 800f7a6:	bf00      	nop
  }
}
 800f7a8:	3720      	adds	r7, #32
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}
 800f7ae:	bf00      	nop
 800f7b0:	0800f7c9 	.word	0x0800f7c9

0800f7b4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800f7b4:	b480      	push	{r7}
 800f7b6:	b083      	sub	sp, #12
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800f7bc:	bf00      	nop
 800f7be:	370c      	adds	r7, #12
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c6:	4770      	bx	lr

0800f7c8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b084      	sub	sp, #16
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7d4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	2200      	movs	r2, #0
 800f7da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	2200      	movs	r2, #0
 800f7e0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f7e2:	68f8      	ldr	r0, [r7, #12]
 800f7e4:	f7ff ffe6 	bl	800f7b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f7e8:	bf00      	nop
 800f7ea:	3710      	adds	r7, #16
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	bd80      	pop	{r7, pc}

0800f7f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b084      	sub	sp, #16
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	60f8      	str	r0, [r7, #12]
 800f7f8:	60b9      	str	r1, [r7, #8]
 800f7fa:	603b      	str	r3, [r7, #0]
 800f7fc:	4613      	mov	r3, r2
 800f7fe:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f800:	e04c      	b.n	800f89c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f808:	d048      	beq.n	800f89c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800f80a:	f7fa feab 	bl	800a564 <HAL_GetTick>
 800f80e:	4602      	mov	r2, r0
 800f810:	69bb      	ldr	r3, [r7, #24]
 800f812:	1ad3      	subs	r3, r2, r3
 800f814:	683a      	ldr	r2, [r7, #0]
 800f816:	429a      	cmp	r2, r3
 800f818:	d902      	bls.n	800f820 <SPI_WaitFlagStateUntilTimeout+0x30>
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d13d      	bne.n	800f89c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	685a      	ldr	r2, [r3, #4]
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f82e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	685b      	ldr	r3, [r3, #4]
 800f834:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f838:	d111      	bne.n	800f85e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	689b      	ldr	r3, [r3, #8]
 800f83e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f842:	d004      	beq.n	800f84e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	689b      	ldr	r3, [r3, #8]
 800f848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f84c:	d107      	bne.n	800f85e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	681a      	ldr	r2, [r3, #0]
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f85c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f866:	d10f      	bne.n	800f888 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	681a      	ldr	r2, [r3, #0]
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f876:	601a      	str	r2, [r3, #0]
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	681a      	ldr	r2, [r3, #0]
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f886:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	2201      	movs	r2, #1
 800f88c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	2200      	movs	r2, #0
 800f894:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800f898:	2303      	movs	r3, #3
 800f89a:	e00f      	b.n	800f8bc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	689a      	ldr	r2, [r3, #8]
 800f8a2:	68bb      	ldr	r3, [r7, #8]
 800f8a4:	4013      	ands	r3, r2
 800f8a6:	68ba      	ldr	r2, [r7, #8]
 800f8a8:	429a      	cmp	r2, r3
 800f8aa:	bf0c      	ite	eq
 800f8ac:	2301      	moveq	r3, #1
 800f8ae:	2300      	movne	r3, #0
 800f8b0:	b2db      	uxtb	r3, r3
 800f8b2:	461a      	mov	r2, r3
 800f8b4:	79fb      	ldrb	r3, [r7, #7]
 800f8b6:	429a      	cmp	r2, r3
 800f8b8:	d1a3      	bne.n	800f802 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800f8ba:	2300      	movs	r3, #0
}
 800f8bc:	4618      	mov	r0, r3
 800f8be:	3710      	adds	r7, #16
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}

0800f8c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b088      	sub	sp, #32
 800f8c8:	af02      	add	r7, sp, #8
 800f8ca:	60f8      	str	r0, [r7, #12]
 800f8cc:	60b9      	str	r1, [r7, #8]
 800f8ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f8d0:	4b1b      	ldr	r3, [pc, #108]	; (800f940 <SPI_EndRxTxTransaction+0x7c>)
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	4a1b      	ldr	r2, [pc, #108]	; (800f944 <SPI_EndRxTxTransaction+0x80>)
 800f8d6:	fba2 2303 	umull	r2, r3, r2, r3
 800f8da:	0d5b      	lsrs	r3, r3, #21
 800f8dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f8e0:	fb02 f303 	mul.w	r3, r2, r3
 800f8e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	685b      	ldr	r3, [r3, #4]
 800f8ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f8ee:	d112      	bne.n	800f916 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	9300      	str	r3, [sp, #0]
 800f8f4:	68bb      	ldr	r3, [r7, #8]
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	2180      	movs	r1, #128	; 0x80
 800f8fa:	68f8      	ldr	r0, [r7, #12]
 800f8fc:	f7ff ff78 	bl	800f7f0 <SPI_WaitFlagStateUntilTimeout>
 800f900:	4603      	mov	r3, r0
 800f902:	2b00      	cmp	r3, #0
 800f904:	d016      	beq.n	800f934 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f90a:	f043 0220 	orr.w	r2, r3, #32
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f912:	2303      	movs	r3, #3
 800f914:	e00f      	b.n	800f936 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d00a      	beq.n	800f932 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f91c:	697b      	ldr	r3, [r7, #20]
 800f91e:	3b01      	subs	r3, #1
 800f920:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	689b      	ldr	r3, [r3, #8]
 800f928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f92c:	2b80      	cmp	r3, #128	; 0x80
 800f92e:	d0f2      	beq.n	800f916 <SPI_EndRxTxTransaction+0x52>
 800f930:	e000      	b.n	800f934 <SPI_EndRxTxTransaction+0x70>
        break;
 800f932:	bf00      	nop
  }

  return HAL_OK;
 800f934:	2300      	movs	r3, #0
}
 800f936:	4618      	mov	r0, r3
 800f938:	3718      	adds	r7, #24
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}
 800f93e:	bf00      	nop
 800f940:	200001b8 	.word	0x200001b8
 800f944:	165e9f81 	.word	0x165e9f81

0800f948 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b082      	sub	sp, #8
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d101      	bne.n	800f95a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f956:	2301      	movs	r3, #1
 800f958:	e01d      	b.n	800f996 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f960:	b2db      	uxtb	r3, r3
 800f962:	2b00      	cmp	r3, #0
 800f964:	d106      	bne.n	800f974 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	2200      	movs	r2, #0
 800f96a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f96e:	6878      	ldr	r0, [r7, #4]
 800f970:	f7f2 fb24 	bl	8001fbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	2202      	movs	r2, #2
 800f978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681a      	ldr	r2, [r3, #0]
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	3304      	adds	r3, #4
 800f984:	4619      	mov	r1, r3
 800f986:	4610      	mov	r0, r2
 800f988:	f000 fb74 	bl	8010074 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2201      	movs	r2, #1
 800f990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f994:	2300      	movs	r3, #0
}
 800f996:	4618      	mov	r0, r3
 800f998:	3708      	adds	r7, #8
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bd80      	pop	{r7, pc}

0800f99e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f99e:	b480      	push	{r7}
 800f9a0:	b085      	sub	sp, #20
 800f9a2:	af00      	add	r7, sp, #0
 800f9a4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	2202      	movs	r2, #2
 800f9aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	689b      	ldr	r3, [r3, #8]
 800f9b4:	f003 0307 	and.w	r3, r3, #7
 800f9b8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	2b06      	cmp	r3, #6
 800f9be:	d007      	beq.n	800f9d0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	681a      	ldr	r2, [r3, #0]
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	f042 0201 	orr.w	r2, r2, #1
 800f9ce:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2201      	movs	r2, #1
 800f9d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800f9d8:	2300      	movs	r3, #0
}
 800f9da:	4618      	mov	r0, r3
 800f9dc:	3714      	adds	r7, #20
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e4:	4770      	bx	lr

0800f9e6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f9e6:	b480      	push	{r7}
 800f9e8:	b085      	sub	sp, #20
 800f9ea:	af00      	add	r7, sp, #0
 800f9ec:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	68da      	ldr	r2, [r3, #12]
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	f042 0201 	orr.w	r2, r2, #1
 800f9fc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	689b      	ldr	r3, [r3, #8]
 800fa04:	f003 0307 	and.w	r3, r3, #7
 800fa08:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	2b06      	cmp	r3, #6
 800fa0e:	d007      	beq.n	800fa20 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	681a      	ldr	r2, [r3, #0]
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	f042 0201 	orr.w	r2, r2, #1
 800fa1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fa20:	2300      	movs	r3, #0
}
 800fa22:	4618      	mov	r0, r3
 800fa24:	3714      	adds	r7, #20
 800fa26:	46bd      	mov	sp, r7
 800fa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2c:	4770      	bx	lr

0800fa2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fa2e:	b580      	push	{r7, lr}
 800fa30:	b082      	sub	sp, #8
 800fa32:	af00      	add	r7, sp, #0
 800fa34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d101      	bne.n	800fa40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fa3c:	2301      	movs	r3, #1
 800fa3e:	e01d      	b.n	800fa7c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fa46:	b2db      	uxtb	r3, r3
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d106      	bne.n	800fa5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2200      	movs	r2, #0
 800fa50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fa54:	6878      	ldr	r0, [r7, #4]
 800fa56:	f7f2 f973 	bl	8001d40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2202      	movs	r2, #2
 800fa5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681a      	ldr	r2, [r3, #0]
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	3304      	adds	r3, #4
 800fa6a:	4619      	mov	r1, r3
 800fa6c:	4610      	mov	r0, r2
 800fa6e:	f000 fb01 	bl	8010074 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	2201      	movs	r2, #1
 800fa76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fa7a:	2300      	movs	r3, #0
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	3708      	adds	r7, #8
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}

0800fa84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b084      	sub	sp, #16
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
 800fa8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	2201      	movs	r2, #1
 800fa94:	6839      	ldr	r1, [r7, #0]
 800fa96:	4618      	mov	r0, r3
 800fa98:	f000 fdd6 	bl	8010648 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	4a15      	ldr	r2, [pc, #84]	; (800faf8 <HAL_TIM_PWM_Start+0x74>)
 800faa2:	4293      	cmp	r3, r2
 800faa4:	d004      	beq.n	800fab0 <HAL_TIM_PWM_Start+0x2c>
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	4a14      	ldr	r2, [pc, #80]	; (800fafc <HAL_TIM_PWM_Start+0x78>)
 800faac:	4293      	cmp	r3, r2
 800faae:	d101      	bne.n	800fab4 <HAL_TIM_PWM_Start+0x30>
 800fab0:	2301      	movs	r3, #1
 800fab2:	e000      	b.n	800fab6 <HAL_TIM_PWM_Start+0x32>
 800fab4:	2300      	movs	r3, #0
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d007      	beq.n	800faca <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fac8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	689b      	ldr	r3, [r3, #8]
 800fad0:	f003 0307 	and.w	r3, r3, #7
 800fad4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	2b06      	cmp	r3, #6
 800fada:	d007      	beq.n	800faec <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	681a      	ldr	r2, [r3, #0]
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	f042 0201 	orr.w	r2, r2, #1
 800faea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800faec:	2300      	movs	r3, #0
}
 800faee:	4618      	mov	r0, r3
 800faf0:	3710      	adds	r7, #16
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}
 800faf6:	bf00      	nop
 800faf8:	40010000 	.word	0x40010000
 800fafc:	40010400 	.word	0x40010400

0800fb00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b082      	sub	sp, #8
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	691b      	ldr	r3, [r3, #16]
 800fb0e:	f003 0302 	and.w	r3, r3, #2
 800fb12:	2b02      	cmp	r3, #2
 800fb14:	d122      	bne.n	800fb5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	68db      	ldr	r3, [r3, #12]
 800fb1c:	f003 0302 	and.w	r3, r3, #2
 800fb20:	2b02      	cmp	r3, #2
 800fb22:	d11b      	bne.n	800fb5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	f06f 0202 	mvn.w	r2, #2
 800fb2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	2201      	movs	r2, #1
 800fb32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	699b      	ldr	r3, [r3, #24]
 800fb3a:	f003 0303 	and.w	r3, r3, #3
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d003      	beq.n	800fb4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	f000 fa78 	bl	8010038 <HAL_TIM_IC_CaptureCallback>
 800fb48:	e005      	b.n	800fb56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f000 fa6a 	bl	8010024 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f000 fa7b 	bl	801004c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	2200      	movs	r2, #0
 800fb5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	691b      	ldr	r3, [r3, #16]
 800fb62:	f003 0304 	and.w	r3, r3, #4
 800fb66:	2b04      	cmp	r3, #4
 800fb68:	d122      	bne.n	800fbb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	68db      	ldr	r3, [r3, #12]
 800fb70:	f003 0304 	and.w	r3, r3, #4
 800fb74:	2b04      	cmp	r3, #4
 800fb76:	d11b      	bne.n	800fbb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	f06f 0204 	mvn.w	r2, #4
 800fb80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	2202      	movs	r2, #2
 800fb86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	699b      	ldr	r3, [r3, #24]
 800fb8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d003      	beq.n	800fb9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fb96:	6878      	ldr	r0, [r7, #4]
 800fb98:	f000 fa4e 	bl	8010038 <HAL_TIM_IC_CaptureCallback>
 800fb9c:	e005      	b.n	800fbaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f000 fa40 	bl	8010024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fba4:	6878      	ldr	r0, [r7, #4]
 800fba6:	f000 fa51 	bl	801004c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	2200      	movs	r2, #0
 800fbae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	691b      	ldr	r3, [r3, #16]
 800fbb6:	f003 0308 	and.w	r3, r3, #8
 800fbba:	2b08      	cmp	r3, #8
 800fbbc:	d122      	bne.n	800fc04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	68db      	ldr	r3, [r3, #12]
 800fbc4:	f003 0308 	and.w	r3, r3, #8
 800fbc8:	2b08      	cmp	r3, #8
 800fbca:	d11b      	bne.n	800fc04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	f06f 0208 	mvn.w	r2, #8
 800fbd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	2204      	movs	r2, #4
 800fbda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	69db      	ldr	r3, [r3, #28]
 800fbe2:	f003 0303 	and.w	r3, r3, #3
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d003      	beq.n	800fbf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fbea:	6878      	ldr	r0, [r7, #4]
 800fbec:	f000 fa24 	bl	8010038 <HAL_TIM_IC_CaptureCallback>
 800fbf0:	e005      	b.n	800fbfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f000 fa16 	bl	8010024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fbf8:	6878      	ldr	r0, [r7, #4]
 800fbfa:	f000 fa27 	bl	801004c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	2200      	movs	r2, #0
 800fc02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	691b      	ldr	r3, [r3, #16]
 800fc0a:	f003 0310 	and.w	r3, r3, #16
 800fc0e:	2b10      	cmp	r3, #16
 800fc10:	d122      	bne.n	800fc58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	68db      	ldr	r3, [r3, #12]
 800fc18:	f003 0310 	and.w	r3, r3, #16
 800fc1c:	2b10      	cmp	r3, #16
 800fc1e:	d11b      	bne.n	800fc58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	f06f 0210 	mvn.w	r2, #16
 800fc28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2208      	movs	r2, #8
 800fc2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	69db      	ldr	r3, [r3, #28]
 800fc36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d003      	beq.n	800fc46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fc3e:	6878      	ldr	r0, [r7, #4]
 800fc40:	f000 f9fa 	bl	8010038 <HAL_TIM_IC_CaptureCallback>
 800fc44:	e005      	b.n	800fc52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	f000 f9ec 	bl	8010024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc4c:	6878      	ldr	r0, [r7, #4]
 800fc4e:	f000 f9fd 	bl	801004c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2200      	movs	r2, #0
 800fc56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	691b      	ldr	r3, [r3, #16]
 800fc5e:	f003 0301 	and.w	r3, r3, #1
 800fc62:	2b01      	cmp	r3, #1
 800fc64:	d10e      	bne.n	800fc84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	68db      	ldr	r3, [r3, #12]
 800fc6c:	f003 0301 	and.w	r3, r3, #1
 800fc70:	2b01      	cmp	r3, #1
 800fc72:	d107      	bne.n	800fc84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	f06f 0201 	mvn.w	r2, #1
 800fc7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fc7e:	6878      	ldr	r0, [r7, #4]
 800fc80:	f7f7 f960 	bl	8006f44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	691b      	ldr	r3, [r3, #16]
 800fc8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc8e:	2b80      	cmp	r3, #128	; 0x80
 800fc90:	d10e      	bne.n	800fcb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	68db      	ldr	r3, [r3, #12]
 800fc98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc9c:	2b80      	cmp	r3, #128	; 0x80
 800fc9e:	d107      	bne.n	800fcb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fcaa:	6878      	ldr	r0, [r7, #4]
 800fcac:	f000 fd78 	bl	80107a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	691b      	ldr	r3, [r3, #16]
 800fcb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fcba:	2b40      	cmp	r3, #64	; 0x40
 800fcbc:	d10e      	bne.n	800fcdc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	68db      	ldr	r3, [r3, #12]
 800fcc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fcc8:	2b40      	cmp	r3, #64	; 0x40
 800fcca:	d107      	bne.n	800fcdc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fcd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fcd6:	6878      	ldr	r0, [r7, #4]
 800fcd8:	f000 f9c2 	bl	8010060 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	691b      	ldr	r3, [r3, #16]
 800fce2:	f003 0320 	and.w	r3, r3, #32
 800fce6:	2b20      	cmp	r3, #32
 800fce8:	d10e      	bne.n	800fd08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	68db      	ldr	r3, [r3, #12]
 800fcf0:	f003 0320 	and.w	r3, r3, #32
 800fcf4:	2b20      	cmp	r3, #32
 800fcf6:	d107      	bne.n	800fd08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	f06f 0220 	mvn.w	r2, #32
 800fd00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	f000 fd42 	bl	801078c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fd08:	bf00      	nop
 800fd0a:	3708      	adds	r7, #8
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	bd80      	pop	{r7, pc}

0800fd10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b084      	sub	sp, #16
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	60f8      	str	r0, [r7, #12]
 800fd18:	60b9      	str	r1, [r7, #8]
 800fd1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd22:	2b01      	cmp	r3, #1
 800fd24:	d101      	bne.n	800fd2a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800fd26:	2302      	movs	r3, #2
 800fd28:	e0b4      	b.n	800fe94 <HAL_TIM_PWM_ConfigChannel+0x184>
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	2201      	movs	r2, #1
 800fd2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	2202      	movs	r2, #2
 800fd36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2b0c      	cmp	r3, #12
 800fd3e:	f200 809f 	bhi.w	800fe80 <HAL_TIM_PWM_ConfigChannel+0x170>
 800fd42:	a201      	add	r2, pc, #4	; (adr r2, 800fd48 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800fd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd48:	0800fd7d 	.word	0x0800fd7d
 800fd4c:	0800fe81 	.word	0x0800fe81
 800fd50:	0800fe81 	.word	0x0800fe81
 800fd54:	0800fe81 	.word	0x0800fe81
 800fd58:	0800fdbd 	.word	0x0800fdbd
 800fd5c:	0800fe81 	.word	0x0800fe81
 800fd60:	0800fe81 	.word	0x0800fe81
 800fd64:	0800fe81 	.word	0x0800fe81
 800fd68:	0800fdff 	.word	0x0800fdff
 800fd6c:	0800fe81 	.word	0x0800fe81
 800fd70:	0800fe81 	.word	0x0800fe81
 800fd74:	0800fe81 	.word	0x0800fe81
 800fd78:	0800fe3f 	.word	0x0800fe3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	68b9      	ldr	r1, [r7, #8]
 800fd82:	4618      	mov	r0, r3
 800fd84:	f000 fa16 	bl	80101b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	699a      	ldr	r2, [r3, #24]
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	f042 0208 	orr.w	r2, r2, #8
 800fd96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	699a      	ldr	r2, [r3, #24]
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	f022 0204 	bic.w	r2, r2, #4
 800fda6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	6999      	ldr	r1, [r3, #24]
 800fdae:	68bb      	ldr	r3, [r7, #8]
 800fdb0:	691a      	ldr	r2, [r3, #16]
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	430a      	orrs	r2, r1
 800fdb8:	619a      	str	r2, [r3, #24]
      break;
 800fdba:	e062      	b.n	800fe82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	68b9      	ldr	r1, [r7, #8]
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f000 fa66 	bl	8010294 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	699a      	ldr	r2, [r3, #24]
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fdd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	699a      	ldr	r2, [r3, #24]
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fde6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	6999      	ldr	r1, [r3, #24]
 800fdee:	68bb      	ldr	r3, [r7, #8]
 800fdf0:	691b      	ldr	r3, [r3, #16]
 800fdf2:	021a      	lsls	r2, r3, #8
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	430a      	orrs	r2, r1
 800fdfa:	619a      	str	r2, [r3, #24]
      break;
 800fdfc:	e041      	b.n	800fe82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	68b9      	ldr	r1, [r7, #8]
 800fe04:	4618      	mov	r0, r3
 800fe06:	f000 fabb 	bl	8010380 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	69da      	ldr	r2, [r3, #28]
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	f042 0208 	orr.w	r2, r2, #8
 800fe18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	69da      	ldr	r2, [r3, #28]
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	f022 0204 	bic.w	r2, r2, #4
 800fe28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	69d9      	ldr	r1, [r3, #28]
 800fe30:	68bb      	ldr	r3, [r7, #8]
 800fe32:	691a      	ldr	r2, [r3, #16]
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	430a      	orrs	r2, r1
 800fe3a:	61da      	str	r2, [r3, #28]
      break;
 800fe3c:	e021      	b.n	800fe82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	68b9      	ldr	r1, [r7, #8]
 800fe44:	4618      	mov	r0, r3
 800fe46:	f000 fb0f 	bl	8010468 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	69da      	ldr	r2, [r3, #28]
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fe58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	69da      	ldr	r2, [r3, #28]
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fe68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	69d9      	ldr	r1, [r3, #28]
 800fe70:	68bb      	ldr	r3, [r7, #8]
 800fe72:	691b      	ldr	r3, [r3, #16]
 800fe74:	021a      	lsls	r2, r3, #8
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	430a      	orrs	r2, r1
 800fe7c:	61da      	str	r2, [r3, #28]
      break;
 800fe7e:	e000      	b.n	800fe82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800fe80:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	2201      	movs	r2, #1
 800fe86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fe92:	2300      	movs	r3, #0
}
 800fe94:	4618      	mov	r0, r3
 800fe96:	3710      	adds	r7, #16
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}

0800fe9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b084      	sub	sp, #16
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
 800fea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800feac:	2b01      	cmp	r3, #1
 800feae:	d101      	bne.n	800feb4 <HAL_TIM_ConfigClockSource+0x18>
 800feb0:	2302      	movs	r3, #2
 800feb2:	e0b3      	b.n	801001c <HAL_TIM_ConfigClockSource+0x180>
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2201      	movs	r2, #1
 800feb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	2202      	movs	r2, #2
 800fec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	689b      	ldr	r3, [r3, #8]
 800feca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800fed2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800feda:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	68fa      	ldr	r2, [r7, #12]
 800fee2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fee4:	683b      	ldr	r3, [r7, #0]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800feec:	d03e      	beq.n	800ff6c <HAL_TIM_ConfigClockSource+0xd0>
 800feee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fef2:	f200 8087 	bhi.w	8010004 <HAL_TIM_ConfigClockSource+0x168>
 800fef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fefa:	f000 8085 	beq.w	8010008 <HAL_TIM_ConfigClockSource+0x16c>
 800fefe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ff02:	d87f      	bhi.n	8010004 <HAL_TIM_ConfigClockSource+0x168>
 800ff04:	2b70      	cmp	r3, #112	; 0x70
 800ff06:	d01a      	beq.n	800ff3e <HAL_TIM_ConfigClockSource+0xa2>
 800ff08:	2b70      	cmp	r3, #112	; 0x70
 800ff0a:	d87b      	bhi.n	8010004 <HAL_TIM_ConfigClockSource+0x168>
 800ff0c:	2b60      	cmp	r3, #96	; 0x60
 800ff0e:	d050      	beq.n	800ffb2 <HAL_TIM_ConfigClockSource+0x116>
 800ff10:	2b60      	cmp	r3, #96	; 0x60
 800ff12:	d877      	bhi.n	8010004 <HAL_TIM_ConfigClockSource+0x168>
 800ff14:	2b50      	cmp	r3, #80	; 0x50
 800ff16:	d03c      	beq.n	800ff92 <HAL_TIM_ConfigClockSource+0xf6>
 800ff18:	2b50      	cmp	r3, #80	; 0x50
 800ff1a:	d873      	bhi.n	8010004 <HAL_TIM_ConfigClockSource+0x168>
 800ff1c:	2b40      	cmp	r3, #64	; 0x40
 800ff1e:	d058      	beq.n	800ffd2 <HAL_TIM_ConfigClockSource+0x136>
 800ff20:	2b40      	cmp	r3, #64	; 0x40
 800ff22:	d86f      	bhi.n	8010004 <HAL_TIM_ConfigClockSource+0x168>
 800ff24:	2b30      	cmp	r3, #48	; 0x30
 800ff26:	d064      	beq.n	800fff2 <HAL_TIM_ConfigClockSource+0x156>
 800ff28:	2b30      	cmp	r3, #48	; 0x30
 800ff2a:	d86b      	bhi.n	8010004 <HAL_TIM_ConfigClockSource+0x168>
 800ff2c:	2b20      	cmp	r3, #32
 800ff2e:	d060      	beq.n	800fff2 <HAL_TIM_ConfigClockSource+0x156>
 800ff30:	2b20      	cmp	r3, #32
 800ff32:	d867      	bhi.n	8010004 <HAL_TIM_ConfigClockSource+0x168>
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d05c      	beq.n	800fff2 <HAL_TIM_ConfigClockSource+0x156>
 800ff38:	2b10      	cmp	r3, #16
 800ff3a:	d05a      	beq.n	800fff2 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800ff3c:	e062      	b.n	8010004 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	6818      	ldr	r0, [r3, #0]
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	6899      	ldr	r1, [r3, #8]
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	685a      	ldr	r2, [r3, #4]
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	68db      	ldr	r3, [r3, #12]
 800ff4e:	f000 fb5b 	bl	8010608 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	689b      	ldr	r3, [r3, #8]
 800ff58:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ff60:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	68fa      	ldr	r2, [r7, #12]
 800ff68:	609a      	str	r2, [r3, #8]
      break;
 800ff6a:	e04e      	b.n	801000a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	6818      	ldr	r0, [r3, #0]
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	6899      	ldr	r1, [r3, #8]
 800ff74:	683b      	ldr	r3, [r7, #0]
 800ff76:	685a      	ldr	r2, [r3, #4]
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	68db      	ldr	r3, [r3, #12]
 800ff7c:	f000 fb44 	bl	8010608 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	689a      	ldr	r2, [r3, #8]
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ff8e:	609a      	str	r2, [r3, #8]
      break;
 800ff90:	e03b      	b.n	801000a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	6818      	ldr	r0, [r3, #0]
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	6859      	ldr	r1, [r3, #4]
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	68db      	ldr	r3, [r3, #12]
 800ff9e:	461a      	mov	r2, r3
 800ffa0:	f000 fab8 	bl	8010514 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	2150      	movs	r1, #80	; 0x50
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f000 fb11 	bl	80105d2 <TIM_ITRx_SetConfig>
      break;
 800ffb0:	e02b      	b.n	801000a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6818      	ldr	r0, [r3, #0]
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	6859      	ldr	r1, [r3, #4]
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	68db      	ldr	r3, [r3, #12]
 800ffbe:	461a      	mov	r2, r3
 800ffc0:	f000 fad7 	bl	8010572 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	2160      	movs	r1, #96	; 0x60
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f000 fb01 	bl	80105d2 <TIM_ITRx_SetConfig>
      break;
 800ffd0:	e01b      	b.n	801000a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	6818      	ldr	r0, [r3, #0]
 800ffd6:	683b      	ldr	r3, [r7, #0]
 800ffd8:	6859      	ldr	r1, [r3, #4]
 800ffda:	683b      	ldr	r3, [r7, #0]
 800ffdc:	68db      	ldr	r3, [r3, #12]
 800ffde:	461a      	mov	r2, r3
 800ffe0:	f000 fa98 	bl	8010514 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	2140      	movs	r1, #64	; 0x40
 800ffea:	4618      	mov	r0, r3
 800ffec:	f000 faf1 	bl	80105d2 <TIM_ITRx_SetConfig>
      break;
 800fff0:	e00b      	b.n	801000a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681a      	ldr	r2, [r3, #0]
 800fff6:	683b      	ldr	r3, [r7, #0]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	4619      	mov	r1, r3
 800fffc:	4610      	mov	r0, r2
 800fffe:	f000 fae8 	bl	80105d2 <TIM_ITRx_SetConfig>
      break;
 8010002:	e002      	b.n	801000a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8010004:	bf00      	nop
 8010006:	e000      	b.n	801000a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8010008:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	2201      	movs	r2, #1
 801000e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	2200      	movs	r2, #0
 8010016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801001a:	2300      	movs	r3, #0
}
 801001c:	4618      	mov	r0, r3
 801001e:	3710      	adds	r7, #16
 8010020:	46bd      	mov	sp, r7
 8010022:	bd80      	pop	{r7, pc}

08010024 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010024:	b480      	push	{r7}
 8010026:	b083      	sub	sp, #12
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801002c:	bf00      	nop
 801002e:	370c      	adds	r7, #12
 8010030:	46bd      	mov	sp, r7
 8010032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010036:	4770      	bx	lr

08010038 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010038:	b480      	push	{r7}
 801003a:	b083      	sub	sp, #12
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010040:	bf00      	nop
 8010042:	370c      	adds	r7, #12
 8010044:	46bd      	mov	sp, r7
 8010046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004a:	4770      	bx	lr

0801004c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801004c:	b480      	push	{r7}
 801004e:	b083      	sub	sp, #12
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010054:	bf00      	nop
 8010056:	370c      	adds	r7, #12
 8010058:	46bd      	mov	sp, r7
 801005a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005e:	4770      	bx	lr

08010060 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010060:	b480      	push	{r7}
 8010062:	b083      	sub	sp, #12
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010068:	bf00      	nop
 801006a:	370c      	adds	r7, #12
 801006c:	46bd      	mov	sp, r7
 801006e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010072:	4770      	bx	lr

08010074 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010074:	b480      	push	{r7}
 8010076:	b085      	sub	sp, #20
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
 801007c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	4a40      	ldr	r2, [pc, #256]	; (8010188 <TIM_Base_SetConfig+0x114>)
 8010088:	4293      	cmp	r3, r2
 801008a:	d013      	beq.n	80100b4 <TIM_Base_SetConfig+0x40>
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010092:	d00f      	beq.n	80100b4 <TIM_Base_SetConfig+0x40>
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	4a3d      	ldr	r2, [pc, #244]	; (801018c <TIM_Base_SetConfig+0x118>)
 8010098:	4293      	cmp	r3, r2
 801009a:	d00b      	beq.n	80100b4 <TIM_Base_SetConfig+0x40>
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	4a3c      	ldr	r2, [pc, #240]	; (8010190 <TIM_Base_SetConfig+0x11c>)
 80100a0:	4293      	cmp	r3, r2
 80100a2:	d007      	beq.n	80100b4 <TIM_Base_SetConfig+0x40>
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	4a3b      	ldr	r2, [pc, #236]	; (8010194 <TIM_Base_SetConfig+0x120>)
 80100a8:	4293      	cmp	r3, r2
 80100aa:	d003      	beq.n	80100b4 <TIM_Base_SetConfig+0x40>
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	4a3a      	ldr	r2, [pc, #232]	; (8010198 <TIM_Base_SetConfig+0x124>)
 80100b0:	4293      	cmp	r3, r2
 80100b2:	d108      	bne.n	80100c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80100ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	685b      	ldr	r3, [r3, #4]
 80100c0:	68fa      	ldr	r2, [r7, #12]
 80100c2:	4313      	orrs	r3, r2
 80100c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	4a2f      	ldr	r2, [pc, #188]	; (8010188 <TIM_Base_SetConfig+0x114>)
 80100ca:	4293      	cmp	r3, r2
 80100cc:	d02b      	beq.n	8010126 <TIM_Base_SetConfig+0xb2>
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80100d4:	d027      	beq.n	8010126 <TIM_Base_SetConfig+0xb2>
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	4a2c      	ldr	r2, [pc, #176]	; (801018c <TIM_Base_SetConfig+0x118>)
 80100da:	4293      	cmp	r3, r2
 80100dc:	d023      	beq.n	8010126 <TIM_Base_SetConfig+0xb2>
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	4a2b      	ldr	r2, [pc, #172]	; (8010190 <TIM_Base_SetConfig+0x11c>)
 80100e2:	4293      	cmp	r3, r2
 80100e4:	d01f      	beq.n	8010126 <TIM_Base_SetConfig+0xb2>
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	4a2a      	ldr	r2, [pc, #168]	; (8010194 <TIM_Base_SetConfig+0x120>)
 80100ea:	4293      	cmp	r3, r2
 80100ec:	d01b      	beq.n	8010126 <TIM_Base_SetConfig+0xb2>
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	4a29      	ldr	r2, [pc, #164]	; (8010198 <TIM_Base_SetConfig+0x124>)
 80100f2:	4293      	cmp	r3, r2
 80100f4:	d017      	beq.n	8010126 <TIM_Base_SetConfig+0xb2>
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	4a28      	ldr	r2, [pc, #160]	; (801019c <TIM_Base_SetConfig+0x128>)
 80100fa:	4293      	cmp	r3, r2
 80100fc:	d013      	beq.n	8010126 <TIM_Base_SetConfig+0xb2>
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	4a27      	ldr	r2, [pc, #156]	; (80101a0 <TIM_Base_SetConfig+0x12c>)
 8010102:	4293      	cmp	r3, r2
 8010104:	d00f      	beq.n	8010126 <TIM_Base_SetConfig+0xb2>
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	4a26      	ldr	r2, [pc, #152]	; (80101a4 <TIM_Base_SetConfig+0x130>)
 801010a:	4293      	cmp	r3, r2
 801010c:	d00b      	beq.n	8010126 <TIM_Base_SetConfig+0xb2>
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	4a25      	ldr	r2, [pc, #148]	; (80101a8 <TIM_Base_SetConfig+0x134>)
 8010112:	4293      	cmp	r3, r2
 8010114:	d007      	beq.n	8010126 <TIM_Base_SetConfig+0xb2>
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	4a24      	ldr	r2, [pc, #144]	; (80101ac <TIM_Base_SetConfig+0x138>)
 801011a:	4293      	cmp	r3, r2
 801011c:	d003      	beq.n	8010126 <TIM_Base_SetConfig+0xb2>
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	4a23      	ldr	r2, [pc, #140]	; (80101b0 <TIM_Base_SetConfig+0x13c>)
 8010122:	4293      	cmp	r3, r2
 8010124:	d108      	bne.n	8010138 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801012c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	68db      	ldr	r3, [r3, #12]
 8010132:	68fa      	ldr	r2, [r7, #12]
 8010134:	4313      	orrs	r3, r2
 8010136:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	695b      	ldr	r3, [r3, #20]
 8010142:	4313      	orrs	r3, r2
 8010144:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	68fa      	ldr	r2, [r7, #12]
 801014a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	689a      	ldr	r2, [r3, #8]
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	681a      	ldr	r2, [r3, #0]
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	4a0a      	ldr	r2, [pc, #40]	; (8010188 <TIM_Base_SetConfig+0x114>)
 8010160:	4293      	cmp	r3, r2
 8010162:	d003      	beq.n	801016c <TIM_Base_SetConfig+0xf8>
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	4a0c      	ldr	r2, [pc, #48]	; (8010198 <TIM_Base_SetConfig+0x124>)
 8010168:	4293      	cmp	r3, r2
 801016a:	d103      	bne.n	8010174 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801016c:	683b      	ldr	r3, [r7, #0]
 801016e:	691a      	ldr	r2, [r3, #16]
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	2201      	movs	r2, #1
 8010178:	615a      	str	r2, [r3, #20]
}
 801017a:	bf00      	nop
 801017c:	3714      	adds	r7, #20
 801017e:	46bd      	mov	sp, r7
 8010180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010184:	4770      	bx	lr
 8010186:	bf00      	nop
 8010188:	40010000 	.word	0x40010000
 801018c:	40000400 	.word	0x40000400
 8010190:	40000800 	.word	0x40000800
 8010194:	40000c00 	.word	0x40000c00
 8010198:	40010400 	.word	0x40010400
 801019c:	40014000 	.word	0x40014000
 80101a0:	40014400 	.word	0x40014400
 80101a4:	40014800 	.word	0x40014800
 80101a8:	40001800 	.word	0x40001800
 80101ac:	40001c00 	.word	0x40001c00
 80101b0:	40002000 	.word	0x40002000

080101b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80101b4:	b480      	push	{r7}
 80101b6:	b087      	sub	sp, #28
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
 80101bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6a1b      	ldr	r3, [r3, #32]
 80101c2:	f023 0201 	bic.w	r2, r3, #1
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6a1b      	ldr	r3, [r3, #32]
 80101ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	685b      	ldr	r3, [r3, #4]
 80101d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	699b      	ldr	r3, [r3, #24]
 80101da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80101e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	f023 0303 	bic.w	r3, r3, #3
 80101ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	68fa      	ldr	r2, [r7, #12]
 80101f2:	4313      	orrs	r3, r2
 80101f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80101f6:	697b      	ldr	r3, [r7, #20]
 80101f8:	f023 0302 	bic.w	r3, r3, #2
 80101fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	689b      	ldr	r3, [r3, #8]
 8010202:	697a      	ldr	r2, [r7, #20]
 8010204:	4313      	orrs	r3, r2
 8010206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	4a20      	ldr	r2, [pc, #128]	; (801028c <TIM_OC1_SetConfig+0xd8>)
 801020c:	4293      	cmp	r3, r2
 801020e:	d003      	beq.n	8010218 <TIM_OC1_SetConfig+0x64>
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	4a1f      	ldr	r2, [pc, #124]	; (8010290 <TIM_OC1_SetConfig+0xdc>)
 8010214:	4293      	cmp	r3, r2
 8010216:	d10c      	bne.n	8010232 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010218:	697b      	ldr	r3, [r7, #20]
 801021a:	f023 0308 	bic.w	r3, r3, #8
 801021e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	68db      	ldr	r3, [r3, #12]
 8010224:	697a      	ldr	r2, [r7, #20]
 8010226:	4313      	orrs	r3, r2
 8010228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801022a:	697b      	ldr	r3, [r7, #20]
 801022c:	f023 0304 	bic.w	r3, r3, #4
 8010230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	4a15      	ldr	r2, [pc, #84]	; (801028c <TIM_OC1_SetConfig+0xd8>)
 8010236:	4293      	cmp	r3, r2
 8010238:	d003      	beq.n	8010242 <TIM_OC1_SetConfig+0x8e>
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	4a14      	ldr	r2, [pc, #80]	; (8010290 <TIM_OC1_SetConfig+0xdc>)
 801023e:	4293      	cmp	r3, r2
 8010240:	d111      	bne.n	8010266 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010242:	693b      	ldr	r3, [r7, #16]
 8010244:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801024a:	693b      	ldr	r3, [r7, #16]
 801024c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	695b      	ldr	r3, [r3, #20]
 8010256:	693a      	ldr	r2, [r7, #16]
 8010258:	4313      	orrs	r3, r2
 801025a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	699b      	ldr	r3, [r3, #24]
 8010260:	693a      	ldr	r2, [r7, #16]
 8010262:	4313      	orrs	r3, r2
 8010264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	693a      	ldr	r2, [r7, #16]
 801026a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	68fa      	ldr	r2, [r7, #12]
 8010270:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010272:	683b      	ldr	r3, [r7, #0]
 8010274:	685a      	ldr	r2, [r3, #4]
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	697a      	ldr	r2, [r7, #20]
 801027e:	621a      	str	r2, [r3, #32]
}
 8010280:	bf00      	nop
 8010282:	371c      	adds	r7, #28
 8010284:	46bd      	mov	sp, r7
 8010286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028a:	4770      	bx	lr
 801028c:	40010000 	.word	0x40010000
 8010290:	40010400 	.word	0x40010400

08010294 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010294:	b480      	push	{r7}
 8010296:	b087      	sub	sp, #28
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
 801029c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	6a1b      	ldr	r3, [r3, #32]
 80102a2:	f023 0210 	bic.w	r2, r3, #16
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	6a1b      	ldr	r3, [r3, #32]
 80102ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	685b      	ldr	r3, [r3, #4]
 80102b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	699b      	ldr	r3, [r3, #24]
 80102ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80102c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80102ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	021b      	lsls	r3, r3, #8
 80102d2:	68fa      	ldr	r2, [r7, #12]
 80102d4:	4313      	orrs	r3, r2
 80102d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80102d8:	697b      	ldr	r3, [r7, #20]
 80102da:	f023 0320 	bic.w	r3, r3, #32
 80102de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80102e0:	683b      	ldr	r3, [r7, #0]
 80102e2:	689b      	ldr	r3, [r3, #8]
 80102e4:	011b      	lsls	r3, r3, #4
 80102e6:	697a      	ldr	r2, [r7, #20]
 80102e8:	4313      	orrs	r3, r2
 80102ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	4a22      	ldr	r2, [pc, #136]	; (8010378 <TIM_OC2_SetConfig+0xe4>)
 80102f0:	4293      	cmp	r3, r2
 80102f2:	d003      	beq.n	80102fc <TIM_OC2_SetConfig+0x68>
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	4a21      	ldr	r2, [pc, #132]	; (801037c <TIM_OC2_SetConfig+0xe8>)
 80102f8:	4293      	cmp	r3, r2
 80102fa:	d10d      	bne.n	8010318 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80102fc:	697b      	ldr	r3, [r7, #20]
 80102fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010302:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010304:	683b      	ldr	r3, [r7, #0]
 8010306:	68db      	ldr	r3, [r3, #12]
 8010308:	011b      	lsls	r3, r3, #4
 801030a:	697a      	ldr	r2, [r7, #20]
 801030c:	4313      	orrs	r3, r2
 801030e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010310:	697b      	ldr	r3, [r7, #20]
 8010312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010316:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	4a17      	ldr	r2, [pc, #92]	; (8010378 <TIM_OC2_SetConfig+0xe4>)
 801031c:	4293      	cmp	r3, r2
 801031e:	d003      	beq.n	8010328 <TIM_OC2_SetConfig+0x94>
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	4a16      	ldr	r2, [pc, #88]	; (801037c <TIM_OC2_SetConfig+0xe8>)
 8010324:	4293      	cmp	r3, r2
 8010326:	d113      	bne.n	8010350 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010328:	693b      	ldr	r3, [r7, #16]
 801032a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801032e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010330:	693b      	ldr	r3, [r7, #16]
 8010332:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010336:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	695b      	ldr	r3, [r3, #20]
 801033c:	009b      	lsls	r3, r3, #2
 801033e:	693a      	ldr	r2, [r7, #16]
 8010340:	4313      	orrs	r3, r2
 8010342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010344:	683b      	ldr	r3, [r7, #0]
 8010346:	699b      	ldr	r3, [r3, #24]
 8010348:	009b      	lsls	r3, r3, #2
 801034a:	693a      	ldr	r2, [r7, #16]
 801034c:	4313      	orrs	r3, r2
 801034e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	693a      	ldr	r2, [r7, #16]
 8010354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	68fa      	ldr	r2, [r7, #12]
 801035a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801035c:	683b      	ldr	r3, [r7, #0]
 801035e:	685a      	ldr	r2, [r3, #4]
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	697a      	ldr	r2, [r7, #20]
 8010368:	621a      	str	r2, [r3, #32]
}
 801036a:	bf00      	nop
 801036c:	371c      	adds	r7, #28
 801036e:	46bd      	mov	sp, r7
 8010370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010374:	4770      	bx	lr
 8010376:	bf00      	nop
 8010378:	40010000 	.word	0x40010000
 801037c:	40010400 	.word	0x40010400

08010380 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010380:	b480      	push	{r7}
 8010382:	b087      	sub	sp, #28
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
 8010388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	6a1b      	ldr	r3, [r3, #32]
 801038e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	6a1b      	ldr	r3, [r3, #32]
 801039a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	685b      	ldr	r3, [r3, #4]
 80103a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	69db      	ldr	r3, [r3, #28]
 80103a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80103ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	f023 0303 	bic.w	r3, r3, #3
 80103b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80103b8:	683b      	ldr	r3, [r7, #0]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	68fa      	ldr	r2, [r7, #12]
 80103be:	4313      	orrs	r3, r2
 80103c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80103c2:	697b      	ldr	r3, [r7, #20]
 80103c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80103c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	689b      	ldr	r3, [r3, #8]
 80103ce:	021b      	lsls	r3, r3, #8
 80103d0:	697a      	ldr	r2, [r7, #20]
 80103d2:	4313      	orrs	r3, r2
 80103d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	4a21      	ldr	r2, [pc, #132]	; (8010460 <TIM_OC3_SetConfig+0xe0>)
 80103da:	4293      	cmp	r3, r2
 80103dc:	d003      	beq.n	80103e6 <TIM_OC3_SetConfig+0x66>
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	4a20      	ldr	r2, [pc, #128]	; (8010464 <TIM_OC3_SetConfig+0xe4>)
 80103e2:	4293      	cmp	r3, r2
 80103e4:	d10d      	bne.n	8010402 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80103e6:	697b      	ldr	r3, [r7, #20]
 80103e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80103ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	68db      	ldr	r3, [r3, #12]
 80103f2:	021b      	lsls	r3, r3, #8
 80103f4:	697a      	ldr	r2, [r7, #20]
 80103f6:	4313      	orrs	r3, r2
 80103f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80103fa:	697b      	ldr	r3, [r7, #20]
 80103fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	4a16      	ldr	r2, [pc, #88]	; (8010460 <TIM_OC3_SetConfig+0xe0>)
 8010406:	4293      	cmp	r3, r2
 8010408:	d003      	beq.n	8010412 <TIM_OC3_SetConfig+0x92>
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	4a15      	ldr	r2, [pc, #84]	; (8010464 <TIM_OC3_SetConfig+0xe4>)
 801040e:	4293      	cmp	r3, r2
 8010410:	d113      	bne.n	801043a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010412:	693b      	ldr	r3, [r7, #16]
 8010414:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010418:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801041a:	693b      	ldr	r3, [r7, #16]
 801041c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010420:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010422:	683b      	ldr	r3, [r7, #0]
 8010424:	695b      	ldr	r3, [r3, #20]
 8010426:	011b      	lsls	r3, r3, #4
 8010428:	693a      	ldr	r2, [r7, #16]
 801042a:	4313      	orrs	r3, r2
 801042c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801042e:	683b      	ldr	r3, [r7, #0]
 8010430:	699b      	ldr	r3, [r3, #24]
 8010432:	011b      	lsls	r3, r3, #4
 8010434:	693a      	ldr	r2, [r7, #16]
 8010436:	4313      	orrs	r3, r2
 8010438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	693a      	ldr	r2, [r7, #16]
 801043e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	68fa      	ldr	r2, [r7, #12]
 8010444:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010446:	683b      	ldr	r3, [r7, #0]
 8010448:	685a      	ldr	r2, [r3, #4]
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	697a      	ldr	r2, [r7, #20]
 8010452:	621a      	str	r2, [r3, #32]
}
 8010454:	bf00      	nop
 8010456:	371c      	adds	r7, #28
 8010458:	46bd      	mov	sp, r7
 801045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045e:	4770      	bx	lr
 8010460:	40010000 	.word	0x40010000
 8010464:	40010400 	.word	0x40010400

08010468 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010468:	b480      	push	{r7}
 801046a:	b087      	sub	sp, #28
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
 8010470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6a1b      	ldr	r3, [r3, #32]
 8010476:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	6a1b      	ldr	r3, [r3, #32]
 8010482:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	685b      	ldr	r3, [r3, #4]
 8010488:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	69db      	ldr	r3, [r3, #28]
 801048e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801049e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80104a0:	683b      	ldr	r3, [r7, #0]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	021b      	lsls	r3, r3, #8
 80104a6:	68fa      	ldr	r2, [r7, #12]
 80104a8:	4313      	orrs	r3, r2
 80104aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80104ac:	693b      	ldr	r3, [r7, #16]
 80104ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80104b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80104b4:	683b      	ldr	r3, [r7, #0]
 80104b6:	689b      	ldr	r3, [r3, #8]
 80104b8:	031b      	lsls	r3, r3, #12
 80104ba:	693a      	ldr	r2, [r7, #16]
 80104bc:	4313      	orrs	r3, r2
 80104be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	4a12      	ldr	r2, [pc, #72]	; (801050c <TIM_OC4_SetConfig+0xa4>)
 80104c4:	4293      	cmp	r3, r2
 80104c6:	d003      	beq.n	80104d0 <TIM_OC4_SetConfig+0x68>
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	4a11      	ldr	r2, [pc, #68]	; (8010510 <TIM_OC4_SetConfig+0xa8>)
 80104cc:	4293      	cmp	r3, r2
 80104ce:	d109      	bne.n	80104e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80104d0:	697b      	ldr	r3, [r7, #20]
 80104d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80104d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80104d8:	683b      	ldr	r3, [r7, #0]
 80104da:	695b      	ldr	r3, [r3, #20]
 80104dc:	019b      	lsls	r3, r3, #6
 80104de:	697a      	ldr	r2, [r7, #20]
 80104e0:	4313      	orrs	r3, r2
 80104e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	697a      	ldr	r2, [r7, #20]
 80104e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	68fa      	ldr	r2, [r7, #12]
 80104ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	685a      	ldr	r2, [r3, #4]
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	693a      	ldr	r2, [r7, #16]
 80104fc:	621a      	str	r2, [r3, #32]
}
 80104fe:	bf00      	nop
 8010500:	371c      	adds	r7, #28
 8010502:	46bd      	mov	sp, r7
 8010504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010508:	4770      	bx	lr
 801050a:	bf00      	nop
 801050c:	40010000 	.word	0x40010000
 8010510:	40010400 	.word	0x40010400

08010514 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010514:	b480      	push	{r7}
 8010516:	b087      	sub	sp, #28
 8010518:	af00      	add	r7, sp, #0
 801051a:	60f8      	str	r0, [r7, #12]
 801051c:	60b9      	str	r1, [r7, #8]
 801051e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	6a1b      	ldr	r3, [r3, #32]
 8010524:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	6a1b      	ldr	r3, [r3, #32]
 801052a:	f023 0201 	bic.w	r2, r3, #1
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	699b      	ldr	r3, [r3, #24]
 8010536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010538:	693b      	ldr	r3, [r7, #16]
 801053a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801053e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	011b      	lsls	r3, r3, #4
 8010544:	693a      	ldr	r2, [r7, #16]
 8010546:	4313      	orrs	r3, r2
 8010548:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801054a:	697b      	ldr	r3, [r7, #20]
 801054c:	f023 030a 	bic.w	r3, r3, #10
 8010550:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010552:	697a      	ldr	r2, [r7, #20]
 8010554:	68bb      	ldr	r3, [r7, #8]
 8010556:	4313      	orrs	r3, r2
 8010558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	693a      	ldr	r2, [r7, #16]
 801055e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	697a      	ldr	r2, [r7, #20]
 8010564:	621a      	str	r2, [r3, #32]
}
 8010566:	bf00      	nop
 8010568:	371c      	adds	r7, #28
 801056a:	46bd      	mov	sp, r7
 801056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010570:	4770      	bx	lr

08010572 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010572:	b480      	push	{r7}
 8010574:	b087      	sub	sp, #28
 8010576:	af00      	add	r7, sp, #0
 8010578:	60f8      	str	r0, [r7, #12]
 801057a:	60b9      	str	r1, [r7, #8]
 801057c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	6a1b      	ldr	r3, [r3, #32]
 8010582:	f023 0210 	bic.w	r2, r3, #16
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	699b      	ldr	r3, [r3, #24]
 801058e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	6a1b      	ldr	r3, [r3, #32]
 8010594:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010596:	697b      	ldr	r3, [r7, #20]
 8010598:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801059c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	031b      	lsls	r3, r3, #12
 80105a2:	697a      	ldr	r2, [r7, #20]
 80105a4:	4313      	orrs	r3, r2
 80105a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80105a8:	693b      	ldr	r3, [r7, #16]
 80105aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80105ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	011b      	lsls	r3, r3, #4
 80105b4:	693a      	ldr	r2, [r7, #16]
 80105b6:	4313      	orrs	r3, r2
 80105b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	697a      	ldr	r2, [r7, #20]
 80105be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	693a      	ldr	r2, [r7, #16]
 80105c4:	621a      	str	r2, [r3, #32]
}
 80105c6:	bf00      	nop
 80105c8:	371c      	adds	r7, #28
 80105ca:	46bd      	mov	sp, r7
 80105cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d0:	4770      	bx	lr

080105d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80105d2:	b480      	push	{r7}
 80105d4:	b085      	sub	sp, #20
 80105d6:	af00      	add	r7, sp, #0
 80105d8:	6078      	str	r0, [r7, #4]
 80105da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	689b      	ldr	r3, [r3, #8]
 80105e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80105e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80105ea:	683a      	ldr	r2, [r7, #0]
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	4313      	orrs	r3, r2
 80105f0:	f043 0307 	orr.w	r3, r3, #7
 80105f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	68fa      	ldr	r2, [r7, #12]
 80105fa:	609a      	str	r2, [r3, #8]
}
 80105fc:	bf00      	nop
 80105fe:	3714      	adds	r7, #20
 8010600:	46bd      	mov	sp, r7
 8010602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010606:	4770      	bx	lr

08010608 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010608:	b480      	push	{r7}
 801060a:	b087      	sub	sp, #28
 801060c:	af00      	add	r7, sp, #0
 801060e:	60f8      	str	r0, [r7, #12]
 8010610:	60b9      	str	r1, [r7, #8]
 8010612:	607a      	str	r2, [r7, #4]
 8010614:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	689b      	ldr	r3, [r3, #8]
 801061a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801061c:	697b      	ldr	r3, [r7, #20]
 801061e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010622:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	021a      	lsls	r2, r3, #8
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	431a      	orrs	r2, r3
 801062c:	68bb      	ldr	r3, [r7, #8]
 801062e:	4313      	orrs	r3, r2
 8010630:	697a      	ldr	r2, [r7, #20]
 8010632:	4313      	orrs	r3, r2
 8010634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	697a      	ldr	r2, [r7, #20]
 801063a:	609a      	str	r2, [r3, #8]
}
 801063c:	bf00      	nop
 801063e:	371c      	adds	r7, #28
 8010640:	46bd      	mov	sp, r7
 8010642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010646:	4770      	bx	lr

08010648 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010648:	b480      	push	{r7}
 801064a:	b087      	sub	sp, #28
 801064c:	af00      	add	r7, sp, #0
 801064e:	60f8      	str	r0, [r7, #12]
 8010650:	60b9      	str	r1, [r7, #8]
 8010652:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	f003 031f 	and.w	r3, r3, #31
 801065a:	2201      	movs	r2, #1
 801065c:	fa02 f303 	lsl.w	r3, r2, r3
 8010660:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	6a1a      	ldr	r2, [r3, #32]
 8010666:	697b      	ldr	r3, [r7, #20]
 8010668:	43db      	mvns	r3, r3
 801066a:	401a      	ands	r2, r3
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	6a1a      	ldr	r2, [r3, #32]
 8010674:	68bb      	ldr	r3, [r7, #8]
 8010676:	f003 031f 	and.w	r3, r3, #31
 801067a:	6879      	ldr	r1, [r7, #4]
 801067c:	fa01 f303 	lsl.w	r3, r1, r3
 8010680:	431a      	orrs	r2, r3
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	621a      	str	r2, [r3, #32]
}
 8010686:	bf00      	nop
 8010688:	371c      	adds	r7, #28
 801068a:	46bd      	mov	sp, r7
 801068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010690:	4770      	bx	lr
	...

08010694 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010694:	b480      	push	{r7}
 8010696:	b085      	sub	sp, #20
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
 801069c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80106a4:	2b01      	cmp	r3, #1
 80106a6:	d101      	bne.n	80106ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80106a8:	2302      	movs	r3, #2
 80106aa:	e05a      	b.n	8010762 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	2201      	movs	r2, #1
 80106b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2202      	movs	r2, #2
 80106b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	685b      	ldr	r3, [r3, #4]
 80106c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	689b      	ldr	r3, [r3, #8]
 80106ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80106d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	68fa      	ldr	r2, [r7, #12]
 80106da:	4313      	orrs	r3, r2
 80106dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	68fa      	ldr	r2, [r7, #12]
 80106e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	4a21      	ldr	r2, [pc, #132]	; (8010770 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80106ec:	4293      	cmp	r3, r2
 80106ee:	d022      	beq.n	8010736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80106f8:	d01d      	beq.n	8010736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	4a1d      	ldr	r2, [pc, #116]	; (8010774 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8010700:	4293      	cmp	r3, r2
 8010702:	d018      	beq.n	8010736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	4a1b      	ldr	r2, [pc, #108]	; (8010778 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801070a:	4293      	cmp	r3, r2
 801070c:	d013      	beq.n	8010736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	4a1a      	ldr	r2, [pc, #104]	; (801077c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8010714:	4293      	cmp	r3, r2
 8010716:	d00e      	beq.n	8010736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	4a18      	ldr	r2, [pc, #96]	; (8010780 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801071e:	4293      	cmp	r3, r2
 8010720:	d009      	beq.n	8010736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	4a17      	ldr	r2, [pc, #92]	; (8010784 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8010728:	4293      	cmp	r3, r2
 801072a:	d004      	beq.n	8010736 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	4a15      	ldr	r2, [pc, #84]	; (8010788 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8010732:	4293      	cmp	r3, r2
 8010734:	d10c      	bne.n	8010750 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010736:	68bb      	ldr	r3, [r7, #8]
 8010738:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801073c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801073e:	683b      	ldr	r3, [r7, #0]
 8010740:	685b      	ldr	r3, [r3, #4]
 8010742:	68ba      	ldr	r2, [r7, #8]
 8010744:	4313      	orrs	r3, r2
 8010746:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	68ba      	ldr	r2, [r7, #8]
 801074e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	2201      	movs	r2, #1
 8010754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2200      	movs	r2, #0
 801075c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010760:	2300      	movs	r3, #0
}
 8010762:	4618      	mov	r0, r3
 8010764:	3714      	adds	r7, #20
 8010766:	46bd      	mov	sp, r7
 8010768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076c:	4770      	bx	lr
 801076e:	bf00      	nop
 8010770:	40010000 	.word	0x40010000
 8010774:	40000400 	.word	0x40000400
 8010778:	40000800 	.word	0x40000800
 801077c:	40000c00 	.word	0x40000c00
 8010780:	40010400 	.word	0x40010400
 8010784:	40014000 	.word	0x40014000
 8010788:	40001800 	.word	0x40001800

0801078c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801078c:	b480      	push	{r7}
 801078e:	b083      	sub	sp, #12
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010794:	bf00      	nop
 8010796:	370c      	adds	r7, #12
 8010798:	46bd      	mov	sp, r7
 801079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079e:	4770      	bx	lr

080107a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80107a0:	b480      	push	{r7}
 80107a2:	b083      	sub	sp, #12
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80107a8:	bf00      	nop
 80107aa:	370c      	adds	r7, #12
 80107ac:	46bd      	mov	sp, r7
 80107ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b2:	4770      	bx	lr

080107b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b082      	sub	sp, #8
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d101      	bne.n	80107c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80107c2:	2301      	movs	r3, #1
 80107c4:	e03f      	b.n	8010846 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80107cc:	b2db      	uxtb	r3, r3
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d106      	bne.n	80107e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	2200      	movs	r2, #0
 80107d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80107da:	6878      	ldr	r0, [r7, #4]
 80107dc:	f7f1 fd2c 	bl	8002238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	2224      	movs	r2, #36	; 0x24
 80107e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	68da      	ldr	r2, [r3, #12]
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80107f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80107f8:	6878      	ldr	r0, [r7, #4]
 80107fa:	f000 fcc3 	bl	8011184 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	691a      	ldr	r2, [r3, #16]
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801080c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	695a      	ldr	r2, [r3, #20]
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801081c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	68da      	ldr	r2, [r3, #12]
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801082c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	2200      	movs	r2, #0
 8010832:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2220      	movs	r2, #32
 8010838:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	2220      	movs	r2, #32
 8010840:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8010844:	2300      	movs	r3, #0
}
 8010846:	4618      	mov	r0, r3
 8010848:	3708      	adds	r7, #8
 801084a:	46bd      	mov	sp, r7
 801084c:	bd80      	pop	{r7, pc}

0801084e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801084e:	b580      	push	{r7, lr}
 8010850:	b088      	sub	sp, #32
 8010852:	af02      	add	r7, sp, #8
 8010854:	60f8      	str	r0, [r7, #12]
 8010856:	60b9      	str	r1, [r7, #8]
 8010858:	603b      	str	r3, [r7, #0]
 801085a:	4613      	mov	r3, r2
 801085c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 801085e:	2300      	movs	r3, #0
 8010860:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010868:	b2db      	uxtb	r3, r3
 801086a:	2b20      	cmp	r3, #32
 801086c:	f040 8083 	bne.w	8010976 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8010870:	68bb      	ldr	r3, [r7, #8]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d002      	beq.n	801087c <HAL_UART_Transmit+0x2e>
 8010876:	88fb      	ldrh	r3, [r7, #6]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d101      	bne.n	8010880 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 801087c:	2301      	movs	r3, #1
 801087e:	e07b      	b.n	8010978 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010886:	2b01      	cmp	r3, #1
 8010888:	d101      	bne.n	801088e <HAL_UART_Transmit+0x40>
 801088a:	2302      	movs	r3, #2
 801088c:	e074      	b.n	8010978 <HAL_UART_Transmit+0x12a>
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	2201      	movs	r2, #1
 8010892:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	2200      	movs	r2, #0
 801089a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	2221      	movs	r2, #33	; 0x21
 80108a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80108a4:	f7f9 fe5e 	bl	800a564 <HAL_GetTick>
 80108a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	88fa      	ldrh	r2, [r7, #6]
 80108ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	88fa      	ldrh	r2, [r7, #6]
 80108b4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	2200      	movs	r2, #0
 80108ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80108be:	e042      	b.n	8010946 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80108c4:	b29b      	uxth	r3, r3
 80108c6:	3b01      	subs	r3, #1
 80108c8:	b29a      	uxth	r2, r3
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	689b      	ldr	r3, [r3, #8]
 80108d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80108d6:	d122      	bne.n	801091e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80108d8:	683b      	ldr	r3, [r7, #0]
 80108da:	9300      	str	r3, [sp, #0]
 80108dc:	697b      	ldr	r3, [r7, #20]
 80108de:	2200      	movs	r2, #0
 80108e0:	2180      	movs	r1, #128	; 0x80
 80108e2:	68f8      	ldr	r0, [r7, #12]
 80108e4:	f000 facc 	bl	8010e80 <UART_WaitOnFlagUntilTimeout>
 80108e8:	4603      	mov	r3, r0
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d001      	beq.n	80108f2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80108ee:	2303      	movs	r3, #3
 80108f0:	e042      	b.n	8010978 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80108f6:	693b      	ldr	r3, [r7, #16]
 80108f8:	881b      	ldrh	r3, [r3, #0]
 80108fa:	461a      	mov	r2, r3
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010904:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	691b      	ldr	r3, [r3, #16]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d103      	bne.n	8010916 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 801090e:	68bb      	ldr	r3, [r7, #8]
 8010910:	3302      	adds	r3, #2
 8010912:	60bb      	str	r3, [r7, #8]
 8010914:	e017      	b.n	8010946 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8010916:	68bb      	ldr	r3, [r7, #8]
 8010918:	3301      	adds	r3, #1
 801091a:	60bb      	str	r3, [r7, #8]
 801091c:	e013      	b.n	8010946 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801091e:	683b      	ldr	r3, [r7, #0]
 8010920:	9300      	str	r3, [sp, #0]
 8010922:	697b      	ldr	r3, [r7, #20]
 8010924:	2200      	movs	r2, #0
 8010926:	2180      	movs	r1, #128	; 0x80
 8010928:	68f8      	ldr	r0, [r7, #12]
 801092a:	f000 faa9 	bl	8010e80 <UART_WaitOnFlagUntilTimeout>
 801092e:	4603      	mov	r3, r0
 8010930:	2b00      	cmp	r3, #0
 8010932:	d001      	beq.n	8010938 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8010934:	2303      	movs	r3, #3
 8010936:	e01f      	b.n	8010978 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8010938:	68bb      	ldr	r3, [r7, #8]
 801093a:	1c5a      	adds	r2, r3, #1
 801093c:	60ba      	str	r2, [r7, #8]
 801093e:	781a      	ldrb	r2, [r3, #0]
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801094a:	b29b      	uxth	r3, r3
 801094c:	2b00      	cmp	r3, #0
 801094e:	d1b7      	bne.n	80108c0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	9300      	str	r3, [sp, #0]
 8010954:	697b      	ldr	r3, [r7, #20]
 8010956:	2200      	movs	r2, #0
 8010958:	2140      	movs	r1, #64	; 0x40
 801095a:	68f8      	ldr	r0, [r7, #12]
 801095c:	f000 fa90 	bl	8010e80 <UART_WaitOnFlagUntilTimeout>
 8010960:	4603      	mov	r3, r0
 8010962:	2b00      	cmp	r3, #0
 8010964:	d001      	beq.n	801096a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8010966:	2303      	movs	r3, #3
 8010968:	e006      	b.n	8010978 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	2220      	movs	r2, #32
 801096e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8010972:	2300      	movs	r3, #0
 8010974:	e000      	b.n	8010978 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8010976:	2302      	movs	r3, #2
  }
}
 8010978:	4618      	mov	r0, r3
 801097a:	3718      	adds	r7, #24
 801097c:	46bd      	mov	sp, r7
 801097e:	bd80      	pop	{r7, pc}

08010980 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010980:	b480      	push	{r7}
 8010982:	b085      	sub	sp, #20
 8010984:	af00      	add	r7, sp, #0
 8010986:	60f8      	str	r0, [r7, #12]
 8010988:	60b9      	str	r1, [r7, #8]
 801098a:	4613      	mov	r3, r2
 801098c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010994:	b2db      	uxtb	r3, r3
 8010996:	2b20      	cmp	r3, #32
 8010998:	d140      	bne.n	8010a1c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 801099a:	68bb      	ldr	r3, [r7, #8]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d002      	beq.n	80109a6 <HAL_UART_Receive_IT+0x26>
 80109a0:	88fb      	ldrh	r3, [r7, #6]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d101      	bne.n	80109aa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80109a6:	2301      	movs	r3, #1
 80109a8:	e039      	b.n	8010a1e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80109b0:	2b01      	cmp	r3, #1
 80109b2:	d101      	bne.n	80109b8 <HAL_UART_Receive_IT+0x38>
 80109b4:	2302      	movs	r3, #2
 80109b6:	e032      	b.n	8010a1e <HAL_UART_Receive_IT+0x9e>
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	2201      	movs	r2, #1
 80109bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	68ba      	ldr	r2, [r7, #8]
 80109c4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	88fa      	ldrh	r2, [r7, #6]
 80109ca:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	88fa      	ldrh	r2, [r7, #6]
 80109d0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	2200      	movs	r2, #0
 80109d6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	2222      	movs	r2, #34	; 0x22
 80109dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	2200      	movs	r2, #0
 80109e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	68da      	ldr	r2, [r3, #12]
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80109f6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	695a      	ldr	r2, [r3, #20]
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	f042 0201 	orr.w	r2, r2, #1
 8010a06:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	68da      	ldr	r2, [r3, #12]
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	f042 0220 	orr.w	r2, r2, #32
 8010a16:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8010a18:	2300      	movs	r3, #0
 8010a1a:	e000      	b.n	8010a1e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8010a1c:	2302      	movs	r3, #2
  }
}
 8010a1e:	4618      	mov	r0, r3
 8010a20:	3714      	adds	r7, #20
 8010a22:	46bd      	mov	sp, r7
 8010a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a28:	4770      	bx	lr
	...

08010a2c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b086      	sub	sp, #24
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	60f8      	str	r0, [r7, #12]
 8010a34:	60b9      	str	r1, [r7, #8]
 8010a36:	4613      	mov	r3, r2
 8010a38:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010a40:	b2db      	uxtb	r3, r3
 8010a42:	2b20      	cmp	r3, #32
 8010a44:	d166      	bne.n	8010b14 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010a46:	68bb      	ldr	r3, [r7, #8]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d002      	beq.n	8010a52 <HAL_UART_Receive_DMA+0x26>
 8010a4c:	88fb      	ldrh	r3, [r7, #6]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d101      	bne.n	8010a56 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8010a52:	2301      	movs	r3, #1
 8010a54:	e05f      	b.n	8010b16 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010a5c:	2b01      	cmp	r3, #1
 8010a5e:	d101      	bne.n	8010a64 <HAL_UART_Receive_DMA+0x38>
 8010a60:	2302      	movs	r3, #2
 8010a62:	e058      	b.n	8010b16 <HAL_UART_Receive_DMA+0xea>
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	2201      	movs	r2, #1
 8010a68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8010a6c:	68ba      	ldr	r2, [r7, #8]
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	88fa      	ldrh	r2, [r7, #6]
 8010a76:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	2222      	movs	r2, #34	; 0x22
 8010a82:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a8a:	4a25      	ldr	r2, [pc, #148]	; (8010b20 <HAL_UART_Receive_DMA+0xf4>)
 8010a8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a92:	4a24      	ldr	r2, [pc, #144]	; (8010b24 <HAL_UART_Receive_DMA+0xf8>)
 8010a94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a9a:	4a23      	ldr	r2, [pc, #140]	; (8010b28 <HAL_UART_Receive_DMA+0xfc>)
 8010a9c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8010aa6:	f107 0308 	add.w	r3, r7, #8
 8010aaa:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	3304      	adds	r3, #4
 8010ab6:	4619      	mov	r1, r3
 8010ab8:	697b      	ldr	r3, [r7, #20]
 8010aba:	681a      	ldr	r2, [r3, #0]
 8010abc:	88fb      	ldrh	r3, [r7, #6]
 8010abe:	f7fa fe5b 	bl	800b778 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	613b      	str	r3, [r7, #16]
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	613b      	str	r3, [r7, #16]
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	685b      	ldr	r3, [r3, #4]
 8010ad4:	613b      	str	r3, [r7, #16]
 8010ad6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	2200      	movs	r2, #0
 8010adc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	68da      	ldr	r2, [r3, #12]
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010aee:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	695a      	ldr	r2, [r3, #20]
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	f042 0201 	orr.w	r2, r2, #1
 8010afe:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	695a      	ldr	r2, [r3, #20]
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010b0e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8010b10:	2300      	movs	r3, #0
 8010b12:	e000      	b.n	8010b16 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010b14:	2302      	movs	r3, #2
  }
}
 8010b16:	4618      	mov	r0, r3
 8010b18:	3718      	adds	r7, #24
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	bd80      	pop	{r7, pc}
 8010b1e:	bf00      	nop
 8010b20:	08010d69 	.word	0x08010d69
 8010b24:	08010dd1 	.word	0x08010dd1
 8010b28:	08010ded 	.word	0x08010ded

08010b2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b088      	sub	sp, #32
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	68db      	ldr	r3, [r3, #12]
 8010b42:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	695b      	ldr	r3, [r3, #20]
 8010b4a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8010b50:	2300      	movs	r3, #0
 8010b52:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010b54:	69fb      	ldr	r3, [r7, #28]
 8010b56:	f003 030f 	and.w	r3, r3, #15
 8010b5a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8010b5c:	693b      	ldr	r3, [r7, #16]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d10d      	bne.n	8010b7e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010b62:	69fb      	ldr	r3, [r7, #28]
 8010b64:	f003 0320 	and.w	r3, r3, #32
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d008      	beq.n	8010b7e <HAL_UART_IRQHandler+0x52>
 8010b6c:	69bb      	ldr	r3, [r7, #24]
 8010b6e:	f003 0320 	and.w	r3, r3, #32
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d003      	beq.n	8010b7e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8010b76:	6878      	ldr	r0, [r7, #4]
 8010b78:	f000 fa82 	bl	8011080 <UART_Receive_IT>
      return;
 8010b7c:	e0d0      	b.n	8010d20 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8010b7e:	693b      	ldr	r3, [r7, #16]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	f000 80b0 	beq.w	8010ce6 <HAL_UART_IRQHandler+0x1ba>
 8010b86:	697b      	ldr	r3, [r7, #20]
 8010b88:	f003 0301 	and.w	r3, r3, #1
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d105      	bne.n	8010b9c <HAL_UART_IRQHandler+0x70>
 8010b90:	69bb      	ldr	r3, [r7, #24]
 8010b92:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	f000 80a5 	beq.w	8010ce6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8010b9c:	69fb      	ldr	r3, [r7, #28]
 8010b9e:	f003 0301 	and.w	r3, r3, #1
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d00a      	beq.n	8010bbc <HAL_UART_IRQHandler+0x90>
 8010ba6:	69bb      	ldr	r3, [r7, #24]
 8010ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d005      	beq.n	8010bbc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bb4:	f043 0201 	orr.w	r2, r3, #1
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010bbc:	69fb      	ldr	r3, [r7, #28]
 8010bbe:	f003 0304 	and.w	r3, r3, #4
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d00a      	beq.n	8010bdc <HAL_UART_IRQHandler+0xb0>
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	f003 0301 	and.w	r3, r3, #1
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d005      	beq.n	8010bdc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bd4:	f043 0202 	orr.w	r2, r3, #2
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010bdc:	69fb      	ldr	r3, [r7, #28]
 8010bde:	f003 0302 	and.w	r3, r3, #2
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d00a      	beq.n	8010bfc <HAL_UART_IRQHandler+0xd0>
 8010be6:	697b      	ldr	r3, [r7, #20]
 8010be8:	f003 0301 	and.w	r3, r3, #1
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d005      	beq.n	8010bfc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bf4:	f043 0204 	orr.w	r2, r3, #4
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8010bfc:	69fb      	ldr	r3, [r7, #28]
 8010bfe:	f003 0308 	and.w	r3, r3, #8
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d00f      	beq.n	8010c26 <HAL_UART_IRQHandler+0xfa>
 8010c06:	69bb      	ldr	r3, [r7, #24]
 8010c08:	f003 0320 	and.w	r3, r3, #32
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d104      	bne.n	8010c1a <HAL_UART_IRQHandler+0xee>
 8010c10:	697b      	ldr	r3, [r7, #20]
 8010c12:	f003 0301 	and.w	r3, r3, #1
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d005      	beq.n	8010c26 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c1e:	f043 0208 	orr.w	r2, r3, #8
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d077      	beq.n	8010d1e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010c2e:	69fb      	ldr	r3, [r7, #28]
 8010c30:	f003 0320 	and.w	r3, r3, #32
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d007      	beq.n	8010c48 <HAL_UART_IRQHandler+0x11c>
 8010c38:	69bb      	ldr	r3, [r7, #24]
 8010c3a:	f003 0320 	and.w	r3, r3, #32
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d002      	beq.n	8010c48 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8010c42:	6878      	ldr	r0, [r7, #4]
 8010c44:	f000 fa1c 	bl	8011080 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	695b      	ldr	r3, [r3, #20]
 8010c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c52:	2b40      	cmp	r3, #64	; 0x40
 8010c54:	bf0c      	ite	eq
 8010c56:	2301      	moveq	r3, #1
 8010c58:	2300      	movne	r3, #0
 8010c5a:	b2db      	uxtb	r3, r3
 8010c5c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c62:	f003 0308 	and.w	r3, r3, #8
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d102      	bne.n	8010c70 <HAL_UART_IRQHandler+0x144>
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d031      	beq.n	8010cd4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	f000 f965 	bl	8010f40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	695b      	ldr	r3, [r3, #20]
 8010c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c80:	2b40      	cmp	r3, #64	; 0x40
 8010c82:	d123      	bne.n	8010ccc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	695a      	ldr	r2, [r3, #20]
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010c92:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d013      	beq.n	8010cc4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ca0:	4a21      	ldr	r2, [pc, #132]	; (8010d28 <HAL_UART_IRQHandler+0x1fc>)
 8010ca2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f7fa fdbd 	bl	800b828 <HAL_DMA_Abort_IT>
 8010cae:	4603      	mov	r3, r0
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d016      	beq.n	8010ce2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010cba:	687a      	ldr	r2, [r7, #4]
 8010cbc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010cbe:	4610      	mov	r0, r2
 8010cc0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010cc2:	e00e      	b.n	8010ce2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010cc4:	6878      	ldr	r0, [r7, #4]
 8010cc6:	f000 f845 	bl	8010d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010cca:	e00a      	b.n	8010ce2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010ccc:	6878      	ldr	r0, [r7, #4]
 8010cce:	f000 f841 	bl	8010d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010cd2:	e006      	b.n	8010ce2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010cd4:	6878      	ldr	r0, [r7, #4]
 8010cd6:	f000 f83d 	bl	8010d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	2200      	movs	r2, #0
 8010cde:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8010ce0:	e01d      	b.n	8010d1e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ce2:	bf00      	nop
    return;
 8010ce4:	e01b      	b.n	8010d1e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010ce6:	69fb      	ldr	r3, [r7, #28]
 8010ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d008      	beq.n	8010d02 <HAL_UART_IRQHandler+0x1d6>
 8010cf0:	69bb      	ldr	r3, [r7, #24]
 8010cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d003      	beq.n	8010d02 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8010cfa:	6878      	ldr	r0, [r7, #4]
 8010cfc:	f000 f952 	bl	8010fa4 <UART_Transmit_IT>
    return;
 8010d00:	e00e      	b.n	8010d20 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010d02:	69fb      	ldr	r3, [r7, #28]
 8010d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d009      	beq.n	8010d20 <HAL_UART_IRQHandler+0x1f4>
 8010d0c:	69bb      	ldr	r3, [r7, #24]
 8010d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d004      	beq.n	8010d20 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8010d16:	6878      	ldr	r0, [r7, #4]
 8010d18:	f000 f99a 	bl	8011050 <UART_EndTransmit_IT>
    return;
 8010d1c:	e000      	b.n	8010d20 <HAL_UART_IRQHandler+0x1f4>
    return;
 8010d1e:	bf00      	nop
  }
}
 8010d20:	3720      	adds	r7, #32
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bd80      	pop	{r7, pc}
 8010d26:	bf00      	nop
 8010d28:	08010f7d 	.word	0x08010f7d

08010d2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010d2c:	b480      	push	{r7}
 8010d2e:	b083      	sub	sp, #12
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8010d34:	bf00      	nop
 8010d36:	370c      	adds	r7, #12
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3e:	4770      	bx	lr

08010d40 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010d40:	b480      	push	{r7}
 8010d42:	b083      	sub	sp, #12
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8010d48:	bf00      	nop
 8010d4a:	370c      	adds	r7, #12
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d52:	4770      	bx	lr

08010d54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010d54:	b480      	push	{r7}
 8010d56:	b083      	sub	sp, #12
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8010d5c:	bf00      	nop
 8010d5e:	370c      	adds	r7, #12
 8010d60:	46bd      	mov	sp, r7
 8010d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d66:	4770      	bx	lr

08010d68 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b084      	sub	sp, #16
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d74:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d11e      	bne.n	8010dc2 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	2200      	movs	r2, #0
 8010d88:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	68da      	ldr	r2, [r3, #12]
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010d98:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	695a      	ldr	r2, [r3, #20]
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	f022 0201 	bic.w	r2, r2, #1
 8010da8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	695a      	ldr	r2, [r3, #20]
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010db8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	2220      	movs	r2, #32
 8010dbe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8010dc2:	68f8      	ldr	r0, [r7, #12]
 8010dc4:	f7f3 fb16 	bl	80043f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010dc8:	bf00      	nop
 8010dca:	3710      	adds	r7, #16
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}

08010dd0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b084      	sub	sp, #16
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ddc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8010dde:	68f8      	ldr	r0, [r7, #12]
 8010de0:	f7ff ffae 	bl	8010d40 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010de4:	bf00      	nop
 8010de6:	3710      	adds	r7, #16
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}

08010dec <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b084      	sub	sp, #16
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8010df4:	2300      	movs	r3, #0
 8010df6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dfc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8010dfe:	68bb      	ldr	r3, [r7, #8]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	695b      	ldr	r3, [r3, #20]
 8010e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e08:	2b80      	cmp	r3, #128	; 0x80
 8010e0a:	bf0c      	ite	eq
 8010e0c:	2301      	moveq	r3, #1
 8010e0e:	2300      	movne	r3, #0
 8010e10:	b2db      	uxtb	r3, r3
 8010e12:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010e1a:	b2db      	uxtb	r3, r3
 8010e1c:	2b21      	cmp	r3, #33	; 0x21
 8010e1e:	d108      	bne.n	8010e32 <UART_DMAError+0x46>
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d005      	beq.n	8010e32 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8010e26:	68bb      	ldr	r3, [r7, #8]
 8010e28:	2200      	movs	r2, #0
 8010e2a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8010e2c:	68b8      	ldr	r0, [r7, #8]
 8010e2e:	f000 f871 	bl	8010f14 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010e32:	68bb      	ldr	r3, [r7, #8]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	695b      	ldr	r3, [r3, #20]
 8010e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e3c:	2b40      	cmp	r3, #64	; 0x40
 8010e3e:	bf0c      	ite	eq
 8010e40:	2301      	moveq	r3, #1
 8010e42:	2300      	movne	r3, #0
 8010e44:	b2db      	uxtb	r3, r3
 8010e46:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8010e48:	68bb      	ldr	r3, [r7, #8]
 8010e4a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010e4e:	b2db      	uxtb	r3, r3
 8010e50:	2b22      	cmp	r3, #34	; 0x22
 8010e52:	d108      	bne.n	8010e66 <UART_DMAError+0x7a>
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d005      	beq.n	8010e66 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8010e5a:	68bb      	ldr	r3, [r7, #8]
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8010e60:	68b8      	ldr	r0, [r7, #8]
 8010e62:	f000 f86d 	bl	8010f40 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010e66:	68bb      	ldr	r3, [r7, #8]
 8010e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e6a:	f043 0210 	orr.w	r2, r3, #16
 8010e6e:	68bb      	ldr	r3, [r7, #8]
 8010e70:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010e72:	68b8      	ldr	r0, [r7, #8]
 8010e74:	f7ff ff6e 	bl	8010d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010e78:	bf00      	nop
 8010e7a:	3710      	adds	r7, #16
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	bd80      	pop	{r7, pc}

08010e80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b084      	sub	sp, #16
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	60f8      	str	r0, [r7, #12]
 8010e88:	60b9      	str	r1, [r7, #8]
 8010e8a:	603b      	str	r3, [r7, #0]
 8010e8c:	4613      	mov	r3, r2
 8010e8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010e90:	e02c      	b.n	8010eec <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010e92:	69bb      	ldr	r3, [r7, #24]
 8010e94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010e98:	d028      	beq.n	8010eec <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8010e9a:	69bb      	ldr	r3, [r7, #24]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d007      	beq.n	8010eb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8010ea0:	f7f9 fb60 	bl	800a564 <HAL_GetTick>
 8010ea4:	4602      	mov	r2, r0
 8010ea6:	683b      	ldr	r3, [r7, #0]
 8010ea8:	1ad3      	subs	r3, r2, r3
 8010eaa:	69ba      	ldr	r2, [r7, #24]
 8010eac:	429a      	cmp	r2, r3
 8010eae:	d21d      	bcs.n	8010eec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	68da      	ldr	r2, [r3, #12]
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010ebe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	695a      	ldr	r2, [r3, #20]
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	f022 0201 	bic.w	r2, r2, #1
 8010ece:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	2220      	movs	r2, #32
 8010ed4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	2220      	movs	r2, #32
 8010edc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8010ee8:	2303      	movs	r3, #3
 8010eea:	e00f      	b.n	8010f0c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	681a      	ldr	r2, [r3, #0]
 8010ef2:	68bb      	ldr	r3, [r7, #8]
 8010ef4:	4013      	ands	r3, r2
 8010ef6:	68ba      	ldr	r2, [r7, #8]
 8010ef8:	429a      	cmp	r2, r3
 8010efa:	bf0c      	ite	eq
 8010efc:	2301      	moveq	r3, #1
 8010efe:	2300      	movne	r3, #0
 8010f00:	b2db      	uxtb	r3, r3
 8010f02:	461a      	mov	r2, r3
 8010f04:	79fb      	ldrb	r3, [r7, #7]
 8010f06:	429a      	cmp	r2, r3
 8010f08:	d0c3      	beq.n	8010e92 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010f0a:	2300      	movs	r3, #0
}
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	3710      	adds	r7, #16
 8010f10:	46bd      	mov	sp, r7
 8010f12:	bd80      	pop	{r7, pc}

08010f14 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010f14:	b480      	push	{r7}
 8010f16:	b083      	sub	sp, #12
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	68da      	ldr	r2, [r3, #12]
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8010f2a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2220      	movs	r2, #32
 8010f30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8010f34:	bf00      	nop
 8010f36:	370c      	adds	r7, #12
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3e:	4770      	bx	lr

08010f40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010f40:	b480      	push	{r7}
 8010f42:	b083      	sub	sp, #12
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	68da      	ldr	r2, [r3, #12]
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010f56:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	695a      	ldr	r2, [r3, #20]
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	f022 0201 	bic.w	r2, r2, #1
 8010f66:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	2220      	movs	r2, #32
 8010f6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8010f70:	bf00      	nop
 8010f72:	370c      	adds	r7, #12
 8010f74:	46bd      	mov	sp, r7
 8010f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7a:	4770      	bx	lr

08010f7c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b084      	sub	sp, #16
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	2200      	movs	r2, #0
 8010f94:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010f96:	68f8      	ldr	r0, [r7, #12]
 8010f98:	f7ff fedc 	bl	8010d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010f9c:	bf00      	nop
 8010f9e:	3710      	adds	r7, #16
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	bd80      	pop	{r7, pc}

08010fa4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010fa4:	b480      	push	{r7}
 8010fa6:	b085      	sub	sp, #20
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010fb2:	b2db      	uxtb	r3, r3
 8010fb4:	2b21      	cmp	r3, #33	; 0x21
 8010fb6:	d144      	bne.n	8011042 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	689b      	ldr	r3, [r3, #8]
 8010fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010fc0:	d11a      	bne.n	8010ff8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	6a1b      	ldr	r3, [r3, #32]
 8010fc6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	881b      	ldrh	r3, [r3, #0]
 8010fcc:	461a      	mov	r2, r3
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010fd6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	691b      	ldr	r3, [r3, #16]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d105      	bne.n	8010fec <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	6a1b      	ldr	r3, [r3, #32]
 8010fe4:	1c9a      	adds	r2, r3, #2
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	621a      	str	r2, [r3, #32]
 8010fea:	e00e      	b.n	801100a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	6a1b      	ldr	r3, [r3, #32]
 8010ff0:	1c5a      	adds	r2, r3, #1
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	621a      	str	r2, [r3, #32]
 8010ff6:	e008      	b.n	801100a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	6a1b      	ldr	r3, [r3, #32]
 8010ffc:	1c59      	adds	r1, r3, #1
 8010ffe:	687a      	ldr	r2, [r7, #4]
 8011000:	6211      	str	r1, [r2, #32]
 8011002:	781a      	ldrb	r2, [r3, #0]
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801100e:	b29b      	uxth	r3, r3
 8011010:	3b01      	subs	r3, #1
 8011012:	b29b      	uxth	r3, r3
 8011014:	687a      	ldr	r2, [r7, #4]
 8011016:	4619      	mov	r1, r3
 8011018:	84d1      	strh	r1, [r2, #38]	; 0x26
 801101a:	2b00      	cmp	r3, #0
 801101c:	d10f      	bne.n	801103e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	68da      	ldr	r2, [r3, #12]
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801102c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	68da      	ldr	r2, [r3, #12]
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801103c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801103e:	2300      	movs	r3, #0
 8011040:	e000      	b.n	8011044 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8011042:	2302      	movs	r3, #2
  }
}
 8011044:	4618      	mov	r0, r3
 8011046:	3714      	adds	r7, #20
 8011048:	46bd      	mov	sp, r7
 801104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104e:	4770      	bx	lr

08011050 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b082      	sub	sp, #8
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	68da      	ldr	r2, [r3, #12]
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011066:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2220      	movs	r2, #32
 801106c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011070:	6878      	ldr	r0, [r7, #4]
 8011072:	f7ff fe5b 	bl	8010d2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8011076:	2300      	movs	r3, #0
}
 8011078:	4618      	mov	r0, r3
 801107a:	3708      	adds	r7, #8
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}

08011080 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8011080:	b580      	push	{r7, lr}
 8011082:	b084      	sub	sp, #16
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801108e:	b2db      	uxtb	r3, r3
 8011090:	2b22      	cmp	r3, #34	; 0x22
 8011092:	d171      	bne.n	8011178 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	689b      	ldr	r3, [r3, #8]
 8011098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801109c:	d123      	bne.n	80110e6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110a2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	691b      	ldr	r3, [r3, #16]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d10e      	bne.n	80110ca <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	685b      	ldr	r3, [r3, #4]
 80110b2:	b29b      	uxth	r3, r3
 80110b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110b8:	b29a      	uxth	r2, r3
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110c2:	1c9a      	adds	r2, r3, #2
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	629a      	str	r2, [r3, #40]	; 0x28
 80110c8:	e029      	b.n	801111e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	685b      	ldr	r3, [r3, #4]
 80110d0:	b29b      	uxth	r3, r3
 80110d2:	b2db      	uxtb	r3, r3
 80110d4:	b29a      	uxth	r2, r3
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110de:	1c5a      	adds	r2, r3, #1
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	629a      	str	r2, [r3, #40]	; 0x28
 80110e4:	e01b      	b.n	801111e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	691b      	ldr	r3, [r3, #16]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d10a      	bne.n	8011104 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	6858      	ldr	r0, [r3, #4]
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110f8:	1c59      	adds	r1, r3, #1
 80110fa:	687a      	ldr	r2, [r7, #4]
 80110fc:	6291      	str	r1, [r2, #40]	; 0x28
 80110fe:	b2c2      	uxtb	r2, r0
 8011100:	701a      	strb	r2, [r3, #0]
 8011102:	e00c      	b.n	801111e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	685b      	ldr	r3, [r3, #4]
 801110a:	b2da      	uxtb	r2, r3
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011110:	1c58      	adds	r0, r3, #1
 8011112:	6879      	ldr	r1, [r7, #4]
 8011114:	6288      	str	r0, [r1, #40]	; 0x28
 8011116:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801111a:	b2d2      	uxtb	r2, r2
 801111c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011122:	b29b      	uxth	r3, r3
 8011124:	3b01      	subs	r3, #1
 8011126:	b29b      	uxth	r3, r3
 8011128:	687a      	ldr	r2, [r7, #4]
 801112a:	4619      	mov	r1, r3
 801112c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801112e:	2b00      	cmp	r3, #0
 8011130:	d120      	bne.n	8011174 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	68da      	ldr	r2, [r3, #12]
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	f022 0220 	bic.w	r2, r2, #32
 8011140:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	68da      	ldr	r2, [r3, #12]
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011150:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	695a      	ldr	r2, [r3, #20]
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	f022 0201 	bic.w	r2, r2, #1
 8011160:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	2220      	movs	r2, #32
 8011166:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 801116a:	6878      	ldr	r0, [r7, #4]
 801116c:	f7f3 f942 	bl	80043f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8011170:	2300      	movs	r3, #0
 8011172:	e002      	b.n	801117a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8011174:	2300      	movs	r3, #0
 8011176:	e000      	b.n	801117a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8011178:	2302      	movs	r3, #2
  }
}
 801117a:	4618      	mov	r0, r3
 801117c:	3710      	adds	r7, #16
 801117e:	46bd      	mov	sp, r7
 8011180:	bd80      	pop	{r7, pc}
	...

08011184 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011188:	b0bd      	sub	sp, #244	; 0xf4
 801118a:	af00      	add	r7, sp, #0
 801118c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	691b      	ldr	r3, [r3, #16]
 8011198:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801119c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80111a0:	68d9      	ldr	r1, [r3, #12]
 80111a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80111a6:	681a      	ldr	r2, [r3, #0]
 80111a8:	ea40 0301 	orr.w	r3, r0, r1
 80111ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80111ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80111b2:	689a      	ldr	r2, [r3, #8]
 80111b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80111b8:	691b      	ldr	r3, [r3, #16]
 80111ba:	431a      	orrs	r2, r3
 80111bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80111c0:	695b      	ldr	r3, [r3, #20]
 80111c2:	431a      	orrs	r2, r3
 80111c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80111c8:	69db      	ldr	r3, [r3, #28]
 80111ca:	4313      	orrs	r3, r2
 80111cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80111d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	68db      	ldr	r3, [r3, #12]
 80111d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80111dc:	f021 010c 	bic.w	r1, r1, #12
 80111e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80111e4:	681a      	ldr	r2, [r3, #0]
 80111e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80111ea:	430b      	orrs	r3, r1
 80111ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80111ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	695b      	ldr	r3, [r3, #20]
 80111f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80111fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80111fe:	6999      	ldr	r1, [r3, #24]
 8011200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011204:	681a      	ldr	r2, [r3, #0]
 8011206:	ea40 0301 	orr.w	r3, r0, r1
 801120a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801120c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011210:	69db      	ldr	r3, [r3, #28]
 8011212:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011216:	f040 81a5 	bne.w	8011564 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801121a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801121e:	681a      	ldr	r2, [r3, #0]
 8011220:	4bcd      	ldr	r3, [pc, #820]	; (8011558 <UART_SetConfig+0x3d4>)
 8011222:	429a      	cmp	r2, r3
 8011224:	d006      	beq.n	8011234 <UART_SetConfig+0xb0>
 8011226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801122a:	681a      	ldr	r2, [r3, #0]
 801122c:	4bcb      	ldr	r3, [pc, #812]	; (801155c <UART_SetConfig+0x3d8>)
 801122e:	429a      	cmp	r2, r3
 8011230:	f040 80cb 	bne.w	80113ca <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8011234:	f7fd ffe0 	bl	800f1f8 <HAL_RCC_GetPCLK2Freq>
 8011238:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801123c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011240:	461c      	mov	r4, r3
 8011242:	f04f 0500 	mov.w	r5, #0
 8011246:	4622      	mov	r2, r4
 8011248:	462b      	mov	r3, r5
 801124a:	1891      	adds	r1, r2, r2
 801124c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8011250:	415b      	adcs	r3, r3
 8011252:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011256:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801125a:	1912      	adds	r2, r2, r4
 801125c:	eb45 0303 	adc.w	r3, r5, r3
 8011260:	f04f 0000 	mov.w	r0, #0
 8011264:	f04f 0100 	mov.w	r1, #0
 8011268:	00d9      	lsls	r1, r3, #3
 801126a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801126e:	00d0      	lsls	r0, r2, #3
 8011270:	4602      	mov	r2, r0
 8011272:	460b      	mov	r3, r1
 8011274:	1911      	adds	r1, r2, r4
 8011276:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 801127a:	416b      	adcs	r3, r5
 801127c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011284:	685b      	ldr	r3, [r3, #4]
 8011286:	461a      	mov	r2, r3
 8011288:	f04f 0300 	mov.w	r3, #0
 801128c:	1891      	adds	r1, r2, r2
 801128e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8011292:	415b      	adcs	r3, r3
 8011294:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011298:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 801129c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80112a0:	f7ef fcf2 	bl	8000c88 <__aeabi_uldivmod>
 80112a4:	4602      	mov	r2, r0
 80112a6:	460b      	mov	r3, r1
 80112a8:	4bad      	ldr	r3, [pc, #692]	; (8011560 <UART_SetConfig+0x3dc>)
 80112aa:	fba3 2302 	umull	r2, r3, r3, r2
 80112ae:	095b      	lsrs	r3, r3, #5
 80112b0:	011e      	lsls	r6, r3, #4
 80112b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80112b6:	461c      	mov	r4, r3
 80112b8:	f04f 0500 	mov.w	r5, #0
 80112bc:	4622      	mov	r2, r4
 80112be:	462b      	mov	r3, r5
 80112c0:	1891      	adds	r1, r2, r2
 80112c2:	67b9      	str	r1, [r7, #120]	; 0x78
 80112c4:	415b      	adcs	r3, r3
 80112c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80112c8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80112cc:	1912      	adds	r2, r2, r4
 80112ce:	eb45 0303 	adc.w	r3, r5, r3
 80112d2:	f04f 0000 	mov.w	r0, #0
 80112d6:	f04f 0100 	mov.w	r1, #0
 80112da:	00d9      	lsls	r1, r3, #3
 80112dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80112e0:	00d0      	lsls	r0, r2, #3
 80112e2:	4602      	mov	r2, r0
 80112e4:	460b      	mov	r3, r1
 80112e6:	1911      	adds	r1, r2, r4
 80112e8:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80112ec:	416b      	adcs	r3, r5
 80112ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80112f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80112f6:	685b      	ldr	r3, [r3, #4]
 80112f8:	461a      	mov	r2, r3
 80112fa:	f04f 0300 	mov.w	r3, #0
 80112fe:	1891      	adds	r1, r2, r2
 8011300:	6739      	str	r1, [r7, #112]	; 0x70
 8011302:	415b      	adcs	r3, r3
 8011304:	677b      	str	r3, [r7, #116]	; 0x74
 8011306:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801130a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 801130e:	f7ef fcbb 	bl	8000c88 <__aeabi_uldivmod>
 8011312:	4602      	mov	r2, r0
 8011314:	460b      	mov	r3, r1
 8011316:	4b92      	ldr	r3, [pc, #584]	; (8011560 <UART_SetConfig+0x3dc>)
 8011318:	fba3 1302 	umull	r1, r3, r3, r2
 801131c:	095b      	lsrs	r3, r3, #5
 801131e:	2164      	movs	r1, #100	; 0x64
 8011320:	fb01 f303 	mul.w	r3, r1, r3
 8011324:	1ad3      	subs	r3, r2, r3
 8011326:	00db      	lsls	r3, r3, #3
 8011328:	3332      	adds	r3, #50	; 0x32
 801132a:	4a8d      	ldr	r2, [pc, #564]	; (8011560 <UART_SetConfig+0x3dc>)
 801132c:	fba2 2303 	umull	r2, r3, r2, r3
 8011330:	095b      	lsrs	r3, r3, #5
 8011332:	005b      	lsls	r3, r3, #1
 8011334:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011338:	441e      	add	r6, r3
 801133a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801133e:	4618      	mov	r0, r3
 8011340:	f04f 0100 	mov.w	r1, #0
 8011344:	4602      	mov	r2, r0
 8011346:	460b      	mov	r3, r1
 8011348:	1894      	adds	r4, r2, r2
 801134a:	66bc      	str	r4, [r7, #104]	; 0x68
 801134c:	415b      	adcs	r3, r3
 801134e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011350:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8011354:	1812      	adds	r2, r2, r0
 8011356:	eb41 0303 	adc.w	r3, r1, r3
 801135a:	f04f 0400 	mov.w	r4, #0
 801135e:	f04f 0500 	mov.w	r5, #0
 8011362:	00dd      	lsls	r5, r3, #3
 8011364:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8011368:	00d4      	lsls	r4, r2, #3
 801136a:	4622      	mov	r2, r4
 801136c:	462b      	mov	r3, r5
 801136e:	1814      	adds	r4, r2, r0
 8011370:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8011374:	414b      	adcs	r3, r1
 8011376:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801137a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801137e:	685b      	ldr	r3, [r3, #4]
 8011380:	461a      	mov	r2, r3
 8011382:	f04f 0300 	mov.w	r3, #0
 8011386:	1891      	adds	r1, r2, r2
 8011388:	6639      	str	r1, [r7, #96]	; 0x60
 801138a:	415b      	adcs	r3, r3
 801138c:	667b      	str	r3, [r7, #100]	; 0x64
 801138e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8011392:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8011396:	f7ef fc77 	bl	8000c88 <__aeabi_uldivmod>
 801139a:	4602      	mov	r2, r0
 801139c:	460b      	mov	r3, r1
 801139e:	4b70      	ldr	r3, [pc, #448]	; (8011560 <UART_SetConfig+0x3dc>)
 80113a0:	fba3 1302 	umull	r1, r3, r3, r2
 80113a4:	095b      	lsrs	r3, r3, #5
 80113a6:	2164      	movs	r1, #100	; 0x64
 80113a8:	fb01 f303 	mul.w	r3, r1, r3
 80113ac:	1ad3      	subs	r3, r2, r3
 80113ae:	00db      	lsls	r3, r3, #3
 80113b0:	3332      	adds	r3, #50	; 0x32
 80113b2:	4a6b      	ldr	r2, [pc, #428]	; (8011560 <UART_SetConfig+0x3dc>)
 80113b4:	fba2 2303 	umull	r2, r3, r2, r3
 80113b8:	095b      	lsrs	r3, r3, #5
 80113ba:	f003 0207 	and.w	r2, r3, #7
 80113be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	4432      	add	r2, r6
 80113c6:	609a      	str	r2, [r3, #8]
 80113c8:	e26d      	b.n	80118a6 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80113ca:	f7fd ff01 	bl	800f1d0 <HAL_RCC_GetPCLK1Freq>
 80113ce:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80113d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80113d6:	461c      	mov	r4, r3
 80113d8:	f04f 0500 	mov.w	r5, #0
 80113dc:	4622      	mov	r2, r4
 80113de:	462b      	mov	r3, r5
 80113e0:	1891      	adds	r1, r2, r2
 80113e2:	65b9      	str	r1, [r7, #88]	; 0x58
 80113e4:	415b      	adcs	r3, r3
 80113e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80113e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80113ec:	1912      	adds	r2, r2, r4
 80113ee:	eb45 0303 	adc.w	r3, r5, r3
 80113f2:	f04f 0000 	mov.w	r0, #0
 80113f6:	f04f 0100 	mov.w	r1, #0
 80113fa:	00d9      	lsls	r1, r3, #3
 80113fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8011400:	00d0      	lsls	r0, r2, #3
 8011402:	4602      	mov	r2, r0
 8011404:	460b      	mov	r3, r1
 8011406:	1911      	adds	r1, r2, r4
 8011408:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 801140c:	416b      	adcs	r3, r5
 801140e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011416:	685b      	ldr	r3, [r3, #4]
 8011418:	461a      	mov	r2, r3
 801141a:	f04f 0300 	mov.w	r3, #0
 801141e:	1891      	adds	r1, r2, r2
 8011420:	6539      	str	r1, [r7, #80]	; 0x50
 8011422:	415b      	adcs	r3, r3
 8011424:	657b      	str	r3, [r7, #84]	; 0x54
 8011426:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801142a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 801142e:	f7ef fc2b 	bl	8000c88 <__aeabi_uldivmod>
 8011432:	4602      	mov	r2, r0
 8011434:	460b      	mov	r3, r1
 8011436:	4b4a      	ldr	r3, [pc, #296]	; (8011560 <UART_SetConfig+0x3dc>)
 8011438:	fba3 2302 	umull	r2, r3, r3, r2
 801143c:	095b      	lsrs	r3, r3, #5
 801143e:	011e      	lsls	r6, r3, #4
 8011440:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011444:	461c      	mov	r4, r3
 8011446:	f04f 0500 	mov.w	r5, #0
 801144a:	4622      	mov	r2, r4
 801144c:	462b      	mov	r3, r5
 801144e:	1891      	adds	r1, r2, r2
 8011450:	64b9      	str	r1, [r7, #72]	; 0x48
 8011452:	415b      	adcs	r3, r3
 8011454:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011456:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801145a:	1912      	adds	r2, r2, r4
 801145c:	eb45 0303 	adc.w	r3, r5, r3
 8011460:	f04f 0000 	mov.w	r0, #0
 8011464:	f04f 0100 	mov.w	r1, #0
 8011468:	00d9      	lsls	r1, r3, #3
 801146a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801146e:	00d0      	lsls	r0, r2, #3
 8011470:	4602      	mov	r2, r0
 8011472:	460b      	mov	r3, r1
 8011474:	1911      	adds	r1, r2, r4
 8011476:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 801147a:	416b      	adcs	r3, r5
 801147c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8011480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011484:	685b      	ldr	r3, [r3, #4]
 8011486:	461a      	mov	r2, r3
 8011488:	f04f 0300 	mov.w	r3, #0
 801148c:	1891      	adds	r1, r2, r2
 801148e:	6439      	str	r1, [r7, #64]	; 0x40
 8011490:	415b      	adcs	r3, r3
 8011492:	647b      	str	r3, [r7, #68]	; 0x44
 8011494:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011498:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 801149c:	f7ef fbf4 	bl	8000c88 <__aeabi_uldivmod>
 80114a0:	4602      	mov	r2, r0
 80114a2:	460b      	mov	r3, r1
 80114a4:	4b2e      	ldr	r3, [pc, #184]	; (8011560 <UART_SetConfig+0x3dc>)
 80114a6:	fba3 1302 	umull	r1, r3, r3, r2
 80114aa:	095b      	lsrs	r3, r3, #5
 80114ac:	2164      	movs	r1, #100	; 0x64
 80114ae:	fb01 f303 	mul.w	r3, r1, r3
 80114b2:	1ad3      	subs	r3, r2, r3
 80114b4:	00db      	lsls	r3, r3, #3
 80114b6:	3332      	adds	r3, #50	; 0x32
 80114b8:	4a29      	ldr	r2, [pc, #164]	; (8011560 <UART_SetConfig+0x3dc>)
 80114ba:	fba2 2303 	umull	r2, r3, r2, r3
 80114be:	095b      	lsrs	r3, r3, #5
 80114c0:	005b      	lsls	r3, r3, #1
 80114c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80114c6:	441e      	add	r6, r3
 80114c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80114cc:	4618      	mov	r0, r3
 80114ce:	f04f 0100 	mov.w	r1, #0
 80114d2:	4602      	mov	r2, r0
 80114d4:	460b      	mov	r3, r1
 80114d6:	1894      	adds	r4, r2, r2
 80114d8:	63bc      	str	r4, [r7, #56]	; 0x38
 80114da:	415b      	adcs	r3, r3
 80114dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80114de:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80114e2:	1812      	adds	r2, r2, r0
 80114e4:	eb41 0303 	adc.w	r3, r1, r3
 80114e8:	f04f 0400 	mov.w	r4, #0
 80114ec:	f04f 0500 	mov.w	r5, #0
 80114f0:	00dd      	lsls	r5, r3, #3
 80114f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80114f6:	00d4      	lsls	r4, r2, #3
 80114f8:	4622      	mov	r2, r4
 80114fa:	462b      	mov	r3, r5
 80114fc:	1814      	adds	r4, r2, r0
 80114fe:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8011502:	414b      	adcs	r3, r1
 8011504:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801150c:	685b      	ldr	r3, [r3, #4]
 801150e:	461a      	mov	r2, r3
 8011510:	f04f 0300 	mov.w	r3, #0
 8011514:	1891      	adds	r1, r2, r2
 8011516:	6339      	str	r1, [r7, #48]	; 0x30
 8011518:	415b      	adcs	r3, r3
 801151a:	637b      	str	r3, [r7, #52]	; 0x34
 801151c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8011520:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8011524:	f7ef fbb0 	bl	8000c88 <__aeabi_uldivmod>
 8011528:	4602      	mov	r2, r0
 801152a:	460b      	mov	r3, r1
 801152c:	4b0c      	ldr	r3, [pc, #48]	; (8011560 <UART_SetConfig+0x3dc>)
 801152e:	fba3 1302 	umull	r1, r3, r3, r2
 8011532:	095b      	lsrs	r3, r3, #5
 8011534:	2164      	movs	r1, #100	; 0x64
 8011536:	fb01 f303 	mul.w	r3, r1, r3
 801153a:	1ad3      	subs	r3, r2, r3
 801153c:	00db      	lsls	r3, r3, #3
 801153e:	3332      	adds	r3, #50	; 0x32
 8011540:	4a07      	ldr	r2, [pc, #28]	; (8011560 <UART_SetConfig+0x3dc>)
 8011542:	fba2 2303 	umull	r2, r3, r2, r3
 8011546:	095b      	lsrs	r3, r3, #5
 8011548:	f003 0207 	and.w	r2, r3, #7
 801154c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	4432      	add	r2, r6
 8011554:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8011556:	e1a6      	b.n	80118a6 <UART_SetConfig+0x722>
 8011558:	40011000 	.word	0x40011000
 801155c:	40011400 	.word	0x40011400
 8011560:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011568:	681a      	ldr	r2, [r3, #0]
 801156a:	4bd1      	ldr	r3, [pc, #836]	; (80118b0 <UART_SetConfig+0x72c>)
 801156c:	429a      	cmp	r2, r3
 801156e:	d006      	beq.n	801157e <UART_SetConfig+0x3fa>
 8011570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011574:	681a      	ldr	r2, [r3, #0]
 8011576:	4bcf      	ldr	r3, [pc, #828]	; (80118b4 <UART_SetConfig+0x730>)
 8011578:	429a      	cmp	r2, r3
 801157a:	f040 80ca 	bne.w	8011712 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 801157e:	f7fd fe3b 	bl	800f1f8 <HAL_RCC_GetPCLK2Freq>
 8011582:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011586:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801158a:	461c      	mov	r4, r3
 801158c:	f04f 0500 	mov.w	r5, #0
 8011590:	4622      	mov	r2, r4
 8011592:	462b      	mov	r3, r5
 8011594:	1891      	adds	r1, r2, r2
 8011596:	62b9      	str	r1, [r7, #40]	; 0x28
 8011598:	415b      	adcs	r3, r3
 801159a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801159c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80115a0:	1912      	adds	r2, r2, r4
 80115a2:	eb45 0303 	adc.w	r3, r5, r3
 80115a6:	f04f 0000 	mov.w	r0, #0
 80115aa:	f04f 0100 	mov.w	r1, #0
 80115ae:	00d9      	lsls	r1, r3, #3
 80115b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80115b4:	00d0      	lsls	r0, r2, #3
 80115b6:	4602      	mov	r2, r0
 80115b8:	460b      	mov	r3, r1
 80115ba:	eb12 0a04 	adds.w	sl, r2, r4
 80115be:	eb43 0b05 	adc.w	fp, r3, r5
 80115c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80115c6:	685b      	ldr	r3, [r3, #4]
 80115c8:	4618      	mov	r0, r3
 80115ca:	f04f 0100 	mov.w	r1, #0
 80115ce:	f04f 0200 	mov.w	r2, #0
 80115d2:	f04f 0300 	mov.w	r3, #0
 80115d6:	008b      	lsls	r3, r1, #2
 80115d8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80115dc:	0082      	lsls	r2, r0, #2
 80115de:	4650      	mov	r0, sl
 80115e0:	4659      	mov	r1, fp
 80115e2:	f7ef fb51 	bl	8000c88 <__aeabi_uldivmod>
 80115e6:	4602      	mov	r2, r0
 80115e8:	460b      	mov	r3, r1
 80115ea:	4bb3      	ldr	r3, [pc, #716]	; (80118b8 <UART_SetConfig+0x734>)
 80115ec:	fba3 2302 	umull	r2, r3, r3, r2
 80115f0:	095b      	lsrs	r3, r3, #5
 80115f2:	011e      	lsls	r6, r3, #4
 80115f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80115f8:	4618      	mov	r0, r3
 80115fa:	f04f 0100 	mov.w	r1, #0
 80115fe:	4602      	mov	r2, r0
 8011600:	460b      	mov	r3, r1
 8011602:	1894      	adds	r4, r2, r2
 8011604:	623c      	str	r4, [r7, #32]
 8011606:	415b      	adcs	r3, r3
 8011608:	627b      	str	r3, [r7, #36]	; 0x24
 801160a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801160e:	1812      	adds	r2, r2, r0
 8011610:	eb41 0303 	adc.w	r3, r1, r3
 8011614:	f04f 0400 	mov.w	r4, #0
 8011618:	f04f 0500 	mov.w	r5, #0
 801161c:	00dd      	lsls	r5, r3, #3
 801161e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8011622:	00d4      	lsls	r4, r2, #3
 8011624:	4622      	mov	r2, r4
 8011626:	462b      	mov	r3, r5
 8011628:	1814      	adds	r4, r2, r0
 801162a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 801162e:	414b      	adcs	r3, r1
 8011630:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011638:	685b      	ldr	r3, [r3, #4]
 801163a:	4618      	mov	r0, r3
 801163c:	f04f 0100 	mov.w	r1, #0
 8011640:	f04f 0200 	mov.w	r2, #0
 8011644:	f04f 0300 	mov.w	r3, #0
 8011648:	008b      	lsls	r3, r1, #2
 801164a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801164e:	0082      	lsls	r2, r0, #2
 8011650:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8011654:	f7ef fb18 	bl	8000c88 <__aeabi_uldivmod>
 8011658:	4602      	mov	r2, r0
 801165a:	460b      	mov	r3, r1
 801165c:	4b96      	ldr	r3, [pc, #600]	; (80118b8 <UART_SetConfig+0x734>)
 801165e:	fba3 1302 	umull	r1, r3, r3, r2
 8011662:	095b      	lsrs	r3, r3, #5
 8011664:	2164      	movs	r1, #100	; 0x64
 8011666:	fb01 f303 	mul.w	r3, r1, r3
 801166a:	1ad3      	subs	r3, r2, r3
 801166c:	011b      	lsls	r3, r3, #4
 801166e:	3332      	adds	r3, #50	; 0x32
 8011670:	4a91      	ldr	r2, [pc, #580]	; (80118b8 <UART_SetConfig+0x734>)
 8011672:	fba2 2303 	umull	r2, r3, r2, r3
 8011676:	095b      	lsrs	r3, r3, #5
 8011678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801167c:	441e      	add	r6, r3
 801167e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011682:	4618      	mov	r0, r3
 8011684:	f04f 0100 	mov.w	r1, #0
 8011688:	4602      	mov	r2, r0
 801168a:	460b      	mov	r3, r1
 801168c:	1894      	adds	r4, r2, r2
 801168e:	61bc      	str	r4, [r7, #24]
 8011690:	415b      	adcs	r3, r3
 8011692:	61fb      	str	r3, [r7, #28]
 8011694:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011698:	1812      	adds	r2, r2, r0
 801169a:	eb41 0303 	adc.w	r3, r1, r3
 801169e:	f04f 0400 	mov.w	r4, #0
 80116a2:	f04f 0500 	mov.w	r5, #0
 80116a6:	00dd      	lsls	r5, r3, #3
 80116a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80116ac:	00d4      	lsls	r4, r2, #3
 80116ae:	4622      	mov	r2, r4
 80116b0:	462b      	mov	r3, r5
 80116b2:	1814      	adds	r4, r2, r0
 80116b4:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80116b8:	414b      	adcs	r3, r1
 80116ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80116be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80116c2:	685b      	ldr	r3, [r3, #4]
 80116c4:	4618      	mov	r0, r3
 80116c6:	f04f 0100 	mov.w	r1, #0
 80116ca:	f04f 0200 	mov.w	r2, #0
 80116ce:	f04f 0300 	mov.w	r3, #0
 80116d2:	008b      	lsls	r3, r1, #2
 80116d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80116d8:	0082      	lsls	r2, r0, #2
 80116da:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80116de:	f7ef fad3 	bl	8000c88 <__aeabi_uldivmod>
 80116e2:	4602      	mov	r2, r0
 80116e4:	460b      	mov	r3, r1
 80116e6:	4b74      	ldr	r3, [pc, #464]	; (80118b8 <UART_SetConfig+0x734>)
 80116e8:	fba3 1302 	umull	r1, r3, r3, r2
 80116ec:	095b      	lsrs	r3, r3, #5
 80116ee:	2164      	movs	r1, #100	; 0x64
 80116f0:	fb01 f303 	mul.w	r3, r1, r3
 80116f4:	1ad3      	subs	r3, r2, r3
 80116f6:	011b      	lsls	r3, r3, #4
 80116f8:	3332      	adds	r3, #50	; 0x32
 80116fa:	4a6f      	ldr	r2, [pc, #444]	; (80118b8 <UART_SetConfig+0x734>)
 80116fc:	fba2 2303 	umull	r2, r3, r2, r3
 8011700:	095b      	lsrs	r3, r3, #5
 8011702:	f003 020f 	and.w	r2, r3, #15
 8011706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	4432      	add	r2, r6
 801170e:	609a      	str	r2, [r3, #8]
 8011710:	e0c9      	b.n	80118a6 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8011712:	f7fd fd5d 	bl	800f1d0 <HAL_RCC_GetPCLK1Freq>
 8011716:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801171a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801171e:	461c      	mov	r4, r3
 8011720:	f04f 0500 	mov.w	r5, #0
 8011724:	4622      	mov	r2, r4
 8011726:	462b      	mov	r3, r5
 8011728:	1891      	adds	r1, r2, r2
 801172a:	6139      	str	r1, [r7, #16]
 801172c:	415b      	adcs	r3, r3
 801172e:	617b      	str	r3, [r7, #20]
 8011730:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011734:	1912      	adds	r2, r2, r4
 8011736:	eb45 0303 	adc.w	r3, r5, r3
 801173a:	f04f 0000 	mov.w	r0, #0
 801173e:	f04f 0100 	mov.w	r1, #0
 8011742:	00d9      	lsls	r1, r3, #3
 8011744:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8011748:	00d0      	lsls	r0, r2, #3
 801174a:	4602      	mov	r2, r0
 801174c:	460b      	mov	r3, r1
 801174e:	eb12 0804 	adds.w	r8, r2, r4
 8011752:	eb43 0905 	adc.w	r9, r3, r5
 8011756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801175a:	685b      	ldr	r3, [r3, #4]
 801175c:	4618      	mov	r0, r3
 801175e:	f04f 0100 	mov.w	r1, #0
 8011762:	f04f 0200 	mov.w	r2, #0
 8011766:	f04f 0300 	mov.w	r3, #0
 801176a:	008b      	lsls	r3, r1, #2
 801176c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8011770:	0082      	lsls	r2, r0, #2
 8011772:	4640      	mov	r0, r8
 8011774:	4649      	mov	r1, r9
 8011776:	f7ef fa87 	bl	8000c88 <__aeabi_uldivmod>
 801177a:	4602      	mov	r2, r0
 801177c:	460b      	mov	r3, r1
 801177e:	4b4e      	ldr	r3, [pc, #312]	; (80118b8 <UART_SetConfig+0x734>)
 8011780:	fba3 2302 	umull	r2, r3, r3, r2
 8011784:	095b      	lsrs	r3, r3, #5
 8011786:	011e      	lsls	r6, r3, #4
 8011788:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801178c:	4618      	mov	r0, r3
 801178e:	f04f 0100 	mov.w	r1, #0
 8011792:	4602      	mov	r2, r0
 8011794:	460b      	mov	r3, r1
 8011796:	1894      	adds	r4, r2, r2
 8011798:	60bc      	str	r4, [r7, #8]
 801179a:	415b      	adcs	r3, r3
 801179c:	60fb      	str	r3, [r7, #12]
 801179e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80117a2:	1812      	adds	r2, r2, r0
 80117a4:	eb41 0303 	adc.w	r3, r1, r3
 80117a8:	f04f 0400 	mov.w	r4, #0
 80117ac:	f04f 0500 	mov.w	r5, #0
 80117b0:	00dd      	lsls	r5, r3, #3
 80117b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80117b6:	00d4      	lsls	r4, r2, #3
 80117b8:	4622      	mov	r2, r4
 80117ba:	462b      	mov	r3, r5
 80117bc:	1814      	adds	r4, r2, r0
 80117be:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80117c2:	414b      	adcs	r3, r1
 80117c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80117c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80117cc:	685b      	ldr	r3, [r3, #4]
 80117ce:	4618      	mov	r0, r3
 80117d0:	f04f 0100 	mov.w	r1, #0
 80117d4:	f04f 0200 	mov.w	r2, #0
 80117d8:	f04f 0300 	mov.w	r3, #0
 80117dc:	008b      	lsls	r3, r1, #2
 80117de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80117e2:	0082      	lsls	r2, r0, #2
 80117e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80117e8:	f7ef fa4e 	bl	8000c88 <__aeabi_uldivmod>
 80117ec:	4602      	mov	r2, r0
 80117ee:	460b      	mov	r3, r1
 80117f0:	4b31      	ldr	r3, [pc, #196]	; (80118b8 <UART_SetConfig+0x734>)
 80117f2:	fba3 1302 	umull	r1, r3, r3, r2
 80117f6:	095b      	lsrs	r3, r3, #5
 80117f8:	2164      	movs	r1, #100	; 0x64
 80117fa:	fb01 f303 	mul.w	r3, r1, r3
 80117fe:	1ad3      	subs	r3, r2, r3
 8011800:	011b      	lsls	r3, r3, #4
 8011802:	3332      	adds	r3, #50	; 0x32
 8011804:	4a2c      	ldr	r2, [pc, #176]	; (80118b8 <UART_SetConfig+0x734>)
 8011806:	fba2 2303 	umull	r2, r3, r2, r3
 801180a:	095b      	lsrs	r3, r3, #5
 801180c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011810:	441e      	add	r6, r3
 8011812:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011816:	4618      	mov	r0, r3
 8011818:	f04f 0100 	mov.w	r1, #0
 801181c:	4602      	mov	r2, r0
 801181e:	460b      	mov	r3, r1
 8011820:	1894      	adds	r4, r2, r2
 8011822:	603c      	str	r4, [r7, #0]
 8011824:	415b      	adcs	r3, r3
 8011826:	607b      	str	r3, [r7, #4]
 8011828:	e9d7 2300 	ldrd	r2, r3, [r7]
 801182c:	1812      	adds	r2, r2, r0
 801182e:	eb41 0303 	adc.w	r3, r1, r3
 8011832:	f04f 0400 	mov.w	r4, #0
 8011836:	f04f 0500 	mov.w	r5, #0
 801183a:	00dd      	lsls	r5, r3, #3
 801183c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8011840:	00d4      	lsls	r4, r2, #3
 8011842:	4622      	mov	r2, r4
 8011844:	462b      	mov	r3, r5
 8011846:	1814      	adds	r4, r2, r0
 8011848:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 801184c:	414b      	adcs	r3, r1
 801184e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011856:	685b      	ldr	r3, [r3, #4]
 8011858:	4618      	mov	r0, r3
 801185a:	f04f 0100 	mov.w	r1, #0
 801185e:	f04f 0200 	mov.w	r2, #0
 8011862:	f04f 0300 	mov.w	r3, #0
 8011866:	008b      	lsls	r3, r1, #2
 8011868:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801186c:	0082      	lsls	r2, r0, #2
 801186e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8011872:	f7ef fa09 	bl	8000c88 <__aeabi_uldivmod>
 8011876:	4602      	mov	r2, r0
 8011878:	460b      	mov	r3, r1
 801187a:	4b0f      	ldr	r3, [pc, #60]	; (80118b8 <UART_SetConfig+0x734>)
 801187c:	fba3 1302 	umull	r1, r3, r3, r2
 8011880:	095b      	lsrs	r3, r3, #5
 8011882:	2164      	movs	r1, #100	; 0x64
 8011884:	fb01 f303 	mul.w	r3, r1, r3
 8011888:	1ad3      	subs	r3, r2, r3
 801188a:	011b      	lsls	r3, r3, #4
 801188c:	3332      	adds	r3, #50	; 0x32
 801188e:	4a0a      	ldr	r2, [pc, #40]	; (80118b8 <UART_SetConfig+0x734>)
 8011890:	fba2 2303 	umull	r2, r3, r2, r3
 8011894:	095b      	lsrs	r3, r3, #5
 8011896:	f003 020f 	and.w	r2, r3, #15
 801189a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	4432      	add	r2, r6
 80118a2:	609a      	str	r2, [r3, #8]
}
 80118a4:	e7ff      	b.n	80118a6 <UART_SetConfig+0x722>
 80118a6:	bf00      	nop
 80118a8:	37f4      	adds	r7, #244	; 0xf4
 80118aa:	46bd      	mov	sp, r7
 80118ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118b0:	40011000 	.word	0x40011000
 80118b4:	40011400 	.word	0x40011400
 80118b8:	51eb851f 	.word	0x51eb851f

080118bc <__NVIC_SetPriority>:
{
 80118bc:	b480      	push	{r7}
 80118be:	b083      	sub	sp, #12
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	4603      	mov	r3, r0
 80118c4:	6039      	str	r1, [r7, #0]
 80118c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80118c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	db0a      	blt.n	80118e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80118d0:	683b      	ldr	r3, [r7, #0]
 80118d2:	b2da      	uxtb	r2, r3
 80118d4:	490c      	ldr	r1, [pc, #48]	; (8011908 <__NVIC_SetPriority+0x4c>)
 80118d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80118da:	0112      	lsls	r2, r2, #4
 80118dc:	b2d2      	uxtb	r2, r2
 80118de:	440b      	add	r3, r1
 80118e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80118e4:	e00a      	b.n	80118fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80118e6:	683b      	ldr	r3, [r7, #0]
 80118e8:	b2da      	uxtb	r2, r3
 80118ea:	4908      	ldr	r1, [pc, #32]	; (801190c <__NVIC_SetPriority+0x50>)
 80118ec:	79fb      	ldrb	r3, [r7, #7]
 80118ee:	f003 030f 	and.w	r3, r3, #15
 80118f2:	3b04      	subs	r3, #4
 80118f4:	0112      	lsls	r2, r2, #4
 80118f6:	b2d2      	uxtb	r2, r2
 80118f8:	440b      	add	r3, r1
 80118fa:	761a      	strb	r2, [r3, #24]
}
 80118fc:	bf00      	nop
 80118fe:	370c      	adds	r7, #12
 8011900:	46bd      	mov	sp, r7
 8011902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011906:	4770      	bx	lr
 8011908:	e000e100 	.word	0xe000e100
 801190c:	e000ed00 	.word	0xe000ed00

08011910 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8011910:	b580      	push	{r7, lr}
 8011912:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8011914:	4b05      	ldr	r3, [pc, #20]	; (801192c <SysTick_Handler+0x1c>)
 8011916:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8011918:	f002 fada 	bl	8013ed0 <xTaskGetSchedulerState>
 801191c:	4603      	mov	r3, r0
 801191e:	2b01      	cmp	r3, #1
 8011920:	d001      	beq.n	8011926 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8011922:	f003 f9c1 	bl	8014ca8 <xPortSysTickHandler>
  }
}
 8011926:	bf00      	nop
 8011928:	bd80      	pop	{r7, pc}
 801192a:	bf00      	nop
 801192c:	e000e010 	.word	0xe000e010

08011930 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011930:	b580      	push	{r7, lr}
 8011932:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8011934:	2100      	movs	r1, #0
 8011936:	f06f 0004 	mvn.w	r0, #4
 801193a:	f7ff ffbf 	bl	80118bc <__NVIC_SetPriority>
#endif
}
 801193e:	bf00      	nop
 8011940:	bd80      	pop	{r7, pc}
	...

08011944 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011944:	b480      	push	{r7}
 8011946:	b083      	sub	sp, #12
 8011948:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801194a:	f3ef 8305 	mrs	r3, IPSR
 801194e:	603b      	str	r3, [r7, #0]
  return(result);
 8011950:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011952:	2b00      	cmp	r3, #0
 8011954:	d003      	beq.n	801195e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8011956:	f06f 0305 	mvn.w	r3, #5
 801195a:	607b      	str	r3, [r7, #4]
 801195c:	e00c      	b.n	8011978 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801195e:	4b0a      	ldr	r3, [pc, #40]	; (8011988 <osKernelInitialize+0x44>)
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d105      	bne.n	8011972 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8011966:	4b08      	ldr	r3, [pc, #32]	; (8011988 <osKernelInitialize+0x44>)
 8011968:	2201      	movs	r2, #1
 801196a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801196c:	2300      	movs	r3, #0
 801196e:	607b      	str	r3, [r7, #4]
 8011970:	e002      	b.n	8011978 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8011972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011976:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011978:	687b      	ldr	r3, [r7, #4]
}
 801197a:	4618      	mov	r0, r3
 801197c:	370c      	adds	r7, #12
 801197e:	46bd      	mov	sp, r7
 8011980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011984:	4770      	bx	lr
 8011986:	bf00      	nop
 8011988:	20001840 	.word	0x20001840

0801198c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801198c:	b580      	push	{r7, lr}
 801198e:	b082      	sub	sp, #8
 8011990:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011992:	f3ef 8305 	mrs	r3, IPSR
 8011996:	603b      	str	r3, [r7, #0]
  return(result);
 8011998:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801199a:	2b00      	cmp	r3, #0
 801199c:	d003      	beq.n	80119a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 801199e:	f06f 0305 	mvn.w	r3, #5
 80119a2:	607b      	str	r3, [r7, #4]
 80119a4:	e010      	b.n	80119c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80119a6:	4b0b      	ldr	r3, [pc, #44]	; (80119d4 <osKernelStart+0x48>)
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	2b01      	cmp	r3, #1
 80119ac:	d109      	bne.n	80119c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80119ae:	f7ff ffbf 	bl	8011930 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80119b2:	4b08      	ldr	r3, [pc, #32]	; (80119d4 <osKernelStart+0x48>)
 80119b4:	2202      	movs	r2, #2
 80119b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80119b8:	f001 fe42 	bl	8013640 <vTaskStartScheduler>
      stat = osOK;
 80119bc:	2300      	movs	r3, #0
 80119be:	607b      	str	r3, [r7, #4]
 80119c0:	e002      	b.n	80119c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80119c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80119c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80119c8:	687b      	ldr	r3, [r7, #4]
}
 80119ca:	4618      	mov	r0, r3
 80119cc:	3708      	adds	r7, #8
 80119ce:	46bd      	mov	sp, r7
 80119d0:	bd80      	pop	{r7, pc}
 80119d2:	bf00      	nop
 80119d4:	20001840 	.word	0x20001840

080119d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80119d8:	b580      	push	{r7, lr}
 80119da:	b08e      	sub	sp, #56	; 0x38
 80119dc:	af04      	add	r7, sp, #16
 80119de:	60f8      	str	r0, [r7, #12]
 80119e0:	60b9      	str	r1, [r7, #8]
 80119e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80119e4:	2300      	movs	r3, #0
 80119e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80119e8:	f3ef 8305 	mrs	r3, IPSR
 80119ec:	617b      	str	r3, [r7, #20]
  return(result);
 80119ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d17e      	bne.n	8011af2 <osThreadNew+0x11a>
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d07b      	beq.n	8011af2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80119fa:	2380      	movs	r3, #128	; 0x80
 80119fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80119fe:	2318      	movs	r3, #24
 8011a00:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8011a02:	2300      	movs	r3, #0
 8011a04:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8011a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a0a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d045      	beq.n	8011a9e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d002      	beq.n	8011a20 <osThreadNew+0x48>
        name = attr->name;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	699b      	ldr	r3, [r3, #24]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d002      	beq.n	8011a2e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	699b      	ldr	r3, [r3, #24]
 8011a2c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011a2e:	69fb      	ldr	r3, [r7, #28]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d008      	beq.n	8011a46 <osThreadNew+0x6e>
 8011a34:	69fb      	ldr	r3, [r7, #28]
 8011a36:	2b38      	cmp	r3, #56	; 0x38
 8011a38:	d805      	bhi.n	8011a46 <osThreadNew+0x6e>
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	685b      	ldr	r3, [r3, #4]
 8011a3e:	f003 0301 	and.w	r3, r3, #1
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d001      	beq.n	8011a4a <osThreadNew+0x72>
        return (NULL);
 8011a46:	2300      	movs	r3, #0
 8011a48:	e054      	b.n	8011af4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	695b      	ldr	r3, [r3, #20]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d003      	beq.n	8011a5a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	695b      	ldr	r3, [r3, #20]
 8011a56:	089b      	lsrs	r3, r3, #2
 8011a58:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	689b      	ldr	r3, [r3, #8]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d00e      	beq.n	8011a80 <osThreadNew+0xa8>
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	68db      	ldr	r3, [r3, #12]
 8011a66:	2b5b      	cmp	r3, #91	; 0x5b
 8011a68:	d90a      	bls.n	8011a80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d006      	beq.n	8011a80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	695b      	ldr	r3, [r3, #20]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d002      	beq.n	8011a80 <osThreadNew+0xa8>
        mem = 1;
 8011a7a:	2301      	movs	r3, #1
 8011a7c:	61bb      	str	r3, [r7, #24]
 8011a7e:	e010      	b.n	8011aa2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	689b      	ldr	r3, [r3, #8]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d10c      	bne.n	8011aa2 <osThreadNew+0xca>
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	68db      	ldr	r3, [r3, #12]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d108      	bne.n	8011aa2 <osThreadNew+0xca>
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	691b      	ldr	r3, [r3, #16]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d104      	bne.n	8011aa2 <osThreadNew+0xca>
          mem = 0;
 8011a98:	2300      	movs	r3, #0
 8011a9a:	61bb      	str	r3, [r7, #24]
 8011a9c:	e001      	b.n	8011aa2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011aa2:	69bb      	ldr	r3, [r7, #24]
 8011aa4:	2b01      	cmp	r3, #1
 8011aa6:	d110      	bne.n	8011aca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8011aac:	687a      	ldr	r2, [r7, #4]
 8011aae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011ab0:	9202      	str	r2, [sp, #8]
 8011ab2:	9301      	str	r3, [sp, #4]
 8011ab4:	69fb      	ldr	r3, [r7, #28]
 8011ab6:	9300      	str	r3, [sp, #0]
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	6a3a      	ldr	r2, [r7, #32]
 8011abc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011abe:	68f8      	ldr	r0, [r7, #12]
 8011ac0:	f001 fa9a 	bl	8012ff8 <xTaskCreateStatic>
 8011ac4:	4603      	mov	r3, r0
 8011ac6:	613b      	str	r3, [r7, #16]
 8011ac8:	e013      	b.n	8011af2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8011aca:	69bb      	ldr	r3, [r7, #24]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d110      	bne.n	8011af2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011ad0:	6a3b      	ldr	r3, [r7, #32]
 8011ad2:	b29a      	uxth	r2, r3
 8011ad4:	f107 0310 	add.w	r3, r7, #16
 8011ad8:	9301      	str	r3, [sp, #4]
 8011ada:	69fb      	ldr	r3, [r7, #28]
 8011adc:	9300      	str	r3, [sp, #0]
 8011ade:	68bb      	ldr	r3, [r7, #8]
 8011ae0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011ae2:	68f8      	ldr	r0, [r7, #12]
 8011ae4:	f001 fae5 	bl	80130b2 <xTaskCreate>
 8011ae8:	4603      	mov	r3, r0
 8011aea:	2b01      	cmp	r3, #1
 8011aec:	d001      	beq.n	8011af2 <osThreadNew+0x11a>
            hTask = NULL;
 8011aee:	2300      	movs	r3, #0
 8011af0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011af2:	693b      	ldr	r3, [r7, #16]
}
 8011af4:	4618      	mov	r0, r3
 8011af6:	3728      	adds	r7, #40	; 0x28
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd80      	pop	{r7, pc}

08011afc <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b086      	sub	sp, #24
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b08:	f3ef 8305 	mrs	r3, IPSR
 8011b0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8011b0e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d003      	beq.n	8011b1c <osThreadSuspend+0x20>
    stat = osErrorISR;
 8011b14:	f06f 0305 	mvn.w	r3, #5
 8011b18:	617b      	str	r3, [r7, #20]
 8011b1a:	e00b      	b.n	8011b34 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8011b1c:	693b      	ldr	r3, [r7, #16]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d103      	bne.n	8011b2a <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8011b22:	f06f 0303 	mvn.w	r3, #3
 8011b26:	617b      	str	r3, [r7, #20]
 8011b28:	e004      	b.n	8011b34 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8011b2e:	6938      	ldr	r0, [r7, #16]
 8011b30:	f001 fd10 	bl	8013554 <vTaskSuspend>
  }

  return (stat);
 8011b34:	697b      	ldr	r3, [r7, #20]
}
 8011b36:	4618      	mov	r0, r3
 8011b38:	3718      	adds	r7, #24
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	bd80      	pop	{r7, pc}

08011b3e <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8011b3e:	b580      	push	{r7, lr}
 8011b40:	b086      	sub	sp, #24
 8011b42:	af00      	add	r7, sp, #0
 8011b44:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b4a:	f3ef 8305 	mrs	r3, IPSR
 8011b4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8011b50:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d003      	beq.n	8011b5e <osThreadTerminate+0x20>
    stat = osErrorISR;
 8011b56:	f06f 0305 	mvn.w	r3, #5
 8011b5a:	617b      	str	r3, [r7, #20]
 8011b5c:	e017      	b.n	8011b8e <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8011b5e:	693b      	ldr	r3, [r7, #16]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d103      	bne.n	8011b6c <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8011b64:	f06f 0303 	mvn.w	r3, #3
 8011b68:	617b      	str	r3, [r7, #20]
 8011b6a:	e010      	b.n	8011b8e <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8011b6c:	6938      	ldr	r0, [r7, #16]
 8011b6e:	f001 fc8b 	bl	8013488 <eTaskGetState>
 8011b72:	4603      	mov	r3, r0
 8011b74:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8011b76:	7bfb      	ldrb	r3, [r7, #15]
 8011b78:	2b04      	cmp	r3, #4
 8011b7a:	d005      	beq.n	8011b88 <osThreadTerminate+0x4a>
      stat = osOK;
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8011b80:	6938      	ldr	r0, [r7, #16]
 8011b82:	f001 fbdb 	bl	801333c <vTaskDelete>
 8011b86:	e002      	b.n	8011b8e <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8011b88:	f06f 0302 	mvn.w	r3, #2
 8011b8c:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8011b8e:	697b      	ldr	r3, [r7, #20]
}
 8011b90:	4618      	mov	r0, r3
 8011b92:	3718      	adds	r7, #24
 8011b94:	46bd      	mov	sp, r7
 8011b96:	bd80      	pop	{r7, pc}

08011b98 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	b084      	sub	sp, #16
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011ba0:	f3ef 8305 	mrs	r3, IPSR
 8011ba4:	60bb      	str	r3, [r7, #8]
  return(result);
 8011ba6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d003      	beq.n	8011bb4 <osDelay+0x1c>
    stat = osErrorISR;
 8011bac:	f06f 0305 	mvn.w	r3, #5
 8011bb0:	60fb      	str	r3, [r7, #12]
 8011bb2:	e007      	b.n	8011bc4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d002      	beq.n	8011bc4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8011bbe:	6878      	ldr	r0, [r7, #4]
 8011bc0:	f001 fc2e 	bl	8013420 <vTaskDelay>
    }
  }

  return (stat);
 8011bc4:	68fb      	ldr	r3, [r7, #12]
}
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	3710      	adds	r7, #16
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	bd80      	pop	{r7, pc}

08011bce <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8011bce:	b580      	push	{r7, lr}
 8011bd0:	b08a      	sub	sp, #40	; 0x28
 8011bd2:	af02      	add	r7, sp, #8
 8011bd4:	60f8      	str	r0, [r7, #12]
 8011bd6:	60b9      	str	r1, [r7, #8]
 8011bd8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8011bda:	2300      	movs	r3, #0
 8011bdc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011bde:	f3ef 8305 	mrs	r3, IPSR
 8011be2:	613b      	str	r3, [r7, #16]
  return(result);
 8011be4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d175      	bne.n	8011cd6 <osSemaphoreNew+0x108>
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d072      	beq.n	8011cd6 <osSemaphoreNew+0x108>
 8011bf0:	68ba      	ldr	r2, [r7, #8]
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	429a      	cmp	r2, r3
 8011bf6:	d86e      	bhi.n	8011cd6 <osSemaphoreNew+0x108>
    mem = -1;
 8011bf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011bfc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d015      	beq.n	8011c30 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	689b      	ldr	r3, [r3, #8]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d006      	beq.n	8011c1a <osSemaphoreNew+0x4c>
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	68db      	ldr	r3, [r3, #12]
 8011c10:	2b4f      	cmp	r3, #79	; 0x4f
 8011c12:	d902      	bls.n	8011c1a <osSemaphoreNew+0x4c>
        mem = 1;
 8011c14:	2301      	movs	r3, #1
 8011c16:	61bb      	str	r3, [r7, #24]
 8011c18:	e00c      	b.n	8011c34 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	689b      	ldr	r3, [r3, #8]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d108      	bne.n	8011c34 <osSemaphoreNew+0x66>
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	68db      	ldr	r3, [r3, #12]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d104      	bne.n	8011c34 <osSemaphoreNew+0x66>
          mem = 0;
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	61bb      	str	r3, [r7, #24]
 8011c2e:	e001      	b.n	8011c34 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8011c30:	2300      	movs	r3, #0
 8011c32:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8011c34:	69bb      	ldr	r3, [r7, #24]
 8011c36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011c3a:	d04c      	beq.n	8011cd6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	2b01      	cmp	r3, #1
 8011c40:	d128      	bne.n	8011c94 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8011c42:	69bb      	ldr	r3, [r7, #24]
 8011c44:	2b01      	cmp	r3, #1
 8011c46:	d10a      	bne.n	8011c5e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	689b      	ldr	r3, [r3, #8]
 8011c4c:	2203      	movs	r2, #3
 8011c4e:	9200      	str	r2, [sp, #0]
 8011c50:	2200      	movs	r2, #0
 8011c52:	2100      	movs	r1, #0
 8011c54:	2001      	movs	r0, #1
 8011c56:	f000 fa29 	bl	80120ac <xQueueGenericCreateStatic>
 8011c5a:	61f8      	str	r0, [r7, #28]
 8011c5c:	e005      	b.n	8011c6a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8011c5e:	2203      	movs	r2, #3
 8011c60:	2100      	movs	r1, #0
 8011c62:	2001      	movs	r0, #1
 8011c64:	f000 fa9a 	bl	801219c <xQueueGenericCreate>
 8011c68:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8011c6a:	69fb      	ldr	r3, [r7, #28]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d022      	beq.n	8011cb6 <osSemaphoreNew+0xe8>
 8011c70:	68bb      	ldr	r3, [r7, #8]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d01f      	beq.n	8011cb6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011c76:	2300      	movs	r3, #0
 8011c78:	2200      	movs	r2, #0
 8011c7a:	2100      	movs	r1, #0
 8011c7c:	69f8      	ldr	r0, [r7, #28]
 8011c7e:	f000 fb55 	bl	801232c <xQueueGenericSend>
 8011c82:	4603      	mov	r3, r0
 8011c84:	2b01      	cmp	r3, #1
 8011c86:	d016      	beq.n	8011cb6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8011c88:	69f8      	ldr	r0, [r7, #28]
 8011c8a:	f000 ffe1 	bl	8012c50 <vQueueDelete>
            hSemaphore = NULL;
 8011c8e:	2300      	movs	r3, #0
 8011c90:	61fb      	str	r3, [r7, #28]
 8011c92:	e010      	b.n	8011cb6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8011c94:	69bb      	ldr	r3, [r7, #24]
 8011c96:	2b01      	cmp	r3, #1
 8011c98:	d108      	bne.n	8011cac <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	689b      	ldr	r3, [r3, #8]
 8011c9e:	461a      	mov	r2, r3
 8011ca0:	68b9      	ldr	r1, [r7, #8]
 8011ca2:	68f8      	ldr	r0, [r7, #12]
 8011ca4:	f000 fad7 	bl	8012256 <xQueueCreateCountingSemaphoreStatic>
 8011ca8:	61f8      	str	r0, [r7, #28]
 8011caa:	e004      	b.n	8011cb6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8011cac:	68b9      	ldr	r1, [r7, #8]
 8011cae:	68f8      	ldr	r0, [r7, #12]
 8011cb0:	f000 fb08 	bl	80122c4 <xQueueCreateCountingSemaphore>
 8011cb4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8011cb6:	69fb      	ldr	r3, [r7, #28]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d00c      	beq.n	8011cd6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d003      	beq.n	8011cca <osSemaphoreNew+0xfc>
          name = attr->name;
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	617b      	str	r3, [r7, #20]
 8011cc8:	e001      	b.n	8011cce <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8011cca:	2300      	movs	r3, #0
 8011ccc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8011cce:	6979      	ldr	r1, [r7, #20]
 8011cd0:	69f8      	ldr	r0, [r7, #28]
 8011cd2:	f001 f909 	bl	8012ee8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8011cd6:	69fb      	ldr	r3, [r7, #28]
}
 8011cd8:	4618      	mov	r0, r3
 8011cda:	3720      	adds	r7, #32
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	bd80      	pop	{r7, pc}

08011ce0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b086      	sub	sp, #24
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
 8011ce8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011cee:	2300      	movs	r3, #0
 8011cf0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8011cf2:	693b      	ldr	r3, [r7, #16]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d103      	bne.n	8011d00 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8011cf8:	f06f 0303 	mvn.w	r3, #3
 8011cfc:	617b      	str	r3, [r7, #20]
 8011cfe:	e039      	b.n	8011d74 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011d00:	f3ef 8305 	mrs	r3, IPSR
 8011d04:	60fb      	str	r3, [r7, #12]
  return(result);
 8011d06:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d022      	beq.n	8011d52 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8011d0c:	683b      	ldr	r3, [r7, #0]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d003      	beq.n	8011d1a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8011d12:	f06f 0303 	mvn.w	r3, #3
 8011d16:	617b      	str	r3, [r7, #20]
 8011d18:	e02c      	b.n	8011d74 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8011d1e:	f107 0308 	add.w	r3, r7, #8
 8011d22:	461a      	mov	r2, r3
 8011d24:	2100      	movs	r1, #0
 8011d26:	6938      	ldr	r0, [r7, #16]
 8011d28:	f000 ff12 	bl	8012b50 <xQueueReceiveFromISR>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	2b01      	cmp	r3, #1
 8011d30:	d003      	beq.n	8011d3a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8011d32:	f06f 0302 	mvn.w	r3, #2
 8011d36:	617b      	str	r3, [r7, #20]
 8011d38:	e01c      	b.n	8011d74 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8011d3a:	68bb      	ldr	r3, [r7, #8]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d019      	beq.n	8011d74 <osSemaphoreAcquire+0x94>
 8011d40:	4b0f      	ldr	r3, [pc, #60]	; (8011d80 <osSemaphoreAcquire+0xa0>)
 8011d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d46:	601a      	str	r2, [r3, #0]
 8011d48:	f3bf 8f4f 	dsb	sy
 8011d4c:	f3bf 8f6f 	isb	sy
 8011d50:	e010      	b.n	8011d74 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8011d52:	6839      	ldr	r1, [r7, #0]
 8011d54:	6938      	ldr	r0, [r7, #16]
 8011d56:	f000 fdef 	bl	8012938 <xQueueSemaphoreTake>
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	2b01      	cmp	r3, #1
 8011d5e:	d009      	beq.n	8011d74 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8011d60:	683b      	ldr	r3, [r7, #0]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d003      	beq.n	8011d6e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8011d66:	f06f 0301 	mvn.w	r3, #1
 8011d6a:	617b      	str	r3, [r7, #20]
 8011d6c:	e002      	b.n	8011d74 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8011d6e:	f06f 0302 	mvn.w	r3, #2
 8011d72:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8011d74:	697b      	ldr	r3, [r7, #20]
}
 8011d76:	4618      	mov	r0, r3
 8011d78:	3718      	adds	r7, #24
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	bd80      	pop	{r7, pc}
 8011d7e:	bf00      	nop
 8011d80:	e000ed04 	.word	0xe000ed04

08011d84 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b086      	sub	sp, #24
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011d90:	2300      	movs	r3, #0
 8011d92:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8011d94:	693b      	ldr	r3, [r7, #16]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d103      	bne.n	8011da2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8011d9a:	f06f 0303 	mvn.w	r3, #3
 8011d9e:	617b      	str	r3, [r7, #20]
 8011da0:	e02c      	b.n	8011dfc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011da2:	f3ef 8305 	mrs	r3, IPSR
 8011da6:	60fb      	str	r3, [r7, #12]
  return(result);
 8011da8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d01a      	beq.n	8011de4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8011dae:	2300      	movs	r3, #0
 8011db0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011db2:	f107 0308 	add.w	r3, r7, #8
 8011db6:	4619      	mov	r1, r3
 8011db8:	6938      	ldr	r0, [r7, #16]
 8011dba:	f000 fc50 	bl	801265e <xQueueGiveFromISR>
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	2b01      	cmp	r3, #1
 8011dc2:	d003      	beq.n	8011dcc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8011dc4:	f06f 0302 	mvn.w	r3, #2
 8011dc8:	617b      	str	r3, [r7, #20]
 8011dca:	e017      	b.n	8011dfc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8011dcc:	68bb      	ldr	r3, [r7, #8]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d014      	beq.n	8011dfc <osSemaphoreRelease+0x78>
 8011dd2:	4b0d      	ldr	r3, [pc, #52]	; (8011e08 <osSemaphoreRelease+0x84>)
 8011dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011dd8:	601a      	str	r2, [r3, #0]
 8011dda:	f3bf 8f4f 	dsb	sy
 8011dde:	f3bf 8f6f 	isb	sy
 8011de2:	e00b      	b.n	8011dfc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011de4:	2300      	movs	r3, #0
 8011de6:	2200      	movs	r2, #0
 8011de8:	2100      	movs	r1, #0
 8011dea:	6938      	ldr	r0, [r7, #16]
 8011dec:	f000 fa9e 	bl	801232c <xQueueGenericSend>
 8011df0:	4603      	mov	r3, r0
 8011df2:	2b01      	cmp	r3, #1
 8011df4:	d002      	beq.n	8011dfc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8011df6:	f06f 0302 	mvn.w	r3, #2
 8011dfa:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8011dfc:	697b      	ldr	r3, [r7, #20]
}
 8011dfe:	4618      	mov	r0, r3
 8011e00:	3718      	adds	r7, #24
 8011e02:	46bd      	mov	sp, r7
 8011e04:	bd80      	pop	{r7, pc}
 8011e06:	bf00      	nop
 8011e08:	e000ed04 	.word	0xe000ed04

08011e0c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8011e0c:	b480      	push	{r7}
 8011e0e:	b085      	sub	sp, #20
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	60f8      	str	r0, [r7, #12]
 8011e14:	60b9      	str	r1, [r7, #8]
 8011e16:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	4a07      	ldr	r2, [pc, #28]	; (8011e38 <vApplicationGetIdleTaskMemory+0x2c>)
 8011e1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8011e1e:	68bb      	ldr	r3, [r7, #8]
 8011e20:	4a06      	ldr	r2, [pc, #24]	; (8011e3c <vApplicationGetIdleTaskMemory+0x30>)
 8011e22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	2280      	movs	r2, #128	; 0x80
 8011e28:	601a      	str	r2, [r3, #0]
}
 8011e2a:	bf00      	nop
 8011e2c:	3714      	adds	r7, #20
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e34:	4770      	bx	lr
 8011e36:	bf00      	nop
 8011e38:	20001844 	.word	0x20001844
 8011e3c:	200018a0 	.word	0x200018a0

08011e40 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011e40:	b480      	push	{r7}
 8011e42:	b085      	sub	sp, #20
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	60f8      	str	r0, [r7, #12]
 8011e48:	60b9      	str	r1, [r7, #8]
 8011e4a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	4a07      	ldr	r2, [pc, #28]	; (8011e6c <vApplicationGetTimerTaskMemory+0x2c>)
 8011e50:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8011e52:	68bb      	ldr	r3, [r7, #8]
 8011e54:	4a06      	ldr	r2, [pc, #24]	; (8011e70 <vApplicationGetTimerTaskMemory+0x30>)
 8011e56:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011e5e:	601a      	str	r2, [r3, #0]
}
 8011e60:	bf00      	nop
 8011e62:	3714      	adds	r7, #20
 8011e64:	46bd      	mov	sp, r7
 8011e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e6a:	4770      	bx	lr
 8011e6c:	20001aa0 	.word	0x20001aa0
 8011e70:	20001afc 	.word	0x20001afc

08011e74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011e74:	b480      	push	{r7}
 8011e76:	b083      	sub	sp, #12
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	f103 0208 	add.w	r2, r3, #8
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011e8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	f103 0208 	add.w	r2, r3, #8
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	f103 0208 	add.w	r2, r3, #8
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011ea8:	bf00      	nop
 8011eaa:	370c      	adds	r7, #12
 8011eac:	46bd      	mov	sp, r7
 8011eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb2:	4770      	bx	lr

08011eb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011eb4:	b480      	push	{r7}
 8011eb6:	b083      	sub	sp, #12
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011ec2:	bf00      	nop
 8011ec4:	370c      	adds	r7, #12
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ecc:	4770      	bx	lr

08011ece <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011ece:	b480      	push	{r7}
 8011ed0:	b085      	sub	sp, #20
 8011ed2:	af00      	add	r7, sp, #0
 8011ed4:	6078      	str	r0, [r7, #4]
 8011ed6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	685b      	ldr	r3, [r3, #4]
 8011edc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011ede:	683b      	ldr	r3, [r7, #0]
 8011ee0:	68fa      	ldr	r2, [r7, #12]
 8011ee2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	689a      	ldr	r2, [r3, #8]
 8011ee8:	683b      	ldr	r3, [r7, #0]
 8011eea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	689b      	ldr	r3, [r3, #8]
 8011ef0:	683a      	ldr	r2, [r7, #0]
 8011ef2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	683a      	ldr	r2, [r7, #0]
 8011ef8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011efa:	683b      	ldr	r3, [r7, #0]
 8011efc:	687a      	ldr	r2, [r7, #4]
 8011efe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	1c5a      	adds	r2, r3, #1
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	601a      	str	r2, [r3, #0]
}
 8011f0a:	bf00      	nop
 8011f0c:	3714      	adds	r7, #20
 8011f0e:	46bd      	mov	sp, r7
 8011f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f14:	4770      	bx	lr

08011f16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011f16:	b480      	push	{r7}
 8011f18:	b085      	sub	sp, #20
 8011f1a:	af00      	add	r7, sp, #0
 8011f1c:	6078      	str	r0, [r7, #4]
 8011f1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011f20:	683b      	ldr	r3, [r7, #0]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011f26:	68bb      	ldr	r3, [r7, #8]
 8011f28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011f2c:	d103      	bne.n	8011f36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	691b      	ldr	r3, [r3, #16]
 8011f32:	60fb      	str	r3, [r7, #12]
 8011f34:	e00c      	b.n	8011f50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	3308      	adds	r3, #8
 8011f3a:	60fb      	str	r3, [r7, #12]
 8011f3c:	e002      	b.n	8011f44 <vListInsert+0x2e>
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	685b      	ldr	r3, [r3, #4]
 8011f42:	60fb      	str	r3, [r7, #12]
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	685b      	ldr	r3, [r3, #4]
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	68ba      	ldr	r2, [r7, #8]
 8011f4c:	429a      	cmp	r2, r3
 8011f4e:	d2f6      	bcs.n	8011f3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	685a      	ldr	r2, [r3, #4]
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011f58:	683b      	ldr	r3, [r7, #0]
 8011f5a:	685b      	ldr	r3, [r3, #4]
 8011f5c:	683a      	ldr	r2, [r7, #0]
 8011f5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011f60:	683b      	ldr	r3, [r7, #0]
 8011f62:	68fa      	ldr	r2, [r7, #12]
 8011f64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	683a      	ldr	r2, [r7, #0]
 8011f6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011f6c:	683b      	ldr	r3, [r7, #0]
 8011f6e:	687a      	ldr	r2, [r7, #4]
 8011f70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	1c5a      	adds	r2, r3, #1
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	601a      	str	r2, [r3, #0]
}
 8011f7c:	bf00      	nop
 8011f7e:	3714      	adds	r7, #20
 8011f80:	46bd      	mov	sp, r7
 8011f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f86:	4770      	bx	lr

08011f88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011f88:	b480      	push	{r7}
 8011f8a:	b085      	sub	sp, #20
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	691b      	ldr	r3, [r3, #16]
 8011f94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	685b      	ldr	r3, [r3, #4]
 8011f9a:	687a      	ldr	r2, [r7, #4]
 8011f9c:	6892      	ldr	r2, [r2, #8]
 8011f9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	689b      	ldr	r3, [r3, #8]
 8011fa4:	687a      	ldr	r2, [r7, #4]
 8011fa6:	6852      	ldr	r2, [r2, #4]
 8011fa8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	685b      	ldr	r3, [r3, #4]
 8011fae:	687a      	ldr	r2, [r7, #4]
 8011fb0:	429a      	cmp	r2, r3
 8011fb2:	d103      	bne.n	8011fbc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	689a      	ldr	r2, [r3, #8]
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	1e5a      	subs	r2, r3, #1
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	681b      	ldr	r3, [r3, #0]
}
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	3714      	adds	r7, #20
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fda:	4770      	bx	lr

08011fdc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011fdc:	b580      	push	{r7, lr}
 8011fde:	b084      	sub	sp, #16
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	6078      	str	r0, [r7, #4]
 8011fe4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d10a      	bne.n	8012006 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ff4:	f383 8811 	msr	BASEPRI, r3
 8011ff8:	f3bf 8f6f 	isb	sy
 8011ffc:	f3bf 8f4f 	dsb	sy
 8012000:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012002:	bf00      	nop
 8012004:	e7fe      	b.n	8012004 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012006:	f002 fdbd 	bl	8014b84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	681a      	ldr	r2, [r3, #0]
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012012:	68f9      	ldr	r1, [r7, #12]
 8012014:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012016:	fb01 f303 	mul.w	r3, r1, r3
 801201a:	441a      	add	r2, r3
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	2200      	movs	r2, #0
 8012024:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	681a      	ldr	r2, [r3, #0]
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	681a      	ldr	r2, [r3, #0]
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012036:	3b01      	subs	r3, #1
 8012038:	68f9      	ldr	r1, [r7, #12]
 801203a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801203c:	fb01 f303 	mul.w	r3, r1, r3
 8012040:	441a      	add	r2, r3
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	22ff      	movs	r2, #255	; 0xff
 801204a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	22ff      	movs	r2, #255	; 0xff
 8012052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012056:	683b      	ldr	r3, [r7, #0]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d114      	bne.n	8012086 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	691b      	ldr	r3, [r3, #16]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d01a      	beq.n	801209a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	3310      	adds	r3, #16
 8012068:	4618      	mov	r0, r3
 801206a:	f001 fd73 	bl	8013b54 <xTaskRemoveFromEventList>
 801206e:	4603      	mov	r3, r0
 8012070:	2b00      	cmp	r3, #0
 8012072:	d012      	beq.n	801209a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012074:	4b0c      	ldr	r3, [pc, #48]	; (80120a8 <xQueueGenericReset+0xcc>)
 8012076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801207a:	601a      	str	r2, [r3, #0]
 801207c:	f3bf 8f4f 	dsb	sy
 8012080:	f3bf 8f6f 	isb	sy
 8012084:	e009      	b.n	801209a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	3310      	adds	r3, #16
 801208a:	4618      	mov	r0, r3
 801208c:	f7ff fef2 	bl	8011e74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	3324      	adds	r3, #36	; 0x24
 8012094:	4618      	mov	r0, r3
 8012096:	f7ff feed 	bl	8011e74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801209a:	f002 fda3 	bl	8014be4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801209e:	2301      	movs	r3, #1
}
 80120a0:	4618      	mov	r0, r3
 80120a2:	3710      	adds	r7, #16
 80120a4:	46bd      	mov	sp, r7
 80120a6:	bd80      	pop	{r7, pc}
 80120a8:	e000ed04 	.word	0xe000ed04

080120ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b08e      	sub	sp, #56	; 0x38
 80120b0:	af02      	add	r7, sp, #8
 80120b2:	60f8      	str	r0, [r7, #12]
 80120b4:	60b9      	str	r1, [r7, #8]
 80120b6:	607a      	str	r2, [r7, #4]
 80120b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d10a      	bne.n	80120d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80120c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120c4:	f383 8811 	msr	BASEPRI, r3
 80120c8:	f3bf 8f6f 	isb	sy
 80120cc:	f3bf 8f4f 	dsb	sy
 80120d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80120d2:	bf00      	nop
 80120d4:	e7fe      	b.n	80120d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80120d6:	683b      	ldr	r3, [r7, #0]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d10a      	bne.n	80120f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80120dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120e0:	f383 8811 	msr	BASEPRI, r3
 80120e4:	f3bf 8f6f 	isb	sy
 80120e8:	f3bf 8f4f 	dsb	sy
 80120ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80120ee:	bf00      	nop
 80120f0:	e7fe      	b.n	80120f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d002      	beq.n	80120fe <xQueueGenericCreateStatic+0x52>
 80120f8:	68bb      	ldr	r3, [r7, #8]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d001      	beq.n	8012102 <xQueueGenericCreateStatic+0x56>
 80120fe:	2301      	movs	r3, #1
 8012100:	e000      	b.n	8012104 <xQueueGenericCreateStatic+0x58>
 8012102:	2300      	movs	r3, #0
 8012104:	2b00      	cmp	r3, #0
 8012106:	d10a      	bne.n	801211e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8012108:	f04f 0350 	mov.w	r3, #80	; 0x50
 801210c:	f383 8811 	msr	BASEPRI, r3
 8012110:	f3bf 8f6f 	isb	sy
 8012114:	f3bf 8f4f 	dsb	sy
 8012118:	623b      	str	r3, [r7, #32]
}
 801211a:	bf00      	nop
 801211c:	e7fe      	b.n	801211c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d102      	bne.n	801212a <xQueueGenericCreateStatic+0x7e>
 8012124:	68bb      	ldr	r3, [r7, #8]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d101      	bne.n	801212e <xQueueGenericCreateStatic+0x82>
 801212a:	2301      	movs	r3, #1
 801212c:	e000      	b.n	8012130 <xQueueGenericCreateStatic+0x84>
 801212e:	2300      	movs	r3, #0
 8012130:	2b00      	cmp	r3, #0
 8012132:	d10a      	bne.n	801214a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8012134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012138:	f383 8811 	msr	BASEPRI, r3
 801213c:	f3bf 8f6f 	isb	sy
 8012140:	f3bf 8f4f 	dsb	sy
 8012144:	61fb      	str	r3, [r7, #28]
}
 8012146:	bf00      	nop
 8012148:	e7fe      	b.n	8012148 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801214a:	2350      	movs	r3, #80	; 0x50
 801214c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801214e:	697b      	ldr	r3, [r7, #20]
 8012150:	2b50      	cmp	r3, #80	; 0x50
 8012152:	d00a      	beq.n	801216a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012158:	f383 8811 	msr	BASEPRI, r3
 801215c:	f3bf 8f6f 	isb	sy
 8012160:	f3bf 8f4f 	dsb	sy
 8012164:	61bb      	str	r3, [r7, #24]
}
 8012166:	bf00      	nop
 8012168:	e7fe      	b.n	8012168 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801216a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801216c:	683b      	ldr	r3, [r7, #0]
 801216e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012172:	2b00      	cmp	r3, #0
 8012174:	d00d      	beq.n	8012192 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012178:	2201      	movs	r2, #1
 801217a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801217e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012184:	9300      	str	r3, [sp, #0]
 8012186:	4613      	mov	r3, r2
 8012188:	687a      	ldr	r2, [r7, #4]
 801218a:	68b9      	ldr	r1, [r7, #8]
 801218c:	68f8      	ldr	r0, [r7, #12]
 801218e:	f000 f83f 	bl	8012210 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012194:	4618      	mov	r0, r3
 8012196:	3730      	adds	r7, #48	; 0x30
 8012198:	46bd      	mov	sp, r7
 801219a:	bd80      	pop	{r7, pc}

0801219c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801219c:	b580      	push	{r7, lr}
 801219e:	b08a      	sub	sp, #40	; 0x28
 80121a0:	af02      	add	r7, sp, #8
 80121a2:	60f8      	str	r0, [r7, #12]
 80121a4:	60b9      	str	r1, [r7, #8]
 80121a6:	4613      	mov	r3, r2
 80121a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d10a      	bne.n	80121c6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80121b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121b4:	f383 8811 	msr	BASEPRI, r3
 80121b8:	f3bf 8f6f 	isb	sy
 80121bc:	f3bf 8f4f 	dsb	sy
 80121c0:	613b      	str	r3, [r7, #16]
}
 80121c2:	bf00      	nop
 80121c4:	e7fe      	b.n	80121c4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	68ba      	ldr	r2, [r7, #8]
 80121ca:	fb02 f303 	mul.w	r3, r2, r3
 80121ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80121d0:	69fb      	ldr	r3, [r7, #28]
 80121d2:	3350      	adds	r3, #80	; 0x50
 80121d4:	4618      	mov	r0, r3
 80121d6:	f002 fdf7 	bl	8014dc8 <pvPortMalloc>
 80121da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80121dc:	69bb      	ldr	r3, [r7, #24]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d011      	beq.n	8012206 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80121e2:	69bb      	ldr	r3, [r7, #24]
 80121e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80121e6:	697b      	ldr	r3, [r7, #20]
 80121e8:	3350      	adds	r3, #80	; 0x50
 80121ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80121ec:	69bb      	ldr	r3, [r7, #24]
 80121ee:	2200      	movs	r2, #0
 80121f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80121f4:	79fa      	ldrb	r2, [r7, #7]
 80121f6:	69bb      	ldr	r3, [r7, #24]
 80121f8:	9300      	str	r3, [sp, #0]
 80121fa:	4613      	mov	r3, r2
 80121fc:	697a      	ldr	r2, [r7, #20]
 80121fe:	68b9      	ldr	r1, [r7, #8]
 8012200:	68f8      	ldr	r0, [r7, #12]
 8012202:	f000 f805 	bl	8012210 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012206:	69bb      	ldr	r3, [r7, #24]
	}
 8012208:	4618      	mov	r0, r3
 801220a:	3720      	adds	r7, #32
 801220c:	46bd      	mov	sp, r7
 801220e:	bd80      	pop	{r7, pc}

08012210 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012210:	b580      	push	{r7, lr}
 8012212:	b084      	sub	sp, #16
 8012214:	af00      	add	r7, sp, #0
 8012216:	60f8      	str	r0, [r7, #12]
 8012218:	60b9      	str	r1, [r7, #8]
 801221a:	607a      	str	r2, [r7, #4]
 801221c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801221e:	68bb      	ldr	r3, [r7, #8]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d103      	bne.n	801222c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012224:	69bb      	ldr	r3, [r7, #24]
 8012226:	69ba      	ldr	r2, [r7, #24]
 8012228:	601a      	str	r2, [r3, #0]
 801222a:	e002      	b.n	8012232 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801222c:	69bb      	ldr	r3, [r7, #24]
 801222e:	687a      	ldr	r2, [r7, #4]
 8012230:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012232:	69bb      	ldr	r3, [r7, #24]
 8012234:	68fa      	ldr	r2, [r7, #12]
 8012236:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012238:	69bb      	ldr	r3, [r7, #24]
 801223a:	68ba      	ldr	r2, [r7, #8]
 801223c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801223e:	2101      	movs	r1, #1
 8012240:	69b8      	ldr	r0, [r7, #24]
 8012242:	f7ff fecb 	bl	8011fdc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012246:	69bb      	ldr	r3, [r7, #24]
 8012248:	78fa      	ldrb	r2, [r7, #3]
 801224a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801224e:	bf00      	nop
 8012250:	3710      	adds	r7, #16
 8012252:	46bd      	mov	sp, r7
 8012254:	bd80      	pop	{r7, pc}

08012256 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8012256:	b580      	push	{r7, lr}
 8012258:	b08a      	sub	sp, #40	; 0x28
 801225a:	af02      	add	r7, sp, #8
 801225c:	60f8      	str	r0, [r7, #12]
 801225e:	60b9      	str	r1, [r7, #8]
 8012260:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d10a      	bne.n	801227e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8012268:	f04f 0350 	mov.w	r3, #80	; 0x50
 801226c:	f383 8811 	msr	BASEPRI, r3
 8012270:	f3bf 8f6f 	isb	sy
 8012274:	f3bf 8f4f 	dsb	sy
 8012278:	61bb      	str	r3, [r7, #24]
}
 801227a:	bf00      	nop
 801227c:	e7fe      	b.n	801227c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801227e:	68ba      	ldr	r2, [r7, #8]
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	429a      	cmp	r2, r3
 8012284:	d90a      	bls.n	801229c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8012286:	f04f 0350 	mov.w	r3, #80	; 0x50
 801228a:	f383 8811 	msr	BASEPRI, r3
 801228e:	f3bf 8f6f 	isb	sy
 8012292:	f3bf 8f4f 	dsb	sy
 8012296:	617b      	str	r3, [r7, #20]
}
 8012298:	bf00      	nop
 801229a:	e7fe      	b.n	801229a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801229c:	2302      	movs	r3, #2
 801229e:	9300      	str	r3, [sp, #0]
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	2200      	movs	r2, #0
 80122a4:	2100      	movs	r1, #0
 80122a6:	68f8      	ldr	r0, [r7, #12]
 80122a8:	f7ff ff00 	bl	80120ac <xQueueGenericCreateStatic>
 80122ac:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80122ae:	69fb      	ldr	r3, [r7, #28]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d002      	beq.n	80122ba <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80122b4:	69fb      	ldr	r3, [r7, #28]
 80122b6:	68ba      	ldr	r2, [r7, #8]
 80122b8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80122ba:	69fb      	ldr	r3, [r7, #28]
	}
 80122bc:	4618      	mov	r0, r3
 80122be:	3720      	adds	r7, #32
 80122c0:	46bd      	mov	sp, r7
 80122c2:	bd80      	pop	{r7, pc}

080122c4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b086      	sub	sp, #24
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]
 80122cc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d10a      	bne.n	80122ea <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80122d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122d8:	f383 8811 	msr	BASEPRI, r3
 80122dc:	f3bf 8f6f 	isb	sy
 80122e0:	f3bf 8f4f 	dsb	sy
 80122e4:	613b      	str	r3, [r7, #16]
}
 80122e6:	bf00      	nop
 80122e8:	e7fe      	b.n	80122e8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80122ea:	683a      	ldr	r2, [r7, #0]
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	429a      	cmp	r2, r3
 80122f0:	d90a      	bls.n	8012308 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80122f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122f6:	f383 8811 	msr	BASEPRI, r3
 80122fa:	f3bf 8f6f 	isb	sy
 80122fe:	f3bf 8f4f 	dsb	sy
 8012302:	60fb      	str	r3, [r7, #12]
}
 8012304:	bf00      	nop
 8012306:	e7fe      	b.n	8012306 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012308:	2202      	movs	r2, #2
 801230a:	2100      	movs	r1, #0
 801230c:	6878      	ldr	r0, [r7, #4]
 801230e:	f7ff ff45 	bl	801219c <xQueueGenericCreate>
 8012312:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8012314:	697b      	ldr	r3, [r7, #20]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d002      	beq.n	8012320 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801231a:	697b      	ldr	r3, [r7, #20]
 801231c:	683a      	ldr	r2, [r7, #0]
 801231e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8012320:	697b      	ldr	r3, [r7, #20]
	}
 8012322:	4618      	mov	r0, r3
 8012324:	3718      	adds	r7, #24
 8012326:	46bd      	mov	sp, r7
 8012328:	bd80      	pop	{r7, pc}
	...

0801232c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b08e      	sub	sp, #56	; 0x38
 8012330:	af00      	add	r7, sp, #0
 8012332:	60f8      	str	r0, [r7, #12]
 8012334:	60b9      	str	r1, [r7, #8]
 8012336:	607a      	str	r2, [r7, #4]
 8012338:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801233a:	2300      	movs	r3, #0
 801233c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012344:	2b00      	cmp	r3, #0
 8012346:	d10a      	bne.n	801235e <xQueueGenericSend+0x32>
	__asm volatile
 8012348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801234c:	f383 8811 	msr	BASEPRI, r3
 8012350:	f3bf 8f6f 	isb	sy
 8012354:	f3bf 8f4f 	dsb	sy
 8012358:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801235a:	bf00      	nop
 801235c:	e7fe      	b.n	801235c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801235e:	68bb      	ldr	r3, [r7, #8]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d103      	bne.n	801236c <xQueueGenericSend+0x40>
 8012364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012368:	2b00      	cmp	r3, #0
 801236a:	d101      	bne.n	8012370 <xQueueGenericSend+0x44>
 801236c:	2301      	movs	r3, #1
 801236e:	e000      	b.n	8012372 <xQueueGenericSend+0x46>
 8012370:	2300      	movs	r3, #0
 8012372:	2b00      	cmp	r3, #0
 8012374:	d10a      	bne.n	801238c <xQueueGenericSend+0x60>
	__asm volatile
 8012376:	f04f 0350 	mov.w	r3, #80	; 0x50
 801237a:	f383 8811 	msr	BASEPRI, r3
 801237e:	f3bf 8f6f 	isb	sy
 8012382:	f3bf 8f4f 	dsb	sy
 8012386:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012388:	bf00      	nop
 801238a:	e7fe      	b.n	801238a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801238c:	683b      	ldr	r3, [r7, #0]
 801238e:	2b02      	cmp	r3, #2
 8012390:	d103      	bne.n	801239a <xQueueGenericSend+0x6e>
 8012392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012396:	2b01      	cmp	r3, #1
 8012398:	d101      	bne.n	801239e <xQueueGenericSend+0x72>
 801239a:	2301      	movs	r3, #1
 801239c:	e000      	b.n	80123a0 <xQueueGenericSend+0x74>
 801239e:	2300      	movs	r3, #0
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d10a      	bne.n	80123ba <xQueueGenericSend+0x8e>
	__asm volatile
 80123a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123a8:	f383 8811 	msr	BASEPRI, r3
 80123ac:	f3bf 8f6f 	isb	sy
 80123b0:	f3bf 8f4f 	dsb	sy
 80123b4:	623b      	str	r3, [r7, #32]
}
 80123b6:	bf00      	nop
 80123b8:	e7fe      	b.n	80123b8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80123ba:	f001 fd89 	bl	8013ed0 <xTaskGetSchedulerState>
 80123be:	4603      	mov	r3, r0
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d102      	bne.n	80123ca <xQueueGenericSend+0x9e>
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d101      	bne.n	80123ce <xQueueGenericSend+0xa2>
 80123ca:	2301      	movs	r3, #1
 80123cc:	e000      	b.n	80123d0 <xQueueGenericSend+0xa4>
 80123ce:	2300      	movs	r3, #0
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d10a      	bne.n	80123ea <xQueueGenericSend+0xbe>
	__asm volatile
 80123d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123d8:	f383 8811 	msr	BASEPRI, r3
 80123dc:	f3bf 8f6f 	isb	sy
 80123e0:	f3bf 8f4f 	dsb	sy
 80123e4:	61fb      	str	r3, [r7, #28]
}
 80123e6:	bf00      	nop
 80123e8:	e7fe      	b.n	80123e8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80123ea:	f002 fbcb 	bl	8014b84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80123ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80123f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80123f6:	429a      	cmp	r2, r3
 80123f8:	d302      	bcc.n	8012400 <xQueueGenericSend+0xd4>
 80123fa:	683b      	ldr	r3, [r7, #0]
 80123fc:	2b02      	cmp	r3, #2
 80123fe:	d129      	bne.n	8012454 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012400:	683a      	ldr	r2, [r7, #0]
 8012402:	68b9      	ldr	r1, [r7, #8]
 8012404:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012406:	f000 fc5e 	bl	8012cc6 <prvCopyDataToQueue>
 801240a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801240c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012410:	2b00      	cmp	r3, #0
 8012412:	d010      	beq.n	8012436 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012416:	3324      	adds	r3, #36	; 0x24
 8012418:	4618      	mov	r0, r3
 801241a:	f001 fb9b 	bl	8013b54 <xTaskRemoveFromEventList>
 801241e:	4603      	mov	r3, r0
 8012420:	2b00      	cmp	r3, #0
 8012422:	d013      	beq.n	801244c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012424:	4b3f      	ldr	r3, [pc, #252]	; (8012524 <xQueueGenericSend+0x1f8>)
 8012426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801242a:	601a      	str	r2, [r3, #0]
 801242c:	f3bf 8f4f 	dsb	sy
 8012430:	f3bf 8f6f 	isb	sy
 8012434:	e00a      	b.n	801244c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012438:	2b00      	cmp	r3, #0
 801243a:	d007      	beq.n	801244c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801243c:	4b39      	ldr	r3, [pc, #228]	; (8012524 <xQueueGenericSend+0x1f8>)
 801243e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012442:	601a      	str	r2, [r3, #0]
 8012444:	f3bf 8f4f 	dsb	sy
 8012448:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801244c:	f002 fbca 	bl	8014be4 <vPortExitCritical>
				return pdPASS;
 8012450:	2301      	movs	r3, #1
 8012452:	e063      	b.n	801251c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d103      	bne.n	8012462 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801245a:	f002 fbc3 	bl	8014be4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801245e:	2300      	movs	r3, #0
 8012460:	e05c      	b.n	801251c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012464:	2b00      	cmp	r3, #0
 8012466:	d106      	bne.n	8012476 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012468:	f107 0314 	add.w	r3, r7, #20
 801246c:	4618      	mov	r0, r3
 801246e:	f001 fbd5 	bl	8013c1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012472:	2301      	movs	r3, #1
 8012474:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012476:	f002 fbb5 	bl	8014be4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801247a:	f001 f947 	bl	801370c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801247e:	f002 fb81 	bl	8014b84 <vPortEnterCritical>
 8012482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012484:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012488:	b25b      	sxtb	r3, r3
 801248a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801248e:	d103      	bne.n	8012498 <xQueueGenericSend+0x16c>
 8012490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012492:	2200      	movs	r2, #0
 8012494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801249a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801249e:	b25b      	sxtb	r3, r3
 80124a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80124a4:	d103      	bne.n	80124ae <xQueueGenericSend+0x182>
 80124a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124a8:	2200      	movs	r2, #0
 80124aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80124ae:	f002 fb99 	bl	8014be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80124b2:	1d3a      	adds	r2, r7, #4
 80124b4:	f107 0314 	add.w	r3, r7, #20
 80124b8:	4611      	mov	r1, r2
 80124ba:	4618      	mov	r0, r3
 80124bc:	f001 fbc4 	bl	8013c48 <xTaskCheckForTimeOut>
 80124c0:	4603      	mov	r3, r0
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d124      	bne.n	8012510 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80124c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80124c8:	f000 fcf5 	bl	8012eb6 <prvIsQueueFull>
 80124cc:	4603      	mov	r3, r0
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d018      	beq.n	8012504 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80124d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124d4:	3310      	adds	r3, #16
 80124d6:	687a      	ldr	r2, [r7, #4]
 80124d8:	4611      	mov	r1, r2
 80124da:	4618      	mov	r0, r3
 80124dc:	f001 faea 	bl	8013ab4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80124e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80124e2:	f000 fc80 	bl	8012de6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80124e6:	f001 f91f 	bl	8013728 <xTaskResumeAll>
 80124ea:	4603      	mov	r3, r0
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	f47f af7c 	bne.w	80123ea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80124f2:	4b0c      	ldr	r3, [pc, #48]	; (8012524 <xQueueGenericSend+0x1f8>)
 80124f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80124f8:	601a      	str	r2, [r3, #0]
 80124fa:	f3bf 8f4f 	dsb	sy
 80124fe:	f3bf 8f6f 	isb	sy
 8012502:	e772      	b.n	80123ea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012504:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012506:	f000 fc6e 	bl	8012de6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801250a:	f001 f90d 	bl	8013728 <xTaskResumeAll>
 801250e:	e76c      	b.n	80123ea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012512:	f000 fc68 	bl	8012de6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012516:	f001 f907 	bl	8013728 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801251a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801251c:	4618      	mov	r0, r3
 801251e:	3738      	adds	r7, #56	; 0x38
 8012520:	46bd      	mov	sp, r7
 8012522:	bd80      	pop	{r7, pc}
 8012524:	e000ed04 	.word	0xe000ed04

08012528 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012528:	b580      	push	{r7, lr}
 801252a:	b090      	sub	sp, #64	; 0x40
 801252c:	af00      	add	r7, sp, #0
 801252e:	60f8      	str	r0, [r7, #12]
 8012530:	60b9      	str	r1, [r7, #8]
 8012532:	607a      	str	r2, [r7, #4]
 8012534:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801253a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801253c:	2b00      	cmp	r3, #0
 801253e:	d10a      	bne.n	8012556 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8012540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012544:	f383 8811 	msr	BASEPRI, r3
 8012548:	f3bf 8f6f 	isb	sy
 801254c:	f3bf 8f4f 	dsb	sy
 8012550:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012552:	bf00      	nop
 8012554:	e7fe      	b.n	8012554 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012556:	68bb      	ldr	r3, [r7, #8]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d103      	bne.n	8012564 <xQueueGenericSendFromISR+0x3c>
 801255c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012560:	2b00      	cmp	r3, #0
 8012562:	d101      	bne.n	8012568 <xQueueGenericSendFromISR+0x40>
 8012564:	2301      	movs	r3, #1
 8012566:	e000      	b.n	801256a <xQueueGenericSendFromISR+0x42>
 8012568:	2300      	movs	r3, #0
 801256a:	2b00      	cmp	r3, #0
 801256c:	d10a      	bne.n	8012584 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801256e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012572:	f383 8811 	msr	BASEPRI, r3
 8012576:	f3bf 8f6f 	isb	sy
 801257a:	f3bf 8f4f 	dsb	sy
 801257e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012580:	bf00      	nop
 8012582:	e7fe      	b.n	8012582 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012584:	683b      	ldr	r3, [r7, #0]
 8012586:	2b02      	cmp	r3, #2
 8012588:	d103      	bne.n	8012592 <xQueueGenericSendFromISR+0x6a>
 801258a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801258c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801258e:	2b01      	cmp	r3, #1
 8012590:	d101      	bne.n	8012596 <xQueueGenericSendFromISR+0x6e>
 8012592:	2301      	movs	r3, #1
 8012594:	e000      	b.n	8012598 <xQueueGenericSendFromISR+0x70>
 8012596:	2300      	movs	r3, #0
 8012598:	2b00      	cmp	r3, #0
 801259a:	d10a      	bne.n	80125b2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801259c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125a0:	f383 8811 	msr	BASEPRI, r3
 80125a4:	f3bf 8f6f 	isb	sy
 80125a8:	f3bf 8f4f 	dsb	sy
 80125ac:	623b      	str	r3, [r7, #32]
}
 80125ae:	bf00      	nop
 80125b0:	e7fe      	b.n	80125b0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80125b2:	f002 fbc9 	bl	8014d48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80125b6:	f3ef 8211 	mrs	r2, BASEPRI
 80125ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125be:	f383 8811 	msr	BASEPRI, r3
 80125c2:	f3bf 8f6f 	isb	sy
 80125c6:	f3bf 8f4f 	dsb	sy
 80125ca:	61fa      	str	r2, [r7, #28]
 80125cc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80125ce:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80125d0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80125d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80125d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125da:	429a      	cmp	r2, r3
 80125dc:	d302      	bcc.n	80125e4 <xQueueGenericSendFromISR+0xbc>
 80125de:	683b      	ldr	r3, [r7, #0]
 80125e0:	2b02      	cmp	r3, #2
 80125e2:	d12f      	bne.n	8012644 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80125e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80125ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80125ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125f2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80125f4:	683a      	ldr	r2, [r7, #0]
 80125f6:	68b9      	ldr	r1, [r7, #8]
 80125f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80125fa:	f000 fb64 	bl	8012cc6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80125fe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8012602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012606:	d112      	bne.n	801262e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801260c:	2b00      	cmp	r3, #0
 801260e:	d016      	beq.n	801263e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012612:	3324      	adds	r3, #36	; 0x24
 8012614:	4618      	mov	r0, r3
 8012616:	f001 fa9d 	bl	8013b54 <xTaskRemoveFromEventList>
 801261a:	4603      	mov	r3, r0
 801261c:	2b00      	cmp	r3, #0
 801261e:	d00e      	beq.n	801263e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d00b      	beq.n	801263e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	2201      	movs	r2, #1
 801262a:	601a      	str	r2, [r3, #0]
 801262c:	e007      	b.n	801263e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801262e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012632:	3301      	adds	r3, #1
 8012634:	b2db      	uxtb	r3, r3
 8012636:	b25a      	sxtb	r2, r3
 8012638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801263a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801263e:	2301      	movs	r3, #1
 8012640:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8012642:	e001      	b.n	8012648 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012644:	2300      	movs	r3, #0
 8012646:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801264a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801264c:	697b      	ldr	r3, [r7, #20]
 801264e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012652:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8012656:	4618      	mov	r0, r3
 8012658:	3740      	adds	r7, #64	; 0x40
 801265a:	46bd      	mov	sp, r7
 801265c:	bd80      	pop	{r7, pc}

0801265e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801265e:	b580      	push	{r7, lr}
 8012660:	b08e      	sub	sp, #56	; 0x38
 8012662:	af00      	add	r7, sp, #0
 8012664:	6078      	str	r0, [r7, #4]
 8012666:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801266c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801266e:	2b00      	cmp	r3, #0
 8012670:	d10a      	bne.n	8012688 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8012672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012676:	f383 8811 	msr	BASEPRI, r3
 801267a:	f3bf 8f6f 	isb	sy
 801267e:	f3bf 8f4f 	dsb	sy
 8012682:	623b      	str	r3, [r7, #32]
}
 8012684:	bf00      	nop
 8012686:	e7fe      	b.n	8012686 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801268c:	2b00      	cmp	r3, #0
 801268e:	d00a      	beq.n	80126a6 <xQueueGiveFromISR+0x48>
	__asm volatile
 8012690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012694:	f383 8811 	msr	BASEPRI, r3
 8012698:	f3bf 8f6f 	isb	sy
 801269c:	f3bf 8f4f 	dsb	sy
 80126a0:	61fb      	str	r3, [r7, #28]
}
 80126a2:	bf00      	nop
 80126a4:	e7fe      	b.n	80126a4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80126a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d103      	bne.n	80126b6 <xQueueGiveFromISR+0x58>
 80126ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126b0:	689b      	ldr	r3, [r3, #8]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d101      	bne.n	80126ba <xQueueGiveFromISR+0x5c>
 80126b6:	2301      	movs	r3, #1
 80126b8:	e000      	b.n	80126bc <xQueueGiveFromISR+0x5e>
 80126ba:	2300      	movs	r3, #0
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d10a      	bne.n	80126d6 <xQueueGiveFromISR+0x78>
	__asm volatile
 80126c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126c4:	f383 8811 	msr	BASEPRI, r3
 80126c8:	f3bf 8f6f 	isb	sy
 80126cc:	f3bf 8f4f 	dsb	sy
 80126d0:	61bb      	str	r3, [r7, #24]
}
 80126d2:	bf00      	nop
 80126d4:	e7fe      	b.n	80126d4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80126d6:	f002 fb37 	bl	8014d48 <vPortValidateInterruptPriority>
	__asm volatile
 80126da:	f3ef 8211 	mrs	r2, BASEPRI
 80126de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126e2:	f383 8811 	msr	BASEPRI, r3
 80126e6:	f3bf 8f6f 	isb	sy
 80126ea:	f3bf 8f4f 	dsb	sy
 80126ee:	617a      	str	r2, [r7, #20]
 80126f0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80126f2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80126f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80126f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80126fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012702:	429a      	cmp	r2, r3
 8012704:	d22b      	bcs.n	801275e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012708:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801270c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012712:	1c5a      	adds	r2, r3, #1
 8012714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012716:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012718:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801271c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012720:	d112      	bne.n	8012748 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012726:	2b00      	cmp	r3, #0
 8012728:	d016      	beq.n	8012758 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801272a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801272c:	3324      	adds	r3, #36	; 0x24
 801272e:	4618      	mov	r0, r3
 8012730:	f001 fa10 	bl	8013b54 <xTaskRemoveFromEventList>
 8012734:	4603      	mov	r3, r0
 8012736:	2b00      	cmp	r3, #0
 8012738:	d00e      	beq.n	8012758 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801273a:	683b      	ldr	r3, [r7, #0]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d00b      	beq.n	8012758 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012740:	683b      	ldr	r3, [r7, #0]
 8012742:	2201      	movs	r2, #1
 8012744:	601a      	str	r2, [r3, #0]
 8012746:	e007      	b.n	8012758 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801274c:	3301      	adds	r3, #1
 801274e:	b2db      	uxtb	r3, r3
 8012750:	b25a      	sxtb	r2, r3
 8012752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012758:	2301      	movs	r3, #1
 801275a:	637b      	str	r3, [r7, #52]	; 0x34
 801275c:	e001      	b.n	8012762 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801275e:	2300      	movs	r3, #0
 8012760:	637b      	str	r3, [r7, #52]	; 0x34
 8012762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012764:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	f383 8811 	msr	BASEPRI, r3
}
 801276c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801276e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012770:	4618      	mov	r0, r3
 8012772:	3738      	adds	r7, #56	; 0x38
 8012774:	46bd      	mov	sp, r7
 8012776:	bd80      	pop	{r7, pc}

08012778 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012778:	b580      	push	{r7, lr}
 801277a:	b08c      	sub	sp, #48	; 0x30
 801277c:	af00      	add	r7, sp, #0
 801277e:	60f8      	str	r0, [r7, #12]
 8012780:	60b9      	str	r1, [r7, #8]
 8012782:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012784:	2300      	movs	r3, #0
 8012786:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801278c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801278e:	2b00      	cmp	r3, #0
 8012790:	d10a      	bne.n	80127a8 <xQueueReceive+0x30>
	__asm volatile
 8012792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012796:	f383 8811 	msr	BASEPRI, r3
 801279a:	f3bf 8f6f 	isb	sy
 801279e:	f3bf 8f4f 	dsb	sy
 80127a2:	623b      	str	r3, [r7, #32]
}
 80127a4:	bf00      	nop
 80127a6:	e7fe      	b.n	80127a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80127a8:	68bb      	ldr	r3, [r7, #8]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d103      	bne.n	80127b6 <xQueueReceive+0x3e>
 80127ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d101      	bne.n	80127ba <xQueueReceive+0x42>
 80127b6:	2301      	movs	r3, #1
 80127b8:	e000      	b.n	80127bc <xQueueReceive+0x44>
 80127ba:	2300      	movs	r3, #0
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d10a      	bne.n	80127d6 <xQueueReceive+0x5e>
	__asm volatile
 80127c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127c4:	f383 8811 	msr	BASEPRI, r3
 80127c8:	f3bf 8f6f 	isb	sy
 80127cc:	f3bf 8f4f 	dsb	sy
 80127d0:	61fb      	str	r3, [r7, #28]
}
 80127d2:	bf00      	nop
 80127d4:	e7fe      	b.n	80127d4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80127d6:	f001 fb7b 	bl	8013ed0 <xTaskGetSchedulerState>
 80127da:	4603      	mov	r3, r0
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d102      	bne.n	80127e6 <xQueueReceive+0x6e>
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d101      	bne.n	80127ea <xQueueReceive+0x72>
 80127e6:	2301      	movs	r3, #1
 80127e8:	e000      	b.n	80127ec <xQueueReceive+0x74>
 80127ea:	2300      	movs	r3, #0
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d10a      	bne.n	8012806 <xQueueReceive+0x8e>
	__asm volatile
 80127f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127f4:	f383 8811 	msr	BASEPRI, r3
 80127f8:	f3bf 8f6f 	isb	sy
 80127fc:	f3bf 8f4f 	dsb	sy
 8012800:	61bb      	str	r3, [r7, #24]
}
 8012802:	bf00      	nop
 8012804:	e7fe      	b.n	8012804 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012806:	f002 f9bd 	bl	8014b84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801280a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801280c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801280e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012812:	2b00      	cmp	r3, #0
 8012814:	d01f      	beq.n	8012856 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012816:	68b9      	ldr	r1, [r7, #8]
 8012818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801281a:	f000 fabe 	bl	8012d9a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012820:	1e5a      	subs	r2, r3, #1
 8012822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012824:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012828:	691b      	ldr	r3, [r3, #16]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d00f      	beq.n	801284e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801282e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012830:	3310      	adds	r3, #16
 8012832:	4618      	mov	r0, r3
 8012834:	f001 f98e 	bl	8013b54 <xTaskRemoveFromEventList>
 8012838:	4603      	mov	r3, r0
 801283a:	2b00      	cmp	r3, #0
 801283c:	d007      	beq.n	801284e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801283e:	4b3d      	ldr	r3, [pc, #244]	; (8012934 <xQueueReceive+0x1bc>)
 8012840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012844:	601a      	str	r2, [r3, #0]
 8012846:	f3bf 8f4f 	dsb	sy
 801284a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801284e:	f002 f9c9 	bl	8014be4 <vPortExitCritical>
				return pdPASS;
 8012852:	2301      	movs	r3, #1
 8012854:	e069      	b.n	801292a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d103      	bne.n	8012864 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801285c:	f002 f9c2 	bl	8014be4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012860:	2300      	movs	r3, #0
 8012862:	e062      	b.n	801292a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012866:	2b00      	cmp	r3, #0
 8012868:	d106      	bne.n	8012878 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801286a:	f107 0310 	add.w	r3, r7, #16
 801286e:	4618      	mov	r0, r3
 8012870:	f001 f9d4 	bl	8013c1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012874:	2301      	movs	r3, #1
 8012876:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012878:	f002 f9b4 	bl	8014be4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801287c:	f000 ff46 	bl	801370c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012880:	f002 f980 	bl	8014b84 <vPortEnterCritical>
 8012884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012886:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801288a:	b25b      	sxtb	r3, r3
 801288c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012890:	d103      	bne.n	801289a <xQueueReceive+0x122>
 8012892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012894:	2200      	movs	r2, #0
 8012896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801289a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801289c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80128a0:	b25b      	sxtb	r3, r3
 80128a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80128a6:	d103      	bne.n	80128b0 <xQueueReceive+0x138>
 80128a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128aa:	2200      	movs	r2, #0
 80128ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80128b0:	f002 f998 	bl	8014be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80128b4:	1d3a      	adds	r2, r7, #4
 80128b6:	f107 0310 	add.w	r3, r7, #16
 80128ba:	4611      	mov	r1, r2
 80128bc:	4618      	mov	r0, r3
 80128be:	f001 f9c3 	bl	8013c48 <xTaskCheckForTimeOut>
 80128c2:	4603      	mov	r3, r0
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d123      	bne.n	8012910 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80128c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80128ca:	f000 fade 	bl	8012e8a <prvIsQueueEmpty>
 80128ce:	4603      	mov	r3, r0
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d017      	beq.n	8012904 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80128d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128d6:	3324      	adds	r3, #36	; 0x24
 80128d8:	687a      	ldr	r2, [r7, #4]
 80128da:	4611      	mov	r1, r2
 80128dc:	4618      	mov	r0, r3
 80128de:	f001 f8e9 	bl	8013ab4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80128e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80128e4:	f000 fa7f 	bl	8012de6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80128e8:	f000 ff1e 	bl	8013728 <xTaskResumeAll>
 80128ec:	4603      	mov	r3, r0
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d189      	bne.n	8012806 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80128f2:	4b10      	ldr	r3, [pc, #64]	; (8012934 <xQueueReceive+0x1bc>)
 80128f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128f8:	601a      	str	r2, [r3, #0]
 80128fa:	f3bf 8f4f 	dsb	sy
 80128fe:	f3bf 8f6f 	isb	sy
 8012902:	e780      	b.n	8012806 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012906:	f000 fa6e 	bl	8012de6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801290a:	f000 ff0d 	bl	8013728 <xTaskResumeAll>
 801290e:	e77a      	b.n	8012806 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012910:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012912:	f000 fa68 	bl	8012de6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012916:	f000 ff07 	bl	8013728 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801291a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801291c:	f000 fab5 	bl	8012e8a <prvIsQueueEmpty>
 8012920:	4603      	mov	r3, r0
 8012922:	2b00      	cmp	r3, #0
 8012924:	f43f af6f 	beq.w	8012806 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012928:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801292a:	4618      	mov	r0, r3
 801292c:	3730      	adds	r7, #48	; 0x30
 801292e:	46bd      	mov	sp, r7
 8012930:	bd80      	pop	{r7, pc}
 8012932:	bf00      	nop
 8012934:	e000ed04 	.word	0xe000ed04

08012938 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b08e      	sub	sp, #56	; 0x38
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
 8012940:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012942:	2300      	movs	r3, #0
 8012944:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801294a:	2300      	movs	r3, #0
 801294c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801294e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012950:	2b00      	cmp	r3, #0
 8012952:	d10a      	bne.n	801296a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8012954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012958:	f383 8811 	msr	BASEPRI, r3
 801295c:	f3bf 8f6f 	isb	sy
 8012960:	f3bf 8f4f 	dsb	sy
 8012964:	623b      	str	r3, [r7, #32]
}
 8012966:	bf00      	nop
 8012968:	e7fe      	b.n	8012968 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801296a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801296e:	2b00      	cmp	r3, #0
 8012970:	d00a      	beq.n	8012988 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8012972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012976:	f383 8811 	msr	BASEPRI, r3
 801297a:	f3bf 8f6f 	isb	sy
 801297e:	f3bf 8f4f 	dsb	sy
 8012982:	61fb      	str	r3, [r7, #28]
}
 8012984:	bf00      	nop
 8012986:	e7fe      	b.n	8012986 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012988:	f001 faa2 	bl	8013ed0 <xTaskGetSchedulerState>
 801298c:	4603      	mov	r3, r0
 801298e:	2b00      	cmp	r3, #0
 8012990:	d102      	bne.n	8012998 <xQueueSemaphoreTake+0x60>
 8012992:	683b      	ldr	r3, [r7, #0]
 8012994:	2b00      	cmp	r3, #0
 8012996:	d101      	bne.n	801299c <xQueueSemaphoreTake+0x64>
 8012998:	2301      	movs	r3, #1
 801299a:	e000      	b.n	801299e <xQueueSemaphoreTake+0x66>
 801299c:	2300      	movs	r3, #0
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d10a      	bne.n	80129b8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80129a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129a6:	f383 8811 	msr	BASEPRI, r3
 80129aa:	f3bf 8f6f 	isb	sy
 80129ae:	f3bf 8f4f 	dsb	sy
 80129b2:	61bb      	str	r3, [r7, #24]
}
 80129b4:	bf00      	nop
 80129b6:	e7fe      	b.n	80129b6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80129b8:	f002 f8e4 	bl	8014b84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80129bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129c0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80129c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d024      	beq.n	8012a12 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80129c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129ca:	1e5a      	subs	r2, r3, #1
 80129cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ce:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80129d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d104      	bne.n	80129e2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80129d8:	f001 fbf0 	bl	80141bc <pvTaskIncrementMutexHeldCount>
 80129dc:	4602      	mov	r2, r0
 80129de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129e0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80129e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129e4:	691b      	ldr	r3, [r3, #16]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d00f      	beq.n	8012a0a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80129ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ec:	3310      	adds	r3, #16
 80129ee:	4618      	mov	r0, r3
 80129f0:	f001 f8b0 	bl	8013b54 <xTaskRemoveFromEventList>
 80129f4:	4603      	mov	r3, r0
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d007      	beq.n	8012a0a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80129fa:	4b54      	ldr	r3, [pc, #336]	; (8012b4c <xQueueSemaphoreTake+0x214>)
 80129fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a00:	601a      	str	r2, [r3, #0]
 8012a02:	f3bf 8f4f 	dsb	sy
 8012a06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012a0a:	f002 f8eb 	bl	8014be4 <vPortExitCritical>
				return pdPASS;
 8012a0e:	2301      	movs	r3, #1
 8012a10:	e097      	b.n	8012b42 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012a12:	683b      	ldr	r3, [r7, #0]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d111      	bne.n	8012a3c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d00a      	beq.n	8012a34 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8012a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a22:	f383 8811 	msr	BASEPRI, r3
 8012a26:	f3bf 8f6f 	isb	sy
 8012a2a:	f3bf 8f4f 	dsb	sy
 8012a2e:	617b      	str	r3, [r7, #20]
}
 8012a30:	bf00      	nop
 8012a32:	e7fe      	b.n	8012a32 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012a34:	f002 f8d6 	bl	8014be4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012a38:	2300      	movs	r3, #0
 8012a3a:	e082      	b.n	8012b42 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d106      	bne.n	8012a50 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012a42:	f107 030c 	add.w	r3, r7, #12
 8012a46:	4618      	mov	r0, r3
 8012a48:	f001 f8e8 	bl	8013c1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012a4c:	2301      	movs	r3, #1
 8012a4e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012a50:	f002 f8c8 	bl	8014be4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012a54:	f000 fe5a 	bl	801370c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012a58:	f002 f894 	bl	8014b84 <vPortEnterCritical>
 8012a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012a62:	b25b      	sxtb	r3, r3
 8012a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012a68:	d103      	bne.n	8012a72 <xQueueSemaphoreTake+0x13a>
 8012a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a6c:	2200      	movs	r2, #0
 8012a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012a78:	b25b      	sxtb	r3, r3
 8012a7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012a7e:	d103      	bne.n	8012a88 <xQueueSemaphoreTake+0x150>
 8012a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a82:	2200      	movs	r2, #0
 8012a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012a88:	f002 f8ac 	bl	8014be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012a8c:	463a      	mov	r2, r7
 8012a8e:	f107 030c 	add.w	r3, r7, #12
 8012a92:	4611      	mov	r1, r2
 8012a94:	4618      	mov	r0, r3
 8012a96:	f001 f8d7 	bl	8013c48 <xTaskCheckForTimeOut>
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d132      	bne.n	8012b06 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012aa0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012aa2:	f000 f9f2 	bl	8012e8a <prvIsQueueEmpty>
 8012aa6:	4603      	mov	r3, r0
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d026      	beq.n	8012afa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d109      	bne.n	8012ac8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8012ab4:	f002 f866 	bl	8014b84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aba:	689b      	ldr	r3, [r3, #8]
 8012abc:	4618      	mov	r0, r3
 8012abe:	f001 fa25 	bl	8013f0c <xTaskPriorityInherit>
 8012ac2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012ac4:	f002 f88e 	bl	8014be4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aca:	3324      	adds	r3, #36	; 0x24
 8012acc:	683a      	ldr	r2, [r7, #0]
 8012ace:	4611      	mov	r1, r2
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	f000 ffef 	bl	8013ab4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012ad6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012ad8:	f000 f985 	bl	8012de6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012adc:	f000 fe24 	bl	8013728 <xTaskResumeAll>
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	f47f af68 	bne.w	80129b8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8012ae8:	4b18      	ldr	r3, [pc, #96]	; (8012b4c <xQueueSemaphoreTake+0x214>)
 8012aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012aee:	601a      	str	r2, [r3, #0]
 8012af0:	f3bf 8f4f 	dsb	sy
 8012af4:	f3bf 8f6f 	isb	sy
 8012af8:	e75e      	b.n	80129b8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012afa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012afc:	f000 f973 	bl	8012de6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012b00:	f000 fe12 	bl	8013728 <xTaskResumeAll>
 8012b04:	e758      	b.n	80129b8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012b06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b08:	f000 f96d 	bl	8012de6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012b0c:	f000 fe0c 	bl	8013728 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012b10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b12:	f000 f9ba 	bl	8012e8a <prvIsQueueEmpty>
 8012b16:	4603      	mov	r3, r0
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	f43f af4d 	beq.w	80129b8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d00d      	beq.n	8012b40 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8012b24:	f002 f82e 	bl	8014b84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012b28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b2a:	f000 f8b4 	bl	8012c96 <prvGetDisinheritPriorityAfterTimeout>
 8012b2e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b32:	689b      	ldr	r3, [r3, #8]
 8012b34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012b36:	4618      	mov	r0, r3
 8012b38:	f001 fabe 	bl	80140b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012b3c:	f002 f852 	bl	8014be4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012b40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012b42:	4618      	mov	r0, r3
 8012b44:	3738      	adds	r7, #56	; 0x38
 8012b46:	46bd      	mov	sp, r7
 8012b48:	bd80      	pop	{r7, pc}
 8012b4a:	bf00      	nop
 8012b4c:	e000ed04 	.word	0xe000ed04

08012b50 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b08e      	sub	sp, #56	; 0x38
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	60f8      	str	r0, [r7, #12]
 8012b58:	60b9      	str	r1, [r7, #8]
 8012b5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d10a      	bne.n	8012b7c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8012b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b6a:	f383 8811 	msr	BASEPRI, r3
 8012b6e:	f3bf 8f6f 	isb	sy
 8012b72:	f3bf 8f4f 	dsb	sy
 8012b76:	623b      	str	r3, [r7, #32]
}
 8012b78:	bf00      	nop
 8012b7a:	e7fe      	b.n	8012b7a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012b7c:	68bb      	ldr	r3, [r7, #8]
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d103      	bne.n	8012b8a <xQueueReceiveFromISR+0x3a>
 8012b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d101      	bne.n	8012b8e <xQueueReceiveFromISR+0x3e>
 8012b8a:	2301      	movs	r3, #1
 8012b8c:	e000      	b.n	8012b90 <xQueueReceiveFromISR+0x40>
 8012b8e:	2300      	movs	r3, #0
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d10a      	bne.n	8012baa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8012b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b98:	f383 8811 	msr	BASEPRI, r3
 8012b9c:	f3bf 8f6f 	isb	sy
 8012ba0:	f3bf 8f4f 	dsb	sy
 8012ba4:	61fb      	str	r3, [r7, #28]
}
 8012ba6:	bf00      	nop
 8012ba8:	e7fe      	b.n	8012ba8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012baa:	f002 f8cd 	bl	8014d48 <vPortValidateInterruptPriority>
	__asm volatile
 8012bae:	f3ef 8211 	mrs	r2, BASEPRI
 8012bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bb6:	f383 8811 	msr	BASEPRI, r3
 8012bba:	f3bf 8f6f 	isb	sy
 8012bbe:	f3bf 8f4f 	dsb	sy
 8012bc2:	61ba      	str	r2, [r7, #24]
 8012bc4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012bc6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d02f      	beq.n	8012c36 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012bdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012be0:	68b9      	ldr	r1, [r7, #8]
 8012be2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012be4:	f000 f8d9 	bl	8012d9a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bea:	1e5a      	subs	r2, r3, #1
 8012bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012bf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012bf8:	d112      	bne.n	8012c20 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bfc:	691b      	ldr	r3, [r3, #16]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d016      	beq.n	8012c30 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c04:	3310      	adds	r3, #16
 8012c06:	4618      	mov	r0, r3
 8012c08:	f000 ffa4 	bl	8013b54 <xTaskRemoveFromEventList>
 8012c0c:	4603      	mov	r3, r0
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d00e      	beq.n	8012c30 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d00b      	beq.n	8012c30 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	2201      	movs	r2, #1
 8012c1c:	601a      	str	r2, [r3, #0]
 8012c1e:	e007      	b.n	8012c30 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c24:	3301      	adds	r3, #1
 8012c26:	b2db      	uxtb	r3, r3
 8012c28:	b25a      	sxtb	r2, r3
 8012c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012c30:	2301      	movs	r3, #1
 8012c32:	637b      	str	r3, [r7, #52]	; 0x34
 8012c34:	e001      	b.n	8012c3a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8012c36:	2300      	movs	r3, #0
 8012c38:	637b      	str	r3, [r7, #52]	; 0x34
 8012c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c3c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012c3e:	693b      	ldr	r3, [r7, #16]
 8012c40:	f383 8811 	msr	BASEPRI, r3
}
 8012c44:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012c48:	4618      	mov	r0, r3
 8012c4a:	3738      	adds	r7, #56	; 0x38
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	bd80      	pop	{r7, pc}

08012c50 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8012c50:	b580      	push	{r7, lr}
 8012c52:	b084      	sub	sp, #16
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d10a      	bne.n	8012c78 <vQueueDelete+0x28>
	__asm volatile
 8012c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c66:	f383 8811 	msr	BASEPRI, r3
 8012c6a:	f3bf 8f6f 	isb	sy
 8012c6e:	f3bf 8f4f 	dsb	sy
 8012c72:	60bb      	str	r3, [r7, #8]
}
 8012c74:	bf00      	nop
 8012c76:	e7fe      	b.n	8012c76 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8012c78:	68f8      	ldr	r0, [r7, #12]
 8012c7a:	f000 f95f 	bl	8012f3c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d102      	bne.n	8012c8e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8012c88:	68f8      	ldr	r0, [r7, #12]
 8012c8a:	f002 f969 	bl	8014f60 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8012c8e:	bf00      	nop
 8012c90:	3710      	adds	r7, #16
 8012c92:	46bd      	mov	sp, r7
 8012c94:	bd80      	pop	{r7, pc}

08012c96 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012c96:	b480      	push	{r7}
 8012c98:	b085      	sub	sp, #20
 8012c9a:	af00      	add	r7, sp, #0
 8012c9c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d006      	beq.n	8012cb4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8012cb0:	60fb      	str	r3, [r7, #12]
 8012cb2:	e001      	b.n	8012cb8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012cb8:	68fb      	ldr	r3, [r7, #12]
	}
 8012cba:	4618      	mov	r0, r3
 8012cbc:	3714      	adds	r7, #20
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc4:	4770      	bx	lr

08012cc6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012cc6:	b580      	push	{r7, lr}
 8012cc8:	b086      	sub	sp, #24
 8012cca:	af00      	add	r7, sp, #0
 8012ccc:	60f8      	str	r0, [r7, #12]
 8012cce:	60b9      	str	r1, [r7, #8]
 8012cd0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012cda:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d10d      	bne.n	8012d00 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d14d      	bne.n	8012d88 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	689b      	ldr	r3, [r3, #8]
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	f001 f973 	bl	8013fdc <xTaskPriorityDisinherit>
 8012cf6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	609a      	str	r2, [r3, #8]
 8012cfe:	e043      	b.n	8012d88 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d119      	bne.n	8012d3a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	6858      	ldr	r0, [r3, #4]
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d0e:	461a      	mov	r2, r3
 8012d10:	68b9      	ldr	r1, [r7, #8]
 8012d12:	f002 fa75 	bl	8015200 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	685a      	ldr	r2, [r3, #4]
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d1e:	441a      	add	r2, r3
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	685a      	ldr	r2, [r3, #4]
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	689b      	ldr	r3, [r3, #8]
 8012d2c:	429a      	cmp	r2, r3
 8012d2e:	d32b      	bcc.n	8012d88 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	681a      	ldr	r2, [r3, #0]
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	605a      	str	r2, [r3, #4]
 8012d38:	e026      	b.n	8012d88 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	68d8      	ldr	r0, [r3, #12]
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d42:	461a      	mov	r2, r3
 8012d44:	68b9      	ldr	r1, [r7, #8]
 8012d46:	f002 fa5b 	bl	8015200 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	68da      	ldr	r2, [r3, #12]
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d52:	425b      	negs	r3, r3
 8012d54:	441a      	add	r2, r3
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	68da      	ldr	r2, [r3, #12]
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	429a      	cmp	r2, r3
 8012d64:	d207      	bcs.n	8012d76 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	689a      	ldr	r2, [r3, #8]
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d6e:	425b      	negs	r3, r3
 8012d70:	441a      	add	r2, r3
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	2b02      	cmp	r3, #2
 8012d7a:	d105      	bne.n	8012d88 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012d7c:	693b      	ldr	r3, [r7, #16]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d002      	beq.n	8012d88 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012d82:	693b      	ldr	r3, [r7, #16]
 8012d84:	3b01      	subs	r3, #1
 8012d86:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012d88:	693b      	ldr	r3, [r7, #16]
 8012d8a:	1c5a      	adds	r2, r3, #1
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012d90:	697b      	ldr	r3, [r7, #20]
}
 8012d92:	4618      	mov	r0, r3
 8012d94:	3718      	adds	r7, #24
 8012d96:	46bd      	mov	sp, r7
 8012d98:	bd80      	pop	{r7, pc}

08012d9a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012d9a:	b580      	push	{r7, lr}
 8012d9c:	b082      	sub	sp, #8
 8012d9e:	af00      	add	r7, sp, #0
 8012da0:	6078      	str	r0, [r7, #4]
 8012da2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d018      	beq.n	8012dde <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	68da      	ldr	r2, [r3, #12]
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012db4:	441a      	add	r2, r3
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	68da      	ldr	r2, [r3, #12]
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	689b      	ldr	r3, [r3, #8]
 8012dc2:	429a      	cmp	r2, r3
 8012dc4:	d303      	bcc.n	8012dce <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	681a      	ldr	r2, [r3, #0]
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	68d9      	ldr	r1, [r3, #12]
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dd6:	461a      	mov	r2, r3
 8012dd8:	6838      	ldr	r0, [r7, #0]
 8012dda:	f002 fa11 	bl	8015200 <memcpy>
	}
}
 8012dde:	bf00      	nop
 8012de0:	3708      	adds	r7, #8
 8012de2:	46bd      	mov	sp, r7
 8012de4:	bd80      	pop	{r7, pc}

08012de6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012de6:	b580      	push	{r7, lr}
 8012de8:	b084      	sub	sp, #16
 8012dea:	af00      	add	r7, sp, #0
 8012dec:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012dee:	f001 fec9 	bl	8014b84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012df8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012dfa:	e011      	b.n	8012e20 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d012      	beq.n	8012e2a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	3324      	adds	r3, #36	; 0x24
 8012e08:	4618      	mov	r0, r3
 8012e0a:	f000 fea3 	bl	8013b54 <xTaskRemoveFromEventList>
 8012e0e:	4603      	mov	r3, r0
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d001      	beq.n	8012e18 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012e14:	f000 ff7a 	bl	8013d0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012e18:	7bfb      	ldrb	r3, [r7, #15]
 8012e1a:	3b01      	subs	r3, #1
 8012e1c:	b2db      	uxtb	r3, r3
 8012e1e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	dce9      	bgt.n	8012dfc <prvUnlockQueue+0x16>
 8012e28:	e000      	b.n	8012e2c <prvUnlockQueue+0x46>
					break;
 8012e2a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	22ff      	movs	r2, #255	; 0xff
 8012e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012e34:	f001 fed6 	bl	8014be4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012e38:	f001 fea4 	bl	8014b84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012e42:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012e44:	e011      	b.n	8012e6a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	691b      	ldr	r3, [r3, #16]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d012      	beq.n	8012e74 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	3310      	adds	r3, #16
 8012e52:	4618      	mov	r0, r3
 8012e54:	f000 fe7e 	bl	8013b54 <xTaskRemoveFromEventList>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d001      	beq.n	8012e62 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012e5e:	f000 ff55 	bl	8013d0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012e62:	7bbb      	ldrb	r3, [r7, #14]
 8012e64:	3b01      	subs	r3, #1
 8012e66:	b2db      	uxtb	r3, r3
 8012e68:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012e6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	dce9      	bgt.n	8012e46 <prvUnlockQueue+0x60>
 8012e72:	e000      	b.n	8012e76 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012e74:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	22ff      	movs	r2, #255	; 0xff
 8012e7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012e7e:	f001 feb1 	bl	8014be4 <vPortExitCritical>
}
 8012e82:	bf00      	nop
 8012e84:	3710      	adds	r7, #16
 8012e86:	46bd      	mov	sp, r7
 8012e88:	bd80      	pop	{r7, pc}

08012e8a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012e8a:	b580      	push	{r7, lr}
 8012e8c:	b084      	sub	sp, #16
 8012e8e:	af00      	add	r7, sp, #0
 8012e90:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012e92:	f001 fe77 	bl	8014b84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d102      	bne.n	8012ea4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012e9e:	2301      	movs	r3, #1
 8012ea0:	60fb      	str	r3, [r7, #12]
 8012ea2:	e001      	b.n	8012ea8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012ea8:	f001 fe9c 	bl	8014be4 <vPortExitCritical>

	return xReturn;
 8012eac:	68fb      	ldr	r3, [r7, #12]
}
 8012eae:	4618      	mov	r0, r3
 8012eb0:	3710      	adds	r7, #16
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	bd80      	pop	{r7, pc}

08012eb6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012eb6:	b580      	push	{r7, lr}
 8012eb8:	b084      	sub	sp, #16
 8012eba:	af00      	add	r7, sp, #0
 8012ebc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012ebe:	f001 fe61 	bl	8014b84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012eca:	429a      	cmp	r2, r3
 8012ecc:	d102      	bne.n	8012ed4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012ece:	2301      	movs	r3, #1
 8012ed0:	60fb      	str	r3, [r7, #12]
 8012ed2:	e001      	b.n	8012ed8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012ed8:	f001 fe84 	bl	8014be4 <vPortExitCritical>

	return xReturn;
 8012edc:	68fb      	ldr	r3, [r7, #12]
}
 8012ede:	4618      	mov	r0, r3
 8012ee0:	3710      	adds	r7, #16
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	bd80      	pop	{r7, pc}
	...

08012ee8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012ee8:	b480      	push	{r7}
 8012eea:	b085      	sub	sp, #20
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	6078      	str	r0, [r7, #4]
 8012ef0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	60fb      	str	r3, [r7, #12]
 8012ef6:	e014      	b.n	8012f22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012ef8:	4a0f      	ldr	r2, [pc, #60]	; (8012f38 <vQueueAddToRegistry+0x50>)
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d10b      	bne.n	8012f1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012f04:	490c      	ldr	r1, [pc, #48]	; (8012f38 <vQueueAddToRegistry+0x50>)
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	683a      	ldr	r2, [r7, #0]
 8012f0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012f0e:	4a0a      	ldr	r2, [pc, #40]	; (8012f38 <vQueueAddToRegistry+0x50>)
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	00db      	lsls	r3, r3, #3
 8012f14:	4413      	add	r3, r2
 8012f16:	687a      	ldr	r2, [r7, #4]
 8012f18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012f1a:	e006      	b.n	8012f2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	3301      	adds	r3, #1
 8012f20:	60fb      	str	r3, [r7, #12]
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	2b07      	cmp	r3, #7
 8012f26:	d9e7      	bls.n	8012ef8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012f28:	bf00      	nop
 8012f2a:	bf00      	nop
 8012f2c:	3714      	adds	r7, #20
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f34:	4770      	bx	lr
 8012f36:	bf00      	nop
 8012f38:	20008ed0 	.word	0x20008ed0

08012f3c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012f3c:	b480      	push	{r7}
 8012f3e:	b085      	sub	sp, #20
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012f44:	2300      	movs	r3, #0
 8012f46:	60fb      	str	r3, [r7, #12]
 8012f48:	e016      	b.n	8012f78 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012f4a:	4a10      	ldr	r2, [pc, #64]	; (8012f8c <vQueueUnregisterQueue+0x50>)
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	00db      	lsls	r3, r3, #3
 8012f50:	4413      	add	r3, r2
 8012f52:	685b      	ldr	r3, [r3, #4]
 8012f54:	687a      	ldr	r2, [r7, #4]
 8012f56:	429a      	cmp	r2, r3
 8012f58:	d10b      	bne.n	8012f72 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8012f5a:	4a0c      	ldr	r2, [pc, #48]	; (8012f8c <vQueueUnregisterQueue+0x50>)
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	2100      	movs	r1, #0
 8012f60:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8012f64:	4a09      	ldr	r2, [pc, #36]	; (8012f8c <vQueueUnregisterQueue+0x50>)
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	00db      	lsls	r3, r3, #3
 8012f6a:	4413      	add	r3, r2
 8012f6c:	2200      	movs	r2, #0
 8012f6e:	605a      	str	r2, [r3, #4]
				break;
 8012f70:	e006      	b.n	8012f80 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	3301      	adds	r3, #1
 8012f76:	60fb      	str	r3, [r7, #12]
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	2b07      	cmp	r3, #7
 8012f7c:	d9e5      	bls.n	8012f4a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8012f7e:	bf00      	nop
 8012f80:	bf00      	nop
 8012f82:	3714      	adds	r7, #20
 8012f84:	46bd      	mov	sp, r7
 8012f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8a:	4770      	bx	lr
 8012f8c:	20008ed0 	.word	0x20008ed0

08012f90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012f90:	b580      	push	{r7, lr}
 8012f92:	b086      	sub	sp, #24
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	60f8      	str	r0, [r7, #12]
 8012f98:	60b9      	str	r1, [r7, #8]
 8012f9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012fa0:	f001 fdf0 	bl	8014b84 <vPortEnterCritical>
 8012fa4:	697b      	ldr	r3, [r7, #20]
 8012fa6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012faa:	b25b      	sxtb	r3, r3
 8012fac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012fb0:	d103      	bne.n	8012fba <vQueueWaitForMessageRestricted+0x2a>
 8012fb2:	697b      	ldr	r3, [r7, #20]
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012fba:	697b      	ldr	r3, [r7, #20]
 8012fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012fc0:	b25b      	sxtb	r3, r3
 8012fc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012fc6:	d103      	bne.n	8012fd0 <vQueueWaitForMessageRestricted+0x40>
 8012fc8:	697b      	ldr	r3, [r7, #20]
 8012fca:	2200      	movs	r2, #0
 8012fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012fd0:	f001 fe08 	bl	8014be4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012fd4:	697b      	ldr	r3, [r7, #20]
 8012fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d106      	bne.n	8012fea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012fdc:	697b      	ldr	r3, [r7, #20]
 8012fde:	3324      	adds	r3, #36	; 0x24
 8012fe0:	687a      	ldr	r2, [r7, #4]
 8012fe2:	68b9      	ldr	r1, [r7, #8]
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f000 fd89 	bl	8013afc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012fea:	6978      	ldr	r0, [r7, #20]
 8012fec:	f7ff fefb 	bl	8012de6 <prvUnlockQueue>
	}
 8012ff0:	bf00      	nop
 8012ff2:	3718      	adds	r7, #24
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	bd80      	pop	{r7, pc}

08012ff8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b08e      	sub	sp, #56	; 0x38
 8012ffc:	af04      	add	r7, sp, #16
 8012ffe:	60f8      	str	r0, [r7, #12]
 8013000:	60b9      	str	r1, [r7, #8]
 8013002:	607a      	str	r2, [r7, #4]
 8013004:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013008:	2b00      	cmp	r3, #0
 801300a:	d10a      	bne.n	8013022 <xTaskCreateStatic+0x2a>
	__asm volatile
 801300c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013010:	f383 8811 	msr	BASEPRI, r3
 8013014:	f3bf 8f6f 	isb	sy
 8013018:	f3bf 8f4f 	dsb	sy
 801301c:	623b      	str	r3, [r7, #32]
}
 801301e:	bf00      	nop
 8013020:	e7fe      	b.n	8013020 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013024:	2b00      	cmp	r3, #0
 8013026:	d10a      	bne.n	801303e <xTaskCreateStatic+0x46>
	__asm volatile
 8013028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801302c:	f383 8811 	msr	BASEPRI, r3
 8013030:	f3bf 8f6f 	isb	sy
 8013034:	f3bf 8f4f 	dsb	sy
 8013038:	61fb      	str	r3, [r7, #28]
}
 801303a:	bf00      	nop
 801303c:	e7fe      	b.n	801303c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801303e:	235c      	movs	r3, #92	; 0x5c
 8013040:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013042:	693b      	ldr	r3, [r7, #16]
 8013044:	2b5c      	cmp	r3, #92	; 0x5c
 8013046:	d00a      	beq.n	801305e <xTaskCreateStatic+0x66>
	__asm volatile
 8013048:	f04f 0350 	mov.w	r3, #80	; 0x50
 801304c:	f383 8811 	msr	BASEPRI, r3
 8013050:	f3bf 8f6f 	isb	sy
 8013054:	f3bf 8f4f 	dsb	sy
 8013058:	61bb      	str	r3, [r7, #24]
}
 801305a:	bf00      	nop
 801305c:	e7fe      	b.n	801305c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801305e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013062:	2b00      	cmp	r3, #0
 8013064:	d01e      	beq.n	80130a4 <xTaskCreateStatic+0xac>
 8013066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013068:	2b00      	cmp	r3, #0
 801306a:	d01b      	beq.n	80130a4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801306c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801306e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013072:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013074:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013078:	2202      	movs	r2, #2
 801307a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801307e:	2300      	movs	r3, #0
 8013080:	9303      	str	r3, [sp, #12]
 8013082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013084:	9302      	str	r3, [sp, #8]
 8013086:	f107 0314 	add.w	r3, r7, #20
 801308a:	9301      	str	r3, [sp, #4]
 801308c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801308e:	9300      	str	r3, [sp, #0]
 8013090:	683b      	ldr	r3, [r7, #0]
 8013092:	687a      	ldr	r2, [r7, #4]
 8013094:	68b9      	ldr	r1, [r7, #8]
 8013096:	68f8      	ldr	r0, [r7, #12]
 8013098:	f000 f850 	bl	801313c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801309c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801309e:	f000 f8dd 	bl	801325c <prvAddNewTaskToReadyList>
 80130a2:	e001      	b.n	80130a8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80130a4:	2300      	movs	r3, #0
 80130a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80130a8:	697b      	ldr	r3, [r7, #20]
	}
 80130aa:	4618      	mov	r0, r3
 80130ac:	3728      	adds	r7, #40	; 0x28
 80130ae:	46bd      	mov	sp, r7
 80130b0:	bd80      	pop	{r7, pc}

080130b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80130b2:	b580      	push	{r7, lr}
 80130b4:	b08c      	sub	sp, #48	; 0x30
 80130b6:	af04      	add	r7, sp, #16
 80130b8:	60f8      	str	r0, [r7, #12]
 80130ba:	60b9      	str	r1, [r7, #8]
 80130bc:	603b      	str	r3, [r7, #0]
 80130be:	4613      	mov	r3, r2
 80130c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80130c2:	88fb      	ldrh	r3, [r7, #6]
 80130c4:	009b      	lsls	r3, r3, #2
 80130c6:	4618      	mov	r0, r3
 80130c8:	f001 fe7e 	bl	8014dc8 <pvPortMalloc>
 80130cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80130ce:	697b      	ldr	r3, [r7, #20]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d00e      	beq.n	80130f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80130d4:	205c      	movs	r0, #92	; 0x5c
 80130d6:	f001 fe77 	bl	8014dc8 <pvPortMalloc>
 80130da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80130dc:	69fb      	ldr	r3, [r7, #28]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d003      	beq.n	80130ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80130e2:	69fb      	ldr	r3, [r7, #28]
 80130e4:	697a      	ldr	r2, [r7, #20]
 80130e6:	631a      	str	r2, [r3, #48]	; 0x30
 80130e8:	e005      	b.n	80130f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80130ea:	6978      	ldr	r0, [r7, #20]
 80130ec:	f001 ff38 	bl	8014f60 <vPortFree>
 80130f0:	e001      	b.n	80130f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80130f2:	2300      	movs	r3, #0
 80130f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80130f6:	69fb      	ldr	r3, [r7, #28]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d017      	beq.n	801312c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80130fc:	69fb      	ldr	r3, [r7, #28]
 80130fe:	2200      	movs	r2, #0
 8013100:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013104:	88fa      	ldrh	r2, [r7, #6]
 8013106:	2300      	movs	r3, #0
 8013108:	9303      	str	r3, [sp, #12]
 801310a:	69fb      	ldr	r3, [r7, #28]
 801310c:	9302      	str	r3, [sp, #8]
 801310e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013110:	9301      	str	r3, [sp, #4]
 8013112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013114:	9300      	str	r3, [sp, #0]
 8013116:	683b      	ldr	r3, [r7, #0]
 8013118:	68b9      	ldr	r1, [r7, #8]
 801311a:	68f8      	ldr	r0, [r7, #12]
 801311c:	f000 f80e 	bl	801313c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013120:	69f8      	ldr	r0, [r7, #28]
 8013122:	f000 f89b 	bl	801325c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013126:	2301      	movs	r3, #1
 8013128:	61bb      	str	r3, [r7, #24]
 801312a:	e002      	b.n	8013132 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801312c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013130:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013132:	69bb      	ldr	r3, [r7, #24]
	}
 8013134:	4618      	mov	r0, r3
 8013136:	3720      	adds	r7, #32
 8013138:	46bd      	mov	sp, r7
 801313a:	bd80      	pop	{r7, pc}

0801313c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801313c:	b580      	push	{r7, lr}
 801313e:	b088      	sub	sp, #32
 8013140:	af00      	add	r7, sp, #0
 8013142:	60f8      	str	r0, [r7, #12]
 8013144:	60b9      	str	r1, [r7, #8]
 8013146:	607a      	str	r2, [r7, #4]
 8013148:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801314a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801314c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	009b      	lsls	r3, r3, #2
 8013152:	461a      	mov	r2, r3
 8013154:	21a5      	movs	r1, #165	; 0xa5
 8013156:	f002 f861 	bl	801521c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801315a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801315c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013164:	3b01      	subs	r3, #1
 8013166:	009b      	lsls	r3, r3, #2
 8013168:	4413      	add	r3, r2
 801316a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801316c:	69bb      	ldr	r3, [r7, #24]
 801316e:	f023 0307 	bic.w	r3, r3, #7
 8013172:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013174:	69bb      	ldr	r3, [r7, #24]
 8013176:	f003 0307 	and.w	r3, r3, #7
 801317a:	2b00      	cmp	r3, #0
 801317c:	d00a      	beq.n	8013194 <prvInitialiseNewTask+0x58>
	__asm volatile
 801317e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013182:	f383 8811 	msr	BASEPRI, r3
 8013186:	f3bf 8f6f 	isb	sy
 801318a:	f3bf 8f4f 	dsb	sy
 801318e:	617b      	str	r3, [r7, #20]
}
 8013190:	bf00      	nop
 8013192:	e7fe      	b.n	8013192 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013194:	68bb      	ldr	r3, [r7, #8]
 8013196:	2b00      	cmp	r3, #0
 8013198:	d01f      	beq.n	80131da <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801319a:	2300      	movs	r3, #0
 801319c:	61fb      	str	r3, [r7, #28]
 801319e:	e012      	b.n	80131c6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80131a0:	68ba      	ldr	r2, [r7, #8]
 80131a2:	69fb      	ldr	r3, [r7, #28]
 80131a4:	4413      	add	r3, r2
 80131a6:	7819      	ldrb	r1, [r3, #0]
 80131a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80131aa:	69fb      	ldr	r3, [r7, #28]
 80131ac:	4413      	add	r3, r2
 80131ae:	3334      	adds	r3, #52	; 0x34
 80131b0:	460a      	mov	r2, r1
 80131b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80131b4:	68ba      	ldr	r2, [r7, #8]
 80131b6:	69fb      	ldr	r3, [r7, #28]
 80131b8:	4413      	add	r3, r2
 80131ba:	781b      	ldrb	r3, [r3, #0]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d006      	beq.n	80131ce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80131c0:	69fb      	ldr	r3, [r7, #28]
 80131c2:	3301      	adds	r3, #1
 80131c4:	61fb      	str	r3, [r7, #28]
 80131c6:	69fb      	ldr	r3, [r7, #28]
 80131c8:	2b0f      	cmp	r3, #15
 80131ca:	d9e9      	bls.n	80131a0 <prvInitialiseNewTask+0x64>
 80131cc:	e000      	b.n	80131d0 <prvInitialiseNewTask+0x94>
			{
				break;
 80131ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80131d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131d2:	2200      	movs	r2, #0
 80131d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80131d8:	e003      	b.n	80131e2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80131da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131dc:	2200      	movs	r2, #0
 80131de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80131e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131e4:	2b37      	cmp	r3, #55	; 0x37
 80131e6:	d901      	bls.n	80131ec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80131e8:	2337      	movs	r3, #55	; 0x37
 80131ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80131ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80131f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80131f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80131f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80131f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131fa:	2200      	movs	r2, #0
 80131fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80131fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013200:	3304      	adds	r3, #4
 8013202:	4618      	mov	r0, r3
 8013204:	f7fe fe56 	bl	8011eb4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801320a:	3318      	adds	r3, #24
 801320c:	4618      	mov	r0, r3
 801320e:	f7fe fe51 	bl	8011eb4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013216:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801321a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801321e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013220:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013226:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801322a:	2200      	movs	r2, #0
 801322c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801322e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013230:	2200      	movs	r2, #0
 8013232:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013236:	683a      	ldr	r2, [r7, #0]
 8013238:	68f9      	ldr	r1, [r7, #12]
 801323a:	69b8      	ldr	r0, [r7, #24]
 801323c:	f001 fb74 	bl	8014928 <pxPortInitialiseStack>
 8013240:	4602      	mov	r2, r0
 8013242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013244:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013248:	2b00      	cmp	r3, #0
 801324a:	d002      	beq.n	8013252 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801324c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801324e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013250:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013252:	bf00      	nop
 8013254:	3720      	adds	r7, #32
 8013256:	46bd      	mov	sp, r7
 8013258:	bd80      	pop	{r7, pc}
	...

0801325c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b082      	sub	sp, #8
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013264:	f001 fc8e 	bl	8014b84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013268:	4b2d      	ldr	r3, [pc, #180]	; (8013320 <prvAddNewTaskToReadyList+0xc4>)
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	3301      	adds	r3, #1
 801326e:	4a2c      	ldr	r2, [pc, #176]	; (8013320 <prvAddNewTaskToReadyList+0xc4>)
 8013270:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013272:	4b2c      	ldr	r3, [pc, #176]	; (8013324 <prvAddNewTaskToReadyList+0xc8>)
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d109      	bne.n	801328e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801327a:	4a2a      	ldr	r2, [pc, #168]	; (8013324 <prvAddNewTaskToReadyList+0xc8>)
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013280:	4b27      	ldr	r3, [pc, #156]	; (8013320 <prvAddNewTaskToReadyList+0xc4>)
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	2b01      	cmp	r3, #1
 8013286:	d110      	bne.n	80132aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013288:	f000 fd64 	bl	8013d54 <prvInitialiseTaskLists>
 801328c:	e00d      	b.n	80132aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801328e:	4b26      	ldr	r3, [pc, #152]	; (8013328 <prvAddNewTaskToReadyList+0xcc>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d109      	bne.n	80132aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013296:	4b23      	ldr	r3, [pc, #140]	; (8013324 <prvAddNewTaskToReadyList+0xc8>)
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132a0:	429a      	cmp	r2, r3
 80132a2:	d802      	bhi.n	80132aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80132a4:	4a1f      	ldr	r2, [pc, #124]	; (8013324 <prvAddNewTaskToReadyList+0xc8>)
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80132aa:	4b20      	ldr	r3, [pc, #128]	; (801332c <prvAddNewTaskToReadyList+0xd0>)
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	3301      	adds	r3, #1
 80132b0:	4a1e      	ldr	r2, [pc, #120]	; (801332c <prvAddNewTaskToReadyList+0xd0>)
 80132b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80132b4:	4b1d      	ldr	r3, [pc, #116]	; (801332c <prvAddNewTaskToReadyList+0xd0>)
 80132b6:	681a      	ldr	r2, [r3, #0]
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132c0:	4b1b      	ldr	r3, [pc, #108]	; (8013330 <prvAddNewTaskToReadyList+0xd4>)
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	429a      	cmp	r2, r3
 80132c6:	d903      	bls.n	80132d0 <prvAddNewTaskToReadyList+0x74>
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132cc:	4a18      	ldr	r2, [pc, #96]	; (8013330 <prvAddNewTaskToReadyList+0xd4>)
 80132ce:	6013      	str	r3, [r2, #0]
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132d4:	4613      	mov	r3, r2
 80132d6:	009b      	lsls	r3, r3, #2
 80132d8:	4413      	add	r3, r2
 80132da:	009b      	lsls	r3, r3, #2
 80132dc:	4a15      	ldr	r2, [pc, #84]	; (8013334 <prvAddNewTaskToReadyList+0xd8>)
 80132de:	441a      	add	r2, r3
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	3304      	adds	r3, #4
 80132e4:	4619      	mov	r1, r3
 80132e6:	4610      	mov	r0, r2
 80132e8:	f7fe fdf1 	bl	8011ece <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80132ec:	f001 fc7a 	bl	8014be4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80132f0:	4b0d      	ldr	r3, [pc, #52]	; (8013328 <prvAddNewTaskToReadyList+0xcc>)
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d00e      	beq.n	8013316 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80132f8:	4b0a      	ldr	r3, [pc, #40]	; (8013324 <prvAddNewTaskToReadyList+0xc8>)
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013302:	429a      	cmp	r2, r3
 8013304:	d207      	bcs.n	8013316 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013306:	4b0c      	ldr	r3, [pc, #48]	; (8013338 <prvAddNewTaskToReadyList+0xdc>)
 8013308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801330c:	601a      	str	r2, [r3, #0]
 801330e:	f3bf 8f4f 	dsb	sy
 8013312:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013316:	bf00      	nop
 8013318:	3708      	adds	r7, #8
 801331a:	46bd      	mov	sp, r7
 801331c:	bd80      	pop	{r7, pc}
 801331e:	bf00      	nop
 8013320:	200023d0 	.word	0x200023d0
 8013324:	20001efc 	.word	0x20001efc
 8013328:	200023dc 	.word	0x200023dc
 801332c:	200023ec 	.word	0x200023ec
 8013330:	200023d8 	.word	0x200023d8
 8013334:	20001f00 	.word	0x20001f00
 8013338:	e000ed04 	.word	0xe000ed04

0801333c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 801333c:	b580      	push	{r7, lr}
 801333e:	b084      	sub	sp, #16
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8013344:	f001 fc1e 	bl	8014b84 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d102      	bne.n	8013354 <vTaskDelete+0x18>
 801334e:	4b2c      	ldr	r3, [pc, #176]	; (8013400 <vTaskDelete+0xc4>)
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	e000      	b.n	8013356 <vTaskDelete+0x1a>
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	3304      	adds	r3, #4
 801335c:	4618      	mov	r0, r3
 801335e:	f7fe fe13 	bl	8011f88 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013366:	2b00      	cmp	r3, #0
 8013368:	d004      	beq.n	8013374 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	3318      	adds	r3, #24
 801336e:	4618      	mov	r0, r3
 8013370:	f7fe fe0a 	bl	8011f88 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8013374:	4b23      	ldr	r3, [pc, #140]	; (8013404 <vTaskDelete+0xc8>)
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	3301      	adds	r3, #1
 801337a:	4a22      	ldr	r2, [pc, #136]	; (8013404 <vTaskDelete+0xc8>)
 801337c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 801337e:	4b20      	ldr	r3, [pc, #128]	; (8013400 <vTaskDelete+0xc4>)
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	68fa      	ldr	r2, [r7, #12]
 8013384:	429a      	cmp	r2, r3
 8013386:	d10b      	bne.n	80133a0 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	3304      	adds	r3, #4
 801338c:	4619      	mov	r1, r3
 801338e:	481e      	ldr	r0, [pc, #120]	; (8013408 <vTaskDelete+0xcc>)
 8013390:	f7fe fd9d 	bl	8011ece <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8013394:	4b1d      	ldr	r3, [pc, #116]	; (801340c <vTaskDelete+0xd0>)
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	3301      	adds	r3, #1
 801339a:	4a1c      	ldr	r2, [pc, #112]	; (801340c <vTaskDelete+0xd0>)
 801339c:	6013      	str	r3, [r2, #0]
 801339e:	e009      	b.n	80133b4 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80133a0:	4b1b      	ldr	r3, [pc, #108]	; (8013410 <vTaskDelete+0xd4>)
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	3b01      	subs	r3, #1
 80133a6:	4a1a      	ldr	r2, [pc, #104]	; (8013410 <vTaskDelete+0xd4>)
 80133a8:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80133aa:	68f8      	ldr	r0, [r7, #12]
 80133ac:	f000 fd40 	bl	8013e30 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80133b0:	f000 fd6e 	bl	8013e90 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80133b4:	f001 fc16 	bl	8014be4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80133b8:	4b16      	ldr	r3, [pc, #88]	; (8013414 <vTaskDelete+0xd8>)
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d01b      	beq.n	80133f8 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80133c0:	4b0f      	ldr	r3, [pc, #60]	; (8013400 <vTaskDelete+0xc4>)
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	68fa      	ldr	r2, [r7, #12]
 80133c6:	429a      	cmp	r2, r3
 80133c8:	d116      	bne.n	80133f8 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80133ca:	4b13      	ldr	r3, [pc, #76]	; (8013418 <vTaskDelete+0xdc>)
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d00a      	beq.n	80133e8 <vTaskDelete+0xac>
	__asm volatile
 80133d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133d6:	f383 8811 	msr	BASEPRI, r3
 80133da:	f3bf 8f6f 	isb	sy
 80133de:	f3bf 8f4f 	dsb	sy
 80133e2:	60bb      	str	r3, [r7, #8]
}
 80133e4:	bf00      	nop
 80133e6:	e7fe      	b.n	80133e6 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80133e8:	4b0c      	ldr	r3, [pc, #48]	; (801341c <vTaskDelete+0xe0>)
 80133ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133ee:	601a      	str	r2, [r3, #0]
 80133f0:	f3bf 8f4f 	dsb	sy
 80133f4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80133f8:	bf00      	nop
 80133fa:	3710      	adds	r7, #16
 80133fc:	46bd      	mov	sp, r7
 80133fe:	bd80      	pop	{r7, pc}
 8013400:	20001efc 	.word	0x20001efc
 8013404:	200023ec 	.word	0x200023ec
 8013408:	200023a4 	.word	0x200023a4
 801340c:	200023b8 	.word	0x200023b8
 8013410:	200023d0 	.word	0x200023d0
 8013414:	200023dc 	.word	0x200023dc
 8013418:	200023f8 	.word	0x200023f8
 801341c:	e000ed04 	.word	0xe000ed04

08013420 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013420:	b580      	push	{r7, lr}
 8013422:	b084      	sub	sp, #16
 8013424:	af00      	add	r7, sp, #0
 8013426:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013428:	2300      	movs	r3, #0
 801342a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d017      	beq.n	8013462 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013432:	4b13      	ldr	r3, [pc, #76]	; (8013480 <vTaskDelay+0x60>)
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d00a      	beq.n	8013450 <vTaskDelay+0x30>
	__asm volatile
 801343a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801343e:	f383 8811 	msr	BASEPRI, r3
 8013442:	f3bf 8f6f 	isb	sy
 8013446:	f3bf 8f4f 	dsb	sy
 801344a:	60bb      	str	r3, [r7, #8]
}
 801344c:	bf00      	nop
 801344e:	e7fe      	b.n	801344e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013450:	f000 f95c 	bl	801370c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013454:	2100      	movs	r1, #0
 8013456:	6878      	ldr	r0, [r7, #4]
 8013458:	f000 fec4 	bl	80141e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801345c:	f000 f964 	bl	8013728 <xTaskResumeAll>
 8013460:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d107      	bne.n	8013478 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8013468:	4b06      	ldr	r3, [pc, #24]	; (8013484 <vTaskDelay+0x64>)
 801346a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801346e:	601a      	str	r2, [r3, #0]
 8013470:	f3bf 8f4f 	dsb	sy
 8013474:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013478:	bf00      	nop
 801347a:	3710      	adds	r7, #16
 801347c:	46bd      	mov	sp, r7
 801347e:	bd80      	pop	{r7, pc}
 8013480:	200023f8 	.word	0x200023f8
 8013484:	e000ed04 	.word	0xe000ed04

08013488 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8013488:	b580      	push	{r7, lr}
 801348a:	b088      	sub	sp, #32
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8013494:	69bb      	ldr	r3, [r7, #24]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d10a      	bne.n	80134b0 <eTaskGetState+0x28>
	__asm volatile
 801349a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801349e:	f383 8811 	msr	BASEPRI, r3
 80134a2:	f3bf 8f6f 	isb	sy
 80134a6:	f3bf 8f4f 	dsb	sy
 80134aa:	60bb      	str	r3, [r7, #8]
}
 80134ac:	bf00      	nop
 80134ae:	e7fe      	b.n	80134ae <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80134b0:	4b23      	ldr	r3, [pc, #140]	; (8013540 <eTaskGetState+0xb8>)
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	69ba      	ldr	r2, [r7, #24]
 80134b6:	429a      	cmp	r2, r3
 80134b8:	d102      	bne.n	80134c0 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80134ba:	2300      	movs	r3, #0
 80134bc:	77fb      	strb	r3, [r7, #31]
 80134be:	e03a      	b.n	8013536 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 80134c0:	f001 fb60 	bl	8014b84 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80134c4:	69bb      	ldr	r3, [r7, #24]
 80134c6:	695b      	ldr	r3, [r3, #20]
 80134c8:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80134ca:	4b1e      	ldr	r3, [pc, #120]	; (8013544 <eTaskGetState+0xbc>)
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80134d0:	4b1d      	ldr	r3, [pc, #116]	; (8013548 <eTaskGetState+0xc0>)
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80134d6:	f001 fb85 	bl	8014be4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80134da:	697a      	ldr	r2, [r7, #20]
 80134dc:	693b      	ldr	r3, [r7, #16]
 80134de:	429a      	cmp	r2, r3
 80134e0:	d003      	beq.n	80134ea <eTaskGetState+0x62>
 80134e2:	697a      	ldr	r2, [r7, #20]
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	429a      	cmp	r2, r3
 80134e8:	d102      	bne.n	80134f0 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80134ea:	2302      	movs	r3, #2
 80134ec:	77fb      	strb	r3, [r7, #31]
 80134ee:	e022      	b.n	8013536 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80134f0:	697b      	ldr	r3, [r7, #20]
 80134f2:	4a16      	ldr	r2, [pc, #88]	; (801354c <eTaskGetState+0xc4>)
 80134f4:	4293      	cmp	r3, r2
 80134f6:	d112      	bne.n	801351e <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80134f8:	69bb      	ldr	r3, [r7, #24]
 80134fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d10b      	bne.n	8013518 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8013500:	69bb      	ldr	r3, [r7, #24]
 8013502:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8013506:	b2db      	uxtb	r3, r3
 8013508:	2b01      	cmp	r3, #1
 801350a:	d102      	bne.n	8013512 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 801350c:	2302      	movs	r3, #2
 801350e:	77fb      	strb	r3, [r7, #31]
 8013510:	e011      	b.n	8013536 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8013512:	2303      	movs	r3, #3
 8013514:	77fb      	strb	r3, [r7, #31]
 8013516:	e00e      	b.n	8013536 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8013518:	2302      	movs	r3, #2
 801351a:	77fb      	strb	r3, [r7, #31]
 801351c:	e00b      	b.n	8013536 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 801351e:	697b      	ldr	r3, [r7, #20]
 8013520:	4a0b      	ldr	r2, [pc, #44]	; (8013550 <eTaskGetState+0xc8>)
 8013522:	4293      	cmp	r3, r2
 8013524:	d002      	beq.n	801352c <eTaskGetState+0xa4>
 8013526:	697b      	ldr	r3, [r7, #20]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d102      	bne.n	8013532 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 801352c:	2304      	movs	r3, #4
 801352e:	77fb      	strb	r3, [r7, #31]
 8013530:	e001      	b.n	8013536 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8013532:	2301      	movs	r3, #1
 8013534:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8013536:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8013538:	4618      	mov	r0, r3
 801353a:	3720      	adds	r7, #32
 801353c:	46bd      	mov	sp, r7
 801353e:	bd80      	pop	{r7, pc}
 8013540:	20001efc 	.word	0x20001efc
 8013544:	20002388 	.word	0x20002388
 8013548:	2000238c 	.word	0x2000238c
 801354c:	200023bc 	.word	0x200023bc
 8013550:	200023a4 	.word	0x200023a4

08013554 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8013554:	b580      	push	{r7, lr}
 8013556:	b084      	sub	sp, #16
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801355c:	f001 fb12 	bl	8014b84 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d102      	bne.n	801356c <vTaskSuspend+0x18>
 8013566:	4b30      	ldr	r3, [pc, #192]	; (8013628 <vTaskSuspend+0xd4>)
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	e000      	b.n	801356e <vTaskSuspend+0x1a>
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	3304      	adds	r3, #4
 8013574:	4618      	mov	r0, r3
 8013576:	f7fe fd07 	bl	8011f88 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801357e:	2b00      	cmp	r3, #0
 8013580:	d004      	beq.n	801358c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	3318      	adds	r3, #24
 8013586:	4618      	mov	r0, r3
 8013588:	f7fe fcfe 	bl	8011f88 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	3304      	adds	r3, #4
 8013590:	4619      	mov	r1, r3
 8013592:	4826      	ldr	r0, [pc, #152]	; (801362c <vTaskSuspend+0xd8>)
 8013594:	f7fe fc9b 	bl	8011ece <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801359e:	b2db      	uxtb	r3, r3
 80135a0:	2b01      	cmp	r3, #1
 80135a2:	d103      	bne.n	80135ac <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	2200      	movs	r2, #0
 80135a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80135ac:	f001 fb1a 	bl	8014be4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80135b0:	4b1f      	ldr	r3, [pc, #124]	; (8013630 <vTaskSuspend+0xdc>)
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d005      	beq.n	80135c4 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80135b8:	f001 fae4 	bl	8014b84 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80135bc:	f000 fc68 	bl	8013e90 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80135c0:	f001 fb10 	bl	8014be4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80135c4:	4b18      	ldr	r3, [pc, #96]	; (8013628 <vTaskSuspend+0xd4>)
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	68fa      	ldr	r2, [r7, #12]
 80135ca:	429a      	cmp	r2, r3
 80135cc:	d127      	bne.n	801361e <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80135ce:	4b18      	ldr	r3, [pc, #96]	; (8013630 <vTaskSuspend+0xdc>)
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d017      	beq.n	8013606 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80135d6:	4b17      	ldr	r3, [pc, #92]	; (8013634 <vTaskSuspend+0xe0>)
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d00a      	beq.n	80135f4 <vTaskSuspend+0xa0>
	__asm volatile
 80135de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135e2:	f383 8811 	msr	BASEPRI, r3
 80135e6:	f3bf 8f6f 	isb	sy
 80135ea:	f3bf 8f4f 	dsb	sy
 80135ee:	60bb      	str	r3, [r7, #8]
}
 80135f0:	bf00      	nop
 80135f2:	e7fe      	b.n	80135f2 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80135f4:	4b10      	ldr	r3, [pc, #64]	; (8013638 <vTaskSuspend+0xe4>)
 80135f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135fa:	601a      	str	r2, [r3, #0]
 80135fc:	f3bf 8f4f 	dsb	sy
 8013600:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013604:	e00b      	b.n	801361e <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8013606:	4b09      	ldr	r3, [pc, #36]	; (801362c <vTaskSuspend+0xd8>)
 8013608:	681a      	ldr	r2, [r3, #0]
 801360a:	4b0c      	ldr	r3, [pc, #48]	; (801363c <vTaskSuspend+0xe8>)
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	429a      	cmp	r2, r3
 8013610:	d103      	bne.n	801361a <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8013612:	4b05      	ldr	r3, [pc, #20]	; (8013628 <vTaskSuspend+0xd4>)
 8013614:	2200      	movs	r2, #0
 8013616:	601a      	str	r2, [r3, #0]
	}
 8013618:	e001      	b.n	801361e <vTaskSuspend+0xca>
					vTaskSwitchContext();
 801361a:	f000 f9ed 	bl	80139f8 <vTaskSwitchContext>
	}
 801361e:	bf00      	nop
 8013620:	3710      	adds	r7, #16
 8013622:	46bd      	mov	sp, r7
 8013624:	bd80      	pop	{r7, pc}
 8013626:	bf00      	nop
 8013628:	20001efc 	.word	0x20001efc
 801362c:	200023bc 	.word	0x200023bc
 8013630:	200023dc 	.word	0x200023dc
 8013634:	200023f8 	.word	0x200023f8
 8013638:	e000ed04 	.word	0xe000ed04
 801363c:	200023d0 	.word	0x200023d0

08013640 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013640:	b580      	push	{r7, lr}
 8013642:	b08a      	sub	sp, #40	; 0x28
 8013644:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013646:	2300      	movs	r3, #0
 8013648:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801364a:	2300      	movs	r3, #0
 801364c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801364e:	463a      	mov	r2, r7
 8013650:	1d39      	adds	r1, r7, #4
 8013652:	f107 0308 	add.w	r3, r7, #8
 8013656:	4618      	mov	r0, r3
 8013658:	f7fe fbd8 	bl	8011e0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801365c:	6839      	ldr	r1, [r7, #0]
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	68ba      	ldr	r2, [r7, #8]
 8013662:	9202      	str	r2, [sp, #8]
 8013664:	9301      	str	r3, [sp, #4]
 8013666:	2300      	movs	r3, #0
 8013668:	9300      	str	r3, [sp, #0]
 801366a:	2300      	movs	r3, #0
 801366c:	460a      	mov	r2, r1
 801366e:	4921      	ldr	r1, [pc, #132]	; (80136f4 <vTaskStartScheduler+0xb4>)
 8013670:	4821      	ldr	r0, [pc, #132]	; (80136f8 <vTaskStartScheduler+0xb8>)
 8013672:	f7ff fcc1 	bl	8012ff8 <xTaskCreateStatic>
 8013676:	4603      	mov	r3, r0
 8013678:	4a20      	ldr	r2, [pc, #128]	; (80136fc <vTaskStartScheduler+0xbc>)
 801367a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801367c:	4b1f      	ldr	r3, [pc, #124]	; (80136fc <vTaskStartScheduler+0xbc>)
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d002      	beq.n	801368a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013684:	2301      	movs	r3, #1
 8013686:	617b      	str	r3, [r7, #20]
 8013688:	e001      	b.n	801368e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801368a:	2300      	movs	r3, #0
 801368c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801368e:	697b      	ldr	r3, [r7, #20]
 8013690:	2b01      	cmp	r3, #1
 8013692:	d102      	bne.n	801369a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013694:	f000 fdfa 	bl	801428c <xTimerCreateTimerTask>
 8013698:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801369a:	697b      	ldr	r3, [r7, #20]
 801369c:	2b01      	cmp	r3, #1
 801369e:	d116      	bne.n	80136ce <vTaskStartScheduler+0x8e>
	__asm volatile
 80136a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136a4:	f383 8811 	msr	BASEPRI, r3
 80136a8:	f3bf 8f6f 	isb	sy
 80136ac:	f3bf 8f4f 	dsb	sy
 80136b0:	613b      	str	r3, [r7, #16]
}
 80136b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80136b4:	4b12      	ldr	r3, [pc, #72]	; (8013700 <vTaskStartScheduler+0xc0>)
 80136b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80136ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80136bc:	4b11      	ldr	r3, [pc, #68]	; (8013704 <vTaskStartScheduler+0xc4>)
 80136be:	2201      	movs	r2, #1
 80136c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80136c2:	4b11      	ldr	r3, [pc, #68]	; (8013708 <vTaskStartScheduler+0xc8>)
 80136c4:	2200      	movs	r2, #0
 80136c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80136c8:	f001 f9ba 	bl	8014a40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80136cc:	e00e      	b.n	80136ec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80136ce:	697b      	ldr	r3, [r7, #20]
 80136d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80136d4:	d10a      	bne.n	80136ec <vTaskStartScheduler+0xac>
	__asm volatile
 80136d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136da:	f383 8811 	msr	BASEPRI, r3
 80136de:	f3bf 8f6f 	isb	sy
 80136e2:	f3bf 8f4f 	dsb	sy
 80136e6:	60fb      	str	r3, [r7, #12]
}
 80136e8:	bf00      	nop
 80136ea:	e7fe      	b.n	80136ea <vTaskStartScheduler+0xaa>
}
 80136ec:	bf00      	nop
 80136ee:	3718      	adds	r7, #24
 80136f0:	46bd      	mov	sp, r7
 80136f2:	bd80      	pop	{r7, pc}
 80136f4:	0801a7f8 	.word	0x0801a7f8
 80136f8:	08013d25 	.word	0x08013d25
 80136fc:	200023f4 	.word	0x200023f4
 8013700:	200023f0 	.word	0x200023f0
 8013704:	200023dc 	.word	0x200023dc
 8013708:	200023d4 	.word	0x200023d4

0801370c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801370c:	b480      	push	{r7}
 801370e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013710:	4b04      	ldr	r3, [pc, #16]	; (8013724 <vTaskSuspendAll+0x18>)
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	3301      	adds	r3, #1
 8013716:	4a03      	ldr	r2, [pc, #12]	; (8013724 <vTaskSuspendAll+0x18>)
 8013718:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801371a:	bf00      	nop
 801371c:	46bd      	mov	sp, r7
 801371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013722:	4770      	bx	lr
 8013724:	200023f8 	.word	0x200023f8

08013728 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013728:	b580      	push	{r7, lr}
 801372a:	b084      	sub	sp, #16
 801372c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801372e:	2300      	movs	r3, #0
 8013730:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013732:	2300      	movs	r3, #0
 8013734:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013736:	4b42      	ldr	r3, [pc, #264]	; (8013840 <xTaskResumeAll+0x118>)
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d10a      	bne.n	8013754 <xTaskResumeAll+0x2c>
	__asm volatile
 801373e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013742:	f383 8811 	msr	BASEPRI, r3
 8013746:	f3bf 8f6f 	isb	sy
 801374a:	f3bf 8f4f 	dsb	sy
 801374e:	603b      	str	r3, [r7, #0]
}
 8013750:	bf00      	nop
 8013752:	e7fe      	b.n	8013752 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013754:	f001 fa16 	bl	8014b84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013758:	4b39      	ldr	r3, [pc, #228]	; (8013840 <xTaskResumeAll+0x118>)
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	3b01      	subs	r3, #1
 801375e:	4a38      	ldr	r2, [pc, #224]	; (8013840 <xTaskResumeAll+0x118>)
 8013760:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013762:	4b37      	ldr	r3, [pc, #220]	; (8013840 <xTaskResumeAll+0x118>)
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d162      	bne.n	8013830 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801376a:	4b36      	ldr	r3, [pc, #216]	; (8013844 <xTaskResumeAll+0x11c>)
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d05e      	beq.n	8013830 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013772:	e02f      	b.n	80137d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013774:	4b34      	ldr	r3, [pc, #208]	; (8013848 <xTaskResumeAll+0x120>)
 8013776:	68db      	ldr	r3, [r3, #12]
 8013778:	68db      	ldr	r3, [r3, #12]
 801377a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	3318      	adds	r3, #24
 8013780:	4618      	mov	r0, r3
 8013782:	f7fe fc01 	bl	8011f88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	3304      	adds	r3, #4
 801378a:	4618      	mov	r0, r3
 801378c:	f7fe fbfc 	bl	8011f88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013794:	4b2d      	ldr	r3, [pc, #180]	; (801384c <xTaskResumeAll+0x124>)
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	429a      	cmp	r2, r3
 801379a:	d903      	bls.n	80137a4 <xTaskResumeAll+0x7c>
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137a0:	4a2a      	ldr	r2, [pc, #168]	; (801384c <xTaskResumeAll+0x124>)
 80137a2:	6013      	str	r3, [r2, #0]
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137a8:	4613      	mov	r3, r2
 80137aa:	009b      	lsls	r3, r3, #2
 80137ac:	4413      	add	r3, r2
 80137ae:	009b      	lsls	r3, r3, #2
 80137b0:	4a27      	ldr	r2, [pc, #156]	; (8013850 <xTaskResumeAll+0x128>)
 80137b2:	441a      	add	r2, r3
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	3304      	adds	r3, #4
 80137b8:	4619      	mov	r1, r3
 80137ba:	4610      	mov	r0, r2
 80137bc:	f7fe fb87 	bl	8011ece <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137c4:	4b23      	ldr	r3, [pc, #140]	; (8013854 <xTaskResumeAll+0x12c>)
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137ca:	429a      	cmp	r2, r3
 80137cc:	d302      	bcc.n	80137d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80137ce:	4b22      	ldr	r3, [pc, #136]	; (8013858 <xTaskResumeAll+0x130>)
 80137d0:	2201      	movs	r2, #1
 80137d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80137d4:	4b1c      	ldr	r3, [pc, #112]	; (8013848 <xTaskResumeAll+0x120>)
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d1cb      	bne.n	8013774 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d001      	beq.n	80137e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80137e2:	f000 fb55 	bl	8013e90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80137e6:	4b1d      	ldr	r3, [pc, #116]	; (801385c <xTaskResumeAll+0x134>)
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d010      	beq.n	8013814 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80137f2:	f000 f847 	bl	8013884 <xTaskIncrementTick>
 80137f6:	4603      	mov	r3, r0
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d002      	beq.n	8013802 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80137fc:	4b16      	ldr	r3, [pc, #88]	; (8013858 <xTaskResumeAll+0x130>)
 80137fe:	2201      	movs	r2, #1
 8013800:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	3b01      	subs	r3, #1
 8013806:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d1f1      	bne.n	80137f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801380e:	4b13      	ldr	r3, [pc, #76]	; (801385c <xTaskResumeAll+0x134>)
 8013810:	2200      	movs	r2, #0
 8013812:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013814:	4b10      	ldr	r3, [pc, #64]	; (8013858 <xTaskResumeAll+0x130>)
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d009      	beq.n	8013830 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801381c:	2301      	movs	r3, #1
 801381e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013820:	4b0f      	ldr	r3, [pc, #60]	; (8013860 <xTaskResumeAll+0x138>)
 8013822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013826:	601a      	str	r2, [r3, #0]
 8013828:	f3bf 8f4f 	dsb	sy
 801382c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013830:	f001 f9d8 	bl	8014be4 <vPortExitCritical>

	return xAlreadyYielded;
 8013834:	68bb      	ldr	r3, [r7, #8]
}
 8013836:	4618      	mov	r0, r3
 8013838:	3710      	adds	r7, #16
 801383a:	46bd      	mov	sp, r7
 801383c:	bd80      	pop	{r7, pc}
 801383e:	bf00      	nop
 8013840:	200023f8 	.word	0x200023f8
 8013844:	200023d0 	.word	0x200023d0
 8013848:	20002390 	.word	0x20002390
 801384c:	200023d8 	.word	0x200023d8
 8013850:	20001f00 	.word	0x20001f00
 8013854:	20001efc 	.word	0x20001efc
 8013858:	200023e4 	.word	0x200023e4
 801385c:	200023e0 	.word	0x200023e0
 8013860:	e000ed04 	.word	0xe000ed04

08013864 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013864:	b480      	push	{r7}
 8013866:	b083      	sub	sp, #12
 8013868:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801386a:	4b05      	ldr	r3, [pc, #20]	; (8013880 <xTaskGetTickCount+0x1c>)
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013870:	687b      	ldr	r3, [r7, #4]
}
 8013872:	4618      	mov	r0, r3
 8013874:	370c      	adds	r7, #12
 8013876:	46bd      	mov	sp, r7
 8013878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387c:	4770      	bx	lr
 801387e:	bf00      	nop
 8013880:	200023d4 	.word	0x200023d4

08013884 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013884:	b580      	push	{r7, lr}
 8013886:	b086      	sub	sp, #24
 8013888:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801388a:	2300      	movs	r3, #0
 801388c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801388e:	4b4f      	ldr	r3, [pc, #316]	; (80139cc <xTaskIncrementTick+0x148>)
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	2b00      	cmp	r3, #0
 8013894:	f040 808f 	bne.w	80139b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013898:	4b4d      	ldr	r3, [pc, #308]	; (80139d0 <xTaskIncrementTick+0x14c>)
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	3301      	adds	r3, #1
 801389e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80138a0:	4a4b      	ldr	r2, [pc, #300]	; (80139d0 <xTaskIncrementTick+0x14c>)
 80138a2:	693b      	ldr	r3, [r7, #16]
 80138a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80138a6:	693b      	ldr	r3, [r7, #16]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d120      	bne.n	80138ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80138ac:	4b49      	ldr	r3, [pc, #292]	; (80139d4 <xTaskIncrementTick+0x150>)
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d00a      	beq.n	80138cc <xTaskIncrementTick+0x48>
	__asm volatile
 80138b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138ba:	f383 8811 	msr	BASEPRI, r3
 80138be:	f3bf 8f6f 	isb	sy
 80138c2:	f3bf 8f4f 	dsb	sy
 80138c6:	603b      	str	r3, [r7, #0]
}
 80138c8:	bf00      	nop
 80138ca:	e7fe      	b.n	80138ca <xTaskIncrementTick+0x46>
 80138cc:	4b41      	ldr	r3, [pc, #260]	; (80139d4 <xTaskIncrementTick+0x150>)
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	60fb      	str	r3, [r7, #12]
 80138d2:	4b41      	ldr	r3, [pc, #260]	; (80139d8 <xTaskIncrementTick+0x154>)
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	4a3f      	ldr	r2, [pc, #252]	; (80139d4 <xTaskIncrementTick+0x150>)
 80138d8:	6013      	str	r3, [r2, #0]
 80138da:	4a3f      	ldr	r2, [pc, #252]	; (80139d8 <xTaskIncrementTick+0x154>)
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	6013      	str	r3, [r2, #0]
 80138e0:	4b3e      	ldr	r3, [pc, #248]	; (80139dc <xTaskIncrementTick+0x158>)
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	3301      	adds	r3, #1
 80138e6:	4a3d      	ldr	r2, [pc, #244]	; (80139dc <xTaskIncrementTick+0x158>)
 80138e8:	6013      	str	r3, [r2, #0]
 80138ea:	f000 fad1 	bl	8013e90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80138ee:	4b3c      	ldr	r3, [pc, #240]	; (80139e0 <xTaskIncrementTick+0x15c>)
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	693a      	ldr	r2, [r7, #16]
 80138f4:	429a      	cmp	r2, r3
 80138f6:	d349      	bcc.n	801398c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80138f8:	4b36      	ldr	r3, [pc, #216]	; (80139d4 <xTaskIncrementTick+0x150>)
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d104      	bne.n	801390c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013902:	4b37      	ldr	r3, [pc, #220]	; (80139e0 <xTaskIncrementTick+0x15c>)
 8013904:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013908:	601a      	str	r2, [r3, #0]
					break;
 801390a:	e03f      	b.n	801398c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801390c:	4b31      	ldr	r3, [pc, #196]	; (80139d4 <xTaskIncrementTick+0x150>)
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	68db      	ldr	r3, [r3, #12]
 8013912:	68db      	ldr	r3, [r3, #12]
 8013914:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013916:	68bb      	ldr	r3, [r7, #8]
 8013918:	685b      	ldr	r3, [r3, #4]
 801391a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801391c:	693a      	ldr	r2, [r7, #16]
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	429a      	cmp	r2, r3
 8013922:	d203      	bcs.n	801392c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013924:	4a2e      	ldr	r2, [pc, #184]	; (80139e0 <xTaskIncrementTick+0x15c>)
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801392a:	e02f      	b.n	801398c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801392c:	68bb      	ldr	r3, [r7, #8]
 801392e:	3304      	adds	r3, #4
 8013930:	4618      	mov	r0, r3
 8013932:	f7fe fb29 	bl	8011f88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013936:	68bb      	ldr	r3, [r7, #8]
 8013938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801393a:	2b00      	cmp	r3, #0
 801393c:	d004      	beq.n	8013948 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801393e:	68bb      	ldr	r3, [r7, #8]
 8013940:	3318      	adds	r3, #24
 8013942:	4618      	mov	r0, r3
 8013944:	f7fe fb20 	bl	8011f88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013948:	68bb      	ldr	r3, [r7, #8]
 801394a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801394c:	4b25      	ldr	r3, [pc, #148]	; (80139e4 <xTaskIncrementTick+0x160>)
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	429a      	cmp	r2, r3
 8013952:	d903      	bls.n	801395c <xTaskIncrementTick+0xd8>
 8013954:	68bb      	ldr	r3, [r7, #8]
 8013956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013958:	4a22      	ldr	r2, [pc, #136]	; (80139e4 <xTaskIncrementTick+0x160>)
 801395a:	6013      	str	r3, [r2, #0]
 801395c:	68bb      	ldr	r3, [r7, #8]
 801395e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013960:	4613      	mov	r3, r2
 8013962:	009b      	lsls	r3, r3, #2
 8013964:	4413      	add	r3, r2
 8013966:	009b      	lsls	r3, r3, #2
 8013968:	4a1f      	ldr	r2, [pc, #124]	; (80139e8 <xTaskIncrementTick+0x164>)
 801396a:	441a      	add	r2, r3
 801396c:	68bb      	ldr	r3, [r7, #8]
 801396e:	3304      	adds	r3, #4
 8013970:	4619      	mov	r1, r3
 8013972:	4610      	mov	r0, r2
 8013974:	f7fe faab 	bl	8011ece <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013978:	68bb      	ldr	r3, [r7, #8]
 801397a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801397c:	4b1b      	ldr	r3, [pc, #108]	; (80139ec <xTaskIncrementTick+0x168>)
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013982:	429a      	cmp	r2, r3
 8013984:	d3b8      	bcc.n	80138f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8013986:	2301      	movs	r3, #1
 8013988:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801398a:	e7b5      	b.n	80138f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801398c:	4b17      	ldr	r3, [pc, #92]	; (80139ec <xTaskIncrementTick+0x168>)
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013992:	4915      	ldr	r1, [pc, #84]	; (80139e8 <xTaskIncrementTick+0x164>)
 8013994:	4613      	mov	r3, r2
 8013996:	009b      	lsls	r3, r3, #2
 8013998:	4413      	add	r3, r2
 801399a:	009b      	lsls	r3, r3, #2
 801399c:	440b      	add	r3, r1
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	2b01      	cmp	r3, #1
 80139a2:	d901      	bls.n	80139a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80139a4:	2301      	movs	r3, #1
 80139a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80139a8:	4b11      	ldr	r3, [pc, #68]	; (80139f0 <xTaskIncrementTick+0x16c>)
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d007      	beq.n	80139c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80139b0:	2301      	movs	r3, #1
 80139b2:	617b      	str	r3, [r7, #20]
 80139b4:	e004      	b.n	80139c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80139b6:	4b0f      	ldr	r3, [pc, #60]	; (80139f4 <xTaskIncrementTick+0x170>)
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	3301      	adds	r3, #1
 80139bc:	4a0d      	ldr	r2, [pc, #52]	; (80139f4 <xTaskIncrementTick+0x170>)
 80139be:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80139c0:	697b      	ldr	r3, [r7, #20]
}
 80139c2:	4618      	mov	r0, r3
 80139c4:	3718      	adds	r7, #24
 80139c6:	46bd      	mov	sp, r7
 80139c8:	bd80      	pop	{r7, pc}
 80139ca:	bf00      	nop
 80139cc:	200023f8 	.word	0x200023f8
 80139d0:	200023d4 	.word	0x200023d4
 80139d4:	20002388 	.word	0x20002388
 80139d8:	2000238c 	.word	0x2000238c
 80139dc:	200023e8 	.word	0x200023e8
 80139e0:	200023f0 	.word	0x200023f0
 80139e4:	200023d8 	.word	0x200023d8
 80139e8:	20001f00 	.word	0x20001f00
 80139ec:	20001efc 	.word	0x20001efc
 80139f0:	200023e4 	.word	0x200023e4
 80139f4:	200023e0 	.word	0x200023e0

080139f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80139f8:	b480      	push	{r7}
 80139fa:	b085      	sub	sp, #20
 80139fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80139fe:	4b28      	ldr	r3, [pc, #160]	; (8013aa0 <vTaskSwitchContext+0xa8>)
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d003      	beq.n	8013a0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013a06:	4b27      	ldr	r3, [pc, #156]	; (8013aa4 <vTaskSwitchContext+0xac>)
 8013a08:	2201      	movs	r2, #1
 8013a0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013a0c:	e041      	b.n	8013a92 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8013a0e:	4b25      	ldr	r3, [pc, #148]	; (8013aa4 <vTaskSwitchContext+0xac>)
 8013a10:	2200      	movs	r2, #0
 8013a12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013a14:	4b24      	ldr	r3, [pc, #144]	; (8013aa8 <vTaskSwitchContext+0xb0>)
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	60fb      	str	r3, [r7, #12]
 8013a1a:	e010      	b.n	8013a3e <vTaskSwitchContext+0x46>
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d10a      	bne.n	8013a38 <vTaskSwitchContext+0x40>
	__asm volatile
 8013a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a26:	f383 8811 	msr	BASEPRI, r3
 8013a2a:	f3bf 8f6f 	isb	sy
 8013a2e:	f3bf 8f4f 	dsb	sy
 8013a32:	607b      	str	r3, [r7, #4]
}
 8013a34:	bf00      	nop
 8013a36:	e7fe      	b.n	8013a36 <vTaskSwitchContext+0x3e>
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	3b01      	subs	r3, #1
 8013a3c:	60fb      	str	r3, [r7, #12]
 8013a3e:	491b      	ldr	r1, [pc, #108]	; (8013aac <vTaskSwitchContext+0xb4>)
 8013a40:	68fa      	ldr	r2, [r7, #12]
 8013a42:	4613      	mov	r3, r2
 8013a44:	009b      	lsls	r3, r3, #2
 8013a46:	4413      	add	r3, r2
 8013a48:	009b      	lsls	r3, r3, #2
 8013a4a:	440b      	add	r3, r1
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d0e4      	beq.n	8013a1c <vTaskSwitchContext+0x24>
 8013a52:	68fa      	ldr	r2, [r7, #12]
 8013a54:	4613      	mov	r3, r2
 8013a56:	009b      	lsls	r3, r3, #2
 8013a58:	4413      	add	r3, r2
 8013a5a:	009b      	lsls	r3, r3, #2
 8013a5c:	4a13      	ldr	r2, [pc, #76]	; (8013aac <vTaskSwitchContext+0xb4>)
 8013a5e:	4413      	add	r3, r2
 8013a60:	60bb      	str	r3, [r7, #8]
 8013a62:	68bb      	ldr	r3, [r7, #8]
 8013a64:	685b      	ldr	r3, [r3, #4]
 8013a66:	685a      	ldr	r2, [r3, #4]
 8013a68:	68bb      	ldr	r3, [r7, #8]
 8013a6a:	605a      	str	r2, [r3, #4]
 8013a6c:	68bb      	ldr	r3, [r7, #8]
 8013a6e:	685a      	ldr	r2, [r3, #4]
 8013a70:	68bb      	ldr	r3, [r7, #8]
 8013a72:	3308      	adds	r3, #8
 8013a74:	429a      	cmp	r2, r3
 8013a76:	d104      	bne.n	8013a82 <vTaskSwitchContext+0x8a>
 8013a78:	68bb      	ldr	r3, [r7, #8]
 8013a7a:	685b      	ldr	r3, [r3, #4]
 8013a7c:	685a      	ldr	r2, [r3, #4]
 8013a7e:	68bb      	ldr	r3, [r7, #8]
 8013a80:	605a      	str	r2, [r3, #4]
 8013a82:	68bb      	ldr	r3, [r7, #8]
 8013a84:	685b      	ldr	r3, [r3, #4]
 8013a86:	68db      	ldr	r3, [r3, #12]
 8013a88:	4a09      	ldr	r2, [pc, #36]	; (8013ab0 <vTaskSwitchContext+0xb8>)
 8013a8a:	6013      	str	r3, [r2, #0]
 8013a8c:	4a06      	ldr	r2, [pc, #24]	; (8013aa8 <vTaskSwitchContext+0xb0>)
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	6013      	str	r3, [r2, #0]
}
 8013a92:	bf00      	nop
 8013a94:	3714      	adds	r7, #20
 8013a96:	46bd      	mov	sp, r7
 8013a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a9c:	4770      	bx	lr
 8013a9e:	bf00      	nop
 8013aa0:	200023f8 	.word	0x200023f8
 8013aa4:	200023e4 	.word	0x200023e4
 8013aa8:	200023d8 	.word	0x200023d8
 8013aac:	20001f00 	.word	0x20001f00
 8013ab0:	20001efc 	.word	0x20001efc

08013ab4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	b084      	sub	sp, #16
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	6078      	str	r0, [r7, #4]
 8013abc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d10a      	bne.n	8013ada <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8013ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ac8:	f383 8811 	msr	BASEPRI, r3
 8013acc:	f3bf 8f6f 	isb	sy
 8013ad0:	f3bf 8f4f 	dsb	sy
 8013ad4:	60fb      	str	r3, [r7, #12]
}
 8013ad6:	bf00      	nop
 8013ad8:	e7fe      	b.n	8013ad8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013ada:	4b07      	ldr	r3, [pc, #28]	; (8013af8 <vTaskPlaceOnEventList+0x44>)
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	3318      	adds	r3, #24
 8013ae0:	4619      	mov	r1, r3
 8013ae2:	6878      	ldr	r0, [r7, #4]
 8013ae4:	f7fe fa17 	bl	8011f16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013ae8:	2101      	movs	r1, #1
 8013aea:	6838      	ldr	r0, [r7, #0]
 8013aec:	f000 fb7a 	bl	80141e4 <prvAddCurrentTaskToDelayedList>
}
 8013af0:	bf00      	nop
 8013af2:	3710      	adds	r7, #16
 8013af4:	46bd      	mov	sp, r7
 8013af6:	bd80      	pop	{r7, pc}
 8013af8:	20001efc 	.word	0x20001efc

08013afc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b086      	sub	sp, #24
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	60f8      	str	r0, [r7, #12]
 8013b04:	60b9      	str	r1, [r7, #8]
 8013b06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d10a      	bne.n	8013b24 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8013b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b12:	f383 8811 	msr	BASEPRI, r3
 8013b16:	f3bf 8f6f 	isb	sy
 8013b1a:	f3bf 8f4f 	dsb	sy
 8013b1e:	617b      	str	r3, [r7, #20]
}
 8013b20:	bf00      	nop
 8013b22:	e7fe      	b.n	8013b22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013b24:	4b0a      	ldr	r3, [pc, #40]	; (8013b50 <vTaskPlaceOnEventListRestricted+0x54>)
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	3318      	adds	r3, #24
 8013b2a:	4619      	mov	r1, r3
 8013b2c:	68f8      	ldr	r0, [r7, #12]
 8013b2e:	f7fe f9ce 	bl	8011ece <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d002      	beq.n	8013b3e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8013b38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b3c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013b3e:	6879      	ldr	r1, [r7, #4]
 8013b40:	68b8      	ldr	r0, [r7, #8]
 8013b42:	f000 fb4f 	bl	80141e4 <prvAddCurrentTaskToDelayedList>
	}
 8013b46:	bf00      	nop
 8013b48:	3718      	adds	r7, #24
 8013b4a:	46bd      	mov	sp, r7
 8013b4c:	bd80      	pop	{r7, pc}
 8013b4e:	bf00      	nop
 8013b50:	20001efc 	.word	0x20001efc

08013b54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013b54:	b580      	push	{r7, lr}
 8013b56:	b086      	sub	sp, #24
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	68db      	ldr	r3, [r3, #12]
 8013b60:	68db      	ldr	r3, [r3, #12]
 8013b62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013b64:	693b      	ldr	r3, [r7, #16]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d10a      	bne.n	8013b80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8013b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b6e:	f383 8811 	msr	BASEPRI, r3
 8013b72:	f3bf 8f6f 	isb	sy
 8013b76:	f3bf 8f4f 	dsb	sy
 8013b7a:	60fb      	str	r3, [r7, #12]
}
 8013b7c:	bf00      	nop
 8013b7e:	e7fe      	b.n	8013b7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013b80:	693b      	ldr	r3, [r7, #16]
 8013b82:	3318      	adds	r3, #24
 8013b84:	4618      	mov	r0, r3
 8013b86:	f7fe f9ff 	bl	8011f88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013b8a:	4b1e      	ldr	r3, [pc, #120]	; (8013c04 <xTaskRemoveFromEventList+0xb0>)
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d11d      	bne.n	8013bce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013b92:	693b      	ldr	r3, [r7, #16]
 8013b94:	3304      	adds	r3, #4
 8013b96:	4618      	mov	r0, r3
 8013b98:	f7fe f9f6 	bl	8011f88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013b9c:	693b      	ldr	r3, [r7, #16]
 8013b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ba0:	4b19      	ldr	r3, [pc, #100]	; (8013c08 <xTaskRemoveFromEventList+0xb4>)
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	429a      	cmp	r2, r3
 8013ba6:	d903      	bls.n	8013bb0 <xTaskRemoveFromEventList+0x5c>
 8013ba8:	693b      	ldr	r3, [r7, #16]
 8013baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bac:	4a16      	ldr	r2, [pc, #88]	; (8013c08 <xTaskRemoveFromEventList+0xb4>)
 8013bae:	6013      	str	r3, [r2, #0]
 8013bb0:	693b      	ldr	r3, [r7, #16]
 8013bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bb4:	4613      	mov	r3, r2
 8013bb6:	009b      	lsls	r3, r3, #2
 8013bb8:	4413      	add	r3, r2
 8013bba:	009b      	lsls	r3, r3, #2
 8013bbc:	4a13      	ldr	r2, [pc, #76]	; (8013c0c <xTaskRemoveFromEventList+0xb8>)
 8013bbe:	441a      	add	r2, r3
 8013bc0:	693b      	ldr	r3, [r7, #16]
 8013bc2:	3304      	adds	r3, #4
 8013bc4:	4619      	mov	r1, r3
 8013bc6:	4610      	mov	r0, r2
 8013bc8:	f7fe f981 	bl	8011ece <vListInsertEnd>
 8013bcc:	e005      	b.n	8013bda <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013bce:	693b      	ldr	r3, [r7, #16]
 8013bd0:	3318      	adds	r3, #24
 8013bd2:	4619      	mov	r1, r3
 8013bd4:	480e      	ldr	r0, [pc, #56]	; (8013c10 <xTaskRemoveFromEventList+0xbc>)
 8013bd6:	f7fe f97a 	bl	8011ece <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013bda:	693b      	ldr	r3, [r7, #16]
 8013bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bde:	4b0d      	ldr	r3, [pc, #52]	; (8013c14 <xTaskRemoveFromEventList+0xc0>)
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013be4:	429a      	cmp	r2, r3
 8013be6:	d905      	bls.n	8013bf4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013be8:	2301      	movs	r3, #1
 8013bea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013bec:	4b0a      	ldr	r3, [pc, #40]	; (8013c18 <xTaskRemoveFromEventList+0xc4>)
 8013bee:	2201      	movs	r2, #1
 8013bf0:	601a      	str	r2, [r3, #0]
 8013bf2:	e001      	b.n	8013bf8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8013bf4:	2300      	movs	r3, #0
 8013bf6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013bf8:	697b      	ldr	r3, [r7, #20]
}
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	3718      	adds	r7, #24
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	bd80      	pop	{r7, pc}
 8013c02:	bf00      	nop
 8013c04:	200023f8 	.word	0x200023f8
 8013c08:	200023d8 	.word	0x200023d8
 8013c0c:	20001f00 	.word	0x20001f00
 8013c10:	20002390 	.word	0x20002390
 8013c14:	20001efc 	.word	0x20001efc
 8013c18:	200023e4 	.word	0x200023e4

08013c1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013c1c:	b480      	push	{r7}
 8013c1e:	b083      	sub	sp, #12
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013c24:	4b06      	ldr	r3, [pc, #24]	; (8013c40 <vTaskInternalSetTimeOutState+0x24>)
 8013c26:	681a      	ldr	r2, [r3, #0]
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013c2c:	4b05      	ldr	r3, [pc, #20]	; (8013c44 <vTaskInternalSetTimeOutState+0x28>)
 8013c2e:	681a      	ldr	r2, [r3, #0]
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	605a      	str	r2, [r3, #4]
}
 8013c34:	bf00      	nop
 8013c36:	370c      	adds	r7, #12
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c3e:	4770      	bx	lr
 8013c40:	200023e8 	.word	0x200023e8
 8013c44:	200023d4 	.word	0x200023d4

08013c48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b088      	sub	sp, #32
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
 8013c50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d10a      	bne.n	8013c6e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8013c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c5c:	f383 8811 	msr	BASEPRI, r3
 8013c60:	f3bf 8f6f 	isb	sy
 8013c64:	f3bf 8f4f 	dsb	sy
 8013c68:	613b      	str	r3, [r7, #16]
}
 8013c6a:	bf00      	nop
 8013c6c:	e7fe      	b.n	8013c6c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8013c6e:	683b      	ldr	r3, [r7, #0]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d10a      	bne.n	8013c8a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8013c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c78:	f383 8811 	msr	BASEPRI, r3
 8013c7c:	f3bf 8f6f 	isb	sy
 8013c80:	f3bf 8f4f 	dsb	sy
 8013c84:	60fb      	str	r3, [r7, #12]
}
 8013c86:	bf00      	nop
 8013c88:	e7fe      	b.n	8013c88 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8013c8a:	f000 ff7b 	bl	8014b84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013c8e:	4b1d      	ldr	r3, [pc, #116]	; (8013d04 <xTaskCheckForTimeOut+0xbc>)
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	685b      	ldr	r3, [r3, #4]
 8013c98:	69ba      	ldr	r2, [r7, #24]
 8013c9a:	1ad3      	subs	r3, r2, r3
 8013c9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013c9e:	683b      	ldr	r3, [r7, #0]
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013ca6:	d102      	bne.n	8013cae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013ca8:	2300      	movs	r3, #0
 8013caa:	61fb      	str	r3, [r7, #28]
 8013cac:	e023      	b.n	8013cf6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	681a      	ldr	r2, [r3, #0]
 8013cb2:	4b15      	ldr	r3, [pc, #84]	; (8013d08 <xTaskCheckForTimeOut+0xc0>)
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	429a      	cmp	r2, r3
 8013cb8:	d007      	beq.n	8013cca <xTaskCheckForTimeOut+0x82>
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	685b      	ldr	r3, [r3, #4]
 8013cbe:	69ba      	ldr	r2, [r7, #24]
 8013cc0:	429a      	cmp	r2, r3
 8013cc2:	d302      	bcc.n	8013cca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013cc4:	2301      	movs	r3, #1
 8013cc6:	61fb      	str	r3, [r7, #28]
 8013cc8:	e015      	b.n	8013cf6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013cca:	683b      	ldr	r3, [r7, #0]
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	697a      	ldr	r2, [r7, #20]
 8013cd0:	429a      	cmp	r2, r3
 8013cd2:	d20b      	bcs.n	8013cec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013cd4:	683b      	ldr	r3, [r7, #0]
 8013cd6:	681a      	ldr	r2, [r3, #0]
 8013cd8:	697b      	ldr	r3, [r7, #20]
 8013cda:	1ad2      	subs	r2, r2, r3
 8013cdc:	683b      	ldr	r3, [r7, #0]
 8013cde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013ce0:	6878      	ldr	r0, [r7, #4]
 8013ce2:	f7ff ff9b 	bl	8013c1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013ce6:	2300      	movs	r3, #0
 8013ce8:	61fb      	str	r3, [r7, #28]
 8013cea:	e004      	b.n	8013cf6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8013cec:	683b      	ldr	r3, [r7, #0]
 8013cee:	2200      	movs	r2, #0
 8013cf0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013cf2:	2301      	movs	r3, #1
 8013cf4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013cf6:	f000 ff75 	bl	8014be4 <vPortExitCritical>

	return xReturn;
 8013cfa:	69fb      	ldr	r3, [r7, #28]
}
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	3720      	adds	r7, #32
 8013d00:	46bd      	mov	sp, r7
 8013d02:	bd80      	pop	{r7, pc}
 8013d04:	200023d4 	.word	0x200023d4
 8013d08:	200023e8 	.word	0x200023e8

08013d0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013d0c:	b480      	push	{r7}
 8013d0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013d10:	4b03      	ldr	r3, [pc, #12]	; (8013d20 <vTaskMissedYield+0x14>)
 8013d12:	2201      	movs	r2, #1
 8013d14:	601a      	str	r2, [r3, #0]
}
 8013d16:	bf00      	nop
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d1e:	4770      	bx	lr
 8013d20:	200023e4 	.word	0x200023e4

08013d24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013d24:	b580      	push	{r7, lr}
 8013d26:	b082      	sub	sp, #8
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013d2c:	f000 f852 	bl	8013dd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013d30:	4b06      	ldr	r3, [pc, #24]	; (8013d4c <prvIdleTask+0x28>)
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	2b01      	cmp	r3, #1
 8013d36:	d9f9      	bls.n	8013d2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8013d38:	4b05      	ldr	r3, [pc, #20]	; (8013d50 <prvIdleTask+0x2c>)
 8013d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d3e:	601a      	str	r2, [r3, #0]
 8013d40:	f3bf 8f4f 	dsb	sy
 8013d44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013d48:	e7f0      	b.n	8013d2c <prvIdleTask+0x8>
 8013d4a:	bf00      	nop
 8013d4c:	20001f00 	.word	0x20001f00
 8013d50:	e000ed04 	.word	0xe000ed04

08013d54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b082      	sub	sp, #8
 8013d58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	607b      	str	r3, [r7, #4]
 8013d5e:	e00c      	b.n	8013d7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013d60:	687a      	ldr	r2, [r7, #4]
 8013d62:	4613      	mov	r3, r2
 8013d64:	009b      	lsls	r3, r3, #2
 8013d66:	4413      	add	r3, r2
 8013d68:	009b      	lsls	r3, r3, #2
 8013d6a:	4a12      	ldr	r2, [pc, #72]	; (8013db4 <prvInitialiseTaskLists+0x60>)
 8013d6c:	4413      	add	r3, r2
 8013d6e:	4618      	mov	r0, r3
 8013d70:	f7fe f880 	bl	8011e74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	3301      	adds	r3, #1
 8013d78:	607b      	str	r3, [r7, #4]
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	2b37      	cmp	r3, #55	; 0x37
 8013d7e:	d9ef      	bls.n	8013d60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013d80:	480d      	ldr	r0, [pc, #52]	; (8013db8 <prvInitialiseTaskLists+0x64>)
 8013d82:	f7fe f877 	bl	8011e74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013d86:	480d      	ldr	r0, [pc, #52]	; (8013dbc <prvInitialiseTaskLists+0x68>)
 8013d88:	f7fe f874 	bl	8011e74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013d8c:	480c      	ldr	r0, [pc, #48]	; (8013dc0 <prvInitialiseTaskLists+0x6c>)
 8013d8e:	f7fe f871 	bl	8011e74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013d92:	480c      	ldr	r0, [pc, #48]	; (8013dc4 <prvInitialiseTaskLists+0x70>)
 8013d94:	f7fe f86e 	bl	8011e74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013d98:	480b      	ldr	r0, [pc, #44]	; (8013dc8 <prvInitialiseTaskLists+0x74>)
 8013d9a:	f7fe f86b 	bl	8011e74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013d9e:	4b0b      	ldr	r3, [pc, #44]	; (8013dcc <prvInitialiseTaskLists+0x78>)
 8013da0:	4a05      	ldr	r2, [pc, #20]	; (8013db8 <prvInitialiseTaskLists+0x64>)
 8013da2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013da4:	4b0a      	ldr	r3, [pc, #40]	; (8013dd0 <prvInitialiseTaskLists+0x7c>)
 8013da6:	4a05      	ldr	r2, [pc, #20]	; (8013dbc <prvInitialiseTaskLists+0x68>)
 8013da8:	601a      	str	r2, [r3, #0]
}
 8013daa:	bf00      	nop
 8013dac:	3708      	adds	r7, #8
 8013dae:	46bd      	mov	sp, r7
 8013db0:	bd80      	pop	{r7, pc}
 8013db2:	bf00      	nop
 8013db4:	20001f00 	.word	0x20001f00
 8013db8:	20002360 	.word	0x20002360
 8013dbc:	20002374 	.word	0x20002374
 8013dc0:	20002390 	.word	0x20002390
 8013dc4:	200023a4 	.word	0x200023a4
 8013dc8:	200023bc 	.word	0x200023bc
 8013dcc:	20002388 	.word	0x20002388
 8013dd0:	2000238c 	.word	0x2000238c

08013dd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013dd4:	b580      	push	{r7, lr}
 8013dd6:	b082      	sub	sp, #8
 8013dd8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013dda:	e019      	b.n	8013e10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013ddc:	f000 fed2 	bl	8014b84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013de0:	4b10      	ldr	r3, [pc, #64]	; (8013e24 <prvCheckTasksWaitingTermination+0x50>)
 8013de2:	68db      	ldr	r3, [r3, #12]
 8013de4:	68db      	ldr	r3, [r3, #12]
 8013de6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	3304      	adds	r3, #4
 8013dec:	4618      	mov	r0, r3
 8013dee:	f7fe f8cb 	bl	8011f88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013df2:	4b0d      	ldr	r3, [pc, #52]	; (8013e28 <prvCheckTasksWaitingTermination+0x54>)
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	3b01      	subs	r3, #1
 8013df8:	4a0b      	ldr	r2, [pc, #44]	; (8013e28 <prvCheckTasksWaitingTermination+0x54>)
 8013dfa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013dfc:	4b0b      	ldr	r3, [pc, #44]	; (8013e2c <prvCheckTasksWaitingTermination+0x58>)
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	3b01      	subs	r3, #1
 8013e02:	4a0a      	ldr	r2, [pc, #40]	; (8013e2c <prvCheckTasksWaitingTermination+0x58>)
 8013e04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013e06:	f000 feed 	bl	8014be4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013e0a:	6878      	ldr	r0, [r7, #4]
 8013e0c:	f000 f810 	bl	8013e30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013e10:	4b06      	ldr	r3, [pc, #24]	; (8013e2c <prvCheckTasksWaitingTermination+0x58>)
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d1e1      	bne.n	8013ddc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013e18:	bf00      	nop
 8013e1a:	bf00      	nop
 8013e1c:	3708      	adds	r7, #8
 8013e1e:	46bd      	mov	sp, r7
 8013e20:	bd80      	pop	{r7, pc}
 8013e22:	bf00      	nop
 8013e24:	200023a4 	.word	0x200023a4
 8013e28:	200023d0 	.word	0x200023d0
 8013e2c:	200023b8 	.word	0x200023b8

08013e30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b084      	sub	sp, #16
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d108      	bne.n	8013e54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e46:	4618      	mov	r0, r3
 8013e48:	f001 f88a 	bl	8014f60 <vPortFree>
				vPortFree( pxTCB );
 8013e4c:	6878      	ldr	r0, [r7, #4]
 8013e4e:	f001 f887 	bl	8014f60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013e52:	e018      	b.n	8013e86 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013e5a:	2b01      	cmp	r3, #1
 8013e5c:	d103      	bne.n	8013e66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8013e5e:	6878      	ldr	r0, [r7, #4]
 8013e60:	f001 f87e 	bl	8014f60 <vPortFree>
	}
 8013e64:	e00f      	b.n	8013e86 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013e6c:	2b02      	cmp	r3, #2
 8013e6e:	d00a      	beq.n	8013e86 <prvDeleteTCB+0x56>
	__asm volatile
 8013e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e74:	f383 8811 	msr	BASEPRI, r3
 8013e78:	f3bf 8f6f 	isb	sy
 8013e7c:	f3bf 8f4f 	dsb	sy
 8013e80:	60fb      	str	r3, [r7, #12]
}
 8013e82:	bf00      	nop
 8013e84:	e7fe      	b.n	8013e84 <prvDeleteTCB+0x54>
	}
 8013e86:	bf00      	nop
 8013e88:	3710      	adds	r7, #16
 8013e8a:	46bd      	mov	sp, r7
 8013e8c:	bd80      	pop	{r7, pc}
	...

08013e90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013e90:	b480      	push	{r7}
 8013e92:	b083      	sub	sp, #12
 8013e94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013e96:	4b0c      	ldr	r3, [pc, #48]	; (8013ec8 <prvResetNextTaskUnblockTime+0x38>)
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d104      	bne.n	8013eaa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013ea0:	4b0a      	ldr	r3, [pc, #40]	; (8013ecc <prvResetNextTaskUnblockTime+0x3c>)
 8013ea2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013ea6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013ea8:	e008      	b.n	8013ebc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013eaa:	4b07      	ldr	r3, [pc, #28]	; (8013ec8 <prvResetNextTaskUnblockTime+0x38>)
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	68db      	ldr	r3, [r3, #12]
 8013eb0:	68db      	ldr	r3, [r3, #12]
 8013eb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	685b      	ldr	r3, [r3, #4]
 8013eb8:	4a04      	ldr	r2, [pc, #16]	; (8013ecc <prvResetNextTaskUnblockTime+0x3c>)
 8013eba:	6013      	str	r3, [r2, #0]
}
 8013ebc:	bf00      	nop
 8013ebe:	370c      	adds	r7, #12
 8013ec0:	46bd      	mov	sp, r7
 8013ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ec6:	4770      	bx	lr
 8013ec8:	20002388 	.word	0x20002388
 8013ecc:	200023f0 	.word	0x200023f0

08013ed0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013ed0:	b480      	push	{r7}
 8013ed2:	b083      	sub	sp, #12
 8013ed4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013ed6:	4b0b      	ldr	r3, [pc, #44]	; (8013f04 <xTaskGetSchedulerState+0x34>)
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d102      	bne.n	8013ee4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013ede:	2301      	movs	r3, #1
 8013ee0:	607b      	str	r3, [r7, #4]
 8013ee2:	e008      	b.n	8013ef6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013ee4:	4b08      	ldr	r3, [pc, #32]	; (8013f08 <xTaskGetSchedulerState+0x38>)
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d102      	bne.n	8013ef2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013eec:	2302      	movs	r3, #2
 8013eee:	607b      	str	r3, [r7, #4]
 8013ef0:	e001      	b.n	8013ef6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013ef2:	2300      	movs	r3, #0
 8013ef4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013ef6:	687b      	ldr	r3, [r7, #4]
	}
 8013ef8:	4618      	mov	r0, r3
 8013efa:	370c      	adds	r7, #12
 8013efc:	46bd      	mov	sp, r7
 8013efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f02:	4770      	bx	lr
 8013f04:	200023dc 	.word	0x200023dc
 8013f08:	200023f8 	.word	0x200023f8

08013f0c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b084      	sub	sp, #16
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013f18:	2300      	movs	r3, #0
 8013f1a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d051      	beq.n	8013fc6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013f22:	68bb      	ldr	r3, [r7, #8]
 8013f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f26:	4b2a      	ldr	r3, [pc, #168]	; (8013fd0 <xTaskPriorityInherit+0xc4>)
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f2c:	429a      	cmp	r2, r3
 8013f2e:	d241      	bcs.n	8013fb4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013f30:	68bb      	ldr	r3, [r7, #8]
 8013f32:	699b      	ldr	r3, [r3, #24]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	db06      	blt.n	8013f46 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013f38:	4b25      	ldr	r3, [pc, #148]	; (8013fd0 <xTaskPriorityInherit+0xc4>)
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f3e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013f42:	68bb      	ldr	r3, [r7, #8]
 8013f44:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013f46:	68bb      	ldr	r3, [r7, #8]
 8013f48:	6959      	ldr	r1, [r3, #20]
 8013f4a:	68bb      	ldr	r3, [r7, #8]
 8013f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f4e:	4613      	mov	r3, r2
 8013f50:	009b      	lsls	r3, r3, #2
 8013f52:	4413      	add	r3, r2
 8013f54:	009b      	lsls	r3, r3, #2
 8013f56:	4a1f      	ldr	r2, [pc, #124]	; (8013fd4 <xTaskPriorityInherit+0xc8>)
 8013f58:	4413      	add	r3, r2
 8013f5a:	4299      	cmp	r1, r3
 8013f5c:	d122      	bne.n	8013fa4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013f5e:	68bb      	ldr	r3, [r7, #8]
 8013f60:	3304      	adds	r3, #4
 8013f62:	4618      	mov	r0, r3
 8013f64:	f7fe f810 	bl	8011f88 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013f68:	4b19      	ldr	r3, [pc, #100]	; (8013fd0 <xTaskPriorityInherit+0xc4>)
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f6e:	68bb      	ldr	r3, [r7, #8]
 8013f70:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013f72:	68bb      	ldr	r3, [r7, #8]
 8013f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f76:	4b18      	ldr	r3, [pc, #96]	; (8013fd8 <xTaskPriorityInherit+0xcc>)
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	429a      	cmp	r2, r3
 8013f7c:	d903      	bls.n	8013f86 <xTaskPriorityInherit+0x7a>
 8013f7e:	68bb      	ldr	r3, [r7, #8]
 8013f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f82:	4a15      	ldr	r2, [pc, #84]	; (8013fd8 <xTaskPriorityInherit+0xcc>)
 8013f84:	6013      	str	r3, [r2, #0]
 8013f86:	68bb      	ldr	r3, [r7, #8]
 8013f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f8a:	4613      	mov	r3, r2
 8013f8c:	009b      	lsls	r3, r3, #2
 8013f8e:	4413      	add	r3, r2
 8013f90:	009b      	lsls	r3, r3, #2
 8013f92:	4a10      	ldr	r2, [pc, #64]	; (8013fd4 <xTaskPriorityInherit+0xc8>)
 8013f94:	441a      	add	r2, r3
 8013f96:	68bb      	ldr	r3, [r7, #8]
 8013f98:	3304      	adds	r3, #4
 8013f9a:	4619      	mov	r1, r3
 8013f9c:	4610      	mov	r0, r2
 8013f9e:	f7fd ff96 	bl	8011ece <vListInsertEnd>
 8013fa2:	e004      	b.n	8013fae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013fa4:	4b0a      	ldr	r3, [pc, #40]	; (8013fd0 <xTaskPriorityInherit+0xc4>)
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013faa:	68bb      	ldr	r3, [r7, #8]
 8013fac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013fae:	2301      	movs	r3, #1
 8013fb0:	60fb      	str	r3, [r7, #12]
 8013fb2:	e008      	b.n	8013fc6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013fb4:	68bb      	ldr	r3, [r7, #8]
 8013fb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013fb8:	4b05      	ldr	r3, [pc, #20]	; (8013fd0 <xTaskPriorityInherit+0xc4>)
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fbe:	429a      	cmp	r2, r3
 8013fc0:	d201      	bcs.n	8013fc6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013fc2:	2301      	movs	r3, #1
 8013fc4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013fc6:	68fb      	ldr	r3, [r7, #12]
	}
 8013fc8:	4618      	mov	r0, r3
 8013fca:	3710      	adds	r7, #16
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	bd80      	pop	{r7, pc}
 8013fd0:	20001efc 	.word	0x20001efc
 8013fd4:	20001f00 	.word	0x20001f00
 8013fd8:	200023d8 	.word	0x200023d8

08013fdc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	b086      	sub	sp, #24
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013fe8:	2300      	movs	r3, #0
 8013fea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d056      	beq.n	80140a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013ff2:	4b2e      	ldr	r3, [pc, #184]	; (80140ac <xTaskPriorityDisinherit+0xd0>)
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	693a      	ldr	r2, [r7, #16]
 8013ff8:	429a      	cmp	r2, r3
 8013ffa:	d00a      	beq.n	8014012 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8013ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014000:	f383 8811 	msr	BASEPRI, r3
 8014004:	f3bf 8f6f 	isb	sy
 8014008:	f3bf 8f4f 	dsb	sy
 801400c:	60fb      	str	r3, [r7, #12]
}
 801400e:	bf00      	nop
 8014010:	e7fe      	b.n	8014010 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014012:	693b      	ldr	r3, [r7, #16]
 8014014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014016:	2b00      	cmp	r3, #0
 8014018:	d10a      	bne.n	8014030 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801401a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801401e:	f383 8811 	msr	BASEPRI, r3
 8014022:	f3bf 8f6f 	isb	sy
 8014026:	f3bf 8f4f 	dsb	sy
 801402a:	60bb      	str	r3, [r7, #8]
}
 801402c:	bf00      	nop
 801402e:	e7fe      	b.n	801402e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8014030:	693b      	ldr	r3, [r7, #16]
 8014032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014034:	1e5a      	subs	r2, r3, #1
 8014036:	693b      	ldr	r3, [r7, #16]
 8014038:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801403a:	693b      	ldr	r3, [r7, #16]
 801403c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801403e:	693b      	ldr	r3, [r7, #16]
 8014040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014042:	429a      	cmp	r2, r3
 8014044:	d02c      	beq.n	80140a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014046:	693b      	ldr	r3, [r7, #16]
 8014048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801404a:	2b00      	cmp	r3, #0
 801404c:	d128      	bne.n	80140a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801404e:	693b      	ldr	r3, [r7, #16]
 8014050:	3304      	adds	r3, #4
 8014052:	4618      	mov	r0, r3
 8014054:	f7fd ff98 	bl	8011f88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014058:	693b      	ldr	r3, [r7, #16]
 801405a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801405c:	693b      	ldr	r3, [r7, #16]
 801405e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014060:	693b      	ldr	r3, [r7, #16]
 8014062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014064:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014068:	693b      	ldr	r3, [r7, #16]
 801406a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801406c:	693b      	ldr	r3, [r7, #16]
 801406e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014070:	4b0f      	ldr	r3, [pc, #60]	; (80140b0 <xTaskPriorityDisinherit+0xd4>)
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	429a      	cmp	r2, r3
 8014076:	d903      	bls.n	8014080 <xTaskPriorityDisinherit+0xa4>
 8014078:	693b      	ldr	r3, [r7, #16]
 801407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801407c:	4a0c      	ldr	r2, [pc, #48]	; (80140b0 <xTaskPriorityDisinherit+0xd4>)
 801407e:	6013      	str	r3, [r2, #0]
 8014080:	693b      	ldr	r3, [r7, #16]
 8014082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014084:	4613      	mov	r3, r2
 8014086:	009b      	lsls	r3, r3, #2
 8014088:	4413      	add	r3, r2
 801408a:	009b      	lsls	r3, r3, #2
 801408c:	4a09      	ldr	r2, [pc, #36]	; (80140b4 <xTaskPriorityDisinherit+0xd8>)
 801408e:	441a      	add	r2, r3
 8014090:	693b      	ldr	r3, [r7, #16]
 8014092:	3304      	adds	r3, #4
 8014094:	4619      	mov	r1, r3
 8014096:	4610      	mov	r0, r2
 8014098:	f7fd ff19 	bl	8011ece <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801409c:	2301      	movs	r3, #1
 801409e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80140a0:	697b      	ldr	r3, [r7, #20]
	}
 80140a2:	4618      	mov	r0, r3
 80140a4:	3718      	adds	r7, #24
 80140a6:	46bd      	mov	sp, r7
 80140a8:	bd80      	pop	{r7, pc}
 80140aa:	bf00      	nop
 80140ac:	20001efc 	.word	0x20001efc
 80140b0:	200023d8 	.word	0x200023d8
 80140b4:	20001f00 	.word	0x20001f00

080140b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80140b8:	b580      	push	{r7, lr}
 80140ba:	b088      	sub	sp, #32
 80140bc:	af00      	add	r7, sp, #0
 80140be:	6078      	str	r0, [r7, #4]
 80140c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80140c6:	2301      	movs	r3, #1
 80140c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d06a      	beq.n	80141a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80140d0:	69bb      	ldr	r3, [r7, #24]
 80140d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d10a      	bne.n	80140ee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80140d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140dc:	f383 8811 	msr	BASEPRI, r3
 80140e0:	f3bf 8f6f 	isb	sy
 80140e4:	f3bf 8f4f 	dsb	sy
 80140e8:	60fb      	str	r3, [r7, #12]
}
 80140ea:	bf00      	nop
 80140ec:	e7fe      	b.n	80140ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80140ee:	69bb      	ldr	r3, [r7, #24]
 80140f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80140f2:	683a      	ldr	r2, [r7, #0]
 80140f4:	429a      	cmp	r2, r3
 80140f6:	d902      	bls.n	80140fe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80140f8:	683b      	ldr	r3, [r7, #0]
 80140fa:	61fb      	str	r3, [r7, #28]
 80140fc:	e002      	b.n	8014104 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80140fe:	69bb      	ldr	r3, [r7, #24]
 8014100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014102:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014104:	69bb      	ldr	r3, [r7, #24]
 8014106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014108:	69fa      	ldr	r2, [r7, #28]
 801410a:	429a      	cmp	r2, r3
 801410c:	d04b      	beq.n	80141a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801410e:	69bb      	ldr	r3, [r7, #24]
 8014110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014112:	697a      	ldr	r2, [r7, #20]
 8014114:	429a      	cmp	r2, r3
 8014116:	d146      	bne.n	80141a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014118:	4b25      	ldr	r3, [pc, #148]	; (80141b0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	69ba      	ldr	r2, [r7, #24]
 801411e:	429a      	cmp	r2, r3
 8014120:	d10a      	bne.n	8014138 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8014122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014126:	f383 8811 	msr	BASEPRI, r3
 801412a:	f3bf 8f6f 	isb	sy
 801412e:	f3bf 8f4f 	dsb	sy
 8014132:	60bb      	str	r3, [r7, #8]
}
 8014134:	bf00      	nop
 8014136:	e7fe      	b.n	8014136 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014138:	69bb      	ldr	r3, [r7, #24]
 801413a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801413c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801413e:	69bb      	ldr	r3, [r7, #24]
 8014140:	69fa      	ldr	r2, [r7, #28]
 8014142:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014144:	69bb      	ldr	r3, [r7, #24]
 8014146:	699b      	ldr	r3, [r3, #24]
 8014148:	2b00      	cmp	r3, #0
 801414a:	db04      	blt.n	8014156 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801414c:	69fb      	ldr	r3, [r7, #28]
 801414e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014152:	69bb      	ldr	r3, [r7, #24]
 8014154:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014156:	69bb      	ldr	r3, [r7, #24]
 8014158:	6959      	ldr	r1, [r3, #20]
 801415a:	693a      	ldr	r2, [r7, #16]
 801415c:	4613      	mov	r3, r2
 801415e:	009b      	lsls	r3, r3, #2
 8014160:	4413      	add	r3, r2
 8014162:	009b      	lsls	r3, r3, #2
 8014164:	4a13      	ldr	r2, [pc, #76]	; (80141b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8014166:	4413      	add	r3, r2
 8014168:	4299      	cmp	r1, r3
 801416a:	d11c      	bne.n	80141a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801416c:	69bb      	ldr	r3, [r7, #24]
 801416e:	3304      	adds	r3, #4
 8014170:	4618      	mov	r0, r3
 8014172:	f7fd ff09 	bl	8011f88 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8014176:	69bb      	ldr	r3, [r7, #24]
 8014178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801417a:	4b0f      	ldr	r3, [pc, #60]	; (80141b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	429a      	cmp	r2, r3
 8014180:	d903      	bls.n	801418a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8014182:	69bb      	ldr	r3, [r7, #24]
 8014184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014186:	4a0c      	ldr	r2, [pc, #48]	; (80141b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014188:	6013      	str	r3, [r2, #0]
 801418a:	69bb      	ldr	r3, [r7, #24]
 801418c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801418e:	4613      	mov	r3, r2
 8014190:	009b      	lsls	r3, r3, #2
 8014192:	4413      	add	r3, r2
 8014194:	009b      	lsls	r3, r3, #2
 8014196:	4a07      	ldr	r2, [pc, #28]	; (80141b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8014198:	441a      	add	r2, r3
 801419a:	69bb      	ldr	r3, [r7, #24]
 801419c:	3304      	adds	r3, #4
 801419e:	4619      	mov	r1, r3
 80141a0:	4610      	mov	r0, r2
 80141a2:	f7fd fe94 	bl	8011ece <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80141a6:	bf00      	nop
 80141a8:	3720      	adds	r7, #32
 80141aa:	46bd      	mov	sp, r7
 80141ac:	bd80      	pop	{r7, pc}
 80141ae:	bf00      	nop
 80141b0:	20001efc 	.word	0x20001efc
 80141b4:	20001f00 	.word	0x20001f00
 80141b8:	200023d8 	.word	0x200023d8

080141bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80141bc:	b480      	push	{r7}
 80141be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80141c0:	4b07      	ldr	r3, [pc, #28]	; (80141e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d004      	beq.n	80141d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80141c8:	4b05      	ldr	r3, [pc, #20]	; (80141e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80141ce:	3201      	adds	r2, #1
 80141d0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80141d2:	4b03      	ldr	r3, [pc, #12]	; (80141e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80141d4:	681b      	ldr	r3, [r3, #0]
	}
 80141d6:	4618      	mov	r0, r3
 80141d8:	46bd      	mov	sp, r7
 80141da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141de:	4770      	bx	lr
 80141e0:	20001efc 	.word	0x20001efc

080141e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80141e4:	b580      	push	{r7, lr}
 80141e6:	b084      	sub	sp, #16
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	6078      	str	r0, [r7, #4]
 80141ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80141ee:	4b21      	ldr	r3, [pc, #132]	; (8014274 <prvAddCurrentTaskToDelayedList+0x90>)
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80141f4:	4b20      	ldr	r3, [pc, #128]	; (8014278 <prvAddCurrentTaskToDelayedList+0x94>)
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	3304      	adds	r3, #4
 80141fa:	4618      	mov	r0, r3
 80141fc:	f7fd fec4 	bl	8011f88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014206:	d10a      	bne.n	801421e <prvAddCurrentTaskToDelayedList+0x3a>
 8014208:	683b      	ldr	r3, [r7, #0]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d007      	beq.n	801421e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801420e:	4b1a      	ldr	r3, [pc, #104]	; (8014278 <prvAddCurrentTaskToDelayedList+0x94>)
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	3304      	adds	r3, #4
 8014214:	4619      	mov	r1, r3
 8014216:	4819      	ldr	r0, [pc, #100]	; (801427c <prvAddCurrentTaskToDelayedList+0x98>)
 8014218:	f7fd fe59 	bl	8011ece <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801421c:	e026      	b.n	801426c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801421e:	68fa      	ldr	r2, [r7, #12]
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	4413      	add	r3, r2
 8014224:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014226:	4b14      	ldr	r3, [pc, #80]	; (8014278 <prvAddCurrentTaskToDelayedList+0x94>)
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	68ba      	ldr	r2, [r7, #8]
 801422c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801422e:	68ba      	ldr	r2, [r7, #8]
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	429a      	cmp	r2, r3
 8014234:	d209      	bcs.n	801424a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014236:	4b12      	ldr	r3, [pc, #72]	; (8014280 <prvAddCurrentTaskToDelayedList+0x9c>)
 8014238:	681a      	ldr	r2, [r3, #0]
 801423a:	4b0f      	ldr	r3, [pc, #60]	; (8014278 <prvAddCurrentTaskToDelayedList+0x94>)
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	3304      	adds	r3, #4
 8014240:	4619      	mov	r1, r3
 8014242:	4610      	mov	r0, r2
 8014244:	f7fd fe67 	bl	8011f16 <vListInsert>
}
 8014248:	e010      	b.n	801426c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801424a:	4b0e      	ldr	r3, [pc, #56]	; (8014284 <prvAddCurrentTaskToDelayedList+0xa0>)
 801424c:	681a      	ldr	r2, [r3, #0]
 801424e:	4b0a      	ldr	r3, [pc, #40]	; (8014278 <prvAddCurrentTaskToDelayedList+0x94>)
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	3304      	adds	r3, #4
 8014254:	4619      	mov	r1, r3
 8014256:	4610      	mov	r0, r2
 8014258:	f7fd fe5d 	bl	8011f16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801425c:	4b0a      	ldr	r3, [pc, #40]	; (8014288 <prvAddCurrentTaskToDelayedList+0xa4>)
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	68ba      	ldr	r2, [r7, #8]
 8014262:	429a      	cmp	r2, r3
 8014264:	d202      	bcs.n	801426c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014266:	4a08      	ldr	r2, [pc, #32]	; (8014288 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014268:	68bb      	ldr	r3, [r7, #8]
 801426a:	6013      	str	r3, [r2, #0]
}
 801426c:	bf00      	nop
 801426e:	3710      	adds	r7, #16
 8014270:	46bd      	mov	sp, r7
 8014272:	bd80      	pop	{r7, pc}
 8014274:	200023d4 	.word	0x200023d4
 8014278:	20001efc 	.word	0x20001efc
 801427c:	200023bc 	.word	0x200023bc
 8014280:	2000238c 	.word	0x2000238c
 8014284:	20002388 	.word	0x20002388
 8014288:	200023f0 	.word	0x200023f0

0801428c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801428c:	b580      	push	{r7, lr}
 801428e:	b08a      	sub	sp, #40	; 0x28
 8014290:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014292:	2300      	movs	r3, #0
 8014294:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8014296:	f000 fb07 	bl	80148a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801429a:	4b1c      	ldr	r3, [pc, #112]	; (801430c <xTimerCreateTimerTask+0x80>)
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d021      	beq.n	80142e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80142a2:	2300      	movs	r3, #0
 80142a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80142a6:	2300      	movs	r3, #0
 80142a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80142aa:	1d3a      	adds	r2, r7, #4
 80142ac:	f107 0108 	add.w	r1, r7, #8
 80142b0:	f107 030c 	add.w	r3, r7, #12
 80142b4:	4618      	mov	r0, r3
 80142b6:	f7fd fdc3 	bl	8011e40 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80142ba:	6879      	ldr	r1, [r7, #4]
 80142bc:	68bb      	ldr	r3, [r7, #8]
 80142be:	68fa      	ldr	r2, [r7, #12]
 80142c0:	9202      	str	r2, [sp, #8]
 80142c2:	9301      	str	r3, [sp, #4]
 80142c4:	2302      	movs	r3, #2
 80142c6:	9300      	str	r3, [sp, #0]
 80142c8:	2300      	movs	r3, #0
 80142ca:	460a      	mov	r2, r1
 80142cc:	4910      	ldr	r1, [pc, #64]	; (8014310 <xTimerCreateTimerTask+0x84>)
 80142ce:	4811      	ldr	r0, [pc, #68]	; (8014314 <xTimerCreateTimerTask+0x88>)
 80142d0:	f7fe fe92 	bl	8012ff8 <xTaskCreateStatic>
 80142d4:	4603      	mov	r3, r0
 80142d6:	4a10      	ldr	r2, [pc, #64]	; (8014318 <xTimerCreateTimerTask+0x8c>)
 80142d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80142da:	4b0f      	ldr	r3, [pc, #60]	; (8014318 <xTimerCreateTimerTask+0x8c>)
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d001      	beq.n	80142e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80142e2:	2301      	movs	r3, #1
 80142e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80142e6:	697b      	ldr	r3, [r7, #20]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d10a      	bne.n	8014302 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80142ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142f0:	f383 8811 	msr	BASEPRI, r3
 80142f4:	f3bf 8f6f 	isb	sy
 80142f8:	f3bf 8f4f 	dsb	sy
 80142fc:	613b      	str	r3, [r7, #16]
}
 80142fe:	bf00      	nop
 8014300:	e7fe      	b.n	8014300 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8014302:	697b      	ldr	r3, [r7, #20]
}
 8014304:	4618      	mov	r0, r3
 8014306:	3718      	adds	r7, #24
 8014308:	46bd      	mov	sp, r7
 801430a:	bd80      	pop	{r7, pc}
 801430c:	2000242c 	.word	0x2000242c
 8014310:	0801a800 	.word	0x0801a800
 8014314:	08014451 	.word	0x08014451
 8014318:	20002430 	.word	0x20002430

0801431c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801431c:	b580      	push	{r7, lr}
 801431e:	b08a      	sub	sp, #40	; 0x28
 8014320:	af00      	add	r7, sp, #0
 8014322:	60f8      	str	r0, [r7, #12]
 8014324:	60b9      	str	r1, [r7, #8]
 8014326:	607a      	str	r2, [r7, #4]
 8014328:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801432a:	2300      	movs	r3, #0
 801432c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	2b00      	cmp	r3, #0
 8014332:	d10a      	bne.n	801434a <xTimerGenericCommand+0x2e>
	__asm volatile
 8014334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014338:	f383 8811 	msr	BASEPRI, r3
 801433c:	f3bf 8f6f 	isb	sy
 8014340:	f3bf 8f4f 	dsb	sy
 8014344:	623b      	str	r3, [r7, #32]
}
 8014346:	bf00      	nop
 8014348:	e7fe      	b.n	8014348 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801434a:	4b1a      	ldr	r3, [pc, #104]	; (80143b4 <xTimerGenericCommand+0x98>)
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d02a      	beq.n	80143a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014352:	68bb      	ldr	r3, [r7, #8]
 8014354:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801435e:	68bb      	ldr	r3, [r7, #8]
 8014360:	2b05      	cmp	r3, #5
 8014362:	dc18      	bgt.n	8014396 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014364:	f7ff fdb4 	bl	8013ed0 <xTaskGetSchedulerState>
 8014368:	4603      	mov	r3, r0
 801436a:	2b02      	cmp	r3, #2
 801436c:	d109      	bne.n	8014382 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801436e:	4b11      	ldr	r3, [pc, #68]	; (80143b4 <xTimerGenericCommand+0x98>)
 8014370:	6818      	ldr	r0, [r3, #0]
 8014372:	f107 0110 	add.w	r1, r7, #16
 8014376:	2300      	movs	r3, #0
 8014378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801437a:	f7fd ffd7 	bl	801232c <xQueueGenericSend>
 801437e:	6278      	str	r0, [r7, #36]	; 0x24
 8014380:	e012      	b.n	80143a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014382:	4b0c      	ldr	r3, [pc, #48]	; (80143b4 <xTimerGenericCommand+0x98>)
 8014384:	6818      	ldr	r0, [r3, #0]
 8014386:	f107 0110 	add.w	r1, r7, #16
 801438a:	2300      	movs	r3, #0
 801438c:	2200      	movs	r2, #0
 801438e:	f7fd ffcd 	bl	801232c <xQueueGenericSend>
 8014392:	6278      	str	r0, [r7, #36]	; 0x24
 8014394:	e008      	b.n	80143a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014396:	4b07      	ldr	r3, [pc, #28]	; (80143b4 <xTimerGenericCommand+0x98>)
 8014398:	6818      	ldr	r0, [r3, #0]
 801439a:	f107 0110 	add.w	r1, r7, #16
 801439e:	2300      	movs	r3, #0
 80143a0:	683a      	ldr	r2, [r7, #0]
 80143a2:	f7fe f8c1 	bl	8012528 <xQueueGenericSendFromISR>
 80143a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80143a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80143aa:	4618      	mov	r0, r3
 80143ac:	3728      	adds	r7, #40	; 0x28
 80143ae:	46bd      	mov	sp, r7
 80143b0:	bd80      	pop	{r7, pc}
 80143b2:	bf00      	nop
 80143b4:	2000242c 	.word	0x2000242c

080143b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b088      	sub	sp, #32
 80143bc:	af02      	add	r7, sp, #8
 80143be:	6078      	str	r0, [r7, #4]
 80143c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80143c2:	4b22      	ldr	r3, [pc, #136]	; (801444c <prvProcessExpiredTimer+0x94>)
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	68db      	ldr	r3, [r3, #12]
 80143c8:	68db      	ldr	r3, [r3, #12]
 80143ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80143cc:	697b      	ldr	r3, [r7, #20]
 80143ce:	3304      	adds	r3, #4
 80143d0:	4618      	mov	r0, r3
 80143d2:	f7fd fdd9 	bl	8011f88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80143d6:	697b      	ldr	r3, [r7, #20]
 80143d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80143dc:	f003 0304 	and.w	r3, r3, #4
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d022      	beq.n	801442a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80143e4:	697b      	ldr	r3, [r7, #20]
 80143e6:	699a      	ldr	r2, [r3, #24]
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	18d1      	adds	r1, r2, r3
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	683a      	ldr	r2, [r7, #0]
 80143f0:	6978      	ldr	r0, [r7, #20]
 80143f2:	f000 f8d1 	bl	8014598 <prvInsertTimerInActiveList>
 80143f6:	4603      	mov	r3, r0
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d01f      	beq.n	801443c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80143fc:	2300      	movs	r3, #0
 80143fe:	9300      	str	r3, [sp, #0]
 8014400:	2300      	movs	r3, #0
 8014402:	687a      	ldr	r2, [r7, #4]
 8014404:	2100      	movs	r1, #0
 8014406:	6978      	ldr	r0, [r7, #20]
 8014408:	f7ff ff88 	bl	801431c <xTimerGenericCommand>
 801440c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801440e:	693b      	ldr	r3, [r7, #16]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d113      	bne.n	801443c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8014414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014418:	f383 8811 	msr	BASEPRI, r3
 801441c:	f3bf 8f6f 	isb	sy
 8014420:	f3bf 8f4f 	dsb	sy
 8014424:	60fb      	str	r3, [r7, #12]
}
 8014426:	bf00      	nop
 8014428:	e7fe      	b.n	8014428 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801442a:	697b      	ldr	r3, [r7, #20]
 801442c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014430:	f023 0301 	bic.w	r3, r3, #1
 8014434:	b2da      	uxtb	r2, r3
 8014436:	697b      	ldr	r3, [r7, #20]
 8014438:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801443c:	697b      	ldr	r3, [r7, #20]
 801443e:	6a1b      	ldr	r3, [r3, #32]
 8014440:	6978      	ldr	r0, [r7, #20]
 8014442:	4798      	blx	r3
}
 8014444:	bf00      	nop
 8014446:	3718      	adds	r7, #24
 8014448:	46bd      	mov	sp, r7
 801444a:	bd80      	pop	{r7, pc}
 801444c:	20002424 	.word	0x20002424

08014450 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014450:	b580      	push	{r7, lr}
 8014452:	b084      	sub	sp, #16
 8014454:	af00      	add	r7, sp, #0
 8014456:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014458:	f107 0308 	add.w	r3, r7, #8
 801445c:	4618      	mov	r0, r3
 801445e:	f000 f857 	bl	8014510 <prvGetNextExpireTime>
 8014462:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014464:	68bb      	ldr	r3, [r7, #8]
 8014466:	4619      	mov	r1, r3
 8014468:	68f8      	ldr	r0, [r7, #12]
 801446a:	f000 f803 	bl	8014474 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801446e:	f000 f8d5 	bl	801461c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014472:	e7f1      	b.n	8014458 <prvTimerTask+0x8>

08014474 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014474:	b580      	push	{r7, lr}
 8014476:	b084      	sub	sp, #16
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]
 801447c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801447e:	f7ff f945 	bl	801370c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014482:	f107 0308 	add.w	r3, r7, #8
 8014486:	4618      	mov	r0, r3
 8014488:	f000 f866 	bl	8014558 <prvSampleTimeNow>
 801448c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801448e:	68bb      	ldr	r3, [r7, #8]
 8014490:	2b00      	cmp	r3, #0
 8014492:	d130      	bne.n	80144f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014494:	683b      	ldr	r3, [r7, #0]
 8014496:	2b00      	cmp	r3, #0
 8014498:	d10a      	bne.n	80144b0 <prvProcessTimerOrBlockTask+0x3c>
 801449a:	687a      	ldr	r2, [r7, #4]
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	429a      	cmp	r2, r3
 80144a0:	d806      	bhi.n	80144b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80144a2:	f7ff f941 	bl	8013728 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80144a6:	68f9      	ldr	r1, [r7, #12]
 80144a8:	6878      	ldr	r0, [r7, #4]
 80144aa:	f7ff ff85 	bl	80143b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80144ae:	e024      	b.n	80144fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80144b0:	683b      	ldr	r3, [r7, #0]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d008      	beq.n	80144c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80144b6:	4b13      	ldr	r3, [pc, #76]	; (8014504 <prvProcessTimerOrBlockTask+0x90>)
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d101      	bne.n	80144c4 <prvProcessTimerOrBlockTask+0x50>
 80144c0:	2301      	movs	r3, #1
 80144c2:	e000      	b.n	80144c6 <prvProcessTimerOrBlockTask+0x52>
 80144c4:	2300      	movs	r3, #0
 80144c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80144c8:	4b0f      	ldr	r3, [pc, #60]	; (8014508 <prvProcessTimerOrBlockTask+0x94>)
 80144ca:	6818      	ldr	r0, [r3, #0]
 80144cc:	687a      	ldr	r2, [r7, #4]
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	1ad3      	subs	r3, r2, r3
 80144d2:	683a      	ldr	r2, [r7, #0]
 80144d4:	4619      	mov	r1, r3
 80144d6:	f7fe fd5b 	bl	8012f90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80144da:	f7ff f925 	bl	8013728 <xTaskResumeAll>
 80144de:	4603      	mov	r3, r0
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d10a      	bne.n	80144fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80144e4:	4b09      	ldr	r3, [pc, #36]	; (801450c <prvProcessTimerOrBlockTask+0x98>)
 80144e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144ea:	601a      	str	r2, [r3, #0]
 80144ec:	f3bf 8f4f 	dsb	sy
 80144f0:	f3bf 8f6f 	isb	sy
}
 80144f4:	e001      	b.n	80144fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80144f6:	f7ff f917 	bl	8013728 <xTaskResumeAll>
}
 80144fa:	bf00      	nop
 80144fc:	3710      	adds	r7, #16
 80144fe:	46bd      	mov	sp, r7
 8014500:	bd80      	pop	{r7, pc}
 8014502:	bf00      	nop
 8014504:	20002428 	.word	0x20002428
 8014508:	2000242c 	.word	0x2000242c
 801450c:	e000ed04 	.word	0xe000ed04

08014510 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014510:	b480      	push	{r7}
 8014512:	b085      	sub	sp, #20
 8014514:	af00      	add	r7, sp, #0
 8014516:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014518:	4b0e      	ldr	r3, [pc, #56]	; (8014554 <prvGetNextExpireTime+0x44>)
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	2b00      	cmp	r3, #0
 8014520:	d101      	bne.n	8014526 <prvGetNextExpireTime+0x16>
 8014522:	2201      	movs	r2, #1
 8014524:	e000      	b.n	8014528 <prvGetNextExpireTime+0x18>
 8014526:	2200      	movs	r2, #0
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	2b00      	cmp	r3, #0
 8014532:	d105      	bne.n	8014540 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014534:	4b07      	ldr	r3, [pc, #28]	; (8014554 <prvGetNextExpireTime+0x44>)
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	68db      	ldr	r3, [r3, #12]
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	60fb      	str	r3, [r7, #12]
 801453e:	e001      	b.n	8014544 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014540:	2300      	movs	r3, #0
 8014542:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8014544:	68fb      	ldr	r3, [r7, #12]
}
 8014546:	4618      	mov	r0, r3
 8014548:	3714      	adds	r7, #20
 801454a:	46bd      	mov	sp, r7
 801454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014550:	4770      	bx	lr
 8014552:	bf00      	nop
 8014554:	20002424 	.word	0x20002424

08014558 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014558:	b580      	push	{r7, lr}
 801455a:	b084      	sub	sp, #16
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014560:	f7ff f980 	bl	8013864 <xTaskGetTickCount>
 8014564:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8014566:	4b0b      	ldr	r3, [pc, #44]	; (8014594 <prvSampleTimeNow+0x3c>)
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	68fa      	ldr	r2, [r7, #12]
 801456c:	429a      	cmp	r2, r3
 801456e:	d205      	bcs.n	801457c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014570:	f000 f936 	bl	80147e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	2201      	movs	r2, #1
 8014578:	601a      	str	r2, [r3, #0]
 801457a:	e002      	b.n	8014582 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	2200      	movs	r2, #0
 8014580:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8014582:	4a04      	ldr	r2, [pc, #16]	; (8014594 <prvSampleTimeNow+0x3c>)
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8014588:	68fb      	ldr	r3, [r7, #12]
}
 801458a:	4618      	mov	r0, r3
 801458c:	3710      	adds	r7, #16
 801458e:	46bd      	mov	sp, r7
 8014590:	bd80      	pop	{r7, pc}
 8014592:	bf00      	nop
 8014594:	20002434 	.word	0x20002434

08014598 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8014598:	b580      	push	{r7, lr}
 801459a:	b086      	sub	sp, #24
 801459c:	af00      	add	r7, sp, #0
 801459e:	60f8      	str	r0, [r7, #12]
 80145a0:	60b9      	str	r1, [r7, #8]
 80145a2:	607a      	str	r2, [r7, #4]
 80145a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80145a6:	2300      	movs	r3, #0
 80145a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	68ba      	ldr	r2, [r7, #8]
 80145ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	68fa      	ldr	r2, [r7, #12]
 80145b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80145b6:	68ba      	ldr	r2, [r7, #8]
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	429a      	cmp	r2, r3
 80145bc:	d812      	bhi.n	80145e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80145be:	687a      	ldr	r2, [r7, #4]
 80145c0:	683b      	ldr	r3, [r7, #0]
 80145c2:	1ad2      	subs	r2, r2, r3
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	699b      	ldr	r3, [r3, #24]
 80145c8:	429a      	cmp	r2, r3
 80145ca:	d302      	bcc.n	80145d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80145cc:	2301      	movs	r3, #1
 80145ce:	617b      	str	r3, [r7, #20]
 80145d0:	e01b      	b.n	801460a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80145d2:	4b10      	ldr	r3, [pc, #64]	; (8014614 <prvInsertTimerInActiveList+0x7c>)
 80145d4:	681a      	ldr	r2, [r3, #0]
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	3304      	adds	r3, #4
 80145da:	4619      	mov	r1, r3
 80145dc:	4610      	mov	r0, r2
 80145de:	f7fd fc9a 	bl	8011f16 <vListInsert>
 80145e2:	e012      	b.n	801460a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80145e4:	687a      	ldr	r2, [r7, #4]
 80145e6:	683b      	ldr	r3, [r7, #0]
 80145e8:	429a      	cmp	r2, r3
 80145ea:	d206      	bcs.n	80145fa <prvInsertTimerInActiveList+0x62>
 80145ec:	68ba      	ldr	r2, [r7, #8]
 80145ee:	683b      	ldr	r3, [r7, #0]
 80145f0:	429a      	cmp	r2, r3
 80145f2:	d302      	bcc.n	80145fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80145f4:	2301      	movs	r3, #1
 80145f6:	617b      	str	r3, [r7, #20]
 80145f8:	e007      	b.n	801460a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80145fa:	4b07      	ldr	r3, [pc, #28]	; (8014618 <prvInsertTimerInActiveList+0x80>)
 80145fc:	681a      	ldr	r2, [r3, #0]
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	3304      	adds	r3, #4
 8014602:	4619      	mov	r1, r3
 8014604:	4610      	mov	r0, r2
 8014606:	f7fd fc86 	bl	8011f16 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801460a:	697b      	ldr	r3, [r7, #20]
}
 801460c:	4618      	mov	r0, r3
 801460e:	3718      	adds	r7, #24
 8014610:	46bd      	mov	sp, r7
 8014612:	bd80      	pop	{r7, pc}
 8014614:	20002428 	.word	0x20002428
 8014618:	20002424 	.word	0x20002424

0801461c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801461c:	b580      	push	{r7, lr}
 801461e:	b08e      	sub	sp, #56	; 0x38
 8014620:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014622:	e0ca      	b.n	80147ba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	2b00      	cmp	r3, #0
 8014628:	da18      	bge.n	801465c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801462a:	1d3b      	adds	r3, r7, #4
 801462c:	3304      	adds	r3, #4
 801462e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014632:	2b00      	cmp	r3, #0
 8014634:	d10a      	bne.n	801464c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8014636:	f04f 0350 	mov.w	r3, #80	; 0x50
 801463a:	f383 8811 	msr	BASEPRI, r3
 801463e:	f3bf 8f6f 	isb	sy
 8014642:	f3bf 8f4f 	dsb	sy
 8014646:	61fb      	str	r3, [r7, #28]
}
 8014648:	bf00      	nop
 801464a:	e7fe      	b.n	801464a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801464c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014652:	6850      	ldr	r0, [r2, #4]
 8014654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014656:	6892      	ldr	r2, [r2, #8]
 8014658:	4611      	mov	r1, r2
 801465a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	2b00      	cmp	r3, #0
 8014660:	f2c0 80aa 	blt.w	80147b8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801466a:	695b      	ldr	r3, [r3, #20]
 801466c:	2b00      	cmp	r3, #0
 801466e:	d004      	beq.n	801467a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014672:	3304      	adds	r3, #4
 8014674:	4618      	mov	r0, r3
 8014676:	f7fd fc87 	bl	8011f88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801467a:	463b      	mov	r3, r7
 801467c:	4618      	mov	r0, r3
 801467e:	f7ff ff6b 	bl	8014558 <prvSampleTimeNow>
 8014682:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	2b09      	cmp	r3, #9
 8014688:	f200 8097 	bhi.w	80147ba <prvProcessReceivedCommands+0x19e>
 801468c:	a201      	add	r2, pc, #4	; (adr r2, 8014694 <prvProcessReceivedCommands+0x78>)
 801468e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014692:	bf00      	nop
 8014694:	080146bd 	.word	0x080146bd
 8014698:	080146bd 	.word	0x080146bd
 801469c:	080146bd 	.word	0x080146bd
 80146a0:	08014731 	.word	0x08014731
 80146a4:	08014745 	.word	0x08014745
 80146a8:	0801478f 	.word	0x0801478f
 80146ac:	080146bd 	.word	0x080146bd
 80146b0:	080146bd 	.word	0x080146bd
 80146b4:	08014731 	.word	0x08014731
 80146b8:	08014745 	.word	0x08014745
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80146bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80146c2:	f043 0301 	orr.w	r3, r3, #1
 80146c6:	b2da      	uxtb	r2, r3
 80146c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80146ce:	68ba      	ldr	r2, [r7, #8]
 80146d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146d2:	699b      	ldr	r3, [r3, #24]
 80146d4:	18d1      	adds	r1, r2, r3
 80146d6:	68bb      	ldr	r3, [r7, #8]
 80146d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80146dc:	f7ff ff5c 	bl	8014598 <prvInsertTimerInActiveList>
 80146e0:	4603      	mov	r3, r0
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d069      	beq.n	80147ba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80146e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146e8:	6a1b      	ldr	r3, [r3, #32]
 80146ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80146ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80146ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80146f4:	f003 0304 	and.w	r3, r3, #4
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d05e      	beq.n	80147ba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80146fc:	68ba      	ldr	r2, [r7, #8]
 80146fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014700:	699b      	ldr	r3, [r3, #24]
 8014702:	441a      	add	r2, r3
 8014704:	2300      	movs	r3, #0
 8014706:	9300      	str	r3, [sp, #0]
 8014708:	2300      	movs	r3, #0
 801470a:	2100      	movs	r1, #0
 801470c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801470e:	f7ff fe05 	bl	801431c <xTimerGenericCommand>
 8014712:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014714:	6a3b      	ldr	r3, [r7, #32]
 8014716:	2b00      	cmp	r3, #0
 8014718:	d14f      	bne.n	80147ba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801471a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801471e:	f383 8811 	msr	BASEPRI, r3
 8014722:	f3bf 8f6f 	isb	sy
 8014726:	f3bf 8f4f 	dsb	sy
 801472a:	61bb      	str	r3, [r7, #24]
}
 801472c:	bf00      	nop
 801472e:	e7fe      	b.n	801472e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014732:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014736:	f023 0301 	bic.w	r3, r3, #1
 801473a:	b2da      	uxtb	r2, r3
 801473c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801473e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8014742:	e03a      	b.n	80147ba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014746:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801474a:	f043 0301 	orr.w	r3, r3, #1
 801474e:	b2da      	uxtb	r2, r3
 8014750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014752:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014756:	68ba      	ldr	r2, [r7, #8]
 8014758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801475a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801475c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801475e:	699b      	ldr	r3, [r3, #24]
 8014760:	2b00      	cmp	r3, #0
 8014762:	d10a      	bne.n	801477a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8014764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014768:	f383 8811 	msr	BASEPRI, r3
 801476c:	f3bf 8f6f 	isb	sy
 8014770:	f3bf 8f4f 	dsb	sy
 8014774:	617b      	str	r3, [r7, #20]
}
 8014776:	bf00      	nop
 8014778:	e7fe      	b.n	8014778 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801477a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801477c:	699a      	ldr	r2, [r3, #24]
 801477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014780:	18d1      	adds	r1, r2, r3
 8014782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014788:	f7ff ff06 	bl	8014598 <prvInsertTimerInActiveList>
					break;
 801478c:	e015      	b.n	80147ba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801478e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014794:	f003 0302 	and.w	r3, r3, #2
 8014798:	2b00      	cmp	r3, #0
 801479a:	d103      	bne.n	80147a4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801479c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801479e:	f000 fbdf 	bl	8014f60 <vPortFree>
 80147a2:	e00a      	b.n	80147ba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80147a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80147aa:	f023 0301 	bic.w	r3, r3, #1
 80147ae:	b2da      	uxtb	r2, r3
 80147b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80147b6:	e000      	b.n	80147ba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80147b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80147ba:	4b08      	ldr	r3, [pc, #32]	; (80147dc <prvProcessReceivedCommands+0x1c0>)
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	1d39      	adds	r1, r7, #4
 80147c0:	2200      	movs	r2, #0
 80147c2:	4618      	mov	r0, r3
 80147c4:	f7fd ffd8 	bl	8012778 <xQueueReceive>
 80147c8:	4603      	mov	r3, r0
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	f47f af2a 	bne.w	8014624 <prvProcessReceivedCommands+0x8>
	}
}
 80147d0:	bf00      	nop
 80147d2:	bf00      	nop
 80147d4:	3730      	adds	r7, #48	; 0x30
 80147d6:	46bd      	mov	sp, r7
 80147d8:	bd80      	pop	{r7, pc}
 80147da:	bf00      	nop
 80147dc:	2000242c 	.word	0x2000242c

080147e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80147e0:	b580      	push	{r7, lr}
 80147e2:	b088      	sub	sp, #32
 80147e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80147e6:	e048      	b.n	801487a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80147e8:	4b2d      	ldr	r3, [pc, #180]	; (80148a0 <prvSwitchTimerLists+0xc0>)
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	68db      	ldr	r3, [r3, #12]
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80147f2:	4b2b      	ldr	r3, [pc, #172]	; (80148a0 <prvSwitchTimerLists+0xc0>)
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	68db      	ldr	r3, [r3, #12]
 80147f8:	68db      	ldr	r3, [r3, #12]
 80147fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	3304      	adds	r3, #4
 8014800:	4618      	mov	r0, r3
 8014802:	f7fd fbc1 	bl	8011f88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	6a1b      	ldr	r3, [r3, #32]
 801480a:	68f8      	ldr	r0, [r7, #12]
 801480c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014814:	f003 0304 	and.w	r3, r3, #4
 8014818:	2b00      	cmp	r3, #0
 801481a:	d02e      	beq.n	801487a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	699b      	ldr	r3, [r3, #24]
 8014820:	693a      	ldr	r2, [r7, #16]
 8014822:	4413      	add	r3, r2
 8014824:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014826:	68ba      	ldr	r2, [r7, #8]
 8014828:	693b      	ldr	r3, [r7, #16]
 801482a:	429a      	cmp	r2, r3
 801482c:	d90e      	bls.n	801484c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	68ba      	ldr	r2, [r7, #8]
 8014832:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	68fa      	ldr	r2, [r7, #12]
 8014838:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801483a:	4b19      	ldr	r3, [pc, #100]	; (80148a0 <prvSwitchTimerLists+0xc0>)
 801483c:	681a      	ldr	r2, [r3, #0]
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	3304      	adds	r3, #4
 8014842:	4619      	mov	r1, r3
 8014844:	4610      	mov	r0, r2
 8014846:	f7fd fb66 	bl	8011f16 <vListInsert>
 801484a:	e016      	b.n	801487a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801484c:	2300      	movs	r3, #0
 801484e:	9300      	str	r3, [sp, #0]
 8014850:	2300      	movs	r3, #0
 8014852:	693a      	ldr	r2, [r7, #16]
 8014854:	2100      	movs	r1, #0
 8014856:	68f8      	ldr	r0, [r7, #12]
 8014858:	f7ff fd60 	bl	801431c <xTimerGenericCommand>
 801485c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	2b00      	cmp	r3, #0
 8014862:	d10a      	bne.n	801487a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8014864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014868:	f383 8811 	msr	BASEPRI, r3
 801486c:	f3bf 8f6f 	isb	sy
 8014870:	f3bf 8f4f 	dsb	sy
 8014874:	603b      	str	r3, [r7, #0]
}
 8014876:	bf00      	nop
 8014878:	e7fe      	b.n	8014878 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801487a:	4b09      	ldr	r3, [pc, #36]	; (80148a0 <prvSwitchTimerLists+0xc0>)
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d1b1      	bne.n	80147e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014884:	4b06      	ldr	r3, [pc, #24]	; (80148a0 <prvSwitchTimerLists+0xc0>)
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801488a:	4b06      	ldr	r3, [pc, #24]	; (80148a4 <prvSwitchTimerLists+0xc4>)
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	4a04      	ldr	r2, [pc, #16]	; (80148a0 <prvSwitchTimerLists+0xc0>)
 8014890:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014892:	4a04      	ldr	r2, [pc, #16]	; (80148a4 <prvSwitchTimerLists+0xc4>)
 8014894:	697b      	ldr	r3, [r7, #20]
 8014896:	6013      	str	r3, [r2, #0]
}
 8014898:	bf00      	nop
 801489a:	3718      	adds	r7, #24
 801489c:	46bd      	mov	sp, r7
 801489e:	bd80      	pop	{r7, pc}
 80148a0:	20002424 	.word	0x20002424
 80148a4:	20002428 	.word	0x20002428

080148a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80148a8:	b580      	push	{r7, lr}
 80148aa:	b082      	sub	sp, #8
 80148ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80148ae:	f000 f969 	bl	8014b84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80148b2:	4b15      	ldr	r3, [pc, #84]	; (8014908 <prvCheckForValidListAndQueue+0x60>)
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d120      	bne.n	80148fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80148ba:	4814      	ldr	r0, [pc, #80]	; (801490c <prvCheckForValidListAndQueue+0x64>)
 80148bc:	f7fd fada 	bl	8011e74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80148c0:	4813      	ldr	r0, [pc, #76]	; (8014910 <prvCheckForValidListAndQueue+0x68>)
 80148c2:	f7fd fad7 	bl	8011e74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80148c6:	4b13      	ldr	r3, [pc, #76]	; (8014914 <prvCheckForValidListAndQueue+0x6c>)
 80148c8:	4a10      	ldr	r2, [pc, #64]	; (801490c <prvCheckForValidListAndQueue+0x64>)
 80148ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80148cc:	4b12      	ldr	r3, [pc, #72]	; (8014918 <prvCheckForValidListAndQueue+0x70>)
 80148ce:	4a10      	ldr	r2, [pc, #64]	; (8014910 <prvCheckForValidListAndQueue+0x68>)
 80148d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80148d2:	2300      	movs	r3, #0
 80148d4:	9300      	str	r3, [sp, #0]
 80148d6:	4b11      	ldr	r3, [pc, #68]	; (801491c <prvCheckForValidListAndQueue+0x74>)
 80148d8:	4a11      	ldr	r2, [pc, #68]	; (8014920 <prvCheckForValidListAndQueue+0x78>)
 80148da:	2110      	movs	r1, #16
 80148dc:	200a      	movs	r0, #10
 80148de:	f7fd fbe5 	bl	80120ac <xQueueGenericCreateStatic>
 80148e2:	4603      	mov	r3, r0
 80148e4:	4a08      	ldr	r2, [pc, #32]	; (8014908 <prvCheckForValidListAndQueue+0x60>)
 80148e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80148e8:	4b07      	ldr	r3, [pc, #28]	; (8014908 <prvCheckForValidListAndQueue+0x60>)
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d005      	beq.n	80148fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80148f0:	4b05      	ldr	r3, [pc, #20]	; (8014908 <prvCheckForValidListAndQueue+0x60>)
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	490b      	ldr	r1, [pc, #44]	; (8014924 <prvCheckForValidListAndQueue+0x7c>)
 80148f6:	4618      	mov	r0, r3
 80148f8:	f7fe faf6 	bl	8012ee8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80148fc:	f000 f972 	bl	8014be4 <vPortExitCritical>
}
 8014900:	bf00      	nop
 8014902:	46bd      	mov	sp, r7
 8014904:	bd80      	pop	{r7, pc}
 8014906:	bf00      	nop
 8014908:	2000242c 	.word	0x2000242c
 801490c:	200023fc 	.word	0x200023fc
 8014910:	20002410 	.word	0x20002410
 8014914:	20002424 	.word	0x20002424
 8014918:	20002428 	.word	0x20002428
 801491c:	200024d8 	.word	0x200024d8
 8014920:	20002438 	.word	0x20002438
 8014924:	0801a808 	.word	0x0801a808

08014928 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014928:	b480      	push	{r7}
 801492a:	b085      	sub	sp, #20
 801492c:	af00      	add	r7, sp, #0
 801492e:	60f8      	str	r0, [r7, #12]
 8014930:	60b9      	str	r1, [r7, #8]
 8014932:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	3b04      	subs	r3, #4
 8014938:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014940:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	3b04      	subs	r3, #4
 8014946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014948:	68bb      	ldr	r3, [r7, #8]
 801494a:	f023 0201 	bic.w	r2, r3, #1
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	3b04      	subs	r3, #4
 8014956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014958:	4a0c      	ldr	r2, [pc, #48]	; (801498c <pxPortInitialiseStack+0x64>)
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	3b14      	subs	r3, #20
 8014962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014964:	687a      	ldr	r2, [r7, #4]
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	3b04      	subs	r3, #4
 801496e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	f06f 0202 	mvn.w	r2, #2
 8014976:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	3b20      	subs	r3, #32
 801497c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801497e:	68fb      	ldr	r3, [r7, #12]
}
 8014980:	4618      	mov	r0, r3
 8014982:	3714      	adds	r7, #20
 8014984:	46bd      	mov	sp, r7
 8014986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801498a:	4770      	bx	lr
 801498c:	08014991 	.word	0x08014991

08014990 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014990:	b480      	push	{r7}
 8014992:	b085      	sub	sp, #20
 8014994:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014996:	2300      	movs	r3, #0
 8014998:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801499a:	4b12      	ldr	r3, [pc, #72]	; (80149e4 <prvTaskExitError+0x54>)
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80149a2:	d00a      	beq.n	80149ba <prvTaskExitError+0x2a>
	__asm volatile
 80149a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149a8:	f383 8811 	msr	BASEPRI, r3
 80149ac:	f3bf 8f6f 	isb	sy
 80149b0:	f3bf 8f4f 	dsb	sy
 80149b4:	60fb      	str	r3, [r7, #12]
}
 80149b6:	bf00      	nop
 80149b8:	e7fe      	b.n	80149b8 <prvTaskExitError+0x28>
	__asm volatile
 80149ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149be:	f383 8811 	msr	BASEPRI, r3
 80149c2:	f3bf 8f6f 	isb	sy
 80149c6:	f3bf 8f4f 	dsb	sy
 80149ca:	60bb      	str	r3, [r7, #8]
}
 80149cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80149ce:	bf00      	nop
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d0fc      	beq.n	80149d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80149d6:	bf00      	nop
 80149d8:	bf00      	nop
 80149da:	3714      	adds	r7, #20
 80149dc:	46bd      	mov	sp, r7
 80149de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e2:	4770      	bx	lr
 80149e4:	20000240 	.word	0x20000240
	...

080149f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80149f0:	4b07      	ldr	r3, [pc, #28]	; (8014a10 <pxCurrentTCBConst2>)
 80149f2:	6819      	ldr	r1, [r3, #0]
 80149f4:	6808      	ldr	r0, [r1, #0]
 80149f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149fa:	f380 8809 	msr	PSP, r0
 80149fe:	f3bf 8f6f 	isb	sy
 8014a02:	f04f 0000 	mov.w	r0, #0
 8014a06:	f380 8811 	msr	BASEPRI, r0
 8014a0a:	4770      	bx	lr
 8014a0c:	f3af 8000 	nop.w

08014a10 <pxCurrentTCBConst2>:
 8014a10:	20001efc 	.word	0x20001efc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014a14:	bf00      	nop
 8014a16:	bf00      	nop

08014a18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014a18:	4808      	ldr	r0, [pc, #32]	; (8014a3c <prvPortStartFirstTask+0x24>)
 8014a1a:	6800      	ldr	r0, [r0, #0]
 8014a1c:	6800      	ldr	r0, [r0, #0]
 8014a1e:	f380 8808 	msr	MSP, r0
 8014a22:	f04f 0000 	mov.w	r0, #0
 8014a26:	f380 8814 	msr	CONTROL, r0
 8014a2a:	b662      	cpsie	i
 8014a2c:	b661      	cpsie	f
 8014a2e:	f3bf 8f4f 	dsb	sy
 8014a32:	f3bf 8f6f 	isb	sy
 8014a36:	df00      	svc	0
 8014a38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014a3a:	bf00      	nop
 8014a3c:	e000ed08 	.word	0xe000ed08

08014a40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014a40:	b580      	push	{r7, lr}
 8014a42:	b086      	sub	sp, #24
 8014a44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014a46:	4b46      	ldr	r3, [pc, #280]	; (8014b60 <xPortStartScheduler+0x120>)
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	4a46      	ldr	r2, [pc, #280]	; (8014b64 <xPortStartScheduler+0x124>)
 8014a4c:	4293      	cmp	r3, r2
 8014a4e:	d10a      	bne.n	8014a66 <xPortStartScheduler+0x26>
	__asm volatile
 8014a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a54:	f383 8811 	msr	BASEPRI, r3
 8014a58:	f3bf 8f6f 	isb	sy
 8014a5c:	f3bf 8f4f 	dsb	sy
 8014a60:	613b      	str	r3, [r7, #16]
}
 8014a62:	bf00      	nop
 8014a64:	e7fe      	b.n	8014a64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014a66:	4b3e      	ldr	r3, [pc, #248]	; (8014b60 <xPortStartScheduler+0x120>)
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	4a3f      	ldr	r2, [pc, #252]	; (8014b68 <xPortStartScheduler+0x128>)
 8014a6c:	4293      	cmp	r3, r2
 8014a6e:	d10a      	bne.n	8014a86 <xPortStartScheduler+0x46>
	__asm volatile
 8014a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a74:	f383 8811 	msr	BASEPRI, r3
 8014a78:	f3bf 8f6f 	isb	sy
 8014a7c:	f3bf 8f4f 	dsb	sy
 8014a80:	60fb      	str	r3, [r7, #12]
}
 8014a82:	bf00      	nop
 8014a84:	e7fe      	b.n	8014a84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014a86:	4b39      	ldr	r3, [pc, #228]	; (8014b6c <xPortStartScheduler+0x12c>)
 8014a88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014a8a:	697b      	ldr	r3, [r7, #20]
 8014a8c:	781b      	ldrb	r3, [r3, #0]
 8014a8e:	b2db      	uxtb	r3, r3
 8014a90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014a92:	697b      	ldr	r3, [r7, #20]
 8014a94:	22ff      	movs	r2, #255	; 0xff
 8014a96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014a98:	697b      	ldr	r3, [r7, #20]
 8014a9a:	781b      	ldrb	r3, [r3, #0]
 8014a9c:	b2db      	uxtb	r3, r3
 8014a9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014aa0:	78fb      	ldrb	r3, [r7, #3]
 8014aa2:	b2db      	uxtb	r3, r3
 8014aa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014aa8:	b2da      	uxtb	r2, r3
 8014aaa:	4b31      	ldr	r3, [pc, #196]	; (8014b70 <xPortStartScheduler+0x130>)
 8014aac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014aae:	4b31      	ldr	r3, [pc, #196]	; (8014b74 <xPortStartScheduler+0x134>)
 8014ab0:	2207      	movs	r2, #7
 8014ab2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014ab4:	e009      	b.n	8014aca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014ab6:	4b2f      	ldr	r3, [pc, #188]	; (8014b74 <xPortStartScheduler+0x134>)
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	3b01      	subs	r3, #1
 8014abc:	4a2d      	ldr	r2, [pc, #180]	; (8014b74 <xPortStartScheduler+0x134>)
 8014abe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014ac0:	78fb      	ldrb	r3, [r7, #3]
 8014ac2:	b2db      	uxtb	r3, r3
 8014ac4:	005b      	lsls	r3, r3, #1
 8014ac6:	b2db      	uxtb	r3, r3
 8014ac8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014aca:	78fb      	ldrb	r3, [r7, #3]
 8014acc:	b2db      	uxtb	r3, r3
 8014ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014ad2:	2b80      	cmp	r3, #128	; 0x80
 8014ad4:	d0ef      	beq.n	8014ab6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014ad6:	4b27      	ldr	r3, [pc, #156]	; (8014b74 <xPortStartScheduler+0x134>)
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	f1c3 0307 	rsb	r3, r3, #7
 8014ade:	2b04      	cmp	r3, #4
 8014ae0:	d00a      	beq.n	8014af8 <xPortStartScheduler+0xb8>
	__asm volatile
 8014ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ae6:	f383 8811 	msr	BASEPRI, r3
 8014aea:	f3bf 8f6f 	isb	sy
 8014aee:	f3bf 8f4f 	dsb	sy
 8014af2:	60bb      	str	r3, [r7, #8]
}
 8014af4:	bf00      	nop
 8014af6:	e7fe      	b.n	8014af6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014af8:	4b1e      	ldr	r3, [pc, #120]	; (8014b74 <xPortStartScheduler+0x134>)
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	021b      	lsls	r3, r3, #8
 8014afe:	4a1d      	ldr	r2, [pc, #116]	; (8014b74 <xPortStartScheduler+0x134>)
 8014b00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014b02:	4b1c      	ldr	r3, [pc, #112]	; (8014b74 <xPortStartScheduler+0x134>)
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014b0a:	4a1a      	ldr	r2, [pc, #104]	; (8014b74 <xPortStartScheduler+0x134>)
 8014b0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	b2da      	uxtb	r2, r3
 8014b12:	697b      	ldr	r3, [r7, #20]
 8014b14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014b16:	4b18      	ldr	r3, [pc, #96]	; (8014b78 <xPortStartScheduler+0x138>)
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	4a17      	ldr	r2, [pc, #92]	; (8014b78 <xPortStartScheduler+0x138>)
 8014b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014b20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014b22:	4b15      	ldr	r3, [pc, #84]	; (8014b78 <xPortStartScheduler+0x138>)
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	4a14      	ldr	r2, [pc, #80]	; (8014b78 <xPortStartScheduler+0x138>)
 8014b28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014b2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014b2e:	f000 f8dd 	bl	8014cec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014b32:	4b12      	ldr	r3, [pc, #72]	; (8014b7c <xPortStartScheduler+0x13c>)
 8014b34:	2200      	movs	r2, #0
 8014b36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014b38:	f000 f8fc 	bl	8014d34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014b3c:	4b10      	ldr	r3, [pc, #64]	; (8014b80 <xPortStartScheduler+0x140>)
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	4a0f      	ldr	r2, [pc, #60]	; (8014b80 <xPortStartScheduler+0x140>)
 8014b42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014b46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014b48:	f7ff ff66 	bl	8014a18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014b4c:	f7fe ff54 	bl	80139f8 <vTaskSwitchContext>
	prvTaskExitError();
 8014b50:	f7ff ff1e 	bl	8014990 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014b54:	2300      	movs	r3, #0
}
 8014b56:	4618      	mov	r0, r3
 8014b58:	3718      	adds	r7, #24
 8014b5a:	46bd      	mov	sp, r7
 8014b5c:	bd80      	pop	{r7, pc}
 8014b5e:	bf00      	nop
 8014b60:	e000ed00 	.word	0xe000ed00
 8014b64:	410fc271 	.word	0x410fc271
 8014b68:	410fc270 	.word	0x410fc270
 8014b6c:	e000e400 	.word	0xe000e400
 8014b70:	20002528 	.word	0x20002528
 8014b74:	2000252c 	.word	0x2000252c
 8014b78:	e000ed20 	.word	0xe000ed20
 8014b7c:	20000240 	.word	0x20000240
 8014b80:	e000ef34 	.word	0xe000ef34

08014b84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014b84:	b480      	push	{r7}
 8014b86:	b083      	sub	sp, #12
 8014b88:	af00      	add	r7, sp, #0
	__asm volatile
 8014b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b8e:	f383 8811 	msr	BASEPRI, r3
 8014b92:	f3bf 8f6f 	isb	sy
 8014b96:	f3bf 8f4f 	dsb	sy
 8014b9a:	607b      	str	r3, [r7, #4]
}
 8014b9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014b9e:	4b0f      	ldr	r3, [pc, #60]	; (8014bdc <vPortEnterCritical+0x58>)
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	3301      	adds	r3, #1
 8014ba4:	4a0d      	ldr	r2, [pc, #52]	; (8014bdc <vPortEnterCritical+0x58>)
 8014ba6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014ba8:	4b0c      	ldr	r3, [pc, #48]	; (8014bdc <vPortEnterCritical+0x58>)
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	2b01      	cmp	r3, #1
 8014bae:	d10f      	bne.n	8014bd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014bb0:	4b0b      	ldr	r3, [pc, #44]	; (8014be0 <vPortEnterCritical+0x5c>)
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	b2db      	uxtb	r3, r3
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d00a      	beq.n	8014bd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8014bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bbe:	f383 8811 	msr	BASEPRI, r3
 8014bc2:	f3bf 8f6f 	isb	sy
 8014bc6:	f3bf 8f4f 	dsb	sy
 8014bca:	603b      	str	r3, [r7, #0]
}
 8014bcc:	bf00      	nop
 8014bce:	e7fe      	b.n	8014bce <vPortEnterCritical+0x4a>
	}
}
 8014bd0:	bf00      	nop
 8014bd2:	370c      	adds	r7, #12
 8014bd4:	46bd      	mov	sp, r7
 8014bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bda:	4770      	bx	lr
 8014bdc:	20000240 	.word	0x20000240
 8014be0:	e000ed04 	.word	0xe000ed04

08014be4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014be4:	b480      	push	{r7}
 8014be6:	b083      	sub	sp, #12
 8014be8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014bea:	4b12      	ldr	r3, [pc, #72]	; (8014c34 <vPortExitCritical+0x50>)
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d10a      	bne.n	8014c08 <vPortExitCritical+0x24>
	__asm volatile
 8014bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bf6:	f383 8811 	msr	BASEPRI, r3
 8014bfa:	f3bf 8f6f 	isb	sy
 8014bfe:	f3bf 8f4f 	dsb	sy
 8014c02:	607b      	str	r3, [r7, #4]
}
 8014c04:	bf00      	nop
 8014c06:	e7fe      	b.n	8014c06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014c08:	4b0a      	ldr	r3, [pc, #40]	; (8014c34 <vPortExitCritical+0x50>)
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	3b01      	subs	r3, #1
 8014c0e:	4a09      	ldr	r2, [pc, #36]	; (8014c34 <vPortExitCritical+0x50>)
 8014c10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014c12:	4b08      	ldr	r3, [pc, #32]	; (8014c34 <vPortExitCritical+0x50>)
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d105      	bne.n	8014c26 <vPortExitCritical+0x42>
 8014c1a:	2300      	movs	r3, #0
 8014c1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014c1e:	683b      	ldr	r3, [r7, #0]
 8014c20:	f383 8811 	msr	BASEPRI, r3
}
 8014c24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014c26:	bf00      	nop
 8014c28:	370c      	adds	r7, #12
 8014c2a:	46bd      	mov	sp, r7
 8014c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c30:	4770      	bx	lr
 8014c32:	bf00      	nop
 8014c34:	20000240 	.word	0x20000240
	...

08014c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014c40:	f3ef 8009 	mrs	r0, PSP
 8014c44:	f3bf 8f6f 	isb	sy
 8014c48:	4b15      	ldr	r3, [pc, #84]	; (8014ca0 <pxCurrentTCBConst>)
 8014c4a:	681a      	ldr	r2, [r3, #0]
 8014c4c:	f01e 0f10 	tst.w	lr, #16
 8014c50:	bf08      	it	eq
 8014c52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014c56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c5a:	6010      	str	r0, [r2, #0]
 8014c5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014c60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014c64:	f380 8811 	msr	BASEPRI, r0
 8014c68:	f3bf 8f4f 	dsb	sy
 8014c6c:	f3bf 8f6f 	isb	sy
 8014c70:	f7fe fec2 	bl	80139f8 <vTaskSwitchContext>
 8014c74:	f04f 0000 	mov.w	r0, #0
 8014c78:	f380 8811 	msr	BASEPRI, r0
 8014c7c:	bc09      	pop	{r0, r3}
 8014c7e:	6819      	ldr	r1, [r3, #0]
 8014c80:	6808      	ldr	r0, [r1, #0]
 8014c82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c86:	f01e 0f10 	tst.w	lr, #16
 8014c8a:	bf08      	it	eq
 8014c8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014c90:	f380 8809 	msr	PSP, r0
 8014c94:	f3bf 8f6f 	isb	sy
 8014c98:	4770      	bx	lr
 8014c9a:	bf00      	nop
 8014c9c:	f3af 8000 	nop.w

08014ca0 <pxCurrentTCBConst>:
 8014ca0:	20001efc 	.word	0x20001efc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014ca4:	bf00      	nop
 8014ca6:	bf00      	nop

08014ca8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014ca8:	b580      	push	{r7, lr}
 8014caa:	b082      	sub	sp, #8
 8014cac:	af00      	add	r7, sp, #0
	__asm volatile
 8014cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cb2:	f383 8811 	msr	BASEPRI, r3
 8014cb6:	f3bf 8f6f 	isb	sy
 8014cba:	f3bf 8f4f 	dsb	sy
 8014cbe:	607b      	str	r3, [r7, #4]
}
 8014cc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014cc2:	f7fe fddf 	bl	8013884 <xTaskIncrementTick>
 8014cc6:	4603      	mov	r3, r0
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d003      	beq.n	8014cd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014ccc:	4b06      	ldr	r3, [pc, #24]	; (8014ce8 <xPortSysTickHandler+0x40>)
 8014cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014cd2:	601a      	str	r2, [r3, #0]
 8014cd4:	2300      	movs	r3, #0
 8014cd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014cd8:	683b      	ldr	r3, [r7, #0]
 8014cda:	f383 8811 	msr	BASEPRI, r3
}
 8014cde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014ce0:	bf00      	nop
 8014ce2:	3708      	adds	r7, #8
 8014ce4:	46bd      	mov	sp, r7
 8014ce6:	bd80      	pop	{r7, pc}
 8014ce8:	e000ed04 	.word	0xe000ed04

08014cec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014cec:	b480      	push	{r7}
 8014cee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014cf0:	4b0b      	ldr	r3, [pc, #44]	; (8014d20 <vPortSetupTimerInterrupt+0x34>)
 8014cf2:	2200      	movs	r2, #0
 8014cf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014cf6:	4b0b      	ldr	r3, [pc, #44]	; (8014d24 <vPortSetupTimerInterrupt+0x38>)
 8014cf8:	2200      	movs	r2, #0
 8014cfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014cfc:	4b0a      	ldr	r3, [pc, #40]	; (8014d28 <vPortSetupTimerInterrupt+0x3c>)
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	4a0a      	ldr	r2, [pc, #40]	; (8014d2c <vPortSetupTimerInterrupt+0x40>)
 8014d02:	fba2 2303 	umull	r2, r3, r2, r3
 8014d06:	099b      	lsrs	r3, r3, #6
 8014d08:	4a09      	ldr	r2, [pc, #36]	; (8014d30 <vPortSetupTimerInterrupt+0x44>)
 8014d0a:	3b01      	subs	r3, #1
 8014d0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014d0e:	4b04      	ldr	r3, [pc, #16]	; (8014d20 <vPortSetupTimerInterrupt+0x34>)
 8014d10:	2207      	movs	r2, #7
 8014d12:	601a      	str	r2, [r3, #0]
}
 8014d14:	bf00      	nop
 8014d16:	46bd      	mov	sp, r7
 8014d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d1c:	4770      	bx	lr
 8014d1e:	bf00      	nop
 8014d20:	e000e010 	.word	0xe000e010
 8014d24:	e000e018 	.word	0xe000e018
 8014d28:	200001b8 	.word	0x200001b8
 8014d2c:	10624dd3 	.word	0x10624dd3
 8014d30:	e000e014 	.word	0xe000e014

08014d34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014d34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014d44 <vPortEnableVFP+0x10>
 8014d38:	6801      	ldr	r1, [r0, #0]
 8014d3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014d3e:	6001      	str	r1, [r0, #0]
 8014d40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014d42:	bf00      	nop
 8014d44:	e000ed88 	.word	0xe000ed88

08014d48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014d48:	b480      	push	{r7}
 8014d4a:	b085      	sub	sp, #20
 8014d4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014d4e:	f3ef 8305 	mrs	r3, IPSR
 8014d52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	2b0f      	cmp	r3, #15
 8014d58:	d914      	bls.n	8014d84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014d5a:	4a17      	ldr	r2, [pc, #92]	; (8014db8 <vPortValidateInterruptPriority+0x70>)
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	4413      	add	r3, r2
 8014d60:	781b      	ldrb	r3, [r3, #0]
 8014d62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014d64:	4b15      	ldr	r3, [pc, #84]	; (8014dbc <vPortValidateInterruptPriority+0x74>)
 8014d66:	781b      	ldrb	r3, [r3, #0]
 8014d68:	7afa      	ldrb	r2, [r7, #11]
 8014d6a:	429a      	cmp	r2, r3
 8014d6c:	d20a      	bcs.n	8014d84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8014d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d72:	f383 8811 	msr	BASEPRI, r3
 8014d76:	f3bf 8f6f 	isb	sy
 8014d7a:	f3bf 8f4f 	dsb	sy
 8014d7e:	607b      	str	r3, [r7, #4]
}
 8014d80:	bf00      	nop
 8014d82:	e7fe      	b.n	8014d82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014d84:	4b0e      	ldr	r3, [pc, #56]	; (8014dc0 <vPortValidateInterruptPriority+0x78>)
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014d8c:	4b0d      	ldr	r3, [pc, #52]	; (8014dc4 <vPortValidateInterruptPriority+0x7c>)
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	429a      	cmp	r2, r3
 8014d92:	d90a      	bls.n	8014daa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d98:	f383 8811 	msr	BASEPRI, r3
 8014d9c:	f3bf 8f6f 	isb	sy
 8014da0:	f3bf 8f4f 	dsb	sy
 8014da4:	603b      	str	r3, [r7, #0]
}
 8014da6:	bf00      	nop
 8014da8:	e7fe      	b.n	8014da8 <vPortValidateInterruptPriority+0x60>
	}
 8014daa:	bf00      	nop
 8014dac:	3714      	adds	r7, #20
 8014dae:	46bd      	mov	sp, r7
 8014db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db4:	4770      	bx	lr
 8014db6:	bf00      	nop
 8014db8:	e000e3f0 	.word	0xe000e3f0
 8014dbc:	20002528 	.word	0x20002528
 8014dc0:	e000ed0c 	.word	0xe000ed0c
 8014dc4:	2000252c 	.word	0x2000252c

08014dc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014dc8:	b580      	push	{r7, lr}
 8014dca:	b08a      	sub	sp, #40	; 0x28
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014dd0:	2300      	movs	r3, #0
 8014dd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014dd4:	f7fe fc9a 	bl	801370c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014dd8:	4b5b      	ldr	r3, [pc, #364]	; (8014f48 <pvPortMalloc+0x180>)
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d101      	bne.n	8014de4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014de0:	f000 f920 	bl	8015024 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014de4:	4b59      	ldr	r3, [pc, #356]	; (8014f4c <pvPortMalloc+0x184>)
 8014de6:	681a      	ldr	r2, [r3, #0]
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	4013      	ands	r3, r2
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	f040 8093 	bne.w	8014f18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d01d      	beq.n	8014e34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014df8:	2208      	movs	r2, #8
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	4413      	add	r3, r2
 8014dfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	f003 0307 	and.w	r3, r3, #7
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d014      	beq.n	8014e34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	f023 0307 	bic.w	r3, r3, #7
 8014e10:	3308      	adds	r3, #8
 8014e12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	f003 0307 	and.w	r3, r3, #7
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d00a      	beq.n	8014e34 <pvPortMalloc+0x6c>
	__asm volatile
 8014e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e22:	f383 8811 	msr	BASEPRI, r3
 8014e26:	f3bf 8f6f 	isb	sy
 8014e2a:	f3bf 8f4f 	dsb	sy
 8014e2e:	617b      	str	r3, [r7, #20]
}
 8014e30:	bf00      	nop
 8014e32:	e7fe      	b.n	8014e32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d06e      	beq.n	8014f18 <pvPortMalloc+0x150>
 8014e3a:	4b45      	ldr	r3, [pc, #276]	; (8014f50 <pvPortMalloc+0x188>)
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	687a      	ldr	r2, [r7, #4]
 8014e40:	429a      	cmp	r2, r3
 8014e42:	d869      	bhi.n	8014f18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014e44:	4b43      	ldr	r3, [pc, #268]	; (8014f54 <pvPortMalloc+0x18c>)
 8014e46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014e48:	4b42      	ldr	r3, [pc, #264]	; (8014f54 <pvPortMalloc+0x18c>)
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014e4e:	e004      	b.n	8014e5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8014e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e5c:	685b      	ldr	r3, [r3, #4]
 8014e5e:	687a      	ldr	r2, [r7, #4]
 8014e60:	429a      	cmp	r2, r3
 8014e62:	d903      	bls.n	8014e6c <pvPortMalloc+0xa4>
 8014e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d1f1      	bne.n	8014e50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014e6c:	4b36      	ldr	r3, [pc, #216]	; (8014f48 <pvPortMalloc+0x180>)
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e72:	429a      	cmp	r2, r3
 8014e74:	d050      	beq.n	8014f18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014e76:	6a3b      	ldr	r3, [r7, #32]
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	2208      	movs	r2, #8
 8014e7c:	4413      	add	r3, r2
 8014e7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e82:	681a      	ldr	r2, [r3, #0]
 8014e84:	6a3b      	ldr	r3, [r7, #32]
 8014e86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e8a:	685a      	ldr	r2, [r3, #4]
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	1ad2      	subs	r2, r2, r3
 8014e90:	2308      	movs	r3, #8
 8014e92:	005b      	lsls	r3, r3, #1
 8014e94:	429a      	cmp	r2, r3
 8014e96:	d91f      	bls.n	8014ed8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	4413      	add	r3, r2
 8014e9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014ea0:	69bb      	ldr	r3, [r7, #24]
 8014ea2:	f003 0307 	and.w	r3, r3, #7
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d00a      	beq.n	8014ec0 <pvPortMalloc+0xf8>
	__asm volatile
 8014eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014eae:	f383 8811 	msr	BASEPRI, r3
 8014eb2:	f3bf 8f6f 	isb	sy
 8014eb6:	f3bf 8f4f 	dsb	sy
 8014eba:	613b      	str	r3, [r7, #16]
}
 8014ebc:	bf00      	nop
 8014ebe:	e7fe      	b.n	8014ebe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ec2:	685a      	ldr	r2, [r3, #4]
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	1ad2      	subs	r2, r2, r3
 8014ec8:	69bb      	ldr	r3, [r7, #24]
 8014eca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ece:	687a      	ldr	r2, [r7, #4]
 8014ed0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014ed2:	69b8      	ldr	r0, [r7, #24]
 8014ed4:	f000 f908 	bl	80150e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014ed8:	4b1d      	ldr	r3, [pc, #116]	; (8014f50 <pvPortMalloc+0x188>)
 8014eda:	681a      	ldr	r2, [r3, #0]
 8014edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ede:	685b      	ldr	r3, [r3, #4]
 8014ee0:	1ad3      	subs	r3, r2, r3
 8014ee2:	4a1b      	ldr	r2, [pc, #108]	; (8014f50 <pvPortMalloc+0x188>)
 8014ee4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014ee6:	4b1a      	ldr	r3, [pc, #104]	; (8014f50 <pvPortMalloc+0x188>)
 8014ee8:	681a      	ldr	r2, [r3, #0]
 8014eea:	4b1b      	ldr	r3, [pc, #108]	; (8014f58 <pvPortMalloc+0x190>)
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	429a      	cmp	r2, r3
 8014ef0:	d203      	bcs.n	8014efa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014ef2:	4b17      	ldr	r3, [pc, #92]	; (8014f50 <pvPortMalloc+0x188>)
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	4a18      	ldr	r2, [pc, #96]	; (8014f58 <pvPortMalloc+0x190>)
 8014ef8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014efc:	685a      	ldr	r2, [r3, #4]
 8014efe:	4b13      	ldr	r3, [pc, #76]	; (8014f4c <pvPortMalloc+0x184>)
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	431a      	orrs	r2, r3
 8014f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f0a:	2200      	movs	r2, #0
 8014f0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8014f0e:	4b13      	ldr	r3, [pc, #76]	; (8014f5c <pvPortMalloc+0x194>)
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	3301      	adds	r3, #1
 8014f14:	4a11      	ldr	r2, [pc, #68]	; (8014f5c <pvPortMalloc+0x194>)
 8014f16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014f18:	f7fe fc06 	bl	8013728 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014f1c:	69fb      	ldr	r3, [r7, #28]
 8014f1e:	f003 0307 	and.w	r3, r3, #7
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d00a      	beq.n	8014f3c <pvPortMalloc+0x174>
	__asm volatile
 8014f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f2a:	f383 8811 	msr	BASEPRI, r3
 8014f2e:	f3bf 8f6f 	isb	sy
 8014f32:	f3bf 8f4f 	dsb	sy
 8014f36:	60fb      	str	r3, [r7, #12]
}
 8014f38:	bf00      	nop
 8014f3a:	e7fe      	b.n	8014f3a <pvPortMalloc+0x172>
	return pvReturn;
 8014f3c:	69fb      	ldr	r3, [r7, #28]
}
 8014f3e:	4618      	mov	r0, r3
 8014f40:	3728      	adds	r7, #40	; 0x28
 8014f42:	46bd      	mov	sp, r7
 8014f44:	bd80      	pop	{r7, pc}
 8014f46:	bf00      	nop
 8014f48:	20006138 	.word	0x20006138
 8014f4c:	2000614c 	.word	0x2000614c
 8014f50:	2000613c 	.word	0x2000613c
 8014f54:	20006130 	.word	0x20006130
 8014f58:	20006140 	.word	0x20006140
 8014f5c:	20006144 	.word	0x20006144

08014f60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b086      	sub	sp, #24
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d04d      	beq.n	801500e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014f72:	2308      	movs	r3, #8
 8014f74:	425b      	negs	r3, r3
 8014f76:	697a      	ldr	r2, [r7, #20]
 8014f78:	4413      	add	r3, r2
 8014f7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014f7c:	697b      	ldr	r3, [r7, #20]
 8014f7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014f80:	693b      	ldr	r3, [r7, #16]
 8014f82:	685a      	ldr	r2, [r3, #4]
 8014f84:	4b24      	ldr	r3, [pc, #144]	; (8015018 <vPortFree+0xb8>)
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	4013      	ands	r3, r2
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d10a      	bne.n	8014fa4 <vPortFree+0x44>
	__asm volatile
 8014f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f92:	f383 8811 	msr	BASEPRI, r3
 8014f96:	f3bf 8f6f 	isb	sy
 8014f9a:	f3bf 8f4f 	dsb	sy
 8014f9e:	60fb      	str	r3, [r7, #12]
}
 8014fa0:	bf00      	nop
 8014fa2:	e7fe      	b.n	8014fa2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014fa4:	693b      	ldr	r3, [r7, #16]
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d00a      	beq.n	8014fc2 <vPortFree+0x62>
	__asm volatile
 8014fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fb0:	f383 8811 	msr	BASEPRI, r3
 8014fb4:	f3bf 8f6f 	isb	sy
 8014fb8:	f3bf 8f4f 	dsb	sy
 8014fbc:	60bb      	str	r3, [r7, #8]
}
 8014fbe:	bf00      	nop
 8014fc0:	e7fe      	b.n	8014fc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014fc2:	693b      	ldr	r3, [r7, #16]
 8014fc4:	685a      	ldr	r2, [r3, #4]
 8014fc6:	4b14      	ldr	r3, [pc, #80]	; (8015018 <vPortFree+0xb8>)
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	4013      	ands	r3, r2
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d01e      	beq.n	801500e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014fd0:	693b      	ldr	r3, [r7, #16]
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d11a      	bne.n	801500e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014fd8:	693b      	ldr	r3, [r7, #16]
 8014fda:	685a      	ldr	r2, [r3, #4]
 8014fdc:	4b0e      	ldr	r3, [pc, #56]	; (8015018 <vPortFree+0xb8>)
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	43db      	mvns	r3, r3
 8014fe2:	401a      	ands	r2, r3
 8014fe4:	693b      	ldr	r3, [r7, #16]
 8014fe6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014fe8:	f7fe fb90 	bl	801370c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014fec:	693b      	ldr	r3, [r7, #16]
 8014fee:	685a      	ldr	r2, [r3, #4]
 8014ff0:	4b0a      	ldr	r3, [pc, #40]	; (801501c <vPortFree+0xbc>)
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	4413      	add	r3, r2
 8014ff6:	4a09      	ldr	r2, [pc, #36]	; (801501c <vPortFree+0xbc>)
 8014ff8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014ffa:	6938      	ldr	r0, [r7, #16]
 8014ffc:	f000 f874 	bl	80150e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8015000:	4b07      	ldr	r3, [pc, #28]	; (8015020 <vPortFree+0xc0>)
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	3301      	adds	r3, #1
 8015006:	4a06      	ldr	r2, [pc, #24]	; (8015020 <vPortFree+0xc0>)
 8015008:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801500a:	f7fe fb8d 	bl	8013728 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801500e:	bf00      	nop
 8015010:	3718      	adds	r7, #24
 8015012:	46bd      	mov	sp, r7
 8015014:	bd80      	pop	{r7, pc}
 8015016:	bf00      	nop
 8015018:	2000614c 	.word	0x2000614c
 801501c:	2000613c 	.word	0x2000613c
 8015020:	20006148 	.word	0x20006148

08015024 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015024:	b480      	push	{r7}
 8015026:	b085      	sub	sp, #20
 8015028:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801502a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801502e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015030:	4b27      	ldr	r3, [pc, #156]	; (80150d0 <prvHeapInit+0xac>)
 8015032:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	f003 0307 	and.w	r3, r3, #7
 801503a:	2b00      	cmp	r3, #0
 801503c:	d00c      	beq.n	8015058 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	3307      	adds	r3, #7
 8015042:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	f023 0307 	bic.w	r3, r3, #7
 801504a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801504c:	68ba      	ldr	r2, [r7, #8]
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	1ad3      	subs	r3, r2, r3
 8015052:	4a1f      	ldr	r2, [pc, #124]	; (80150d0 <prvHeapInit+0xac>)
 8015054:	4413      	add	r3, r2
 8015056:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801505c:	4a1d      	ldr	r2, [pc, #116]	; (80150d4 <prvHeapInit+0xb0>)
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015062:	4b1c      	ldr	r3, [pc, #112]	; (80150d4 <prvHeapInit+0xb0>)
 8015064:	2200      	movs	r2, #0
 8015066:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	68ba      	ldr	r2, [r7, #8]
 801506c:	4413      	add	r3, r2
 801506e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015070:	2208      	movs	r2, #8
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	1a9b      	subs	r3, r3, r2
 8015076:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	f023 0307 	bic.w	r3, r3, #7
 801507e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	4a15      	ldr	r2, [pc, #84]	; (80150d8 <prvHeapInit+0xb4>)
 8015084:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015086:	4b14      	ldr	r3, [pc, #80]	; (80150d8 <prvHeapInit+0xb4>)
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	2200      	movs	r2, #0
 801508c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801508e:	4b12      	ldr	r3, [pc, #72]	; (80150d8 <prvHeapInit+0xb4>)
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	2200      	movs	r2, #0
 8015094:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801509a:	683b      	ldr	r3, [r7, #0]
 801509c:	68fa      	ldr	r2, [r7, #12]
 801509e:	1ad2      	subs	r2, r2, r3
 80150a0:	683b      	ldr	r3, [r7, #0]
 80150a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80150a4:	4b0c      	ldr	r3, [pc, #48]	; (80150d8 <prvHeapInit+0xb4>)
 80150a6:	681a      	ldr	r2, [r3, #0]
 80150a8:	683b      	ldr	r3, [r7, #0]
 80150aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80150ac:	683b      	ldr	r3, [r7, #0]
 80150ae:	685b      	ldr	r3, [r3, #4]
 80150b0:	4a0a      	ldr	r2, [pc, #40]	; (80150dc <prvHeapInit+0xb8>)
 80150b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80150b4:	683b      	ldr	r3, [r7, #0]
 80150b6:	685b      	ldr	r3, [r3, #4]
 80150b8:	4a09      	ldr	r2, [pc, #36]	; (80150e0 <prvHeapInit+0xbc>)
 80150ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80150bc:	4b09      	ldr	r3, [pc, #36]	; (80150e4 <prvHeapInit+0xc0>)
 80150be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80150c2:	601a      	str	r2, [r3, #0]
}
 80150c4:	bf00      	nop
 80150c6:	3714      	adds	r7, #20
 80150c8:	46bd      	mov	sp, r7
 80150ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ce:	4770      	bx	lr
 80150d0:	20002530 	.word	0x20002530
 80150d4:	20006130 	.word	0x20006130
 80150d8:	20006138 	.word	0x20006138
 80150dc:	20006140 	.word	0x20006140
 80150e0:	2000613c 	.word	0x2000613c
 80150e4:	2000614c 	.word	0x2000614c

080150e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80150e8:	b480      	push	{r7}
 80150ea:	b085      	sub	sp, #20
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80150f0:	4b28      	ldr	r3, [pc, #160]	; (8015194 <prvInsertBlockIntoFreeList+0xac>)
 80150f2:	60fb      	str	r3, [r7, #12]
 80150f4:	e002      	b.n	80150fc <prvInsertBlockIntoFreeList+0x14>
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	60fb      	str	r3, [r7, #12]
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	687a      	ldr	r2, [r7, #4]
 8015102:	429a      	cmp	r2, r3
 8015104:	d8f7      	bhi.n	80150f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	685b      	ldr	r3, [r3, #4]
 801510e:	68ba      	ldr	r2, [r7, #8]
 8015110:	4413      	add	r3, r2
 8015112:	687a      	ldr	r2, [r7, #4]
 8015114:	429a      	cmp	r2, r3
 8015116:	d108      	bne.n	801512a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	685a      	ldr	r2, [r3, #4]
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	685b      	ldr	r3, [r3, #4]
 8015120:	441a      	add	r2, r3
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	685b      	ldr	r3, [r3, #4]
 8015132:	68ba      	ldr	r2, [r7, #8]
 8015134:	441a      	add	r2, r3
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	429a      	cmp	r2, r3
 801513c:	d118      	bne.n	8015170 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	681a      	ldr	r2, [r3, #0]
 8015142:	4b15      	ldr	r3, [pc, #84]	; (8015198 <prvInsertBlockIntoFreeList+0xb0>)
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	429a      	cmp	r2, r3
 8015148:	d00d      	beq.n	8015166 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	685a      	ldr	r2, [r3, #4]
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	685b      	ldr	r3, [r3, #4]
 8015154:	441a      	add	r2, r3
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	681a      	ldr	r2, [r3, #0]
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	601a      	str	r2, [r3, #0]
 8015164:	e008      	b.n	8015178 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015166:	4b0c      	ldr	r3, [pc, #48]	; (8015198 <prvInsertBlockIntoFreeList+0xb0>)
 8015168:	681a      	ldr	r2, [r3, #0]
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	601a      	str	r2, [r3, #0]
 801516e:	e003      	b.n	8015178 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	681a      	ldr	r2, [r3, #0]
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015178:	68fa      	ldr	r2, [r7, #12]
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	429a      	cmp	r2, r3
 801517e:	d002      	beq.n	8015186 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	687a      	ldr	r2, [r7, #4]
 8015184:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015186:	bf00      	nop
 8015188:	3714      	adds	r7, #20
 801518a:	46bd      	mov	sp, r7
 801518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015190:	4770      	bx	lr
 8015192:	bf00      	nop
 8015194:	20006130 	.word	0x20006130
 8015198:	20006138 	.word	0x20006138

0801519c <__errno>:
 801519c:	4b01      	ldr	r3, [pc, #4]	; (80151a4 <__errno+0x8>)
 801519e:	6818      	ldr	r0, [r3, #0]
 80151a0:	4770      	bx	lr
 80151a2:	bf00      	nop
 80151a4:	20000244 	.word	0x20000244

080151a8 <__libc_init_array>:
 80151a8:	b570      	push	{r4, r5, r6, lr}
 80151aa:	4d0d      	ldr	r5, [pc, #52]	; (80151e0 <__libc_init_array+0x38>)
 80151ac:	4c0d      	ldr	r4, [pc, #52]	; (80151e4 <__libc_init_array+0x3c>)
 80151ae:	1b64      	subs	r4, r4, r5
 80151b0:	10a4      	asrs	r4, r4, #2
 80151b2:	2600      	movs	r6, #0
 80151b4:	42a6      	cmp	r6, r4
 80151b6:	d109      	bne.n	80151cc <__libc_init_array+0x24>
 80151b8:	4d0b      	ldr	r5, [pc, #44]	; (80151e8 <__libc_init_array+0x40>)
 80151ba:	4c0c      	ldr	r4, [pc, #48]	; (80151ec <__libc_init_array+0x44>)
 80151bc:	f005 fa20 	bl	801a600 <_init>
 80151c0:	1b64      	subs	r4, r4, r5
 80151c2:	10a4      	asrs	r4, r4, #2
 80151c4:	2600      	movs	r6, #0
 80151c6:	42a6      	cmp	r6, r4
 80151c8:	d105      	bne.n	80151d6 <__libc_init_array+0x2e>
 80151ca:	bd70      	pop	{r4, r5, r6, pc}
 80151cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80151d0:	4798      	blx	r3
 80151d2:	3601      	adds	r6, #1
 80151d4:	e7ee      	b.n	80151b4 <__libc_init_array+0xc>
 80151d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80151da:	4798      	blx	r3
 80151dc:	3601      	adds	r6, #1
 80151de:	e7f2      	b.n	80151c6 <__libc_init_array+0x1e>
 80151e0:	0801bb84 	.word	0x0801bb84
 80151e4:	0801bb84 	.word	0x0801bb84
 80151e8:	0801bb84 	.word	0x0801bb84
 80151ec:	0801bb88 	.word	0x0801bb88

080151f0 <malloc>:
 80151f0:	4b02      	ldr	r3, [pc, #8]	; (80151fc <malloc+0xc>)
 80151f2:	4601      	mov	r1, r0
 80151f4:	6818      	ldr	r0, [r3, #0]
 80151f6:	f000 b869 	b.w	80152cc <_malloc_r>
 80151fa:	bf00      	nop
 80151fc:	20000244 	.word	0x20000244

08015200 <memcpy>:
 8015200:	440a      	add	r2, r1
 8015202:	4291      	cmp	r1, r2
 8015204:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8015208:	d100      	bne.n	801520c <memcpy+0xc>
 801520a:	4770      	bx	lr
 801520c:	b510      	push	{r4, lr}
 801520e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015212:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015216:	4291      	cmp	r1, r2
 8015218:	d1f9      	bne.n	801520e <memcpy+0xe>
 801521a:	bd10      	pop	{r4, pc}

0801521c <memset>:
 801521c:	4402      	add	r2, r0
 801521e:	4603      	mov	r3, r0
 8015220:	4293      	cmp	r3, r2
 8015222:	d100      	bne.n	8015226 <memset+0xa>
 8015224:	4770      	bx	lr
 8015226:	f803 1b01 	strb.w	r1, [r3], #1
 801522a:	e7f9      	b.n	8015220 <memset+0x4>

0801522c <_free_r>:
 801522c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801522e:	2900      	cmp	r1, #0
 8015230:	d048      	beq.n	80152c4 <_free_r+0x98>
 8015232:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015236:	9001      	str	r0, [sp, #4]
 8015238:	2b00      	cmp	r3, #0
 801523a:	f1a1 0404 	sub.w	r4, r1, #4
 801523e:	bfb8      	it	lt
 8015240:	18e4      	addlt	r4, r4, r3
 8015242:	f003 f90d 	bl	8018460 <__malloc_lock>
 8015246:	4a20      	ldr	r2, [pc, #128]	; (80152c8 <_free_r+0x9c>)
 8015248:	9801      	ldr	r0, [sp, #4]
 801524a:	6813      	ldr	r3, [r2, #0]
 801524c:	4615      	mov	r5, r2
 801524e:	b933      	cbnz	r3, 801525e <_free_r+0x32>
 8015250:	6063      	str	r3, [r4, #4]
 8015252:	6014      	str	r4, [r2, #0]
 8015254:	b003      	add	sp, #12
 8015256:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801525a:	f003 b907 	b.w	801846c <__malloc_unlock>
 801525e:	42a3      	cmp	r3, r4
 8015260:	d90b      	bls.n	801527a <_free_r+0x4e>
 8015262:	6821      	ldr	r1, [r4, #0]
 8015264:	1862      	adds	r2, r4, r1
 8015266:	4293      	cmp	r3, r2
 8015268:	bf04      	itt	eq
 801526a:	681a      	ldreq	r2, [r3, #0]
 801526c:	685b      	ldreq	r3, [r3, #4]
 801526e:	6063      	str	r3, [r4, #4]
 8015270:	bf04      	itt	eq
 8015272:	1852      	addeq	r2, r2, r1
 8015274:	6022      	streq	r2, [r4, #0]
 8015276:	602c      	str	r4, [r5, #0]
 8015278:	e7ec      	b.n	8015254 <_free_r+0x28>
 801527a:	461a      	mov	r2, r3
 801527c:	685b      	ldr	r3, [r3, #4]
 801527e:	b10b      	cbz	r3, 8015284 <_free_r+0x58>
 8015280:	42a3      	cmp	r3, r4
 8015282:	d9fa      	bls.n	801527a <_free_r+0x4e>
 8015284:	6811      	ldr	r1, [r2, #0]
 8015286:	1855      	adds	r5, r2, r1
 8015288:	42a5      	cmp	r5, r4
 801528a:	d10b      	bne.n	80152a4 <_free_r+0x78>
 801528c:	6824      	ldr	r4, [r4, #0]
 801528e:	4421      	add	r1, r4
 8015290:	1854      	adds	r4, r2, r1
 8015292:	42a3      	cmp	r3, r4
 8015294:	6011      	str	r1, [r2, #0]
 8015296:	d1dd      	bne.n	8015254 <_free_r+0x28>
 8015298:	681c      	ldr	r4, [r3, #0]
 801529a:	685b      	ldr	r3, [r3, #4]
 801529c:	6053      	str	r3, [r2, #4]
 801529e:	4421      	add	r1, r4
 80152a0:	6011      	str	r1, [r2, #0]
 80152a2:	e7d7      	b.n	8015254 <_free_r+0x28>
 80152a4:	d902      	bls.n	80152ac <_free_r+0x80>
 80152a6:	230c      	movs	r3, #12
 80152a8:	6003      	str	r3, [r0, #0]
 80152aa:	e7d3      	b.n	8015254 <_free_r+0x28>
 80152ac:	6825      	ldr	r5, [r4, #0]
 80152ae:	1961      	adds	r1, r4, r5
 80152b0:	428b      	cmp	r3, r1
 80152b2:	bf04      	itt	eq
 80152b4:	6819      	ldreq	r1, [r3, #0]
 80152b6:	685b      	ldreq	r3, [r3, #4]
 80152b8:	6063      	str	r3, [r4, #4]
 80152ba:	bf04      	itt	eq
 80152bc:	1949      	addeq	r1, r1, r5
 80152be:	6021      	streq	r1, [r4, #0]
 80152c0:	6054      	str	r4, [r2, #4]
 80152c2:	e7c7      	b.n	8015254 <_free_r+0x28>
 80152c4:	b003      	add	sp, #12
 80152c6:	bd30      	pop	{r4, r5, pc}
 80152c8:	20006150 	.word	0x20006150

080152cc <_malloc_r>:
 80152cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152ce:	1ccd      	adds	r5, r1, #3
 80152d0:	f025 0503 	bic.w	r5, r5, #3
 80152d4:	3508      	adds	r5, #8
 80152d6:	2d0c      	cmp	r5, #12
 80152d8:	bf38      	it	cc
 80152da:	250c      	movcc	r5, #12
 80152dc:	2d00      	cmp	r5, #0
 80152de:	4606      	mov	r6, r0
 80152e0:	db01      	blt.n	80152e6 <_malloc_r+0x1a>
 80152e2:	42a9      	cmp	r1, r5
 80152e4:	d903      	bls.n	80152ee <_malloc_r+0x22>
 80152e6:	230c      	movs	r3, #12
 80152e8:	6033      	str	r3, [r6, #0]
 80152ea:	2000      	movs	r0, #0
 80152ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80152ee:	f003 f8b7 	bl	8018460 <__malloc_lock>
 80152f2:	4921      	ldr	r1, [pc, #132]	; (8015378 <_malloc_r+0xac>)
 80152f4:	680a      	ldr	r2, [r1, #0]
 80152f6:	4614      	mov	r4, r2
 80152f8:	b99c      	cbnz	r4, 8015322 <_malloc_r+0x56>
 80152fa:	4f20      	ldr	r7, [pc, #128]	; (801537c <_malloc_r+0xb0>)
 80152fc:	683b      	ldr	r3, [r7, #0]
 80152fe:	b923      	cbnz	r3, 801530a <_malloc_r+0x3e>
 8015300:	4621      	mov	r1, r4
 8015302:	4630      	mov	r0, r6
 8015304:	f000 feb6 	bl	8016074 <_sbrk_r>
 8015308:	6038      	str	r0, [r7, #0]
 801530a:	4629      	mov	r1, r5
 801530c:	4630      	mov	r0, r6
 801530e:	f000 feb1 	bl	8016074 <_sbrk_r>
 8015312:	1c43      	adds	r3, r0, #1
 8015314:	d123      	bne.n	801535e <_malloc_r+0x92>
 8015316:	230c      	movs	r3, #12
 8015318:	6033      	str	r3, [r6, #0]
 801531a:	4630      	mov	r0, r6
 801531c:	f003 f8a6 	bl	801846c <__malloc_unlock>
 8015320:	e7e3      	b.n	80152ea <_malloc_r+0x1e>
 8015322:	6823      	ldr	r3, [r4, #0]
 8015324:	1b5b      	subs	r3, r3, r5
 8015326:	d417      	bmi.n	8015358 <_malloc_r+0x8c>
 8015328:	2b0b      	cmp	r3, #11
 801532a:	d903      	bls.n	8015334 <_malloc_r+0x68>
 801532c:	6023      	str	r3, [r4, #0]
 801532e:	441c      	add	r4, r3
 8015330:	6025      	str	r5, [r4, #0]
 8015332:	e004      	b.n	801533e <_malloc_r+0x72>
 8015334:	6863      	ldr	r3, [r4, #4]
 8015336:	42a2      	cmp	r2, r4
 8015338:	bf0c      	ite	eq
 801533a:	600b      	streq	r3, [r1, #0]
 801533c:	6053      	strne	r3, [r2, #4]
 801533e:	4630      	mov	r0, r6
 8015340:	f003 f894 	bl	801846c <__malloc_unlock>
 8015344:	f104 000b 	add.w	r0, r4, #11
 8015348:	1d23      	adds	r3, r4, #4
 801534a:	f020 0007 	bic.w	r0, r0, #7
 801534e:	1ac2      	subs	r2, r0, r3
 8015350:	d0cc      	beq.n	80152ec <_malloc_r+0x20>
 8015352:	1a1b      	subs	r3, r3, r0
 8015354:	50a3      	str	r3, [r4, r2]
 8015356:	e7c9      	b.n	80152ec <_malloc_r+0x20>
 8015358:	4622      	mov	r2, r4
 801535a:	6864      	ldr	r4, [r4, #4]
 801535c:	e7cc      	b.n	80152f8 <_malloc_r+0x2c>
 801535e:	1cc4      	adds	r4, r0, #3
 8015360:	f024 0403 	bic.w	r4, r4, #3
 8015364:	42a0      	cmp	r0, r4
 8015366:	d0e3      	beq.n	8015330 <_malloc_r+0x64>
 8015368:	1a21      	subs	r1, r4, r0
 801536a:	4630      	mov	r0, r6
 801536c:	f000 fe82 	bl	8016074 <_sbrk_r>
 8015370:	3001      	adds	r0, #1
 8015372:	d1dd      	bne.n	8015330 <_malloc_r+0x64>
 8015374:	e7cf      	b.n	8015316 <_malloc_r+0x4a>
 8015376:	bf00      	nop
 8015378:	20006150 	.word	0x20006150
 801537c:	20006154 	.word	0x20006154

08015380 <__cvt>:
 8015380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015384:	ec55 4b10 	vmov	r4, r5, d0
 8015388:	2d00      	cmp	r5, #0
 801538a:	460e      	mov	r6, r1
 801538c:	4619      	mov	r1, r3
 801538e:	462b      	mov	r3, r5
 8015390:	bfbb      	ittet	lt
 8015392:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015396:	461d      	movlt	r5, r3
 8015398:	2300      	movge	r3, #0
 801539a:	232d      	movlt	r3, #45	; 0x2d
 801539c:	700b      	strb	r3, [r1, #0]
 801539e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80153a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80153a4:	4691      	mov	r9, r2
 80153a6:	f023 0820 	bic.w	r8, r3, #32
 80153aa:	bfbc      	itt	lt
 80153ac:	4622      	movlt	r2, r4
 80153ae:	4614      	movlt	r4, r2
 80153b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80153b4:	d005      	beq.n	80153c2 <__cvt+0x42>
 80153b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80153ba:	d100      	bne.n	80153be <__cvt+0x3e>
 80153bc:	3601      	adds	r6, #1
 80153be:	2102      	movs	r1, #2
 80153c0:	e000      	b.n	80153c4 <__cvt+0x44>
 80153c2:	2103      	movs	r1, #3
 80153c4:	ab03      	add	r3, sp, #12
 80153c6:	9301      	str	r3, [sp, #4]
 80153c8:	ab02      	add	r3, sp, #8
 80153ca:	9300      	str	r3, [sp, #0]
 80153cc:	ec45 4b10 	vmov	d0, r4, r5
 80153d0:	4653      	mov	r3, sl
 80153d2:	4632      	mov	r2, r6
 80153d4:	f001 fec0 	bl	8017158 <_dtoa_r>
 80153d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80153dc:	4607      	mov	r7, r0
 80153de:	d102      	bne.n	80153e6 <__cvt+0x66>
 80153e0:	f019 0f01 	tst.w	r9, #1
 80153e4:	d022      	beq.n	801542c <__cvt+0xac>
 80153e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80153ea:	eb07 0906 	add.w	r9, r7, r6
 80153ee:	d110      	bne.n	8015412 <__cvt+0x92>
 80153f0:	783b      	ldrb	r3, [r7, #0]
 80153f2:	2b30      	cmp	r3, #48	; 0x30
 80153f4:	d10a      	bne.n	801540c <__cvt+0x8c>
 80153f6:	2200      	movs	r2, #0
 80153f8:	2300      	movs	r3, #0
 80153fa:	4620      	mov	r0, r4
 80153fc:	4629      	mov	r1, r5
 80153fe:	f7eb fb63 	bl	8000ac8 <__aeabi_dcmpeq>
 8015402:	b918      	cbnz	r0, 801540c <__cvt+0x8c>
 8015404:	f1c6 0601 	rsb	r6, r6, #1
 8015408:	f8ca 6000 	str.w	r6, [sl]
 801540c:	f8da 3000 	ldr.w	r3, [sl]
 8015410:	4499      	add	r9, r3
 8015412:	2200      	movs	r2, #0
 8015414:	2300      	movs	r3, #0
 8015416:	4620      	mov	r0, r4
 8015418:	4629      	mov	r1, r5
 801541a:	f7eb fb55 	bl	8000ac8 <__aeabi_dcmpeq>
 801541e:	b108      	cbz	r0, 8015424 <__cvt+0xa4>
 8015420:	f8cd 900c 	str.w	r9, [sp, #12]
 8015424:	2230      	movs	r2, #48	; 0x30
 8015426:	9b03      	ldr	r3, [sp, #12]
 8015428:	454b      	cmp	r3, r9
 801542a:	d307      	bcc.n	801543c <__cvt+0xbc>
 801542c:	9b03      	ldr	r3, [sp, #12]
 801542e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015430:	1bdb      	subs	r3, r3, r7
 8015432:	4638      	mov	r0, r7
 8015434:	6013      	str	r3, [r2, #0]
 8015436:	b004      	add	sp, #16
 8015438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801543c:	1c59      	adds	r1, r3, #1
 801543e:	9103      	str	r1, [sp, #12]
 8015440:	701a      	strb	r2, [r3, #0]
 8015442:	e7f0      	b.n	8015426 <__cvt+0xa6>

08015444 <__exponent>:
 8015444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015446:	4603      	mov	r3, r0
 8015448:	2900      	cmp	r1, #0
 801544a:	bfb8      	it	lt
 801544c:	4249      	neglt	r1, r1
 801544e:	f803 2b02 	strb.w	r2, [r3], #2
 8015452:	bfb4      	ite	lt
 8015454:	222d      	movlt	r2, #45	; 0x2d
 8015456:	222b      	movge	r2, #43	; 0x2b
 8015458:	2909      	cmp	r1, #9
 801545a:	7042      	strb	r2, [r0, #1]
 801545c:	dd2a      	ble.n	80154b4 <__exponent+0x70>
 801545e:	f10d 0407 	add.w	r4, sp, #7
 8015462:	46a4      	mov	ip, r4
 8015464:	270a      	movs	r7, #10
 8015466:	46a6      	mov	lr, r4
 8015468:	460a      	mov	r2, r1
 801546a:	fb91 f6f7 	sdiv	r6, r1, r7
 801546e:	fb07 1516 	mls	r5, r7, r6, r1
 8015472:	3530      	adds	r5, #48	; 0x30
 8015474:	2a63      	cmp	r2, #99	; 0x63
 8015476:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801547a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801547e:	4631      	mov	r1, r6
 8015480:	dcf1      	bgt.n	8015466 <__exponent+0x22>
 8015482:	3130      	adds	r1, #48	; 0x30
 8015484:	f1ae 0502 	sub.w	r5, lr, #2
 8015488:	f804 1c01 	strb.w	r1, [r4, #-1]
 801548c:	1c44      	adds	r4, r0, #1
 801548e:	4629      	mov	r1, r5
 8015490:	4561      	cmp	r1, ip
 8015492:	d30a      	bcc.n	80154aa <__exponent+0x66>
 8015494:	f10d 0209 	add.w	r2, sp, #9
 8015498:	eba2 020e 	sub.w	r2, r2, lr
 801549c:	4565      	cmp	r5, ip
 801549e:	bf88      	it	hi
 80154a0:	2200      	movhi	r2, #0
 80154a2:	4413      	add	r3, r2
 80154a4:	1a18      	subs	r0, r3, r0
 80154a6:	b003      	add	sp, #12
 80154a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80154ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80154b2:	e7ed      	b.n	8015490 <__exponent+0x4c>
 80154b4:	2330      	movs	r3, #48	; 0x30
 80154b6:	3130      	adds	r1, #48	; 0x30
 80154b8:	7083      	strb	r3, [r0, #2]
 80154ba:	70c1      	strb	r1, [r0, #3]
 80154bc:	1d03      	adds	r3, r0, #4
 80154be:	e7f1      	b.n	80154a4 <__exponent+0x60>

080154c0 <_printf_float>:
 80154c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154c4:	ed2d 8b02 	vpush	{d8}
 80154c8:	b08d      	sub	sp, #52	; 0x34
 80154ca:	460c      	mov	r4, r1
 80154cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80154d0:	4616      	mov	r6, r2
 80154d2:	461f      	mov	r7, r3
 80154d4:	4605      	mov	r5, r0
 80154d6:	f002 ff9b 	bl	8018410 <_localeconv_r>
 80154da:	f8d0 a000 	ldr.w	sl, [r0]
 80154de:	4650      	mov	r0, sl
 80154e0:	f7ea fe76 	bl	80001d0 <strlen>
 80154e4:	2300      	movs	r3, #0
 80154e6:	930a      	str	r3, [sp, #40]	; 0x28
 80154e8:	6823      	ldr	r3, [r4, #0]
 80154ea:	9305      	str	r3, [sp, #20]
 80154ec:	f8d8 3000 	ldr.w	r3, [r8]
 80154f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80154f4:	3307      	adds	r3, #7
 80154f6:	f023 0307 	bic.w	r3, r3, #7
 80154fa:	f103 0208 	add.w	r2, r3, #8
 80154fe:	f8c8 2000 	str.w	r2, [r8]
 8015502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015506:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801550a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801550e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015512:	9307      	str	r3, [sp, #28]
 8015514:	f8cd 8018 	str.w	r8, [sp, #24]
 8015518:	ee08 0a10 	vmov	s16, r0
 801551c:	4b9f      	ldr	r3, [pc, #636]	; (801579c <_printf_float+0x2dc>)
 801551e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015522:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015526:	f7eb fb01 	bl	8000b2c <__aeabi_dcmpun>
 801552a:	bb88      	cbnz	r0, 8015590 <_printf_float+0xd0>
 801552c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015530:	4b9a      	ldr	r3, [pc, #616]	; (801579c <_printf_float+0x2dc>)
 8015532:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015536:	f7eb fadb 	bl	8000af0 <__aeabi_dcmple>
 801553a:	bb48      	cbnz	r0, 8015590 <_printf_float+0xd0>
 801553c:	2200      	movs	r2, #0
 801553e:	2300      	movs	r3, #0
 8015540:	4640      	mov	r0, r8
 8015542:	4649      	mov	r1, r9
 8015544:	f7eb faca 	bl	8000adc <__aeabi_dcmplt>
 8015548:	b110      	cbz	r0, 8015550 <_printf_float+0x90>
 801554a:	232d      	movs	r3, #45	; 0x2d
 801554c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015550:	4b93      	ldr	r3, [pc, #588]	; (80157a0 <_printf_float+0x2e0>)
 8015552:	4894      	ldr	r0, [pc, #592]	; (80157a4 <_printf_float+0x2e4>)
 8015554:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8015558:	bf94      	ite	ls
 801555a:	4698      	movls	r8, r3
 801555c:	4680      	movhi	r8, r0
 801555e:	2303      	movs	r3, #3
 8015560:	6123      	str	r3, [r4, #16]
 8015562:	9b05      	ldr	r3, [sp, #20]
 8015564:	f023 0204 	bic.w	r2, r3, #4
 8015568:	6022      	str	r2, [r4, #0]
 801556a:	f04f 0900 	mov.w	r9, #0
 801556e:	9700      	str	r7, [sp, #0]
 8015570:	4633      	mov	r3, r6
 8015572:	aa0b      	add	r2, sp, #44	; 0x2c
 8015574:	4621      	mov	r1, r4
 8015576:	4628      	mov	r0, r5
 8015578:	f000 f9d8 	bl	801592c <_printf_common>
 801557c:	3001      	adds	r0, #1
 801557e:	f040 8090 	bne.w	80156a2 <_printf_float+0x1e2>
 8015582:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015586:	b00d      	add	sp, #52	; 0x34
 8015588:	ecbd 8b02 	vpop	{d8}
 801558c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015590:	4642      	mov	r2, r8
 8015592:	464b      	mov	r3, r9
 8015594:	4640      	mov	r0, r8
 8015596:	4649      	mov	r1, r9
 8015598:	f7eb fac8 	bl	8000b2c <__aeabi_dcmpun>
 801559c:	b140      	cbz	r0, 80155b0 <_printf_float+0xf0>
 801559e:	464b      	mov	r3, r9
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	bfbc      	itt	lt
 80155a4:	232d      	movlt	r3, #45	; 0x2d
 80155a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80155aa:	487f      	ldr	r0, [pc, #508]	; (80157a8 <_printf_float+0x2e8>)
 80155ac:	4b7f      	ldr	r3, [pc, #508]	; (80157ac <_printf_float+0x2ec>)
 80155ae:	e7d1      	b.n	8015554 <_printf_float+0x94>
 80155b0:	6863      	ldr	r3, [r4, #4]
 80155b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80155b6:	9206      	str	r2, [sp, #24]
 80155b8:	1c5a      	adds	r2, r3, #1
 80155ba:	d13f      	bne.n	801563c <_printf_float+0x17c>
 80155bc:	2306      	movs	r3, #6
 80155be:	6063      	str	r3, [r4, #4]
 80155c0:	9b05      	ldr	r3, [sp, #20]
 80155c2:	6861      	ldr	r1, [r4, #4]
 80155c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80155c8:	2300      	movs	r3, #0
 80155ca:	9303      	str	r3, [sp, #12]
 80155cc:	ab0a      	add	r3, sp, #40	; 0x28
 80155ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80155d2:	ab09      	add	r3, sp, #36	; 0x24
 80155d4:	ec49 8b10 	vmov	d0, r8, r9
 80155d8:	9300      	str	r3, [sp, #0]
 80155da:	6022      	str	r2, [r4, #0]
 80155dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80155e0:	4628      	mov	r0, r5
 80155e2:	f7ff fecd 	bl	8015380 <__cvt>
 80155e6:	9b06      	ldr	r3, [sp, #24]
 80155e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80155ea:	2b47      	cmp	r3, #71	; 0x47
 80155ec:	4680      	mov	r8, r0
 80155ee:	d108      	bne.n	8015602 <_printf_float+0x142>
 80155f0:	1cc8      	adds	r0, r1, #3
 80155f2:	db02      	blt.n	80155fa <_printf_float+0x13a>
 80155f4:	6863      	ldr	r3, [r4, #4]
 80155f6:	4299      	cmp	r1, r3
 80155f8:	dd41      	ble.n	801567e <_printf_float+0x1be>
 80155fa:	f1ab 0b02 	sub.w	fp, fp, #2
 80155fe:	fa5f fb8b 	uxtb.w	fp, fp
 8015602:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015606:	d820      	bhi.n	801564a <_printf_float+0x18a>
 8015608:	3901      	subs	r1, #1
 801560a:	465a      	mov	r2, fp
 801560c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015610:	9109      	str	r1, [sp, #36]	; 0x24
 8015612:	f7ff ff17 	bl	8015444 <__exponent>
 8015616:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015618:	1813      	adds	r3, r2, r0
 801561a:	2a01      	cmp	r2, #1
 801561c:	4681      	mov	r9, r0
 801561e:	6123      	str	r3, [r4, #16]
 8015620:	dc02      	bgt.n	8015628 <_printf_float+0x168>
 8015622:	6822      	ldr	r2, [r4, #0]
 8015624:	07d2      	lsls	r2, r2, #31
 8015626:	d501      	bpl.n	801562c <_printf_float+0x16c>
 8015628:	3301      	adds	r3, #1
 801562a:	6123      	str	r3, [r4, #16]
 801562c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015630:	2b00      	cmp	r3, #0
 8015632:	d09c      	beq.n	801556e <_printf_float+0xae>
 8015634:	232d      	movs	r3, #45	; 0x2d
 8015636:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801563a:	e798      	b.n	801556e <_printf_float+0xae>
 801563c:	9a06      	ldr	r2, [sp, #24]
 801563e:	2a47      	cmp	r2, #71	; 0x47
 8015640:	d1be      	bne.n	80155c0 <_printf_float+0x100>
 8015642:	2b00      	cmp	r3, #0
 8015644:	d1bc      	bne.n	80155c0 <_printf_float+0x100>
 8015646:	2301      	movs	r3, #1
 8015648:	e7b9      	b.n	80155be <_printf_float+0xfe>
 801564a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801564e:	d118      	bne.n	8015682 <_printf_float+0x1c2>
 8015650:	2900      	cmp	r1, #0
 8015652:	6863      	ldr	r3, [r4, #4]
 8015654:	dd0b      	ble.n	801566e <_printf_float+0x1ae>
 8015656:	6121      	str	r1, [r4, #16]
 8015658:	b913      	cbnz	r3, 8015660 <_printf_float+0x1a0>
 801565a:	6822      	ldr	r2, [r4, #0]
 801565c:	07d0      	lsls	r0, r2, #31
 801565e:	d502      	bpl.n	8015666 <_printf_float+0x1a6>
 8015660:	3301      	adds	r3, #1
 8015662:	440b      	add	r3, r1
 8015664:	6123      	str	r3, [r4, #16]
 8015666:	65a1      	str	r1, [r4, #88]	; 0x58
 8015668:	f04f 0900 	mov.w	r9, #0
 801566c:	e7de      	b.n	801562c <_printf_float+0x16c>
 801566e:	b913      	cbnz	r3, 8015676 <_printf_float+0x1b6>
 8015670:	6822      	ldr	r2, [r4, #0]
 8015672:	07d2      	lsls	r2, r2, #31
 8015674:	d501      	bpl.n	801567a <_printf_float+0x1ba>
 8015676:	3302      	adds	r3, #2
 8015678:	e7f4      	b.n	8015664 <_printf_float+0x1a4>
 801567a:	2301      	movs	r3, #1
 801567c:	e7f2      	b.n	8015664 <_printf_float+0x1a4>
 801567e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8015682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015684:	4299      	cmp	r1, r3
 8015686:	db05      	blt.n	8015694 <_printf_float+0x1d4>
 8015688:	6823      	ldr	r3, [r4, #0]
 801568a:	6121      	str	r1, [r4, #16]
 801568c:	07d8      	lsls	r0, r3, #31
 801568e:	d5ea      	bpl.n	8015666 <_printf_float+0x1a6>
 8015690:	1c4b      	adds	r3, r1, #1
 8015692:	e7e7      	b.n	8015664 <_printf_float+0x1a4>
 8015694:	2900      	cmp	r1, #0
 8015696:	bfd4      	ite	le
 8015698:	f1c1 0202 	rsble	r2, r1, #2
 801569c:	2201      	movgt	r2, #1
 801569e:	4413      	add	r3, r2
 80156a0:	e7e0      	b.n	8015664 <_printf_float+0x1a4>
 80156a2:	6823      	ldr	r3, [r4, #0]
 80156a4:	055a      	lsls	r2, r3, #21
 80156a6:	d407      	bmi.n	80156b8 <_printf_float+0x1f8>
 80156a8:	6923      	ldr	r3, [r4, #16]
 80156aa:	4642      	mov	r2, r8
 80156ac:	4631      	mov	r1, r6
 80156ae:	4628      	mov	r0, r5
 80156b0:	47b8      	blx	r7
 80156b2:	3001      	adds	r0, #1
 80156b4:	d12c      	bne.n	8015710 <_printf_float+0x250>
 80156b6:	e764      	b.n	8015582 <_printf_float+0xc2>
 80156b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80156bc:	f240 80e0 	bls.w	8015880 <_printf_float+0x3c0>
 80156c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80156c4:	2200      	movs	r2, #0
 80156c6:	2300      	movs	r3, #0
 80156c8:	f7eb f9fe 	bl	8000ac8 <__aeabi_dcmpeq>
 80156cc:	2800      	cmp	r0, #0
 80156ce:	d034      	beq.n	801573a <_printf_float+0x27a>
 80156d0:	4a37      	ldr	r2, [pc, #220]	; (80157b0 <_printf_float+0x2f0>)
 80156d2:	2301      	movs	r3, #1
 80156d4:	4631      	mov	r1, r6
 80156d6:	4628      	mov	r0, r5
 80156d8:	47b8      	blx	r7
 80156da:	3001      	adds	r0, #1
 80156dc:	f43f af51 	beq.w	8015582 <_printf_float+0xc2>
 80156e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80156e4:	429a      	cmp	r2, r3
 80156e6:	db02      	blt.n	80156ee <_printf_float+0x22e>
 80156e8:	6823      	ldr	r3, [r4, #0]
 80156ea:	07d8      	lsls	r0, r3, #31
 80156ec:	d510      	bpl.n	8015710 <_printf_float+0x250>
 80156ee:	ee18 3a10 	vmov	r3, s16
 80156f2:	4652      	mov	r2, sl
 80156f4:	4631      	mov	r1, r6
 80156f6:	4628      	mov	r0, r5
 80156f8:	47b8      	blx	r7
 80156fa:	3001      	adds	r0, #1
 80156fc:	f43f af41 	beq.w	8015582 <_printf_float+0xc2>
 8015700:	f04f 0800 	mov.w	r8, #0
 8015704:	f104 091a 	add.w	r9, r4, #26
 8015708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801570a:	3b01      	subs	r3, #1
 801570c:	4543      	cmp	r3, r8
 801570e:	dc09      	bgt.n	8015724 <_printf_float+0x264>
 8015710:	6823      	ldr	r3, [r4, #0]
 8015712:	079b      	lsls	r3, r3, #30
 8015714:	f100 8105 	bmi.w	8015922 <_printf_float+0x462>
 8015718:	68e0      	ldr	r0, [r4, #12]
 801571a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801571c:	4298      	cmp	r0, r3
 801571e:	bfb8      	it	lt
 8015720:	4618      	movlt	r0, r3
 8015722:	e730      	b.n	8015586 <_printf_float+0xc6>
 8015724:	2301      	movs	r3, #1
 8015726:	464a      	mov	r2, r9
 8015728:	4631      	mov	r1, r6
 801572a:	4628      	mov	r0, r5
 801572c:	47b8      	blx	r7
 801572e:	3001      	adds	r0, #1
 8015730:	f43f af27 	beq.w	8015582 <_printf_float+0xc2>
 8015734:	f108 0801 	add.w	r8, r8, #1
 8015738:	e7e6      	b.n	8015708 <_printf_float+0x248>
 801573a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801573c:	2b00      	cmp	r3, #0
 801573e:	dc39      	bgt.n	80157b4 <_printf_float+0x2f4>
 8015740:	4a1b      	ldr	r2, [pc, #108]	; (80157b0 <_printf_float+0x2f0>)
 8015742:	2301      	movs	r3, #1
 8015744:	4631      	mov	r1, r6
 8015746:	4628      	mov	r0, r5
 8015748:	47b8      	blx	r7
 801574a:	3001      	adds	r0, #1
 801574c:	f43f af19 	beq.w	8015582 <_printf_float+0xc2>
 8015750:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015754:	4313      	orrs	r3, r2
 8015756:	d102      	bne.n	801575e <_printf_float+0x29e>
 8015758:	6823      	ldr	r3, [r4, #0]
 801575a:	07d9      	lsls	r1, r3, #31
 801575c:	d5d8      	bpl.n	8015710 <_printf_float+0x250>
 801575e:	ee18 3a10 	vmov	r3, s16
 8015762:	4652      	mov	r2, sl
 8015764:	4631      	mov	r1, r6
 8015766:	4628      	mov	r0, r5
 8015768:	47b8      	blx	r7
 801576a:	3001      	adds	r0, #1
 801576c:	f43f af09 	beq.w	8015582 <_printf_float+0xc2>
 8015770:	f04f 0900 	mov.w	r9, #0
 8015774:	f104 0a1a 	add.w	sl, r4, #26
 8015778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801577a:	425b      	negs	r3, r3
 801577c:	454b      	cmp	r3, r9
 801577e:	dc01      	bgt.n	8015784 <_printf_float+0x2c4>
 8015780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015782:	e792      	b.n	80156aa <_printf_float+0x1ea>
 8015784:	2301      	movs	r3, #1
 8015786:	4652      	mov	r2, sl
 8015788:	4631      	mov	r1, r6
 801578a:	4628      	mov	r0, r5
 801578c:	47b8      	blx	r7
 801578e:	3001      	adds	r0, #1
 8015790:	f43f aef7 	beq.w	8015582 <_printf_float+0xc2>
 8015794:	f109 0901 	add.w	r9, r9, #1
 8015798:	e7ee      	b.n	8015778 <_printf_float+0x2b8>
 801579a:	bf00      	nop
 801579c:	7fefffff 	.word	0x7fefffff
 80157a0:	0801b2fc 	.word	0x0801b2fc
 80157a4:	0801b300 	.word	0x0801b300
 80157a8:	0801b308 	.word	0x0801b308
 80157ac:	0801b304 	.word	0x0801b304
 80157b0:	0801b30c 	.word	0x0801b30c
 80157b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80157b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80157b8:	429a      	cmp	r2, r3
 80157ba:	bfa8      	it	ge
 80157bc:	461a      	movge	r2, r3
 80157be:	2a00      	cmp	r2, #0
 80157c0:	4691      	mov	r9, r2
 80157c2:	dc37      	bgt.n	8015834 <_printf_float+0x374>
 80157c4:	f04f 0b00 	mov.w	fp, #0
 80157c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80157cc:	f104 021a 	add.w	r2, r4, #26
 80157d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80157d2:	9305      	str	r3, [sp, #20]
 80157d4:	eba3 0309 	sub.w	r3, r3, r9
 80157d8:	455b      	cmp	r3, fp
 80157da:	dc33      	bgt.n	8015844 <_printf_float+0x384>
 80157dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80157e0:	429a      	cmp	r2, r3
 80157e2:	db3b      	blt.n	801585c <_printf_float+0x39c>
 80157e4:	6823      	ldr	r3, [r4, #0]
 80157e6:	07da      	lsls	r2, r3, #31
 80157e8:	d438      	bmi.n	801585c <_printf_float+0x39c>
 80157ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80157ec:	9b05      	ldr	r3, [sp, #20]
 80157ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80157f0:	1ad3      	subs	r3, r2, r3
 80157f2:	eba2 0901 	sub.w	r9, r2, r1
 80157f6:	4599      	cmp	r9, r3
 80157f8:	bfa8      	it	ge
 80157fa:	4699      	movge	r9, r3
 80157fc:	f1b9 0f00 	cmp.w	r9, #0
 8015800:	dc35      	bgt.n	801586e <_printf_float+0x3ae>
 8015802:	f04f 0800 	mov.w	r8, #0
 8015806:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801580a:	f104 0a1a 	add.w	sl, r4, #26
 801580e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015812:	1a9b      	subs	r3, r3, r2
 8015814:	eba3 0309 	sub.w	r3, r3, r9
 8015818:	4543      	cmp	r3, r8
 801581a:	f77f af79 	ble.w	8015710 <_printf_float+0x250>
 801581e:	2301      	movs	r3, #1
 8015820:	4652      	mov	r2, sl
 8015822:	4631      	mov	r1, r6
 8015824:	4628      	mov	r0, r5
 8015826:	47b8      	blx	r7
 8015828:	3001      	adds	r0, #1
 801582a:	f43f aeaa 	beq.w	8015582 <_printf_float+0xc2>
 801582e:	f108 0801 	add.w	r8, r8, #1
 8015832:	e7ec      	b.n	801580e <_printf_float+0x34e>
 8015834:	4613      	mov	r3, r2
 8015836:	4631      	mov	r1, r6
 8015838:	4642      	mov	r2, r8
 801583a:	4628      	mov	r0, r5
 801583c:	47b8      	blx	r7
 801583e:	3001      	adds	r0, #1
 8015840:	d1c0      	bne.n	80157c4 <_printf_float+0x304>
 8015842:	e69e      	b.n	8015582 <_printf_float+0xc2>
 8015844:	2301      	movs	r3, #1
 8015846:	4631      	mov	r1, r6
 8015848:	4628      	mov	r0, r5
 801584a:	9205      	str	r2, [sp, #20]
 801584c:	47b8      	blx	r7
 801584e:	3001      	adds	r0, #1
 8015850:	f43f ae97 	beq.w	8015582 <_printf_float+0xc2>
 8015854:	9a05      	ldr	r2, [sp, #20]
 8015856:	f10b 0b01 	add.w	fp, fp, #1
 801585a:	e7b9      	b.n	80157d0 <_printf_float+0x310>
 801585c:	ee18 3a10 	vmov	r3, s16
 8015860:	4652      	mov	r2, sl
 8015862:	4631      	mov	r1, r6
 8015864:	4628      	mov	r0, r5
 8015866:	47b8      	blx	r7
 8015868:	3001      	adds	r0, #1
 801586a:	d1be      	bne.n	80157ea <_printf_float+0x32a>
 801586c:	e689      	b.n	8015582 <_printf_float+0xc2>
 801586e:	9a05      	ldr	r2, [sp, #20]
 8015870:	464b      	mov	r3, r9
 8015872:	4442      	add	r2, r8
 8015874:	4631      	mov	r1, r6
 8015876:	4628      	mov	r0, r5
 8015878:	47b8      	blx	r7
 801587a:	3001      	adds	r0, #1
 801587c:	d1c1      	bne.n	8015802 <_printf_float+0x342>
 801587e:	e680      	b.n	8015582 <_printf_float+0xc2>
 8015880:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015882:	2a01      	cmp	r2, #1
 8015884:	dc01      	bgt.n	801588a <_printf_float+0x3ca>
 8015886:	07db      	lsls	r3, r3, #31
 8015888:	d538      	bpl.n	80158fc <_printf_float+0x43c>
 801588a:	2301      	movs	r3, #1
 801588c:	4642      	mov	r2, r8
 801588e:	4631      	mov	r1, r6
 8015890:	4628      	mov	r0, r5
 8015892:	47b8      	blx	r7
 8015894:	3001      	adds	r0, #1
 8015896:	f43f ae74 	beq.w	8015582 <_printf_float+0xc2>
 801589a:	ee18 3a10 	vmov	r3, s16
 801589e:	4652      	mov	r2, sl
 80158a0:	4631      	mov	r1, r6
 80158a2:	4628      	mov	r0, r5
 80158a4:	47b8      	blx	r7
 80158a6:	3001      	adds	r0, #1
 80158a8:	f43f ae6b 	beq.w	8015582 <_printf_float+0xc2>
 80158ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80158b0:	2200      	movs	r2, #0
 80158b2:	2300      	movs	r3, #0
 80158b4:	f7eb f908 	bl	8000ac8 <__aeabi_dcmpeq>
 80158b8:	b9d8      	cbnz	r0, 80158f2 <_printf_float+0x432>
 80158ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158bc:	f108 0201 	add.w	r2, r8, #1
 80158c0:	3b01      	subs	r3, #1
 80158c2:	4631      	mov	r1, r6
 80158c4:	4628      	mov	r0, r5
 80158c6:	47b8      	blx	r7
 80158c8:	3001      	adds	r0, #1
 80158ca:	d10e      	bne.n	80158ea <_printf_float+0x42a>
 80158cc:	e659      	b.n	8015582 <_printf_float+0xc2>
 80158ce:	2301      	movs	r3, #1
 80158d0:	4652      	mov	r2, sl
 80158d2:	4631      	mov	r1, r6
 80158d4:	4628      	mov	r0, r5
 80158d6:	47b8      	blx	r7
 80158d8:	3001      	adds	r0, #1
 80158da:	f43f ae52 	beq.w	8015582 <_printf_float+0xc2>
 80158de:	f108 0801 	add.w	r8, r8, #1
 80158e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158e4:	3b01      	subs	r3, #1
 80158e6:	4543      	cmp	r3, r8
 80158e8:	dcf1      	bgt.n	80158ce <_printf_float+0x40e>
 80158ea:	464b      	mov	r3, r9
 80158ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80158f0:	e6dc      	b.n	80156ac <_printf_float+0x1ec>
 80158f2:	f04f 0800 	mov.w	r8, #0
 80158f6:	f104 0a1a 	add.w	sl, r4, #26
 80158fa:	e7f2      	b.n	80158e2 <_printf_float+0x422>
 80158fc:	2301      	movs	r3, #1
 80158fe:	4642      	mov	r2, r8
 8015900:	e7df      	b.n	80158c2 <_printf_float+0x402>
 8015902:	2301      	movs	r3, #1
 8015904:	464a      	mov	r2, r9
 8015906:	4631      	mov	r1, r6
 8015908:	4628      	mov	r0, r5
 801590a:	47b8      	blx	r7
 801590c:	3001      	adds	r0, #1
 801590e:	f43f ae38 	beq.w	8015582 <_printf_float+0xc2>
 8015912:	f108 0801 	add.w	r8, r8, #1
 8015916:	68e3      	ldr	r3, [r4, #12]
 8015918:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801591a:	1a5b      	subs	r3, r3, r1
 801591c:	4543      	cmp	r3, r8
 801591e:	dcf0      	bgt.n	8015902 <_printf_float+0x442>
 8015920:	e6fa      	b.n	8015718 <_printf_float+0x258>
 8015922:	f04f 0800 	mov.w	r8, #0
 8015926:	f104 0919 	add.w	r9, r4, #25
 801592a:	e7f4      	b.n	8015916 <_printf_float+0x456>

0801592c <_printf_common>:
 801592c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015930:	4616      	mov	r6, r2
 8015932:	4699      	mov	r9, r3
 8015934:	688a      	ldr	r2, [r1, #8]
 8015936:	690b      	ldr	r3, [r1, #16]
 8015938:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801593c:	4293      	cmp	r3, r2
 801593e:	bfb8      	it	lt
 8015940:	4613      	movlt	r3, r2
 8015942:	6033      	str	r3, [r6, #0]
 8015944:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015948:	4607      	mov	r7, r0
 801594a:	460c      	mov	r4, r1
 801594c:	b10a      	cbz	r2, 8015952 <_printf_common+0x26>
 801594e:	3301      	adds	r3, #1
 8015950:	6033      	str	r3, [r6, #0]
 8015952:	6823      	ldr	r3, [r4, #0]
 8015954:	0699      	lsls	r1, r3, #26
 8015956:	bf42      	ittt	mi
 8015958:	6833      	ldrmi	r3, [r6, #0]
 801595a:	3302      	addmi	r3, #2
 801595c:	6033      	strmi	r3, [r6, #0]
 801595e:	6825      	ldr	r5, [r4, #0]
 8015960:	f015 0506 	ands.w	r5, r5, #6
 8015964:	d106      	bne.n	8015974 <_printf_common+0x48>
 8015966:	f104 0a19 	add.w	sl, r4, #25
 801596a:	68e3      	ldr	r3, [r4, #12]
 801596c:	6832      	ldr	r2, [r6, #0]
 801596e:	1a9b      	subs	r3, r3, r2
 8015970:	42ab      	cmp	r3, r5
 8015972:	dc26      	bgt.n	80159c2 <_printf_common+0x96>
 8015974:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015978:	1e13      	subs	r3, r2, #0
 801597a:	6822      	ldr	r2, [r4, #0]
 801597c:	bf18      	it	ne
 801597e:	2301      	movne	r3, #1
 8015980:	0692      	lsls	r2, r2, #26
 8015982:	d42b      	bmi.n	80159dc <_printf_common+0xb0>
 8015984:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015988:	4649      	mov	r1, r9
 801598a:	4638      	mov	r0, r7
 801598c:	47c0      	blx	r8
 801598e:	3001      	adds	r0, #1
 8015990:	d01e      	beq.n	80159d0 <_printf_common+0xa4>
 8015992:	6823      	ldr	r3, [r4, #0]
 8015994:	68e5      	ldr	r5, [r4, #12]
 8015996:	6832      	ldr	r2, [r6, #0]
 8015998:	f003 0306 	and.w	r3, r3, #6
 801599c:	2b04      	cmp	r3, #4
 801599e:	bf08      	it	eq
 80159a0:	1aad      	subeq	r5, r5, r2
 80159a2:	68a3      	ldr	r3, [r4, #8]
 80159a4:	6922      	ldr	r2, [r4, #16]
 80159a6:	bf0c      	ite	eq
 80159a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80159ac:	2500      	movne	r5, #0
 80159ae:	4293      	cmp	r3, r2
 80159b0:	bfc4      	itt	gt
 80159b2:	1a9b      	subgt	r3, r3, r2
 80159b4:	18ed      	addgt	r5, r5, r3
 80159b6:	2600      	movs	r6, #0
 80159b8:	341a      	adds	r4, #26
 80159ba:	42b5      	cmp	r5, r6
 80159bc:	d11a      	bne.n	80159f4 <_printf_common+0xc8>
 80159be:	2000      	movs	r0, #0
 80159c0:	e008      	b.n	80159d4 <_printf_common+0xa8>
 80159c2:	2301      	movs	r3, #1
 80159c4:	4652      	mov	r2, sl
 80159c6:	4649      	mov	r1, r9
 80159c8:	4638      	mov	r0, r7
 80159ca:	47c0      	blx	r8
 80159cc:	3001      	adds	r0, #1
 80159ce:	d103      	bne.n	80159d8 <_printf_common+0xac>
 80159d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80159d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80159d8:	3501      	adds	r5, #1
 80159da:	e7c6      	b.n	801596a <_printf_common+0x3e>
 80159dc:	18e1      	adds	r1, r4, r3
 80159de:	1c5a      	adds	r2, r3, #1
 80159e0:	2030      	movs	r0, #48	; 0x30
 80159e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80159e6:	4422      	add	r2, r4
 80159e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80159ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80159f0:	3302      	adds	r3, #2
 80159f2:	e7c7      	b.n	8015984 <_printf_common+0x58>
 80159f4:	2301      	movs	r3, #1
 80159f6:	4622      	mov	r2, r4
 80159f8:	4649      	mov	r1, r9
 80159fa:	4638      	mov	r0, r7
 80159fc:	47c0      	blx	r8
 80159fe:	3001      	adds	r0, #1
 8015a00:	d0e6      	beq.n	80159d0 <_printf_common+0xa4>
 8015a02:	3601      	adds	r6, #1
 8015a04:	e7d9      	b.n	80159ba <_printf_common+0x8e>
	...

08015a08 <_printf_i>:
 8015a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015a0c:	460c      	mov	r4, r1
 8015a0e:	4691      	mov	r9, r2
 8015a10:	7e27      	ldrb	r7, [r4, #24]
 8015a12:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015a14:	2f78      	cmp	r7, #120	; 0x78
 8015a16:	4680      	mov	r8, r0
 8015a18:	469a      	mov	sl, r3
 8015a1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015a1e:	d807      	bhi.n	8015a30 <_printf_i+0x28>
 8015a20:	2f62      	cmp	r7, #98	; 0x62
 8015a22:	d80a      	bhi.n	8015a3a <_printf_i+0x32>
 8015a24:	2f00      	cmp	r7, #0
 8015a26:	f000 80d8 	beq.w	8015bda <_printf_i+0x1d2>
 8015a2a:	2f58      	cmp	r7, #88	; 0x58
 8015a2c:	f000 80a3 	beq.w	8015b76 <_printf_i+0x16e>
 8015a30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015a34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015a38:	e03a      	b.n	8015ab0 <_printf_i+0xa8>
 8015a3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015a3e:	2b15      	cmp	r3, #21
 8015a40:	d8f6      	bhi.n	8015a30 <_printf_i+0x28>
 8015a42:	a001      	add	r0, pc, #4	; (adr r0, 8015a48 <_printf_i+0x40>)
 8015a44:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8015a48:	08015aa1 	.word	0x08015aa1
 8015a4c:	08015ab5 	.word	0x08015ab5
 8015a50:	08015a31 	.word	0x08015a31
 8015a54:	08015a31 	.word	0x08015a31
 8015a58:	08015a31 	.word	0x08015a31
 8015a5c:	08015a31 	.word	0x08015a31
 8015a60:	08015ab5 	.word	0x08015ab5
 8015a64:	08015a31 	.word	0x08015a31
 8015a68:	08015a31 	.word	0x08015a31
 8015a6c:	08015a31 	.word	0x08015a31
 8015a70:	08015a31 	.word	0x08015a31
 8015a74:	08015bc1 	.word	0x08015bc1
 8015a78:	08015ae5 	.word	0x08015ae5
 8015a7c:	08015ba3 	.word	0x08015ba3
 8015a80:	08015a31 	.word	0x08015a31
 8015a84:	08015a31 	.word	0x08015a31
 8015a88:	08015be3 	.word	0x08015be3
 8015a8c:	08015a31 	.word	0x08015a31
 8015a90:	08015ae5 	.word	0x08015ae5
 8015a94:	08015a31 	.word	0x08015a31
 8015a98:	08015a31 	.word	0x08015a31
 8015a9c:	08015bab 	.word	0x08015bab
 8015aa0:	680b      	ldr	r3, [r1, #0]
 8015aa2:	1d1a      	adds	r2, r3, #4
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	600a      	str	r2, [r1, #0]
 8015aa8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015aac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015ab0:	2301      	movs	r3, #1
 8015ab2:	e0a3      	b.n	8015bfc <_printf_i+0x1f4>
 8015ab4:	6825      	ldr	r5, [r4, #0]
 8015ab6:	6808      	ldr	r0, [r1, #0]
 8015ab8:	062e      	lsls	r6, r5, #24
 8015aba:	f100 0304 	add.w	r3, r0, #4
 8015abe:	d50a      	bpl.n	8015ad6 <_printf_i+0xce>
 8015ac0:	6805      	ldr	r5, [r0, #0]
 8015ac2:	600b      	str	r3, [r1, #0]
 8015ac4:	2d00      	cmp	r5, #0
 8015ac6:	da03      	bge.n	8015ad0 <_printf_i+0xc8>
 8015ac8:	232d      	movs	r3, #45	; 0x2d
 8015aca:	426d      	negs	r5, r5
 8015acc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015ad0:	485e      	ldr	r0, [pc, #376]	; (8015c4c <_printf_i+0x244>)
 8015ad2:	230a      	movs	r3, #10
 8015ad4:	e019      	b.n	8015b0a <_printf_i+0x102>
 8015ad6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8015ada:	6805      	ldr	r5, [r0, #0]
 8015adc:	600b      	str	r3, [r1, #0]
 8015ade:	bf18      	it	ne
 8015ae0:	b22d      	sxthne	r5, r5
 8015ae2:	e7ef      	b.n	8015ac4 <_printf_i+0xbc>
 8015ae4:	680b      	ldr	r3, [r1, #0]
 8015ae6:	6825      	ldr	r5, [r4, #0]
 8015ae8:	1d18      	adds	r0, r3, #4
 8015aea:	6008      	str	r0, [r1, #0]
 8015aec:	0628      	lsls	r0, r5, #24
 8015aee:	d501      	bpl.n	8015af4 <_printf_i+0xec>
 8015af0:	681d      	ldr	r5, [r3, #0]
 8015af2:	e002      	b.n	8015afa <_printf_i+0xf2>
 8015af4:	0669      	lsls	r1, r5, #25
 8015af6:	d5fb      	bpl.n	8015af0 <_printf_i+0xe8>
 8015af8:	881d      	ldrh	r5, [r3, #0]
 8015afa:	4854      	ldr	r0, [pc, #336]	; (8015c4c <_printf_i+0x244>)
 8015afc:	2f6f      	cmp	r7, #111	; 0x6f
 8015afe:	bf0c      	ite	eq
 8015b00:	2308      	moveq	r3, #8
 8015b02:	230a      	movne	r3, #10
 8015b04:	2100      	movs	r1, #0
 8015b06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015b0a:	6866      	ldr	r6, [r4, #4]
 8015b0c:	60a6      	str	r6, [r4, #8]
 8015b0e:	2e00      	cmp	r6, #0
 8015b10:	bfa2      	ittt	ge
 8015b12:	6821      	ldrge	r1, [r4, #0]
 8015b14:	f021 0104 	bicge.w	r1, r1, #4
 8015b18:	6021      	strge	r1, [r4, #0]
 8015b1a:	b90d      	cbnz	r5, 8015b20 <_printf_i+0x118>
 8015b1c:	2e00      	cmp	r6, #0
 8015b1e:	d04d      	beq.n	8015bbc <_printf_i+0x1b4>
 8015b20:	4616      	mov	r6, r2
 8015b22:	fbb5 f1f3 	udiv	r1, r5, r3
 8015b26:	fb03 5711 	mls	r7, r3, r1, r5
 8015b2a:	5dc7      	ldrb	r7, [r0, r7]
 8015b2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015b30:	462f      	mov	r7, r5
 8015b32:	42bb      	cmp	r3, r7
 8015b34:	460d      	mov	r5, r1
 8015b36:	d9f4      	bls.n	8015b22 <_printf_i+0x11a>
 8015b38:	2b08      	cmp	r3, #8
 8015b3a:	d10b      	bne.n	8015b54 <_printf_i+0x14c>
 8015b3c:	6823      	ldr	r3, [r4, #0]
 8015b3e:	07df      	lsls	r7, r3, #31
 8015b40:	d508      	bpl.n	8015b54 <_printf_i+0x14c>
 8015b42:	6923      	ldr	r3, [r4, #16]
 8015b44:	6861      	ldr	r1, [r4, #4]
 8015b46:	4299      	cmp	r1, r3
 8015b48:	bfde      	ittt	le
 8015b4a:	2330      	movle	r3, #48	; 0x30
 8015b4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015b50:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8015b54:	1b92      	subs	r2, r2, r6
 8015b56:	6122      	str	r2, [r4, #16]
 8015b58:	f8cd a000 	str.w	sl, [sp]
 8015b5c:	464b      	mov	r3, r9
 8015b5e:	aa03      	add	r2, sp, #12
 8015b60:	4621      	mov	r1, r4
 8015b62:	4640      	mov	r0, r8
 8015b64:	f7ff fee2 	bl	801592c <_printf_common>
 8015b68:	3001      	adds	r0, #1
 8015b6a:	d14c      	bne.n	8015c06 <_printf_i+0x1fe>
 8015b6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015b70:	b004      	add	sp, #16
 8015b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b76:	4835      	ldr	r0, [pc, #212]	; (8015c4c <_printf_i+0x244>)
 8015b78:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015b7c:	6823      	ldr	r3, [r4, #0]
 8015b7e:	680e      	ldr	r6, [r1, #0]
 8015b80:	061f      	lsls	r7, r3, #24
 8015b82:	f856 5b04 	ldr.w	r5, [r6], #4
 8015b86:	600e      	str	r6, [r1, #0]
 8015b88:	d514      	bpl.n	8015bb4 <_printf_i+0x1ac>
 8015b8a:	07d9      	lsls	r1, r3, #31
 8015b8c:	bf44      	itt	mi
 8015b8e:	f043 0320 	orrmi.w	r3, r3, #32
 8015b92:	6023      	strmi	r3, [r4, #0]
 8015b94:	b91d      	cbnz	r5, 8015b9e <_printf_i+0x196>
 8015b96:	6823      	ldr	r3, [r4, #0]
 8015b98:	f023 0320 	bic.w	r3, r3, #32
 8015b9c:	6023      	str	r3, [r4, #0]
 8015b9e:	2310      	movs	r3, #16
 8015ba0:	e7b0      	b.n	8015b04 <_printf_i+0xfc>
 8015ba2:	6823      	ldr	r3, [r4, #0]
 8015ba4:	f043 0320 	orr.w	r3, r3, #32
 8015ba8:	6023      	str	r3, [r4, #0]
 8015baa:	2378      	movs	r3, #120	; 0x78
 8015bac:	4828      	ldr	r0, [pc, #160]	; (8015c50 <_printf_i+0x248>)
 8015bae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015bb2:	e7e3      	b.n	8015b7c <_printf_i+0x174>
 8015bb4:	065e      	lsls	r6, r3, #25
 8015bb6:	bf48      	it	mi
 8015bb8:	b2ad      	uxthmi	r5, r5
 8015bba:	e7e6      	b.n	8015b8a <_printf_i+0x182>
 8015bbc:	4616      	mov	r6, r2
 8015bbe:	e7bb      	b.n	8015b38 <_printf_i+0x130>
 8015bc0:	680b      	ldr	r3, [r1, #0]
 8015bc2:	6826      	ldr	r6, [r4, #0]
 8015bc4:	6960      	ldr	r0, [r4, #20]
 8015bc6:	1d1d      	adds	r5, r3, #4
 8015bc8:	600d      	str	r5, [r1, #0]
 8015bca:	0635      	lsls	r5, r6, #24
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	d501      	bpl.n	8015bd4 <_printf_i+0x1cc>
 8015bd0:	6018      	str	r0, [r3, #0]
 8015bd2:	e002      	b.n	8015bda <_printf_i+0x1d2>
 8015bd4:	0671      	lsls	r1, r6, #25
 8015bd6:	d5fb      	bpl.n	8015bd0 <_printf_i+0x1c8>
 8015bd8:	8018      	strh	r0, [r3, #0]
 8015bda:	2300      	movs	r3, #0
 8015bdc:	6123      	str	r3, [r4, #16]
 8015bde:	4616      	mov	r6, r2
 8015be0:	e7ba      	b.n	8015b58 <_printf_i+0x150>
 8015be2:	680b      	ldr	r3, [r1, #0]
 8015be4:	1d1a      	adds	r2, r3, #4
 8015be6:	600a      	str	r2, [r1, #0]
 8015be8:	681e      	ldr	r6, [r3, #0]
 8015bea:	6862      	ldr	r2, [r4, #4]
 8015bec:	2100      	movs	r1, #0
 8015bee:	4630      	mov	r0, r6
 8015bf0:	f7ea faf6 	bl	80001e0 <memchr>
 8015bf4:	b108      	cbz	r0, 8015bfa <_printf_i+0x1f2>
 8015bf6:	1b80      	subs	r0, r0, r6
 8015bf8:	6060      	str	r0, [r4, #4]
 8015bfa:	6863      	ldr	r3, [r4, #4]
 8015bfc:	6123      	str	r3, [r4, #16]
 8015bfe:	2300      	movs	r3, #0
 8015c00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015c04:	e7a8      	b.n	8015b58 <_printf_i+0x150>
 8015c06:	6923      	ldr	r3, [r4, #16]
 8015c08:	4632      	mov	r2, r6
 8015c0a:	4649      	mov	r1, r9
 8015c0c:	4640      	mov	r0, r8
 8015c0e:	47d0      	blx	sl
 8015c10:	3001      	adds	r0, #1
 8015c12:	d0ab      	beq.n	8015b6c <_printf_i+0x164>
 8015c14:	6823      	ldr	r3, [r4, #0]
 8015c16:	079b      	lsls	r3, r3, #30
 8015c18:	d413      	bmi.n	8015c42 <_printf_i+0x23a>
 8015c1a:	68e0      	ldr	r0, [r4, #12]
 8015c1c:	9b03      	ldr	r3, [sp, #12]
 8015c1e:	4298      	cmp	r0, r3
 8015c20:	bfb8      	it	lt
 8015c22:	4618      	movlt	r0, r3
 8015c24:	e7a4      	b.n	8015b70 <_printf_i+0x168>
 8015c26:	2301      	movs	r3, #1
 8015c28:	4632      	mov	r2, r6
 8015c2a:	4649      	mov	r1, r9
 8015c2c:	4640      	mov	r0, r8
 8015c2e:	47d0      	blx	sl
 8015c30:	3001      	adds	r0, #1
 8015c32:	d09b      	beq.n	8015b6c <_printf_i+0x164>
 8015c34:	3501      	adds	r5, #1
 8015c36:	68e3      	ldr	r3, [r4, #12]
 8015c38:	9903      	ldr	r1, [sp, #12]
 8015c3a:	1a5b      	subs	r3, r3, r1
 8015c3c:	42ab      	cmp	r3, r5
 8015c3e:	dcf2      	bgt.n	8015c26 <_printf_i+0x21e>
 8015c40:	e7eb      	b.n	8015c1a <_printf_i+0x212>
 8015c42:	2500      	movs	r5, #0
 8015c44:	f104 0619 	add.w	r6, r4, #25
 8015c48:	e7f5      	b.n	8015c36 <_printf_i+0x22e>
 8015c4a:	bf00      	nop
 8015c4c:	0801b30e 	.word	0x0801b30e
 8015c50:	0801b31f 	.word	0x0801b31f

08015c54 <_scanf_float>:
 8015c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c58:	b087      	sub	sp, #28
 8015c5a:	4617      	mov	r7, r2
 8015c5c:	9303      	str	r3, [sp, #12]
 8015c5e:	688b      	ldr	r3, [r1, #8]
 8015c60:	1e5a      	subs	r2, r3, #1
 8015c62:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015c66:	bf83      	ittte	hi
 8015c68:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8015c6c:	195b      	addhi	r3, r3, r5
 8015c6e:	9302      	strhi	r3, [sp, #8]
 8015c70:	2300      	movls	r3, #0
 8015c72:	bf86      	itte	hi
 8015c74:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015c78:	608b      	strhi	r3, [r1, #8]
 8015c7a:	9302      	strls	r3, [sp, #8]
 8015c7c:	680b      	ldr	r3, [r1, #0]
 8015c7e:	468b      	mov	fp, r1
 8015c80:	2500      	movs	r5, #0
 8015c82:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015c86:	f84b 3b1c 	str.w	r3, [fp], #28
 8015c8a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8015c8e:	4680      	mov	r8, r0
 8015c90:	460c      	mov	r4, r1
 8015c92:	465e      	mov	r6, fp
 8015c94:	46aa      	mov	sl, r5
 8015c96:	46a9      	mov	r9, r5
 8015c98:	9501      	str	r5, [sp, #4]
 8015c9a:	68a2      	ldr	r2, [r4, #8]
 8015c9c:	b152      	cbz	r2, 8015cb4 <_scanf_float+0x60>
 8015c9e:	683b      	ldr	r3, [r7, #0]
 8015ca0:	781b      	ldrb	r3, [r3, #0]
 8015ca2:	2b4e      	cmp	r3, #78	; 0x4e
 8015ca4:	d864      	bhi.n	8015d70 <_scanf_float+0x11c>
 8015ca6:	2b40      	cmp	r3, #64	; 0x40
 8015ca8:	d83c      	bhi.n	8015d24 <_scanf_float+0xd0>
 8015caa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8015cae:	b2c8      	uxtb	r0, r1
 8015cb0:	280e      	cmp	r0, #14
 8015cb2:	d93a      	bls.n	8015d2a <_scanf_float+0xd6>
 8015cb4:	f1b9 0f00 	cmp.w	r9, #0
 8015cb8:	d003      	beq.n	8015cc2 <_scanf_float+0x6e>
 8015cba:	6823      	ldr	r3, [r4, #0]
 8015cbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015cc0:	6023      	str	r3, [r4, #0]
 8015cc2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8015cc6:	f1ba 0f01 	cmp.w	sl, #1
 8015cca:	f200 8113 	bhi.w	8015ef4 <_scanf_float+0x2a0>
 8015cce:	455e      	cmp	r6, fp
 8015cd0:	f200 8105 	bhi.w	8015ede <_scanf_float+0x28a>
 8015cd4:	2501      	movs	r5, #1
 8015cd6:	4628      	mov	r0, r5
 8015cd8:	b007      	add	sp, #28
 8015cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cde:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8015ce2:	2a0d      	cmp	r2, #13
 8015ce4:	d8e6      	bhi.n	8015cb4 <_scanf_float+0x60>
 8015ce6:	a101      	add	r1, pc, #4	; (adr r1, 8015cec <_scanf_float+0x98>)
 8015ce8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015cec:	08015e2b 	.word	0x08015e2b
 8015cf0:	08015cb5 	.word	0x08015cb5
 8015cf4:	08015cb5 	.word	0x08015cb5
 8015cf8:	08015cb5 	.word	0x08015cb5
 8015cfc:	08015e8b 	.word	0x08015e8b
 8015d00:	08015e63 	.word	0x08015e63
 8015d04:	08015cb5 	.word	0x08015cb5
 8015d08:	08015cb5 	.word	0x08015cb5
 8015d0c:	08015e39 	.word	0x08015e39
 8015d10:	08015cb5 	.word	0x08015cb5
 8015d14:	08015cb5 	.word	0x08015cb5
 8015d18:	08015cb5 	.word	0x08015cb5
 8015d1c:	08015cb5 	.word	0x08015cb5
 8015d20:	08015df1 	.word	0x08015df1
 8015d24:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8015d28:	e7db      	b.n	8015ce2 <_scanf_float+0x8e>
 8015d2a:	290e      	cmp	r1, #14
 8015d2c:	d8c2      	bhi.n	8015cb4 <_scanf_float+0x60>
 8015d2e:	a001      	add	r0, pc, #4	; (adr r0, 8015d34 <_scanf_float+0xe0>)
 8015d30:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8015d34:	08015de3 	.word	0x08015de3
 8015d38:	08015cb5 	.word	0x08015cb5
 8015d3c:	08015de3 	.word	0x08015de3
 8015d40:	08015e77 	.word	0x08015e77
 8015d44:	08015cb5 	.word	0x08015cb5
 8015d48:	08015d91 	.word	0x08015d91
 8015d4c:	08015dcd 	.word	0x08015dcd
 8015d50:	08015dcd 	.word	0x08015dcd
 8015d54:	08015dcd 	.word	0x08015dcd
 8015d58:	08015dcd 	.word	0x08015dcd
 8015d5c:	08015dcd 	.word	0x08015dcd
 8015d60:	08015dcd 	.word	0x08015dcd
 8015d64:	08015dcd 	.word	0x08015dcd
 8015d68:	08015dcd 	.word	0x08015dcd
 8015d6c:	08015dcd 	.word	0x08015dcd
 8015d70:	2b6e      	cmp	r3, #110	; 0x6e
 8015d72:	d809      	bhi.n	8015d88 <_scanf_float+0x134>
 8015d74:	2b60      	cmp	r3, #96	; 0x60
 8015d76:	d8b2      	bhi.n	8015cde <_scanf_float+0x8a>
 8015d78:	2b54      	cmp	r3, #84	; 0x54
 8015d7a:	d077      	beq.n	8015e6c <_scanf_float+0x218>
 8015d7c:	2b59      	cmp	r3, #89	; 0x59
 8015d7e:	d199      	bne.n	8015cb4 <_scanf_float+0x60>
 8015d80:	2d07      	cmp	r5, #7
 8015d82:	d197      	bne.n	8015cb4 <_scanf_float+0x60>
 8015d84:	2508      	movs	r5, #8
 8015d86:	e029      	b.n	8015ddc <_scanf_float+0x188>
 8015d88:	2b74      	cmp	r3, #116	; 0x74
 8015d8a:	d06f      	beq.n	8015e6c <_scanf_float+0x218>
 8015d8c:	2b79      	cmp	r3, #121	; 0x79
 8015d8e:	e7f6      	b.n	8015d7e <_scanf_float+0x12a>
 8015d90:	6821      	ldr	r1, [r4, #0]
 8015d92:	05c8      	lsls	r0, r1, #23
 8015d94:	d51a      	bpl.n	8015dcc <_scanf_float+0x178>
 8015d96:	9b02      	ldr	r3, [sp, #8]
 8015d98:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015d9c:	6021      	str	r1, [r4, #0]
 8015d9e:	f109 0901 	add.w	r9, r9, #1
 8015da2:	b11b      	cbz	r3, 8015dac <_scanf_float+0x158>
 8015da4:	3b01      	subs	r3, #1
 8015da6:	3201      	adds	r2, #1
 8015da8:	9302      	str	r3, [sp, #8]
 8015daa:	60a2      	str	r2, [r4, #8]
 8015dac:	68a3      	ldr	r3, [r4, #8]
 8015dae:	3b01      	subs	r3, #1
 8015db0:	60a3      	str	r3, [r4, #8]
 8015db2:	6923      	ldr	r3, [r4, #16]
 8015db4:	3301      	adds	r3, #1
 8015db6:	6123      	str	r3, [r4, #16]
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	3b01      	subs	r3, #1
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	607b      	str	r3, [r7, #4]
 8015dc0:	f340 8084 	ble.w	8015ecc <_scanf_float+0x278>
 8015dc4:	683b      	ldr	r3, [r7, #0]
 8015dc6:	3301      	adds	r3, #1
 8015dc8:	603b      	str	r3, [r7, #0]
 8015dca:	e766      	b.n	8015c9a <_scanf_float+0x46>
 8015dcc:	eb1a 0f05 	cmn.w	sl, r5
 8015dd0:	f47f af70 	bne.w	8015cb4 <_scanf_float+0x60>
 8015dd4:	6822      	ldr	r2, [r4, #0]
 8015dd6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8015dda:	6022      	str	r2, [r4, #0]
 8015ddc:	f806 3b01 	strb.w	r3, [r6], #1
 8015de0:	e7e4      	b.n	8015dac <_scanf_float+0x158>
 8015de2:	6822      	ldr	r2, [r4, #0]
 8015de4:	0610      	lsls	r0, r2, #24
 8015de6:	f57f af65 	bpl.w	8015cb4 <_scanf_float+0x60>
 8015dea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015dee:	e7f4      	b.n	8015dda <_scanf_float+0x186>
 8015df0:	f1ba 0f00 	cmp.w	sl, #0
 8015df4:	d10e      	bne.n	8015e14 <_scanf_float+0x1c0>
 8015df6:	f1b9 0f00 	cmp.w	r9, #0
 8015dfa:	d10e      	bne.n	8015e1a <_scanf_float+0x1c6>
 8015dfc:	6822      	ldr	r2, [r4, #0]
 8015dfe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8015e02:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8015e06:	d108      	bne.n	8015e1a <_scanf_float+0x1c6>
 8015e08:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015e0c:	6022      	str	r2, [r4, #0]
 8015e0e:	f04f 0a01 	mov.w	sl, #1
 8015e12:	e7e3      	b.n	8015ddc <_scanf_float+0x188>
 8015e14:	f1ba 0f02 	cmp.w	sl, #2
 8015e18:	d055      	beq.n	8015ec6 <_scanf_float+0x272>
 8015e1a:	2d01      	cmp	r5, #1
 8015e1c:	d002      	beq.n	8015e24 <_scanf_float+0x1d0>
 8015e1e:	2d04      	cmp	r5, #4
 8015e20:	f47f af48 	bne.w	8015cb4 <_scanf_float+0x60>
 8015e24:	3501      	adds	r5, #1
 8015e26:	b2ed      	uxtb	r5, r5
 8015e28:	e7d8      	b.n	8015ddc <_scanf_float+0x188>
 8015e2a:	f1ba 0f01 	cmp.w	sl, #1
 8015e2e:	f47f af41 	bne.w	8015cb4 <_scanf_float+0x60>
 8015e32:	f04f 0a02 	mov.w	sl, #2
 8015e36:	e7d1      	b.n	8015ddc <_scanf_float+0x188>
 8015e38:	b97d      	cbnz	r5, 8015e5a <_scanf_float+0x206>
 8015e3a:	f1b9 0f00 	cmp.w	r9, #0
 8015e3e:	f47f af3c 	bne.w	8015cba <_scanf_float+0x66>
 8015e42:	6822      	ldr	r2, [r4, #0]
 8015e44:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8015e48:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8015e4c:	f47f af39 	bne.w	8015cc2 <_scanf_float+0x6e>
 8015e50:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015e54:	6022      	str	r2, [r4, #0]
 8015e56:	2501      	movs	r5, #1
 8015e58:	e7c0      	b.n	8015ddc <_scanf_float+0x188>
 8015e5a:	2d03      	cmp	r5, #3
 8015e5c:	d0e2      	beq.n	8015e24 <_scanf_float+0x1d0>
 8015e5e:	2d05      	cmp	r5, #5
 8015e60:	e7de      	b.n	8015e20 <_scanf_float+0x1cc>
 8015e62:	2d02      	cmp	r5, #2
 8015e64:	f47f af26 	bne.w	8015cb4 <_scanf_float+0x60>
 8015e68:	2503      	movs	r5, #3
 8015e6a:	e7b7      	b.n	8015ddc <_scanf_float+0x188>
 8015e6c:	2d06      	cmp	r5, #6
 8015e6e:	f47f af21 	bne.w	8015cb4 <_scanf_float+0x60>
 8015e72:	2507      	movs	r5, #7
 8015e74:	e7b2      	b.n	8015ddc <_scanf_float+0x188>
 8015e76:	6822      	ldr	r2, [r4, #0]
 8015e78:	0591      	lsls	r1, r2, #22
 8015e7a:	f57f af1b 	bpl.w	8015cb4 <_scanf_float+0x60>
 8015e7e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8015e82:	6022      	str	r2, [r4, #0]
 8015e84:	f8cd 9004 	str.w	r9, [sp, #4]
 8015e88:	e7a8      	b.n	8015ddc <_scanf_float+0x188>
 8015e8a:	6822      	ldr	r2, [r4, #0]
 8015e8c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8015e90:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8015e94:	d006      	beq.n	8015ea4 <_scanf_float+0x250>
 8015e96:	0550      	lsls	r0, r2, #21
 8015e98:	f57f af0c 	bpl.w	8015cb4 <_scanf_float+0x60>
 8015e9c:	f1b9 0f00 	cmp.w	r9, #0
 8015ea0:	f43f af0f 	beq.w	8015cc2 <_scanf_float+0x6e>
 8015ea4:	0591      	lsls	r1, r2, #22
 8015ea6:	bf58      	it	pl
 8015ea8:	9901      	ldrpl	r1, [sp, #4]
 8015eaa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015eae:	bf58      	it	pl
 8015eb0:	eba9 0101 	subpl.w	r1, r9, r1
 8015eb4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8015eb8:	bf58      	it	pl
 8015eba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8015ebe:	6022      	str	r2, [r4, #0]
 8015ec0:	f04f 0900 	mov.w	r9, #0
 8015ec4:	e78a      	b.n	8015ddc <_scanf_float+0x188>
 8015ec6:	f04f 0a03 	mov.w	sl, #3
 8015eca:	e787      	b.n	8015ddc <_scanf_float+0x188>
 8015ecc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015ed0:	4639      	mov	r1, r7
 8015ed2:	4640      	mov	r0, r8
 8015ed4:	4798      	blx	r3
 8015ed6:	2800      	cmp	r0, #0
 8015ed8:	f43f aedf 	beq.w	8015c9a <_scanf_float+0x46>
 8015edc:	e6ea      	b.n	8015cb4 <_scanf_float+0x60>
 8015ede:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015ee2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015ee6:	463a      	mov	r2, r7
 8015ee8:	4640      	mov	r0, r8
 8015eea:	4798      	blx	r3
 8015eec:	6923      	ldr	r3, [r4, #16]
 8015eee:	3b01      	subs	r3, #1
 8015ef0:	6123      	str	r3, [r4, #16]
 8015ef2:	e6ec      	b.n	8015cce <_scanf_float+0x7a>
 8015ef4:	1e6b      	subs	r3, r5, #1
 8015ef6:	2b06      	cmp	r3, #6
 8015ef8:	d825      	bhi.n	8015f46 <_scanf_float+0x2f2>
 8015efa:	2d02      	cmp	r5, #2
 8015efc:	d836      	bhi.n	8015f6c <_scanf_float+0x318>
 8015efe:	455e      	cmp	r6, fp
 8015f00:	f67f aee8 	bls.w	8015cd4 <_scanf_float+0x80>
 8015f04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015f08:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015f0c:	463a      	mov	r2, r7
 8015f0e:	4640      	mov	r0, r8
 8015f10:	4798      	blx	r3
 8015f12:	6923      	ldr	r3, [r4, #16]
 8015f14:	3b01      	subs	r3, #1
 8015f16:	6123      	str	r3, [r4, #16]
 8015f18:	e7f1      	b.n	8015efe <_scanf_float+0x2aa>
 8015f1a:	9802      	ldr	r0, [sp, #8]
 8015f1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015f20:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8015f24:	9002      	str	r0, [sp, #8]
 8015f26:	463a      	mov	r2, r7
 8015f28:	4640      	mov	r0, r8
 8015f2a:	4798      	blx	r3
 8015f2c:	6923      	ldr	r3, [r4, #16]
 8015f2e:	3b01      	subs	r3, #1
 8015f30:	6123      	str	r3, [r4, #16]
 8015f32:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8015f36:	fa5f fa8a 	uxtb.w	sl, sl
 8015f3a:	f1ba 0f02 	cmp.w	sl, #2
 8015f3e:	d1ec      	bne.n	8015f1a <_scanf_float+0x2c6>
 8015f40:	3d03      	subs	r5, #3
 8015f42:	b2ed      	uxtb	r5, r5
 8015f44:	1b76      	subs	r6, r6, r5
 8015f46:	6823      	ldr	r3, [r4, #0]
 8015f48:	05da      	lsls	r2, r3, #23
 8015f4a:	d52f      	bpl.n	8015fac <_scanf_float+0x358>
 8015f4c:	055b      	lsls	r3, r3, #21
 8015f4e:	d510      	bpl.n	8015f72 <_scanf_float+0x31e>
 8015f50:	455e      	cmp	r6, fp
 8015f52:	f67f aebf 	bls.w	8015cd4 <_scanf_float+0x80>
 8015f56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015f5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015f5e:	463a      	mov	r2, r7
 8015f60:	4640      	mov	r0, r8
 8015f62:	4798      	blx	r3
 8015f64:	6923      	ldr	r3, [r4, #16]
 8015f66:	3b01      	subs	r3, #1
 8015f68:	6123      	str	r3, [r4, #16]
 8015f6a:	e7f1      	b.n	8015f50 <_scanf_float+0x2fc>
 8015f6c:	46aa      	mov	sl, r5
 8015f6e:	9602      	str	r6, [sp, #8]
 8015f70:	e7df      	b.n	8015f32 <_scanf_float+0x2de>
 8015f72:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8015f76:	6923      	ldr	r3, [r4, #16]
 8015f78:	2965      	cmp	r1, #101	; 0x65
 8015f7a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8015f7e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8015f82:	6123      	str	r3, [r4, #16]
 8015f84:	d00c      	beq.n	8015fa0 <_scanf_float+0x34c>
 8015f86:	2945      	cmp	r1, #69	; 0x45
 8015f88:	d00a      	beq.n	8015fa0 <_scanf_float+0x34c>
 8015f8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015f8e:	463a      	mov	r2, r7
 8015f90:	4640      	mov	r0, r8
 8015f92:	4798      	blx	r3
 8015f94:	6923      	ldr	r3, [r4, #16]
 8015f96:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8015f9a:	3b01      	subs	r3, #1
 8015f9c:	1eb5      	subs	r5, r6, #2
 8015f9e:	6123      	str	r3, [r4, #16]
 8015fa0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015fa4:	463a      	mov	r2, r7
 8015fa6:	4640      	mov	r0, r8
 8015fa8:	4798      	blx	r3
 8015faa:	462e      	mov	r6, r5
 8015fac:	6825      	ldr	r5, [r4, #0]
 8015fae:	f015 0510 	ands.w	r5, r5, #16
 8015fb2:	d158      	bne.n	8016066 <_scanf_float+0x412>
 8015fb4:	7035      	strb	r5, [r6, #0]
 8015fb6:	6823      	ldr	r3, [r4, #0]
 8015fb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015fc0:	d11c      	bne.n	8015ffc <_scanf_float+0x3a8>
 8015fc2:	9b01      	ldr	r3, [sp, #4]
 8015fc4:	454b      	cmp	r3, r9
 8015fc6:	eba3 0209 	sub.w	r2, r3, r9
 8015fca:	d124      	bne.n	8016016 <_scanf_float+0x3c2>
 8015fcc:	2200      	movs	r2, #0
 8015fce:	4659      	mov	r1, fp
 8015fd0:	4640      	mov	r0, r8
 8015fd2:	f000 ff87 	bl	8016ee4 <_strtod_r>
 8015fd6:	9b03      	ldr	r3, [sp, #12]
 8015fd8:	6821      	ldr	r1, [r4, #0]
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	f011 0f02 	tst.w	r1, #2
 8015fe0:	ec57 6b10 	vmov	r6, r7, d0
 8015fe4:	f103 0204 	add.w	r2, r3, #4
 8015fe8:	d020      	beq.n	801602c <_scanf_float+0x3d8>
 8015fea:	9903      	ldr	r1, [sp, #12]
 8015fec:	600a      	str	r2, [r1, #0]
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	e9c3 6700 	strd	r6, r7, [r3]
 8015ff4:	68e3      	ldr	r3, [r4, #12]
 8015ff6:	3301      	adds	r3, #1
 8015ff8:	60e3      	str	r3, [r4, #12]
 8015ffa:	e66c      	b.n	8015cd6 <_scanf_float+0x82>
 8015ffc:	9b04      	ldr	r3, [sp, #16]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d0e4      	beq.n	8015fcc <_scanf_float+0x378>
 8016002:	9905      	ldr	r1, [sp, #20]
 8016004:	230a      	movs	r3, #10
 8016006:	462a      	mov	r2, r5
 8016008:	3101      	adds	r1, #1
 801600a:	4640      	mov	r0, r8
 801600c:	f000 fff4 	bl	8016ff8 <_strtol_r>
 8016010:	9b04      	ldr	r3, [sp, #16]
 8016012:	9e05      	ldr	r6, [sp, #20]
 8016014:	1ac2      	subs	r2, r0, r3
 8016016:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801601a:	429e      	cmp	r6, r3
 801601c:	bf28      	it	cs
 801601e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8016022:	4912      	ldr	r1, [pc, #72]	; (801606c <_scanf_float+0x418>)
 8016024:	4630      	mov	r0, r6
 8016026:	f000 f8d3 	bl	80161d0 <siprintf>
 801602a:	e7cf      	b.n	8015fcc <_scanf_float+0x378>
 801602c:	f011 0f04 	tst.w	r1, #4
 8016030:	9903      	ldr	r1, [sp, #12]
 8016032:	600a      	str	r2, [r1, #0]
 8016034:	d1db      	bne.n	8015fee <_scanf_float+0x39a>
 8016036:	f8d3 8000 	ldr.w	r8, [r3]
 801603a:	ee10 2a10 	vmov	r2, s0
 801603e:	ee10 0a10 	vmov	r0, s0
 8016042:	463b      	mov	r3, r7
 8016044:	4639      	mov	r1, r7
 8016046:	f7ea fd71 	bl	8000b2c <__aeabi_dcmpun>
 801604a:	b128      	cbz	r0, 8016058 <_scanf_float+0x404>
 801604c:	4808      	ldr	r0, [pc, #32]	; (8016070 <_scanf_float+0x41c>)
 801604e:	f000 f847 	bl	80160e0 <nanf>
 8016052:	ed88 0a00 	vstr	s0, [r8]
 8016056:	e7cd      	b.n	8015ff4 <_scanf_float+0x3a0>
 8016058:	4630      	mov	r0, r6
 801605a:	4639      	mov	r1, r7
 801605c:	f7ea fdc4 	bl	8000be8 <__aeabi_d2f>
 8016060:	f8c8 0000 	str.w	r0, [r8]
 8016064:	e7c6      	b.n	8015ff4 <_scanf_float+0x3a0>
 8016066:	2500      	movs	r5, #0
 8016068:	e635      	b.n	8015cd6 <_scanf_float+0x82>
 801606a:	bf00      	nop
 801606c:	0801b330 	.word	0x0801b330
 8016070:	0801b748 	.word	0x0801b748

08016074 <_sbrk_r>:
 8016074:	b538      	push	{r3, r4, r5, lr}
 8016076:	4d06      	ldr	r5, [pc, #24]	; (8016090 <_sbrk_r+0x1c>)
 8016078:	2300      	movs	r3, #0
 801607a:	4604      	mov	r4, r0
 801607c:	4608      	mov	r0, r1
 801607e:	602b      	str	r3, [r5, #0]
 8016080:	f7f1 f8a2 	bl	80071c8 <_sbrk>
 8016084:	1c43      	adds	r3, r0, #1
 8016086:	d102      	bne.n	801608e <_sbrk_r+0x1a>
 8016088:	682b      	ldr	r3, [r5, #0]
 801608a:	b103      	cbz	r3, 801608e <_sbrk_r+0x1a>
 801608c:	6023      	str	r3, [r4, #0]
 801608e:	bd38      	pop	{r3, r4, r5, pc}
 8016090:	20008f10 	.word	0x20008f10

08016094 <ldexpf>:
 8016094:	b510      	push	{r4, lr}
 8016096:	ed2d 8b02 	vpush	{d8}
 801609a:	4604      	mov	r4, r0
 801609c:	eeb0 8a40 	vmov.f32	s16, s0
 80160a0:	f003 f82a 	bl	80190f8 <finitef>
 80160a4:	b1b8      	cbz	r0, 80160d6 <ldexpf+0x42>
 80160a6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80160aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160ae:	d012      	beq.n	80160d6 <ldexpf+0x42>
 80160b0:	eeb0 0a48 	vmov.f32	s0, s16
 80160b4:	4620      	mov	r0, r4
 80160b6:	f000 f819 	bl	80160ec <scalbnf>
 80160ba:	eeb0 8a40 	vmov.f32	s16, s0
 80160be:	f003 f81b 	bl	80190f8 <finitef>
 80160c2:	b120      	cbz	r0, 80160ce <ldexpf+0x3a>
 80160c4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80160c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160cc:	d103      	bne.n	80160d6 <ldexpf+0x42>
 80160ce:	f7ff f865 	bl	801519c <__errno>
 80160d2:	2322      	movs	r3, #34	; 0x22
 80160d4:	6003      	str	r3, [r0, #0]
 80160d6:	eeb0 0a48 	vmov.f32	s0, s16
 80160da:	ecbd 8b02 	vpop	{d8}
 80160de:	bd10      	pop	{r4, pc}

080160e0 <nanf>:
 80160e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80160e8 <nanf+0x8>
 80160e4:	4770      	bx	lr
 80160e6:	bf00      	nop
 80160e8:	7fc00000 	.word	0x7fc00000

080160ec <scalbnf>:
 80160ec:	ee10 3a10 	vmov	r3, s0
 80160f0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80160f4:	d025      	beq.n	8016142 <scalbnf+0x56>
 80160f6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80160fa:	d302      	bcc.n	8016102 <scalbnf+0x16>
 80160fc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016100:	4770      	bx	lr
 8016102:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8016106:	d122      	bne.n	801614e <scalbnf+0x62>
 8016108:	4b2a      	ldr	r3, [pc, #168]	; (80161b4 <scalbnf+0xc8>)
 801610a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80161b8 <scalbnf+0xcc>
 801610e:	4298      	cmp	r0, r3
 8016110:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016114:	db16      	blt.n	8016144 <scalbnf+0x58>
 8016116:	ee10 3a10 	vmov	r3, s0
 801611a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801611e:	3a19      	subs	r2, #25
 8016120:	4402      	add	r2, r0
 8016122:	2afe      	cmp	r2, #254	; 0xfe
 8016124:	dd15      	ble.n	8016152 <scalbnf+0x66>
 8016126:	ee10 3a10 	vmov	r3, s0
 801612a:	eddf 7a24 	vldr	s15, [pc, #144]	; 80161bc <scalbnf+0xd0>
 801612e:	eddf 6a24 	vldr	s13, [pc, #144]	; 80161c0 <scalbnf+0xd4>
 8016132:	2b00      	cmp	r3, #0
 8016134:	eeb0 7a67 	vmov.f32	s14, s15
 8016138:	bfb8      	it	lt
 801613a:	eef0 7a66 	vmovlt.f32	s15, s13
 801613e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8016142:	4770      	bx	lr
 8016144:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80161c4 <scalbnf+0xd8>
 8016148:	ee20 0a27 	vmul.f32	s0, s0, s15
 801614c:	4770      	bx	lr
 801614e:	0dd2      	lsrs	r2, r2, #23
 8016150:	e7e6      	b.n	8016120 <scalbnf+0x34>
 8016152:	2a00      	cmp	r2, #0
 8016154:	dd06      	ble.n	8016164 <scalbnf+0x78>
 8016156:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801615a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801615e:	ee00 3a10 	vmov	s0, r3
 8016162:	4770      	bx	lr
 8016164:	f112 0f16 	cmn.w	r2, #22
 8016168:	da1a      	bge.n	80161a0 <scalbnf+0xb4>
 801616a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801616e:	4298      	cmp	r0, r3
 8016170:	ee10 3a10 	vmov	r3, s0
 8016174:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016178:	dd0a      	ble.n	8016190 <scalbnf+0xa4>
 801617a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80161bc <scalbnf+0xd0>
 801617e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80161c0 <scalbnf+0xd4>
 8016182:	eef0 7a40 	vmov.f32	s15, s0
 8016186:	2b00      	cmp	r3, #0
 8016188:	bf18      	it	ne
 801618a:	eeb0 0a47 	vmovne.f32	s0, s14
 801618e:	e7db      	b.n	8016148 <scalbnf+0x5c>
 8016190:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80161c4 <scalbnf+0xd8>
 8016194:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80161c8 <scalbnf+0xdc>
 8016198:	eef0 7a40 	vmov.f32	s15, s0
 801619c:	2b00      	cmp	r3, #0
 801619e:	e7f3      	b.n	8016188 <scalbnf+0x9c>
 80161a0:	3219      	adds	r2, #25
 80161a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80161a6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80161aa:	eddf 7a08 	vldr	s15, [pc, #32]	; 80161cc <scalbnf+0xe0>
 80161ae:	ee07 3a10 	vmov	s14, r3
 80161b2:	e7c4      	b.n	801613e <scalbnf+0x52>
 80161b4:	ffff3cb0 	.word	0xffff3cb0
 80161b8:	4c000000 	.word	0x4c000000
 80161bc:	7149f2ca 	.word	0x7149f2ca
 80161c0:	f149f2ca 	.word	0xf149f2ca
 80161c4:	0da24260 	.word	0x0da24260
 80161c8:	8da24260 	.word	0x8da24260
 80161cc:	33000000 	.word	0x33000000

080161d0 <siprintf>:
 80161d0:	b40e      	push	{r1, r2, r3}
 80161d2:	b500      	push	{lr}
 80161d4:	b09c      	sub	sp, #112	; 0x70
 80161d6:	ab1d      	add	r3, sp, #116	; 0x74
 80161d8:	9002      	str	r0, [sp, #8]
 80161da:	9006      	str	r0, [sp, #24]
 80161dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80161e0:	4809      	ldr	r0, [pc, #36]	; (8016208 <siprintf+0x38>)
 80161e2:	9107      	str	r1, [sp, #28]
 80161e4:	9104      	str	r1, [sp, #16]
 80161e6:	4909      	ldr	r1, [pc, #36]	; (801620c <siprintf+0x3c>)
 80161e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80161ec:	9105      	str	r1, [sp, #20]
 80161ee:	6800      	ldr	r0, [r0, #0]
 80161f0:	9301      	str	r3, [sp, #4]
 80161f2:	a902      	add	r1, sp, #8
 80161f4:	f002 fe66 	bl	8018ec4 <_svfiprintf_r>
 80161f8:	9b02      	ldr	r3, [sp, #8]
 80161fa:	2200      	movs	r2, #0
 80161fc:	701a      	strb	r2, [r3, #0]
 80161fe:	b01c      	add	sp, #112	; 0x70
 8016200:	f85d eb04 	ldr.w	lr, [sp], #4
 8016204:	b003      	add	sp, #12
 8016206:	4770      	bx	lr
 8016208:	20000244 	.word	0x20000244
 801620c:	ffff0208 	.word	0xffff0208

08016210 <__sread>:
 8016210:	b510      	push	{r4, lr}
 8016212:	460c      	mov	r4, r1
 8016214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016218:	f002 ff54 	bl	80190c4 <_read_r>
 801621c:	2800      	cmp	r0, #0
 801621e:	bfab      	itete	ge
 8016220:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016222:	89a3      	ldrhlt	r3, [r4, #12]
 8016224:	181b      	addge	r3, r3, r0
 8016226:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801622a:	bfac      	ite	ge
 801622c:	6563      	strge	r3, [r4, #84]	; 0x54
 801622e:	81a3      	strhlt	r3, [r4, #12]
 8016230:	bd10      	pop	{r4, pc}

08016232 <__swrite>:
 8016232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016236:	461f      	mov	r7, r3
 8016238:	898b      	ldrh	r3, [r1, #12]
 801623a:	05db      	lsls	r3, r3, #23
 801623c:	4605      	mov	r5, r0
 801623e:	460c      	mov	r4, r1
 8016240:	4616      	mov	r6, r2
 8016242:	d505      	bpl.n	8016250 <__swrite+0x1e>
 8016244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016248:	2302      	movs	r3, #2
 801624a:	2200      	movs	r2, #0
 801624c:	f002 f8e4 	bl	8018418 <_lseek_r>
 8016250:	89a3      	ldrh	r3, [r4, #12]
 8016252:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016256:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801625a:	81a3      	strh	r3, [r4, #12]
 801625c:	4632      	mov	r2, r6
 801625e:	463b      	mov	r3, r7
 8016260:	4628      	mov	r0, r5
 8016262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016266:	f000 bec9 	b.w	8016ffc <_write_r>

0801626a <__sseek>:
 801626a:	b510      	push	{r4, lr}
 801626c:	460c      	mov	r4, r1
 801626e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016272:	f002 f8d1 	bl	8018418 <_lseek_r>
 8016276:	1c43      	adds	r3, r0, #1
 8016278:	89a3      	ldrh	r3, [r4, #12]
 801627a:	bf15      	itete	ne
 801627c:	6560      	strne	r0, [r4, #84]	; 0x54
 801627e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016282:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016286:	81a3      	strheq	r3, [r4, #12]
 8016288:	bf18      	it	ne
 801628a:	81a3      	strhne	r3, [r4, #12]
 801628c:	bd10      	pop	{r4, pc}

0801628e <__sclose>:
 801628e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016292:	f000 bec5 	b.w	8017020 <_close_r>

08016296 <sulp>:
 8016296:	b570      	push	{r4, r5, r6, lr}
 8016298:	4604      	mov	r4, r0
 801629a:	460d      	mov	r5, r1
 801629c:	ec45 4b10 	vmov	d0, r4, r5
 80162a0:	4616      	mov	r6, r2
 80162a2:	f002 fc55 	bl	8018b50 <__ulp>
 80162a6:	ec51 0b10 	vmov	r0, r1, d0
 80162aa:	b17e      	cbz	r6, 80162cc <sulp+0x36>
 80162ac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80162b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	dd09      	ble.n	80162cc <sulp+0x36>
 80162b8:	051b      	lsls	r3, r3, #20
 80162ba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80162be:	2400      	movs	r4, #0
 80162c0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80162c4:	4622      	mov	r2, r4
 80162c6:	462b      	mov	r3, r5
 80162c8:	f7ea f996 	bl	80005f8 <__aeabi_dmul>
 80162cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080162d0 <_strtod_l>:
 80162d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162d4:	b0a3      	sub	sp, #140	; 0x8c
 80162d6:	461f      	mov	r7, r3
 80162d8:	2300      	movs	r3, #0
 80162da:	931e      	str	r3, [sp, #120]	; 0x78
 80162dc:	4ba4      	ldr	r3, [pc, #656]	; (8016570 <_strtod_l+0x2a0>)
 80162de:	9219      	str	r2, [sp, #100]	; 0x64
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	9307      	str	r3, [sp, #28]
 80162e4:	4604      	mov	r4, r0
 80162e6:	4618      	mov	r0, r3
 80162e8:	4688      	mov	r8, r1
 80162ea:	f7e9 ff71 	bl	80001d0 <strlen>
 80162ee:	f04f 0a00 	mov.w	sl, #0
 80162f2:	4605      	mov	r5, r0
 80162f4:	f04f 0b00 	mov.w	fp, #0
 80162f8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80162fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80162fe:	781a      	ldrb	r2, [r3, #0]
 8016300:	2a2b      	cmp	r2, #43	; 0x2b
 8016302:	d04c      	beq.n	801639e <_strtod_l+0xce>
 8016304:	d839      	bhi.n	801637a <_strtod_l+0xaa>
 8016306:	2a0d      	cmp	r2, #13
 8016308:	d832      	bhi.n	8016370 <_strtod_l+0xa0>
 801630a:	2a08      	cmp	r2, #8
 801630c:	d832      	bhi.n	8016374 <_strtod_l+0xa4>
 801630e:	2a00      	cmp	r2, #0
 8016310:	d03c      	beq.n	801638c <_strtod_l+0xbc>
 8016312:	2300      	movs	r3, #0
 8016314:	930e      	str	r3, [sp, #56]	; 0x38
 8016316:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016318:	7833      	ldrb	r3, [r6, #0]
 801631a:	2b30      	cmp	r3, #48	; 0x30
 801631c:	f040 80b4 	bne.w	8016488 <_strtod_l+0x1b8>
 8016320:	7873      	ldrb	r3, [r6, #1]
 8016322:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016326:	2b58      	cmp	r3, #88	; 0x58
 8016328:	d16c      	bne.n	8016404 <_strtod_l+0x134>
 801632a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801632c:	9301      	str	r3, [sp, #4]
 801632e:	ab1e      	add	r3, sp, #120	; 0x78
 8016330:	9702      	str	r7, [sp, #8]
 8016332:	9300      	str	r3, [sp, #0]
 8016334:	4a8f      	ldr	r2, [pc, #572]	; (8016574 <_strtod_l+0x2a4>)
 8016336:	ab1f      	add	r3, sp, #124	; 0x7c
 8016338:	a91d      	add	r1, sp, #116	; 0x74
 801633a:	4620      	mov	r0, r4
 801633c:	f001 fd60 	bl	8017e00 <__gethex>
 8016340:	f010 0707 	ands.w	r7, r0, #7
 8016344:	4605      	mov	r5, r0
 8016346:	d005      	beq.n	8016354 <_strtod_l+0x84>
 8016348:	2f06      	cmp	r7, #6
 801634a:	d12a      	bne.n	80163a2 <_strtod_l+0xd2>
 801634c:	3601      	adds	r6, #1
 801634e:	2300      	movs	r3, #0
 8016350:	961d      	str	r6, [sp, #116]	; 0x74
 8016352:	930e      	str	r3, [sp, #56]	; 0x38
 8016354:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016356:	2b00      	cmp	r3, #0
 8016358:	f040 8596 	bne.w	8016e88 <_strtod_l+0xbb8>
 801635c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801635e:	b1db      	cbz	r3, 8016398 <_strtod_l+0xc8>
 8016360:	4652      	mov	r2, sl
 8016362:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016366:	ec43 2b10 	vmov	d0, r2, r3
 801636a:	b023      	add	sp, #140	; 0x8c
 801636c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016370:	2a20      	cmp	r2, #32
 8016372:	d1ce      	bne.n	8016312 <_strtod_l+0x42>
 8016374:	3301      	adds	r3, #1
 8016376:	931d      	str	r3, [sp, #116]	; 0x74
 8016378:	e7c0      	b.n	80162fc <_strtod_l+0x2c>
 801637a:	2a2d      	cmp	r2, #45	; 0x2d
 801637c:	d1c9      	bne.n	8016312 <_strtod_l+0x42>
 801637e:	2201      	movs	r2, #1
 8016380:	920e      	str	r2, [sp, #56]	; 0x38
 8016382:	1c5a      	adds	r2, r3, #1
 8016384:	921d      	str	r2, [sp, #116]	; 0x74
 8016386:	785b      	ldrb	r3, [r3, #1]
 8016388:	2b00      	cmp	r3, #0
 801638a:	d1c4      	bne.n	8016316 <_strtod_l+0x46>
 801638c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801638e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016392:	2b00      	cmp	r3, #0
 8016394:	f040 8576 	bne.w	8016e84 <_strtod_l+0xbb4>
 8016398:	4652      	mov	r2, sl
 801639a:	465b      	mov	r3, fp
 801639c:	e7e3      	b.n	8016366 <_strtod_l+0x96>
 801639e:	2200      	movs	r2, #0
 80163a0:	e7ee      	b.n	8016380 <_strtod_l+0xb0>
 80163a2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80163a4:	b13a      	cbz	r2, 80163b6 <_strtod_l+0xe6>
 80163a6:	2135      	movs	r1, #53	; 0x35
 80163a8:	a820      	add	r0, sp, #128	; 0x80
 80163aa:	f002 fcdc 	bl	8018d66 <__copybits>
 80163ae:	991e      	ldr	r1, [sp, #120]	; 0x78
 80163b0:	4620      	mov	r0, r4
 80163b2:	f002 f8a1 	bl	80184f8 <_Bfree>
 80163b6:	3f01      	subs	r7, #1
 80163b8:	2f05      	cmp	r7, #5
 80163ba:	d807      	bhi.n	80163cc <_strtod_l+0xfc>
 80163bc:	e8df f007 	tbb	[pc, r7]
 80163c0:	1d180b0e 	.word	0x1d180b0e
 80163c4:	030e      	.short	0x030e
 80163c6:	f04f 0b00 	mov.w	fp, #0
 80163ca:	46da      	mov	sl, fp
 80163cc:	0728      	lsls	r0, r5, #28
 80163ce:	d5c1      	bpl.n	8016354 <_strtod_l+0x84>
 80163d0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80163d4:	e7be      	b.n	8016354 <_strtod_l+0x84>
 80163d6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80163da:	e7f7      	b.n	80163cc <_strtod_l+0xfc>
 80163dc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80163e0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80163e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80163e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80163ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80163ee:	e7ed      	b.n	80163cc <_strtod_l+0xfc>
 80163f0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8016578 <_strtod_l+0x2a8>
 80163f4:	f04f 0a00 	mov.w	sl, #0
 80163f8:	e7e8      	b.n	80163cc <_strtod_l+0xfc>
 80163fa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80163fe:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8016402:	e7e3      	b.n	80163cc <_strtod_l+0xfc>
 8016404:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016406:	1c5a      	adds	r2, r3, #1
 8016408:	921d      	str	r2, [sp, #116]	; 0x74
 801640a:	785b      	ldrb	r3, [r3, #1]
 801640c:	2b30      	cmp	r3, #48	; 0x30
 801640e:	d0f9      	beq.n	8016404 <_strtod_l+0x134>
 8016410:	2b00      	cmp	r3, #0
 8016412:	d09f      	beq.n	8016354 <_strtod_l+0x84>
 8016414:	2301      	movs	r3, #1
 8016416:	f04f 0900 	mov.w	r9, #0
 801641a:	9304      	str	r3, [sp, #16]
 801641c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801641e:	930a      	str	r3, [sp, #40]	; 0x28
 8016420:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8016424:	464f      	mov	r7, r9
 8016426:	220a      	movs	r2, #10
 8016428:	981d      	ldr	r0, [sp, #116]	; 0x74
 801642a:	7806      	ldrb	r6, [r0, #0]
 801642c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8016430:	b2d9      	uxtb	r1, r3
 8016432:	2909      	cmp	r1, #9
 8016434:	d92a      	bls.n	801648c <_strtod_l+0x1bc>
 8016436:	9907      	ldr	r1, [sp, #28]
 8016438:	462a      	mov	r2, r5
 801643a:	f002 fe6a 	bl	8019112 <strncmp>
 801643e:	b398      	cbz	r0, 80164a8 <_strtod_l+0x1d8>
 8016440:	2000      	movs	r0, #0
 8016442:	4633      	mov	r3, r6
 8016444:	463d      	mov	r5, r7
 8016446:	9007      	str	r0, [sp, #28]
 8016448:	4602      	mov	r2, r0
 801644a:	2b65      	cmp	r3, #101	; 0x65
 801644c:	d001      	beq.n	8016452 <_strtod_l+0x182>
 801644e:	2b45      	cmp	r3, #69	; 0x45
 8016450:	d118      	bne.n	8016484 <_strtod_l+0x1b4>
 8016452:	b91d      	cbnz	r5, 801645c <_strtod_l+0x18c>
 8016454:	9b04      	ldr	r3, [sp, #16]
 8016456:	4303      	orrs	r3, r0
 8016458:	d098      	beq.n	801638c <_strtod_l+0xbc>
 801645a:	2500      	movs	r5, #0
 801645c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8016460:	f108 0301 	add.w	r3, r8, #1
 8016464:	931d      	str	r3, [sp, #116]	; 0x74
 8016466:	f898 3001 	ldrb.w	r3, [r8, #1]
 801646a:	2b2b      	cmp	r3, #43	; 0x2b
 801646c:	d075      	beq.n	801655a <_strtod_l+0x28a>
 801646e:	2b2d      	cmp	r3, #45	; 0x2d
 8016470:	d07b      	beq.n	801656a <_strtod_l+0x29a>
 8016472:	f04f 0c00 	mov.w	ip, #0
 8016476:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801647a:	2909      	cmp	r1, #9
 801647c:	f240 8082 	bls.w	8016584 <_strtod_l+0x2b4>
 8016480:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016484:	2600      	movs	r6, #0
 8016486:	e09d      	b.n	80165c4 <_strtod_l+0x2f4>
 8016488:	2300      	movs	r3, #0
 801648a:	e7c4      	b.n	8016416 <_strtod_l+0x146>
 801648c:	2f08      	cmp	r7, #8
 801648e:	bfd8      	it	le
 8016490:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8016492:	f100 0001 	add.w	r0, r0, #1
 8016496:	bfda      	itte	le
 8016498:	fb02 3301 	mlale	r3, r2, r1, r3
 801649c:	9309      	strle	r3, [sp, #36]	; 0x24
 801649e:	fb02 3909 	mlagt	r9, r2, r9, r3
 80164a2:	3701      	adds	r7, #1
 80164a4:	901d      	str	r0, [sp, #116]	; 0x74
 80164a6:	e7bf      	b.n	8016428 <_strtod_l+0x158>
 80164a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80164aa:	195a      	adds	r2, r3, r5
 80164ac:	921d      	str	r2, [sp, #116]	; 0x74
 80164ae:	5d5b      	ldrb	r3, [r3, r5]
 80164b0:	2f00      	cmp	r7, #0
 80164b2:	d037      	beq.n	8016524 <_strtod_l+0x254>
 80164b4:	9007      	str	r0, [sp, #28]
 80164b6:	463d      	mov	r5, r7
 80164b8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80164bc:	2a09      	cmp	r2, #9
 80164be:	d912      	bls.n	80164e6 <_strtod_l+0x216>
 80164c0:	2201      	movs	r2, #1
 80164c2:	e7c2      	b.n	801644a <_strtod_l+0x17a>
 80164c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80164c6:	1c5a      	adds	r2, r3, #1
 80164c8:	921d      	str	r2, [sp, #116]	; 0x74
 80164ca:	785b      	ldrb	r3, [r3, #1]
 80164cc:	3001      	adds	r0, #1
 80164ce:	2b30      	cmp	r3, #48	; 0x30
 80164d0:	d0f8      	beq.n	80164c4 <_strtod_l+0x1f4>
 80164d2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80164d6:	2a08      	cmp	r2, #8
 80164d8:	f200 84db 	bhi.w	8016e92 <_strtod_l+0xbc2>
 80164dc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80164de:	9007      	str	r0, [sp, #28]
 80164e0:	2000      	movs	r0, #0
 80164e2:	920a      	str	r2, [sp, #40]	; 0x28
 80164e4:	4605      	mov	r5, r0
 80164e6:	3b30      	subs	r3, #48	; 0x30
 80164e8:	f100 0201 	add.w	r2, r0, #1
 80164ec:	d014      	beq.n	8016518 <_strtod_l+0x248>
 80164ee:	9907      	ldr	r1, [sp, #28]
 80164f0:	4411      	add	r1, r2
 80164f2:	9107      	str	r1, [sp, #28]
 80164f4:	462a      	mov	r2, r5
 80164f6:	eb00 0e05 	add.w	lr, r0, r5
 80164fa:	210a      	movs	r1, #10
 80164fc:	4572      	cmp	r2, lr
 80164fe:	d113      	bne.n	8016528 <_strtod_l+0x258>
 8016500:	182a      	adds	r2, r5, r0
 8016502:	2a08      	cmp	r2, #8
 8016504:	f105 0501 	add.w	r5, r5, #1
 8016508:	4405      	add	r5, r0
 801650a:	dc1c      	bgt.n	8016546 <_strtod_l+0x276>
 801650c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801650e:	220a      	movs	r2, #10
 8016510:	fb02 3301 	mla	r3, r2, r1, r3
 8016514:	9309      	str	r3, [sp, #36]	; 0x24
 8016516:	2200      	movs	r2, #0
 8016518:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801651a:	1c59      	adds	r1, r3, #1
 801651c:	911d      	str	r1, [sp, #116]	; 0x74
 801651e:	785b      	ldrb	r3, [r3, #1]
 8016520:	4610      	mov	r0, r2
 8016522:	e7c9      	b.n	80164b8 <_strtod_l+0x1e8>
 8016524:	4638      	mov	r0, r7
 8016526:	e7d2      	b.n	80164ce <_strtod_l+0x1fe>
 8016528:	2a08      	cmp	r2, #8
 801652a:	dc04      	bgt.n	8016536 <_strtod_l+0x266>
 801652c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801652e:	434e      	muls	r6, r1
 8016530:	9609      	str	r6, [sp, #36]	; 0x24
 8016532:	3201      	adds	r2, #1
 8016534:	e7e2      	b.n	80164fc <_strtod_l+0x22c>
 8016536:	f102 0c01 	add.w	ip, r2, #1
 801653a:	f1bc 0f10 	cmp.w	ip, #16
 801653e:	bfd8      	it	le
 8016540:	fb01 f909 	mulle.w	r9, r1, r9
 8016544:	e7f5      	b.n	8016532 <_strtod_l+0x262>
 8016546:	2d10      	cmp	r5, #16
 8016548:	bfdc      	itt	le
 801654a:	220a      	movle	r2, #10
 801654c:	fb02 3909 	mlale	r9, r2, r9, r3
 8016550:	e7e1      	b.n	8016516 <_strtod_l+0x246>
 8016552:	2300      	movs	r3, #0
 8016554:	9307      	str	r3, [sp, #28]
 8016556:	2201      	movs	r2, #1
 8016558:	e77c      	b.n	8016454 <_strtod_l+0x184>
 801655a:	f04f 0c00 	mov.w	ip, #0
 801655e:	f108 0302 	add.w	r3, r8, #2
 8016562:	931d      	str	r3, [sp, #116]	; 0x74
 8016564:	f898 3002 	ldrb.w	r3, [r8, #2]
 8016568:	e785      	b.n	8016476 <_strtod_l+0x1a6>
 801656a:	f04f 0c01 	mov.w	ip, #1
 801656e:	e7f6      	b.n	801655e <_strtod_l+0x28e>
 8016570:	0801b588 	.word	0x0801b588
 8016574:	0801b338 	.word	0x0801b338
 8016578:	7ff00000 	.word	0x7ff00000
 801657c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801657e:	1c59      	adds	r1, r3, #1
 8016580:	911d      	str	r1, [sp, #116]	; 0x74
 8016582:	785b      	ldrb	r3, [r3, #1]
 8016584:	2b30      	cmp	r3, #48	; 0x30
 8016586:	d0f9      	beq.n	801657c <_strtod_l+0x2ac>
 8016588:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801658c:	2908      	cmp	r1, #8
 801658e:	f63f af79 	bhi.w	8016484 <_strtod_l+0x1b4>
 8016592:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016596:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016598:	9308      	str	r3, [sp, #32]
 801659a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801659c:	1c59      	adds	r1, r3, #1
 801659e:	911d      	str	r1, [sp, #116]	; 0x74
 80165a0:	785b      	ldrb	r3, [r3, #1]
 80165a2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80165a6:	2e09      	cmp	r6, #9
 80165a8:	d937      	bls.n	801661a <_strtod_l+0x34a>
 80165aa:	9e08      	ldr	r6, [sp, #32]
 80165ac:	1b89      	subs	r1, r1, r6
 80165ae:	2908      	cmp	r1, #8
 80165b0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80165b4:	dc02      	bgt.n	80165bc <_strtod_l+0x2ec>
 80165b6:	4576      	cmp	r6, lr
 80165b8:	bfa8      	it	ge
 80165ba:	4676      	movge	r6, lr
 80165bc:	f1bc 0f00 	cmp.w	ip, #0
 80165c0:	d000      	beq.n	80165c4 <_strtod_l+0x2f4>
 80165c2:	4276      	negs	r6, r6
 80165c4:	2d00      	cmp	r5, #0
 80165c6:	d14f      	bne.n	8016668 <_strtod_l+0x398>
 80165c8:	9904      	ldr	r1, [sp, #16]
 80165ca:	4301      	orrs	r1, r0
 80165cc:	f47f aec2 	bne.w	8016354 <_strtod_l+0x84>
 80165d0:	2a00      	cmp	r2, #0
 80165d2:	f47f aedb 	bne.w	801638c <_strtod_l+0xbc>
 80165d6:	2b69      	cmp	r3, #105	; 0x69
 80165d8:	d027      	beq.n	801662a <_strtod_l+0x35a>
 80165da:	dc24      	bgt.n	8016626 <_strtod_l+0x356>
 80165dc:	2b49      	cmp	r3, #73	; 0x49
 80165de:	d024      	beq.n	801662a <_strtod_l+0x35a>
 80165e0:	2b4e      	cmp	r3, #78	; 0x4e
 80165e2:	f47f aed3 	bne.w	801638c <_strtod_l+0xbc>
 80165e6:	499e      	ldr	r1, [pc, #632]	; (8016860 <_strtod_l+0x590>)
 80165e8:	a81d      	add	r0, sp, #116	; 0x74
 80165ea:	f001 fe61 	bl	80182b0 <__match>
 80165ee:	2800      	cmp	r0, #0
 80165f0:	f43f aecc 	beq.w	801638c <_strtod_l+0xbc>
 80165f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80165f6:	781b      	ldrb	r3, [r3, #0]
 80165f8:	2b28      	cmp	r3, #40	; 0x28
 80165fa:	d12d      	bne.n	8016658 <_strtod_l+0x388>
 80165fc:	4999      	ldr	r1, [pc, #612]	; (8016864 <_strtod_l+0x594>)
 80165fe:	aa20      	add	r2, sp, #128	; 0x80
 8016600:	a81d      	add	r0, sp, #116	; 0x74
 8016602:	f001 fe69 	bl	80182d8 <__hexnan>
 8016606:	2805      	cmp	r0, #5
 8016608:	d126      	bne.n	8016658 <_strtod_l+0x388>
 801660a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801660c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8016610:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016614:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016618:	e69c      	b.n	8016354 <_strtod_l+0x84>
 801661a:	210a      	movs	r1, #10
 801661c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016620:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016624:	e7b9      	b.n	801659a <_strtod_l+0x2ca>
 8016626:	2b6e      	cmp	r3, #110	; 0x6e
 8016628:	e7db      	b.n	80165e2 <_strtod_l+0x312>
 801662a:	498f      	ldr	r1, [pc, #572]	; (8016868 <_strtod_l+0x598>)
 801662c:	a81d      	add	r0, sp, #116	; 0x74
 801662e:	f001 fe3f 	bl	80182b0 <__match>
 8016632:	2800      	cmp	r0, #0
 8016634:	f43f aeaa 	beq.w	801638c <_strtod_l+0xbc>
 8016638:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801663a:	498c      	ldr	r1, [pc, #560]	; (801686c <_strtod_l+0x59c>)
 801663c:	3b01      	subs	r3, #1
 801663e:	a81d      	add	r0, sp, #116	; 0x74
 8016640:	931d      	str	r3, [sp, #116]	; 0x74
 8016642:	f001 fe35 	bl	80182b0 <__match>
 8016646:	b910      	cbnz	r0, 801664e <_strtod_l+0x37e>
 8016648:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801664a:	3301      	adds	r3, #1
 801664c:	931d      	str	r3, [sp, #116]	; 0x74
 801664e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801687c <_strtod_l+0x5ac>
 8016652:	f04f 0a00 	mov.w	sl, #0
 8016656:	e67d      	b.n	8016354 <_strtod_l+0x84>
 8016658:	4885      	ldr	r0, [pc, #532]	; (8016870 <_strtod_l+0x5a0>)
 801665a:	f002 fd45 	bl	80190e8 <nan>
 801665e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8016662:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8016666:	e675      	b.n	8016354 <_strtod_l+0x84>
 8016668:	9b07      	ldr	r3, [sp, #28]
 801666a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801666c:	1af3      	subs	r3, r6, r3
 801666e:	2f00      	cmp	r7, #0
 8016670:	bf08      	it	eq
 8016672:	462f      	moveq	r7, r5
 8016674:	2d10      	cmp	r5, #16
 8016676:	9308      	str	r3, [sp, #32]
 8016678:	46a8      	mov	r8, r5
 801667a:	bfa8      	it	ge
 801667c:	f04f 0810 	movge.w	r8, #16
 8016680:	f7e9 ff40 	bl	8000504 <__aeabi_ui2d>
 8016684:	2d09      	cmp	r5, #9
 8016686:	4682      	mov	sl, r0
 8016688:	468b      	mov	fp, r1
 801668a:	dd13      	ble.n	80166b4 <_strtod_l+0x3e4>
 801668c:	4b79      	ldr	r3, [pc, #484]	; (8016874 <_strtod_l+0x5a4>)
 801668e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016692:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016696:	f7e9 ffaf 	bl	80005f8 <__aeabi_dmul>
 801669a:	4682      	mov	sl, r0
 801669c:	4648      	mov	r0, r9
 801669e:	468b      	mov	fp, r1
 80166a0:	f7e9 ff30 	bl	8000504 <__aeabi_ui2d>
 80166a4:	4602      	mov	r2, r0
 80166a6:	460b      	mov	r3, r1
 80166a8:	4650      	mov	r0, sl
 80166aa:	4659      	mov	r1, fp
 80166ac:	f7e9 fdee 	bl	800028c <__adddf3>
 80166b0:	4682      	mov	sl, r0
 80166b2:	468b      	mov	fp, r1
 80166b4:	2d0f      	cmp	r5, #15
 80166b6:	dc38      	bgt.n	801672a <_strtod_l+0x45a>
 80166b8:	9b08      	ldr	r3, [sp, #32]
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	f43f ae4a 	beq.w	8016354 <_strtod_l+0x84>
 80166c0:	dd24      	ble.n	801670c <_strtod_l+0x43c>
 80166c2:	2b16      	cmp	r3, #22
 80166c4:	dc0b      	bgt.n	80166de <_strtod_l+0x40e>
 80166c6:	4d6b      	ldr	r5, [pc, #428]	; (8016874 <_strtod_l+0x5a4>)
 80166c8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80166cc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80166d0:	4652      	mov	r2, sl
 80166d2:	465b      	mov	r3, fp
 80166d4:	f7e9 ff90 	bl	80005f8 <__aeabi_dmul>
 80166d8:	4682      	mov	sl, r0
 80166da:	468b      	mov	fp, r1
 80166dc:	e63a      	b.n	8016354 <_strtod_l+0x84>
 80166de:	9a08      	ldr	r2, [sp, #32]
 80166e0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80166e4:	4293      	cmp	r3, r2
 80166e6:	db20      	blt.n	801672a <_strtod_l+0x45a>
 80166e8:	4c62      	ldr	r4, [pc, #392]	; (8016874 <_strtod_l+0x5a4>)
 80166ea:	f1c5 050f 	rsb	r5, r5, #15
 80166ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80166f2:	4652      	mov	r2, sl
 80166f4:	465b      	mov	r3, fp
 80166f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80166fa:	f7e9 ff7d 	bl	80005f8 <__aeabi_dmul>
 80166fe:	9b08      	ldr	r3, [sp, #32]
 8016700:	1b5d      	subs	r5, r3, r5
 8016702:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8016706:	e9d4 2300 	ldrd	r2, r3, [r4]
 801670a:	e7e3      	b.n	80166d4 <_strtod_l+0x404>
 801670c:	9b08      	ldr	r3, [sp, #32]
 801670e:	3316      	adds	r3, #22
 8016710:	db0b      	blt.n	801672a <_strtod_l+0x45a>
 8016712:	9b07      	ldr	r3, [sp, #28]
 8016714:	4a57      	ldr	r2, [pc, #348]	; (8016874 <_strtod_l+0x5a4>)
 8016716:	1b9e      	subs	r6, r3, r6
 8016718:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801671c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016720:	4650      	mov	r0, sl
 8016722:	4659      	mov	r1, fp
 8016724:	f7ea f892 	bl	800084c <__aeabi_ddiv>
 8016728:	e7d6      	b.n	80166d8 <_strtod_l+0x408>
 801672a:	9b08      	ldr	r3, [sp, #32]
 801672c:	eba5 0808 	sub.w	r8, r5, r8
 8016730:	4498      	add	r8, r3
 8016732:	f1b8 0f00 	cmp.w	r8, #0
 8016736:	dd71      	ble.n	801681c <_strtod_l+0x54c>
 8016738:	f018 030f 	ands.w	r3, r8, #15
 801673c:	d00a      	beq.n	8016754 <_strtod_l+0x484>
 801673e:	494d      	ldr	r1, [pc, #308]	; (8016874 <_strtod_l+0x5a4>)
 8016740:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016744:	4652      	mov	r2, sl
 8016746:	465b      	mov	r3, fp
 8016748:	e9d1 0100 	ldrd	r0, r1, [r1]
 801674c:	f7e9 ff54 	bl	80005f8 <__aeabi_dmul>
 8016750:	4682      	mov	sl, r0
 8016752:	468b      	mov	fp, r1
 8016754:	f038 080f 	bics.w	r8, r8, #15
 8016758:	d04d      	beq.n	80167f6 <_strtod_l+0x526>
 801675a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801675e:	dd22      	ble.n	80167a6 <_strtod_l+0x4d6>
 8016760:	2500      	movs	r5, #0
 8016762:	462e      	mov	r6, r5
 8016764:	9509      	str	r5, [sp, #36]	; 0x24
 8016766:	9507      	str	r5, [sp, #28]
 8016768:	2322      	movs	r3, #34	; 0x22
 801676a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801687c <_strtod_l+0x5ac>
 801676e:	6023      	str	r3, [r4, #0]
 8016770:	f04f 0a00 	mov.w	sl, #0
 8016774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016776:	2b00      	cmp	r3, #0
 8016778:	f43f adec 	beq.w	8016354 <_strtod_l+0x84>
 801677c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801677e:	4620      	mov	r0, r4
 8016780:	f001 feba 	bl	80184f8 <_Bfree>
 8016784:	9907      	ldr	r1, [sp, #28]
 8016786:	4620      	mov	r0, r4
 8016788:	f001 feb6 	bl	80184f8 <_Bfree>
 801678c:	4631      	mov	r1, r6
 801678e:	4620      	mov	r0, r4
 8016790:	f001 feb2 	bl	80184f8 <_Bfree>
 8016794:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016796:	4620      	mov	r0, r4
 8016798:	f001 feae 	bl	80184f8 <_Bfree>
 801679c:	4629      	mov	r1, r5
 801679e:	4620      	mov	r0, r4
 80167a0:	f001 feaa 	bl	80184f8 <_Bfree>
 80167a4:	e5d6      	b.n	8016354 <_strtod_l+0x84>
 80167a6:	2300      	movs	r3, #0
 80167a8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80167ac:	4650      	mov	r0, sl
 80167ae:	4659      	mov	r1, fp
 80167b0:	4699      	mov	r9, r3
 80167b2:	f1b8 0f01 	cmp.w	r8, #1
 80167b6:	dc21      	bgt.n	80167fc <_strtod_l+0x52c>
 80167b8:	b10b      	cbz	r3, 80167be <_strtod_l+0x4ee>
 80167ba:	4682      	mov	sl, r0
 80167bc:	468b      	mov	fp, r1
 80167be:	4b2e      	ldr	r3, [pc, #184]	; (8016878 <_strtod_l+0x5a8>)
 80167c0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80167c4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80167c8:	4652      	mov	r2, sl
 80167ca:	465b      	mov	r3, fp
 80167cc:	e9d9 0100 	ldrd	r0, r1, [r9]
 80167d0:	f7e9 ff12 	bl	80005f8 <__aeabi_dmul>
 80167d4:	4b29      	ldr	r3, [pc, #164]	; (801687c <_strtod_l+0x5ac>)
 80167d6:	460a      	mov	r2, r1
 80167d8:	400b      	ands	r3, r1
 80167da:	4929      	ldr	r1, [pc, #164]	; (8016880 <_strtod_l+0x5b0>)
 80167dc:	428b      	cmp	r3, r1
 80167de:	4682      	mov	sl, r0
 80167e0:	d8be      	bhi.n	8016760 <_strtod_l+0x490>
 80167e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80167e6:	428b      	cmp	r3, r1
 80167e8:	bf86      	itte	hi
 80167ea:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016884 <_strtod_l+0x5b4>
 80167ee:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80167f2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80167f6:	2300      	movs	r3, #0
 80167f8:	9304      	str	r3, [sp, #16]
 80167fa:	e081      	b.n	8016900 <_strtod_l+0x630>
 80167fc:	f018 0f01 	tst.w	r8, #1
 8016800:	d007      	beq.n	8016812 <_strtod_l+0x542>
 8016802:	4b1d      	ldr	r3, [pc, #116]	; (8016878 <_strtod_l+0x5a8>)
 8016804:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8016808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801680c:	f7e9 fef4 	bl	80005f8 <__aeabi_dmul>
 8016810:	2301      	movs	r3, #1
 8016812:	f109 0901 	add.w	r9, r9, #1
 8016816:	ea4f 0868 	mov.w	r8, r8, asr #1
 801681a:	e7ca      	b.n	80167b2 <_strtod_l+0x4e2>
 801681c:	d0eb      	beq.n	80167f6 <_strtod_l+0x526>
 801681e:	f1c8 0800 	rsb	r8, r8, #0
 8016822:	f018 020f 	ands.w	r2, r8, #15
 8016826:	d00a      	beq.n	801683e <_strtod_l+0x56e>
 8016828:	4b12      	ldr	r3, [pc, #72]	; (8016874 <_strtod_l+0x5a4>)
 801682a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801682e:	4650      	mov	r0, sl
 8016830:	4659      	mov	r1, fp
 8016832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016836:	f7ea f809 	bl	800084c <__aeabi_ddiv>
 801683a:	4682      	mov	sl, r0
 801683c:	468b      	mov	fp, r1
 801683e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016842:	d0d8      	beq.n	80167f6 <_strtod_l+0x526>
 8016844:	f1b8 0f1f 	cmp.w	r8, #31
 8016848:	dd1e      	ble.n	8016888 <_strtod_l+0x5b8>
 801684a:	2500      	movs	r5, #0
 801684c:	462e      	mov	r6, r5
 801684e:	9509      	str	r5, [sp, #36]	; 0x24
 8016850:	9507      	str	r5, [sp, #28]
 8016852:	2322      	movs	r3, #34	; 0x22
 8016854:	f04f 0a00 	mov.w	sl, #0
 8016858:	f04f 0b00 	mov.w	fp, #0
 801685c:	6023      	str	r3, [r4, #0]
 801685e:	e789      	b.n	8016774 <_strtod_l+0x4a4>
 8016860:	0801b309 	.word	0x0801b309
 8016864:	0801b34c 	.word	0x0801b34c
 8016868:	0801b301 	.word	0x0801b301
 801686c:	0801b48c 	.word	0x0801b48c
 8016870:	0801b748 	.word	0x0801b748
 8016874:	0801b628 	.word	0x0801b628
 8016878:	0801b600 	.word	0x0801b600
 801687c:	7ff00000 	.word	0x7ff00000
 8016880:	7ca00000 	.word	0x7ca00000
 8016884:	7fefffff 	.word	0x7fefffff
 8016888:	f018 0310 	ands.w	r3, r8, #16
 801688c:	bf18      	it	ne
 801688e:	236a      	movne	r3, #106	; 0x6a
 8016890:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8016c48 <_strtod_l+0x978>
 8016894:	9304      	str	r3, [sp, #16]
 8016896:	4650      	mov	r0, sl
 8016898:	4659      	mov	r1, fp
 801689a:	2300      	movs	r3, #0
 801689c:	f018 0f01 	tst.w	r8, #1
 80168a0:	d004      	beq.n	80168ac <_strtod_l+0x5dc>
 80168a2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80168a6:	f7e9 fea7 	bl	80005f8 <__aeabi_dmul>
 80168aa:	2301      	movs	r3, #1
 80168ac:	ea5f 0868 	movs.w	r8, r8, asr #1
 80168b0:	f109 0908 	add.w	r9, r9, #8
 80168b4:	d1f2      	bne.n	801689c <_strtod_l+0x5cc>
 80168b6:	b10b      	cbz	r3, 80168bc <_strtod_l+0x5ec>
 80168b8:	4682      	mov	sl, r0
 80168ba:	468b      	mov	fp, r1
 80168bc:	9b04      	ldr	r3, [sp, #16]
 80168be:	b1bb      	cbz	r3, 80168f0 <_strtod_l+0x620>
 80168c0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80168c4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	4659      	mov	r1, fp
 80168cc:	dd10      	ble.n	80168f0 <_strtod_l+0x620>
 80168ce:	2b1f      	cmp	r3, #31
 80168d0:	f340 8128 	ble.w	8016b24 <_strtod_l+0x854>
 80168d4:	2b34      	cmp	r3, #52	; 0x34
 80168d6:	bfde      	ittt	le
 80168d8:	3b20      	suble	r3, #32
 80168da:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80168de:	fa02 f303 	lslle.w	r3, r2, r3
 80168e2:	f04f 0a00 	mov.w	sl, #0
 80168e6:	bfcc      	ite	gt
 80168e8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80168ec:	ea03 0b01 	andle.w	fp, r3, r1
 80168f0:	2200      	movs	r2, #0
 80168f2:	2300      	movs	r3, #0
 80168f4:	4650      	mov	r0, sl
 80168f6:	4659      	mov	r1, fp
 80168f8:	f7ea f8e6 	bl	8000ac8 <__aeabi_dcmpeq>
 80168fc:	2800      	cmp	r0, #0
 80168fe:	d1a4      	bne.n	801684a <_strtod_l+0x57a>
 8016900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016902:	9300      	str	r3, [sp, #0]
 8016904:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016906:	462b      	mov	r3, r5
 8016908:	463a      	mov	r2, r7
 801690a:	4620      	mov	r0, r4
 801690c:	f001 fe60 	bl	80185d0 <__s2b>
 8016910:	9009      	str	r0, [sp, #36]	; 0x24
 8016912:	2800      	cmp	r0, #0
 8016914:	f43f af24 	beq.w	8016760 <_strtod_l+0x490>
 8016918:	9b07      	ldr	r3, [sp, #28]
 801691a:	1b9e      	subs	r6, r3, r6
 801691c:	9b08      	ldr	r3, [sp, #32]
 801691e:	2b00      	cmp	r3, #0
 8016920:	bfb4      	ite	lt
 8016922:	4633      	movlt	r3, r6
 8016924:	2300      	movge	r3, #0
 8016926:	9310      	str	r3, [sp, #64]	; 0x40
 8016928:	9b08      	ldr	r3, [sp, #32]
 801692a:	2500      	movs	r5, #0
 801692c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016930:	9318      	str	r3, [sp, #96]	; 0x60
 8016932:	462e      	mov	r6, r5
 8016934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016936:	4620      	mov	r0, r4
 8016938:	6859      	ldr	r1, [r3, #4]
 801693a:	f001 fd9d 	bl	8018478 <_Balloc>
 801693e:	9007      	str	r0, [sp, #28]
 8016940:	2800      	cmp	r0, #0
 8016942:	f43f af11 	beq.w	8016768 <_strtod_l+0x498>
 8016946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016948:	691a      	ldr	r2, [r3, #16]
 801694a:	3202      	adds	r2, #2
 801694c:	f103 010c 	add.w	r1, r3, #12
 8016950:	0092      	lsls	r2, r2, #2
 8016952:	300c      	adds	r0, #12
 8016954:	f7fe fc54 	bl	8015200 <memcpy>
 8016958:	ec4b ab10 	vmov	d0, sl, fp
 801695c:	aa20      	add	r2, sp, #128	; 0x80
 801695e:	a91f      	add	r1, sp, #124	; 0x7c
 8016960:	4620      	mov	r0, r4
 8016962:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8016966:	f002 f96f 	bl	8018c48 <__d2b>
 801696a:	901e      	str	r0, [sp, #120]	; 0x78
 801696c:	2800      	cmp	r0, #0
 801696e:	f43f aefb 	beq.w	8016768 <_strtod_l+0x498>
 8016972:	2101      	movs	r1, #1
 8016974:	4620      	mov	r0, r4
 8016976:	f001 fec5 	bl	8018704 <__i2b>
 801697a:	4606      	mov	r6, r0
 801697c:	2800      	cmp	r0, #0
 801697e:	f43f aef3 	beq.w	8016768 <_strtod_l+0x498>
 8016982:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016984:	9904      	ldr	r1, [sp, #16]
 8016986:	2b00      	cmp	r3, #0
 8016988:	bfab      	itete	ge
 801698a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801698c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801698e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8016990:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8016994:	bfac      	ite	ge
 8016996:	eb03 0902 	addge.w	r9, r3, r2
 801699a:	1ad7      	sublt	r7, r2, r3
 801699c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801699e:	eba3 0801 	sub.w	r8, r3, r1
 80169a2:	4490      	add	r8, r2
 80169a4:	4ba3      	ldr	r3, [pc, #652]	; (8016c34 <_strtod_l+0x964>)
 80169a6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80169aa:	4598      	cmp	r8, r3
 80169ac:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80169b0:	f280 80cc 	bge.w	8016b4c <_strtod_l+0x87c>
 80169b4:	eba3 0308 	sub.w	r3, r3, r8
 80169b8:	2b1f      	cmp	r3, #31
 80169ba:	eba2 0203 	sub.w	r2, r2, r3
 80169be:	f04f 0101 	mov.w	r1, #1
 80169c2:	f300 80b6 	bgt.w	8016b32 <_strtod_l+0x862>
 80169c6:	fa01 f303 	lsl.w	r3, r1, r3
 80169ca:	9311      	str	r3, [sp, #68]	; 0x44
 80169cc:	2300      	movs	r3, #0
 80169ce:	930c      	str	r3, [sp, #48]	; 0x30
 80169d0:	eb09 0802 	add.w	r8, r9, r2
 80169d4:	9b04      	ldr	r3, [sp, #16]
 80169d6:	45c1      	cmp	r9, r8
 80169d8:	4417      	add	r7, r2
 80169da:	441f      	add	r7, r3
 80169dc:	464b      	mov	r3, r9
 80169de:	bfa8      	it	ge
 80169e0:	4643      	movge	r3, r8
 80169e2:	42bb      	cmp	r3, r7
 80169e4:	bfa8      	it	ge
 80169e6:	463b      	movge	r3, r7
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	bfc2      	ittt	gt
 80169ec:	eba8 0803 	subgt.w	r8, r8, r3
 80169f0:	1aff      	subgt	r7, r7, r3
 80169f2:	eba9 0903 	subgt.w	r9, r9, r3
 80169f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	dd17      	ble.n	8016a2c <_strtod_l+0x75c>
 80169fc:	4631      	mov	r1, r6
 80169fe:	461a      	mov	r2, r3
 8016a00:	4620      	mov	r0, r4
 8016a02:	f001 ff3b 	bl	801887c <__pow5mult>
 8016a06:	4606      	mov	r6, r0
 8016a08:	2800      	cmp	r0, #0
 8016a0a:	f43f aead 	beq.w	8016768 <_strtod_l+0x498>
 8016a0e:	4601      	mov	r1, r0
 8016a10:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016a12:	4620      	mov	r0, r4
 8016a14:	f001 fe8c 	bl	8018730 <__multiply>
 8016a18:	900f      	str	r0, [sp, #60]	; 0x3c
 8016a1a:	2800      	cmp	r0, #0
 8016a1c:	f43f aea4 	beq.w	8016768 <_strtod_l+0x498>
 8016a20:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016a22:	4620      	mov	r0, r4
 8016a24:	f001 fd68 	bl	80184f8 <_Bfree>
 8016a28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016a2a:	931e      	str	r3, [sp, #120]	; 0x78
 8016a2c:	f1b8 0f00 	cmp.w	r8, #0
 8016a30:	f300 8091 	bgt.w	8016b56 <_strtod_l+0x886>
 8016a34:	9b08      	ldr	r3, [sp, #32]
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	dd08      	ble.n	8016a4c <_strtod_l+0x77c>
 8016a3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016a3c:	9907      	ldr	r1, [sp, #28]
 8016a3e:	4620      	mov	r0, r4
 8016a40:	f001 ff1c 	bl	801887c <__pow5mult>
 8016a44:	9007      	str	r0, [sp, #28]
 8016a46:	2800      	cmp	r0, #0
 8016a48:	f43f ae8e 	beq.w	8016768 <_strtod_l+0x498>
 8016a4c:	2f00      	cmp	r7, #0
 8016a4e:	dd08      	ble.n	8016a62 <_strtod_l+0x792>
 8016a50:	9907      	ldr	r1, [sp, #28]
 8016a52:	463a      	mov	r2, r7
 8016a54:	4620      	mov	r0, r4
 8016a56:	f001 ff6b 	bl	8018930 <__lshift>
 8016a5a:	9007      	str	r0, [sp, #28]
 8016a5c:	2800      	cmp	r0, #0
 8016a5e:	f43f ae83 	beq.w	8016768 <_strtod_l+0x498>
 8016a62:	f1b9 0f00 	cmp.w	r9, #0
 8016a66:	dd08      	ble.n	8016a7a <_strtod_l+0x7aa>
 8016a68:	4631      	mov	r1, r6
 8016a6a:	464a      	mov	r2, r9
 8016a6c:	4620      	mov	r0, r4
 8016a6e:	f001 ff5f 	bl	8018930 <__lshift>
 8016a72:	4606      	mov	r6, r0
 8016a74:	2800      	cmp	r0, #0
 8016a76:	f43f ae77 	beq.w	8016768 <_strtod_l+0x498>
 8016a7a:	9a07      	ldr	r2, [sp, #28]
 8016a7c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016a7e:	4620      	mov	r0, r4
 8016a80:	f001 ffde 	bl	8018a40 <__mdiff>
 8016a84:	4605      	mov	r5, r0
 8016a86:	2800      	cmp	r0, #0
 8016a88:	f43f ae6e 	beq.w	8016768 <_strtod_l+0x498>
 8016a8c:	68c3      	ldr	r3, [r0, #12]
 8016a8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8016a90:	2300      	movs	r3, #0
 8016a92:	60c3      	str	r3, [r0, #12]
 8016a94:	4631      	mov	r1, r6
 8016a96:	f001 ffb7 	bl	8018a08 <__mcmp>
 8016a9a:	2800      	cmp	r0, #0
 8016a9c:	da65      	bge.n	8016b6a <_strtod_l+0x89a>
 8016a9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016aa0:	ea53 030a 	orrs.w	r3, r3, sl
 8016aa4:	f040 8087 	bne.w	8016bb6 <_strtod_l+0x8e6>
 8016aa8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	f040 8082 	bne.w	8016bb6 <_strtod_l+0x8e6>
 8016ab2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016ab6:	0d1b      	lsrs	r3, r3, #20
 8016ab8:	051b      	lsls	r3, r3, #20
 8016aba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016abe:	d97a      	bls.n	8016bb6 <_strtod_l+0x8e6>
 8016ac0:	696b      	ldr	r3, [r5, #20]
 8016ac2:	b913      	cbnz	r3, 8016aca <_strtod_l+0x7fa>
 8016ac4:	692b      	ldr	r3, [r5, #16]
 8016ac6:	2b01      	cmp	r3, #1
 8016ac8:	dd75      	ble.n	8016bb6 <_strtod_l+0x8e6>
 8016aca:	4629      	mov	r1, r5
 8016acc:	2201      	movs	r2, #1
 8016ace:	4620      	mov	r0, r4
 8016ad0:	f001 ff2e 	bl	8018930 <__lshift>
 8016ad4:	4631      	mov	r1, r6
 8016ad6:	4605      	mov	r5, r0
 8016ad8:	f001 ff96 	bl	8018a08 <__mcmp>
 8016adc:	2800      	cmp	r0, #0
 8016ade:	dd6a      	ble.n	8016bb6 <_strtod_l+0x8e6>
 8016ae0:	9904      	ldr	r1, [sp, #16]
 8016ae2:	4a55      	ldr	r2, [pc, #340]	; (8016c38 <_strtod_l+0x968>)
 8016ae4:	465b      	mov	r3, fp
 8016ae6:	2900      	cmp	r1, #0
 8016ae8:	f000 8085 	beq.w	8016bf6 <_strtod_l+0x926>
 8016aec:	ea02 010b 	and.w	r1, r2, fp
 8016af0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016af4:	dc7f      	bgt.n	8016bf6 <_strtod_l+0x926>
 8016af6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016afa:	f77f aeaa 	ble.w	8016852 <_strtod_l+0x582>
 8016afe:	4a4f      	ldr	r2, [pc, #316]	; (8016c3c <_strtod_l+0x96c>)
 8016b00:	2300      	movs	r3, #0
 8016b02:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8016b06:	4650      	mov	r0, sl
 8016b08:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8016b0c:	4659      	mov	r1, fp
 8016b0e:	f7e9 fd73 	bl	80005f8 <__aeabi_dmul>
 8016b12:	460b      	mov	r3, r1
 8016b14:	4303      	orrs	r3, r0
 8016b16:	bf08      	it	eq
 8016b18:	2322      	moveq	r3, #34	; 0x22
 8016b1a:	4682      	mov	sl, r0
 8016b1c:	468b      	mov	fp, r1
 8016b1e:	bf08      	it	eq
 8016b20:	6023      	streq	r3, [r4, #0]
 8016b22:	e62b      	b.n	801677c <_strtod_l+0x4ac>
 8016b24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016b28:	fa02 f303 	lsl.w	r3, r2, r3
 8016b2c:	ea03 0a0a 	and.w	sl, r3, sl
 8016b30:	e6de      	b.n	80168f0 <_strtod_l+0x620>
 8016b32:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8016b36:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8016b3a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8016b3e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8016b42:	fa01 f308 	lsl.w	r3, r1, r8
 8016b46:	930c      	str	r3, [sp, #48]	; 0x30
 8016b48:	9111      	str	r1, [sp, #68]	; 0x44
 8016b4a:	e741      	b.n	80169d0 <_strtod_l+0x700>
 8016b4c:	2300      	movs	r3, #0
 8016b4e:	930c      	str	r3, [sp, #48]	; 0x30
 8016b50:	2301      	movs	r3, #1
 8016b52:	9311      	str	r3, [sp, #68]	; 0x44
 8016b54:	e73c      	b.n	80169d0 <_strtod_l+0x700>
 8016b56:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016b58:	4642      	mov	r2, r8
 8016b5a:	4620      	mov	r0, r4
 8016b5c:	f001 fee8 	bl	8018930 <__lshift>
 8016b60:	901e      	str	r0, [sp, #120]	; 0x78
 8016b62:	2800      	cmp	r0, #0
 8016b64:	f47f af66 	bne.w	8016a34 <_strtod_l+0x764>
 8016b68:	e5fe      	b.n	8016768 <_strtod_l+0x498>
 8016b6a:	465f      	mov	r7, fp
 8016b6c:	d16e      	bne.n	8016c4c <_strtod_l+0x97c>
 8016b6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016b70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016b74:	b342      	cbz	r2, 8016bc8 <_strtod_l+0x8f8>
 8016b76:	4a32      	ldr	r2, [pc, #200]	; (8016c40 <_strtod_l+0x970>)
 8016b78:	4293      	cmp	r3, r2
 8016b7a:	d128      	bne.n	8016bce <_strtod_l+0x8fe>
 8016b7c:	9b04      	ldr	r3, [sp, #16]
 8016b7e:	4650      	mov	r0, sl
 8016b80:	b1eb      	cbz	r3, 8016bbe <_strtod_l+0x8ee>
 8016b82:	4a2d      	ldr	r2, [pc, #180]	; (8016c38 <_strtod_l+0x968>)
 8016b84:	403a      	ands	r2, r7
 8016b86:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016b8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016b8e:	d819      	bhi.n	8016bc4 <_strtod_l+0x8f4>
 8016b90:	0d12      	lsrs	r2, r2, #20
 8016b92:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016b96:	fa01 f303 	lsl.w	r3, r1, r3
 8016b9a:	4298      	cmp	r0, r3
 8016b9c:	d117      	bne.n	8016bce <_strtod_l+0x8fe>
 8016b9e:	4b29      	ldr	r3, [pc, #164]	; (8016c44 <_strtod_l+0x974>)
 8016ba0:	429f      	cmp	r7, r3
 8016ba2:	d102      	bne.n	8016baa <_strtod_l+0x8da>
 8016ba4:	3001      	adds	r0, #1
 8016ba6:	f43f addf 	beq.w	8016768 <_strtod_l+0x498>
 8016baa:	4b23      	ldr	r3, [pc, #140]	; (8016c38 <_strtod_l+0x968>)
 8016bac:	403b      	ands	r3, r7
 8016bae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016bb2:	f04f 0a00 	mov.w	sl, #0
 8016bb6:	9b04      	ldr	r3, [sp, #16]
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d1a0      	bne.n	8016afe <_strtod_l+0x82e>
 8016bbc:	e5de      	b.n	801677c <_strtod_l+0x4ac>
 8016bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016bc2:	e7ea      	b.n	8016b9a <_strtod_l+0x8ca>
 8016bc4:	460b      	mov	r3, r1
 8016bc6:	e7e8      	b.n	8016b9a <_strtod_l+0x8ca>
 8016bc8:	ea53 030a 	orrs.w	r3, r3, sl
 8016bcc:	d088      	beq.n	8016ae0 <_strtod_l+0x810>
 8016bce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016bd0:	b1db      	cbz	r3, 8016c0a <_strtod_l+0x93a>
 8016bd2:	423b      	tst	r3, r7
 8016bd4:	d0ef      	beq.n	8016bb6 <_strtod_l+0x8e6>
 8016bd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016bd8:	9a04      	ldr	r2, [sp, #16]
 8016bda:	4650      	mov	r0, sl
 8016bdc:	4659      	mov	r1, fp
 8016bde:	b1c3      	cbz	r3, 8016c12 <_strtod_l+0x942>
 8016be0:	f7ff fb59 	bl	8016296 <sulp>
 8016be4:	4602      	mov	r2, r0
 8016be6:	460b      	mov	r3, r1
 8016be8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016bec:	f7e9 fb4e 	bl	800028c <__adddf3>
 8016bf0:	4682      	mov	sl, r0
 8016bf2:	468b      	mov	fp, r1
 8016bf4:	e7df      	b.n	8016bb6 <_strtod_l+0x8e6>
 8016bf6:	4013      	ands	r3, r2
 8016bf8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016bfc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016c00:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016c04:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8016c08:	e7d5      	b.n	8016bb6 <_strtod_l+0x8e6>
 8016c0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016c0c:	ea13 0f0a 	tst.w	r3, sl
 8016c10:	e7e0      	b.n	8016bd4 <_strtod_l+0x904>
 8016c12:	f7ff fb40 	bl	8016296 <sulp>
 8016c16:	4602      	mov	r2, r0
 8016c18:	460b      	mov	r3, r1
 8016c1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016c1e:	f7e9 fb33 	bl	8000288 <__aeabi_dsub>
 8016c22:	2200      	movs	r2, #0
 8016c24:	2300      	movs	r3, #0
 8016c26:	4682      	mov	sl, r0
 8016c28:	468b      	mov	fp, r1
 8016c2a:	f7e9 ff4d 	bl	8000ac8 <__aeabi_dcmpeq>
 8016c2e:	2800      	cmp	r0, #0
 8016c30:	d0c1      	beq.n	8016bb6 <_strtod_l+0x8e6>
 8016c32:	e60e      	b.n	8016852 <_strtod_l+0x582>
 8016c34:	fffffc02 	.word	0xfffffc02
 8016c38:	7ff00000 	.word	0x7ff00000
 8016c3c:	39500000 	.word	0x39500000
 8016c40:	000fffff 	.word	0x000fffff
 8016c44:	7fefffff 	.word	0x7fefffff
 8016c48:	0801b360 	.word	0x0801b360
 8016c4c:	4631      	mov	r1, r6
 8016c4e:	4628      	mov	r0, r5
 8016c50:	f002 f856 	bl	8018d00 <__ratio>
 8016c54:	ec59 8b10 	vmov	r8, r9, d0
 8016c58:	ee10 0a10 	vmov	r0, s0
 8016c5c:	2200      	movs	r2, #0
 8016c5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016c62:	4649      	mov	r1, r9
 8016c64:	f7e9 ff44 	bl	8000af0 <__aeabi_dcmple>
 8016c68:	2800      	cmp	r0, #0
 8016c6a:	d07c      	beq.n	8016d66 <_strtod_l+0xa96>
 8016c6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d04c      	beq.n	8016d0c <_strtod_l+0xa3c>
 8016c72:	4b95      	ldr	r3, [pc, #596]	; (8016ec8 <_strtod_l+0xbf8>)
 8016c74:	2200      	movs	r2, #0
 8016c76:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016c7a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8016ec8 <_strtod_l+0xbf8>
 8016c7e:	f04f 0800 	mov.w	r8, #0
 8016c82:	4b92      	ldr	r3, [pc, #584]	; (8016ecc <_strtod_l+0xbfc>)
 8016c84:	403b      	ands	r3, r7
 8016c86:	9311      	str	r3, [sp, #68]	; 0x44
 8016c88:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016c8a:	4b91      	ldr	r3, [pc, #580]	; (8016ed0 <_strtod_l+0xc00>)
 8016c8c:	429a      	cmp	r2, r3
 8016c8e:	f040 80b2 	bne.w	8016df6 <_strtod_l+0xb26>
 8016c92:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016c96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016c9a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8016c9e:	ec4b ab10 	vmov	d0, sl, fp
 8016ca2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8016ca6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016caa:	f001 ff51 	bl	8018b50 <__ulp>
 8016cae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016cb2:	ec53 2b10 	vmov	r2, r3, d0
 8016cb6:	f7e9 fc9f 	bl	80005f8 <__aeabi_dmul>
 8016cba:	4652      	mov	r2, sl
 8016cbc:	465b      	mov	r3, fp
 8016cbe:	f7e9 fae5 	bl	800028c <__adddf3>
 8016cc2:	460b      	mov	r3, r1
 8016cc4:	4981      	ldr	r1, [pc, #516]	; (8016ecc <_strtod_l+0xbfc>)
 8016cc6:	4a83      	ldr	r2, [pc, #524]	; (8016ed4 <_strtod_l+0xc04>)
 8016cc8:	4019      	ands	r1, r3
 8016cca:	4291      	cmp	r1, r2
 8016ccc:	4682      	mov	sl, r0
 8016cce:	d95e      	bls.n	8016d8e <_strtod_l+0xabe>
 8016cd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016cd2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016cd6:	4293      	cmp	r3, r2
 8016cd8:	d103      	bne.n	8016ce2 <_strtod_l+0xa12>
 8016cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016cdc:	3301      	adds	r3, #1
 8016cde:	f43f ad43 	beq.w	8016768 <_strtod_l+0x498>
 8016ce2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8016ee0 <_strtod_l+0xc10>
 8016ce6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8016cea:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016cec:	4620      	mov	r0, r4
 8016cee:	f001 fc03 	bl	80184f8 <_Bfree>
 8016cf2:	9907      	ldr	r1, [sp, #28]
 8016cf4:	4620      	mov	r0, r4
 8016cf6:	f001 fbff 	bl	80184f8 <_Bfree>
 8016cfa:	4631      	mov	r1, r6
 8016cfc:	4620      	mov	r0, r4
 8016cfe:	f001 fbfb 	bl	80184f8 <_Bfree>
 8016d02:	4629      	mov	r1, r5
 8016d04:	4620      	mov	r0, r4
 8016d06:	f001 fbf7 	bl	80184f8 <_Bfree>
 8016d0a:	e613      	b.n	8016934 <_strtod_l+0x664>
 8016d0c:	f1ba 0f00 	cmp.w	sl, #0
 8016d10:	d11b      	bne.n	8016d4a <_strtod_l+0xa7a>
 8016d12:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016d16:	b9f3      	cbnz	r3, 8016d56 <_strtod_l+0xa86>
 8016d18:	4b6b      	ldr	r3, [pc, #428]	; (8016ec8 <_strtod_l+0xbf8>)
 8016d1a:	2200      	movs	r2, #0
 8016d1c:	4640      	mov	r0, r8
 8016d1e:	4649      	mov	r1, r9
 8016d20:	f7e9 fedc 	bl	8000adc <__aeabi_dcmplt>
 8016d24:	b9d0      	cbnz	r0, 8016d5c <_strtod_l+0xa8c>
 8016d26:	4640      	mov	r0, r8
 8016d28:	4649      	mov	r1, r9
 8016d2a:	4b6b      	ldr	r3, [pc, #428]	; (8016ed8 <_strtod_l+0xc08>)
 8016d2c:	2200      	movs	r2, #0
 8016d2e:	f7e9 fc63 	bl	80005f8 <__aeabi_dmul>
 8016d32:	4680      	mov	r8, r0
 8016d34:	4689      	mov	r9, r1
 8016d36:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8016d3a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8016d3e:	931b      	str	r3, [sp, #108]	; 0x6c
 8016d40:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8016d44:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016d48:	e79b      	b.n	8016c82 <_strtod_l+0x9b2>
 8016d4a:	f1ba 0f01 	cmp.w	sl, #1
 8016d4e:	d102      	bne.n	8016d56 <_strtod_l+0xa86>
 8016d50:	2f00      	cmp	r7, #0
 8016d52:	f43f ad7e 	beq.w	8016852 <_strtod_l+0x582>
 8016d56:	4b61      	ldr	r3, [pc, #388]	; (8016edc <_strtod_l+0xc0c>)
 8016d58:	2200      	movs	r2, #0
 8016d5a:	e78c      	b.n	8016c76 <_strtod_l+0x9a6>
 8016d5c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8016ed8 <_strtod_l+0xc08>
 8016d60:	f04f 0800 	mov.w	r8, #0
 8016d64:	e7e7      	b.n	8016d36 <_strtod_l+0xa66>
 8016d66:	4b5c      	ldr	r3, [pc, #368]	; (8016ed8 <_strtod_l+0xc08>)
 8016d68:	4640      	mov	r0, r8
 8016d6a:	4649      	mov	r1, r9
 8016d6c:	2200      	movs	r2, #0
 8016d6e:	f7e9 fc43 	bl	80005f8 <__aeabi_dmul>
 8016d72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d74:	4680      	mov	r8, r0
 8016d76:	4689      	mov	r9, r1
 8016d78:	b933      	cbnz	r3, 8016d88 <_strtod_l+0xab8>
 8016d7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016d7e:	9012      	str	r0, [sp, #72]	; 0x48
 8016d80:	9313      	str	r3, [sp, #76]	; 0x4c
 8016d82:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016d86:	e7dd      	b.n	8016d44 <_strtod_l+0xa74>
 8016d88:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8016d8c:	e7f9      	b.n	8016d82 <_strtod_l+0xab2>
 8016d8e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8016d92:	9b04      	ldr	r3, [sp, #16]
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d1a8      	bne.n	8016cea <_strtod_l+0xa1a>
 8016d98:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016d9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016d9e:	0d1b      	lsrs	r3, r3, #20
 8016da0:	051b      	lsls	r3, r3, #20
 8016da2:	429a      	cmp	r2, r3
 8016da4:	d1a1      	bne.n	8016cea <_strtod_l+0xa1a>
 8016da6:	4640      	mov	r0, r8
 8016da8:	4649      	mov	r1, r9
 8016daa:	f7e9 ff85 	bl	8000cb8 <__aeabi_d2lz>
 8016dae:	f7e9 fbf5 	bl	800059c <__aeabi_l2d>
 8016db2:	4602      	mov	r2, r0
 8016db4:	460b      	mov	r3, r1
 8016db6:	4640      	mov	r0, r8
 8016db8:	4649      	mov	r1, r9
 8016dba:	f7e9 fa65 	bl	8000288 <__aeabi_dsub>
 8016dbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016dc0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016dc4:	ea43 030a 	orr.w	r3, r3, sl
 8016dc8:	4313      	orrs	r3, r2
 8016dca:	4680      	mov	r8, r0
 8016dcc:	4689      	mov	r9, r1
 8016dce:	d053      	beq.n	8016e78 <_strtod_l+0xba8>
 8016dd0:	a335      	add	r3, pc, #212	; (adr r3, 8016ea8 <_strtod_l+0xbd8>)
 8016dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dd6:	f7e9 fe81 	bl	8000adc <__aeabi_dcmplt>
 8016dda:	2800      	cmp	r0, #0
 8016ddc:	f47f acce 	bne.w	801677c <_strtod_l+0x4ac>
 8016de0:	a333      	add	r3, pc, #204	; (adr r3, 8016eb0 <_strtod_l+0xbe0>)
 8016de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016de6:	4640      	mov	r0, r8
 8016de8:	4649      	mov	r1, r9
 8016dea:	f7e9 fe95 	bl	8000b18 <__aeabi_dcmpgt>
 8016dee:	2800      	cmp	r0, #0
 8016df0:	f43f af7b 	beq.w	8016cea <_strtod_l+0xa1a>
 8016df4:	e4c2      	b.n	801677c <_strtod_l+0x4ac>
 8016df6:	9b04      	ldr	r3, [sp, #16]
 8016df8:	b333      	cbz	r3, 8016e48 <_strtod_l+0xb78>
 8016dfa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016dfc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016e00:	d822      	bhi.n	8016e48 <_strtod_l+0xb78>
 8016e02:	a32d      	add	r3, pc, #180	; (adr r3, 8016eb8 <_strtod_l+0xbe8>)
 8016e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e08:	4640      	mov	r0, r8
 8016e0a:	4649      	mov	r1, r9
 8016e0c:	f7e9 fe70 	bl	8000af0 <__aeabi_dcmple>
 8016e10:	b1a0      	cbz	r0, 8016e3c <_strtod_l+0xb6c>
 8016e12:	4649      	mov	r1, r9
 8016e14:	4640      	mov	r0, r8
 8016e16:	f7e9 fec7 	bl	8000ba8 <__aeabi_d2uiz>
 8016e1a:	2801      	cmp	r0, #1
 8016e1c:	bf38      	it	cc
 8016e1e:	2001      	movcc	r0, #1
 8016e20:	f7e9 fb70 	bl	8000504 <__aeabi_ui2d>
 8016e24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016e26:	4680      	mov	r8, r0
 8016e28:	4689      	mov	r9, r1
 8016e2a:	bb13      	cbnz	r3, 8016e72 <_strtod_l+0xba2>
 8016e2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016e30:	9014      	str	r0, [sp, #80]	; 0x50
 8016e32:	9315      	str	r3, [sp, #84]	; 0x54
 8016e34:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016e38:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016e3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016e3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016e40:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016e44:	1a9b      	subs	r3, r3, r2
 8016e46:	930d      	str	r3, [sp, #52]	; 0x34
 8016e48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016e4c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8016e50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016e54:	f001 fe7c 	bl	8018b50 <__ulp>
 8016e58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016e5c:	ec53 2b10 	vmov	r2, r3, d0
 8016e60:	f7e9 fbca 	bl	80005f8 <__aeabi_dmul>
 8016e64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016e68:	f7e9 fa10 	bl	800028c <__adddf3>
 8016e6c:	4682      	mov	sl, r0
 8016e6e:	468b      	mov	fp, r1
 8016e70:	e78f      	b.n	8016d92 <_strtod_l+0xac2>
 8016e72:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8016e76:	e7dd      	b.n	8016e34 <_strtod_l+0xb64>
 8016e78:	a311      	add	r3, pc, #68	; (adr r3, 8016ec0 <_strtod_l+0xbf0>)
 8016e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e7e:	f7e9 fe2d 	bl	8000adc <__aeabi_dcmplt>
 8016e82:	e7b4      	b.n	8016dee <_strtod_l+0xb1e>
 8016e84:	2300      	movs	r3, #0
 8016e86:	930e      	str	r3, [sp, #56]	; 0x38
 8016e88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016e8a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016e8c:	6013      	str	r3, [r2, #0]
 8016e8e:	f7ff ba65 	b.w	801635c <_strtod_l+0x8c>
 8016e92:	2b65      	cmp	r3, #101	; 0x65
 8016e94:	f43f ab5d 	beq.w	8016552 <_strtod_l+0x282>
 8016e98:	2b45      	cmp	r3, #69	; 0x45
 8016e9a:	f43f ab5a 	beq.w	8016552 <_strtod_l+0x282>
 8016e9e:	2201      	movs	r2, #1
 8016ea0:	f7ff bb92 	b.w	80165c8 <_strtod_l+0x2f8>
 8016ea4:	f3af 8000 	nop.w
 8016ea8:	94a03595 	.word	0x94a03595
 8016eac:	3fdfffff 	.word	0x3fdfffff
 8016eb0:	35afe535 	.word	0x35afe535
 8016eb4:	3fe00000 	.word	0x3fe00000
 8016eb8:	ffc00000 	.word	0xffc00000
 8016ebc:	41dfffff 	.word	0x41dfffff
 8016ec0:	94a03595 	.word	0x94a03595
 8016ec4:	3fcfffff 	.word	0x3fcfffff
 8016ec8:	3ff00000 	.word	0x3ff00000
 8016ecc:	7ff00000 	.word	0x7ff00000
 8016ed0:	7fe00000 	.word	0x7fe00000
 8016ed4:	7c9fffff 	.word	0x7c9fffff
 8016ed8:	3fe00000 	.word	0x3fe00000
 8016edc:	bff00000 	.word	0xbff00000
 8016ee0:	7fefffff 	.word	0x7fefffff

08016ee4 <_strtod_r>:
 8016ee4:	4b01      	ldr	r3, [pc, #4]	; (8016eec <_strtod_r+0x8>)
 8016ee6:	f7ff b9f3 	b.w	80162d0 <_strtod_l>
 8016eea:	bf00      	nop
 8016eec:	200002ac 	.word	0x200002ac

08016ef0 <_strtol_l.isra.0>:
 8016ef0:	2b01      	cmp	r3, #1
 8016ef2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ef6:	d001      	beq.n	8016efc <_strtol_l.isra.0+0xc>
 8016ef8:	2b24      	cmp	r3, #36	; 0x24
 8016efa:	d906      	bls.n	8016f0a <_strtol_l.isra.0+0x1a>
 8016efc:	f7fe f94e 	bl	801519c <__errno>
 8016f00:	2316      	movs	r3, #22
 8016f02:	6003      	str	r3, [r0, #0]
 8016f04:	2000      	movs	r0, #0
 8016f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f0a:	4f3a      	ldr	r7, [pc, #232]	; (8016ff4 <_strtol_l.isra.0+0x104>)
 8016f0c:	468e      	mov	lr, r1
 8016f0e:	4676      	mov	r6, lr
 8016f10:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8016f14:	5de5      	ldrb	r5, [r4, r7]
 8016f16:	f015 0508 	ands.w	r5, r5, #8
 8016f1a:	d1f8      	bne.n	8016f0e <_strtol_l.isra.0+0x1e>
 8016f1c:	2c2d      	cmp	r4, #45	; 0x2d
 8016f1e:	d134      	bne.n	8016f8a <_strtol_l.isra.0+0x9a>
 8016f20:	f89e 4000 	ldrb.w	r4, [lr]
 8016f24:	f04f 0801 	mov.w	r8, #1
 8016f28:	f106 0e02 	add.w	lr, r6, #2
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d05c      	beq.n	8016fea <_strtol_l.isra.0+0xfa>
 8016f30:	2b10      	cmp	r3, #16
 8016f32:	d10c      	bne.n	8016f4e <_strtol_l.isra.0+0x5e>
 8016f34:	2c30      	cmp	r4, #48	; 0x30
 8016f36:	d10a      	bne.n	8016f4e <_strtol_l.isra.0+0x5e>
 8016f38:	f89e 4000 	ldrb.w	r4, [lr]
 8016f3c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016f40:	2c58      	cmp	r4, #88	; 0x58
 8016f42:	d14d      	bne.n	8016fe0 <_strtol_l.isra.0+0xf0>
 8016f44:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8016f48:	2310      	movs	r3, #16
 8016f4a:	f10e 0e02 	add.w	lr, lr, #2
 8016f4e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8016f52:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8016f56:	2600      	movs	r6, #0
 8016f58:	fbbc f9f3 	udiv	r9, ip, r3
 8016f5c:	4635      	mov	r5, r6
 8016f5e:	fb03 ca19 	mls	sl, r3, r9, ip
 8016f62:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8016f66:	2f09      	cmp	r7, #9
 8016f68:	d818      	bhi.n	8016f9c <_strtol_l.isra.0+0xac>
 8016f6a:	463c      	mov	r4, r7
 8016f6c:	42a3      	cmp	r3, r4
 8016f6e:	dd24      	ble.n	8016fba <_strtol_l.isra.0+0xca>
 8016f70:	2e00      	cmp	r6, #0
 8016f72:	db1f      	blt.n	8016fb4 <_strtol_l.isra.0+0xc4>
 8016f74:	45a9      	cmp	r9, r5
 8016f76:	d31d      	bcc.n	8016fb4 <_strtol_l.isra.0+0xc4>
 8016f78:	d101      	bne.n	8016f7e <_strtol_l.isra.0+0x8e>
 8016f7a:	45a2      	cmp	sl, r4
 8016f7c:	db1a      	blt.n	8016fb4 <_strtol_l.isra.0+0xc4>
 8016f7e:	fb05 4503 	mla	r5, r5, r3, r4
 8016f82:	2601      	movs	r6, #1
 8016f84:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8016f88:	e7eb      	b.n	8016f62 <_strtol_l.isra.0+0x72>
 8016f8a:	2c2b      	cmp	r4, #43	; 0x2b
 8016f8c:	bf08      	it	eq
 8016f8e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8016f92:	46a8      	mov	r8, r5
 8016f94:	bf08      	it	eq
 8016f96:	f106 0e02 	addeq.w	lr, r6, #2
 8016f9a:	e7c7      	b.n	8016f2c <_strtol_l.isra.0+0x3c>
 8016f9c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8016fa0:	2f19      	cmp	r7, #25
 8016fa2:	d801      	bhi.n	8016fa8 <_strtol_l.isra.0+0xb8>
 8016fa4:	3c37      	subs	r4, #55	; 0x37
 8016fa6:	e7e1      	b.n	8016f6c <_strtol_l.isra.0+0x7c>
 8016fa8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8016fac:	2f19      	cmp	r7, #25
 8016fae:	d804      	bhi.n	8016fba <_strtol_l.isra.0+0xca>
 8016fb0:	3c57      	subs	r4, #87	; 0x57
 8016fb2:	e7db      	b.n	8016f6c <_strtol_l.isra.0+0x7c>
 8016fb4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8016fb8:	e7e4      	b.n	8016f84 <_strtol_l.isra.0+0x94>
 8016fba:	2e00      	cmp	r6, #0
 8016fbc:	da05      	bge.n	8016fca <_strtol_l.isra.0+0xda>
 8016fbe:	2322      	movs	r3, #34	; 0x22
 8016fc0:	6003      	str	r3, [r0, #0]
 8016fc2:	4665      	mov	r5, ip
 8016fc4:	b942      	cbnz	r2, 8016fd8 <_strtol_l.isra.0+0xe8>
 8016fc6:	4628      	mov	r0, r5
 8016fc8:	e79d      	b.n	8016f06 <_strtol_l.isra.0+0x16>
 8016fca:	f1b8 0f00 	cmp.w	r8, #0
 8016fce:	d000      	beq.n	8016fd2 <_strtol_l.isra.0+0xe2>
 8016fd0:	426d      	negs	r5, r5
 8016fd2:	2a00      	cmp	r2, #0
 8016fd4:	d0f7      	beq.n	8016fc6 <_strtol_l.isra.0+0xd6>
 8016fd6:	b10e      	cbz	r6, 8016fdc <_strtol_l.isra.0+0xec>
 8016fd8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8016fdc:	6011      	str	r1, [r2, #0]
 8016fde:	e7f2      	b.n	8016fc6 <_strtol_l.isra.0+0xd6>
 8016fe0:	2430      	movs	r4, #48	; 0x30
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d1b3      	bne.n	8016f4e <_strtol_l.isra.0+0x5e>
 8016fe6:	2308      	movs	r3, #8
 8016fe8:	e7b1      	b.n	8016f4e <_strtol_l.isra.0+0x5e>
 8016fea:	2c30      	cmp	r4, #48	; 0x30
 8016fec:	d0a4      	beq.n	8016f38 <_strtol_l.isra.0+0x48>
 8016fee:	230a      	movs	r3, #10
 8016ff0:	e7ad      	b.n	8016f4e <_strtol_l.isra.0+0x5e>
 8016ff2:	bf00      	nop
 8016ff4:	0801b389 	.word	0x0801b389

08016ff8 <_strtol_r>:
 8016ff8:	f7ff bf7a 	b.w	8016ef0 <_strtol_l.isra.0>

08016ffc <_write_r>:
 8016ffc:	b538      	push	{r3, r4, r5, lr}
 8016ffe:	4d07      	ldr	r5, [pc, #28]	; (801701c <_write_r+0x20>)
 8017000:	4604      	mov	r4, r0
 8017002:	4608      	mov	r0, r1
 8017004:	4611      	mov	r1, r2
 8017006:	2200      	movs	r2, #0
 8017008:	602a      	str	r2, [r5, #0]
 801700a:	461a      	mov	r2, r3
 801700c:	f7f0 f88b 	bl	8007126 <_write>
 8017010:	1c43      	adds	r3, r0, #1
 8017012:	d102      	bne.n	801701a <_write_r+0x1e>
 8017014:	682b      	ldr	r3, [r5, #0]
 8017016:	b103      	cbz	r3, 801701a <_write_r+0x1e>
 8017018:	6023      	str	r3, [r4, #0]
 801701a:	bd38      	pop	{r3, r4, r5, pc}
 801701c:	20008f10 	.word	0x20008f10

08017020 <_close_r>:
 8017020:	b538      	push	{r3, r4, r5, lr}
 8017022:	4d06      	ldr	r5, [pc, #24]	; (801703c <_close_r+0x1c>)
 8017024:	2300      	movs	r3, #0
 8017026:	4604      	mov	r4, r0
 8017028:	4608      	mov	r0, r1
 801702a:	602b      	str	r3, [r5, #0]
 801702c:	f7f0 f897 	bl	800715e <_close>
 8017030:	1c43      	adds	r3, r0, #1
 8017032:	d102      	bne.n	801703a <_close_r+0x1a>
 8017034:	682b      	ldr	r3, [r5, #0]
 8017036:	b103      	cbz	r3, 801703a <_close_r+0x1a>
 8017038:	6023      	str	r3, [r4, #0]
 801703a:	bd38      	pop	{r3, r4, r5, pc}
 801703c:	20008f10 	.word	0x20008f10

08017040 <quorem>:
 8017040:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017044:	6903      	ldr	r3, [r0, #16]
 8017046:	690c      	ldr	r4, [r1, #16]
 8017048:	42a3      	cmp	r3, r4
 801704a:	4607      	mov	r7, r0
 801704c:	f2c0 8081 	blt.w	8017152 <quorem+0x112>
 8017050:	3c01      	subs	r4, #1
 8017052:	f101 0814 	add.w	r8, r1, #20
 8017056:	f100 0514 	add.w	r5, r0, #20
 801705a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801705e:	9301      	str	r3, [sp, #4]
 8017060:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017064:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017068:	3301      	adds	r3, #1
 801706a:	429a      	cmp	r2, r3
 801706c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017070:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017074:	fbb2 f6f3 	udiv	r6, r2, r3
 8017078:	d331      	bcc.n	80170de <quorem+0x9e>
 801707a:	f04f 0e00 	mov.w	lr, #0
 801707e:	4640      	mov	r0, r8
 8017080:	46ac      	mov	ip, r5
 8017082:	46f2      	mov	sl, lr
 8017084:	f850 2b04 	ldr.w	r2, [r0], #4
 8017088:	b293      	uxth	r3, r2
 801708a:	fb06 e303 	mla	r3, r6, r3, lr
 801708e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8017092:	b29b      	uxth	r3, r3
 8017094:	ebaa 0303 	sub.w	r3, sl, r3
 8017098:	0c12      	lsrs	r2, r2, #16
 801709a:	f8dc a000 	ldr.w	sl, [ip]
 801709e:	fb06 e202 	mla	r2, r6, r2, lr
 80170a2:	fa13 f38a 	uxtah	r3, r3, sl
 80170a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80170aa:	fa1f fa82 	uxth.w	sl, r2
 80170ae:	f8dc 2000 	ldr.w	r2, [ip]
 80170b2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80170b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80170ba:	b29b      	uxth	r3, r3
 80170bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80170c0:	4581      	cmp	r9, r0
 80170c2:	f84c 3b04 	str.w	r3, [ip], #4
 80170c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80170ca:	d2db      	bcs.n	8017084 <quorem+0x44>
 80170cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80170d0:	b92b      	cbnz	r3, 80170de <quorem+0x9e>
 80170d2:	9b01      	ldr	r3, [sp, #4]
 80170d4:	3b04      	subs	r3, #4
 80170d6:	429d      	cmp	r5, r3
 80170d8:	461a      	mov	r2, r3
 80170da:	d32e      	bcc.n	801713a <quorem+0xfa>
 80170dc:	613c      	str	r4, [r7, #16]
 80170de:	4638      	mov	r0, r7
 80170e0:	f001 fc92 	bl	8018a08 <__mcmp>
 80170e4:	2800      	cmp	r0, #0
 80170e6:	db24      	blt.n	8017132 <quorem+0xf2>
 80170e8:	3601      	adds	r6, #1
 80170ea:	4628      	mov	r0, r5
 80170ec:	f04f 0c00 	mov.w	ip, #0
 80170f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80170f4:	f8d0 e000 	ldr.w	lr, [r0]
 80170f8:	b293      	uxth	r3, r2
 80170fa:	ebac 0303 	sub.w	r3, ip, r3
 80170fe:	0c12      	lsrs	r2, r2, #16
 8017100:	fa13 f38e 	uxtah	r3, r3, lr
 8017104:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017108:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801710c:	b29b      	uxth	r3, r3
 801710e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017112:	45c1      	cmp	r9, r8
 8017114:	f840 3b04 	str.w	r3, [r0], #4
 8017118:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801711c:	d2e8      	bcs.n	80170f0 <quorem+0xb0>
 801711e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017122:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017126:	b922      	cbnz	r2, 8017132 <quorem+0xf2>
 8017128:	3b04      	subs	r3, #4
 801712a:	429d      	cmp	r5, r3
 801712c:	461a      	mov	r2, r3
 801712e:	d30a      	bcc.n	8017146 <quorem+0x106>
 8017130:	613c      	str	r4, [r7, #16]
 8017132:	4630      	mov	r0, r6
 8017134:	b003      	add	sp, #12
 8017136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801713a:	6812      	ldr	r2, [r2, #0]
 801713c:	3b04      	subs	r3, #4
 801713e:	2a00      	cmp	r2, #0
 8017140:	d1cc      	bne.n	80170dc <quorem+0x9c>
 8017142:	3c01      	subs	r4, #1
 8017144:	e7c7      	b.n	80170d6 <quorem+0x96>
 8017146:	6812      	ldr	r2, [r2, #0]
 8017148:	3b04      	subs	r3, #4
 801714a:	2a00      	cmp	r2, #0
 801714c:	d1f0      	bne.n	8017130 <quorem+0xf0>
 801714e:	3c01      	subs	r4, #1
 8017150:	e7eb      	b.n	801712a <quorem+0xea>
 8017152:	2000      	movs	r0, #0
 8017154:	e7ee      	b.n	8017134 <quorem+0xf4>
	...

08017158 <_dtoa_r>:
 8017158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801715c:	ed2d 8b02 	vpush	{d8}
 8017160:	ec57 6b10 	vmov	r6, r7, d0
 8017164:	b095      	sub	sp, #84	; 0x54
 8017166:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017168:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801716c:	9105      	str	r1, [sp, #20]
 801716e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8017172:	4604      	mov	r4, r0
 8017174:	9209      	str	r2, [sp, #36]	; 0x24
 8017176:	930f      	str	r3, [sp, #60]	; 0x3c
 8017178:	b975      	cbnz	r5, 8017198 <_dtoa_r+0x40>
 801717a:	2010      	movs	r0, #16
 801717c:	f7fe f838 	bl	80151f0 <malloc>
 8017180:	4602      	mov	r2, r0
 8017182:	6260      	str	r0, [r4, #36]	; 0x24
 8017184:	b920      	cbnz	r0, 8017190 <_dtoa_r+0x38>
 8017186:	4bb2      	ldr	r3, [pc, #712]	; (8017450 <_dtoa_r+0x2f8>)
 8017188:	21ea      	movs	r1, #234	; 0xea
 801718a:	48b2      	ldr	r0, [pc, #712]	; (8017454 <_dtoa_r+0x2fc>)
 801718c:	f001 ffe0 	bl	8019150 <__assert_func>
 8017190:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017194:	6005      	str	r5, [r0, #0]
 8017196:	60c5      	str	r5, [r0, #12]
 8017198:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801719a:	6819      	ldr	r1, [r3, #0]
 801719c:	b151      	cbz	r1, 80171b4 <_dtoa_r+0x5c>
 801719e:	685a      	ldr	r2, [r3, #4]
 80171a0:	604a      	str	r2, [r1, #4]
 80171a2:	2301      	movs	r3, #1
 80171a4:	4093      	lsls	r3, r2
 80171a6:	608b      	str	r3, [r1, #8]
 80171a8:	4620      	mov	r0, r4
 80171aa:	f001 f9a5 	bl	80184f8 <_Bfree>
 80171ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80171b0:	2200      	movs	r2, #0
 80171b2:	601a      	str	r2, [r3, #0]
 80171b4:	1e3b      	subs	r3, r7, #0
 80171b6:	bfb9      	ittee	lt
 80171b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80171bc:	9303      	strlt	r3, [sp, #12]
 80171be:	2300      	movge	r3, #0
 80171c0:	f8c8 3000 	strge.w	r3, [r8]
 80171c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80171c8:	4ba3      	ldr	r3, [pc, #652]	; (8017458 <_dtoa_r+0x300>)
 80171ca:	bfbc      	itt	lt
 80171cc:	2201      	movlt	r2, #1
 80171ce:	f8c8 2000 	strlt.w	r2, [r8]
 80171d2:	ea33 0309 	bics.w	r3, r3, r9
 80171d6:	d11b      	bne.n	8017210 <_dtoa_r+0xb8>
 80171d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80171da:	f242 730f 	movw	r3, #9999	; 0x270f
 80171de:	6013      	str	r3, [r2, #0]
 80171e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80171e4:	4333      	orrs	r3, r6
 80171e6:	f000 857a 	beq.w	8017cde <_dtoa_r+0xb86>
 80171ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80171ec:	b963      	cbnz	r3, 8017208 <_dtoa_r+0xb0>
 80171ee:	4b9b      	ldr	r3, [pc, #620]	; (801745c <_dtoa_r+0x304>)
 80171f0:	e024      	b.n	801723c <_dtoa_r+0xe4>
 80171f2:	4b9b      	ldr	r3, [pc, #620]	; (8017460 <_dtoa_r+0x308>)
 80171f4:	9300      	str	r3, [sp, #0]
 80171f6:	3308      	adds	r3, #8
 80171f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80171fa:	6013      	str	r3, [r2, #0]
 80171fc:	9800      	ldr	r0, [sp, #0]
 80171fe:	b015      	add	sp, #84	; 0x54
 8017200:	ecbd 8b02 	vpop	{d8}
 8017204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017208:	4b94      	ldr	r3, [pc, #592]	; (801745c <_dtoa_r+0x304>)
 801720a:	9300      	str	r3, [sp, #0]
 801720c:	3303      	adds	r3, #3
 801720e:	e7f3      	b.n	80171f8 <_dtoa_r+0xa0>
 8017210:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017214:	2200      	movs	r2, #0
 8017216:	ec51 0b17 	vmov	r0, r1, d7
 801721a:	2300      	movs	r3, #0
 801721c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8017220:	f7e9 fc52 	bl	8000ac8 <__aeabi_dcmpeq>
 8017224:	4680      	mov	r8, r0
 8017226:	b158      	cbz	r0, 8017240 <_dtoa_r+0xe8>
 8017228:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801722a:	2301      	movs	r3, #1
 801722c:	6013      	str	r3, [r2, #0]
 801722e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017230:	2b00      	cmp	r3, #0
 8017232:	f000 8551 	beq.w	8017cd8 <_dtoa_r+0xb80>
 8017236:	488b      	ldr	r0, [pc, #556]	; (8017464 <_dtoa_r+0x30c>)
 8017238:	6018      	str	r0, [r3, #0]
 801723a:	1e43      	subs	r3, r0, #1
 801723c:	9300      	str	r3, [sp, #0]
 801723e:	e7dd      	b.n	80171fc <_dtoa_r+0xa4>
 8017240:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8017244:	aa12      	add	r2, sp, #72	; 0x48
 8017246:	a913      	add	r1, sp, #76	; 0x4c
 8017248:	4620      	mov	r0, r4
 801724a:	f001 fcfd 	bl	8018c48 <__d2b>
 801724e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017252:	4683      	mov	fp, r0
 8017254:	2d00      	cmp	r5, #0
 8017256:	d07c      	beq.n	8017352 <_dtoa_r+0x1fa>
 8017258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801725a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801725e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017262:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8017266:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801726a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801726e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017272:	4b7d      	ldr	r3, [pc, #500]	; (8017468 <_dtoa_r+0x310>)
 8017274:	2200      	movs	r2, #0
 8017276:	4630      	mov	r0, r6
 8017278:	4639      	mov	r1, r7
 801727a:	f7e9 f805 	bl	8000288 <__aeabi_dsub>
 801727e:	a36e      	add	r3, pc, #440	; (adr r3, 8017438 <_dtoa_r+0x2e0>)
 8017280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017284:	f7e9 f9b8 	bl	80005f8 <__aeabi_dmul>
 8017288:	a36d      	add	r3, pc, #436	; (adr r3, 8017440 <_dtoa_r+0x2e8>)
 801728a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801728e:	f7e8 fffd 	bl	800028c <__adddf3>
 8017292:	4606      	mov	r6, r0
 8017294:	4628      	mov	r0, r5
 8017296:	460f      	mov	r7, r1
 8017298:	f7e9 f944 	bl	8000524 <__aeabi_i2d>
 801729c:	a36a      	add	r3, pc, #424	; (adr r3, 8017448 <_dtoa_r+0x2f0>)
 801729e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172a2:	f7e9 f9a9 	bl	80005f8 <__aeabi_dmul>
 80172a6:	4602      	mov	r2, r0
 80172a8:	460b      	mov	r3, r1
 80172aa:	4630      	mov	r0, r6
 80172ac:	4639      	mov	r1, r7
 80172ae:	f7e8 ffed 	bl	800028c <__adddf3>
 80172b2:	4606      	mov	r6, r0
 80172b4:	460f      	mov	r7, r1
 80172b6:	f7e9 fc4f 	bl	8000b58 <__aeabi_d2iz>
 80172ba:	2200      	movs	r2, #0
 80172bc:	4682      	mov	sl, r0
 80172be:	2300      	movs	r3, #0
 80172c0:	4630      	mov	r0, r6
 80172c2:	4639      	mov	r1, r7
 80172c4:	f7e9 fc0a 	bl	8000adc <__aeabi_dcmplt>
 80172c8:	b148      	cbz	r0, 80172de <_dtoa_r+0x186>
 80172ca:	4650      	mov	r0, sl
 80172cc:	f7e9 f92a 	bl	8000524 <__aeabi_i2d>
 80172d0:	4632      	mov	r2, r6
 80172d2:	463b      	mov	r3, r7
 80172d4:	f7e9 fbf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80172d8:	b908      	cbnz	r0, 80172de <_dtoa_r+0x186>
 80172da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80172de:	f1ba 0f16 	cmp.w	sl, #22
 80172e2:	d854      	bhi.n	801738e <_dtoa_r+0x236>
 80172e4:	4b61      	ldr	r3, [pc, #388]	; (801746c <_dtoa_r+0x314>)
 80172e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80172ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80172f2:	f7e9 fbf3 	bl	8000adc <__aeabi_dcmplt>
 80172f6:	2800      	cmp	r0, #0
 80172f8:	d04b      	beq.n	8017392 <_dtoa_r+0x23a>
 80172fa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80172fe:	2300      	movs	r3, #0
 8017300:	930e      	str	r3, [sp, #56]	; 0x38
 8017302:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017304:	1b5d      	subs	r5, r3, r5
 8017306:	1e6b      	subs	r3, r5, #1
 8017308:	9304      	str	r3, [sp, #16]
 801730a:	bf43      	ittte	mi
 801730c:	2300      	movmi	r3, #0
 801730e:	f1c5 0801 	rsbmi	r8, r5, #1
 8017312:	9304      	strmi	r3, [sp, #16]
 8017314:	f04f 0800 	movpl.w	r8, #0
 8017318:	f1ba 0f00 	cmp.w	sl, #0
 801731c:	db3b      	blt.n	8017396 <_dtoa_r+0x23e>
 801731e:	9b04      	ldr	r3, [sp, #16]
 8017320:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8017324:	4453      	add	r3, sl
 8017326:	9304      	str	r3, [sp, #16]
 8017328:	2300      	movs	r3, #0
 801732a:	9306      	str	r3, [sp, #24]
 801732c:	9b05      	ldr	r3, [sp, #20]
 801732e:	2b09      	cmp	r3, #9
 8017330:	d869      	bhi.n	8017406 <_dtoa_r+0x2ae>
 8017332:	2b05      	cmp	r3, #5
 8017334:	bfc4      	itt	gt
 8017336:	3b04      	subgt	r3, #4
 8017338:	9305      	strgt	r3, [sp, #20]
 801733a:	9b05      	ldr	r3, [sp, #20]
 801733c:	f1a3 0302 	sub.w	r3, r3, #2
 8017340:	bfcc      	ite	gt
 8017342:	2500      	movgt	r5, #0
 8017344:	2501      	movle	r5, #1
 8017346:	2b03      	cmp	r3, #3
 8017348:	d869      	bhi.n	801741e <_dtoa_r+0x2c6>
 801734a:	e8df f003 	tbb	[pc, r3]
 801734e:	4e2c      	.short	0x4e2c
 8017350:	5a4c      	.short	0x5a4c
 8017352:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8017356:	441d      	add	r5, r3
 8017358:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801735c:	2b20      	cmp	r3, #32
 801735e:	bfc1      	itttt	gt
 8017360:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017364:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8017368:	fa09 f303 	lslgt.w	r3, r9, r3
 801736c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8017370:	bfda      	itte	le
 8017372:	f1c3 0320 	rsble	r3, r3, #32
 8017376:	fa06 f003 	lslle.w	r0, r6, r3
 801737a:	4318      	orrgt	r0, r3
 801737c:	f7e9 f8c2 	bl	8000504 <__aeabi_ui2d>
 8017380:	2301      	movs	r3, #1
 8017382:	4606      	mov	r6, r0
 8017384:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8017388:	3d01      	subs	r5, #1
 801738a:	9310      	str	r3, [sp, #64]	; 0x40
 801738c:	e771      	b.n	8017272 <_dtoa_r+0x11a>
 801738e:	2301      	movs	r3, #1
 8017390:	e7b6      	b.n	8017300 <_dtoa_r+0x1a8>
 8017392:	900e      	str	r0, [sp, #56]	; 0x38
 8017394:	e7b5      	b.n	8017302 <_dtoa_r+0x1aa>
 8017396:	f1ca 0300 	rsb	r3, sl, #0
 801739a:	9306      	str	r3, [sp, #24]
 801739c:	2300      	movs	r3, #0
 801739e:	eba8 080a 	sub.w	r8, r8, sl
 80173a2:	930d      	str	r3, [sp, #52]	; 0x34
 80173a4:	e7c2      	b.n	801732c <_dtoa_r+0x1d4>
 80173a6:	2300      	movs	r3, #0
 80173a8:	9308      	str	r3, [sp, #32]
 80173aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	dc39      	bgt.n	8017424 <_dtoa_r+0x2cc>
 80173b0:	f04f 0901 	mov.w	r9, #1
 80173b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80173b8:	464b      	mov	r3, r9
 80173ba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80173be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80173c0:	2200      	movs	r2, #0
 80173c2:	6042      	str	r2, [r0, #4]
 80173c4:	2204      	movs	r2, #4
 80173c6:	f102 0614 	add.w	r6, r2, #20
 80173ca:	429e      	cmp	r6, r3
 80173cc:	6841      	ldr	r1, [r0, #4]
 80173ce:	d92f      	bls.n	8017430 <_dtoa_r+0x2d8>
 80173d0:	4620      	mov	r0, r4
 80173d2:	f001 f851 	bl	8018478 <_Balloc>
 80173d6:	9000      	str	r0, [sp, #0]
 80173d8:	2800      	cmp	r0, #0
 80173da:	d14b      	bne.n	8017474 <_dtoa_r+0x31c>
 80173dc:	4b24      	ldr	r3, [pc, #144]	; (8017470 <_dtoa_r+0x318>)
 80173de:	4602      	mov	r2, r0
 80173e0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80173e4:	e6d1      	b.n	801718a <_dtoa_r+0x32>
 80173e6:	2301      	movs	r3, #1
 80173e8:	e7de      	b.n	80173a8 <_dtoa_r+0x250>
 80173ea:	2300      	movs	r3, #0
 80173ec:	9308      	str	r3, [sp, #32]
 80173ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173f0:	eb0a 0903 	add.w	r9, sl, r3
 80173f4:	f109 0301 	add.w	r3, r9, #1
 80173f8:	2b01      	cmp	r3, #1
 80173fa:	9301      	str	r3, [sp, #4]
 80173fc:	bfb8      	it	lt
 80173fe:	2301      	movlt	r3, #1
 8017400:	e7dd      	b.n	80173be <_dtoa_r+0x266>
 8017402:	2301      	movs	r3, #1
 8017404:	e7f2      	b.n	80173ec <_dtoa_r+0x294>
 8017406:	2501      	movs	r5, #1
 8017408:	2300      	movs	r3, #0
 801740a:	9305      	str	r3, [sp, #20]
 801740c:	9508      	str	r5, [sp, #32]
 801740e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8017412:	2200      	movs	r2, #0
 8017414:	f8cd 9004 	str.w	r9, [sp, #4]
 8017418:	2312      	movs	r3, #18
 801741a:	9209      	str	r2, [sp, #36]	; 0x24
 801741c:	e7cf      	b.n	80173be <_dtoa_r+0x266>
 801741e:	2301      	movs	r3, #1
 8017420:	9308      	str	r3, [sp, #32]
 8017422:	e7f4      	b.n	801740e <_dtoa_r+0x2b6>
 8017424:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8017428:	f8cd 9004 	str.w	r9, [sp, #4]
 801742c:	464b      	mov	r3, r9
 801742e:	e7c6      	b.n	80173be <_dtoa_r+0x266>
 8017430:	3101      	adds	r1, #1
 8017432:	6041      	str	r1, [r0, #4]
 8017434:	0052      	lsls	r2, r2, #1
 8017436:	e7c6      	b.n	80173c6 <_dtoa_r+0x26e>
 8017438:	636f4361 	.word	0x636f4361
 801743c:	3fd287a7 	.word	0x3fd287a7
 8017440:	8b60c8b3 	.word	0x8b60c8b3
 8017444:	3fc68a28 	.word	0x3fc68a28
 8017448:	509f79fb 	.word	0x509f79fb
 801744c:	3fd34413 	.word	0x3fd34413
 8017450:	0801b496 	.word	0x0801b496
 8017454:	0801b4ad 	.word	0x0801b4ad
 8017458:	7ff00000 	.word	0x7ff00000
 801745c:	0801b492 	.word	0x0801b492
 8017460:	0801b489 	.word	0x0801b489
 8017464:	0801b30d 	.word	0x0801b30d
 8017468:	3ff80000 	.word	0x3ff80000
 801746c:	0801b628 	.word	0x0801b628
 8017470:	0801b50c 	.word	0x0801b50c
 8017474:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017476:	9a00      	ldr	r2, [sp, #0]
 8017478:	601a      	str	r2, [r3, #0]
 801747a:	9b01      	ldr	r3, [sp, #4]
 801747c:	2b0e      	cmp	r3, #14
 801747e:	f200 80ad 	bhi.w	80175dc <_dtoa_r+0x484>
 8017482:	2d00      	cmp	r5, #0
 8017484:	f000 80aa 	beq.w	80175dc <_dtoa_r+0x484>
 8017488:	f1ba 0f00 	cmp.w	sl, #0
 801748c:	dd36      	ble.n	80174fc <_dtoa_r+0x3a4>
 801748e:	4ac3      	ldr	r2, [pc, #780]	; (801779c <_dtoa_r+0x644>)
 8017490:	f00a 030f 	and.w	r3, sl, #15
 8017494:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017498:	ed93 7b00 	vldr	d7, [r3]
 801749c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80174a0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80174a4:	eeb0 8a47 	vmov.f32	s16, s14
 80174a8:	eef0 8a67 	vmov.f32	s17, s15
 80174ac:	d016      	beq.n	80174dc <_dtoa_r+0x384>
 80174ae:	4bbc      	ldr	r3, [pc, #752]	; (80177a0 <_dtoa_r+0x648>)
 80174b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80174b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80174b8:	f7e9 f9c8 	bl	800084c <__aeabi_ddiv>
 80174bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80174c0:	f007 070f 	and.w	r7, r7, #15
 80174c4:	2503      	movs	r5, #3
 80174c6:	4eb6      	ldr	r6, [pc, #728]	; (80177a0 <_dtoa_r+0x648>)
 80174c8:	b957      	cbnz	r7, 80174e0 <_dtoa_r+0x388>
 80174ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80174ce:	ec53 2b18 	vmov	r2, r3, d8
 80174d2:	f7e9 f9bb 	bl	800084c <__aeabi_ddiv>
 80174d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80174da:	e029      	b.n	8017530 <_dtoa_r+0x3d8>
 80174dc:	2502      	movs	r5, #2
 80174de:	e7f2      	b.n	80174c6 <_dtoa_r+0x36e>
 80174e0:	07f9      	lsls	r1, r7, #31
 80174e2:	d508      	bpl.n	80174f6 <_dtoa_r+0x39e>
 80174e4:	ec51 0b18 	vmov	r0, r1, d8
 80174e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80174ec:	f7e9 f884 	bl	80005f8 <__aeabi_dmul>
 80174f0:	ec41 0b18 	vmov	d8, r0, r1
 80174f4:	3501      	adds	r5, #1
 80174f6:	107f      	asrs	r7, r7, #1
 80174f8:	3608      	adds	r6, #8
 80174fa:	e7e5      	b.n	80174c8 <_dtoa_r+0x370>
 80174fc:	f000 80a6 	beq.w	801764c <_dtoa_r+0x4f4>
 8017500:	f1ca 0600 	rsb	r6, sl, #0
 8017504:	4ba5      	ldr	r3, [pc, #660]	; (801779c <_dtoa_r+0x644>)
 8017506:	4fa6      	ldr	r7, [pc, #664]	; (80177a0 <_dtoa_r+0x648>)
 8017508:	f006 020f 	and.w	r2, r6, #15
 801750c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017514:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017518:	f7e9 f86e 	bl	80005f8 <__aeabi_dmul>
 801751c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017520:	1136      	asrs	r6, r6, #4
 8017522:	2300      	movs	r3, #0
 8017524:	2502      	movs	r5, #2
 8017526:	2e00      	cmp	r6, #0
 8017528:	f040 8085 	bne.w	8017636 <_dtoa_r+0x4de>
 801752c:	2b00      	cmp	r3, #0
 801752e:	d1d2      	bne.n	80174d6 <_dtoa_r+0x37e>
 8017530:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017532:	2b00      	cmp	r3, #0
 8017534:	f000 808c 	beq.w	8017650 <_dtoa_r+0x4f8>
 8017538:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801753c:	4b99      	ldr	r3, [pc, #612]	; (80177a4 <_dtoa_r+0x64c>)
 801753e:	2200      	movs	r2, #0
 8017540:	4630      	mov	r0, r6
 8017542:	4639      	mov	r1, r7
 8017544:	f7e9 faca 	bl	8000adc <__aeabi_dcmplt>
 8017548:	2800      	cmp	r0, #0
 801754a:	f000 8081 	beq.w	8017650 <_dtoa_r+0x4f8>
 801754e:	9b01      	ldr	r3, [sp, #4]
 8017550:	2b00      	cmp	r3, #0
 8017552:	d07d      	beq.n	8017650 <_dtoa_r+0x4f8>
 8017554:	f1b9 0f00 	cmp.w	r9, #0
 8017558:	dd3c      	ble.n	80175d4 <_dtoa_r+0x47c>
 801755a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801755e:	9307      	str	r3, [sp, #28]
 8017560:	2200      	movs	r2, #0
 8017562:	4b91      	ldr	r3, [pc, #580]	; (80177a8 <_dtoa_r+0x650>)
 8017564:	4630      	mov	r0, r6
 8017566:	4639      	mov	r1, r7
 8017568:	f7e9 f846 	bl	80005f8 <__aeabi_dmul>
 801756c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017570:	3501      	adds	r5, #1
 8017572:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8017576:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801757a:	4628      	mov	r0, r5
 801757c:	f7e8 ffd2 	bl	8000524 <__aeabi_i2d>
 8017580:	4632      	mov	r2, r6
 8017582:	463b      	mov	r3, r7
 8017584:	f7e9 f838 	bl	80005f8 <__aeabi_dmul>
 8017588:	4b88      	ldr	r3, [pc, #544]	; (80177ac <_dtoa_r+0x654>)
 801758a:	2200      	movs	r2, #0
 801758c:	f7e8 fe7e 	bl	800028c <__adddf3>
 8017590:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8017594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017598:	9303      	str	r3, [sp, #12]
 801759a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801759c:	2b00      	cmp	r3, #0
 801759e:	d15c      	bne.n	801765a <_dtoa_r+0x502>
 80175a0:	4b83      	ldr	r3, [pc, #524]	; (80177b0 <_dtoa_r+0x658>)
 80175a2:	2200      	movs	r2, #0
 80175a4:	4630      	mov	r0, r6
 80175a6:	4639      	mov	r1, r7
 80175a8:	f7e8 fe6e 	bl	8000288 <__aeabi_dsub>
 80175ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80175b0:	4606      	mov	r6, r0
 80175b2:	460f      	mov	r7, r1
 80175b4:	f7e9 fab0 	bl	8000b18 <__aeabi_dcmpgt>
 80175b8:	2800      	cmp	r0, #0
 80175ba:	f040 8296 	bne.w	8017aea <_dtoa_r+0x992>
 80175be:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80175c2:	4630      	mov	r0, r6
 80175c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80175c8:	4639      	mov	r1, r7
 80175ca:	f7e9 fa87 	bl	8000adc <__aeabi_dcmplt>
 80175ce:	2800      	cmp	r0, #0
 80175d0:	f040 8288 	bne.w	8017ae4 <_dtoa_r+0x98c>
 80175d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80175d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80175dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80175de:	2b00      	cmp	r3, #0
 80175e0:	f2c0 8158 	blt.w	8017894 <_dtoa_r+0x73c>
 80175e4:	f1ba 0f0e 	cmp.w	sl, #14
 80175e8:	f300 8154 	bgt.w	8017894 <_dtoa_r+0x73c>
 80175ec:	4b6b      	ldr	r3, [pc, #428]	; (801779c <_dtoa_r+0x644>)
 80175ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80175f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80175f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	f280 80e3 	bge.w	80177c4 <_dtoa_r+0x66c>
 80175fe:	9b01      	ldr	r3, [sp, #4]
 8017600:	2b00      	cmp	r3, #0
 8017602:	f300 80df 	bgt.w	80177c4 <_dtoa_r+0x66c>
 8017606:	f040 826d 	bne.w	8017ae4 <_dtoa_r+0x98c>
 801760a:	4b69      	ldr	r3, [pc, #420]	; (80177b0 <_dtoa_r+0x658>)
 801760c:	2200      	movs	r2, #0
 801760e:	4640      	mov	r0, r8
 8017610:	4649      	mov	r1, r9
 8017612:	f7e8 fff1 	bl	80005f8 <__aeabi_dmul>
 8017616:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801761a:	f7e9 fa73 	bl	8000b04 <__aeabi_dcmpge>
 801761e:	9e01      	ldr	r6, [sp, #4]
 8017620:	4637      	mov	r7, r6
 8017622:	2800      	cmp	r0, #0
 8017624:	f040 8243 	bne.w	8017aae <_dtoa_r+0x956>
 8017628:	9d00      	ldr	r5, [sp, #0]
 801762a:	2331      	movs	r3, #49	; 0x31
 801762c:	f805 3b01 	strb.w	r3, [r5], #1
 8017630:	f10a 0a01 	add.w	sl, sl, #1
 8017634:	e23f      	b.n	8017ab6 <_dtoa_r+0x95e>
 8017636:	07f2      	lsls	r2, r6, #31
 8017638:	d505      	bpl.n	8017646 <_dtoa_r+0x4ee>
 801763a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801763e:	f7e8 ffdb 	bl	80005f8 <__aeabi_dmul>
 8017642:	3501      	adds	r5, #1
 8017644:	2301      	movs	r3, #1
 8017646:	1076      	asrs	r6, r6, #1
 8017648:	3708      	adds	r7, #8
 801764a:	e76c      	b.n	8017526 <_dtoa_r+0x3ce>
 801764c:	2502      	movs	r5, #2
 801764e:	e76f      	b.n	8017530 <_dtoa_r+0x3d8>
 8017650:	9b01      	ldr	r3, [sp, #4]
 8017652:	f8cd a01c 	str.w	sl, [sp, #28]
 8017656:	930c      	str	r3, [sp, #48]	; 0x30
 8017658:	e78d      	b.n	8017576 <_dtoa_r+0x41e>
 801765a:	9900      	ldr	r1, [sp, #0]
 801765c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801765e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017660:	4b4e      	ldr	r3, [pc, #312]	; (801779c <_dtoa_r+0x644>)
 8017662:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017666:	4401      	add	r1, r0
 8017668:	9102      	str	r1, [sp, #8]
 801766a:	9908      	ldr	r1, [sp, #32]
 801766c:	eeb0 8a47 	vmov.f32	s16, s14
 8017670:	eef0 8a67 	vmov.f32	s17, s15
 8017674:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017678:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801767c:	2900      	cmp	r1, #0
 801767e:	d045      	beq.n	801770c <_dtoa_r+0x5b4>
 8017680:	494c      	ldr	r1, [pc, #304]	; (80177b4 <_dtoa_r+0x65c>)
 8017682:	2000      	movs	r0, #0
 8017684:	f7e9 f8e2 	bl	800084c <__aeabi_ddiv>
 8017688:	ec53 2b18 	vmov	r2, r3, d8
 801768c:	f7e8 fdfc 	bl	8000288 <__aeabi_dsub>
 8017690:	9d00      	ldr	r5, [sp, #0]
 8017692:	ec41 0b18 	vmov	d8, r0, r1
 8017696:	4639      	mov	r1, r7
 8017698:	4630      	mov	r0, r6
 801769a:	f7e9 fa5d 	bl	8000b58 <__aeabi_d2iz>
 801769e:	900c      	str	r0, [sp, #48]	; 0x30
 80176a0:	f7e8 ff40 	bl	8000524 <__aeabi_i2d>
 80176a4:	4602      	mov	r2, r0
 80176a6:	460b      	mov	r3, r1
 80176a8:	4630      	mov	r0, r6
 80176aa:	4639      	mov	r1, r7
 80176ac:	f7e8 fdec 	bl	8000288 <__aeabi_dsub>
 80176b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80176b2:	3330      	adds	r3, #48	; 0x30
 80176b4:	f805 3b01 	strb.w	r3, [r5], #1
 80176b8:	ec53 2b18 	vmov	r2, r3, d8
 80176bc:	4606      	mov	r6, r0
 80176be:	460f      	mov	r7, r1
 80176c0:	f7e9 fa0c 	bl	8000adc <__aeabi_dcmplt>
 80176c4:	2800      	cmp	r0, #0
 80176c6:	d165      	bne.n	8017794 <_dtoa_r+0x63c>
 80176c8:	4632      	mov	r2, r6
 80176ca:	463b      	mov	r3, r7
 80176cc:	4935      	ldr	r1, [pc, #212]	; (80177a4 <_dtoa_r+0x64c>)
 80176ce:	2000      	movs	r0, #0
 80176d0:	f7e8 fdda 	bl	8000288 <__aeabi_dsub>
 80176d4:	ec53 2b18 	vmov	r2, r3, d8
 80176d8:	f7e9 fa00 	bl	8000adc <__aeabi_dcmplt>
 80176dc:	2800      	cmp	r0, #0
 80176de:	f040 80b9 	bne.w	8017854 <_dtoa_r+0x6fc>
 80176e2:	9b02      	ldr	r3, [sp, #8]
 80176e4:	429d      	cmp	r5, r3
 80176e6:	f43f af75 	beq.w	80175d4 <_dtoa_r+0x47c>
 80176ea:	4b2f      	ldr	r3, [pc, #188]	; (80177a8 <_dtoa_r+0x650>)
 80176ec:	ec51 0b18 	vmov	r0, r1, d8
 80176f0:	2200      	movs	r2, #0
 80176f2:	f7e8 ff81 	bl	80005f8 <__aeabi_dmul>
 80176f6:	4b2c      	ldr	r3, [pc, #176]	; (80177a8 <_dtoa_r+0x650>)
 80176f8:	ec41 0b18 	vmov	d8, r0, r1
 80176fc:	2200      	movs	r2, #0
 80176fe:	4630      	mov	r0, r6
 8017700:	4639      	mov	r1, r7
 8017702:	f7e8 ff79 	bl	80005f8 <__aeabi_dmul>
 8017706:	4606      	mov	r6, r0
 8017708:	460f      	mov	r7, r1
 801770a:	e7c4      	b.n	8017696 <_dtoa_r+0x53e>
 801770c:	ec51 0b17 	vmov	r0, r1, d7
 8017710:	f7e8 ff72 	bl	80005f8 <__aeabi_dmul>
 8017714:	9b02      	ldr	r3, [sp, #8]
 8017716:	9d00      	ldr	r5, [sp, #0]
 8017718:	930c      	str	r3, [sp, #48]	; 0x30
 801771a:	ec41 0b18 	vmov	d8, r0, r1
 801771e:	4639      	mov	r1, r7
 8017720:	4630      	mov	r0, r6
 8017722:	f7e9 fa19 	bl	8000b58 <__aeabi_d2iz>
 8017726:	9011      	str	r0, [sp, #68]	; 0x44
 8017728:	f7e8 fefc 	bl	8000524 <__aeabi_i2d>
 801772c:	4602      	mov	r2, r0
 801772e:	460b      	mov	r3, r1
 8017730:	4630      	mov	r0, r6
 8017732:	4639      	mov	r1, r7
 8017734:	f7e8 fda8 	bl	8000288 <__aeabi_dsub>
 8017738:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801773a:	3330      	adds	r3, #48	; 0x30
 801773c:	f805 3b01 	strb.w	r3, [r5], #1
 8017740:	9b02      	ldr	r3, [sp, #8]
 8017742:	429d      	cmp	r5, r3
 8017744:	4606      	mov	r6, r0
 8017746:	460f      	mov	r7, r1
 8017748:	f04f 0200 	mov.w	r2, #0
 801774c:	d134      	bne.n	80177b8 <_dtoa_r+0x660>
 801774e:	4b19      	ldr	r3, [pc, #100]	; (80177b4 <_dtoa_r+0x65c>)
 8017750:	ec51 0b18 	vmov	r0, r1, d8
 8017754:	f7e8 fd9a 	bl	800028c <__adddf3>
 8017758:	4602      	mov	r2, r0
 801775a:	460b      	mov	r3, r1
 801775c:	4630      	mov	r0, r6
 801775e:	4639      	mov	r1, r7
 8017760:	f7e9 f9da 	bl	8000b18 <__aeabi_dcmpgt>
 8017764:	2800      	cmp	r0, #0
 8017766:	d175      	bne.n	8017854 <_dtoa_r+0x6fc>
 8017768:	ec53 2b18 	vmov	r2, r3, d8
 801776c:	4911      	ldr	r1, [pc, #68]	; (80177b4 <_dtoa_r+0x65c>)
 801776e:	2000      	movs	r0, #0
 8017770:	f7e8 fd8a 	bl	8000288 <__aeabi_dsub>
 8017774:	4602      	mov	r2, r0
 8017776:	460b      	mov	r3, r1
 8017778:	4630      	mov	r0, r6
 801777a:	4639      	mov	r1, r7
 801777c:	f7e9 f9ae 	bl	8000adc <__aeabi_dcmplt>
 8017780:	2800      	cmp	r0, #0
 8017782:	f43f af27 	beq.w	80175d4 <_dtoa_r+0x47c>
 8017786:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017788:	1e6b      	subs	r3, r5, #1
 801778a:	930c      	str	r3, [sp, #48]	; 0x30
 801778c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017790:	2b30      	cmp	r3, #48	; 0x30
 8017792:	d0f8      	beq.n	8017786 <_dtoa_r+0x62e>
 8017794:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8017798:	e04a      	b.n	8017830 <_dtoa_r+0x6d8>
 801779a:	bf00      	nop
 801779c:	0801b628 	.word	0x0801b628
 80177a0:	0801b600 	.word	0x0801b600
 80177a4:	3ff00000 	.word	0x3ff00000
 80177a8:	40240000 	.word	0x40240000
 80177ac:	401c0000 	.word	0x401c0000
 80177b0:	40140000 	.word	0x40140000
 80177b4:	3fe00000 	.word	0x3fe00000
 80177b8:	4baf      	ldr	r3, [pc, #700]	; (8017a78 <_dtoa_r+0x920>)
 80177ba:	f7e8 ff1d 	bl	80005f8 <__aeabi_dmul>
 80177be:	4606      	mov	r6, r0
 80177c0:	460f      	mov	r7, r1
 80177c2:	e7ac      	b.n	801771e <_dtoa_r+0x5c6>
 80177c4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80177c8:	9d00      	ldr	r5, [sp, #0]
 80177ca:	4642      	mov	r2, r8
 80177cc:	464b      	mov	r3, r9
 80177ce:	4630      	mov	r0, r6
 80177d0:	4639      	mov	r1, r7
 80177d2:	f7e9 f83b 	bl	800084c <__aeabi_ddiv>
 80177d6:	f7e9 f9bf 	bl	8000b58 <__aeabi_d2iz>
 80177da:	9002      	str	r0, [sp, #8]
 80177dc:	f7e8 fea2 	bl	8000524 <__aeabi_i2d>
 80177e0:	4642      	mov	r2, r8
 80177e2:	464b      	mov	r3, r9
 80177e4:	f7e8 ff08 	bl	80005f8 <__aeabi_dmul>
 80177e8:	4602      	mov	r2, r0
 80177ea:	460b      	mov	r3, r1
 80177ec:	4630      	mov	r0, r6
 80177ee:	4639      	mov	r1, r7
 80177f0:	f7e8 fd4a 	bl	8000288 <__aeabi_dsub>
 80177f4:	9e02      	ldr	r6, [sp, #8]
 80177f6:	9f01      	ldr	r7, [sp, #4]
 80177f8:	3630      	adds	r6, #48	; 0x30
 80177fa:	f805 6b01 	strb.w	r6, [r5], #1
 80177fe:	9e00      	ldr	r6, [sp, #0]
 8017800:	1bae      	subs	r6, r5, r6
 8017802:	42b7      	cmp	r7, r6
 8017804:	4602      	mov	r2, r0
 8017806:	460b      	mov	r3, r1
 8017808:	d137      	bne.n	801787a <_dtoa_r+0x722>
 801780a:	f7e8 fd3f 	bl	800028c <__adddf3>
 801780e:	4642      	mov	r2, r8
 8017810:	464b      	mov	r3, r9
 8017812:	4606      	mov	r6, r0
 8017814:	460f      	mov	r7, r1
 8017816:	f7e9 f97f 	bl	8000b18 <__aeabi_dcmpgt>
 801781a:	b9c8      	cbnz	r0, 8017850 <_dtoa_r+0x6f8>
 801781c:	4642      	mov	r2, r8
 801781e:	464b      	mov	r3, r9
 8017820:	4630      	mov	r0, r6
 8017822:	4639      	mov	r1, r7
 8017824:	f7e9 f950 	bl	8000ac8 <__aeabi_dcmpeq>
 8017828:	b110      	cbz	r0, 8017830 <_dtoa_r+0x6d8>
 801782a:	9b02      	ldr	r3, [sp, #8]
 801782c:	07d9      	lsls	r1, r3, #31
 801782e:	d40f      	bmi.n	8017850 <_dtoa_r+0x6f8>
 8017830:	4620      	mov	r0, r4
 8017832:	4659      	mov	r1, fp
 8017834:	f000 fe60 	bl	80184f8 <_Bfree>
 8017838:	2300      	movs	r3, #0
 801783a:	702b      	strb	r3, [r5, #0]
 801783c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801783e:	f10a 0001 	add.w	r0, sl, #1
 8017842:	6018      	str	r0, [r3, #0]
 8017844:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017846:	2b00      	cmp	r3, #0
 8017848:	f43f acd8 	beq.w	80171fc <_dtoa_r+0xa4>
 801784c:	601d      	str	r5, [r3, #0]
 801784e:	e4d5      	b.n	80171fc <_dtoa_r+0xa4>
 8017850:	f8cd a01c 	str.w	sl, [sp, #28]
 8017854:	462b      	mov	r3, r5
 8017856:	461d      	mov	r5, r3
 8017858:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801785c:	2a39      	cmp	r2, #57	; 0x39
 801785e:	d108      	bne.n	8017872 <_dtoa_r+0x71a>
 8017860:	9a00      	ldr	r2, [sp, #0]
 8017862:	429a      	cmp	r2, r3
 8017864:	d1f7      	bne.n	8017856 <_dtoa_r+0x6fe>
 8017866:	9a07      	ldr	r2, [sp, #28]
 8017868:	9900      	ldr	r1, [sp, #0]
 801786a:	3201      	adds	r2, #1
 801786c:	9207      	str	r2, [sp, #28]
 801786e:	2230      	movs	r2, #48	; 0x30
 8017870:	700a      	strb	r2, [r1, #0]
 8017872:	781a      	ldrb	r2, [r3, #0]
 8017874:	3201      	adds	r2, #1
 8017876:	701a      	strb	r2, [r3, #0]
 8017878:	e78c      	b.n	8017794 <_dtoa_r+0x63c>
 801787a:	4b7f      	ldr	r3, [pc, #508]	; (8017a78 <_dtoa_r+0x920>)
 801787c:	2200      	movs	r2, #0
 801787e:	f7e8 febb 	bl	80005f8 <__aeabi_dmul>
 8017882:	2200      	movs	r2, #0
 8017884:	2300      	movs	r3, #0
 8017886:	4606      	mov	r6, r0
 8017888:	460f      	mov	r7, r1
 801788a:	f7e9 f91d 	bl	8000ac8 <__aeabi_dcmpeq>
 801788e:	2800      	cmp	r0, #0
 8017890:	d09b      	beq.n	80177ca <_dtoa_r+0x672>
 8017892:	e7cd      	b.n	8017830 <_dtoa_r+0x6d8>
 8017894:	9a08      	ldr	r2, [sp, #32]
 8017896:	2a00      	cmp	r2, #0
 8017898:	f000 80c4 	beq.w	8017a24 <_dtoa_r+0x8cc>
 801789c:	9a05      	ldr	r2, [sp, #20]
 801789e:	2a01      	cmp	r2, #1
 80178a0:	f300 80a8 	bgt.w	80179f4 <_dtoa_r+0x89c>
 80178a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80178a6:	2a00      	cmp	r2, #0
 80178a8:	f000 80a0 	beq.w	80179ec <_dtoa_r+0x894>
 80178ac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80178b0:	9e06      	ldr	r6, [sp, #24]
 80178b2:	4645      	mov	r5, r8
 80178b4:	9a04      	ldr	r2, [sp, #16]
 80178b6:	2101      	movs	r1, #1
 80178b8:	441a      	add	r2, r3
 80178ba:	4620      	mov	r0, r4
 80178bc:	4498      	add	r8, r3
 80178be:	9204      	str	r2, [sp, #16]
 80178c0:	f000 ff20 	bl	8018704 <__i2b>
 80178c4:	4607      	mov	r7, r0
 80178c6:	2d00      	cmp	r5, #0
 80178c8:	dd0b      	ble.n	80178e2 <_dtoa_r+0x78a>
 80178ca:	9b04      	ldr	r3, [sp, #16]
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	dd08      	ble.n	80178e2 <_dtoa_r+0x78a>
 80178d0:	42ab      	cmp	r3, r5
 80178d2:	9a04      	ldr	r2, [sp, #16]
 80178d4:	bfa8      	it	ge
 80178d6:	462b      	movge	r3, r5
 80178d8:	eba8 0803 	sub.w	r8, r8, r3
 80178dc:	1aed      	subs	r5, r5, r3
 80178de:	1ad3      	subs	r3, r2, r3
 80178e0:	9304      	str	r3, [sp, #16]
 80178e2:	9b06      	ldr	r3, [sp, #24]
 80178e4:	b1fb      	cbz	r3, 8017926 <_dtoa_r+0x7ce>
 80178e6:	9b08      	ldr	r3, [sp, #32]
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	f000 809f 	beq.w	8017a2c <_dtoa_r+0x8d4>
 80178ee:	2e00      	cmp	r6, #0
 80178f0:	dd11      	ble.n	8017916 <_dtoa_r+0x7be>
 80178f2:	4639      	mov	r1, r7
 80178f4:	4632      	mov	r2, r6
 80178f6:	4620      	mov	r0, r4
 80178f8:	f000 ffc0 	bl	801887c <__pow5mult>
 80178fc:	465a      	mov	r2, fp
 80178fe:	4601      	mov	r1, r0
 8017900:	4607      	mov	r7, r0
 8017902:	4620      	mov	r0, r4
 8017904:	f000 ff14 	bl	8018730 <__multiply>
 8017908:	4659      	mov	r1, fp
 801790a:	9007      	str	r0, [sp, #28]
 801790c:	4620      	mov	r0, r4
 801790e:	f000 fdf3 	bl	80184f8 <_Bfree>
 8017912:	9b07      	ldr	r3, [sp, #28]
 8017914:	469b      	mov	fp, r3
 8017916:	9b06      	ldr	r3, [sp, #24]
 8017918:	1b9a      	subs	r2, r3, r6
 801791a:	d004      	beq.n	8017926 <_dtoa_r+0x7ce>
 801791c:	4659      	mov	r1, fp
 801791e:	4620      	mov	r0, r4
 8017920:	f000 ffac 	bl	801887c <__pow5mult>
 8017924:	4683      	mov	fp, r0
 8017926:	2101      	movs	r1, #1
 8017928:	4620      	mov	r0, r4
 801792a:	f000 feeb 	bl	8018704 <__i2b>
 801792e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017930:	2b00      	cmp	r3, #0
 8017932:	4606      	mov	r6, r0
 8017934:	dd7c      	ble.n	8017a30 <_dtoa_r+0x8d8>
 8017936:	461a      	mov	r2, r3
 8017938:	4601      	mov	r1, r0
 801793a:	4620      	mov	r0, r4
 801793c:	f000 ff9e 	bl	801887c <__pow5mult>
 8017940:	9b05      	ldr	r3, [sp, #20]
 8017942:	2b01      	cmp	r3, #1
 8017944:	4606      	mov	r6, r0
 8017946:	dd76      	ble.n	8017a36 <_dtoa_r+0x8de>
 8017948:	2300      	movs	r3, #0
 801794a:	9306      	str	r3, [sp, #24]
 801794c:	6933      	ldr	r3, [r6, #16]
 801794e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017952:	6918      	ldr	r0, [r3, #16]
 8017954:	f000 fe86 	bl	8018664 <__hi0bits>
 8017958:	f1c0 0020 	rsb	r0, r0, #32
 801795c:	9b04      	ldr	r3, [sp, #16]
 801795e:	4418      	add	r0, r3
 8017960:	f010 001f 	ands.w	r0, r0, #31
 8017964:	f000 8086 	beq.w	8017a74 <_dtoa_r+0x91c>
 8017968:	f1c0 0320 	rsb	r3, r0, #32
 801796c:	2b04      	cmp	r3, #4
 801796e:	dd7f      	ble.n	8017a70 <_dtoa_r+0x918>
 8017970:	f1c0 001c 	rsb	r0, r0, #28
 8017974:	9b04      	ldr	r3, [sp, #16]
 8017976:	4403      	add	r3, r0
 8017978:	4480      	add	r8, r0
 801797a:	4405      	add	r5, r0
 801797c:	9304      	str	r3, [sp, #16]
 801797e:	f1b8 0f00 	cmp.w	r8, #0
 8017982:	dd05      	ble.n	8017990 <_dtoa_r+0x838>
 8017984:	4659      	mov	r1, fp
 8017986:	4642      	mov	r2, r8
 8017988:	4620      	mov	r0, r4
 801798a:	f000 ffd1 	bl	8018930 <__lshift>
 801798e:	4683      	mov	fp, r0
 8017990:	9b04      	ldr	r3, [sp, #16]
 8017992:	2b00      	cmp	r3, #0
 8017994:	dd05      	ble.n	80179a2 <_dtoa_r+0x84a>
 8017996:	4631      	mov	r1, r6
 8017998:	461a      	mov	r2, r3
 801799a:	4620      	mov	r0, r4
 801799c:	f000 ffc8 	bl	8018930 <__lshift>
 80179a0:	4606      	mov	r6, r0
 80179a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d069      	beq.n	8017a7c <_dtoa_r+0x924>
 80179a8:	4631      	mov	r1, r6
 80179aa:	4658      	mov	r0, fp
 80179ac:	f001 f82c 	bl	8018a08 <__mcmp>
 80179b0:	2800      	cmp	r0, #0
 80179b2:	da63      	bge.n	8017a7c <_dtoa_r+0x924>
 80179b4:	2300      	movs	r3, #0
 80179b6:	4659      	mov	r1, fp
 80179b8:	220a      	movs	r2, #10
 80179ba:	4620      	mov	r0, r4
 80179bc:	f000 fdbe 	bl	801853c <__multadd>
 80179c0:	9b08      	ldr	r3, [sp, #32]
 80179c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80179c6:	4683      	mov	fp, r0
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	f000 818f 	beq.w	8017cec <_dtoa_r+0xb94>
 80179ce:	4639      	mov	r1, r7
 80179d0:	2300      	movs	r3, #0
 80179d2:	220a      	movs	r2, #10
 80179d4:	4620      	mov	r0, r4
 80179d6:	f000 fdb1 	bl	801853c <__multadd>
 80179da:	f1b9 0f00 	cmp.w	r9, #0
 80179de:	4607      	mov	r7, r0
 80179e0:	f300 808e 	bgt.w	8017b00 <_dtoa_r+0x9a8>
 80179e4:	9b05      	ldr	r3, [sp, #20]
 80179e6:	2b02      	cmp	r3, #2
 80179e8:	dc50      	bgt.n	8017a8c <_dtoa_r+0x934>
 80179ea:	e089      	b.n	8017b00 <_dtoa_r+0x9a8>
 80179ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80179ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80179f2:	e75d      	b.n	80178b0 <_dtoa_r+0x758>
 80179f4:	9b01      	ldr	r3, [sp, #4]
 80179f6:	1e5e      	subs	r6, r3, #1
 80179f8:	9b06      	ldr	r3, [sp, #24]
 80179fa:	42b3      	cmp	r3, r6
 80179fc:	bfbf      	itttt	lt
 80179fe:	9b06      	ldrlt	r3, [sp, #24]
 8017a00:	9606      	strlt	r6, [sp, #24]
 8017a02:	1af2      	sublt	r2, r6, r3
 8017a04:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8017a06:	bfb6      	itet	lt
 8017a08:	189b      	addlt	r3, r3, r2
 8017a0a:	1b9e      	subge	r6, r3, r6
 8017a0c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8017a0e:	9b01      	ldr	r3, [sp, #4]
 8017a10:	bfb8      	it	lt
 8017a12:	2600      	movlt	r6, #0
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	bfb5      	itete	lt
 8017a18:	eba8 0503 	sublt.w	r5, r8, r3
 8017a1c:	9b01      	ldrge	r3, [sp, #4]
 8017a1e:	2300      	movlt	r3, #0
 8017a20:	4645      	movge	r5, r8
 8017a22:	e747      	b.n	80178b4 <_dtoa_r+0x75c>
 8017a24:	9e06      	ldr	r6, [sp, #24]
 8017a26:	9f08      	ldr	r7, [sp, #32]
 8017a28:	4645      	mov	r5, r8
 8017a2a:	e74c      	b.n	80178c6 <_dtoa_r+0x76e>
 8017a2c:	9a06      	ldr	r2, [sp, #24]
 8017a2e:	e775      	b.n	801791c <_dtoa_r+0x7c4>
 8017a30:	9b05      	ldr	r3, [sp, #20]
 8017a32:	2b01      	cmp	r3, #1
 8017a34:	dc18      	bgt.n	8017a68 <_dtoa_r+0x910>
 8017a36:	9b02      	ldr	r3, [sp, #8]
 8017a38:	b9b3      	cbnz	r3, 8017a68 <_dtoa_r+0x910>
 8017a3a:	9b03      	ldr	r3, [sp, #12]
 8017a3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017a40:	b9a3      	cbnz	r3, 8017a6c <_dtoa_r+0x914>
 8017a42:	9b03      	ldr	r3, [sp, #12]
 8017a44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017a48:	0d1b      	lsrs	r3, r3, #20
 8017a4a:	051b      	lsls	r3, r3, #20
 8017a4c:	b12b      	cbz	r3, 8017a5a <_dtoa_r+0x902>
 8017a4e:	9b04      	ldr	r3, [sp, #16]
 8017a50:	3301      	adds	r3, #1
 8017a52:	9304      	str	r3, [sp, #16]
 8017a54:	f108 0801 	add.w	r8, r8, #1
 8017a58:	2301      	movs	r3, #1
 8017a5a:	9306      	str	r3, [sp, #24]
 8017a5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	f47f af74 	bne.w	801794c <_dtoa_r+0x7f4>
 8017a64:	2001      	movs	r0, #1
 8017a66:	e779      	b.n	801795c <_dtoa_r+0x804>
 8017a68:	2300      	movs	r3, #0
 8017a6a:	e7f6      	b.n	8017a5a <_dtoa_r+0x902>
 8017a6c:	9b02      	ldr	r3, [sp, #8]
 8017a6e:	e7f4      	b.n	8017a5a <_dtoa_r+0x902>
 8017a70:	d085      	beq.n	801797e <_dtoa_r+0x826>
 8017a72:	4618      	mov	r0, r3
 8017a74:	301c      	adds	r0, #28
 8017a76:	e77d      	b.n	8017974 <_dtoa_r+0x81c>
 8017a78:	40240000 	.word	0x40240000
 8017a7c:	9b01      	ldr	r3, [sp, #4]
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	dc38      	bgt.n	8017af4 <_dtoa_r+0x99c>
 8017a82:	9b05      	ldr	r3, [sp, #20]
 8017a84:	2b02      	cmp	r3, #2
 8017a86:	dd35      	ble.n	8017af4 <_dtoa_r+0x99c>
 8017a88:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8017a8c:	f1b9 0f00 	cmp.w	r9, #0
 8017a90:	d10d      	bne.n	8017aae <_dtoa_r+0x956>
 8017a92:	4631      	mov	r1, r6
 8017a94:	464b      	mov	r3, r9
 8017a96:	2205      	movs	r2, #5
 8017a98:	4620      	mov	r0, r4
 8017a9a:	f000 fd4f 	bl	801853c <__multadd>
 8017a9e:	4601      	mov	r1, r0
 8017aa0:	4606      	mov	r6, r0
 8017aa2:	4658      	mov	r0, fp
 8017aa4:	f000 ffb0 	bl	8018a08 <__mcmp>
 8017aa8:	2800      	cmp	r0, #0
 8017aaa:	f73f adbd 	bgt.w	8017628 <_dtoa_r+0x4d0>
 8017aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ab0:	9d00      	ldr	r5, [sp, #0]
 8017ab2:	ea6f 0a03 	mvn.w	sl, r3
 8017ab6:	f04f 0800 	mov.w	r8, #0
 8017aba:	4631      	mov	r1, r6
 8017abc:	4620      	mov	r0, r4
 8017abe:	f000 fd1b 	bl	80184f8 <_Bfree>
 8017ac2:	2f00      	cmp	r7, #0
 8017ac4:	f43f aeb4 	beq.w	8017830 <_dtoa_r+0x6d8>
 8017ac8:	f1b8 0f00 	cmp.w	r8, #0
 8017acc:	d005      	beq.n	8017ada <_dtoa_r+0x982>
 8017ace:	45b8      	cmp	r8, r7
 8017ad0:	d003      	beq.n	8017ada <_dtoa_r+0x982>
 8017ad2:	4641      	mov	r1, r8
 8017ad4:	4620      	mov	r0, r4
 8017ad6:	f000 fd0f 	bl	80184f8 <_Bfree>
 8017ada:	4639      	mov	r1, r7
 8017adc:	4620      	mov	r0, r4
 8017ade:	f000 fd0b 	bl	80184f8 <_Bfree>
 8017ae2:	e6a5      	b.n	8017830 <_dtoa_r+0x6d8>
 8017ae4:	2600      	movs	r6, #0
 8017ae6:	4637      	mov	r7, r6
 8017ae8:	e7e1      	b.n	8017aae <_dtoa_r+0x956>
 8017aea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8017aec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8017af0:	4637      	mov	r7, r6
 8017af2:	e599      	b.n	8017628 <_dtoa_r+0x4d0>
 8017af4:	9b08      	ldr	r3, [sp, #32]
 8017af6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	f000 80fd 	beq.w	8017cfa <_dtoa_r+0xba2>
 8017b00:	2d00      	cmp	r5, #0
 8017b02:	dd05      	ble.n	8017b10 <_dtoa_r+0x9b8>
 8017b04:	4639      	mov	r1, r7
 8017b06:	462a      	mov	r2, r5
 8017b08:	4620      	mov	r0, r4
 8017b0a:	f000 ff11 	bl	8018930 <__lshift>
 8017b0e:	4607      	mov	r7, r0
 8017b10:	9b06      	ldr	r3, [sp, #24]
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d05c      	beq.n	8017bd0 <_dtoa_r+0xa78>
 8017b16:	6879      	ldr	r1, [r7, #4]
 8017b18:	4620      	mov	r0, r4
 8017b1a:	f000 fcad 	bl	8018478 <_Balloc>
 8017b1e:	4605      	mov	r5, r0
 8017b20:	b928      	cbnz	r0, 8017b2e <_dtoa_r+0x9d6>
 8017b22:	4b80      	ldr	r3, [pc, #512]	; (8017d24 <_dtoa_r+0xbcc>)
 8017b24:	4602      	mov	r2, r0
 8017b26:	f240 21ea 	movw	r1, #746	; 0x2ea
 8017b2a:	f7ff bb2e 	b.w	801718a <_dtoa_r+0x32>
 8017b2e:	693a      	ldr	r2, [r7, #16]
 8017b30:	3202      	adds	r2, #2
 8017b32:	0092      	lsls	r2, r2, #2
 8017b34:	f107 010c 	add.w	r1, r7, #12
 8017b38:	300c      	adds	r0, #12
 8017b3a:	f7fd fb61 	bl	8015200 <memcpy>
 8017b3e:	2201      	movs	r2, #1
 8017b40:	4629      	mov	r1, r5
 8017b42:	4620      	mov	r0, r4
 8017b44:	f000 fef4 	bl	8018930 <__lshift>
 8017b48:	9b00      	ldr	r3, [sp, #0]
 8017b4a:	3301      	adds	r3, #1
 8017b4c:	9301      	str	r3, [sp, #4]
 8017b4e:	9b00      	ldr	r3, [sp, #0]
 8017b50:	444b      	add	r3, r9
 8017b52:	9307      	str	r3, [sp, #28]
 8017b54:	9b02      	ldr	r3, [sp, #8]
 8017b56:	f003 0301 	and.w	r3, r3, #1
 8017b5a:	46b8      	mov	r8, r7
 8017b5c:	9306      	str	r3, [sp, #24]
 8017b5e:	4607      	mov	r7, r0
 8017b60:	9b01      	ldr	r3, [sp, #4]
 8017b62:	4631      	mov	r1, r6
 8017b64:	3b01      	subs	r3, #1
 8017b66:	4658      	mov	r0, fp
 8017b68:	9302      	str	r3, [sp, #8]
 8017b6a:	f7ff fa69 	bl	8017040 <quorem>
 8017b6e:	4603      	mov	r3, r0
 8017b70:	3330      	adds	r3, #48	; 0x30
 8017b72:	9004      	str	r0, [sp, #16]
 8017b74:	4641      	mov	r1, r8
 8017b76:	4658      	mov	r0, fp
 8017b78:	9308      	str	r3, [sp, #32]
 8017b7a:	f000 ff45 	bl	8018a08 <__mcmp>
 8017b7e:	463a      	mov	r2, r7
 8017b80:	4681      	mov	r9, r0
 8017b82:	4631      	mov	r1, r6
 8017b84:	4620      	mov	r0, r4
 8017b86:	f000 ff5b 	bl	8018a40 <__mdiff>
 8017b8a:	68c2      	ldr	r2, [r0, #12]
 8017b8c:	9b08      	ldr	r3, [sp, #32]
 8017b8e:	4605      	mov	r5, r0
 8017b90:	bb02      	cbnz	r2, 8017bd4 <_dtoa_r+0xa7c>
 8017b92:	4601      	mov	r1, r0
 8017b94:	4658      	mov	r0, fp
 8017b96:	f000 ff37 	bl	8018a08 <__mcmp>
 8017b9a:	9b08      	ldr	r3, [sp, #32]
 8017b9c:	4602      	mov	r2, r0
 8017b9e:	4629      	mov	r1, r5
 8017ba0:	4620      	mov	r0, r4
 8017ba2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8017ba6:	f000 fca7 	bl	80184f8 <_Bfree>
 8017baa:	9b05      	ldr	r3, [sp, #20]
 8017bac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017bae:	9d01      	ldr	r5, [sp, #4]
 8017bb0:	ea43 0102 	orr.w	r1, r3, r2
 8017bb4:	9b06      	ldr	r3, [sp, #24]
 8017bb6:	430b      	orrs	r3, r1
 8017bb8:	9b08      	ldr	r3, [sp, #32]
 8017bba:	d10d      	bne.n	8017bd8 <_dtoa_r+0xa80>
 8017bbc:	2b39      	cmp	r3, #57	; 0x39
 8017bbe:	d029      	beq.n	8017c14 <_dtoa_r+0xabc>
 8017bc0:	f1b9 0f00 	cmp.w	r9, #0
 8017bc4:	dd01      	ble.n	8017bca <_dtoa_r+0xa72>
 8017bc6:	9b04      	ldr	r3, [sp, #16]
 8017bc8:	3331      	adds	r3, #49	; 0x31
 8017bca:	9a02      	ldr	r2, [sp, #8]
 8017bcc:	7013      	strb	r3, [r2, #0]
 8017bce:	e774      	b.n	8017aba <_dtoa_r+0x962>
 8017bd0:	4638      	mov	r0, r7
 8017bd2:	e7b9      	b.n	8017b48 <_dtoa_r+0x9f0>
 8017bd4:	2201      	movs	r2, #1
 8017bd6:	e7e2      	b.n	8017b9e <_dtoa_r+0xa46>
 8017bd8:	f1b9 0f00 	cmp.w	r9, #0
 8017bdc:	db06      	blt.n	8017bec <_dtoa_r+0xa94>
 8017bde:	9905      	ldr	r1, [sp, #20]
 8017be0:	ea41 0909 	orr.w	r9, r1, r9
 8017be4:	9906      	ldr	r1, [sp, #24]
 8017be6:	ea59 0101 	orrs.w	r1, r9, r1
 8017bea:	d120      	bne.n	8017c2e <_dtoa_r+0xad6>
 8017bec:	2a00      	cmp	r2, #0
 8017bee:	ddec      	ble.n	8017bca <_dtoa_r+0xa72>
 8017bf0:	4659      	mov	r1, fp
 8017bf2:	2201      	movs	r2, #1
 8017bf4:	4620      	mov	r0, r4
 8017bf6:	9301      	str	r3, [sp, #4]
 8017bf8:	f000 fe9a 	bl	8018930 <__lshift>
 8017bfc:	4631      	mov	r1, r6
 8017bfe:	4683      	mov	fp, r0
 8017c00:	f000 ff02 	bl	8018a08 <__mcmp>
 8017c04:	2800      	cmp	r0, #0
 8017c06:	9b01      	ldr	r3, [sp, #4]
 8017c08:	dc02      	bgt.n	8017c10 <_dtoa_r+0xab8>
 8017c0a:	d1de      	bne.n	8017bca <_dtoa_r+0xa72>
 8017c0c:	07da      	lsls	r2, r3, #31
 8017c0e:	d5dc      	bpl.n	8017bca <_dtoa_r+0xa72>
 8017c10:	2b39      	cmp	r3, #57	; 0x39
 8017c12:	d1d8      	bne.n	8017bc6 <_dtoa_r+0xa6e>
 8017c14:	9a02      	ldr	r2, [sp, #8]
 8017c16:	2339      	movs	r3, #57	; 0x39
 8017c18:	7013      	strb	r3, [r2, #0]
 8017c1a:	462b      	mov	r3, r5
 8017c1c:	461d      	mov	r5, r3
 8017c1e:	3b01      	subs	r3, #1
 8017c20:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017c24:	2a39      	cmp	r2, #57	; 0x39
 8017c26:	d050      	beq.n	8017cca <_dtoa_r+0xb72>
 8017c28:	3201      	adds	r2, #1
 8017c2a:	701a      	strb	r2, [r3, #0]
 8017c2c:	e745      	b.n	8017aba <_dtoa_r+0x962>
 8017c2e:	2a00      	cmp	r2, #0
 8017c30:	dd03      	ble.n	8017c3a <_dtoa_r+0xae2>
 8017c32:	2b39      	cmp	r3, #57	; 0x39
 8017c34:	d0ee      	beq.n	8017c14 <_dtoa_r+0xabc>
 8017c36:	3301      	adds	r3, #1
 8017c38:	e7c7      	b.n	8017bca <_dtoa_r+0xa72>
 8017c3a:	9a01      	ldr	r2, [sp, #4]
 8017c3c:	9907      	ldr	r1, [sp, #28]
 8017c3e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8017c42:	428a      	cmp	r2, r1
 8017c44:	d02a      	beq.n	8017c9c <_dtoa_r+0xb44>
 8017c46:	4659      	mov	r1, fp
 8017c48:	2300      	movs	r3, #0
 8017c4a:	220a      	movs	r2, #10
 8017c4c:	4620      	mov	r0, r4
 8017c4e:	f000 fc75 	bl	801853c <__multadd>
 8017c52:	45b8      	cmp	r8, r7
 8017c54:	4683      	mov	fp, r0
 8017c56:	f04f 0300 	mov.w	r3, #0
 8017c5a:	f04f 020a 	mov.w	r2, #10
 8017c5e:	4641      	mov	r1, r8
 8017c60:	4620      	mov	r0, r4
 8017c62:	d107      	bne.n	8017c74 <_dtoa_r+0xb1c>
 8017c64:	f000 fc6a 	bl	801853c <__multadd>
 8017c68:	4680      	mov	r8, r0
 8017c6a:	4607      	mov	r7, r0
 8017c6c:	9b01      	ldr	r3, [sp, #4]
 8017c6e:	3301      	adds	r3, #1
 8017c70:	9301      	str	r3, [sp, #4]
 8017c72:	e775      	b.n	8017b60 <_dtoa_r+0xa08>
 8017c74:	f000 fc62 	bl	801853c <__multadd>
 8017c78:	4639      	mov	r1, r7
 8017c7a:	4680      	mov	r8, r0
 8017c7c:	2300      	movs	r3, #0
 8017c7e:	220a      	movs	r2, #10
 8017c80:	4620      	mov	r0, r4
 8017c82:	f000 fc5b 	bl	801853c <__multadd>
 8017c86:	4607      	mov	r7, r0
 8017c88:	e7f0      	b.n	8017c6c <_dtoa_r+0xb14>
 8017c8a:	f1b9 0f00 	cmp.w	r9, #0
 8017c8e:	9a00      	ldr	r2, [sp, #0]
 8017c90:	bfcc      	ite	gt
 8017c92:	464d      	movgt	r5, r9
 8017c94:	2501      	movle	r5, #1
 8017c96:	4415      	add	r5, r2
 8017c98:	f04f 0800 	mov.w	r8, #0
 8017c9c:	4659      	mov	r1, fp
 8017c9e:	2201      	movs	r2, #1
 8017ca0:	4620      	mov	r0, r4
 8017ca2:	9301      	str	r3, [sp, #4]
 8017ca4:	f000 fe44 	bl	8018930 <__lshift>
 8017ca8:	4631      	mov	r1, r6
 8017caa:	4683      	mov	fp, r0
 8017cac:	f000 feac 	bl	8018a08 <__mcmp>
 8017cb0:	2800      	cmp	r0, #0
 8017cb2:	dcb2      	bgt.n	8017c1a <_dtoa_r+0xac2>
 8017cb4:	d102      	bne.n	8017cbc <_dtoa_r+0xb64>
 8017cb6:	9b01      	ldr	r3, [sp, #4]
 8017cb8:	07db      	lsls	r3, r3, #31
 8017cba:	d4ae      	bmi.n	8017c1a <_dtoa_r+0xac2>
 8017cbc:	462b      	mov	r3, r5
 8017cbe:	461d      	mov	r5, r3
 8017cc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017cc4:	2a30      	cmp	r2, #48	; 0x30
 8017cc6:	d0fa      	beq.n	8017cbe <_dtoa_r+0xb66>
 8017cc8:	e6f7      	b.n	8017aba <_dtoa_r+0x962>
 8017cca:	9a00      	ldr	r2, [sp, #0]
 8017ccc:	429a      	cmp	r2, r3
 8017cce:	d1a5      	bne.n	8017c1c <_dtoa_r+0xac4>
 8017cd0:	f10a 0a01 	add.w	sl, sl, #1
 8017cd4:	2331      	movs	r3, #49	; 0x31
 8017cd6:	e779      	b.n	8017bcc <_dtoa_r+0xa74>
 8017cd8:	4b13      	ldr	r3, [pc, #76]	; (8017d28 <_dtoa_r+0xbd0>)
 8017cda:	f7ff baaf 	b.w	801723c <_dtoa_r+0xe4>
 8017cde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	f47f aa86 	bne.w	80171f2 <_dtoa_r+0x9a>
 8017ce6:	4b11      	ldr	r3, [pc, #68]	; (8017d2c <_dtoa_r+0xbd4>)
 8017ce8:	f7ff baa8 	b.w	801723c <_dtoa_r+0xe4>
 8017cec:	f1b9 0f00 	cmp.w	r9, #0
 8017cf0:	dc03      	bgt.n	8017cfa <_dtoa_r+0xba2>
 8017cf2:	9b05      	ldr	r3, [sp, #20]
 8017cf4:	2b02      	cmp	r3, #2
 8017cf6:	f73f aec9 	bgt.w	8017a8c <_dtoa_r+0x934>
 8017cfa:	9d00      	ldr	r5, [sp, #0]
 8017cfc:	4631      	mov	r1, r6
 8017cfe:	4658      	mov	r0, fp
 8017d00:	f7ff f99e 	bl	8017040 <quorem>
 8017d04:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8017d08:	f805 3b01 	strb.w	r3, [r5], #1
 8017d0c:	9a00      	ldr	r2, [sp, #0]
 8017d0e:	1aaa      	subs	r2, r5, r2
 8017d10:	4591      	cmp	r9, r2
 8017d12:	ddba      	ble.n	8017c8a <_dtoa_r+0xb32>
 8017d14:	4659      	mov	r1, fp
 8017d16:	2300      	movs	r3, #0
 8017d18:	220a      	movs	r2, #10
 8017d1a:	4620      	mov	r0, r4
 8017d1c:	f000 fc0e 	bl	801853c <__multadd>
 8017d20:	4683      	mov	fp, r0
 8017d22:	e7eb      	b.n	8017cfc <_dtoa_r+0xba4>
 8017d24:	0801b50c 	.word	0x0801b50c
 8017d28:	0801b30c 	.word	0x0801b30c
 8017d2c:	0801b489 	.word	0x0801b489

08017d30 <rshift>:
 8017d30:	6903      	ldr	r3, [r0, #16]
 8017d32:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017d36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017d3a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017d3e:	f100 0414 	add.w	r4, r0, #20
 8017d42:	dd45      	ble.n	8017dd0 <rshift+0xa0>
 8017d44:	f011 011f 	ands.w	r1, r1, #31
 8017d48:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017d4c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017d50:	d10c      	bne.n	8017d6c <rshift+0x3c>
 8017d52:	f100 0710 	add.w	r7, r0, #16
 8017d56:	4629      	mov	r1, r5
 8017d58:	42b1      	cmp	r1, r6
 8017d5a:	d334      	bcc.n	8017dc6 <rshift+0x96>
 8017d5c:	1a9b      	subs	r3, r3, r2
 8017d5e:	009b      	lsls	r3, r3, #2
 8017d60:	1eea      	subs	r2, r5, #3
 8017d62:	4296      	cmp	r6, r2
 8017d64:	bf38      	it	cc
 8017d66:	2300      	movcc	r3, #0
 8017d68:	4423      	add	r3, r4
 8017d6a:	e015      	b.n	8017d98 <rshift+0x68>
 8017d6c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017d70:	f1c1 0820 	rsb	r8, r1, #32
 8017d74:	40cf      	lsrs	r7, r1
 8017d76:	f105 0e04 	add.w	lr, r5, #4
 8017d7a:	46a1      	mov	r9, r4
 8017d7c:	4576      	cmp	r6, lr
 8017d7e:	46f4      	mov	ip, lr
 8017d80:	d815      	bhi.n	8017dae <rshift+0x7e>
 8017d82:	1a9b      	subs	r3, r3, r2
 8017d84:	009a      	lsls	r2, r3, #2
 8017d86:	3a04      	subs	r2, #4
 8017d88:	3501      	adds	r5, #1
 8017d8a:	42ae      	cmp	r6, r5
 8017d8c:	bf38      	it	cc
 8017d8e:	2200      	movcc	r2, #0
 8017d90:	18a3      	adds	r3, r4, r2
 8017d92:	50a7      	str	r7, [r4, r2]
 8017d94:	b107      	cbz	r7, 8017d98 <rshift+0x68>
 8017d96:	3304      	adds	r3, #4
 8017d98:	1b1a      	subs	r2, r3, r4
 8017d9a:	42a3      	cmp	r3, r4
 8017d9c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017da0:	bf08      	it	eq
 8017da2:	2300      	moveq	r3, #0
 8017da4:	6102      	str	r2, [r0, #16]
 8017da6:	bf08      	it	eq
 8017da8:	6143      	streq	r3, [r0, #20]
 8017daa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017dae:	f8dc c000 	ldr.w	ip, [ip]
 8017db2:	fa0c fc08 	lsl.w	ip, ip, r8
 8017db6:	ea4c 0707 	orr.w	r7, ip, r7
 8017dba:	f849 7b04 	str.w	r7, [r9], #4
 8017dbe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017dc2:	40cf      	lsrs	r7, r1
 8017dc4:	e7da      	b.n	8017d7c <rshift+0x4c>
 8017dc6:	f851 cb04 	ldr.w	ip, [r1], #4
 8017dca:	f847 cf04 	str.w	ip, [r7, #4]!
 8017dce:	e7c3      	b.n	8017d58 <rshift+0x28>
 8017dd0:	4623      	mov	r3, r4
 8017dd2:	e7e1      	b.n	8017d98 <rshift+0x68>

08017dd4 <__hexdig_fun>:
 8017dd4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017dd8:	2b09      	cmp	r3, #9
 8017dda:	d802      	bhi.n	8017de2 <__hexdig_fun+0xe>
 8017ddc:	3820      	subs	r0, #32
 8017dde:	b2c0      	uxtb	r0, r0
 8017de0:	4770      	bx	lr
 8017de2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017de6:	2b05      	cmp	r3, #5
 8017de8:	d801      	bhi.n	8017dee <__hexdig_fun+0x1a>
 8017dea:	3847      	subs	r0, #71	; 0x47
 8017dec:	e7f7      	b.n	8017dde <__hexdig_fun+0xa>
 8017dee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017df2:	2b05      	cmp	r3, #5
 8017df4:	d801      	bhi.n	8017dfa <__hexdig_fun+0x26>
 8017df6:	3827      	subs	r0, #39	; 0x27
 8017df8:	e7f1      	b.n	8017dde <__hexdig_fun+0xa>
 8017dfa:	2000      	movs	r0, #0
 8017dfc:	4770      	bx	lr
	...

08017e00 <__gethex>:
 8017e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e04:	ed2d 8b02 	vpush	{d8}
 8017e08:	b089      	sub	sp, #36	; 0x24
 8017e0a:	ee08 0a10 	vmov	s16, r0
 8017e0e:	9304      	str	r3, [sp, #16]
 8017e10:	4bbc      	ldr	r3, [pc, #752]	; (8018104 <__gethex+0x304>)
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	9301      	str	r3, [sp, #4]
 8017e16:	4618      	mov	r0, r3
 8017e18:	468b      	mov	fp, r1
 8017e1a:	4690      	mov	r8, r2
 8017e1c:	f7e8 f9d8 	bl	80001d0 <strlen>
 8017e20:	9b01      	ldr	r3, [sp, #4]
 8017e22:	f8db 2000 	ldr.w	r2, [fp]
 8017e26:	4403      	add	r3, r0
 8017e28:	4682      	mov	sl, r0
 8017e2a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017e2e:	9305      	str	r3, [sp, #20]
 8017e30:	1c93      	adds	r3, r2, #2
 8017e32:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8017e36:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8017e3a:	32fe      	adds	r2, #254	; 0xfe
 8017e3c:	18d1      	adds	r1, r2, r3
 8017e3e:	461f      	mov	r7, r3
 8017e40:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017e44:	9100      	str	r1, [sp, #0]
 8017e46:	2830      	cmp	r0, #48	; 0x30
 8017e48:	d0f8      	beq.n	8017e3c <__gethex+0x3c>
 8017e4a:	f7ff ffc3 	bl	8017dd4 <__hexdig_fun>
 8017e4e:	4604      	mov	r4, r0
 8017e50:	2800      	cmp	r0, #0
 8017e52:	d13a      	bne.n	8017eca <__gethex+0xca>
 8017e54:	9901      	ldr	r1, [sp, #4]
 8017e56:	4652      	mov	r2, sl
 8017e58:	4638      	mov	r0, r7
 8017e5a:	f001 f95a 	bl	8019112 <strncmp>
 8017e5e:	4605      	mov	r5, r0
 8017e60:	2800      	cmp	r0, #0
 8017e62:	d168      	bne.n	8017f36 <__gethex+0x136>
 8017e64:	f817 000a 	ldrb.w	r0, [r7, sl]
 8017e68:	eb07 060a 	add.w	r6, r7, sl
 8017e6c:	f7ff ffb2 	bl	8017dd4 <__hexdig_fun>
 8017e70:	2800      	cmp	r0, #0
 8017e72:	d062      	beq.n	8017f3a <__gethex+0x13a>
 8017e74:	4633      	mov	r3, r6
 8017e76:	7818      	ldrb	r0, [r3, #0]
 8017e78:	2830      	cmp	r0, #48	; 0x30
 8017e7a:	461f      	mov	r7, r3
 8017e7c:	f103 0301 	add.w	r3, r3, #1
 8017e80:	d0f9      	beq.n	8017e76 <__gethex+0x76>
 8017e82:	f7ff ffa7 	bl	8017dd4 <__hexdig_fun>
 8017e86:	2301      	movs	r3, #1
 8017e88:	fab0 f480 	clz	r4, r0
 8017e8c:	0964      	lsrs	r4, r4, #5
 8017e8e:	4635      	mov	r5, r6
 8017e90:	9300      	str	r3, [sp, #0]
 8017e92:	463a      	mov	r2, r7
 8017e94:	4616      	mov	r6, r2
 8017e96:	3201      	adds	r2, #1
 8017e98:	7830      	ldrb	r0, [r6, #0]
 8017e9a:	f7ff ff9b 	bl	8017dd4 <__hexdig_fun>
 8017e9e:	2800      	cmp	r0, #0
 8017ea0:	d1f8      	bne.n	8017e94 <__gethex+0x94>
 8017ea2:	9901      	ldr	r1, [sp, #4]
 8017ea4:	4652      	mov	r2, sl
 8017ea6:	4630      	mov	r0, r6
 8017ea8:	f001 f933 	bl	8019112 <strncmp>
 8017eac:	b980      	cbnz	r0, 8017ed0 <__gethex+0xd0>
 8017eae:	b94d      	cbnz	r5, 8017ec4 <__gethex+0xc4>
 8017eb0:	eb06 050a 	add.w	r5, r6, sl
 8017eb4:	462a      	mov	r2, r5
 8017eb6:	4616      	mov	r6, r2
 8017eb8:	3201      	adds	r2, #1
 8017eba:	7830      	ldrb	r0, [r6, #0]
 8017ebc:	f7ff ff8a 	bl	8017dd4 <__hexdig_fun>
 8017ec0:	2800      	cmp	r0, #0
 8017ec2:	d1f8      	bne.n	8017eb6 <__gethex+0xb6>
 8017ec4:	1bad      	subs	r5, r5, r6
 8017ec6:	00ad      	lsls	r5, r5, #2
 8017ec8:	e004      	b.n	8017ed4 <__gethex+0xd4>
 8017eca:	2400      	movs	r4, #0
 8017ecc:	4625      	mov	r5, r4
 8017ece:	e7e0      	b.n	8017e92 <__gethex+0x92>
 8017ed0:	2d00      	cmp	r5, #0
 8017ed2:	d1f7      	bne.n	8017ec4 <__gethex+0xc4>
 8017ed4:	7833      	ldrb	r3, [r6, #0]
 8017ed6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017eda:	2b50      	cmp	r3, #80	; 0x50
 8017edc:	d13b      	bne.n	8017f56 <__gethex+0x156>
 8017ede:	7873      	ldrb	r3, [r6, #1]
 8017ee0:	2b2b      	cmp	r3, #43	; 0x2b
 8017ee2:	d02c      	beq.n	8017f3e <__gethex+0x13e>
 8017ee4:	2b2d      	cmp	r3, #45	; 0x2d
 8017ee6:	d02e      	beq.n	8017f46 <__gethex+0x146>
 8017ee8:	1c71      	adds	r1, r6, #1
 8017eea:	f04f 0900 	mov.w	r9, #0
 8017eee:	7808      	ldrb	r0, [r1, #0]
 8017ef0:	f7ff ff70 	bl	8017dd4 <__hexdig_fun>
 8017ef4:	1e43      	subs	r3, r0, #1
 8017ef6:	b2db      	uxtb	r3, r3
 8017ef8:	2b18      	cmp	r3, #24
 8017efa:	d82c      	bhi.n	8017f56 <__gethex+0x156>
 8017efc:	f1a0 0210 	sub.w	r2, r0, #16
 8017f00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017f04:	f7ff ff66 	bl	8017dd4 <__hexdig_fun>
 8017f08:	1e43      	subs	r3, r0, #1
 8017f0a:	b2db      	uxtb	r3, r3
 8017f0c:	2b18      	cmp	r3, #24
 8017f0e:	d91d      	bls.n	8017f4c <__gethex+0x14c>
 8017f10:	f1b9 0f00 	cmp.w	r9, #0
 8017f14:	d000      	beq.n	8017f18 <__gethex+0x118>
 8017f16:	4252      	negs	r2, r2
 8017f18:	4415      	add	r5, r2
 8017f1a:	f8cb 1000 	str.w	r1, [fp]
 8017f1e:	b1e4      	cbz	r4, 8017f5a <__gethex+0x15a>
 8017f20:	9b00      	ldr	r3, [sp, #0]
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	bf14      	ite	ne
 8017f26:	2700      	movne	r7, #0
 8017f28:	2706      	moveq	r7, #6
 8017f2a:	4638      	mov	r0, r7
 8017f2c:	b009      	add	sp, #36	; 0x24
 8017f2e:	ecbd 8b02 	vpop	{d8}
 8017f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f36:	463e      	mov	r6, r7
 8017f38:	4625      	mov	r5, r4
 8017f3a:	2401      	movs	r4, #1
 8017f3c:	e7ca      	b.n	8017ed4 <__gethex+0xd4>
 8017f3e:	f04f 0900 	mov.w	r9, #0
 8017f42:	1cb1      	adds	r1, r6, #2
 8017f44:	e7d3      	b.n	8017eee <__gethex+0xee>
 8017f46:	f04f 0901 	mov.w	r9, #1
 8017f4a:	e7fa      	b.n	8017f42 <__gethex+0x142>
 8017f4c:	230a      	movs	r3, #10
 8017f4e:	fb03 0202 	mla	r2, r3, r2, r0
 8017f52:	3a10      	subs	r2, #16
 8017f54:	e7d4      	b.n	8017f00 <__gethex+0x100>
 8017f56:	4631      	mov	r1, r6
 8017f58:	e7df      	b.n	8017f1a <__gethex+0x11a>
 8017f5a:	1bf3      	subs	r3, r6, r7
 8017f5c:	3b01      	subs	r3, #1
 8017f5e:	4621      	mov	r1, r4
 8017f60:	2b07      	cmp	r3, #7
 8017f62:	dc0b      	bgt.n	8017f7c <__gethex+0x17c>
 8017f64:	ee18 0a10 	vmov	r0, s16
 8017f68:	f000 fa86 	bl	8018478 <_Balloc>
 8017f6c:	4604      	mov	r4, r0
 8017f6e:	b940      	cbnz	r0, 8017f82 <__gethex+0x182>
 8017f70:	4b65      	ldr	r3, [pc, #404]	; (8018108 <__gethex+0x308>)
 8017f72:	4602      	mov	r2, r0
 8017f74:	21de      	movs	r1, #222	; 0xde
 8017f76:	4865      	ldr	r0, [pc, #404]	; (801810c <__gethex+0x30c>)
 8017f78:	f001 f8ea 	bl	8019150 <__assert_func>
 8017f7c:	3101      	adds	r1, #1
 8017f7e:	105b      	asrs	r3, r3, #1
 8017f80:	e7ee      	b.n	8017f60 <__gethex+0x160>
 8017f82:	f100 0914 	add.w	r9, r0, #20
 8017f86:	f04f 0b00 	mov.w	fp, #0
 8017f8a:	f1ca 0301 	rsb	r3, sl, #1
 8017f8e:	f8cd 9008 	str.w	r9, [sp, #8]
 8017f92:	f8cd b000 	str.w	fp, [sp]
 8017f96:	9306      	str	r3, [sp, #24]
 8017f98:	42b7      	cmp	r7, r6
 8017f9a:	d340      	bcc.n	801801e <__gethex+0x21e>
 8017f9c:	9802      	ldr	r0, [sp, #8]
 8017f9e:	9b00      	ldr	r3, [sp, #0]
 8017fa0:	f840 3b04 	str.w	r3, [r0], #4
 8017fa4:	eba0 0009 	sub.w	r0, r0, r9
 8017fa8:	1080      	asrs	r0, r0, #2
 8017faa:	0146      	lsls	r6, r0, #5
 8017fac:	6120      	str	r0, [r4, #16]
 8017fae:	4618      	mov	r0, r3
 8017fb0:	f000 fb58 	bl	8018664 <__hi0bits>
 8017fb4:	1a30      	subs	r0, r6, r0
 8017fb6:	f8d8 6000 	ldr.w	r6, [r8]
 8017fba:	42b0      	cmp	r0, r6
 8017fbc:	dd63      	ble.n	8018086 <__gethex+0x286>
 8017fbe:	1b87      	subs	r7, r0, r6
 8017fc0:	4639      	mov	r1, r7
 8017fc2:	4620      	mov	r0, r4
 8017fc4:	f000 fef2 	bl	8018dac <__any_on>
 8017fc8:	4682      	mov	sl, r0
 8017fca:	b1a8      	cbz	r0, 8017ff8 <__gethex+0x1f8>
 8017fcc:	1e7b      	subs	r3, r7, #1
 8017fce:	1159      	asrs	r1, r3, #5
 8017fd0:	f003 021f 	and.w	r2, r3, #31
 8017fd4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017fd8:	f04f 0a01 	mov.w	sl, #1
 8017fdc:	fa0a f202 	lsl.w	r2, sl, r2
 8017fe0:	420a      	tst	r2, r1
 8017fe2:	d009      	beq.n	8017ff8 <__gethex+0x1f8>
 8017fe4:	4553      	cmp	r3, sl
 8017fe6:	dd05      	ble.n	8017ff4 <__gethex+0x1f4>
 8017fe8:	1eb9      	subs	r1, r7, #2
 8017fea:	4620      	mov	r0, r4
 8017fec:	f000 fede 	bl	8018dac <__any_on>
 8017ff0:	2800      	cmp	r0, #0
 8017ff2:	d145      	bne.n	8018080 <__gethex+0x280>
 8017ff4:	f04f 0a02 	mov.w	sl, #2
 8017ff8:	4639      	mov	r1, r7
 8017ffa:	4620      	mov	r0, r4
 8017ffc:	f7ff fe98 	bl	8017d30 <rshift>
 8018000:	443d      	add	r5, r7
 8018002:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018006:	42ab      	cmp	r3, r5
 8018008:	da4c      	bge.n	80180a4 <__gethex+0x2a4>
 801800a:	ee18 0a10 	vmov	r0, s16
 801800e:	4621      	mov	r1, r4
 8018010:	f000 fa72 	bl	80184f8 <_Bfree>
 8018014:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018016:	2300      	movs	r3, #0
 8018018:	6013      	str	r3, [r2, #0]
 801801a:	27a3      	movs	r7, #163	; 0xa3
 801801c:	e785      	b.n	8017f2a <__gethex+0x12a>
 801801e:	1e73      	subs	r3, r6, #1
 8018020:	9a05      	ldr	r2, [sp, #20]
 8018022:	9303      	str	r3, [sp, #12]
 8018024:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018028:	4293      	cmp	r3, r2
 801802a:	d019      	beq.n	8018060 <__gethex+0x260>
 801802c:	f1bb 0f20 	cmp.w	fp, #32
 8018030:	d107      	bne.n	8018042 <__gethex+0x242>
 8018032:	9b02      	ldr	r3, [sp, #8]
 8018034:	9a00      	ldr	r2, [sp, #0]
 8018036:	f843 2b04 	str.w	r2, [r3], #4
 801803a:	9302      	str	r3, [sp, #8]
 801803c:	2300      	movs	r3, #0
 801803e:	9300      	str	r3, [sp, #0]
 8018040:	469b      	mov	fp, r3
 8018042:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018046:	f7ff fec5 	bl	8017dd4 <__hexdig_fun>
 801804a:	9b00      	ldr	r3, [sp, #0]
 801804c:	f000 000f 	and.w	r0, r0, #15
 8018050:	fa00 f00b 	lsl.w	r0, r0, fp
 8018054:	4303      	orrs	r3, r0
 8018056:	9300      	str	r3, [sp, #0]
 8018058:	f10b 0b04 	add.w	fp, fp, #4
 801805c:	9b03      	ldr	r3, [sp, #12]
 801805e:	e00d      	b.n	801807c <__gethex+0x27c>
 8018060:	9b03      	ldr	r3, [sp, #12]
 8018062:	9a06      	ldr	r2, [sp, #24]
 8018064:	4413      	add	r3, r2
 8018066:	42bb      	cmp	r3, r7
 8018068:	d3e0      	bcc.n	801802c <__gethex+0x22c>
 801806a:	4618      	mov	r0, r3
 801806c:	9901      	ldr	r1, [sp, #4]
 801806e:	9307      	str	r3, [sp, #28]
 8018070:	4652      	mov	r2, sl
 8018072:	f001 f84e 	bl	8019112 <strncmp>
 8018076:	9b07      	ldr	r3, [sp, #28]
 8018078:	2800      	cmp	r0, #0
 801807a:	d1d7      	bne.n	801802c <__gethex+0x22c>
 801807c:	461e      	mov	r6, r3
 801807e:	e78b      	b.n	8017f98 <__gethex+0x198>
 8018080:	f04f 0a03 	mov.w	sl, #3
 8018084:	e7b8      	b.n	8017ff8 <__gethex+0x1f8>
 8018086:	da0a      	bge.n	801809e <__gethex+0x29e>
 8018088:	1a37      	subs	r7, r6, r0
 801808a:	4621      	mov	r1, r4
 801808c:	ee18 0a10 	vmov	r0, s16
 8018090:	463a      	mov	r2, r7
 8018092:	f000 fc4d 	bl	8018930 <__lshift>
 8018096:	1bed      	subs	r5, r5, r7
 8018098:	4604      	mov	r4, r0
 801809a:	f100 0914 	add.w	r9, r0, #20
 801809e:	f04f 0a00 	mov.w	sl, #0
 80180a2:	e7ae      	b.n	8018002 <__gethex+0x202>
 80180a4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80180a8:	42a8      	cmp	r0, r5
 80180aa:	dd72      	ble.n	8018192 <__gethex+0x392>
 80180ac:	1b45      	subs	r5, r0, r5
 80180ae:	42ae      	cmp	r6, r5
 80180b0:	dc36      	bgt.n	8018120 <__gethex+0x320>
 80180b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80180b6:	2b02      	cmp	r3, #2
 80180b8:	d02a      	beq.n	8018110 <__gethex+0x310>
 80180ba:	2b03      	cmp	r3, #3
 80180bc:	d02c      	beq.n	8018118 <__gethex+0x318>
 80180be:	2b01      	cmp	r3, #1
 80180c0:	d115      	bne.n	80180ee <__gethex+0x2ee>
 80180c2:	42ae      	cmp	r6, r5
 80180c4:	d113      	bne.n	80180ee <__gethex+0x2ee>
 80180c6:	2e01      	cmp	r6, #1
 80180c8:	d10b      	bne.n	80180e2 <__gethex+0x2e2>
 80180ca:	9a04      	ldr	r2, [sp, #16]
 80180cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80180d0:	6013      	str	r3, [r2, #0]
 80180d2:	2301      	movs	r3, #1
 80180d4:	6123      	str	r3, [r4, #16]
 80180d6:	f8c9 3000 	str.w	r3, [r9]
 80180da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80180dc:	2762      	movs	r7, #98	; 0x62
 80180de:	601c      	str	r4, [r3, #0]
 80180e0:	e723      	b.n	8017f2a <__gethex+0x12a>
 80180e2:	1e71      	subs	r1, r6, #1
 80180e4:	4620      	mov	r0, r4
 80180e6:	f000 fe61 	bl	8018dac <__any_on>
 80180ea:	2800      	cmp	r0, #0
 80180ec:	d1ed      	bne.n	80180ca <__gethex+0x2ca>
 80180ee:	ee18 0a10 	vmov	r0, s16
 80180f2:	4621      	mov	r1, r4
 80180f4:	f000 fa00 	bl	80184f8 <_Bfree>
 80180f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80180fa:	2300      	movs	r3, #0
 80180fc:	6013      	str	r3, [r2, #0]
 80180fe:	2750      	movs	r7, #80	; 0x50
 8018100:	e713      	b.n	8017f2a <__gethex+0x12a>
 8018102:	bf00      	nop
 8018104:	0801b588 	.word	0x0801b588
 8018108:	0801b50c 	.word	0x0801b50c
 801810c:	0801b51d 	.word	0x0801b51d
 8018110:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018112:	2b00      	cmp	r3, #0
 8018114:	d1eb      	bne.n	80180ee <__gethex+0x2ee>
 8018116:	e7d8      	b.n	80180ca <__gethex+0x2ca>
 8018118:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801811a:	2b00      	cmp	r3, #0
 801811c:	d1d5      	bne.n	80180ca <__gethex+0x2ca>
 801811e:	e7e6      	b.n	80180ee <__gethex+0x2ee>
 8018120:	1e6f      	subs	r7, r5, #1
 8018122:	f1ba 0f00 	cmp.w	sl, #0
 8018126:	d131      	bne.n	801818c <__gethex+0x38c>
 8018128:	b127      	cbz	r7, 8018134 <__gethex+0x334>
 801812a:	4639      	mov	r1, r7
 801812c:	4620      	mov	r0, r4
 801812e:	f000 fe3d 	bl	8018dac <__any_on>
 8018132:	4682      	mov	sl, r0
 8018134:	117b      	asrs	r3, r7, #5
 8018136:	2101      	movs	r1, #1
 8018138:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801813c:	f007 071f 	and.w	r7, r7, #31
 8018140:	fa01 f707 	lsl.w	r7, r1, r7
 8018144:	421f      	tst	r7, r3
 8018146:	4629      	mov	r1, r5
 8018148:	4620      	mov	r0, r4
 801814a:	bf18      	it	ne
 801814c:	f04a 0a02 	orrne.w	sl, sl, #2
 8018150:	1b76      	subs	r6, r6, r5
 8018152:	f7ff fded 	bl	8017d30 <rshift>
 8018156:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801815a:	2702      	movs	r7, #2
 801815c:	f1ba 0f00 	cmp.w	sl, #0
 8018160:	d048      	beq.n	80181f4 <__gethex+0x3f4>
 8018162:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018166:	2b02      	cmp	r3, #2
 8018168:	d015      	beq.n	8018196 <__gethex+0x396>
 801816a:	2b03      	cmp	r3, #3
 801816c:	d017      	beq.n	801819e <__gethex+0x39e>
 801816e:	2b01      	cmp	r3, #1
 8018170:	d109      	bne.n	8018186 <__gethex+0x386>
 8018172:	f01a 0f02 	tst.w	sl, #2
 8018176:	d006      	beq.n	8018186 <__gethex+0x386>
 8018178:	f8d9 0000 	ldr.w	r0, [r9]
 801817c:	ea4a 0a00 	orr.w	sl, sl, r0
 8018180:	f01a 0f01 	tst.w	sl, #1
 8018184:	d10e      	bne.n	80181a4 <__gethex+0x3a4>
 8018186:	f047 0710 	orr.w	r7, r7, #16
 801818a:	e033      	b.n	80181f4 <__gethex+0x3f4>
 801818c:	f04f 0a01 	mov.w	sl, #1
 8018190:	e7d0      	b.n	8018134 <__gethex+0x334>
 8018192:	2701      	movs	r7, #1
 8018194:	e7e2      	b.n	801815c <__gethex+0x35c>
 8018196:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018198:	f1c3 0301 	rsb	r3, r3, #1
 801819c:	9315      	str	r3, [sp, #84]	; 0x54
 801819e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d0f0      	beq.n	8018186 <__gethex+0x386>
 80181a4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80181a8:	f104 0314 	add.w	r3, r4, #20
 80181ac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80181b0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80181b4:	f04f 0c00 	mov.w	ip, #0
 80181b8:	4618      	mov	r0, r3
 80181ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80181be:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80181c2:	d01c      	beq.n	80181fe <__gethex+0x3fe>
 80181c4:	3201      	adds	r2, #1
 80181c6:	6002      	str	r2, [r0, #0]
 80181c8:	2f02      	cmp	r7, #2
 80181ca:	f104 0314 	add.w	r3, r4, #20
 80181ce:	d13f      	bne.n	8018250 <__gethex+0x450>
 80181d0:	f8d8 2000 	ldr.w	r2, [r8]
 80181d4:	3a01      	subs	r2, #1
 80181d6:	42b2      	cmp	r2, r6
 80181d8:	d10a      	bne.n	80181f0 <__gethex+0x3f0>
 80181da:	1171      	asrs	r1, r6, #5
 80181dc:	2201      	movs	r2, #1
 80181de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80181e2:	f006 061f 	and.w	r6, r6, #31
 80181e6:	fa02 f606 	lsl.w	r6, r2, r6
 80181ea:	421e      	tst	r6, r3
 80181ec:	bf18      	it	ne
 80181ee:	4617      	movne	r7, r2
 80181f0:	f047 0720 	orr.w	r7, r7, #32
 80181f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80181f6:	601c      	str	r4, [r3, #0]
 80181f8:	9b04      	ldr	r3, [sp, #16]
 80181fa:	601d      	str	r5, [r3, #0]
 80181fc:	e695      	b.n	8017f2a <__gethex+0x12a>
 80181fe:	4299      	cmp	r1, r3
 8018200:	f843 cc04 	str.w	ip, [r3, #-4]
 8018204:	d8d8      	bhi.n	80181b8 <__gethex+0x3b8>
 8018206:	68a3      	ldr	r3, [r4, #8]
 8018208:	459b      	cmp	fp, r3
 801820a:	db19      	blt.n	8018240 <__gethex+0x440>
 801820c:	6861      	ldr	r1, [r4, #4]
 801820e:	ee18 0a10 	vmov	r0, s16
 8018212:	3101      	adds	r1, #1
 8018214:	f000 f930 	bl	8018478 <_Balloc>
 8018218:	4681      	mov	r9, r0
 801821a:	b918      	cbnz	r0, 8018224 <__gethex+0x424>
 801821c:	4b1a      	ldr	r3, [pc, #104]	; (8018288 <__gethex+0x488>)
 801821e:	4602      	mov	r2, r0
 8018220:	2184      	movs	r1, #132	; 0x84
 8018222:	e6a8      	b.n	8017f76 <__gethex+0x176>
 8018224:	6922      	ldr	r2, [r4, #16]
 8018226:	3202      	adds	r2, #2
 8018228:	f104 010c 	add.w	r1, r4, #12
 801822c:	0092      	lsls	r2, r2, #2
 801822e:	300c      	adds	r0, #12
 8018230:	f7fc ffe6 	bl	8015200 <memcpy>
 8018234:	4621      	mov	r1, r4
 8018236:	ee18 0a10 	vmov	r0, s16
 801823a:	f000 f95d 	bl	80184f8 <_Bfree>
 801823e:	464c      	mov	r4, r9
 8018240:	6923      	ldr	r3, [r4, #16]
 8018242:	1c5a      	adds	r2, r3, #1
 8018244:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018248:	6122      	str	r2, [r4, #16]
 801824a:	2201      	movs	r2, #1
 801824c:	615a      	str	r2, [r3, #20]
 801824e:	e7bb      	b.n	80181c8 <__gethex+0x3c8>
 8018250:	6922      	ldr	r2, [r4, #16]
 8018252:	455a      	cmp	r2, fp
 8018254:	dd0b      	ble.n	801826e <__gethex+0x46e>
 8018256:	2101      	movs	r1, #1
 8018258:	4620      	mov	r0, r4
 801825a:	f7ff fd69 	bl	8017d30 <rshift>
 801825e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018262:	3501      	adds	r5, #1
 8018264:	42ab      	cmp	r3, r5
 8018266:	f6ff aed0 	blt.w	801800a <__gethex+0x20a>
 801826a:	2701      	movs	r7, #1
 801826c:	e7c0      	b.n	80181f0 <__gethex+0x3f0>
 801826e:	f016 061f 	ands.w	r6, r6, #31
 8018272:	d0fa      	beq.n	801826a <__gethex+0x46a>
 8018274:	449a      	add	sl, r3
 8018276:	f1c6 0620 	rsb	r6, r6, #32
 801827a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801827e:	f000 f9f1 	bl	8018664 <__hi0bits>
 8018282:	42b0      	cmp	r0, r6
 8018284:	dbe7      	blt.n	8018256 <__gethex+0x456>
 8018286:	e7f0      	b.n	801826a <__gethex+0x46a>
 8018288:	0801b50c 	.word	0x0801b50c

0801828c <L_shift>:
 801828c:	f1c2 0208 	rsb	r2, r2, #8
 8018290:	0092      	lsls	r2, r2, #2
 8018292:	b570      	push	{r4, r5, r6, lr}
 8018294:	f1c2 0620 	rsb	r6, r2, #32
 8018298:	6843      	ldr	r3, [r0, #4]
 801829a:	6804      	ldr	r4, [r0, #0]
 801829c:	fa03 f506 	lsl.w	r5, r3, r6
 80182a0:	432c      	orrs	r4, r5
 80182a2:	40d3      	lsrs	r3, r2
 80182a4:	6004      	str	r4, [r0, #0]
 80182a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80182aa:	4288      	cmp	r0, r1
 80182ac:	d3f4      	bcc.n	8018298 <L_shift+0xc>
 80182ae:	bd70      	pop	{r4, r5, r6, pc}

080182b0 <__match>:
 80182b0:	b530      	push	{r4, r5, lr}
 80182b2:	6803      	ldr	r3, [r0, #0]
 80182b4:	3301      	adds	r3, #1
 80182b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80182ba:	b914      	cbnz	r4, 80182c2 <__match+0x12>
 80182bc:	6003      	str	r3, [r0, #0]
 80182be:	2001      	movs	r0, #1
 80182c0:	bd30      	pop	{r4, r5, pc}
 80182c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80182c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80182ca:	2d19      	cmp	r5, #25
 80182cc:	bf98      	it	ls
 80182ce:	3220      	addls	r2, #32
 80182d0:	42a2      	cmp	r2, r4
 80182d2:	d0f0      	beq.n	80182b6 <__match+0x6>
 80182d4:	2000      	movs	r0, #0
 80182d6:	e7f3      	b.n	80182c0 <__match+0x10>

080182d8 <__hexnan>:
 80182d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182dc:	680b      	ldr	r3, [r1, #0]
 80182de:	6801      	ldr	r1, [r0, #0]
 80182e0:	115e      	asrs	r6, r3, #5
 80182e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80182e6:	f013 031f 	ands.w	r3, r3, #31
 80182ea:	b087      	sub	sp, #28
 80182ec:	bf18      	it	ne
 80182ee:	3604      	addne	r6, #4
 80182f0:	2500      	movs	r5, #0
 80182f2:	1f37      	subs	r7, r6, #4
 80182f4:	4682      	mov	sl, r0
 80182f6:	4690      	mov	r8, r2
 80182f8:	9301      	str	r3, [sp, #4]
 80182fa:	f846 5c04 	str.w	r5, [r6, #-4]
 80182fe:	46b9      	mov	r9, r7
 8018300:	463c      	mov	r4, r7
 8018302:	9502      	str	r5, [sp, #8]
 8018304:	46ab      	mov	fp, r5
 8018306:	784a      	ldrb	r2, [r1, #1]
 8018308:	1c4b      	adds	r3, r1, #1
 801830a:	9303      	str	r3, [sp, #12]
 801830c:	b342      	cbz	r2, 8018360 <__hexnan+0x88>
 801830e:	4610      	mov	r0, r2
 8018310:	9105      	str	r1, [sp, #20]
 8018312:	9204      	str	r2, [sp, #16]
 8018314:	f7ff fd5e 	bl	8017dd4 <__hexdig_fun>
 8018318:	2800      	cmp	r0, #0
 801831a:	d14f      	bne.n	80183bc <__hexnan+0xe4>
 801831c:	9a04      	ldr	r2, [sp, #16]
 801831e:	9905      	ldr	r1, [sp, #20]
 8018320:	2a20      	cmp	r2, #32
 8018322:	d818      	bhi.n	8018356 <__hexnan+0x7e>
 8018324:	9b02      	ldr	r3, [sp, #8]
 8018326:	459b      	cmp	fp, r3
 8018328:	dd13      	ble.n	8018352 <__hexnan+0x7a>
 801832a:	454c      	cmp	r4, r9
 801832c:	d206      	bcs.n	801833c <__hexnan+0x64>
 801832e:	2d07      	cmp	r5, #7
 8018330:	dc04      	bgt.n	801833c <__hexnan+0x64>
 8018332:	462a      	mov	r2, r5
 8018334:	4649      	mov	r1, r9
 8018336:	4620      	mov	r0, r4
 8018338:	f7ff ffa8 	bl	801828c <L_shift>
 801833c:	4544      	cmp	r4, r8
 801833e:	d950      	bls.n	80183e2 <__hexnan+0x10a>
 8018340:	2300      	movs	r3, #0
 8018342:	f1a4 0904 	sub.w	r9, r4, #4
 8018346:	f844 3c04 	str.w	r3, [r4, #-4]
 801834a:	f8cd b008 	str.w	fp, [sp, #8]
 801834e:	464c      	mov	r4, r9
 8018350:	461d      	mov	r5, r3
 8018352:	9903      	ldr	r1, [sp, #12]
 8018354:	e7d7      	b.n	8018306 <__hexnan+0x2e>
 8018356:	2a29      	cmp	r2, #41	; 0x29
 8018358:	d156      	bne.n	8018408 <__hexnan+0x130>
 801835a:	3102      	adds	r1, #2
 801835c:	f8ca 1000 	str.w	r1, [sl]
 8018360:	f1bb 0f00 	cmp.w	fp, #0
 8018364:	d050      	beq.n	8018408 <__hexnan+0x130>
 8018366:	454c      	cmp	r4, r9
 8018368:	d206      	bcs.n	8018378 <__hexnan+0xa0>
 801836a:	2d07      	cmp	r5, #7
 801836c:	dc04      	bgt.n	8018378 <__hexnan+0xa0>
 801836e:	462a      	mov	r2, r5
 8018370:	4649      	mov	r1, r9
 8018372:	4620      	mov	r0, r4
 8018374:	f7ff ff8a 	bl	801828c <L_shift>
 8018378:	4544      	cmp	r4, r8
 801837a:	d934      	bls.n	80183e6 <__hexnan+0x10e>
 801837c:	f1a8 0204 	sub.w	r2, r8, #4
 8018380:	4623      	mov	r3, r4
 8018382:	f853 1b04 	ldr.w	r1, [r3], #4
 8018386:	f842 1f04 	str.w	r1, [r2, #4]!
 801838a:	429f      	cmp	r7, r3
 801838c:	d2f9      	bcs.n	8018382 <__hexnan+0xaa>
 801838e:	1b3b      	subs	r3, r7, r4
 8018390:	f023 0303 	bic.w	r3, r3, #3
 8018394:	3304      	adds	r3, #4
 8018396:	3401      	adds	r4, #1
 8018398:	3e03      	subs	r6, #3
 801839a:	42b4      	cmp	r4, r6
 801839c:	bf88      	it	hi
 801839e:	2304      	movhi	r3, #4
 80183a0:	4443      	add	r3, r8
 80183a2:	2200      	movs	r2, #0
 80183a4:	f843 2b04 	str.w	r2, [r3], #4
 80183a8:	429f      	cmp	r7, r3
 80183aa:	d2fb      	bcs.n	80183a4 <__hexnan+0xcc>
 80183ac:	683b      	ldr	r3, [r7, #0]
 80183ae:	b91b      	cbnz	r3, 80183b8 <__hexnan+0xe0>
 80183b0:	4547      	cmp	r7, r8
 80183b2:	d127      	bne.n	8018404 <__hexnan+0x12c>
 80183b4:	2301      	movs	r3, #1
 80183b6:	603b      	str	r3, [r7, #0]
 80183b8:	2005      	movs	r0, #5
 80183ba:	e026      	b.n	801840a <__hexnan+0x132>
 80183bc:	3501      	adds	r5, #1
 80183be:	2d08      	cmp	r5, #8
 80183c0:	f10b 0b01 	add.w	fp, fp, #1
 80183c4:	dd06      	ble.n	80183d4 <__hexnan+0xfc>
 80183c6:	4544      	cmp	r4, r8
 80183c8:	d9c3      	bls.n	8018352 <__hexnan+0x7a>
 80183ca:	2300      	movs	r3, #0
 80183cc:	f844 3c04 	str.w	r3, [r4, #-4]
 80183d0:	2501      	movs	r5, #1
 80183d2:	3c04      	subs	r4, #4
 80183d4:	6822      	ldr	r2, [r4, #0]
 80183d6:	f000 000f 	and.w	r0, r0, #15
 80183da:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80183de:	6022      	str	r2, [r4, #0]
 80183e0:	e7b7      	b.n	8018352 <__hexnan+0x7a>
 80183e2:	2508      	movs	r5, #8
 80183e4:	e7b5      	b.n	8018352 <__hexnan+0x7a>
 80183e6:	9b01      	ldr	r3, [sp, #4]
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	d0df      	beq.n	80183ac <__hexnan+0xd4>
 80183ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80183f0:	f1c3 0320 	rsb	r3, r3, #32
 80183f4:	fa22 f303 	lsr.w	r3, r2, r3
 80183f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80183fc:	401a      	ands	r2, r3
 80183fe:	f846 2c04 	str.w	r2, [r6, #-4]
 8018402:	e7d3      	b.n	80183ac <__hexnan+0xd4>
 8018404:	3f04      	subs	r7, #4
 8018406:	e7d1      	b.n	80183ac <__hexnan+0xd4>
 8018408:	2004      	movs	r0, #4
 801840a:	b007      	add	sp, #28
 801840c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018410 <_localeconv_r>:
 8018410:	4800      	ldr	r0, [pc, #0]	; (8018414 <_localeconv_r+0x4>)
 8018412:	4770      	bx	lr
 8018414:	2000039c 	.word	0x2000039c

08018418 <_lseek_r>:
 8018418:	b538      	push	{r3, r4, r5, lr}
 801841a:	4d07      	ldr	r5, [pc, #28]	; (8018438 <_lseek_r+0x20>)
 801841c:	4604      	mov	r4, r0
 801841e:	4608      	mov	r0, r1
 8018420:	4611      	mov	r1, r2
 8018422:	2200      	movs	r2, #0
 8018424:	602a      	str	r2, [r5, #0]
 8018426:	461a      	mov	r2, r3
 8018428:	f7ee fec0 	bl	80071ac <_lseek>
 801842c:	1c43      	adds	r3, r0, #1
 801842e:	d102      	bne.n	8018436 <_lseek_r+0x1e>
 8018430:	682b      	ldr	r3, [r5, #0]
 8018432:	b103      	cbz	r3, 8018436 <_lseek_r+0x1e>
 8018434:	6023      	str	r3, [r4, #0]
 8018436:	bd38      	pop	{r3, r4, r5, pc}
 8018438:	20008f10 	.word	0x20008f10

0801843c <__ascii_mbtowc>:
 801843c:	b082      	sub	sp, #8
 801843e:	b901      	cbnz	r1, 8018442 <__ascii_mbtowc+0x6>
 8018440:	a901      	add	r1, sp, #4
 8018442:	b142      	cbz	r2, 8018456 <__ascii_mbtowc+0x1a>
 8018444:	b14b      	cbz	r3, 801845a <__ascii_mbtowc+0x1e>
 8018446:	7813      	ldrb	r3, [r2, #0]
 8018448:	600b      	str	r3, [r1, #0]
 801844a:	7812      	ldrb	r2, [r2, #0]
 801844c:	1e10      	subs	r0, r2, #0
 801844e:	bf18      	it	ne
 8018450:	2001      	movne	r0, #1
 8018452:	b002      	add	sp, #8
 8018454:	4770      	bx	lr
 8018456:	4610      	mov	r0, r2
 8018458:	e7fb      	b.n	8018452 <__ascii_mbtowc+0x16>
 801845a:	f06f 0001 	mvn.w	r0, #1
 801845e:	e7f8      	b.n	8018452 <__ascii_mbtowc+0x16>

08018460 <__malloc_lock>:
 8018460:	4801      	ldr	r0, [pc, #4]	; (8018468 <__malloc_lock+0x8>)
 8018462:	f001 b85d 	b.w	8019520 <__retarget_lock_acquire_recursive>
 8018466:	bf00      	nop
 8018468:	20008f18 	.word	0x20008f18

0801846c <__malloc_unlock>:
 801846c:	4801      	ldr	r0, [pc, #4]	; (8018474 <__malloc_unlock+0x8>)
 801846e:	f001 b858 	b.w	8019522 <__retarget_lock_release_recursive>
 8018472:	bf00      	nop
 8018474:	20008f18 	.word	0x20008f18

08018478 <_Balloc>:
 8018478:	b570      	push	{r4, r5, r6, lr}
 801847a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801847c:	4604      	mov	r4, r0
 801847e:	460d      	mov	r5, r1
 8018480:	b976      	cbnz	r6, 80184a0 <_Balloc+0x28>
 8018482:	2010      	movs	r0, #16
 8018484:	f7fc feb4 	bl	80151f0 <malloc>
 8018488:	4602      	mov	r2, r0
 801848a:	6260      	str	r0, [r4, #36]	; 0x24
 801848c:	b920      	cbnz	r0, 8018498 <_Balloc+0x20>
 801848e:	4b18      	ldr	r3, [pc, #96]	; (80184f0 <_Balloc+0x78>)
 8018490:	4818      	ldr	r0, [pc, #96]	; (80184f4 <_Balloc+0x7c>)
 8018492:	2166      	movs	r1, #102	; 0x66
 8018494:	f000 fe5c 	bl	8019150 <__assert_func>
 8018498:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801849c:	6006      	str	r6, [r0, #0]
 801849e:	60c6      	str	r6, [r0, #12]
 80184a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80184a2:	68f3      	ldr	r3, [r6, #12]
 80184a4:	b183      	cbz	r3, 80184c8 <_Balloc+0x50>
 80184a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80184a8:	68db      	ldr	r3, [r3, #12]
 80184aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80184ae:	b9b8      	cbnz	r0, 80184e0 <_Balloc+0x68>
 80184b0:	2101      	movs	r1, #1
 80184b2:	fa01 f605 	lsl.w	r6, r1, r5
 80184b6:	1d72      	adds	r2, r6, #5
 80184b8:	0092      	lsls	r2, r2, #2
 80184ba:	4620      	mov	r0, r4
 80184bc:	f000 fc97 	bl	8018dee <_calloc_r>
 80184c0:	b160      	cbz	r0, 80184dc <_Balloc+0x64>
 80184c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80184c6:	e00e      	b.n	80184e6 <_Balloc+0x6e>
 80184c8:	2221      	movs	r2, #33	; 0x21
 80184ca:	2104      	movs	r1, #4
 80184cc:	4620      	mov	r0, r4
 80184ce:	f000 fc8e 	bl	8018dee <_calloc_r>
 80184d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80184d4:	60f0      	str	r0, [r6, #12]
 80184d6:	68db      	ldr	r3, [r3, #12]
 80184d8:	2b00      	cmp	r3, #0
 80184da:	d1e4      	bne.n	80184a6 <_Balloc+0x2e>
 80184dc:	2000      	movs	r0, #0
 80184de:	bd70      	pop	{r4, r5, r6, pc}
 80184e0:	6802      	ldr	r2, [r0, #0]
 80184e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80184e6:	2300      	movs	r3, #0
 80184e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80184ec:	e7f7      	b.n	80184de <_Balloc+0x66>
 80184ee:	bf00      	nop
 80184f0:	0801b496 	.word	0x0801b496
 80184f4:	0801b59c 	.word	0x0801b59c

080184f8 <_Bfree>:
 80184f8:	b570      	push	{r4, r5, r6, lr}
 80184fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80184fc:	4605      	mov	r5, r0
 80184fe:	460c      	mov	r4, r1
 8018500:	b976      	cbnz	r6, 8018520 <_Bfree+0x28>
 8018502:	2010      	movs	r0, #16
 8018504:	f7fc fe74 	bl	80151f0 <malloc>
 8018508:	4602      	mov	r2, r0
 801850a:	6268      	str	r0, [r5, #36]	; 0x24
 801850c:	b920      	cbnz	r0, 8018518 <_Bfree+0x20>
 801850e:	4b09      	ldr	r3, [pc, #36]	; (8018534 <_Bfree+0x3c>)
 8018510:	4809      	ldr	r0, [pc, #36]	; (8018538 <_Bfree+0x40>)
 8018512:	218a      	movs	r1, #138	; 0x8a
 8018514:	f000 fe1c 	bl	8019150 <__assert_func>
 8018518:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801851c:	6006      	str	r6, [r0, #0]
 801851e:	60c6      	str	r6, [r0, #12]
 8018520:	b13c      	cbz	r4, 8018532 <_Bfree+0x3a>
 8018522:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018524:	6862      	ldr	r2, [r4, #4]
 8018526:	68db      	ldr	r3, [r3, #12]
 8018528:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801852c:	6021      	str	r1, [r4, #0]
 801852e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018532:	bd70      	pop	{r4, r5, r6, pc}
 8018534:	0801b496 	.word	0x0801b496
 8018538:	0801b59c 	.word	0x0801b59c

0801853c <__multadd>:
 801853c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018540:	690e      	ldr	r6, [r1, #16]
 8018542:	4607      	mov	r7, r0
 8018544:	4698      	mov	r8, r3
 8018546:	460c      	mov	r4, r1
 8018548:	f101 0014 	add.w	r0, r1, #20
 801854c:	2300      	movs	r3, #0
 801854e:	6805      	ldr	r5, [r0, #0]
 8018550:	b2a9      	uxth	r1, r5
 8018552:	fb02 8101 	mla	r1, r2, r1, r8
 8018556:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801855a:	0c2d      	lsrs	r5, r5, #16
 801855c:	fb02 c505 	mla	r5, r2, r5, ip
 8018560:	b289      	uxth	r1, r1
 8018562:	3301      	adds	r3, #1
 8018564:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8018568:	429e      	cmp	r6, r3
 801856a:	f840 1b04 	str.w	r1, [r0], #4
 801856e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8018572:	dcec      	bgt.n	801854e <__multadd+0x12>
 8018574:	f1b8 0f00 	cmp.w	r8, #0
 8018578:	d022      	beq.n	80185c0 <__multadd+0x84>
 801857a:	68a3      	ldr	r3, [r4, #8]
 801857c:	42b3      	cmp	r3, r6
 801857e:	dc19      	bgt.n	80185b4 <__multadd+0x78>
 8018580:	6861      	ldr	r1, [r4, #4]
 8018582:	4638      	mov	r0, r7
 8018584:	3101      	adds	r1, #1
 8018586:	f7ff ff77 	bl	8018478 <_Balloc>
 801858a:	4605      	mov	r5, r0
 801858c:	b928      	cbnz	r0, 801859a <__multadd+0x5e>
 801858e:	4602      	mov	r2, r0
 8018590:	4b0d      	ldr	r3, [pc, #52]	; (80185c8 <__multadd+0x8c>)
 8018592:	480e      	ldr	r0, [pc, #56]	; (80185cc <__multadd+0x90>)
 8018594:	21b5      	movs	r1, #181	; 0xb5
 8018596:	f000 fddb 	bl	8019150 <__assert_func>
 801859a:	6922      	ldr	r2, [r4, #16]
 801859c:	3202      	adds	r2, #2
 801859e:	f104 010c 	add.w	r1, r4, #12
 80185a2:	0092      	lsls	r2, r2, #2
 80185a4:	300c      	adds	r0, #12
 80185a6:	f7fc fe2b 	bl	8015200 <memcpy>
 80185aa:	4621      	mov	r1, r4
 80185ac:	4638      	mov	r0, r7
 80185ae:	f7ff ffa3 	bl	80184f8 <_Bfree>
 80185b2:	462c      	mov	r4, r5
 80185b4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80185b8:	3601      	adds	r6, #1
 80185ba:	f8c3 8014 	str.w	r8, [r3, #20]
 80185be:	6126      	str	r6, [r4, #16]
 80185c0:	4620      	mov	r0, r4
 80185c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80185c6:	bf00      	nop
 80185c8:	0801b50c 	.word	0x0801b50c
 80185cc:	0801b59c 	.word	0x0801b59c

080185d0 <__s2b>:
 80185d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80185d4:	460c      	mov	r4, r1
 80185d6:	4615      	mov	r5, r2
 80185d8:	461f      	mov	r7, r3
 80185da:	2209      	movs	r2, #9
 80185dc:	3308      	adds	r3, #8
 80185de:	4606      	mov	r6, r0
 80185e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80185e4:	2100      	movs	r1, #0
 80185e6:	2201      	movs	r2, #1
 80185e8:	429a      	cmp	r2, r3
 80185ea:	db09      	blt.n	8018600 <__s2b+0x30>
 80185ec:	4630      	mov	r0, r6
 80185ee:	f7ff ff43 	bl	8018478 <_Balloc>
 80185f2:	b940      	cbnz	r0, 8018606 <__s2b+0x36>
 80185f4:	4602      	mov	r2, r0
 80185f6:	4b19      	ldr	r3, [pc, #100]	; (801865c <__s2b+0x8c>)
 80185f8:	4819      	ldr	r0, [pc, #100]	; (8018660 <__s2b+0x90>)
 80185fa:	21ce      	movs	r1, #206	; 0xce
 80185fc:	f000 fda8 	bl	8019150 <__assert_func>
 8018600:	0052      	lsls	r2, r2, #1
 8018602:	3101      	adds	r1, #1
 8018604:	e7f0      	b.n	80185e8 <__s2b+0x18>
 8018606:	9b08      	ldr	r3, [sp, #32]
 8018608:	6143      	str	r3, [r0, #20]
 801860a:	2d09      	cmp	r5, #9
 801860c:	f04f 0301 	mov.w	r3, #1
 8018610:	6103      	str	r3, [r0, #16]
 8018612:	dd16      	ble.n	8018642 <__s2b+0x72>
 8018614:	f104 0909 	add.w	r9, r4, #9
 8018618:	46c8      	mov	r8, r9
 801861a:	442c      	add	r4, r5
 801861c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018620:	4601      	mov	r1, r0
 8018622:	3b30      	subs	r3, #48	; 0x30
 8018624:	220a      	movs	r2, #10
 8018626:	4630      	mov	r0, r6
 8018628:	f7ff ff88 	bl	801853c <__multadd>
 801862c:	45a0      	cmp	r8, r4
 801862e:	d1f5      	bne.n	801861c <__s2b+0x4c>
 8018630:	f1a5 0408 	sub.w	r4, r5, #8
 8018634:	444c      	add	r4, r9
 8018636:	1b2d      	subs	r5, r5, r4
 8018638:	1963      	adds	r3, r4, r5
 801863a:	42bb      	cmp	r3, r7
 801863c:	db04      	blt.n	8018648 <__s2b+0x78>
 801863e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018642:	340a      	adds	r4, #10
 8018644:	2509      	movs	r5, #9
 8018646:	e7f6      	b.n	8018636 <__s2b+0x66>
 8018648:	f814 3b01 	ldrb.w	r3, [r4], #1
 801864c:	4601      	mov	r1, r0
 801864e:	3b30      	subs	r3, #48	; 0x30
 8018650:	220a      	movs	r2, #10
 8018652:	4630      	mov	r0, r6
 8018654:	f7ff ff72 	bl	801853c <__multadd>
 8018658:	e7ee      	b.n	8018638 <__s2b+0x68>
 801865a:	bf00      	nop
 801865c:	0801b50c 	.word	0x0801b50c
 8018660:	0801b59c 	.word	0x0801b59c

08018664 <__hi0bits>:
 8018664:	0c03      	lsrs	r3, r0, #16
 8018666:	041b      	lsls	r3, r3, #16
 8018668:	b9d3      	cbnz	r3, 80186a0 <__hi0bits+0x3c>
 801866a:	0400      	lsls	r0, r0, #16
 801866c:	2310      	movs	r3, #16
 801866e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018672:	bf04      	itt	eq
 8018674:	0200      	lsleq	r0, r0, #8
 8018676:	3308      	addeq	r3, #8
 8018678:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801867c:	bf04      	itt	eq
 801867e:	0100      	lsleq	r0, r0, #4
 8018680:	3304      	addeq	r3, #4
 8018682:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018686:	bf04      	itt	eq
 8018688:	0080      	lsleq	r0, r0, #2
 801868a:	3302      	addeq	r3, #2
 801868c:	2800      	cmp	r0, #0
 801868e:	db05      	blt.n	801869c <__hi0bits+0x38>
 8018690:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018694:	f103 0301 	add.w	r3, r3, #1
 8018698:	bf08      	it	eq
 801869a:	2320      	moveq	r3, #32
 801869c:	4618      	mov	r0, r3
 801869e:	4770      	bx	lr
 80186a0:	2300      	movs	r3, #0
 80186a2:	e7e4      	b.n	801866e <__hi0bits+0xa>

080186a4 <__lo0bits>:
 80186a4:	6803      	ldr	r3, [r0, #0]
 80186a6:	f013 0207 	ands.w	r2, r3, #7
 80186aa:	4601      	mov	r1, r0
 80186ac:	d00b      	beq.n	80186c6 <__lo0bits+0x22>
 80186ae:	07da      	lsls	r2, r3, #31
 80186b0:	d424      	bmi.n	80186fc <__lo0bits+0x58>
 80186b2:	0798      	lsls	r0, r3, #30
 80186b4:	bf49      	itett	mi
 80186b6:	085b      	lsrmi	r3, r3, #1
 80186b8:	089b      	lsrpl	r3, r3, #2
 80186ba:	2001      	movmi	r0, #1
 80186bc:	600b      	strmi	r3, [r1, #0]
 80186be:	bf5c      	itt	pl
 80186c0:	600b      	strpl	r3, [r1, #0]
 80186c2:	2002      	movpl	r0, #2
 80186c4:	4770      	bx	lr
 80186c6:	b298      	uxth	r0, r3
 80186c8:	b9b0      	cbnz	r0, 80186f8 <__lo0bits+0x54>
 80186ca:	0c1b      	lsrs	r3, r3, #16
 80186cc:	2010      	movs	r0, #16
 80186ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80186d2:	bf04      	itt	eq
 80186d4:	0a1b      	lsreq	r3, r3, #8
 80186d6:	3008      	addeq	r0, #8
 80186d8:	071a      	lsls	r2, r3, #28
 80186da:	bf04      	itt	eq
 80186dc:	091b      	lsreq	r3, r3, #4
 80186de:	3004      	addeq	r0, #4
 80186e0:	079a      	lsls	r2, r3, #30
 80186e2:	bf04      	itt	eq
 80186e4:	089b      	lsreq	r3, r3, #2
 80186e6:	3002      	addeq	r0, #2
 80186e8:	07da      	lsls	r2, r3, #31
 80186ea:	d403      	bmi.n	80186f4 <__lo0bits+0x50>
 80186ec:	085b      	lsrs	r3, r3, #1
 80186ee:	f100 0001 	add.w	r0, r0, #1
 80186f2:	d005      	beq.n	8018700 <__lo0bits+0x5c>
 80186f4:	600b      	str	r3, [r1, #0]
 80186f6:	4770      	bx	lr
 80186f8:	4610      	mov	r0, r2
 80186fa:	e7e8      	b.n	80186ce <__lo0bits+0x2a>
 80186fc:	2000      	movs	r0, #0
 80186fe:	4770      	bx	lr
 8018700:	2020      	movs	r0, #32
 8018702:	4770      	bx	lr

08018704 <__i2b>:
 8018704:	b510      	push	{r4, lr}
 8018706:	460c      	mov	r4, r1
 8018708:	2101      	movs	r1, #1
 801870a:	f7ff feb5 	bl	8018478 <_Balloc>
 801870e:	4602      	mov	r2, r0
 8018710:	b928      	cbnz	r0, 801871e <__i2b+0x1a>
 8018712:	4b05      	ldr	r3, [pc, #20]	; (8018728 <__i2b+0x24>)
 8018714:	4805      	ldr	r0, [pc, #20]	; (801872c <__i2b+0x28>)
 8018716:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801871a:	f000 fd19 	bl	8019150 <__assert_func>
 801871e:	2301      	movs	r3, #1
 8018720:	6144      	str	r4, [r0, #20]
 8018722:	6103      	str	r3, [r0, #16]
 8018724:	bd10      	pop	{r4, pc}
 8018726:	bf00      	nop
 8018728:	0801b50c 	.word	0x0801b50c
 801872c:	0801b59c 	.word	0x0801b59c

08018730 <__multiply>:
 8018730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018734:	4614      	mov	r4, r2
 8018736:	690a      	ldr	r2, [r1, #16]
 8018738:	6923      	ldr	r3, [r4, #16]
 801873a:	429a      	cmp	r2, r3
 801873c:	bfb8      	it	lt
 801873e:	460b      	movlt	r3, r1
 8018740:	460d      	mov	r5, r1
 8018742:	bfbc      	itt	lt
 8018744:	4625      	movlt	r5, r4
 8018746:	461c      	movlt	r4, r3
 8018748:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801874c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018750:	68ab      	ldr	r3, [r5, #8]
 8018752:	6869      	ldr	r1, [r5, #4]
 8018754:	eb0a 0709 	add.w	r7, sl, r9
 8018758:	42bb      	cmp	r3, r7
 801875a:	b085      	sub	sp, #20
 801875c:	bfb8      	it	lt
 801875e:	3101      	addlt	r1, #1
 8018760:	f7ff fe8a 	bl	8018478 <_Balloc>
 8018764:	b930      	cbnz	r0, 8018774 <__multiply+0x44>
 8018766:	4602      	mov	r2, r0
 8018768:	4b42      	ldr	r3, [pc, #264]	; (8018874 <__multiply+0x144>)
 801876a:	4843      	ldr	r0, [pc, #268]	; (8018878 <__multiply+0x148>)
 801876c:	f240 115d 	movw	r1, #349	; 0x15d
 8018770:	f000 fcee 	bl	8019150 <__assert_func>
 8018774:	f100 0614 	add.w	r6, r0, #20
 8018778:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801877c:	4633      	mov	r3, r6
 801877e:	2200      	movs	r2, #0
 8018780:	4543      	cmp	r3, r8
 8018782:	d31e      	bcc.n	80187c2 <__multiply+0x92>
 8018784:	f105 0c14 	add.w	ip, r5, #20
 8018788:	f104 0314 	add.w	r3, r4, #20
 801878c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8018790:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8018794:	9202      	str	r2, [sp, #8]
 8018796:	ebac 0205 	sub.w	r2, ip, r5
 801879a:	3a15      	subs	r2, #21
 801879c:	f022 0203 	bic.w	r2, r2, #3
 80187a0:	3204      	adds	r2, #4
 80187a2:	f105 0115 	add.w	r1, r5, #21
 80187a6:	458c      	cmp	ip, r1
 80187a8:	bf38      	it	cc
 80187aa:	2204      	movcc	r2, #4
 80187ac:	9201      	str	r2, [sp, #4]
 80187ae:	9a02      	ldr	r2, [sp, #8]
 80187b0:	9303      	str	r3, [sp, #12]
 80187b2:	429a      	cmp	r2, r3
 80187b4:	d808      	bhi.n	80187c8 <__multiply+0x98>
 80187b6:	2f00      	cmp	r7, #0
 80187b8:	dc55      	bgt.n	8018866 <__multiply+0x136>
 80187ba:	6107      	str	r7, [r0, #16]
 80187bc:	b005      	add	sp, #20
 80187be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187c2:	f843 2b04 	str.w	r2, [r3], #4
 80187c6:	e7db      	b.n	8018780 <__multiply+0x50>
 80187c8:	f8b3 a000 	ldrh.w	sl, [r3]
 80187cc:	f1ba 0f00 	cmp.w	sl, #0
 80187d0:	d020      	beq.n	8018814 <__multiply+0xe4>
 80187d2:	f105 0e14 	add.w	lr, r5, #20
 80187d6:	46b1      	mov	r9, r6
 80187d8:	2200      	movs	r2, #0
 80187da:	f85e 4b04 	ldr.w	r4, [lr], #4
 80187de:	f8d9 b000 	ldr.w	fp, [r9]
 80187e2:	b2a1      	uxth	r1, r4
 80187e4:	fa1f fb8b 	uxth.w	fp, fp
 80187e8:	fb0a b101 	mla	r1, sl, r1, fp
 80187ec:	4411      	add	r1, r2
 80187ee:	f8d9 2000 	ldr.w	r2, [r9]
 80187f2:	0c24      	lsrs	r4, r4, #16
 80187f4:	0c12      	lsrs	r2, r2, #16
 80187f6:	fb0a 2404 	mla	r4, sl, r4, r2
 80187fa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80187fe:	b289      	uxth	r1, r1
 8018800:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8018804:	45f4      	cmp	ip, lr
 8018806:	f849 1b04 	str.w	r1, [r9], #4
 801880a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801880e:	d8e4      	bhi.n	80187da <__multiply+0xaa>
 8018810:	9901      	ldr	r1, [sp, #4]
 8018812:	5072      	str	r2, [r6, r1]
 8018814:	9a03      	ldr	r2, [sp, #12]
 8018816:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801881a:	3304      	adds	r3, #4
 801881c:	f1b9 0f00 	cmp.w	r9, #0
 8018820:	d01f      	beq.n	8018862 <__multiply+0x132>
 8018822:	6834      	ldr	r4, [r6, #0]
 8018824:	f105 0114 	add.w	r1, r5, #20
 8018828:	46b6      	mov	lr, r6
 801882a:	f04f 0a00 	mov.w	sl, #0
 801882e:	880a      	ldrh	r2, [r1, #0]
 8018830:	f8be b002 	ldrh.w	fp, [lr, #2]
 8018834:	fb09 b202 	mla	r2, r9, r2, fp
 8018838:	4492      	add	sl, r2
 801883a:	b2a4      	uxth	r4, r4
 801883c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8018840:	f84e 4b04 	str.w	r4, [lr], #4
 8018844:	f851 4b04 	ldr.w	r4, [r1], #4
 8018848:	f8be 2000 	ldrh.w	r2, [lr]
 801884c:	0c24      	lsrs	r4, r4, #16
 801884e:	fb09 2404 	mla	r4, r9, r4, r2
 8018852:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8018856:	458c      	cmp	ip, r1
 8018858:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801885c:	d8e7      	bhi.n	801882e <__multiply+0xfe>
 801885e:	9a01      	ldr	r2, [sp, #4]
 8018860:	50b4      	str	r4, [r6, r2]
 8018862:	3604      	adds	r6, #4
 8018864:	e7a3      	b.n	80187ae <__multiply+0x7e>
 8018866:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801886a:	2b00      	cmp	r3, #0
 801886c:	d1a5      	bne.n	80187ba <__multiply+0x8a>
 801886e:	3f01      	subs	r7, #1
 8018870:	e7a1      	b.n	80187b6 <__multiply+0x86>
 8018872:	bf00      	nop
 8018874:	0801b50c 	.word	0x0801b50c
 8018878:	0801b59c 	.word	0x0801b59c

0801887c <__pow5mult>:
 801887c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018880:	4615      	mov	r5, r2
 8018882:	f012 0203 	ands.w	r2, r2, #3
 8018886:	4606      	mov	r6, r0
 8018888:	460f      	mov	r7, r1
 801888a:	d007      	beq.n	801889c <__pow5mult+0x20>
 801888c:	4c25      	ldr	r4, [pc, #148]	; (8018924 <__pow5mult+0xa8>)
 801888e:	3a01      	subs	r2, #1
 8018890:	2300      	movs	r3, #0
 8018892:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018896:	f7ff fe51 	bl	801853c <__multadd>
 801889a:	4607      	mov	r7, r0
 801889c:	10ad      	asrs	r5, r5, #2
 801889e:	d03d      	beq.n	801891c <__pow5mult+0xa0>
 80188a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80188a2:	b97c      	cbnz	r4, 80188c4 <__pow5mult+0x48>
 80188a4:	2010      	movs	r0, #16
 80188a6:	f7fc fca3 	bl	80151f0 <malloc>
 80188aa:	4602      	mov	r2, r0
 80188ac:	6270      	str	r0, [r6, #36]	; 0x24
 80188ae:	b928      	cbnz	r0, 80188bc <__pow5mult+0x40>
 80188b0:	4b1d      	ldr	r3, [pc, #116]	; (8018928 <__pow5mult+0xac>)
 80188b2:	481e      	ldr	r0, [pc, #120]	; (801892c <__pow5mult+0xb0>)
 80188b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80188b8:	f000 fc4a 	bl	8019150 <__assert_func>
 80188bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80188c0:	6004      	str	r4, [r0, #0]
 80188c2:	60c4      	str	r4, [r0, #12]
 80188c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80188c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80188cc:	b94c      	cbnz	r4, 80188e2 <__pow5mult+0x66>
 80188ce:	f240 2171 	movw	r1, #625	; 0x271
 80188d2:	4630      	mov	r0, r6
 80188d4:	f7ff ff16 	bl	8018704 <__i2b>
 80188d8:	2300      	movs	r3, #0
 80188da:	f8c8 0008 	str.w	r0, [r8, #8]
 80188de:	4604      	mov	r4, r0
 80188e0:	6003      	str	r3, [r0, #0]
 80188e2:	f04f 0900 	mov.w	r9, #0
 80188e6:	07eb      	lsls	r3, r5, #31
 80188e8:	d50a      	bpl.n	8018900 <__pow5mult+0x84>
 80188ea:	4639      	mov	r1, r7
 80188ec:	4622      	mov	r2, r4
 80188ee:	4630      	mov	r0, r6
 80188f0:	f7ff ff1e 	bl	8018730 <__multiply>
 80188f4:	4639      	mov	r1, r7
 80188f6:	4680      	mov	r8, r0
 80188f8:	4630      	mov	r0, r6
 80188fa:	f7ff fdfd 	bl	80184f8 <_Bfree>
 80188fe:	4647      	mov	r7, r8
 8018900:	106d      	asrs	r5, r5, #1
 8018902:	d00b      	beq.n	801891c <__pow5mult+0xa0>
 8018904:	6820      	ldr	r0, [r4, #0]
 8018906:	b938      	cbnz	r0, 8018918 <__pow5mult+0x9c>
 8018908:	4622      	mov	r2, r4
 801890a:	4621      	mov	r1, r4
 801890c:	4630      	mov	r0, r6
 801890e:	f7ff ff0f 	bl	8018730 <__multiply>
 8018912:	6020      	str	r0, [r4, #0]
 8018914:	f8c0 9000 	str.w	r9, [r0]
 8018918:	4604      	mov	r4, r0
 801891a:	e7e4      	b.n	80188e6 <__pow5mult+0x6a>
 801891c:	4638      	mov	r0, r7
 801891e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018922:	bf00      	nop
 8018924:	0801b6f0 	.word	0x0801b6f0
 8018928:	0801b496 	.word	0x0801b496
 801892c:	0801b59c 	.word	0x0801b59c

08018930 <__lshift>:
 8018930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018934:	460c      	mov	r4, r1
 8018936:	6849      	ldr	r1, [r1, #4]
 8018938:	6923      	ldr	r3, [r4, #16]
 801893a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801893e:	68a3      	ldr	r3, [r4, #8]
 8018940:	4607      	mov	r7, r0
 8018942:	4691      	mov	r9, r2
 8018944:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018948:	f108 0601 	add.w	r6, r8, #1
 801894c:	42b3      	cmp	r3, r6
 801894e:	db0b      	blt.n	8018968 <__lshift+0x38>
 8018950:	4638      	mov	r0, r7
 8018952:	f7ff fd91 	bl	8018478 <_Balloc>
 8018956:	4605      	mov	r5, r0
 8018958:	b948      	cbnz	r0, 801896e <__lshift+0x3e>
 801895a:	4602      	mov	r2, r0
 801895c:	4b28      	ldr	r3, [pc, #160]	; (8018a00 <__lshift+0xd0>)
 801895e:	4829      	ldr	r0, [pc, #164]	; (8018a04 <__lshift+0xd4>)
 8018960:	f240 11d9 	movw	r1, #473	; 0x1d9
 8018964:	f000 fbf4 	bl	8019150 <__assert_func>
 8018968:	3101      	adds	r1, #1
 801896a:	005b      	lsls	r3, r3, #1
 801896c:	e7ee      	b.n	801894c <__lshift+0x1c>
 801896e:	2300      	movs	r3, #0
 8018970:	f100 0114 	add.w	r1, r0, #20
 8018974:	f100 0210 	add.w	r2, r0, #16
 8018978:	4618      	mov	r0, r3
 801897a:	4553      	cmp	r3, sl
 801897c:	db33      	blt.n	80189e6 <__lshift+0xb6>
 801897e:	6920      	ldr	r0, [r4, #16]
 8018980:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018984:	f104 0314 	add.w	r3, r4, #20
 8018988:	f019 091f 	ands.w	r9, r9, #31
 801898c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018990:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018994:	d02b      	beq.n	80189ee <__lshift+0xbe>
 8018996:	f1c9 0e20 	rsb	lr, r9, #32
 801899a:	468a      	mov	sl, r1
 801899c:	2200      	movs	r2, #0
 801899e:	6818      	ldr	r0, [r3, #0]
 80189a0:	fa00 f009 	lsl.w	r0, r0, r9
 80189a4:	4302      	orrs	r2, r0
 80189a6:	f84a 2b04 	str.w	r2, [sl], #4
 80189aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80189ae:	459c      	cmp	ip, r3
 80189b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80189b4:	d8f3      	bhi.n	801899e <__lshift+0x6e>
 80189b6:	ebac 0304 	sub.w	r3, ip, r4
 80189ba:	3b15      	subs	r3, #21
 80189bc:	f023 0303 	bic.w	r3, r3, #3
 80189c0:	3304      	adds	r3, #4
 80189c2:	f104 0015 	add.w	r0, r4, #21
 80189c6:	4584      	cmp	ip, r0
 80189c8:	bf38      	it	cc
 80189ca:	2304      	movcc	r3, #4
 80189cc:	50ca      	str	r2, [r1, r3]
 80189ce:	b10a      	cbz	r2, 80189d4 <__lshift+0xa4>
 80189d0:	f108 0602 	add.w	r6, r8, #2
 80189d4:	3e01      	subs	r6, #1
 80189d6:	4638      	mov	r0, r7
 80189d8:	612e      	str	r6, [r5, #16]
 80189da:	4621      	mov	r1, r4
 80189dc:	f7ff fd8c 	bl	80184f8 <_Bfree>
 80189e0:	4628      	mov	r0, r5
 80189e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80189e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80189ea:	3301      	adds	r3, #1
 80189ec:	e7c5      	b.n	801897a <__lshift+0x4a>
 80189ee:	3904      	subs	r1, #4
 80189f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80189f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80189f8:	459c      	cmp	ip, r3
 80189fa:	d8f9      	bhi.n	80189f0 <__lshift+0xc0>
 80189fc:	e7ea      	b.n	80189d4 <__lshift+0xa4>
 80189fe:	bf00      	nop
 8018a00:	0801b50c 	.word	0x0801b50c
 8018a04:	0801b59c 	.word	0x0801b59c

08018a08 <__mcmp>:
 8018a08:	b530      	push	{r4, r5, lr}
 8018a0a:	6902      	ldr	r2, [r0, #16]
 8018a0c:	690c      	ldr	r4, [r1, #16]
 8018a0e:	1b12      	subs	r2, r2, r4
 8018a10:	d10e      	bne.n	8018a30 <__mcmp+0x28>
 8018a12:	f100 0314 	add.w	r3, r0, #20
 8018a16:	3114      	adds	r1, #20
 8018a18:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018a1c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018a20:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018a24:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018a28:	42a5      	cmp	r5, r4
 8018a2a:	d003      	beq.n	8018a34 <__mcmp+0x2c>
 8018a2c:	d305      	bcc.n	8018a3a <__mcmp+0x32>
 8018a2e:	2201      	movs	r2, #1
 8018a30:	4610      	mov	r0, r2
 8018a32:	bd30      	pop	{r4, r5, pc}
 8018a34:	4283      	cmp	r3, r0
 8018a36:	d3f3      	bcc.n	8018a20 <__mcmp+0x18>
 8018a38:	e7fa      	b.n	8018a30 <__mcmp+0x28>
 8018a3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018a3e:	e7f7      	b.n	8018a30 <__mcmp+0x28>

08018a40 <__mdiff>:
 8018a40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a44:	460c      	mov	r4, r1
 8018a46:	4606      	mov	r6, r0
 8018a48:	4611      	mov	r1, r2
 8018a4a:	4620      	mov	r0, r4
 8018a4c:	4617      	mov	r7, r2
 8018a4e:	f7ff ffdb 	bl	8018a08 <__mcmp>
 8018a52:	1e05      	subs	r5, r0, #0
 8018a54:	d110      	bne.n	8018a78 <__mdiff+0x38>
 8018a56:	4629      	mov	r1, r5
 8018a58:	4630      	mov	r0, r6
 8018a5a:	f7ff fd0d 	bl	8018478 <_Balloc>
 8018a5e:	b930      	cbnz	r0, 8018a6e <__mdiff+0x2e>
 8018a60:	4b39      	ldr	r3, [pc, #228]	; (8018b48 <__mdiff+0x108>)
 8018a62:	4602      	mov	r2, r0
 8018a64:	f240 2132 	movw	r1, #562	; 0x232
 8018a68:	4838      	ldr	r0, [pc, #224]	; (8018b4c <__mdiff+0x10c>)
 8018a6a:	f000 fb71 	bl	8019150 <__assert_func>
 8018a6e:	2301      	movs	r3, #1
 8018a70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018a74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a78:	bfa4      	itt	ge
 8018a7a:	463b      	movge	r3, r7
 8018a7c:	4627      	movge	r7, r4
 8018a7e:	4630      	mov	r0, r6
 8018a80:	6879      	ldr	r1, [r7, #4]
 8018a82:	bfa6      	itte	ge
 8018a84:	461c      	movge	r4, r3
 8018a86:	2500      	movge	r5, #0
 8018a88:	2501      	movlt	r5, #1
 8018a8a:	f7ff fcf5 	bl	8018478 <_Balloc>
 8018a8e:	b920      	cbnz	r0, 8018a9a <__mdiff+0x5a>
 8018a90:	4b2d      	ldr	r3, [pc, #180]	; (8018b48 <__mdiff+0x108>)
 8018a92:	4602      	mov	r2, r0
 8018a94:	f44f 7110 	mov.w	r1, #576	; 0x240
 8018a98:	e7e6      	b.n	8018a68 <__mdiff+0x28>
 8018a9a:	693e      	ldr	r6, [r7, #16]
 8018a9c:	60c5      	str	r5, [r0, #12]
 8018a9e:	6925      	ldr	r5, [r4, #16]
 8018aa0:	f107 0114 	add.w	r1, r7, #20
 8018aa4:	f104 0914 	add.w	r9, r4, #20
 8018aa8:	f100 0e14 	add.w	lr, r0, #20
 8018aac:	f107 0210 	add.w	r2, r7, #16
 8018ab0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8018ab4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8018ab8:	46f2      	mov	sl, lr
 8018aba:	2700      	movs	r7, #0
 8018abc:	f859 3b04 	ldr.w	r3, [r9], #4
 8018ac0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018ac4:	fa1f f883 	uxth.w	r8, r3
 8018ac8:	fa17 f78b 	uxtah	r7, r7, fp
 8018acc:	0c1b      	lsrs	r3, r3, #16
 8018ace:	eba7 0808 	sub.w	r8, r7, r8
 8018ad2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8018ad6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018ada:	fa1f f888 	uxth.w	r8, r8
 8018ade:	141f      	asrs	r7, r3, #16
 8018ae0:	454d      	cmp	r5, r9
 8018ae2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8018ae6:	f84a 3b04 	str.w	r3, [sl], #4
 8018aea:	d8e7      	bhi.n	8018abc <__mdiff+0x7c>
 8018aec:	1b2b      	subs	r3, r5, r4
 8018aee:	3b15      	subs	r3, #21
 8018af0:	f023 0303 	bic.w	r3, r3, #3
 8018af4:	3304      	adds	r3, #4
 8018af6:	3415      	adds	r4, #21
 8018af8:	42a5      	cmp	r5, r4
 8018afa:	bf38      	it	cc
 8018afc:	2304      	movcc	r3, #4
 8018afe:	4419      	add	r1, r3
 8018b00:	4473      	add	r3, lr
 8018b02:	469e      	mov	lr, r3
 8018b04:	460d      	mov	r5, r1
 8018b06:	4565      	cmp	r5, ip
 8018b08:	d30e      	bcc.n	8018b28 <__mdiff+0xe8>
 8018b0a:	f10c 0203 	add.w	r2, ip, #3
 8018b0e:	1a52      	subs	r2, r2, r1
 8018b10:	f022 0203 	bic.w	r2, r2, #3
 8018b14:	3903      	subs	r1, #3
 8018b16:	458c      	cmp	ip, r1
 8018b18:	bf38      	it	cc
 8018b1a:	2200      	movcc	r2, #0
 8018b1c:	441a      	add	r2, r3
 8018b1e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8018b22:	b17b      	cbz	r3, 8018b44 <__mdiff+0x104>
 8018b24:	6106      	str	r6, [r0, #16]
 8018b26:	e7a5      	b.n	8018a74 <__mdiff+0x34>
 8018b28:	f855 8b04 	ldr.w	r8, [r5], #4
 8018b2c:	fa17 f488 	uxtah	r4, r7, r8
 8018b30:	1422      	asrs	r2, r4, #16
 8018b32:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8018b36:	b2a4      	uxth	r4, r4
 8018b38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8018b3c:	f84e 4b04 	str.w	r4, [lr], #4
 8018b40:	1417      	asrs	r7, r2, #16
 8018b42:	e7e0      	b.n	8018b06 <__mdiff+0xc6>
 8018b44:	3e01      	subs	r6, #1
 8018b46:	e7ea      	b.n	8018b1e <__mdiff+0xde>
 8018b48:	0801b50c 	.word	0x0801b50c
 8018b4c:	0801b59c 	.word	0x0801b59c

08018b50 <__ulp>:
 8018b50:	b082      	sub	sp, #8
 8018b52:	ed8d 0b00 	vstr	d0, [sp]
 8018b56:	9b01      	ldr	r3, [sp, #4]
 8018b58:	4912      	ldr	r1, [pc, #72]	; (8018ba4 <__ulp+0x54>)
 8018b5a:	4019      	ands	r1, r3
 8018b5c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8018b60:	2900      	cmp	r1, #0
 8018b62:	dd05      	ble.n	8018b70 <__ulp+0x20>
 8018b64:	2200      	movs	r2, #0
 8018b66:	460b      	mov	r3, r1
 8018b68:	ec43 2b10 	vmov	d0, r2, r3
 8018b6c:	b002      	add	sp, #8
 8018b6e:	4770      	bx	lr
 8018b70:	4249      	negs	r1, r1
 8018b72:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8018b76:	ea4f 5021 	mov.w	r0, r1, asr #20
 8018b7a:	f04f 0200 	mov.w	r2, #0
 8018b7e:	f04f 0300 	mov.w	r3, #0
 8018b82:	da04      	bge.n	8018b8e <__ulp+0x3e>
 8018b84:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8018b88:	fa41 f300 	asr.w	r3, r1, r0
 8018b8c:	e7ec      	b.n	8018b68 <__ulp+0x18>
 8018b8e:	f1a0 0114 	sub.w	r1, r0, #20
 8018b92:	291e      	cmp	r1, #30
 8018b94:	bfda      	itte	le
 8018b96:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8018b9a:	fa20 f101 	lsrle.w	r1, r0, r1
 8018b9e:	2101      	movgt	r1, #1
 8018ba0:	460a      	mov	r2, r1
 8018ba2:	e7e1      	b.n	8018b68 <__ulp+0x18>
 8018ba4:	7ff00000 	.word	0x7ff00000

08018ba8 <__b2d>:
 8018ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018baa:	6905      	ldr	r5, [r0, #16]
 8018bac:	f100 0714 	add.w	r7, r0, #20
 8018bb0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018bb4:	1f2e      	subs	r6, r5, #4
 8018bb6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018bba:	4620      	mov	r0, r4
 8018bbc:	f7ff fd52 	bl	8018664 <__hi0bits>
 8018bc0:	f1c0 0320 	rsb	r3, r0, #32
 8018bc4:	280a      	cmp	r0, #10
 8018bc6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8018c44 <__b2d+0x9c>
 8018bca:	600b      	str	r3, [r1, #0]
 8018bcc:	dc14      	bgt.n	8018bf8 <__b2d+0x50>
 8018bce:	f1c0 0e0b 	rsb	lr, r0, #11
 8018bd2:	fa24 f10e 	lsr.w	r1, r4, lr
 8018bd6:	42b7      	cmp	r7, r6
 8018bd8:	ea41 030c 	orr.w	r3, r1, ip
 8018bdc:	bf34      	ite	cc
 8018bde:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018be2:	2100      	movcs	r1, #0
 8018be4:	3015      	adds	r0, #21
 8018be6:	fa04 f000 	lsl.w	r0, r4, r0
 8018bea:	fa21 f10e 	lsr.w	r1, r1, lr
 8018bee:	ea40 0201 	orr.w	r2, r0, r1
 8018bf2:	ec43 2b10 	vmov	d0, r2, r3
 8018bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018bf8:	42b7      	cmp	r7, r6
 8018bfa:	bf3a      	itte	cc
 8018bfc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018c00:	f1a5 0608 	subcc.w	r6, r5, #8
 8018c04:	2100      	movcs	r1, #0
 8018c06:	380b      	subs	r0, #11
 8018c08:	d017      	beq.n	8018c3a <__b2d+0x92>
 8018c0a:	f1c0 0c20 	rsb	ip, r0, #32
 8018c0e:	fa04 f500 	lsl.w	r5, r4, r0
 8018c12:	42be      	cmp	r6, r7
 8018c14:	fa21 f40c 	lsr.w	r4, r1, ip
 8018c18:	ea45 0504 	orr.w	r5, r5, r4
 8018c1c:	bf8c      	ite	hi
 8018c1e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018c22:	2400      	movls	r4, #0
 8018c24:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8018c28:	fa01 f000 	lsl.w	r0, r1, r0
 8018c2c:	fa24 f40c 	lsr.w	r4, r4, ip
 8018c30:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8018c34:	ea40 0204 	orr.w	r2, r0, r4
 8018c38:	e7db      	b.n	8018bf2 <__b2d+0x4a>
 8018c3a:	ea44 030c 	orr.w	r3, r4, ip
 8018c3e:	460a      	mov	r2, r1
 8018c40:	e7d7      	b.n	8018bf2 <__b2d+0x4a>
 8018c42:	bf00      	nop
 8018c44:	3ff00000 	.word	0x3ff00000

08018c48 <__d2b>:
 8018c48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018c4c:	4689      	mov	r9, r1
 8018c4e:	2101      	movs	r1, #1
 8018c50:	ec57 6b10 	vmov	r6, r7, d0
 8018c54:	4690      	mov	r8, r2
 8018c56:	f7ff fc0f 	bl	8018478 <_Balloc>
 8018c5a:	4604      	mov	r4, r0
 8018c5c:	b930      	cbnz	r0, 8018c6c <__d2b+0x24>
 8018c5e:	4602      	mov	r2, r0
 8018c60:	4b25      	ldr	r3, [pc, #148]	; (8018cf8 <__d2b+0xb0>)
 8018c62:	4826      	ldr	r0, [pc, #152]	; (8018cfc <__d2b+0xb4>)
 8018c64:	f240 310a 	movw	r1, #778	; 0x30a
 8018c68:	f000 fa72 	bl	8019150 <__assert_func>
 8018c6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8018c70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018c74:	bb35      	cbnz	r5, 8018cc4 <__d2b+0x7c>
 8018c76:	2e00      	cmp	r6, #0
 8018c78:	9301      	str	r3, [sp, #4]
 8018c7a:	d028      	beq.n	8018cce <__d2b+0x86>
 8018c7c:	4668      	mov	r0, sp
 8018c7e:	9600      	str	r6, [sp, #0]
 8018c80:	f7ff fd10 	bl	80186a4 <__lo0bits>
 8018c84:	9900      	ldr	r1, [sp, #0]
 8018c86:	b300      	cbz	r0, 8018cca <__d2b+0x82>
 8018c88:	9a01      	ldr	r2, [sp, #4]
 8018c8a:	f1c0 0320 	rsb	r3, r0, #32
 8018c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8018c92:	430b      	orrs	r3, r1
 8018c94:	40c2      	lsrs	r2, r0
 8018c96:	6163      	str	r3, [r4, #20]
 8018c98:	9201      	str	r2, [sp, #4]
 8018c9a:	9b01      	ldr	r3, [sp, #4]
 8018c9c:	61a3      	str	r3, [r4, #24]
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	bf14      	ite	ne
 8018ca2:	2202      	movne	r2, #2
 8018ca4:	2201      	moveq	r2, #1
 8018ca6:	6122      	str	r2, [r4, #16]
 8018ca8:	b1d5      	cbz	r5, 8018ce0 <__d2b+0x98>
 8018caa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8018cae:	4405      	add	r5, r0
 8018cb0:	f8c9 5000 	str.w	r5, [r9]
 8018cb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018cb8:	f8c8 0000 	str.w	r0, [r8]
 8018cbc:	4620      	mov	r0, r4
 8018cbe:	b003      	add	sp, #12
 8018cc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018cc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018cc8:	e7d5      	b.n	8018c76 <__d2b+0x2e>
 8018cca:	6161      	str	r1, [r4, #20]
 8018ccc:	e7e5      	b.n	8018c9a <__d2b+0x52>
 8018cce:	a801      	add	r0, sp, #4
 8018cd0:	f7ff fce8 	bl	80186a4 <__lo0bits>
 8018cd4:	9b01      	ldr	r3, [sp, #4]
 8018cd6:	6163      	str	r3, [r4, #20]
 8018cd8:	2201      	movs	r2, #1
 8018cda:	6122      	str	r2, [r4, #16]
 8018cdc:	3020      	adds	r0, #32
 8018cde:	e7e3      	b.n	8018ca8 <__d2b+0x60>
 8018ce0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018ce4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018ce8:	f8c9 0000 	str.w	r0, [r9]
 8018cec:	6918      	ldr	r0, [r3, #16]
 8018cee:	f7ff fcb9 	bl	8018664 <__hi0bits>
 8018cf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018cf6:	e7df      	b.n	8018cb8 <__d2b+0x70>
 8018cf8:	0801b50c 	.word	0x0801b50c
 8018cfc:	0801b59c 	.word	0x0801b59c

08018d00 <__ratio>:
 8018d00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d04:	4688      	mov	r8, r1
 8018d06:	4669      	mov	r1, sp
 8018d08:	4681      	mov	r9, r0
 8018d0a:	f7ff ff4d 	bl	8018ba8 <__b2d>
 8018d0e:	a901      	add	r1, sp, #4
 8018d10:	4640      	mov	r0, r8
 8018d12:	ec55 4b10 	vmov	r4, r5, d0
 8018d16:	f7ff ff47 	bl	8018ba8 <__b2d>
 8018d1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018d1e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018d22:	eba3 0c02 	sub.w	ip, r3, r2
 8018d26:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018d2a:	1a9b      	subs	r3, r3, r2
 8018d2c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018d30:	ec51 0b10 	vmov	r0, r1, d0
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	bfd6      	itet	le
 8018d38:	460a      	movle	r2, r1
 8018d3a:	462a      	movgt	r2, r5
 8018d3c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018d40:	468b      	mov	fp, r1
 8018d42:	462f      	mov	r7, r5
 8018d44:	bfd4      	ite	le
 8018d46:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8018d4a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8018d4e:	4620      	mov	r0, r4
 8018d50:	ee10 2a10 	vmov	r2, s0
 8018d54:	465b      	mov	r3, fp
 8018d56:	4639      	mov	r1, r7
 8018d58:	f7e7 fd78 	bl	800084c <__aeabi_ddiv>
 8018d5c:	ec41 0b10 	vmov	d0, r0, r1
 8018d60:	b003      	add	sp, #12
 8018d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018d66 <__copybits>:
 8018d66:	3901      	subs	r1, #1
 8018d68:	b570      	push	{r4, r5, r6, lr}
 8018d6a:	1149      	asrs	r1, r1, #5
 8018d6c:	6914      	ldr	r4, [r2, #16]
 8018d6e:	3101      	adds	r1, #1
 8018d70:	f102 0314 	add.w	r3, r2, #20
 8018d74:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018d78:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018d7c:	1f05      	subs	r5, r0, #4
 8018d7e:	42a3      	cmp	r3, r4
 8018d80:	d30c      	bcc.n	8018d9c <__copybits+0x36>
 8018d82:	1aa3      	subs	r3, r4, r2
 8018d84:	3b11      	subs	r3, #17
 8018d86:	f023 0303 	bic.w	r3, r3, #3
 8018d8a:	3211      	adds	r2, #17
 8018d8c:	42a2      	cmp	r2, r4
 8018d8e:	bf88      	it	hi
 8018d90:	2300      	movhi	r3, #0
 8018d92:	4418      	add	r0, r3
 8018d94:	2300      	movs	r3, #0
 8018d96:	4288      	cmp	r0, r1
 8018d98:	d305      	bcc.n	8018da6 <__copybits+0x40>
 8018d9a:	bd70      	pop	{r4, r5, r6, pc}
 8018d9c:	f853 6b04 	ldr.w	r6, [r3], #4
 8018da0:	f845 6f04 	str.w	r6, [r5, #4]!
 8018da4:	e7eb      	b.n	8018d7e <__copybits+0x18>
 8018da6:	f840 3b04 	str.w	r3, [r0], #4
 8018daa:	e7f4      	b.n	8018d96 <__copybits+0x30>

08018dac <__any_on>:
 8018dac:	f100 0214 	add.w	r2, r0, #20
 8018db0:	6900      	ldr	r0, [r0, #16]
 8018db2:	114b      	asrs	r3, r1, #5
 8018db4:	4298      	cmp	r0, r3
 8018db6:	b510      	push	{r4, lr}
 8018db8:	db11      	blt.n	8018dde <__any_on+0x32>
 8018dba:	dd0a      	ble.n	8018dd2 <__any_on+0x26>
 8018dbc:	f011 011f 	ands.w	r1, r1, #31
 8018dc0:	d007      	beq.n	8018dd2 <__any_on+0x26>
 8018dc2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018dc6:	fa24 f001 	lsr.w	r0, r4, r1
 8018dca:	fa00 f101 	lsl.w	r1, r0, r1
 8018dce:	428c      	cmp	r4, r1
 8018dd0:	d10b      	bne.n	8018dea <__any_on+0x3e>
 8018dd2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018dd6:	4293      	cmp	r3, r2
 8018dd8:	d803      	bhi.n	8018de2 <__any_on+0x36>
 8018dda:	2000      	movs	r0, #0
 8018ddc:	bd10      	pop	{r4, pc}
 8018dde:	4603      	mov	r3, r0
 8018de0:	e7f7      	b.n	8018dd2 <__any_on+0x26>
 8018de2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018de6:	2900      	cmp	r1, #0
 8018de8:	d0f5      	beq.n	8018dd6 <__any_on+0x2a>
 8018dea:	2001      	movs	r0, #1
 8018dec:	e7f6      	b.n	8018ddc <__any_on+0x30>

08018dee <_calloc_r>:
 8018dee:	b513      	push	{r0, r1, r4, lr}
 8018df0:	434a      	muls	r2, r1
 8018df2:	4611      	mov	r1, r2
 8018df4:	9201      	str	r2, [sp, #4]
 8018df6:	f7fc fa69 	bl	80152cc <_malloc_r>
 8018dfa:	4604      	mov	r4, r0
 8018dfc:	b118      	cbz	r0, 8018e06 <_calloc_r+0x18>
 8018dfe:	9a01      	ldr	r2, [sp, #4]
 8018e00:	2100      	movs	r1, #0
 8018e02:	f7fc fa0b 	bl	801521c <memset>
 8018e06:	4620      	mov	r0, r4
 8018e08:	b002      	add	sp, #8
 8018e0a:	bd10      	pop	{r4, pc}

08018e0c <__ssputs_r>:
 8018e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e10:	688e      	ldr	r6, [r1, #8]
 8018e12:	429e      	cmp	r6, r3
 8018e14:	4682      	mov	sl, r0
 8018e16:	460c      	mov	r4, r1
 8018e18:	4690      	mov	r8, r2
 8018e1a:	461f      	mov	r7, r3
 8018e1c:	d838      	bhi.n	8018e90 <__ssputs_r+0x84>
 8018e1e:	898a      	ldrh	r2, [r1, #12]
 8018e20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018e24:	d032      	beq.n	8018e8c <__ssputs_r+0x80>
 8018e26:	6825      	ldr	r5, [r4, #0]
 8018e28:	6909      	ldr	r1, [r1, #16]
 8018e2a:	eba5 0901 	sub.w	r9, r5, r1
 8018e2e:	6965      	ldr	r5, [r4, #20]
 8018e30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018e34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018e38:	3301      	adds	r3, #1
 8018e3a:	444b      	add	r3, r9
 8018e3c:	106d      	asrs	r5, r5, #1
 8018e3e:	429d      	cmp	r5, r3
 8018e40:	bf38      	it	cc
 8018e42:	461d      	movcc	r5, r3
 8018e44:	0553      	lsls	r3, r2, #21
 8018e46:	d531      	bpl.n	8018eac <__ssputs_r+0xa0>
 8018e48:	4629      	mov	r1, r5
 8018e4a:	f7fc fa3f 	bl	80152cc <_malloc_r>
 8018e4e:	4606      	mov	r6, r0
 8018e50:	b950      	cbnz	r0, 8018e68 <__ssputs_r+0x5c>
 8018e52:	230c      	movs	r3, #12
 8018e54:	f8ca 3000 	str.w	r3, [sl]
 8018e58:	89a3      	ldrh	r3, [r4, #12]
 8018e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e5e:	81a3      	strh	r3, [r4, #12]
 8018e60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e68:	6921      	ldr	r1, [r4, #16]
 8018e6a:	464a      	mov	r2, r9
 8018e6c:	f7fc f9c8 	bl	8015200 <memcpy>
 8018e70:	89a3      	ldrh	r3, [r4, #12]
 8018e72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018e7a:	81a3      	strh	r3, [r4, #12]
 8018e7c:	6126      	str	r6, [r4, #16]
 8018e7e:	6165      	str	r5, [r4, #20]
 8018e80:	444e      	add	r6, r9
 8018e82:	eba5 0509 	sub.w	r5, r5, r9
 8018e86:	6026      	str	r6, [r4, #0]
 8018e88:	60a5      	str	r5, [r4, #8]
 8018e8a:	463e      	mov	r6, r7
 8018e8c:	42be      	cmp	r6, r7
 8018e8e:	d900      	bls.n	8018e92 <__ssputs_r+0x86>
 8018e90:	463e      	mov	r6, r7
 8018e92:	4632      	mov	r2, r6
 8018e94:	6820      	ldr	r0, [r4, #0]
 8018e96:	4641      	mov	r1, r8
 8018e98:	f000 fb44 	bl	8019524 <memmove>
 8018e9c:	68a3      	ldr	r3, [r4, #8]
 8018e9e:	6822      	ldr	r2, [r4, #0]
 8018ea0:	1b9b      	subs	r3, r3, r6
 8018ea2:	4432      	add	r2, r6
 8018ea4:	60a3      	str	r3, [r4, #8]
 8018ea6:	6022      	str	r2, [r4, #0]
 8018ea8:	2000      	movs	r0, #0
 8018eaa:	e7db      	b.n	8018e64 <__ssputs_r+0x58>
 8018eac:	462a      	mov	r2, r5
 8018eae:	f000 fb53 	bl	8019558 <_realloc_r>
 8018eb2:	4606      	mov	r6, r0
 8018eb4:	2800      	cmp	r0, #0
 8018eb6:	d1e1      	bne.n	8018e7c <__ssputs_r+0x70>
 8018eb8:	6921      	ldr	r1, [r4, #16]
 8018eba:	4650      	mov	r0, sl
 8018ebc:	f7fc f9b6 	bl	801522c <_free_r>
 8018ec0:	e7c7      	b.n	8018e52 <__ssputs_r+0x46>
	...

08018ec4 <_svfiprintf_r>:
 8018ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ec8:	4698      	mov	r8, r3
 8018eca:	898b      	ldrh	r3, [r1, #12]
 8018ecc:	061b      	lsls	r3, r3, #24
 8018ece:	b09d      	sub	sp, #116	; 0x74
 8018ed0:	4607      	mov	r7, r0
 8018ed2:	460d      	mov	r5, r1
 8018ed4:	4614      	mov	r4, r2
 8018ed6:	d50e      	bpl.n	8018ef6 <_svfiprintf_r+0x32>
 8018ed8:	690b      	ldr	r3, [r1, #16]
 8018eda:	b963      	cbnz	r3, 8018ef6 <_svfiprintf_r+0x32>
 8018edc:	2140      	movs	r1, #64	; 0x40
 8018ede:	f7fc f9f5 	bl	80152cc <_malloc_r>
 8018ee2:	6028      	str	r0, [r5, #0]
 8018ee4:	6128      	str	r0, [r5, #16]
 8018ee6:	b920      	cbnz	r0, 8018ef2 <_svfiprintf_r+0x2e>
 8018ee8:	230c      	movs	r3, #12
 8018eea:	603b      	str	r3, [r7, #0]
 8018eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018ef0:	e0d1      	b.n	8019096 <_svfiprintf_r+0x1d2>
 8018ef2:	2340      	movs	r3, #64	; 0x40
 8018ef4:	616b      	str	r3, [r5, #20]
 8018ef6:	2300      	movs	r3, #0
 8018ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8018efa:	2320      	movs	r3, #32
 8018efc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018f00:	f8cd 800c 	str.w	r8, [sp, #12]
 8018f04:	2330      	movs	r3, #48	; 0x30
 8018f06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80190b0 <_svfiprintf_r+0x1ec>
 8018f0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018f0e:	f04f 0901 	mov.w	r9, #1
 8018f12:	4623      	mov	r3, r4
 8018f14:	469a      	mov	sl, r3
 8018f16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018f1a:	b10a      	cbz	r2, 8018f20 <_svfiprintf_r+0x5c>
 8018f1c:	2a25      	cmp	r2, #37	; 0x25
 8018f1e:	d1f9      	bne.n	8018f14 <_svfiprintf_r+0x50>
 8018f20:	ebba 0b04 	subs.w	fp, sl, r4
 8018f24:	d00b      	beq.n	8018f3e <_svfiprintf_r+0x7a>
 8018f26:	465b      	mov	r3, fp
 8018f28:	4622      	mov	r2, r4
 8018f2a:	4629      	mov	r1, r5
 8018f2c:	4638      	mov	r0, r7
 8018f2e:	f7ff ff6d 	bl	8018e0c <__ssputs_r>
 8018f32:	3001      	adds	r0, #1
 8018f34:	f000 80aa 	beq.w	801908c <_svfiprintf_r+0x1c8>
 8018f38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018f3a:	445a      	add	r2, fp
 8018f3c:	9209      	str	r2, [sp, #36]	; 0x24
 8018f3e:	f89a 3000 	ldrb.w	r3, [sl]
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	f000 80a2 	beq.w	801908c <_svfiprintf_r+0x1c8>
 8018f48:	2300      	movs	r3, #0
 8018f4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018f4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018f52:	f10a 0a01 	add.w	sl, sl, #1
 8018f56:	9304      	str	r3, [sp, #16]
 8018f58:	9307      	str	r3, [sp, #28]
 8018f5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018f5e:	931a      	str	r3, [sp, #104]	; 0x68
 8018f60:	4654      	mov	r4, sl
 8018f62:	2205      	movs	r2, #5
 8018f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018f68:	4851      	ldr	r0, [pc, #324]	; (80190b0 <_svfiprintf_r+0x1ec>)
 8018f6a:	f7e7 f939 	bl	80001e0 <memchr>
 8018f6e:	9a04      	ldr	r2, [sp, #16]
 8018f70:	b9d8      	cbnz	r0, 8018faa <_svfiprintf_r+0xe6>
 8018f72:	06d0      	lsls	r0, r2, #27
 8018f74:	bf44      	itt	mi
 8018f76:	2320      	movmi	r3, #32
 8018f78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018f7c:	0711      	lsls	r1, r2, #28
 8018f7e:	bf44      	itt	mi
 8018f80:	232b      	movmi	r3, #43	; 0x2b
 8018f82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018f86:	f89a 3000 	ldrb.w	r3, [sl]
 8018f8a:	2b2a      	cmp	r3, #42	; 0x2a
 8018f8c:	d015      	beq.n	8018fba <_svfiprintf_r+0xf6>
 8018f8e:	9a07      	ldr	r2, [sp, #28]
 8018f90:	4654      	mov	r4, sl
 8018f92:	2000      	movs	r0, #0
 8018f94:	f04f 0c0a 	mov.w	ip, #10
 8018f98:	4621      	mov	r1, r4
 8018f9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018f9e:	3b30      	subs	r3, #48	; 0x30
 8018fa0:	2b09      	cmp	r3, #9
 8018fa2:	d94e      	bls.n	8019042 <_svfiprintf_r+0x17e>
 8018fa4:	b1b0      	cbz	r0, 8018fd4 <_svfiprintf_r+0x110>
 8018fa6:	9207      	str	r2, [sp, #28]
 8018fa8:	e014      	b.n	8018fd4 <_svfiprintf_r+0x110>
 8018faa:	eba0 0308 	sub.w	r3, r0, r8
 8018fae:	fa09 f303 	lsl.w	r3, r9, r3
 8018fb2:	4313      	orrs	r3, r2
 8018fb4:	9304      	str	r3, [sp, #16]
 8018fb6:	46a2      	mov	sl, r4
 8018fb8:	e7d2      	b.n	8018f60 <_svfiprintf_r+0x9c>
 8018fba:	9b03      	ldr	r3, [sp, #12]
 8018fbc:	1d19      	adds	r1, r3, #4
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	9103      	str	r1, [sp, #12]
 8018fc2:	2b00      	cmp	r3, #0
 8018fc4:	bfbb      	ittet	lt
 8018fc6:	425b      	neglt	r3, r3
 8018fc8:	f042 0202 	orrlt.w	r2, r2, #2
 8018fcc:	9307      	strge	r3, [sp, #28]
 8018fce:	9307      	strlt	r3, [sp, #28]
 8018fd0:	bfb8      	it	lt
 8018fd2:	9204      	strlt	r2, [sp, #16]
 8018fd4:	7823      	ldrb	r3, [r4, #0]
 8018fd6:	2b2e      	cmp	r3, #46	; 0x2e
 8018fd8:	d10c      	bne.n	8018ff4 <_svfiprintf_r+0x130>
 8018fda:	7863      	ldrb	r3, [r4, #1]
 8018fdc:	2b2a      	cmp	r3, #42	; 0x2a
 8018fde:	d135      	bne.n	801904c <_svfiprintf_r+0x188>
 8018fe0:	9b03      	ldr	r3, [sp, #12]
 8018fe2:	1d1a      	adds	r2, r3, #4
 8018fe4:	681b      	ldr	r3, [r3, #0]
 8018fe6:	9203      	str	r2, [sp, #12]
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	bfb8      	it	lt
 8018fec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018ff0:	3402      	adds	r4, #2
 8018ff2:	9305      	str	r3, [sp, #20]
 8018ff4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80190c0 <_svfiprintf_r+0x1fc>
 8018ff8:	7821      	ldrb	r1, [r4, #0]
 8018ffa:	2203      	movs	r2, #3
 8018ffc:	4650      	mov	r0, sl
 8018ffe:	f7e7 f8ef 	bl	80001e0 <memchr>
 8019002:	b140      	cbz	r0, 8019016 <_svfiprintf_r+0x152>
 8019004:	2340      	movs	r3, #64	; 0x40
 8019006:	eba0 000a 	sub.w	r0, r0, sl
 801900a:	fa03 f000 	lsl.w	r0, r3, r0
 801900e:	9b04      	ldr	r3, [sp, #16]
 8019010:	4303      	orrs	r3, r0
 8019012:	3401      	adds	r4, #1
 8019014:	9304      	str	r3, [sp, #16]
 8019016:	f814 1b01 	ldrb.w	r1, [r4], #1
 801901a:	4826      	ldr	r0, [pc, #152]	; (80190b4 <_svfiprintf_r+0x1f0>)
 801901c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019020:	2206      	movs	r2, #6
 8019022:	f7e7 f8dd 	bl	80001e0 <memchr>
 8019026:	2800      	cmp	r0, #0
 8019028:	d038      	beq.n	801909c <_svfiprintf_r+0x1d8>
 801902a:	4b23      	ldr	r3, [pc, #140]	; (80190b8 <_svfiprintf_r+0x1f4>)
 801902c:	bb1b      	cbnz	r3, 8019076 <_svfiprintf_r+0x1b2>
 801902e:	9b03      	ldr	r3, [sp, #12]
 8019030:	3307      	adds	r3, #7
 8019032:	f023 0307 	bic.w	r3, r3, #7
 8019036:	3308      	adds	r3, #8
 8019038:	9303      	str	r3, [sp, #12]
 801903a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801903c:	4433      	add	r3, r6
 801903e:	9309      	str	r3, [sp, #36]	; 0x24
 8019040:	e767      	b.n	8018f12 <_svfiprintf_r+0x4e>
 8019042:	fb0c 3202 	mla	r2, ip, r2, r3
 8019046:	460c      	mov	r4, r1
 8019048:	2001      	movs	r0, #1
 801904a:	e7a5      	b.n	8018f98 <_svfiprintf_r+0xd4>
 801904c:	2300      	movs	r3, #0
 801904e:	3401      	adds	r4, #1
 8019050:	9305      	str	r3, [sp, #20]
 8019052:	4619      	mov	r1, r3
 8019054:	f04f 0c0a 	mov.w	ip, #10
 8019058:	4620      	mov	r0, r4
 801905a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801905e:	3a30      	subs	r2, #48	; 0x30
 8019060:	2a09      	cmp	r2, #9
 8019062:	d903      	bls.n	801906c <_svfiprintf_r+0x1a8>
 8019064:	2b00      	cmp	r3, #0
 8019066:	d0c5      	beq.n	8018ff4 <_svfiprintf_r+0x130>
 8019068:	9105      	str	r1, [sp, #20]
 801906a:	e7c3      	b.n	8018ff4 <_svfiprintf_r+0x130>
 801906c:	fb0c 2101 	mla	r1, ip, r1, r2
 8019070:	4604      	mov	r4, r0
 8019072:	2301      	movs	r3, #1
 8019074:	e7f0      	b.n	8019058 <_svfiprintf_r+0x194>
 8019076:	ab03      	add	r3, sp, #12
 8019078:	9300      	str	r3, [sp, #0]
 801907a:	462a      	mov	r2, r5
 801907c:	4b0f      	ldr	r3, [pc, #60]	; (80190bc <_svfiprintf_r+0x1f8>)
 801907e:	a904      	add	r1, sp, #16
 8019080:	4638      	mov	r0, r7
 8019082:	f7fc fa1d 	bl	80154c0 <_printf_float>
 8019086:	1c42      	adds	r2, r0, #1
 8019088:	4606      	mov	r6, r0
 801908a:	d1d6      	bne.n	801903a <_svfiprintf_r+0x176>
 801908c:	89ab      	ldrh	r3, [r5, #12]
 801908e:	065b      	lsls	r3, r3, #25
 8019090:	f53f af2c 	bmi.w	8018eec <_svfiprintf_r+0x28>
 8019094:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019096:	b01d      	add	sp, #116	; 0x74
 8019098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801909c:	ab03      	add	r3, sp, #12
 801909e:	9300      	str	r3, [sp, #0]
 80190a0:	462a      	mov	r2, r5
 80190a2:	4b06      	ldr	r3, [pc, #24]	; (80190bc <_svfiprintf_r+0x1f8>)
 80190a4:	a904      	add	r1, sp, #16
 80190a6:	4638      	mov	r0, r7
 80190a8:	f7fc fcae 	bl	8015a08 <_printf_i>
 80190ac:	e7eb      	b.n	8019086 <_svfiprintf_r+0x1c2>
 80190ae:	bf00      	nop
 80190b0:	0801b6fc 	.word	0x0801b6fc
 80190b4:	0801b706 	.word	0x0801b706
 80190b8:	080154c1 	.word	0x080154c1
 80190bc:	08018e0d 	.word	0x08018e0d
 80190c0:	0801b702 	.word	0x0801b702

080190c4 <_read_r>:
 80190c4:	b538      	push	{r3, r4, r5, lr}
 80190c6:	4d07      	ldr	r5, [pc, #28]	; (80190e4 <_read_r+0x20>)
 80190c8:	4604      	mov	r4, r0
 80190ca:	4608      	mov	r0, r1
 80190cc:	4611      	mov	r1, r2
 80190ce:	2200      	movs	r2, #0
 80190d0:	602a      	str	r2, [r5, #0]
 80190d2:	461a      	mov	r2, r3
 80190d4:	f7ee f80a 	bl	80070ec <_read>
 80190d8:	1c43      	adds	r3, r0, #1
 80190da:	d102      	bne.n	80190e2 <_read_r+0x1e>
 80190dc:	682b      	ldr	r3, [r5, #0]
 80190de:	b103      	cbz	r3, 80190e2 <_read_r+0x1e>
 80190e0:	6023      	str	r3, [r4, #0]
 80190e2:	bd38      	pop	{r3, r4, r5, pc}
 80190e4:	20008f10 	.word	0x20008f10

080190e8 <nan>:
 80190e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80190f0 <nan+0x8>
 80190ec:	4770      	bx	lr
 80190ee:	bf00      	nop
 80190f0:	00000000 	.word	0x00000000
 80190f4:	7ff80000 	.word	0x7ff80000

080190f8 <finitef>:
 80190f8:	b082      	sub	sp, #8
 80190fa:	ed8d 0a01 	vstr	s0, [sp, #4]
 80190fe:	9801      	ldr	r0, [sp, #4]
 8019100:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019104:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8019108:	bfac      	ite	ge
 801910a:	2000      	movge	r0, #0
 801910c:	2001      	movlt	r0, #1
 801910e:	b002      	add	sp, #8
 8019110:	4770      	bx	lr

08019112 <strncmp>:
 8019112:	b510      	push	{r4, lr}
 8019114:	b16a      	cbz	r2, 8019132 <strncmp+0x20>
 8019116:	3901      	subs	r1, #1
 8019118:	1884      	adds	r4, r0, r2
 801911a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801911e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019122:	4293      	cmp	r3, r2
 8019124:	d103      	bne.n	801912e <strncmp+0x1c>
 8019126:	42a0      	cmp	r0, r4
 8019128:	d001      	beq.n	801912e <strncmp+0x1c>
 801912a:	2b00      	cmp	r3, #0
 801912c:	d1f5      	bne.n	801911a <strncmp+0x8>
 801912e:	1a98      	subs	r0, r3, r2
 8019130:	bd10      	pop	{r4, pc}
 8019132:	4610      	mov	r0, r2
 8019134:	e7fc      	b.n	8019130 <strncmp+0x1e>

08019136 <__ascii_wctomb>:
 8019136:	b149      	cbz	r1, 801914c <__ascii_wctomb+0x16>
 8019138:	2aff      	cmp	r2, #255	; 0xff
 801913a:	bf85      	ittet	hi
 801913c:	238a      	movhi	r3, #138	; 0x8a
 801913e:	6003      	strhi	r3, [r0, #0]
 8019140:	700a      	strbls	r2, [r1, #0]
 8019142:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8019146:	bf98      	it	ls
 8019148:	2001      	movls	r0, #1
 801914a:	4770      	bx	lr
 801914c:	4608      	mov	r0, r1
 801914e:	4770      	bx	lr

08019150 <__assert_func>:
 8019150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019152:	4614      	mov	r4, r2
 8019154:	461a      	mov	r2, r3
 8019156:	4b09      	ldr	r3, [pc, #36]	; (801917c <__assert_func+0x2c>)
 8019158:	681b      	ldr	r3, [r3, #0]
 801915a:	4605      	mov	r5, r0
 801915c:	68d8      	ldr	r0, [r3, #12]
 801915e:	b14c      	cbz	r4, 8019174 <__assert_func+0x24>
 8019160:	4b07      	ldr	r3, [pc, #28]	; (8019180 <__assert_func+0x30>)
 8019162:	9100      	str	r1, [sp, #0]
 8019164:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019168:	4906      	ldr	r1, [pc, #24]	; (8019184 <__assert_func+0x34>)
 801916a:	462b      	mov	r3, r5
 801916c:	f000 f9a6 	bl	80194bc <fiprintf>
 8019170:	f000 fc32 	bl	80199d8 <abort>
 8019174:	4b04      	ldr	r3, [pc, #16]	; (8019188 <__assert_func+0x38>)
 8019176:	461c      	mov	r4, r3
 8019178:	e7f3      	b.n	8019162 <__assert_func+0x12>
 801917a:	bf00      	nop
 801917c:	20000244 	.word	0x20000244
 8019180:	0801b70d 	.word	0x0801b70d
 8019184:	0801b71a 	.word	0x0801b71a
 8019188:	0801b748 	.word	0x0801b748

0801918c <__sflush_r>:
 801918c:	898a      	ldrh	r2, [r1, #12]
 801918e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019192:	4605      	mov	r5, r0
 8019194:	0710      	lsls	r0, r2, #28
 8019196:	460c      	mov	r4, r1
 8019198:	d458      	bmi.n	801924c <__sflush_r+0xc0>
 801919a:	684b      	ldr	r3, [r1, #4]
 801919c:	2b00      	cmp	r3, #0
 801919e:	dc05      	bgt.n	80191ac <__sflush_r+0x20>
 80191a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	dc02      	bgt.n	80191ac <__sflush_r+0x20>
 80191a6:	2000      	movs	r0, #0
 80191a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80191ae:	2e00      	cmp	r6, #0
 80191b0:	d0f9      	beq.n	80191a6 <__sflush_r+0x1a>
 80191b2:	2300      	movs	r3, #0
 80191b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80191b8:	682f      	ldr	r7, [r5, #0]
 80191ba:	602b      	str	r3, [r5, #0]
 80191bc:	d032      	beq.n	8019224 <__sflush_r+0x98>
 80191be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80191c0:	89a3      	ldrh	r3, [r4, #12]
 80191c2:	075a      	lsls	r2, r3, #29
 80191c4:	d505      	bpl.n	80191d2 <__sflush_r+0x46>
 80191c6:	6863      	ldr	r3, [r4, #4]
 80191c8:	1ac0      	subs	r0, r0, r3
 80191ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80191cc:	b10b      	cbz	r3, 80191d2 <__sflush_r+0x46>
 80191ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80191d0:	1ac0      	subs	r0, r0, r3
 80191d2:	2300      	movs	r3, #0
 80191d4:	4602      	mov	r2, r0
 80191d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80191d8:	6a21      	ldr	r1, [r4, #32]
 80191da:	4628      	mov	r0, r5
 80191dc:	47b0      	blx	r6
 80191de:	1c43      	adds	r3, r0, #1
 80191e0:	89a3      	ldrh	r3, [r4, #12]
 80191e2:	d106      	bne.n	80191f2 <__sflush_r+0x66>
 80191e4:	6829      	ldr	r1, [r5, #0]
 80191e6:	291d      	cmp	r1, #29
 80191e8:	d82c      	bhi.n	8019244 <__sflush_r+0xb8>
 80191ea:	4a2a      	ldr	r2, [pc, #168]	; (8019294 <__sflush_r+0x108>)
 80191ec:	40ca      	lsrs	r2, r1
 80191ee:	07d6      	lsls	r6, r2, #31
 80191f0:	d528      	bpl.n	8019244 <__sflush_r+0xb8>
 80191f2:	2200      	movs	r2, #0
 80191f4:	6062      	str	r2, [r4, #4]
 80191f6:	04d9      	lsls	r1, r3, #19
 80191f8:	6922      	ldr	r2, [r4, #16]
 80191fa:	6022      	str	r2, [r4, #0]
 80191fc:	d504      	bpl.n	8019208 <__sflush_r+0x7c>
 80191fe:	1c42      	adds	r2, r0, #1
 8019200:	d101      	bne.n	8019206 <__sflush_r+0x7a>
 8019202:	682b      	ldr	r3, [r5, #0]
 8019204:	b903      	cbnz	r3, 8019208 <__sflush_r+0x7c>
 8019206:	6560      	str	r0, [r4, #84]	; 0x54
 8019208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801920a:	602f      	str	r7, [r5, #0]
 801920c:	2900      	cmp	r1, #0
 801920e:	d0ca      	beq.n	80191a6 <__sflush_r+0x1a>
 8019210:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019214:	4299      	cmp	r1, r3
 8019216:	d002      	beq.n	801921e <__sflush_r+0x92>
 8019218:	4628      	mov	r0, r5
 801921a:	f7fc f807 	bl	801522c <_free_r>
 801921e:	2000      	movs	r0, #0
 8019220:	6360      	str	r0, [r4, #52]	; 0x34
 8019222:	e7c1      	b.n	80191a8 <__sflush_r+0x1c>
 8019224:	6a21      	ldr	r1, [r4, #32]
 8019226:	2301      	movs	r3, #1
 8019228:	4628      	mov	r0, r5
 801922a:	47b0      	blx	r6
 801922c:	1c41      	adds	r1, r0, #1
 801922e:	d1c7      	bne.n	80191c0 <__sflush_r+0x34>
 8019230:	682b      	ldr	r3, [r5, #0]
 8019232:	2b00      	cmp	r3, #0
 8019234:	d0c4      	beq.n	80191c0 <__sflush_r+0x34>
 8019236:	2b1d      	cmp	r3, #29
 8019238:	d001      	beq.n	801923e <__sflush_r+0xb2>
 801923a:	2b16      	cmp	r3, #22
 801923c:	d101      	bne.n	8019242 <__sflush_r+0xb6>
 801923e:	602f      	str	r7, [r5, #0]
 8019240:	e7b1      	b.n	80191a6 <__sflush_r+0x1a>
 8019242:	89a3      	ldrh	r3, [r4, #12]
 8019244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019248:	81a3      	strh	r3, [r4, #12]
 801924a:	e7ad      	b.n	80191a8 <__sflush_r+0x1c>
 801924c:	690f      	ldr	r7, [r1, #16]
 801924e:	2f00      	cmp	r7, #0
 8019250:	d0a9      	beq.n	80191a6 <__sflush_r+0x1a>
 8019252:	0793      	lsls	r3, r2, #30
 8019254:	680e      	ldr	r6, [r1, #0]
 8019256:	bf08      	it	eq
 8019258:	694b      	ldreq	r3, [r1, #20]
 801925a:	600f      	str	r7, [r1, #0]
 801925c:	bf18      	it	ne
 801925e:	2300      	movne	r3, #0
 8019260:	eba6 0807 	sub.w	r8, r6, r7
 8019264:	608b      	str	r3, [r1, #8]
 8019266:	f1b8 0f00 	cmp.w	r8, #0
 801926a:	dd9c      	ble.n	80191a6 <__sflush_r+0x1a>
 801926c:	6a21      	ldr	r1, [r4, #32]
 801926e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019270:	4643      	mov	r3, r8
 8019272:	463a      	mov	r2, r7
 8019274:	4628      	mov	r0, r5
 8019276:	47b0      	blx	r6
 8019278:	2800      	cmp	r0, #0
 801927a:	dc06      	bgt.n	801928a <__sflush_r+0xfe>
 801927c:	89a3      	ldrh	r3, [r4, #12]
 801927e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019282:	81a3      	strh	r3, [r4, #12]
 8019284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019288:	e78e      	b.n	80191a8 <__sflush_r+0x1c>
 801928a:	4407      	add	r7, r0
 801928c:	eba8 0800 	sub.w	r8, r8, r0
 8019290:	e7e9      	b.n	8019266 <__sflush_r+0xda>
 8019292:	bf00      	nop
 8019294:	20400001 	.word	0x20400001

08019298 <_fflush_r>:
 8019298:	b538      	push	{r3, r4, r5, lr}
 801929a:	690b      	ldr	r3, [r1, #16]
 801929c:	4605      	mov	r5, r0
 801929e:	460c      	mov	r4, r1
 80192a0:	b913      	cbnz	r3, 80192a8 <_fflush_r+0x10>
 80192a2:	2500      	movs	r5, #0
 80192a4:	4628      	mov	r0, r5
 80192a6:	bd38      	pop	{r3, r4, r5, pc}
 80192a8:	b118      	cbz	r0, 80192b2 <_fflush_r+0x1a>
 80192aa:	6983      	ldr	r3, [r0, #24]
 80192ac:	b90b      	cbnz	r3, 80192b2 <_fflush_r+0x1a>
 80192ae:	f000 f887 	bl	80193c0 <__sinit>
 80192b2:	4b14      	ldr	r3, [pc, #80]	; (8019304 <_fflush_r+0x6c>)
 80192b4:	429c      	cmp	r4, r3
 80192b6:	d11b      	bne.n	80192f0 <_fflush_r+0x58>
 80192b8:	686c      	ldr	r4, [r5, #4]
 80192ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80192be:	2b00      	cmp	r3, #0
 80192c0:	d0ef      	beq.n	80192a2 <_fflush_r+0xa>
 80192c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80192c4:	07d0      	lsls	r0, r2, #31
 80192c6:	d404      	bmi.n	80192d2 <_fflush_r+0x3a>
 80192c8:	0599      	lsls	r1, r3, #22
 80192ca:	d402      	bmi.n	80192d2 <_fflush_r+0x3a>
 80192cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80192ce:	f000 f927 	bl	8019520 <__retarget_lock_acquire_recursive>
 80192d2:	4628      	mov	r0, r5
 80192d4:	4621      	mov	r1, r4
 80192d6:	f7ff ff59 	bl	801918c <__sflush_r>
 80192da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80192dc:	07da      	lsls	r2, r3, #31
 80192de:	4605      	mov	r5, r0
 80192e0:	d4e0      	bmi.n	80192a4 <_fflush_r+0xc>
 80192e2:	89a3      	ldrh	r3, [r4, #12]
 80192e4:	059b      	lsls	r3, r3, #22
 80192e6:	d4dd      	bmi.n	80192a4 <_fflush_r+0xc>
 80192e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80192ea:	f000 f91a 	bl	8019522 <__retarget_lock_release_recursive>
 80192ee:	e7d9      	b.n	80192a4 <_fflush_r+0xc>
 80192f0:	4b05      	ldr	r3, [pc, #20]	; (8019308 <_fflush_r+0x70>)
 80192f2:	429c      	cmp	r4, r3
 80192f4:	d101      	bne.n	80192fa <_fflush_r+0x62>
 80192f6:	68ac      	ldr	r4, [r5, #8]
 80192f8:	e7df      	b.n	80192ba <_fflush_r+0x22>
 80192fa:	4b04      	ldr	r3, [pc, #16]	; (801930c <_fflush_r+0x74>)
 80192fc:	429c      	cmp	r4, r3
 80192fe:	bf08      	it	eq
 8019300:	68ec      	ldreq	r4, [r5, #12]
 8019302:	e7da      	b.n	80192ba <_fflush_r+0x22>
 8019304:	0801b76c 	.word	0x0801b76c
 8019308:	0801b78c 	.word	0x0801b78c
 801930c:	0801b74c 	.word	0x0801b74c

08019310 <std>:
 8019310:	2300      	movs	r3, #0
 8019312:	b510      	push	{r4, lr}
 8019314:	4604      	mov	r4, r0
 8019316:	e9c0 3300 	strd	r3, r3, [r0]
 801931a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801931e:	6083      	str	r3, [r0, #8]
 8019320:	8181      	strh	r1, [r0, #12]
 8019322:	6643      	str	r3, [r0, #100]	; 0x64
 8019324:	81c2      	strh	r2, [r0, #14]
 8019326:	6183      	str	r3, [r0, #24]
 8019328:	4619      	mov	r1, r3
 801932a:	2208      	movs	r2, #8
 801932c:	305c      	adds	r0, #92	; 0x5c
 801932e:	f7fb ff75 	bl	801521c <memset>
 8019332:	4b05      	ldr	r3, [pc, #20]	; (8019348 <std+0x38>)
 8019334:	6263      	str	r3, [r4, #36]	; 0x24
 8019336:	4b05      	ldr	r3, [pc, #20]	; (801934c <std+0x3c>)
 8019338:	62a3      	str	r3, [r4, #40]	; 0x28
 801933a:	4b05      	ldr	r3, [pc, #20]	; (8019350 <std+0x40>)
 801933c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801933e:	4b05      	ldr	r3, [pc, #20]	; (8019354 <std+0x44>)
 8019340:	6224      	str	r4, [r4, #32]
 8019342:	6323      	str	r3, [r4, #48]	; 0x30
 8019344:	bd10      	pop	{r4, pc}
 8019346:	bf00      	nop
 8019348:	08016211 	.word	0x08016211
 801934c:	08016233 	.word	0x08016233
 8019350:	0801626b 	.word	0x0801626b
 8019354:	0801628f 	.word	0x0801628f

08019358 <_cleanup_r>:
 8019358:	4901      	ldr	r1, [pc, #4]	; (8019360 <_cleanup_r+0x8>)
 801935a:	f000 b8c1 	b.w	80194e0 <_fwalk_reent>
 801935e:	bf00      	nop
 8019360:	08019299 	.word	0x08019299

08019364 <__sfmoreglue>:
 8019364:	b570      	push	{r4, r5, r6, lr}
 8019366:	1e4a      	subs	r2, r1, #1
 8019368:	2568      	movs	r5, #104	; 0x68
 801936a:	4355      	muls	r5, r2
 801936c:	460e      	mov	r6, r1
 801936e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019372:	f7fb ffab 	bl	80152cc <_malloc_r>
 8019376:	4604      	mov	r4, r0
 8019378:	b140      	cbz	r0, 801938c <__sfmoreglue+0x28>
 801937a:	2100      	movs	r1, #0
 801937c:	e9c0 1600 	strd	r1, r6, [r0]
 8019380:	300c      	adds	r0, #12
 8019382:	60a0      	str	r0, [r4, #8]
 8019384:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019388:	f7fb ff48 	bl	801521c <memset>
 801938c:	4620      	mov	r0, r4
 801938e:	bd70      	pop	{r4, r5, r6, pc}

08019390 <__sfp_lock_acquire>:
 8019390:	4801      	ldr	r0, [pc, #4]	; (8019398 <__sfp_lock_acquire+0x8>)
 8019392:	f000 b8c5 	b.w	8019520 <__retarget_lock_acquire_recursive>
 8019396:	bf00      	nop
 8019398:	20008f1c 	.word	0x20008f1c

0801939c <__sfp_lock_release>:
 801939c:	4801      	ldr	r0, [pc, #4]	; (80193a4 <__sfp_lock_release+0x8>)
 801939e:	f000 b8c0 	b.w	8019522 <__retarget_lock_release_recursive>
 80193a2:	bf00      	nop
 80193a4:	20008f1c 	.word	0x20008f1c

080193a8 <__sinit_lock_acquire>:
 80193a8:	4801      	ldr	r0, [pc, #4]	; (80193b0 <__sinit_lock_acquire+0x8>)
 80193aa:	f000 b8b9 	b.w	8019520 <__retarget_lock_acquire_recursive>
 80193ae:	bf00      	nop
 80193b0:	20008f17 	.word	0x20008f17

080193b4 <__sinit_lock_release>:
 80193b4:	4801      	ldr	r0, [pc, #4]	; (80193bc <__sinit_lock_release+0x8>)
 80193b6:	f000 b8b4 	b.w	8019522 <__retarget_lock_release_recursive>
 80193ba:	bf00      	nop
 80193bc:	20008f17 	.word	0x20008f17

080193c0 <__sinit>:
 80193c0:	b510      	push	{r4, lr}
 80193c2:	4604      	mov	r4, r0
 80193c4:	f7ff fff0 	bl	80193a8 <__sinit_lock_acquire>
 80193c8:	69a3      	ldr	r3, [r4, #24]
 80193ca:	b11b      	cbz	r3, 80193d4 <__sinit+0x14>
 80193cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80193d0:	f7ff bff0 	b.w	80193b4 <__sinit_lock_release>
 80193d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80193d8:	6523      	str	r3, [r4, #80]	; 0x50
 80193da:	4b13      	ldr	r3, [pc, #76]	; (8019428 <__sinit+0x68>)
 80193dc:	4a13      	ldr	r2, [pc, #76]	; (801942c <__sinit+0x6c>)
 80193de:	681b      	ldr	r3, [r3, #0]
 80193e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80193e2:	42a3      	cmp	r3, r4
 80193e4:	bf04      	itt	eq
 80193e6:	2301      	moveq	r3, #1
 80193e8:	61a3      	streq	r3, [r4, #24]
 80193ea:	4620      	mov	r0, r4
 80193ec:	f000 f820 	bl	8019430 <__sfp>
 80193f0:	6060      	str	r0, [r4, #4]
 80193f2:	4620      	mov	r0, r4
 80193f4:	f000 f81c 	bl	8019430 <__sfp>
 80193f8:	60a0      	str	r0, [r4, #8]
 80193fa:	4620      	mov	r0, r4
 80193fc:	f000 f818 	bl	8019430 <__sfp>
 8019400:	2200      	movs	r2, #0
 8019402:	60e0      	str	r0, [r4, #12]
 8019404:	2104      	movs	r1, #4
 8019406:	6860      	ldr	r0, [r4, #4]
 8019408:	f7ff ff82 	bl	8019310 <std>
 801940c:	68a0      	ldr	r0, [r4, #8]
 801940e:	2201      	movs	r2, #1
 8019410:	2109      	movs	r1, #9
 8019412:	f7ff ff7d 	bl	8019310 <std>
 8019416:	68e0      	ldr	r0, [r4, #12]
 8019418:	2202      	movs	r2, #2
 801941a:	2112      	movs	r1, #18
 801941c:	f7ff ff78 	bl	8019310 <std>
 8019420:	2301      	movs	r3, #1
 8019422:	61a3      	str	r3, [r4, #24]
 8019424:	e7d2      	b.n	80193cc <__sinit+0xc>
 8019426:	bf00      	nop
 8019428:	0801b2f8 	.word	0x0801b2f8
 801942c:	08019359 	.word	0x08019359

08019430 <__sfp>:
 8019430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019432:	4607      	mov	r7, r0
 8019434:	f7ff ffac 	bl	8019390 <__sfp_lock_acquire>
 8019438:	4b1e      	ldr	r3, [pc, #120]	; (80194b4 <__sfp+0x84>)
 801943a:	681e      	ldr	r6, [r3, #0]
 801943c:	69b3      	ldr	r3, [r6, #24]
 801943e:	b913      	cbnz	r3, 8019446 <__sfp+0x16>
 8019440:	4630      	mov	r0, r6
 8019442:	f7ff ffbd 	bl	80193c0 <__sinit>
 8019446:	3648      	adds	r6, #72	; 0x48
 8019448:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801944c:	3b01      	subs	r3, #1
 801944e:	d503      	bpl.n	8019458 <__sfp+0x28>
 8019450:	6833      	ldr	r3, [r6, #0]
 8019452:	b30b      	cbz	r3, 8019498 <__sfp+0x68>
 8019454:	6836      	ldr	r6, [r6, #0]
 8019456:	e7f7      	b.n	8019448 <__sfp+0x18>
 8019458:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801945c:	b9d5      	cbnz	r5, 8019494 <__sfp+0x64>
 801945e:	4b16      	ldr	r3, [pc, #88]	; (80194b8 <__sfp+0x88>)
 8019460:	60e3      	str	r3, [r4, #12]
 8019462:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019466:	6665      	str	r5, [r4, #100]	; 0x64
 8019468:	f000 f859 	bl	801951e <__retarget_lock_init_recursive>
 801946c:	f7ff ff96 	bl	801939c <__sfp_lock_release>
 8019470:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019474:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019478:	6025      	str	r5, [r4, #0]
 801947a:	61a5      	str	r5, [r4, #24]
 801947c:	2208      	movs	r2, #8
 801947e:	4629      	mov	r1, r5
 8019480:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019484:	f7fb feca 	bl	801521c <memset>
 8019488:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801948c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019490:	4620      	mov	r0, r4
 8019492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019494:	3468      	adds	r4, #104	; 0x68
 8019496:	e7d9      	b.n	801944c <__sfp+0x1c>
 8019498:	2104      	movs	r1, #4
 801949a:	4638      	mov	r0, r7
 801949c:	f7ff ff62 	bl	8019364 <__sfmoreglue>
 80194a0:	4604      	mov	r4, r0
 80194a2:	6030      	str	r0, [r6, #0]
 80194a4:	2800      	cmp	r0, #0
 80194a6:	d1d5      	bne.n	8019454 <__sfp+0x24>
 80194a8:	f7ff ff78 	bl	801939c <__sfp_lock_release>
 80194ac:	230c      	movs	r3, #12
 80194ae:	603b      	str	r3, [r7, #0]
 80194b0:	e7ee      	b.n	8019490 <__sfp+0x60>
 80194b2:	bf00      	nop
 80194b4:	0801b2f8 	.word	0x0801b2f8
 80194b8:	ffff0001 	.word	0xffff0001

080194bc <fiprintf>:
 80194bc:	b40e      	push	{r1, r2, r3}
 80194be:	b503      	push	{r0, r1, lr}
 80194c0:	4601      	mov	r1, r0
 80194c2:	ab03      	add	r3, sp, #12
 80194c4:	4805      	ldr	r0, [pc, #20]	; (80194dc <fiprintf+0x20>)
 80194c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80194ca:	6800      	ldr	r0, [r0, #0]
 80194cc:	9301      	str	r3, [sp, #4]
 80194ce:	f000 f893 	bl	80195f8 <_vfiprintf_r>
 80194d2:	b002      	add	sp, #8
 80194d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80194d8:	b003      	add	sp, #12
 80194da:	4770      	bx	lr
 80194dc:	20000244 	.word	0x20000244

080194e0 <_fwalk_reent>:
 80194e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80194e4:	4606      	mov	r6, r0
 80194e6:	4688      	mov	r8, r1
 80194e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80194ec:	2700      	movs	r7, #0
 80194ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80194f2:	f1b9 0901 	subs.w	r9, r9, #1
 80194f6:	d505      	bpl.n	8019504 <_fwalk_reent+0x24>
 80194f8:	6824      	ldr	r4, [r4, #0]
 80194fa:	2c00      	cmp	r4, #0
 80194fc:	d1f7      	bne.n	80194ee <_fwalk_reent+0xe>
 80194fe:	4638      	mov	r0, r7
 8019500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019504:	89ab      	ldrh	r3, [r5, #12]
 8019506:	2b01      	cmp	r3, #1
 8019508:	d907      	bls.n	801951a <_fwalk_reent+0x3a>
 801950a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801950e:	3301      	adds	r3, #1
 8019510:	d003      	beq.n	801951a <_fwalk_reent+0x3a>
 8019512:	4629      	mov	r1, r5
 8019514:	4630      	mov	r0, r6
 8019516:	47c0      	blx	r8
 8019518:	4307      	orrs	r7, r0
 801951a:	3568      	adds	r5, #104	; 0x68
 801951c:	e7e9      	b.n	80194f2 <_fwalk_reent+0x12>

0801951e <__retarget_lock_init_recursive>:
 801951e:	4770      	bx	lr

08019520 <__retarget_lock_acquire_recursive>:
 8019520:	4770      	bx	lr

08019522 <__retarget_lock_release_recursive>:
 8019522:	4770      	bx	lr

08019524 <memmove>:
 8019524:	4288      	cmp	r0, r1
 8019526:	b510      	push	{r4, lr}
 8019528:	eb01 0402 	add.w	r4, r1, r2
 801952c:	d902      	bls.n	8019534 <memmove+0x10>
 801952e:	4284      	cmp	r4, r0
 8019530:	4623      	mov	r3, r4
 8019532:	d807      	bhi.n	8019544 <memmove+0x20>
 8019534:	1e43      	subs	r3, r0, #1
 8019536:	42a1      	cmp	r1, r4
 8019538:	d008      	beq.n	801954c <memmove+0x28>
 801953a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801953e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019542:	e7f8      	b.n	8019536 <memmove+0x12>
 8019544:	4402      	add	r2, r0
 8019546:	4601      	mov	r1, r0
 8019548:	428a      	cmp	r2, r1
 801954a:	d100      	bne.n	801954e <memmove+0x2a>
 801954c:	bd10      	pop	{r4, pc}
 801954e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019552:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019556:	e7f7      	b.n	8019548 <memmove+0x24>

08019558 <_realloc_r>:
 8019558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801955a:	4607      	mov	r7, r0
 801955c:	4614      	mov	r4, r2
 801955e:	460e      	mov	r6, r1
 8019560:	b921      	cbnz	r1, 801956c <_realloc_r+0x14>
 8019562:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019566:	4611      	mov	r1, r2
 8019568:	f7fb beb0 	b.w	80152cc <_malloc_r>
 801956c:	b922      	cbnz	r2, 8019578 <_realloc_r+0x20>
 801956e:	f7fb fe5d 	bl	801522c <_free_r>
 8019572:	4625      	mov	r5, r4
 8019574:	4628      	mov	r0, r5
 8019576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019578:	f000 fa9a 	bl	8019ab0 <_malloc_usable_size_r>
 801957c:	42a0      	cmp	r0, r4
 801957e:	d20f      	bcs.n	80195a0 <_realloc_r+0x48>
 8019580:	4621      	mov	r1, r4
 8019582:	4638      	mov	r0, r7
 8019584:	f7fb fea2 	bl	80152cc <_malloc_r>
 8019588:	4605      	mov	r5, r0
 801958a:	2800      	cmp	r0, #0
 801958c:	d0f2      	beq.n	8019574 <_realloc_r+0x1c>
 801958e:	4631      	mov	r1, r6
 8019590:	4622      	mov	r2, r4
 8019592:	f7fb fe35 	bl	8015200 <memcpy>
 8019596:	4631      	mov	r1, r6
 8019598:	4638      	mov	r0, r7
 801959a:	f7fb fe47 	bl	801522c <_free_r>
 801959e:	e7e9      	b.n	8019574 <_realloc_r+0x1c>
 80195a0:	4635      	mov	r5, r6
 80195a2:	e7e7      	b.n	8019574 <_realloc_r+0x1c>

080195a4 <__sfputc_r>:
 80195a4:	6893      	ldr	r3, [r2, #8]
 80195a6:	3b01      	subs	r3, #1
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	b410      	push	{r4}
 80195ac:	6093      	str	r3, [r2, #8]
 80195ae:	da08      	bge.n	80195c2 <__sfputc_r+0x1e>
 80195b0:	6994      	ldr	r4, [r2, #24]
 80195b2:	42a3      	cmp	r3, r4
 80195b4:	db01      	blt.n	80195ba <__sfputc_r+0x16>
 80195b6:	290a      	cmp	r1, #10
 80195b8:	d103      	bne.n	80195c2 <__sfputc_r+0x1e>
 80195ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80195be:	f000 b94b 	b.w	8019858 <__swbuf_r>
 80195c2:	6813      	ldr	r3, [r2, #0]
 80195c4:	1c58      	adds	r0, r3, #1
 80195c6:	6010      	str	r0, [r2, #0]
 80195c8:	7019      	strb	r1, [r3, #0]
 80195ca:	4608      	mov	r0, r1
 80195cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80195d0:	4770      	bx	lr

080195d2 <__sfputs_r>:
 80195d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195d4:	4606      	mov	r6, r0
 80195d6:	460f      	mov	r7, r1
 80195d8:	4614      	mov	r4, r2
 80195da:	18d5      	adds	r5, r2, r3
 80195dc:	42ac      	cmp	r4, r5
 80195de:	d101      	bne.n	80195e4 <__sfputs_r+0x12>
 80195e0:	2000      	movs	r0, #0
 80195e2:	e007      	b.n	80195f4 <__sfputs_r+0x22>
 80195e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80195e8:	463a      	mov	r2, r7
 80195ea:	4630      	mov	r0, r6
 80195ec:	f7ff ffda 	bl	80195a4 <__sfputc_r>
 80195f0:	1c43      	adds	r3, r0, #1
 80195f2:	d1f3      	bne.n	80195dc <__sfputs_r+0xa>
 80195f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080195f8 <_vfiprintf_r>:
 80195f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195fc:	460d      	mov	r5, r1
 80195fe:	b09d      	sub	sp, #116	; 0x74
 8019600:	4614      	mov	r4, r2
 8019602:	4698      	mov	r8, r3
 8019604:	4606      	mov	r6, r0
 8019606:	b118      	cbz	r0, 8019610 <_vfiprintf_r+0x18>
 8019608:	6983      	ldr	r3, [r0, #24]
 801960a:	b90b      	cbnz	r3, 8019610 <_vfiprintf_r+0x18>
 801960c:	f7ff fed8 	bl	80193c0 <__sinit>
 8019610:	4b89      	ldr	r3, [pc, #548]	; (8019838 <_vfiprintf_r+0x240>)
 8019612:	429d      	cmp	r5, r3
 8019614:	d11b      	bne.n	801964e <_vfiprintf_r+0x56>
 8019616:	6875      	ldr	r5, [r6, #4]
 8019618:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801961a:	07d9      	lsls	r1, r3, #31
 801961c:	d405      	bmi.n	801962a <_vfiprintf_r+0x32>
 801961e:	89ab      	ldrh	r3, [r5, #12]
 8019620:	059a      	lsls	r2, r3, #22
 8019622:	d402      	bmi.n	801962a <_vfiprintf_r+0x32>
 8019624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019626:	f7ff ff7b 	bl	8019520 <__retarget_lock_acquire_recursive>
 801962a:	89ab      	ldrh	r3, [r5, #12]
 801962c:	071b      	lsls	r3, r3, #28
 801962e:	d501      	bpl.n	8019634 <_vfiprintf_r+0x3c>
 8019630:	692b      	ldr	r3, [r5, #16]
 8019632:	b9eb      	cbnz	r3, 8019670 <_vfiprintf_r+0x78>
 8019634:	4629      	mov	r1, r5
 8019636:	4630      	mov	r0, r6
 8019638:	f000 f960 	bl	80198fc <__swsetup_r>
 801963c:	b1c0      	cbz	r0, 8019670 <_vfiprintf_r+0x78>
 801963e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019640:	07dc      	lsls	r4, r3, #31
 8019642:	d50e      	bpl.n	8019662 <_vfiprintf_r+0x6a>
 8019644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019648:	b01d      	add	sp, #116	; 0x74
 801964a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801964e:	4b7b      	ldr	r3, [pc, #492]	; (801983c <_vfiprintf_r+0x244>)
 8019650:	429d      	cmp	r5, r3
 8019652:	d101      	bne.n	8019658 <_vfiprintf_r+0x60>
 8019654:	68b5      	ldr	r5, [r6, #8]
 8019656:	e7df      	b.n	8019618 <_vfiprintf_r+0x20>
 8019658:	4b79      	ldr	r3, [pc, #484]	; (8019840 <_vfiprintf_r+0x248>)
 801965a:	429d      	cmp	r5, r3
 801965c:	bf08      	it	eq
 801965e:	68f5      	ldreq	r5, [r6, #12]
 8019660:	e7da      	b.n	8019618 <_vfiprintf_r+0x20>
 8019662:	89ab      	ldrh	r3, [r5, #12]
 8019664:	0598      	lsls	r0, r3, #22
 8019666:	d4ed      	bmi.n	8019644 <_vfiprintf_r+0x4c>
 8019668:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801966a:	f7ff ff5a 	bl	8019522 <__retarget_lock_release_recursive>
 801966e:	e7e9      	b.n	8019644 <_vfiprintf_r+0x4c>
 8019670:	2300      	movs	r3, #0
 8019672:	9309      	str	r3, [sp, #36]	; 0x24
 8019674:	2320      	movs	r3, #32
 8019676:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801967a:	f8cd 800c 	str.w	r8, [sp, #12]
 801967e:	2330      	movs	r3, #48	; 0x30
 8019680:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019844 <_vfiprintf_r+0x24c>
 8019684:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019688:	f04f 0901 	mov.w	r9, #1
 801968c:	4623      	mov	r3, r4
 801968e:	469a      	mov	sl, r3
 8019690:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019694:	b10a      	cbz	r2, 801969a <_vfiprintf_r+0xa2>
 8019696:	2a25      	cmp	r2, #37	; 0x25
 8019698:	d1f9      	bne.n	801968e <_vfiprintf_r+0x96>
 801969a:	ebba 0b04 	subs.w	fp, sl, r4
 801969e:	d00b      	beq.n	80196b8 <_vfiprintf_r+0xc0>
 80196a0:	465b      	mov	r3, fp
 80196a2:	4622      	mov	r2, r4
 80196a4:	4629      	mov	r1, r5
 80196a6:	4630      	mov	r0, r6
 80196a8:	f7ff ff93 	bl	80195d2 <__sfputs_r>
 80196ac:	3001      	adds	r0, #1
 80196ae:	f000 80aa 	beq.w	8019806 <_vfiprintf_r+0x20e>
 80196b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80196b4:	445a      	add	r2, fp
 80196b6:	9209      	str	r2, [sp, #36]	; 0x24
 80196b8:	f89a 3000 	ldrb.w	r3, [sl]
 80196bc:	2b00      	cmp	r3, #0
 80196be:	f000 80a2 	beq.w	8019806 <_vfiprintf_r+0x20e>
 80196c2:	2300      	movs	r3, #0
 80196c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80196c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80196cc:	f10a 0a01 	add.w	sl, sl, #1
 80196d0:	9304      	str	r3, [sp, #16]
 80196d2:	9307      	str	r3, [sp, #28]
 80196d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80196d8:	931a      	str	r3, [sp, #104]	; 0x68
 80196da:	4654      	mov	r4, sl
 80196dc:	2205      	movs	r2, #5
 80196de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80196e2:	4858      	ldr	r0, [pc, #352]	; (8019844 <_vfiprintf_r+0x24c>)
 80196e4:	f7e6 fd7c 	bl	80001e0 <memchr>
 80196e8:	9a04      	ldr	r2, [sp, #16]
 80196ea:	b9d8      	cbnz	r0, 8019724 <_vfiprintf_r+0x12c>
 80196ec:	06d1      	lsls	r1, r2, #27
 80196ee:	bf44      	itt	mi
 80196f0:	2320      	movmi	r3, #32
 80196f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80196f6:	0713      	lsls	r3, r2, #28
 80196f8:	bf44      	itt	mi
 80196fa:	232b      	movmi	r3, #43	; 0x2b
 80196fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019700:	f89a 3000 	ldrb.w	r3, [sl]
 8019704:	2b2a      	cmp	r3, #42	; 0x2a
 8019706:	d015      	beq.n	8019734 <_vfiprintf_r+0x13c>
 8019708:	9a07      	ldr	r2, [sp, #28]
 801970a:	4654      	mov	r4, sl
 801970c:	2000      	movs	r0, #0
 801970e:	f04f 0c0a 	mov.w	ip, #10
 8019712:	4621      	mov	r1, r4
 8019714:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019718:	3b30      	subs	r3, #48	; 0x30
 801971a:	2b09      	cmp	r3, #9
 801971c:	d94e      	bls.n	80197bc <_vfiprintf_r+0x1c4>
 801971e:	b1b0      	cbz	r0, 801974e <_vfiprintf_r+0x156>
 8019720:	9207      	str	r2, [sp, #28]
 8019722:	e014      	b.n	801974e <_vfiprintf_r+0x156>
 8019724:	eba0 0308 	sub.w	r3, r0, r8
 8019728:	fa09 f303 	lsl.w	r3, r9, r3
 801972c:	4313      	orrs	r3, r2
 801972e:	9304      	str	r3, [sp, #16]
 8019730:	46a2      	mov	sl, r4
 8019732:	e7d2      	b.n	80196da <_vfiprintf_r+0xe2>
 8019734:	9b03      	ldr	r3, [sp, #12]
 8019736:	1d19      	adds	r1, r3, #4
 8019738:	681b      	ldr	r3, [r3, #0]
 801973a:	9103      	str	r1, [sp, #12]
 801973c:	2b00      	cmp	r3, #0
 801973e:	bfbb      	ittet	lt
 8019740:	425b      	neglt	r3, r3
 8019742:	f042 0202 	orrlt.w	r2, r2, #2
 8019746:	9307      	strge	r3, [sp, #28]
 8019748:	9307      	strlt	r3, [sp, #28]
 801974a:	bfb8      	it	lt
 801974c:	9204      	strlt	r2, [sp, #16]
 801974e:	7823      	ldrb	r3, [r4, #0]
 8019750:	2b2e      	cmp	r3, #46	; 0x2e
 8019752:	d10c      	bne.n	801976e <_vfiprintf_r+0x176>
 8019754:	7863      	ldrb	r3, [r4, #1]
 8019756:	2b2a      	cmp	r3, #42	; 0x2a
 8019758:	d135      	bne.n	80197c6 <_vfiprintf_r+0x1ce>
 801975a:	9b03      	ldr	r3, [sp, #12]
 801975c:	1d1a      	adds	r2, r3, #4
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	9203      	str	r2, [sp, #12]
 8019762:	2b00      	cmp	r3, #0
 8019764:	bfb8      	it	lt
 8019766:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801976a:	3402      	adds	r4, #2
 801976c:	9305      	str	r3, [sp, #20]
 801976e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019854 <_vfiprintf_r+0x25c>
 8019772:	7821      	ldrb	r1, [r4, #0]
 8019774:	2203      	movs	r2, #3
 8019776:	4650      	mov	r0, sl
 8019778:	f7e6 fd32 	bl	80001e0 <memchr>
 801977c:	b140      	cbz	r0, 8019790 <_vfiprintf_r+0x198>
 801977e:	2340      	movs	r3, #64	; 0x40
 8019780:	eba0 000a 	sub.w	r0, r0, sl
 8019784:	fa03 f000 	lsl.w	r0, r3, r0
 8019788:	9b04      	ldr	r3, [sp, #16]
 801978a:	4303      	orrs	r3, r0
 801978c:	3401      	adds	r4, #1
 801978e:	9304      	str	r3, [sp, #16]
 8019790:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019794:	482c      	ldr	r0, [pc, #176]	; (8019848 <_vfiprintf_r+0x250>)
 8019796:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801979a:	2206      	movs	r2, #6
 801979c:	f7e6 fd20 	bl	80001e0 <memchr>
 80197a0:	2800      	cmp	r0, #0
 80197a2:	d03f      	beq.n	8019824 <_vfiprintf_r+0x22c>
 80197a4:	4b29      	ldr	r3, [pc, #164]	; (801984c <_vfiprintf_r+0x254>)
 80197a6:	bb1b      	cbnz	r3, 80197f0 <_vfiprintf_r+0x1f8>
 80197a8:	9b03      	ldr	r3, [sp, #12]
 80197aa:	3307      	adds	r3, #7
 80197ac:	f023 0307 	bic.w	r3, r3, #7
 80197b0:	3308      	adds	r3, #8
 80197b2:	9303      	str	r3, [sp, #12]
 80197b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80197b6:	443b      	add	r3, r7
 80197b8:	9309      	str	r3, [sp, #36]	; 0x24
 80197ba:	e767      	b.n	801968c <_vfiprintf_r+0x94>
 80197bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80197c0:	460c      	mov	r4, r1
 80197c2:	2001      	movs	r0, #1
 80197c4:	e7a5      	b.n	8019712 <_vfiprintf_r+0x11a>
 80197c6:	2300      	movs	r3, #0
 80197c8:	3401      	adds	r4, #1
 80197ca:	9305      	str	r3, [sp, #20]
 80197cc:	4619      	mov	r1, r3
 80197ce:	f04f 0c0a 	mov.w	ip, #10
 80197d2:	4620      	mov	r0, r4
 80197d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80197d8:	3a30      	subs	r2, #48	; 0x30
 80197da:	2a09      	cmp	r2, #9
 80197dc:	d903      	bls.n	80197e6 <_vfiprintf_r+0x1ee>
 80197de:	2b00      	cmp	r3, #0
 80197e0:	d0c5      	beq.n	801976e <_vfiprintf_r+0x176>
 80197e2:	9105      	str	r1, [sp, #20]
 80197e4:	e7c3      	b.n	801976e <_vfiprintf_r+0x176>
 80197e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80197ea:	4604      	mov	r4, r0
 80197ec:	2301      	movs	r3, #1
 80197ee:	e7f0      	b.n	80197d2 <_vfiprintf_r+0x1da>
 80197f0:	ab03      	add	r3, sp, #12
 80197f2:	9300      	str	r3, [sp, #0]
 80197f4:	462a      	mov	r2, r5
 80197f6:	4b16      	ldr	r3, [pc, #88]	; (8019850 <_vfiprintf_r+0x258>)
 80197f8:	a904      	add	r1, sp, #16
 80197fa:	4630      	mov	r0, r6
 80197fc:	f7fb fe60 	bl	80154c0 <_printf_float>
 8019800:	4607      	mov	r7, r0
 8019802:	1c78      	adds	r0, r7, #1
 8019804:	d1d6      	bne.n	80197b4 <_vfiprintf_r+0x1bc>
 8019806:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019808:	07d9      	lsls	r1, r3, #31
 801980a:	d405      	bmi.n	8019818 <_vfiprintf_r+0x220>
 801980c:	89ab      	ldrh	r3, [r5, #12]
 801980e:	059a      	lsls	r2, r3, #22
 8019810:	d402      	bmi.n	8019818 <_vfiprintf_r+0x220>
 8019812:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019814:	f7ff fe85 	bl	8019522 <__retarget_lock_release_recursive>
 8019818:	89ab      	ldrh	r3, [r5, #12]
 801981a:	065b      	lsls	r3, r3, #25
 801981c:	f53f af12 	bmi.w	8019644 <_vfiprintf_r+0x4c>
 8019820:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019822:	e711      	b.n	8019648 <_vfiprintf_r+0x50>
 8019824:	ab03      	add	r3, sp, #12
 8019826:	9300      	str	r3, [sp, #0]
 8019828:	462a      	mov	r2, r5
 801982a:	4b09      	ldr	r3, [pc, #36]	; (8019850 <_vfiprintf_r+0x258>)
 801982c:	a904      	add	r1, sp, #16
 801982e:	4630      	mov	r0, r6
 8019830:	f7fc f8ea 	bl	8015a08 <_printf_i>
 8019834:	e7e4      	b.n	8019800 <_vfiprintf_r+0x208>
 8019836:	bf00      	nop
 8019838:	0801b76c 	.word	0x0801b76c
 801983c:	0801b78c 	.word	0x0801b78c
 8019840:	0801b74c 	.word	0x0801b74c
 8019844:	0801b6fc 	.word	0x0801b6fc
 8019848:	0801b706 	.word	0x0801b706
 801984c:	080154c1 	.word	0x080154c1
 8019850:	080195d3 	.word	0x080195d3
 8019854:	0801b702 	.word	0x0801b702

08019858 <__swbuf_r>:
 8019858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801985a:	460e      	mov	r6, r1
 801985c:	4614      	mov	r4, r2
 801985e:	4605      	mov	r5, r0
 8019860:	b118      	cbz	r0, 801986a <__swbuf_r+0x12>
 8019862:	6983      	ldr	r3, [r0, #24]
 8019864:	b90b      	cbnz	r3, 801986a <__swbuf_r+0x12>
 8019866:	f7ff fdab 	bl	80193c0 <__sinit>
 801986a:	4b21      	ldr	r3, [pc, #132]	; (80198f0 <__swbuf_r+0x98>)
 801986c:	429c      	cmp	r4, r3
 801986e:	d12b      	bne.n	80198c8 <__swbuf_r+0x70>
 8019870:	686c      	ldr	r4, [r5, #4]
 8019872:	69a3      	ldr	r3, [r4, #24]
 8019874:	60a3      	str	r3, [r4, #8]
 8019876:	89a3      	ldrh	r3, [r4, #12]
 8019878:	071a      	lsls	r2, r3, #28
 801987a:	d52f      	bpl.n	80198dc <__swbuf_r+0x84>
 801987c:	6923      	ldr	r3, [r4, #16]
 801987e:	b36b      	cbz	r3, 80198dc <__swbuf_r+0x84>
 8019880:	6923      	ldr	r3, [r4, #16]
 8019882:	6820      	ldr	r0, [r4, #0]
 8019884:	1ac0      	subs	r0, r0, r3
 8019886:	6963      	ldr	r3, [r4, #20]
 8019888:	b2f6      	uxtb	r6, r6
 801988a:	4283      	cmp	r3, r0
 801988c:	4637      	mov	r7, r6
 801988e:	dc04      	bgt.n	801989a <__swbuf_r+0x42>
 8019890:	4621      	mov	r1, r4
 8019892:	4628      	mov	r0, r5
 8019894:	f7ff fd00 	bl	8019298 <_fflush_r>
 8019898:	bb30      	cbnz	r0, 80198e8 <__swbuf_r+0x90>
 801989a:	68a3      	ldr	r3, [r4, #8]
 801989c:	3b01      	subs	r3, #1
 801989e:	60a3      	str	r3, [r4, #8]
 80198a0:	6823      	ldr	r3, [r4, #0]
 80198a2:	1c5a      	adds	r2, r3, #1
 80198a4:	6022      	str	r2, [r4, #0]
 80198a6:	701e      	strb	r6, [r3, #0]
 80198a8:	6963      	ldr	r3, [r4, #20]
 80198aa:	3001      	adds	r0, #1
 80198ac:	4283      	cmp	r3, r0
 80198ae:	d004      	beq.n	80198ba <__swbuf_r+0x62>
 80198b0:	89a3      	ldrh	r3, [r4, #12]
 80198b2:	07db      	lsls	r3, r3, #31
 80198b4:	d506      	bpl.n	80198c4 <__swbuf_r+0x6c>
 80198b6:	2e0a      	cmp	r6, #10
 80198b8:	d104      	bne.n	80198c4 <__swbuf_r+0x6c>
 80198ba:	4621      	mov	r1, r4
 80198bc:	4628      	mov	r0, r5
 80198be:	f7ff fceb 	bl	8019298 <_fflush_r>
 80198c2:	b988      	cbnz	r0, 80198e8 <__swbuf_r+0x90>
 80198c4:	4638      	mov	r0, r7
 80198c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80198c8:	4b0a      	ldr	r3, [pc, #40]	; (80198f4 <__swbuf_r+0x9c>)
 80198ca:	429c      	cmp	r4, r3
 80198cc:	d101      	bne.n	80198d2 <__swbuf_r+0x7a>
 80198ce:	68ac      	ldr	r4, [r5, #8]
 80198d0:	e7cf      	b.n	8019872 <__swbuf_r+0x1a>
 80198d2:	4b09      	ldr	r3, [pc, #36]	; (80198f8 <__swbuf_r+0xa0>)
 80198d4:	429c      	cmp	r4, r3
 80198d6:	bf08      	it	eq
 80198d8:	68ec      	ldreq	r4, [r5, #12]
 80198da:	e7ca      	b.n	8019872 <__swbuf_r+0x1a>
 80198dc:	4621      	mov	r1, r4
 80198de:	4628      	mov	r0, r5
 80198e0:	f000 f80c 	bl	80198fc <__swsetup_r>
 80198e4:	2800      	cmp	r0, #0
 80198e6:	d0cb      	beq.n	8019880 <__swbuf_r+0x28>
 80198e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80198ec:	e7ea      	b.n	80198c4 <__swbuf_r+0x6c>
 80198ee:	bf00      	nop
 80198f0:	0801b76c 	.word	0x0801b76c
 80198f4:	0801b78c 	.word	0x0801b78c
 80198f8:	0801b74c 	.word	0x0801b74c

080198fc <__swsetup_r>:
 80198fc:	4b32      	ldr	r3, [pc, #200]	; (80199c8 <__swsetup_r+0xcc>)
 80198fe:	b570      	push	{r4, r5, r6, lr}
 8019900:	681d      	ldr	r5, [r3, #0]
 8019902:	4606      	mov	r6, r0
 8019904:	460c      	mov	r4, r1
 8019906:	b125      	cbz	r5, 8019912 <__swsetup_r+0x16>
 8019908:	69ab      	ldr	r3, [r5, #24]
 801990a:	b913      	cbnz	r3, 8019912 <__swsetup_r+0x16>
 801990c:	4628      	mov	r0, r5
 801990e:	f7ff fd57 	bl	80193c0 <__sinit>
 8019912:	4b2e      	ldr	r3, [pc, #184]	; (80199cc <__swsetup_r+0xd0>)
 8019914:	429c      	cmp	r4, r3
 8019916:	d10f      	bne.n	8019938 <__swsetup_r+0x3c>
 8019918:	686c      	ldr	r4, [r5, #4]
 801991a:	89a3      	ldrh	r3, [r4, #12]
 801991c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019920:	0719      	lsls	r1, r3, #28
 8019922:	d42c      	bmi.n	801997e <__swsetup_r+0x82>
 8019924:	06dd      	lsls	r5, r3, #27
 8019926:	d411      	bmi.n	801994c <__swsetup_r+0x50>
 8019928:	2309      	movs	r3, #9
 801992a:	6033      	str	r3, [r6, #0]
 801992c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019930:	81a3      	strh	r3, [r4, #12]
 8019932:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019936:	e03e      	b.n	80199b6 <__swsetup_r+0xba>
 8019938:	4b25      	ldr	r3, [pc, #148]	; (80199d0 <__swsetup_r+0xd4>)
 801993a:	429c      	cmp	r4, r3
 801993c:	d101      	bne.n	8019942 <__swsetup_r+0x46>
 801993e:	68ac      	ldr	r4, [r5, #8]
 8019940:	e7eb      	b.n	801991a <__swsetup_r+0x1e>
 8019942:	4b24      	ldr	r3, [pc, #144]	; (80199d4 <__swsetup_r+0xd8>)
 8019944:	429c      	cmp	r4, r3
 8019946:	bf08      	it	eq
 8019948:	68ec      	ldreq	r4, [r5, #12]
 801994a:	e7e6      	b.n	801991a <__swsetup_r+0x1e>
 801994c:	0758      	lsls	r0, r3, #29
 801994e:	d512      	bpl.n	8019976 <__swsetup_r+0x7a>
 8019950:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019952:	b141      	cbz	r1, 8019966 <__swsetup_r+0x6a>
 8019954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019958:	4299      	cmp	r1, r3
 801995a:	d002      	beq.n	8019962 <__swsetup_r+0x66>
 801995c:	4630      	mov	r0, r6
 801995e:	f7fb fc65 	bl	801522c <_free_r>
 8019962:	2300      	movs	r3, #0
 8019964:	6363      	str	r3, [r4, #52]	; 0x34
 8019966:	89a3      	ldrh	r3, [r4, #12]
 8019968:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801996c:	81a3      	strh	r3, [r4, #12]
 801996e:	2300      	movs	r3, #0
 8019970:	6063      	str	r3, [r4, #4]
 8019972:	6923      	ldr	r3, [r4, #16]
 8019974:	6023      	str	r3, [r4, #0]
 8019976:	89a3      	ldrh	r3, [r4, #12]
 8019978:	f043 0308 	orr.w	r3, r3, #8
 801997c:	81a3      	strh	r3, [r4, #12]
 801997e:	6923      	ldr	r3, [r4, #16]
 8019980:	b94b      	cbnz	r3, 8019996 <__swsetup_r+0x9a>
 8019982:	89a3      	ldrh	r3, [r4, #12]
 8019984:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801998c:	d003      	beq.n	8019996 <__swsetup_r+0x9a>
 801998e:	4621      	mov	r1, r4
 8019990:	4630      	mov	r0, r6
 8019992:	f000 f84d 	bl	8019a30 <__smakebuf_r>
 8019996:	89a0      	ldrh	r0, [r4, #12]
 8019998:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801999c:	f010 0301 	ands.w	r3, r0, #1
 80199a0:	d00a      	beq.n	80199b8 <__swsetup_r+0xbc>
 80199a2:	2300      	movs	r3, #0
 80199a4:	60a3      	str	r3, [r4, #8]
 80199a6:	6963      	ldr	r3, [r4, #20]
 80199a8:	425b      	negs	r3, r3
 80199aa:	61a3      	str	r3, [r4, #24]
 80199ac:	6923      	ldr	r3, [r4, #16]
 80199ae:	b943      	cbnz	r3, 80199c2 <__swsetup_r+0xc6>
 80199b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80199b4:	d1ba      	bne.n	801992c <__swsetup_r+0x30>
 80199b6:	bd70      	pop	{r4, r5, r6, pc}
 80199b8:	0781      	lsls	r1, r0, #30
 80199ba:	bf58      	it	pl
 80199bc:	6963      	ldrpl	r3, [r4, #20]
 80199be:	60a3      	str	r3, [r4, #8]
 80199c0:	e7f4      	b.n	80199ac <__swsetup_r+0xb0>
 80199c2:	2000      	movs	r0, #0
 80199c4:	e7f7      	b.n	80199b6 <__swsetup_r+0xba>
 80199c6:	bf00      	nop
 80199c8:	20000244 	.word	0x20000244
 80199cc:	0801b76c 	.word	0x0801b76c
 80199d0:	0801b78c 	.word	0x0801b78c
 80199d4:	0801b74c 	.word	0x0801b74c

080199d8 <abort>:
 80199d8:	b508      	push	{r3, lr}
 80199da:	2006      	movs	r0, #6
 80199dc:	f000 f898 	bl	8019b10 <raise>
 80199e0:	2001      	movs	r0, #1
 80199e2:	f7ed fb79 	bl	80070d8 <_exit>

080199e6 <__swhatbuf_r>:
 80199e6:	b570      	push	{r4, r5, r6, lr}
 80199e8:	460e      	mov	r6, r1
 80199ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80199ee:	2900      	cmp	r1, #0
 80199f0:	b096      	sub	sp, #88	; 0x58
 80199f2:	4614      	mov	r4, r2
 80199f4:	461d      	mov	r5, r3
 80199f6:	da07      	bge.n	8019a08 <__swhatbuf_r+0x22>
 80199f8:	2300      	movs	r3, #0
 80199fa:	602b      	str	r3, [r5, #0]
 80199fc:	89b3      	ldrh	r3, [r6, #12]
 80199fe:	061a      	lsls	r2, r3, #24
 8019a00:	d410      	bmi.n	8019a24 <__swhatbuf_r+0x3e>
 8019a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019a06:	e00e      	b.n	8019a26 <__swhatbuf_r+0x40>
 8019a08:	466a      	mov	r2, sp
 8019a0a:	f000 f89d 	bl	8019b48 <_fstat_r>
 8019a0e:	2800      	cmp	r0, #0
 8019a10:	dbf2      	blt.n	80199f8 <__swhatbuf_r+0x12>
 8019a12:	9a01      	ldr	r2, [sp, #4]
 8019a14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019a18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019a1c:	425a      	negs	r2, r3
 8019a1e:	415a      	adcs	r2, r3
 8019a20:	602a      	str	r2, [r5, #0]
 8019a22:	e7ee      	b.n	8019a02 <__swhatbuf_r+0x1c>
 8019a24:	2340      	movs	r3, #64	; 0x40
 8019a26:	2000      	movs	r0, #0
 8019a28:	6023      	str	r3, [r4, #0]
 8019a2a:	b016      	add	sp, #88	; 0x58
 8019a2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08019a30 <__smakebuf_r>:
 8019a30:	898b      	ldrh	r3, [r1, #12]
 8019a32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019a34:	079d      	lsls	r5, r3, #30
 8019a36:	4606      	mov	r6, r0
 8019a38:	460c      	mov	r4, r1
 8019a3a:	d507      	bpl.n	8019a4c <__smakebuf_r+0x1c>
 8019a3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019a40:	6023      	str	r3, [r4, #0]
 8019a42:	6123      	str	r3, [r4, #16]
 8019a44:	2301      	movs	r3, #1
 8019a46:	6163      	str	r3, [r4, #20]
 8019a48:	b002      	add	sp, #8
 8019a4a:	bd70      	pop	{r4, r5, r6, pc}
 8019a4c:	ab01      	add	r3, sp, #4
 8019a4e:	466a      	mov	r2, sp
 8019a50:	f7ff ffc9 	bl	80199e6 <__swhatbuf_r>
 8019a54:	9900      	ldr	r1, [sp, #0]
 8019a56:	4605      	mov	r5, r0
 8019a58:	4630      	mov	r0, r6
 8019a5a:	f7fb fc37 	bl	80152cc <_malloc_r>
 8019a5e:	b948      	cbnz	r0, 8019a74 <__smakebuf_r+0x44>
 8019a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a64:	059a      	lsls	r2, r3, #22
 8019a66:	d4ef      	bmi.n	8019a48 <__smakebuf_r+0x18>
 8019a68:	f023 0303 	bic.w	r3, r3, #3
 8019a6c:	f043 0302 	orr.w	r3, r3, #2
 8019a70:	81a3      	strh	r3, [r4, #12]
 8019a72:	e7e3      	b.n	8019a3c <__smakebuf_r+0xc>
 8019a74:	4b0d      	ldr	r3, [pc, #52]	; (8019aac <__smakebuf_r+0x7c>)
 8019a76:	62b3      	str	r3, [r6, #40]	; 0x28
 8019a78:	89a3      	ldrh	r3, [r4, #12]
 8019a7a:	6020      	str	r0, [r4, #0]
 8019a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019a80:	81a3      	strh	r3, [r4, #12]
 8019a82:	9b00      	ldr	r3, [sp, #0]
 8019a84:	6163      	str	r3, [r4, #20]
 8019a86:	9b01      	ldr	r3, [sp, #4]
 8019a88:	6120      	str	r0, [r4, #16]
 8019a8a:	b15b      	cbz	r3, 8019aa4 <__smakebuf_r+0x74>
 8019a8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019a90:	4630      	mov	r0, r6
 8019a92:	f000 f86b 	bl	8019b6c <_isatty_r>
 8019a96:	b128      	cbz	r0, 8019aa4 <__smakebuf_r+0x74>
 8019a98:	89a3      	ldrh	r3, [r4, #12]
 8019a9a:	f023 0303 	bic.w	r3, r3, #3
 8019a9e:	f043 0301 	orr.w	r3, r3, #1
 8019aa2:	81a3      	strh	r3, [r4, #12]
 8019aa4:	89a0      	ldrh	r0, [r4, #12]
 8019aa6:	4305      	orrs	r5, r0
 8019aa8:	81a5      	strh	r5, [r4, #12]
 8019aaa:	e7cd      	b.n	8019a48 <__smakebuf_r+0x18>
 8019aac:	08019359 	.word	0x08019359

08019ab0 <_malloc_usable_size_r>:
 8019ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019ab4:	1f18      	subs	r0, r3, #4
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	bfbc      	itt	lt
 8019aba:	580b      	ldrlt	r3, [r1, r0]
 8019abc:	18c0      	addlt	r0, r0, r3
 8019abe:	4770      	bx	lr

08019ac0 <_raise_r>:
 8019ac0:	291f      	cmp	r1, #31
 8019ac2:	b538      	push	{r3, r4, r5, lr}
 8019ac4:	4604      	mov	r4, r0
 8019ac6:	460d      	mov	r5, r1
 8019ac8:	d904      	bls.n	8019ad4 <_raise_r+0x14>
 8019aca:	2316      	movs	r3, #22
 8019acc:	6003      	str	r3, [r0, #0]
 8019ace:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019ad2:	bd38      	pop	{r3, r4, r5, pc}
 8019ad4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019ad6:	b112      	cbz	r2, 8019ade <_raise_r+0x1e>
 8019ad8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019adc:	b94b      	cbnz	r3, 8019af2 <_raise_r+0x32>
 8019ade:	4620      	mov	r0, r4
 8019ae0:	f000 f830 	bl	8019b44 <_getpid_r>
 8019ae4:	462a      	mov	r2, r5
 8019ae6:	4601      	mov	r1, r0
 8019ae8:	4620      	mov	r0, r4
 8019aea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019aee:	f000 b817 	b.w	8019b20 <_kill_r>
 8019af2:	2b01      	cmp	r3, #1
 8019af4:	d00a      	beq.n	8019b0c <_raise_r+0x4c>
 8019af6:	1c59      	adds	r1, r3, #1
 8019af8:	d103      	bne.n	8019b02 <_raise_r+0x42>
 8019afa:	2316      	movs	r3, #22
 8019afc:	6003      	str	r3, [r0, #0]
 8019afe:	2001      	movs	r0, #1
 8019b00:	e7e7      	b.n	8019ad2 <_raise_r+0x12>
 8019b02:	2400      	movs	r4, #0
 8019b04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019b08:	4628      	mov	r0, r5
 8019b0a:	4798      	blx	r3
 8019b0c:	2000      	movs	r0, #0
 8019b0e:	e7e0      	b.n	8019ad2 <_raise_r+0x12>

08019b10 <raise>:
 8019b10:	4b02      	ldr	r3, [pc, #8]	; (8019b1c <raise+0xc>)
 8019b12:	4601      	mov	r1, r0
 8019b14:	6818      	ldr	r0, [r3, #0]
 8019b16:	f7ff bfd3 	b.w	8019ac0 <_raise_r>
 8019b1a:	bf00      	nop
 8019b1c:	20000244 	.word	0x20000244

08019b20 <_kill_r>:
 8019b20:	b538      	push	{r3, r4, r5, lr}
 8019b22:	4d07      	ldr	r5, [pc, #28]	; (8019b40 <_kill_r+0x20>)
 8019b24:	2300      	movs	r3, #0
 8019b26:	4604      	mov	r4, r0
 8019b28:	4608      	mov	r0, r1
 8019b2a:	4611      	mov	r1, r2
 8019b2c:	602b      	str	r3, [r5, #0]
 8019b2e:	f7ed fac3 	bl	80070b8 <_kill>
 8019b32:	1c43      	adds	r3, r0, #1
 8019b34:	d102      	bne.n	8019b3c <_kill_r+0x1c>
 8019b36:	682b      	ldr	r3, [r5, #0]
 8019b38:	b103      	cbz	r3, 8019b3c <_kill_r+0x1c>
 8019b3a:	6023      	str	r3, [r4, #0]
 8019b3c:	bd38      	pop	{r3, r4, r5, pc}
 8019b3e:	bf00      	nop
 8019b40:	20008f10 	.word	0x20008f10

08019b44 <_getpid_r>:
 8019b44:	f7ed bab0 	b.w	80070a8 <_getpid>

08019b48 <_fstat_r>:
 8019b48:	b538      	push	{r3, r4, r5, lr}
 8019b4a:	4d07      	ldr	r5, [pc, #28]	; (8019b68 <_fstat_r+0x20>)
 8019b4c:	2300      	movs	r3, #0
 8019b4e:	4604      	mov	r4, r0
 8019b50:	4608      	mov	r0, r1
 8019b52:	4611      	mov	r1, r2
 8019b54:	602b      	str	r3, [r5, #0]
 8019b56:	f7ed fb0e 	bl	8007176 <_fstat>
 8019b5a:	1c43      	adds	r3, r0, #1
 8019b5c:	d102      	bne.n	8019b64 <_fstat_r+0x1c>
 8019b5e:	682b      	ldr	r3, [r5, #0]
 8019b60:	b103      	cbz	r3, 8019b64 <_fstat_r+0x1c>
 8019b62:	6023      	str	r3, [r4, #0]
 8019b64:	bd38      	pop	{r3, r4, r5, pc}
 8019b66:	bf00      	nop
 8019b68:	20008f10 	.word	0x20008f10

08019b6c <_isatty_r>:
 8019b6c:	b538      	push	{r3, r4, r5, lr}
 8019b6e:	4d06      	ldr	r5, [pc, #24]	; (8019b88 <_isatty_r+0x1c>)
 8019b70:	2300      	movs	r3, #0
 8019b72:	4604      	mov	r4, r0
 8019b74:	4608      	mov	r0, r1
 8019b76:	602b      	str	r3, [r5, #0]
 8019b78:	f7ed fb0d 	bl	8007196 <_isatty>
 8019b7c:	1c43      	adds	r3, r0, #1
 8019b7e:	d102      	bne.n	8019b86 <_isatty_r+0x1a>
 8019b80:	682b      	ldr	r3, [r5, #0]
 8019b82:	b103      	cbz	r3, 8019b86 <_isatty_r+0x1a>
 8019b84:	6023      	str	r3, [r4, #0]
 8019b86:	bd38      	pop	{r3, r4, r5, pc}
 8019b88:	20008f10 	.word	0x20008f10

08019b8c <cosf>:
 8019b8c:	ee10 3a10 	vmov	r3, s0
 8019b90:	b507      	push	{r0, r1, r2, lr}
 8019b92:	4a1c      	ldr	r2, [pc, #112]	; (8019c04 <cosf+0x78>)
 8019b94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019b98:	4293      	cmp	r3, r2
 8019b9a:	dc04      	bgt.n	8019ba6 <cosf+0x1a>
 8019b9c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8019c08 <cosf+0x7c>
 8019ba0:	f000 f9b2 	bl	8019f08 <__kernel_cosf>
 8019ba4:	e004      	b.n	8019bb0 <cosf+0x24>
 8019ba6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019baa:	db04      	blt.n	8019bb6 <cosf+0x2a>
 8019bac:	ee30 0a40 	vsub.f32	s0, s0, s0
 8019bb0:	b003      	add	sp, #12
 8019bb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8019bb6:	4668      	mov	r0, sp
 8019bb8:	f000 f86a 	bl	8019c90 <__ieee754_rem_pio2f>
 8019bbc:	f000 0003 	and.w	r0, r0, #3
 8019bc0:	2801      	cmp	r0, #1
 8019bc2:	d007      	beq.n	8019bd4 <cosf+0x48>
 8019bc4:	2802      	cmp	r0, #2
 8019bc6:	d00e      	beq.n	8019be6 <cosf+0x5a>
 8019bc8:	b9a0      	cbnz	r0, 8019bf4 <cosf+0x68>
 8019bca:	eddd 0a01 	vldr	s1, [sp, #4]
 8019bce:	ed9d 0a00 	vldr	s0, [sp]
 8019bd2:	e7e5      	b.n	8019ba0 <cosf+0x14>
 8019bd4:	eddd 0a01 	vldr	s1, [sp, #4]
 8019bd8:	ed9d 0a00 	vldr	s0, [sp]
 8019bdc:	f000 fc7e 	bl	801a4dc <__kernel_sinf>
 8019be0:	eeb1 0a40 	vneg.f32	s0, s0
 8019be4:	e7e4      	b.n	8019bb0 <cosf+0x24>
 8019be6:	eddd 0a01 	vldr	s1, [sp, #4]
 8019bea:	ed9d 0a00 	vldr	s0, [sp]
 8019bee:	f000 f98b 	bl	8019f08 <__kernel_cosf>
 8019bf2:	e7f5      	b.n	8019be0 <cosf+0x54>
 8019bf4:	eddd 0a01 	vldr	s1, [sp, #4]
 8019bf8:	ed9d 0a00 	vldr	s0, [sp]
 8019bfc:	2001      	movs	r0, #1
 8019bfe:	f000 fc6d 	bl	801a4dc <__kernel_sinf>
 8019c02:	e7d5      	b.n	8019bb0 <cosf+0x24>
 8019c04:	3f490fd8 	.word	0x3f490fd8
 8019c08:	00000000 	.word	0x00000000

08019c0c <sinf>:
 8019c0c:	ee10 3a10 	vmov	r3, s0
 8019c10:	b507      	push	{r0, r1, r2, lr}
 8019c12:	4a1d      	ldr	r2, [pc, #116]	; (8019c88 <sinf+0x7c>)
 8019c14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019c18:	4293      	cmp	r3, r2
 8019c1a:	dc05      	bgt.n	8019c28 <sinf+0x1c>
 8019c1c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8019c8c <sinf+0x80>
 8019c20:	2000      	movs	r0, #0
 8019c22:	f000 fc5b 	bl	801a4dc <__kernel_sinf>
 8019c26:	e004      	b.n	8019c32 <sinf+0x26>
 8019c28:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019c2c:	db04      	blt.n	8019c38 <sinf+0x2c>
 8019c2e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8019c32:	b003      	add	sp, #12
 8019c34:	f85d fb04 	ldr.w	pc, [sp], #4
 8019c38:	4668      	mov	r0, sp
 8019c3a:	f000 f829 	bl	8019c90 <__ieee754_rem_pio2f>
 8019c3e:	f000 0003 	and.w	r0, r0, #3
 8019c42:	2801      	cmp	r0, #1
 8019c44:	d008      	beq.n	8019c58 <sinf+0x4c>
 8019c46:	2802      	cmp	r0, #2
 8019c48:	d00d      	beq.n	8019c66 <sinf+0x5a>
 8019c4a:	b9b0      	cbnz	r0, 8019c7a <sinf+0x6e>
 8019c4c:	eddd 0a01 	vldr	s1, [sp, #4]
 8019c50:	ed9d 0a00 	vldr	s0, [sp]
 8019c54:	2001      	movs	r0, #1
 8019c56:	e7e4      	b.n	8019c22 <sinf+0x16>
 8019c58:	eddd 0a01 	vldr	s1, [sp, #4]
 8019c5c:	ed9d 0a00 	vldr	s0, [sp]
 8019c60:	f000 f952 	bl	8019f08 <__kernel_cosf>
 8019c64:	e7e5      	b.n	8019c32 <sinf+0x26>
 8019c66:	eddd 0a01 	vldr	s1, [sp, #4]
 8019c6a:	ed9d 0a00 	vldr	s0, [sp]
 8019c6e:	2001      	movs	r0, #1
 8019c70:	f000 fc34 	bl	801a4dc <__kernel_sinf>
 8019c74:	eeb1 0a40 	vneg.f32	s0, s0
 8019c78:	e7db      	b.n	8019c32 <sinf+0x26>
 8019c7a:	eddd 0a01 	vldr	s1, [sp, #4]
 8019c7e:	ed9d 0a00 	vldr	s0, [sp]
 8019c82:	f000 f941 	bl	8019f08 <__kernel_cosf>
 8019c86:	e7f5      	b.n	8019c74 <sinf+0x68>
 8019c88:	3f490fd8 	.word	0x3f490fd8
 8019c8c:	00000000 	.word	0x00000000

08019c90 <__ieee754_rem_pio2f>:
 8019c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c92:	ee10 6a10 	vmov	r6, s0
 8019c96:	4b8e      	ldr	r3, [pc, #568]	; (8019ed0 <__ieee754_rem_pio2f+0x240>)
 8019c98:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8019c9c:	429d      	cmp	r5, r3
 8019c9e:	b087      	sub	sp, #28
 8019ca0:	eef0 7a40 	vmov.f32	s15, s0
 8019ca4:	4604      	mov	r4, r0
 8019ca6:	dc05      	bgt.n	8019cb4 <__ieee754_rem_pio2f+0x24>
 8019ca8:	2300      	movs	r3, #0
 8019caa:	ed80 0a00 	vstr	s0, [r0]
 8019cae:	6043      	str	r3, [r0, #4]
 8019cb0:	2000      	movs	r0, #0
 8019cb2:	e01a      	b.n	8019cea <__ieee754_rem_pio2f+0x5a>
 8019cb4:	4b87      	ldr	r3, [pc, #540]	; (8019ed4 <__ieee754_rem_pio2f+0x244>)
 8019cb6:	429d      	cmp	r5, r3
 8019cb8:	dc46      	bgt.n	8019d48 <__ieee754_rem_pio2f+0xb8>
 8019cba:	2e00      	cmp	r6, #0
 8019cbc:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8019ed8 <__ieee754_rem_pio2f+0x248>
 8019cc0:	4b86      	ldr	r3, [pc, #536]	; (8019edc <__ieee754_rem_pio2f+0x24c>)
 8019cc2:	f025 050f 	bic.w	r5, r5, #15
 8019cc6:	dd1f      	ble.n	8019d08 <__ieee754_rem_pio2f+0x78>
 8019cc8:	429d      	cmp	r5, r3
 8019cca:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019cce:	d00e      	beq.n	8019cee <__ieee754_rem_pio2f+0x5e>
 8019cd0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8019ee0 <__ieee754_rem_pio2f+0x250>
 8019cd4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8019cd8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019cdc:	ed80 0a00 	vstr	s0, [r0]
 8019ce0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019ce4:	2001      	movs	r0, #1
 8019ce6:	edc4 7a01 	vstr	s15, [r4, #4]
 8019cea:	b007      	add	sp, #28
 8019cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019cee:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8019ee4 <__ieee754_rem_pio2f+0x254>
 8019cf2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8019ee8 <__ieee754_rem_pio2f+0x258>
 8019cf6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019cfa:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8019cfe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019d02:	edc0 6a00 	vstr	s13, [r0]
 8019d06:	e7eb      	b.n	8019ce0 <__ieee754_rem_pio2f+0x50>
 8019d08:	429d      	cmp	r5, r3
 8019d0a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019d0e:	d00e      	beq.n	8019d2e <__ieee754_rem_pio2f+0x9e>
 8019d10:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8019ee0 <__ieee754_rem_pio2f+0x250>
 8019d14:	ee37 0a87 	vadd.f32	s0, s15, s14
 8019d18:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019d1c:	ed80 0a00 	vstr	s0, [r0]
 8019d20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019d28:	edc4 7a01 	vstr	s15, [r4, #4]
 8019d2c:	e7dd      	b.n	8019cea <__ieee754_rem_pio2f+0x5a>
 8019d2e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8019ee4 <__ieee754_rem_pio2f+0x254>
 8019d32:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8019ee8 <__ieee754_rem_pio2f+0x258>
 8019d36:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019d3a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8019d3e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019d42:	edc0 6a00 	vstr	s13, [r0]
 8019d46:	e7eb      	b.n	8019d20 <__ieee754_rem_pio2f+0x90>
 8019d48:	4b68      	ldr	r3, [pc, #416]	; (8019eec <__ieee754_rem_pio2f+0x25c>)
 8019d4a:	429d      	cmp	r5, r3
 8019d4c:	dc72      	bgt.n	8019e34 <__ieee754_rem_pio2f+0x1a4>
 8019d4e:	f000 fc0d 	bl	801a56c <fabsf>
 8019d52:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8019ef0 <__ieee754_rem_pio2f+0x260>
 8019d56:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019d5a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019d5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019d62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019d66:	ee17 0a90 	vmov	r0, s15
 8019d6a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8019ed8 <__ieee754_rem_pio2f+0x248>
 8019d6e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8019d72:	281f      	cmp	r0, #31
 8019d74:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8019ee0 <__ieee754_rem_pio2f+0x250>
 8019d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019d7c:	eeb1 6a47 	vneg.f32	s12, s14
 8019d80:	ee70 6a67 	vsub.f32	s13, s0, s15
 8019d84:	ee16 2a90 	vmov	r2, s13
 8019d88:	dc1c      	bgt.n	8019dc4 <__ieee754_rem_pio2f+0x134>
 8019d8a:	495a      	ldr	r1, [pc, #360]	; (8019ef4 <__ieee754_rem_pio2f+0x264>)
 8019d8c:	1e47      	subs	r7, r0, #1
 8019d8e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8019d92:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8019d96:	428b      	cmp	r3, r1
 8019d98:	d014      	beq.n	8019dc4 <__ieee754_rem_pio2f+0x134>
 8019d9a:	6022      	str	r2, [r4, #0]
 8019d9c:	ed94 7a00 	vldr	s14, [r4]
 8019da0:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019da4:	2e00      	cmp	r6, #0
 8019da6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019daa:	ed84 0a01 	vstr	s0, [r4, #4]
 8019dae:	da9c      	bge.n	8019cea <__ieee754_rem_pio2f+0x5a>
 8019db0:	eeb1 7a47 	vneg.f32	s14, s14
 8019db4:	eeb1 0a40 	vneg.f32	s0, s0
 8019db8:	ed84 7a00 	vstr	s14, [r4]
 8019dbc:	ed84 0a01 	vstr	s0, [r4, #4]
 8019dc0:	4240      	negs	r0, r0
 8019dc2:	e792      	b.n	8019cea <__ieee754_rem_pio2f+0x5a>
 8019dc4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8019dc8:	15eb      	asrs	r3, r5, #23
 8019dca:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8019dce:	2d08      	cmp	r5, #8
 8019dd0:	dde3      	ble.n	8019d9a <__ieee754_rem_pio2f+0x10a>
 8019dd2:	eddf 7a44 	vldr	s15, [pc, #272]	; 8019ee4 <__ieee754_rem_pio2f+0x254>
 8019dd6:	eef0 6a40 	vmov.f32	s13, s0
 8019dda:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019dde:	ee30 0a66 	vsub.f32	s0, s0, s13
 8019de2:	eea6 0a27 	vfma.f32	s0, s12, s15
 8019de6:	eddf 7a40 	vldr	s15, [pc, #256]	; 8019ee8 <__ieee754_rem_pio2f+0x258>
 8019dea:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8019dee:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8019df2:	eef0 7a40 	vmov.f32	s15, s0
 8019df6:	ee15 2a90 	vmov	r2, s11
 8019dfa:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8019dfe:	1a5b      	subs	r3, r3, r1
 8019e00:	2b19      	cmp	r3, #25
 8019e02:	dc04      	bgt.n	8019e0e <__ieee754_rem_pio2f+0x17e>
 8019e04:	edc4 5a00 	vstr	s11, [r4]
 8019e08:	eeb0 0a66 	vmov.f32	s0, s13
 8019e0c:	e7c6      	b.n	8019d9c <__ieee754_rem_pio2f+0x10c>
 8019e0e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8019ef8 <__ieee754_rem_pio2f+0x268>
 8019e12:	eeb0 0a66 	vmov.f32	s0, s13
 8019e16:	eea6 0a25 	vfma.f32	s0, s12, s11
 8019e1a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8019e1e:	eddf 6a37 	vldr	s13, [pc, #220]	; 8019efc <__ieee754_rem_pio2f+0x26c>
 8019e22:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019e26:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8019e2a:	ee30 7a67 	vsub.f32	s14, s0, s15
 8019e2e:	ed84 7a00 	vstr	s14, [r4]
 8019e32:	e7b3      	b.n	8019d9c <__ieee754_rem_pio2f+0x10c>
 8019e34:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8019e38:	db06      	blt.n	8019e48 <__ieee754_rem_pio2f+0x1b8>
 8019e3a:	ee70 7a40 	vsub.f32	s15, s0, s0
 8019e3e:	edc0 7a01 	vstr	s15, [r0, #4]
 8019e42:	edc0 7a00 	vstr	s15, [r0]
 8019e46:	e733      	b.n	8019cb0 <__ieee754_rem_pio2f+0x20>
 8019e48:	15ea      	asrs	r2, r5, #23
 8019e4a:	3a86      	subs	r2, #134	; 0x86
 8019e4c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8019e50:	ee07 3a90 	vmov	s15, r3
 8019e54:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019e58:	eddf 6a29 	vldr	s13, [pc, #164]	; 8019f00 <__ieee754_rem_pio2f+0x270>
 8019e5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019e60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019e64:	ed8d 7a03 	vstr	s14, [sp, #12]
 8019e68:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019e6c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019e70:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019e74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019e78:	ed8d 7a04 	vstr	s14, [sp, #16]
 8019e7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019e80:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e88:	edcd 7a05 	vstr	s15, [sp, #20]
 8019e8c:	d11e      	bne.n	8019ecc <__ieee754_rem_pio2f+0x23c>
 8019e8e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8019e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e96:	bf14      	ite	ne
 8019e98:	2302      	movne	r3, #2
 8019e9a:	2301      	moveq	r3, #1
 8019e9c:	4919      	ldr	r1, [pc, #100]	; (8019f04 <__ieee754_rem_pio2f+0x274>)
 8019e9e:	9101      	str	r1, [sp, #4]
 8019ea0:	2102      	movs	r1, #2
 8019ea2:	9100      	str	r1, [sp, #0]
 8019ea4:	a803      	add	r0, sp, #12
 8019ea6:	4621      	mov	r1, r4
 8019ea8:	f000 f88e 	bl	8019fc8 <__kernel_rem_pio2f>
 8019eac:	2e00      	cmp	r6, #0
 8019eae:	f6bf af1c 	bge.w	8019cea <__ieee754_rem_pio2f+0x5a>
 8019eb2:	edd4 7a00 	vldr	s15, [r4]
 8019eb6:	eef1 7a67 	vneg.f32	s15, s15
 8019eba:	edc4 7a00 	vstr	s15, [r4]
 8019ebe:	edd4 7a01 	vldr	s15, [r4, #4]
 8019ec2:	eef1 7a67 	vneg.f32	s15, s15
 8019ec6:	edc4 7a01 	vstr	s15, [r4, #4]
 8019eca:	e779      	b.n	8019dc0 <__ieee754_rem_pio2f+0x130>
 8019ecc:	2303      	movs	r3, #3
 8019ece:	e7e5      	b.n	8019e9c <__ieee754_rem_pio2f+0x20c>
 8019ed0:	3f490fd8 	.word	0x3f490fd8
 8019ed4:	4016cbe3 	.word	0x4016cbe3
 8019ed8:	3fc90f80 	.word	0x3fc90f80
 8019edc:	3fc90fd0 	.word	0x3fc90fd0
 8019ee0:	37354443 	.word	0x37354443
 8019ee4:	37354400 	.word	0x37354400
 8019ee8:	2e85a308 	.word	0x2e85a308
 8019eec:	43490f80 	.word	0x43490f80
 8019ef0:	3f22f984 	.word	0x3f22f984
 8019ef4:	0801b7ac 	.word	0x0801b7ac
 8019ef8:	2e85a300 	.word	0x2e85a300
 8019efc:	248d3132 	.word	0x248d3132
 8019f00:	43800000 	.word	0x43800000
 8019f04:	0801b82c 	.word	0x0801b82c

08019f08 <__kernel_cosf>:
 8019f08:	ee10 3a10 	vmov	r3, s0
 8019f0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019f10:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8019f14:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8019f18:	da05      	bge.n	8019f26 <__kernel_cosf+0x1e>
 8019f1a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019f1e:	ee17 2a90 	vmov	r2, s15
 8019f22:	2a00      	cmp	r2, #0
 8019f24:	d03d      	beq.n	8019fa2 <__kernel_cosf+0x9a>
 8019f26:	ee60 5a00 	vmul.f32	s11, s0, s0
 8019f2a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8019fa8 <__kernel_cosf+0xa0>
 8019f2e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8019fac <__kernel_cosf+0xa4>
 8019f32:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8019fb0 <__kernel_cosf+0xa8>
 8019f36:	4a1f      	ldr	r2, [pc, #124]	; (8019fb4 <__kernel_cosf+0xac>)
 8019f38:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019f3c:	4293      	cmp	r3, r2
 8019f3e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8019fb8 <__kernel_cosf+0xb0>
 8019f42:	eee7 7a25 	vfma.f32	s15, s14, s11
 8019f46:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8019fbc <__kernel_cosf+0xb4>
 8019f4a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8019f4e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8019fc0 <__kernel_cosf+0xb8>
 8019f52:	eee7 7a25 	vfma.f32	s15, s14, s11
 8019f56:	eeb0 7a66 	vmov.f32	s14, s13
 8019f5a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8019f5e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8019f62:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8019f66:	ee67 6a25 	vmul.f32	s13, s14, s11
 8019f6a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8019f6e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8019f72:	dc04      	bgt.n	8019f7e <__kernel_cosf+0x76>
 8019f74:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8019f78:	ee36 0a47 	vsub.f32	s0, s12, s14
 8019f7c:	4770      	bx	lr
 8019f7e:	4a11      	ldr	r2, [pc, #68]	; (8019fc4 <__kernel_cosf+0xbc>)
 8019f80:	4293      	cmp	r3, r2
 8019f82:	bfda      	itte	le
 8019f84:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8019f88:	ee06 3a90 	vmovle	s13, r3
 8019f8c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8019f90:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019f94:	ee36 0a66 	vsub.f32	s0, s12, s13
 8019f98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019f9c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019fa0:	4770      	bx	lr
 8019fa2:	eeb0 0a46 	vmov.f32	s0, s12
 8019fa6:	4770      	bx	lr
 8019fa8:	ad47d74e 	.word	0xad47d74e
 8019fac:	310f74f6 	.word	0x310f74f6
 8019fb0:	3d2aaaab 	.word	0x3d2aaaab
 8019fb4:	3e999999 	.word	0x3e999999
 8019fb8:	b493f27c 	.word	0xb493f27c
 8019fbc:	37d00d01 	.word	0x37d00d01
 8019fc0:	bab60b61 	.word	0xbab60b61
 8019fc4:	3f480000 	.word	0x3f480000

08019fc8 <__kernel_rem_pio2f>:
 8019fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fcc:	ed2d 8b04 	vpush	{d8-d9}
 8019fd0:	b0d7      	sub	sp, #348	; 0x15c
 8019fd2:	4616      	mov	r6, r2
 8019fd4:	4698      	mov	r8, r3
 8019fd6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019fd8:	4bbb      	ldr	r3, [pc, #748]	; (801a2c8 <__kernel_rem_pio2f+0x300>)
 8019fda:	9001      	str	r0, [sp, #4]
 8019fdc:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8019fe0:	1d33      	adds	r3, r6, #4
 8019fe2:	460d      	mov	r5, r1
 8019fe4:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 8019fe8:	db29      	blt.n	801a03e <__kernel_rem_pio2f+0x76>
 8019fea:	1ef1      	subs	r1, r6, #3
 8019fec:	bf48      	it	mi
 8019fee:	1d31      	addmi	r1, r6, #4
 8019ff0:	10c9      	asrs	r1, r1, #3
 8019ff2:	1c4c      	adds	r4, r1, #1
 8019ff4:	00e3      	lsls	r3, r4, #3
 8019ff6:	9302      	str	r3, [sp, #8]
 8019ff8:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8019ffa:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 801a2d8 <__kernel_rem_pio2f+0x310>
 8019ffe:	eba1 0009 	sub.w	r0, r1, r9
 801a002:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 801a006:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 801a00a:	eb07 0c09 	add.w	ip, r7, r9
 801a00e:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 801a012:	2300      	movs	r3, #0
 801a014:	4563      	cmp	r3, ip
 801a016:	dd14      	ble.n	801a042 <__kernel_rem_pio2f+0x7a>
 801a018:	ab1a      	add	r3, sp, #104	; 0x68
 801a01a:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 801a01e:	46cc      	mov	ip, r9
 801a020:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 801a024:	f1c8 0b01 	rsb	fp, r8, #1
 801a028:	eb0b 020c 	add.w	r2, fp, ip
 801a02c:	4297      	cmp	r7, r2
 801a02e:	db27      	blt.n	801a080 <__kernel_rem_pio2f+0xb8>
 801a030:	f8dd e004 	ldr.w	lr, [sp, #4]
 801a034:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801a2d8 <__kernel_rem_pio2f+0x310>
 801a038:	4618      	mov	r0, r3
 801a03a:	2200      	movs	r2, #0
 801a03c:	e016      	b.n	801a06c <__kernel_rem_pio2f+0xa4>
 801a03e:	2100      	movs	r1, #0
 801a040:	e7d7      	b.n	8019ff2 <__kernel_rem_pio2f+0x2a>
 801a042:	42d8      	cmn	r0, r3
 801a044:	bf5d      	ittte	pl
 801a046:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 801a04a:	ee07 2a90 	vmovpl	s15, r2
 801a04e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801a052:	eef0 7a47 	vmovmi.f32	s15, s14
 801a056:	ecea 7a01 	vstmia	sl!, {s15}
 801a05a:	3301      	adds	r3, #1
 801a05c:	e7da      	b.n	801a014 <__kernel_rem_pio2f+0x4c>
 801a05e:	ecfe 6a01 	vldmia	lr!, {s13}
 801a062:	ed90 7a00 	vldr	s14, [r0]
 801a066:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a06a:	3201      	adds	r2, #1
 801a06c:	454a      	cmp	r2, r9
 801a06e:	f1a0 0004 	sub.w	r0, r0, #4
 801a072:	ddf4      	ble.n	801a05e <__kernel_rem_pio2f+0x96>
 801a074:	ecea 7a01 	vstmia	sl!, {s15}
 801a078:	3304      	adds	r3, #4
 801a07a:	f10c 0c01 	add.w	ip, ip, #1
 801a07e:	e7d3      	b.n	801a028 <__kernel_rem_pio2f+0x60>
 801a080:	ab06      	add	r3, sp, #24
 801a082:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 801a086:	9304      	str	r3, [sp, #16]
 801a088:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801a08a:	eddf 8a92 	vldr	s17, [pc, #584]	; 801a2d4 <__kernel_rem_pio2f+0x30c>
 801a08e:	ed9f 9a90 	vldr	s18, [pc, #576]	; 801a2d0 <__kernel_rem_pio2f+0x308>
 801a092:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801a096:	9303      	str	r3, [sp, #12]
 801a098:	46ba      	mov	sl, r7
 801a09a:	ab56      	add	r3, sp, #344	; 0x158
 801a09c:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801a0a0:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 801a0a4:	ab06      	add	r3, sp, #24
 801a0a6:	4618      	mov	r0, r3
 801a0a8:	4652      	mov	r2, sl
 801a0aa:	2a00      	cmp	r2, #0
 801a0ac:	dc51      	bgt.n	801a152 <__kernel_rem_pio2f+0x18a>
 801a0ae:	4620      	mov	r0, r4
 801a0b0:	9305      	str	r3, [sp, #20]
 801a0b2:	f7fc f81b 	bl	80160ec <scalbnf>
 801a0b6:	eeb0 8a40 	vmov.f32	s16, s0
 801a0ba:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801a0be:	ee28 0a00 	vmul.f32	s0, s16, s0
 801a0c2:	f000 fa5b 	bl	801a57c <floorf>
 801a0c6:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801a0ca:	eea0 8a67 	vfms.f32	s16, s0, s15
 801a0ce:	2c00      	cmp	r4, #0
 801a0d0:	9b05      	ldr	r3, [sp, #20]
 801a0d2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801a0d6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801a0da:	edcd 7a00 	vstr	s15, [sp]
 801a0de:	ee38 8a40 	vsub.f32	s16, s16, s0
 801a0e2:	dd4b      	ble.n	801a17c <__kernel_rem_pio2f+0x1b4>
 801a0e4:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 801a0e8:	aa06      	add	r2, sp, #24
 801a0ea:	f1c4 0e08 	rsb	lr, r4, #8
 801a0ee:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801a0f2:	ee17 1a90 	vmov	r1, s15
 801a0f6:	fa42 f00e 	asr.w	r0, r2, lr
 801a0fa:	4401      	add	r1, r0
 801a0fc:	9100      	str	r1, [sp, #0]
 801a0fe:	fa00 f00e 	lsl.w	r0, r0, lr
 801a102:	a906      	add	r1, sp, #24
 801a104:	1a12      	subs	r2, r2, r0
 801a106:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801a10a:	f1c4 0007 	rsb	r0, r4, #7
 801a10e:	fa42 fb00 	asr.w	fp, r2, r0
 801a112:	f1bb 0f00 	cmp.w	fp, #0
 801a116:	dd43      	ble.n	801a1a0 <__kernel_rem_pio2f+0x1d8>
 801a118:	9a00      	ldr	r2, [sp, #0]
 801a11a:	f04f 0e00 	mov.w	lr, #0
 801a11e:	3201      	adds	r2, #1
 801a120:	9200      	str	r2, [sp, #0]
 801a122:	4670      	mov	r0, lr
 801a124:	45f2      	cmp	sl, lr
 801a126:	dc6c      	bgt.n	801a202 <__kernel_rem_pio2f+0x23a>
 801a128:	2c00      	cmp	r4, #0
 801a12a:	dd04      	ble.n	801a136 <__kernel_rem_pio2f+0x16e>
 801a12c:	2c01      	cmp	r4, #1
 801a12e:	d079      	beq.n	801a224 <__kernel_rem_pio2f+0x25c>
 801a130:	2c02      	cmp	r4, #2
 801a132:	f000 8082 	beq.w	801a23a <__kernel_rem_pio2f+0x272>
 801a136:	f1bb 0f02 	cmp.w	fp, #2
 801a13a:	d131      	bne.n	801a1a0 <__kernel_rem_pio2f+0x1d8>
 801a13c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801a140:	ee30 8a48 	vsub.f32	s16, s0, s16
 801a144:	b360      	cbz	r0, 801a1a0 <__kernel_rem_pio2f+0x1d8>
 801a146:	4620      	mov	r0, r4
 801a148:	f7fb ffd0 	bl	80160ec <scalbnf>
 801a14c:	ee38 8a40 	vsub.f32	s16, s16, s0
 801a150:	e026      	b.n	801a1a0 <__kernel_rem_pio2f+0x1d8>
 801a152:	ee60 7a28 	vmul.f32	s15, s0, s17
 801a156:	3a01      	subs	r2, #1
 801a158:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a15c:	a942      	add	r1, sp, #264	; 0x108
 801a15e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a162:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801a166:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801a16a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a16e:	eca0 0a01 	vstmia	r0!, {s0}
 801a172:	ed9c 0a00 	vldr	s0, [ip]
 801a176:	ee37 0a80 	vadd.f32	s0, s15, s0
 801a17a:	e796      	b.n	801a0aa <__kernel_rem_pio2f+0xe2>
 801a17c:	d107      	bne.n	801a18e <__kernel_rem_pio2f+0x1c6>
 801a17e:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 801a182:	a906      	add	r1, sp, #24
 801a184:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801a188:	ea4f 2b22 	mov.w	fp, r2, asr #8
 801a18c:	e7c1      	b.n	801a112 <__kernel_rem_pio2f+0x14a>
 801a18e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a192:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801a196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a19a:	da2f      	bge.n	801a1fc <__kernel_rem_pio2f+0x234>
 801a19c:	f04f 0b00 	mov.w	fp, #0
 801a1a0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801a1a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1a8:	f040 8098 	bne.w	801a2dc <__kernel_rem_pio2f+0x314>
 801a1ac:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801a1b0:	469c      	mov	ip, r3
 801a1b2:	2200      	movs	r2, #0
 801a1b4:	45bc      	cmp	ip, r7
 801a1b6:	da48      	bge.n	801a24a <__kernel_rem_pio2f+0x282>
 801a1b8:	2a00      	cmp	r2, #0
 801a1ba:	d05f      	beq.n	801a27c <__kernel_rem_pio2f+0x2b4>
 801a1bc:	aa06      	add	r2, sp, #24
 801a1be:	3c08      	subs	r4, #8
 801a1c0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801a1c4:	2900      	cmp	r1, #0
 801a1c6:	d07d      	beq.n	801a2c4 <__kernel_rem_pio2f+0x2fc>
 801a1c8:	4620      	mov	r0, r4
 801a1ca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801a1ce:	9301      	str	r3, [sp, #4]
 801a1d0:	f7fb ff8c 	bl	80160ec <scalbnf>
 801a1d4:	9b01      	ldr	r3, [sp, #4]
 801a1d6:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 801a2d4 <__kernel_rem_pio2f+0x30c>
 801a1da:	4619      	mov	r1, r3
 801a1dc:	2900      	cmp	r1, #0
 801a1de:	f280 80af 	bge.w	801a340 <__kernel_rem_pio2f+0x378>
 801a1e2:	4618      	mov	r0, r3
 801a1e4:	2400      	movs	r4, #0
 801a1e6:	2800      	cmp	r0, #0
 801a1e8:	f2c0 80d0 	blt.w	801a38c <__kernel_rem_pio2f+0x3c4>
 801a1ec:	a942      	add	r1, sp, #264	; 0x108
 801a1ee:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 801a1f2:	4a36      	ldr	r2, [pc, #216]	; (801a2cc <__kernel_rem_pio2f+0x304>)
 801a1f4:	eddf 7a38 	vldr	s15, [pc, #224]	; 801a2d8 <__kernel_rem_pio2f+0x310>
 801a1f8:	2100      	movs	r1, #0
 801a1fa:	e0bb      	b.n	801a374 <__kernel_rem_pio2f+0x3ac>
 801a1fc:	f04f 0b02 	mov.w	fp, #2
 801a200:	e78a      	b.n	801a118 <__kernel_rem_pio2f+0x150>
 801a202:	681a      	ldr	r2, [r3, #0]
 801a204:	b948      	cbnz	r0, 801a21a <__kernel_rem_pio2f+0x252>
 801a206:	b11a      	cbz	r2, 801a210 <__kernel_rem_pio2f+0x248>
 801a208:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801a20c:	601a      	str	r2, [r3, #0]
 801a20e:	2201      	movs	r2, #1
 801a210:	f10e 0e01 	add.w	lr, lr, #1
 801a214:	3304      	adds	r3, #4
 801a216:	4610      	mov	r0, r2
 801a218:	e784      	b.n	801a124 <__kernel_rem_pio2f+0x15c>
 801a21a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801a21e:	601a      	str	r2, [r3, #0]
 801a220:	4602      	mov	r2, r0
 801a222:	e7f5      	b.n	801a210 <__kernel_rem_pio2f+0x248>
 801a224:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 801a228:	ab06      	add	r3, sp, #24
 801a22a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801a22e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a232:	aa06      	add	r2, sp, #24
 801a234:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 801a238:	e77d      	b.n	801a136 <__kernel_rem_pio2f+0x16e>
 801a23a:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 801a23e:	ab06      	add	r3, sp, #24
 801a240:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801a244:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a248:	e7f3      	b.n	801a232 <__kernel_rem_pio2f+0x26a>
 801a24a:	a906      	add	r1, sp, #24
 801a24c:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 801a250:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801a254:	4302      	orrs	r2, r0
 801a256:	e7ad      	b.n	801a1b4 <__kernel_rem_pio2f+0x1ec>
 801a258:	3001      	adds	r0, #1
 801a25a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801a25e:	2a00      	cmp	r2, #0
 801a260:	d0fa      	beq.n	801a258 <__kernel_rem_pio2f+0x290>
 801a262:	a91a      	add	r1, sp, #104	; 0x68
 801a264:	eb0a 0208 	add.w	r2, sl, r8
 801a268:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801a26c:	f10a 0301 	add.w	r3, sl, #1
 801a270:	eb0a 0100 	add.w	r1, sl, r0
 801a274:	4299      	cmp	r1, r3
 801a276:	da04      	bge.n	801a282 <__kernel_rem_pio2f+0x2ba>
 801a278:	468a      	mov	sl, r1
 801a27a:	e70e      	b.n	801a09a <__kernel_rem_pio2f+0xd2>
 801a27c:	9b04      	ldr	r3, [sp, #16]
 801a27e:	2001      	movs	r0, #1
 801a280:	e7eb      	b.n	801a25a <__kernel_rem_pio2f+0x292>
 801a282:	9803      	ldr	r0, [sp, #12]
 801a284:	f8dd c004 	ldr.w	ip, [sp, #4]
 801a288:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801a28c:	9000      	str	r0, [sp, #0]
 801a28e:	ee07 0a90 	vmov	s15, r0
 801a292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a296:	2000      	movs	r0, #0
 801a298:	ece2 7a01 	vstmia	r2!, {s15}
 801a29c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801a2d8 <__kernel_rem_pio2f+0x310>
 801a2a0:	4696      	mov	lr, r2
 801a2a2:	4548      	cmp	r0, r9
 801a2a4:	dd06      	ble.n	801a2b4 <__kernel_rem_pio2f+0x2ec>
 801a2a6:	a842      	add	r0, sp, #264	; 0x108
 801a2a8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801a2ac:	edc0 7a00 	vstr	s15, [r0]
 801a2b0:	3301      	adds	r3, #1
 801a2b2:	e7df      	b.n	801a274 <__kernel_rem_pio2f+0x2ac>
 801a2b4:	ecfc 6a01 	vldmia	ip!, {s13}
 801a2b8:	ed3e 7a01 	vldmdb	lr!, {s14}
 801a2bc:	3001      	adds	r0, #1
 801a2be:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a2c2:	e7ee      	b.n	801a2a2 <__kernel_rem_pio2f+0x2da>
 801a2c4:	3b01      	subs	r3, #1
 801a2c6:	e779      	b.n	801a1bc <__kernel_rem_pio2f+0x1f4>
 801a2c8:	0801bb70 	.word	0x0801bb70
 801a2cc:	0801bb44 	.word	0x0801bb44
 801a2d0:	43800000 	.word	0x43800000
 801a2d4:	3b800000 	.word	0x3b800000
 801a2d8:	00000000 	.word	0x00000000
 801a2dc:	9b02      	ldr	r3, [sp, #8]
 801a2de:	eeb0 0a48 	vmov.f32	s0, s16
 801a2e2:	1b98      	subs	r0, r3, r6
 801a2e4:	f7fb ff02 	bl	80160ec <scalbnf>
 801a2e8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801a2d0 <__kernel_rem_pio2f+0x308>
 801a2ec:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801a2f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2f4:	db1b      	blt.n	801a32e <__kernel_rem_pio2f+0x366>
 801a2f6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801a2d4 <__kernel_rem_pio2f+0x30c>
 801a2fa:	ee60 7a27 	vmul.f32	s15, s0, s15
 801a2fe:	aa06      	add	r2, sp, #24
 801a300:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a304:	a906      	add	r1, sp, #24
 801a306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a30a:	3408      	adds	r4, #8
 801a30c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801a310:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a314:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a318:	ee10 3a10 	vmov	r3, s0
 801a31c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801a320:	ee17 2a90 	vmov	r2, s15
 801a324:	f10a 0301 	add.w	r3, sl, #1
 801a328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801a32c:	e74c      	b.n	801a1c8 <__kernel_rem_pio2f+0x200>
 801a32e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a332:	aa06      	add	r2, sp, #24
 801a334:	ee10 3a10 	vmov	r3, s0
 801a338:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801a33c:	4653      	mov	r3, sl
 801a33e:	e743      	b.n	801a1c8 <__kernel_rem_pio2f+0x200>
 801a340:	aa42      	add	r2, sp, #264	; 0x108
 801a342:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801a346:	aa06      	add	r2, sp, #24
 801a348:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801a34c:	9201      	str	r2, [sp, #4]
 801a34e:	ee07 2a90 	vmov	s15, r2
 801a352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a356:	3901      	subs	r1, #1
 801a358:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a35c:	ee20 0a07 	vmul.f32	s0, s0, s14
 801a360:	edc0 7a00 	vstr	s15, [r0]
 801a364:	e73a      	b.n	801a1dc <__kernel_rem_pio2f+0x214>
 801a366:	ecf2 6a01 	vldmia	r2!, {s13}
 801a36a:	ecb6 7a01 	vldmia	r6!, {s14}
 801a36e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a372:	3101      	adds	r1, #1
 801a374:	42b9      	cmp	r1, r7
 801a376:	dc01      	bgt.n	801a37c <__kernel_rem_pio2f+0x3b4>
 801a378:	428c      	cmp	r4, r1
 801a37a:	daf4      	bge.n	801a366 <__kernel_rem_pio2f+0x39e>
 801a37c:	aa56      	add	r2, sp, #344	; 0x158
 801a37e:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 801a382:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801a386:	3801      	subs	r0, #1
 801a388:	3401      	adds	r4, #1
 801a38a:	e72c      	b.n	801a1e6 <__kernel_rem_pio2f+0x21e>
 801a38c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801a38e:	2a02      	cmp	r2, #2
 801a390:	dc0a      	bgt.n	801a3a8 <__kernel_rem_pio2f+0x3e0>
 801a392:	2a00      	cmp	r2, #0
 801a394:	dc61      	bgt.n	801a45a <__kernel_rem_pio2f+0x492>
 801a396:	d03c      	beq.n	801a412 <__kernel_rem_pio2f+0x44a>
 801a398:	9b00      	ldr	r3, [sp, #0]
 801a39a:	f003 0007 	and.w	r0, r3, #7
 801a39e:	b057      	add	sp, #348	; 0x15c
 801a3a0:	ecbd 8b04 	vpop	{d8-d9}
 801a3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3a8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801a3aa:	2a03      	cmp	r2, #3
 801a3ac:	d1f4      	bne.n	801a398 <__kernel_rem_pio2f+0x3d0>
 801a3ae:	aa2e      	add	r2, sp, #184	; 0xb8
 801a3b0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801a3b4:	4608      	mov	r0, r1
 801a3b6:	461c      	mov	r4, r3
 801a3b8:	2c00      	cmp	r4, #0
 801a3ba:	f1a0 0004 	sub.w	r0, r0, #4
 801a3be:	dc59      	bgt.n	801a474 <__kernel_rem_pio2f+0x4ac>
 801a3c0:	4618      	mov	r0, r3
 801a3c2:	2801      	cmp	r0, #1
 801a3c4:	f1a1 0104 	sub.w	r1, r1, #4
 801a3c8:	dc64      	bgt.n	801a494 <__kernel_rem_pio2f+0x4cc>
 801a3ca:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 801a2d8 <__kernel_rem_pio2f+0x310>
 801a3ce:	2b01      	cmp	r3, #1
 801a3d0:	dc70      	bgt.n	801a4b4 <__kernel_rem_pio2f+0x4ec>
 801a3d2:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 801a3d6:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801a3da:	f1bb 0f00 	cmp.w	fp, #0
 801a3de:	d172      	bne.n	801a4c6 <__kernel_rem_pio2f+0x4fe>
 801a3e0:	edc5 6a00 	vstr	s13, [r5]
 801a3e4:	ed85 7a01 	vstr	s14, [r5, #4]
 801a3e8:	edc5 7a02 	vstr	s15, [r5, #8]
 801a3ec:	e7d4      	b.n	801a398 <__kernel_rem_pio2f+0x3d0>
 801a3ee:	aa2e      	add	r2, sp, #184	; 0xb8
 801a3f0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801a3f4:	ed91 7a00 	vldr	s14, [r1]
 801a3f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a3fc:	3b01      	subs	r3, #1
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	daf5      	bge.n	801a3ee <__kernel_rem_pio2f+0x426>
 801a402:	f1bb 0f00 	cmp.w	fp, #0
 801a406:	d001      	beq.n	801a40c <__kernel_rem_pio2f+0x444>
 801a408:	eef1 7a67 	vneg.f32	s15, s15
 801a40c:	edc5 7a00 	vstr	s15, [r5]
 801a410:	e7c2      	b.n	801a398 <__kernel_rem_pio2f+0x3d0>
 801a412:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 801a2d8 <__kernel_rem_pio2f+0x310>
 801a416:	e7f2      	b.n	801a3fe <__kernel_rem_pio2f+0x436>
 801a418:	aa2e      	add	r2, sp, #184	; 0xb8
 801a41a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801a41e:	edd0 7a00 	vldr	s15, [r0]
 801a422:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a426:	3901      	subs	r1, #1
 801a428:	2900      	cmp	r1, #0
 801a42a:	daf5      	bge.n	801a418 <__kernel_rem_pio2f+0x450>
 801a42c:	f1bb 0f00 	cmp.w	fp, #0
 801a430:	d017      	beq.n	801a462 <__kernel_rem_pio2f+0x49a>
 801a432:	eef1 7a47 	vneg.f32	s15, s14
 801a436:	edc5 7a00 	vstr	s15, [r5]
 801a43a:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 801a43e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a442:	a82f      	add	r0, sp, #188	; 0xbc
 801a444:	2101      	movs	r1, #1
 801a446:	428b      	cmp	r3, r1
 801a448:	da0e      	bge.n	801a468 <__kernel_rem_pio2f+0x4a0>
 801a44a:	f1bb 0f00 	cmp.w	fp, #0
 801a44e:	d001      	beq.n	801a454 <__kernel_rem_pio2f+0x48c>
 801a450:	eef1 7a67 	vneg.f32	s15, s15
 801a454:	edc5 7a01 	vstr	s15, [r5, #4]
 801a458:	e79e      	b.n	801a398 <__kernel_rem_pio2f+0x3d0>
 801a45a:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 801a2d8 <__kernel_rem_pio2f+0x310>
 801a45e:	4619      	mov	r1, r3
 801a460:	e7e2      	b.n	801a428 <__kernel_rem_pio2f+0x460>
 801a462:	eef0 7a47 	vmov.f32	s15, s14
 801a466:	e7e6      	b.n	801a436 <__kernel_rem_pio2f+0x46e>
 801a468:	ecb0 7a01 	vldmia	r0!, {s14}
 801a46c:	3101      	adds	r1, #1
 801a46e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a472:	e7e8      	b.n	801a446 <__kernel_rem_pio2f+0x47e>
 801a474:	edd0 7a00 	vldr	s15, [r0]
 801a478:	edd0 6a01 	vldr	s13, [r0, #4]
 801a47c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801a480:	3c01      	subs	r4, #1
 801a482:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a486:	ed80 7a00 	vstr	s14, [r0]
 801a48a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a48e:	edc0 7a01 	vstr	s15, [r0, #4]
 801a492:	e791      	b.n	801a3b8 <__kernel_rem_pio2f+0x3f0>
 801a494:	edd1 7a00 	vldr	s15, [r1]
 801a498:	edd1 6a01 	vldr	s13, [r1, #4]
 801a49c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801a4a0:	3801      	subs	r0, #1
 801a4a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a4a6:	ed81 7a00 	vstr	s14, [r1]
 801a4aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a4ae:	edc1 7a01 	vstr	s15, [r1, #4]
 801a4b2:	e786      	b.n	801a3c2 <__kernel_rem_pio2f+0x3fa>
 801a4b4:	aa2e      	add	r2, sp, #184	; 0xb8
 801a4b6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801a4ba:	ed91 7a00 	vldr	s14, [r1]
 801a4be:	3b01      	subs	r3, #1
 801a4c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a4c4:	e783      	b.n	801a3ce <__kernel_rem_pio2f+0x406>
 801a4c6:	eef1 6a66 	vneg.f32	s13, s13
 801a4ca:	eeb1 7a47 	vneg.f32	s14, s14
 801a4ce:	edc5 6a00 	vstr	s13, [r5]
 801a4d2:	ed85 7a01 	vstr	s14, [r5, #4]
 801a4d6:	eef1 7a67 	vneg.f32	s15, s15
 801a4da:	e785      	b.n	801a3e8 <__kernel_rem_pio2f+0x420>

0801a4dc <__kernel_sinf>:
 801a4dc:	ee10 3a10 	vmov	r3, s0
 801a4e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a4e4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801a4e8:	da04      	bge.n	801a4f4 <__kernel_sinf+0x18>
 801a4ea:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a4ee:	ee17 3a90 	vmov	r3, s15
 801a4f2:	b35b      	cbz	r3, 801a54c <__kernel_sinf+0x70>
 801a4f4:	ee20 7a00 	vmul.f32	s14, s0, s0
 801a4f8:	eddf 7a15 	vldr	s15, [pc, #84]	; 801a550 <__kernel_sinf+0x74>
 801a4fc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801a554 <__kernel_sinf+0x78>
 801a500:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a504:	eddf 7a14 	vldr	s15, [pc, #80]	; 801a558 <__kernel_sinf+0x7c>
 801a508:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a50c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801a55c <__kernel_sinf+0x80>
 801a510:	eea7 6a87 	vfma.f32	s12, s15, s14
 801a514:	eddf 7a12 	vldr	s15, [pc, #72]	; 801a560 <__kernel_sinf+0x84>
 801a518:	ee60 6a07 	vmul.f32	s13, s0, s14
 801a51c:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a520:	b930      	cbnz	r0, 801a530 <__kernel_sinf+0x54>
 801a522:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801a564 <__kernel_sinf+0x88>
 801a526:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a52a:	eea6 0a26 	vfma.f32	s0, s12, s13
 801a52e:	4770      	bx	lr
 801a530:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801a534:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801a538:	eee0 7a86 	vfma.f32	s15, s1, s12
 801a53c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801a540:	eddf 7a09 	vldr	s15, [pc, #36]	; 801a568 <__kernel_sinf+0x8c>
 801a544:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801a548:	ee30 0a60 	vsub.f32	s0, s0, s1
 801a54c:	4770      	bx	lr
 801a54e:	bf00      	nop
 801a550:	2f2ec9d3 	.word	0x2f2ec9d3
 801a554:	b2d72f34 	.word	0xb2d72f34
 801a558:	3638ef1b 	.word	0x3638ef1b
 801a55c:	b9500d01 	.word	0xb9500d01
 801a560:	3c088889 	.word	0x3c088889
 801a564:	be2aaaab 	.word	0xbe2aaaab
 801a568:	3e2aaaab 	.word	0x3e2aaaab

0801a56c <fabsf>:
 801a56c:	ee10 3a10 	vmov	r3, s0
 801a570:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a574:	ee00 3a10 	vmov	s0, r3
 801a578:	4770      	bx	lr
	...

0801a57c <floorf>:
 801a57c:	ee10 3a10 	vmov	r3, s0
 801a580:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801a584:	3a7f      	subs	r2, #127	; 0x7f
 801a586:	2a16      	cmp	r2, #22
 801a588:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a58c:	dc2a      	bgt.n	801a5e4 <floorf+0x68>
 801a58e:	2a00      	cmp	r2, #0
 801a590:	da11      	bge.n	801a5b6 <floorf+0x3a>
 801a592:	eddf 7a18 	vldr	s15, [pc, #96]	; 801a5f4 <floorf+0x78>
 801a596:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a59a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a59e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5a2:	dd05      	ble.n	801a5b0 <floorf+0x34>
 801a5a4:	2b00      	cmp	r3, #0
 801a5a6:	da23      	bge.n	801a5f0 <floorf+0x74>
 801a5a8:	4a13      	ldr	r2, [pc, #76]	; (801a5f8 <floorf+0x7c>)
 801a5aa:	2900      	cmp	r1, #0
 801a5ac:	bf18      	it	ne
 801a5ae:	4613      	movne	r3, r2
 801a5b0:	ee00 3a10 	vmov	s0, r3
 801a5b4:	4770      	bx	lr
 801a5b6:	4911      	ldr	r1, [pc, #68]	; (801a5fc <floorf+0x80>)
 801a5b8:	4111      	asrs	r1, r2
 801a5ba:	420b      	tst	r3, r1
 801a5bc:	d0fa      	beq.n	801a5b4 <floorf+0x38>
 801a5be:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801a5f4 <floorf+0x78>
 801a5c2:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a5c6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a5ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5ce:	ddef      	ble.n	801a5b0 <floorf+0x34>
 801a5d0:	2b00      	cmp	r3, #0
 801a5d2:	bfbe      	ittt	lt
 801a5d4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801a5d8:	fa40 f202 	asrlt.w	r2, r0, r2
 801a5dc:	189b      	addlt	r3, r3, r2
 801a5de:	ea23 0301 	bic.w	r3, r3, r1
 801a5e2:	e7e5      	b.n	801a5b0 <floorf+0x34>
 801a5e4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801a5e8:	d3e4      	bcc.n	801a5b4 <floorf+0x38>
 801a5ea:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a5ee:	4770      	bx	lr
 801a5f0:	2300      	movs	r3, #0
 801a5f2:	e7dd      	b.n	801a5b0 <floorf+0x34>
 801a5f4:	7149f2ca 	.word	0x7149f2ca
 801a5f8:	bf800000 	.word	0xbf800000
 801a5fc:	007fffff 	.word	0x007fffff

0801a600 <_init>:
 801a600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a602:	bf00      	nop
 801a604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a606:	bc08      	pop	{r3}
 801a608:	469e      	mov	lr, r3
 801a60a:	4770      	bx	lr

0801a60c <_fini>:
 801a60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a60e:	bf00      	nop
 801a610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a612:	bc08      	pop	{r3}
 801a614:	469e      	mov	lr, r3
 801a616:	4770      	bx	lr
